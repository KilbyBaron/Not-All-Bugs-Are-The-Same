Summary,Issue key,Issue id,Parent id,Issue Type,Status,Project key,Project name,Project type,Project lead,Project description,Project url,Priority,Resolution,Assignee,Reporter,Creator,Created,Updated,Last Viewed,Resolved,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Fix Version/s,Fix Version/s,Fix Version/s,Component/s,Component/s,Component/s,Due Date,Votes,Description,Environment,Log Work,Original Estimate,Remaining Estimate,Time Spent,Work Ratio,Σ Original Estimate,Σ Remaining Estimate,Σ Time Spent,Security Level,Outward issue link (Duplicate),Outward issue link (Reference),Outward issue link (Regression),Outward issue link (Supercedes),Outward issue link (dependent),Outward issue link (dependent),Attachment,Attachment,Attachment,Attachment,Attachment,Custom field (Attachment count),Custom field (Blog - New Blog Administrators),Custom field (Blog - New Blog PMC),Custom field (Blog - Write access),Custom field (Blog Administrator?),Custom field (Blogs - Admin for blog),Custom field (Blogs - Email Address),Custom field (Blogs - Existing Blog Access Level),Custom field (Blogs - Existing Blog Name),Custom field (Blogs - New Blog Write Access),Custom field (Blogs - Username),Custom field (Bug Category),Custom field (Bugzilla - Email Notification Address),Custom field (Bugzilla - List of usernames),Custom field (Bugzilla - PMC Name),Custom field (Bugzilla - Project Name),Custom field (Bugzilla Id),Custom field (Change Category),Custom field (Complexity),Custom field (Date of First Response),Custom field (Discovered By),Custom field (Docs Text),Custom field (Enable Automatic Patch Review),Custom field (Epic Link),Custom field (Estimated Complexity),Custom field (Existing GitBox Approval),Custom field (External issue ID),Custom field (External issue URL),Custom field (Git Notification Mailing List),Custom field (Git Repository Import Path),Custom field (Git Repository Name),Custom field (Git Repository Type),Custom field (GitHub Options),Custom field (Github Integration),Custom field (Github Integrations - Other),Custom field (Global Rank),Custom field (INFRA - Subversion Repository Path),Custom field (Initial Confluence Contributors),Custom field (Last public comment date),Custom field (Machine Readable Info),Custom field (New-TLP-TLPName),Custom field (Patch Info),Custom field (Priority),Custom field (Project),Custom field (Protected Branch),Custom field (Rank),Custom field (Rank (Obsolete)),Custom field (Regression),Custom field (Severity),Custom field (Severity),Custom field (Space Description),Custom field (Space Key),Custom field (Space Name),Custom field (Test and Documentation Plan),Custom field (Testcase included),Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment
Camel-Mail: Alternative body part does not handle charset,CAMEL-2545,12486721,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,tide08,tide08,12/Mar/10 22:51,24/Apr/11 10:01,14/Mar/19 02:41,19/Mar/10 06:54,2.2.0,,,,,,,,,,2.3.0,,,camel-mail,,,,0,Mail component does not set charset for alternative body part. See - http://old.nabble.com/Camel-Mail:-Alternative-part-does-not-handle-charset--td27882178.html for more information.,All,,,,,,,,,,,,,,,,19/Mar/10 05:42;tide08;MailBinding.java;https://issues.apache.org/jira/secure/attachment/12463072/MailBinding.java,16/Mar/10 05:39;tide08;MimeMultipartAlternativeWithContentTypeTest.java;https://issues.apache.org/jira/secure/attachment/12463196/MimeMultipartAlternativeWithContentTypeTest.java,19/Mar/10 05:42;tide08;bindingpatch.txt;https://issues.apache.org/jira/secure/attachment/12463083/bindingpatch.txt,,,3.0,,,,,,,,,,,,,,,,,,,2010-03-16 06:34:17.465,,,no_permission,,,,,,,,,,,,,76494,,,Sun Apr 24 10:01:40 UTC 2011,,,Patch Available,,,,0|i01p8n:,7858,,,,,,,,,12/Mar/10 22:53;tide08;patch to set charset for alternative part. ,16/Mar/10 05:39;tide08;TestCase for content-type fix.,"16/Mar/10 06:34;njiang;@slad,
Can you create a patch based on the trunk code? As there is some change (CAMEL-2467) in the MailBinding.java.
 ",19/Mar/10 02:07;tide08;Applied patch to trunk version,"19/Mar/10 03:00;njiang;@slad,
Can you use diff to create the patch?
I copy the patched MailBinding.java into current trunk, there are some compile errors in the file.
So I doubt you've tested it.

If you want me to apply the patch quickly, please send the diff file, so I can easily tell which part change that you made. ","19/Mar/10 05:43;tide08;@willem

Sorry, I was using different logger, which was causing compilation issue. I have updated the source and also submitted the diff as you had requested.



Test Result:
----
Running org.apache.camel.component.mail.MimeMultipartAlternativeWithContentTypeTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.198 sec",19/Mar/10 06:54;njiang;Applied patch with thanks to slad.,24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Application SOAP 12 fault support in camel-cxf PAYLOAD mode,CAMEL-2544,12486478,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,wtam,wtam,wtam,12/Mar/10 19:22,24/Apr/11 10:00,14/Mar/19 02:42,12/Mar/10 20:36,,,,,,,,,,,2.3.0,,,,,,,0,This issue is related to https://issues.apache.org/activemq/browse/CAMEL-2495.  We need to make sure SOAP 1.2 Fault works.,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-04-24 10:00:54.738,,,no_permission,,,,,,,,,,,,,76495,,,Sun Apr 24 10:00:54 UTC 2011,,,,,,,0|i01p8f:,7857,,,,,,,,,"12/Mar/10 20:36;wtam;Committed revision 922420.
",24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
async route not working with Mina,CAMEL-2540,12486602,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,skusma@arccorp.com,skusma@arccorp.com,11/Mar/10 15:33,24/Apr/11 10:01,14/Mar/19 02:42,22/Mar/10 09:28,2.2.0,,,,,,,,,,2.3.0,,,camel-core,camel-mina,,,0,"here is my route:

		from(""mina:tcp://localhost:6202?textline=true&sync=true"").process(new Processor() {
		    public void process(Exchange exchange) throws Exception {
		        String body = exchange.getIn().getBody(String.class);
				Thread.sleep(5000);
		        exchange.getOut().setBody(""Bye 1"" + body);
		    }
		});
		
		from(""file:///test/test/response"")
		.convertBodyTo(String.class)//.threads(1)
		.toAsync(""mina:tcp://localhost:6202?sync=true&textline=true"",10)
		.to(""log:+++ reply++++""); 

here is the output, you can see all reply logs have a same message body and async process is releasing all threads at the first response, this is probably Mina component bug in the context of aync route.


2010-03-11 10:21:16,405 [Camel thread 11: FileComponent] FileConsumer                   DEBUG Total 3 files to consume
2010-03-11 10:21:16,405 [Camel thread 11: FileComponent] FileConsumer                   DEBUG About to process file: GenericFile[C:\test\test\response\Copy (2) of New Text Document (3).txt] using exchange: Exchange[GenericFileMessage with file: GenericFile[C:\test\test\response\Copy (2) of New Text Document (3).txt]]
2010-03-11 10:21:16,452 [Camel thread 11: FileComponent] DefaultManagementAgent         DEBUG Registered MBean with objectname: org.apache.camel:context=tamlft0spj1/cameltest,type=producers,name=MinaProducer(0x2e6c66)
2010-03-11 10:21:16,452 [Camel thread 11: FileComponent] MinaProducer                   DEBUG Starting producer: Producer[mina://tcp://localhost:6202?sync=true&textline=true]
2010-03-11 10:21:16,452 [Camel thread 11: FileComponent] ProducerCache                  DEBUG Adding to producer service pool with key: Endpoint[mina://tcp://localhost:6202?sync=true&textline=true] for producer: Producer[mina://tcp://localhost:6202?sync=true&textline=true]
2010-03-11 10:21:16,452 [2: SendAsyncProcessor-Producer] MinaProducer                   DEBUG Creating connector to address: localhost/127.0.0.1:6202 using connector: org.apache.mina.transport.socket.nio.SocketConnector@16cefa8 timeout: 30000 millis.
2010-03-11 10:21:16,452 [Camel thread 11: FileComponent] FileConsumer                   DEBUG About to process file: GenericFile[C:\test\test\response\Copy of New Text Document (3).txt] using exchange: Exchange[GenericFileMessage with file: GenericFile[C:\test\test\response\Copy of New Text Document (3).txt]]
2010-03-11 10:21:16,467 [3: SendAsyncProcessor-Producer] MinaProducer                   DEBUG Creating connector to address: localhost/127.0.0.1:6202 using connector: org.apache.mina.transport.socket.nio.SocketConnector@16cefa8 timeout: 30000 millis.
2010-03-11 10:21:16,467 [Camel thread 11: FileComponent] FileConsumer                   DEBUG About to process file: GenericFile[C:\test\test\response\New Text Document (3).txt] using exchange: Exchange[GenericFileMessage with file: GenericFile[C:\test\test\response\New Text Document (3).txt]]
2010-03-11 10:21:16,467 [4: SendAsyncProcessor-Producer] MinaProducer                   DEBUG Creating connector to address: localhost/127.0.0.1:6202 using connector: org.apache.mina.transport.socket.nio.SocketConnector@16cefa8 timeout: 30000 millis.
2010-03-11 10:21:16,499 [SocketConnectorIoProcessor-0.1] ExecutorFilter                 DEBUG Launching thread for localhost/127.0.0.1:6202
2010-03-11 10:21:16,499 [ SocketAcceptorIoProcessor-0.0] ExecutorFilter                 DEBUG Launching thread for /127.0.0.1:3362
2010-03-11 10:21:16,499 [ SocketAcceptorIoProcessor-0.1] ExecutorFilter                 DEBUG Launching thread for /127.0.0.1:3363
2010-03-11 10:21:16,499 [SocketConnectorIoProcessor-0.0] ExecutorFilter                 DEBUG Launching thread for localhost/127.0.0.1:6202
2010-03-11 10:21:16,499 [ SocketAcceptorIoProcessor-0.2] ExecutorFilter                 DEBUG Launching thread for /127.0.0.1:3374
2010-03-11 10:21:16,499 [SocketConnectorIoProcessor-0.2] ExecutorFilter                 DEBUG Launching thread for localhost/127.0.0.1:6202
2010-03-11 10:21:16,514 [amel thread 22: MinaThreadPool] ExecutorFilter                 DEBUG Exiting since queue is empty for /127.0.0.1:3363
2010-03-11 10:21:16,514 [amel thread 24: MinaThreadPool] ExecutorFilter                 DEBUG Exiting since queue is empty for /127.0.0.1:3362
2010-03-11 10:21:16,514 [amel thread 23: MinaThreadPool] ExecutorFilter                 DEBUG Exiting since queue is empty for localhost/127.0.0.1:6202
2010-03-11 10:21:16,514 [2: SendAsyncProcessor-Producer] MinaProducer                   DEBUG Writing body : hello2
2010-03-11 10:21:16,514 [3: SendAsyncProcessor-Producer] MinaProducer                   DEBUG Writing body : hello3
2010-03-11 10:21:16,514 [amel thread 26: MinaThreadPool] ExecutorFilter                 DEBUG Exiting since queue is empty for /127.0.0.1:3374
2010-03-11 10:21:16,514 [amel thread 25: MinaThreadPool] ExecutorFilter                 DEBUG Exiting since queue is empty for localhost/127.0.0.1:6202
2010-03-11 10:21:16,514 [amel thread 27: MinaThreadPool] ExecutorFilter                 DEBUG Exiting since queue is empty for localhost/127.0.0.1:6202
2010-03-11 10:21:16,514 [4: SendAsyncProcessor-Producer] MinaProducer                   DEBUG Writing body : hello1
2010-03-11 10:21:16,514 [SocketConnectorIoProcessor-0.2] ExecutorFilter                 DEBUG Launching thread for localhost/127.0.0.1:6202
2010-03-11 10:21:16,514 [3: SendAsyncProcessor-Producer] MinaProducer                   DEBUG Waiting for response
2010-03-11 10:21:16,530 [2: SendAsyncProcessor-Producer] MinaProducer                   DEBUG Waiting for response
2010-03-11 10:21:16,530 [4: SendAsyncProcessor-Producer] MinaProducer                   DEBUG Waiting for response
2010-03-11 10:21:16,530 [ SocketAcceptorIoProcessor-0.2] ExecutorFilter                 DEBUG Launching thread for /127.0.0.1:3374
2010-03-11 10:21:16,530 [amel thread 27: MinaThreadPool] ExecutorFilter                 DEBUG Exiting since queue is empty for localhost/127.0.0.1:6202
2010-03-11 10:21:16,530 [amel thread 26: MinaThreadPool] MinaConsumer                   DEBUG Received body: hello2
2010-03-11 10:21:21,530 [amel thread 26: MinaThreadPool] MinaConsumer                   DEBUG Writing body: Bye 1hello2
2010-03-11 10:21:21,530 [SocketConnectorIoProcessor-0.2] ExecutorFilter                 DEBUG Launching thread for localhost/127.0.0.1:6202
2010-03-11 10:21:21,530 [amel thread 27: MinaThreadPool] MinaProducer                   DEBUG Message received: Bye 1hello2
2010-03-11 10:21:21,530 [amel thread 27: MinaThreadPool] ExecutorFilter                 DEBUG Exiting since queue is empty for localhost/127.0.0.1:6202
2010-03-11 10:21:21,530 [amel thread 26: MinaThreadPool] MinaConsumer                   DEBUG Received body: hello3
2010-03-11 10:21:21,530 [:6202?sync=true&textline=true]] SendProcessor                  DEBUG Async reply received now routing the Exchange: Exchange[Message: Bye 1hello2]
2010-03-11 10:21:21,530 [:6202?sync=true&textline=true]] SendProcessor                  DEBUG Async reply received now routing the Exchange: Exchange[Message: Bye 1hello2]
2010-03-11 10:21:21,530 [:6202?sync=true&textline=true]] SendProcessor                  DEBUG Async reply received now routing the Exchange: Exchange[Message: Bye 1hello2]
2010-03-11 10:21:21,546 [:6202?sync=true&textline=true]] DefaultManagementAgent         DEBUG Registered MBean with objectname: org.apache.camel:context=tamlft0spj1/cameltest,type=producers,name=Producer(0x16321e6)
2010-03-11 10:21:21,546 [:6202?sync=true&textline=true]] ProcessorEndpoint$1            DEBUG Starting producer: Producer[log://+++ reply++++]
2010-03-11 10:21:21,546 [:6202?sync=true&textline=true]] ProducerCache                  DEBUG Adding to producer cache with key: Endpoint[log://+++ reply++++] for producer: Producer[log://+++ reply++++]
2010-03-11 10:21:21,546 [:6202?sync=true&textline=true]] +++ reply++++                  INFO  Exchange[BodyType:String, Body:Bye 1hello2]
2010-03-11 10:21:21,546 [:6202?sync=true&textline=true]] GenericFileOnCompletion        DEBUG Done processing file: GenericFile[C:\test\test\response\Copy (2) of New Text Document (3).txt] using exchange: Exchange[Message: Bye 1hello2]
2010-03-11 10:21:21,546 [:6202?sync=true&textline=true]] +++ reply++++                  INFO  Exchange[BodyType:String, Body:Bye 1hello2]
2010-03-11 10:21:21,546 [:6202?sync=true&textline=true]] GenericFileOnCompletion        DEBUG Done processing file: GenericFile[C:\test\test\response\Copy of New Text Document (3).txt] using exchange: Exchange[Message: Bye 1hello2]
2010-03-11 10:21:21,546 [:6202?sync=true&textline=true]] FileUtil                       DEBUG Tried 1 to delete file: C:\test\test\response\Copy (2) of New Text Document (3).txt.camelLock with result: true
2010-03-11 10:21:21,561 [:6202?sync=true&textline=true]] +++ reply++++                  INFO  Exchange[BodyType:String, Body:Bye 1hello2]
2010-03-11 10:21:21,561 [:6202?sync=true&textline=true]] GenericFileOnCompletion        DEBUG Done processing file: GenericFile[C:\test\test\response\New Text Document (3).txt] using exchange: Exchange[Message: Bye 1hello2]
2010-03-11 10:21:21,561 [:6202?sync=true&textline=true]] FileUtil                       DEBUG Tried 1 to delete file: C:\test\test\response\Copy of New Text Document (3).txt.camelLock with result: true
2010-03-11 10:21:21,561 [:6202?sync=true&textline=true]] nericFileRenameProcessStrategy DEBUG Renaming file: GenericFile[C:\test\test\response\Copy (2) of New Text Document (3).txt] to: GenericFile[C:\test\test\response\.camel\Copy (2) of New Text Document (3).txt]
2010-03-11 10:21:21,561 [:6202?sync=true&textline=true]] FileUtil                       DEBUG Tried 1 to delete file: C:\test\test\response\New Text Document (3).txt.camelLock with result: true
2010-03-11 10:21:21,561 [:6202?sync=true&textline=true]] nericFileRenameProcessStrategy DEBUG Renaming file: GenericFile[C:\test\test\response\Copy of New Text Document (3).txt] to: GenericFile[C:\test\test\response\.camel\Copy of New Text Document (3).txt]
2010-03-11 10:21:21,561 [:6202?sync=true&textline=true]] nericFileRenameProcessStrategy DEBUG Renaming file: GenericFile[C:\test\test\response\New Text Document (3).txt] to: GenericFile[C:\test\test\response\.camel\New Text Document (3).txt]
2010-03-11 10:21:21,561 [:6202?sync=true&textline=true]] FileUtil                       DEBUG Tried 1 to rename file: C:\test\test\response\Copy (2) of New Text Document (3).txt to: C:\test\test\response\.camel\Copy (2) of New Text Document (3).txt with result: true
2010-03-11 10:21:21,561 [:6202?sync=true&textline=true]] FileUtil                       DEBUG Tried 1 to rename file: C:\test\test\response\Copy of New Text Document (3).txt to: C:\test\test\response\.camel\Copy of New Text Document (3).txt with result: true
2010-03-11 10:21:21,577 [:6202?sync=true&textline=true]] FileUtil                       DEBUG Tried 1 to rename file: C:\test\test\response\New Text Document (3).txt to: C:\test\test\response\.camel\New Text Document (3).txt with result: true
2010-03-11 10:21:26,530 [amel thread 26: MinaThreadPool] MinaConsumer                   DEBUG Writing body: Bye 1hello3
2010-03-11 10:21:26,530 [amel thread 26: MinaThreadPool] MinaConsumer                   DEBUG Received body: hello1
2010-03-11 10:21:26,530 [SocketConnectorIoProcessor-0.2] ExecutorFilter                 DEBUG Launching thread for localhost/127.0.0.1:6202
2010-03-11 10:21:26,530 [amel thread 27: MinaThreadPool] MinaProducer                   DEBUG Message received: Bye 1hello3
2010-03-11 10:21:26,530 [amel thread 27: MinaThreadPool] ExecutorFilter                 DEBUG Exiting since queue is empty for localhost/127.0.0.1:6202
2010-03-11 10:21:31,531 [amel thread 26: MinaThreadPool] MinaConsumer                   DEBUG Writing body: Bye 1hello1
2010-03-11 10:21:31,531 [SocketConnectorIoProcessor-0.2] ExecutorFilter                 DEBUG Launching thread for localhost/127.0.0.1:6202
2010-03-11 10:21:31,531 [amel thread 26: MinaThreadPool] ExecutorFilter                 DEBUG Exiting since queue is empty for /127.0.0.1:3374
2010-03-11 10:21:31,531 [amel thread 27: MinaThreadPool] MinaProducer                   DEBUG Message received: Bye 1hello1
2010-03-11 10:21:31,531 [amel thread 27: MinaThreadPool] ExecutorFilter                 DEBUG Exiting since queue is empty for localhost/127.0.0.1:6202
",tomcat,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-03-22 09:28:05.477,,,no_permission,,,,,,,,,,,,,76496,,,Sun Apr 24 10:01:30 UTC 2011,,,,,,,0|i01p7j:,7853,,,,,,,,,"22/Mar/10 09:28;davsclaus;trunk: 926008.

Thanks for reporting. You are welcome to try this fix on your system.",24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ConsumerTemplate don't support the jms uri with selector,CAMEL-2529,12487201,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,08/Mar/10 10:18,24/Apr/11 10:00,14/Mar/19 02:42,08/Mar/10 13:35,2.0.0,2.1.0,2.2.0,,,,,,,,2.3.0,,,camel-jms,,,,0,"This unit test can shows the issue that selector option don't work for ConsumerTemplate
{code}
@Test
    public void testConsumerTemplate() throws Exception {
        template.sendBodyAndHeader(""activemq:queue:consumer"", ""Message1"", ""SIZE_NUMBER"", 1505);
        template.sendBodyAndHeader(""activemq:queue:consumer"", ""Message3"", ""SIZE_NUMBER"", 1300);
        template.sendBodyAndHeader(""activemq:queue:consumer"", ""Message2"", ""SIZE_NUMBER"", 1600);

        // process every exchange which is ready. If no exchange is left break
        // the loop
        while (true) {
            Exchange ex = consumer.receiveNoWait(""activemq:queue:consumer?selector=SIZE_NUMBER<1500"");
            if (ex != null) {
                Message message = ex.getIn();
                int size = message.getHeader(""SIZE_NUMBER"", int.class);
                assertTrue(""The message header SIZE_NUMBER should be less than 1500"", size < 1500);
                assertEquals(""The message body is wrong"", ""Message3"", message.getBody());
            } else {
                break;
            }
        }

    }

{code}

And here is [mail thread|http://old.nabble.com/activemq-component-and-selector-ts27813752.html] which discusses about it.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-04-24 10:00:46.673,,,no_permission,,,,,,,,,,,,,76497,,,Sun Apr 24 10:00:46 UTC 2011,,,,,,,0|i01p53:,7842,,,,,,,,,08/Mar/10 13:35;njiang;committed patch for it.,24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
should use servicemix jaxws 2.1 spec bundle but not the geronimo one,CAMEL-2528,12484736,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,ffang,ffang,08/Mar/10 03:36,24/Apr/11 10:01,14/Mar/19 02:42,10/Mar/10 10:02,2.2.0,,,,,,,,,,2.3.0,,,karaf,,,,0,"otherwise will see the exception like 
javax.xml.ws.spi.FactoryFinder$ConfigurationError: Provider org.apache.axis2.jaxws.spi.Provider not found
at javax.xml.ws.spi.FactoryFinder$2.run(FactoryFinder.java:135)
at javax.xml.ws.spi.FactoryFinder.doPrivileged(FactoryFinder.java:264)
at javax.xml.ws.spi.FactoryFinder.newInstance(FactoryFinder.java:122)
at javax.xml.ws.spi.FactoryFinder.access$200(FactoryFinder.java:42)
at javax.xml.ws.spi.FactoryFinder$3.run(FactoryFinder.java:255)
at javax.xml.ws.spi.FactoryFinder.doPrivileged(FactoryFinder.java:264)
at javax.xml.ws.spi.FactoryFinder.find(FactoryFinder.java:165)
at javax.xml.ws.spi.Provider.provider(Provider.java:39)
at javax.xml.ws.Service.<init>(Service.java:36)",,,,,,,,,,,,,,,,,08/Mar/10 03:37;ffang;CAMEL-2528.patch;https://issues.apache.org/jira/secure/attachment/12463182/CAMEL-2528.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-03-08 10:12:36.878,,,no_permission,,,,,,,,,,,,,76498,,,Sun Apr 24 10:01:26 UTC 2011,,,,,,,0|i01p4v:,7841,,,,,,,,,08/Mar/10 03:37;ffang;patch provided,"08/Mar/10 10:12;njiang;Applied the patch with thank to Freeman, and I also updated the jaxws API bundle which camel-soap is using.
",24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
karaf features.xml  should use servicemix commons-pool bundle ,CAMEL-2514,12486446,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,ffang,ffang,02/Mar/10 07:37,17/Jan/11 16:50,14/Mar/19 02:42,02/Mar/10 08:44,1.6.2,2.0.0,2.0-M2,2.0-M3,2.1.0,2.2.0,,,,,1.6.3,2.3.0,,karaf,,,,0,"as commons-pool/commons-pool/1.5.4 osgi manifest header isn't correct, which shouldn't import org.apache.commons.pool package.
SMX4-491[1] create servicemix wrapper bundle to fix this issue, so the karaf features.xml should use servicemix wrapper bundle
[1]https://issues.apache.org/activemq/browse/SMX4-491",,,,,,,,,,,,,,,,,02/Mar/10 07:38;ffang;CAMEL-2514.patch;https://issues.apache.org/jira/secure/attachment/12463158/CAMEL-2514.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-03-02 08:44:37.998,,,no_permission,,,,,,,,,,,,,76500,,,Mon Jan 17 16:50:40 UTC 2011,,,,,,,0|i01p1r:,7827,,,,,,,,,02/Mar/10 07:38;ffang;append patch to address this issue,"02/Mar/10 08:44;njiang;Applied patch with thank to Freeman.  I didn't change the parent/pom.xml part, as we just need to update the feature.xml part.",17/Jan/11 16:50;davsclaus;Closing all 1.x tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-soap jar does not contain the generated classes,CAMEL-2512,12484995,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,chris@die-schneider.net,chris@die-schneider.net,01/Mar/10 23:03,18/Mar/10 19:12,14/Mar/19 02:42,03/Mar/10 02:38,,,,,,,,,,,2.3.0,,,,,,,0,"Seems I forgot to add the generated soap package to the exported packages. So these classes are not packed into the jar.
",,,,,,,,,,,,,,,,,01/Mar/10 23:04;chris@die-schneider.net;camel-soap-2010-03-01.patch;https://issues.apache.org/jira/secure/attachment/12463157/camel-soap-2010-03-01.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-03-03 02:38:05.876,,,no_permission,,,,,,,,,,,,,76501,,,Wed Mar 03 02:38:05 UTC 2010,,,Patch Available,,,,0|i01p1b:,7825,,,,,,,,,01/Mar/10 23:04;chris@die-schneider.net;Added patch for this issue. It also contains some improvement to the tests I found when doing the wiki documentation.,"03/Mar/10 02:38;njiang;Applied patch with thanks to Christian.
http://svn.apache.org/viewvc?rev=917889&view=rev",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Mixing jetty/http in a route screws up the URI used by HttpClient,CAMEL-2510,12484711,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,01/Mar/10 13:45,24/Apr/11 10:00,14/Mar/19 02:42,10/Mar/10 10:01,2.1.0,2.2.0,,,,,,,,,2.3.0,,,,,,,0,"Below test shows the Http producer can't build up right HttpRequest URI as a bridgeEndpoint.

{code}
   public class JettyHttpTest extends CamelTestSupport {

    private String targetProducerUri = ""http://localhost:8542/someservice?bridgeEndpoint=true&throwExceptionOnFailure=false"";
    private String targetConsumerUri = ""jetty:http://localhost:8542/someservice?matchOnUriPrefix=true"";
    private String sourceUri = ""jetty:http://localhost:6323/myservice?matchOnUriPrefix=true"";
    private String sourceProducerUri = ""http://localhost:6323/myservice"";

    @Test
    public void testGetRootPath() throws Exception {
        MockEndpoint mock = getMockEndpoint(""mock:result"");
        mock.expectedBodiesReceived(""Hi! /someservice"");

        template.sendBody(""direct:root"", """");

        assertMockEndpointsSatisfied();
    }
    
    @Test
    public void testGetWithRelativePath() throws Exception {
        MockEndpoint mock = getMockEndpoint(""mock:result"");
        mock.expectedBodiesReceived(""Hi! /someservice/relative"");
        
        template.sendBody(""direct:relative"", """");
        assertMockEndpointsSatisfied();
        
    }

    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            @Override
            public void configure() throws Exception {

                from(targetConsumerUri)
                    .process(new Processor() {
                        public void process(Exchange exchange) throws Exception {
                            String path = exchange.getIn().getHeader(Exchange.HTTP_PATH, String.class);
                            exchange.getOut().setBody(""Hi! "" + path);
                        }   
                    });

                from(sourceUri)
                    .to(targetProducerUri);

                from(""direct:root"")
                    .to(sourceProducerUri)
                    .to(""mock:result"");
                
                from(""direct:relative"")
                    .to(sourceProducerUri + ""/relative"")
                    .to(""mock:result"");

            }
        };
    }
}
{code}",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-03-02 12:06:36.418,,,no_permission,,,,,,,,,,,,,76502,,,Sun Apr 24 10:00:40 UTC 2011,,,,,,,0|i01p0v:,7823,,,,,,,,,"02/Mar/10 12:06;romkal;Should we really have such assertion in {{testGetWithRelativePath()}} test?

I believe we should have {{""Hi! /someservice""}} returned, not {{""Hi! /someservice/relative""}} and no {{matchOnUriPrefix}} should be required on {{targetConsumerUri}}.

In other words I believe, that by default we shouldn't propagate HTTP_PATH or HTTP_URI at all from one endpoint to the other, because by default it is not what people would expect. I would propose having two different header names for overriding path for producer, and informative headers for requests received.from consumers.","03/Mar/10 01:42;njiang;Hi Roma,

The change that I made is trying to support the http bridge out of box.

If you want to route the all the request which URI is start with ""http://localhost:1234/route"" to ""http://localhost:4567/service"",  camel need to lookup the request's HTTP_PATH to figure out the relative path and apply it to http producer to send the request.
The original code supports  this kind of route ""http://localhost:1234"" to ""http://host:4567/service"" , but doesn't supports the upper route.

For the header of HTTP_PATH and HTTP_URI, cxfbean is using it to support the JAXRS resource location.
  ","03/Mar/10 14:08;romkal;I believe I was misunderstood :)

I'm not saying that we shouldn't send HTTP_PATH or HTTP_URI headers at all. I believe they are needed definitely (as you wrote earlier). I just believe that by default some other headers should be used to override the URI used at HttpProducer.

Assuming we have a route like
{code:java}
from(""jetty:http://localhost/input?matchOnUriPrefix=true"").to(""http://localhost:/output"");
{code}

When someone sends a POST to {{http://localhost/input/some/path}} the payload should be sent to {{http://localhost/output}} not to {{http://localhost/output/some/path}}","04/Mar/10 07:44;davsclaus;I to think there is something wrong with this commit.

The changed code in HttpProducerHelper makes other situations fail now. 
And why do you have this relative check?

The 2 urls should IMHO always be considered absolute when bridging.

I do think we need to find a new solution for this and revert the current change.","04/Mar/10 08:07;davsclaus;After digging a bit more I think we have an issue in Camel when you combine Jetty with Http, since Jetty will populate the Exchange with HTTP_* headers. And these headers influence when you invoke other http endpoints later in the route, as if you should *overrule* the endpoint uri.

We got a catch-22 situation since those HTTP_* headers should have been _informative_ and should not impact the routing.

Currently I cannot se an easy solution without breaking backwards comparability, but I also recon that not many Camel end users will use those HTTP_* headers in their routes.
So maybe we can change camel-jetty, to use other header keys, that dont clash.

Or the opposite that you must use HTTP_CUSTOM_* header to overrule. However this is a bigger change as Camel end users then must change their code.
","04/Mar/10 08:10;njiang;@Claus,

I need to make my change more clear, lets take the REST service as an example, the relative path could be used for URI template.
If we use the jetty and http component to build a bridge, my change will support it out of box.
{code}
from(""jetty:http://localhost/input?matchOnUriPrefix=true"").to(""http://localhost:8080/outservice?bridgeEndpoint=true"");
{code}

For the HttpProducer, our police is the message header of HTTP_PATH and HTTP_URI can override the http endpoint configuration, and we introduce the bridgeEndpoint option to ignore the message header of HTTP_URI.    
If you want to this route implement Roman's requirement, current solution could be 
{code}
rom(""jetty:http://localhost/input?matchOnUriPrefix=true"").removeHeader(Exchange.HTTP_PATH).to(""http://localhost:8080/outservice?bridgeEndpoint=true"");
{code}",24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[jboss-camel]  Cannot find class 'WEB-INF/lib/camel-core-2.2.0.jar/org/apache/camel/component/bean/ParameterMappingStrategy.class' in any classloaders,CAMEL-2509,12486416,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,gribo,gribo,01/Mar/10 12:35,24/Apr/11 10:01,14/Mar/19 02:42,01/Mar/10 16:01,2.2.0,,,,,,,,,,2.3.0,,,,,,,0,"Using jboss-extra class JBossPackageScanClassResolver, i could not get the converter loaded.

I was using camel 2.2.0 and JBoss 5.1

The error was :
Cannot find class 'WEB-INF/lib/camel-core-2.2.0.jar/org/apache/camel/component/bean/ParameterMappingStrategy.class' in any classloaders: [BaseClassLoader@107e733{vfszip:/D:/JBoss/jboss-5.1.0.GA/server/testWS/deploy/router-component-02-0.0.2-SNAPSHOT.war/}, org.jboss.web.tomcat.service.WebCtxLoader$ENCLoader@1ea6b44]

Looking at the JBossPackageScanClassResolver source class, i changed :

public void visit(VirtualFile file) {

  if (file.getName().endsWith("".class"")) {
    String fqn = file.getPathName();
    addIfMatching(filter, fqn.substring(""/"") + 1), classes);
  }
}
with :

public void visit(VirtualFile file) {

  if (file.getName().endsWith("".class"")) {
    String fqn = file.getPathName();
    addIfMatching(filter, fqn.substring(fqn.indexOf(""jar/"") + 4), classes);
  }
}

as the fqn was /WEB-INF/lib/camel-core-2.2.0.jar/org/apache/camel/component/bean/ParameterMappingStrategy.class instead of /org/apache/camel/component/bean/ParameterMappingStrategy.class
It's probably different from different version of JBoss ?
Hope this help sombody...",JBoss,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-03-01 13:03:52.688,,,no_permission,,,,,,,,,,,,,76503,,,Sun Apr 24 10:01:40 UTC 2011,,,,,,,0|i01p0n:,7822,,,,,,,,,"01/Mar/10 13:03;davsclaus;Thanks for reporting.

Yeah classloading in JBoss is a bit tricky :)","01/Mar/10 16:01;davsclaus;Thanks a lot.

I have committed a fix to camel-extra.
Fell free to try the fix on your system.

trunk: 292.",24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Inconsitent definition of resequencer DSL,CAMEL-2498,12487082,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,mrt1nz,mrt1nz,mrt1nz,25/Feb/10 05:48,24/Apr/11 10:00,14/Mar/19 02:42,25/Feb/10 06:05,2.2.0,,,,,,,,,,2.3.0,,,camel-core,,,,0,One of the {{ProcessorDefinition}} methods is still has the old {{resequencer}} name from Camel 1.x. Should be renamed to {{resequence}}.,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-04-24 10:00:49.115,,,no_permission,,,,,,,,,,,,,76504,,,Sun Apr 24 10:00:49 UTC 2011,,,,,,,0|i01oy7:,7811,,,,,,,,,24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StreamCache/Splitter race condition,CAMEL-2496,12486755,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,slewis,slewis,24/Feb/10 15:38,24/Apr/11 10:00,14/Mar/19 02:42,07/Jun/10 01:45,1.6.1,1.6.2,2.0.0,2.0-M1,2.0-M2,2.0-M3,2.1.0,2.2.0,2.3.0,,2.4.0,,,,,,,0,"Attached patch introduces a test that shows the following symptom:

org.apache.camel.RuntimeCamelException: java.io.FileNotFoundException: /var/folders/vC/vCA487MkHEeSaIu9LmlkrU+++TI/-Tmp-/camel-tmp-627613/cos3755307044377901165.tmp (No such file or directory)
org.apache.camel.RuntimeCamelException: java.io.FileNotFoundException: /var/folders/vC/vCA487MkHEeSaIu9LmlkrU+++TI/-Tmp-/camel-tmp-627613/cos3755307044377901165.tmp (No such file or directory)
	at org.apache.camel.converter.stream.FileInputStreamCache.reset(FileInputStreamCache.java:52)
	at org.apache.camel.converter.stream.StreamCacheConverter$StreamSourceCache.reset(StreamCacheConverter.java:126)
	at org.apache.camel.util.MessageHelper.resetStreamCache(MessageHelper.java:105)
	at org.apache.camel.builder.xml.XPathBuilder.getDocument(XPathBuilder.java:548)
	at org.apache.camel.builder.xml.XPathBuilder.evaluateAs(XPathBuilder.java:428)
	at org.apache.camel.builder.xml.XPathBuilder.evaluate(XPathBuilder.java:118)
	at org.apache.camel.processor.Splitter.createProcessorExchangePairs(Splitter.java:72)
	at org.apache.camel.processor.MulticastProcessor.process(MulticastProcessor.java:155)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:80)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:189)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:133)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)
	at org.apache.camel.processor.interceptor.StreamCachingInterceptor.proceed(StreamCachingInterceptor.java:87)
	at org.apache.camel.processor.interceptor.StreamCachingInterceptor.process(StreamCachingInterceptor.java:82)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:52)
	at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:72)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:637)

I believe it must be a race condition when several threads are passing through the splitter, in the above case I'm using a seda queue with 5 threads.  Am logging this now as I'm not sure what time I'll have to investigate further this week.",,,,,,,3600,3600,,,,,,,,,24/Feb/10 15:39;slewis;test-case.txt;https://issues.apache.org/jira/secure/attachment/12463152/test-case.txt,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-03-01 16:03:45.59,,,no_permission,,,,,,,,,,,,,76505,,,Sun Apr 24 10:00:53 UTC 2011,,,,,,,0|i01oxr:,7809,,,,,,,,,"24/Feb/10 15:39;slewis;unit test for 1.x branch, still need to check if 2.x trunk shows a similar problem.","01/Mar/10 16:03;davsclaus;I think we should use the new HawtDB as file based stream cache in the future. 

It got all the bells and whistles to be fast and leverages NIO and memory mapped IO and whatnot.
But that can be done when we overhaul stream caching in 2.x, once we get the time for that :)","21/Apr/10 07:38;njiang;After digging the code, I found the FileInputStreamCache is closed when the XPathBuilder.getDocument() is called, and the temp file is deleted, so you get the FileNotFoundException when the XPathBuilder wants to reset the InputStream.
I can also reproduce this issue in Camel 2.x.

To work around this issue, we should not use the FileInputStreamCache as it can't be reset after it is closed, set the camel property CachedOutputStream.THRESHOLD to be ""-1"" can disable the FileInputStreamCache.
{code}
getContext().getProperties().put(CachedOutputStream.THRESHOLD, ""-1"") ;
{code}
","21/Apr/10 08:18;njiang;Committed the test case into camel trunk, will revisit it when we have time to rewrite the StreamCache.",01/Jun/10 20:21;scrutinizer;This looks like the issue I just reported in CAMEL-2776. It may not be a race condition but a side effect of the cached stream file removal upon close().,"07/Jun/10 01:42;njiang;Now the cached file will not be deleted before the exchange's routing is finished, so you will not got this kind of error anymore.
The file will be deleted when the CachedFileInputStream which is built on this file is close and routing is finished.

You can find more information in CAMEL-2776.",24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Application SOAP fault support in camel-cxf PAYLOAD mode,CAMEL-2495,12487219,12486478,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,wtam,wtam,wtam,23/Feb/10 18:54,24/Apr/11 10:01,14/Mar/19 02:42,01/Mar/10 14:31,2.2.0,,,,,,,,,,2.3.0,,,camel-cxf,,,,0,Camel-cxf component does not seem to support application SOAP fault in PAYLOAD mode.,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-04-24 10:01:14.403,,,no_permission,,,,,,,,,,,,,76506,,,Sun Apr 24 10:01:14 UTC 2011,,,,,,,0|i01oxj:,7808,,,,,,,,,"23/Feb/10 21:59;wtam;It seems to be a problem only when no servcieClass (i.e. WSDL only) is specified in the endpoint.  I added the test in CXFWsdlOnlyTest and showed the issue (see stacktrace).

{code}
 @Test
    public void testSoapFaultRoutes() {
        URL wsdlURL = getClass().getClassLoader().getResource(""person.wsdl"");
        PersonService ss = new PersonService(wsdlURL, new QName(""http://camel.apache.org/wsdl-first"",
                                                                ""PersonService""));
        
        // test POJO mode
        Person client = ss.getSoap();
        Holder<String> personId = new Holder<String>();
        personId.value = """";
        Holder<String> ssn = new Holder<String>();
        Holder<String> name = new Holder<String>();
        Throwable t = null;
        try {
            client.getPerson(personId, ssn, name);
            fail(""Expect exception"");
        } catch (UnknownPersonFault e) {
            t = e;
        }
        assertTrue(t instanceof UnknownPersonFault);
        
        // test PAYLOAD mode
        Person client2 = ss.getSoap2();
        Holder<String> personId2 = new Holder<String>();
        personId2.value = """";
        Holder<String> ssn2 = new Holder<String>();
        Holder<String> name2 = new Holder<String>();
        try {
            client2.getPerson(personId2, ssn2, name2);
            fail(""Expect exception"");
        } catch (UnknownPersonFault e) {
            t = e;
        }
        assertTrue(t instanceof UnknownPersonFault);
    }
{code}

javax.xml.ws.soap.SOAPFaultException: Error reading XMLStreamReader.
	at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:146)
	at $Proxy70.getPerson(Unknown Source)
	at org.apache.camel.component.cxf.CXFWsdlOnlyTest.testSoapFaultRoutes(CXFWsdlOnlyTest.java:118)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at org.junit.internal.runners.TestMethod.invoke(TestMethod.java:59)
	at org.junit.internal.runners.MethodRoadie.runTestMethod(MethodRoadie.java:98)
	at org.junit.internal.runners.MethodRoadie$2.run(MethodRoadie.java:79)
	at org.junit.internal.runners.MethodRoadie.runBeforesThenTestThenAfters(MethodRoadie.java:87)
	at org.junit.internal.runners.MethodRoadie.runTest(MethodRoadie.java:77)
	at org.junit.internal.runners.MethodRoadie.run(MethodRoadie.java:42)
	at org.junit.internal.runners.JUnit4ClassRunner.invokeTestMethod(JUnit4ClassRunner.java:88)
	at org.junit.internal.runners.JUnit4ClassRunner.runMethods(JUnit4ClassRunner.java:51)
	at org.junit.internal.runners.JUnit4ClassRunner$1.run(JUnit4ClassRunner.java:44)
	at org.junit.internal.runners.ClassRoadie.runUnprotected(ClassRoadie.java:27)
	at org.junit.internal.runners.ClassRoadie.runProtected(ClassRoadie.java:37)
	at org.junit.internal.runners.JUnit4ClassRunner.run(JUnit4ClassRunner.java:42)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:46)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)
Caused by: com.ctc.wstx.exc.WstxEOFException: Unexpected EOF in prolog
 at [row,col {unknown-source}]: [1,0]
	at com.ctc.wstx.sr.StreamScanner.throwUnexpectedEOF(StreamScanner.java:686)
	at com.ctc.wstx.sr.BasicStreamReader.handleEOF(BasicStreamReader.java:2134)
	at com.ctc.wstx.sr.BasicStreamReader.nextFromProlog(BasicStreamReader.java:2040)
	at com.ctc.wstx.sr.BasicStreamReader.next(BasicStreamReader.java:1069)
	at com.ctc.wstx.sr.BasicStreamReader.nextTag(BasicStreamReader.java:1095)
	at org.apache.cxf.binding.soap.interceptor.ReadHeadersInterceptor.handleMessage(ReadHeadersInterceptor.java:122)
	at org.apache.cxf.binding.soap.interceptor.ReadHeadersInterceptor.handleMessage(ReadHeadersInterceptor.java:60)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:243)
	at org.apache.cxf.endpoint.ClientImpl.onMessage(ClientImpl.java:672)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleResponseInternal(HTTPConduit.java:2210)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleResponse(HTTPConduit.java:2087)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.close(HTTPConduit.java:1985)
	at org.apache.cxf.transport.AbstractConduit.close(AbstractConduit.java:66)
	at org.apache.cxf.transport.http.HTTPConduit.close(HTTPConduit.java:640)
	at org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor.handleMessage(MessageSenderInterceptor.java:62)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:243)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:484)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:310)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:262)
	at org.apache.cxf.frontend.ClientProxy.invokeSync(ClientProxy.java:73)
	at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:124)
	... 24 more

","01/Mar/10 14:31;wtam;Committed revision 917539.
",24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cannot deploy camel-core in OSGI-runtime using Spring 3.0,CAMEL-2491,12487217,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,michiel.eggermont@gmail.com,michiel.eggermont@gmail.com,22/Feb/10 10:48,24/Apr/11 10:01,14/Mar/19 02:42,22/Feb/10 12:54,2.2.0,,,,,,,,,,2.3.0,,,camel-core,,,,0,"It is not possible to start a bundle with a camelContext in dm-server 2.0 while using camel-core version 2.2.0, because camel-core requires Spring packages of version below 3.0. This seems like an issue to me, since the release notes of version 2.2.0 suggest that it works with version 3.0 of Spring. 
 
Environment: Spring dm-server 2.0 (comes pre-packaged with Spring 3.0.0.RELEASE)
Steps to reproduce the problem:
- start dm-server
- install bundle camel-core-2.2.0.jar
- install a bundle containing any kind of camelContext
Error: 
Caused by: com.springsource.kernel.osgi.framework.ExtendedClassNotFoundException: org.springframework.jmx.export.metadata.JmxAttributeSource in KernelBundleClassLoader: [bundle=org.apache.camel.camel-core_2.2.0]
(full details of stack trace have been attached)

Cause: 
The version range for the JMX spring packages in the MANIFEST.MF:
org.springframework.jmx.export.annotation;resolution:=optional;version=""[2.5,3)""
,org.springframework.jmx.export.assembler;resolution:=optional;version=""[2.5,3)""
,org.springframework.jmx.export.metadata;resolution:=optional;version=""[2.5,3)"" 

As a workaround I disabled the jmxAgent in my camel-context and changed the 
version range to [2.5,4) in the MANIFEST.MF file in my camel-core-2.2.0.jar.
I redeployed the camel-core bundle. After that my bundle started without any problems. 

Proposed solution:
Change the version range for Spring packages in camel-core from [2.5,3) to [2.5,4)",DM Server 2.0,,,,,,,,,,,,,,,,22/Feb/10 10:52;michiel.eggermont@gmail.com;dm-server-stacktrace.txt;https://issues.apache.org/jira/secure/attachment/12463150/dm-server-stacktrace.txt,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-02-22 11:04:12.079,,,no_permission,,,,,,,,,,,,,76507,,,Sun Apr 24 10:01:02 UTC 2011,,,,,,,0|i01own:,7804,,,,,,,,,22/Feb/10 10:52;michiel.eggermont@gmail.com;DM server log of the stack trace,22/Feb/10 11:04;davsclaus;Willem OSGi is your table :),24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DefaultCamelContext throws NPE in start() for route with no destination,CAMEL-2486,12487085,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,mbmather,mbmather,18/Feb/10 20:37,24/Apr/11 10:01,14/Mar/19 02:42,19/Feb/10 10:45,2.1.0,,,,,,,,,,2.3.0,,,camel-core,,,,0,"Not easy to track down when you have a lot of routes.  This might be new with the introduction of StartupRouteHolder (I think that was introduced in 2.1, right?)

{code}
public class TriggerNPETest extends CamelTestSupport {
	@Override
	protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            public void configure() {
            	// This will generate an NPE on DefaultCamelContext.start() (line 973)
            	// If this is an invalid route a proper message should be given far before 
            	// this and/or NPE should be tested on line 973
            	from(""direct:psd.nowhere"");
            }
        };
	}
	@Test
	public void testme() throws Exception {
		Thread.sleep(10000);
	}
}
{code}

java.lang.NullPointerException
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:973)
	at org.apache.camel.test.junit4.CamelTestSupport.startCamelContext(CamelTestSupport.java:145)
	at org.apache.camel.test.junit4.CamelTestSupport.setUp(CamelTestSupport.java:98)

{code}
            // now start the inputs for all the route services as we have prepared Camel
            // yeah open the floods so messages can start flow into Camel
            for (Map.Entry<Integer, StartupRouteHolder> entry : inputs.entrySet()) {
                Integer order = entry.getKey();
                Route route = entry.getValue().getRoute();  //  <<<-------  Right here.
{code}","Camel 2.2, Linux, Java 6",,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-02-19 10:45:49.906,,,no_permission,,,,,,,,,,,,,76508,,,Sun Apr 24 10:01:25 UTC 2011,,,,,,,0|i01ovj:,7799,,,,,,,,,"19/Feb/10 10:45;davsclaus;Thanks for reporting.

trunk: 911778",24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-mina - Using close session could potentially cause memory to be not released,CAMEL-2484,12486727,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,slewis,davsclaus,davsclaus,18/Feb/10 09:21,24/Apr/11 10:01,14/Mar/19 02:42,23/Feb/10 10:17,2.1.0,2.2.0,,,,,,,,,2.3.0,,,camel-mina,,,,1,"See nabble
http://old.nabble.com/SocketSessionImpl-in-Mina-component-retained-in-memory-indefinitely-ts27624487.html",,,,,,,,,,,,,,,,,18/Feb/10 09:33;johanhaleby;camel-mina-outofmemory-example.zip;https://issues.apache.org/jira/secure/attachment/12463144/camel-mina-outofmemory-example.zip,18/Feb/10 13:29;johanhaleby;java_pid26327.hprof.tar.gz;https://issues.apache.org/jira/secure/attachment/12463145/java_pid26327.hprof.tar.gz,,,,2.0,,,,,,,,,,,,,,,,,,,2010-02-18 09:33:21.791,,,no_permission,,,,,,,,,,,,,76509,,,Sun Apr 24 10:01:33 UTC 2011,,,,,,,0|i01ov3:,7797,,,,,,,,,18/Feb/10 09:33;johanhaleby;Small example that demonstrates the out of memory issue. You should lower the heap to see the result faster.,"18/Feb/10 13:18;slewis;Hey Johan, you mentioned in the thread you've got a heapdump that you can attach, would you mind attaching it?  I wouldn't mind starting with that here to track this down.",18/Feb/10 13:32;johanhaleby;Done.,"18/Feb/10 20:15;slewis;So the problem is thanks to the RecipientList.  It obtains a producer from the ProducerCache directly, in this case the ProducerCache doesn't actually cache the producer, it just creates a new producer and adds it to DefaultCamelContext.servicesToClose, which winds up holding thousands of MinaProducer objects.  It looks like really the RecipientList is better off just calling Endpoint.createProducer() and avoiding the producer cache altogether, *or* the RecipientList could ensure that each producer is removed from the CamelContext (am testing this now just to be sure it fixes the OOM) *or* the RecipientList could use a bit of a re-factoring so that it uses the ProducerCache properly.","19/Feb/10 08:46;davsclaus;Well spotted. Yeah we should ensure the cache is properly used. Some producers are expensive to create such as FTP, JMS etc. And very often the recipient list is sending to the same endpoints over and over again, and thus the cache idea is good.

BTW the routing slip could very well have the same issue.","19/Feb/10 13:34;slewis;@Claus, thanks!  I'll look into getting the RecipientList working properly with the cache, did a long-running test last night with Johan's test case just to verify that's the issue, and I didn't get any OOMs, but creating/destroying the producers with each exchange is definitely expensive and can cause other problems.

@Johan, in case you need something running right away you should be able to avoid this problem for now by replacing the RecipientList with a simple processor that looks at the header and uses a producer template to send on the message, the producer template uses the cache properly.  I'll of course update the ticket when I get this fixed...","19/Feb/10 14:08;davsclaus;I wonder if the servicesToClose should be a LRUCache which we then can stop the service then an item is evicted. That will prevent similar issues in the future.

Maybe I should go check the source code of DefaultCamelContext :)","19/Feb/10 14:13;slewis;I was thinking that yesterday and had even added a ""removeService()"" method to CamelContext and implemented it so that when you remove a service it's then stopped etc.  Guess you could have a thread that keeps an eye on this list and let it periodically garbage collect LRU services.  It'd be another thing to tune though, in a case like this you could hit an OOM before the list is checked for old services.","19/Feb/10 14:30;davsclaus;We got a LRUCache that is map based. I recon we can create some bounded List and have a callback when its full so it can auto remove the oldest which it then will close the service.

Then there is no need for a background thread.

","19/Feb/10 14:37;slewis;That sounds like an excellent fit, I can look into that as part of tidying up the RecipientList...","19/Feb/10 17:49;davsclaus;Stan I just realized that {{servicesToClose}} contains some mandatory services which *must* be running and only stopped when CamelContext stops. Its things like the registry, type converter, inflight registry and whatnot.

So we should look to put those into a *mandatory* List and the others in a *limited* list for reusing purpose.","20/Feb/10 07:18;davsclaus;Had a look this morning. I can now see how the recipient list *doesnt* used pooled producers and thus it recreates a new producer every time.

And at the same time the old producer is added as a service which allows Camel to manage it, but that should not happen as the producer if not pooled is a short lived service.","20/Feb/10 07:45;davsclaus;Ah the MinaProducer is non singleton and {{ServicePoolAware}} which the {{receipientList}} does not take into account. 

It should be able to acquire and release the producers it uses. I will add such a feature. Then that will speedup using mina as it can pool and reuse the MinaProducers.","20/Feb/10 07:46;davsclaus;And by *not* adding it as a {{service}} in the {{servicesToClose}} we avoid Camel holding on the producers forever :)
That just means we loose a little JMX capabilities as you cant manage those created producers then","20/Feb/10 07:48;davsclaus;This bug is only a problem when using
- recipinentList
- non singleton producers which there are only a few ones such as: FTP and MINA

The other components should be safe to use with recipientList","20/Feb/10 11:37;slewis;Hey Claus, makes sense to me.  I've been toying with a tentative set of ""borrowProducer""/""returnProducer"" methods here on the producerCache so that the recipient list gets it from the pool but for some reason the test case appears to lock up.  Haven't had a chance to see why that is, I'd be interested if you get the same results.

Also I think the test case may expose a couple other leaks, though this was from earlier testing where I just ensured servicesToClose wasn't getting filled with MinaProducers.  If you come up with a fix though before I get a chance to work on this further I'd be happy to give the test case a long run just to see if any other issues crop up.","20/Feb/10 11:59;davsclaus;Stan maybe I had better luck than you with the acquire / release thingy.

I have just committed a patch.

ProducerCache will no longer add created producers for management (with does not make too much sense as JMX can then grow too much).
Also I fixed an issue with stopping cached resources if they where cached using a LRUCache.
Now Camel should properly stop cached producers when being stopped.

Please give it a test on your system as well. For example the long running example.

trunk: 912103 + 912105",21/Feb/10 01:50;slewis;figured you'd beat me to it :-).  I'll give it a good long test on Monday and have a look at what you changed...,"22/Feb/10 13:43;slewis;@Claus, ah, okay your fix also changes the behavior of the test also, but I like your fix better anyway.  I've modified the test case so that new messages are pumped into the route every second so it keeps running, will let this run for awhile and see if anything happens.","22/Feb/10 14:18;slewis;Seems to be a leak in either maven or log4j that this test exposes, if I set the root logger to DEBUG it gets an OOM pretty quickly, have changed the log4j.properties to log to a file instead, that seems to have taken care of that problem, now just waiting to see if there's any other issues.","22/Feb/10 18:02;slewis;Let a test run all morning here with the above changes and Claus's fix, no OOMs and memory usage remained in a stable pattern, so this should be all set.","23/Feb/10 10:17;davsclaus;Stan that is great.

Yeah it was a bad move by Claus to enlist Producer's for management ;). Wonder how we slipped this for 2 releases?

I actually think we should just enlist producers only if CamelContext is in state of starting. Then we get the starting Producers enlisted which are the ones in your routes (eg in the to(xxx)).",24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel Stringtemplate : lose all fields properties,CAMEL-2478,12487021,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,muellerc,abdellatif,abdellatif,17/Feb/10 09:09,24/Apr/11 10:01,14/Mar/19 02:42,17/Feb/10 16:02,2.1.0,,,,,,,,,,2.3.0,,,,,,,0,the component Camel-stringtemplate loses all fields properties after the generation of Result.,,,,,,,,,,,,,,,,,17/Feb/10 13:29;muellerc;camel-string-template-test.patch;https://issues.apache.org/jira/secure/attachment/12463141/camel-string-template-test.patch,17/Feb/10 13:31;muellerc;camel-string-template.patch;https://issues.apache.org/jira/secure/attachment/12463142/camel-string-template.patch,,,,2.0,,,,,,,,,,,,,,,,,,,2010-02-17 13:24:14.297,,,no_permission,,,,,,,,,,,,,76510,,,Sun Apr 24 10:01:43 UTC 2011,,,,,,,0|i01otr:,7791,,,,,,,,,17/Feb/10 13:24;muellerc;Provide the unit test which reports the bug.,17/Feb/10 13:31;muellerc;Provide the patch. All camel-string-template unit tests succeed with this patch.,"17/Feb/10 16:02;davsclaus;Applied patch with thanks

trunk: 911034.",24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel Freemarker: change the case of all fields properties Header,CAMEL-2477,12486978,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,muellerc,abdellatif,abdellatif,17/Feb/10 09:04,24/Apr/11 10:01,14/Mar/19 02:42,17/Feb/10 16:06,2.1.0,,,,,,,,,,2.3.0,,,,,,,0,"Using the Freemarker component doesn't respect the case matching of all fields of the header.

For example: the exchange of properties CorrelationID change the case matching, after using Freemarker component, it puts the property in lowercase correlationid.",,,,,,,,,,,,,,,,,17/Feb/10 12:50;muellerc;camel-freemaker-test.patch;https://issues.apache.org/jira/secure/attachment/12463139/camel-freemaker-test.patch,17/Feb/10 12:54;muellerc;camel-freemaker.patch;https://issues.apache.org/jira/secure/attachment/12463140/camel-freemaker.patch,,,,2.0,,,,,,,,,,,,,,,,,,,2010-02-17 12:50:47.314,,,no_permission,,,,,,,,,,,,,76511,,,Sun Apr 24 10:01:41 UTC 2011,,,,,,,0|i01otj:,7790,,,,,,,,,17/Feb/10 12:50;muellerc;Provide the unit test which reports the bug.,17/Feb/10 12:54;muellerc;Provide the patch. All camel-freemaker unit tests succeed with this patch.,"17/Feb/10 15:52;abdellatif;I just did a test patch, it works well","17/Feb/10 16:06;davsclaus;Applied patch with thanks to Christian for fixing all these 3 tickets

trunk: 911036.",24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel Velocity: change the case of all fields properties Header,CAMEL-2476,12487014,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,muellerc,abdellatif,abdellatif,17/Feb/10 09:01,24/Apr/11 10:00,14/Mar/19 02:42,17/Feb/10 15:55,2.1.0,,,,,,,,,,2.3.0,,,camel-velocity,,,,0,"Using the velocity component doesn't respect the case matching of all fields of the header.

For example: the exchange of properties CorrelationID change the case matching, after using velocity component, it puts the property in lowercase correlationid.",,,,,,,,,,,,,,,,,17/Feb/10 12:25;muellerc;camel-velocity-test.patch;https://issues.apache.org/jira/secure/attachment/12463136/camel-velocity-test.patch,17/Feb/10 12:38;muellerc;camel-velocity.patch;https://issues.apache.org/jira/secure/attachment/12463138/camel-velocity.patch,,,,2.0,,,,,,,,,,,,,,,,,,,2010-02-17 12:25:41.729,,,no_permission,,,,,,,,,,,,,76512,,,Sun Apr 24 10:00:44 UTC 2011,,,,,,,0|i01otb:,7789,,,,,,,,,17/Feb/10 12:25;muellerc;I attached a unit test which reports the bug.,17/Feb/10 12:38;muellerc;Provide the patch. All camel-velocity tests succeed with this patch.,"17/Feb/10 15:52;abdellatif;I just did a test patch, it works well","17/Feb/10 15:55;davsclaus;Applied patch with thanks

trunk: 911028.",24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HTTP (Stream) to File only writes part of InputStream to File,CAMEL-2475,12487238,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,toelen,toelen,16/Feb/10 21:44,24/Apr/11 10:01,14/Mar/19 02:42,24/Mar/10 07:21,2.1.0,,,,,,,,,,2.3.0,,,camel-http,,,,0,"The follwoing route only writes part of the http input stream to the file output (always
in chunks of 1,2,4 or 8KB).:

               <route id=""RestToTempDir"">
                       <from uri=""jetty:http://0.0.0.0:8162/muyrl"" />
                       <setHeader headerName=""CamelFileExchangeFile"">
                               <header>message.id</header>
                       </setHeader>
                       <to
                               uri=""file://c:/temp/?fileName=${date:now:yyyyMMdd}/asm-${id}.xml"" />
                       <setBody>
                               <header>CamelFileExchangeFile</header>
                       </setBody>
               </route>

There are workarounds, but I would change streams to always read until EOF (if possible)

Possible workaround 1:
<convertBodyTo type=""java.lang.String""/> to force it to convert the stream to string before writing.

Possible workaround 2 is to write to a queue first

               <route id=""RestToTempDir"">
                       <from uri=""jetty:http://0.0.0.0:8162/myurl"" />
                       <inOnly uri=""activemq:topic=TempTopic"" />
                       <setBody>
                               <header>message.id</header>
                       </setBody>
                       <setHeader headerName=""CamelFileExchangeFile"">
                               <header>message.id</header>
                       </setHeader>
               </route>
               <route id=""TempAssemblyToTempArchiveDirectory"">
                       <from uri=""activemq:topic:TempTopic"" />
                       <setHeader headerName=""CamelFileExchangeFile"">
                               <header>message.id</header>
                       </setHeader>
                       <to
                               uri=""file://c:/xmlarchive_noxslt/?fileName=${date:now:yyyyMMdd}/asm-${id}.xml""/>
               </route>",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-03-19 03:21:00.767,,,no_permission,,,,,,,,,,,,,76513,,,Sun Apr 24 10:01:39 UTC 2011,,,,,,,0|i01ot3:,7788,,,,,,,,,"19/Mar/10 03:21;njiang;Hi Leen,

Can you try out the latest Camel 2.3.0 snapshot to see if the bug still there?
As we just applied a patch of CAMEL-2551 into the Came trunk. I think it could also fix the issue that you meet.


","24/Mar/10 07:20;njiang;Hi Leen,

I just added [an unit test|http://svn.apache.org/viewvc?rev=926956&view=rev] to reproduce the bug that you showed, it looks CAMEL-2551 already fix the issue that you found.
So please try out the latest Camel 2.3.0 snapshot for it.",24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-xmpp not sends message if camel-application deployed to Felix Karaf,CAMEL-2464,12487303,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,slewis,pilgr,pilgr,11/Feb/10 13:37,24/Apr/11 09:57,14/Mar/19 02:42,15/May/10 17:58,2.1.0,,,,,,,,,,2.3.0,,,camel-xmpp,,,,0,"Through camel-xmpp my message sended succesfully in standalone camel application, but message not sends if application as a bundle deployed to Felix Karaf.

My route:
from(""timer://foo?fixedRate=true&period=10000&delay=10000"").setBody(constant(""Hello, i am message"")). 
  to(""xmpp://"" + XMPP_FROM_NAME + ""/masny@websphere"" + ""?password="" + XMPP_FROM_PASS); 

""camel:run"" command runs this route and succesfully sends message. 
But if i create a bundle and deploy it to Felix Karaf, my route not sends message, in DEBUG log i see :

DEBUG | xtenderThread-42 | DefaultCamelContext              | e.camel.impl.DefaultCamelContext  994 | ... Routes started 
 INFO  | xtenderThread-42 | DefaultCamelContext              | e.camel.impl.DefaultCamelContext  997 | Apache Camel 2.1.0 (CamelContext:camelContext) started 
 INFO  | xtenderThread-42 | OsgiBundleXmlApplicationContext  | ractOsgiBundleApplicationContext  327 | Publishing application context as OSGi service with properties {org.springframework.context.service.name=try-xmpp, Bundle-SymbolicName=try-xmpp, Bundle-Version=0.1.0} 
 DEBUG | xtenderThread-42 | OsgiBundleXmlApplicationContext  | ractOsgiBundleApplicationContext  341 | Publishing service under classes {org.springframework.osgi.context.DelegatedExecutionOsgiBundleApplicationContext, org.springframework.osgi.context.ConfigurableOsgiBundleApplicationContext, org.springframework.context.ConfigurableApplicationContext, org.springframework.context.ApplicationContext, org.springframework.context.Lifecycle, org.springframework.beans.factory.ListableBeanFactory, org.springframework.beans.factory.HierarchicalBeanFactory, org.springframework.context.MessageSource, org.springframework.context.ApplicationEventPublisher, org.springframework.core.io.support.ResourcePatternResolver, org.springframework.beans.factory.BeanFactory, org.springframework.core.io.ResourceLoader, org.springframework.beans.factory.DisposableBean} 
 DEBUG | xtenderThread-42 | try-xmpp                         | ?                                   ? | ServiceEvent REGISTERED 
 DEBUG | xtenderThread-42 | BlueprintListener                | actory$SpringApplicationListener  140 | Spring app state changed to Started for bundle 93 
 DEBUG | xtenderThread-42 | BlueprintListener                | actory$SpringApplicationListener  140 | Spring app state changed to Started for bundle 93 
 INFO  | xtenderThread-42 | ContextLoaderListener            | BundleApplicationContextListener   45 | Application context successfully refreshed (OsgiBundleXmlApplicationContext(bundle=try-xmpp, config=osgibundle:/META-INF/spring/*.xml)) 
 INFO  | foo              | Tracer                           | rg.apache.camel.processor.Logger   88 | 8f812d3e-15cc-4ca3-b6c0-4077beef75bc >>> (route30) from(timer://foo?delay=10000&fixedRate=true&period=10000) --> setBody[Hello, i am message] <<< Pattern:InOnly, Headers:{firedTime=Thu Feb 11 12:18:13 EET 2010}, BodyType:null, Body:null 
 INFO  | foo              | Tracer                           | rg.apache.camel.processor.Logger   88 | 8f812d3e-15cc-4ca3-b6c0-4077beef75bc >>> (route30) setBody[Hello, i am message] --> xmpp://wsbise@websphere/masny@websphere?password=123456789 <<< Pattern:InOnly, Headers:{firedTime=Thu Feb 11 12:18:13 EET 2010}, BodyType:String, Body:Hello, i am message 
 DEBUG | foo              | XmppPrivateChatProducer          | ent.xmpp.XmppPrivateChatProducer   46 | Creating XmppPrivateChatProducer to participant masny@websphere 
 DEBUG | foo              | CachedIntrospectionResults       | beans.CachedIntrospectionResults  151 | Not strongly caching class [org.apache.camel.management.mbean.ManagedProducer] because it is not cache-safe 
 DEBUG | foo              | DefaultManagementAgent           | anagement.DefaultManagementAgent  304 | Registered MBean with objectname: org.apache.camel:context=masny/camelContext,type=producers,name=XmppPrivateChatProducer(0x11c0dc6) 
 DEBUG | foo              | XmppPrivateChatProducer          | pache.camel.impl.DefaultProducer   66 | Starting producer: Producer[xmpp://wsbise@websphere/masny@websphere?password=123456789] 
 DEBUG | foo              | ProducerCache                    | .apache.camel.impl.ProducerCache  211 | Adding to producer cache with key: Endpoint[xmpp://wsbise@websphere/masny@websphere?password=123456789] for producer: Producer[xmpp://wsbise@websphere/masny@websphere?password=123456789] 
 DEBUG | foo              | DefaultErrorHandler              | rg.apache.camel.processor.Logger  197 | Failed delivery for exchangeId: 8f812d3e-15cc-4ca3-b6c0-4077beef75bc. On delivery attempt: 0 caught: java.lang.NullPointerException 
 DEBUG | foo              | DefaultErrorHandler              | processor.RedeliveryErrorHandler  411 | This exchange is not handled so its marked as failed: Exchange[Message: Hello, i am message] 
 DEBUG | foo              | Pipeline                         | .apache.camel.processor.Pipeline   99 | Message exchange has failed so breaking out of pipeline: Exchange[Message: Hello, i am message] Exception: java.lang.NullPointerException 
 ERROR | foo              | TimerConsumer                    | rg.apache.camel.processor.Logger  248 | 
java.lang.NullPointerException 
        at org.jivesoftware.smackx.muc.MultiUserChat$1.connectionCreated(MultiUserChat.java:84) 
        at org.jivesoftware.smack.XMPPConnection.initConnection(XMPPConnection.java:887) 
        at org.jivesoftware.smack.XMPPConnection.connectUsingConfiguration(XMPPConnection.java:834) 
        at org.jivesoftware.smack.XMPPConnection.connect(XMPPConnection.java:1276) 
        at org.apache.camel.component.xmpp.XmppEndpoint.createConnection(XmppEndpoint.java:140) 
        at org.apache.camel.component.xmpp.XmppPrivateChatProducer.process(XmppPrivateChatProducer.java:52) 
        at org.apache.camel.processor.SendProcessor$1.doInProducer(SendProcessor.java:97) 
        at org.apache.camel.processor.SendProcessor$1.doInProducer(SendProcessor.java:95) 
        at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:146) 
        at org.apache.camel.processor.SendProcessor.doProcess(SendProcessor.java:94) 
        at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:82) 
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67) 
        at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:53) 
        at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:82) 
        at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:162) 
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67) 
        at org.apache.camel.processor.RedeliveryErrorHandler.processExchange(RedeliveryErrorHandler.java:223) 
        at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:153) 
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:91) 
        at org.apache.camel.processor.DefaultErrorHandler.process(DefaultErrorHandler.java:49) 
        at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:206) 
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:74) 
        at org.apache.camel.processor.UnitOfWorkProcessor.processNext(UnitOfWorkProcessor.java:54) 
        at org.apache.camel.processor.DelegateProcessor.process(DelegateProcessor.java:48) 
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67) 
        at org.apache.camel.component.timer.TimerConsumer.sendTimerExchange(TimerConsumer.java:103) 
        at org.apache.camel.component.timer.TimerConsumer$1.run(TimerConsumer.java:50) 
        at java.util.TimerThread.mainLoop(Timer.java:512) 
        at java.util.TimerThread.run(Timer.java:462) 

On Felix installed all requirement bundles (camel-osgi, camel-xmpp, etc).

Full project attached in topic
http://old.nabble.com/camel-xmpp-not-sends-message-in-Felix-Karaf-td27544316.html","Java 1.5
Apache Felix Karaf 1.2
org.apache.felix.framework - 2.0.1
Windows 2003 version 5.2",,,,,,,,,,,,,,SMX4-484,,12/Feb/10 10:09;pilgr;smack-3.1.0-bundle.jar;https://issues.apache.org/jira/secure/attachment/12463130/smack-3.1.0-bundle.jar,11/Feb/10 13:38;pilgr;try-xmpp-project.jar;https://issues.apache.org/jira/secure/attachment/12463127/try-xmpp-project.jar,,,,2.0,,,,,,,,,,,,,,,,,,,2010-02-11 14:33:02.744,,,no_permission,,,,,,,,,,,,,76514,,,Sun Apr 24 09:57:34 UTC 2011,,,,,,,0|i01oqv:,7778,,,,,,,,,11/Feb/10 13:38;pilgr;my eclipse project,"11/Feb/10 14:33;slewis;Hey Aleksey, will have to try this, I had successfully used the xmpp component in an older version of SMX4 but things may have changed since then.  What are you using for an XMPP server BTW?  Can you see if specifying the port and serviceName argument changes the behavior while I'm looking into this?","11/Feb/10 14:52;pilgr;I use local Openfire server.
Port and service name not changing. Endpoint configured by string ""xmpp://wsbise@websphere/masny@websphere?password=123456789]"", as see in log.

I tried to send a message from my custom bean (by Smack API), not using camel-xmpp. And received the same error.

16:32:29,653 | INFO  | foo              | Tracer                           | rg.apache.camel.processor.Logger   88 | 936982fe-f449-40ce-a426-0e3d9724126b >>> (route33) from(timer://foo?fixedRate=true&period=10000) --> setBody[Hello, i am message] <<< Pattern:InOnly, Headers:{firedTime=Thu Feb 11 16:32:29 EET 2010}, BodyType:null, Body:null
16:32:29,653 | INFO  | foo              | Tracer                           | rg.apache.camel.processor.Logger   88 | 936982fe-f449-40ce-a426-0e3d9724126b >>> (route33) setBody[Hello, i am message] --> bean://helper?method=notifyJabberClient <<< Pattern:InOnly, Headers:{firedTime=Thu Feb 11 16:32:29 EET 2010}, BodyType:String, Body:Hello, i am message
16:32:29,653 | DEBUG | foo              | DefaultListableBeanFactory       | tory.support.AbstractBeanFactory  214 | Returning cached instance of singleton bean 'helper'
16:32:30,215 | DEBUG | foo              | DefaultErrorHandler              | rg.apache.camel.processor.Logger  197 | Failed delivery for exchangeId: 936982fe-f449-40ce-a426-0e3d9724126b. On delivery attempt: 0 caught: java.lang.NullPointerException
16:32:30,215 | DEBUG | foo              | DefaultErrorHandler              | processor.RedeliveryErrorHandler  411 | This exchange is not handled so its marked as failed: Exchange[Message: Hello, i am message]
16:32:30,215 | DEBUG | foo              | Pipeline                         | .apache.camel.processor.Pipeline   99 | Message exchange has failed so breaking out of pipeline: Exchange[Message: Hello, i am message] Exception: java.lang.NullPointerException
16:32:30,215 | ERROR | foo              | TimerConsumer                    | rg.apache.camel.processor.Logger  248 | 
java.lang.NullPointerException
	at org.jivesoftware.smackx.muc.MultiUserChat$1.connectionCreated(MultiUserChat.java:84)
	at org.jivesoftware.smack.XMPPConnection.initConnection(XMPPConnection.java:887)
	at org.jivesoftware.smack.XMPPConnection.connectUsingConfiguration(XMPPConnection.java:834)
	at org.jivesoftware.smack.XMPPConnection.connect(XMPPConnection.java:1276)
	at mti.try_xmpp.Helper.notifyJabberClient(Helper.java:15)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at org.apache.camel.component.bean.MethodInfo.invoke(MethodInfo.java:195)
	at org.apache.camel.component.bean.MethodInfo$1.proceed(MethodInfo.java:115)
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:117)
	at org.apache.camel.impl.ProcessorEndpoint.onExchange(ProcessorEndpoint.java:95)
	at org.apache.camel.impl.ProcessorEndpoint$1.process(ProcessorEndpoint.java:65)
	at org.apache.camel.processor.SendProcessor$1.doInProducer(SendProcessor.java:97)
	at org.apache.camel.processor.SendProcessor$1.doInProducer(SendProcessor.java:95)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:146)
	at org.apache.camel.processor.SendProcessor.doProcess(SendProcessor.java:94)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:82)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
	at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:53)
	at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:82)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:162)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
	at org.apache.camel.processor.RedeliveryErrorHandler.processExchange(RedeliveryErrorHandler.java:223)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:153)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:91)
	at org.apache.camel.processor.DefaultErrorHandler.process(DefaultErrorHandler.java:49)
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:206)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:74)
	at org.apache.camel.processor.UnitOfWorkProcessor.processNext(UnitOfWorkProcessor.java:54)
	at org.apache.camel.processor.DelegateProcessor.process(DelegateProcessor.java:48)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
	at org.apache.camel.component.timer.TimerConsumer.sendTimerExchange(TimerConsumer.java:103)
	at org.apache.camel.component.timer.TimerConsumer$1.run(TimerConsumer.java:50)
	at java.util.TimerThread.mainLoop(Timer.java:512)
	at java.util.TimerThread.run(Timer.java:462)


May be it is a bug in Smack-bundle or Felix?","11/Feb/10 15:06;slewis;Could be, we're using 3.0.4 in Camel.  The thing to do probably is to write a simple bundle that just uses smack/smackx and see if that shows the same problem, then try 3.1.0.  I can work on bumping the version of smack up to 3.1.0 in camel also.","12/Feb/10 10:09;pilgr;I tried replace Smack from 3.0.4 to 3.1.0 and camel-xmpp properly work now. And successfully sending messages! :) 

To do this, I made:
1. feature:install camel-xmpp 2.1.0
2. osgi:uninstall two smack-bundle v.3.0.4
3. osgi:install my custom bundle, which include two smack library v.3.1.0 and manually created MANIFEST.MF
4. refresh camel-xmpp for refresh import dependencies 
5. osgi:start my try-xmpp bundle

My custom bundle is attached.","12/Feb/10 11:33;njiang;We need to upgrade the smack bundle in servicemix bundle module, in this way we can support it out of box.
Stan , you can take [this pom |https://svn.apache.org/repos/asf/servicemix/smx4/bundles/trunk/smack-3.0.4/pom.xml] as an example.
And we also need to update apache-camel features file for this upgrading. 
BTW,
I fixed the issue of maven failed to resolve the smack 3.1.0 by adding the smack maven repository to camel-xmpp pom.
 ","12/Feb/10 13:11;slewis;Okay Willem, will try and get this done today.","12/Feb/10 14:49;slewis;Hey Willem, have created SMX4-484 with a patch.  Do I need to wait for this patch to be committed before updating the camel features file?","12/Feb/10 15:28;njiang;@Stan,  Yes, we need to wait for the servicemix patch to be applied.","16/Feb/10 14:39;slewis;@Willem, Jean-Baptiste applied my patch there, just curious should I wait until that bundle is released or is it okay to reference a snapshot version from the features file?  I'm guessing this needs to wait until the updated smack bundle is actually released, just wanted to double-check.","10/Apr/10 14:34;davsclaus;Stan any update on this one, has the bundle been released?","12/Apr/10 11:37;slewis;No, doesn't look like my bundle's been released yet, the latest one on repo1.maven.org is 3.0.4_2","15/May/10 17:56;davsclaus;Stan Smack 3.1 osgi bundle is now avail in central maven repo
http://repo2.maven.org/maven2/org/apache/servicemix/bundles/org.apache.servicemix.bundles.smack/3.1.0_1/

I think its just a matter of updating the features.xml to use this version","15/May/10 17:57;davsclaus;Has been updated in features.xml
<smack-bundle-version>3.1.0_1</smack-bundle-version>",24/Apr/11 09:57;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HttpHeaderFilterStrategy should filter the HTTP 'Date' header when applyFilterToCamelHeaders is called,CAMEL-2458,12486474,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,muellerc,muellerc,muellerc,10/Feb/10 17:39,24/Apr/11 10:01,14/Mar/19 02:42,11/Feb/10 05:39,2.1.0,,,,,,,,,,2.3.0,,,camel-http,,,,0,See [rfc2616|http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.5].,All,,,,,,,,,,,,,,,,10/Feb/10 21:49;muellerc;HttpHeaderFilterStrategyTest_20100210.patch;https://issues.apache.org/jira/secure/attachment/12463113/HttpHeaderFilterStrategyTest_20100210.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-02-11 05:39:20.861,,,no_permission,,,,,,,,,,,,,76516,,,Sun Apr 24 10:01:24 UTC 2011,,,,,,,0|i01opj:,7772,,,,,,,,,10/Feb/10 21:49;muellerc;Provided the patch,"11/Feb/10 05:39;njiang;Applied patch with thank to Christian.
http://svn.apache.org/viewvc?rev=908736&view=rev",24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"WARNING log of JmsTemporaryTopicEndpoint , JmsTemporaryQueueEndpoint don't have the ManagedResource annotation",CAMEL-2456,12487228,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,njiang,njiang,10/Feb/10 02:13,24/Apr/11 10:01,14/Mar/19 02:42,12/Feb/10 07:09,2.1.0,,,,,,,,,,2.3.0,,,camel-jms,,,,0,"Here is the mail thread which discusses about this issue.
http://old.nabble.com/Attemp-to-send-message-to-activemq-temporary-queue-using-producerTemplate%3A-InvalidMetadataException-tp27520096p27520096.html",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-02-10 06:21:10.177,,,no_permission,,,,,,,,,,,,,76517,,,Sun Apr 24 10:01:11 UTC 2011,,,,,,,0|i01op3:,7770,,,,,,,,,"10/Feb/10 06:21;davsclaus;I do NOT think we should enlist temporary JMS queues in JMX
management, the overhead is way to high for that.
Since those queues are temporary they live for a short time and
management is more about long lived resources to manage.

Can we do a -1 on this and implement logic to skip trying to register
those kind of endpoints for management.","10/Feb/10 06:42;njiang;Hi Claus

I think we should provide the management for the temporary Queue, as these endpoints are exiting in the camel context.
Client may want to ask managed information about these endpoint.
If we shutdown the camel context , all the camel managed resources are gone, and it will not introduce any further burden. ","10/Feb/10 06:53;davsclaus;Willem *yes* it will

JMX puts *considerable* overhead on endpoint registration. And temporary endpoints should *newer* be registered in JMX.
The temporary endpoint uses unique uri's and therefore you will keep adding managed endpoints to JMX which end the end will downgrade your system.
All together it impacts performance unnecessary.

We have had such issues in the past where people over days will accumulate millions of endpoints in JMX and cause high memory usage.
In the end causing people to have to shutdown and restart their system.

So please do a -1.","10/Feb/10 07:28;njiang;Hi Claus,

I checked the code of  JmsTemporaryTopicEndpoint , JmsTemporaryQueueEndpoint and they are singleton endpoint,
and we hit the JMX exception as current Camel only register the singleton endpoint into JMX agent to avoid the situation that you described.

It could be easy to let camel skip these endpoint by checking the ManagedResource annotation, but I still want to know if the singleton endpoint still have the potential JMX issue that you mentioned.
","10/Feb/10 12:44;davsclaus;This issue is when the end user is sending using ProducerTemplate the reply manually.

If using Camel request/reply out of the box, Camel will not enlist temporary queues as endpoints. This is good as the overhead is thus only when end user does it manually.",10/Feb/10 14:18;davsclaus;The only problem I see is if the end user uses a lot of different temporary JMS queues with different names as they will then be enlisted in JMX to no avail.,"12/Feb/10 07:08;njiang;Hi Claus,

I agree if the user use the ExchangeID as the temporary queue and use that to implement request/reply message exchange pattern, register these kind of temporary queues to JMX agent will be a big issue.

So I reverted my last commit of this issue and find better new way to fix this WARNING log issue.
And now these JmsTemporaryTopicEndpoint , JmsTemporaryQueueEndpoint will not be registered to JMX agent.

","12/Feb/10 07:23;davsclaus;Willem

You current solutions is great. Good work.",24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"HttpHeaderFilterStrategy dosn't filters out 'Cache-Control', 'Connection', 'Pragma', 'Trailer', 'Transfer-Encoding', 'Upgrade', 'Via' and 'Warning' in method applyFilterToCamelHeaders",CAMEL-2452,12487843,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,muellerc,muellerc,06/Feb/10 13:56,03/Nov/10 22:04,14/Mar/19 02:42,03/Nov/10 22:04,2.1.0,,,,,,,,,,2.3.0,,,camel-http,,,,0,HttpHeaderFilterStrategy uses the HTTP headers with upper case characters on the beginning (e. g. 'Transfer-Encoding' instead of 'transfer-encoding').,All,,,,,,,,,,,,,,,,06/Feb/10 16:37;muellerc;HttpHeaderFilterStrategy.patch;https://issues.apache.org/jira/secure/attachment/12463122/HttpHeaderFilterStrategy.patch,06/Feb/10 16:37;muellerc;HttpHeaderFilterStrategyTest.patch;https://issues.apache.org/jira/secure/attachment/12463101/HttpHeaderFilterStrategyTest.patch,,,,2.0,,,,,,,,,,,,,,,,,,,2010-02-06 15:03:31.722,,,no_permission,,,,,,,,,,,,,76518,,,Wed Nov 03 22:04:04 UTC 2010,,,,,,,0|i01oo7:,7766,,,,,,,,,06/Feb/10 15:03;davsclaus;http headers are case *insensitive* so you can spell them how you like,"06/Feb/10 16:23;davsclaus;I have moved this to 2.3 as I do not want Hadrian to hold up building the 2.2 release if he things this ticket must be fixed first.

Christian can you describe a bit more what you think is the problem?
Doesn't the filter ignore case when filtering? If not you can add that into the reg exp to tell it to ignore case.","06/Feb/10 16:37;muellerc;Hey Claus,
you are too fast for me... :-)

I attached a unit test to show what the problem is (in my opinion).
You are right, the http header are case intensive, but the HttpHeaderFilterStrategy (extends DefaultHeaderFilterStrategy) expect the filter keys in lower case, if the 'lowerCase' attribute is set to true (which is the case for HttpHeaderFilterStrategy). If the filter keys are defined in upper case or camel case, the filter will never applied.

{code}
        if (filter != null) {
            if (isLowerCase()) {
                if (filter.contains(headerName.toLowerCase())) {
                    return true;
                }
            } else {
                if (filter.contains(headerName)) {
                    return true;
                }
            }
        }
{code}

Regards,
Christian","10/Feb/10 09:21;muellerc;Claus,
could you please have a look on this issue and patch. [CAMEL-1530|https://issues.apache.org/activemq/browse/CAMEL-1530] depends on this and I planed to deliver the patch for [CAMEL-1530|https://issues.apache.org/activemq/browse/CAMEL-1530] in the next tree days.

The ""problem"" is, that HttpClient 4.0.1 checks the request header of the presents of some header which must not in, e.g. Transfer-Encoding. This header (and the other headers list in the issue name) should be filtered by the HttpHeaderFilterStrategy:

{code:title=HttpHeaderFilterStrategy.java}
public class HttpHeaderFilterStrategy extends DefaultHeaderFilterStrategy {

    public HttpHeaderFilterStrategy() {
        initialize();
    }

    protected void initialize() {
        getOutFilter().add(""content-length"");
        getOutFilter().add(""content-type"");
        // Add the filter for the Generic Message header
        // http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.5
        getOutFilter().add(""Cache-Control"");
        getOutFilter().add(""Connection"");
        getOutFilter().add(""Pragma"");
        getOutFilter().add(""Trailer"");
        getOutFilter().add(""Transfer-Encoding"");
        getOutFilter().add(""Upgrade"");
        getOutFilter().add(""Via"");
        getOutFilter().add(""Warning"");

    setLowerCase(true);

        // filter headers begin with ""Camel"" or ""org.apache.camel""
        // must ignore case for Http based transports
        setOutFilterPattern(""(?i)(Camel|org\\.apache\\.camel)[\\.|a-z|A-z|0-9]*"");
        }
}
{code}

But DefaultHeaderFilterStrategy compares the lower case strings, if lowerCase is set to true (which is the case for HttpHeaderFilterStrategy)

{code:title=DefaultHeaderFilterStrategy .java}
if (filter != null) {
    if (isLowerCase()) {
        if (filter.contains(headerName.toLowerCase())) {
            return true;
        }
    } else {
        if (filter.contains(headerName)) {
            return true;
        }
    }
}
{code}

This imply, that 'Transfer-Encoding' is comparing with 'transfer-encoding' what never match and this header will be never filtered out.

Tanks,
Christian",10/Feb/10 14:19;davsclaus;Okay let me look at the patches,"10/Feb/10 14:25;davsclaus;What about {{Date}} header?
http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.5","10/Feb/10 14:29;davsclaus;trunk: 908517.

Thanks for the patch Christian.","02/Nov/10 20:54;unmarshall;Hi,

In Camel 2.5 HttpHeaderFilterStrategy still contains:
getOutFilter().add(""transfer-encoding"");
As per the issue the case should be camel case and not all lower case.

Can we expect a patch for 2.5 version?

Regards,
Madhav","02/Nov/10 22:23;muellerc;I don't see any problems with this code. The patch changed the camel case headers to lower case headers because HttpHeaderFilterStrategy set lower case to true and compares the lower case String of ""Transfer-Encoding"" which is ""transfer-encoding"" with the filter entry which is also ""transfer-encoding"". What is your problem in concrete?

Cheers,
Christian","03/Nov/10 06:48;unmarshall;Hi Christian,

Please refer to the issue posted @ http://camel.465427.n5.nabble.com/CXF-http-conduit-AllowChunking-does-not-work-td3247495.html#a3247495
I initially felt that this was causing the problem but then after seeing your comment it seems that this is not the problem.

Unless you feel otherwise, please close the issue.

regards,
madhav",03/Nov/10 22:04;muellerc;Madhav opened [CAMEL-3306|https://issues.apache.org/activemq/browse/CAMEL-3306] to track his issue.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HL7MLLPDecoder fails if message length is exactly 1022,CAMEL-2451,12487176,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,mrt1nz,mrt1nz,mrt1nz,05/Feb/10 08:56,03/Nov/10 05:13,14/Mar/19 02:42,05/Feb/10 09:14,2.1.0,,,,,,,,,,2.2.0,,,camel-hl7,,,,0,When an HL7 message length is exactly 1022 then the two end control charcters are not read from the same packet/buffer. This causes HL7MLLPDecoder.scan() method to fail.,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-02-05 09:09:02.109,,,no_permission,,,,,,,,,,,,,76519,,,Fri Feb 05 09:10:38 UTC 2010,,,,,,,0|i01onz:,7765,,,,,,,,,"05/Feb/10 09:02;mrt1nz;Although a bit late, I'd like to checkin a fix for the upcoming 2.2 release. If there are any objections please let me know.",05/Feb/10 09:09;davsclaus;Go ahead. You got until Hadrian wakes up :),05/Feb/10 09:10;mrt1nz;I love time zones :),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-spring-osgi module should include the META-INF/services/... file from camel-spring,CAMEL-2450,12487842,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,04/Feb/10 12:42,03/Nov/10 05:13,14/Mar/19 02:42,04/Feb/10 13:14,2.1.0,,,,,,,,,,2.2.0,,,,,,,0,"The shade plugin doesn't include the files in META-INF/services from camel-spring bundle, we should fix it.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76520,,,Thu Feb 04 13:14:11 UTC 2010,,,,,,,0|i01onr:,7764,,,,,,,,,"04/Feb/10 13:14;njiang;trunk 
http://svn.apache.org/viewvc?rev=906473&view=rev",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
cxfbean should  propagate CONTENT_TYPE for other camel component to use,CAMEL-2447,12487836,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,04/Feb/10 02:45,03/Nov/10 05:13,14/Mar/19 02:42,04/Feb/10 03:38,2.0.0,2.0-M3,2.1.0,,,,,,,,2.2.0,,,camel-cxf,,,,0,"There is no ""content-type"" header return from the below route
{code}
 <route>

      <from uri=""jetty:http://localhost:9006/employeesBase?matchOnUriPrefix=true""/>

      <to uri=""cxfbean:EmployeesPOJO""/>

  </route>
{code}",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76522,,,Thu Feb 04 03:38:16 UTC 2010,,,,,,,0|i01on3:,7761,,,,,,,,,"04/Feb/10 03:38;njiang;trunk
http://svn.apache.org/viewvc?rev=906331&view=rev",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BatchProcesser.processExchange needs to catch Throwable,CAMEL-2445,12487837,12487839,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,slewis,slewis,slewis,03/Feb/10 21:57,03/Nov/10 05:13,14/Mar/19 02:42,04/Feb/10 07:09,1.6.2,2.1.0,,,,,,,,,1.6.3,2.2.0,,camel-core,,,,0,"If an aggregator sends an exchange to a processor that throws an Error this causes the thread started by BatchProcessor to exit, exchanges will then accumulate in the aggregator until an OutOfMemoryError occurs.

This patch sorts that out and adds a unit test, however there's another problem that I'm still looking into, namely that BatchProcessor just uses an instance of LoggingErrorHandler as it's exception handler, so any exceptions/errors caught by this processor will just get logged and not follow the normal Camel error handling.",,,,,,,,,,,,,,,,,04/Feb/10 00:21;jgenender;1.x.patch;https://issues.apache.org/jira/secure/attachment/12463089/1.x.patch,04/Feb/10 00:21;jgenender;2.x.patch;https://issues.apache.org/jira/secure/attachment/12463088/2.x.patch,03/Feb/10 22:10;slewis;patch-1.x.txt;https://issues.apache.org/jira/secure/attachment/12463086/patch-1.x.txt,03/Feb/10 22:15;slewis;patch-2.x.txt;https://issues.apache.org/jira/secure/attachment/12463129/patch-2.x.txt,,4.0,,,,,,,,,,,,,,,,,,,2010-02-04 00:01:55.838,,,no_permission,,,,,,,,,,,,,76523,,,Thu Feb 04 07:09:26 UTC 2010,,,Patch Available,,,,0|i01omn:,7759,,,,,,,,,"04/Feb/10 00:01;jgenender;This is caused by the the trapping of Exception in the BatchSender but wont fire for Throwable (i.e. NoSuchMethodError/LingageError, etc).  Thus when the exceptions fire, it continues on about its way, filling the LinkedList and thus a memory leak ensues.  The patch really should be at where it is already looking for errors.  Patches for 1.x and 2.x. are attached.","04/Feb/10 06:16;davsclaus;I will change Camel 2.x to catch all kind of exceptions in CAMEL-2448. Then the regular camel error handler will also handle this NoSuchMethodException which will at minimum be logged, so there is a trace in the log now.

In 1.x we will patch it with your patches so BatchProcessor will log the exceptions.

I have adjusted your patch a bit as you need to catch the exception in the loop so Camel will process the next exchange to drain the aggregated exceptions. Otherwise they will be kept in the memory and it will only process 1 exchange at every trigger. And thus it can lead to consume more memory if your fill in more messages than it can drain.",04/Feb/10 06:25;davsclaus;Merged to 1.x: 906376.,"04/Feb/10 07:09;davsclaus;Willem applied patch to trunk: 906342

And I refined the patch a bit: 906381",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Log Component documentation for ""showAll"" option is misleading",CAMEL-2444,12487835,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,davsclaus,mbmather,mbmather,03/Feb/10 20:27,03/Nov/10 05:13,14/Mar/19 02:42,04/Feb/10 06:13,2.1.0,,,,,,,,,,2.2.0,,,documentation,,,,0,"Log Component documentation for ""showAll"" option is misleading or the option does not work as expected.

""showAll 	 false 	 Quick option for turning all options on.""

There appear to be several options that are not turned as expected such as ""multiline"" and ""showStackTrace"", etc..  

",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-02-04 06:13:51.601,,,no_permission,,,,,,,,,,,,,76524,,,Thu Feb 04 06:13:51 UTC 2010,,,,,,,0|i01omf:,7758,,,,,,,,,"04/Feb/10 06:13;davsclaus;Thanks for reporting. I have updated the wiki and fixed an issue in the code in terms of showStrackTrace with showAll

trunk: 906375",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Explicit version ranges on javax.* imports in camel-cxf bundle manifest cause a problem when running on equinox via pax-runner,CAMEL-2442,12487827,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,eglynn,eglynn,03/Feb/10 10:50,03/Nov/10 05:13,14/Mar/19 02:42,03/Feb/10 12:23,2.1.0,,,,,,,,,,1.6.3,2.2.0,,camel-cxf,,,,0,"There's a mismatch between the explicit version constraints on the javax.activation, javax.annotation, javax.jws, javax.xml.ws etc. packages in the camel-cxf manifest and the actual version assigned to these packages by Equinox when pulled in via the system packages from the Java6 rt.jar.

This causes bundle resolution failures such as the following:

{code}
org.osgi.framework.BundleException: The bundle could not be resolved. Reason: Package uses conflict: Import-Package: org.apache.camel; version=""2.2.something""
{code}

Normally this issue could be suppressed by configuring the Equinox system packages to exclude the problematic javax.* packages. However, we don't have enough control over this in pax-runner 1.3 (which unilaterally adds these packages in the generated config.ini).

The solution is to loosen the version constraints on these imports in the camel-cxf bundle manifest.","$ java -version
java version ""1.6.0_16""
Java(TM) SE Runtime Environment (build 1.6.0_16-b01)
Java HotSpot(TM) Server VM (build 14.2-b01, mixed mode)
$ uname -a
Linux geodesic 2.6.28-17-generic #58-Ubuntu SMP Tue Dec 1 18:57:07 UTC 2009 i686 GNU/Linux",,,,,,,,,,,,,,,,03/Feb/10 10:53;eglynn;camel-2442.patch;https://issues.apache.org/jira/secure/attachment/12463085/camel-2442.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-02-03 11:10:10.145,,,no_permission,,,,,,,,,,,,,76525,,,Wed Feb 03 12:23:56 UTC 2010,,,Patch Available,,,,0|i01olz:,7756,,,,,,,,,03/Feb/10 10:53;eglynn;Please review and apply attached patch is considered OK.,03/Feb/10 11:10;davsclaus;Willem will you take care of this ASAP,"03/Feb/10 11:14;njiang;Claus: yeah, I'm working on it now.
","03/Feb/10 12:23;njiang;Hi Eoghan,

I just changed you patch a little bit and used * to avoid specify to reduce the package number of import section.
I also merged the patch into camel 1.x branch.

BTW, I checked other camel module such as camel-jaxb, camel-jms, etc, they don't have the issue that you meet. 

","03/Feb/10 12:23;njiang;camel trunk
http://svn.apache.org/viewvc?rev=906013&view=rev
camel 1.x branch
http://svn.apache.org/viewvc?rev=906019&view=rev",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
File consumer - Consuming from absolute paths can cause issue on Windows when moving file when done,CAMEL-2439,12487831,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,02/Feb/10 16:59,03/Nov/10 05:13,14/Mar/19 02:42,02/Feb/10 17:26,2.1.0,,,,,,,,,,2.2.0,,,camel-core,,,,0,"When using a file consumer with an absolute path, eg {{from(""file:/data"")}} then when the process is done and it wants to move the file to {{.camel}} sub dir of {{/data}} it may not do that correctly on Windows.

The issue is the logic in Camel is based upon that a path starting with \ is considered absolute, as it is on Unix OS and other platforms. Where as on Windows {{java.io.File}} returns {{false}} for such files. The other return {{true}}. So we need to cater for this and make Windows return {{true}} as well so the logic is consistent across OS.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76526,,,Tue Feb 02 17:26:43 UTC 2010,,,,,,,0|i01olb:,7753,,,,,,,,,02/Feb/10 17:26;davsclaus;trunk: 905715.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BeanProcessor - Should differentiate between void and method returning null values,CAMEL-2436,12487774,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,02/Feb/10 09:14,26/Aug/11 06:41,14/Mar/19 02:42,02/Feb/10 11:59,2.0.0,2.1.0,,,,,,,,,2.2.0,,,camel-core,,,,0,"When invoking a bean method it should better detect whether the bean is a *void* or has a return type.
And if it returns {{null}} it should be regarded as a valid response and set as body.

See nabble
http://old.nabble.com/filtering-messages-ts27403559.html",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,63660,,,Tue Feb 02 11:59:10 UTC 2010,,,,,,,0|i01okn:,7750,,,,,,,,,02/Feb/10 11:59;davsclaus;trunk: 905594.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-example-reportincident throwing exception,CAMEL-2430,12487829,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,chrislovecnm,chrislovecnm,31/Jan/10 22:11,03/Nov/10 05:13,14/Mar/19 02:42,01/Feb/10 02:17,,,,,,,,,,,2.2.0,,,examples,,,,0,"When I execute mvn jetty:run the following exception is thrown:

{code}WARNING: Could not find endpoint/port for {http://reportincident.example.camel.apache.org}ReportIncidentEndpointPort in wsdl. Using {http://reportincident.example.camel.apache.org}ReportIncidentService.
2010-01-31 15:07:35,342 [main           ] ERROR ContextLoader                  - Context initialization failed
org.apache.camel.RuntimeCamelException: org.apache.cxf.service.factory.ServiceConstructionException
        at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1055)
        at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:103)
        at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:593)
        at org.springframework.context.event.SimpleApplicationEventMulticaster$1.run(SimpleApplicationEventMulticaster.java:78)

2010-01-31 15:07:35.347::WARN:  Failed startup of context org.mortbay.jetty.plugin.Jetty6PluginWebAppContext@5952e9a8{/camel-example-reportincident,/data/workspace/examples_orig/camel-example-reportincident/src/main/webapp}
org.apache.camel.RuntimeCamelException: org.apache.cxf.service.factory.ServiceConstructionException
        at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1055)
        at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:103)
        at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:593

Caused by: java.net.MalformedURLException: no protocol: /incident
        at java.net.URL.<init>(URL.java:567)
        at java.net.URL.<init>(URL.java:464)
        at java.net.URL.<init>(URL.java:413)
        at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.<init>(JettyHTTPDestination.java:96)
        at org.apache.cxf.transport.http_jetty.JettyHTTPTransportFactory.createDestination(JettyHTTPTransportFactory.java:116)
        at org.apache.cxf.transport.http_jetty.JettyHTTPTransportFactory.getDestination(JettyHTTPTransportFactory.java:103)
        at org.apache.cxf.endpoint.ServerImpl.initDestination(ServerImpl.java:90)
        at org.apache.cxf.endpoint.ServerImpl.<init>(ServerImpl.java:69)
        at org.apache.cxf.frontend.ServerFactoryBean.create(ServerFactoryBean.java:106){code}

I have edited the exception to make it shorter.","Apache Maven 2.2.1 (r801777; 2009-08-06 13:16:01-0600)
Java version: 1.6.0_17
jetty-6.1.19
Java home: /opt/sun-jdk-1.6.0.17/jre
Default locale: en_US, platform encoding: ANSI_X3.4-1968
OS name: ""linux"" version: ""2.6.31-gentoo-r6"" arch: ""amd64"" Family: ""unix""",,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-02-01 02:17:48.497,,,no_permission,,,,,,,,,,,,,76528,,,Mon Feb 01 02:17:48 UTC 2010,,,,,,,0|i01ojb:,7744,,,,,,,,,"01/Feb/10 02:17;njiang;camel trunk
http://svn.apache.org/viewvc?rev=905170&view=rev",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"In camel-cache ""diskStorePath"" property not efficient",CAMEL-2428,12487826,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,skydjol,skydjol,29/Jan/10 11:39,03/Nov/10 05:13,14/Mar/19 02:42,29/Jan/10 11:52,2.1.0,,,,,,,,,,2.2.0,,,,,,,0,"If you want to change path to persisent cache with ""diskStorePath"", it has no effect  because cacheManager erase this value.

In ""addCacheNoCheck"" method, ""setDiskStorePath"" call with ""diskStorePath"" CacheManager property value.

{code:title=CacheManager.java|borderStyle=solid}

    public void addCache(Ehcache cache) throws IllegalStateException,
            ObjectExistsException, CacheException {
        checkStatus();
        if (cache == null) {
            return;
        }
        addCacheNoCheck(cache);
    }

    private void addCacheNoCheck(Ehcache cache) throws IllegalStateException,
            ObjectExistsException, CacheException {
        if (ehcaches.get(cache.getName()) != null) {
            throw new ObjectExistsException(""Cache "" + cache.getName() + "" already exists"");
        }
        cache.setCacheManager(this);
        cache.setDiskStorePath(diskStorePath);
        cache.initialise();
        try {
            cache.bootstrap();
        } catch (CacheException e) {
            LOG.log(Level.WARNING, ""Cache "" + cache.getName() + ""requested bootstrap but a CacheException occured. "" + e.getMessage(), e);
        }
        ehcaches.put(cache.getName(), cache);
        if (cache instanceof Cache) {
            caches.put(cache.getName(), cache);
        }

        //Don't notify initial config. The init method of each listener should take care of this.
        if (status.equals(Status.STATUS_ALIVE)) {
            cacheManagerEventListenerRegistry.notifyCacheAdded(cache.getName());
        }
    }
{code} 

",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-01-29 11:50:10.613,,,no_permission,,,,,,,,,,,,,76529,,,Fri Jan 29 11:52:26 UTC 2010,,,,,,,0|i01oiv:,7742,,,,,,,,,"29/Jan/10 11:50;davsclaus;That code is in EHCache and *not* in Camel.

You need to enable disk overflow by {{overflowToDisk=true}} before Camel will use the diskStorePath option.","29/Jan/10 11:52;davsclaus;I have made it possible to set the option regardless or not overflowToDisk was set or not

trunk: 904473.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"CXF Header ""ResponseContext"" cannot be filtered by HeaderFilterStrategy",CAMEL-2426,12487554,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,wtam,wtam,wtam,29/Jan/10 02:41,03/Nov/10 05:13,14/Mar/19 02:42,29/Jan/10 21:38,2.1.0,,,,,,,,,,2.2.0,,,camel-cxf,,,,0,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76530,,,Fri Jan 29 21:38:08 UTC 2010,,,,,,,0|i01oif:,7740,,,,,,,,,"29/Jan/10 21:38;wtam;Committed revision 904624.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test failed of CxfMtomRouterPayloadModeTest,CAMEL-2425,12487828,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,wtam,njiang,njiang,29/Jan/10 02:39,03/Nov/10 05:13,14/Mar/19 02:42,31/Jan/10 04:36,,,,,,,,,,,2.2.0,,,,,,,0,"After upgraded the CXF version to 2.2.6, we got a random test error of CxfMtomRouterPayloadModeTest,testInvokingServiceFromCXFClient() on TeamCity
Here is the stack trace:
{code}
javax.xml.ws.soap.SOAPFaultException: Unmarshalling Error: null
at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:146)
at $Proxy72.detail(Unknown Source)
at org.apache.camel.component.cxf.mtom.CxfMtomRouterPayloadModeTest.testInvokingServiceFromCXFClient(CxfMtomRouterPayloadModeTest.java:89)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at org.springframework.test.context.junit4.SpringTestMethod.invoke(SpringTestMethod.java:160)
at org.springframework.test.context.junit4.SpringMethodRoadie.runTestMethod(SpringMethodRoadie.java:233)
at org.springframework.test.context.junit4.SpringMethodRoadie$RunBeforesThenTestThenAfters.run(SpringMethodRoadie.java:333)
at org.springframework.test.context.junit4.SpringMethodRoadie.runWithRepetitions(SpringMethodRoadie.java:217)
at org.springframework.test.context.junit4.SpringMethodRoadie.runTest(SpringMethodRoadie.java:197)
at org.springframework.test.context.junit4.SpringMethodRoadie.run(SpringMethodRoadie.java:143)
at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.invokeTestMethod(SpringJUnit4ClassRunner.java:160)
at org.junit.internal.runners.JUnit4ClassRunner.runMethods(JUnit4ClassRunner.java:51)
at org.junit.internal.runners.JUnit4ClassRunner$1.run(JUnit4ClassRunner.java:44)
at org.junit.internal.runners.ClassRoadie.runUnprotected(ClassRoadie.java:27)
at org.junit.internal.runners.ClassRoadie.runProtected(ClassRoadie.java:37)
at org.junit.internal.runners.JUnit4ClassRunner.run(JUnit4ClassRunner.java:42)
at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:97)
at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:62)
at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:140)
at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:165)
at org.apache.maven.surefire.Surefire.run(Surefire.java:107)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:289)
at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:1005)
Caused by: javax.xml.bind.UnmarshalException
- with linked exception:
[javax.xml.bind.UnmarshalException
- with linked exception:
[java.lang.NullPointerException]]
at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl.handleStreamException(UnmarshallerImpl.java:425)
at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl.unmarshal0(UnmarshallerImpl.java:362)
at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl.unmarshal(UnmarshallerImpl.java:339)
at org.apache.cxf.jaxb.JAXBEncoderDecoder.unmarshall(JAXBEncoderDecoder.java:749)
at org.apache.cxf.jaxb.JAXBEncoderDecoder.unmarshall(JAXBEncoderDecoder.java:623)
at org.apache.cxf.jaxb.io.DataReaderImpl.read(DataReaderImpl.java:128)
at org.apache.cxf.interceptor.DocLiteralInInterceptor.handleMessage(DocLiteralInInterceptor.java:106)
at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:239)
at org.apache.cxf.endpoint.ClientImpl.onMessage(ClientImpl.java:671)
at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleResponseInternal(HTTPConduit.java:2205)
at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleResponse(HTTPConduit.java:2084)
at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.close(HTTPConduit.java:1982)
at org.apache.cxf.transport.AbstractConduit.close(AbstractConduit.java:66)
at org.apache.cxf.transport.http.HTTPConduit.close(HTTPConduit.java:637)
at org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor.handleMessage(MessageSenderInterceptor.java:62)
at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:239)
at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:483)
at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:309)
at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:261)
at org.apache.cxf.frontend.ClientProxy.invokeSync(ClientProxy.java:73)
at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:124)
... 29 more
Caused by: javax.xml.bind.UnmarshalException
- with linked exception:
[java.lang.NullPointerException]
at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.handleEvent(UnmarshallingContext.java:642)
at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.handleError(UnmarshallingContext.java:671)
at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.handleError(UnmarshallingContext.java:667)
at com.sun.xml.bind.v2.runtime.unmarshaller.Loader.handleParseConversionException(Loader.java:267)
at com.sun.xml.bind.v2.runtime.unmarshaller.LeafPropertyLoader.text(LeafPropertyLoader.java:65)
at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.text(UnmarshallingContext.java:494)
at com.sun.xml.bind.v2.runtime.unmarshaller.MTOMDecorator.startElement(MTOMDecorator.java:103)
at com.sun.xml.bind.v2.runtime.unmarshaller.StAXStreamConnector.handleStartElement(StAXStreamConnector.java:242)
at com.sun.xml.bind.v2.runtime.unmarshaller.StAXStreamConnector.bridge(StAXStreamConnector.java:176)
at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl.unmarshal0(UnmarshallerImpl.java:360)
... 48 more
Caused by: javax.xml.bind.UnmarshalException
- with linked exception:
[java.lang.NullPointerException]
... 58 more
Caused by: java.lang.NullPointerException
at org.apache.cxf.attachment.LazyDataSource.getInputStream(LazyDataSource.java:67)
at com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data.get(Base64Data.java:188)
at com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data.getExact(Base64Data.java:154)
at com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl.decodeBase64(RuntimeBuiltinLeafInfoImpl.java:827)
at com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl.access$100(RuntimeBuiltinLeafInfoImpl.java:111)
at com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$15.parse(RuntimeBuiltinLeafInfoImpl.java:652)
at com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$15.parse(RuntimeBuiltinLeafInfoImpl.java:655)
at com.sun.xml.bind.v2.runtime.reflect.TransducedAccessor$CompositeTransducedAccessorImpl.parse(TransducedAccessor.java:241)
at com.sun.xml.bind.v2.runtime.unmarshaller.LeafPropertyLoader.text(LeafPropertyLoader.java:61)
... 53 more 
{code}",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-01-31 04:36:03.433,,,no_permission,,,,,,,,,,,,,76531,,,Sat Feb 06 02:38:13 UTC 2010,,,,,,,0|i01oi7:,7739,,,,,,,,,31/Jan/10 04:36;wtam;New Revision: 904978,"05/Feb/10 21:53;alitokmen;I have the impression this also sometimes happens with CAMEL 2.0.0, CXF 2.2.2. We use Tomcat 6.0.20 as HTTP server via OSGi (it therefore isn't even a problem that's Jetty-specific as mentioned in the revision's comment)",05/Feb/10 21:58;alitokmen;PS: I only managed to replicate this issue on CAMEL 2.0.0 and CXF 2.2.2 on a Mac. Doesn't happen on Linux or Windows.,"06/Feb/10 02:38;njiang;Hi Savas, 
Can you try out the latest Camel 2.2-SNAPSHOT ?
I think William already fixed that issue.
 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"In camel-cache CacheConfiguration ""diskExpiryThreadIntervalSeconds"" not set correctly",CAMEL-2420,12487822,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,skydjol,skydjol,28/Jan/10 16:42,03/Nov/10 05:13,14/Mar/19 02:42,29/Jan/10 09:19,2.1.0,,,,,,,,,,2.2.0,,,,,,,0,"See CacheConfiguration.java

{code:title=CacheConfiguration.java|borderStyle=solid}

 if (cacheSettings.containsKey(""diskExpiryThreadIntervalSeconds"")) {
	setTimeToLiveSeconds(Long.valueOf((String) cacheSettings.get(""diskExpiryThreadIntervalSeconds"")).longValue());
} 

{code} ",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-01-29 08:22:53.694,,,no_permission,,,,,,,,,,,,,76532,,,Fri Jan 29 09:19:39 UTC 2010,,,,,,,0|i01oh3:,7734,,,,,,,,,29/Jan/10 08:22;davsclaus;What do you mean? I cannot see a problem. Can you point out what you see as a problem,"29/Jan/10 08:51;skydjol;You have made a call to ""setTimeToLiveSeconds"" method instead of ""setDiskExpiryThreadIntervalSeconds"" method.

","29/Jan/10 09:19;davsclaus;Thanks now I can see the problem :)

trunk: 904430.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cannot build http://camel.apache.org/spring-example.html,CAMEL-2410,12487814,12487813,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,mondraymond,mondraymond,27/Jan/10 10:58,03/Nov/10 05:13,14/Mar/19 02:42,28/Jan/10 03:22,,,,,,,,,,,2.2.0,,,examples,,,,0,"Problem with the checksum on the JARS in the repo? [ I can turn that off, but wanted to let you know ]

""C:\Program Files\Java\jdk1.6.0_14\bin\java"" -Xmx1024m -Dclassworlds.conf=C:\apache-maven-2.2.1\bin\m2.conf -Dmaven.home=C:\apache-maven-2.2.1 -Didea.launcher.port=7536 ""-Didea.launcher.bin.path=C:\Program Files\JetBrains\IntelliJ IDEA 9.0.1\bin"" -Dfile.encoding=windows-1252 -classpath ""C:\apache-maven-2.2.1\boot\classworlds-1.1.jar;C:\Program Files\JetBrains\IntelliJ IDEA 9.0.1\lib\idea_rt.jar"" com.intellij.rt.execution.application.AppMain org.codehaus.classworlds.Launcher --no-plugin-registry --fail-fast --no-plugin-updates --strict-checksums --update-snapshots -f C:\apache-camel-2.1.0\examples\camel-example-spring\pom.xml compile
+ Enabling strict checksum verification on all artifact downloads.
[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: Example :: Spring
[INFO]    task-segment: [compile]
[INFO] ------------------------------------------------------------------------
Downloading: http://onejar-maven-plugin.googlecode.com/svn/mavenrepo/com/sun/xml/bind/jaxb-impl/2.1.5-dev/jaxb-impl-2.1.5-dev.pom
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-impl:pom:2.1.5-dev' in repository onejar-maven-plugin.googlecode.com (http://onejar-maven-plugin.googlecode.com/svn/mavenrepo)
Downloading: http://people.apache.org/repo/m2-ibiblio-rsync-repository/com/sun/xml/bind/jaxb-impl/2.1.5-dev/jaxb-impl-2.1.5-dev.pom
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-impl:pom:2.1.5-dev' in repository apache.m2.repo (http://people.apache.org/repo/m2-ibiblio-rsync-repository)
Downloading: http://repo.open.iona.com/maven2/com/sun/xml/bind/jaxb-impl/2.1.5-dev/jaxb-impl-2.1.5-dev.pom
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-impl:pom:2.1.5-dev' in repository open.iona.m2 (http://repo.open.iona.com/maven2)
Downloading: http://repo1.maven.org/maven2/com/sun/xml/bind/jaxb-impl/2.1.5-dev/jaxb-impl-2.1.5-dev.pom
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-impl:pom:2.1.5-dev' in repository central (http://repo1.maven.org/maven2)
Downloading: http://people.apache.org/repo/m2-ibiblio-rsync-repository/com/sun/xml/bind/jaxb-impl/2.1.5-dev/jaxb-impl-2.1.5-dev.pom
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-impl:pom:2.1.5-dev' in repository apache.m2.repo (http://people.apache.org/repo/m2-ibiblio-rsync-repository)
Downloading: http://repo1.maven.org/maven2/com/sun/xml/bind/jaxb-impl/2.1.5-dev/jaxb-impl-2.1.5-dev.pom
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-impl:pom:2.1.5-dev' in repository central (http://repo1.maven.org/maven2)
Downloading: http://onejar-maven-plugin.googlecode.com/svn/mavenrepo/com/sun/xml/bind/jaxb-xjc/2.1.5-dev/jaxb-xjc-2.1.5-dev.pom
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-xjc:pom:2.1.5-dev' in repository onejar-maven-plugin.googlecode.com (http://onejar-maven-plugin.googlecode.com/svn/mavenrepo)
Downloading: http://people.apache.org/repo/m2-ibiblio-rsync-repository/com/sun/xml/bind/jaxb-xjc/2.1.5-dev/jaxb-xjc-2.1.5-dev.pom
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-xjc:pom:2.1.5-dev' in repository apache.m2.repo (http://people.apache.org/repo/m2-ibiblio-rsync-repository)
Downloading: http://repo.open.iona.com/maven2/com/sun/xml/bind/jaxb-xjc/2.1.5-dev/jaxb-xjc-2.1.5-dev.pom
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-xjc:pom:2.1.5-dev' in repository open.iona.m2 (http://repo.open.iona.com/maven2)
Downloading: http://repo1.maven.org/maven2/com/sun/xml/bind/jaxb-xjc/2.1.5-dev/jaxb-xjc-2.1.5-dev.pom
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-xjc:pom:2.1.5-dev' in repository central (http://repo1.maven.org/maven2)
Downloading: http://people.apache.org/repo/m2-ibiblio-rsync-repository/com/sun/xml/bind/jaxb-xjc/2.1.5-dev/jaxb-xjc-2.1.5-dev.pom
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-xjc:pom:2.1.5-dev' in repository apache.m2.repo (http://people.apache.org/repo/m2-ibiblio-rsync-repository)
Downloading: http://repo1.maven.org/maven2/com/sun/xml/bind/jaxb-xjc/2.1.5-dev/jaxb-xjc-2.1.5-dev.pom
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-xjc:pom:2.1.5-dev' in repository central (http://repo1.maven.org/maven2)
Downloading: http://onejar-maven-plugin.googlecode.com/svn/mavenrepo/com/sun/xml/bind/jaxb-impl/2.1.5-dev/jaxb-impl-2.1.5-dev.jar
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-impl:jar:2.1.5-dev' in repository onejar-maven-plugin.googlecode.com (http://onejar-maven-plugin.googlecode.com/svn/mavenrepo)
Downloading: http://people.apache.org/repo/m2-ibiblio-rsync-repository/com/sun/xml/bind/jaxb-impl/2.1.5-dev/jaxb-impl-2.1.5-dev.jar
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-impl:jar:2.1.5-dev' in repository apache.m2.repo (http://people.apache.org/repo/m2-ibiblio-rsync-repository)
Downloading: http://repo.open.iona.com/maven2/com/sun/xml/bind/jaxb-impl/2.1.5-dev/jaxb-impl-2.1.5-dev.jar
4/818K
...
818/818K
818K downloaded  (jaxb-impl-2.1.5-dev.jar)
[WARNING] Unable to get resource 'com.sun.xml.bind:jaxb-impl:jar:2.1.5-dev' from repository open.iona.m2 (http://repo.open.iona.com/maven2): Error retrieving checksum file for com/sun/xml/bind/jaxb-impl/2.1.5-dev/jaxb-impl-2.1.5-dev.jar
Downloading: http://repo1.maven.org/maven2/com/sun/xml/bind/jaxb-impl/2.1.5-dev/jaxb-impl-2.1.5-dev.jar
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-impl:jar:2.1.5-dev' in repository central (http://repo1.maven.org/maven2)
Downloading: http://people.apache.org/repo/m2-ibiblio-rsync-repository/com/sun/xml/bind/jaxb-impl/2.1.5-dev/jaxb-impl-2.1.5-dev.jar
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-impl:jar:2.1.5-dev' in repository apache.m2.repo (http://people.apache.org/repo/m2-ibiblio-rsync-repository)
Downloading: http://repo1.maven.org/maven2/com/sun/xml/bind/jaxb-impl/2.1.5-dev/jaxb-impl-2.1.5-dev.jar
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-impl:jar:2.1.5-dev' in repository central (http://repo1.maven.org/maven2)
Downloading: http://onejar-maven-plugin.googlecode.com/svn/mavenrepo/com/sun/xml/bind/jaxb-xjc/2.1.5-dev/jaxb-xjc-2.1.5-dev.jar
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-xjc:jar:2.1.5-dev' in repository onejar-maven-plugin.googlecode.com (http://onejar-maven-plugin.googlecode.com/svn/mavenrepo)
Downloading: http://people.apache.org/repo/m2-ibiblio-rsync-repository/com/sun/xml/bind/jaxb-xjc/2.1.5-dev/jaxb-xjc-2.1.5-dev.jar
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-xjc:jar:2.1.5-dev' in repository apache.m2.repo (http://people.apache.org/repo/m2-ibiblio-rsync-repository)
Downloading: http://repo.open.iona.com/maven2/com/sun/xml/bind/jaxb-xjc/2.1.5-dev/jaxb-xjc-2.1.5-dev.jar
4/2984K
...
2984/2984K
2984K downloaded  (jaxb-xjc-2.1.5-dev.jar)
[WARNING] Unable to get resource 'com.sun.xml.bind:jaxb-xjc:jar:2.1.5-dev' from repository open.iona.m2 (http://repo.open.iona.com/maven2): Error retrieving checksum file for com/sun/xml/bind/jaxb-xjc/2.1.5-dev/jaxb-xjc-2.1.5-dev.jar
Downloading: http://repo1.maven.org/maven2/com/sun/xml/bind/jaxb-xjc/2.1.5-dev/jaxb-xjc-2.1.5-dev.jar
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-xjc:jar:2.1.5-dev' in repository central (http://repo1.maven.org/maven2)
Downloading: http://people.apache.org/repo/m2-ibiblio-rsync-repository/com/sun/xml/bind/jaxb-xjc/2.1.5-dev/jaxb-xjc-2.1.5-dev.jar
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-xjc:jar:2.1.5-dev' in repository apache.m2.repo (http://people.apache.org/repo/m2-ibiblio-rsync-repository)
Downloading: http://repo1.maven.org/maven2/com/sun/xml/bind/jaxb-xjc/2.1.5-dev/jaxb-xjc-2.1.5-dev.jar
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-xjc:jar:2.1.5-dev' in repository central (http://repo1.maven.org/maven2)
[INFO] ------------------------------------------------------------------------
[ERROR] BUILD ERROR
[INFO] ------------------------------------------------------------------------
[INFO] Failed to resolve artifact.

Missing:
----------
1) com.sun.xml.bind:jaxb-impl:jar:2.1.5-dev

  Try downloading the file manually from the project website.

  Then, install it using the command: 
      mvn install:install-file -DgroupId=com.sun.xml.bind -DartifactId=jaxb-impl -Dversion=2.1.5-dev -Dpackaging=jar -Dfile=/path/to/file

  Alternatively, if you host your own repository you can deploy the file there: 
      mvn deploy:deploy-file -DgroupId=com.sun.xml.bind -DartifactId=jaxb-impl -Dversion=2.1.5-dev -Dpackaging=jar -Dfile=/path/to/file -Durl=[url] -DrepositoryId=[id]

  Path to dependency: 
  	1) org.apache.maven.plugins:maven-antrun-plugin:maven-plugin:1.2
  	2) com.sun.xml.bind:jaxb-impl:jar:2.1.5-dev

2) com.sun.xml.bind:jaxb-xjc:jar:2.1.5-dev

  Try downloading the file manually from the project website.

  Then, install it using the command: 
      mvn install:install-file -DgroupId=com.sun.xml.bind -DartifactId=jaxb-xjc -Dversion=2.1.5-dev -Dpackaging=jar -Dfile=/path/to/file

  Alternatively, if you host your own repository you can deploy the file there: 
      mvn deploy:deploy-file -DgroupId=com.sun.xml.bind -DartifactId=jaxb-xjc -Dversion=2.1.5-dev -Dpackaging=jar -Dfile=/path/to/file -Durl=[url] -DrepositoryId=[id]

  Path to dependency: 
  	1) org.apache.maven.plugins:maven-antrun-plugin:maven-plugin:1.2
  	2) com.sun.xml.bind:jaxb-xjc:jar:2.1.5-dev

----------
2 required artifacts are missing.

for artifact: 
  org.apache.maven.plugins:maven-antrun-plugin:maven-plugin:1.2

from the specified remote repositories:
  apache.m2.repo (http://people.apache.org/repo/m2-ibiblio-rsync-repository),
  apache.snapshots (http://repository.apache.org/snapshots),
  central (http://repo1.maven.org/maven2),
  onejar-maven-plugin.googlecode.com (http://onejar-maven-plugin.googlecode.com/svn/mavenrepo),
  open.iona.m2 (http://repo.open.iona.com/maven2)



[INFO] ------------------------------------------------------------------------
[INFO] For more information, run Maven with the -e switch
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 19 seconds
[INFO] Finished at: Wed Jan 27 11:49:28 CET 2010
[INFO] Final Memory: 14M/26M
[INFO] ------------------------------------------------------------------------

Process finished with exit code 1
",True version not in list == 2.2.1,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-01-27 13:12:37.308,,,no_permission,,,,,,,,,,,,,76533,,,Thu Jan 28 03:22:35 UTC 2010,,,,,,,0|i01oev:,7724,,,,,,,,,"27/Jan/10 13:12;njiang;As the jaxb implement 2.1.5-dev is not published to maven central repository, 
you may face this kind issue.

I'm planing to upgrade the ant-run plugin(which is used for schema generation) to use the latest jaxb version, so we can work around this issue. ",28/Jan/10 03:22;davsclaus;Should work now,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-cxf producer should copy the inMessage headers to the outMessage,CAMEL-2397,12487772,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,25/Jan/10 02:33,03/Nov/10 05:13,14/Mar/19 02:42,25/Jan/10 05:40,1.4.0,1.5.0,1.6.0,1.6.1,1.6.2,2.0.0,2.0-M1,2.0-M2,2.0-M3,2.1.0,1.6.3,2.2.0,,,,,,0,"If we try to chain some different endponit together in the camel route, we need to make sure the in message header be copied to the out message. ",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76534,,,Mon Jan 25 05:40:51 UTC 2010,,,,,,,0|i01obz:,7711,,,,,,,,,"25/Jan/10 05:40;njiang;trunk
http://svn.apache.org/viewvc?rev=902688&view=rev
camel-1.x branch
http://svn.apache.org/viewvc?rev=902698&view=rev",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
file component - Using fileName option should better detect constant vs dynamic name,CAMEL-2395,12487770,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,24/Jan/10 13:38,03/Nov/10 05:13,14/Mar/19 02:42,24/Jan/10 16:23,2.1.0,,,,,,,,,,2.2.0,,,camel-core,,,,0,"eg using fileName=header.txt makes Camel think its header with the name txt you want to use.

",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76535,,,Sun Jan 24 16:23:26 UTC 2010,,,,,,,0|i01obj:,7709,,,,,,,,,24/Jan/10 16:23;davsclaus;trunk: 902594.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Renamer failing to rename 'From' File when using multiple endpoints via Multicast,CAMEL-2394,12487773,12487831,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,andy bourke,andy bourke,22/Jan/10 15:26,03/Nov/10 05:13,14/Mar/19 02:42,05/Feb/10 12:07,2.1.0,,,,,,,,,,2.2.0,,,camel-core,,,,0,"[Original Issue at Nabble|http://old.nabble.com/Renamer-failing-to-rename-%27From%27-File-when-using-multiple-endpoints-via-Multicast-td27272407s22882.html]


I have a route that looks for a file in a directory => unmarshals the file using <CSV> => transforms the output from the unmarshal (which is List<List<String>>) to a List of data objects => passes the List of data objects to a processor which does the intelligent mapping of the input data to the output which is a List of Objects => passes the List of Objects to a <multicast> pipeline who's endpoints traverse the List of Objects and extract the data, that they are interested in, formatting the output in to a List of Map objects so that the <CSV> marshaller can marshal to a named file. 

This is the route: 

{code}
        <route id=""iq""> 
            <from uri=""file:/data/iq/inbound/""/> 
            <unmarshal> 
                <csv id=""pipeCsvDataFormat""/> 
            </unmarshal> 
            <bean ref=""iqTransform"" method=""doTransform""/> 
            <to uri=""bean:iqProcessor?method=process""/> 
            <multicast parallelProcessing=""true""> 
                <pipeline> 
                    <to uri=""bean:formatOutput?method=formatHeader""/> 
                    <marshal> 
                        <csv /> 
                    </marshal> 
                    <to uri=""file:/data/iq/outbound/?fileName=Txn_Header.txt""/> 
                </pipeline> 
                <pipeline> 
                    <to uri=""bean:formatOutput?method=formatLineHeader""/> 
                    <marshal> 
                        <csv /> 
                    </marshal> 
                    <to uri=""file:/data/iq/outbound/?fileName=Line_Header.txt""/> 
                </pipeline> 
            </multicast> 
        </route> 

{code}

As expected, I get a correctly formatted file named Txn_Header.txt and a file named Line_Header.txt in the /outbound directory. So the routing seems to have worked fine. 

The problem is that the original file does not get renamed in to the .camel subdirectory and so the file gets processed again and again. 

If I remove the second endpoint in the multicast so that only the Txn_Header.txt file is produced then the original file does get renamed and the route ends successfully. ","Windows Vista Business Service Pack 2, 32-bit",,,,,,,,,,,,,,,,03/Feb/10 11:43;andy bourke;claus.zip;https://issues.apache.org/jira/secure/attachment/12463087/claus.zip,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-01-24 16:32:14.95,,,no_permission,,,,,,,,,,,,,76536,,,Fri Feb 05 12:07:25 UTC 2010,,,,,,,0|i01obb:,7708,,,,,,,,,"24/Jan/10 16:32;davsclaus;Andy

I have created an unit test which resembles what you do
https://svn.apache.org/repos/asf/camel/trunk/camel-core/src/test/java/org/apache/camel/component/file/FromFileMulticastToFilesTest.java

Can you try running it at your end on your windows system?

On my end it works with all 3 files being written and moved as expected.
I am using Mac OSX","24/Jan/10 16:35;davsclaus;Andy btw I also fixed a related bug CAMEL-2395 which could have had an issue on your windows OS.

If possible try using the latest 2.2-SNAPSHOT version and test using that.

Details at download page
http://camel.apache.org/download.html","25/Jan/10 11:01;andy bourke;Hi claus,

I have run the unit test and it fails.

The reason is that the out directory ends up with 2 files; one called footer.txt but the other is called b07dca17-9a03-4711-a283-f1497a53713c instead of header.txt.

foo.txt does end up in the .camel directory.

I'll try the 2.2-SNAPSHOT next.","25/Jan/10 12:14;andy bourke;Hi Claus,

I have now tried 2.2-SNAPSHOT but I get the same result.

I'm going to try another OS.",25/Jan/10 13:30;davsclaus;Andy yeah the file that got named with the UID thing was a bug in Camel which is fixed in CAMEL-2395. So you can work around this in 2.1 by using another file name which does not start with header. For example you could just name the files a.txt and b.txt.,"25/Jan/10 13:32;davsclaus;Andy

So in your test if the only problem was the header file being written as a GUID name, then that means the original file will be moved to the .camel sub directory.
And the file is not processed again.

Is this correct?

If so I suspect it could be an issue with the CSV marshaller. ","25/Jan/10 15:14;andy bourke;Claus,

Yes, You are correct.","28/Jan/10 15:32;andy bourke;Hi Claus,

Firstly, I still have not managed to work around or solve the problem - getting a bit desperate now...

I believe that I know where the problem is occurring:

In Pipline.process there is a call to: ExchangeHelper.copyResults(exchange, nextExchange), where 'exchange' is the original Exchange.

This call replaces the 'in' object in 'exchange' with the one in 'nextExchange'. As 'nextExchange' has no headers (they are not copied when nextExchange is created) 'exchange' has no headers and the 'GenericFileRenameProcessStrategy' tries to use 'CamelFileParent'  and 'CamelFileNameOnly' (or 'CamelFileName') to construct the rename filename. Therefore it tries to rename the original file to .\camel.

Does this make sense to you?","02/Feb/10 16:43;davsclaus;Andy are you using absolute paths? It appears so sine {{\data}} would indicates its from the {{<root>\data}} folder.

I am looking into an issue with Windows not being able to detect that {{\data}} is an absolute path. ","02/Feb/10 16:56;andy bourke;Yes, the paths are absolute. 

I could try using relative paths if you think that might help?",02/Feb/10 17:01;davsclaus;Yeah try with relative paths until I get CAMEL-2439 comitted. Running full test now on XP,"02/Feb/10 17:07;davsclaus;btw you can also try with windows absolute path, eg use {{file:c:\data}} , e.g. adding the C drive or what drive you run from.",02/Feb/10 17:27;davsclaus;Andy you are welcome to test with latest code from trunk as I have committed a fix for Windows,"03/Feb/10 10:38;andy bourke;Hi Claus,

Relative path does not work and neither does absolute windows path using c:\ etc.

I have tried it on Linux also and have the same problem although the symptoms are naturally different on Linux because directories are files.

Do you not believe that the problem lies with the exchange header?","03/Feb/10 11:12;davsclaus;Andy can you create a sample of your problem and attach as zip. Can be used to look into the issue.

Its either the CSV data format or something you may do in your beans. The file to be moved in the end is store as a on completion on the Exchange should thus not be affected by headers. But I may give it a 2nd look in 2.3 as there is another issue when you consume from file and then use a pollEnrich to poll in a 2nd file.","03/Feb/10 11:43;andy bourke;I have stripped the route down to the minimum that doesn't work. It turns out that I can make it fail without multicast or anything complex.

If I take out the iqProcessor stage then it works.","05/Feb/10 06:55;davsclaus;Ah in your bean you should copy the headers from IN to OUT.

eg doing getOut() creates a totally new independent message. 
Its generally better just to mutate IN.

Otherwise you should add something like this to your code
{code}
exchange.getOut().setHeaders(exchange.getIn().getHeaders());
{code}


","05/Feb/10 06:57;davsclaus;PS: The behavior of getOut() has been debated a lot. 

We may very well improve that in Camel 2.5/3.0 with an API change that allows us to take hand of this problem for you under the covers.","05/Feb/10 11:01;andy bourke;That's done the trick, many thanks Claus.

I did expect camel to do this for me, in fact it never occurred to me that I would have to do it myself. I do hope that the debate goes in favour of camel taking care of this - perhaps in the meantime something could be added to the documentation.

","05/Feb/10 12:07;davsclaus;Glad it works for you.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
GenericFileConverter should honor charset from Exchange,CAMEL-2387,12487800,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,21/Jan/10 11:04,03/Nov/10 05:13,14/Mar/19 02:42,21/Jan/10 11:44,2.0.0,2.1.0,,,,,,,,,2.2.0,,,camel-core,,,,0,"GenericFileConverter should pass in Exchange as parameter to converter so it can leverage any CHARSET set on the Exchange such as from a {{.convertBodyTo(String.class, ""UTF-8"");}}",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76537,,,Thu Jan 21 11:44:50 UTC 2010,,,,,,,0|i01o9r:,7701,,,,,,,,,21/Jan/10 11:44;davsclaus;trunk: 901661.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BindingOperationInfos that are stored in exchange are inconsistent between CxfProducer and CxfConsumer,CAMEL-2385,12487797,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,wtam,wtam,wtam,20/Jan/10 20:49,03/Nov/10 05:13,14/Mar/19 02:42,20/Jan/10 21:42,2.1.0,,,,,,,,,,2.2.0,,,camel-cxf,,,,0,"CxfProducer could store a unwrapped version of the BindingOperationInfo in the exchange which is inconsistent with CxfConsumer and it puts burden on the application to revert back to the wrapped version.  CxfProducer should store the original version before calling.

{code}
                boi = boi.getUnwrappedOperation();
{code}
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76538,,,Wed Jan 20 21:42:27 UTC 2010,,,,,,,0|i01o9b:,7699,,,,,,,,,"20/Jan/10 21:42;wtam;Committed revision 901388.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Maven build not installing camel-spring-2.2-SNAPSHOT-tests,CAMEL-2378,12487786,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,chrislovecnm,chrislovecnm,18/Jan/10 18:59,03/Nov/10 05:13,14/Mar/19 02:42,19/Jan/10 01:31,2.2.0,,,,,,,,,,2.2.0,,,camel-spring,,,,0,"I am running mvn install -Dmaven.test.skip=true and I am getting the following error

Missing:
----------
1) org.apache.camel:camel-spring:test-jar:tests:2.2-SNAPSHOT

The pom for camel-spring has a plug-in section for creating the test jar, but it is not getting installed.

I am getting the following output running mvn -e

Interesting part:
 [INFO] Skipping packaging of the test-jar


Full output
--------------------------------
+ Error stacktraces are turned on.
[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: Spring
[INFO]    task-segment: [install]
[INFO] ------------------------------------------------------------------------
Downloading: http://repo.open.iona.com/maven2/com/sun/xml/bind/jaxb-impl/2.1.5-dev/jaxb-impl-2.1.5-dev.pom
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-impl:pom:2.1.5-dev' in repository open.iona.m2 (http://repo.open.iona.com/maven2)
Downloading: http://repo1.maven.org/maven2/com/sun/xml/bind/jaxb-impl/2.1.5-dev/jaxb-impl-2.1.5-dev.pom
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-impl:pom:2.1.5-dev' in repository central (http://repo1.maven.org/maven2)
Downloading: http://download.java.net/maven/1/com.sun.xml.bind/poms/jaxb-impl-2.1.5-dev.pom
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-impl:pom:2.1.5-dev' in repository java.net (http://download.java.net/maven/1)
Downloading: http://repo1.maven.org/maven2/com/sun/xml/bind/jaxb-impl/2.1.5-dev/jaxb-impl-2.1.5-dev.pom
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-impl:pom:2.1.5-dev' in repository central (http://repo1.maven.org/maven2)
Downloading: http://repo.open.iona.com/maven2/com/sun/xml/bind/jaxb-xjc/2.1.5-dev/jaxb-xjc-2.1.5-dev.pom
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-xjc:pom:2.1.5-dev' in repository open.iona.m2 (http://repo.open.iona.com/maven2)
Downloading: http://repo1.maven.org/maven2/com/sun/xml/bind/jaxb-xjc/2.1.5-dev/jaxb-xjc-2.1.5-dev.pom
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-xjc:pom:2.1.5-dev' in repository central (http://repo1.maven.org/maven2)
Downloading: http://download.java.net/maven/1/com.sun.xml.bind/poms/jaxb-xjc-2.1.5-dev.pom
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-xjc:pom:2.1.5-dev' in repository java.net (http://download.java.net/maven/1)
Downloading: http://repo1.maven.org/maven2/com/sun/xml/bind/jaxb-xjc/2.1.5-dev/jaxb-xjc-2.1.5-dev.pom
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-xjc:pom:2.1.5-dev' in repository central (http://repo1.maven.org/maven2)
[INFO] [antrun:run {execution: create-prop}]
[INFO] Executing tasks
     [echo] Maven version: 2.2-SNAPSHOT
     [echo] OSGi version: 2.2.0.SNAPSHOT
[INFO] Executed tasks
[INFO] [properties:read-project-properties {execution: default}]
[INFO] [antrun:run {execution: process-sources}]
[INFO] Executing tasks
     [echo] Copying to code together for the XSD generation
     [echo] Generating XSD schema
[schemagen] Generating schema from 142 source files
     [copy] Copying 1 file to /data/workspace/camel/components/camel-spring/target/schema
[INFO] Executed tasks
[INFO] Setting property: classpath.resource.loader.class => 'org.codehaus.plexus.velocity.ContextClassLoaderResourceLoader'.
[INFO] Setting property: velocimacro.messages.on => 'false'.
[INFO] Setting property: resource.loader => 'classpath'.
[INFO] Setting property: resource.manager.logwhenfound => 'false'.
[INFO] [remote-resources:process {execution: default}]
[INFO] [resources:resources {execution: default-resources}]
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 2 resources
[INFO] Copying 10 resources
[INFO] Copying 3 resources
[INFO] [compiler:compile {execution: default-compile}]
[INFO] Nothing to compile - all classes are up to date
[INFO] [resources:testResources {execution: default-testResources}]
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 290 resources
[INFO] Copying 3 resources
[INFO] [compiler:testCompile {execution: default-testCompile}]
[INFO] Not compiling test sources
[INFO] [surefire:test {execution: default-test}]
[INFO] Tests are skipped.
[INFO] [bundle:bundle {execution: default-bundle}]
[INFO] [antrun:run {execution: package}]
[INFO] Executing tasks
     [echo] Deleting unwanted resources from the test-jar
   [delete] Deleting: /data/workspace/camel/components/camel-spring/target/test-classes/log4j.properties
[INFO] Executed tasks
[INFO] [jar:test-jar {execution: default}]
[INFO] Skipping packaging of the test-jar
[INFO] [build-helper:attach-artifact {execution: attach-artifacts}]
[INFO] [ianal:verify-legal-files {execution: default}]
[INFO] Checking legal files in: camel-spring-2.2-SNAPSHOT.jar
[INFO] [install:install {execution: default-install}]
[INFO] Installing /data/workspace/camel/components/camel-spring/target/camel-spring-2.2-SNAPSHOT.jar to /home/clove/.m2/repository/org/apache/camel/camel-spring/2.2-SNAPSHOT/camel-spring-2.2-SNAPSHOT.jar
[INFO] Installing /data/workspace/camel/components/camel-spring/target/schema/camel-spring.xsd to /home/clove/.m2/repository/org/apache/camel/camel-spring/2.2-SNAPSHOT/camel-spring-2.2-SNAPSHOT.xsd
[INFO] [bundle:install {execution: default-install}]
[INFO] Parsing file:/home/clove/.m2/repository/repository.xml
[INFO] Installing org/apache/camel/camel-spring/2.2-SNAPSHOT/camel-spring-2.2-SNAPSHOT.jar
[INFO] Writing OBR metadata
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 57 seconds
[INFO] Finished at: Mon Jan 18 11:57:54 MST 2010
[INFO] Final Memory: 57M/186M
[INFO] ------------------------------------------------------------------------

","Apache Maven 2.2.1 (r801777; 2009-08-06 13:16:01-0600)
Java version: 1.6.0_17
Java home: /opt/sun-jdk-1.6.0.17/jre
Default locale: en_US, platform encoding: ANSI_X3.4-1968
OS name: ""linux"" version: ""2.6.31-gentoo-r6"" arch: ""amd64"" Family: ""unix""",,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-01-18 19:18:10.477,,,no_permission,,,,,,,,,,,,,76539,,,Tue Jan 19 01:31:17 UTC 2010,,,,,,,0|i01o7r:,7692,,,,,,,,,"18/Jan/10 19:15;chrislovecnm;Another note.  I tried to run mvn install w/o skipping tests, and I am getting multiple compilation missing symbol errors:


[INFO] Compilation failure

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringLogProcessorTest.java:[20,33] cannot find symbol
symbol  : class LogProcessorTest
location: package org.apache.camel.processor

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringLogProcessorTest.java:[24,44] cannot find symbol
symbol: class LogProcessorTest
public class SpringLogProcessorTest extends LogProcessorTest {

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/management/SpringPublishEventNotifierTest.java:[20,34] cannot find symbol
symbol  : class PublishEventNotifierTest
location: package org.apache.camel.management

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/management/SpringPublishEventNotifierTest.java:[27,52] cannot find symbol
symbol: class PublishEventNotifierTest
public class SpringPublishEventNotifierTest extends PublishEventNotifierTest {

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/management/SpringDualLoggingEventNotifierTest.java:[20,34] cannot find symbol
symbol  : class LoggingEventNotifierTest
location: package org.apache.camel.management

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/management/SpringDualLoggingEventNotifierTest.java:[27,56] cannot find symbol
symbol: class LoggingEventNotifierTest
public class SpringDualLoggingEventNotifierTest extends LoggingEventNotifierTest {

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/file/SpringFileConsumerPreMoveIssueTest.java:[20,38] cannot find symbol
symbol  : class FileConsumerPreMoveIssueTest
location: package org.apache.camel.component.file

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/file/SpringFileConsumerPreMoveIssueTest.java:[27,56] cannot find symbol
symbol: class FileConsumerPreMoveIssueTest
public class SpringFileConsumerPreMoveIssueTest extends FileConsumerPreMoveIssueTest {

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/management/SpringLoggingEventNotifierTest.java:[20,34] cannot find symbol
symbol  : class LoggingEventNotifierTest
location: package org.apache.camel.management

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/management/SpringLoggingEventNotifierTest.java:[27,52] cannot find symbol
symbol: class LoggingEventNotifierTest
public class SpringLoggingEventNotifierTest extends LoggingEventNotifierTest {

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringShutdownCompleteAllTasksTest.java:[20,33] cannot find symbol
symbol  : class ShutdownCompleteAllTasksTest
location: package org.apache.camel.processor

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringShutdownCompleteAllTasksTest.java:[27,56] cannot find symbol
symbol: class ShutdownCompleteAllTasksTest
public class SpringShutdownCompleteAllTasksTest extends ShutdownCompleteAllTasksTest {

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringShutdownNotDeferTest.java:[20,33] cannot find symbol
symbol  : class ShutdownNotDeferTest
location: package org.apache.camel.processor

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringShutdownNotDeferTest.java:[27,48] cannot find symbol
symbol: class ShutdownNotDeferTest
public class SpringShutdownNotDeferTest extends ShutdownNotDeferTest {

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringShutdownCompleteCurrentTaskOnlyTest.java:[20,33] cannot find symbol
symbol  : class ShutdownCompleteCurrentTaskOnlyTest
location: package org.apache.camel.processor

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringShutdownCompleteCurrentTaskOnlyTest.java:[27,63] cannot find symbol
symbol: class ShutdownCompleteCurrentTaskOnlyTest
public class SpringShutdownCompleteCurrentTaskOnlyTest extends ShutdownCompleteCurrentTaskOnlyTest {

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringShutdownDeferTest.java:[20,33] cannot find symbol
symbol  : class ShutdownDeferTest
location: package org.apache.camel.processor

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringShutdownDeferTest.java:[27,45] cannot find symbol
symbol: class ShutdownDeferTest
public class SpringShutdownDeferTest extends ShutdownDeferTest {

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringLogProcessorTest.java:[27,15] createSpringCamelContext(org.apache.camel.ContextTestSupport,java.lang.String) in LogProcessorTest cannot be applied to (org.apache.camel.spring.processor.SpringLogProcessorTest,java.lang.String)

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/management/SpringPublishEventNotifierTest.java:[30,15] createSpringCamelContext(org.apache.camel.ContextTestSupport,java.lang.String) in PublishEventNotifierTest cannot be applied to (org.apache.camel.spring.management.SpringPublishEventNotifierTest,java.lang.String)

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/management/SpringDualLoggingEventNotifierTest.java:[30,15] createSpringCamelContext(org.apache.camel.ContextTestSupport,java.lang.String) in LoggingEventNotifierTest cannot be applied to (org.apache.camel.spring.management.SpringDualLoggingEventNotifierTest,java.lang.String)

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/file/SpringFileConsumerPreMoveIssueTest.java:[30,15] createSpringCamelContext(org.apache.camel.ContextTestSupport,java.lang.String) in FileConsumerPreMoveIssueTest cannot be applied to (org.apache.camel.spring.file.SpringFileConsumerPreMoveIssueTest,java.lang.String)

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/management/SpringLoggingEventNotifierTest.java:[30,15] createSpringCamelContext(org.apache.camel.ContextTestSupport,java.lang.String) in LoggingEventNotifierTest cannot be applied to (org.apache.camel.spring.management.SpringLoggingEventNotifierTest,java.lang.String)

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringShutdownCompleteAllTasksTest.java:[30,15] createSpringCamelContext(org.apache.camel.ContextTestSupport,java.lang.String) in ShutdownCompleteAllTasksTest cannot be applied to (org.apache.camel.spring.processor.SpringShutdownCompleteAllTasksTest,java.lang.String)

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringShutdownNotDeferTest.java:[30,15] createSpringCamelContext(org.apache.camel.ContextTestSupport,java.lang.String) in ShutdownNotDeferTest cannot be applied to (org.apache.camel.spring.processor.SpringShutdownNotDeferTest,java.lang.String)

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringShutdownCompleteCurrentTaskOnlyTest.java:[30,15] createSpringCamelContext(org.apache.camel.ContextTestSupport,java.lang.String) in ShutdownCompleteCurrentTaskOnlyTest cannot be applied to (org.apache.camel.spring.processor.SpringShutdownCompleteCurrentTaskOnlyTest,java.lang.String)

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringShutdownDeferTest.java:[30,15] createSpringCamelContext(org.apache.camel.ContextTestSupport,java.lang.String) in ShutdownDeferTest cannot be applied to (org.apache.camel.spring.processor.SpringShutdownDeferTest,java.lang.String)



","18/Jan/10 19:18;janstey;The compile error should be fixed by recompiling camel-core maybe?

To skip tests use the following command (this will create the -test jar that the rest of the build needs):
{code}
 mvn clean install -DskipTests
{code}",18/Jan/10 19:29;chrislovecnm;Still getting the same compilation errors w/ the latest camel-core installed. Running -DskipTests did not work because it still tried to compile the test classes.,"18/Jan/10 19:38;janstey;Weird... I just built it fine on trunk rev 900515. Env is similar to yours too

Apache Maven 2.2.1 (r801777; 2009-08-06 16:46:01-0230)
Java version: 1.6.0_07
Java home: /opt/jdk1.6.0_07/jre
Default locale: en_CA, platform encoding: UTF-8
OS name: ""linux"" version: ""2.6.24-24-generic"" arch: ""i386"" Family: ""unix""","18/Jan/10 22:51;chrislovecnm;So running mvn clean install -DskipTests from the top level worked.

Someone might want to add this nugget to Readme.txt and   http://camel.apache.org/building.html
",19/Jan/10 01:31;janstey;Great! Glad it works now for you. I'll update the wiki page with that command.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
org.apache.camel.impl.DefaultProducerTemplateAsyncTest failing on build on trunk,CAMEL-2377,12487787,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,chrislovecnm,chrislovecnm,18/Jan/10 18:19,03/Nov/10 05:13,14/Mar/19 02:42,19/Jan/10 06:33,2.2.0,,,,,,,,,,2.2.0,,,camel-core,,,,0,"Unit test failing on mvn install on latest head from trunk.

mvn -e output
------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running org.apache.camel.impl.DefaultProducerTemplateAsyncTest
Tests run: 22, Failures: 3, Errors: 0, Skipped: 0, Time elapsed: 17.012 sec <<< FAILURE!

Results :

Failed tests: 
  testAsyncCallbackExchangeInOut(org.apache.camel.impl.DefaultProducerTemplateAsyncTest)
  testAsyncCallbackBodyInOut(org.apache.camel.impl.DefaultProducerTemplateAsyncTest)
  testAsyncCallbackBodyInOutGetResult(org.apache.camel.impl.DefaultProducerTemplateAsyncTest)

Tests run: 22, Failures: 3, Errors: 0, Skipped: 0

[INFO] ------------------------------------------------------------------------
[ERROR] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] There are test failures.

Please refer to /data/workspace/camel/camel-core/target/surefire-reports for the individual test results.
[INFO] ------------------------------------------------------------------------
[INFO] Trace
org.apache.maven.BuildFailureException: There are test failures.

Please refer to /data/workspace/camel/camel-core/target/surefire-reports for the individual test results.
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:715)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:556)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:535)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:387)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:348)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:180)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:328)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:138)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:362)
	at org.apache.maven.cli.compat.CompatibleMain.main(CompatibleMain.java:60)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)
	at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)
	at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)
	at org.codehaus.classworlds.Launcher.main(Launcher.java:375)
Caused by: org.apache.maven.plugin.MojoFailureException: There are test failures.

Please refer to /data/workspace/camel/camel-core/target/surefire-reports for the individual test results.
	at org.apache.maven.plugin.surefire.SurefirePlugin.execute(SurefirePlugin.java:575)
	at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:490)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:694)
	... 17 more


Surefire Output

-------------------------------------------------------------------------------
Test set: org.apache.camel.impl.DefaultProducerTemplateAsyncTest
-------------------------------------------------------------------------------
Tests run: 22, Failures: 3, Errors: 0, Skipped: 0, Time elapsed: 17.013 sec <<< FAILURE!
testAsyncCallbackExchangeInOut(org.apache.camel.impl.DefaultProducerTemplateAsyncTest)  Time elapsed: 0.431 sec  <<< FAILURE!
junit.framework.ComparisonFailure: expected:<[AB]C> but was:<[BA]C>
	at junit.framework.Assert.assertEquals(Assert.java:81)
	at junit.framework.Assert.assertEquals(Assert.java:87)
	at org.apache.camel.impl.DefaultProducerTemplateAsyncTest.testAsyncCallbackExchangeInOut(DefaultProducerTemplateAsyncTest.java:357)

testAsyncCallbackBodyInOut(org.apache.camel.impl.DefaultProducerTemplateAsyncTest)  Time elapsed: 0.206 sec  <<< FAILURE!
junit.framework.ComparisonFailure: expected:<[AB]C> but was:<[BA]C>
	at junit.framework.Assert.assertEquals(Assert.java:81)
	at junit.framework.Assert.assertEquals(Assert.java:87)
	at org.apache.camel.impl.DefaultProducerTemplateAsyncTest.testAsyncCallbackBodyInOut(DefaultProducerTemplateAsyncTest.java:451)

testAsyncCallbackBodyInOutGetResult(org.apache.camel.impl.DefaultProducerTemplateAsyncTest)  Time elapsed: 0.176 sec  <<< FAILURE!
junit.framework.ComparisonFailure: expected:<[AB]C> but was:<[BA]C>
	at junit.framework.Assert.assertEquals(Assert.java:81)
	at junit.framework.Assert.assertEquals(Assert.java:87)
	at org.apache.camel.impl.DefaultProducerTemplateAsyncTest.testAsyncCallbackBodyInOutGetResult(DefaultProducerTemplateAsyncTest.java:492)

","Apache Maven 2.2.1 (r801777; 2009-08-06 13:16:01-0600)
Java version: 1.6.0_17
Java home: /opt/sun-jdk-1.6.0.17/jre
Default locale: en_US, platform encoding: ANSI_X3.4-1968
OS name: ""linux"" version: ""2.6.31-gentoo-r6"" arch: ""amd64"" Family: ""unix""",,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-01-19 06:33:40.447,,,no_permission,,,,,,,,,,,,,76540,,,Tue Jan 19 23:50:43 UTC 2010,,,,,,,0|i01o7j:,7691,Unit Test Broken,,,,,,,,"19/Jan/10 06:33;davsclaus;Only fails on some boxes.
",19/Jan/10 06:33;davsclaus;trunk: 900669.,19/Jan/10 23:50;chrislovecnm;verified fixed!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
org.apache.camel.issues.RetryRouteScopedUntilRecipientListParallelIssueTest failing on build on trunk,CAMEL-2376,12487788,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,chrislovecnm,chrislovecnm,18/Jan/10 18:07,03/Nov/10 05:13,14/Mar/19 02:42,19/Jan/10 06:05,2.2.0,,,,,,,,,,2.2.0,,,camel-core,,,,0,"Unit test failing on mvn install on latest head from trunk.

mvn -e output
-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running org.apache.camel.issues.RetryRouteScopedUntilRecipientListParallelIssueTest
Tests run: 7, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 11.866 sec <<< FAILURE!

Results :

Failed tests: 
  testRetryUntilRecipientListOkAndFail(org.apache.camel.issues.RetryRouteScopedUntilRecipientListParallelIssueTest)

Tests run: 7, Failures: 1, Errors: 0, Skipped: 0

[INFO] ------------------------------------------------------------------------
[ERROR] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] There are test failures.

Please refer to /data/workspace/camel/camel-core/target/surefire-reports for the individual test results.
[INFO] ------------------------------------------------------------------------
[INFO] Trace
org.apache.maven.BuildFailureException: There are test failures.

Please refer to /data/workspace/camel/camel-core/target/surefire-reports for the individual test results.
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:715)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:556)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:535)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:387)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:348)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:180)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:328)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:138)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:362)
	at org.apache.maven.cli.compat.CompatibleMain.main(CompatibleMain.java:60)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)
	at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)
	at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)
	at org.codehaus.classworlds.Launcher.main(Launcher.java:375)
Caused by: org.apache.maven.plugin.MojoFailureException: There are test failures.

Please refer to /data/workspace/camel/camel-core/target/surefire-reports for the individual test results.
	at org.apache.maven.plugin.surefire.SurefirePlugin.execute(SurefirePlugin.java:575)
	at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:490)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:694)
	... 17 more


Surefire output
-------------------------------
-------------------------------------------------------------------------------
Test set: org.apache.camel.issues.RetryRouteScopedUntilRecipientListParallelIssueTest
-------------------------------------------------------------------------------
Tests run: 7, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 10.217 sec <<< FAILURE!
testRetryUntilRecipientListOkAndFail(org.apache.camel.issues.RetryRouteScopedUntilRecipientListParallelIssueTest)  Time elapsed: 3.729 sec  <<< FAILURE!
junit.framework.AssertionFailedError: expected:<3> but was:<0>
	at junit.framework.Assert.fail(Assert.java:47)
	at junit.framework.Assert.failNotEquals(Assert.java:280)
	at junit.framework.Assert.assertEquals(Assert.java:64)
	at junit.framework.Assert.assertEquals(Assert.java:198)
	at junit.framework.Assert.assertEquals(Assert.java:204)
	at org.apache.camel.issues.RetryRouteScopedUntilRecipientListParallelIssueTest.testRetryUntilRecipientListOkAndFail(RetryRouteScopedUntilRecipientListParallelIssueTest.java:38)


","Apache Maven 2.2.1 (r801777; 2009-08-06 13:16:01-0600)
Java version: 1.6.0_17
Java home: /opt/sun-jdk-1.6.0.17/jre
Default locale: en_US, platform encoding: ANSI_X3.4-1968
OS name: ""linux"" version: ""2.6.31-gentoo-r6"" arch: ""amd64"" Family: ""unix""",,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-01-19 06:05:26.388,,,no_permission,,,,,,,,,,,,,76541,,,Tue Jan 19 23:48:15 UTC 2010,,,,,,,0|i01o7b:,7690,Unit Test Broken,,,,,,,,19/Jan/10 06:05;davsclaus;trunk: 900663.,19/Jan/10 23:48;chrislovecnm;verified fixed.  Thanks,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove sample caches from Camel Cache component,CAMEL-2363,12487776,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,akarpe,akarpe,akarpe,14/Jan/10 18:42,03/Nov/10 05:13,14/Mar/19 02:42,15/Jan/10 05:06,2.1.0,,,,,,,,,,2.2.0,,,,,,,0,"Camel Cache has sample caches created by the component via its ehCache settings.

These should not be created in order to avoid unnecessary taking up of ports by the sample caches.",,,,,,,,,,,,,,,,,14/Jan/10 18:43;akarpe;camel-cache-20100114.patch;https://issues.apache.org/jira/secure/attachment/12463056/camel-cache-20100114.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-01-15 05:06:52.892,,,no_permission,,,,,,,,,,,,,76542,,,Fri Jan 15 05:06:52 UTC 2010,,,Patch Available,,,,0|i01o4n:,7678,,,,,,,,,14/Jan/10 18:43;akarpe;Please find attached fix that prevents the sample caches from being created.,"15/Jan/10 05:06;davsclaus;Applied patch with thanks.

trunk: 899527.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FTP assumes that directory name do not have dot ,CAMEL-2362,12487777,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,smcduff@hotmail.com,smcduff@hotmail.com,14/Jan/10 11:54,03/Nov/10 05:13,14/Mar/19 02:42,15/Jan/10 08:25,2.1.0,,,,,,,,,,2.2.0,,,camel-ftp,,,,0,"
See http://old.nabble.com/FTP-assume-directory-do-not-have-dot-td27153817.html#a27160086
(COpy paste)
>
> I have the following error:
>
> Caused by: java.lang.IllegalArgumentException: Only directory is supported.
> Endpoint must be configured with a valid directory: ftp.test
>        at
> org.apache.camel.component.file.remote.RemoteFileEndpoint.createConsumer(RemoteFileEndpoint.java:68)
>        at
> org.apache.camel.component.file.remote.RemoteFileEndpoint.createConsumer(RemoteFileEndpoint.java:31)
>        at
> org.apache.camel.impl.EventDrivenConsumerRoute.addServices(EventDrivenConsumerRoute.java:60)
>        at
> org.apache.camel.impl.DefaultRoute.onStartingServices(DefaultRoute.java:83)
>        at org.apache.camel.impl.RouteService.doStart(RouteService.java:123)
>        at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:55)
>        at
> org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:906)
>        ... 1 more
>
> By looking at the source code I saw the following :
>        // we assume its a file if the name has a dot in it (eg foo.txt)
>        if (configuration.getDirectory().contains(""."")) {
>            throw new IllegalArgumentException(""Only directory is supported.
> Endpoint must be configured with a valid directory: ""
>                    + configuration.getDirectory());
>        }
>
> I remove that code and my code is working!! :-)
>
> I think the above code should not assume that.....
> What do you think ?
>
... [show rest of quote]

Its really a bad habit having a dot in a directory name.
On windows will that not often be considered a file?.

And since its a remote path we cannot on startup determine if its a
path or file.

The check was made in the transition from 1.x to 2.x where in 1.x you
could define a starting file or directory.
In 2.x you must specify a directory only.

We could relax the check but then people may still enter a filename
and think Camel will pickup that file.

[SIMON]
Windows directory can contains a dot... a good example is in your eclipse installation... example:
Directory name=org.eclipse.emf.teneo.jpox_1.0.1.v200902271808

Also I think that check is useless because you can still enter something without a dot and it is in fact a file... so the endpoint should verify that after the connection.

Simon 

Yeah good call

Do you mind creating a ticket in JIRA about this?
http://issues.apache.org/activemq/browse/CAMEL",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-01-15 08:25:18.596,,,no_permission,,,,,,,,,,,,,76543,,,Fri Jan 15 08:25:18 UTC 2010,,,,,,,0|i01o4f:,7677,,,,,,,,,15/Jan/10 08:25;davsclaus;trunk: 899559.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
recipientList retryUntil not working,CAMEL-2360,12487225,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,crive,crive,14/Jan/10 10:14,24/Apr/11 10:01,14/Mar/19 02:42,09/Feb/10 08:24,2.2.0,,,,,,,,,,2.3.0,,,camel-core,,,,0,"summary:
the bean gets intialized but it looks like the method retryUntil is never called, could it be an error of implementation? am I doing something wrong?

using following route:
{code}
from(""jms-test:queue:queue.delivery.notification.test"") 
.process(processor) 
.onException(Exception.class).retryUntil(bean(""myRetryBean"")).end() 
.recipientList(header(""recipientListHeader"").tokenize("","")) 
.parallelProcessing().executorService(customThreadPoolExecutor) 
.aggregationStrategy(new RecipientAggregationStrategy()) 
.to(""direct:chunk.completed""); 
{code}

bean is registered in such way: 
{code}
JndiRegistry jndi = new JndiRegistry(new JndiContext()); 
jndi.bind(""myRetryBean"", new RetryBean()); 
{code}

bean class is: 
{code}
public class RetryBean { 

        private int _invoked; 
        private Logger _logger; 
        
    public RetryBean() { 
    this._logger = Logger.getLogger(RetryBean.class); 
    this._invoked = 0; 
    _logger.debug(""BEAN INITIALIZED "" + _invoked); 
    } 
        
    // using bean binding we can bind the information from the exchange to the types we have in our method signature 
    public boolean retryUntil(@Header(Exchange.REDELIVERY_COUNTER) Integer counter, @Body String body, @ExchangeException Exception causedBy) { 
        // NOTE: counter is the redelivery attempt, will start from 1 
    _invoked++; 
    
    
    _logger.debug(""invoked"" + _invoked); 
    _logger.debug(""counter"" + counter); 
    _logger.debug(""result"" + (counter < 2)); 
    
        // we can of course do what ever we want to determine the result but this is a unit test so we end after 3 attempts 
        return counter < 7; 
    } 
{code}
",,,,,,,,,,,,,,,,,19/Jan/10 12:49;crive;Recipientlist-Retryuntil.zip;https://issues.apache.org/jira/secure/attachment/12463059/Recipientlist-Retryuntil.zip,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-01-15 10:28:56.371,,,no_permission,,,,,,,,,,,,,76544,,,Sun Apr 24 10:01:24 UTC 2011,,,,,,,0|i01o3z:,7675,,,,,,,,,"15/Jan/10 10:28;davsclaus;Context scoped error handling works
{code}
                onException(Exception.class).retryUntil(bean(""myRetryBean"")).end();
                
                from(""seda:start"")
                    .recipientList(header(""recipientListHeader""))
                    .to(""mock:result"");

                from(""direct:foo"").to(""log:foo"").to(""mock:foo"");
{code}",15/Jan/10 10:39;davsclaus;Can you post which endpoints you use in the recipientListHeader and if its to another Camel route can you post these also.,15/Jan/10 10:42;crive;I am using FTP endpoints,"15/Jan/10 12:16;davsclaus;Okay found an issue but that is related to when using more routes.

Do you also have Camel routes for those FTP endpoints? eg do you have also {{from(""ftp:..."")}} in a Camel route somewhere?","15/Jan/10 13:43;davsclaus;Marco can you try with latest code from trunk?
I have committed a fix.

trunk: 899628.",15/Jan/10 15:00;crive;I am not able to compile latest trunk my systems runs out of memory...,"15/Jan/10 15:08;davsclaus;See this link how to increase memory to maven
http://camel.apache.org/building.html",15/Jan/10 16:51;crive;I don't see it working even by using a Context scoped error handler,15/Jan/10 16:57;davsclaus;Create a small project which does not work at your end and attach it as a zip file.,19/Jan/10 12:49;crive;Attached a sample file which shows retryUntil method of RetryBean is never called.,09/Feb/10 08:24;davsclaus;Should work in 2.2 release,"09/Feb/10 13:43;davsclaus;Okay for a timing issue when using {{parallel}} recipient list.

I will commit a fix for that in 2.3 later today",09/Feb/10 15:33;davsclaus;trunk: 908073.,09/Feb/10 15:34;davsclaus;Marco you are welcome to try with latest code from trunk on your system.,24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Examples running with ANT need commons-managment on the classpath,CAMEL-2354,12487762,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,13/Jan/10 05:53,03/Nov/10 05:13,14/Mar/19 02:42,13/Jan/10 05:55,2.1.0,,,,,,,,,,2.2.0,,,examples,,,,0,"See nabble
http://old.nabble.com/pojo-example-fails-to-build-with-ant-ts27137019.html",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76546,,,Wed Jan 13 05:55:07 UTC 2010,,,,,,,0|i01o2n:,7669,,,,,,,,,13/Jan/10 05:55;davsclaus;trunk: 898654,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Simple Language - Parsing complex date patterns fails if they contain additional colons,CAMEL-2353,12487760,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,13/Jan/10 05:38,03/Nov/10 05:13,14/Mar/19 02:42,13/Jan/10 06:16,2.1.0,,,,,,,,,,2.2.0,,,camel-core,,,,0,"See nabble
http://old.nabble.com/Camel-%3A-Date-Pattern-ts27131137.html",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76547,,,Wed Jan 13 06:16:01 UTC 2010,,,,,,,0|i01o2f:,7668,,,,,,,,,13/Jan/10 06:16;davsclaus;trunk: 898656.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
One should not have to explicitly provide the service/port for cxf is there's only one,CAMEL-2345,12487755,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,hadrian,hadrian,08/Jan/10 15:23,03/Nov/10 05:13,14/Mar/19 02:42,14/Jan/10 10:24,2.1.0,,,,,,,,,,2.2.0,,,camel-cxf,,,,0,"This is due to the following code in {{Client createClient()}} in {{CxfEnpoint}}

{code}
        } else {
            ObjectHelper.notNull(portName, ""Please provide endpoint/port name"");
            ObjectHelper.notNull(serviceName, ""Please provide service name"");
            ClientFactoryBean factoryBean = createClientFactoryBean();
{code}

When there's only one service/port, we should just use it.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-01-08 15:41:18.992,,,no_permission,,,,,,,,,,,,,76548,,,Thu Jan 14 10:24:19 UTC 2010,,,,,,,0|i01o0v:,7661,,,,,,,,,"08/Jan/10 15:41;alitokmen;Hello

Can you please post a route sample? Is this only for the WS caller?

Cheers","08/Jan/10 15:57;hadrian;I think this causes a problem only for the client now, but in general, the cxf endpoint url should not have to specify the service/port if there's only one in the wsdl. I suspect it already works like that for the server side.",13/Jan/10 08:46;davsclaus;Hadrian do you get in touch with Willem about this one?,"13/Jan/10 09:09;njiang;Hi Hadrain,

Yes, CXF client and server side share the same code (ReflectionServiceFactoryBean) to create the ServiceModel.

If we don't specify the server name and port name, CXF will try to find a one for using, but if there are more than one service or one port, it will make us get into trouble of connecting a wrong endpoint. I think that is why William Tam added these checking.

How about we warning the user that don't set the service or the port name instead of using a NP checker?

Willem","13/Jan/10 14:51;wtam;Yea, it looks like we can relax this requirement for client but NOT for the server as ServerFactoryBean fails to initialize without serviceName and portName (if serviceClass is not specified. i.e. wsdl only).   I think it is a best practice to provide serviceName and portName for wsdl only use case but I agree that they are not required on the client (producer).  We probably should update CXFWsdlOnlyPayloadModeNoSpringTest and CXFWsdlOnlyMessageModeNoSpringTest if we do change it.  And update the notes in the serviceClass option about this requirement in the http://cwiki.apache.org/confluence/display/CAMEL/CXF.  Let me know if you want me to handle it.  thx.


","14/Jan/10 10:24;njiang;i changed the NullPoint check to log warning message.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-web - Using Sun marshal resolver not possible on non SUN JDK platforms,CAMEL-2341,12487752,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,07/Jan/10 08:35,03/Nov/10 05:13,14/Mar/19 02:42,08/Jan/10 08:00,2.2.0,,,,,,,,,,2.2.0,,,,,,,0,"For example on RH 5.2 64bit JDK 1.6
{code}
Compilation failure 
/x1/TeamCity/buildAgent/work/1ad9cee4e4314563/camel-fuse-trunk/components/camel-web/src/main/java/org/apache/camel/web/util/JAXBMarshallerResolver.java:[25,34] package com.sun.xml.bind.marshaller does not exist 
/x1/TeamCity/buildAgent/work/1ad9cee4e4314563/camel-fuse-trunk/components/camel-web/src/main/java/org/apache/camel/web/util/JAXBMarshallerResolver.java:[42,12] cannot find symbol 
symbol : class NamespacePrefixMapper 
location: class org.apache.camel.web.util.JAXBMarshallerResolver 
/x1/TeamCity/buildAgent/work/1ad9cee4e4314563/camel-fuse-trunk/components/camel-web/src/main/java/org/apache/camel/web/util/JAXBMarshallerResolver.java:[42,56] cannot find symbol 
symbol : class NamespacePrefixMapper 
location: class org.apache.camel.web.util.JAXBMarshallerResolver 
{code}

I assume AIX, HP-UX and others do have this issue as well.

James maybe we need to revert that change you made?",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76549,,,Fri Jan 08 08:00:44 UTC 2010,,,,,,,0|i01nzz:,7657,,,,,,,,,"07/Jan/10 09:48;davsclaus;Author: jstrachan
Date: Thu Dec 17 14:50:48 2009
New Revision: 891737

URL: http://svn.apache.org/viewvc?rev=891737&view=rev
Log:
fix for CAMEL-2301 to switch to jackson for JSON marshalling

Added:
   camel/trunk/components/camel-web/src/main/resources/META-INF/services/
   camel/trunk/components/camel-web/src/main/resources/META-INF/services/javax.ws.rs.ext.MessageBodyReader
   camel/trunk/components/camel-web/src/main/resources/META-INF/services/javax.ws.rs.ext.MessageBodyWriter
Modified:
   camel/trunk/components/camel-web/pom.xml
   camel/trunk/components/camel-web/src/main/java/org/apache/camel/web/resources/CamelContextResource.java
   camel/trunk/components/camel-web/src/main/java/org/apache/camel/web/resources/Constants.java
   camel/trunk/components/camel-web/src/main/java/org/apache/camel/web/resources/EndpointsResource.java
   camel/trunk/components/camel-web/src/main/java/org/apache/camel/web/resources/RouteResource.java
   camel/trunk/components/camel-web/src/main/java/org/apache/camel/web/resources/RoutesResource.java","08/Jan/10 08:00;davsclaus;Reverting fix
{code}
davsclaus:(svn)camel[trunk:897121]/components/camel-web$ svn merge -c -891737 .
--- Reverse-merging r891737 into '.':
U    src/main/java/org/apache/camel/web/resources/RouteResource.java
U    src/main/java/org/apache/camel/web/resources/RoutesResource.java
U    src/main/java/org/apache/camel/web/resources/EndpointsResource.java
U    src/main/java/org/apache/camel/web/resources/Constants.java
U    src/main/java/org/apache/camel/web/resources/CamelContextResource.java
D    src/main/resources/META-INF/services
U    pom.xml
{code}

trunk: 897126.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Spring DSL - Some route scoped concerns such as onException etc. can vanish in some edge cases,CAMEL-2336,12487748,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,davsclaus,davsclaus,davsclaus,05/Jan/10 16:07,03/Nov/10 05:13,14/Mar/19 02:42,05/Jan/10 19:22,2.0.0,2.1.0,,,,,,,,,2.2.0,,,camel-spring,,,,0,"The JAXB creates the Spring DSL model in a bit wacky way so we need to work on it a bit before Camel can create the runtime routes.

In some cases some of the cross functions such as onCompletion, onException could potentially vanish. 
The problem is really that we should have divided the route into a upper / lower section where upper is the cross functions and the lower the actual route.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76550,,,Wed Jan 06 08:57:02 UTC 2010,,,,,,,0|i01nyv:,7652,,,,,,,,,"05/Jan/10 19:22;davsclaus;trunk: 896185.

This bug was only when using <transacted/> that you could potentially loose route scoped <onException> or <onCompletion>. The Java DSL does not have this bug.",06/Jan/10 08:57;davsclaus;trunk: 896355.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The NP check of the remote service is wrong in CamelServiceExporter ,CAMEL-2327,12487740,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,njiang,njiang,02/Jan/10 04:59,03/Nov/10 05:13,14/Mar/19 02:42,02/Jan/10 05:13,1.4.0,1.5.0,1.6.0,1.6.1,1.6.2,2.0.0,2.0-M1,2.0-M2,2.0-M3,2.1.0,1.6.3,2.2.0,,,,,,0,"We should check the export service instead of the camelContext.
--- components/camel-spring/src/main/java/org/apache/camel/spring/remoting/CamelServiceExporter.jav(revision 895109)
+++ components/camel-spring/src/main/java/org/apache/camel/spring/remoting/CamelServiceExporter.jav(working copy)
@@ -83,7 +83,7 @@
         }
 
         Endpoint endpoint = CamelContextHelper.getMandatoryEndpoint(camelContext, uri);
-        notNull(camelContext, ""service"");
+        notNull(getService(), ""service"");
         Object proxy = getProxyForService();
 
         consumer = endpoint.createConsumer(new BeanProcessor(proxy, camelContext));
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76551,,,Sat Jan 02 05:13:25 UTC 2010,,,,,,,0|i01nwv:,7643,,,,,,,,,"02/Jan/10 05:13;njiang;trunk
http://svn.apache.org/viewvc?rev=895119&view=rev
camel 1.x branch
http://svn.apache.org/viewvc?rev=895120&view=rev",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
@Produce - Causes BeanInvocation to be kept as Body which causes problem with subsequent bean invocations,CAMEL-2325,12487738,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,01/Jan/10 17:08,03/Nov/10 05:13,14/Mar/19 02:42,03/Jan/10 17:53,2.0.0,2.1.0,,,,,,,,,2.2.0,,,camel-core,,,,0,"The route
{code}
    <camelContext id=""camel"" trace=""true"" xmlns=""http://camel.apache.org/schema/spring"">
        <route>
            <from uri=""direct:start""/>
            <to uri=""log:foo""/>
            <split>
                <method bean=""cool"" method=""split""/>
                <transform><simple>Hello ${body}</simple></transform>
                <to uri=""mock:split""/>
            </split>
        </route>
    </camelContext>
{code}

Is caused problem when a @Produce bean is used to send a message to the route.
2010-01-01 18:07:43,720 [main           ] ERROR DefaultErrorHandler            - Failed delivery for exchangeId: b7098680-4a16-4289-bdf4-3197b0b37aea. Exhausted after delivery attempt: 1 caught: org.apache.camel.language.bean.RuntimeBeanExpressionException: Failed to invoke method: split on cool due to: org.apache.camel.RuntimeCamelException: java.lang.IllegalArgumentException: object is not an instance of declaring class
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76552,,,Sun Jan 03 17:53:53 UTC 2010,,,,,,,0|i01nwf:,7641,,,,,,,,,03/Jan/10 17:53;davsclaus;trunk: 895452.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JDBC component doesn't preserve headers,CAMEL-2320,12487733,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,pradeep24,pradeep24,24/Dec/09 18:11,03/Nov/10 05:13,14/Mar/19 02:42,25/Dec/09 08:53,2.1.0,,,,,,,,,,2.2.0,,,camel-jdbc,,,,0,JDBC component doesn't preserve any of the headers that are sent into it,,,,,,,,,,,,,,,,,24/Dec/09 18:12;pradeep24;jdbcPreserveHeaders.patch;https://issues.apache.org/jira/secure/attachment/12462805/jdbcPreserveHeaders.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2009-12-25 08:53:21.986,,,no_permission,,,,,,,,,,,,,76553,,,Fri Dec 25 16:37:40 UTC 2009,,,Patch Available,,,,0|i01nvb:,7636,,,,,,,,,24/Dec/09 18:12;pradeep24;here's a patch for it,25/Dec/09 08:53;davsclaus;trunk: 893846.,"25/Dec/09 08:54;davsclaus;Thanks Pradeep.

Do you mind taking a look at camel-sql whether it has the same problem?","25/Dec/09 16:37;pradeep24;think camel-sql's already been ticketed and fixed
http://issues.apache.org/activemq/browse/CAMEL-1292",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-cache - Missing some classes in .jar,CAMEL-2319,12487731,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,24/Dec/09 09:42,03/Nov/10 05:13,14/Mar/19 02:42,24/Dec/09 09:42,2.1.0,,,,,,,,,,2.2.0,,,,,,,0,"See nabble
http://old.nabble.com/Camel-Cache%3A-Processors-not-released--ts26908653.html",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76554,,,Thu Dec 24 09:42:43 UTC 2009,,,,,,,0|i01nv3:,7635,,,,,,,,,24/Dec/09 09:42;davsclaus;trunk: 893724.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-bindy dataformat KeyValue DSL can't work,CAMEL-2318,12487730,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,njiang,njiang,24/Dec/09 09:25,03/Nov/10 05:13,14/Mar/19 02:42,24/Dec/09 09:35,2.0.0,2.0-M1,2.0-M2,2.0-M3,2.1.0,,,,,,2.2.0,,,camel-bindy,,,,0,"     When you set the bindy dataformat with below DSL , you will get the error that camel can't find the DataFormat. 
    {code} 
     public void configure() {
            from(""direct:start"").marshal()
                .bindy(BindyType.KeyValue, ""org.apache.camel.dataformat.bindy.model.fix.simple"")
                .to(""mock:result"");
        }
     {code}",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76555,,,Thu Dec 24 09:35:10 UTC 2009,,,,,,,0|i01nuv:,7634,,,,,,,,,24/Dec/09 09:35;njiang;http://svn.apache.org/viewvc?rev=893719&view=rev,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The camel java archetype is not working correctly,CAMEL-2313,12487728,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,iamryadh,iamryadh,24/Dec/09 01:33,03/Nov/10 05:13,14/Mar/19 02:42,24/Dec/09 04:48,2.1.0,,,,,,,,,,2.2.0,,,tooling,,,,0,"When the following is run the following 
mvn archetype:generate -DarchetypeGroupId=org.apache.camel.archetypes -DarchetypeArtifactId=camel-archetype-java -DarchetypeVersion=2.1.0 -DgroupId=com.corp.projects -DartifactId=camel-jira-ws 
Everything looks ok, but glancing at the generated pom.xml in the newly created project, it seems the archetype didn't pick the groupId and the artifactID 

================================= 
  <groupId>${project.groupId}</groupId> 
  <artifactId>${project.artifactId}</artifactId> 
  <packaging>jar</packaging> 
  <version>1.0-SNAPSHOT</version> 
================================= 

http://old.nabble.com/The-latest-camel-java-archetype-%282.1.0%29-is-not-working-correctly-to26905679.html",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-12-24 01:39:24.185,,,no_permission,,,,,,,,,,,,,76556,,,Thu Dec 24 04:48:17 UTC 2009,,,,,,,0|i01ntr:,7629,,,,,,,,,"24/Dec/09 01:39;njiang;I think Jonathan already fix this issue few hours ago, can you check out the latest code and try again :)
http://svn.apache.org/viewvc?rev=893610&view=rev","24/Dec/09 01:50;iamryadh;oh, forgot to check the forums :D
Should I close the issue then?","24/Dec/09 02:30;njiang;Don't warrior , I will build the camel trunk and test it again.
If the fix work , I will close this issue.
","24/Dec/09 04:48;njiang;Just tested with latest trunk code, the fix is working :)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
IOConverter - File to byte[] should close input stream,CAMEL-2306,12487720,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,20/Dec/09 08:18,03/Nov/10 05:13,14/Mar/19 02:42,20/Dec/09 08:57,2.1.0,,,,,,,,,,2.2.0,,,camel-core,,,,0,"See nabble
http://old.nabble.com/Problem-with-JMS-and-file-ts26857645.html

Most likely a problem on Windows as it tend to lock files for much longer duration than needed.
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76557,,,Sun Dec 20 08:57:37 UTC 2009,,,,,,,0|i01ns7:,7622,,,,,,,,,20/Dec/09 08:57;davsclaus;trunk: 892575,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
GroupedExchange in Aggregator is not working correctly,CAMEL-2303,12484884,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,18/Dec/09 12:10,03/Nov/10 05:13,14/Mar/19 02:42,18/Dec/09 13:12,2.0.0,2.1.0,,,,,,,,,2.2.0,,,camel-core,,,,0,"See nabble
http://old.nabble.com/Help%21-org.apache.camel.impl.GroupedExchange-does-not-exist-in-the-latest-download-ts26841584.html",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76558,,,Fri Dec 18 13:12:43 UTC 2009,,,,,,,0|i01nrj:,7619,,,,,,,,,18/Dec/09 13:12;davsclaus;trunk: 892244.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jetty connector override existing connector created by Pax Web on Karaf,CAMEL-2294,12486652,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,cmoulliard,cmoulliard,16/Dec/09 10:22,07/Feb/10 09:58,14/Mar/19 02:42,16/Dec/09 11:13,2.1.0,,,,,,,,,,,,,camel-jetty,,,,0,"When deploying a camel route containing camel-jetty endpoints, then the web management console of karaf cannot be accessed anymore through its url --> http://localhost:8080/webconsole/admin

All the traffic is redirect to the camel-jetty endpoints created  :

ex :

	<camel:camelContext trace=""true""
		xmlns=""http://camel.apache.org/schema/osgi"" >
		
		<camel:route>
			<camel:from uri=""jetty:http://localhost:8080?matchOnUriPrefix=true""/>
            <camel:loadBalance>
			    <camel:roundRobin/>
			    <camel:to uri=""http://localhost:8181?throwExceptionOnFailure=false&amp;bridgeEndpoint=true""/> 
				<camel:to uri=""http://localhost:8282?throwExceptionOnFailure=false&amp;bridgeEndpoint=true""/>
			</camel:loadBalance> 
		</camel:route>
		
		<camel:route>
		    <camel:from uri=""jetty:http://localhost:8181?matchOnUriPrefix=true""/>
			<camel:to uri=""cxfbean:reportIncidentServiceBean""/>
		</camel:route>
		
		<camel:route>
		    <camel:from uri=""jetty:http://localhost:8282?matchOnUriPrefix=true""/>
			<camel:to uri=""cxfbean:reportIncidentServiceBean""/>
		</camel:route>
		
		<camel:route>
			<camel:from uri=""jms:queue:inout""/>
			<camel:bean ref=""reportIncidentDAOService"" method=""getReports""/>
		</camel:route>
		
	</camel:camelContext>","Apache Felix Karaf 1.2.0
Apache Camel 1.2.0",,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-12-16 10:30:09.586,,,no_permission,,,,,,,,,,,,,76559,,,Wed Dec 16 11:13:36 UTC 2009,,,,,,,0|i01npj:,7610,,,,,,,,,16/Dec/09 10:30;davsclaus;Then use other port numbers which do *not* clash with the admin console.,"16/Dec/09 10:31;njiang;Hi Charles,
If you want to share the port between PaxWeb and camel route, you need to consider to use camel-servlet component.
If you want camel router to listen to the other port, you may consider to user camel-jetty component.
",16/Dec/09 11:13;cmoulliard;workaround = use another port number,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RejectedExecutionException after restarting camel context,CAMEL-2292,12486318,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,hadrian,hadrian,15/Dec/09 15:18,03/Nov/10 05:12,14/Mar/19 02:42,29/Dec/09 02:01,2.1.0,,,,,,,,,,2.2.0,,,,,,,1,"User reported over the #camel channel the following exception trying to send a message after the context was stopped and restarted

 ""Failed to create Producer for endpoint:"". Thats the exception I'm getting
Reason: java.util.concurrent.RejectedExecutionException

{code}
Exception in thread ""core"" org.apache.camel.FailedToCreateProducerException: Failed to create Producer for endpoint: Endpoint[activemq://queue:request.lavaOrderProducer.powerTraderServer]. Reason: java.util.concurrent.RejectedExecutionException
	at org.apache.camel.component.jms.JmsProducer.testAndSetRequestor(JmsProducer.java:116)
	at org.apache.camel.component.jms.JmsProducer.processInOut(JmsProducer.java:175)
	at org.apache.camel.component.jms.JmsProducer.process(JmsProducer.java:147)
	at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:179)
	at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:161)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:146)
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:160)
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:98)
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:97)
	at com.wjb.producer.lavaData.dispatcher.ServerRequestDispatcher.requestSymbolSectorArray(ServerRequestDispatcher.java:122)
	at com.wjb.producer.core.LavaDataManager.initialize(LavaDataManager.java:64)
	at com.wjb.producer.core.ProducerCore.run(ProducerCore.java:98)
	at java.lang.Thread.run(Thread.java:619)
Caused by: java.util.concurrent.RejectedExecutionException
	at java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:1760)
	at java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:767)
	at java.util.concurrent.ScheduledThreadPoolExecutor.delayedExecute(ScheduledThreadPoolExecutor.java:216)
	at java.util.concurrent.ScheduledThreadPoolExecutor.schedule(ScheduledThreadPoolExecutor.java:366)
	at org.apache.camel.util.DefaultTimeoutMap.schedulePoll(DefaultTimeoutMap.java:156)
	at org.apache.camel.util.DefaultTimeoutMap.<init>(DefaultTimeoutMap.java:52)
	at org.apache.camel.component.jms.requestor.Requestor.<init>(Requestor.java:68)
	at org.apache.camel.component.jms.JmsProducer.testAndSetRequestor(JmsProducer.java:107)
{code}

The following unit tests seems to reproduce the problem:
{code}
ublic final class StartStopTest 
{
	private final GenericApplicationContext applicationContext = new GenericApplicationContext();
	private final int testCount = 3;
	
	@Test
	public void test() throws Exception 
	{		
		//Initialize
		final File propertiesFile = new File(Constants.RESOURCE_DIRECTORY_NAME, Constants.PROPERTIES_FILE_NAME);
		PropertyConfigurator.configure(propertiesFile.getPath());
		
		final File applicationContextFile = new File(Constants.RESOURCE_DIRECTORY_NAME, Constants.CONTEXT_FILE_NAME);	
		final Resource applicationContextResource = new FileSystemResource(applicationContextFile);
				
		final AbstractBeanDefinitionReader beanDefinitionReader = new XmlBeanDefinitionReader(this.applicationContext);
		
		beanDefinitionReader.loadBeanDefinitions(applicationContextResource);
		this.applicationContext.refresh();	
		
		//Begin Testing
		for (int i = 0; i < this.testCount; i++)
		{			
			this.startSendStop();
		    Thread.sleep(3000);
		}		
	}
	
	private void startSendStop() throws Exception
	{
		final SpringCamelContext springCamelContext = (SpringCamelContext)this.applicationContext.getBean(Constants.CAMEL_CONTEXT_NAME);
		final ProducerTemplate producerTemplate;
		final Endpoint serverRequestQueue;
		
		springCamelContext.start();
		
		producerTemplate = springCamelContext.createProducerTemplate();
		serverRequestQueue = springCamelContext.getEndpoint(""serverRequestQueue"");
		
		final Exchange exchange = producerTemplate.send(serverRequestQueue, new Processor()
		{
			public void process(final Exchange exchange) throws Exception 
			{				
				exchange.setPattern(ExchangePattern.InOut);	
				exchange.getIn().setHeader(ServerJmsServices.REQUEST, ServerJmsServices.GET_SYMBOL_INFO);
				exchange.getIn().setBody("""");
			}			
		});
		final String responseString = (String)exchange.getOut().getBody();
		
		Assert.assertTrue(responseString.length() > 0);
		
		springCamelContext.stop();
	}
}


<?xml version=""1.0"" encoding=""UTF-8""?>
<beans xmlns=""http://www.springframework.org/schema/beans"" 
       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
       xmlns:camel=""http://camel.apache.org/schema/spring""
       xsi:schemaLocation=""http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
                           http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd"">
        
    <!-- ActiveMQ component for Camel to use -->   
    <bean id=""activemq"" class=""org.apache.activemq.camel.component.ActiveMQComponent"" > 
        <property name=""connectionFactory""> 
            <bean class=""org.apache.activemq.ActiveMQConnectionFactory""> 
                <property name=""brokerURL"" value=""tcp://192.168.5.10:61616?daemon=true"" />
            </bean> 
        </property> 
    </bean> 
           
    <!-- Camel Context -->
    <camelContext id=""camelContext"" xmlns=""http://camel.apache.org/schema/spring"" autoStartup=""false"">   	
    	<camel:endpoint id=""serverRequestQueue""	uri=""activemq:queue:request.lavaOrderProducer.powerTraderServer"" />   	
    </camelContext>
</beans>
{code}
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-12-16 08:54:09.366,,,no_permission,,,,,,,,,,,,,76560,,,Tue Dec 29 02:01:00 UTC 2009,,,,,,,0|i01np3:,7608,,,,,,,,,"16/Dec/09 08:54;davsclaus;You need to stop the producer template as well as you are in charge of its lifecycle
{code}
producerTemplate.stop();
{code}",16/Dec/09 10:54;davsclaus;trunk: 891183.,"21/Dec/09 14:20;eubinas;So I changed the startSendStop function to the following and I still get the same exception. Is the producerTemplate stopping correctly?

private void startSendStop() throws Exception
{		
	final SpringCamelContext springCamelContext = (SpringCamelContext)this.applicationContext.getBean(Constants.CAMEL_CONTEXT_NAME);
	final ProducerTemplate producerTemplate;
	final Endpoint serverRequestQueue;
		
	springCamelContext.start();
	
	producerTemplate = springCamelContext.createProducerTemplate();
	serverRequestQueue = springCamelContext.getEndpoint(""serverRequestQueue"");
		
	final Exchange exchange = producerTemplate.send(serverRequestQueue, new Processor()
	{
		public void process(final Exchange exchange) throws Exception 
		{				
			exchange.setPattern(ExchangePattern.InOut);	
			exchange.getIn().setHeader(ServerJmsServices.REQUEST, ServerJmsServices.GET_SYMBOL_INFO);
			exchange.getIn().setBody("""");
		}			
	});
	final String responseString = (String)exchange.getOut().getBody();
	
	Assert.assertTrue(responseString.length() > 0);
	
	producerTemplate.stop();
	springCamelContext.stop();
}",21/Dec/09 14:57;davsclaus;Try with latest code from trunk as there was a fix in shutting down ProducerTemplate which could affect your use-case,29/Dec/09 02:01;eubinas;Successfully passed the unit test. Thanks guys.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-bindy - csv - Make it easier to marshal with POJO out of the box,CAMEL-2289,12487707,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,14/Dec/09 16:29,03/Nov/10 05:12,14/Mar/19 02:42,14/Dec/09 16:30,2.1.0,,,,,,,,,,2.2.0,,,camel-bindy,,,,0,"Its to ugly that you must use List<Map<String, Object>> to wrap you POJO to let Bindy be able to marhal my POJO to a CSV record.

It should be able to detect that its not a List but a plain POJO and construct the List itself and based on defaults.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76561,,,Mon Dec 14 16:33:01 UTC 2009,,,,,,,0|i01nof:,7605,,,,,,,,,14/Dec/09 16:30;davsclaus;trunk: 890397.,"14/Dec/09 16:33;davsclaus;Before
{code}
        PurchaseOrderBindy order = new PurchaseOrderBindy();
        order.setAmount(1);
        order.setPrice(new BigDecimal(""39.95""));
        order.setName(""Camel in Action"");

        List<Map<String, Object>> data = new ArrayList<Map<String, Object>>();
        Map<String, Object> row = new HashMap<String, Object>();
        row.put(order.getClass().getName(), order);
        data.add(row);

        template.sendBody(""direct:start"", data);
{code}

After
{code}
        PurchaseOrder order = new PurchaseOrder();
        order.setAmount(1);
        order.setPrice(new BigDecimal(""39.95""));
        order.setName(""Camel in Action"");

        template.sendBody(""direct:start"", order);
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Using filter before split causes filtered messages to not be aggregated as they where marked as filtered,CAMEL-2287,12487706,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,14/Dec/09 12:29,03/Nov/10 05:12,14/Mar/19 02:42,14/Dec/09 14:23,2.0.0,2.1.0,,,,,,,,,2.2.0,,,camel-core,,,,0,"Splitter supports filtering exchanges when a filter is used inside it.

However it should clear the filtered flag for exchanges arriving in, before the splitting so Camel has no memory in case filter has been used before the splitter

{code}
                Predicate goodWord = body().contains(""World"");

                from(""direct:start"")
                    .to(""mock:before"")
                    .filter(goodWord)
                        .to(""mock:good"")
                    .end()
                    .split(body().tokenize("" ""), new MyAggregationStrategy())
                        .to(""mock:split"")
                    .end()
                    .to(""mock:result"");
{code}

",,,,,,,,,,,,,,,CAMEL-2288,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-12-14 13:04:12.366,,,no_permission,,,,,,,,,,,,,76562,,,Mon Dec 14 14:23:24 UTC 2009,,,,,,,0|i01nnz:,7603,,,,,,,,,14/Dec/09 12:32;davsclaus;The workaround is to use .removeHeader(Exchange.FILTERED) in the DSL before you hit the .split() DSL,"14/Dec/09 13:04;romkal;There is also a test that could be discussed called {{SplitShouldSkipFilteredExchanges}}.

It has flow like:

{code}
                from(""direct:split"")
                    .split(body(List.class), new MyAggregationStrategy())
                        .filter(goodWord)
                            .to(""mock:filtered"");
{code}

But it should be equivalent to

{code}
                from(""direct:split"")
                    .split(body(List.class), new MyAggregationStrategy())
                        .filter(goodWord)
                            .to(""mock:filtered"")
                        .end() ;
{code}

but then {{filter()}} reads like *if* statement that is simply not matched. Does it mean we shouldn't aggregate it back? And definitely following code should be aggregated back even if it contains unmatched filter:

{code}
                from(""direct:split"")
                    .split(body(List.class), new MyAggregationStrategy())
                        .to(""direct:otherprocessing"")
                        .filter(goodWord)
                            .to(""mock:filtered"")
                        .end();
{code}","14/Dec/09 13:22;davsclaus;Yeah the missing end() can be omitted when you are lazy. But I would state that it would be best practice to use end() to be consistent.
",14/Dec/09 14:16;davsclaus;Will be resolved by CAMEL-2288,14/Dec/09 14:23;davsclaus;trunk: 890339.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel loadbalancing + jetty + http + cxfbean endpoints does not work,CAMEL-2286,12486689,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,cmoulliard,cmoulliard,14/Dec/09 11:35,07/Feb/10 09:58,14/Mar/19 02:42,18/Dec/09 07:29,,,,,,,,,,,,,,,,,,0,"Camel route deployed on karaf server 1

{code}
	<camel:camelContext trace=""true""
		xmlns=""http://camel.apache.org/schema/osgi"">
		
		<camel:route>
			<camel:from uri=""jetty:http://localhost:8181?matchOnUriPrefix=true""/>
			<camel:loadBalance>
			    <camel:roundRobin/>
				<camel:to uri=""http://localhost:8282?throwExceptionOnFailure=false&amp;bridgeEndpoint=true""/>
			</camel:loadBalance>
		</camel:route>
		
	</camel:camelContext>
{code}

Camel route deployed on karaf server 2

{code}
	<camel:camelContext trace=""true""
		xmlns=""http://camel.apache.org/schema/osgi"">
		
		<camel:route>
		    <camel:from uri=""jetty:http://localhost:8282?matchOnUriPrefix=true""/>
			<camel:to uri=""cxfbean:reportIncidentServiceBean""/>
		</camel:route>
		
		<camel:route>
			<camel:from uri=""jms:queue:inout""/>
			<camel:bean ref=""reportIncidentDAOService"" method=""getReports""/>
		</camel:route>
		
	</camel:camelContext>
{code}

Error generated using the following REST request : http://127.0.0.1:8181/reportservice/incidents/123/

{code}
org.apache.commons.httpclient.NoHttpResponseException: The server localhost failed to respond
	at org.apache.commons.httpclient.HttpMethodBase.readStatusLine(HttpMethodBase.java:1976)
	at org.apache.commons.httpclient.HttpMethodBase.readResponse(HttpMethodBase.java:1735)
	at org.apache.commons.httpclient.HttpMethodBase.execute(HttpMethodBase.java:1098)
	at org.apache.commons.httpclient.HttpMethodDirector.executeWithRetry(HttpMethodDirector.java:398)
	at org.apache.commons.httpclient.HttpMethodDirector.executeMethod(HttpMethodDirector.java:171)
	at org.apache.commons.httpclient.HttpClient.executeMethod(HttpClient.java:397)
	at org.apache.commons.httpclient.HttpClient.executeMethod(HttpClient.java:323)
	at org.apache.camel.component.http.HttpProducer.executeMethod(HttpProducer.java:164)
	at org.apache.camel.component.http.HttpProducer.process(HttpProducer.java:78)
	at org.apache.camel.processor.SendProcessor$1.doInProducer(SendProcessor.java:97)
	at org.apache.camel.processor.SendProcessor$1.doInProducer(SendProcessor.java:95)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:146)
	at org.apache.camel.processor.SendProcessor.doProcess(SendProcessor.java:94)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:82)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
	at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:53)
	at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:82)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:162)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
	at org.apache.camel.processor.RedeliveryErrorHandler.processExchange(RedeliveryErrorHandler.java:223)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:153)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:91)
	at org.apache.camel.processor.DefaultErrorHandler.process(DefaultErrorHandler.java:49)
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:206)
	at org.apache.camel.processor.loadbalancer.QueueLoadBalancer.process(QueueLoadBalancer.java:41)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
	at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:53)
	at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:82)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:162)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
	at org.apache.camel.processor.RedeliveryErrorHandler.processExchange(RedeliveryErrorHandler.java:223)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:153)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:91)
	at org.apache.camel.processor.DefaultErrorHandler.process(DefaultErrorHandler.java:49)
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:206)
	at org.apache.camel.processor.UnitOfWorkProcessor.processNext(UnitOfWorkProcessor.java:54)
	at org.apache.camel.processor.DelegateProcessor.process(DelegateProcessor.java:48)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
	at org.apache.camel.component.http.CamelServlet.service(CamelServlet.java:53)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:806)
	at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:502)
	at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:363)
	at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:766)
	at org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:230)
	at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)
	at org.mortbay.jetty.Server.handle(Server.java:324)
	at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:534)
	at org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:864)
	at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:533)
	at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:207)
	at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:403)
	at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:409)
	at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:522)

{code}

This request works fine : http://127.0.0.1:8282/reportservice/incidents/123/
{code}
<?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?>
<Incident>
<details>
<entry><key>100</key>
<value><id>100</id>
<reportedBy>James</reportedBy>
<assignedTo>Hiram</assignedTo>
</value>
</entry>
</details>
<incidentId>123</incidentId>
<givenName>Ibsen</givenName>
<familyName>Claus</familyName>
</Incident>
{code}
","Camel 2.1
Karaf 1.2",,,,,,,,,,,,,,,,14/Dec/09 11:37;cmoulliard;reportincident-rest-routing-master.zip;https://issues.apache.org/jira/secure/attachment/12462933/reportincident-rest-routing-master.zip,,,,,1.0,,,,,,,,,,,,,,,,,,,2009-12-14 13:19:52.063,,,no_permission,,,,,,,,,,,,,76563,,,Fri Dec 18 06:14:05 UTC 2009,,,,,,,0|i01nnr:,7602,,,,,,,,,"14/Dec/09 11:38;cmoulliard;List of features installed :

featuresRepositories=mvn:org.apache.felix.karaf/apache-felix-karaf/1.2.0/xml/features,mvn:org.apache.camel.karaf/features/2.1.0/xml/features,jar:mvn:org.apache.camel.example/reportincident.restful.features/1.0-SNAPSHOT!/reportincident.features-1.0-SNAPSHOT-features.xml

#
# Comma separated list of features to install at startup
#
featuresBoot=ssh,management,spring,spring-dm,spring-web,http-reportingincident,camel,camel-jms,camel-jetty,connector,activemq,camel-cxf,reportincident","14/Dec/09 13:19;njiang;Hi Charles,

I saw you are using the cxf osgi transport in your camel-context.xml, and the cxf-osgi-transport's default port are 8181,
Can you change the url of the jetty endpoint which use the 8181 port  to avoid the port conflict?

Willem","14/Dec/09 13:34;cmoulliard;Willem,

The port 8181 is only used by jetty on the osgi server where CXF does not run. The CXF server is deployed on the second karaf instance and port to be used is 8282 by PAX Web","14/Dec/09 13:50;njiang;Charles,

For you case you don't need to get PAX Web involved,  as the camel-jetty will call jetty API directly.
I just want you to make sure there is no port conflict in your Karaf instance.

","15/Dec/09 11:34;cmoulliard;This issue is the same as http://issues.apache.org/activemq/browse/CAMEL-1925

I thought that the problem was solved.

Remark: When the following config is used locally (camel:run), then it works

{code}
		<camel:route>
			<camel:from uri=""jetty:http://localhost:8080?matchOnUriPrefix=true""/>
			<camel:to uri=""http://localhost:8181?throwExceptionOnFailure=false&amp;bridgeEndpoint=true""/>
		</camel:route>
		
		<camel:route>
		    <camel:from uri=""jetty:http://localhost:8181?matchOnUriPrefix=true""/>
			<camel:to uri=""cxfbean:reportIncidentServiceBean""/>
		</camel:route>
		
		<camel:route>
			<camel:from uri=""jms:queue:inout""/>
			<camel:bean ref=""reportIncidentDAOService"" method=""getReports""/>
		</camel:route>
{code}

So something goes wrong when deployed in karaf  where we use PAX WEB + Jetty instead of only Jetty as this is the case when launched locally","15/Dec/09 13:22;cmoulliard;I understand now why the behavior is different. 

On karaf, a connection is established by the HttpProducer with the proxy (if defined in system property or browser)

14:13:58,196 | DEBUG | e/incidents/123/ | HttpConnection                   | ommons.httpclient.HttpConnection  692 | Open connection to 172.17.5.6:80

This is not the case when the example is run locally through camel:run

The httpEndpoint is able to detect system property where http.proxyHost / port are defined. 

{code}
        HttpClient answer = new HttpClient(getClientParams());

        // configure http proxy if defined as system property
        // http://java.sun.com/javase/6/docs/technotes/guides/net/proxies.html
        if (System.getProperty(""http.proxyHost"") != null && System.getProperty(""http.proxyPort"") != null) {
            String host = System.getProperty(""http.proxyHost"");
            int port = Integer.parseInt(System.getProperty(""http.proxyPort""));
            if (LOG.isDebugEnabled()) {
                LOG.debug(""Java System Property http.proxyHost and http.proxyPort detected. Using http proxy host: ""
                        + host + "" port: "" + port);
            }
            answer.getHostConfiguration().setProxy(host, port);
        }

        answer.setHttpConnectionManager(httpConnectionManager);
{code}

I propose to add a new property to the endpoint to disable this feature --> proxy=true or false

","15/Dec/09 14:58;cmoulliard;I have found the guilty, it is the mvn url handler of pax which is used by Karaf which instantiate these variables.

{code}
Class org.ops4j.pax.url.maven.commons.MavenConfigurationImpl.java

   /**
     * Enables the proxy server for a given URL.
     */
    public void enableProxy( URL url )
    {
        final String proxySupport = m_propertyResolver.get( m_pid + MavenConstants.PROPERTY_PROXY_SUPPORT );
        if( ""false"".equalsIgnoreCase( proxySupport ) )
        {
            return; // automatic proxy support disabled
        }

        final String protocol = url.getProtocol();
        if( protocol == null || protocol.equals( get( m_pid + MavenConstants.PROPERTY_PROXY_SUPPORT ) ) )
        {
            return; // already have this proxy enabled
        }

        Map<String, String> proxyDetails = m_settings.getProxySettings().get( protocol );
        if( proxyDetails != null )
        {
            LOGGER.trace( ""Enabling proxy ["" + proxyDetails + ""]"" );

            final String user = proxyDetails.get( ""user"" );
            final String pass = proxyDetails.get( ""pass"" );

            Authenticator.setDefault( new Authenticator()
            {
                @Override
                protected PasswordAuthentication getPasswordAuthentication()
                {
                    return new PasswordAuthentication( user, pass.toCharArray() );
                }
            }
            );

            System.setProperty( protocol + "".proxyHost"", proxyDetails.get( ""host"" ) );
            System.setProperty( protocol + "".proxyPort"", proxyDetails.get( ""port"" ) );

{code}",18/Dec/09 06:14;davsclaus;I think Willem added a new feature to Camel trunk which allows lets camel-http read the proxy settings from Camel properties and *not* system properties. And by this it should fix this issue as well. Can you try again with latest code from trunk?,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jetty endpoint on IP address 0.0.0.0 + CXFbean endpoint does not work,CAMEL-2285,12486682,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,cmoulliard,cmoulliard,14/Dec/09 11:30,07/Feb/10 09:58,14/Mar/19 02:42,15/Dec/09 15:19,2.1.0,,,,,,,,,,,,,,,,,0,"The following config does not work :

{code}
		<camel:route>
		    <camel:from uri=""jetty:http://0.0.0.0:8282?matchOnUriPrefix=true""/>
			<camel:to uri=""cxfbean:reportIncidentServiceBean""/>
		</camel:route>

{code}

but well this one :


{code}
		<camel:route>
		    <camel:from uri=""jetty:http://localhost:8282?matchOnUriPrefix=true""/>
			<camel:to uri=""cxfbean:reportIncidentServiceBean""/>
		</camel:route>
{code}

",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76564,,,Tue Dec 15 15:19:59 UTC 2009,,,,,,,0|i01nnj:,7601,,,,,,,,,15/Dec/09 15:19;cmoulliard;Same issue as identified in camel 2286,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Failed to resolve endpoint: cxfbean://reportIncidentServiceBean due to: null,CAMEL-2284,12487192,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,cmoulliard,cmoulliard,14/Dec/09 11:22,07/Feb/10 09:58,14/Mar/19 02:42,15/Dec/09 16:51,2.1.0,,,,,,,,,,,,,camel-cxf,,,,0,"{code}
org.apache.camel.RuntimeCamelException: org.apache.camel.FailedToCreateRouteException: Failed to create route route3 at: >>> To[cxfbean:reportIncidentServiceBean] <<< in route: Route[[From[http://0.0.0.0:8282]] -> [To[cxfbean:reportIncid... because of Failed to resolve endpoint: cxfbean://reportIncidentServiceBean due to: null
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1039)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:103)
	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:562)
	at org.springframework.context.event.SimpleApplicationEventMulticaster$1.run(SimpleApplicationEventMulticaster.java:78)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:49)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:76)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:274)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:736)
	at org.springframework.osgi.context.support.AbstractOsgiBundleApplicationContext.finishRefresh(AbstractOsgiBundleApplicationContext.java:235)
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext$4.run(AbstractDelegatedExecutionApplicationContext.java:358)
	at org.springframework.osgi.util.internal.PrivilegedUtils.executeWithCustomTCCL(PrivilegedUtils.java:85)
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.completeRefresh(AbstractDelegatedExecutionApplicationContext.java:320)
	at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor$CompleteRefreshTask.run(DependencyWaiterApplicationContextExecutor.java:136)
	at java.lang.Thread.run(Thread.java:619)
Caused by: org.apache.camel.FailedToCreateRouteException: Failed to create route route3 at: >>> To[cxfbean:reportIncidentServiceBean] <<< in route: Route[[From[http://0.0.0.0:8282]] -> [To[cxfbean:reportIncid... because of Failed to resolve endpoint: cxfbean://reportIncidentServiceBean due to: null
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:643)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:136)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:601)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:1156)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1073)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1009)
	at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:158)
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:55)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:884)
	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:197)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:101)
	... 12 more
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: cxfbean://reportIncidentServiceBean due to: null
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:437)
	at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:46)
	at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:154)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:109)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:115)
	at org.apache.camel.model.SendDefinition.resolveEndpoint(SendDefinition.java:63)
	at org.apache.camel.model.SendDefinition.createProcessor(SendDefinition.java:57)
	at org.apache.camel.model.ToDefinition.createProcessor(ToDefinition.java:87)
	at org.apache.camel.model.ProcessorDefinition.makeProcessor(ProcessorDefinition.java:286)
	at org.apache.camel.model.ProcessorDefinition.addRoutes(ProcessorDefinition.java:114)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:640)
	... 22 more
Caused by: org.apache.cxf.service.factory.ServiceConstructionException
	at org.apache.cxf.jaxrs.JAXRSServerFactoryBean.create(JAXRSServerFactoryBean.java:122)
	at org.apache.camel.component.cxf.cxfbean.CxfBeanEndpoint.createServer(CxfBeanEndpoint.java:112)
	at org.apache.camel.component.cxf.cxfbean.CxfBeanEndpoint.init(CxfBeanEndpoint.java:86)
	at org.apache.camel.component.cxf.cxfbean.CxfBeanComponent.createEndpoint(CxfBeanComponent.java:48)
	at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:78)
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:416)
{code}",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-12-14 11:54:24.359,,,no_permission,,,,,,,,,,,,,76565,,,Tue Dec 15 16:51:28 UTC 2009,,,,,,,0|i01nnb:,7600,,,,,,,,,"14/Dec/09 11:54;njiang;Can I have a look at your cxfbean:// URI ?
From the stack trace , it looks like a configuration error which causes the ServiceConstructionException.","14/Dec/09 12:03;cmoulliard;The code has been put in attachement of the camel-2286

Remark : After osgi:shutdown and start the endpoint can be resolved and route created.",15/Dec/09 16:51;cmoulliard;comes form the fact that context of camel uses namespace spring and not osgi,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Typo in Mail Component documentation should be attachments instead of attacments,CAMEL-2282,12486531,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,davsclaus,joern,joern,11/Dec/09 08:59,03/Nov/10 05:12,14/Mar/19 02:42,11/Dec/09 09:09,,,,,,,,,,,2.2.0,,,documentation,,,,0,"http://camel.apache.org/mail.html

""Consuming mails with attachment sample""

...

""Map<String, DataHandler> attachments = exchange.getIn().getAttachments();
        if (attacments.size() > 0) {
""

but should be ""attachments.size()"".",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-12-11 09:09:35.012,,,no_permission,,,,,,,,,,,,,76566,,,Fri Dec 11 09:09:35 UTC 2009,,,,,,,0|i01nmv:,7598,,,,,,,,,11/Dec/09 09:09;davsclaus;Thanks for reporting I have fixed the typo.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
recipientList onException redelivery issue,CAMEL-2278,12486656,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,crive,crive,10/Dec/09 14:08,03/Nov/10 05:12,14/Mar/19 02:42,14/Dec/09 09:27,2.2.0,,,,,,,,,,2.2.0,,,,,,,0,"using a recipientList containing a csv list of ftp endpoints.
I would like to retry the delivery to a given ftp enpoint fails. 

I've set up an onException with maximumRedeliveries set to 2. 

In case an error occurs sending the message to 1 ftp endpoint the redelivery is performed on all endpoints specified on the csv list; the redelivery should be performed only on the failed endpoint is there a way to achieve this?

route sample 

from(""direct:delivery.notification.test"")
.onException(Exception.class).maximumRedeliveries(2).redeliverDelay(60L).handled(true).end()
.recipientList(header(""recipientListHeader"").tokenize("",""))
.parallelProcessing().executorService(customThreadPoolExecutor)
						//.aggregationStrategy(new recipientAggregationStrategy())
						.to(""direct:chunk.completed"");","windows xp, eclipse ide",,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-12-10 15:35:02.563,,,no_permission,,,,,,,,,,,,,76567,,,Mon Dec 14 09:27:16 UTC 2009,,,,,,,0|i01nlz:,7594,,,,,,,,,"10/Dec/09 15:35;davsclaus;trunk: 889295.

Marco if you build from source you can try with that commit which should help fix you issue.
I need to add some more unit testing but wanted to give you a chance to test it on your end as well ASAP.","10/Dec/09 16:26;davsclaus;Marco, sorry I just realized it was only the multicast part that was fixed, I need to revisit it for the recipient list as well.
","11/Dec/09 10:32;crive;Ok thanks.
Do you have an idea on how log it could take?

Thanks again,
Marco","11/Dec/09 11:00;davsclaus;I had to implement a 2nd fix as the @RecipientList is more dynamic than what you else create using the route builders (which is more static).

But I do have that covered now, need to run some additional tests before committing.","14/Dec/09 09:27;davsclaus;trunk: 890241.

This one was a bit tougher to support @RecipientList as well.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jpa JPAEndpoint eat up the cause of  InvalidPayloadException,CAMEL-2275,12487676,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,10/Dec/09 09:56,03/Nov/10 05:12,14/Mar/19 02:42,10/Dec/09 12:44,1.4.0,1.5.0,1.6.0,1.6.1,1.6.2,2.0.0,2.0-M1,2.0-M2,2.0-M3,2.1.0,2.2.0,,,,,,,0,"Here is the mail thread discuss this issue.
http://old.nabble.com/TypeConverter-%3A-Should-it-be-blocking-for-camel-route-or-not-in-case--of-error---td26723837.html",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76569,,,Thu Dec 10 12:44:21 UTC 2009,,,,,,,0|i01nlb:,7591,,,,,,,,,"10/Dec/09 12:44;njiang;trunk 
 http://svn.apache.org/viewvc?rev=889234&view=rev",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel proxy - Detect the proxied method returned null and allow that as a valid answer,CAMEL-2274,12485635,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,10/Dec/09 08:28,03/Nov/10 05:12,14/Mar/19 02:42,10/Dec/09 09:43,2.1.0,,,,,,,,,,2.2.0,,,camel-core,,,,0,"See nabble
http://old.nabble.com/Can%27t-return-null-with-Camel-remoting-ts26682177.html
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76570,,,Thu Dec 10 09:43:25 UTC 2009,,,,,,,0|i01nl3:,7590,,,,,,,,,10/Dec/09 09:43;davsclaus;trunk: 889160.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Typo in log: [org.apache.camel.processor.MulticastProcessor:Camel thread 1: seda://errorQueue] - <Done sequientel processing 2 exchanges>,CAMEL-2271,12486732,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,davsclaus,karlp,karlp,09/Dec/09 10:41,03/Jun/10 07:25,14/Mar/19 02:42,10/Dec/09 07:46,2.0.0,,,,,,,,,,2.1.0,,,camel-core,,,,0,"[org.apache.camel.processor.MulticastProcessor:Camel thread 1: seda://errorQueue] - <Done sequientel processing 2 exchanges>

Should probably say ""sequential"" ?",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-12-10 07:46:14.583,,,no_permission,,,,,,,,,,,,,76571,,,Thu Jun 03 07:25:50 UTC 2010,,,,,,,0|i01nkf:,7587,,,,,,,,,10/Dec/09 07:46;davsclaus;Was already fixed in 2.1 as I fixed that 9/8/2009,03/Jun/10 07:25;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
doCatch() - Without any exception given should report that as a problem,CAMEL-2269,12487703,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,09/Dec/09 05:47,03/Nov/10 05:12,14/Mar/19 02:42,09/Dec/09 07:40,2.0.0,2.1.0,,,,,,,,,2.2.0,,,camel-core,,,,0,"Code like this
{code}
                    .doTry()
                        .to(""mock:b"")
                        .throwException(new IllegalArgumentException(""Damn""))
                    .doCatch()
                        .to(""mock:catch"")
                    .end();
{code}

Should report a failure in the route as doCatch must have at least 1 exception as parameter.

It should correctly be
                    .doCatch(Exception.class)

We could also consider using Excpetion.class as default but in Java you must also provide the exception to catch and thus its more intuitive if its 100% like Java",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76572,,,Wed Dec 09 07:40:13 UTC 2009,,,,,,,0|i01njz:,7585,,,,,,,,,09/Dec/09 07:40;davsclaus;trunk: 888719.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java.lang.ClassNotFoundException: org.apache.camel.converter.jaxb.JaxbConverter not found from bundle [org.apache.camel.camel-core] (Equinox - Karaf),CAMEL-2266,12487697,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,cmoulliard,cmoulliard,08/Dec/09 12:35,03/Nov/10 05:12,14/Mar/19 02:42,29/Jan/10 04:52,2.2.0,,,,,,,,,,2.2.0,,,osgi,,,,0,"The example camel-example-etl cannot run on Apache Felix Karaf 1.2 - Equinox. the following error is generated

{code}
12:48:24,184 | DEBUG | ExtenderThread-6 | OsgiPackageScanClassResolver | sgi.OsgiPackageScanClassResolver 79 | Loading from osgi bundle using classloader: org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader@10bbf6d
12:48:24,246 | DEBUG | ExtenderThread-6 | OsgiPackageScanClassResolver | sgi.OsgiPackageScanClassResolver 59 | Using only osgi bundle classloader
12:48:24,246 | DEBUG | ExtenderThread-6 | OsgiPackageScanClassResolver | sgi.OsgiPackageScanClassResolver 79 | Loading from osgi bundle using classloader: BundleDelegatingClassLoader for [camel-core (org.apache.camel.camel-core)]
12:48:24,309 | DEBUG | ExtenderThread-6 | OsgiPackageScanClassResolver | sgi.OsgiPackageScanClassResolver 59 | Using only osgi bundle classloader
12:48:24,309 | DEBUG | ExtenderThread-6 | OsgiPackageScanClassResolver | sgi.OsgiPackageScanClassResolver 79 | Loading from osgi bundle using classloader: BundleDelegatingClassLoader for [camel-core (org.apache.camel.camel-core)]
12:48:24,371 | DEBUG | ExtenderThread-6 | OsgiPackageScanClassResolver | .DefaultPackageScanClassResolver 418 | Cannot find class 'org/apache/camel/converter/jaxb/JaxbDataFormat.class' in classloader: BundleDelegatingClassLoader for [camel-core (org.apache.camel.camel-core)]. Reason: java.lang.ClassNotFoundException: java.lang.ClassNotFoundException: org.apache.camel.converter.jaxb.JaxbConverter not found from bundle [org.apache.camel.camel-core]
	at org.springframework.osgi.util.BundleDelegatingClassLoader.findClass(BundleDelegatingClassLoader.java:103)
	at org.springframework.osgi.util.BundleDelegatingClassLoader.loadClass(BundleDelegatingClassLoader.java:156)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:252)
	at org.apache.camel.impl.DefaultPackageScanClassResolver.addIfMatching(DefaultPackageScanClassResolver.java:405)
	at org.apache.camel.osgi.OsgiPackageScanClassResolver.loadImplementationsInBundle(OsgiPackageScanClassResolver.java:121)
	at org.apache.camel.osgi.OsgiPackageScanClassResolver.findInOsgiClassLoader(OsgiPackageScanClassResolver.java:81)
	at org.apache.camel.osgi.OsgiPackageScanClassResolver.find(OsgiPackageScanClassResolver.java:60)
	at org.apache.camel.impl.DefaultPackageScanClassResolver.findAnnotated(DefaultPackageScanClassResolver.java:100)
	at org.apache.camel.osgi.OsgiAnnotationTypeConverterLoader.load(OsgiAnnotationTypeConverterLoader.java:42)
	at org.apache.camel.impl.converter.DefaultTypeConverter.checkLoaded(DefaultTypeConverter.java:379)
	at org.apache.camel.impl.converter.DefaultTypeConverter.doConvertTo(DefaultTypeConverter.java:160)
	at org.apache.camel.impl.converter.DefaultTypeConverter.mandatoryConvertTo(DefaultTypeConverter.java:120)
	at org.apache.camel.impl.converter.DefaultTypeConverter.mandatoryConvertTo(DefaultTypeConverter.java:113)
...
Caused by: java.lang.ClassNotFoundException: org.apache.camel.converter.jaxb.JaxbConverter
	at org.eclipse.osgi.internal.loader.BundleLoader.findClassInternal(BundleLoader.java:494)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:410)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:398)
	at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.loadClass(DefaultClassLoader.java:105)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:252)
	at org.eclipse.osgi.internal.loader.BundleLoader.loadClass(BundleLoader.java:326)
	at org.eclipse.osgi.framework.internal.core.BundleHost.loadClass(BundleHost.java:231)
	at org.eclipse.osgi.framework.internal.core.AbstractBundle.loadClass(AbstractBundle.java:1193)
	at org.springframework.osgi.util.BundleDelegatingClassLoader.findClass(BundleDelegatingClassLoader.java:99)

{code}

REMARKs : 
- The project works fine with FELIX
- Packages to be imported is defined in MANIFEST : org.apache.camel.converter.jaxb;version=""[2.2.0,3.0.0)"";resolution:=optional,
- Resolution when bundle is deployed is ok

{code}
[  77] [Resolved   ] [            ] [       ] [   60] camel-example-etl (2.2.0.SNAPSHOT)
[  78] [Resolved   ] [            ] [       ] [   60] JBoss Hibernate Annotations (3.4.0.GA)
                                       Hosts: 72
[  80] [Active     ] [            ] [       ] [   60] JBoss Hibernate Common Annotations (3.3.0.ga)
[  81] [Active     ] [            ] [       ] [   60] Apache ServiceMix Bundles: commons-dbcp-1.2.2 (1.2.2.3)
[  82] [Active     ] [            ] [       ] [   60] camel-jaxb (2.2.0.SNAPSHOT)
karaf@root> packages:

packages:exports    packages:imports
karaf@root> packages:imports  77
OSGi System Bundle (0): javax.xml.bind.annotation; version=""0.0.0""
OPS4J Pax Logging - API (27): org.apache.commons.logging; version=""1.1.1""
camel-core (43): org.apache.camel.model; version=""2.2.0.SNAPSHOT""
camel-core (43): org.apache.camel.util; version=""2.2.0.SNAPSHOT""
camel-core (43): org.apache.camel; version=""2.2.0.SNAPSHOT""
Spring Transaction (50): org.springframework.transaction.support; version=""2.5.6.SEC01""
camel-spring-osgi (51): org.apache.camel.spring; version=""2.2.0.SNAPSHOT""
Apache ServiceMix Specs :: JAVA PERSISTENCE API 1.4 (52): javax.persistence; version=""1.1.1""
Apache ServiceMix Bundles: openjpa-1.2.1 (62): org.apache.openjpa.enhance; version=""1.2.1""
Apache ServiceMix Bundles: openjpa-1.2.1 (62): org.apache.openjpa.util; version=""1.2.1""
Spring ORM (63): org.springframework.orm.jpa; version=""2.5.6.SEC01""
Spring ORM (63): org.springframework.orm.jpa.vendor; version=""2.5.6.SEC01""
camel-jpa (64): org.apache.camel.component.jpa; version=""2.2.0.SNAPSHOT""
wrap_mvn_hsqldb_hsqldb_1.8.0.7 (65): org.hsqldb; version=""0.0.0""
camel-juel (76): org.apache.camel.language.juel; version=""2.2.0.SNAPSHOT""
camel-jaxb (82): org.apache.camel.converter.jaxb; version=""2.2.0.SNAPSHOT""
{code}
",Apache Felix Karaf 1.2 - Equinox - Camel 2.2-SNAPSHOT,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-01-22 13:34:27.73,,,no_permission,,,,,,,,,,,,,76573,,,Fri Jan 29 04:52:20 UTC 2010,,,,,,,0|i01njb:,7582,,,,,,,,,"22/Jan/10 13:34;davsclaus;Its just some DEBUG info, not a bug etc.

Maybe we should lower it to TRACE so it wont be listed, unless people really enable TRACE logging.","29/Jan/10 04:52;njiang;Changed the DefaultPackageScanClassResolver log of java.lang.ClassNotFoundException to be trace.
trunk
http://svn.apache.org/viewvc?rev=904022&view=rev",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
javaconfig example failing to run,CAMEL-2260,12487696,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,janstey,janstey,04/Dec/09 17:44,03/Nov/10 05:12,14/Mar/19 02:42,04/Dec/09 17:45,2.1.0,,,,,,,,,,2.2.0,,,,,,,0,"Getting the following error when i run camel-example-spring-javaconfig 

[.spring.javaconfig.Main.main()] MainSupport                    INFO  Apache Camel 2.2-SNAPSHOT stopping
[INFO] ------------------------------------------------------------------------
[ERROR] BUILD ERROR
[INFO] ------------------------------------------------------------------------
[INFO] 

Class file [org/osgi/framework/BundleContext.class] not found
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76574,,,Fri Dec 04 17:45:04 UTC 2009,,,,,,,0|i01nhz:,7576,,,,,,,,,"04/Dec/09 17:45;janstey;janstey@mojo:/x1/apache/camel-trunk/examples/camel-example-spring-javaconfig$ svn ci -m ""CAMEL-2260 - put felix lib back on javaconfig example's classpath""
Sending        camel-example-spring-javaconfig/pom.xml
Transmitting file data .
Committed revision 887294.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
File component - Potential NPE in file consumer,CAMEL-2259,12486295,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,04/Dec/09 17:40,17/Jan/11 16:50,14/Mar/19 02:42,04/Dec/09 17:42,1.6.2,,,,,,,,,,1.6.3,,,camel-core,,,,0,"Only affects 1.x versions and only applies in very rare cases such as from this user forum
http://old.nabble.com/NullPointerException-in-FileComponent-td26594231.html
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76575,,,Mon Jan 17 16:50:37 UTC 2011,,,,,,,0|i01nhr:,7575,,,,,,,,,04/Dec/09 17:42;davsclaus;1.x: 887291.,17/Jan/11 16:50;davsclaus;Closing all 1.x tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jpa and camel-atom don't export package with the version,CAMEL-2257,12487691,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,04/Dec/09 13:46,03/Nov/10 05:12,14/Mar/19 02:42,04/Dec/09 15:44,1.6.3,2.1.0,,,,,,,,,1.6.3,2.2.0,,,,,,0,"Only the last package specify the version number.
{code}
camel-jpa (64): org.apache.camel.component.jpa; version=0.0.0
camel-jpa (64): org.apache.camel.processor.idempotent.jpa; version=0.0.0
camel-jpa (64): org.apache.camel.processor.interceptor.jpa; version=2.2.0.SNAPSHOT

camel-atom (124): org.apache.camel.component.atom; version=""0.0.0""
camel-atom (124): org.apache.camel.component.feed; version=""2.2.0.SNAPSHOT""
{code}
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76576,,,Fri Dec 04 15:44:05 UTC 2009,,,,,,,0|i01nhb:,7573,,,,,,,,,"04/Dec/09 15:44;njiang;trunk
http://svn.apache.org/viewvc?rev=887196&view=rev
camel-1.x 
http://svn.apache.org/viewvc?rev=887221&view=rev
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-example-etl throw error when running it.,CAMEL-2255,12487690,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,04/Dec/09 08:20,03/Nov/10 05:12,14/Mar/19 02:42,04/Dec/09 08:36,2.2.0,,,,,,,,,,2.2.0,,,,,,,0,"Here is the stack trace.
{code}
[  Camel thread 0: JpaComponent] JuelExpression                 DEBUG No
impl class for juel ExpressionFactory defined in
'META-INF/services/org/apach
e/camel/component/el'
org.apache.camel.NoFactoryAvailableException: Could not find factory class
for resource: META-INF/services/org/apache/camel/component/juel
        at
org.apache.camel.impl.DefaultFactoryFinder.doFindFactoryProperties(DefaultFactoryFinder.java:135)
        at
org.apache.camel.impl.DefaultFactoryFinder.findClass(DefaultFactoryFinder.java:77)
        at
org.apache.camel.language.juel.JuelExpression.getExpressionFactory(JuelExpression.java:81)
        at
org.apache.camel.language.juel.JuelExpression.evaluate(JuelExpression.java:70)
        at
org.apache.camel.builder.ProcessorBuilder$4.process(ProcessorBuilder.java:94)
        at
org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
        at
org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:53)
        at
org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:82)
        at
org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:93)
        at
org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
        at
org.apache.camel.processor.RedeliveryErrorHandler.processExchange(RedeliveryErrorHandler.java:223)
        at
org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:153)
        at
org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:91)
        at
org.apache.camel.processor.DefaultErrorHandler.process(DefaultErrorHandler.java:49)
        at
org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:206)
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:74)
        at
org.apache.camel.processor.UnitOfWorkProcessor.processNext(UnitOfWorkProcessor.java:54)
        at
org.apache.camel.processor.DelegateProcessor.process(DelegateProcessor.java:48)
        at
org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
        at
org.apache.camel.component.jpa.JpaConsumer.processBatch(JpaConsumer.java:133)
        at
org.apache.camel.component.jpa.JpaConsumer$1.doInJpa(JpaConsumer.java:86)
        at
org.apache.camel.component.jpa.JpaTemplateTransactionStrategy$1$1.doInJpa(JpaTemplateTransactionStrategy.java:81)
        at
org.springframework.orm.jpa.JpaTemplate.execute(JpaTemplate.java:184)
        at
org.springframework.orm.jpa.JpaTemplate.execute(JpaTemplate.java:147)
        at
org.apache.camel.component.jpa.JpaTemplateTransactionStrategy$1.doInTransaction(JpaTemplateTransactionStrategy.java:79)
        at
org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:128)
        at
org.apache.camel.component.jpa.JpaTemplateTransactionStrategy.execute(JpaTemplateTransactionStrategy.java:77)
        at
org.apache.camel.component.jpa.JpaConsumer.poll(JpaConsumer.java:70)
        at
org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:108)
        at
java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
        at
java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)
        at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)
        at
java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98)
        at
java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:181)
        at
java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:205)
        at
java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
        at
java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
        at java.lang.Thread.run(Thread.java:619)
{code}",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76577,,,Fri Dec 04 08:36:58 UTC 2009,,,,,,,0|i01ngv:,7571,,,,,,,,,04/Dec/09 08:36;njiang;http://svn.apache.org/viewvc?rev=887107&view=rev,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CXFBean should not call the BusFactory.getDefaultBus() ,CAMEL-2251,12487681,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,03/Dec/09 09:36,03/Nov/10 05:12,14/Mar/19 02:42,03/Dec/09 10:00,2.0.0,2.0-M2,2.0-M3,,,,,,,,2.2.0,,,camel-cxf,,,,0,"The defaultBus could be polluted in the container like ServceMix.
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76578,,,Thu Dec 03 10:00:23 UTC 2009,,,,,,,0|i01nfz:,7567,,,,,,,,,03/Dec/09 10:00;njiang;http://svn.apache.org/viewvc?rev=886726&view=rev,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
InterceptSendToEndpoint - Should stop sending to intercepted endpoint in case of Exchange failure,CAMEL-2250,12487680,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,03/Dec/09 07:12,03/Nov/10 05:12,14/Mar/19 02:42,03/Dec/09 07:44,2.0.0,2.1.0,,,,,,,,,2.2.0,,,camel-core,,,,0,We had a similar issue recently with the routing slip. The same goes for intercept send to endpoint.,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76579,,,Thu Dec 03 07:44:51 UTC 2009,,,,,,,0|i01nfr:,7566,,,,,,,,,03/Dec/09 07:44;davsclaus;trunk: 886693.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wrong handling of useMessageIDAsCorrelationID,CAMEL-2249,12486934,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,chris@die-schneider.net,chris@die-schneider.net,02/Dec/09 22:54,08/Jan/10 15:24,14/Mar/19 02:42,08/Jan/10 10:33,2.0.0,,,,,,,,,,2.2.0,,,camel-jms,,,,0,"Camel jms seems to contain two bugs in correlation id handling.

The first shows when you have a sender that has UseMessageIDAsCorrelationID=""false"" and a server that has UseMessageIDAsCorrelationID=""true"". If you send a message with correlationId=""a"" then the response message will contain correlationId=""<request message id>"". Even if this could be a valid behaviour as you wanted UseMessageIDAsCorrelationID=""true"" I don´t think it makes sense as the sender will not be able to correlate the message. So for this case I propose to only set the correlation id to the request message id on the server if the correlation id of the request was not set.

The second bug seems to hide the first bug. Perhaps someone found a quick (and wrong way to make the tests work). It shows when you set UseMessageIDAsCorrelationID=""true"" on both client and server. If you send a message with correlation id = ""a"" the client sends it out with this correlation id. The server then sets the correlation id to the request message id (first bug). Then on the client the reply is received. After that the correlation id is set back to ""a"" on the client. So the tests think all is well. This part of the code should be removed.

I have marked both problems in the code with FIXME markers in my patch. I can also provide a patch with the solution but first I wanted to only show the problem and provide a failing test. 

Hope my explanations were not to confused ;-)",,,,,,,,,,,,,,,,,08/Jan/10 08:06;chris@die-schneider.net;camel-jms-2010-01-08.patch;https://issues.apache.org/jira/secure/attachment/12463052/camel-jms-2010-01-08.patch,02/Dec/09 22:55;chris@die-schneider.net;camel-jms-correlation.patch;https://issues.apache.org/jira/secure/attachment/12463048/camel-jms-correlation.patch,,,,2.0,,,,,,,,,,,,,,,,,,,2009-12-03 01:24:57.167,,,no_permission,,,,,,,,,,,,,76580,,,Fri Jan 08 15:23:49 UTC 2010,,,Patch Available,,,,0|i01nfj:,7565,,,,,,,,,02/Dec/09 22:55;chris@die-schneider.net;Patch that shows where the problems are and that contains a currently failing unit test. ,"03/Dec/09 01:24;maratb;Hi Christian,

I generally agree that JMS Message correlationID value should supersede the messageID value. Realize though that both configuration assertions and the statement I just made in the previous sentence are all out of band agreements. So one can argue either way.

However, let me give you an example when this will break down. Certain brokers, namely IBM MQ will modify your correlationID value using their proprietary encoding. So what you're going to get back in the reply message will be very different from what you set on the request message on the producer side.

So here the scenario: 

produce  ->       1     -> consume  - > produce ->      2       -> consume
---------------   ActiveMQ ------------------------------    IBM MQ
consume <-      4    <-  produce    <- consume <-     3     <- produce

1. correlationID = C,  messageID = M
2. correlationID = C!,   messageID = M1
3. correlationID = M1,   messageID = M2
4. correlationID = C

C! - is IBM mangled C value

I'd check with Suemas and ask him to review your changes and run against the tests suites as I suspect if your changes were to be applied certain tests that depend on Camel will fail.

Cheers,
Marat","03/Dec/09 07:27;chris@die-schneider.net;I was just browsing the net for some more info. One page is from oracle:
http://download.oracle.com/docs/cd/E13171_01/alsb/docs25/interopjms/MsgIDPatternforJMS.html

There they describe how IBM MQ uses the correlation id. So if the useMessageIdAsCorrelationId was meant in this way it could be correct. Still I would rather expect the client to not set a correaltion id if it wants this pattern. 

The following thread is also interesting: http://www.theserverside.com/discussions/thread.tss?thread_id=44779
It says that the message id of a message can change over it´s lifetime. So if I understand this correctly it could mean that setting the correlation id to the message id could fail as this id could be different to the client´s message id.

  ","06/Jan/10 00:18;chris@die-schneider.net;Are there any news about this issue? We still have the incompatibility between CXF / Camel and pure CXF. I can help some more by providing a complete patch with a solution. It would help me though if we could discuss how the ""useMessageIdAsCorrelationId"" feature should behave before I do the coding.

Especially I need to know if the correlation id of the incoming message should be used as correlation id in the reply instead of the messageId if it is set.
","06/Jan/10 00:31;david@davidkarlsen.com;How about making it configurable, but with Collection by MessageID as default.
(And act according to the ""spec"" in oracle link).
This is the pattern I've seen most widespread and how I used it for JMS/MQ/zOS integration.

""Correlation by MessageID is commonly used by many IBM MQ applications as well as JMS applications and is the standard method to correlate request and response.""","06/Jan/10 09:42;chris@die-schneider.net;I also like using the messageId for correaltion. The question is what to do when the sender already has set a correlation id. Currently camel will discard the correlation id and still set the message id as correaltion id of the response. I think this is wrong as the sender expresses that he expects to get the correlation id back that he set on the request message.  

So I think we can do one of two things to correct this:
The first way is to always use the correlation id of the request if it was set.
The second way could be to add a config option that controls if the above behaviour should be actived.

Which solution should be done? Are there other possible solutions?
","06/Jan/10 11:42;davsclaus;SI is also discussing a similar issue at their forum
http://forum.springsource.org/showthread.php?t=82368","06/Jan/10 12:03;david@davidkarlsen.com;I'd say make it configurable - it shouldn't be a lot of work to support both ""protocols"".
Log warnings if correlationId is set when not expected etc.","07/Jan/10 11:33;davsclaus;Yeah add an option to control the desired behavior.

And remember we need unit tests to cover this as JMS is always tricky","08/Jan/10 08:06;chris@die-schneider.net;Added a fix and test. If useMessageId as correlationId is true then the correlationId is still forced to be the messageId. The difference now is that when useMessageIdasCorrelationId is false and the incoming correlationid is not set then the correlationId is set to the messageId (as a fallback).
","08/Jan/10 10:33;davsclaus;trunk: 897159.

Thanks for the patch Christian.","08/Jan/10 15:20;chris@die-schneider.net;Did you have the chance to look into the code block I removed from the JmsProducer

// FIXME remove: I think this does not make sense
+//                if (correlationId != null) {
+//                    message.setJMSCorrelationID(correlationId);
+//                    exchange.getOut().setHeader(""JMSCorrelationID"", correlationId);
+//                }

It looked wrong to me to set the incoming correlation id to something different but perhaps it has some reason I did not understand.",08/Jan/10 15:23;chris@die-schneider.net;I just looked into the code you committed and the comment explained what the code block was good for. So I guess my question is answered.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Routing slip does not stop when Exchange is failed,CAMEL-2245,12486614,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,janstey,janstey,01/Dec/09 19:11,03/Nov/10 05:12,14/Mar/19 02:42,01/Dec/09 19:20,1.6.2,2.0.0,,,,,,,,,1.6.3,2.2.0,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-12-01 20:00:37.745,,,no_permission,,,,,,,,,,,,,76581,,,Wed Dec 02 08:53:37 UTC 2009,,,,,,,0|i01nen:,7561,,,,,,,,,"01/Dec/09 19:20;janstey;janstey@mojo:/x1/apache/camel-trunk/camel-core$ svn ci -m ""CAMEL-2245 - stop routing slip when exchange is failed""
Sending        camel-core/src/main/java/org/apache/camel/processor/RoutingSlip.java
Adding         camel-core/src/test/java/org/apache/camel/processor/routingslip/RoutingSlipWithErrorHandlerTest.java
Sending        camel-core/src/test/java/org/apache/camel/processor/routingslip/RoutingSlipWithExceptionTest.java
Transmitting file data ...
Committed revision 885876.
","01/Dec/09 20:00;davsclaus;Yeah I guess it makes sense for the routing slip to always stop as it does not aggregate, and its essentially a pipes and filters.

Just wanted to inform that otherwise adding the option {{stopOnException}} should have been preferred such as with splitter / multicast etc.
As they are capable of aggregating where you can deal with the exception.","01/Dec/09 20:04;janstey;Yep, makes sense. Thats why I added in stopping logic similar to the pipeline processor.",02/Dec/09 08:22;davsclaus;I think we should backport this to 1.x,02/Dec/09 08:53;davsclaus;Merged to 1.x: 886075.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fixed the -Psetup.eclipse issue,CAMEL-2243,12486569,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,01/Dec/09 09:25,03/Nov/10 05:12,14/Mar/19 02:42,03/Dec/09 08:43,,,,,,,,,,,1.6.3,2.2.0,,,,,,0,"Here is the mail thread which discuss about it.
http://old.nabble.com/Problem-with--Psetup.eclipse-td26477263.html#a26477263",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76582,,,Thu Dec 03 08:41:51 UTC 2009,,,,,,,0|i01ne7:,7559,,,,,,,,,"03/Dec/09 08:41;njiang;trunk
http://svn.apache.org/viewvc?rev=886080&view=rev
camel 1.x branch
http://svn.apache.org/viewvc?rev=886086&view=rev",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JettyHttpProducer - Sending sync using waitForDone should cater for connection failures,CAMEL-2238,12486719,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,30/Nov/09 11:15,03/Jun/10 07:25,14/Mar/19 02:42,30/Nov/09 11:27,2.1.0,,,,,,,,,,2.1.0,,,camel-jetty,,,,0,"Even though we follow the Jetty documentation it will make the jetty http producer appear as blocked as {{waitForDone()}} will block when connection failure occurred.

We need to add logic which polls the status instead and thus can detect the problem.

The async producer *done not* have this issue by which is likely the main use case for using Jetty as a client",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76584,,,Thu Jun 03 07:25:48 UTC 2010,,,,,,,0|i01nd3:,7554,,,,,,,,,30/Nov/09 11:27;davsclaus;trunk: 885380.,03/Jun/10 07:25;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Improper ordering of MINA filters,CAMEL-2237,12487677,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,mrt1nz,rnd,rnd,30/Nov/09 09:46,03/Nov/10 05:12,14/Mar/19 02:42,01/Dec/09 14:31,2.1.0,,,,,,,,,,2.2.0,,,camel-mina,,,,0,"When we want to use SSL on the consumer side, MINA's SSLFilter must be inserted as the very first filter into the chain (or, at least, as the second one after an {{ExecutorFilter}}), but it is currently not possible, because {{MinaComponent#createSocketEndpoint()}} always inserts a {{ProtocolCodecFilter}} at the very beginning by calling {{configureCodecFactory()}}.

A proposed workaround is to introduce an additional URL parameter _noDefaultCodec_ which prohibits the installation of the default protocol codec filter. The protocol codec must be then configured manually, e.g. using Spring:

{quote}
<bean id=""sslFilter"" class=""org.apache.mina.filter.SSLFilter"">
    <constructor-arg>
        <bean class=""javax.net.ssl.SSLContext"" factory-method=""getDefault"" />
    </constructor-arg>
</bean>

<bean id=""codecFilter"" class=""org.apache.mina.filter.codec.ProtocolCodecFilter"">
    <constructor-arg ref=""hl7codec"" />
</bean>

<bean id=""hl7codec"" class=""org.apache.camel.component.hl7.HL7MLLPCodec"" />

<bean id=""minaFilters"" class=""java.util.ArrayList"">
    <constructor-arg>
        <list value-type=""org.apache.mina.common.IoFilter"">
             <ref bean=""sslFilter"" /> 
             <ref bean=""codecFilter"" /> 
        </list>
    </constructor-arg>
</bean>
{quote}

After that, the consumer endpoint URL can look like
{{from(""mina:tcp://0.0.0.0:8888?sync=true&lazySessionCreation=true&noDefaultCodec=true&filters=#minaFilters"")}}.

I am not sure whether this approach is optimal, therefore I call it ""workaround"" and not ""solution"".  The corresponding patch is attached.
",,,,,,,,,,,,,,,,,30/Nov/09 09:47;rnd;camel-mina-20091130.patch;https://issues.apache.org/jira/secure/attachment/12462817/camel-mina-20091130.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2009-11-30 12:41:34.351,,,no_permission,,,,,,,,,,,,,76585,,,Tue Dec 01 20:16:10 UTC 2009,,,Patch Available,,,,0|i01ncv:,7553,,,,,,,,,30/Nov/09 12:41;mrt1nz;Thanks for the patch Dmytro! I'll apply it (with minor changes) as soon as Camel 2.1.0 is out. ,"30/Nov/09 12:47;davsclaus;Maybe we can do as Jetty where you can specify a comma separated list of bean ids (ordered) for its security handlers.
That kinda avoids some of the ugly spring list constructs. 

And/or we can offer both combinations.

And why do you state its the _beginning_. The code for me looks like its inserted last
{code}
config.getFilterChain().addLast(""codec"", new ProtocolCodecFilter(codecFactory));
{code}

But I guess then others is added as {{addLast}} as well and then it end up as _first_, is this the case?","30/Nov/09 13:18;mrt1nz;Right, camel-mina always uses the addLast() method on the filter chain.
Regarding the comma-separated list of bean ids, I'll take a look and try to add support for it.","01/Dec/09 09:33;davsclaus;I wonder if we should invert the {{noDefaultCodec}} option as its kinda confusing to say true to something that is no.

Maybe it should be {{useDefaultCodec=false}} and let that option be default *true*.",01/Dec/09 09:56;mrt1nz;Agreed.,01/Dec/09 10:23;mrt1nz;Maybe instead of using {{useDefaultCodec}} (with default value true) we should use {{allowDefaultCodec}} (with default value true) because a default codec is only installed if the {{codec}} parameter is {{null}} and the {{textline}} parameter is {{false}}. With {{useDefaultCodec}} a user might expect that the default codec is enforced (i.e. always used) which is not the case. An {{allowDefaultCodec}} parameter expresses more closely what the component is actually doing.,01/Dec/09 10:28;davsclaus;+1 to allow ,01/Dec/09 14:32;mrt1nz;Patch applied with minor changes and thanks to Dmytro.,01/Dec/09 20:10;davsclaus;Martin do you mind updating the Mina wiki documentation with this new option?,"01/Dec/09 20:16;mrt1nz;Sure, I only got distracted with some other urgent things. I'll update the camel-mina Wiki page tomorrow.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Mail component sends to the wrong address,CAMEL-2232,12486778,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,yuri,yuri,26/Nov/09 17:52,03/Jun/10 07:25,14/Mar/19 02:42,27/Nov/09 06:46,2.0.0,,,,,,,,,,1.6.3,2.1.0,,camel-mail,,,,0,"The camel mail page states that the issues with the Mail Component are related to geronimo.  However there is a fundamental problem when you have more than 1 endpoint defined.  We define multiple endpoints so we can place different To addresses

        <endpoint id=""oneEmail"" uri=""smtp://MAILSERVER?To=${one.email}&amp;From=blah@blah.com"" />
        <endpoint id=""twoEmail"" uri=""smtp://MAILSERVER?To=${two.email}&amp;From=blah@blah.com"" />
        <endpoint id=""errorEmail"" uri=""smtp://MAILSERVER?To=${error.email}&amp;From=blah@blah.com"" />


            <to uri=""bean:errorFormatter?method=formatErrorEmail"" />
            <to ref=""errorEmail"" />

It is not possible to configure the uri in <to /> since it does not support spring properties.  

The bug is that MailConfiguration.copy() does not create a new Map for recipients, so when the second endpoint is created it overwrites the first. there are other fields that may be affected e.g. javaMailProperties, additionalJavaMailProperties, javaMailSender

http://camel.apache.org/mail.html
If you have trouble with sending mails that, for instance, don't contain any subject, have wrong recipients, or manifest other unforeseen errors, it could be due to having geronimo-javamail_1.4_spec-1.3.jar in your classpath. This was the culprit in a long bug hunt reported in CAMEL-869.

This should be changed as wrong recipients are more likely related to camel bugs, than geronimo issues.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-11-27 05:54:16.242,,,no_permission,,,,,,,,,,,,,76586,,,Thu Jun 03 07:25:47 UTC 2010,,,,,,,0|i01nbr:,7548,,,,,,,,,27/Nov/09 05:54;davsclaus;geronimo is still causing many issues - especially for users on SMX where it was the default mail provider. After changing to SUN Mail it just works.,27/Nov/09 06:31;davsclaus;trunk: 884750.,"27/Nov/09 06:46;davsclaus;1.x: 884755.

Thanks for reporting Yuri. I have fixed it on both 1.x and 2.x now.
Also added it to the knows problem on the 2.0.0 release notes.

Please test it on your end.",03/Jun/10 07:25;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Exception during mail connection requires folder to be reset,CAMEL-2231,12486413,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,huntc@internode.on.net,huntc@internode.on.net,26/Nov/09 11:13,03/Jun/10 07:25,14/Mar/19 02:42,26/Nov/09 11:50,1.6.2,2.0.0,,,,,,,,,1.6.3,2.1.0,,camel-mail,,,,0,"I think that this problem may still be around with 2.1-SNAPSHOT:

http://fusesource.com/forums/thread.jspa?threadID=746&tstart=0

I noticed that I had a pop3 server outage and then subsequently had a similar problem i.e. IllegalStateException, folder not open.

Here's when the outage started.

{code}
2009-11-26 11:57:55,316 [: MailComponent] WARN  ultPollingConsumerPollStrategy - Consumer Consumer[pop3://...] could not poll endpoint: pop3://... caused by: Connect failed
javax.mail.MessagingException: Connect failed;
  nested exception is:
        java.net.NoRouteToHostException: No route to host
        at com.sun.mail.pop3.POP3Store.protocolConnect(POP3Store.java:161)
        at javax.mail.Service.connect(Service.java:288)
        at org.apache.camel.component.mail.MailConsumer.ensureIsConnected(MailConsumer.java:241)
        at org.apache.camel.component.mail.MailConsumer.poll(MailConsumer.java:79)
        at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:108)
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
        at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)
        at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:181)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:205)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
        at java.lang.Thread.run(Thread.java:619)
Caused by: java.net.NoRouteToHostException: No route to host
        at java.net.PlainSocketImpl.socketConnect(Native Method)
        at java.net.PlainSocketImpl.doConnect(PlainSocketImpl.java:333)
        at java.net.PlainSocketImpl.connectToAddress(PlainSocketImpl.java:195)
        at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:182)
        at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:366)
        at java.net.Socket.connect(Socket.java:519)
        at java.net.Socket.connect(Socket.java:469)
        at com.sun.mail.util.SocketFetcher.createSocket(SocketFetcher.java:233)
        at com.sun.mail.util.SocketFetcher.getSocket(SocketFetcher.java:189)
        at com.sun.mail.pop3.Protocol.<init>(Protocol.java:94)
        at com.sun.mail.pop3.POP3Store.getPort(POP3Store.java:214)
        at com.sun.mail.pop3.POP3Store.protocolConnect(POP3Store.java:157)
        ... 13 more
{code}

This went on for about a minute or so and there was no more in the log file until several hours later - in fact when an email appeared in the INBOX. I know this because my personal email account was copied on the email and so I have the timestamp.

I then get the following message every time I poll the server and have to re-start my application to get over it:

{code}
2009-11-26 19:19:57,293 [: MailComponent] ERROR MailConsumer                   - Folder not open
java.lang.IllegalStateException: Folder not open
        at javax.mail.Folder.getMessages(Folder.java:938)
        at javax.mail.Folder.search(Folder.java:1226)
        at org.apache.camel.component.mail.MailConsumer.poll(MailConsumer.java:107)
        at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:108)
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
        at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)
        at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:181)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:205)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
        at java.lang.Thread.run(Thread.java:619)
{code}

I took a look at MailConsumer.java and note the following code:

{code}
236	        if (!connected) {
237	            if (LOG.isDebugEnabled()) {
238	                LOG.debug(""Connecting to MailStore: "" + endpoint.getConfiguration().getMailStoreLogInformation());
239	            }
240	            store = sender.getSession().getStore(config.getProtocol());
241	            store.connect(config.getHost(), config.getPort(), config.getUsername(), config.getPassword());
242	        }
{code}

If you're not connected then how is it possible to have a folder? Following this logic my recommendation is to insert the following at line 242:

{code}
241	            store.connect(config.getHost(), config.getPort(), config.getUsername(), config.getPassword());
                    folder = null;
242	        }
{code}",2.1-SNAPSHOT,,7200,7200,,0%,7200,7200,,,,,,CAMEL-1501,,,26/Nov/09 11:48;davsclaus;camel-mail-2.1-SNAPSHOT.jar;https://issues.apache.org/jira/secure/attachment/12462899/camel-mail-2.1-SNAPSHOT.jar,,,,,1.0,,,,,,,,,,,,,,,,,,,2009-11-26 11:19:51.506,,,no_permission,,,,,,,,,,,,,76587,,,Thu Jun 03 07:25:46 UTC 2010,,,,,,,0|i01nbj:,7547,,,,,,,,,"26/Nov/09 11:19;davsclaus;Yeah good idea, the same as I concluded as well.

Christopher can you try with updated code from trunk? And report your findings.

trunk: 884525.

",26/Nov/09 11:27;davsclaus;Merged to 1.x: 884527.,26/Nov/09 11:29;huntc@internode.on.net;Gee that was a quick fix! Will this get automatically included in the next site build? I can rebuild my project in about 10 hours (late at night now). Should it not pick up your mod in the latest 2.1-snapshot?,"26/Nov/09 11:47;davsclaus;Yeah I think i had the fix ready before you created the ticket :)

I will attach my local build .jar you can use instead of waiting for Hudson to build a new SNAPSHOT at Apache repo","26/Nov/09 11:50;davsclaus;You can keep an eye on hudson if it has the fix in the deploy
http://hudson.zones.apache.org/hudson/job/Camel/changes

It deploys a new SNAPSHOT for every successful build",26/Nov/09 11:50;davsclaus;I will mark this as resolved for now in case Hadrian decides to build a RC of Camel as we want it to be released ASAP as SMX 4.1 is waiting for it as well.,30/Nov/09 02:15;huntc@internode.on.net;Looks as though your patch fixed things up. I had a 2.1-SNAPSHOT service running over the weekend. There was an outage with the POP service which showed itself in the log file. I was then able to send an email subsequently (a day or so later) and all was well.,03/Jun/10 07:25;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Exceptions occurred when deploying ""camel-example-spring-javaconfig"" into FUSE ESB Server.",CAMEL-2228,12486324,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,spindipr,spindipr,25/Nov/09 12:39,03/Jun/10 07:25,14/Mar/19 02:42,26/Nov/09 11:25,,,,,,,,,,,2.1.0,,,examples,,,,0,"1. Installed apache-camel 2.0.0-psc-01-00M2.
2. Applied the attached patch on the samples.
3. Compile the sample (camel-example-spring-javaconfig) using ""mvn compile"" command
4. Install the camel sample into repository using ""mvn install"" command
5. Started the servicemix server
6. Installed below bundles into servicemix
	osgi:install mvn:org.apache.activemq/activemq-camel/5.3.1.0M1-fuse
	features:install camel-spring-javaconfig
 	osgi:install mvn:org.apache.camel/camel-example-spring-javaconfig/2.0.0-psc-01-00M2
7. Start the bundles and observed that below exception is shown in the karaf console.

*Stack Trace*
16:52:55,593 | INFO  | l Console Thread | ultOsgiApplicationContextCreator | ultOsgiApplicationContextCreator   67 | Discovered configurations {osgibundle:/META-INF/spring/*.xml} in bundle [camel-example-spring-javaconfig (org.apache.camel.camel-example-spring-javaconfig)]
16:52:55,593 | INFO  | xtenderThread-59 | OsgiBundleXmlApplicationContext  | pport.AbstractApplicationContext  411 | Refreshing org.springframework.osgi.context.support.OsgiBundleXmlApplicationContext@40b187: display name [OsgiBundleXmlApplicationContext(bundle=org.apache.camel.camel-example-spring-javaconfig, config=osgibundle:/META-INF/spring/*.xml)]; startup date [Wed Nov 25 16:52:55 IST 2009]; root of context hierarchy
16:52:55,593 | INFO  | xtenderThread-59 | OsgiBundleXmlApplicationContext  | ractOsgiBundleApplicationContext  359 | Unpublishing application context OSGi service for bundle camel-example-spring-javaconfig (org.apache.camel.camel-example-spring-javaconfig)
16:52:55,593 | INFO  | xtenderThread-59 | XmlBeanDefinitionReader          | tory.xml.XmlBeanDefinitionReader  323 | Loading XML bean definitions from URL [bundleentry://192.fwk19147537/META-INF/spring/camel-context.xml]
16:52:55,593 | INFO  | xtenderThread-59 | OsgiBundleXmlApplicationContext  | pport.AbstractApplicationContext  426 | Bean factory for application context [org.springframework.osgi.context.support.OsgiBundleXmlApplicationContext@40b187]: org.springframework.beans.factory.support.DefaultListableBeanFactory@1262c96
16:52:55,608 | ERROR | xtenderThread-59 | ContextLoaderListener            | BundleApplicationContextListener   50 | Application context refresh failed (OsgiBundleXmlApplicationContext(bundle=org.apache.camel.camel-example-spring-javaconfig, config=osgibundle:/META-INF/spring/*.xml))
java.lang.RuntimeException: java.io.FileNotFoundException: Class file [org/springframework/config/java/support/ConfigurationSupport.class] not found
	at org.springframework.config.java.Util.getClassAsStream(Util.java:158)
	at org.springframework.config.java.internal.parsing.asm.AsmUtils.newClassReader(AsmUtils.java:97)
	at org.springframework.config.java.internal.parsing.asm.ConfigurationClassVisitor.visitSuperType(ConfigurationClassVisitor.java:98)
	at org.springframework.config.java.internal.parsing.asm.ConfigurationClassVisitor.visit(ConfigurationClassVisitor.java:81)
	at org.springframework.asm.ClassReader.accept(Unknown Source)
	at org.springframework.asm.ClassReader.accept(Unknown Source)
	at org.springframework.config.java.internal.parsing.asm.ConfigurationClassVisitor.visitSuperType(ConfigurationClassVisitor.java:99)
	at org.springframework.config.java.internal.parsing.asm.ConfigurationClassVisitor.visit(ConfigurationClassVisitor.java:81)
	at org.springframework.asm.ClassReader.accept(Unknown Source)
	at org.springframework.asm.ClassReader.accept(Unknown Source)
	at org.springframework.config.java.internal.parsing.asm.ConfigurationClassVisitor.visitSuperType(ConfigurationClassVisitor.java:99)
	at org.springframework.config.java.internal.parsing.asm.ConfigurationClassVisitor.visit(ConfigurationClassVisitor.java:81)
	at org.springframework.asm.ClassReader.accept(Unknown Source)
	at org.springframework.asm.ClassReader.accept(Unknown Source)
	at org.springframework.config.java.internal.parsing.asm.AsmConfigurationParser.parse(AsmConfigurationParser.java:84)
	at org.springframework.config.java.internal.parsing.asm.AsmConfigurationParser.parse(AsmConfigurationParser.java:77)
	at org.springframework.config.java.internal.factory.support.AsmJavaConfigBeanDefinitionReader.loadBeanDefinitions(AsmJavaConfigBeanDefinitionReader.java:73)
	at org.springframework.config.java.internal.process.InternalConfigurationPostProcessor.parseAnyConfigurationClasses(InternalConfigurationPostProcessor.java:86)
	at org.springframework.config.java.internal.process.InternalConfigurationPostProcessor.postProcessBeanFactory(InternalConfigurationPostProcessor.java:64)
	at org.springframework.config.java.process.ConfigurationPostProcessor.postProcessBeanFactory(ConfigurationPostProcessor.java:50)
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.invokeBeanFactoryPostProcessors(AbstractDelegatedExecutionApplicationContext.java:479)
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.invokeBeanFactoryPostProcessors(AbstractDelegatedExecutionApplicationContext.java:459)
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.invokeBeanFactoryPostProcessors(AbstractDelegatedExecutionApplicationContext.java:395)
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext$3.run(AbstractDelegatedExecutionApplicationContext.java:281)
	at org.springframework.osgi.util.internal.PrivilegedUtils.executeWithCustomTCCL(PrivilegedUtils.java:85)
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.startRefresh(AbstractDelegatedExecutionApplicationContext.java:247)
	at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor.stageOne(DependencyWaiterApplicationContextExecutor.java:222)
	at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor.refresh(DependencyWaiterApplicationContextExecutor.java:175)
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.refresh(AbstractDelegatedExecutionApplicationContext.java:175)
	at org.springframework.osgi.extender.internal.activator.ContextLoaderListener$2.run(ContextLoaderListener.java:718)
	at java.lang.Thread.run(Thread.java:619)",,,,,,,,,,,,,,,,,25/Nov/09 12:40;spindipr;MRsamples.patch;https://issues.apache.org/jira/secure/attachment/12462898/MRsamples.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2009-11-26 11:25:52.14,,,no_permission,,,,,,,,,,,,,76588,,,Thu Jun 03 07:25:45 UTC 2010,,,Patch Available,,,,0|i01nav:,7544,,,,,,,,,"26/Nov/09 11:25;davsclaus;trunk:
http://svn.apache.org/viewvc?rev=884462&view=rev

Willem remember to mark your tickets as fixed ASAP so Hadrian do *not* delay the 2.1 release because he things a ticket for 2.1 is not resolved.",03/Jun/10 07:25;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Mock component - expectedBodiesReceived(List) does not work as expected,CAMEL-2227,12486782,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,25/Nov/09 10:22,03/Jun/10 07:25,14/Mar/19 02:42,25/Nov/09 11:28,2.0.0,,,,,,,,,,2.1.0,,,camel-core,,,,0,Java chooses the varargs methods always instead of the List method.,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76589,,,Thu Jun 03 07:25:45 UTC 2010,,,,,,,0|i01nan:,7543,,,,,,,,,"25/Nov/09 10:23;davsclaus;See nabble
http://old.nabble.com/Bug-in-expectedBodiesReceived%28List%3C%3E%29-to26509915.html",25/Nov/09 11:28;davsclaus;trunk: 884056.,03/Jun/10 07:25;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Response received is of type java.lang.String instead of javax.ws.rs.core.Response,CAMEL-2224,12486015,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,cmoulliard,cmoulliard,24/Nov/09 16:43,25/Nov/09 16:47,14/Mar/19 02:42,25/Nov/09 16:47,2.1.0,,,,,,,,,,,,,camel-cxf,,,,0,"{code}
D:\Soft\opensource\curl-7.19.5-win32-nossl>curl -i -H ""Accept: application/xml"" http://localhost:8080/cxf/camel-rest-example/reportservice/incidents/1
11/
HTTP/1.1 500 Internal Server Error
Content-Type: text/xml; charset=iso-8859-1
Content-Length: 256
Server: Jetty(6.1.x)

<ns1:XMLFault xmlns:ns1=""http://cxf.apache.org/bindings/xformat""><ns1:faultstring xmlns:ns1=""http://cxf.apache.org/bindings/xformat"">java.lang.ClassCa
stException: java.lang.String cannot be cast to javax.ws.rs.core.Response</ns1:faultstring></ns1:XMLFault>
{code}

See the code in attachment

Here is the config of apache karaf feature 

{code}
#
# Comma separated list of features repositories to register by default
#
featuresRepositories=mvn:org.apache.felix.karaf/apache-felix-karaf/1.0.0/xml/features,mvn:org.apache.camel.karaf/features/2.1-SNAPSHOT/xml/features,jar:mvn:org.apache.camel.example/reportincident.restful.features/1.0-SNAPSHOT!/reportincident.features-1.0-SNAPSHOT-features.xml


#
# Comma separated list of features to install at startup
# 

featuresBoot=spring,spring-dm,camel,http-reportingincident,spring-web,camel-cxf,reportincident
{code}

camel + code is present in the zip. They are three bundles 
- one generating the feature file of the project
- another containing the REST service
- and the last camel route

here is the log on camel

{code}
17:34:22,155 | INFO  | xtenderThread-37 | ContextLoaderListener            | BundleApplicationContextListener   45 | Application context successfully refreshed (OsgiBundleXmlApplicationContext(bundle=org.apache.camel.example.reportincident.restful.routing, config=osgibundle:/META-INF/spring/*.xml))
17:34:27,701 | INFO  | 14218728@qtp1-1  | Tracer                           | rg.apache.camel.processor.Logger   88 | 970d2b95-93d9-4319-a5fd-4906ec9a9a9a >>> from(/camel-rest-example/) --> setHeader[CamelCxfRsUsingHttpAPI], Pattern:InOut, Headers:{CamelCxfRsOperationResourceInfoStack=[org.apache.cxf.jaxrs.model.MethodInvocationInfo@82fd0f], 
CamelHttpMethod=GET, CamelHttpPath=/camel-rest-example/reportservice/incidents/111/, CamelCxfRsResponseClass=class org.apache.camel.example.reportincident.restful.Incident, operationName=getIncident, 
CamelHttpUri=/cxf/camel-rest-example/reportservice/incidents/111/, CamelAcceptContentType=application/xml, CamelHttpCharacterEncoding=ISO-8859-1}, BodyType:Object[], Body:[Ljava.lang.Object;@16237fd
17:34:27,701 | INFO  | 14218728@qtp1-1  | Tracer                           | rg.apache.camel.processor.Logger   88 | 970d2b95-93d9-4319-a5fd-4906ec9a9a9a >>> setHeader[CamelCxfRsUsingHttpAPI] --> log://org.apache.camel.example.reportIncident?level=INFO, Pattern:InOut, Headers:{CamelHttpPath=/camel-rest-example/reportservice/incidents/111/, CamelHttpUri=/cxf/camel-rest-example/reportservice/incidents/111/, 
CamelCxfRsOperationResourceInfoStack=[org.apache.cxf.jaxrs.model.MethodInvocationInfo@82fd0f], CamelCxfRsUsingHttpAPI=True, CamelCxfRsResponseClass=class org.apache.camel.example.reportincident.restful.Incident, 
CamelHttpCharacterEncoding=ISO-8859-1, CamelHttpMethod=GET, operationName=getIncident, CamelAcceptContentType=application/xml}, BodyType:Object[], Body:[Ljava.lang.Object;@16237fd
17:34:27,717 | INFO  | 14218728@qtp1-1  | reportIncident                   | rg.apache.camel.processor.Logger   88 | Exchange[BodyType:Object[], Body:[Ljava.lang.Object;@16237fd]
17:34:27,717 | WARN  | 14218728@qtp1-1  | PhaseInterceptorChain            | ache.cxf.common.logging.LogUtils  361 | Interceptor has thrown exception, unwinding now
java.lang.ClassCastException: java.lang.String cannot be cast to javax.ws.rs.core.Response
	at org.apache.camel.example.reportincident.restful.OverrideResponseHandler.handleResponse(OverrideResponseHandler.java:22)
	at org.apache.cxf.jaxrs.interceptor.JAXRSOutInterceptor.processResponse(JAXRSOutInterceptor.java:131)
	at org.apache.cxf.jaxrs.interceptor.JAXRSOutInterceptor.handleMessage(JAXRSOutInterceptor.java:77)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
	at org.apache.cxf.interceptor.OutgoingChainInterceptor.handleMessage(OutgoingChainInterceptor.java:76)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
	at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:109)
	at org.apache.cxf.transport.http_osgi.OsgiDestination.doMessage(OsgiDestination.java:79)
	at org.apache.cxf.transport.http_osgi.OsgiServletController.invokeDestination(OsgiServletController.java:324)
	at org.apache.cxf.transport.http_osgi.OsgiServletController.invoke(OsgiServletController.java:112)
	at org.apache.cxf.transport.http_osgi.OsgiServlet.invoke(OsgiServlet.java:53)
	at org.apache.cxf.transport.http_osgi.SpringOsgiServlet.invoke(SpringOsgiServlet.java:48)
	at org.apache.cxf.transport.servlet.AbstractHTTPServlet.handleRequest(AbstractHTTPServlet.java:179)
	at org.apache.cxf.transport.servlet.AbstractHTTPServlet.doGet(AbstractHTTPServlet.java:108)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:693)
	at org.apache.cxf.transport.servlet.AbstractHTTPServlet.service(AbstractHTTPServlet.java:159)
	at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:502)
	at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:363)
	at org.ops4j.pax.web.service.jetty.internal.HttpServiceServletHandler.handle(HttpServiceServletHandler.java:64)
	at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181)
	at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:766)
	at org.ops4j.pax.web.service.jetty.internal.HttpServiceContext.handle(HttpServiceContext.java:111)
	at org.ops4j.pax.web.service.jetty.internal.JettyServerHandlerCollection.handle(JettyServerHandlerCollection.java:64)
	at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)
	at org.mortbay.jetty.Server.handle(Server.java:324)
	at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:534)
	at org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:864)
	at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:533)
	at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:207)
	at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:403)
	at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:409)
	at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:522)

{code}",,,,,,,,,,,,,,,,,25/Nov/09 10:52;cmoulliard;camel-context.xml;https://issues.apache.org/jira/secure/attachment/12462841/camel-context.xml,24/Nov/09 16:44;cmoulliard;camel-cxf-rest-issue.zip;https://issues.apache.org/jira/secure/attachment/12462881/camel-cxf-rest-issue.zip,,,,2.0,,,,,,,,,,,,,,,,,,,2009-11-24 16:52:17.426,,,no_permission,,,,,,,,,,,,,76590,,,Wed Nov 25 16:32:30 UTC 2009,,,,,,,0|i01n9z:,7540,,,,,,,,,"24/Nov/09 16:52;sergey_beryozkin;Hi Willem, we've identified that an object which is returned from a jaxrs service endpoint is somehow lost twice, first it is misrepresented as
Object[] and next it ends up being of  String class...

If you're overwhelmed with some other priority work then please free to reassign this issue to me

thanks, Sergey","25/Nov/09 08:38;njiang;@Sergey,

I just have a chance to talk with Charles,  the error is caused by no response sending back the camel-cxfrs endpoint.","25/Nov/09 09:48;sergey_beryozkin;So it should be an easy fix ?

The exception which is reported above is originated from the custom cxf jaxrs ResponseHandler...
As was discussed in the other JIRA which you closed yesterday, the CXF JAXRSOutInterceptor was getting 
a response object being misrepresented as Object[]. So yesterday, 
Charles tried to to check what was inside that Object[] using a custom ResponseHandler. 

We thought that the object the IncidentService was returning (JAXRs Response in that specific case) was wrapped 
as the first element of Object[], so the custom ResponseHandler tried to cast the first element to Response...

","25/Nov/09 10:02;cmoulliard;@Sergey,

The call of a GET service works fine.

Concerning the call to a POST, here is the error displayed in the console now :

{code}
10:59:44,132 | DEBUG | ervice/incidents | jetty                            | service.jetty.internal.JCLLogger   85 | REQUEST /cxf/camel-rest-example/reportservice/incidents on org.mortbay.jetty.HttpConnection@136f665
10:59:44,132 | DEBUG | ervice/incidents | ServerModel                      | eb.service.spi.model.ServerModel  268 | Matching [/cxf/camel-rest-example/reportservice/incidents]...
10:59:44,132 | DEBUG | ervice/incidents | ServerModel                      | eb.service.spi.model.ServerModel  286 | Path [/cxf/camel-rest-example/reportservice/incidents] matched to {pattern=/cxf/.*,model=ServletModel{id=org.ops4j.pax.web.service.spi.model.ServletModel-6,name=cxf-osgi-transport-servlet,urlPatterns=[/cxf/*],alias=/cxf,servlet=org.apache.cxf.transport.http_osgi.SpringOsgiServlet@23a559,initParams={org.springframework.osgi.bean.name=osgiServlet, alias=/cxf, service.id=78, objectClass=[Ljava.lang.String;@113de03, Bundle-SymbolicName=org.apache.cxf.bundle, servlet-name=cxf-osgi-transport-servlet, Bundle-Version=2.2.5},context=ContextModel{id=org.ops4j.pax.web.service.spi.model.ContextModel-4,name=,httpContext=DefaultHttpContext{bundle=org.apache.cxf.bundle [96]},contextParams={}}}}
10:59:44,132 | DEBUG | ervice/incidents | HttpServiceContext               | etty.internal.HttpServiceContext  110 | Handling request for [/cxf/camel-rest-example/reportservice/incidents] using http context [DefaultHttpContext{bundle=org.apache.cxf.bundle [96]}]
10:59:44,132 | DEBUG | ervice/incidents | jetty                            | service.jetty.internal.JCLLogger   85 | sessionManager=org.mortbay.jetty.servlet.HashSessionManager@16a72f2
10:59:44,132 | DEBUG | ervice/incidents | jetty                            | service.jetty.internal.JCLLogger   85 | session=null
10:59:44,132 | DEBUG | ervice/incidents | jetty                            | service.jetty.internal.JCLLogger   85 | servlet=cxf-osgi-transport-servlet
10:59:44,132 | DEBUG | ervice/incidents | jetty                            | service.jetty.internal.JCLLogger   85 | chain=null
10:59:44,148 | DEBUG | ervice/incidents | jetty                            | service.jetty.internal.JCLLogger   85 | servlet holder=cxf-osgi-transport-servlet
10:59:44,148 | DEBUG | ervice/incidents | OsgiServlet                      | .http_osgi.OsgiServletController  276 | Service http request on thread: Thread[31816416@qtp2-6 - /cxf/camel-rest-example/reportservice/incidents,5,main]
10:59:44,148 | DEBUG | ervice/incidents | AbstractHTTPDestination          | ort.http.AbstractHTTPDestination  166 | Request Headers: {Host=[localhost:8080], User-Agent=[curl/7.19.5 (i586-pc-mingw32msvc) libcurl/7.19.5 zlib/1.2.3], Content-Type=[null], Accept=[application/xml]}
10:59:44,148 | DEBUG | ervice/incidents | PhaseInterceptorChain            | .cxf.phase.PhaseInterceptorChain  587 | Chain org.apache.cxf.phase.PhaseInterceptorChain@1a0a5fc was created. Current flow:
  unmarshal [JAXRSInInterceptor]
  pre-logical [OneWayProcessorInterceptor]
  invoke [ServiceInvokerInterceptor]
  post-invoke [OutgoingChainInterceptor]

10:59:44,148 | DEBUG | ervice/incidents | PhaseInterceptorChain            | .cxf.phase.PhaseInterceptorChain  233 | Invoking handleMessage on interceptor org.apache.cxf.jaxrs.interceptor.JAXRSInInterceptor@1f1788a
10:59:44,148 | DEBUG | ervice/incidents | JAXRSUtils                       | pache.cxf.jaxrs.utils.JAXRSUtils  223 | Trying to select a resource class /reportservice/incidents, request path : {1}
10:59:44,148 | DEBUG | ervice/incidents | JAXRSUtils                       | pache.cxf.jaxrs.utils.JAXRSUtils  279 | Trying to select a resource operation on the resource class org.apache.camel.example.reportincident.restful.ReportIncidentService
10:59:44,148 | DEBUG | ervice/incidents | JAXRSUtils                       | pache.cxf.jaxrs.utils.JAXRSUtils  396 | No method match, method name : getIncident, request path : /incidents, method @Path : /incidents/{id}/, HTTP Method : POST, method HTTP Method : GET, ContentType : */*, method @Consumes : */*,, Accept : application/xml,, method @Produces : application/xml,.
10:59:44,163 | DEBUG | ervice/incidents | JAXRSUtils                       | pache.cxf.jaxrs.utils.JAXRSUtils  396 | No method match, method name : updateIncident, request path : /incidents, method @Path : /incidents/, HTTP Method : POST, method HTTP Method : PUT, ContentType : */*, method @Consumes : */*,, Accept : application/xml,, method @Produces : */*,.
10:59:44,163 | DEBUG | ervice/incidents | JAXRSUtils                       | pache.cxf.jaxrs.utils.JAXRSUtils  332 | Resource operation addIncident may get selected
10:59:44,163 | DEBUG | ervice/incidents | JAXRSUtils                       | pache.cxf.jaxrs.utils.JAXRSUtils  396 | No method match, method name : addIncidentUniqueResponseCode, request path : /incidents, method @Path : /incidentsUniqueResponseCode/, HTTP Method : POST, method HTTP Method : POST, ContentType : */*, method @Consumes : */*,, Accept : application/xml,, method @Produces : */*,.
10:59:44,163 | DEBUG | ervice/incidents | JAXRSUtils                       | pache.cxf.jaxrs.utils.JAXRSUtils  396 | No method match, method name : deleteIncident, request path : /incidents, method @Path : /incidents/{id}/, HTTP Method : POST, method HTTP Method : DELETE, ContentType : */*, method @Consumes : */*,, Accept : application/xml,, method @Produces : */*,.
10:59:44,163 | DEBUG | ervice/incidents | JAXRSUtils                       | pache.cxf.jaxrs.utils.JAXRSUtils  355 | Resource operation addIncident on the resource class org.apache.camel.example.reportincident.restful.ReportIncidentService has been selected
10:59:44,163 | DEBUG | ervice/incidents | JAXRSInInterceptor               | s.interceptor.JAXRSInInterceptor  195 | Request path is: /reportservice/incidents
10:59:44,163 | DEBUG | ervice/incidents | JAXRSInInterceptor               | s.interceptor.JAXRSInInterceptor  196 | Request HTTP method is: POST
10:59:44,163 | DEBUG | ervice/incidents | JAXRSInInterceptor               | s.interceptor.JAXRSInInterceptor  197 | Request contentType is: */*
10:59:44,163 | DEBUG | ervice/incidents | JAXRSInInterceptor               | s.interceptor.JAXRSInInterceptor  198 | Accept contentType is: application/xml
10:59:44,163 | DEBUG | ervice/incidents | JAXRSInInterceptor               | s.interceptor.JAXRSInInterceptor  200 | Found operation: addIncident
10:59:44,163 | DEBUG | ervice/incidents | JAXRSUtils                       | pache.cxf.jaxrs.utils.JAXRSUtils  556 | No Content-Type specified for HTTP POST
10:59:44,163 | WARN  | ervice/incidents | WebApplicationExceptionMapper    | pl.WebApplicationExceptionMapper   52 | WebApplicationException has been caught : cause is javax.xml.stream.XMLStreamException
10:59:44,163 | DEBUG | ervice/incidents | PhaseInterceptorChain            | .cxf.phase.PhaseInterceptorChain  233 | Invoking handleMessage on interceptor org.apache.cxf.interceptor.OneWayProcessorInterceptor@2332b6
10:59:44,179 | DEBUG | ervice/incidents | PhaseInterceptorChain            | .cxf.phase.PhaseInterceptorChain  233 | Invoking handleMessage on interceptor org.apache.cxf.interceptor.ServiceInvokerInterceptor@d66992
10:59:44,179 | DEBUG | ervice/incidents | PhaseInterceptorChain            | .cxf.phase.PhaseInterceptorChain  233 | Invoking handleMessage on interceptor org.apache.cxf.interceptor.OutgoingChainInterceptor@ad0636
10:59:44,179 | DEBUG | ervice/incidents | OutgoingChainInterceptor         | rceptor.OutgoingChainInterceptor  163 | Interceptors contributed by bus: []
10:59:44,179 | DEBUG | ervice/incidents | OutgoingChainInterceptor         | rceptor.OutgoingChainInterceptor  167 | Interceptors contributed by service: []
10:59:44,179 | DEBUG | ervice/incidents | OutgoingChainInterceptor         | rceptor.OutgoingChainInterceptor  171 | Interceptors contributed by endpoint: [org.apache.cxf.interceptor.MessageSenderInterceptor@172f5d6]
10:59:44,179 | DEBUG | ervice/incidents | OutgoingChainInterceptor         | rceptor.OutgoingChainInterceptor  177 | Interceptors contributed by binding: [org.apache.cxf.jaxrs.interceptor.JAXRSOutInterceptor@69dc53]
10:59:44,179 | DEBUG | ervice/incidents | PhaseInterceptorChain            | .cxf.phase.PhaseInterceptorChain  587 | Chain org.apache.cxf.phase.PhaseInterceptorChain@1ffe90d was created. Current flow:
  prepare-send [MessageSenderInterceptor]
  marshal [JAXRSOutInterceptor]
{code}
","25/Nov/09 10:37;sergey_beryozkin;Hi Charles, so given this log

10:59:44,163 | DEBUG | ervice/incidents | JAXRSUtils                       | pache.cxf.jaxrs.utils.JAXRSUtils  355 | Resource operation addIncident on the resource class org.apache.camel.example.reportincident.restful.ReportIncidentService has been selected
10:59:44,163 | DEBUG | ervice/incidents | JAXRSInInterceptor               | s.interceptor.JAXRSInInterceptor  195 | Request path is: /reportservice/incidents
10:59:44,163 | DEBUG | ervice/incidents | JAXRSInInterceptor               | s.interceptor.JAXRSInInterceptor  196 | Request HTTP method is: POST
10:59:44,163 | DEBUG | ervice/incidents | JAXRSInInterceptor               | s.interceptor.JAXRSInInterceptor  197 | Request contentType is: */*
10:59:44,163 | DEBUG | ervice/incidents | JAXRSInInterceptor               | s.interceptor.JAXRSInInterceptor  198 | Accept contentType is: application/xml
10:59:44,163 | DEBUG | ervice/incidents | JAXRSInInterceptor               | s.interceptor.JAXRSInInterceptor  200 | Found operation: addIncident
10:59:44,163 | DEBUG | ervice/incidents | JAXRSUtils                       | pache.cxf.jaxrs.utils.JAXRSUtils  556 | No Content-Type specified for HTTP POST

it appears that 

10:59:44,163 | WARN  | ervice/incidents | WebApplicationExceptionMapper    | pl.WebApplicationExceptionMapper   52 | WebApplicationException has been caught : cause is javax.xml.stream.XMLStreamException


JAXBElementProvider tried to read from XMLStreamReader (more logging would help).
CXF JAXRS itself does read directly from the request InputsStream but will try to read from 
 XMLStreamReader if it is available on the message. At the moment I can not tell where this (custom) 
XMLStreamReader is coming from.

I'm on my gmail now and #cxf in codehouze. Lets chat there. Alternatively please create a CXF JIRA with the copy of your latest project

thanks

","25/Nov/09 10:52;cmoulliard;Only the camel-context file has been changed. I put it in attachment

I have been able to generate more error in the log by adding Context-Type in the POST request :

{code}
11:45:50,382 | WARN  | 31816416@qtp2-6  | WebApplicationExceptionMapper    | pl.WebApplicationExceptionMapper   52 | WebApplicationException has been caught : cause is javax.xml.stream.XMLStreamException
11:49:11,054 | WARN  | 31816416@qtp2-6  | AbstractJAXBProvider             | rs.provider.AbstractJAXBProvider  544 | javax.xml.bind.UnmarshalException
 - with linked exception:
[org.xml.sax.SAXParseException: Premature end of file.]
	at javax.xml.bind.helpers.AbstractUnmarshallerImpl.createUnmarshalException(AbstractUnmarshallerImpl.java:65)
	at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl.createUnmarshalException(UnmarshallerImpl.java:514)
	at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl.unmarshal0(UnmarshallerImpl.java:215)
	at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl.unmarshal(UnmarshallerImpl.java:184)
	at javax.xml.bind.helpers.AbstractUnmarshallerImpl.unmarshal(AbstractUnmarshallerImpl.java:184)
	at javax.xml.bind.helpers.AbstractUnmarshallerImpl.unmarshal(AbstractUnmarshallerImpl.java:191)
	at org.apache.cxf.jaxrs.provider.JAXBElementProvider.unmarshalFromInputStream(JAXBElementProvider.java:200)
	at org.apache.cxf.jaxrs.provider.JAXBElementProvider.doUnmarshal(JAXBElementProvider.java:183)
	at org.apache.cxf.jaxrs.provider.JAXBElementProvider.readFrom(JAXBElementProvider.java:154)
	at org.apache.cxf.jaxrs.utils.JAXRSUtils.readFromMessageBody(JAXRSUtils.java:954)
	at org.apache.cxf.jaxrs.utils.JAXRSUtils.processParameter(JAXRSUtils.java:560)
	at org.apache.cxf.jaxrs.utils.JAXRSUtils.processParameters(JAXRSUtils.java:525)
{code}","25/Nov/09 13:56;cmoulliard;@Willem

Why the body is empty (question coming from Sergey) ?

Here is a trace :

{code}
ID: 1
Address: /cxf/camel-rest-example/reportservice/incidents
Encoding: ISO-8859-1
Content-Type: application/xml
Headers: {content-type=[application/xml], Host=[localhost:8080], User-Agent=[curl/7.19.5 (i586-pc-mingw32msvc) libcurl/7.19.5 zlib/1.2.3], Content-Type=[application/xml], Accept=[application/xml]}
Payload:
--------------------------------------
12:56:49,960 | INFO | 31816416@qtp2-6 | LoggingOutInterceptor | ngOutInterceptor$LoggingCallback 160 | Outbound Message
---------------------------
ID: 1
Encoding:
Content-Type: text/plain
Headers: {Content-Type=[text/plain], Date=[Wed, 25 Nov 2009 11:56:49 GMT]}
Payload: JAXBException occurred : Premature end of file.. Premature end of file..
I come back in 1 hour (lunch + stuff to do for my family)

{code}

using tcpTrace

{code}
<connection>
<loggedAt xsi:type='xsd:timeInstant'>2009-11-25T14:41:19+-1:00</loggedAt>
<connectionOpened xsi:type='xsd:timeInstant'>2009-11-25T14:41:19+-1:00</connectionOpened>
<connectionClosed xsi:type='xsd:timeInstant'>2009-11-25T14:41:19+-1:00</connectionClosed>
<source>127.0.0.1</source>
<destination>localhost:8080</destination>
<bytesClientToServer>216</bytesClientToServer>
<bytesServerToClient>216</bytesServerToClient>
<clientData>POST /cxf/camel-rest-example/reportservice/incidents HTTP/1.1
User-Agent: curl/7.19.5 (i586-pc-mingw32msvc) libcurl/7.19.5 zlib/1.2.3
Host: localhost:9999
Accept: application/xml
Content-Type: application/xml

</clientData>
<serverData>HTTP/1.1 500 Internal Server Error
Content-Type: text/plain
Date: Wed, 25 Nov 2009 13:41:19 GMT
Content-Length: 73
Server: Jetty(6.1.x)

JAXBException occurred : Premature end of file.. Premature end of file.. </serverData>
</connection>
{code}","25/Nov/09 16:03;sergey_beryozkin;Actually, it does look like it is 

User-Agent: curl/7.19.5 (i586-pc-mingw32msvc) libcurl/7.19.5 zlib/1.2.3


which sends an empty body","25/Nov/09 16:32;cmoulliard;THE REQUEST SEND WAS NOT CORRECT :

If I use the following, everything works fine (-d has been added) 

{code}
curl -i  -H ""Accept: application/xml"" -H ""Content-Type: application/xml"" -d ""<Incident><incidentId>555</incidentId><givenName>chm</givenName></Incident>"" -X POST http://localhost:8181/cxf/camel-rest-example/reportservice/incidents

HTTP/1.1 200 OK
Content-Type: application/xml
Date: Wed, 25 Nov 2009 16:27:02 GMT
Content-Length: 130
Server: Jetty(6.1.x)

<?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?><Incident><incidentId>126</incidentId><givenName>chm</givenName></Incident>
{code}

Here is the trace from camel / cxfrs / apache karaf

{code}
ID: 46
Address: /cxf/camel-rest-example/reportservice/incidents
Encoding: UTF-8
Content-Type: application/xml; charset=UTF-8
Headers: {content-type=[application/xml; charset=UTF-8], connection=[keep-alive], Host=[localhost:8181], Content-Length=[78], User-Agent=[Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.1.3) Gecko/20090824 Firefox/3.5.3], Pragma=[no-cache], Cache-Control=[no-cache], Accept-Language=[en-us,en;q=0.5], Accept-Charset=[ISO-8859-1,utf-8;q=0.7,*;q=0.7], Keep-Alive=[300], accept-encoding=[gzip,deflate], Accept=[text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8], Content-Type=[application/xml; charset=UTF-8]}
Payload: <Incident>
<incidentId>555</incidentId>
<givenName>chm</givenName>
</Incident>
--------------------------------------
17:23:37,882 | INFO  | 1979395@qtp0-3   | LoggingOutInterceptor            | ngOutInterceptor$LoggingCallback  160 | Outbound Message
---------------------------
ID: 46
Encoding: 
Content-Type: application/xhtml+xml
Headers: {Date=[Wed, 25 Nov 2009 16:23:37 GMT]}
Payload: <?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?><Incident><incidentId>125</incidentId><givenName>chm</givenName></Incident>
{code}

QUESTION : WHY DO WE HAVE TO SEND PARAMETER (<Incident><incidentId>555</incidentId><givenName>chm</givenName></Incident>) AS NORMALY A NEW OBJECT WILL BE CREATED BY THE SERVICE HEREAFTER ?

{code}
    @POST
    @Path(""/incidents/"")
    @Consumes(""application/xml"")
    public Response addIncident(Incident incident) {
        incident.setIncidentId(++currentId);

        incidents.put(incident.getIncidentId(), incident);
        
        return Response.ok(incident).build();
    }
{code}

If I compare with the test example, no parameters are send : 

{code}
    @Test
    public void testPostConsumer() throws Exception {
        PostMethod post = new PostMethod(""http://localhost:9000/customerservice/customers"");
        post.addRequestHeader(""Accept"" , ""text/xml"");
        RequestEntity entity = new StringRequestEntity(POST_REQUEST, ""text/xml"", ""ISO-8859-1"");
        post.setRequestEntity(entity);
        HttpClient httpclient = new HttpClient();

        try {
            assertEquals(200, httpclient.executeMethod(post));
            assertEquals(""<?xml version=\""1.0\"" encoding=\""UTF-8\"" standalone=\""yes\""?><Customer><id>124</id><name>Jack</name></Customer>"",
                    post.getResponseBodyAsString());
        } finally {
            post.releaseConnection();
        }

    } 
{code}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-bean - Classes enhanced by CGLIB should skip cglib methods,CAMEL-2222,12486780,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,24/Nov/09 14:10,03/Jun/10 07:25,14/Mar/19 02:42,24/Nov/09 17:07,2.0.0,,,,,,,,,,2.1.0,,,camel-core,,,,1,"See nabble
http://old.nabble.com/AmbiguousMethodCallException-on-transactional-spring-bean-to26496269.html",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-11-24 14:31:23.019,,,no_permission,,,,,,,,,,,,,76591,,,Thu Jun 03 07:25:43 UTC 2010,,,,,,,0|i01n9j:,7538,,,,,,,,,"24/Nov/09 14:31;kdekooter;Here is a snippet of the code causing the trouble:

{code}
@Service(""transactionService"")
public class TransactionService {

	@Autowired
	private TransactionRepository repository;
	
	@Transactional
	@Handler
	public void createTransaction(OwnedEntity object) {
        ...
        }

{code}

And this is the tail of the stacktrace:
{noformat}
Caused by: org.apache.camel.component.bean.AmbiguousMethodCallException: Ambiguous method invocations possible: [public final void com.globaltravelcloud.service.TransactionService$$EnhancerByCGLIB$$73b4ab00.setPreFiltered(boolean), 
public final void com.globaltravelcloud.service.TransactionService$$EnhancerByCGLIB$$73b4ab00.setExposeProxy(boolean)] 
on the exchange: Exchange[JmsMessage: ActiveMQObjectMessage {commandId = 11, responseRequired = true, messageId = ID:wollongong-50886-1259072603806-2:2:1:3:1, originalDestination = null, originalTransactionId = null,
 producerId = ID:wollongong-50886-1259072603806-2:2:1:3, destination = queue://incomingchanges, transactionId = null,
 expiration = 0, timestamp = 1259072982484, arrival = 0, brokerInTime = 1259072982492, brokerOutTime = 1259072982498, correlationId = null, replyTo = null, persistent = true, type = null, priority = 4, groupID = null, groupSequence = 0,
 targetConsumerId = null, compressed = false, userID = null, content = org.apache.activemq.util.ByteSequence@7f2886, 
marshalledProperties = null, dataStructure = null, redeliveryCounter = 0, size = 3460, properties = null, 
readOnlyProperties = true, readOnlyBody = true, droppable = false}]
	at org.apache.camel.component.bean.BeanInfo.chooseBestPossibleMethodInfo(BeanInfo.java:449)
	at org.apache.camel.component.bean.BeanInfo.chooseMethodWithMatchingBody(BeanInfo.java:410)
	at org.apache.camel.component.bean.BeanInfo.chooseMethod(BeanInfo.java:360)
	at org.apache.camel.component.bean.BeanInfo.createInvocation(BeanInfo.java:148)
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:109)
	at org.apache.camel.impl.ProcessorEndpoint.onExchange(ProcessorEndpoint.java:95)
	at org.apache.camel.impl.ProcessorEndpoint$1.process(ProcessorEndpoint.java:65)
	at org.apache.camel.processor.SendProcessor$1.doInProducer(SendProcessor.java:81)
	at org.apache.camel.processor.SendProcessor$1.doInProducer(SendProcessor.java:79)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:141)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:78)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:61)
	at org.apache.camel.processor.RedeliveryErrorHandler.processExchange(RedeliveryErrorHandler.java:186)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:155)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:88)
	at org.apache.camel.processor.DefaultErrorHandler.process(DefaultErrorHandler.java:49)
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:148)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:74)
	at org.apache.camel.processor.UnitOfWorkProcessor.processNext(UnitOfWorkProcessor.java:54)
	at org.apache.camel.processor.DelegateProcessor.process(DelegateProcessor.java:48)
	at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:83)
	... 9 more

{noformat}",24/Nov/09 14:46;davsclaus;I actually think that the fixes in 2.1 should let it run out of the box.,"24/Nov/09 14:47;davsclaus;Looks like he is using Camel 2.0.0? Can you confirm which Camel version used?

And can you try using 2.1-SNAPSHOT?
","24/Nov/09 16:50;kdekooter;Sorry, forgot to mention that. Yes I am using Camel 2.0.0.

The 2.1 snapshot is working fine!",24/Nov/09 17:07;davsclaus;Works already in 2.1 where I have done several fixes in the bean component already.,03/Jun/10 07:25;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Inconsistent out message when using recipient list,CAMEL-2221,12486777,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gertvanthienen,gertvanthienen,gertvanthienen,24/Nov/09 12:55,03/Jun/10 07:25,14/Mar/19 02:42,24/Nov/09 19:18,2.0.0,,,,,,,,,,1.6.3,2.1.0,,camel-core,,,,0,"When using the Dynamic Recipient List pattern, there's an inconsistency between two ways of of defining that pattern:
- when using a @RecipientList-annotated method with a beanRef, you get the list of endpoints as the out message body
- when using the same method with a recipientList(bean(...)) call, you get the aggregated result of the invoked endpoints

I think it would be better if both options returned the same response message and I would suggested the aggregated result of the invoked endpoints is the more appropriate one.",,,,,,,,,,,,,,,,,24/Nov/09 13:02;gertvanthienen;CAMEL-2221.diff;https://issues.apache.org/jira/secure/attachment/12462867/CAMEL-2221.diff,,,,,1.0,,,,,,,,,,,,,,,,,,,2009-11-24 13:13:10.846,,,no_permission,,,,,,,,,,,,,76592,,,Thu Jun 03 07:25:43 UTC 2010,,,,,,,0|i01n9b:,7537,,,,,,,,,"24/Nov/09 13:02;gertvanthienen;This patch solves the issue by always returning the aggregated result.  Can someone take a quick look before I apply it?

There's only one problem with this fix -- up to now, if a user mistakenly configured an @RecipientList-annotated method with the recipientList(bean(...)) call, the end result would still be ok because the bean(...) call would result in the list of endpoints being sent back.       This fix would break that behavior.","24/Nov/09 13:13;davsclaus;Gertv good catch.

Patch looks good.

I know running tests takes a long time. Have you also run camel-spring as well?","24/Nov/09 19:18;gertvanthienen;Fix has been applied to trunk in http://svn.apache.org/viewvc?view=revision&revision=883713
and backported to the 1.x branch in http://svn.apache.org/viewvc?view=revision&revision=883781",03/Jun/10 07:25;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-cxf should not relay on the default Bus,CAMEL-2216,12486751,12487681,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,24/Nov/09 08:33,27/Nov/10 06:14,14/Mar/19 02:42,24/Nov/09 13:52,1.3.0,1.4.0,1.5.0,1.6.0,1.6.1,2.0.0,2.0-M1,2.0-M2,2.0-M3,,1.6.3,2.1.0,,,,,,0,"Sergey reported some [bug|https://issues.apache.org/activemq/browse/SMX4-422]  recently ,  after digging the code I found current camel-cxf's get defaultBus code is not safe to use when we deploy the camel route into the JBI container or OSGi container.

So we need to create the new bus if there is no bus set into the camel-cxf endpoint.",,,,,,,,,,,,,,,SMX4-422,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-11-24 09:42:35.485,,,no_permission,,,,,,,,,,,,,76594,,,Thu Jun 03 07:25:42 UTC 2010,,,,,,,0|i01n87:,7532,,,,,,,,,24/Nov/09 08:34;njiang;SMX4-422 issue should be resolved from camel-cxf side.,"24/Nov/09 09:42;sergey_beryozkin;Willem, I have tested the updated camel-cxf component and it actually works really well now on the producer side in a pure JBI SU.

Thanks for your help :-)

Sergey ","24/Nov/09 13:52;njiang;trunk
http://svn.apache.org/viewvc?rev=883667&view=rev
camel 1.x branch
http://svn.apache.org/viewvc?rev=883695&view=rev",03/Jun/10 07:25;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CaseInsensitiveMap should be serializable,CAMEL-2215,12486779,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,24/Nov/09 05:37,03/Jun/10 07:25,14/Mar/19 02:42,24/Nov/09 06:05,2.0.0,,,,,,,,,,2.1.0,,,camel-core,,,,0,"CaseInsensitiveMap should be fully serializable

See nabble
http://old.nabble.com/DataSet-header-%7BCamelDataSetIndex%3D0%7D-causes-failure-to26487985.html",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76595,,,Thu Jun 03 07:25:42 UTC 2010,,,,,,,0|i01n7z:,7531,,,,,,,,,24/Nov/09 06:05;davsclaus;trunk: 883598.,03/Jun/10 07:25;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE thrown from RssDateComparator when using a feed that doesn't parse properly.,CAMEL-2214,12486979,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,slewis,slewis,slewis,23/Nov/09 19:43,24/Apr/11 10:01,14/Mar/19 02:42,16/Feb/10 20:39,2.0.0,,,,,,,,,,2.3.0,,,camel-rss,,,,0,"If a feed contains entries that don't have an updatedDate or publishDate and you're using splitEntries=true + sortEntries=true you can run into this NPE:

{code}
2009-11-23 14:31:50,152 [0: RssComponent] WARN  ultPollingConsumerPollStrategy -
 Consumer Consumer[rss://http://www.iafrica.com/pls/cms/grapevine.xml?consumer.initialDelay=9000&p_city=cape+town&p_section=weather&sortEntries=true&splitEntries=true] 
could not poll endpoint: rss://http://www.iafrica.com/pls/cms/grapevine.xml?consumer.initialDelay=9000&p_city=cape+town&p_section=weather&sortEntries=true&splitEntries=true 
caused by: null
java.lang.NullPointerException
	at org.apache.camel.component.rss.RssDateComparator.compare(RssDateComparator.java:27)
	at org.apache.camel.component.rss.RssDateComparator.compare(RssDateComparator.java:24)
	at java.util.Arrays.mergeSort(Arrays.java:1270)
	at java.util.Arrays.mergeSort(Arrays.java:1281)
	at java.util.Arrays.sort(Arrays.java:1210)
	at java.util.Collections.sort(Collections.java:159)
	at org.apache.camel.component.rss.RssEntryPollingConsumer.sortEntries(RssEntryPollingConsumer.java:49)
	at org.apache.camel.component.rss.RssEntryPollingConsumer.populateList(RssEntryPollingConsumer.java:42)
	at org.apache.camel.component.feed.FeedEntryPollingConsumer.poll(FeedEntryPollingConsumer.java:43)
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:108)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:181)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:205)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:637)
{code}",,,,,,,,,,,,,,,,,23/Nov/09 20:13;slewis;patch.txt;https://issues.apache.org/jira/secure/attachment/12462879/patch.txt,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-04-24 10:01:42.187,,,no_permission,,,,,,,,,,,,,76596,,,Sun Apr 24 10:01:42 UTC 2011,,,Patch Available,,,,0|i01n7r:,7530,,,,,,,,,23/Nov/09 20:13;slewis;Patch that avoids the NPE,"16/Feb/10 20:39;slewis;Sending        src/main/java/org/apache/camel/component/rss/RssDateComparator.java
Transmitting file data .
Committed revision 910680.
",24/Apr/11 10:01;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SetBody DSL should remove specialized Message as its no long apply,CAMEL-2209,12486783,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,21/Nov/09 09:27,03/Jun/10 07:25,14/Mar/19 02:42,21/Nov/09 11:52,1.6.1,2.0.0,,,,,,,,,2.1.0,,,camel-core,,,,0,"Also an issue from
http://old.nabble.com/Original-message-body-lost-in-transacted-route-to26451809.html

This issue is because the JmsMessage is still set as the IN message object and it contain the backing javax.jms.Message object. So when you for example use the setBody DSL to set a {{null} body or empty body then it may fallback and look into the specialized JmsMessage object.

Set SetBodyProcessor should set a new DefaultMessage with the headers propagated and the new body evaluated.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76597,,,Thu Jun 03 07:25:41 UTC 2010,,,,,,,0|i01n6n:,7525,,,,,,,,,21/Nov/09 11:52;davsclaus;trunk: 882887.,03/Jun/10 07:25;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Transacted routes mixed with Camel error handling should invoke Camel redelivery on the failed part of the route and not from beginning,CAMEL-2208,12486785,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,21/Nov/09 09:10,03/Jun/10 07:25,14/Mar/19 02:42,21/Nov/09 10:07,2.0.0,,,,,,,,,,2.1.0,,,camel-core,camel-spring,,,0,"When using transacted routes and you *also* use Camel error handling then it gets complicated.

However when Camel is instructed to do redelivery such as using
{code}
            onException(Exception.class)
                    .handled(true)
                    .useOriginalBody()
                    .maximumRedeliveries(2)
                    .to(""mock:error"");
{code}

Then when a redelivery is attempted it happens from the start of the route, where as its supposed to happen on that failing part of the route directly.
As it does for non transacted routes.

See nabble
http://old.nabble.com/Original-message-body-lost-in-transacted-route-to26451809.html",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76598,,,Thu Jun 03 07:25:41 UTC 2010,,,,,,,0|i01n6f:,7524,,,,,,,,,21/Nov/09 10:07;davsclaus;trunk: 882870.,03/Jun/10 07:25;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Import of package javax.xml.bind.annotation.adapters,CAMEL-2204,12486593,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,knisterpeter,knisterpeter,19/Nov/09 11:47,03/Jun/10 07:25,14/Mar/19 02:42,21/Nov/09 11:54,2.0.0,,,,,,,,,,2.1.0,,,camel-core,,,,0,"Since the package 'javax.xml.bind.annotation.adapters' is missing from the imports on camel-core we could not deploy our bundles on karaf.
On Java 6 this is no problem, since the package is bootdelegated anyway since its included in the JVM.","Java 5, Apache Karaf 1.0",,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-11-19 11:55:00.592,,,no_permission,,,,,,,,,,,,,76599,,,Thu Jun 03 07:25:38 UTC 2010,,,,,,,0|i01n5j:,7520,,,,,,,,,"19/Nov/09 11:55;davsclaus;And you have tried with latest code from trunk?

And have the server totally restarted, eg. stop it completely and then use the 2.1-SNAPSHOT jars instead of 2.0","19/Nov/09 12:10;njiang;We exclude the importation of javax.xml.bind.annotation.adapters long time ago, I can't recall why we do this.
It's time to clean it up.

",20/Nov/09 12:08;davsclaus;Willem whats the status of this?,"20/Nov/09 13:36;njiang;It's easy to move the !javax.xml.bind.annotation.adapters, but I don't know if there are any side effect on current camel bundles.
I went through the came-core code , there are reference of the javax.xml.bind.annotation.adapters, but I don't know why we don't hit that kind of issue before.
Markus,  can I have a look at your camel context?
BTW,  did you try to load the jaxb which shipped by Servicemix.
{code}
    <bundle>mvn:org.apache.servicemix.specs/org.apache.servicemix.specs.jaxb-api-2.1/1.4-SNAPSHOT</bundle>
    <bundle>mvn:org.apache.servicemix.specs/org.apache.servicemix.specs.stax-api-1.0/1.4-SNAPSHOT</bundle>
    <bundle>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.jaxb-impl/2.1.12_1</bundle>
{code}


","20/Nov/09 13:42;knisterpeter;We have several bundles using camel. I'm not sure which one exactly does run into this problem. 
This is one of the contexts we have:
{noformat}<camel:camelContext id=""camel"">
	<camel:jmxAgent id=""camelJmxAgent""
		usePlatformMBeanServer=""true"" />
	<camel:routeBuilder ref=""bounceRoute"" />
</camel:camelContext>{noformat}
And this is the route builder relevant code:
{noformat}from(""quartz://bounces/pop3Timer?cron="" + this.cronExpression).beanRef(""pop3Job"");
from(""jms:topic:de.llynch.endion.reponse.rule-reset"").beanRef(""resetRuleProcessor"");{noformat}

Yes I tried with the servicemix bundles as well as with the spring bundles.
After adding the package import it does work well for us.","20/Nov/09 14:32;njiang;@ Markus,
Your camel context is normal for us, I don't think it hit the trigger of issue.
As I can't see any side effect so far, I will committed the fix shortly
","20/Nov/09 14:41;njiang;trunk http://svn.apache.org/viewvc?rev=882575&view=rev

Will merge this fix back to camel 1.x if it don't break anything next week :)","21/Nov/09 11:54;davsclaus;Resolving this so there are no tickets blocking for 2.1.

Created sub ticket for backporting this to 1.x",03/Jun/10 07:25;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RedeliveryPolicy - Setting delay > maxDelay should should also set max value,CAMEL-2201,12486795,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,davsclaus,davsclaus,davsclaus,19/Nov/09 04:58,03/Jun/10 07:25,14/Mar/19 02:42,19/Nov/09 05:48,2.0.0,,,,,,,,,,2.1.0,,,camel-core,,,,0,"See nabble
http://old.nabble.com/maximumRedeliveryDelay-applies-even-if-you-are-not-using-exponential-back-off-to26415728.html

",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76600,,,Thu Jun 03 07:25:37 UTC 2010,,,,,,,0|i01n4v:,7517,,,,,,,,,19/Nov/09 05:48;davsclaus;trunk: 882050,03/Jun/10 07:25;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
No component found with sc heme: file         at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:442),CAMEL-2200,12486694,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,cmoulliard,cmoulliard,18/Nov/09 16:01,20/Nov/09 08:25,14/Mar/19 02:42,20/Nov/09 08:25,2.1.0,,,,,,,,,,2.1.0,,,,,,,0,"The following error is generated :

karaf@root> Exception in thread ""SpringOsgiExtenderThread-4"" org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: file://d:/te
mp/data/reportincident/?move=d%3A%2Ftemp%2Fbackup%2F%24%7Bdate%3Anow%3AyyyyMMdd%7D%2F%24%7Bfile%3Aname.noext%7D.bak due to: No component found with sc
heme: file
        at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:442)
        at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:46)
        at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:144)
        at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:106)
        at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:112)
        at org.apache.camel.model.FromDefinition.resolveEndpoint(FromDefinition.java:72)
        at org.apache.camel.impl.DefaultRouteContext.getEndpoint(DefaultRouteContext.java:81)
        at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:575)
        at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:132)

with a simple route :

<beans xmlns=""http://www.springframework.org/schema/beans""
	xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
	xmlns:context=""http://www.springframework.org/schema/context""
	xmlns:osgi=""http://www.springframework.org/schema/osgi""
	xmlns:osgix=""http://www.springframework.org/schema/osgi-compendium""
	xmlns:camel=""http://camel.apache.org/schema/spring""
	xsi:schemaLocation=""
	    http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/osgi
		http://www.springframework.org/schema/osgi/spring-osgi.xsd
		http://camel.apache.org/schema/osgi
		http://camel.apache.org/schema/osgi/camel-osgi.xsd
		http://camel.apache.org/schema/spring
		http://camel.apache.org/schema/spring/camel-spring.xsd
		http://www.springframework.org/schema/osgi-compendium
        http://www.springframework.org/schema/osgi-compendium/spring-osgi-compendium.xsd"">
		
 
  
	<camel:camelContext trace=""true"" xmlns=""http://camel.apache.org/schema/osgi"">

		<camel:route>
			<camel:from	uri=""file://d:/temp/data/reportincident/?move=d:/temp/backup/${date:now:yyyyMMdd}/${file:name.noext}.bak""/>
			<camel:setHeader headerName=""origin"">
				<camel:constant>file</camel:constant>
			</camel:setHeader>
			<camel:to uri=""log:org.apache.camel.reportincident?level=DEBUG"" />
		</camel:route>
		

    </camel:camelContext>
</beans>",Test made on ServiceMix 4.1-SNAPSHOT,,,,,,,,,,,,,,,,18/Nov/09 16:04;cmoulliard;reportincident.zip;https://issues.apache.org/jira/secure/attachment/12462896/reportincident.zip,,,,,1.0,,,,,,,,,,,,,,,,,,,2009-11-19 03:21:46.23,,,no_permission,,,,,,,,,,,,,76601,,,Fri Nov 20 08:25:58 UTC 2009,,,,,,,0|i01n4n:,7516,,,,,,,,,"18/Nov/09 16:04;cmoulliard;Here is a maven project used to generated the reportincident routing bundle using the command :

mvn clean install

Here is the list of features deployed on ServiceMix4.1-SNAPSHOT

#
# Comma separated list of features repositories to register by default
#
featuresRepositories=mvn:org.apache.felix.karaf/apache-felix-karaf/1.1.0-SNAPSHOT/xml/features,mvn:org.apache.servicemix.nmr/apache-servicemix-nmr/1.1.0-SNAPSHOT/xml/features,mvn:org.apache.servicemix/apache-servicemix/4.1.0-SNAPSHOT/xml/features,mvn:org.apache.camel.karaf/features/2.0.0/xml/features,jar:mvn:org.apache.camel.example/reportincident.features/1.0-SNAPSHOT!/reportincident.features-1.0-SNAPSHOT-features.xml

#
# Comma separated list of features to install at startup
#
featuresBoot=spring,spring-dm,camel-core,camel-spring-osgi

and 

 osgi:install -s mvn:org.springframework/spring-tx/2.5.6.SEC01
osgi:install -s mvn:org.apache.camel.example/reportincident.routing2/1.0-SNAPSHOT",18/Nov/09 16:11;cmoulliard;Same problem using Apache Felix Karaf 1.1.0-SNAPSHOT,"19/Nov/09 03:21;njiang;Hi Charles,
My bad, I didn't specify the activator in the camel-spring-osgi bundle.
The OSGi component resolver is not be injected into the camel context, so you get the error of not finding the components.

I will did a quick fix for it.


","19/Nov/09 08:33;cmoulliard;For your information we have the same issue using bundles camel-spring and camel-osgi.
","20/Nov/09 07:38;davsclaus;Charles are you sure. Have you completely stopped the SMX server. Cleared the cache folder and whatnot. So when you start up its all fresh and 2.1-SNAPSHOT bundles.

We would not like to chase a bug that is not there!","20/Nov/09 08:25;cmoulliard;With the fix of Willem, everything is in order now. So, I propose to close this ticket",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-cxf - CxfProducer in POJO mode should be able to use POJO object directly without wrapped as List,CAMEL-2196,12486790,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,18/Nov/09 10:32,03/Jun/10 07:25,14/Mar/19 02:42,18/Nov/09 11:06,2.0.0,,,,,,,,,,2.1.0,,,camel-cxf,,,,0,"See camel-example-cxf-async

In the client code that sends to the server using CxfProducer. I have to wrap my POJO in a List object.
CxfProducer should be smarter and be able to do this itself.

It can do this by converting the payload to an iterator and use that to construct the list.
Then it works for POJO objects directly.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76602,,,Thu Jun 03 07:25:36 UTC 2010,,,,,,,0|i01n3r:,7512,,,,,,,,,18/Nov/09 11:06;davsclaus;trunk: 881719.,03/Jun/10 07:25;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JcrProducer node creation throws javax.jcr.PathNotFoundException when using exchange ID as node name,CAMEL-2188,12486807,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,pegli,pegli,17/Nov/09 23:24,03/Jun/10 07:25,14/Mar/19 02:42,26/Jan/10 19:12,1.6.0,,,,,,,,,,2.1.0,,,camel-jcr,,,,0,"To reproduce, use the camel-jcr component without specifying a node name in the message properties.  JcrProducer will attempt to use the exchange ID as the node name, but in ServiceMix 4, this ID contains path separator characters, which results in a PathNotFound exception when the producer attempts to create the node.  IMHO, the producer should attempt to create parent nodes as needed when the value of either the exchange ID or the property named JcrConstants.JCR_NODE_NAME contain path separators.","java version ""1.6.0_15""
Java(TM) SE Runtime Environment (build 1.6.0_15-b03-219)
Java HotSpot(TM) 64-Bit Server VM (build 14.1-b02-90, mixed mode)
",,,,,,,,,,,,,,,,24/Nov/09 01:16;pegli;CAMEL-2188.diff;https://issues.apache.org/jira/secure/attachment/12462868/CAMEL-2188.diff,17/Nov/09 23:25;pegli;node-creation.diff;https://issues.apache.org/jira/secure/attachment/12462895/node-creation.diff,,,,2.0,,,,,,,,,,,,,,,,,,,2009-11-20 07:36:39.702,,,no_permission,,,,,,,,,,,,,76603,,,Thu Jun 03 07:25:35 UTC 2010,,,Patch Available,,,,0|i01n1z:,7504,,,,,,,,,17/Nov/09 23:25;pegli;Patch to fix problem with intermediate node creation in camel-jcr.  Also adds a try/catch around the code that sets node properties in case the TypeConverter can't handle one or more exchange property types.,19/Nov/09 00:32;pegli;We probably want a Text.escapeIllegalJcrChars() call in the node creation loop as well...,20/Nov/09 07:36;davsclaus;Paul can you work on the patches and provide a complete patch with you suggestions. Then we can get it in Camel 2.2,24/Nov/09 01:16;pegli;Patch file that fixes CAMEL-2188 and CAMEL-2187.  Includes unit tests for proper authentication against the repository and for node path creation when value of the exchange header JcrConstants.JCR_NODE_NAME contains one or more path separator characters.  Apply from SVNROOT/components/camel-jcr.,24/Nov/09 01:19;pegli;I forgot to mention that the patch was generated against trunk rev 883433 (2009-11-11 17:21:11).,"24/Nov/09 05:46;hadrian;Patch applied with many thanks!  I need to update the wiki as well.

Excellent contribution, keep them coming.","17/Dec/09 03:52;njiang;Hi hadrain

Can we resolve this issue now?",18/Dec/09 06:12;davsclaus;Hmm was this committed before 2.1 was released? And what wiki do you need to update?,26/Jan/10 19:12;davsclaus;Committed in the 2.1 release.,03/Jun/10 07:25;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jcr URI authentication tokens are not parsed correctly,CAMEL-2187,12486808,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,hadrian,pegli,pegli,17/Nov/09 21:59,03/Jun/10 07:25,14/Mar/19 02:42,26/Jan/10 19:10,1.6.0,,,,,,,,,,2.1.0,,,camel-jcr,,,,0,"Documentation for the camel-jcr component indicates that the repository username and password can be provided on the endpoint URI as jcr://user:pass@repository/path.  The JcrEndpoint class does not parse these correctly, however -- URI.getUserInfo() returns ""user:pass"", and URI.getAuthority() returns ""user:pass@repository"" as per the javadocs for java.net.URI and RFC-2396.","java version ""1.6.0_15""
Java(TM) SE Runtime Environment (build 1.6.0_15-b03-219)
Java HotSpot(TM) 64-Bit Server VM (build 14.1-b02-90, mixed mode)",,,,,,,,,,,,,,,,17/Nov/09 22:00;pegli;auth-fix.diff;https://issues.apache.org/jira/secure/attachment/12462894/auth-fix.diff,,,,,1.0,,,,,,,,,,,,,,,,,,,2009-12-18 06:23:57.549,,,no_permission,,,,,,,,,,,,,76604,,,Thu Jun 03 07:25:34 UTC 2010,,,Patch Available,,,,0|i01n1r:,7503,,,,,,,,,17/Nov/09 22:00;pegli;patch for src/main/java/org/apache/camel/component/jcr/JcrEndpoint.java to fix parsing of JCR username/password off URI (apply in camel-jcr dir).,24/Nov/09 01:17;pegli;see CAMEL-2188 for a patch file that also addresses this issue.,"18/Dec/09 06:23;davsclaus;Hadrian was this fixed with that other JCR patch? 

Can you follow up on this and ensure we got all these JCR patches in 2.2?",26/Jan/10 19:10;davsclaus;Committed in the 2.1 release.,03/Jun/10 07:25;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"if ftp endpoint is not writeable, the only messages you get are logged at DEBUG level.",CAMEL-2186,12486804,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,karlp,karlp,17/Nov/09 16:29,03/Jun/10 07:25,14/Mar/19 02:42,18/Nov/09 08:47,2.0.0,,,,,,,,,,2.1.0,,,camel-ftp,,,,0,"Using the same project attached to CAMEL-2165, you can delete the ""ftp_home"" directory, or simply edit user.properties to make the ftp account readonly.

While every single write to the camel ftp endpoint will then fail, the only notification of this is at DEBUG level.  In my opinion this should be at least WARN",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-11-17 17:31:01.153,,,no_permission,,,,,,,,,,,,,76605,,,Thu Jun 03 07:25:34 UTC 2010,,,,,,,0|i01n1j:,7502,,,,,,,,,"17/Nov/09 16:51;karlp;tested with 2.1-SNAPSHOT as well, dated: 20091117163007","17/Nov/09 17:31;davsclaus;The failed to write exception should be set on the Exchange so if you have any error handling configured you can take core of it there.

The producers etc should not double log the problem.","17/Nov/09 17:43;karlp;ok, I'll agree that the producers shouldn't.

Perhaps we can relabel this ticket.

I believe that the DefaultErrorHandler should log at INFO at least. I agree it shouldn't do anything like retries or redeliveries, and I agree that when you've got things setup, you'll have more specific error handling, but currently, without debug level logging, there's simply no notification at all that anything even went wrong. ","18/Nov/09 08:09;davsclaus;The issue is you route uses a consumer which just ignores any exceptions since you start a route with a timer.
When the Exchange is done and it has an exception the timer will just ignore it as it cannot handle exceptions.

It aught to log the exception at ERROR level in this name
org.apache.camel.component.timer",18/Nov/09 08:36;davsclaus;I will improve the TimerConsumer so it will log exchanges that have failed by default at ERROR level. Then you can see this in the log,18/Nov/09 08:47;davsclaus;trunk: 881699,"18/Nov/09 10:02;karlp;Same affects seda and direct.... :) And probably other places too.

I really think this belongs in the default error handler :)",03/Jun/10 07:25;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-cxf - Empty body causes http error 500 even for GET when using cxfbean,CAMEL-2183,12486812,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,wtam,davsclaus,davsclaus,17/Nov/09 10:03,03/Jun/10 07:25,14/Mar/19 02:42,17/Nov/09 17:35,2.0.0,,,,,,,,,,2.1.0,,,camel-cxf,,,,0,"CxfSoapBinding has a bug that it mandates a body to exist. But when you send a GET then there is of course no body.

The code below fixed this in the method {{getCxfInMessage}}
{code}
        // body can be empty in case of GET etc.
        InputStream body = message.getBody(InputStream.class);
        if (body != null) {
            answer.setContent(InputStream.class, body);
        } else if (message.getBody() != null) {
            // fallback and set the body as what it is
            answer.setContent(Object.class, body);
        }
{code}

Willem Tam can you review if that is okay? Maybe the code can be more finer to check the HTTP method and in cases of GET etc. it allows no body.

I will commit my fix to get the unit tests passing.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-11-17 16:36:54.004,,,no_permission,,,,,,,,,,,,,76606,,,Thu Jun 03 07:25:32 UTC 2010,,,,,,,0|i01n0v:,7499,,,,,,,,,17/Nov/09 10:25;davsclaus;William I have committed at rev: 881227.,17/Nov/09 16:36;wtam;The fix looks fine to me (although I wasn't the original author of this code).,17/Nov/09 17:35;davsclaus;Thanks William,03/Jun/10 07:25;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unable to start camel-example-guice-jms bundle after deploying into servicemix,CAMEL-2182,12486818,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,spindipr,spindipr,17/Nov/09 07:24,03/Jun/10 07:25,14/Mar/19 02:42,25/Nov/09 07:28,,,,,,,,,,,2.1.0,,,examples,,,,0,"1. Installed apache-camel 2.0.0-psc-01-00M2.
2. Applied the attached patch on the samples.
3. Compile the sample (camel-example-guice-jms) using ""mvn compile"" command
4. Install the camel sample into repository using ""mvn install"" command
5. Started the servicemix server
6. Installed below bundles into servicemix
	osgi:install wrap:org.apache.activemq/activemq-camel/5.3.1.0M1-fuse
	features:install camel-guice
 	osgi:install wrap:mvn:org.apache.camel/camel-example-guice-jms/2.0.0-psc-01-00M2
7. Start the bundles and observed that below exception is shown in the karaf console.

Exception in org.apache.camel.example.guice.jms.MyActivator.start() of bundle org.apache.camel.camel-example-guice-jms.",,,,,,,,,,,,,,,CAMEL-2225,,17/Nov/09 07:25;spindipr;NewExample.patch;https://issues.apache.org/jira/secure/attachment/12462830/NewExample.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2009-11-18 12:47:34.197,,,no_permission,,,,,,,,,,,,,76607,,,Thu Jun 03 07:25:32 UTC 2010,,,,,,,0|i01n0n:,7498,,,,,,,,,"18/Nov/09 12:47;njiang;I managed to deploy and start camel context successfully in Servicemix,
but I got the NPE when I drop the file into data directory.

After digging the code for a while I found current camel-guice component doesn't support the OSGi, we need to add a new OSGi version Module for it to use. ","19/Nov/09 13:37;davsclaus;This is not within the timeframe of 2.1 so I will move it to future.

camel-guice is not super needed in SMX at this point in time. Will be later.",25/Nov/09 07:28;njiang;http://svn.apache.org/viewvc?rev=884000&view=rev,03/Jun/10 07:25;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-example-trace can't work since camel 2.0 released.,CAMEL-2176,12486822,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,16/Nov/09 13:37,03/Jun/10 07:25,14/Mar/19 02:42,16/Nov/09 13:44,,,,,,,,,,,2.1.0,,,examples,,,,0,"After Camel 2.0, we move the JpaTraceEventMessage from camel-core to camel-jpa, and changed the package name.
It break the camel-example-trace, so we had to update the persistence.xml to use right version of JpaTraceEventMessage.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-06-03 07:25:29.815,,,no_permission,,,,,,,,,,,,,76608,,,Thu Jun 03 07:25:29 UTC 2010,,,,,,,0|i01mzb:,7492,,,,,,,,,16/Nov/09 13:44;njiang;http://svn.apache.org/viewvc?rev=880747&view=rev,03/Jun/10 07:25;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Initialization code of camel-cxf is not thread safe,CAMEL-2175,12486816,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,16/Nov/09 13:32,03/Jun/10 07:25,14/Mar/19 02:42,16/Nov/09 14:20,2.0.0,,,,,,,,,,2.1.0,,,camel-cxf,,,,0,"getCxfBinding is not thread safe in case multiple threads hit a CXF webserive at once and it hasnt been initialized before.

Code like this
{code}
    public CxfBinding getCxfBinding() {
        if (cxfBinding == null) {
            cxfBinding = new DefaultCxfBinding();   
            if (LOG.isDebugEnabled()) {
                LOG.debug(""Create default CXF Binding "" + cxfBinding);
            }
        }
        
        if (!cxfBindingInitialized.getAndSet(true) 
                && cxfBinding instanceof HeaderFilterStrategyAware) {
            ((HeaderFilterStrategyAware)cxfBinding)
                .setHeaderFilterStrategy(getHeaderFilterStrategy());
        }
        return cxfBinding;
    }
{code}

Is a false sense as the {{getAndSet}} will let other threads pass it with a cxfBinding that still may not have been initialized.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-11-16 22:58:53.748,,,no_permission,,,,,,,,,,,,,76609,,,Thu Jun 03 07:25:29 UTC 2010,,,,,,,0|i01mz3:,7491,,,,,,,,,"16/Nov/09 13:36;davsclaus;If you hit it concurrently you get NPEs

{code}
Nov 16, 2009 2:40:03 PM org.apache.cxf.phase.PhaseInterceptorChain doIntercept
WARNING: Interceptor has thrown exception, unwinding now
java.lang.NullPointerException
        at org.apache.camel.component.cxf.DefaultCxfBinding.propagateHeadersFromCxfToCamel(DefaultCxfBinding.java:406)
        at org.apache.camel.component.cxf.DefaultCxfBinding.populateExchangeFromCxfRequest(DefaultCxfBinding.java:209)
        at org.apache.camel.component.cxf.CxfConsumer$1.invoke(CxfConsumer.java:84)
        at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:58)
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:417)
        at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:269)
        at java.util.concurrent.FutureTask.run(FutureTask.java:123)
        at org.apache.cxf.workqueue.SynchronousExecutor.execute(SynchronousExecutor.java:37)
        at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:98)
        at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
        at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:104)
        at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.serviceRequest(JettyHTTPDestination.java:302)
        at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.doService(JettyHTTPDestination.java:266)
        at org.apache.cxf.transport.http_jetty.JettyHTTPHandler.handle(JettyHTTPHandler.java:70)
        at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765)
        at org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:230)
        at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)
        at org.mortbay.jetty.Server.handle(Server.java:324)
        at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:535)
        at org.mortbay.jetty.HttpConnection$RequestHandler.content(HttpConnection.java:880)
        at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:747)
        at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:218)
        at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404)
        at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:409)
        at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:520)
{code}","16/Nov/09 14:20;davsclaus;trunk: 880761.

Now using Camels Service which provides a {{start}} method where initialization logic should be placed.","16/Nov/09 22:58;wtam;Hi Claus, FYI the ""getAndSet"" there was to make sure that the CxfBinding was injected with HeaderFilterStrategy since HeaderFilterStrategy could be initialized after CxfBinding.  (We weren't guaranteed that setBinding() is called after setHeaderFilterStrategy().)  With your fix, the Camel's Service start() method will get called to perform the initializations which is good.  We shouldn't need that ""getAndSet"" anymore.  That is great.  Please also fix the same issue in RestletBinding.  thx.","17/Nov/09 05:05;davsclaus;I have fixed the same issue in camel-restlet

trunk: 881156.",03/Jun/10 07:25;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Routes created with Spring do not set parent on the processor definitions,CAMEL-2171,12486522,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,14/Nov/09 16:47,03/Jun/10 07:25,14/Mar/19 02:42,14/Nov/09 16:50,2.0.0,,,,,,,,,,2.1.0,,,camel-spring,,,,0,This causes a difference between Java DSL vs Spring XML routes as the former have set parent.,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76610,,,Thu Jun 03 07:25:28 UTC 2010,,,,,,,0|i01my7:,7487,,,,,,,,,14/Nov/09 16:50;davsclaus;trunk: 836212.,03/Jun/10 07:25;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Logger logs INFO level messages at DEBUG level,CAMEL-2168,12486776,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,janstey,psavage,psavage,12/Nov/09 19:26,03/Jun/10 07:25,14/Mar/19 02:42,12/Nov/09 19:36,1.6.1,2.0.0,,,,,,,,,1.6.2,2.1.0,,camel-core,,,,0,"The Camel logger logs INFO level messages at the DEBUG level. CAMEL-1048 fixed the problem in one of two cases (logging without an exception), but it is still broken for logging with an exception. Patch to fix this is attached.",,,,,,,,,,,,,,,,,12/Nov/09 19:27;psavage;CAMEL-2168.diff;https://issues.apache.org/jira/secure/attachment/12462893/CAMEL-2168.diff,,,,,1.0,,,,,,,,,,,,,,,,,,,2009-11-12 19:36:40.42,,,no_permission,,,,,,,,,,,,,76611,,,Thu Jun 03 07:25:27 UTC 2010,,,Patch Available,,,,0|i01mxj:,7484,,,,,,,,,"12/Nov/09 19:36;janstey;Nice catch. I've applied your patch in rev 835511.

Thanks!",12/Nov/09 19:42;davsclaus;Yeah nice catch. I spotted one earlier as well and I thought I have looked at all the others. But there was still one left. Shame on me.,03/Jun/10 07:25;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ftp uploads can fail: File operation failed:  Connection closed without indication.. Code: 421,CAMEL-2165,12486861,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,karlp,karlp,12/Nov/09 15:33,03/Jun/10 07:25,14/Mar/19 02:42,18/Nov/09 08:47,2.0.0,,,,,,,,,,2.1.0,,,camel-ftp,,,,0,"Looks like something that was fixed for CAMEL-444 didn't make it into 2.0?

On 2.0.0, this is not a warning, this is a fatal.


SEVERE: Exception occured during execution on the exchange: Exchange[Message: XXXXXX]
org.apache.camel.CamelExecutionException: Exception occured during execution on the exchange: Exchange[Message: XXXXX]
        at org.apache.camel.util.ObjectHelper.wrapCamelExecutionException(ObjectHelper.java:1027)
        at org.apache.camel.util.ExchangeHelper.extractResultBody(ExchangeHelper.java:479)
        at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:431)
        at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:106)
        at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:122)
        at org.apache.camel.impl.DefaultProducerTemplate.requestBody(DefaultProducerTemplate.java:266)
        at... into my code here...
Caused by: org.apache.camel.component.file.GenericFileOperationFailedException: File operation failed:  Connection closed without indication.. Code: 421
        at org.apache.camel.component.file.remote.FtpOperations.disconnect(FtpOperations.java:167)
        at org.apache.camel.component.file.remote.RemoteFileProducer.disconnect(RemoteFileProducer.java:77)
        at org.apache.camel.component.file.remote.RemoteFileProducer.handleFailedWrite(RemoteFileProducer.java:66)
        at org.apache.camel.component.file.GenericFileProducer.processExchange(GenericFileProducer.java:104)
        at org.apache.camel.component.file.remote.RemoteFileProducer.process(RemoteFileProducer.java:52)
        at org.apache.camel.processor.SendProcessor$1.doInProducer(SendProcessor.java:81)
        at org.apache.camel.processor.SendProcessor$1.doInProducer(SendProcessor.java:79)
        at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:141)
        at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:78)
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:61)
        at org.apache.camel.processor.RedeliveryErrorHandler.processExchange(RedeliveryErrorHandler.java:186)
        at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:155)
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:88)
        at org.apache.camel.processor.DefaultErrorHandler.process(DefaultErrorHandler.java:49)
        at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:148)
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:74)
        at org.apache.camel.processor.UnitOfWorkProcessor.processNext(UnitOfWorkProcessor.java:54)
        at org.apache.camel.processor.DelegateProcessor.process(DelegateProcessor.java:48)
        at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:45)
        at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:170)
        at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:156)
        at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:141)
        at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:155)
        at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:111)
        at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:101)
        at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:105)
        ... 37 more
Caused by: org.apache.commons.net.ftp.FTPConnectionClosedException: Connection closed without indication.
        at org.apache.commons.net.ftp.FTP.__getReply(FTP.java:297)


This is ""not what I want""  and there doesn't seem to be any keep alive or other option on the ftp2 component.",,,,,,,,,,,,,,,,,17/Nov/09 16:32;davsclaus;camel-ftp-2.1-SNAPSHOT.jar;https://issues.apache.org/jira/secure/attachment/12462892/camel-ftp-2.1-SNAPSHOT.jar,17/Nov/09 16:24;karlp;camel-ftp-bug-CAMEL-2165.zip;https://issues.apache.org/jira/secure/attachment/12462880/camel-ftp-bug-CAMEL-2165.zip,,,,2.0,,,,,,,,,,,,,,,,,,,2009-11-12 16:57:10.458,,,no_permission,,,,,,,,,,,,,76612,,,Thu Jun 03 07:25:26 UTC 2010,,,,,,,0|i01mwv:,7481,,,,,,,,,"12/Nov/09 16:57;davsclaus;The FTP write operation failed for some reason but the exception logged is shadowed by Camel trying to graceful disconnect.

Lowering bug priority as Camel should still indicate an exception back to the Exchange","12/Nov/09 16:58;davsclaus;trunk: 835443.


I have committed a fix on trunk to let the original exception propagate back.

Can you test it on you end?","12/Nov/09 17:24;karlp;I'll look into it, but I'm new to maven, and this is the first time I would need to get a private build jar into mysetup somehow.  :)","16/Nov/09 14:30;karlp;The error messages are better, but this doesn't fix the problem.

FTP consumers that get connection problems attempt to reopen the connection.  FTP producers open the connection once, and then simply fail if the connection has been closed.  I want the ftp producer to attempt to reopen the connection as well.

I currently work around this by having a timer triggered ftp write, to the same endpoint url, which works, but seems a little hacky.

        // hack to keep the ftp connection alive...
        from(""timer://foo?fixedRate=true&period=45000"")
                .setHeader(Exchange.FILE_NAME, constant("".keepalive.tmp""))
                .setBody(constant(""File written periodically to keep the ftp endpoint alive...""))
                .to(ftpDestinationURI);
","16/Nov/09 15:18;davsclaus;Yeah there is unfortunately nothing in the Commons FTP API for keep alive.

Kinda hate to have to do a pool in Camel to periodically keep the connections alive.","16/Nov/09 15:21;davsclaus;That is odd there is a pre write check on the producer

{code}
    @Override
    protected void preWriteCheck() throws Exception {
        connectIfNecessary();
        if (!loggedIn) {
            // must be logged in to be able to upload the file
            String message = ""Cannot connect/login to: "" + ((RemoteFileEndpoint) getEndpoint()).remoteServerInformation();
            throw new GenericFileOperationFailedException(message);
        }
    }
{code}

Karl can you try with 2.1 in all components.","16/Nov/09 16:16;karlp;I was trying with 2.1-SNAPSHOT for all camel, 2.1-SNAPSHOT ftp doesn't work with 2.0 core.

Here's the complete stack trace when I try and send something to FTP when the connection has been closed behind me...


16.11.2009 16:11:07 com.sun.xml.ws.server.sei.EndpointMethodHandler invoke
SEVERE: Exception occurred during execution on the exchange: Exchange[Message: MYMESSAGEHERE]
org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[Message:MYMESSAGEHERE]
	at org.apache.camel.util.ObjectHelper.wrapCamelExecutionException(ObjectHelper.java:1055)
	at org.apache.camel.util.ExchangeHelper.extractResultBody(ExchangeHelper.java:445)
	at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:431)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:106)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:122)
	at org.apache.camel.impl.DefaultProducerTemplate.requestBody(DefaultProducerTemplate.java:266)
	at is.vf.conan.ConanCore.openSubscription(ConanCore.java:31)
	at is.vf.conan.services.ConanBusiness.openSubscription(ConanBusiness.java:40)
	jetty/jaxws stuff snipped below here...
Caused by: org.apache.camel.component.file.GenericFileOperationFailedException: File operation failed:  Software caused connection abort: recv failed. Code: 226
	at org.apache.camel.component.file.remote.FtpOperations.buildDirectory(FtpOperations.java:227)
	at org.apache.camel.component.file.GenericFileProducer.writeFile(GenericFileProducer.java:173)
	at org.apache.camel.component.file.GenericFileProducer.processExchange(GenericFileProducer.java:126)
	at org.apache.camel.component.file.remote.RemoteFileProducer.process(RemoteFileProducer.java:52)
	at org.apache.camel.processor.SendProcessor$1.doInProducer(SendProcessor.java:97)
	at org.apache.camel.processor.SendProcessor$1.doInProducer(SendProcessor.java:95)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:146)
	at org.apache.camel.processor.SendProcessor.doProcess(SendProcessor.java:94)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:82)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
	at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:53)
	at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:82)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:93)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
	at org.apache.camel.processor.RedeliveryErrorHandler.processExchange(RedeliveryErrorHandler.java:232)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:162)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:91)
	at org.apache.camel.processor.DefaultErrorHandler.process(DefaultErrorHandler.java:49)
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:206)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:74)
	at org.apache.camel.processor.UnitOfWorkProcessor.processNext(UnitOfWorkProcessor.java:54)
	at org.apache.camel.processor.DelegateProcessor.process(DelegateProcessor.java:48)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:45)
	at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:179)
	at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:161)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:146)
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:160)
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:116)
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:101)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:105)
	... 42 more
Caused by: java.net.SocketException: Software caused connection abort: recv failed
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.read(SocketInputStream.java:129)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:264)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:306)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:158)
	at java.io.InputStreamReader.read(InputStreamReader.java:167)
	at java.io.BufferedReader.fill(BufferedReader.java:136)
	at java.io.BufferedReader.readLine(BufferedReader.java:299)
	at java.io.BufferedReader.readLine(BufferedReader.java:362)
	at org.apache.commons.net.ftp.FTP.__getReply(FTP.java:294)
	at org.apache.commons.net.ftp.FTP.sendCommand(FTP.java:490)
	at org.apache.commons.net.ftp.FTP.sendCommand(FTP.java:534)
	at org.apache.commons.net.ftp.FTP.sendCommand(FTP.java:583)
	at org.apache.commons.net.ftp.FTP.pwd(FTP.java:1270)
	at org.apache.commons.net.ftp.FTPClient.printWorkingDirectory(FTPClient.java:1800)
	at org.apache.camel.component.file.remote.FtpOperations.buildDirectory(FtpOperations.java:202)
	... 72 more","16/Nov/09 16:21;davsclaus;Well the FTP client code sees the connection as connected, hence the pre write check.

I wonder if we should add a send noop in the pre write check to see if that succeed, and in case of a problem force a disconnect and connect again.","16/Nov/09 16:51;davsclaus;trunk: 880842.

Karl can you try with latest fix where I have improved the preWriteCheck to send noop and reconnect in case of problems.","16/Nov/09 17:22;karlp;No good.. same stack trace too.  

I've got camel-ftp snapshot 20091116163620 I'm hoping that includes your changes?

","16/Nov/09 18:34;davsclaus;Thats to fast. Wait till tomorrow so the snapshot build does include the fix.

And you can enable DEBUG logging for org.apache.camel.component.remote which is the camel-ftp component.
It should log something about NOOP and reconnecting etc.","17/Nov/09 15:08;karlp;Ok, it's got a new stacktrace now, including the prewritecheck, so I'm assuming this is the right code...  It still doesn't work  though...  :)

I can probably try and package up my test setup for this, if it would help, I can probably make it as small as a timer routed to an ftp endpoint.. ?

I'll try and make a more minimal example and attach it here later today.



Caused by: org.apache.camel.component.file.GenericFileOperationFailedException: File operation failed:  Software caused connection abort: socket write error. Code: 226
	at org.apache.camel.component.file.remote.FtpOperations.disconnect(FtpOperations.java:165)
	at org.apache.camel.component.file.remote.RemoteFileProducer.disconnect(RemoteFileProducer.java:87)
	at org.apache.camel.component.file.remote.RemoteFileProducer.preWriteCheck(RemoteFileProducer.java:114)
	at org.apache.camel.component.file.GenericFileProducer.processExchange(GenericFileProducer.java:75)
	at org.apache.camel.component.file.remote.RemoteFileProducer.process(RemoteFileProducer.java:52)
	at org.apache.camel.processor.SendProcessor$1.doInProducer(SendProcessor.java:97)
	at org.apache.camel.processor.SendProcessor$1.doInProducer(SendProcessor.java:95)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:146)
	at org.apache.camel.processor.SendProcessor.doProcess(SendProcessor.java:94)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:82)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
	at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:53)
	at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:82)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:93)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
	at org.apache.camel.processor.RedeliveryErrorHandler.processExchange(RedeliveryErrorHandler.java:232)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:162)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:91)
	at org.apache.camel.processor.DefaultErrorHandler.process(DefaultErrorHandler.java:49)
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:206)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:74)
	at org.apache.camel.processor.UnitOfWorkProcessor.processNext(UnitOfWorkProcessor.java:54)
	at org.apache.camel.processor.DelegateProcessor.process(DelegateProcessor.java:48)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:45)
	at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:179)
	at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:161)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:146)
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:160)
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:116)
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:101)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:105)
	... 42 more
Caused by: java.net.SocketException: Software caused connection abort: socket write error
	at java.net.SocketOutputStream.socketWrite0(Native Method)
	at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:92)
	at java.net.SocketOutputStream.write(SocketOutputStream.java:136)
	at sun.nio.cs.StreamEncoder.writeBytes(StreamEncoder.java:202)
	at sun.nio.cs.StreamEncoder.implFlushBuffer(StreamEncoder.java:272)
	at sun.nio.cs.StreamEncoder.implFlush(StreamEncoder.java:276)
	at sun.nio.cs.StreamEncoder.flush(StreamEncoder.java:122)
	at java.io.OutputStreamWriter.flush(OutputStreamWriter.java:212)
	at java.io.BufferedWriter.flush(BufferedWriter.java:236)
	at org.apache.commons.net.ftp.FTP.sendCommand(FTP.java:472)
	at org.apache.commons.net.ftp.FTP.sendCommand(FTP.java:534)
	at org.apache.commons.net.ftp.FTP.sendCommand(FTP.java:583)
	at org.apache.commons.net.ftp.FTP.quit(FTP.java:794)
	at org.apache.commons.net.ftp.FTPClient.logout(FTPClient.java:697)
	at org.apache.camel.component.file.remote.FtpOperations.disconnect(FtpOperations.java:163)
	... 73 more","17/Nov/09 16:24;karlp;Attached small project that demonstrates failures.  Contains an apache ftp server configured to timeout connections every 5 seconds, and a camel route that writes a file every 10 seconds.

Every other file write fails, and a new connection is made the next time.","17/Nov/09 16:31;davsclaus;Karl thanks for the stacktrace.

I have just committed a new fix. Can you try again tomorrow?


trunk: 881360.",17/Nov/09 16:32;davsclaus;Or use this .jar attached which has the fix,"18/Nov/09 08:33;davsclaus;Thanks for the test project. I got it up and running and with the latest fix it can self heal the connection

As you can see from the log output the write does not fail anymore

{code}
2009-11-18 09:35:44,742 DEBUG [org.apache.camel.component.file.remote.RemoteFileProducer:foo] - Starting
2009-11-18 09:35:44,743 DEBUG [org.apache.camel.component.file.remote.RemoteFileProducer:foo] - Starting producer: Producer[ftp://camelUser@localhost:2121/autreq?passiveMode=true&password=camelUser]
2009-11-18 09:35:44,746 DEBUG [org.apache.camel.component.file.remote.RemoteFileProducer:foo] - Not already connected/logged in. Connecting to: Endpoint[ftp://camelUser@localhost:2121/autreq?passiveMode=true&password=camelUser]
2009-11-18 09:35:45,792 INFO [org.apache.camel.component.file.remote.RemoteFileProducer:foo] - Connected and logged in to: Endpoint[ftp://camelUser@localhost:2121/autreq?passiveMode=true&password=camelUser]
2009-11-18 09:35:45,793 DEBUG [org.apache.camel.component.file.remote.RemoteFileProducer:foo] - preWriteCheck send noop success: true
2009-11-18 09:35:45,856 INFO [org.apache.ftpserver.command.impl.STOR:pool-2-thread-1] - File uploaded /autreq/writeAttempt.txt
2009-11-18 09:35:45,857 DEBUG [org.apache.camel.component.file.remote.RemoteFileProducer:foo] - Wrote [autreq/writeAttempt.txt] to [Endpoint[ftp://camelUser@localhost:2121/autreq?passiveMode=true&password=camelUser]]
2009-11-18 09:35:54,681 ERROR [org.apache.camel.component.file.remote.RemoteFileProducer:foo] - org.apache.camel.component.file.GenericFileOperationFailedException: File operation failed:  Connection closed without indication.. Code: 226
2009-11-18 09:35:54,681 DEBUG [org.apache.camel.component.file.remote.RemoteFileProducer:foo] - preWriteCheck send noop success: false
2009-11-18 09:35:54,685 DEBUG [org.apache.camel.component.file.remote.RemoteFileProducer:foo] - preWriteCheck forcing a disconnect as noop failed
2009-11-18 09:35:54,685 DEBUG [org.apache.camel.component.file.remote.RemoteFileProducer:foo] - Disconnecting from: Endpoint[ftp://camelUser@localhost:2121/autreq?passiveMode=true&password=camelUser]
2009-11-18 09:35:54,685 DEBUG [org.apache.camel.component.file.remote.RemoteFileProducer:foo] - Not already connected/logged in. Connecting to: Endpoint[ftp://camelUser@localhost:2121/autreq?passiveMode=true&password=camelUser]
2009-11-18 09:35:54,689 INFO [org.apache.camel.component.file.remote.RemoteFileProducer:foo] - Connected and logged in to: Endpoint[ftp://camelUser@localhost:2121/autreq?passiveMode=true&password=camelUser]
2009-11-18 09:35:54,745 INFO [org.apache.ftpserver.command.impl.STOR:pool-2-thread-1] - File uploaded /autreq/writeAttempt.txt
2009-11-18 09:35:54,745 DEBUG [org.apache.camel.component.file.remote.RemoteFileProducer:foo] - Wrote [autreq/writeAttempt.txt] to [Endpoint[ftp://camelUser@localhost:2121/autreq?passiveMode=true&password=camelUser]]
2009-11-18 09:36:04,681 ERROR [org.apache.camel.component.file.remote.RemoteFileProducer:foo] - org.apache.camel.component.file.GenericFileOperationFailedException: File operation failed:  Connection closed without indication.. Code: 226
2009-11-18 09:36:04,681 DEBUG [org.apache.camel.component.file.remote.RemoteFileProducer:foo] - preWriteCheck send noop success: false
2009-11-18 09:36:04,681 DEBUG [org.apache.camel.component.file.remote.RemoteFileProducer:foo] - preWriteCheck forcing a disconnect as noop failed
2009-11-18 09:36:04,681 DEBUG [org.apache.camel.component.file.remote.RemoteFileProducer:foo] - Disconnecting from: Endpoint[ftp://camelUser@localhost:2121/autreq?passiveMode=true&password=camelUser]
2009-11-18 09:36:04,682 DEBUG [org.apache.camel.component.file.remote.RemoteFileProducer:foo] - Not already connected/logged in. Connecting to: Endpoint[ftp://camelUser@localhost:2121/autreq?passiveMode=true&password=camelUser]
2009-11-18 09:36:04,686 INFO [org.apache.camel.component.file.remote.RemoteFileProducer:foo] - Connected and logged in to: Endpoint[ftp://camelUser@localhost:2121/autreq?passiveMode=true&password=camelUser]
2009-11-18 09:36:04,741 INFO [org.apache.ftpserver.command.impl.STOR:pool-2-thread-1] - File uploaded /autreq/writeAttempt.txt
2009-11-18 09:36:04,741 DEBUG [org.apache.camel.component.file.remote.RemoteFileProducer:foo] - Wrote [autreq/writeAttempt.txt] to [Endpoint[ftp://camelUser@localhost:2121/autreq?passiveMode=true&password=camelUser]]
2009-11-18 09:36:14,681 ERROR [org.apache.camel.component.file.remote.RemoteFileProducer:foo] - org.apache.camel.component.file.GenericFileOperationFailedException: File operation failed:  Connection closed without indication.. Code: 226
2009-11-18 09:36:14,682 DEBUG [org.apache.camel.component.file.remote.RemoteFileProducer:foo] - preWriteCheck send noop success: false
2009-11-18 09:36:14,682 DEBUG [org.apache.camel.component.file.remote.RemoteFileProducer:foo] - preWriteCheck forcing a disconnect as noop failed
2009-11-18 09:36:14,682 DEBUG [org.apache.camel.component.file.remote.RemoteFileProducer:foo] - Disconnecting from: Endpoint[ftp://camelUser@localhost:2121/autreq?passiveMode=true&password=camelUser]
2009-11-18 09:36:14,682 DEBUG [org.apache.camel.component.file.remote.RemoteFileProducer:foo] - Not already connected/logged in. Connecting to: Endpoint[ftp://camelUser@localhost:2121/autreq?passiveMode=true&password=camelUser]
2009-11-18 09:36:14,686 INFO [org.apache.camel.component.file.remote.RemoteFileProducer:foo] - Connected and logged in to: Endpoint[ftp://camelUser@localhost:2121/autreq?passiveMode=true&password=camelUser]
2009-11-18 09:36:14,740 INFO [org.apache.ftpserver.command.impl.STOR:pool-2-thread-2] - File uploaded /autreq/writeAttempt.txt
2009-11-18 09:36:14,741 DEBUG [org.apache.camel.component.file.remote.RemoteFileProducer:foo] - Wrote [autreq/writeAttempt.txt] to [Endpoint[ftp://camelUser@localhost:2121/autreq?passiveMode=true&password=camelUser]]

Process finished with exit code 143
{code}",18/Nov/09 08:47;davsclaus;Should work now.,"18/Nov/09 10:05;karlp;Looks good :)

One minor nit, now that it reliably recovers, do we really need the log at ERROR level?

It would seem to be inconsistent with other areas, where even unhandled errors are only going out at DEBUG ;)",18/Nov/09 10:20;davsclaus;Well spotted lets see if we can get that ERROR out of the picture or to DEBUG since it safely recovers.,"18/Nov/09 11:14;davsclaus;Got rid of the ERROR log

trunk: 881721.",03/Jun/10 07:25;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
mvn install command is not packaging the jms folder for camel-example-cxf example.,CAMEL-2162,12486849,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,spindipr,spindipr,12/Nov/09 06:04,03/Jun/10 07:25,14/Mar/19 02:42,17/Nov/09 14:43,,,,,,,,,,,2.1.0,,,examples,,,,0,"1. Installed latest apache-camel
2. Applied the patch that is attached to [Camel-2155 | https://issues.apache.org/activemq/browse/CAMEL-2155]
3. Compile the sample using mvn compile
4. Install the camel sample into repository using ""mvn clean install"" command
5. Open the package (i.e. jar file) from <USERPROFILE>\.m2\repository\org\apache\camel\camel-example-cxf\<Camel-Version> folder and observe that jms folder is not there under ""org.apache.camel.example"" location

This can be resolved by modifying the existing ""properties"" tag to
<properties>
     <camel.osgi.export.pkg>
     	org.apache.camel.example.cxf.*;${camel.osgi.version},
     	org.apache.camel.example.camel.transport.*;${camel.osgi.version},
	+org.apache.camel.example.camel.jms.*;${camel.osgi.version}+
     </camel.osgi.export.pkg>
  </properties>

*After applying the above workaround, I am still facing some problems when we start the bundle. I will update this bug with the remaining errors also*",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-11-12 08:43:12.221,,,no_permission,,,,,,,,,,,,,76613,,,Thu Jun 03 07:25:24 UTC 2010,,,,,,,0|i01mw7:,7478,,,,,,,,,"12/Nov/09 08:43;njiang;Hi Sailaja，

The org.apache.camel.example.camel.jms is used for starting the camel from Java command, it is useless when you start it from Spring DM.
So we don't need to export that package in OSGi.
But since we start the activeMQ broker from the bundle , we need to import the activemq packages.

Willem
","16/Nov/09 07:53;njiang;@Sailaja,
Is there any update of your issue ?
Can you get camel-example-cxf to run in ServiceMix now ? 
 ","17/Nov/09 07:21;spindipr; According to your 1st comment, there is no need to export ""org.apache.camel.example.camel.jms"" package in OSGi but I found that  ""org.apache.camel.example.camel.jms"" class is added in the Import Package list, so when I start the bundle in servicemix I am getting below exception 

 *The bundle could not be resolved. Reason: Missing Constraint: Import-Package: org.apache.camel.example.jms; version=""0.0.0"" .*

I just tried removing the package from Import Package list and started the bundle. But I got the below exception

 *The bundle could not be resolved. Reason: Missing Constraint: Import-Package: org.apache.hello_world_soap_http; version=""0.0.0""*
 ","17/Nov/09 14:42;njiang;Just committed a fix[1] for running the camel-example-cxf within ServiceMix 4.
Please check out the latest camel trunk for it.

http://svn.apache.org/viewvc?rev=881304&view=rev","17/Nov/09 14:50;davsclaus;Willem you may need to do the same for the new examples in 2.1

camel-example-http-async
camel-example-cxf-async
camel-example-route-throttling",03/Jun/10 07:25;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ClassNotFoundException exceptions occurred after deploying camel-example-pojo_messaging into servicemix,CAMEL-2161,12486426,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,spindipr,spindipr,12/Nov/09 06:02,03/Jun/10 07:25,14/Mar/19 02:42,12/Nov/09 09:04,,,,,,,,,,,2.1.0,,,examples,,,,0,"1. Installed latest apache-camel
2. Applied the patch that is attached to [Camel-2155 | https://issues.apache.org/activemq/browse/CAMEL-2155]
3. Compile the sample (camel-example-pojo_messaging) using ""mvn compile"" command
4. Install the camel sample into repository using ""mvn install"" command
5. Started the service mix server
6. Installed below bundles into service mix
	osgi:install wrap:mvn:org.apache.activemq/activemq-camel/5.3.1.0M1-fuse
 	osgi:install wrap:mvn:org.apache.camel/camel-example-pojo-messaging/2.0.0-psc-01-00M2
7. Start the bundles and observed that below exception is shown in the karaf console.

org.springframework.beans.factory.BeanDefinitionStoreException: Failed to load type: org.apache.activemq.xbean.XBeanBrokerService. Reason: java.lang.ClassNotFoundException: org.apache.activemq.xbean.XBeanBrokerService; nested exception is java.lang.ClassNotFoundException: org.apache.activemq.xbean.XBeanBrokerService
	at org.apache.xbean.spring.context.v2c.XBeanQNameHelper.getBeanInfo(XBeanQNameHelper.java:75)
	at org.apache.xbean.spring.context.v2c.XBeanNamespaceHandler.getPropertyDescriptor(XBeanNamespaceHandler.java:576)
	at org.apache.xbean.spring.context.v2c.XBeanNamespaceHandler.tryParseNestedPropertyViaIntrospection(XBeanNamespaceHandler.java:564)
	at org.apache.xbean.spring.context.v2c.XBeanNamespaceHandler.addNestedPropertyElements(XBeanNamespaceHandler.java:535)
	at org.apache.xbean.spring.context.v2c.XBeanNamespaceHandler.parseBeanFromExtensionElement(XBeanNamespaceHandler.java:226)
	at org.apache.xbean.spring.context.v2c.XBeanNamespaceHandler.parseBeanFromExtensionElement(XBeanNamespaceHandler.java:271)
	at org.apache.xbean.spring.context.v2c.XBeanNamespaceHandler.parse(XBeanNamespaceHandler.java:155)
	at org.apache.xbean.spring.context.v2.XBeanNamespaceHandler.parse(XBeanNamespaceHandler.java:49)
	at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1297)
	at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1287)
	at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:135)
	at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.registerBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:92)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:507)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:398)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:342)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:310)
	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:143)
	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:178)
	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:149)
	at org.springframework.osgi.context.support.OsgiBundleXmlApplicationContext.loadBeanDefinitions(OsgiBundleXmlApplicationContext.java:176)
	at org.springframework.osgi.context.support.OsgiBundleXmlApplicationContext.loadBeanDefinitions(OsgiBundleXmlApplicationContext.java:142)
	at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:123)
	at org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:422)
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.access$800(AbstractDelegatedExecutionApplicationContext.java:69)
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext$3.run(AbstractDelegatedExecutionApplicationContext.java:269)
	at org.springframework.osgi.util.internal.PrivilegedUtils.executeWithCustomTCCL(PrivilegedUtils.java:85)
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.startRefresh(AbstractDelegatedExecutionApplicationContext.java:247)
	at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor.stageOne(DependencyWaiterApplicationContextExecutor.java:222)
	at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor.refresh(DependencyWaiterApplicationContextExecutor.java:175)
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.refresh(AbstractDelegatedExecutionApplicationContext.java:175)
	at org.springframework.osgi.extender.internal.activator.ContextLoaderListener$2.run(ContextLoaderListener.java:718)
	at java.lang.Thread.run(Thread.java:619)
Caused by: java.lang.ClassNotFoundException: org.apache.activemq.xbean.XBeanBrokerService
	at org.eclipse.osgi.internal.loader.BundleLoader.findClassInternal(BundleLoader.java:489)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:405)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:393)
	at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.loadClass(DefaultClassLoader.java:105)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:252)
	at org.apache.xbean.spring.context.v2c.XBeanQNameHelper.loadClass(XBeanQNameHelper.java:107)
	at org.apache.xbean.spring.context.v2c.XBeanQNameHelper.getBeanInfo(XBeanQNameHelper.java:72)
	... 31 more
	

*Note: These exceptions are resolved if we add <camel.osgi.import.pkg>org.apache.activemq.xbean,org.apache.activemq.broker,org.apache.activemq.pool,\*</camel.osgi.import.pkg> in the respective pom.xml under properties tag.*

*Same thing is observed for camel-example-management*",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-11-12 09:04:58.92,,,no_permission,,,,,,,,,,,,,76614,,,Thu Jun 03 07:25:24 UTC 2010,,,,,,,0|i01mvz:,7477,,,,,,,,,"12/Nov/09 09:04;njiang;camel trunk
http://svn.apache.org/viewvc?rev=835307&view=rev",03/Jun/10 07:25;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
onException - Should look up the hierarchy for exact matches to avoid being handled by Exception.class where an exact match existed,CAMEL-2158,12486837,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,11/Nov/09 07:09,03/Jun/10 07:25,14/Mar/19 02:42,11/Nov/09 08:33,1.6.1,2.0.0,,,,,,,,,2.1.0,,,camel-core,,,,0,"See nabble
http://old.nabble.com/Exception-handling-...-onException-to26215607.html

{code}
                onException(UnmarshalException.class).handled(true).to(""mock:ue"");
                
                onException(Exception.class).handled(true).to(""mock:exception"");

                from(""direct:start"")
                    .throwException(new UnmarshalException(""Could not unmarshal"", new IllegalArgumentException(""Damn"")));
{code}

The code above should be handled by the UnmarshalException.class as its the best candidate.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76615,,,Thu Jun 03 07:25:23 UTC 2010,,,,,,,0|i01mvb:,7474,,,,,,,,,11/Nov/09 08:33;davsclaus;trunk: 834801.,03/Jun/10 07:25;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-ftp - Connections may not be released,CAMEL-2157,12487660,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,11/Nov/09 05:58,03/Nov/10 05:10,14/Mar/19 02:42,11/Nov/09 06:12,1.6.1,,,,,,,,,,1.6.2,,,camel-ftp,,,,0,If running for a long time it appears that the SFTP component may not release used connections.,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76616,,,Wed Nov 11 06:12:15 UTC 2009,,,,,,,0|i01mv3:,7473,,,,,,,,,11/Nov/09 06:12;davsclaus;1.x: 834776.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"ActivityMonitorEngine uses ?1 parameters in JPAQL, which don't work with (at least) the hibernate JPA provider.",CAMEL-2156,12486869,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,karlp,karlp,11/Nov/09 01:39,03/Jun/10 07:25,14/Mar/19 02:42,21/Nov/09 11:39,2.0.0,,,,,,,,,,2.1.0,,,camel-bam,,,,0,"Trying to just replace my RouteBuilder with a ProcessBuilder to start moving towards using BAM. I converted everything over to JPA, to make bam happy, but then found that it still explodes :)  (Full stack trace below)

Line 80 of ActivityMonitorEngine has this JPAQL,
                        List<ActivityState> list = template.find(""select x from "" + ActivityState.class.getName() + "" x where x.timeOverdue < ?1"", timeNow);

The ?1 named/numbered parameter seems to not be supported by hibernate's JPA provider.

I can't find much of any documentation on this, could this just be made a normal positional?  I can't even try out the BAM module without this :(



2009-11-11 01:33:53,815 ERROR [org.apache.camel.bam.processor.ActivityMonitorEngine:ActivityMonitorEngine] - <Caught: org.springframework.dao.InvalidDataAccessApiUsageException: org.hibernate.QueryParameterException: could not locate named parameter [1]; nested exception is java.lang.IllegalArgumentException: org.hibernate.QueryParameterException: could not locate named parameter [1]>
org.springframework.dao.InvalidDataAccessApiUsageException: org.hibernate.QueryParameterException: could not locate named parameter [1]; nested exception is java.lang.IllegalArgumentException: org.hibernate.QueryParameterException: could not locate named parameter [1]
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:271)
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:97)
	at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:212)
	at org.springframework.orm.jpa.JpaAccessor.translateIfNecessary(JpaAccessor.java:152)
	at org.springframework.orm.jpa.JpaTemplate.execute(JpaTemplate.java:189)
	at org.springframework.orm.jpa.JpaTemplate.executeFind(JpaTemplate.java:151)
	at org.springframework.orm.jpa.JpaTemplate.find(JpaTemplate.java:311)
	at org.apache.camel.bam.processor.ActivityMonitorEngine$1.doInTransactionWithoutResult(ActivityMonitorEngine.java:80)
	at org.springframework.transaction.support.TransactionCallbackWithoutResult.doInTransaction(TransactionCallbackWithoutResult.java:33)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:128)
	at org.apache.camel.bam.processor.ActivityMonitorEngine.run(ActivityMonitorEngine.java:77)
	at java.lang.Thread.run(Thread.java:619)
Caused by: java.lang.IllegalArgumentException: org.hibernate.QueryParameterException: could not locate named parameter [1]
	at org.hibernate.ejb.QueryImpl.setParameter(QueryImpl.java:206)
	at org.hibernate.ejb.QueryImpl.setParameter(QueryImpl.java:261)
	at org.springframework.orm.jpa.JpaTemplate$9.doInJpa(JpaTemplate.java:316)
	at org.springframework.orm.jpa.JpaTemplate.execute(JpaTemplate.java:184)
	... 7 more
Caused by: org.hibernate.QueryParameterException: could not locate named parameter [1]
	at org.hibernate.engine.query.ParameterMetadata.getNamedParameterDescriptor(ParameterMetadata.java:99)
	at org.hibernate.engine.query.ParameterMetadata.getNamedParameterExpectedType(ParameterMetadata.java:105)
	at org.hibernate.impl.AbstractQueryImpl.determineType(AbstractQueryImpl.java:437)
	at org.hibernate.impl.AbstractQueryImpl.setParameter(AbstractQueryImpl.java:407)
	at org.hibernate.ejb.QueryImpl.setParameter(QueryImpl.java:201)
	... 10 more



Line 80","Spring 2.5.6, camel 2.0.0, hibernate 3.3.2.GA/3.4.0GA",,,,,,,,,,,,,,,,11/Nov/09 02:05;karlp;CAMEL-2156_example.zip;https://issues.apache.org/jira/secure/attachment/12462878/CAMEL-2156_example.zip,,,,,1.0,,,,,,,,,,,,,,,,,,,2009-11-12 05:31:16.27,,,no_permission,,,,,,,,,,,,,76617,,,Thu Jun 03 07:25:22 UTC 2010,,,,,,,0|i01muv:,7472,,,,,,,,,"11/Nov/09 02:05;karlp;Tiny little maven project that sets up a hibernate JPA template, and a completely empty ProcessBuilder from camel-bam.

mvn camel:run  will fail, and keep failing as fast as your machine can log and throw exceptions :)","11/Nov/09 03:07;karlp;I tried this with openJPA as well, but it gave me a slew of different errors.  I'd never used openJPA before though, so hard to say where the problem lay that way.",12/Nov/09 05:31;davsclaus;Maybe it should use :1 or what the syntax for JPA is. Can you try with that?,"21/Nov/09 11:39;davsclaus;trunk: 882885.

Now using findByNamedParam so it should work with Hibernate now.",03/Jun/10 07:25;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Client is not executed while deploying camel-example-jms-file into service mix,CAMEL-2155,12486865,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,spindipr,spindipr,10/Nov/09 12:57,03/Jun/10 07:25,14/Mar/19 02:42,10/Nov/09 14:22,,,,,,,,,,,2.1.0,,,examples,,,,0,"1. Installed latest apache-camel
2. Applied the attached patch on the samples.
3. Compile the sample (camel-example-jms-file) using mvn compile
4. Install the camel sample into repository using ""mvn clean install"" command
5. Open the package (i.e. jar file) from <USERPROFILE>\.m2\repository\org\apache\camel\camel-example-jms-file\<Camel-Version> folder and open the Manifest.MF file located in META-INF folder.
6. Added the below packages in Import-Packge list. (We are adding the below packges because, without these the deployment is failed with class not found exceptions)
	org.apache.activemq.xbean,org.apache.activemq.broker,org.apache.activemq.pool
7. Save the Manifest.MF and the jar file as well.
8. Started the servicemix server
9. Installed below bundles into servicemix
	osgi:install wrap:org.apache.activemq/activemq-camel/5.3.1.0M1-fuse
 	osgi:install wrap:mvn:org.apache.camel/camel-example-jms-file/2.0.0-psc-01-00M2
10. Start the bundles 
11. Observe that the bundles are started and active. No exceptions observed in the console and Karaf.log file.
12. Observe that, the JmsToFileClient.java is not used any where in the route. This code actually sends some test messages to the queue(test.queue) which is used for testing the sample.
",,,,,,,,,,,,,,,,,10/Nov/09 12:58;spindipr;example-new.patch;https://issues.apache.org/jira/secure/attachment/12462839/example-new.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2009-11-10 14:12:07.482,,,no_permission,,,,,,,,,,,,,76618,,,Thu Jun 03 07:25:21 UTC 2010,,,Patch Available,,,,0|i01mun:,7471,,,,,,,,,"10/Nov/09 14:12;njiang;@Sailaja
Yes, the client just used to send the message to server which host in ServiceMix.
Thanks for your testing , I just tried to deploy the example into Fuse ESB 4.2-SNAPSHOT with some changes on the pom.xml and the JmsToFileClient.java.
I will commit my change and update the README for it.



","10/Nov/09 14:22;njiang;trunk 
 http://svn.apache.org/viewvc?rev=834475&view=rev",03/Jun/10 07:25;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FTP Component issue with tempPrefix or tempFileName,CAMEL-2153,12486866,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,crive,crive,09/Nov/09 14:37,03/Jun/10 07:25,14/Mar/19 02:42,10/Nov/09 13:32,2.1.0,,,,,,,,,,2.1.0,,,camel-ftp,,,,0,"using FTP component to push files via FTP I am facing issues pushing a file on subfolder when using tempPrefix or tempFileName. 

route sample: 

from(""direct:start"").to(""ftp://username@ipaddress?password=mypass&fileName=./camel/test/message.txt&tempFileName=${file:name.noext}.tmp"");

no errors are raised if the final destination file doesn't exists, if it exists following error is raised: 

Exception in thread ""main"" org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[Message: Message content] 
        at org.apache.camel.util.ObjectHelper.wrapCamelExecutionException(ObjectHelper.java:1055) 
        at org.apache.camel.util.ExchangeHelper.extractResultBody(ExchangeHelper.java:446) 
        at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:431) 
        at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:427) 
        at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:112) 
        at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:117) 
        at com.opta.camel.test.FTPTester.main(FTPTester.java:30) 
Caused by: java.lang.NullPointerException 
        at org.apache.camel.component.file.remote.FtpOperations.existsFile(FtpOperations.java:372)
        at org.apache.camel.component.file.GenericFileProducer.processExchange(GenericFileProducer.java:92) 
        at org.apache.camel.component.file.remote.RemoteFileProducer.process(RemoteFileProducer.java:52) 
        at org.apache.camel.processor.SendProcessor$1.doInProducer(SendProcessor.java:86) 
        at org.apache.camel.processor.SendProcessor$1.doInProducer(SendProcessor.java:84) 
        at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:146) 
        at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:83) 
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67) 
        at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:53) 
        at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:82) 
        at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:85) 
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67) 
        at org.apache.camel.processor.RedeliveryErrorHandler.processExchange(RedeliveryErrorHandler.java:232) 
        at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:162) 
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:91) 
        at org.apache.camel.processor.DefaultErrorHandler.process(DefaultErrorHandler.java:49) 
        at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:201) 
        at org.apache.camel.processor.UnitOfWorkProcessor.processNext(UnitOfWorkProcessor.java:54) 
        at org.apache.camel.processor.DelegateProcessor.process(DelegateProcessor.java:48) 
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67) 
        at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:45) 
        at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:179) 
        at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:161) 
        at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:146) 
        at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:160) 
        at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:98) 
        at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:97) 
        at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:110) 
        ... 2 more","OS: Windows XP where application runs, Windows 2003 is the FTP server.",,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-11-10 06:00:51.786,,,no_permission,,,,,,,,,,,,,76619,,,Thu Jun 03 07:25:20 UTC 2010,,,,,,,0|i01mu7:,7469,,,,,,,,,"10/Nov/09 06:00;davsclaus;Can you try with latest code as I cannot reproduce this error and the stacktrace line numbers have changed since.

I will add an unit test I have used, but the Apache SVN is not working currently so I cant commit it.","10/Nov/09 07:23;davsclaus;Committed now
http://svn.apache.org/viewvc?rev=834371&view=rev","10/Nov/09 13:05;crive;I've tried the same route with a bunch of FTP Server, in some cases it works (no issues on org.apache.camel.component.file.remote.FtpOperations.existsFile).

When directory where to place the file is empty or doesn't exist
client.listNames(directory); returns an empty array in some ftp servers or null in some others
when client.listNames returns null the camel runs in NullPointerException

here is the piece of code where the exception is raised:

            String[] names = client.listNames(directory);
            for (String existing : names) {
                if (existing.equals(onlyName)) {
                    return true;
                }
            }

I guess you should just return false in case names is null.
","10/Nov/09 13:32;davsclaus;trunk: 834460.

Thanks Marco I have fixed the NPE.

PS: You may want to use file:onlyname.noext in the tempFile option to avoid leading paths if you upload files that contains paths.",03/Jun/10 07:25;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RSS Component - parameter filtering not working,CAMEL-2150,12486768,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,iandebeer,iandebeer,09/Nov/09 09:35,17/Nov/09 05:06,14/Mar/19 02:42,16/Nov/09 20:31,2.0.0,,,,,,,,,,2.1.0,,,camel-rss,,,,0,"I have tried to sort RRS feeds or to split the entries  as described in the documentation. The problem is that the parameters that are to be consumed by Camel are passed through to the endpoint, who does not understand the parameters.
Here is my code:  from(""rss:"" + feedLocation+ ""?sortEntries=true&feedHeader=true"").marshal().rss()...
where feedLocation = ""http://www.iafrica.com/pls/cms/grapevine.xml""
It results in:
java.io.FileNotFoundException: http://www.iafrica.com/pls/cms/grapevine.xml?feedHeader=true&sortEntries=true
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1311)
	at java.net.URL.openStream(URL.java:1010)
	at org.apache.camel.component.rss.RssUtils.createFeed(RssUtils.java:32)
	at org.apache.camel.component.rss.RssEntryPollingConsumer.createFeed(RssEntryPollingConsumer.java:54)
	at org.apache.camel.component.feed.FeedEntryPollingConsumer.poll(FeedEntryPollingConsumer.java:42)
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:99)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:181)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:205)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:637)",Mac OS X 10.6.1; JDK 6 64 bit; Camel 2.0,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-11-10 07:23:11.648,,,no_permission,,,,,,,,,,,,,76620,,,Tue Nov 17 05:06:08 UTC 2009,,,,,,,0|i01mtj:,7466,Regression,,,,,,,,"10/Nov/09 07:23;davsclaus;trunk: 834374.

Ian thanks for reporting. You can try with latest code and see if it now works on your end.","11/Nov/09 11:59;iandebeer;Hi Claus 
I have checked out the latest Camel SNAPSHOT from svn, build and  tested your fix, but now I get:
java.lang.IllegalArgumentException: feedUri must be specified
	at org.apache.camel.util.ObjectHelper.notNull(ObjectHelper.java:242)
	at org.apache.camel.component.feed.FeedEndpoint.createConsumer(FeedEndpoint.java:66)
	at org.apache.camel.impl.EventDrivenConsumerRoute.addServices(EventDrivenConsumerRoute.java:57)
	at org.apache.camel.impl.DefaultRoute.getServicesForRoute(DefaultRoute.java:81)
	at org.apache.camel.impl.RouteService.doStart(RouteService.java:77)
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)
	at org.apache.camel.impl.DefaultCamelContext.startRouteService(DefaultCamelContext.java:937)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:571)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:924)
	at org.apache.camel.impl.DefaultCamelContext.addRouteDefinitions(DefaultCamelContext.java:517)
	at org.apache.camel.builder.RouteBuilder.populateRoutes(RouteBuilder.java:270)
	at org.apache.camel.builder.RouteBuilder.checkInitialized(RouteBuilder.java:260)
	at org.apache.camel.builder.RouteBuilder.addRoutesToCamelContext(RouteBuilder.java:241)
	at org.apache.camel.impl.DefaultCamelContext.addRoutes(DefaultCamelContext.java:507)
	at com.zenaptix.contentServer.Launcher$1.run(Launcher.java:146)
Any ideas?
Regards
Ian
","11/Nov/09 12:11;davsclaus;@Ian

Can you post the endpoint URL you use, eg the complete endpoint uri with all parameters etc.","11/Nov/09 12:30;iandebeer;rss:http://www.iafrica.com/pls/cms/grapevine.xml?feedHeader=true&sortEntries=true
i have also tried rss://http://www.iafrica.com/pls/cms/grapevine.xml?feedHeader=true&sortEntries=true","11/Nov/09 12:50;davsclaus;Could you try with, just to see if that works at least

{code}
from(""rss:foo?feedUri=http://www.iafrica.com/pls/cms/grapevine.xml&feedHeader=true&sortEntries=true"") 
{code}","12/Nov/09 04:35;iandebeer;It works fine in this format - I noticed that on my side there are sometimes parameters added to the FeedUri from the database application that drives the connections - so I also had to replace the ""?"" there with a ""&"", so that"" I I do not end up with multiple ""?"" in the uri. This could have been the issue that triggered the whole problem in the first place. It is now resolved - thanks for your help.
 ",12/Nov/09 05:29;davsclaus;Thanks Ian,"13/Nov/09 07:04;iandebeer;Thanks, the RSS parameters are now parsed correctly but another issue manifest itself: 
I am retrieving RSS feedUri's from a database. Within a RouteBuilder I create multiple routes: one for each of the uri entries in the recordset, routing the RSS entry to a AMQ Topic. The feedUri do haver parameters in themselves - e.g.  rss:foo?feedUri=http://www.iafrica.com/pls/cms/grapevine.xml&sortEntries=true&consumer.initialDelay=1000&p_section=sa_news contains some RSS component parameters and some for the remote RSS server (from the example: p_section=sa_news) The behaviour I am now detecting indicates that the parameters that are consumed by the remote RSS server are all the same. It is as if the p_section parameter contains the same value  across all feedUri's and instead of retrieving local, international, and financial news it retrieves local news on all routes while still putting it on the correct AMQ Topic. This did not happen prior to the recent fix.  ","13/Nov/09 08:54;davsclaus;trunk: 835779.

Ian can you test it again with the change I just committed?","13/Nov/09 11:09;iandebeer;Thanks for you effort in getting this fixed - your prompt responses are much appreciated.
I tested but the issue remains -  I have two feeds:
rss:foo?feedUri=http://www.iafrica.com/pls/cms/grapevine.xml&sortEntries=true&consumer.initialDelay=1000&p_section=sa_news 
- which I send to Topic  za.co.vine.localnews 
rss:foo?feedUri=http://www.iafrica.com/pls/cms/grapevine.xml&sortEntries=true&consumer.initialDelay=2000&p_section=world_news 
- which I send to topic za.co.vine.internationalnews
The issue is that both topics are populated with stories coming from the sa_news feed - and nothing from the world_news feed.
Both routes are functioning, it is just that they seem to use the same RSS feed. 
I am not sure if I can resolve this by putting these feeds into separate RouteBuilders - it would be kludgy though.
 
","13/Nov/09 11:18;davsclaus;Have you recompiled all camel components? The fix is in camel-atom which camel-rss uses?

And can you post your route so I can use it to track down the issue?","13/Nov/09 20:46;iandebeer;I have checked out the latest and did a mvn install - I can not use 2.1-SNAPSHOT in my project because there seems to be some camel/SPring context issues, but I have replaced both the Atom and RSS jars with the newly built. The problem is still there.
Here are the routes:
 int delay = 0;
        while (resultSet.next()) {
          delay = delay + 1000;
          String parameters = rssParameters + ""&consumer.initialDelay="" + delay;
          String feedLocation = resultSet.getString(""feed_location"");
          String topicLocation = resultSet.getString(""topic_location"");
          String name = resultSet.getString(""name"");
          if (feedLocation.contains(""?"")) {
            feedLocation = feedLocation.replace(""?"", parameters + ""&"");
          }
          else {
            feedLocation = feedLocation + parameters;
          }
          String rssUri = ""rss:foo?feedUri=""   + feedLocation;
          System.out.println(""feed("" + (i++) + "") = "" + name + "": "" + rssUri + "" - "" + topicLocation);
          from(rssUri).marshal().rss().
              filter().method(""rssFilter"", ""filter"").
              to(""bean:responder?method=scrubRSSFeed"").                                       
              to(""activemq:topic:VirtualTopic."" + topicLocation + ""?explicitQosEnabled=true&timeToLive="" + (messageLifeTime * 60000));
        }","14/Nov/09 04:26;iandebeer;I have had a look at the responses provided by the remote RSS server: feed://www.iafrica.com/pls/cms/grapevine.xml
If I do not provide a ""?p_section"" parameter in the url, then the feed always returns sa_news, which is the behaviour we are seeing. So it appears as if the Camel-RSS component somehow gobbles up the parameters intended for the endpoint.","16/Nov/09 15:47;davsclaus;Using this route
{code}
                from(""rss:http://www.iafrica.com/pls/cms/grapevine.xml?consumer.initialDelay=2000"").to(""mock:a"");

                from(""rss:http://www.iafrica.com/pls/cms/grapevine.xml?p_section=world_news&consumer.initialDelay=3000"").to(""mock:b"");
{code}

I get different data on mock a and mock b

*mock:a*
SyndContentImpl.value=ANC repositioning in Cape
SyndContentImpl.type=null
SyndContentImpl.interface=interface com.sun.syndication.feed.synd.SyndContent
SyndContentImpl.mode=null


*mock:b*
SyndContentImpl.value=Clinton clear on US aims 
SyndContentImpl.type=null
SyndContentImpl.interface=interface com.sun.syndication.feed.synd.SyndContent
SyndContentImpl.mode=null
","16/Nov/09 15:49;davsclaus;And these are the feedUrl resolved on those two endpoints

{code}
// the first route
http://www.iafrica.com/pls/cms/grapevine.xml

// and the 2nd route
http://www.iafrica.com/pls/cms/grapevine.xml?p_section=world_news
{code}

So I cannot reproduce the issue you claim","16/Nov/09 15:53;davsclaus;I have added an unit test in trunk: 880816.
Which I have used for testing","16/Nov/09 20:29;iandebeer;Thanks for all your trouble. I have refactored my code to make it fully compliant with the 2.1-SNAPSHOT (As I mentioned earlier, I had problems with the SpringApplicationContext and only used the Atom and RSS jars from 2.1 - the rest was still 2.0.0). With the refactored code and the all latest 2.1-SNAPSHOT jars, I can confirm that the RSS-component works correctly. I have closed the issue.",16/Nov/09 20:31;iandebeer;Thanks - it work just fine.,17/Nov/09 05:06;davsclaus;Ian great to hear that it now works.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Type converter - Should respect Future ExecutionException as not failed to convert but some other error,CAMEL-2146,12486884,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,06/Nov/09 14:37,03/Jun/10 07:25,14/Mar/19 02:42,06/Nov/09 14:38,2.0.0,,,,,,,,,,2.1.0,,,camel-core,,,,0,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76621,,,Thu Jun 03 07:25:18 UTC 2010,,,,,,,0|i01msn:,7462,,,,,,,,,06/Nov/09 14:38;davsclaus;trunk: 833413.,03/Jun/10 07:25;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-http - creating http uri may contain special endpoint options,CAMEL-2145,12486854,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,06/Nov/09 14:17,03/Jun/10 07:25,14/Mar/19 02:42,06/Nov/09 14:46,1.6.1,2.0.0,,,,,,,,,1.6.2,2.1.0,,camel-http,,,,0,"For example sending to an endpoint as follows

{code}
to(""http://www.google.com?throwExceptionOnFailure=false"");
{code}

Could potentially added {{throwExceptionOnFailure}} as a parameter but its an endpoint parameter not a HTTP parameter.
This issue is for components that build on top of camel-http.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76622,,,Thu Jun 03 07:25:18 UTC 2010,,,,,,,0|i01msf:,7461,,,,,,,,,06/Nov/09 14:46;davsclaus;trunk: 833419,06/Nov/09 14:54;davsclaus;1.x: 833423.,03/Jun/10 07:25;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
A null-Message to a cxf-endpoint (e.g. HTTP-GET) can disable accepting regular requests,CAMEL-2144,12486882,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,jonny.newald,jonny.newald,06/Nov/09 13:38,03/Jun/10 07:25,14/Mar/19 02:42,16/Nov/09 07:50,2.0.0,,,,,,,,,,2.1.0,,,camel-core,camel-cxf,,,0,"Start a fine configured system with came-cxf consumer endpoint using http. Make some tests with valid SOAP-Messages. Then just send a HTTP-Get-Request to the endpoint (e.g. with Browser). You'll get some kind of Exception saying

java.lang.ClassCastException: org.apache.cxf.message.MessageContentsList cannot be cast to org.w3c.dom.Node

Ok, this could be interpreted as ""There is no content to convert into Node..."" as, if you debug, you'll see, that an empty MessageContentsList is provided by camel-cxf as the body of the camel message. Of course, if the Request would contain a body, the camel body would be a non empty MessageContentsList and the type converter mechanism would find a way to convert the list into a w3c Document, but that's not the point. The Bug is, that this null-body-request puts the DefaultTypeConverter into a state, that let always return null for bodies of type MessageContentsList, even if it's not empty (which is normal). I think that there is certain 'misses'-map responsible for that kind of 'miss'-state...",,,,,,,,,,,,,,,,,11/Nov/09 09:14;jonny.newald;ServiceProvider.java;https://issues.apache.org/jira/secure/attachment/12462929/ServiceProvider.java,10/Nov/09 06:33;davsclaus;camel-2144.patch;https://issues.apache.org/jira/secure/attachment/12462814/camel-2144.patch,11/Nov/09 09:14;jonny.newald;camel-bug.xml;https://issues.apache.org/jira/secure/attachment/12462927/camel-bug.xml,11/Nov/09 09:14;jonny.newald;service.wsdl;https://issues.apache.org/jira/secure/attachment/12462928/service.wsdl,,4.0,,,,,,,,,,,,,,,,,,,2009-11-10 06:33:39.266,,,no_permission,,,,,,,,,,,,,76623,,,Thu Jun 03 07:25:17 UTC 2010,,,,,,,0|i01ms7:,7460,,,,,,,,,10/Nov/09 06:33;davsclaus;A patch with a suggestion for a fix,"10/Nov/09 06:35;davsclaus;Willem can you take a look at this later. I have attached a suggestion for a patch. The basic idea is to return VOID when you cannot convert at this given time, such as when the MessageContextList contains empty bodies etc.

You may want to work with it a bit and add some unit test, e.g. that send in a HTTP GET with no XML data and then later do a real webservice call.","10/Nov/09 10:54;njiang;@Jonny

I tried to reproduce the error on the [CxfConsumerTest | https://svn.apache.org/repos/asf/camel/trunk/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfConsumerTest.java] , but no luck with it.
Can you submit the stack trace and the  route to this JIRA?
","10/Nov/09 10:59;njiang;@Claus, 
I tried to apply your patch and tried to feed the converter with some empty MessageContentsList.
I found your patch doesn't change anything :)
The last line's return null will cover the situation of empty MessageContextList.",10/Nov/09 11:10;davsclaus;The idea is to return Void when you *cannot* convert such as in a situation where there MessageContextList is invalid. Then it wont be regarded as a *miss* and Camel will try this converter combination later on.,"11/Nov/09 09:14;jonny.newald;Test procedure after starting camel context:

1. Send a ""ping""-Message to http://localhost:8080/test/service (HTTP-POST, e.g. with soapUI-Tool):

<soapenv:Envelope xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:ser=""test/service"">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:ping/>
   </soapenv:Body>
</soapenv:Envelope>

You should get a response like this:

<soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/"">
   <soap:Body>
      <pong xmlns=""test/service""/>
   </soap:Body>
</soap:Envelope>

2. Open browser with URL http://localhost:8080/test/service (=HTTP-GET)

You'll get a server-fault with the message of the exception you can see with stacktrace in stdout-console:

org.apache.cxf.interceptor.Fault: org.apache.cxf.message.MessageContentsList cannot be cast to org.w3c.dom.Node
        at org.apache.camel.component.cxf.CxfConsumer$1.invoke(CxfConsumer.java:95)
        at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:57)
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
        at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
        at java.util.concurrent.FutureTask.run(FutureTask.java:138)
        at org.apache.cxf.workqueue.SynchronousExecutor.execute(SynchronousExecutor.java:37)
        at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:95)
        at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
        at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:89)
        at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.serviceRequest(JettyHTTPDestination.java:302)
        at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.doService(JettyHTTPDestination.java:265)
        at org.apache.cxf.transport.http_jetty.JettyHTTPHandler.handle(JettyHTTPHandler.java:70)
        at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765)
        at org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:230)
        at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)
        at org.mortbay.jetty.Server.handle(Server.java:324)
        at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:535)
        at org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:865)
        at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:539)
        at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:212)
        at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404)
        at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:409)
        at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:520)
Caused by: java.lang.ClassCastException: org.apache.cxf.message.MessageContentsList cannot be cast to org.w3c.dom.Node
        at com.sun.org.apache.xpath.internal.jaxp.XPathExpressionImpl.eval(XPathExpressionImpl.java:116)
        at com.sun.org.apache.xpath.internal.jaxp.XPathExpressionImpl.eval(XPathExpressionImpl.java:98)
        at com.sun.org.apache.xpath.internal.jaxp.XPathExpressionImpl.evaluate(XPathExpressionImpl.java:180)
        at org.apache.camel.builder.xml.XPathBuilder.evaluateAs(XPathBuilder.java:438)
        at org.apache.camel.builder.xml.XPathBuilder.matches(XPathBuilder.java:104)
        at org.apache.camel.processor.FilterProcessor.process(FilterProcessor.java:41)
        at org.apache.camel.processor.RedeliveryErrorHandler.processExchange(RedeliveryErrorHandler.java:186)
        at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:155)
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:88)
        at org.apache.camel.processor.DefaultErrorHandler.process(DefaultErrorHandler.java:49)
        at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:148)
        at org.apache.camel.processor.UnitOfWorkProcessor.processNext(UnitOfWorkProcessor.java:54)
        at org.apache.camel.processor.DelegateProcessor.process(DelegateProcessor.java:48)
        at org.apache.camel.component.cxf.CxfConsumer$1.invoke(CxfConsumer.java:85)
        ... 22 more

That could be treated as ""ok"" because HTTP-GET doesn't make sense in this case.

3. Repeat step 1 and instead of getting the expected pong-response you'll get the same exception with same stacktrace as in step 2","16/Nov/09 07:49;njiang;Yes, I can reproduce the issue.
This looks like the Null Message will make the cxfConverter treat the MessageContentsList to Node be impossible if there is a null message passed in.

Claus' fix resolved this issue, and I just added a test to verify it.

","16/Nov/09 07:50;njiang;trunk
http://svn.apache.org/viewvc?rev=880644&view=rev",03/Jun/10 07:25;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Some methods of SftpOperations create streams that are never closed,CAMEL-2139,12487032,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,their,their,06/Nov/09 02:53,03/Jun/10 07:25,14/Mar/19 02:42,06/Nov/09 05:49,2.0.0,,,,,,,,,,2.1.0,,,camel-ftp,,,,0,"Where SftpOperations creates streams for storing or retrieving files via ChannelSftp, these streams are not always closed. For example, the retrieveFileToStreamInBody method creates an OutputStream object, but never closes it.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-11-06 05:26:44.85,,,no_permission,,,,,,,,,,,,,76624,,,Thu Jun 03 07:25:15 UTC 2010,,,,,,,0|i01mr3:,7455,,,,,,,,,06/Nov/09 05:26;davsclaus;Well spotted,06/Nov/09 05:49;davsclaus;trunk: 833304.,03/Jun/10 07:25;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The converter's MandatoryConvert method doesn't throw the exception when the value is null,CAMEL-2133,12486281,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,04/Nov/09 12:23,03/Jun/10 07:25,14/Mar/19 02:42,04/Nov/09 12:31,2.0.0,2.0-M1,2.0-M2,2.0-M3,,,,,,,2.1.0,,,camel-core,,,,0,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-11-04 14:02:07.435,,,no_permission,,,,,,,,,,,,,76626,,,Thu Jun 03 07:25:12 UTC 2010,,,,,,,0|i01mpj:,7448,,,,,,,,,"04/Nov/09 12:31;njiang;trunk
http://svn.apache.org/viewvc?rev=832723&view=rev
","04/Nov/09 14:02;davsclaus;Had to fix an issue with the bean component because if this change

trunk: 832745",03/Jun/10 07:25;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jms - Sending Object message should fail if payload cannot be converted to serializable,CAMEL-2132,12486896,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,04/Nov/09 10:12,03/Jun/10 07:25,14/Mar/19 02:42,04/Nov/09 10:46,2.0.0,,,,,,,,,,2.1.0,,,camel-jms,,,,0,"If not a null message is created and send.

See nabble:
http://old.nabble.com/JPA%3A-Could-not-pass-Object-from-jpa-to-jms-to26160124.html",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76627,,,Thu Jun 03 07:25:12 UTC 2010,,,,,,,0|i01mpb:,7447,,,,,,,,,04/Nov/09 10:46;davsclaus;trunk: 832702.,03/Jun/10 07:25;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Misleading exception when a Camel-CXF Service call times out (Null InputStream is not a valid argument),CAMEL-2129,12486711,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,chris@die-schneider.net,chris@die-schneider.net,03/Nov/09 13:01,15/Nov/09 08:31,14/Mar/19 02:42,11/Nov/09 01:52,2.0.0,,,,,,,,,,1.6.2,2.1.0,,camel-cxf,,,,0,"We use camel-cxf and camel-jms to offer CXF services over SOAP/JMS.

When the client calls the service by using the generated stub code and a timeout occurs I get an exception ""Null InputStream is not a valid argument"". I would rather expect something like ""Timeout calling service"". Full stack trace is attached below.

The routing config is attached below.
<client id=""customerService"" xmlns=""http://cxf.apache.org/jaxws""
xmlns:service=""http://examples.etg.services.enbw.net/""
  serviceName=""service:CustomerService""
  endpointName=""service:CustomerServiceEndpoint""
  serviceClass=""net.enbw.services.etg.examples.customerservice.CustomerServiceV1""
  address=""camel://direct:client"">
</client>

<camelContext id=""camelContext"" trace=""false"" xmlns=""http://camel.apache.org/schema/spring"">
  <route>
    <from uri=""direct:client""/>
    <to uri=""jms://queue.net.enbw.services.etg.examples.customerservice.CustomerService"" />
  </route>
</camelContext>

------
03.11.2009 13:20:58 org.apache.cxf.phase.PhaseInterceptorChain doIntercept
WARNUNG: Interceptor has thrown exception, unwinding now
java.lang.IllegalArgumentException: Null InputStream is not a valid argument
	at com.ctc.wstx.stax.WstxInputFactory.createSR(WstxInputFactory.java:614)
	at com.ctc.wstx.stax.WstxInputFactory.createXMLStreamReader(WstxInputFactory.java:324)
	at org.apache.cxf.staxutils.StaxUtils.createXMLStreamReader(StaxUtils.java:879)
	at org.apache.cxf.interceptor.StaxInInterceptor.handleMessage(StaxInInterceptor.java:83)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
	at org.apache.cxf.endpoint.ClientImpl.onMessage(ClientImpl.java:664)
	at org.apache.camel.component.cxf.transport.CamelConduit$CamelOutputStream.handleResponse(CamelConduit.java:191)
	at org.apache.camel.component.cxf.transport.CamelConduit$CamelOutputStream.commitOutputMessage(CamelConduit.java:183)
	at org.apache.camel.component.cxf.transport.CamelConduit$CamelOutputStream.doClose(CamelConduit.java:153)
	at org.apache.cxf.io.CachedOutputStream.close(CachedOutputStream.java:185)
	at org.apache.cxf.transport.AbstractConduit.close(AbstractConduit.java:66)
	at org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor.handleMessage(MessageSenderInterceptor.java:62)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:478)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:308)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:260)
	at org.apache.cxf.frontend.ClientProxy.invokeSync(ClientProxy.java:73)
	at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:124)
	at $Proxy63.readCustomersByName(Unknown Source)
	at net.enbw.endur.AppModule.doBusiness(AppModule.java:34)
	at net.enbw.endur.AppMain.main(AppMain.java:23)
Exception in thread ""main"" javax.xml.ws.soap.SOAPFaultException: Null InputStream is not a valid argument
	at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:146)
	at $Proxy63.readCustomersByName(Unknown Source)
	at net.enbw.endur.AppModule.doBusiness(AppModule.java:34)
	at net.enbw.endur.AppMain.main(AppMain.java:23)
Caused by: java.lang.IllegalArgumentException: Null InputStream is not a valid argument
	at com.ctc.wstx.stax.WstxInputFactory.createSR(WstxInputFactory.java:614)
	at com.ctc.wstx.stax.WstxInputFactory.createXMLStreamReader(WstxInputFactory.java:324)
	at org.apache.cxf.staxutils.StaxUtils.createXMLStreamReader(StaxUtils.java:879)
	at org.apache.cxf.interceptor.StaxInInterceptor.handleMessage(StaxInInterceptor.java:83)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
	at org.apache.cxf.endpoint.ClientImpl.onMessage(ClientImpl.java:664)
	at org.apache.camel.component.cxf.transport.CamelConduit$CamelOutputStream.handleResponse(CamelConduit.java:191)
	at org.apache.camel.component.cxf.transport.CamelConduit$CamelOutputStream.commitOutputMessage(CamelConduit.java:183)
	at org.apache.camel.component.cxf.transport.CamelConduit$CamelOutputStream.doClose(CamelConduit.java:153)
	at org.apache.cxf.io.CachedOutputStream.close(CachedOutputStream.java:185)
	at org.apache.cxf.transport.AbstractConduit.close(AbstractConduit.java:66)
	at org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor.handleMessage(MessageSenderInterceptor.java:62)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:478)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:308)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:260)
	at org.apache.cxf.frontend.ClientProxy.invokeSync(ClientProxy.java:73)
	at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:124)
	... 3 more

",,,,,,,,,,,,,,,,,05/Nov/09 23:50;chris@die-schneider.net;camel-core-2.0.0.patch;https://issues.apache.org/jira/secure/attachment/12462835/camel-core-2.0.0.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2009-11-05 03:14:26.466,,,no_permission,,,,,,,,,,,,,76628,,,Wed Nov 11 01:52:04 UTC 2009,,,,,,,0|i01mon:,7444,,,,,,,,,"03/Nov/09 13:05;chris@die-schneider.net;The same exception appears if the jms server is not started. In this case I would expect an exception like ""JMS Component could not connect to jms server"". At least shortly after this exception an info message is logged that says ""Could not refresh JMS Connection"".

Stack trace:
-- 
03.11.2009 14:03:42 org.apache.cxf.phase.PhaseInterceptorChain doIntercept
WARNUNG: Interceptor has thrown exception, unwinding now
java.lang.IllegalArgumentException: Null InputStream is not a valid argument
	at com.ctc.wstx.stax.WstxInputFactory.createSR(WstxInputFactory.java:614)
	at com.ctc.wstx.stax.WstxInputFactory.createXMLStreamReader(WstxInputFactory.java:324)
	at org.apache.cxf.staxutils.StaxUtils.createXMLStreamReader(StaxUtils.java:879)
	at org.apache.cxf.interceptor.StaxInInterceptor.handleMessage(StaxInInterceptor.java:83)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
	at org.apache.cxf.endpoint.ClientImpl.onMessage(ClientImpl.java:664)
	at org.apache.camel.component.cxf.transport.CamelConduit$CamelOutputStream.handleResponse(CamelConduit.java:191)
	at org.apache.camel.component.cxf.transport.CamelConduit$CamelOutputStream.commitOutputMessage(CamelConduit.java:183)
	at org.apache.camel.component.cxf.transport.CamelConduit$CamelOutputStream.doClose(CamelConduit.java:153)
	at org.apache.cxf.io.CachedOutputStream.close(CachedOutputStream.java:185)
	at org.apache.cxf.transport.AbstractConduit.close(AbstractConduit.java:66)
	at org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor.handleMessage(MessageSenderInterceptor.java:62)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:478)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:308)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:260)
	at org.apache.cxf.frontend.ClientProxy.invokeSync(ClientProxy.java:73)
	at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:124)
	at $Proxy63.readCustomersByName(Unknown Source)
	at net.enbw.endur.AppModule.doBusiness(AppModule.java:25)
	at net.enbw.endur.AppMain.main(AppMain.java:23)
14:05:09,213 INFO  org.springframework.jms.listener.DefaultMessageListenerContainer refreshConnectionUntilSuccessful - Could not refresh JMS Connection - retrying in 100000 ms: javax.jms.JMSException: Failed to connect to the server at tcp://localhost:7222
","05/Nov/09 03:14;njiang;@Christian
I rechecked to code of CamelConduit and found we should check the template's exception before we continue to process the message.
I will commit a quick patch for this. You should get a IOException with the cause message now.","05/Nov/09 03:26;njiang;trunk
http://svn.apache.org/viewvc?rev=832981&view=rev
camel 1.x branch
http://svn.apache.org/viewvc?rev=832983&view=rev","05/Nov/09 08:28;chris@die-schneider.net;Hi Willem,

could you change the two places where you throw the exception into:
  throw new IOException(""Can't get the response message"", ex);
instead of:
  throw new IOException(""Can't get the response message. Caused by: "" + ex);

and 

   throw new IOException(""Can't get the response message"", exchange.getException());
instead of 
   throw new IOException(""Can't get the response message. Caused by "" + exchange.getException());

This will forward the stack trace.

After this additional change when I simply start a cxf client that forwards its message to camel jms I get the exception below. This still does not look correct. The root cause is a nullpointer exception in SimpleMessageListenerContainer.doShutdown. The attributes consumers and sessions are null. The implementation does not check this though. This results in the throw ex not being executed:

if (ex != null) {

  stop(childrenStarted); <----- inside here we get the nullpointer ex

  throw ex; <---- So this exception is lost

}

As we can not directly fix this I think the way to fix the problem is catching this exception in camel.impl.ServiceSupport.stop. A try catch that ignores all errors should do the trick. 

org.apache.cxf.interceptor.Fault: Could not send Message.
	at org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor.handleMessage(MessageSenderInterceptor.java:64)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:471)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:301)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:253)
	at org.apache.cxf.frontend.ClientProxy.invokeSync(ClientProxy.java:73)
	at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:121)
	at $Proxy61.getCustomersByName(Unknown Source)
	at com.example.customerservice.impl.CustomerServiceClient.main(CustomerServiceClient.java:45)
Caused by: java.io.IOException: Can't get the response message
	at org.apache.camel.component.cxf.transport.CamelConduit$CamelOutputStream.commitOutputMessage(CamelConduit.java:186)
	at org.apache.camel.component.cxf.transport.CamelConduit$CamelOutputStream.doClose(CamelConduit.java:155)
	at org.apache.cxf.io.CachedOutputStream.close(CachedOutputStream.java:177)
	at org.apache.cxf.transport.AbstractConduit.close(AbstractConduit.java:66)
	at org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor.handleMessage(MessageSenderInterceptor.java:62)
	... 8 more
Caused by: org.apache.camel.FailedToCreateProducerException: Failed to create Producer for endpoint: Endpoint[jms://queue:CustomerService]. Reason: java.lang.NullPointerException
	at org.apache.camel.component.jms.JmsProducer.testAndSetRequestor(JmsProducer.java:116)
	at org.apache.camel.component.jms.JmsProducer.processInOut(JmsProducer.java:175)
	at org.apache.camel.component.jms.JmsProducer.process(JmsProducer.java:147)
	at org.apache.camel.processor.SendProcessor$1.doInProducer(SendProcessor.java:81)
	at org.apache.camel.processor.SendProcessor$1.doInProducer(SendProcessor.java:79)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:141)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:78)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:61)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:61)
	at org.apache.camel.processor.RedeliveryErrorHandler.processExchange(RedeliveryErrorHandler.java:186)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:155)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:88)
	at org.apache.camel.processor.DefaultErrorHandler.process(DefaultErrorHandler.java:49)
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:148)
	at org.apache.camel.processor.UnitOfWorkProcessor.processNext(UnitOfWorkProcessor.java:54)
	at org.apache.camel.processor.DelegateProcessor.process(DelegateProcessor.java:48)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:45)
	at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:170)
	at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:156)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:141)
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:155)
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:111)
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:101)
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:88)
	at org.apache.camel.component.cxf.transport.CamelConduit$CamelOutputStream.commitOutputMessage(CamelConduit.java:172)
	... 12 more
Caused by: java.lang.NullPointerException
	at org.springframework.jms.listener.SimpleMessageListenerContainer.doShutdown(SimpleMessageListenerContainer.java:304)
	at org.springframework.jms.listener.AbstractJmsListeningContainer.shutdown(AbstractJmsListeningContainer.java:211)
	at org.springframework.jms.listener.AbstractJmsListeningContainer.destroy(AbstractJmsListeningContainer.java:149)
	at org.apache.camel.component.jms.requestor.Requestor.doStop(Requestor.java:212)
	at org.apache.camel.impl.ServiceSupport.stop(ServiceSupport.java:74)
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:57)
	at org.apache.camel.component.jms.JmsProducer.testAndSetRequestor(JmsProducer.java:108)
	... 36 more
","05/Nov/09 08:38;njiang;@Christian
JDK 1.5 doesn't provide the construction method of IOException like this
IOException(String message, Throwable t);

So I took the advise of Claus to use the utils method of camel to create IOException like this
{code}
IOException cause = new IOException(""xxxx""):
cause.initCause(e);
{code}

Can you try out the last trunk code which contains my change to verify it ?
","05/Nov/09 23:45;chris@die-schneider.net;I have tested your new patch. Looks good to me but we should still fix the bug that causes the ""Could not connect to broker"" to be swallowed. I will add a patch for this.","05/Nov/09 23:50;chris@die-schneider.net;This is a patch for camel core done on basis of camel 2.0.0. The bug is in ServiceSupport.start().
After an exception happens it tries to stop the service without catch possible exceptions the could happen inside the stop method. I just added a try catch and ignored any exceptions. A comment explains why the catch is empty.","11/Nov/09 01:52;njiang;Applied the patch with thanks to Christian
trunk
http://svn.apache.org/viewvc?rev=833285&view=rev
camel 1.x branch
http://svn.apache.org/viewvc?rev=833288&view=rev",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Rollback does not work for transactional routes using camel-cxf,CAMEL-2128,12486528,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,chris@die-schneider.net,chris@die-schneider.net,03/Nov/09 12:30,06/Nov/09 11:28,14/Mar/19 02:42,04/Nov/09 02:27,2.0.0,,,,,,,,,,1.6.2,2.1.0,,camel-cxf,,,,0,"I have a request reply service that should be able to do three different
things:

1)  no exception occurs in the implementation: The jms Message should be
committed and the normal reply should be sent
2) The implementation throws an exception defined in the service contract:
The jms message should be committed and a fault should be sent
3) The implemementation throws another kind of exception: The message delivery should
be rolled back so it can be received again

Case 1 and 2 currently work as expected.

For Case 3 a fault is returned to the caller and the transaction is committed which is wrong. 
",,,,,,,,,,,,,,,,,03/Nov/09 12:33;chris@die-schneider.net;appcontext.xml;https://issues.apache.org/jira/secure/attachment/12462877/appcontext.xml,03/Nov/09 12:37;chris@die-schneider.net;patch.txt;https://issues.apache.org/jira/secure/attachment/12462889/patch.txt,,,,2.0,,,,,,,,,,,,,,,,,,,2009-11-04 01:55:42.04,,,no_permission,,,,,,,,,,,,,76629,,,Fri Nov 06 11:16:03 UTC 2009,,,Patch Available,,,,0|i01mof:,7443,,,,,,,,,03/Nov/09 12:33;chris@die-schneider.net;Sample Applicationcontext that contains a transactional route that forwards from jms to a cxf service,"03/Nov/09 12:34;chris@die-schneider.net;Also see the thread Problem with SOAP/JMS and transactions in the user list:
http://mail-archives.apache.org/mod_mbox/camel-users/200911.mbox/thread
","03/Nov/09 12:36;chris@die-schneider.net;Willem Jiang has created a patch that partly resolves this issue:
",03/Nov/09 12:37;chris@die-schneider.net;Patch from Willem,"03/Nov/09 12:37;chris@die-schneider.net;I have built a camel-cxf module that includes the patch. Now the rollback
basically works.
The problem is that it happens for all exceptions. I think a good default
would be to return a fault for all exceptions that the service explicitly
defines and roll back for all other exceptions. The problem is I have no
idea how this could be done.

In the meantime I will try to use an onException() clause to do this
differentiation.
","03/Nov/09 13:29;chris@die-schneider.net;I have managed to route my special NoSuchCustomerException so that it will commit and return a fault by using the following camel context.
While I still think the defined exceptions should be handled as a Soap Fault by default this at least means that my transactional CXF Service works. So I think the patch from Willem should go into trunk.

<camelContext id=""camelContext"" trace=""false"" xmlns=""http://camel.apache.org/schema/spring"">
  <onException>
    <exception>net.enbw.services.etg.examples.customerservice.NoSuchCustomerException</exception>
      <handled><constant>true</constant></handled>
    </onException>
    <route>
      <from uri=""direct:client""/>
      <to uri=""jms://queue.net.enbw.services.etg.examples.customerservice.CustomerService"" />
  </route>
  <route>
    <from uri=""jms://queue.net.enbw.services.etg.examples.customerservice.CustomerService"" />
    <transacted/>
    <to uri=""direct:server""/>
  </route>
</camelContext>
","04/Nov/09 01:55;njiang;@Christian
It is hard to let CamelTransport to know which kind of exception is defined by User, and the CamelTransport should now nothing about the application level thing. Let's put the ignoring the customer exception on the camel's error handler framework.
I will commit my patch in a min :)
","04/Nov/09 02:27;njiang;trunk
http://svn.apache.org/viewvc?rev=832647&view=rev
camel 1.x branch
http://svn.apache.org/viewvc?rev=832648&view=rev","06/Nov/09 11:16;njiang;@Christian,
I just found this fix broken the old camel transport example , which don't want to camel error handle to be involved.  
I will create a new JIRA CAMEL-2142 to add a flag on the CamelTransportFactory to enable this feature. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
XPath injection cannot handle expressions returning strings,CAMEL-2122,12486879,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,mproch,mproch,30/Oct/09 09:54,03/Jun/10 07:25,14/Mar/19 02:42,01/Nov/09 13:28,2.0.0,,,,,,,,,,2.1.0,,,camel-core,,,,0,"trying to inject following:
public void insert(@XPath(""concat('48','//node/msisdn/text())"") String msisdn) { }
results in  
Can not convert #STRING to a NodeList! exception.

The reason is that XPathAnnotationExpressionFactory uses 
XPathBuilder.xpath(xpath); 
and by default xpath is evaluated as nodeSet.

I think it would be nice to be able to define result type in annotation e.g.
@XPath(value = ""concat('48','//node/msisdn/text())"", resultType = String.class)
The default would be NodeSet to be backward compatible",,,,,,,,,,,,,,,,,30/Oct/09 10:57;mproch;BeanWithXPathInjectionTest.java;https://issues.apache.org/jira/secure/attachment/12462990/BeanWithXPathInjectionTest.java,30/Oct/09 10:57;mproch;CAMEL-2122.patch;https://issues.apache.org/jira/secure/attachment/12462991/CAMEL-2122.patch,,,,2.0,,,,,,,,,,,,,,,,,,,2009-11-01 13:28:38.912,,,no_permission,,,,,,,,,,,,,76630,,,Thu Jun 03 07:25:09 UTC 2010,,,Patch Available,,,,0|i01mn3:,7437,,,,,,,,,30/Oct/09 10:57;mproch;Test case + patch,"01/Nov/09 13:28;davsclaus;Applied patch with thanks.

trunk: 831674",03/Jun/10 07:25;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Problem using a CamelTransportFactory from a junit 4 unit test or together with <context:annotation-config/>,CAMEL-2112,12486228,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,chris@die-schneider.net,chris@die-schneider.net,27/Oct/09 07:35,28/Oct/09 02:32,14/Mar/19 02:42,27/Oct/09 11:44,1.4.0,1.5.0,1.6.0,1.6.1,2.0.0,2.0-M1,2.0-M2,2.0-M3,,,1.6.2,2.1.0,,camel-cxf,,,,0,"I recently tried to convert my unit tests to junit 4 using the new Spring test framework.

Since then I get the following exception when calling the test.
Error creating bean with name 'org.apache.camel.component.cxf.transport.CamelTransportFactory#0': Injection of resource methods failed; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No matching bean of type [java.lang.String] found for dependency [collection of java.lang.String]: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {}

The same happens when I activate /<context:annotation-config/>/

I think it has to do with autowiring. Do you have any idea what goes wrong here and how I can fix it? 
",,,,,,,,,,,,,,,,,27/Oct/09 07:38;chris@die-schneider.net;cxfcamelexample.zip;https://issues.apache.org/jira/secure/attachment/12462811/cxfcamelexample.zip,27/Oct/09 07:40;chris@die-schneider.net;stack trace.txt;https://issues.apache.org/jira/secure/attachment/12462828/stack+trace.txt,,,,2.0,,,,,,,,,,,,,,,,,,,2009-10-27 08:05:40.386,,,no_permission,,,,,,,,,,,,,76631,,,Wed Oct 28 02:32:46 UTC 2009,,,,,,,0|i01mkv:,7427,,,,,,,,,27/Oct/09 07:38;chris@die-schneider.net;I have attached a sample project that shows the problem when using <context:annotation-config/>  ,27/Oct/09 07:40;chris@die-schneider.net;I have attached the full stack trace,"27/Oct/09 08:05;njiang;Hi Christian,

CXF implements it's own JSR250 processor to handle the bus injection. 
Spring will start  it's own JSR250 implementation, when you activate <context:annotation-config/>.

Do you have any specify reason to use the <context:annotation-config/> ? 
If so , we may need to fix it from CXF.

Willem

","27/Oct/09 08:11;chris@die-schneider.net;Hi Willem,

I use the <context:annotation-config/> to check for example for @Required properties. For the short term I could switch to the implementation of CXF. How do I do it? In the long run though I think it would be better if CXF would work with the processor from spring.

The case where the problem arises is when using the new spring test framework. This also seems to activate the spring processor. As the older testing style is deprecated I think CXF should support the new style.

Greetings

Christian
","27/Oct/09 11:03;njiang;@ Christian,

I just got time to check your test-case and stack trace. From the stack trace , it looks like CamelTransportFactory has a wrong annotated field, and the spring JSR250 can't find a right value to inject. Removed the @Resource annotation from  public void setActivationNamespaces(Collection<String> ans) resolved this issue.

BTW,  there are some explanation of the CXF JSR250 PostProcessor in [CXF-2210|https://issues.apache.org/jira/browse/CXF-2210] which shows CXF JSR250PostProcessor can work with Spring JSR250 PostProcessor.","27/Oct/09 11:44;njiang;trunk
http://svn.apache.org/viewvc?rev=830137&view=rev
camel-1.x branch
http://svn.apache.org/viewvc?rev=830140&view=rev","27/Oct/09 12:40;chris@die-schneider.net;Thanks for the quick fix. I already thought that @Resource could perhaps be wrong. 
Is there a way for us to work around this issue till Camel 2.1.0 is realeased?
","28/Oct/09 02:32;njiang;I'm afraid you need to remove the <context:annotation-config/> to get it work in Camel 2.0.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-cxf includes too many CXF poms,CAMEL-2111,12485539,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,chris@die-schneider.net,chris@die-schneider.net,27/Oct/09 07:30,27/Oct/09 12:31,14/Mar/19 02:42,27/Oct/09 09:47,1.4.0,1.5.0,1.6.0,1.6.1,2.0.0,2.0-M1,2.0-M2,2.0-M3,,,1.6.2,2.1.0,,camel-cxf,,,,0,"I am using camel 2.0.0 together with CXF 2.2.4. My problem is that camel-cxf pulls in many CXF poms that I do not need.
So I either have to exclude them or include them in my own project with version 2.2.4. I would rather prefer that camel-cxf only includes what it really needs.

This is the list camel-cxf includes:

      <artifactId>cxf-rt-frontend-jaxrs</artifactId>
      <artifactId>cxf-rt-core</artifactId>
      <artifactId>cxf-rt-transports-http</artifactId>
      <artifactId>cxf-rt-transports-http-jetty</artifactId>
      <artifactId>cxf-rt-transports-local</artifactId>
      <artifactId>cxf-rt-frontend-simple</artifactId>
      <artifactId>cxf-rt-frontend-jaxws</artifactId>
      <artifactId>cxf-rt-management</artifactId>
      <artifactId>cxf-tools-common</artifactId>
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-10-27 09:30:32.879,,,no_permission,,,,,,,,,,,,,76632,,,Tue Oct 27 12:31:00 UTC 2009,,,,,,,0|i01mkn:,7426,,,,,,,,,"27/Oct/09 09:30;njiang;I just rechecked the camel-cxf pom.xml , we could clean up lots of  dependencies as the remains dependencies will introduce other cxf artifacts dependency.
There are what we just need.
{code}
<artifactId>cxf-rt-frontend-jaxrs</artifactId>
<artifactId>cxf-rt-transports-http-jetty</artifactId>
<artifactId>cxf-rt-frontend-jaxws</artifactId>
{code}","27/Oct/09 09:47;njiang;trunk
http://svn.apache.org/viewvc?rev=830103&view=rev
camel 1.x branch
http://svn.apache.org/viewvc?rev=830105&view=rev",27/Oct/09 12:31;chris@die-schneider.net;That looks much better already. Thanks for the quick help.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ID of route is not set when onException is used,CAMEL-2109,12486897,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,dulmerlucsly,dulmerlucsly,26/Oct/09 10:21,05/Sep/14 18:30,14/Mar/19 02:42,29/Oct/09 11:59,2.1.0,,,,,,,,,,2.1.0,,,,,,,0,"When building a route like this:

{code}
....
public void configure() {

from(""jms:fileIn?transacted=true"")
  .onException(UnmarshalException.class)
   .handled(true)
    .bean(FileProcessExceptionBean.class,""handleException"")
.end()
.id(""fileMapping"")
.transacted()
.process(new FileProcessor())
.to(""jms:fileOut"");

}
{code}
the id is not set. When the onException-section is removed, the id is set correctly","Apache Camel 2.1-SNAPSHOT (build 20091022) , Java 1.6.0,  Linux ",,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-10-26 11:00:40.682,,,no_permission,,,,,,,,,,,,,76633,,,Fri Sep 05 18:30:59 UTC 2014,,,,,,,0|i01mk7:,7424,,,,,,,,,26/Oct/09 11:00;davsclaus;And you want the id {{fileMapping}} to be the route id?,"26/Oct/09 11:02;davsclaus;Moving the id after the from makes the route have that id

{code}
from(""jms:fileIn?transacted=true"")
.id(""fileMapping"")
...
{code}","26/Oct/09 11:04;davsclaus;See nabble:
http://www.nabble.com/RouteBuilder%3A-Problems-with-onException-and-id-td26024958.html","26/Oct/09 12:14;dulmerlucsly;But putting .id() before onException makes onException not working correctly
( see the same nabble-Thread )","26/Oct/09 12:37;davsclaus;Works fine on my end. Can you check this unit test.
http://svn.apache.org/viewvc?rev=829770&view=rev

","29/Oct/09 09:31;dulmerlucsly;The testcase did work fine at my system, but when i change the RouteBuilder to:
{code}

    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            @Override
            public void configure() throws Exception {
            	
            	onException(IllegalArgumentException.class).handled(true).to(""log:bar"").to(""mock:error"").end();
            	 
                from(""activemq:queue:foo?transacted=true"").id(""myCoolRoute"")
                    .transacted()
                    .choice()
                        .when(body().contains(""Kabom"")).throwException(new IllegalArgumentException(""Damn""))
                    .otherwise()
                        .to(""mock:result"")
                    .end();

            }
        };
    }
{code}

then the test fails ....

-- added code snippets","29/Oct/09 11:54;davsclaus;Ah okay yeah I can see the issue.

Will introduce a {{routeId}} in the DSL to use specific for setting the id of the route.","29/Oct/09 11:59;davsclaus;Hi with the latest code use the new {{routeId}} in the DSL to set the id of the route.

trunk: 830906.",03/Jun/10 07:25;davsclaus;Closing old resolved issues,05/Sep/14 18:30;nfx;Found out related things in CAMEL-7786,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-bean - Should throw NoTypeConversionAvailableException if body cannot be converted to parameter type,CAMEL-2106,12486895,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,25/Oct/09 11:20,03/Jun/10 07:25,14/Mar/19 02:42,25/Oct/09 15:03,1.6.1,2.0.0,,,,,,,,,2.1.0,,,camel-core,,,,0,"If you route a message to a bean which has for example a {{org.w3c.Document}} as parameter type for the body, then Camel should thrown an conversion exception in case the payload cannot be converted to that type. And on the same time if the payload is really {{null}} then Camel should of course pass in null.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76634,,,Thu Jun 03 07:25:04 UTC 2010,,,,,,,0|i01mjj:,7421,,,,,,,,,"25/Oct/09 15:03;davsclaus;The same applies for headers etc.
In fact its all parameter types that Camel *now must* be able to convert to.",25/Oct/09 15:03;davsclaus;trunk: 829598.,03/Jun/10 07:25;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Transacted routes don't allow custom error handlers to mark exception as handled AND set rollback only,CAMEL-2102,12486899,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,dhirajsb,dhirajsb,22/Oct/09 21:14,03/Jun/10 07:25,14/Mar/19 02:42,26/Oct/09 10:37,2.0.0,,,,,,,,,,2.1.0,,,camel-spring,,,,0,"If a route is transacted using transacted(), and a custom error handler is registered using onException() which handles the exception using handled(), creates a custom error response, and marks the transaction to be rolled back using rollback(), Camel wraps a non-existent 'null' exception with a TransactedRuntimeCamelException in TransactionErrorHandler.wrapTransactedRuntimeException() and throws the TRCE, causing the custom error response to be ignored. 

Route looks like:

		// configure error handler for all routes
		onException(Exception.class).handled(true).to(""bean:transformerBean?method=exceptionToResponse"").rollback();

		from(""cxfrs://bean:categoriesEndpoint"").transacted()
			.choice()...

Basically the application wants to handle exceptions by sending a custom error message back to the route client, and also mark transactions for rollback. 

Attached patch checks for the presence of an exception, and only raises a TRCE if its not null. ",All platforms,,,,,,,,,,,,,,CAMEL-2107,,22/Oct/09 21:16;dhirajsb;camel-spring-patch.txt;https://issues.apache.org/jira/secure/attachment/12462988/camel-spring-patch.txt,,,,,1.0,,,,,,,,,,,,,,,,,,,2009-10-23 07:43:21.859,,,no_permission,,,,,,,,,,,,,76635,,,Thu Jun 03 07:25:03 UTC 2010,,,Patch Available,,,,0|i01min:,7417,,,,,,,,,22/Oct/09 21:16;dhirajsb;Patch for not throwing a TransactedRuntimeCamelException when it has been handled in an error handler. ,"23/Oct/09 07:43;davsclaus;Cool

It would be great if you could also create an unit test that tests this patch.","26/Oct/09 10:37;davsclaus;trunk: 829746.

You can now use {{.markRollbackOnly()}} to mark a route to rollback and at the same time provide you custom response as you did in your onException","26/Oct/09 18:38;dhirajsb;Claus, do you still need a testcase or are you going to build one for the new {{markRollbackOnly()}}?","26/Oct/09 20:10;davsclaus;Its fine I used the new markRollbackOnly.

Can you test the new code on your system?

And if you have an unit test that you think is good to add then you can attach it.
You can check the unit tests I added by the commit log and the new added tests from the source. ",03/Jun/10 07:25;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Support Issue: Routing a TextMessage from a <camel:proxy> to a JMS queue,CAMEL-2095,12486910,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,laurent.bovet,laurent.bovet,22/Oct/09 07:04,03/Jun/10 07:25,14/Mar/19 02:42,22/Oct/09 12:28,2.0.0,,,,,,,,,,2.1.0,,,camel-core,,,,0,"I did not find any example or documentation for using the <camel:proxy> with a simple send(String textMessage) method and a route sending the textMessage String as body to a JMS queue (for example).

The thing is that <camel:proxy> creates a messages with body of type BeanInvocation. I would expect that Camel provides some builtin transformer/converter to change the body to the String argument, so that the message on the queue is of type TextMessage.

Did I miss something? ","jdk 1.5, spring 2.5.6",,,,,,,,,,,,,,,,22/Oct/09 07:07;laurent.bovet;ProxyToStringTest-context.xml;https://issues.apache.org/jira/secure/attachment/12462865/ProxyToStringTest-context.xml,22/Oct/09 07:07;laurent.bovet;ProxyToStringTest.java;https://issues.apache.org/jira/secure/attachment/12462864/ProxyToStringTest.java,22/Oct/09 07:07;laurent.bovet;Sender.java;https://issues.apache.org/jira/secure/attachment/12462863/Sender.java,,,3.0,,,,,,,,,,,,,,,,,,,2009-10-22 11:00:30.433,,,no_permission,,,,,,,,,,,,,76636,,,Thu Jun 03 07:25:00 UTC 2010,,,,,,,0|i01mh3:,7410,,,,,,,,,"22/Oct/09 07:07;laurent.bovet;Added test case.

The test fails because the body is not of type String:

java.lang.AssertionError: mock://result Body of message: 0. Expected: <Hello> but was: <BeanInvocation public abstract void proxy.test.Sender.send(java.lang.String) with [Hello]]>
	at org.apache.camel.component.mock.MockEndpoint.fail(MockEndpoint.java:899)
	at org.apache.camel.component.mock.MockEndpoint.assertEquals(MockEndpoint.java:881)
	at org.apache.camel.component.mock.MockEndpoint$4.run(MockEndpoint.java:371)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:241)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:208)
	at proxy.test.ProxyToStringTest.testProxyToString(ProxyToStringTest.java:27)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:73)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:46)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:180)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:41)
	at org.junit.runners.ParentRunner$1.evaluate(ParentRunner.java:173)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:220)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:45)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)

","22/Oct/09 11:00;davsclaus;Works in Camel 1.x

Added unit test in 1.x: 828653.","22/Oct/09 12:28;davsclaus;trunk: 828670.

Laurent you are welcome to test with latest code.","22/Oct/09 13:10;laurent.bovet;Wow. Many thanks for you reactivity, Claus and congrat to all for this good work.","22/Oct/09 13:14;davsclaus;Remember that if you want to route the proxy to a JMS queue and want the ""value you passed in the first method"" to be sent as text message on the jms queue then you have to convert the payload to text or force the jms producer to use text type.

Either
.convertBodyTo(String.class)
before you send it to the JMS queue.

Or configure the JMS endpoint with ?jmsMessageType=Text


Otherwise you send an object BeanInvocation to the JMS queue and then if you have Camel on the other side it can read this BeanInvocation and *actually* invoke a bean on this side.
So what it allows is to create a proxy for the client and send it over JMS to the server and invoke the real bean. And return the reply back to the client :)","22/Oct/09 13:15;davsclaus;Which this tutorial btw shows
http://camel.apache.org/tutorial-jmsremoting.html",03/Jun/10 07:25;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
velocity endpoint should not remember the last used template uri,CAMEL-2092,12486713,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,22/Oct/09 02:46,03/Jun/10 07:24,14/Mar/19 02:42,22/Oct/09 04:08,2.0.0,2.0-M1,2.0-M2,2.0-M3,,,,,,,2.1.0,,,,,,,0,"If there are two velocity endpoint linked with the pipeline, you will find the last velocity will not effect anymore.
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-06-03 07:24:58.668,,,no_permission,,,,,,,,,,,,,76637,,,Thu Jun 03 07:24:58 UTC 2010,,,,,,,0|i01mgf:,7407,,,,,,,,,"22/Oct/09 04:08;njiang;trunk
http://svn.apache.org/viewvc?rev=828288&view=rev

Also added test to  camel-1.x branch
http://svn.apache.org/viewvc?rev=828294&view=rev",03/Jun/10 07:24;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jms - Option autoStartup does not work,CAMEL-2090,12486553,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,21/Oct/09 12:27,03/Jun/10 07:24,14/Mar/19 02:42,21/Oct/09 12:46,1.6.1,2.0.0,,,,,,,,,2.1.0,,,camel-jms,,,,0,It does in fact auto startup it anyway.,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76638,,,Thu Jun 03 07:24:58 UTC 2010,,,,,,,0|i01mfz:,7405,,,,,,,,,"21/Oct/09 12:46;davsclaus;trunk: 827992.

Also introduced a public method on JmsConsumer to manually start the listener later.",03/Jun/10 07:24;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jms - Fixed ReplyTo configured on endpoint should also work for consumers,CAMEL-2089,12486744,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,21/Oct/09 08:23,03/Jun/10 07:24,14/Mar/19 02:42,21/Oct/09 10:07,2.0.0,,,,,,,,,,2.1.0,,,camel-jms,,,,0,Endpoint option: ReplyTo is currently only applicable for producers. It should also work for consumers.,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76639,,,Thu Jun 03 07:24:57 UTC 2010,,,,,,,0|i01mfr:,7404,,,,,,,,,21/Oct/09 10:07;davsclaus;trunk: 827950.,03/Jun/10 07:24;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-bean - Null String bodies is converted to a logging message instead of being null,CAMEL-2088,12486914,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,21/Oct/09 05:46,03/Jun/10 07:24,14/Mar/19 02:42,21/Oct/09 06:45,2.0.0,,,,,,,,,,2.1.0,,,camel-core,,,,0,"See nabble
http://www.nabble.com/ToStringTypeConverter-and-null-message-bodies-td25978515.html",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76640,,,Thu Jun 03 07:24:57 UTC 2010,,,,,,,0|i01mfj:,7403,,,,,,,,,21/Oct/09 06:45;davsclaus;trunk: 827902.,03/Jun/10 07:24;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
http polling consumer does not support timeout,CAMEL-2084,12486911,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,20/Oct/09 11:02,03/Jun/10 07:24,14/Mar/19 02:42,20/Oct/09 11:07,1.6.1,2.0.0,,,,,,,,,2.1.0,,,camel-http,,,,0,"When using the consumer template to receive from a remote http service using camel-http the method receive(5000) that uses a 5 sec timeout does not work as expected.

Camel does not use the 5000 value.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76641,,,Thu Jun 03 07:24:56 UTC 2010,,,,,,,0|i01men:,7399,,,,,,,,,20/Oct/09 11:07;davsclaus;trunk: 827033.,03/Jun/10 07:24;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Setting global error handler in camel-spring may not work correctly,CAMEL-2076,12486916,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,18/Oct/09 16:22,03/Jun/10 07:24,14/Mar/19 02:42,18/Oct/09 19:03,2.0.0,,,,,,,,,,2.1.0,,,camel-core,,,,0,"Really weird since recently upgrading junit in camel-spring some unit tests started failing based on global error handling configuration with camel-spring.

I have tracked it down to a bug how error handlers was resolved when using spring XML only. It always worked with Java DSL.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76643,,,Thu Jun 03 07:24:54 UTC 2010,,,,,,,0|i01mcv:,7391,,,,,,,,,"18/Oct/09 16:23;davsclaus;See also this nabble
http://www.nabble.com/Global-Error-Handler-Question.-td25149113.html",18/Oct/09 19:03;davsclaus;trunk: 826498.,03/Jun/10 07:24;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-bean - When a method name is given it should be more strict to be sure always invoking a method with that name,CAMEL-2075,12486903,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,18/Oct/09 13:25,03/Jun/10 07:24,14/Mar/19 02:42,19/Oct/09 06:39,1.6.1,2.0.0,,,,,,,,,2.1.0,,,camel-core,,,,0,"You could potential invoke another method name if you have annotated that with a Camel annotation. Even if you have told Camel that the method should be named {{foo}} etc.

What Camel should do is to ensure that only methods with the name {{foo}} is possible to invoke.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76644,,,Thu Jun 03 07:24:53 UTC 2010,,,,,,,0|i01mcn:,7390,,,,,,,,,19/Oct/09 06:39;davsclaus;trunk: 826591.,03/Jun/10 07:24;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-bean - should skip getter/setter methods when looking for method candidates,CAMEL-2074,12486924,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,17/Oct/09 12:48,03/Jun/10 07:24,14/Mar/19 02:42,19/Oct/09 06:40,1.6.1,2.0.0,,,,,,,,,2.1.0,,,camel-core,,,,0,"If you have a POJO and you have a setter for a Camel concept such as a {{org.apache.camel.TypeConverter}} then the bean component could consider invoking the setTypeConverter method as a candidate.

In fact it should skip any getter/setter all together.

For example this pojo
{code}
public class RiderOrderService {

    private TypeConverter converter;

    public void setConverter(TypeConverter converter) {
        this.converter = converter;
    }

    public String handleCustom(GenericFile file) {
    ...
    }

    public String handleXML(Document doc) {
    ...
    }
{code}

Camel should only consider the 2 handle methods. The setter should be skipped.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76645,,,Thu Jun 03 07:24:53 UTC 2010,,,,,,,0|i01mcf:,7389,,,,,,,,,17/Oct/09 12:49;davsclaus;Camel normally also skips the setters but in this case it get more attention as it has a Camel concept parameter.,19/Oct/09 06:40;davsclaus;trunk: 826591.,03/Jun/10 07:24;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-mail - extracting mails with headers using multi values inserts duplicates,CAMEL-2072,12486930,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,16/Oct/09 15:47,03/Jun/10 07:24,14/Mar/19 02:42,16/Oct/09 15:50,1.6.1,2.0.0,,,,,,,,,2.1.0,,,camel-mail,,,,0,Sending a message with headers that contains 2 values such a String[] with 2 values will result on the other side when consuming that mail message to contain a header with 2 entries. There should only be 1 entry with the 2 values.,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76646,,,Thu Jun 03 07:24:52 UTC 2010,,,,,,,0|i01mbz:,7387,,,,,,,,,16/Oct/09 15:50;davsclaus;trunk: 825962.,03/Jun/10 07:24;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Dynamic Recipient List - Comma is always delimiter even if custom specified,CAMEL-2070,12487012,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,16/Oct/09 05:16,03/Jun/10 07:24,14/Mar/19 02:42,16/Oct/09 05:58,1.6.1,2.0.0,,,,,,,,,2.1.0,,,camel-core,,,,0,"See nabble
http://www.nabble.com/Dynamic-RecipientList-delimeter-issue-td25917854.html",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76647,,,Thu Jun 03 07:24:50 UTC 2010,,,,,,,0|i01mbj:,7385,,,,,,,,,16/Oct/09 05:58;davsclaus;trunk: 825774,03/Jun/10 07:24;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Mail Component: Character ""|"" in recipient addresses causes failure",CAMEL-2067,12486931,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,davsclaus,tide08,tide08,14/Oct/09 17:11,03/Jun/10 07:24,14/Mar/19 02:42,16/Oct/09 04:28,1.6.1,2.0.0,,,,,,,,,1.6.2,2.1.0,,camel-mail,,,,0,"It looks like there is minor bug in regex used in MailBinding.java, it causes ""|"" to act as delimiter, splitting email address into 2 parts.  

For ex: Using email address as - first|last@test.com causes it to split into two parts:
1) first
2) last@test.com

""|"" is acceptable character in email as per wikipedia [http://en.wikipedia.org/wiki/Email_address]. I did not bother to read RFC specification.

Here is snippet of code causing issue:

 private static void appendRecipientToMimeMessage(MimeMessage mimeMessage, String type, String recipient)
        throws MessagingException {

        // we support that multi recipient can be given as a string seperated by comma or semi colon
        String[] lines = recipient.split(""[,|;]"");
        for (String line : lines) {


Regex above should either be ""[,;]"" or "";|,""

Also, having email addresses separate out by , or ; seems to be issue as it can be part of name. ex: ""firstName, I like comma <first.last@test.com>"" is valid. Above code will still cause failure for such messages. Can camel support addresses as List/Array rather than comma delimited string?

See Forum thread: http://www.nabble.com/Camel-Mail-Component%3A-%22|%22-in-email-causes-message-to-fail-td25883099.html",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-10-16 04:28:36.992,,,no_permission,,,,,,,,,,,,,41788,,,Thu Jun 03 07:24:49 UTC 2010,,,,,,,0|i01mav:,7382,,,,,,,,,"16/Oct/09 04:28;davsclaus;trunk: 825760.
1.x: 825761.

Regarding the comma. We keep it as is. Nobody ever uses comma in their emails. In fact even not the pipe character.",16/Oct/09 22:24;tide08;Thanks! I agree that having comma or pipe in email is pretty rare. But comma or semi-colon can be part of name. But we can put some validation on our side.,03/Jun/10 07:24;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Redundant interceptions when using interceptSendToEndpoint,CAMEL-2064,12487007,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,mrt1nz,mrt1nz,12/Oct/09 17:43,03/Jun/10 07:24,14/Mar/19 02:42,12/Oct/09 17:53,2.0.0,,,,,,,,,,2.1.0,,,camel-core,,,,0,See http://www.nabble.com/Issue-with-interceptSendToEndpoint-to25859201s22882.html,,,,,,,,,,,,,,,,,12/Oct/09 17:45;mrt1nz;camel-core.patch;https://issues.apache.org/jira/secure/attachment/12462872/camel-core.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2009-10-12 17:53:21.192,,,no_permission,,,,,,,,,,,,,76648,,,Thu Jun 03 07:24:47 UTC 2010,,,Patch Available,,,,0|i01ma7:,7379,,,,,,,,,12/Oct/09 17:45;mrt1nz;The attached patch fixes this problem.,"12/Oct/09 17:53;davsclaus;Thanks Martin for the patch. I have applied it. Keep em coming :)

trunk: 824442.",03/Jun/10 07:24;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel Bean component should not remember the last called method name if the bean's method name is not explicitly specified.,CAMEL-2060,12486950,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,12/Oct/09 03:40,03/Jun/10 07:24,14/Mar/19 02:42,12/Oct/09 06:50,2.0.0,2.0-M3,,,,,,,,,1.6.2,2.1.0,,,,,,0,"Here is the mail thread which discuses this issue.
 http://www.nabble.com/Bean-endpoint-in-a-route-is-holding-reference-to-the-last-used-methodName-and-does-not-invoke-Camel%27s-Bean-binding-tp25838095p25838095.html",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-06-03 07:24:46.594,,,no_permission,,,,,,,,,,,,,76649,,,Thu Jun 03 07:24:46 UTC 2010,,,,,,,0|i01m9b:,7375,,,,,,,,,"12/Oct/09 06:50;njiang;trunk
http://svn.apache.org/viewvc?rev=824218&view=rev
camel 1.x branch
http://svn.apache.org/viewvc?rev=824222&view=rev",03/Jun/10 07:24;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Creating a transacted pipeline with custom error handling is difficult,CAMEL-2059,12487669,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,cjp39,cjp39,11/Oct/09 15:57,03/Nov/10 05:12,14/Mar/19 02:42,05/Jan/10 19:21,2.0.0,,,,,,,,,,2.2.0,,,camel-core,,,,0,"When trying to add error logging to a transacted pipeline, I discovered the following issues:

(1) onException/onCompletion do not work in a transacted route
(2) if the transacted tag is not the first element in the route, all the endpoints above it will be silently ignored
(3) custom error handlers interact very awkwardly with transacted routes (specifically, a non-transacted error handler will not work at all on a transacted route)

I was able to solve my problem using doTry/doCatch; this may be a good candidate for adding to the docs.

I suggest that, if the above issues are not corrected (especially 2+3, which may not be route designs that it is desired to support), they should trigger errors in the corresponding pipeline.

I have attached a tgz of examples showing problems (1) and (2) above, as well as my successful route.",,,,,,,,,,,,,,,CAMEL-2336,,11/Oct/09 15:58;cjp39;CamelTransactionsAndErrorHandling.tgz;https://issues.apache.org/jira/secure/attachment/12462825/CamelTransactionsAndErrorHandling.tgz,,,,,1.0,,,,,,,,,,,,,,,,,,,2009-11-06 11:52:36.925,,,no_permission,,,,,,,,,,,,,76650,,,Tue Jan 05 19:21:57 UTC 2010,,,,,,,0|i01m93:,7374,,,,,,,,,"06/Nov/09 11:52;davsclaus;Hi Chris

I will take a look at this when I am writing the transaction chapter for my book Camel in Action. It is in fact the next chapter on the roadmap so it wont be that long.","05/Jan/10 15:51;davsclaus;The problem with onException not kicking in is because of using Spring XML. The Java DSL works.

Unfortunately JAXB is a bit pain in the ass so we need to rework it a bit afterwards before Camel can use it to generate the runtime routes.
In that light there was a bug in camel-spring which causes onException to be vanished.",05/Jan/10 18:36;davsclaus;With the fixes from CAMEL-2336 I can run all your unit tests.,"05/Jan/10 19:21;davsclaus;trunk: 896185.

Chris thanks a lot for your findings and unit tests.

I have added them to tests/camel-itest where we do integration testing. Then we can test that it works as expected.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
File Component - Rename operations fail sometimes on certain filesystems (Windows),CAMEL-2058,12486952,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,mbmather,mbmather,10/Oct/09 00:26,21/Mar/11 13:17,14/Mar/19 02:42,23/Oct/09 10:42,2.0.0,,,,,,,,,,2.1.0,,,camel-core,,,,0,"On Windows (don't know if there are other platforms that suffer from this problem), the file component fails to successfully rename files with the File.renameTo operation.  It fails when the rename is performed immediately after closing a file.  On Windows this usually indicates that some other process has the file open.  This occurs due to things like Virus scanners which keep the file open for very short periods of time.  Given a slight pause the rename would succeed.

This is a serious problem which effectively makes useless options like ""tempPrefix"" in the File Producer and ""localWorkDirectory"" with the FTP Consumer.  Workarounds like ""disable your virus scanner"" don't cut it for everyone (me specifically) as I'm system privilege restricted from doing so, and even then, there's no guarantee that other windows processes might not do similar things (file indexers, etc).

The Java spec doesn't define the behavior of the rename operation and specifically says that this can vary from implementation to implementation / filesystem to filesystem.  Second, rename doesn't say why it fails, it merely returns false which is very unhelpful.

A couple ways to fix:

1).  Provide an option to disable this optimization.  ie, a ""alwaysCopyInsteadOfRename"" or something (clean, simple, easy).
This would be a simple fix.  More or less just a few clauses/tests in GenericFileProducer around any ""is local"" checks....

2).  Attempt a copy instead if the rename fails
    - maybe after a brief pause
    - maybe even after a number of rename attempts
    - maybe watch to see the file is closed prior to a rename attempt.

Rename operation failures may affect other things as well like certain locking schemes.

http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4167147","Sun JDK 1.6_16, Eclipse Gallileo, Spring 2.5, Camel 2.0.0, Windows XP SP2, McAfee VirusScan",,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-10-12 11:06:49.107,,,no_permission,,,,,,,,,,,,,76651,,,Thu Jun 03 07:24:45 UTC 2010,,,,,,,0|i01m8v:,7373,,,,,,,,,"12/Oct/09 11:06;davsclaus;Michael can you try 2.1-SNAPSHOT as we have fixed improved this.

Fixed already by CAMEL-1965.","12/Oct/09 17:45;mbmather;For the record, I did try my route in 2.1-SNAPSHOT before filing the report.  But apparently I tried it just for {{localWorkDirectory}} and not for {{tempPrefix}}.
2.1-SNAPSHOT does seem to be fixed for {{tempPrefix}} (although I think I still found an issue there), but +NOT+ fixed for {{localWorkDirectory}}, an option of the FTP component.

\\

h3. Issue #1:  {{localWorkDirectory}}

In both 2.0 and 2.1snap, this has the following behavior.
# After creating the ""inprogress"" file, it fails renaming (only makes a single attempt) to the final name in the working directory.
# After failing rename, it proceeds to consider the message ""delivered"" and does  not attempt to reconsume the file on the next poll (this seems wrong to me, but I'm a newbie).

\\

h3.  Issue #2:  {{tempPrefix}}

You are right this is fixed with CAMEL-1965 as you indicated.  _However_, when using {{tempPrefix}} with the {{fileExist}} option does not behave as expected.  Instead, the {{fileExist}} options are applied to the ""temp"" file and not to the target file.

|| Option Value || Expected Behavior || Actual Behavior when using {{tempPrefix}} ||
| {{Override}} (Default) | If the target file exists, overwrite it | Will overwrite the temp file if it exists but will fail if the target file exists because the rename operation fails |
| {{Fail}} | Fail the exchange immediately if the target file exists | Will fail the exchange immediately if the temp file exists.  Will not fail immediately if the target file exists.  The exchange still fails ultimately though due to the failing of the rename operation. |

I did not test {{Append}} or {{Ignore}} values but they probably have similar problems.  Also, I did not test other File component options that could involve rename operations such as {{readLock:rename}}, {{preMove}}, or {{moveFailed}}.

Let me know if you want me to file a separate issue for #2.  Given the number of potential issues with rename and the Java implementation of it (other filesystems?), I'm still thinking that an eventual ""ForceCopyInsteadOfRename"" option might be a good idea.","19/Oct/09 13:29;davsclaus;*Issue #1*
1. I am fixing the rename to be aligned with other code by doing retries to cater for Windows platforms. *DONE*
Commited: 826686.
","19/Oct/09 15:49;davsclaus;Can you post a snippet of the route that you are using to test this?

","23/Oct/09 08:39;davsclaus;*Issue #2*

I guess it depends on the OS. On my Mac the rename operation will succeed even if the target file exists. So that could be an Windows OS issue, that wont allow renaming a file when the target filename already exists.

But Camel should of course use the {{fileExist}} option in any case",23/Oct/09 09:03;davsclaus;Okay looks like I got the hang of this and have fixes being tested now,"23/Oct/09 10:42;davsclaus;trunk: 828994.

Michael can you test again?","23/Oct/09 16:31;mbmather;Sorry, I haven't got back  to help you out with this as you requested.  I just haven't been able to.  I'll try to hit the new changes this weekend.","24/Oct/09 00:04;mbmather;I produced a test to test the issue with the {{tempPrefix}} use on Windows when the temporary file pre-exists and {{fileExist}} behavior is set to 'Fail'.  This test fails in 2.0.0 and now passes in 2.1-SNAPSHOT.  I also tested that when the _actual_ target file pre-exists that it fails correctly (and not failing due to a ""rename"" failure).

I'd produce the test code here but it is currently intermixed with proprietary stuff.  This looks totally resolved to me!","24/Oct/09 10:49;davsclaus;Thanks Michael for reporting and testing it.

We can add your test code to Camel when you have the proprietary removed.",03/Jun/10 07:24;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Optional charset parameter in convertBodyTo is ignored by most converters in IOConverter,CAMEL-2056,12486955,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,mrt1nz,mrt1nz,09/Oct/09 07:06,03/Jun/10 07:24,14/Mar/19 02:42,09/Oct/09 10:07,2.0.0,,,,,,,,,,2.1.0,,,camel-core,,,,0,"Most of the converters in IOConverter that do a char <-> byte conversion ignore the charset given as second argument to convertBodyTo. The attached patch fixes this.

* For relevant converter methods, it introduces an additional second Exchange parameter from which the desired charset is obtained.
* For backwards compatibility to code that uses the IOConverter directly, a one-parameter version of these methods was kept but the @Converter annotation was removed (Camel doesn't allow overloaded static type converter methods to be registered i.e. they overwrite in other in the registry).
* The patch furthermore removes existing redundancies in code like getting the charset from the exchange, check if the exchange is null etc.
* The String->byte[] converter from ObjectConverter was moved to IOConverter because its implementation is more closely related to other methods in this converter class.",,,,,,,,,,,,,,,,,09/Oct/09 07:06;mrt1nz;camel-core.patch;https://issues.apache.org/jira/secure/attachment/12462779/camel-core.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2009-10-09 10:06:55.613,,,no_permission,,,,,,,,,,,,,76652,,,Thu Jun 03 07:24:45 UTC 2010,,,Patch Available,,,,0|i01m8f:,7371,,,,,,,,,09/Oct/09 07:06;mrt1nz;Attached patch.,"09/Oct/09 10:06;njiang;Applied patch with thanks to Martin, also updated the camel-spring unit test with this patch.

Trunk
http://svn.apache.org/viewvc?rev=823495&view=rev","14/Oct/09 11:40;davsclaus;Reworked patch to avoid ignoring charset issue. Also people should not use the converters directly but use the Camel TypeConverterRegistry.

trunk: 825090.",03/Jun/10 07:24;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Mail Component: Content-ID reference in multipart broken,CAMEL-2054,12486956,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,tide08,tide08,08/Oct/09 00:20,03/Jun/10 07:24,14/Mar/19 02:42,16/Oct/09 04:54,1.6.1,1.6.2,2.0.0,,,,,,,,1.6.2,2.1.0,,camel-mail,,,,0,"It looks like Camel Mail Component does not set Content-ID mime header correctly or probably assumption is that BodyPart will take care of it. As a result embedded images in html body do not work ( img src=""cid:somename.img"").

Currently Content-ID is set as -

//MailBinding.java
// add a Content-ID header to the attachment
messageBodyPart.addHeader(""Content-ID"", attachmentFilename.substring(4));

But according to RFC standards [http://www.ietf.org/rfc/rfc2392.txt], Content-ID value should be enclosed with in angle brackets, so it should be modified to -

//MailBinding.java
// add a Content-ID header to the attachment
messageBodyPart.addHeader(""Content-ID"", ""<"" + attachmentFilename.substring(4) + "">"");

Also, below should be modified which incorrectly sets fileName inclusive of ""cid:"", but expectation would be strip off ""cid"" off it, similar to Content-ID

// Set the filename
messageBodyPart.setFileName(attachmentFilename);

Should be -

// Set the filename
messageBodyPart.setFileName(attachmentFilename.substring(4));

Also, RFC standard mentions that Content-ID should be globally unique but Camel Mail just sets it to filename instead. I understand this can be problematic as camel will have to replace references to each of such cid's  in any of the mail parts. 

As I understand from RFC document, is that this is required in case you send emails itself attachments, and attachments can same name can trample each other(I may be wrong here). I guess we can live with this for a while :)","Email clients like gmail, zimbra. Outlook 2003 works",,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-10-08 04:38:28.363,,,no_permission,,,,,,,,,,,,,76654,,,Thu Jun 03 07:24:43 UTC 2010,,,,,,,0|i01m7z:,7369,,,,,,,,,"08/Oct/09 04:38;davsclaus;See more details here:
http://www.nabble.com/Camel-Mail-Component%3A-Content-ID-incorrect--td25760500.html","08/Oct/09 09:32;davsclaus;Yeah I wonder why/who decided to use the first 4 characters from the filename?

We can use the ExchangeID + iterate number which then will be global unique.","08/Oct/09 09:51;davsclaus;I am not sure about the filename thing must be trunked to 4 as well.
I cannot see this in the RFC.

I have however fixed the angle bracket thing.

trunk: 823102.
1.x: 823105.",08/Oct/09 11:38;davsclaus;Just a test,"09/Oct/09 03:36;tide08;Thanks Claus for the fix. Yes, truncating 4 char in filename is not RFC standard but the problem is filename shows up as ""cid:filename"" in email, which is not nice as users do not see readable filename in the email. I hope this gets fixed.

I mentioned wrong fix above, it should be conditional i.e.

+                    if (attachmentFilename.toLowerCase().startsWith(""cid:"")) {
+                        messageBodyPart.setFileName(attachmentFilename.substring(4));
+                    } else {
+                        messageBodyPart.setFileName(attachmentFilename);
+                    }

Regarding, unique name for content-id, it can be tough one to resolve as camel generated content-id has to be than replace in any of the mail parts which are referencing it.

For ex: If I have logo.gif as attachment, I may have referenced it in email body like <img src=""cid:logo.gif"" /> 

So if camel generates unique content-id for this part as lets say - 123ABC than part will have Content-ID: <123ABC> than we have to change the reference for all logo.gif in body part 

i.e. above image reference should now get changed to <img src=""123ABC"" />

Thanks!
","09/Oct/09 08:15;davsclaus;@slad

Yeah if we can get the attachment file name to appear as nice readable instead of cid:0001 then that would be great.

In terms of unique global it may or may not be a bit overkill. I think we should leave it as is, as you can refer to them more easily when its cid:xxxx.
But the substring to 4 is something we should remove as well.","16/Oct/09 04:54;davsclaus;trunk: 825765
1.x: 825767

Thanks I have fixed the filename.

Would be great if you could test it on your system.","10/Nov/09 22:27;tide08;@Claus

Sorry, it took so long but we were in release cycle. Updated camel to 2.1-SNAPSHOT and it works like charm!

Thanks",03/Jun/10 07:24;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Improper configuration of MINA connector and acceptor instances; Better producer,CAMEL-2049,12487178,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,rnd,rnd,01/Oct/09 09:00,07/Feb/10 09:56,14/Mar/19 02:42,08/Oct/09 06:23,1.6.0,,,,,,,,,,1.6.2,2.0.0,2.1.0,camel-mina,,,,0,"A sample scenario where both MINA producer(s) and consumer(s) are used in the same route (e.g. some kind of dispatching or proxying):

from(""mina:tcp://localhost:8888?lazySessionCreation=true&sync=true"")
    .to(""mina:tcp://localhost:7777?lazySessionCreation=true&sync=true"");

from(""mina:tcp://localhost:7777?lazySessionCreation=true&sync=true"")
    .process(/*prepare answer*/);

Due to improper configuration of MINA acceptor and connector instances in MinaComponent#createSocketEndpoint(), no more than 15 incoming threads can be served at port 8888 -- the producer becomes unable to open an outgoing session.  This is actually an issue of MINA, not of Camel -- a test application written using ""raw"" MINA shows the same behaviour.

A solution is to apply configuration rules described, e.g., at http://mina.apache.org/configuring-thread-model.html, as done in the attached patch.

Moreover, the standard Camel-MINA producer is not thread-safe -- actually a well-known point.  A second attached file contains a thread pool-based reentrant version, which can be efficiently used for TCP endpoints with both parameters 'lazySessionCreation' and 'sync' set to true.

",Windows XP,,,,,,,,,,,,,,,,06/Oct/09 13:45;rnd;2009-10-06.patch;https://issues.apache.org/jira/secure/attachment/12462860/2009-10-06.patch,01/Oct/09 09:03;rnd;MinaComponent.patch;https://issues.apache.org/jira/secure/attachment/12463039/MinaComponent.patch,01/Oct/09 09:03;rnd;MinaSocketProducer.java;https://issues.apache.org/jira/secure/attachment/12463041/MinaSocketProducer.java,,,3.0,,,,,,,,,,,,,,,,,,,2009-10-03 08:07:59.311,,,no_permission,,,,,,,,,,,,,76655,,,Thu Oct 08 06:20:38 UTC 2009,,,Patch Available,,,,0|i01m6n:,7363,,,,,,,,,01/Oct/09 09:03;rnd;MINA component patch and thread-save producer,"03/Oct/09 08:07;davsclaus;Thanks for these patches.

I was hoping that the Mina project much sooner have been able to release Apache Mina 2.0, which they unfortunately haven't.
So we are still using the older Mina 1.1.x.

Anyway I think you patches looks according to the recommended documentation at Mina itself so I will get them into the codebase.","03/Oct/09 08:45;davsclaus;trunk: 821272, 823031.

1.x: 821276, 823056.",03/Oct/09 08:56;davsclaus;In Camel 2.0 the MinaProducer is now pooled which resolves the thread safe issue there as only one instance is using it at any given time.,"03/Oct/09 08:59;davsclaus;I am a bit inclined to patch Camel 1.x with your socket producer as then we got different solution in 1.x vs. 2.0 (pooled)

Any thoughts?","03/Oct/09 09:01;davsclaus;And for the future it would be great if you also provide unit tests that surfaces the bug and which we can use to ensure the patch fixes ""something"".","03/Oct/09 20:11;rnd;> I am a bit inclined to patch Camel 1.x with your socket producer
> as then we got different solution in 1.x vs. 2.0 (pooled)
> Any thoughts?

If there is no way to make the 1.x producer pooled as well, it would be IMHO better to have different solutions in 1.x vs. 2.0 than to have an uniform solution which works in 2.0 only...

","04/Oct/09 08:52;davsclaus;Dmytro

Do you mind creating a new patch with the updated code from the 1.x branch which uses your thread safe producer.
Then it would be much easier for me to commit it to the 1.x codebase.

Then we have a solution with concurrent mina producers for both 1.x and 2.0

Backporting the pooling is *way* to much work.","04/Oct/09 15:00;rnd;Claus,

I would like to introduce a new URL parameter for MINA TCP endpoints to specify the count of producer threads (parameter ""threadsCount"" of MinaSocketProducer's constructor).  For example,
...
.to(""mina:tcp://somehost:8888?sync=true&lazySessionCreation=true&poolSize=16"")

Do you agree?  Or would you rather prefer this parameter to be hard-coded?  What default value should it have?

And the second question: How should I handle the lazySessionCreation parameter?  Currently I tend to assume that session creation is always lazy.
","05/Oct/09 04:41;davsclaus;Q1:
As it is going to be a custom solution for camel 1.x I would prefer it to be a hardcoded value. But I also think it make sense to configure it as well different users have different needs. So okay to add such an option but name it *producerPoolSize* to indicate its producer *only*.

Q2:
Yeah I think its fine in this case to let this new producer always being lazy. So the {{lazySessionCreation}} no longer apply to this new producer. 
",06/Oct/09 13:45;rnd;The new patch is attached.,"06/Oct/09 15:52;rnd;BTW, the statement {{acceptorConfig.setThreadModel(ThreadModel.MANUAL);}} from _MinaComponent.patch_ seems to be absent in both 1.x and 2.0 branches. Today's _2009-10-06.patch_ introduces it again, but this patch is intended for 1.x only. Claus, could you please add the aforementioned line in 2.0 too? ","08/Oct/09 06:20;davsclaus;I have fixed the missing setThreadModel in 2.0

I have also applied your patch to 1.x. Thanks a lot.
1.x: 823060.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The camel core 2.0.0 artifact release doesn't contain the @MessageDriven annotation,CAMEL-2045,12484619,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,,kevinmmckee,kevinmmckee,29/Sep/09 01:29,29/Sep/09 01:33,14/Mar/19 02:42,29/Sep/09 01:33,,,,,,,,,,,,,,camel-core,,,,0,"The artifact coming from the maven central repo doesn't contain the @org.apache.camel.MessageDriven annotation.

This annotation is still in the javadoc, so I assume it hasn't been removed?

<dependency>
	<groupId>org.apache.camel</groupId>
	<artifactId>camel-core</artifactId>
	<version>2.0.0</version>
	<scope>provided</scope>
</dependency>


",All,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76656,,,Tue Sep 29 01:33:30 UTC 2009,,,,,,,0|i01m5r:,7359,,,,,,,,,"29/Sep/09 01:33;kevinmmckee;By searching around on google, I just found that @Consume should be used in it's place.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
bundle resolver issues of camel features ,CAMEL-2041,12486947,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,28/Sep/09 08:22,27/Nov/10 06:14,14/Mar/19 02:42,27/Oct/09 11:46,,,,,,,,,,,1.6.2,2.1.0,,,,,,0,"As we did some work for better camel version, some third party bundle that camel-xxx dependents on also need to be updated.
Otherwise, OSGi platform will complain about it can't find right version of bundle , even the old working bundle is installed.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-06-03 07:24:40.316,,,no_permission,,,,,,,,,,,,,76657,,,Thu Jun 03 07:24:40 UTC 2010,,,,,,,0|i01m4v:,7355,,,,,,,,,03/Jun/10 07:24;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java.io.NotSerializableException: org.apache.camel.component.jms.JmsQueueEndpoint (polling consumer with POJO),CAMEL-2033,12486959,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,cmoulliard,cmoulliard,22/Sep/09 07:27,03/Jun/10 07:24,14/Mar/19 02:42,22/Sep/09 09:52,,,,,,,,,,,2.1.0,,,,,,,0,"The following error is generated when a POJO defined as a polling consumer try to consume messages from an activemq queue

CaughtExceptionType:java.io.NotSerializableException,
CaughtExceptionMessage:org.apache.camel.component.jms.JmsQueueEndpoint,
StackTrace:java.io.NotSerializableException:
org.apache.camel.component.jms.JmsQueueEndpoint
       at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1081)
       at java.io.ObjectOutputStream.writeArray(ObjectOutputStream.java:1251)
       at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1075)
       at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:302)
       at org.apache.camel.component.bean.BeanInvocation.writeExternal(BeanInvocation.java:104)
       at java.io.ObjectOutputStream.writeExternalData(ObjectOutputStream.java:1310)
       at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1288)
       at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1079)
       at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:302)
       at org.apache.activemq.command.ActiveMQObjectMessage.storeContent(ActiveMQObjectMessage.java:98)


Here is the code of the POJO

{code}
public class ReportingConsumer {
	
	@EndpointInject(name = ""queueReportingEndpoint"")
	private ConsumerTemplate consumer;
	
       @EndpointInject(name = ""queueReportingEndpoint"")
	private Endpoint endpoint;
	
	public List<Map<String, Object>> collectMessages() {

    	List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();
    	List<Map<String, Object>> received = new ArrayList<Map<String, Object>>();
    	
	received = consumer.receiveBody(endpoint, List.class);
...
{code}


Everything works fine when the POJO is designed like this :

{code}
@Consume(ref=""queueToBeRead"")
public List<> method(List<>) {

...

}
{code}

but in this case it is not a polling consumer",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-09-22 09:52:32.206,,,no_permission,,,,,,,,,,,,,76658,,,Thu Jun 03 07:24:35 UTC 2010,,,,,,,0|i01m33:,7347,,,,,,,,,22/Sep/09 09:52;davsclaus;trunk: 817576.,"22/Sep/09 10:38;cmoulliard;Thx for the correction.

Top of Karaf (osgi server), we have a strange error generated when I update my camel bundle containing this route and the code of the consumer. Here is the error :

{code}
12:34:36,633 | INFO  | heduler_Worker-2 | x3s                              | rg.apache.camel.processor.Logger   88 | Exchange[
, BodyType:org.quartz.JobDetail
, Body:JobDetail 'DEFAULT.quartz://x3sReporting/clientError?cron=0+0%2F2+9-18+%3F+*+MON-FRI':  jobClass: 'org.apache.camel.component.quartz.CamelJob isStateful: false isVolatile: false isDurable: false requestsRecovers: false
, CaughtExceptionType:java.lang.IllegalStateException, CaughtExceptionMessage:Invalid BundleContext., StackTrace:java.lang.IllegalStateException: Invalid BundleContext.
	at org.apache.felix.framework.BundleContextImpl.checkValidity(BundleContextImpl.java:393)
	at org.apache.felix.framework.BundleContextImpl.getServiceReference(BundleContextImpl.java:257)
	at org.apache.camel.osgi.OsgiServiceRegistry.lookup(OsgiServiceRegistry.java:47)
	at org.apache.camel.osgi.CompositeRegistry.lookup(CompositeRegistry.java:59)
	at org.apache.camel.impl.DefaultCamelContext.createEndpoint(DefaultCamelContext.java:1101)
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:408)
	at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:52)
	at org.apache.camel.impl.DefaultConsumerTemplate.resolveMandatoryEndpoint(DefaultConsumerTemplate.java:134)
	at org.apache.camel.impl.DefaultConsumerTemplate.receive(DefaultConsumerTemplate.java:53)
	at org.apache.camel.impl.DefaultConsumerTemplate.receiveBody(DefaultConsumerTemplate.java:80)
	at org.apache.camel.impl.DefaultConsumerTemplate.receiveBody(DefaultConsumerTemplate.java:107)
	at org.apache.camel.impl.DefaultConsumerTemplate.receiveBody(DefaultConsumerTemplate.java:112)
	at com.xpectis.x3s.core.util.ReportingConsumer.collectMessages(ReportingConsumer.java:29)
{code}",03/Jun/10 07:24;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
XmppMessages don't get converted to strings,CAMEL-2032,12486948,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,slewis,slewis,slewis,21/Sep/09 16:24,03/Jun/10 07:24,14/Mar/19 02:42,21/Sep/09 17:27,2.0.0,,,,,,,,,,2.1.0,,,camel-xmpp,,,,0,"This has been bugging me for awhile, when you have a route using XMPP you get instances of XmppMessage in your route rather than just a string containing the body of the XmppMessage.  Tracked that down and took out the work arounds I had previously put in my contributed xmpp tests.",,,,,,,,,,,,,,,,,21/Sep/09 16:24;slewis;patch.txt;https://issues.apache.org/jira/secure/attachment/12462924/patch.txt,,,,,1.0,,,,,,,,,,,,,,,,,,,2009-09-21 17:27:32.893,,,no_permission,,,,,,,,,,,,,76659,,,Thu Jun 03 07:24:34 UTC 2010,,,Patch Available,,,,0|i01m2v:,7346,,,,,,,,,"21/Sep/09 17:27;janstey;Nice catch Stan!

I've committed your fix here http://svn.apache.org/viewvc?rev=817330&view=rev",03/Jun/10 07:24;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException when defining Camel route using Spring JavaConfig,CAMEL-2027,12486969,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,dragisak,dragisak,18/Sep/09 22:50,03/Jun/10 07:24,14/Mar/19 02:42,20/Sep/09 08:12,2.0.0,,,,,,,,,,2.1.0,,,camel-spring,,,,0,"Following unit test fails. 

Similar test, but using Spring XML with <routeBuilder ref=""...""/> instead of Spring JavaConfig,  would succeed.

{code}
@ContextConfiguration(
    locations = ""org.plos.camel.BeanJavaConfigTest$ContextConfig"",
    loader = JavaConfigContextLoader.class
)
public class BeanJavaConfigTest extends AbstractTestNGSpringContextTests {

  @EndpointInject(uri = ""mock:end"")
  protected MockEndpoint endpoint;

  @EndpointInject(uri = ""mock:error"")
  protected MockEndpoint errorEndpoint;

  @Produce(uri = ""direct:start"")
  protected ProducerTemplate producer;

  @Test
  @DirtiesContext
  public void testSomething() throws Exception {
    endpoint.expectedMessageCount(1);
    endpoint.message(0).body().isEqualTo(""Message Body"");
    producer.sendBody(""Message Body"");
    endpoint.assertIsSatisfied();
  }

  public static class SomeBean {

    @Handler
    public String someMethod(String body) {
      System.out.println(""Received: "" + body);
      return body;
    }
  }

  @Configuration
  public static class ContextConfig extends SingleRouteCamelConfiguration {

    @Bean
    @Override
    public RouteBuilder route() {
      return new RouteBuilder() {
        @Override
        public void configure() throws Exception {
          from(""direct:start"")
              .bean(new SomeBean())
              .to(""mock:end"")
              .errorHandler(deadLetterChannel(""mock:end""));
        }
      };
    }
  }
}
{code}

Error stack:

{noformat}
java.lang.IllegalStateException: Failed to load ApplicationContext

...

Caused by: java.lang.NullPointerException
	at org.apache.camel.spring.spi.ApplicationContextRegistry.lookup(ApplicationContextRegistry.java:41)
	at org.apache.camel.component.bean.BeanInfo.createParameterMappingStrategy(BeanInfo.java:115)
	at org.apache.camel.component.bean.BeanProcessor.<init>(BeanProcessor.java:55)
	at org.apache.camel.model.BeanDefinition.createProcessor(BeanDefinition.java:156)
	at org.apache.camel.model.ProcessorDefinition.makeProcessor(ProcessorDefinition.java:276)
	at org.apache.camel.model.ProcessorDefinition.addRoutes(ProcessorDefinition.java:116)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:439)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:126)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:569)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:924)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:901)
	at org.apache.camel.spring.SpringCamelContext.maybeDoStart(SpringCamelContext.java:165)
	at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:160)
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:816)
	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:99)
	at org.apache.camel.spring.SpringCamelContext.afterPropertiesSet(SpringCamelContext.java:87)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1369)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1335)
	... 74 more
{noformat}

",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-09-20 08:12:57.019,,,no_permission,,,,,,,,,,,,,76660,,,Thu Jun 03 07:24:32 UTC 2010,,,,,,,0|i01m1r:,7341,,,,,,,,,20/Sep/09 08:12;davsclaus;trunk: 816992.,03/Jun/10 07:24;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
serviceClass needs to be specified for PAYLOAD or MESSAGE mode even though it's documented as not being required.,CAMEL-2025,12486965,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,wtam,slewis,slewis,18/Sep/09 13:35,03/Jun/10 07:24,14/Mar/19 02:42,18/Sep/09 21:28,2.0.0,,,,,,,,,,2.1.0,,,camel-cxf,,,,0,"According to http://camel.apache.org/cxf.html if you specify PAYLOAD or MESSAGE mode you don't need to specify the serviceClass parameter if wsdlUrl is provided. However this isn't the case, with a route like:

cxf://localhost:8080/blah?wsdlURL=classpath:hello/HelloWorld-DOC.wsdl&dataFormat=PAYLOAD

The following exception is thrown:

{code}
java.lang.IllegalArgumentException: serviceClass must be specified and not empty
	at org.apache.camel.util.ObjectHelper.notEmpty(ObjectHelper.java:271)
	at org.apache.camel.component.cxf.CxfEndpoint.createServerFactoryBean(CxfEndpoint.java:303)
	at org.apache.camel.component.cxf.CxfConsumer.<init>(CxfConsumer.java:47)
	at org.apache.camel.component.cxf.CxfEndpoint.createConsumer(CxfEndpoint.java:97)
	at org.apache.camel.impl.EventDrivenConsumerRoute.addServices(EventDrivenConsumerRoute.java:59)
	at org.apache.camel.impl.DefaultRoute.onStartingServices(DefaultRoute.java:83)
	at org.apache.camel.impl.RouteService.doStart(RouteService.java:94)
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:843)
	at org.apache.camel.test.junit4.CamelTestSupport.startCamelContext(CamelTestSupport.java:147)
	at org.apache.camel.test.junit4.CamelTestSupport.setUp(CamelTestSupport.java:100)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:616)
{code}

as the code doesn't check what mode is being used before testing if serviceClass is set or not.

Attached patch adds a test that reproduces this and also fixes the issue.",,,,,,,,,,,,,,,,,18/Sep/09 13:37;slewis;patch.txt;https://issues.apache.org/jira/secure/attachment/12462788/patch.txt,,,,,1.0,,,,,,,,,,,,,,,,,,,2009-09-18 21:28:02.013,,,no_permission,,,,,,,,,,,,,76661,,,Thu Jun 03 07:24:31 UTC 2010,,,Patch Available,,,,0|i01m1b:,7339,,,,,,,,,"18/Sep/09 21:28;wtam;Hi Stan, thanks for the report and the patch.   The problem is specifically for non-spring created endpoint.   I applied your patch and also fixed the same issue on the producer side.   We actually have a test/wsdl (for this feature but for spring created endpoint) we can reuse.  So, I reused it instead.","18/Sep/09 21:28;wtam;Committed revision 816789.
",03/Jun/10 07:24;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE when the bundle is camel-osgi bundle is inactive,CAMEL-2020,12486983,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,17/Sep/09 09:21,03/Jun/10 07:24,14/Mar/19 02:42,17/Sep/09 10:32,1.5.0,1.6.0,1.6.1,2.0.0,2.0-M1,2.0-M2,2.0-M3,,,,1.6.2,2.1.0,,,,,,0,"The stack trace.
{code}
   java.lang.NullPointerException
	at
org.apache.camel.osgi.OsgiFactoryFinder.getResource(OsgiFactoryFinder.java:85)
	at
org.apache.camel.osgi.OsgiFactoryFinder.findClass(OsgiFactoryFinder.java:51)
	at
org.apache.camel.component.file.GenericFileEndpoint.createGenericFileStrategy(GenericFileEndpoint.java:130)
	at
org.apache.camel.component.file.GenericFileEndpoint.getGenericFileProcessStrategy(GenericFileEndpoint.java:114)
	at
org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:162)
	at
org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:120)
	at
org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:93)
	at
org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:98)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
	at
java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)
	at
java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98)
	at
java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:181)
	at
java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:205)
	at
java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at
java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:619)
{code}
Here is the mail thread[1]  which discusses about this issue.
[1]http://www.nabble.com/Error-using-camel-file-with-windows-tt25475829.html#a25486384
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-06-03 07:24:28.621,,,no_permission,,,,,,,,,,,,,76662,,,Thu Jun 03 07:24:28 UTC 2010,,,,,,,0|i01m07:,7334,,,,,,,,,"17/Sep/09 10:32;njiang;trunk
 http://svn.apache.org/viewvc?rev=816105&view=rev
camel 1.x branch 
 http://svn.apache.org/viewvc?rev=816113&view=rev",03/Jun/10 07:24;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Timer Endpoint starts the thread before configuration,CAMEL-2018,12486974,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,yuri,yuri,16/Sep/09 16:15,03/Jun/10 07:24,14/Mar/19 02:42,18/Sep/09 07:42,2.0.0,,,,,,,,,,2.1.0,,,camel-core,,,,0,"The Timer endpoint does not appear to allow configuration using Spring XML.  When debugging, the Timer is created (with default configuration) and then the configuration magic happens

TimerComponent.createEndpoint calls
new TimerEndpoint() which calls
component.getTimer(this)

Which creates the timer before the properties are set",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-09-18 07:42:28.154,,,no_permission,,,,,,,,,,,,,76663,,,Thu Jun 03 07:24:28 UTC 2010,,,,,,,0|i01lzr:,7332,,,,,,,,,18/Sep/09 07:42;davsclaus;trunk: 816501,18/Sep/09 07:43;davsclaus;However its only a few options you can configure on the Timer itself. The other parameters are configured later which are the period etc. So its only a very minor issue.,18/Sep/09 09:11;yuri;Thanks for fixing it.  Without Non Daemon threads you need to create an extra thread to stop the JVM from exiting.,"18/Sep/09 09:18;davsclaus;You can use the Main support to start Camel.

Or use camel-spring that has a Main class to start Camel.
",03/Jun/10 07:24;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Connection reset in http component,CAMEL-2017,12487005,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,dragisak,dragisak,15/Sep/09 18:30,03/Jun/10 07:24,14/Mar/19 02:42,22/Sep/09 06:05,2.0.0,,,,,,,,,,2.1.0,,,camel-http,,,,0,"This simple example will fail in http component with I/O Exception. 

Worked in 2.0-M3 but fails in 2.0.0

{code:java}
Namespaces ns = new Namespaces(""atom"", ""http://www.w3.org/2005/Atom"");
from(""rss:http://www.plosone.org/article/feed"")
  .marshal().rss()
  .setHeader(Exchange.HTTP_URI).xpath(""//atom:entry/atom:link[@type=\""application/pdf\""]/@href"", ns)
  .to(""http://foo"")
  .to(""mock:end"");
{code}

Here is debug output:

{noformat} 
Camel thread 0: RssComponent] HttpProducer                   DEBUG No
Content-Type provided for URI:
http://www.plosone.org/article/fetchObjectAttachment.action?uri=info:doi/10.1371/journal.pone.0006932&representation=PDF with exchange: Exchange[Message: [B@150ecc7]
[       Camel thread 0: RssComponent] HttpProducer
DEBUG Executing http POST method:
http://www.plosone.org/article/fetchObjectAttachment.action?uri=info:doi/10.1371/journal.pone.0006932&representation=PDF
[       Camel thread 0: RssComponent] HttpMethodDirector
INFO  I/O exception (java.net.SocketException) caught when processing
request: Connection reset
[       Camel thread 0: RssComponent] HttpMethodDirector
INFO  Retrying request
[       Camel thread 0: RssComponent] HttpMethodDirector
INFO  I/O exception (java.net.SocketException) caught when processing
request: Connection reset
[       Camel thread 0: RssComponent] HttpMethodDirector
INFO  Retrying request
[       Camel thread 0: RssComponent] HttpMethodDirector
INFO  I/O exception (java.net.SocketException) caught when processing
request: Connection reset
[       Camel thread 0: RssComponent] HttpMethodDirector
INFO  Retrying request
[       Camel thread 0: RssComponent] DefaultErrorHandler
DEBUG Failed delivery for exchangeId:
ID-dkrsmanovic-usws-55084-1252968147202-0-1. On delivery attempt: 0
caught: java.net.SocketException: Connection reset 
{noformat} ","Camel 2.0.0, Ubuntu Linux, Sun JDK 1.6.0_16 (32bit)",,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-09-20 09:43:09.416,,,no_permission,,,,,,,,,,,,,76664,,,Thu Jun 03 07:24:27 UTC 2010,,,,,,,0|i01lzj:,7331,Regression,,,,,,,,"20/Sep/09 09:43;davsclaus;Works fine on trunk
{code}
public class RssToHttpIssueTest extends CamelTestSupport {

    @Test
    public void testRssToHttpIssueTest() throws Exception {
        MockEndpoint mock = getMockEndpoint(""mock:end"");
        mock.expectedMinimumMessageCount(1);

        assertMockEndpointsSatisfied();
    }

    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                Namespaces ns = new Namespaces(""atom"", ""http://www.w3.org/2005/Atom"");
                from(""rss:http://www.plosone.org/article/feed"")
                        .marshal().rss()
                        .setHeader(Exchange.HTTP_URI).xpath(""//atom:entry/atom:link[@type=\""application/pdf\""]/@href"", ns)
                        .to(""http://dummy"")
                        .to(""mock:end"");
            }
        };
    }
}
{code}","20/Sep/09 09:57;davsclaus;Can you try with Camel trunk?

And the error you see with 2.0 could be some remote server issue at plosone. Can you try again.","20/Sep/09 09:58;davsclaus;Added unit test, trunk: 817002.",21/Sep/09 21:08;dragisak;Test is working in latest 2.1-SNAPSHOT (Rev 817336),22/Sep/09 06:05;davsclaus;Thanks for testing on trunk,03/Jun/10 07:24;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jpa exports the org.apache.camel.processor.interceptor which leads to a split package,CAMEL-2016,12486976,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,gnt,gnt,15/Sep/09 12:12,03/Jun/10 07:24,14/Mar/19 02:42,15/Sep/09 13:04,2.0.0,,,,,,,,,,2.1.0,,,camel-jpa,,,,0,"The package is already exported by camel-core, so the class in this package needs to be moved to another package.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-09-15 13:04:02.438,,,no_permission,,,,,,,,,,,,,76665,,,Thu Jun 03 07:24:26 UTC 2010,,,,,,,0|i01lzb:,7330,,,,,,,,,15/Sep/09 13:04;davsclaus;trunk: 815306.,16/Sep/09 09:32;davsclaus;Only affects 2.x,03/Jun/10 07:24;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The matchOnUriPrefix option should set per endpoint,CAMEL-2002,12487015,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,11/Sep/09 02:11,03/Jun/10 07:24,14/Mar/19 02:42,11/Sep/09 02:54,2.0.0,2.0-M1,2.0-M2,2.0-M3,,,,,,,2.1.0,,,camel-http,,,,0,"Current camel-http component's  matchOnUriPrefix option is set to the component level. If we have the route like this

{code}
    from(""jetty://http://localhost:9000/hello?matchOnUriPerfix"").to(...)
    from(""jetty://http://localhost:9000/test"").to(...)   
{code} 

You can't access the service with http://localhost:9000/helloworld, since the Jetty compnent's matchOnUriPrefix is override by last route rule.
So we need to set the matchOnUriPrefix per Jetty endpoint.

The fix will also effect to the camel-servlet component 
 ",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-06-03 07:24:19.495,,,no_permission,,,,,,,,,,,,,76666,,,Thu Jun 03 07:24:19 UTC 2010,,,,,,,0|i01lw7:,7316,,,,,,,,,"11/Sep/09 02:47;njiang;Just check the code of camel-1.x branch , the matchOnUriPrefix is new to camel 2.x.",11/Sep/09 02:54;njiang;http://svn.apache.org/viewvc?rev=813653&view=rev,03/Jun/10 07:24;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-itest - contains multiple slf4j issue,CAMEL-1999,12487018,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,njiang,njiang,09/Sep/09 13:03,03/Jun/10 07:24,14/Mar/19 02:42,09/Sep/09 13:23,,,,,,,,,,,2.1.0,,,tests,,,,0,"When running {{mvn clean install}} in camel\tests\camel-itest I get these warnings

{code}
Running org.apache.camel.itest.tx.JmsToHttpTXWithRollbackTest
SLF4J: Class path contains multiple SLF4J bindings.
SLF4J: Found binding in [jar:file:/Users/davsclaus/.m2/repository/org/slf4j/slf4j-jdk14/1.5.8/slf4j-jdk14-1.5.8.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: Found binding in [jar:file:/Users/davsclaus/.m2/repository/org/slf4j/slf4j-log4j12/1.5.8/slf4j-log4j12-1.5.8.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 5.023 sec
{code}",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-06-03 07:24:18.946,,,no_permission,,,,,,,,,,,,,76667,,,Thu Jun 03 07:24:18 UTC 2010,,,,,,,0|i01lvj:,7313,,,,,,,,,"09/Sep/09 13:23;njiang;trunk
http://svn.apache.org/viewvc?rev=812940&view=rev",03/Jun/10 07:24;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
PackageScanDefinition missing public setter methods making it difficult to configure CamelContext via CamelContextFactoryBean using regular Spring definition,CAMEL-1997,12487019,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,snowbug,snowbug,08/Sep/09 22:56,03/Jun/10 07:24,14/Mar/19 02:42,09/Sep/09 11:30,2.0.0,,,,,,,,,,2.1.0,,,camel-core,,,,0,"In order to use spring features like ""depends-on"" and PropertyPlaceholderConfigure, it is desirable to configure the CamelContext using the standard Spring boolean definition (bean and property tags, etc), instead of the shortcut xbean style definition (<camelContext> tag).

However, the org.apache.camel.spring.CamelContextFactoryBean, which is typically used to configure the CamelContext bean, uses the org.apache.camel.model.PackageScanDefinition class to hold the package scanning information. This class does not have any public setter for its private properties and can only be configured via xbean. This makes it very hard to configure the CamelContext bean using the standard Spring bean definition. Please add the public setters to this class so it can be used by Spring directly.

At present, a workaround is to implement a subclass of the org.apache.camel.model.PackageScanDefinition to add the missing setters. A sample Spring definition would look like this:

    <bean id=""camel"" class=""org.apache.camel.spring.CamelContextFactoryBean"" depends-on=""my-other-bean"">
        <property name=""trace"" value=""false""/>
        <property name=""packageScan"">
            <bean class=""com.mypackage.CamelPackageScanDefinition"">
                <property name=""packageList""><value>${route.packageScan}</value></property>
            </bean>
        </property>
        </bean>

    <bean id=""template"" class=""org.apache.camel.spring.CamelProducerTemplateFactoryBean"">
        <property name=""camelContext"" ref=""camel""/>
    </bean>

In the above sample, the CamelPackageScanDefinition is the custom subclass.
",N/A,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-09-09 11:30:05.935,,,no_permission,,,,,,,,,,,,,76668,,,Thu Jun 03 07:24:18 UTC 2010,,,,,,,0|i01lv3:,7311,,,,,,,,,09/Sep/09 11:30;davsclaus;trunk: 812889.,03/Jun/10 07:24;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"WS-Adressing: No headers in the respose, [MAPs retrieved from message null]",CAMEL-1994,12487022,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,shailesh,shailesh,07/Sep/09 16:42,03/Jun/10 07:24,14/Mar/19 02:42,21/Sep/09 13:26,2.0.0,,,,,,,,,,2.1.0,,,camel-cxf,,,,0,"I am using a cxf endpoint configured in POJO mode and running in wsdl-first-approach. When a web-service client(Soap-UI) send a request with headers, it expects headers back with appropriate response Action defined in wsdl, however, with this configuration no headers are not being sent back.

Error seen on debug logs:
ContextUtils                   DEBUG retrieving MAPs from context property javax.xml.ws.addressing.context.inbound
ContextUtils                   WARN  WS-Addressing - failed to retrieve Message Addressing Properties from context
MAPAggregator                  DEBUG MAPs retrieved from message null
ContextUtils                   DEBUG retrieving MAPs from context property javax.xml.ws.addressing.context.outbound
ContextUtils                   WARN  WS-Addressing - failed to retrieve Message Addressing Properties from context
ContextUtils                   DEBUG retrieving MAPs from context property javax.xml.ws.addressing.context.outbound
ContextUtils                   WARN  WS-Addressing - failed to retrieve Message Addressing Properties from context


Please find attached detailed logs, a sample project, and a sample xml request.

Some more details:
Endpoint configuration: CxfEndpoint, WSAdressing Feature enabled, Wsdl First approach
Camel Version: 2.0.0
CXF Version: 2.2.2
","Windows XP, Camel 2.0.0, JDK 1.5, Soap-UI",,,,,,,,,,,,,,,,07/Sep/09 16:55;shailesh;IHEXDS.zip;https://issues.apache.org/jira/secure/attachment/12462821/IHEXDS.zip,07/Sep/09 16:45;shailesh;ebxml_request.xml;https://issues.apache.org/jira/secure/attachment/12462809/ebxml_request.xml,07/Sep/09 16:45;shailesh;logs.txt;https://issues.apache.org/jira/secure/attachment/12462808/logs.txt,18/Sep/09 22:14;wtam;wsa-test.patch;https://issues.apache.org/jira/secure/attachment/12462810/wsa-test.patch,,4.0,,,,,,,,,,,,,,,,,,,2009-09-18 22:14:23.292,,,no_permission,,,,,,,,,,,,,76669,,,Thu Jun 03 07:24:16 UTC 2010,,,,,,,0|i01luf:,7308,,,,,,,,,"07/Sep/09 16:45;shailesh;Error logfile, sample xml request and eclipse project","18/Sep/09 22:14;wtam;Hi Shailesh, thanks for the patience.  I created a smaller test case (wsa-test.patch) and I did see WS Addressing headers getting propagated in both directions (request and response).  However, the test client did not receive the response properly.  Willem has agreed to look into the issue.","21/Sep/09 08:09;njiang;Hi William, 

I found the key why your client can't get the right response.
It is because you use the simple front end instead of using JaxWs front end to create the end service and front client.  These server and client do not take the JAXWS annotation into consideration. So the route cxf endpoint which are created by the JAXWS front end can't understand the request and response message.

Now It looks like the response message to the front client have a wrong RelatesTo ID, which is take from the real back end service. 
","21/Sep/09 13:25;njiang;This issue is caused by current camel-cxf component doesn't copy the ""javax.xml.ws.addressing.*"" header from the cxf Exchange inMessage to the outMessage, so the ContextUtils complains about it can't find the right header to generate a right ws addressing header.
I just committed a quick fix for this issue, by copying the header in CxfConsumer's invoker.","21/Sep/09 13:26;njiang;trunk 
http://svn.apache.org/viewvc?rev=817240&view=rev","22/Sep/09 03:22;shailesh;Hi Willem,
Thank for providing the fix so quickly. 
I would like to test this in project, is there a way i can get a copy of the jar, since I don't have the camel Development environment setup?

I tried looking up in the snapshot repository, but couldn't find the updated library (21/Sep/09)
https://repository.apache.org/content/repositories/snapshots/org/apache/camel/camel-cxf/2.1-SNAPSHOT/

Thanks,
Shailesh.

","22/Sep/09 13:52;njiang;@Shailesh
You find the right snapshot position, but I don't know why the jar file is not updated.
There are some thing wrong with the deployment of camel. 
Maybe you need to check out the Camel source code from here[1] and run 
""mvn clean install -Dtest=false"" from the root to build the code yourself.

[1] http://svn.apache.org/repos/asf/camel/trunk

","22/Sep/09 14:01;davsclaus;I have asked Gert V. to force an update at Hudson.

So take a look in the next day or so, to see if the Apache repository is not updated using that URI you found (its the correct one).",03/Jun/10 07:24;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-cxf should let users to set out SOAP headers,CAMEL-1983,12487662,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,wtam,wtam,wtam,03/Sep/09 04:07,03/Nov/10 05:10,14/Mar/19 02:42,07/Sep/09 02:24,1.6.1,,,,,,,,,,1.6.2,,,,,,,0,"User reported trouble setting out SOAP headers in 1.x 
http://www.nabble.com/setting-soap-headers-in-camel-cxf-router-td25068148.html#a25068148

We should also test/fix it in 2.x as well as adding documentation on how to set/get SOAP headers in POJO and PAYLOAD modes.
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76670,,,Mon Sep 07 02:24:17 UTC 2009,,,,,,,0|i01lrz:,7297,,,,,,,,,03/Sep/09 04:09;wtam;Fixed in 1.x.  Committed revision 810776.,"06/Sep/09 17:18;wtam;2.x was fine.  Ported unit test to trunk.
Committed revision 811839.
",07/Sep/09 02:24;wtam;Wiki has been updated.   http://cwiki.apache.org/confluence/display/CAMEL/CXF,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JMSBinding needs to be able to deal with an null endpoint,CAMEL-1982,12487030,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gtully,gtully,gtully,02/Sep/09 17:45,03/Jun/10 07:24,14/Mar/19 02:42,02/Sep/09 17:49,2.0.0,,,,,,,,,,2.1.0,,,camel-jms,,,,0,migrating activemq from 2.0-M2 to 2.0.0 some tests fail with internal NPE - problem is activemq camel uses JMSBinding() no arg creation and some of the methods do not check for a null endpoint.,activemq 5.3 - activemq-camel tests,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-06-03 07:24:13.181,,,no_permission,,,,,,,,,,,,,76671,,,Thu Jun 03 07:24:13 UTC 2010,,,,,,,0|i01lrr:,7296,,,,,,,,,"02/Sep/09 17:49;gtully;The activemq-camel test that fails with 2.0.0 is: http://svn.apache.org/viewvc/activemq/trunk/activemq-camel/src/test/java/org/apache/activemq/camel/CamelJmsTest.java?view=co

resolved in r810628

we may have to build a workaround (incorporate the fix into activemq-camel) for the activemq 5.3 release to pick up 2.0.0",03/Jun/10 07:24;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"HttpHeaderFilterStrategy should filter out the ""user-agent"", ""accept"" and ""accept-encoding"" headers.",CAMEL-1978,12487045,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,wfrag,wfrag,02/Sep/09 07:48,03/Jun/10 07:24,14/Mar/19 02:42,13/Sep/09 19:03,2.0.0,,,,,,,,,,2.1.0,,,camel-http,,,,0,"Currently ""user-agent"", ""accept"" and ""accept-encoding"" headers are copied to the response. I think, they should not be put into the response.",,,,,,,,,,,,,,,CAMEL-1975,,02/Sep/09 07:49;wfrag;http-header-filter-extra-headers.patch;https://issues.apache.org/jira/secure/attachment/12462787/http-header-filter-extra-headers.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2009-09-13 19:03:10.405,,,no_permission,,,,,,,,,,,,,76672,,,Thu Jun 03 07:24:11 UTC 2010,,,Patch Available,,,,0|i01lqv:,7292,,,,,,,,,02/Sep/09 07:49;wfrag;The patch with fixes.,13/Sep/09 19:03;davsclaus;Willem fixed this lately I believe.,14/Sep/09 02:27;njiang;Added the linked issue.,03/Jun/10 07:24;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel HTTP binding incorrectly filters out the headers,CAMEL-1977,12487041,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,wfrag,wfrag,02/Sep/09 07:43,03/Jun/10 07:24,14/Mar/19 02:42,14/Sep/09 10:37,2.0.0,,,,,,,,,,2.1.0,,,camel-http,,,,0,"Camel does not filter out internal headers when creating HTTP response. The internal headers like ""CamelBeanMultiParameterArray"" occur in HTTP response.


The reason is that in the following piece of code (from DefaultHttpBinding.java, around line 157):
{code}
        for (String key : message.getHeaders().keySet()) {
            String value = message.getHeader(key, String.class);
            if (headerFilterStrategy != null
                    && !headerFilterStrategy.applyFilterToCamelHeaders(key, value, exchange)) {
                response.setHeader(key, value);
            }
        }
{code}

the ""key"" returned is lowercase, even in case the real header is ""CamelBeanMultiParameterArray"" (because CaseInsensitiveMap is used, which turns all keys to lowercase). Since pattern match in DefaultHeaderFilterStrategy is case-sensitive, the header is not filter out when filling the response headers.

The suggested solution is to make pattern case-insensitive.",,,,,,,,,,,,,,,,,02/Sep/09 07:44;wfrag;http-header-filter-case-insensitive.patch;https://issues.apache.org/jira/secure/attachment/12462786/http-header-filter-case-insensitive.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2009-09-14 10:37:29.44,,,no_permission,,,,,,,,,,,,,76673,,,Thu Jun 03 07:24:11 UTC 2010,,,Patch Available,,,,0|i01lqn:,7291,,,,,,,,,02/Sep/09 07:44;wfrag;The patch demonstrating the fix.,"14/Sep/09 10:37;davsclaus;Thanks for reporting.

trunk: 814567.",03/Jun/10 07:24;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Package scanning cannot be used for folders containing special characters,CAMEL-1974,12487049,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,fmarinelli,fmarinelli,01/Sep/09 09:24,03/Jun/10 07:24,14/Mar/19 02:42,16/Sep/09 14:41,2.0.0,,,,,,,,,,2.1.0,,,camel-core,,,,0,"I found out this problem developing a test case with cargo on my macbook. Temporary directory on leopard is something like (/private/var/folders/is/ispMf0ylEtCIOP8skg0va++++TI/-Tmp-) and cargo deploys the embedded container there.
Problem happens when camel tries to find converters by using DefaultPackageScanClassResolver class; it converts the temporary path, using URLDecoder, in the invalid path ""/private/var/folders/is/ispMf0ylEtCIOP8skg0va    TI/-Tmp-""

You can reproduce this bug by patching the DefaultPackageScanClassResolverTest and adding the following resource file, that I'm going to attach to this issue.
","macbook pro, osx leopard",,,,,,,,,,,,,,,,01/Sep/09 09:26;fmarinelli;DefaultPackageScanClassResolverTest.diff;https://issues.apache.org/jira/secure/attachment/12462704/DefaultPackageScanClassResolverTest.diff,01/Sep/09 09:26;fmarinelli;package+scan+test.jar;https://issues.apache.org/jira/secure/attachment/12462581/package%2Bscan%2Btest.jar,,,,2.0,,,,,,,,,,,,,,,,,,,2009-09-14 06:58:00.685,,,no_permission,,,,,,,,,,,,,41683,,,Thu Jun 03 07:24:09 UTC 2010,,,,,,,0|i01lpz:,7288,,,,,,,,,01/Sep/09 09:26;fmarinelli;Files needed to reproduce this bug,"01/Sep/09 13:07;fmarinelli;I found this interesting issue ( https://issues.apache.org/jira/browse/LAUNCHER-10 ) on another apache project. 
They had the same problem and it seems that the solution comes with:

new URI(resource).getPath()

instead of 

URLDecoder.decode(resource, ""UTF-8"")

at least for file protocol.

Bye","14/Sep/09 06:58;davsclaus;Thanks Fabio for reporting and showing how to fix it.

trunk: 814499.","16/Sep/09 12:58;taylorjohn;Discussion at http://www.nabble.com/Fix-for-CAMEL-1974-seems-to-cause-problem-on-Windows-td25458041s22882.html

This fix causes a problem on windows with spaces in the path.

Trace:
{noformat}
 classloader: java.net.URLClassLoader@189acb5
[pache.camel.spring.Main.main()] efaultPackageScanClassResolver TRACE URL from classloader: jar:file:/C:/Documents and Settings/TaylorJohn.
GS/.m2/repository/org/apache/camel/camel-core/2.1-SNAPSHOT/camel-core-2.1-SNAPSHOT.jar!/org/apache/camel/component/file/
[pache.camel.spring.Main.main()] efaultPackageScanClassResolver TRACE Decoded urlPath: file:/C:/Documents and Settings/TaylorJohn.SGS/.m2/r
pository/org/apache/camel/camel-core/2.1-SNAPSHOT/camel-core-2.1-SNAPSHOT.jar!/org/apache/camel/component/file/
[pache.camel.spring.Main.main()] efaultPackageScanClassResolver WARN  Could not read entries in url: jar:file:/C:/Documents and Settings/Ta
lorJohn.SGS/.m2/repository/org/apache/camel/camel-core/2.1-SNAPSHOT/camel-core-2.1-SNAPSHOT.jar!/org/apache/camel/component/file/
java.net.URISyntaxException: Illegal character in path at index 18: file:/C:/Documents and Settings/TaylorJohn.SGS/.m2/repository/org/apach
/camel/camel-core/2.1-SNAPSHOT/camel-core-2.1-SNAPSHOT.jar!/org/apache/camel/component/file/
        at java.net.URI$Parser.fail(URI.java:2809)
        at java.net.URI$Parser.checkChars(URI.java:2982)
        at java.net.URI$Parser.parseHierarchical(URI.java:3066)
        at java.net.URI$Parser.parse(URI.java:3014)
        at java.net.URI.<init>(URI.java:578)
        at org.apache.camel.impl.DefaultPackageScanClassResolver.find(DefaultPackageScanClassResolver.java:222)
        at org.apache.camel.impl.DefaultPackageScanClassResolver.find(DefaultPackageScanClassResolver.java:180)
        at org.apache.camel.impl.DefaultPackageScanClassResolver.findAnnotated(DefaultPackageScanClassResolver.java:100)
        at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.load(AnnotationTypeConverterLoader.java:62)
        at org.apache.camel.impl.converter.DefaultTypeConverter.checkLoaded(DefaultTypeConverter.java:359)
        at org.apache.camel.impl.converter.DefaultTypeConverter.doConvertTo(DefaultTypeConverter.java:153)
{noformat}


","16/Sep/09 14:41;davsclaus;trunk: 815810.

John can you test from your windows environment again with the latest commit I did?",03/Jun/10 07:24;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CamelNamespaceHandler is not thread safe,CAMEL-1966,12487054,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,01/Sep/09 04:55,03/Jun/10 07:24,14/Mar/19 02:42,30/Dec/09 02:24,1.4.0,1.5.0,1.6.0,1.6.1,2.0.0,2.0-M1,2.0-M2,2.0-M3,,,1.6.2,2.1.0,,,,,,0,"Here is the mail thread[1] which discusses about it.
[1] http://www.nabble.com/Occasional-CamelNamespaceHandler-exception-when-running-with-Spring-DM-1.2-td25195171.html",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-09-04 07:49:49.016,,,no_permission,,,,,,,,,,,,,76674,,,Thu Jun 03 07:24:06 UTC 2010,,,,,,,0|i01lo7:,7280,,,,,,,,,"04/Sep/09 07:49;cmoulliard;Just to inform you that this error appears also when Camel 2.1-SNAPSHOT is used within Apache Karaf Felix. I have this error since around 3-4 days (when switching from Camel 2.0 to camel 2.1-SNAPSHOT. That was not the case before. I must stop/start my camel bundle to be able to work with it.

1) At the karaf launch, the following error is generated :

{code}
karaf@root:/> Exception in thread ""SpringOsgiExtenderThread-8"" java.lang.IllegalStateException: BeanFactory not initialized or already closed - call '
refresh' before accessing beans via the ApplicationContext
os      at org.springframework.context.support.AbstractRefreshableApplicationContext.getBeanFactory(AbstractRefreshableApplicationContext.java:153)
        at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor.close(DependencyWaiterApplicatio
nContextExecutor.java:345)
        at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor.fail(DependencyWaiterApplication
ContextExecutor.java:401)
        at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor.stageOne(DependencyWaiterApplica
tionContextExecutor.java:287)
        at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor.refresh(DependencyWaiterApplicat
ionContextExecutor.java:175)
        at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.refresh(AbstractDelegatedExecutionApplicationContext.
java:175)
        at org.springframework.osgi.extender.internal.activator.ContextLoaderListener$2.run(ContextLoaderListener.java:718)
        at java.lang.Thread.run(Thread.java:595)
{code}

2) My camel context is not started
3) To start it, I must stop my camel bundle. During the stop, here is the error generated :

{code}
09:46:43,499 | ERROR | Timer-3          | DelegatingTimerTask              | duling.timer.DelegatingTimerTask   69 | Unexpected exception thrown from Runnable: org.springframework.osgi.extender.internal.util.concurrent.RunnableTimedExecution$MonitoredRunnable@15b4804
java.lang.IllegalStateException: BeanFactory not initialized or already closed - call 'refresh' before accessing beans via the ApplicationContext
	at org.springframework.context.support.AbstractRefreshableApplicationContext.getBeanFactory(AbstractRefreshableApplicationContext.java:153)
	at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor.close(DependencyWaiterApplicationContextExecutor.java:345)
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.doClose(AbstractDelegatedExecutionApplicationContext.java:236)
	at org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:794)
	at org.springframework.osgi.extender.internal.activator.ContextLoaderListener$3.run(ContextLoaderListener.java:807)
	at org.springframework.osgi.extender.internal.util.concurrent.RunnableTimedExecution$MonitoredRunnable.run(RunnableTimedExecution.java:60)
	at org.springframework.scheduling.timer.DelegatingTimerTask.run(DelegatingTimerTask.java:66)
	at java.util.TimerThread.mainLoop(Timer.java:512)
	at java.util.TimerThread.run(Timer.java:462)
{code}

I see also sometimes this warning in the log

{code}
08:59:51,718 | WARN  | ExtenderThread-8 | XmlBeanDefinitionReader          | k.util.xml.SimpleSaxErrorHandler   47 | Ignored XML validation warning
org.xml.sax.SAXParseException: schema_reference.4: Failed to read schema document 'http://camel.apache.org/schema/spring/camel-spring.xsd', because 1) could not find the document; 2) the document could not be read; 3) the root element of the document is not <xsd:schema>.
	at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.createSAXParseException(ErrorHandlerWrapper.java:231)
...
Caused by: org.xml.sax.SAXParseException: cvc-complex-type.2.4.c: The matching wildcard is strict, but no declaration can be found for element 'camel:camelContext'.
	at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.createSAXParseException(ErrorHandlerWrapper.java:231)
	at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.error(ErrorHandlerWrapper.java:167)
{code}","04/Sep/09 10:34;njiang;trunk
http://svn.apache.org/viewvc?rev=809874&view=rev
camel 1.x
http://svn.apache.org/viewvc?rev=809931&view=rev
","04/Sep/09 10:38;njiang;Talked with Charles,
 The exceptions which he said are related to the bundle loading sequences.
 If his application bundle is loaded before the camel-core and camel-spring, the exceptions will be thrown.
  
 
","24/Dec/09 14:58;roman.ivanov;Hi, currently I'm upgrading to Camel version 2.1.0 from 2.0.0. And this issue reproduces again. The bundle order is explicitly defined with startup properties, though application bundles are started later then camel. We're having ServiceMix 4 with Karaf 1.0.4.

Here are logs:
{code}
org.xml.sax.SAXParseException: schema_reference.4: Failed to read schema document 'http://camel.apache.org/schema/spring/camel-spring.xsd', because 1) could not find the document; 2) the document could not be read; 3) the root element of the document is not <xsd:schema>.
Caused by: org.xml.sax.SAXParseException: cvc-complex-type.2.4.c: The matching wildcard is strict, but no declaration can be found for element 'camelContext'.
{code}

","28/Dec/09 14:30;davsclaus;Roman, ServiceMix is undergoing many changes recently and I guess it should be better at OSGi stuff on startup.

So what version do you exactly use for SMX and Karaf?
And if possible try with a newer version.","29/Dec/09 02:28;njiang;Hi Roman

There are something changed in Camel 2.1.0, we merged the camel-osgi and camel-spring to avoid the some issue of
Please update the org.apache.felix.karaf.features.cfg
 by replacing the camel-osgi and camel-spring with camel-spring-osgi and try again.


","29/Dec/09 14:35;roman.ivanov;Hi Claus, Willem

Upgrade for newer SMX version is good idea for sure, but it might be a separate issue.
Although, I tried to use camel-spring-osgi instead of 2 separate libs. It didn't made real effect.
But, I followed the idea of [this issue |http://issues.apache.org/activemq/browse/CAMEL-1730].
And made camel-spring bundle start up order earlier than camel-osgi. And it solved the issue.","30/Dec/09 02:22;njiang;Hi Roman,

Which version of Servicemix are you using ?
There is an camel feature (which includes camel-core, camel-spring and camel-osgi) in the org.apache.felix.karaf.features.cfg, you need to replace it with camel-core and camel-spring-osgi.
Please make sure there is no camel-spring, camel-spring-osgi, camel-osgi installed at the same time.

",30/Dec/09 02:24;njiang;The reopened reason is not related to the JIRA.,03/Jun/10 07:24;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
onException does not work correctly when used in a transacted route and exception is not send to the bean component called,CAMEL-1965,12485509,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,cmoulliard,cmoulliard,31/Aug/09 15:05,12/Oct/09 06:16,14/Mar/19 02:42,07/Sep/09 06:43,2.0.0,,,,,,,,,,2.1.0,,,,,,,0,"Hi,

When onException is used within a transacted route, it does not work. With the following route, the onException process does not propagate information to the from endpoint (in my case : file component). So, when X3Sexception occurs, the bean component is called where record is created in an Audit table, error message is put in a reporting queue BUT the file could not be renamed and move to temp directory. In consequence, the file is reprocessed continuously !!!!!

{code}
Route
<camel:route errorHandlerRef=""txErrorHandlerReqNew"">
	<camel:from ref=""fileClientEndpoint"" />
	<camel:transacted ref=""PROPAGATION_REQUIRED_NEW"" />
		
         <camel:onException>
	       	<camel:exception>com.xpectis.x3s.exception.X3SClientException</camel:exception>
		<camel:bean ref=""serviceHelper"" method=""processException"" />
		<camel:to ref=""queueReportingEndpoint"" />
           </camel:onException>
	
	<camel:onException>
		<camel:exception>java.lang.Exception</camel:exception>
		<camel:to uri=""log:com.xpectis.x3s?level=INFO&amp;multiline=true&amp;showException=true&amp;showCaughtException=true&amp;showStackTrace=true"" />
		<camel:rollback/>
    </camel:onException>
{code}

{code}
Log

16:51:12,896 | INFO  | 9: FileComponent | TraceInterceptor                 | rg.apache.camel.processor.Logger   88 | ID-dell-charles-2415-1251709696459-0-85 >>> from(file://d:/temp/data/oinp/?delay=15000&move=d%3A%2Ftemp%2Fdata%2Foinp%2Fbackup%2F%24%7Bdate%3Anow%3AyyyyMMdd%7D%2F%24%7Bfile%3Aname.noext%7D.bak&moveFailed=d%3A%2Ftemp%2Fdata%2Foinp%2Ferror%2F%2F%24%7Bdate%3Anow%3AyyyyMMdd%7D%2F%24%7Bfile%3Aname.noext%7D.error) --> ref:PROPAGATION_REQUIRED_NEW, Pattern:InOnly, Headers:{CamelFileNameOnly=OINP_Example.csv, CamelFileLastModified=Mon Jul 27 16:33:12 CEST 2009, CamelFileAbsolute=true, CamelFileLength=892, CamelFileName=OINP_Example.csv, CamelFileParent=d:\temp\data\oinp, CamelFilePath=d:\temp\data\oinp\OINP_Example.csv, CamelFileRelativePath=d:\temp\data\oinp\OINP_Example.csv, CamelFileAbsolutePath=d:\temp\data\oinp\OINP_Example.csv}, BodyType:org.apache.camel.component.file.GenericFile, Body:ORD_REF_ID, ...

16:51:12,912 | INFO  | 9: FileComponent | TraceInterceptor                 | rg.apache.camel.processor.Logger   88 | ID-dell-charles-2415-1251709696459-0-85 >>> ref:PROPAGATION_REQUIRED_NEW --> ref:PROPAGATION_REQUIRED_NEW, Pattern:InOnly, Headers:{CamelFileNameOnly=OINP_Example.csv, CamelFileLastModified=Mon Jul 27 16:33:12 CEST 2009, CamelFileAbsolute=true, CamelFileLength=892, CamelFileName=OINP_Example.csv, CamelFileParent=d:\temp\data\oinp, CamelFilePath=d:\temp\data\oinp\OINP_Example.csv, CamelFileRelativePath=d:\temp\data\oinp\OINP_Example.csv, CamelFileAbsolutePath=d:\temp\data\oinp\OINP_Example.csv}, BodyType:org.apache.camel.component.file.GenericFile, Body:ORD_REF_ID,...
16:51:12,912 | INFO  | 9: FileComponent | TraceInterceptor                 | rg.apache.camel.processor.Logger   88 | ID-dell-charles-2415-1251709696459-0-85 >>> ref:PROPAGATION_REQUIRED_NEW --> OnException, Pattern:InOnly, Headers:{CamelFileNameOnly=OINP_Example.csv, CamelFileLastModified=Mon Jul 27 16:33:12 CEST 2009, CamelFileAbsolute=true, CamelFileLength=892, CamelFileName=OINP_Example.csv, CamelFileParent=d:\temp\data\oinp, CamelFilePath=d:\temp\data\oinp\OINP_Example.csv, CamelFileRelativePath=d:\temp\data\oinp\OINP_Example.csv, CamelFileAbsolutePath=d:\temp\data\oinp\OINP_Example.csv}, BodyType:org.apache.camel.component.file.GenericFile, Body:ORD_REF_ID,...
16:51:12,928 | INFO  | 9: FileComponent | TraceInterceptor                 | rg.apache.camel.processor.Logger   88 | ID-dell-charles-2415-1251709696459-0-85 >>> OnException -->, Pattern:InOnly, Headers:{CamelFileNameOnly=OINP_Example.csv, CamelFileLastModified=Mon Jul 27 16:33:12 CEST 2009, CamelFileAbsolute=true, CamelFileLength=892, CamelFileName=OINP_Example.csv, CamelFileParent=d:\temp\data\oinp, CamelFilePath=d:\temp\data\oinp\OINP_Example.csv, CamelFileRelativePath=d:\temp\data\oinp\OINP_Example.csv, CamelFileAbsolutePath=d:\temp\data\oinp\OINP_Example.csv}, BodyType:org.apache.camel.component.file.GenericFile, Body:ORD_REF_ID,...
16:51:12,928 | INFO  | 9: FileComponent | ServiceHelper                    | ctis.x3s.core.util.ServiceHelper 1033 | ###### processException ######
16:51:12,928 | INFO  | 9: FileComponent | ServiceHelper                    | ctis.x3s.core.util.ServiceHelper 1046 | #### Exception received was null so create a dummy exception !
16:51:12,928 | INFO  | 9: FileComponent | ServiceHelper                    | ctis.x3s.core.util.ServiceHelper 1054 | >>>processException AUDIT:E9998:Error:ERR
16:51:12,975 | INFO  | 9: FileComponent | TraceInterceptor                 | rg.apache.camel.processor.Logger   88 | ID-dell-charles-2415-1251709696459-0-85 >>>  --> queuingservice://x3s:reporting, Pattern:InOnly, Headers:{CamelFileLastModified=Mon Jul 27 16:33:12 CEST 2009, CamelFilePath=d:\temp\data\oinp\OINP_Example.csv, CamelFileLength=892, CamelFileAbsolutePath=d:\temp\data\oinp\OINP_Example.csv, CamelBeanMethodName=null, CamelFileNameOnly=OINP_Example.csv, CamelFileAbsolute=true, CamelBeanMultiParameterArray=false, CamelFileName=OINP_Example.csv, CamelFileRelativePath=d:\temp\data\oinp\OINP_Example.csv, CamelFileParent=d:\temp\data\oinp}, BodyType:org.apache.camel.component.file.GenericFile, Body:ORD_REF_ID,
16:51:13,068 | INFO  | 9: FileComponent | TraceInterceptor                 | rg.apache.camel.processor.Logger   88 | ID-dell-charles-2415-1251709696459-0-85 >>> queuingservice://x3s:reporting --> ref:PROPAGATION_REQUIRED_NEW, Pattern:InOnly, Headers:{CamelFileAbsolute=true, CamelFileLength=892, CamelBeanMethodName=null, CamelFileName=OINP_Example.csv, CamelFileLastModified=Mon Jul 27 16:33:12 CEST 2009, CamelFileAbsolutePath=d:\temp\data\oinp\OINP_Example.csv, CamelFileRelativePath=d:\temp\data\oinp\OINP_Example.csv, CamelFileNameOnly=OINP_Example.csv, CamelBeanMultiParameterArray=false, CamelFilePath=d:\temp\data\oinp\OINP_Example.csv, CamelFileParent=d:\temp\data\oinp}, BodyType:org.apache.camel.component.file.GenericFile, Body:ORD_REF_ID,...
16:51:13,068 | INFO  | 9: FileComponent | TraceInterceptor                 | rg.apache.camel.processor.Logger   88 | ID-dell-charles-2415-1251709696459-0-85 >>> ref:PROPAGATION_REQUIRED_NEW --> OnException, Pattern:InOnly, Headers:{CamelFileAbsolute=true, CamelFileLength=892, CamelBeanMethodName=null, CamelFileName=OINP_Example.csv, CamelFileLastModified=Mon Jul 27 16:33:12 CEST 2009, CamelFileAbsolutePath=d:\temp\data\oinp\OINP_Example.csv, CamelFileRelativePath=d:\temp\data\oinp\OINP_Example.csv, CamelFileNameOnly=OINP_Example.csv, CamelBeanMultiParameterArray=false, CamelFilePath=d:\temp\data\oinp\OINP_Example.csv, CamelFileParent=d:\temp\data\oinp}, BodyType:org.apache.camel.component.file.GenericFile, Body:ORD_REF_ID,...
16:51:13,084 | INFO  | 9: FileComponent | TraceInterceptor                 | rg.apache.camel.processor.Logger   88 | ID-dell-charles-2415-1251709696459-0-85 >>> OnException --> log://com.xpectis.x3s?level=INFO&multiline=true&showCaughtException=true&showException=true&showStackTrace=true, Pattern:InOnly, Headers:{CamelFileAbsolute=true, CamelFileLength=892, CamelBeanMethodName=null, CamelFileName=OINP_Example.csv, CamelFileLastModified=Mon Jul 27 16:33:12 CEST 2009, CamelFileAbsolutePath=d:\temp\data\oinp\OINP_Example.csv, CamelFileRelativePath=d:\temp\data\oinp\OINP_Example.csv, CamelFileNameOnly=OINP_Example.csv, CamelBeanMultiParameterArray=false, CamelFilePath=d:\temp\data\oinp\OINP_Example.csv, CamelFileParent=d:\temp\data\oinp}, BodyType:org.apache.camel.component.file.GenericFile, Body:ORD_REF_ID,...
16:51:13,084 | INFO  | 9: FileComponent | x3s                              | rg.apache.camel.processor.Logger   88 | Exchange[
, BodyType:org.apache.camel.component.file.GenericFile
, Body:ORD_REF_ID,...
16:51:13,084 | INFO  | 9: FileComponent | TraceInterceptor                 | rg.apache.camel.processor.Logger   88 | ID-dell-charles-2415-1251709696459-0-85 >>> log://com.xpectis.x3s?level=INFO&multiline=true&showCaughtException=true&showException=true&showStackTrace=true --> Rollback, Pattern:InOnly, Headers:{CamelFileName=OINP_Example.csv, CamelBeanMethodName=null, CamelBeanMultiParameterArray=false, CamelFileParent=d:\temp\data\oinp, CamelFileNameOnly=OINP_Example.csv, CamelFileAbsolutePath=d:\temp\data\oinp\OINP_Example.csv, CamelFilePath=d:\temp\data\oinp\OINP_Example.csv, CamelFileRelativePath=d:\temp\data\oinp\OINP_Example.csv, CamelFileLastModified=Mon Jul 27 16:33:12 CEST 2009, CamelFileAbsolute=true, CamelFileLength=892}, BodyType:org.apache.camel.component.file.GenericFile, Body:ORD_REF_ID,...
16:51:13,100 | ERROR | 9: FileComponent | GenericFileOnCompletion          | rg.apache.camel.processor.Logger  202 | org.apache.camel.RollbackExchangeException: Intended rollback on the exchange: Exchange[GenericFileMessage with file: GenericFile[d:\temp\data\oinp\OINP_Example.csv]]
16:51:13,100 | WARN  | 9: FileComponent | GenericFileOnCompletion          | ent.file.GenericFileOnCompletion  142 | Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@29e26 for file: GenericFile[d:\temp\data\oinp\OINP_Example.csv]
16:51:13,100 | ERROR | 9: FileComponent | GenericFileOnCompletion          | rg.apache.camel.processor.Logger  248 | Cannot rename file: GenericFile[d:\temp\data\oinp\OINP_Example.csv] to: GenericFile[d:\temp\data\oinp\error\\20090831\OINP_Example.error]
org.apache.camel.component.file.GenericFileOperationFailedException: Cannot rename file: GenericFile[d:\temp\data\oinp\OINP_Example.csv] to: GenericFile[d:\temp\data\oinp\error\\20090831\OINP_Example.error]
	at org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy.renameFile(GenericFileRenameProcessStrategy.java:96)
	at org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy.rollback(GenericFileRenameProcessStrategy.java:61)
	at org.apache.camel.component.file.GenericFileOnCompletion.processStrategyRollback(GenericFileOnCompletion.java:145)
	at org.apache.camel.component.file.GenericFileOnCompletion.onCompletion(GenericFileOnCompletion.java:95)
	at org.apache.camel.component.file.GenericFileOnCompletion.onFailure(GenericFileOnCompletion.java:58)
	at org.apache.camel.impl.DefaultUnitOfWork.done(DefaultUnitOfWork.java:126)

{code}

REMARK : 
- Exception object is not received by the bean component

but everything works fine if the route is defined like this 

{code}
		<camel:route>
			<camel:from ref=""fileClientEndpoint"" />

		    <camel:onException>
	        	<camel:exception>com.xpectis.x3s.exception.X3SClientException</camel:exception>
				<camel:bean ref=""serviceHelper"" method=""processException"" />
				<camel:to ref=""queueReportingEndpoint"" />
            </camel:onException>
			
			<camel:onException>
				<camel:exception>java.lang.Exception</camel:exception>
				<camel:to uri=""log:com.xpectis.x3s?level=INFO&amp;multiline=true&amp;showException=true&amp;showCaughtException=true&amp;showStackTrace=true"" />
		    </camel:onException>
{code}",,,,,,,,,,,,,,,,,01/Sep/09 11:26;cmoulliard;BookService.java;https://issues.apache.org/jira/secure/attachment/12462740/BookService.java,01/Sep/09 11:26;cmoulliard;SpringTransactionalClientDataSourceUsingTransactedOnExceptionTest.java;https://issues.apache.org/jira/secure/attachment/12462744/SpringTransactionalClientDataSourceUsingTransactedOnExceptionTest.java,04/Sep/09 07:50;davsclaus;file_patch.patch;https://issues.apache.org/jira/secure/attachment/12462989/file_patch.patch,01/Sep/09 11:26;cmoulliard;springTransactionalClientDataSourceUsingTransactedOnException.xml;https://issues.apache.org/jira/secure/attachment/12462741/springTransactionalClientDataSourceUsingTransactedOnException.xml,01/Sep/09 11:27;cmoulliard;transactionalClientDataSource.xml;https://issues.apache.org/jira/secure/attachment/12462742/transactionalClientDataSource.xml,5.0,,,,,,,,,,,,,,,,,,,2009-08-31 15:55:20.632,,,no_permission,,,,,,,,,,,,,76675,,,Mon Sep 07 06:43:41 UTC 2009,,,,,,,0|i01lnz:,7279,,,,,,,,,"31/Aug/09 15:55;davsclaus;Please format your reports so they are readable. When you post logs that are 2000 lines long its annoying and hard to read.

And report Camel version number
And post your endpoint uris so we can see them
And as well with your error handling configuration.
And post your full route.

All these are important details.

","01/Sep/09 07:18;cmoulliard;Is there a better command than ""code"" to format info in the wiki ?

Camel Version used : 2.0 and now 2.1-SNAPSHOT

Endpoints definition :

{code}
queueReportingEndpoint = uriQueueReporting=queuingservice:x3s:reporting (remark : queuingservice --> corresponds to activemq service packaged as separate osgi bundle)
queueRequestEndpoint= uriQueueRequest=queuingservice:x3s:request
fileClientEndpoint = uriFileClient=file://d:/temp/data/oinp/?delay=15000&move=d:/temp/data/oinp/backup/${date:now:yyyyMMdd}/${file:name.noext}.bak&moveFailed=d:/temp/data/oinp/error//${date:now:yyyyMMdd}/${file:name.noext}.error

<!-- Defintion of the Camel - ActiveMq Spring config file -->
<beans xmlns=""http://www.springframework.org/schema/beans""
  xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
  xmlns:osgi=""http://www.springframework.org/schema/osgi""
  xsi:schemaLocation=""http://www.springframework.org/schema/beans
                      http://www.springframework.org/schema/beans/spring-beans.xsd
                      http://www.springframework.org/schema/osgi
                      http://www.springframework.org/schema/osgi/spring-osgi.xsd
                      http://camel.apache.org/schema/spring
                      http://camel.apache.org/schema/spring/camel-spring.xsd"">
      
    <bean id=""active-mq"" class=""org.apache.activemq.camel.component.ActiveMQComponent"">
    	<property name=""transacted"" value=""true""/>
    	<property name=""connectionFactory"">
    		<osgi:reference interface=""javax.jms.ConnectionFactory""/>
    	</property>
        <property name=""transactionManager"">
			<osgi:reference interface=""org.springframework.transaction.PlatformTransactionManager""/>
		</property>
		<!-- <property name=""transferExchange"" value=""true""/> -->
    </bean>

    <osgi:service id=""osgiqueuingservice"" ref=""active-mq"" interface=""org.apache.camel.Component""/>
		       
</beans>

-----------------------------------
For Camel configuration

<!-- OSGI reference of the service used  -->
<!-- Queuing service -->
<osgi:reference id=""queuingservice"" interface=""org.apache.camel.Component"" />

<!-- TransactionErrorHandler -->
	<bean id=""txErrorHandlerReqNew"" class=""org.apache.camel.spring.spi.TransactionErrorHandlerBuilder"">
        <property name=""springTransactionPolicy"" ref=""PROPAGATION_REQUIRED_NEW""/>
</bean>

<!-- Transaction Policy -->
<bean id=""PROPAGATION_REQUIRED_NEW"" class=""org.apache.camel.spring.spi.SpringTransactionPolicy"">
        <property name=""transactionManager"">
			<osgi:reference>
				<osgi:interfaces>
					<value>org.springframework.orm.hibernate3.HibernateTransactionManager</value>
				</osgi:interfaces>
			</osgi:reference>
  		</property>
  		<property name=""propagationBehaviorName"" value=""PROPAGATION_REQUIRES_NEW""/>
</bean> 

<!-- Full route -->
	<camel:camelContext id=""InToOut"" trace=""true""	xmlns=""http://camel.apache.org/schema/osgi"">
		<camel:route errorHandlerRef=""txErrorHandlerReqNew"">
			<camel:from ref=""fileClientEndpoint"" />
			<camel:transacted ref=""PROPAGATION_REQUIRED_NEW"" />
			
		    <camel:onException>
	        	<camel:exception>com.xpectis.x3s.exception.X3SClientException</camel:exception>
				<camel:bean ref=""serviceHelper"" method=""processException"" />
				<camel:to ref=""queueReportingEndpoint"" />
            </camel:onException>
			
			<camel:onException>
				<camel:exception>java.lang.Exception</camel:exception>
				<camel:to uri=""log:com.xpectis.x3s?level=INFO&amp;multiline=true&amp;showException=true&amp;showCaughtException=true&amp;showStackTrace=true"" />
				<camel:rollback/>
		    </camel:onException>

				<camel:setHeader headerName=""origin"">
					<camel:constant>file</camel:constant>
				</camel:setHeader>

				<!-- Set Message type header with the name of the parent folder -->
				<camel:bean ref=""serviceHelper"" method=""getParentFolderName"" />

				<camel:convertBodyTo type=""java.lang.String"" />
			
				<!-- Call the requestService to save the request -->
				<camel:bean ref=""serviceHelper"" method=""createRequest"" />
				
                                <!-- ERROR GENERATED FOR TESTING PURPOSE -->
				<camel:bean ref=""serviceHelper"" method=""generateX3SClientException"" />  
				<!-- <camel:bean ref=""serviceHelper"" method=""generateException"" /> -->	
				
				<camel:to ref=""queueRequestEndpoint"" />
		</camel:route>
{code}


","01/Sep/09 11:26;cmoulliard;I have added code about a unit test that we could use to understand where is the issue. Unfortunately, it is very difficult to reproduce my local environment but nevertheless, what I observe running this unit test (which succeeds) is that the file is not moved from its original location to the error folder.",04/Sep/09 05:34;davsclaus;Are you using Windows?,"04/Sep/09 05:36;davsclaus;Try with something else that a file to start with as Windows is a bit clunky with file IO.

And does it fail *every* time with transacted + file?

Try adding a <delay><constant>3000</constant></delay> before the rollback to give Windows a bit time before the rollback is performed.","04/Sep/09 05:38;davsclaus;The issue is likely Windows being bad at doing file IO operations.

{code}
16:51:13,100 | ERROR | 9: FileComponent | GenericFileOnCompletion          | rg.apache.camel.processor.Logger  248 | Cannot rename file: GenericFile[d:\temp\data\oinp\OINP_Example.csv] to: GenericFile[d:\temp\data\oinp\error\\20090831\OINP_Example.error]
org.apache.camel.component.file.GenericFileOperationFailedException: Cannot rename file: GenericFile[d:\temp\data\oinp\OINP_Example.csv] to: GenericFile[d:\temp\data\oinp\error\\20090831\OINP_Example.error]
	at org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy.renameFile(GenericFileRenameProcessStrategy.java:96)
{code}

And SUN have a terrible Java IO API that just returns boolean false when a rename could not be performed!!! Talk about bad API design (yet again from SUN).

We may need to add a workaround in Windows to do some wait and retry when renaming files.",04/Sep/09 05:49;davsclaus;Try with this patch,04/Sep/09 07:07;cmoulliard;Yes. I'm using Windows,04/Sep/09 07:50;davsclaus;A working file patch that I have actually run and tested :),04/Sep/09 08:17;davsclaus;I committed the file patch to trunk as it can help work around Windows issues in general with files.,"04/Sep/09 09:45;cmoulliard;Thx for the patch Claus ;-)

The issue is no more there and the file has been moved correctly. And now the ExchangeException has been well received by the bean in this route section :

{code}
<camel:onException>
<camel:exception>com.xpectis.x3s.exception.X3SClientException</camel:exception>
<camel:bean ref=""serviceHelper"" method=""processException"" />
<camel:to ref=""queueReportingEndpoint"" />
            </camel:onException>
{code}","06/Sep/09 13:42;davsclaus;Charles is this issue fixed?

Eg the onException and transacted works for you now?
",07/Sep/09 06:43;cmoulliard;Issue is solved with last fix.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Graceful shutdown problem,CAMEL-1963,12487065,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,dcomm,dcomm,31/Aug/09 07:03,03/Jun/10 07:24,14/Mar/19 02:42,10/Sep/09 08:27,2.0-M3,,,,,,,,,,2.1.0,,,camel-spring,,,,1,"While running camel-example-spring-jms in 2.0M3, I've noticed that GracefulShutdownService can't stop Camel. It calls

    Main.getInstance().stop();
   
but this call blocks and never returns. With enabled debug logging for org.springframework.jms, console outputs

[aultMessageListenerContainer-1] efaultMessageListenerContainer DEBUG Waiting for shutdown of message listener invokers
[aultMessageListenerContainer-1] efaultMessageListenerContainer DEBUG Still waiting for shutdown of 1 message listener invokers

Related forum thread:
http://www.nabble.com/Garceful-shutdown-bug-in-2.0M3--td25113519.html

Dado",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-09-10 08:27:38.989,,,no_permission,,,,,,,,,,,,,76676,,,Thu Jun 03 07:24:05 UTC 2010,,,,,,,0|i01lnj:,7277,,,,,,,,,10/Sep/09 08:27;davsclaus;trunk: 813303.,03/Jun/10 07:24;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Enricher - AggregationStrategy - Problem with preparing logic,CAMEL-1960,12487060,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,29/Aug/09 11:27,03/Jun/10 07:24,14/Mar/19 02:42,29/Aug/09 12:22,2.1.0,,,,,,,,,,2.1.0,,,camel-core,,,,0,"The ExchangeHelper.prepareAggregation method moves the message to IN to avoid confusing end users whether what they are looking for is on either IN or OUT.

Hover we some recent changes in MessageSupport to clear some headers it could cause problems as it was in fact the same message being copied from OUT to IN.
What it should do instead is to *move* it instead of using copy mechanism.

",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-08-29 12:05:53.626,,,no_permission,,,,,,,,,,,,,76679,,,Thu Jun 03 07:24:03 UTC 2010,,,,,,,0|i01lmv:,7274,,,,,,,,,"29/Aug/09 12:05;njiang;Maybe we just need to add a check in the MessageSupport.copyFrom(), to skip to copy work of the same message.",29/Aug/09 12:08;davsclaus;It was CAMEL-1955,"29/Aug/09 12:19;davsclaus;@Willem excactly

This is what I am adding

        if (that == this) {
            // the same instance so do not need to copy
            return;
        }
",29/Aug/09 12:21;davsclaus;Willem can you merge the fix in MessageSupport to Camel 1.6.2 as it should apply in that release as well?,29/Aug/09 12:22;davsclaus;trunk: 809122.,"29/Aug/09 12:40;njiang;@Claus,
Yeah, I just merged the check code back to camel-1.x branch.
Will commit the patch after running the test.",03/Jun/10 07:24;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test failure in SpringDataSetTest on Windows,CAMEL-1958,12486752,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,chris@die-schneider.net,chris@die-schneider.net,29/Aug/09 08:09,02/Mar/10 21:38,14/Mar/19 02:42,29/Sep/09 09:36,2.0.0,,,,,,,,,,2.1.0,,,camel-spring,,,,0,"The test  SpringDataSetTest produces the following failure. Sometime the actual counts where different from 0. The problem is that this failure does not happen when running only this test. It only happens when the other tests in spring-jms also run. So I guess some other test does not clean up correctly or it is a timing issue.

dataset://foo?minRate=50 Received message count. Expected: <100> but was: <0>

Stracktrace

java.lang.AssertionError: dataset://foo?minRate=50 Received message count. Expected: <100> but was: <0>
	at org.apache.camel.component.mock.MockEndpoint.fail(MockEndpoint.java:899)
	at org.apache.camel.component.mock.MockEndpoint.assertEquals(MockEndpoint.java:881)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:230)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:208)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:149)
	at org.apache.camel.component.dataset.SpringDataSetTest.testRun(SpringDataSetTest.java:34)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at junit.framework.TestCase.runTest(TestCase.java:168)
	at org.springframework.test.context.junit38.AbstractJUnit38SpringContextTests.runManaged(AbstractJUnit38SpringContextTests.java:307)
	at org.springframework.test.context.junit38.AbstractJUnit38SpringContextTests.access$000(AbstractJUnit38SpringContextTests.java:94)
	at org.springframework.test.context.junit38.AbstractJUnit38SpringContextTests$1.run(AbstractJUnit38SpringContextTests.java:193)
	at org.springframework.test.context.junit38.AbstractJUnit38SpringContextTests.runTest(AbstractJUnit38SpringContextTests.java:270)
	at org.springframework.test.context.junit38.AbstractJUnit38SpringContextTests.runTestTimed(AbstractJUnit38SpringContextTests.java:228)
	at org.springframework.test.context.junit38.AbstractJUnit38SpringContextTests.runBare(AbstractJUnit38SpringContextTests.java:191)
	at junit.framework.TestResult$1.protect(TestResult.java:110)
	at junit.framework.TestResult.runProtected(TestResult.java:128)
	at junit.framework.TestResult.run(TestResult.java:113)
	at junit.framework.TestCase.run(TestCase.java:124)
	at junit.framework.TestSuite.runTest(TestSuite.java:232)
	at junit.framework.TestSuite.run(TestSuite.java:227)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:81)
	at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:62)
	at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:140)
	at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:165)
	at org.apache.maven.surefire.Surefire.run(Surefire.java:107)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:289)
	at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:1005)
","Windows Vista 32 Bit, JDK 1.6.0_14 and maven 2.2.0 ",,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-09-29 07:14:12.897,,,no_permission,,,,,,,,,,,,,76680,,,Tue Sep 29 09:28:39 UTC 2009,,,,,,,0|i01lmf:,7272,,,,,,,,,29/Sep/09 07:14;davsclaus;How does it run now with latest code from snapshot?,"29/Sep/09 09:09;chris@die-schneider.net;The tests run successfully with the current head of subversion.
",29/Sep/09 09:28;davsclaus;That is good as I did some recent changes to seda and dataset which I hoped will fix the Windows side as well. Had an issue on some slow AIX / HP boxes.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The construction method of SourceCache is wrong  ,CAMEL-1957,12487059,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,29/Aug/09 07:32,03/Jun/10 07:24,14/Mar/19 02:42,29/Aug/09 07:41,2.0.0,2.0-M2,2.0-M3,,,,,,,,2.1.0,,,camel-core,,,,0,"The construction of SourceCache is wrong , it will cause the NPE when you enable the stream cache.
{code}
  public SourceCache(String data) {
        new StringSource(data);
        // It should be changed to 
        // super(data);
    }
{code}",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-06-03 07:24:03.24,,,no_permission,,,,,,,,,,,,,76681,,,Thu Jun 03 07:24:03 UTC 2010,,,,,,,0|i01lm7:,7271,,,,,,,,,29/Aug/09 07:41;njiang;http://svn.apache.org/viewvc?rev=809089&view=rev,03/Jun/10 07:24;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MessageSupport.copyFrom() doesn't clean the message header and the attachments,CAMEL-1955,12487070,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,28/Aug/09 12:06,27/Nov/10 06:42,14/Mar/19 02:42,28/Aug/09 12:24,1.5.0,1.6.0,1.6.1,2.0.0,2.0-M1,2.0-M2,2.0-M3,,,,1.6.2,2.1.0,,camel-core,,,,0,"If the we want to clean up the attachment in the pipeline processor, we will hit this bug.
{code}
 from(""direct:start"")
                    .process(new Processor() {
                        public void process(Exchange exchange) throws Exception {
                            exchange.getOut().copyFrom(exchange.getIn());
                            //Added the header and attachment
                            exchange.getOut().setHeader(""test"", ""testValue"");
                            exchange.getOut().addAttachment(""test1.xml"", new DataHandler(new FileDataSource(""pom.xml"")));
                        }
                    })
                    .process(new Processor() {
                        public void process(Exchange exchange) throws Exception {
                            exchange.getOut().copyFrom(exchange.getIn());
                            assertNotNull(""The test attachment should not be null"", exchange.getOut().getAttachment(""test1.xml""));
                            assertNotNull(""The test header should not be null"", exchange.getOut().getHeader(""test""));
                            exchange.getOut().removeAttachment(""test1.xml"");
                            exchange.getOut().removeHeader(""test"");
                        }
                    });
{code}",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-06-03 07:24:02.391,,,no_permission,,,,,,,,,,,,,76682,,,Thu Jun 03 07:24:02 UTC 2010,,,,,,,0|i01llr:,7269,,,,,,,,,"28/Aug/09 12:24;njiang;trunk
http://svn.apache.org/viewvc?rev=808857&view=rev
camel 1.x branch
http://svn.apache.org/viewvc?rev=808856&view=rev",03/Jun/10 07:24;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MultiServletConsumerTest fails on Windows with HttpNotFoundException,CAMEL-1949,12486615,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,chris@die-schneider.net,chris@die-schneider.net,27/Aug/09 08:58,02/Mar/10 21:39,14/Mar/19 02:42,24/Oct/09 11:49,2.0.0,,,,,,,,,,2.1.0,,,camel-servlet,,,,0,"I do not understand the test enough to say why the exception happens. Apart from the failure I think it would be better if the test would not use port 80 as it may be already in use on many machines.

I have attached the stack trace and the log on debug level:

com.meterware.httpunit.HttpNotFoundException: Error on HTTP request: 404  [http://localhost/mycontext/services2/hello]
	at com.meterware.httpunit.WebClient.validateHeaders(WebClient.java:575)
	at com.meterware.httpunit.WebClient.updateClient(WebClient.java:464)
	at com.meterware.httpunit.WebWindow.updateWindow(WebWindow.java:139)
	at com.meterware.httpunit.WebWindow.getSubframeResponse(WebWindow.java:130)
	at com.meterware.httpunit.WebWindow.getResponse(WebWindow.java:121)
	at com.meterware.httpunit.WebClient.getResponse(WebClient.java:113)
	at org.apache.camel.component.servlet.MultiServletConsumerTest.getService(MultiServletConsumerTest.java:66)
	at org.apache.camel.component.servlet.MultiServletConsumerTest.testMultiServletsConsumers(MultiServletConsumerTest.java:53)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.junit.internal.runners.TestMethod.invoke(TestMethod.java:59)
	at org.junit.internal.runners.MethodRoadie.runTestMethod(MethodRoadie.java:98)
	at org.junit.internal.runners.MethodRoadie$2.run(MethodRoadie.java:79)
	at org.junit.internal.runners.MethodRoadie.runBeforesThenTestThenAfters(MethodRoadie.java:87)
	at org.junit.internal.runners.MethodRoadie.runTest(MethodRoadie.java:77)
	at org.junit.internal.runners.MethodRoadie.run(MethodRoadie.java:42)
	at org.junit.internal.runners.JUnit4ClassRunner.invokeTestMethod(JUnit4ClassRunner.java:88)
	at org.junit.internal.runners.JUnit4ClassRunner.runMethods(JUnit4ClassRunner.java:51)
	at org.junit.internal.runners.JUnit4ClassRunner$1.run(JUnit4ClassRunner.java:44)
	at org.junit.internal.runners.ClassRoadie.runUnprotected(ClassRoadie.java:27)
	at org.junit.internal.runners.ClassRoadie.runProtected(ClassRoadie.java:37)
	at org.junit.internal.runners.JUnit4ClassRunner.run(JUnit4ClassRunner.java:42)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:46)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)

Rhino classes (js.jar) not found - Javascript disabled
2009-08-27 10:56:51,195 [main           ] INFO  DefaultCamelContext            - JMX enabled. Using DefaultManagedLifecycleStrategy.
2009-08-27 10:57:00,471 [main           ] DEBUG MultiServletConsumerTest       - Using created route builder: Routes: []
2009-08-27 10:57:03,453 [main           ] DEBUG DefaultCamelContext            - Adding routes from builder: Routes: []
2009-08-27 10:57:04,837 [main           ] INFO  DefaultCamelContext            - Apache Camel 2.1-SNAPSHOT (CamelContext:camel-1) is starting
2009-08-27 10:57:04,846 [main           ] DEBUG DefaultProducerServicePool     - Starting service pool: org.apache.camel.impl.DefaultProducerServicePool@f42160
2009-08-27 10:57:05,487 [main           ] DEBUG DefaultComponentResolver       - Found component: servlet via type: org.apache.camel.component.servlet.ServletComponent via: META-INF/services/org/apache/camel/component/servlet
2009-08-27 10:57:05,542 [main           ] DEBUG DefaultHttpParams              - Set parameter http.useragent = Jakarta Commons-HttpClient/3.1
2009-08-27 10:57:05,547 [main           ] DEBUG DefaultHttpParams              - Set parameter http.protocol.version = HTTP/1.1
2009-08-27 10:57:05,551 [main           ] DEBUG DefaultHttpParams              - Set parameter http.connection-manager.class = class org.apache.commons.httpclient.SimpleHttpConnectionManager
2009-08-27 10:57:05,552 [main           ] DEBUG DefaultHttpParams              - Set parameter http.protocol.cookie-policy = default
2009-08-27 10:57:05,553 [main           ] DEBUG DefaultHttpParams              - Set parameter http.protocol.element-charset = US-ASCII
2009-08-27 10:57:05,554 [main           ] DEBUG DefaultHttpParams              - Set parameter http.protocol.content-charset = ISO-8859-1
2009-08-27 10:57:05,561 [main           ] DEBUG DefaultHttpParams              - Set parameter http.method.retry-handler = org.apache.commons.httpclient.DefaultHttpMethodRetryHandler@1e2a069
2009-08-27 10:57:05,562 [main           ] DEBUG DefaultHttpParams              - Set parameter http.dateparser.patterns = [EEE, dd MMM yyyy HH:mm:ss zzz, EEEE, dd-MMM-yy HH:mm:ss zzz, EEE MMM d HH:mm:ss yyyy, EEE, dd-MMM-yyyy HH:mm:ss z, EEE, dd-MMM-yyyy HH-mm-ss z, EEE, dd MMM yy HH:mm:ss z, EEE dd-MMM-yyyy HH:mm:ss z, EEE dd MMM yyyy HH:mm:ss z, EEE dd-MMM-yyyy HH-mm-ss z, EEE dd-MMM-yy HH:mm:ss z, EEE dd MMM yy HH:mm:ss z, EEE,dd-MMM-yy HH:mm:ss z, EEE,dd-MMM-yyyy HH:mm:ss z, EEE, dd-MM-yyyy HH:mm:ss z]
2009-08-27 10:57:05,608 [main           ] DEBUG DefaultComponent               - Creating endpoint uri=[servlet:///hello], path=[/hello], parameters=[{}]
2009-08-27 10:57:05,648 [main           ] DEBUG DefaultCamelContext            - servlet:///hello converted to endpoint: Endpoint[/hello] by component: org.apache.camel.component.servlet.ServletComponent@83e5f1
2009-08-27 10:57:05,776 [main           ] DEBUG DefaultComponent               - Creating endpoint uri=[servlet:///echo?servletName=CamelServlet1], path=[/echo], parameters=[{servletName=CamelServlet1}]
2009-08-27 10:57:05,799 [main           ] DEBUG DefaultCamelContext            - servlet:///echo?servletName=CamelServlet1 converted to endpoint: Endpoint[/echo?servletName=CamelServlet1] by component: org.apache.camel.component.servlet.ServletComponent@83e5f1
2009-08-27 10:57:05,829 [main           ] DEBUG DefaultComponent               - Creating endpoint uri=[servlet:///echo?servletName=CamelServlet2], path=[/echo], parameters=[{servletName=CamelServlet2}]
2009-08-27 10:57:05,833 [main           ] DEBUG DefaultCamelContext            - servlet:///echo?servletName=CamelServlet2 converted to endpoint: Endpoint[/echo?servletName=CamelServlet2] by component: org.apache.camel.component.servlet.ServletComponent@83e5f1
2009-08-27 10:57:05,836 [main           ] DEBUG DefaultCamelContext            - Starting routes
2009-08-27 10:57:06,175 [main           ] DEBUG HttpConsumer                   - Starting consumer: Consumer[/echo?servletName=CamelServlet2]
2009-08-27 10:57:06,423 [main           ] DEBUG HttpConsumer                   - Starting consumer: Consumer[/echo?servletName=CamelServlet1]
2009-08-27 10:57:06,613 [main           ] DEBUG HttpConsumer                   - Starting consumer: Consumer[/hello]
2009-08-27 10:57:06,615 [main           ] INFO  CamelHttpTransportServlet      - Since no servlet name is specified, using the first element of camelServlet map [CamelServlet1]
2009-08-27 10:57:06,616 [main           ] DEBUG DefaultCamelContext            - Route 0: EventDrivenConsumerRoute[Endpoint[/echo?servletName=CamelServlet2] -> Instrumention:route[UnitOfWork(Channel[org.apache.camel.component.servlet.MultiServletConsumerTest$1$1@15c2843])]]
2009-08-27 10:57:06,618 [main           ] DEBUG DefaultCamelContext            - Route 1: EventDrivenConsumerRoute[Endpoint[/echo?servletName=CamelServlet1] -> Instrumention:route[UnitOfWork(Channel[org.apache.camel.component.servlet.MultiServletConsumerTest$1$1@15c2843])]]
2009-08-27 10:57:06,620 [main           ] DEBUG DefaultCamelContext            - Route 2: EventDrivenConsumerRoute[Endpoint[/hello] -> Instrumention:route[UnitOfWork(Channel[org.apache.camel.component.servlet.MultiServletConsumerTest$1$1@15c2843])]]
2009-08-27 10:57:06,621 [main           ] DEBUG DefaultCamelContext            - Started routes
2009-08-27 10:57:06,622 [main           ] INFO  DefaultCamelContext            - Apache Camel 2.1-SNAPSHOT (CamelContext:camel-1) started
2009-08-27 10:57:13,064 [main           ] DEBUG MultiServletConsumerTest       - Routing Rules are: [EventDrivenConsumerRoute[Endpoint[/echo?servletName=CamelServlet2] -> Instrumention:route[UnitOfWork(Channel[org.apache.camel.component.servlet.MultiServletConsumerTest$1$1@15c2843])]], EventDrivenConsumerRoute[Endpoint[/echo?servletName=CamelServlet1] -> Instrumention:route[UnitOfWork(Channel[org.apache.camel.component.servlet.MultiServletConsumerTest$1$1@15c2843])]], EventDrivenConsumerRoute[Endpoint[/hello] -> Instrumention:route[UnitOfWork(Channel[org.apache.camel.component.servlet.MultiServletConsumerTest$1$1@15c2843])]]]
2009-08-27 10:57:14,863 [main           ] DEBUG MultiServletConsumerTest       - Routing Rules are: [EventDrivenConsumerRoute[Endpoint[/echo?servletName=CamelServlet2] -> Instrumention:route[UnitOfWork(Channel[org.apache.camel.component.servlet.MultiServletConsumerTest$1$1@15c2843])]], EventDrivenConsumerRoute[Endpoint[/echo?servletName=CamelServlet1] -> Instrumention:route[UnitOfWork(Channel[org.apache.camel.component.servlet.MultiServletConsumerTest$1$1@15c2843])]], EventDrivenConsumerRoute[Endpoint[/hello] -> Instrumention:route[UnitOfWork(Channel[org.apache.camel.component.servlet.MultiServletConsumerTest$1$1@15c2843])]]]
2009-08-27 10:57:26,641 [main           ] DEBUG MultiServletConsumerTest       - tearDown test 
2009-08-27 10:57:26,642 [main           ] INFO  DefaultCamelContext            - Apache Camel 2.1-SNAPSHOT (CamelContext:camel-1) is stopping
2009-08-27 10:57:26,642 [main           ] INFO  CamelHttpTransportServlet      - Since no servlet name is specified, using the first element of camelServlet map [CamelServlet1]
2009-08-27 10:57:26,643 [main           ] DEBUG HttpConsumer                   - Stopping consumer: Consumer[/hello]
2009-08-27 10:57:26,643 [main           ] DEBUG HttpConsumer                   - Stopping consumer: Consumer[/echo?servletName=CamelServlet1]
2009-08-27 10:57:26,644 [main           ] DEBUG HttpConsumer                   - Stopping consumer: Consumer[/echo?servletName=CamelServlet2]
2009-08-27 10:57:26,644 [main           ] DEBUG DefaultProducerServicePool     - Stopping service pool: org.apache.camel.impl.DefaultProducerServicePool@f42160
2009-08-27 10:57:26,645 [main           ] INFO  DefaultCamelContext            - Apache Camel 2.1-SNAPSHOT (CamelContext:camel-1) stopped
","Windows Vista 32 Bit, JDK 1.6.0_14 and maven 2.2.0 ",,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-10-23 12:34:06.702,,,no_permission,,,,,,,,,,,,,76683,,,Sat Oct 24 11:51:20 UTC 2009,,,,,,,0|i01lkf:,7263,,,,,,,,,"23/Oct/09 12:34;davsclaus;Christian can you try latest trunk code again?

",24/Oct/09 11:45;chris@die-schneider.net;The test succeeds. Thanks,24/Oct/09 11:49;janstey;Ah yeah fixed this yesterday. It was occurring for me on Linux with JDK 1.6 too.,24/Oct/09 11:51;janstey;BTW the fix rev is http://svn.apache.org/viewvc?rev=829164&view=rev,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ServiceSupport - incorrect state after restart,CAMEL-1948,12487080,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,27/Aug/09 07:49,03/Jun/10 07:24,14/Mar/19 02:42,27/Aug/09 07:50,2.0.0,,,,,,,,,,2.1.0,,,camel-core,,,,0,"This hampers restart of services by example the overhauled JMX in CAMEL-1933.

When a service was restarted it had the following incorrect state:
- started = true
- starting = false
- stopped = true
- stopping = false

The stopped should have been changed to false as its started.

",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76684,,,Thu Jun 03 07:24:00 UTC 2010,,,,,,,0|i01lk7:,7262,,,,,,,,,27/Aug/09 07:50;davsclaus;trunk: 808309,03/Jun/10 07:24;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Tracer - when using try its not logged correclty,CAMEL-1941,12487075,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,davsclaus,davsclaus,davsclaus,26/Aug/09 12:33,03/Jun/10 07:23,14/Mar/19 02:42,14/Nov/09 17:49,2.0.0,,,,,,,,,,2.1.0,,,,,,,0,When using Tracer the FROM -> TO is not logged correctly.,,,,,,,,,,,,,,,CAMEL-2051,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76685,,,Thu Jun 03 07:23:56 UTC 2010,,,,,,,0|i01lin:,7255,,,,,,,,,"14/Nov/09 17:49;davsclaus;try is now not logged, but the route logged is correct anyway.

There is a ticket for later adding those abstract events to the trace log.",03/Jun/10 07:23;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pollEnrich does not work with queue and quartz or timer endpoints,CAMEL-1940,12487084,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,cmoulliard,cmoulliard,26/Aug/09 11:43,03/Jun/10 07:23,14/Mar/19 02:42,31/Aug/09 11:43,2.0.0,,,,,,,,,,2.1.0,,,,,,,0,"Hi,

In the following route example, the pollenrich processor is never called

{code}
            <camel:from uri=""quartz://x3sReporting/clientError?cron=0+0/5+9-18+?+*+MON-FRI""/>
            <camel:pollEnrich uri=""queuingservice:x3s:reporting"" strategyRef=""queueAggregator""/>

            <camel:transacted ref=""PROPAGATION_REQUIRED_NEW"" />
            <camel:choice>
                <camel:when>
                    <camel:simple>${body} != null</camel:simple>
                    <camel:doTry>
                        <camel:marshal ref=""csvAuditBindyDataFormat"" />
{code}
Definiton of the AggregationStrategy class used

{code}
public class QueueAggregator implements AggregationStrategy {
   
    private static final transient Log LOG = LogFactory.getLog(QueueAggregator.class);

    public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {
        if (newExchange == null) {
            LOG.info(""Old object received (null exchange) : "" + oldExchange.getIn().getBody().toString());
            return oldExchange;
        }
        Object oldBody = oldExchange.getIn().getBody();
        LOG.info(""Old object received : "" + oldBody.toString());
        Object newBody = newExchange.getIn().getBody();
        LOG.info(""New object received : "" + newBody.toString());
        oldExchange.getIn().setBody(newBody);
        return oldExchange;
    }
}
{code}
Unfortunately, the aggregator is not called (no info trace in the LOG) and the body object send to the endpoint (marshall) is of type org.quartz.JobDetail

{code}
11:10:02,703 | INFO  | heduler_Worker-1 | TraceInterceptor                 | rg.apache.camel.processor.Logger   88 | ID-dell-charles-3372-1251127950838-0-10 >>> from(quartz://x3sReporting/clientError?cron=0+0%2F5+9-18+%3F+*+MON-FRI) --> ref:PROPAGATION_REQUIRED_NEW, Pattern:InOnly, Headers:{triggerGroup=x3sReporting, jobInstance=org.apache.camel.component.quartz.CamelJob@1264f27, nextFireTime=Tue Aug 25 11:15:00 CEST 2009, previousFireTime=null, jobDetail=JobDetail 'DEFAULT.quartz://x3sReporting/clientError?cron=0+0%2F5+9-18+%3F+*+MON-FRI':  jobClass: 'org.apache.camel.component.quartz.CamelJob isStateful: false isVolatile: false isDurable: false requestsRecovers: false, triggerName=clientError, trigger=Trigger 'x3sReporting.clientError':  triggerClass: 'org.quartz.CronTrigger isVolatile: false calendar: 'null' misfireInstruction: 0 nextFireTime: Tue Aug 25 11:15:00 CEST 2009, scheduler=org.quartz.impl.StdScheduler@16975d, jobRunTime=-1, scheduledFireTime=Tue Aug 25 11:10:00 CEST 2009, result=null, calendar=null, mergedJobDataMap=org.quartz.JobDataMap@ccc462dc, refireCount=0, fireTime=Tue Aug 25 11:10:00 CEST 2009}, BodyType:org.quartz.JobDetail, Body:JobDetail 'DEFAULT.quartz://x3sReporting/clientError?cron=0+0%2F5+9-18+%3F+*+MON-FRI':  jobClass: 'org.apache.camel.component.quartz.CamelJob isStateful: false isVolatile: false isDurable: false requestsRecovers: false
11:10:02,718 | INFO  | heduler_Worker-1 | TraceInterceptor                 | rg.apache.camel.processor.Logger   88 | ID-dell-charles-3372-1251127950838-0-10 >>> ref:PROPAGATION_REQUIRED_NEW --> Choice, Pattern:InOnly, Headers:{triggerGroup=x3sReporting, jobInstance=org.apache.camel.component.quartz.CamelJob@1264f27, nextFireTime=Tue Aug 25 11:15:00 CEST 2009, previousFireTime=null, jobDetail=JobDetail 'DEFAULT.quartz://x3sReporting/clientError?cron=0+0%2F5+9-18+%3F+*+MON-FRI':  jobClass: 'org.apache.camel.component.quartz.CamelJob isStateful: false isVolatile: false isDurable: false requestsRecovers: false, triggerName=clientError, trigger=Trigger 'x3sReporting.clientError':  triggerClass: 'org.quartz.CronTrigger isVolatile: false calendar: 'null' misfireInstruction: 0 nextFireTime: Tue Aug 25 11:15:00 CEST 2009, scheduler=org.quartz.impl.StdScheduler@16975d, jobRunTime=-1, scheduledFireTime=Tue Aug 25 11:10:00 CEST 2009, result=null, calendar=null, mergedJobDataMap=org.quartz.JobDataMap@ccc462dc, refireCount=0, fireTime=Tue Aug 25 11:10:00 CEST 2009}, BodyType:org.quartz.JobDetail, Body:JobDetail 'DEFAULT.quartz://x3sReporting/clientError?cron=0+0%2F5+9-18+%3F+*+MON-FRI':  jobClass: 'org.apache.camel.component.quartz.CamelJob isStateful: false isVolatile: false isDurable: false requestsRecovers: false
11:10:02,734 | INFO  | heduler_Worker-1 | TraceInterceptor                 | rg.apache.camel.processor.Logger   88 | ID-dell-charles-3372-1251127950838-0-10 >>> Choice --> Try, Pattern:InOnly, Headers:{triggerGroup=x3sReporting, jobInstance=org.apache.camel.component.quartz.CamelJob@1264f27, nextFireTime=Tue Aug 25 11:15:00 CEST 2009, previousFireTime=null, jobDetail=JobDetail 'DEFAULT.quartz://x3sReporting/clientError?cron=0+0%2F5+9-18+%3F+*+MON-FRI':  jobClass: 'org.apache.camel.component.quartz.CamelJob isStateful: false isVolatile: false isDurable: false requestsRecovers: false, triggerName=clientError, trigger=Trigger 'x3sReporting.clientError':  triggerClass: 'org.quartz.CronTrigger isVolatile: false calendar: 'null' misfireInstruction: 0 nextFireTime: Tue Aug 25 11:15:00 CEST 2009, scheduler=org.quartz.impl.StdScheduler@16975d, jobRunTime=-1, scheduledFireTime=Tue Aug 25 11:10:00 CEST 2009, result=null, calendar=null, mergedJobDataMap=org.quartz.JobDataMap@ccc462dc, refireCount=0, fireTime=Tue Aug 25 11:10:00 CEST 2009}, BodyType:org.quartz.JobDetail, Body:JobDetail 'DEFAULT.quartz://x3sReporting/clientError?cron=0+0%2F5+9-18+%3F+*+MON-FRI':  jobClass: 'org.apache.camel.component.quartz.CamelJob isStateful: false isVolatile: false isDurable: false requestsRecovers: false
11:10:02,734 | INFO  | heduler_Worker-1 | TraceInterceptor                 | rg.apache.camel.processor.Logger   88 | ID-dell-charles-3372-1251127950838-0-10 >>> Try -->, Pattern:InOnly, Headers:{triggerGroup=x3sReporting, jobInstance=org.apache.camel.component.quartz.CamelJob@1264f27, nextFireTime=Tue Aug 25 11:15:00 CEST 2009, previousFireTime=null, jobDetail=JobDetail 'DEFAULT.quartz://x3sReporting/clientError?cron=0+0%2F5+9-18+%3F+*+MON-FRI':  jobClass: 'org.apache.camel.component.quartz.CamelJob isStateful: false isVolatile: false isDurable: false requestsRecovers: false, triggerName=clientError, trigger=Trigger 'x3sReporting.clientError':  triggerClass: 'org.quartz.CronTrigger isVolatile: false calendar: 'null' misfireInstruction: 0 nextFireTime: Tue Aug 25 11:15:00 CEST 2009, scheduler=org.quartz.impl.StdScheduler@16975d, jobRunTime=-1, scheduledFireTime=Tue Aug 25 11:10:00 CEST 2009, result=null, calendar=null, mergedJobDataMap=org.quartz.JobDataMap@ccc462dc, refireCount=0, fireTime=Tue Aug 25 11:10:00 CEST 2009}, BodyType:org.quartz.JobDetail, Body:JobDetail 'DEFAULT.quartz://x3sReporting/clientError?cron=0+0%2F5+9-18+%3F+*+MON-FRI':  jobClass: 'org.apache.camel.component.quartz.CamelJob isStateful: false isVolatile: false isDurable: false requestsRecovers: false
11:10:03,171 | INFO  | heduler_Worker-1 | TraceInterceptor                 | rg.apache.camel.processor.Logger  166 | ID-dell-charles-3372-1251127950838-0-10 >>> Try -->, Pattern:InOnly, Headers:{triggerGroup=x3sReporting, jobInstance=org.apache.camel.component.quartz.CamelJob@1264f27, nextFireTime=Tue Aug 25 11:15:00 CEST 2009, previousFireTime=null, jobDetail=JobDetail 'DEFAULT.quartz://x3sReporting/clientError?cron=0+0%2F5+9-18+%3F+*+MON-FRI':  jobClass: 'org.apache.camel.component.quartz.CamelJob isStateful: false isVolatile: false isDurable: false requestsRecovers: false, triggerName=clientError, trigger=Trigger 'x3sReporting.clientError':  triggerClass: 'org.quartz.CronTrigger isVolatile: false calendar: 'null' misfireInstruction: 0 nextFireTime: Tue Aug 25 11:15:00 CEST 2009, scheduler=org.quartz.impl.StdScheduler@16975d, jobRunTime=-1, scheduledFireTime=Tue Aug 25 11:10:00 CEST 2009, result=null, calendar=null, mergedJobDataMap=org.quartz.JobDataMap@ccc462dc, refireCount=0, fireTime=Tue Aug 25 11:10:00 CEST 2009}, BodyType:org.quartz.JobDetail, Body:JobDetail 'DEFAULT.quartz://x3sReporting/clientError?cron=0+0%2F5+9-18+%3F+*+MON-FRI':  jobClass: 'org.apache.camel.component.quartz.CamelJob isStateful: false isVolatile: false isDurable: false requestsRecovers: false, Exception: java.lang.ClassCastException: org.quartz.JobDetail
11:10:03,171 | INFO  | heduler_Worker-1 | TraceInterceptor                 | rg.apache.camel.processor.Logger   88 | ID-dell-charles-3372-1251127950838-0-11 >>>  --> log://com.xpectis.x3s?level=INFO&multiline=true&showCaughtException=true&showException=true&showStackTrace=true, Pattern:InOnly, Headers:{calendar=null, scheduledFireTime=Tue Aug 25 11:10:00 CEST 2009, trigger=Trigger 'x3sReporting.clientError':  triggerClass: 'org.quartz.CronTrigger isVolatile: false calendar: 'null' misfireInstruction: 0 nextFireTime: Tue Aug 25 11:15:00 CEST 2009, triggerGroup=x3sReporting, previousFireTime=null, jobRunTime=-1, jobDetail=JobDetail 'DEFAULT.quartz://x3sReporting/clientError?cron=0+0%2F5+9-18+%3F+*+MON-FRI':  jobClass: 'org.apache.camel.component.quartz.CamelJob isStateful: false isVolatile: false isDurable: false requestsRecovers: false, result=null, triggerName=clientError, fireTime=Tue Aug 25 11:10:00 CEST 2009, mergedJobDataMap=org.quartz.JobDataMap@ccc462dc, jobInstance=org.apache.camel.component.quartz.CamelJob@1264f27, scheduler=org.quartz.impl.StdScheduler@16975d, refireCount=0, nextFireTime=Tue Aug 25 11:15:00 CEST 2009}, BodyType:org.quartz.JobDetail, Body:JobDetail 'DEFAULT.quartz://x3sReporting/clientError?cron=0+0%2F5+9-18+%3F+*+MON-FRI':  jobClass: 'org.apache.camel.component.quartz.CamelJob isStateful: false isVolatile: false isDurable: false requestsRecovers: false
11:10:03,187 | INFO  | heduler_Worker-1 | x3s                              | rg.apache.camel.processor.Logger   88 | Exchange[
, BodyType:org.quartz.JobDetail
, Body:JobDetail 'DEFAULT.quartz://x3sReporting/clientError?cron=0+0%2F5+9-18+%3F+*+MON-FRI':  jobClass: 'org.apache.camel.component.quartz.CamelJob isStateful: false isVolatile: false isDurable: false requestsRecovers: false
, CaughtExceptionType:java.lang.ClassCastException, CaughtExceptionMessage:org.quartz.JobDetail, StackTrace:java.lang.ClassCastException: org.quartz.JobDetail
    at org.apache.camel.dataformat.bindy.csv.BindyCsvDataFormat.marshal(BindyCsvDataFormat.java:60)
{code}",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-08-29 12:23:01.435,,,no_permission,,,,,,,,,,,,,76686,,,Thu Jun 03 07:23:55 UTC 2010,,,,,,,0|i01lif:,7254,,,,,,,,,"29/Aug/09 12:23;davsclaus;Which version are you using?

Can you try again with code from trunk as I have committed a fix for CAMEL-1960.","31/Aug/09 06:59;cmoulliard;Version : 2.0.

I will try with a new build of 2.1-SNAPSHOT",31/Aug/09 09:20;cmoulliard;I have retested with build - 31/08/2009 of camel-core / camel-spring but the problem is still there.,31/Aug/09 09:26;davsclaus;Is queuingservice:x3s:reporting a JMS endpoint?,31/Aug/09 09:33;cmoulliard;Yes. This is a queue running in activeMQ.,"31/Aug/09 11:43;davsclaus;trunk: 809546.

Use <pollEnrich timeout=""1""  .... /> as a workaround in Camel 2.0 when consuming for a JMS queue.

The issue is spring jms template and using -1 does not work properly for signaling no wait.",31/Aug/09 11:52;cmoulliard;Many thanks. It works fine now. ;-),03/Jun/10 07:23;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test failure in camel-velocity on windows,CAMEL-1938,12486756,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,chris@die-schneider.net,chris@die-schneider.net,25/Aug/09 21:38,02/Mar/10 21:39,14/Mar/19 02:42,26/Aug/09 02:48,2.0.0,,,,,,,,,,2.1.0,,,camel-velocity,,,,0,"The test VelocityDynamicTemplateTest fails in method testVelocityLetter.

The second message the test sends contains /r/n instead of the expected /n as line break. The template letter2.vm that the test uses contains /r/n so I wonder if this test only fails on windows. I fixed the test for me by changing the expected text. 
","Windows Vista 32 Bit, JDK 1.6.0_14 and maven 2.2.0 ",,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-08-26 02:48:14.255,,,no_permission,,,,,,,,,,,,,76687,,,Wed Aug 26 02:48:14 UTC 2009,,,,,,,0|i01lhz:,7252,,,,,,,,,"26/Aug/09 02:48;njiang;trunk
http://svn.apache.org/viewvc?rev=807866&view=rev",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TypeConverters aren't loaded in OSGi when bundle is not started,CAMEL-1936,12486653,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,mrt1nz,mrt1nz,25/Aug/09 12:00,03/Jun/10 07:23,14/Mar/19 02:42,25/Aug/09 13:18,1.5.0,1.6.0,1.6.1,2.0.0,2.0-M1,2.0-M2,2.0-M3,,,,1.6.2,2.1.0,,osgi,,,,0,"See http://www.nabble.com/Loading-TypeConverters-in-OSGi-with-Camel-2.0-RC1-td25117256s22882.html#a25117256
","Windows XP, Java 6, Eclipse/Equinox 3.4.1",,,,,,,,,,,,,,,,25/Aug/09 12:01;mrt1nz;camel-osgi.patch;https://issues.apache.org/jira/secure/attachment/12462739/camel-osgi.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2009-08-25 13:18:33.655,,,no_permission,,,,,,,,,,,,,76688,,,Thu Jun 03 07:23:54 UTC 2010,,,Patch Available,,,,0|i01lhj:,7250,,,,,,,,,25/Aug/09 12:01;mrt1nz;Attached is a patch for camel-osgi that fixes the problems (allows for null returned from bundle.getBundleContext()),"25/Aug/09 13:18;njiang;Applied the patch with thanks to Martin.
http://svn.apache.org/viewvc?rev=807604&view=rev","17/Sep/09 10:37;njiang;back port the patch into camel-1.x branch
http://svn.apache.org/viewvc?rev=816114&view=rev",03/Jun/10 07:23;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unit test failure in Windows for StreamCache. Temp file is not deleted,CAMEL-1934,12486746,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,chris@die-schneider.net,chris@die-schneider.net,25/Aug/09 08:00,02/Mar/10 21:39,14/Mar/19 02:42,26/Aug/09 08:46,2.0.0,,,,,,,,,,2.1.0,,,camel-jetty,,,,0,"The temporary file is not deleted. I think the file is still open in some other stream. The problem is I have no idea how to find this place. Like in issue  	 CAMEL-1924 this only happens on windows as on unix you can delete a file even if there are open streams.

testStreamCacheToFileShouldBeDeletedInCaseOfException
	java.lang.AssertionError: There should be no files expected:<1> but was:<0>
	
org.apache.camel.component.jetty.HttpStreamCacheFileTest:71","Windows Vista 32 Bit, JDK 1.6.0_14 and maven 2.2.0 ",,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-08-26 02:30:27.02,,,no_permission,,,,,,,,,,,,,76689,,,Thu Aug 27 01:49:05 UTC 2009,,,,,,,0|i01lh3:,7248,,,,,,,,,"26/Aug/09 02:30;njiang;We should close the FileStreamCache when the Exchange is done to make sure the temporary file close.
I will commit the patch after whole tests are passed.","26/Aug/09 08:46;njiang;trunk
http://svn.apache.org/viewvc?rev=807874&view=rev","26/Aug/09 09:19;chris@die-schneider.net;Hi Willem,

perhaps you can also fix two minor errors in the test HttpStreamCacheFileTest.
In the assertions the expected and actual values are in the wrong order.

This is how it should be:
assertEquals(""There should be no files"", 0, files.length);

Greetings

Christian","27/Aug/09 01:49;njiang;@ Christian

Done.
http://svn.apache.org/viewvc?rev=808247&view=rev",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Synchronized access to XPathExpression resulting in contention for multiple consumers,CAMEL-1930,12487087,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,fdelaporte,fdelaporte,24/Aug/09 09:15,03/Jun/10 07:23,14/Mar/19 02:42,13/Oct/09 07:41,2.0-M3,,,,,,,,,,2.1.0,,,camel-core,,,,0,"Hi,

I'm using Camel to do some JMS message routing. Messages are XML so xpath is a natural choice.

However when using a choice with an xpath expression, the XPathBuilder creates one XPathExpression object. According to the specification, these objects are not thread safe so synchronizing looks natural. But then, using multiple jms consumers is totally useless since no concurrent evaluations can be made.

XPathExpression objects would rather need to be stored in a ThreadLocal to avoid synchronization and contention.

Cheers,
Fabrice","Java 1.6, Spring 2.5.6",,,,,,,,,,,,,,,,12/Oct/09 16:07;fdelaporte;XPathRouteConcurrentBigTest.java;https://issues.apache.org/jira/secure/attachment/12462862/XPathRouteConcurrentBigTest.java,24/Sep/09 09:38;davsclaus;camel_1930.patch;https://issues.apache.org/jira/secure/attachment/12462707/camel_1930.patch,12/Oct/09 16:01;fdelaporte;with-contention.jpg;https://issues.apache.org/jira/secure/attachment/12462859/with-contention.jpg,12/Oct/09 16:04;fdelaporte;without-contention.jpg;https://issues.apache.org/jira/secure/attachment/12462861/without-contention.jpg,,4.0,,,,,,,,,,,,,,,,,,,2009-09-24 08:29:56.983,,,no_permission,,,,,,,,,,,,,76690,,,Thu Jun 03 07:23:52 UTC 2010,,,,,,,0|i01lg7:,7244,,,,,,,,,"24/Sep/09 08:29;davsclaus;Fabrice

If I attach a patch to this ticket do you want to try it for yourself on your environment by building the source from trunk and apply the patch?

I would like it to be tested more thoroughly before committing to trunk.","24/Sep/09 08:46;fdelaporte;Sure, go ahead !","24/Sep/09 09:38;davsclaus;That was a fast reply. So I am attaching my current patch. It does still need more extensive unit testing but it does seem at first glance to work with concurrent evaluation.

Yet again if you or other have more advanced xml documentations and xpath expressions to use for testing that would be appreciated. As the one in this test is simple and thus fast for the computer to evaluate at runtime.",24/Sep/09 11:46;davsclaus;Fabrice can you measure any performance degradation with and without the patch?,"24/Sep/09 14:42;fdelaporte;Well, I guess this time you'll have to wait a little bit more for my next reply :-)

I'll try to test that in the coming days.

As a side note, my personal experience with contention was also with simple XML/XPath, but at high concurrency (100 consumers or so). I was doing some profiling and noticed threads that were blocked on object monitors, so I started investigating and ended up on these XPath synchronized blocks.

I'll bet back to you as soon as I can.","24/Sep/09 16:19;davsclaus;Ah okay I was only trying with at most 20 concurrent consumers.

So maybe I give it a go with 100+ to see if I can notice any difference.

",12/Oct/09 16:01;fdelaporte;This capture shows ten consumers competing to evaluate an XPath expression,12/Oct/09 16:04;fdelaporte;This capture shows the seda consumers allowed to evaluate XPath expressions concurrently (with attached patch applied).,12/Oct/09 16:07;fdelaporte;Test case with bigger XML/XPath,"12/Oct/09 16:07;fdelaporte;Hi Claus,

Sorry for the delay, been quite busy these days but finally got some time to run some tests against your patch.

Attached is my own version (heavily inspired by your own test case). By the way, why are you using an Executor to send your message to the SEDA queue ? Being an asynchronous endpoint I'm not sure I see the point in using a thread pool.

Anyway, I'm sending 100 000 xml messages (a little bit bigger than yours) to the seda queue, and then awaits for the mock endpoints to reach their expected message count to measure actual processing time. The XPath expression is also closer from what we may have here in production (kind of a big switch on the message type, there may be more efficient ways to do that (especially get rid of the // wild card to put a true /message/messagetype) but that's not the point here, the point is that we get something heavier on the CPU side. And, actually, setting a low value for consumer count does not prevent contention from happening (10 in my test case).

Results are pretty cool. On my computer it gives on average :
- around 150s without your patch
- around 110s with the patch

That's about 36% faster, so I think it's worth including the patch, although I have to admit that the performance difference is smaller than what I had expected (I guess that the more cores you have, the bigger the difference).

In addition to that I also attached two screenshots of my instance of JVisualVM to show contention without the patch (red threads) and with the patch (yeah, that green is beautiful).

Cheers,
Fabrice
","13/Oct/09 07:41;davsclaus;Thanks Fabrice for testing it and providing screenshots (nice to see the before and after situation).

I have applied the patch to trunk: 824627.",03/Jun/10 07:23;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FileConsumer preMove setting causes filename to be left in in progress repository.,CAMEL-1927,12487092,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,alexl,alexl,22/Aug/09 06:20,03/Jun/10 07:23,14/Mar/19 02:42,24/Aug/09 05:35,2.0-M3,,,,,,,,,,2.1.0,,,camel-core,,,,0,"If the FileConsumer preMove setting is used, then files are picked up the first time only, as the original file name is added to the in progress repository, whereas the new file name is removed from the in progress repository (though nothing is actually removed as the new file name is not in the in progress repository).

This causes a few problems:

i) If the maxMessagePerPoll is used, then messages not processed the first time are never picked up again.
ii) If the intention is to reprocess the same file, or a new file with the same name, then it will never be picked up again after the first time.
iii)  As the wrong file names are removed from the in progress repository, it results in a slow memory leak in the in progress repository.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-08-23 14:01:20.176,,,no_permission,,,,,,,,,,,,,76691,,,Thu Jun 03 07:23:50 UTC 2010,,,,,,,0|i01lfj:,7241,,,,,,,,,"23/Aug/09 14:01;davsclaus;Well spotted. Lets get this fixed in the next release.

Patches is welcome with unit tests :)","23/Aug/09 23:37;alexander.lee@conceptgate.com;Hi Claus,

Haven't worked around it yet, not sure I know how it should be done as the code which sets the filename in the in progress repository is in a separate place to the code that removes it, and the rename strategy is invoked in between.  You could set the file name in the in progress repository after the strategy is invoked but this might break something else.

I do like Camel, however I'm surprised how inheritance/composition based the components are rather than following the pipeline architecture that Camel itself enables.  For instance renaming could be a ""processor"" which the File component itself used as part of an initial pipeline.  This would make the architecture more simple yet much more powerful.  So I would see the File component being made up of a very simple timer with the second step as a file listing processor, and so on, with the required functionality pipelined in.  Things like idempotent or in progress repositories could be listeners to the Exchange object (for any changes in name etc.), added at the start and removed on completion or error.  Settings on the File component would then just decide whether a given processor was added to the initial flow/route or not.  I would see it working something like this:


File Component (itself a Route/Flow - or the start of one)
--------------

Timer Endpoint -> File listing Processor -> Splitter (on filename) -> Seda/Direct Queue -> In Progress Repository Processor -> Idempotent Repository Processor -> File Renaming Processor -> File Reader Processor (into exchange body) -> etc.


So you would then be able to add functionality to the File component with less chance of breaking something else as each processor would be decoupled from the next and each processor in a component only has to concentrate on doing one thing well.  This would also allow the processors to be reused by other developers and add functionality like the in progress or idempotent repository to their own flows/routes.

This is another thing which sort of puzzles me is that there are a lot of endpoints out of the box with Camel, but not many, if any processors.  If I want File renaming, deleting, moving functionality as part of my flow/route, then I shouldn't need to write this myself.  At the moment I'm trying to get around this by breaking my route into parts, so where I need file renaming functionality I end one route, and use new route with a File endpoint to pick up a file and rename it, and then from there another route to pick up the file again and do something with it.  But this would all be simpler if there were file renaming processors, etc. out of the box and this would add value to the Camel API.  In many cases it's as if I want some functionality from an end point, but in the middle of my route/flow.  Of course I can and have written some of these myself, but the next guy shouldn't have to.


Regards,
Alexander




","24/Aug/09 05:35;davsclaus;The issue is in related when you use {{preMove}} and change the actual name of the file such as prepending {{work-}} or the likes to the file name.
However if you use {{preMove}} to move the file to another directory then the name is correctly removed from the repo.

",24/Aug/09 05:35;davsclaus;trunk: 807078.,24/Aug/09 05:36;davsclaus;Alexander such details is best to discuss at the camel developer mailinglist.,03/Jun/10 07:23;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HTTP component throwing IllegalArgumentException in M3 release while bridging between jetty and http,CAMEL-1925,12487133,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,vatsakatta,vatsakatta,21/Aug/09 06:51,03/Jun/10 07:23,14/Mar/19 02:42,13/Sep/09 10:00,2.0-M3,,,,,,,,,,2.1.0,,,camel-core,camel-http,,,0,"The CamelHttpUri header is not set to the right value while routing between jetty and http components. Because of which the construction of the HttpMethod in the http component fails and throws up an IllegalArgumentException.

Detailed discussion regarding this issue can be found in this following thread.

http://www.nabble.com/HTTP-component-throwing-IllegalArgumentException-in-M3-release.-tt25057133.html#a25057133

",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-09-11 02:58:35.06,,,no_permission,,,,,,,,,,,,,76692,,,Thu Jun 03 07:23:49 UTC 2010,,,,,,,0|i01lf3:,7239,,,,,,,,,"11/Sep/09 02:58;njiang;Committed a fix for this issue by introduce a new option of bridgeEndpoint,  if this option is true,  HttpProducer will ignore the message header of Exchange.HTTP_URI .

http://svn.apache.org/viewvc?rev=813653&view=rev

TODO update the wiki page for it.","11/Sep/09 05:32;davsclaus;Willem I think there is more to it, when in bridge it should also do a {{throwExceptionOnFailure=false}} to be able to send the reply 100% back as is. (even if there was a http error 500 or the likes)",11/Sep/09 05:36;davsclaus;Willem I think just stating on the http wiki page that when you use {{bridgeEndpoint=true}} then you should often also set {{throwExceptionOnFailure=false}}. Eg if we just clearly document this then the end user have the freedom to decide whether to use both options or not.,13/Sep/09 10:00;njiang;Updated wiki page for it.,"12/Feb/10 10:10;thomasle;Thanks for the fix, I came across the same problem.
unfortunately it seems that the CamelHttpPath is still set to the old value of the jetty component. The path gets then added to the endpoint uri of the http component. So a 
<setHeader headerName=""CamelHttpPath"">
   <constant></constant>
</setHeader>
is still needed. Is this expected behaviour or could that be fixed inside the bridgeEndpoint option as well?",12/Feb/10 10:13;davsclaus;Thomas create a new ticket and attach a unit test / sample that demonstrates the issue.,03/Jun/10 07:23;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unit test failures on Windows in 2.0.0 release,CAMEL-1924,12485857,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,chris@die-schneider.net,chris@die-schneider.net,20/Aug/09 13:37,24/Aug/09 18:51,14/Mar/19 02:42,24/Aug/09 12:28,2.0.0,,,,,,,,,,2.1.0,,,camel-core,,,,0,"3 failures in camel-core that do not seem to occur on linux and mac.

Failure Details
	testCannotDeleteFile

	junit.framework.AssertionFailedError: Should have thrown an exception

	
org.apache.camel.component.file.strategy.GenericFileDeleteProcessStrategyTest:125
	testCacheStreamToFileAndNotCloseStream

	junit.framework.AssertionFailedError: we should have no temp file expected:<1> but was:<0>

	
org.apache.camel.converter.stream.CachedOutputStreamTest:117
	testRouteIsCorrectAtRuntime

	junit.framework.AssertionFailedError: expected:<4> but was:<1>

	
org.apache.camel.processor.ChoiceWithEndTest:39","Windows Vista 32 Bit, JDK 1.6.0_14 and maven 2.2.0",,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-08-24 12:23:38.782,,,no_permission,,,,,,,,,,,,,76693,,,Mon Aug 24 18:51:33 UTC 2009,,,,,,,0|i01lev:,7238,,,,,,,,,"20/Aug/09 13:37;chris@die-schneider.net;I have found the problem in the first test that failed:
GenericFileDeleteProcessStrategyTest.testCannotDeleteFile

In the method exists file the test checks if the file name equals ""target/foo/boom.txt"" but on windows the file name is ""target\foo\boom.txt"". So the method says the file does not exist. The test then thinks it has successfully deleted the file and does not throw the expected exception. 

Claus remarked:
Good use the FileUtil.normalizePath to ensure the path can be tested
using equals.
There are other unit tests that does this as well.","20/Aug/09 13:39;chris@die-schneider.net;I have digged into the next failure.
CachedOutputStreamTest.testCacheStreamToFileAndNotCloseStream

At the end of the test the temporary file is expected to be deleted. But honestly I do not understand how this could work.

The test first calls exchange.getUnitOfWork().done(exchange);. This will try to delete the file but the delete will fail as the stream is still open.
Then it calls ((InputStream)cache).close(); which will close the stream. The problem is that now the file will not be deleted again.

I have swapped the two commands and the test works but I think this is wrong as the test seems to explicitly test the fact that close is not called before done.
Can anyone clarify what this test tries to do?
Btw. I think this test works on unix as the delete on the file will also work when the file is opened. On windows this does not work. 
","20/Aug/09 13:39;chris@die-schneider.net;I have just debugged the last failure:

org.apache.camel.processor.ChoiceWithEndTest.testRouteIsCorrectAtRuntime

It checks for 4 nodes but only gets one.

The reason is that it checks the wrong route. When I change the line
       Navigate<Processor> nav = context.getRoutes().get(0).navigate();
to
       Navigate<Processor> nav = context.getRoutes().get(1).navigate();
then it works. So it seems the sequence of the routes is not the same for all systems. Perhaps it would be better to use another way of getting the route from the camel context. 
","24/Aug/09 12:23;njiang;@Christian
For the CachedOutputStreamTest.testCacheStreamToFileAndNotCloseStream, as you said, windows can't delete the file which is open, so I close the cached inputstream before calling the exchange  done method. 

I just tried run the org.apache.camel.processor.ChoiceWithEndTest.testRouteIsCorrectAtRuntime with JDK 1.5.0_13 on Windows Vista box, the test is OK.
So I added a method to search the route by looking up the endpoint's uri, please feel free to give it a try :)
",24/Aug/09 12:28;njiang;Committed revision :  807183,"24/Aug/09 18:51;chris@die-schneider.net;Camel-core now builds without failures or errors:
Tests	Errors 	Failures	Skipped	Success Rate	Time
1420	0	0	0	100%	1,286,584

Great work. Thanks
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BeanEndpoint fails in the presence of bridge methods,CAMEL-1922,12487131,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,adambrewster,adambrewster,20/Aug/09 00:38,03/Jun/10 07:23,14/Mar/19 02:42,23/Aug/09 03:16,1.6.1,,,,,,,,,,1.6.2,2.1.0,,camel-core,,,,0,"When a message is sent to a bean: endpoint, camel searches for a method with the right signature.  If multiple methods are found, an exception is thrown.

If a have an interface like

public interface <T> I {
  T function(T arg);
}

and a class like

public class C implements I<Number> {
  Number function(Number arg) {
    return new Double(arg.doubleValue() * 2);
  }
}

then I can't use an instance of C as an endpoint.

The problem is that under the hood java has created a bridge method, and the ""real"" class C looks like

public class C implements I<Number> {
  Number function(Number arg) {
    return new Double(arg.doubleValue() * 2);
  }

  Object function(Object arg) {
    return function((Number) arg);
  }
}

Camel then discovers that there are two methods it could call (f(Object) and f(Number)) and throws an exception even though there's no real ambiguity because both methods do the same thing.

I recommend rejecting bridge methods in BeanInfo.isValidMethod with somehting like

if (method.isBridgeMethod()) return false;

Does this sound reasonable?",Java SE 5,,72000,72000,,0%,72000,72000,,,,,,,,,22/Aug/09 01:27;adambrewster;0001-Reject-bridge-methods-while-introspecting-POJO-consu.patch;https://issues.apache.org/jira/secure/attachment/12462885/0001-Reject-bridge-methods-while-introspecting-POJO-consu.patch,22/Aug/09 20:46;adambrewster;0002-Unit-test.patch;https://issues.apache.org/jira/secure/attachment/12462921/0002-Unit-test.patch,,,,2.0,,,,,,,,,,,,,,,,,,,2009-08-20 03:43:26.882,,,no_permission,,,,,,,,,,,,,76694,,,Thu Jun 03 07:23:48 UTC 2010,,,,,,,0|i01lef:,7236,,,,,,,,,20/Aug/09 03:43;hadrian;Yes it does.  Would you like to submit a patch?  We highly appreciate contributions :),"20/Aug/09 04:21;davsclaus;Bean component have been improved quite a lot in 2.0 in relation to detecting method to use.

Try 2.0 first to verify whether or not any such issues exist there.",22/Aug/09 01:27;adambrewster;Here's my previous comment in patch form.,"22/Aug/09 02:43;hadrian;Thanks for the patch Adam.  A good idea is to also add a unit test that emphasizes the problem and the fix, but I will take care of it.","22/Aug/09 05:04;adambrewster;I wrote a unit test (the gist was FromBeanTest.java + the description field of this issue), but apparently I suck at maven because can't get  the test suite to run.

Even after I checked out a fresh copy of the project, it still didn't work.

Occasionally when `mvn test` decides not to complain that camel-core is missing (umm, didn't I just tell you to build that?) it takes ~ hours to finish (does it start a new JVM for every test?)  and finally complains about DataSet being broken.  I'm considering `rm -rf ~/.m2` but that seems pretty brutal.

I heard a rumor that with -Dtest=BridgeMethodTest, maven would only run my new test, but given that option it reverts to complaining about camel-core.

I'll try again at some point.","22/Aug/09 06:38;njiang;@ Adam,

You can use mvn clean install -Dtest=false to skip the test running and build the source.
Then you can use mvn test -Dtest=BridgeMethodTest to run your own test :)","22/Aug/09 14:49;hadrian;@Adam,

Please follow Willem's instructions.  A few comments:

 * mvn:test only *runs* the tests, it assumes the project is already built.  If not you get the error you mentioned (so no, you did not tell it to build that, just test). mvn:install builds *and* tests.  mvn:clean is sorta optional but needed sometimes when things get out of hands.  The command you want is probably `mvn test -Dtest=BridgeMethodTest`
 * DataSet: there is an issue with the test (wrong order of consumer creation may lead to loss of messages on faster boxes).  I fixed it in 2.0 but forgot to port it back to 1.x.  My bad, will take care of it.

Thanks for pointing this out.","22/Aug/09 20:46;adambrewster;Sorry for last night's rant.  Maybe I was just upset about the score of the game I was watching.

Here's what I've got for a unit test.  It's a bit more complicated than I expected.  I tried out simpler versions, but this was the only one that actually failed the unpatched code (error'ed it actually).

Maybe the awkwardness of the unit test required to catch this issue speaks to the setup I was using when I discovered the problem in the first place.

This (like the first patch I posted) is against tags/camel-1.6.1.  I'm still working on getting 2.0 to do something useful.

@Hadrian,
According to [the docs|http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html] {{mvn test}} ought to validate and compile (and do a dozen other things) before attempting to test.

bq.  if you call a build phase, it will execute not only that build phase, but also every build phase prior to the called build phase

@Willem,
also note

bq. # test - test the compiled source code using a suitable unit testing framework. These tests should not require the code be packaged or deployed",23/Aug/09 02:04;hadrian;Patch applied with thanks on the camel-1.x branch (r806919) and trunk (r806923),03/Jun/10 07:23;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DefaultPackageScanClassResolver not able to scan package in jar url,CAMEL-1917,12487148,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,wtam,wtam,wtam,17/Aug/09 03:38,03/Jun/10 07:23,14/Mar/19 02:42,23/Aug/09 23:11,2.0-M3,,,,,,,,,,2.1.0,,,camel-core,,,,0,"The DefaultPackageScanClassResolver seems to have problem finding packages from URL jar:file:/path/to/my.jar!/""",,,,,,,,,,,,,CAMEL-2530,,,,10/Mar/10 15:07;davsclaus;camel-1917.patch;https://issues.apache.org/jira/secure/attachment/12463186/camel-1917.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2009-08-17 04:26:52.467,,,no_permission,,,,,,,,,,,,,76695,,,Thu Jun 03 07:23:47 UTC 2010,,,,,,,0|i01ldb:,7231,,,,,,,,,17/Aug/09 04:23;wtam;Committed revision 804847.,"17/Aug/09 04:26;davsclaus;Willem please refrain from committing this to 2.0 so *late in the game*. 

We would rather have this fixed in 2.1 or later as the resource loading can be tricky on many different platform such as Oracle App Server, IBM WebSphere, JBoss and whatelse.
It would be a pity if something breaks in one of these containers because of this patch.

-1 = 2.0
+1 = 2.1 or later ","17/Aug/09 04:53;wtam;Back out and target it for 2.1
Committed revision 804861.
","23/Aug/09 23:11;wtam;Committed revision 807030.
","10/Mar/10 14:49;davsclaus;William this one broke BEA WebLogic support.

In what use case did you encounter this problem?
We eventually have to restore BEA WebLogic support, so I am curious what runtime you used to load resources like that jar?","10/Mar/10 14:57;davsclaus;Willem to me this patch seems really wrong.

Now you load all URL resources as HTTP if it *does not* start with {{file:}}.
This is very wrong IMHO.

As HTTP based resources should only be loaded if its {{http}} or {{https}}.
So I will have to revert that part of the patch which removed the {{http}} check.","10/Mar/10 15:07;davsclaus;William this patch works also with that unit test you added in camel-spring.

This should work with BEA WebLogic.
Does it also work with Sonic ESB?","10/Mar/10 15:48;wtam;Claus and I have chatted over IM and agreed to add '|| urlPath.startsWith(""sonicfs:"")' in the if statement in to support Sonic ESB.",03/Jun/10 07:23;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Error during release:prepare phase,CAMEL-1916,12487179,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Blocker,Fixed,hadrian,hadrian,hadrian,17/Aug/09 03:27,07/Feb/10 09:56,14/Mar/19 02:42,24/Aug/09 13:39,2.0.0,,,,,,,,,,2.0.0,,,tests,,,,0,"After a few more fixes for the 2.0 release I stumbled upon this. The release:prepare phase fails with the following error:

{code}
[INFO] [INFO] [ianal:verify-legal-files {execution: default}]
[INFO] [INFO] ------------------------------------------------------------------------
[INFO] [INFO] Building Apache Camel Test Bundles: mock-javamail-1.7
[INFO] [INFO]    task-segment: [clean, verify]
[INFO] [INFO] ------------------------------------------------------------------------
[INFO] [INFO] [clean:clean]
[INFO] [INFO] Deleting file set: /w1/apache/release/camel/tests/test-bundles/mock-javamail_1.7/target (included: [**], excluded: [])
[INFO] [INFO] [dependency:copy {execution: copy-legal}]
[INFO] [INFO] Configured Artifact: org.apache.servicemix.legal:legal:1.0:xml
[INFO] [INFO] Copying legal-1.0.xml to /w1/apache/release/camel/tests/test-bundles/mock-javamail_1.7/target/legal/legal.xml
[INFO] [INFO] [remote-resources:process {execution: default}]
[INFO] [INFO] [resources:resources]
[INFO] [INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] [INFO] Copying 6 resources
[INFO] [INFO] Copying 3 resources
[INFO] [INFO] [compiler:compile]
[INFO] [INFO] Compiling 3 source files to /w1/apache/release/camel/tests/test-bundles/mock-javamail_1.7/target/classes
[INFO] [INFO] [resources:testResources]
[INFO] [INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] [INFO] skip non existing resourceDirectory /w1/apache/release/camel/tests/test-bundles/mock-javamail_1.7/src/test/resources
[INFO] [INFO] Copying 3 resources
[INFO] [INFO] [compiler:testCompile]
[INFO] [INFO] No sources to compile
[INFO] [INFO] [surefire:test]
[INFO] [INFO] Tests are skipped.
[INFO] [INFO] [bundle:bundle]
[INFO] [INFO] Expanding: /w1/apache/release/camel/tests/test-bundles/mock-javamail_1.7/target/org.apache.camel.tests.mock-javamail_1.7-2.0.0.jar into /w1/apache/release/camel/tests/test-bundles/mock-javamail_1.7/target/classes
[INFO] [INFO] Preparing source:jar
[INFO] [WARNING] Removing: jar from forked lifecycle, to prevent recursive invocation.
[INFO] [INFO] No goals needed for project - skipping
[INFO] [INFO] [source:jar {execution: attach-sources}]
[INFO] [INFO] Building jar: /w1/apache/release/camel/tests/test-bundles/mock-javamail_1.7/target/org.apache.camel.tests.mock-javamail_1.7-2.0.0-sources.jar
[INFO] [INFO] [javadoc:jar {execution: attach-javadocs}]
[INFO] 1 error
[INFO] [INFO] ------------------------------------------------------------------------
[INFO] [ERROR] BUILD ERROR
[INFO] [INFO] ------------------------------------------------------------------------
[INFO] [INFO] MavenReportException: Error while creating archive:Exit code: 1 - javadoc: error - No public or protected classes found to document.
[INFO] 
[INFO] Command line was:/System/Library/Frameworks/JavaVM.framework/Versions/1.5.0/Home/bin/javadoc -J-Xmx500m @options @packages
[INFO] 
[INFO] [INFO] ------------------------------------------------------------------------
[INFO] [INFO] For more information, run Maven with the -e switch
[INFO] [INFO] ------------------------------------------------------------------------
[INFO] [INFO] Total time: 93 minutes 39 seconds
[INFO] [INFO] Finished at: Sun Aug 16 23:03:42 EDT 2009
[INFO] [INFO] Final Memory: 115M/206M
[INFO] [INFO] ------------------------------------------------------------------------
[INFO] ------------------------------------------------------------------------
[ERROR] BUILD ERROR
[INFO] ------------------------------------------------------------------------
[INFO] Maven execution failed, exit code: '1'

{code}",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-08-17 04:29:53.074,,,no_permission,,,,,,,,,,,,,76696,,,Mon Aug 17 04:29:53 UTC 2009,,,,,,,0|i01ld3:,7230,,,,,,,,,"17/Aug/09 03:28;hadrian;Adding the configuration below to disable the javadoc plugin did not help:

{code}
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                        <phase>none</phase>
                    </execution>
                </executions>
            </plugin>
{code}","17/Aug/09 04:29;davsclaus;I think its a test Willem added because of the many problems with geronimo mails and osgi etc.
So it could definitely be removed from the build phase or whatever. We can keep it for manual testing if needed.

It should not hold up a 2.0 release!

Or maybe adding a dummy class in src/main/java can help the javadoc task as a workaround.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Xmpp consumer stops consuming after some time,CAMEL-1914,12487149,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,slewis,slewis,15/Aug/09 13:34,03/Jun/10 07:23,14/Mar/19 02:42,25/Aug/09 14:02,2.0-M3,,,,,,,,,,2.1.0,,,camel-xmpp,,,,0,"Noticed after creating some more complicated routes that my xmpp consumers would stop receiving messages.  This patch sorts that out, I also improved some of the logging in the producer and consumer classes and tweaked the XmppRouteChatTest to work properly.",,,,,,,,,,,,,,,,,15/Aug/09 13:35;slewis;patch.txt;https://issues.apache.org/jira/secure/attachment/12462774/patch.txt,,,,,1.0,,,,,,,,,,,,,,,,,,,2009-08-25 14:02:31.894,,,no_permission,,,,,,,,,,,,,76697,,,Thu Jun 03 07:23:46 UTC 2010,,,Patch Available,,,,0|i01lcn:,7228,,,,,,,,,"25/Aug/09 14:02;njiang;Applied patch with thanks to Stan.
trunk
http://svn.apache.org/viewvc?rev=807636&view=rev",03/Jun/10 07:23;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jetty - Should support multipart/form posted data in the message body better,CAMEL-1913,12485597,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,davsclaus,davsclaus,15/Aug/09 10:22,24/Apr/11 10:00,14/Mar/19 02:42,18/Mar/10 13:49,2.0-M3,,,,,,,,,,2.3.0,,,camel-http,camel-jetty,,,0,"See CAMEL-1801

It does not work as expected as the posted data should be in the *body* and not as it does currently stored as a message header with the body as a key and with an empty value!

For instance sending a file using curl
{code}
curl -F data=@src/test/data/plain.txt http://localhost:9080/myapp/myservice
{code}

You want Camel to provide the file content in the body and the other as headers. But what you get in the body is
{code}
------------------------------30cc29f24df6
Content-Disposition: form-data; name=""data""; filename=""plain.txt""
Content-Type: text/plain

Hello World
This is the second line
------------------------------30cc29f24df6--
{code}

",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-09-10 10:37:35.567,,,no_permission,,,,,,,,,,,,,76698,,,Sun Apr 24 10:00:42 UTC 2011,,,,,,,0|i01lcf:,7227,,,,,,,,,15/Aug/09 15:14;davsclaus;Whether it should be stored in the body directly or as an attachment I really dont know.,"15/Aug/09 15:17;davsclaus;You could for instance upload multiple files in same POST so I wonder what is the correct solution with Camel

More details at
http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.1","10/Sep/09 10:37;iamryadh;While understanding that it should stay as it is, conforming to the spec, I still believe it should be in the body, the next endpoint could be a file, with an implicit converter which will pull the uploaded file from the request
in the case there are multiple attachments, the same implicit converter would be able to detect this fact, and produce the files.","17/Jan/10 14:19;muellerc;Any new ideas?

In my opinion, it's not possible to put the content of the file in the body, because the user could upload more than one file in one request. The sample from the spec is:

{code}
   Content-Type: multipart/form-data; boundary=AaB03x

   --AaB03x
   Content-Disposition: form-data; name=""submit-name""

   Larry
   --AaB03x
   Content-Disposition: form-data; name=""files""
   Content-Type: multipart/mixed; boundary=BbC04y

   --BbC04y
   Content-Disposition: file; filename=""file1.txt""
   Content-Type: text/plain

   ... contents of file1.txt ...
   --BbC04y
   Content-Disposition: file; filename=""file2.gif""
   Content-Type: image/gif
   Content-Transfer-Encoding: binary

   ...contents of file2.gif...
   --BbC04y--
   --AaB03x--

{code}

When I try to map all of these information to the message exchange, I came to the following result:
The submitted form-data could be mapped into the header. We could create an attachment for each uploaded file. The file name is mapped to the name of the attachment. The content type is set as the content type of the attachment (which is an instance of DataHandler). This would be result in the following sample code:

{code}
        Message in = exchange.getIn();
        in.setHeader(""submit-name"", ""Larry"");
        in.addAttachment(""file1.txt"", new DataHandler(new TextDataSource(""file1.txt"", ""text/plain"", file1Content)));
        in.addAttachment(""file2.txt"", new DataHandler(new ImageDataSource(""file2.txt"", ""image/gif"", file2Content)));
{code}

I don't know, if Camel already uses/implements some javax.activation.DataSource classes we should use...
What do you think?

Regards,
Christian","19/Jan/10 06:35;davsclaus;The Message API already supports attachments.
See addAttachment, getAttachments etc.","19/Jan/10 08:32;muellerc;@Claus,
I know this. My last post was my proposal how we could map the uploaded files into the message. I think the body is not the right place (or my knowledge about the Camel TypeConverter system is to bad). :-)

Regards,
Christian","18/Mar/10 13:49;njiang;By leveraging the Jetty's MultiPartFilter, it's easy to implements this feature.
I also updated the wiki page for this feature.",24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DefaultCamelContext.removeEndpoints() fails due to ConcurrentModificationException,CAMEL-1912,12487146,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,erh,erh,14/Aug/09 20:18,03/Jun/10 07:23,14/Mar/19 02:42,29/Sep/09 08:36,1.5.0,1.6.0,1.6.1,1.6.2,2.0.0,2.0-M1,2.0-M2,2.0-M3,,,2.1.0,,,camel-core,,,,0,"The removeEndpoints() method iterates over the endpoints map, and attempts to remove entries inside of the iterator loop.  This causes near immediate ConcurrentModificationException's.",,,,,,,,,,,,,,,,,14/Aug/09 20:19;erh;DefaultCamelContext.java.diff;https://issues.apache.org/jira/secure/attachment/12462757/DefaultCamelContext.java.diff,,,,,1.0,,,,,,,,,,,,,,,,,,,2009-08-15 06:30:44.368,,,no_permission,,,,,,,,,,,,,76699,,,Thu Jun 03 07:23:46 UTC 2010,,,Patch Available,,,,0|i01lc7:,7226,,,,,,,,,14/Aug/09 20:19;erh;This is a patch against the current version of /trunk/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java (r800180) that should fix the problem,"15/Aug/09 06:30;davsclaus;Thanks for contributing. Will get it in the next release after 2.0 as 2.0 is currently being build.

I would suggest to use a Collections.unmodifiedList wrapper instead of copying to new array in the first 1-2 methods.

And the code in the remove could use generics instead of the type cast and it should comply with the checkstyle

See *building with checkstyle*
http://camel.apache.org/building.html",29/Sep/09 08:36;davsclaus;trunk: 819860,03/Jun/10 07:23;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix the sourcecheck profile,CAMEL-1904,12486377,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,12/Aug/09 08:52,07/Feb/10 09:56,14/Mar/19 02:42,12/Aug/09 12:59,,,,,,,,,,,1.6.2,2.0.0,,,,,,0,"Here is the mail thread which discusses about it.
 http://www.nabble.com/Re%3A-svn-commit%3A-r803395----camel-trunk-components-camel-bindy-src-main-java-org-apache-camel-dataformat-bindy-BindyAbstractFactory.java-td24931435.html",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76701,,,Wed Aug 12 12:59:47 UTC 2009,,,,,,,0|i01laf:,7218,,,,,,,,,"12/Aug/09 12:59;njiang;trunk
http://svn.apache.org/viewvc?rev=803417&view=rev

camel 1.x branch
http://svn.apache.org/viewvc?rev=803423&view=rev",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cannot generate the PDF manual,CAMEL-1898,12487290,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,hadrian,hadrian,10/Aug/09 23:04,24/Apr/11 10:00,14/Mar/19 02:42,20/May/10 03:28,2.0.0,,,,,,,,,,2.3.0,,,tooling,,,,0,"While building the camel-manual we get the log below:

{code}
[INFO] About to execute PrinceXml (see www.princexml.com)
[INFO]  prince /w1/apache/camel/trunk/tooling/camel-manual/target/site/manual/camel-manual-2.0-SNAPSHOT.html /w1/apache/camel/trunk/tooling/camel-manual/target/site/manual/camel-manual-2.0-SNAPSHOT.pdf
[INFO] [prince] prince: /w1/apache/camel/trunk/tooling/camel-manual/target/site/manual/camel-manual-2.0-SNAPSHOT.html:36888: error: Unexpected end tag : div
[INFO] [prince] prince: /w1/apache/camel/trunk/tooling/camel-manual/target/site/manual/camel-manual-2.0-SNAPSHOT.html:36890: error: Unexpected end tag : div
[INFO] [prince] prince: /w1/apache/camel/trunk/tooling/camel-manual/target/site/manual/camel-manual-2.0-SNAPSHOT.html:36903: error: Unexpected end tag : body
[INFO] [prince] prince: warning: bad argument
[INFO] [prince] prince: warning: bad argument
[INFO] [prince] prince: warning: bad argument
[INFO] [prince] prince: warning: no glyphs for character U+006E, fallback to '?'
[INFO] [prince] Uncaught Mercury exception:
[INFO] [prince] Software Error: no fallback glyph for character U+006E
[ERROR] PDF Conversion failed due to return code: 1
{code}

The first errors are because of the html being improperly generated by the maven-html-to-pdf.  The ""prince: warning: bad argument"" interestingly seem to be generated by prince having to create its own font, which it cannot do, for cases where the requested font is not available, like for instance a <b> bold tag with a Courier font.

We know that the pdf was not generated in the 2.0-M3 release either.  The cause of this errors popping up appears to be the wiki changes at apache. The fact that the book-in-one-page is that big does not help either.  I quickly tried with the deployed version at http://camel.apache.org/book-in-one-page.html and I get a very similar result unfortunately, so there's no quick fix or workaround it seems.

I will try to resolve this asap.  Any help/ideas I could get are highly appreciated.
",,,,,,,,,,,,,,,,,11/Aug/09 01:42;njiang;Picture 1.png;https://issues.apache.org/jira/secure/attachment/12462702/Picture+1.png,,,,,1.0,,,,,,,,,,,,,,,,,,,2009-08-11 01:39:45.009,,,no_permission,,,,,,,,,,,,,76702,,,Sun Apr 24 10:00:40 UTC 2011,,,,,,,0|i01l93:,7212,,,,,,,,,"11/Aug/09 01:39;njiang;@ hadrian

I tried it on my mac box with latest beta version of prince 7.0b1, I didn't get the error of the bad argument.
And the pdf file was generated.

{code}
[INFO] [prince] prince: /Users/jiangning/Work/camel/trunk/tooling/camel-manual/target/site/manual/camel-manual-2.0-SNAPSHOT.html:36959: error: Unexpected end tag : div
[INFO] [prince] prince: /Users/jiangning/Work/camel/trunk/tooling/camel-manual/target/site/manual/camel-manual-2.0-SNAPSHOT.html:36961: error: Unexpected end tag : div
[INFO] [prince] prince: /Users/jiangning/Work/camel/trunk/tooling/camel-manual/target/site/manual/camel-manual-2.0-SNAPSHOT.html:36974: error: Unexpected end tag : body
[INFO] [prince] prince: http://www.enterpriseintegrationpatterns.com/img/ChannelIcon.gif: warning: Unknown image MIME type: text/html
[INFO] Stored: /Users/jiangning/Work/camel/trunk/tooling/camel-manual/target/site/manual/camel-manual-2.0-SNAPSHOT.pdf
{code}

But the pdf have some formate issue of the code sections,  please see the screen captured file that I attached with this JIRA.
","11/Aug/09 04:18;hadrian;Yes Willem, it works much better with prince 7.0b1.

One issue is the following div generated by Confluence near the end of every page:
{code}
</div>
    <br clear=""none"" class=""clear"">
</div>
{code}

Another (bigger) issue is the css for the code.  I'll try to get that fixed tomorrow.","12/Aug/09 05:41;davsclaus;Hadrian can we get a RC out without the manual. We should really get one out sooner the better to give people a chance to test it throughly.

The manual can always bee fixed later, generated and uploaded to the apache web site.
We should not hold a release because of this _minor_ issue.

And we do anticipate that we need another RC build before its final then the manual could have been fixed in the meantime.
","14/Aug/09 04:06;davsclaus;@Hadrian

If that psg:sign issue is still around I suggest to revert back the changes in the pom xml files to as there where for the M3 release so we can get 2.0 out.

And its also very important that releases can be build on Max OS X as that is what all/most of all committers use.
And it should be possible for them /us/other than you to do releases as well.

We need a bit quicker pace on release cycles for Camel. For instance a 1.6.2 should also be out in the near future.

","15/Aug/09 07:30;davsclaus;@Hadrian

Can you give an ETA when a RC can be released? You said that you thought the pgp:sign issue was resolved?
We cant keep postponing a release, a lot of other Apache releases depend on Camel 2.0 being GA.
","18/Aug/09 01:19;hadrian;The pdf manual is now generated, but there is an issue with the CSS that depends more on the wiki than the code.","15/Apr/10 09:14;davsclaus;After the Apache attack the confluence wiki now appears to return the book in one page, but now there is an issue with the maven html2pdf plugin reporting about a missing div tag.",15/Apr/10 09:14;davsclaus;Hadrian can you try it out? What is the maven goal btw to generate the manual?,"15/Apr/10 13:43;hadrian;I think there is a trickier issue related to some headers, I suspect ContentLength. It sometimes happens with wget as well. I'll need to find some time to look into this, hopefully this weekend.","16/Apr/10 04:46;njiang;When I used wget http://cwiki.apache.org/confluence/display/CAMEL/Book+In+One+Page to get the page, 
the request was redirect to https://cwiki.apache.org/confluence/display/CAMEL/Book+In+One+Page.
So I changed the html2pdf plugin's url, then the plugin can get the page rightly.

After checking the generated PDF, all the content in the 'code' section are gone :(.
I don't know if it relates to the CSS, maybe some  CSS expert can help us.","16/Apr/10 06:11;davsclaus;@Willem

Ah yeah of course. I bet I didn't notice the http redirect when using a browser :) Good catch.",29/Apr/10 11:57;davsclaus;I think the manual can be downloaded now. So we should be able to generate the manual.,24/Apr/11 10:00;davsclaus;Closing all resolved tickets from 2010 or older,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Stream Caching is enabled by default when using CamelContextFactoryBean,CAMEL-1885,12487164,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,jriemsch,jriemsch,07/Aug/09 07:59,07/Feb/10 09:56,14/Mar/19 02:42,07/Aug/09 13:00,2.0-M3,,,,,,,,,,2.0.0,,,camel-spring,,,,0,"According to the documentation Stream Caching should be disabled by default in Camel 2.0. The default is overriden when using CamelContextFactoryBean because of this line:

    private Boolean streamCache = Boolean.TRUE;

Unit test showing the problem:

public class DefaultStreamCachingTest {
     @Test
     public void test() throws Exception {
         ApplicationContext appContext = new ClassPathXmlApplicationContext(new String[] {""context.xml""});
         DefaultCamelContext camelContext = (DefaultCamelContext) appContext.getBean(""camelContext"");
         assertFalse(camelContext.isStreamCacheEnabled());
     }
}

context.xml:

<beans xmlns=""http://www.springframework.org/schema/beans"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:camel=""http://camel.apache.org/schema/spring"" xsi:schemaLocation=""http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd"">
    <camel:camelContext id=""camelContext"" />
</beans>

Currently one must use:

    <camel:camelContext id=""camelContext"" streamCache=""false"" />
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-08-07 13:00:24.771,,,no_permission,,,,,,,,,,,,,76704,,,Fri Aug 07 13:00:24 UTC 2009,,,,,,,0|i01l67:,7199,,,,,,,,,"07/Aug/09 13:00;njiang;Applied patch with thanks to Jens.
http://svn.apache.org/viewvc?rev=801982&view=rev",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
EXCEPTION_CAUGHT header should be set to exception caught,CAMEL-1883,12486339,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,romkal,romkal,romkal,06/Aug/09 10:41,07/Feb/10 09:56,14/Mar/19 02:42,06/Aug/09 12:09,2.0-M3,,,,,,,,,,2.0.0,,,camel-core,,,,0,Currently whatever exception is caught in doCatch there is a EXCEPTION_CAUGHT header set to the exception that was set on the exchange itself. As doCatch() traverses causes of exception it might happen that something else is caught and something else is in EXCEPTION_CAUGHT header.,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76705,,,Thu Aug 06 12:09:41 UTC 2009,,,,,,,0|i01l5r:,7197,,,,,,,,,06/Aug/09 12:09;romkal;Fixed in r801596,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Aggregator fails permanently if exception thrown from aggregation strategy,CAMEL-1882,12485698,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,romkal,romkal,romkal,06/Aug/09 08:26,07/Feb/10 09:56,14/Mar/19 02:42,06/Aug/09 09:11,2.0-M3,,,,,,,,,,2.0.0,,,camel-core,,,,0,"{{BatchSender}} thread in {{BatchProcessor}} doesn't expect any error thrown from {{Collection.add()}} method, so when it is thrown the whole thread dies and is never recovered. In Aggregator, where aggregation strategy exists such exceptions can be easily thrown from {{Collection.add()}} and can render Aggregator unusable.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76706,,,Thu Aug 06 12:29:07 UTC 2009,,,,,,,0|i01l5j:,7196,,,,,,,,,"06/Aug/09 09:11;romkal;Fix in r801545

The fix could be improved as errors are not handled using standard error handlers, but some error handler attached to BatchProcessor. I did it to fix the problem quickly. Moreover there is error handler already used in BatchProcessor, while I believe it should be removed at all and use standard error handler.",06/Aug/09 12:29;romkal;The problem also exists if exception is thrown from correlation expression - not only from aggregation strategy. The fix that is commited already also handles this scenario.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bean component - invokes onMessage from javax.jms.MessageListener even though a specific method name have been provided,CAMEL-1878,12486282,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,05/Aug/09 07:37,07/Feb/10 09:56,14/Mar/19 02:42,05/Aug/09 12:50,1.6.1,2.0-M3,,,,,,,,,1.6.2,2.0.0,,camel-core,,,,0,"This is only an issue when your bean implements javax.jms.MessageListener and then specify a specific method to use, then Camel will still prefer to use the onMessage method.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76707,,,Sat Oct 03 07:41:52 UTC 2009,,,,,,,0|i01l4n:,7192,,,,,,,,,"05/Aug/09 07:38;davsclaus;See nabble
http://www.nabble.com/bean-binding-with-inheritance---2.0-M3-camel-http-td24802648.html",05/Aug/09 08:31;davsclaus;Its the {{ActiveMQMessageConverter}} that has a onMessage converter ,05/Aug/09 12:50;davsclaus;trunk: 801196.,03/Oct/09 07:41;davsclaus;backported to 1.x: 821262.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"template , consumerTemplate, service, proxy can't be set with right camel context if there are more than one camel context in the spring application context",CAMEL-1873,12486086,12484897,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,03/Aug/09 12:52,07/Feb/10 09:56,14/Mar/19 02:42,03/Aug/09 14:17,1.4.0,1.5.0,1.6.0,1.6.1,2.0-M1,2.0-M2,2.0-M3,,,,1.6.2,2.0.0,,camel-spring,,,,0,"
Current camel support to define a producer template OUTSIDE a camel context, I think it works well just like the autowire function which is provided in Spring.

If there more than two Camel context in the Spring Application context , the user should specify the camel context which the template should use.

But I have a concern that even we put the template INSIDE the camel context, the template will not be set with a right version of camel context, since we use a CamelPostProcessor to inject CamelContext.

So I did a quick test on the current Camel code and found there is a bug  if there are more one CamelContext -- CamelPostProcessor will inject the last create camel context into the CamelContextAware object. 

Since it is not easy to add the camelContext referece id into the template element attribute, we'd better just support to parser these elements inside the camel context.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-08-03 17:07:45.209,,,no_permission,,,,,,,,,,,,,76708,,,Tue Aug 04 02:38:43 UTC 2009,,,,,,,0|i01l3j:,7187,,,,,,,,,03/Aug/09 12:54;njiang;We should remove the feature of CAMEL-1870 to avoid the ambiguity of the camel contexts.,"03/Aug/09 14:17;njiang;camel-trunk
http://svn.apache.org/viewvc?rev=800340&view=rev
http://svn.apache.org/viewvc?rev=800340&view=rev
camel-1.x branch
http://svn.apache.org/viewvc?rev=800394&view=rev","03/Aug/09 17:07;davsclaus;I think its a bit of a *hack* to use reflection to invoke a getter for CamelContext to test whether it has already been set.

I would prefer in Camel 2.0 to add a {{getCamelContext}} method to the CamelContextAware interface to avoid the reflection hack.

And the best would be that we had a bit better control on the bean post processor and which camel context it belongs to.","04/Aug/09 02:38;njiang;Yes,  it's a *hack* way, if we change the CamelContextAware interface, it will effect the user's bean which implement's CamelContextAware interface.
As we working on the camel 2.0, it's a good change to add getCamelContext method in the CamelContextAware.

Current CamelPostProcessor can see all the beans in the application context, it is hard to tell if the CamelPostProcessor's camel context is belong to the bean.
so I add the checking in the the CamelPostProcessor to skip the camel context injection if the bean already have the camel context to avoid the injection of a  wrong camel context.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
current the consumer template does't not work if define it out side of the camel context,CAMEL-1870,12484896,12486086,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,03/Aug/09 03:06,07/Feb/10 09:56,14/Mar/19 02:42,03/Aug/09 03:58,2.0-M1,2.0-M2,2.0-M3,,,,,,,,2.0.0,,,camel-spring,,,,0,"Here is the mail thread which discuss about it[1]
[1] http://www.nabble.com/Cannot-Autowire-consumerTemplate-for-client-test-td24781739.html",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76709,,,Mon Aug 03 03:58:49 UTC 2009,,,,,,,0|i01l2v:,7184,,,,,,,,,"03/Aug/09 03:58;njiang;trunk
http://svn.apache.org/viewvc?rev=800190&view=rev",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JmsKeyFormatStrategy not used consistently and JmsMessage.getHeader() not returning correct value,CAMEL-1867,12486586,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,msjwhite,msjwhite,30/Jul/09 15:11,05/Aug/09 16:39,14/Mar/19 02:42,05/Aug/09 11:30,2.0-M3,,,,,,,,,,2.0.0,,,camel-jms,,,,0,"On entry to a route from a JMS endpoint configured with PassthroughJmsKeyFormatStrategy the headers with underscores (_) are passed through correctly.

However, when any header value in the message is then changed, the original headers are added back into the message using the DefaultJmsKeyFormatStrategy.  For example, sending a JMS message with headers;

HEADER_1=VALUE_1
HEADER_2=VALUE_1

we do see just these two headers in the message received into the route.

However, if we then set a header value in the route, say HEADER_1=VALUE_2, we now see the headers;

HEADER.1=VALUE_1
HEADER.2=VALUE_1
HEADER_1=VALUE_2
HEADER_2=VALUE_1

For some reason in the set header process the original message headers and values get added into the message after being passed through the DefaultJmsKeyFormatStrategy.  This has the implication of unnecessary duplication of the headers.

Also, when a message header is accessed using the getHeader(key) method it also goes through the DefaultJmsKeyFormatStrategy to decode the key that is passed.  

In the example above, if after we have updated 'HEADER_1' to 'VALUE_2', we do;

message.getHeader(""HEADER_1"") this goes through the DefaultJmsKeyFormatStrategy and actually gets executed as message.getHeader(""HEADER.1"") which returns VALUE_1 (wrong!).

Note: if instead we lookup the header through message.getHeaders() which returns the all headers in a Map, we can correctly access the 'HEADER_1' key.  (Why is getHeader(key) even going through the KeyFormatStrategy anyway if setHeader() isn't?)",2.0-M3,,,,,,,,,,,,,,,,30/Jul/09 17:36;msjwhite;JmsPassThroughtJmsKeyFormatStrategyTest.java;https://issues.apache.org/jira/secure/attachment/12462756/JmsPassThroughtJmsKeyFormatStrategyTest.java,30/Jul/09 15:25;msjwhite;MessageTester.java;https://issues.apache.org/jira/secure/attachment/12462770/MessageTester.java,30/Jul/09 15:25;msjwhite;log.out;https://issues.apache.org/jira/secure/attachment/12462772/log.out,,,3.0,,,,,,,,,,,,,,,,,,,2009-07-30 15:42:50.601,,,no_permission,,,,,,,,,,,,,76710,,,Wed Aug 05 16:39:36 UTC 2009,,,,,,,0|i01l27:,7181,,,,,,,,,"30/Jul/09 15:17;msjwhite;Here is the Spring bean configuration we use to test;

	<bean id=""ConnectionFactory"" class=""org.apache.activemq.pool.PooledConnectionFactory"" destroy-method=""stop"">
		<property name=""connectionFactory"">
			<bean class=""org.apache.activemq.ActiveMQConnectionFactory"">
				<property name=""brokerURL"" value=""failover:tcp://localhost:61616""/>
			</bean>
		</property>
	</bean>

	<bean id=""PassThroughHeader"" class=""org.apache.camel.component.jms.PassThroughJmsKeyFormatStrategy""/>

	<bean id=""jmsConfig"" class=""org.apache.camel.component.jms.JmsConfiguration"">
		<property name=""connectionFactory"" ref=""ConnectionFactory""/>
		<property name=""jmsKeyFormatStrategy"" ref=""PassThroughHeader""/>
		<property name=""explicitQosEnabled"" value=""true""/>
		<property name=""deliveryPersistent"" value=""false""/>
		<property name=""concurrentConsumers"" value=""1""/>
	</bean>

	<bean id=""jms"" class=""org.apache.camel.component.jms.JmsComponent"">
		<property name=""configuration"" ref=""jmsConfig""/>
	</bean>","30/Jul/09 15:20;msjwhite;Here is the Camel route we use to test;

	<bean id=""MessageTester"" class=""route.test.camel.bean.MessageTester""/>

	<camelContext id=""myroute"" trace=""true"" xmlns=""http://camel.apache.org/schema/spring"">

		<route>
			<from uri=""jms:IN_QUEUE""/>
			<bean ref=""MessageTester"" method=""prettyPrintHeaders""/>
			<setHeader headerName=""HEADER_1""><constant>VALUE_2</constant></setHeader>
			<bean ref=""MessageTester"" method=""prettyPrintHeaders""/>
			<bean ref=""MessageTester"" method=""setHeader""/>
			<bean ref=""MessageTester"" method=""prettyPrintHeaders""/>
			<to uri=""log:route.log""/>
		</route>

	</camelContext>
","30/Jul/09 15:25;msjwhite;And attached;

1. the bean to print out headers from map and through getHeader()

2. the log output ",30/Jul/09 15:42;davsclaus;How do you send a message to the jms:IN_QUEUE ?,30/Jul/09 15:59;davsclaus;Added unit test to trunk where it works nicely: 799342.,"30/Jul/09 16:33;msjwhite;We use a Spring test to wrap the route we're testing with other routes to generate input and trap output; 'direct:' input and 'mock:' outputs.  So we go through;

So, say the route we're testing

<route>
<from uri=""jms:IN_QUEUE""/>
...
<to uri=""jms:OUT_QUEUE""/>
</route>

and so the Spring test creates;

from(""direct:RouteTestProducer"").to(""jms:IN_QUEUE"");
from(""jms:OUT_QUEUE"").to(""mock:OutConsumer"");
from(""jms:ERROR"").to(""mock:ErrorConsumer"")

We then ProducerTemplate.send() to send an Exchange created from DefaultExchange.

I'll look at the UnitTest and see if I can't reproduce through that somehow.","30/Jul/09 17:36;msjwhite;I tried running the tests against M3 and indeed the 'HEADER.1' key is added to the message in M3 but not in trunk, so that appears to be an improvement.  But there is still a problem on the getHeader() in trunk.

The unit test doesn't do enough to show - instead of testing the new header value, I changed it to test the change of the input header value, this then causes the error where getHeader(key) is returning a different value from getHeaders().get(key) and so test fails - code is attached.  I also added some output of the headers in my copy and you can see difference in the two values:

--Start Message Headers (from getHeaders().get(key)) --
HEADER_1=VALUE_2
--End Message Headers--
--Start Message Headers (from getHeader(key)) --
HEADER_1=VALUE_1
--End Message Headers--
","31/Jul/09 14:04;msjwhite;In JmsMessage the getHeader() always looks for the original message property and doesn't use message header map unless the header doesn't exist in the original;

public Object getHeader(String name) {
...
            answer = jmsMessage.getObjectProperty(name);
...

This dates back to the original implementation, but at that time the setHeader() also used jmsMessage.setObjectProperty(), so it probably made sense then.

Why does the JmsMessage getHeader() still use the jmsMessage.getObjectProperty() to return the original value rather than the message value (which can be modified)?

","03/Aug/09 09:28;davsclaus;getHeader(String name) should also consider jms key format strategy so it can do lookup based on key decoded

So you can lookup with {{Content-Type}} and where the key has been decoded to {{Content_HYPHEN_Type}}. That should be tested without the passthrough ket strategy but the default one.","03/Aug/09 11:11;davsclaus;Created CAMEL-1871 to let Camel not mess with header keys using underscore, so it can preserve HEADER_1 out of the box.",04/Aug/09 07:54;davsclaus;trunk: 800694.,"04/Aug/09 07:56;davsclaus;Mark can you test on your side by using latest code from SVN?

I have just commit a fix to make:
- working with the headers consistent
- you do not need to use the pass through strategy to be able to send HEADER_1 headers anymore. Camel handles that by default as well now (CAMEL-1871)","05/Aug/09 16:39;msjwhite;Confirmed fixed in 2.0 trunk.

Thanks!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE thrown when DEBUG logging on,CAMEL-1865,12485877,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,msjwhite,msjwhite,30/Jul/09 11:40,30/Jul/09 17:44,14/Mar/19 02:42,30/Jul/09 15:32,2.0-M3,,,,,,,,,,2.0.0,,,camel-core,,,,0,"Stack trace;

org.apache.camel.language.bean.RuntimeBeanExpressionException: Failed to invoke method: doSplit on MySplitter due to: java.lang.NullPointerException
        at org.apache.camel.language.bean.BeanExpression.evaluate(BeanExpression.java:82)
        at org.apache.camel.language.bean.BeanExpression.evaluate(BeanExpression.java:87)
        at org.apache.camel.processor.Splitter.createProcessorExchangePairs(Splitter.java:72)
...
Caused by: java.lang.NullPointerException
        at org.apache.camel.util.MessageHelper.extractBodyForLogging(MessageHelper.java:129)
        at org.apache.camel.impl.DefaultMessage.toString(DefaultMessage.java:38)
        at java.lang.String.valueOf(String.java:2827)
        at java.lang.StringBuilder.append(StringBuilder.java:115)
        at java.util.AbstractCollection.toString(AbstractCollection.java:422)
        at java.lang.String.valueOf(String.java:2827)
        at java.lang.StringBuilder.append(StringBuilder.java:115)
        at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:139)

Steps to reproduce;

1. Create simple route with splitter pattern; e.g.

<route>
	<from uri=""jms:IN_QUEUE""/>
	<split><method bean=""MySplitter"" method=""doSplit""/>
		<to uri=""log:route.log""/>
	</split>
</route>

2. Set DEBUG logging on for org.apache.camel classes, e.g.

log4j.logger.org.apache.camel=DEBUG

3. Fire message into route - message fails with NPE inside Camel
",2.0-M3,,,,,,,,,,,,,,,,30/Jul/09 12:44;msjwhite;MySplitter.java;https://issues.apache.org/jira/secure/attachment/12462725/MySplitter.java,,,,,1.0,,,,,,,,,,,,,,,,,,,2009-07-30 12:31:29.718,,,no_permission,,,,,,,,,,,,,76711,,,Thu Jul 30 17:44:58 UTC 2009,,,,,,,0|i01l1r:,7179,,,,,,,,,"30/Jul/09 12:31;davsclaus;Can you show the splitter code, eg MySplitter.doSplit ","30/Jul/09 12:44;msjwhite;Sure, attached.

Splitter makes a copy of the original (in.copy()) and adds a body and header, then returns message in the list.

If it instead is changed to just return the original message in the list, it doesn't throw NPE.

Thanks
","30/Jul/09 12:50;davsclaus;Hi

Okay so my feeling was correct that you return a org.apache.camel.Message object.

I am in the middle of another bigger work so I will get a fix in a bit later.
",30/Jul/09 15:32;davsclaus;trunk: 799332.,"30/Jul/09 17:44;msjwhite;Confirmed fixed in 2.0 trunk

Thanks!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
interceptSendToEndpoint does not trigger endpoints defined in onException,CAMEL-1864,12485620,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,30/Jul/09 07:03,07/Feb/10 09:56,14/Mar/19 02:42,30/Jul/09 08:51,2.0-M3,,,,,,,,,,2.0.0,,,camel-core,,,,0,The reason is that onException is initialized before interceptors,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76712,,,Fri Jul 31 06:05:02 UTC 2009,,,,,,,0|i01l1j:,7178,,,,,,,,,"30/Jul/09 08:51;davsclaus;trunk: 799205.

","30/Jul/09 08:53;davsclaus;At current time only implemented for when using SendProcessor that is the most common to use, eg as its the {{.to}}.
There may be some other processors that needs to be tweaked to let it work as well.

However the route builder logic inside Camel should be reworked in the future to better accommodate such interceptors messing with the endpoints.",31/Jul/09 06:05;davsclaus;trunk: 799523.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-cxf bundle doesn't specify any Import-Package version,CAMEL-1862,12486535,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,alitokmen,alitokmen,29/Jul/09 10:01,25/Sep/09 13:25,14/Mar/19 02:42,30/Jul/09 13:10,2.0-M3,,,,,,,,,,1.6.2,2.0.0,,camel-cxf,,,,0,"The camel-cxf component is currently generated against CXF version 2.2.2.

As a result, the camel-cxf module as well as the camel-cxf bundle require CXF 2.2. More importantly, that bundle does not work correctly with CXF 2.0 (note that this is an expected behavior, CXF has had API changes with its 2.2 version).

Now, the trouble is that the camel-cxf JAR's MANIFEST has an Import-Package on org.apache.cxf.* components without specifying any version! As a result, when it looks for CXF and both CXF 2.0 and 2.2 are present on the platform, it sometimes chooses the wrong one.

To solve this issue, version specifiers should be added to the Import-Package declarations of the camel-cxf bundle. I guess an import on version 2.2 would be enough (we don't need to specify 2.2.2 explicitely).

Cheers

S. Ali Tokmen
http://ali.tokmen.com/","CAMEL, CXF, OSGi Felix",,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-07-30 13:10:01.709,,,no_permission,,,,,,,,,,,,,76713,,,Fri Sep 25 13:25:25 UTC 2009,,,,,,,0|i01l13:,7176,,,,,,,,,"30/Jul/09 12:55;alitokmen;Hello

Looks like http://svn.apache.org/viewvc/camel/trunk/components/camel-cxf/pom.xml?view=diff&r1=799251&r2=799252&pathrev=799252 fixes this :)

Cheers

S. Ali Tokmen
http://ali.tokmen.com/","30/Jul/09 13:10;njiang;trunk
http://svn.apache.org/viewvc?rev=799252&view=rev
camel-1.x branch
http://svn.apache.org/viewvc?rev=799253&view=rev","30/Jul/09 13:11;njiang;@ S. Ali Tokmen
Please feel free to give it a try ;)","30/Jul/09 13:28;davsclaus;Hmm what happens if CXF v2.3 is released, or does the 2.2 3.0 means 2.2-3.0 ?","30/Jul/09 13:51;alitokmen;Hello

I've applied the patch on the CAMEL-CXF 2.0-M3 tag, and retried launching the platform with various versions of CXF. The behavior is as follows:

 - When only CXF 2.2.2 is present, all my tests pass (i.e., no regression)
 - When only CXF 2.0.11 is present, the bundle does not resolve but (as expected) says things like: Unresolved constraint in bundle 132: package; (&(package=org.apache.cxf.headers)(version>=2.2.0)(!(version>=3.0.0)))
 - When both CXF 2.0.11 and 2.2.2 are present, the bundle does resolve and when started seems to take the good version

This bug can therefore be marked ""closed, fixed"".

Cheers

S. Ali Tokmen
http://ali.tokmen.com/","30/Jul/09 13:58;alitokmen;@Claus

Hello

[2.2,3.0.0) means ""everything that's superior to 2.2, including 2.2 and 2.2.0; but inferior to 3.0.0, therefore excluding 3.0.0 itself"".

This means 2.2.0, 2.2.2, 2.3.0 ... 2.999.9999 are valid. 1.x, 2.0.x, 2.1.x and 3.x are not.

Cheers

S. Ali Tokmen
http://ali.tokmen.com/","30/Jul/09 14:39;davsclaus;@Savas

Thanks for the explanation.","25/Sep/09 13:20;alitokmen;This actually solves half of the issue, by guaranteeing that Camel-CXF won't start if CXF 2.0 or 2.1 is here.

The trouble with CXF is that it registers itself to Spring without specifying its version. As a result, in the case some CXF 2.0 applications are started for real (i.e. registered to Spring), Camel-CXF (with CXF 2.2) will not start with an exception that looks like:

{quote}
    WSDLManagerImpl.registerInitialExtensions : Failed to add extension element.
    java.lang.ClassNotFoundException: org.xmlsoap.schemas.wsdl.http.AddressType
           at org.apache.felix.framework.searchpolicy.ModuleImpl.findClassOrResourceByDelegation(ModuleImpl.java:627)
           at org.apache.felix.framework.searchpolicy.ModuleImpl.access$100(ModuleImpl.java:61)
           at org.apache.felix.framework.searchpolicy.ModuleImpl$ModuleClassLoader.loadClass(ModuleImpl.java:1469)
           at java.lang.ClassLoader.loadClass(ClassLoader.java:251)
           at org.apache.cxf.common.classloader.ClassLoaderUtils.loadClass2(ClassLoaderUtils.java:236)
           at org.apache.cxf.common.classloader.ClassLoaderUtils.loadClass(ClassLoaderUtils.java:222)
           at org.apache.cxf.wsdl.JAXBExtensionHelper.addExtensions(JAXBExtensionHelper.java:85)
           at org.apache.cxf.wsdl11.WSDLManagerImpl.registerInitialExtensions(WSDLManagerImpl.java:239)
           at org.apache.cxf.wsdl11.WSDLManagerImpl.registerInitialExtensions(WSDLManagerImpl.java:219)
           at org.apache.cxf.wsdl11.WSDLManagerImpl.<init>(WSDLManagerImpl.java:109)
           at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
           at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39)
           at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27)
           at java.lang.reflect.Constructor.newInstance(Constructor.java:494)
           at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:100)
           at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:61)
           at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateBean(AbstractAutowireCapableBeanFactory.java:877)
           at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:839)
           at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:440)
           at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:409)

           at java.security.AccessController.doPrivileged(Native Method)
           at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:380)
           at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:264)
           at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
           at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:261)
           at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185)
           at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164)
           at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:429)
           at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:728)
           at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:380)
           at org.apache.cxf.bus.spring.BusApplicationContext.<init>(BusApplicationContext.java:91)
           at org.apache.cxf.bus.spring.SpringBusFactory.createApplicationContext(SpringBusFactory.java:102)
           at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:93)
           at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:86)
           at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:64)
           at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:53)
           at org.ow2.jonas.camel.cxf.servlet.OsgiHttpServiceCXFServlet.loadBus(OsgiHttpServiceCXFServlet.java:75)
           at org.apache.cxf.transport.servlet.AbstractCXFServlet.init(AbstractCXFServlet.java:79)
           at org.ow2.jonas.web.httpServiceTomcat6.HttpServiceImpl.registerServlet(HttpServiceImpl.java:231)
           at org.ow2.jonas.camel.cxf.servlet.OsgiCXFServletDeployer.__start(OsgiCXFServletDeployer.java:74)
           at org.ow2.jonas.camel.cxf.servlet.OsgiCXFServletDeployer.start(OsgiCXFServletDeployer.java)
           at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
           at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
           at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
           at java.lang.reflect.Method.invoke(Method.java:585)
           at org.apache.felix.ipojo.util.Callback.call(Callback.java:235)
           at org.apache.felix.ipojo.util.Callback.call(Callback.java:191)
           at org.apache.felix.ipojo.handlers.lifecycle.callback.LifecycleCallback.call(LifecycleCallback.java:86)
           at org.apache.felix.ipojo.handlers.lifecycle.callback.LifecycleCallbackHandler.__stateChanged(LifecycleCallbackHandler.java:162)
           at org.apache.felix.ipojo.handlers.lifecycle.callback.LifecycleCallbackHandler.stateChanged(LifecycleCallbackHandler.java)
           at org.apache.felix.ipojo.InstanceManager.setState(InstanceManager.java:428)
           at org.apache.felix.ipojo.InstanceManager.start(InstanceManager.java:309)
           at org.apache.felix.ipojo.ComponentFactory.createInstance(ComponentFactory.java:155)
           at org.apache.felix.ipojo.IPojoFactory.createComponentInstance(IPojoFactory.java:283)
           at org.apache.felix.ipojo.IPojoFactory.createComponentInstance(IPojoFactory.java:220)
           at org.apache.felix.ipojo.InstanceCreator$ManagedInstance.create(InstanceCreator.java:349)
           at org.apache.felix.ipojo.InstanceCreator.addInstance(InstanceCreator.java:84)
           at org.apache.felix.ipojo.Extender.parse(Extender.java:269)
           at org.apache.felix.ipojo.Extender.startManagementFor(Extender.java:208)
           at org.apache.felix.ipojo.Extender.access$600(Extender.java:52)
           at org.apache.felix.ipojo.Extender$CreatorThread.run(Extender.java:669)
           at java.lang.Thread.run(Thread.java:595)
{quote}

As a result, my previous comment:

bq. When both CXF 2.0.11 and 2.2.2 are present, the bundle does resolve and when started seems to take the good version

May or may not be valid depending on what has been done with which CXF version and the order in which these actions have been done

Long story short: don't try to have two CXF bundles on the same OSGi platform...",25/Sep/09 13:25;alitokmen;Closing issue,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The broker example doesn't work in camel 2.0 M3,CAMEL-1852,12484807,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,24/Jul/09 14:28,07/Feb/10 09:56,14/Mar/19 02:42,29/Jul/09 09:53,2.0-M3,,,,,,,,,,2.0.0,,,examples,,,,0,There some NPE when you run the example of loan broker which is caused by the change of CAMEL-1722.,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76714,,,Wed Jul 29 09:53:32 UTC 2009,,,,,,,0|i01kyv:,7166,,,,,,,,,"29/Jul/09 09:53;njiang;trunk
http://svn.apache.org/viewvc?rev=797494&view=rev",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Route JMX attributes not being updated,CAMEL-1851,12485093,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,msjwhite,msjwhite,24/Jul/09 08:20,27/Jul/09 16:17,14/Mar/19 02:42,26/Jul/09 13:25,2.0-M2,2.0-M3,,,,,,,,,2.0.0,,,camel-core,,,,0,"Some routes are not getting instrumented using JMX and we get the following WARN for those on startup;

InstrumentationLifecycleStrategy: Route has not been instrumented for endpoint: ...

It turns out that its only those routes that have an onException handler as the first processor in the route, e.g.

<route id=""per-msg-route"" errorHandlerRef=""RouteErrorHandler"">
  <from uri=""jms:MSG_IN""/>
  <onException>
    <exception>can.retry.Exception</exception>
    <redeliveryPolicy ref=""UnlimitedRedeliveryPolicyConfig""/>
    <handled><constant>true</constant></handled>
  </onException>
  <bean ref=""Formatter"" method=""formatInput""/>
...8<... 

More info and proposed fix at http://www.nabble.com/Routes-JMX-attributes-not-updated-in-2.0-M2-td24631265.html#a24639433
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-07-26 13:25:58.681,,,no_permission,,,,,,,,,,,,,76715,,,Mon Jul 27 16:17:26 UTC 2009,,,,,,,0|i01kyn:,7165,,,,,,,,,"26/Jul/09 13:25;davsclaus;trunk: 797926.

Mark you can test by trying latest SNAPSHOT or get the source and build a new .jar yourself","27/Jul/09 16:17;msjwhite;Confirmed fixed in 2.0-SNAPSHOT

Thanks!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CachedOutputStream not cleaning up tmp files when using file based caching,CAMEL-1849,12487155,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,dave_stanley,dave_stanley,23/Jul/09 18:26,07/Feb/10 09:56,14/Mar/19 02:42,26/Jul/09 12:34,1.6.1,,,,,,,,,,1.6.2,2.0.0,,camel-core,camel-http,,,0,"A recent feature of Camel's CachedOutputStream is to serialize any messages over 64k to disk. In some cases the *tmp message files are not being cleaned up. 
",Camel 1.x branch. 2.0 branch also appears to have the same problem,,,,,,,,,,,,,,,,23/Jul/09 18:28;dave_stanley;camel_1.x_patch.txt;https://issues.apache.org/jira/secure/attachment/12463035/camel_1.x_patch.txt,,,,,1.0,,,,,,,,,,,,,,,,,,,2009-07-23 18:41:10.969,,,no_permission,,,,,,,,,,,,,76716,,,Mon Jul 27 01:55:43 UTC 2009,,,Patch Available,,,,0|i01ky7:,7163,,,,,,,,,"23/Jul/09 18:28;dave_stanley;Patch and testcase attached. 

Two changes were required, on in HttpProducer.java and the other in CachedOutputStream itself. ","23/Jul/09 18:41;hadrian;@Dave, awesome!

Is this fix required in 2.0 as well?","23/Jul/09 18:45;janstey;Yeah, thanks Dave!

Hadrian, don't forget to add in a check for null in HttpProducer as well ala

{code}
+                if (is != null) { 
+                    is.close();
+                }
{code}

HttpProducerSelectMethodTest fails without this mod.","24/Jul/09 01:05;njiang;Here is a thing, if you close the input stream of the HttpProducer, you will not get a readable InputStream from the message body of the exchange which will be processed after the HttpProducer.

Please remember to call the close of the InputStream , If you want to make sure the temp file to be deleted.","24/Jul/09 06:16;davsclaus;Yes it should be patched in 2.0 as well.

I wonder if the closing the input stream should be in a finally block to ensure its always closed?","24/Jul/09 06:18;davsclaus;PS: This stream cache is really becoming a pain, we got to many issues with it!

I do think we should add an option to the CamelContext properties to let people turn it on/off and it should be off by default.","24/Jul/09 14:47;njiang;@Claus,

But we don't know if there is another processor or endpoint after the HttpProducer, so we can't close the InputStream in the HttpProducer.

","24/Jul/09 16:09;dave_stanley;@Willem,

If the stream is not closed in HttpProducer, wondering where is the right place to close the stream? I definitely think it should be automatically cleaned up. 

(I would be happy to try and tweak the patch if you can provide some suggestion on how it can be improved upon)
","24/Jul/09 20:45;dave_stanley;Given this stream is only created to hold the body of of http exception's, another option might be to change the HttpOperationFailedException implementation to use a string for the body rather than an InputStream. 

This way the stream can be safely closed in HttpProducer. 

In terms of the exception body itself, if its a large exception body the entire body could be logged and then [optionally] truncated in the Exception object itself if needed?
 

","26/Jul/09 07:03;davsclaus;Dave, yeah a good idea to store the content as a String instead to detach it from the underlying stream.

As it only occurs when an exception is to be thrown then the overhead is negligible.

Maybe the stream should be closed as part of the exchange unit of work terminating?
We do that for instance with other components where they do house cleaning.

And removing temporary work files would make sense to do in this part as well. And I do believe the code could use an overhaul as well since its a bit _tricky_ in places.
For instance generating the temporary filename should just use the exchange id as its unique and a much better name than a generated number. 

I would take a 2nd look and ping back ideas","26/Jul/09 07:27;davsclaus;*Some observations*

1. 
CachedOutputStream is build as if its holds multiple streams (i.e. it has a streamList) but its only used in Camel as wrapping a single stream.

2.
It got an output locked option that is newer used, i.e. could be removed to reduce complexity

3.
it lacks try .. finally to ensure proper house cleaning when working with streams

4.
It silently ignore the output dir if provided with one and it cannot create the directory.
It should really throw an exception to indicate the temp output folder cannot be used

5. Some methods is newer used and should be removed to reduce complexity
- resetOut
- lockOutputStream
- getBytes
- writeCacheTo (can be removed as its only used for toString that should just omit printing the stream content)
- getOut
- getTempFile
- getInputStream

6. Duplicate code
The write methods has duplicate code that should be avoided and instead invoke a single method that does the actual writing

7. Using java.io.File instead of NIO
The NIO library have features to support paging memory to disk. But yeah its a bit complex to work with the NIO but it is faster and it can leverage the OS memory paging to be faster. 

",26/Jul/09 10:53;davsclaus;I am working on patching this for Camel 2.0 and cleaning up the code in CachedOutputStream,26/Jul/09 11:30;davsclaus;trunk: 797907.,"26/Jul/09 11:36;davsclaus;1.x: 797911.

unit test demonstrating the issue to help resolve the issue on 1.x branch",26/Jul/09 11:59;davsclaus;Setting the threshold to -1 or 0 should disable file based cache all together,"26/Jul/09 12:12;davsclaus;1.x: 797918.

A fix so the tmp files is also deleted in case of an http exception. And the http exception uses a copy of the stream so its detached.","26/Jul/09 12:22;davsclaus;1.x: 797920.

You can now disable disk based cache by setting a threshold of 0 or negative

Updated wiki as well:
http://cwiki.apache.org/confluence/display/CAMEL/Stream+caching","26/Jul/09 12:34;davsclaus;trunk: 797923.

To disable the file based cache",27/Jul/09 01:55;dave_stanley;Thanks Claus! Really like the exchange.addOnCompletion(). Didn't know you could do that.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MockEndPoint yields nullpointer due to mixed up typeconversion,CAMEL-1848,12487152,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,streek@avisi.nl,streek@avisi.nl,23/Jul/09 13:33,07/Feb/10 09:56,14/Mar/19 02:42,23/Jul/09 14:40,2.0-M2,,,,,,,,,,2.0.0,,,,,,,0,"MockEndpoint yields a failed unit test with very confusing message:

        resultEndpointHub.expectedHeaderReceived(""portalId"", 30);

Yields: ... expected <null> but got ...

Of course the expected value of null must never happen if a value is put in there",,,14400,14400,,0%,14400,14400,,,,,,,,,23/Jul/09 13:55;cgveld;ExpectedHeaderReceivedTest.java;https://issues.apache.org/jira/secure/attachment/12463032/ExpectedHeaderReceivedTest.java,23/Jul/09 13:40;streek@avisi.nl;FixedMockEndPoint.java;https://issues.apache.org/jira/secure/attachment/12463034/FixedMockEndPoint.java,,,,2.0,,,,,,,,,,,,,,,,,,,2009-07-23 13:55:06.925,,,no_permission,,,,,,,,,,,,,76717,,,Thu Jul 23 14:40:17 UTC 2009,,,Patch Available,,,,0|i01kxz:,7162,,,,,,,,,"23/Jul/09 13:33;streek@avisi.nl;The header is set by the following code:

            .setHeader(PortalConstants.PORTAL_ID, new XPathExpression(""/portal/id""))
","23/Jul/09 13:40;streek@avisi.nl;The FixedMockEndPoint is a fix/patch. It has some extra code in it, because the values we needed from MockEndPoint are private. 

I would strongly suggest to look at the naming of the variables (both arguments and local variables) used in the method expectedHeaderReceived. They were very confusing. I have now been very explicit in the naming, even a bit overdone, but it clears the fog.","23/Jul/09 13:55;cgveld;A JUnit testclass with two test scenario's.
One with the original MockEndpoint giving an error and one with a patch.","23/Jul/09 14:40;janstey;Fixed this issue here http://svn.apache.org/viewvc?rev=797087&view=rev

Let me know if it suits your need.

Cheers,
Jon",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wrong xbean-spring and ativemq versions in pom generated by camel-archetype-activemq,CAMEL-1847,12486500,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,janstey,sdelplanque,sdelplanque,23/Jul/09 08:42,23/Jul/09 12:10,14/Mar/19 02:42,23/Jul/09 11:39,2.0-M2,,,,,,,,,,2.0.0,,,tooling,,,,0,"When generating a new project from Maven archetype org.apache.camel.archetypes:camel-archetype-activemq, the generated pom contains bad references to xbean-spring and activemq artifacts versions, hence throwing compilation errors.

Generated pom :

<properties>
  <camel-version>2.0-M2</camel-version>
  <activemq-version>2.0-M2</activemq-version>
  <xbean-spring-version>2.0-M2</xbean-spring-version>
  <log4j-version>1.2.14</log4j-version>
</properties>

Errors :

Missing:
----------
1) org.apache.activemq:activemq-core:jar:2.0-M2
...
2) org.apache.activemq:activemq-camel:jar:2.0-M2
...
3) org.apache.xbean:xbean-spring:jar:2.0-M2",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-07-23 11:38:50.464,,,no_permission,,,,,,,,,,,,,76718,,,Thu Jul 23 11:38:50 UTC 2009,,,Patch Available,,,,0|i01kxr:,7161,,,,,,,,,"23/Jul/09 11:38;janstey;I fixed this soon after the 2.0-M2 release. So when 2.0 is out, it will be fine. See http://svn.apache.org/viewvc?view=rev&revision=785250

Thanks for reporting this though :)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The camel-cxf-example can't run rightly with ActiveMQ 5.3.0.x-fuse,CAMEL-1845,12486465,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,22/Jul/09 09:14,03/Nov/10 05:10,14/Mar/19 02:42,29/Jul/09 09:49,1.6.1,,,,,,,,,,1.6.2,,,camel-cxf,,,,0,"Here is the stack trace

java.lang.IllegalArgumentException: argument type mismatch
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at org.apache.cxf.databinding.AbstractWrapperHelper.createWrapperObject(AbstractWrapperHelper.java:99)
	at org.apache.cxf.jaxws.interceptors.WrapperClassOutInterceptor.handleMessage(WrapperClassOutInterceptor.java:103)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:469)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:308)
	at org.apache.camel.component.cxf.CxfProducer.invokeClient(CxfProducer.java:277)
	at org.apache.camel.component.cxf.CxfProducer.process(CxfProducer.java:186)
	at org.apache.camel.component.cxf.CxfProducer.process(CxfProducer.java:156)
	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:84)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:52)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:41)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:66)
	at org.apache.camel.component.cxf.CamelInvoker.invoke(CamelInvoker.java:185)
	at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:57)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:417)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:269)
	at java.util.concurrent.FutureTask.run(FutureTask.java:123)
	at org.apache.cxf.workqueue.SynchronousExecutor.execute(SynchronousExecutor.java:37)
	at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:95)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
	at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:89)
	at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.serviceRequest(JettyHTTPDestination.java:302)
	at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.doService(JettyHTTPDestination.java:265)
	at org.apache.cxf.transport.http_jetty.JettyHTTPHandler.handle(JettyHTTPHandler.java:70)
	at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:766)
	at org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:230)
	at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)
	at org.mortbay.jetty.Server.handle(Server.java:324)
	at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:534)
	at org.mortbay.jetty.HttpConnection$RequestHandler.content(HttpConnection.java:879)
	at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:741)
	at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:213)
	at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:403)
	at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:409)
	at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:522)
org.apache.cxf.interceptor.Fault
	at org.apache.cxf.databinding.AbstractWrapperHelper.createWrapperObject(AbstractWrapperHelper.java:107)
	at org.apache.cxf.jaxws.interceptors.WrapperClassOutInterceptor.handleMessage(WrapperClassOutInterceptor.java:103)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:469)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:308)
	at org.apache.camel.component.cxf.CxfProducer.invokeClient(CxfProducer.java:277)
	at org.apache.camel.component.cxf.CxfProducer.process(CxfProducer.java:186)
	at org.apache.camel.component.cxf.CxfProducer.process(CxfProducer.java:156)
	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:84)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:52)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:41)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:66)
	at org.apache.camel.component.cxf.CamelInvoker.invoke(CamelInvoker.java:185)
	at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:57)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:417)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:269)
	at java.util.concurrent.FutureTask.run(FutureTask.java:123)
	at org.apache.cxf.workqueue.SynchronousExecutor.execute(SynchronousExecutor.java:37)
	at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:95)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
	at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:89)
	at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.serviceRequest(JettyHTTPDestination.java:302)
	at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.doService(JettyHTTPDestination.java:265)
	at org.apache.cxf.transport.http_jetty.JettyHTTPHandler.handle(JettyHTTPHandler.java:70)
	at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:766)
	at org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:230)
	at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)
	at org.mortbay.jetty.Server.handle(Server.java:324)
	at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:534)
	at org.mortbay.jetty.HttpConnection$RequestHandler.content(HttpConnection.java:879)
	at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:741)
	at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:213)
	at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:403)
	at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:409)
	at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:522)
Jul 19, 2009 11:08:56 PM org.apache.cxf.phase.PhaseInterceptorChain doIntercept
INFO: Interceptor has thrown exception, unwinding now
org.apache.cxf.interceptor.Fault
	at org.apache.cxf.jaxws.interceptors.WrapperClassOutInterceptor.handleMessage(WrapperClassOutInterceptor.java:118)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:469)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:308)
	at org.apache.camel.component.cxf.CxfProducer.invokeClient(CxfProducer.java:277)
	at org.apache.camel.component.cxf.CxfProducer.process(CxfProducer.java:186)
	at org.apache.camel.component.cxf.CxfProducer.process(CxfProducer.java:156)
	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:84)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:52)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:41)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:66)
	at org.apache.camel.component.cxf.CamelInvoker.invoke(CamelInvoker.java:185)
	at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:57)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:417)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:269)
	at java.util.concurrent.FutureTask.run(FutureTask.java:123)
	at org.apache.cxf.workqueue.SynchronousExecutor.execute(SynchronousExecutor.java:37)
	at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:95)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
	at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:89)
	at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.serviceRequest(JettyHTTPDestination.java:302)
	at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.doService(JettyHTTPDestination.java:265)
	at org.apache.cxf.transport.http_jetty.JettyHTTPHandler.handle(JettyHTTPHandler.java:70)
	at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:766)
	at org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:230)
	at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)
	at org.mortbay.jetty.Server.handle(Server.java:324)
	at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:534)
	at org.mortbay.jetty.HttpConnection$RequestHandler.content(HttpConnection.java:879)
	at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:741)
	at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:213)
	at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:403)
	at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:409)
	at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:522)
Caused by: org.apache.cxf.interceptor.Fault
	at org.apache.cxf.databinding.AbstractWrapperHelper.createWrapperObject(AbstractWrapperHelper.java:107)
	at org.apache.cxf.jaxws.interceptors.WrapperClassOutInterceptor.handleMessage(WrapperClassOutInterceptor.java:103)
	... 36 more
Jul 19, 2009 11:08:56 PM org.apache.cxf.phase.PhaseInterceptorChain doIntercept
INFO: Interceptor has thrown exception, unwinding now
org.apache.cxf.interceptor.Fault
	at org.apache.camel.component.cxf.CamelInvoker.invoke(CamelInvoker.java:200)
	at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:57)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:417)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:269)
	at java.util.concurrent.FutureTask.run(FutureTask.java:123)
	at org.apache.cxf.workqueue.SynchronousExecutor.execute(SynchronousExecutor.java:37)
	at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:95)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
	at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:89)
	at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.serviceRequest(JettyHTTPDestination.java:302)
	at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.doService(JettyHTTPDestination.java:265)
	at org.apache.cxf.transport.http_jetty.JettyHTTPHandler.handle(JettyHTTPHandler.java:70)
	at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:766)
	at org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:230)
	at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)
	at org.mortbay.jetty.Server.handle(Server.java:324)
	at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:534)
	at org.mortbay.jetty.HttpConnection$RequestHandler.content(HttpConnection.java:879)
	at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:741)
	at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:213)
	at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:403)
	at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:409)
	at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:522)
Caused by: org.apache.cxf.interceptor.Fault
	at org.apache.cxf.jaxws.interceptors.WrapperClassOutInterceptor.handleMessage(WrapperClassOutInterceptor.java:118)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:469)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:308)
	at org.apache.camel.component.cxf.CxfProducer.invokeClient(CxfProducer.java:277)
	at org.apache.camel.component.cxf.CxfProducer.process(CxfProducer.java:186)
	at org.apache.camel.component.cxf.CxfProducer.process(CxfProducer.java:156)
	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:84)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:52)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:41)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:66)
	at org.apache.camel.component.cxf.CamelInvoker.invoke(CamelInvoker.java:185)
	... 22 more
Caused by: org.apache.cxf.interceptor.Fault
	at org.apache.cxf.databinding.AbstractWrapperHelper.createWrapperObject(AbstractWrapperHelper.java:107)
	at org.apache.cxf.jaxws.interceptors.WrapperClassOutInterceptor.handleMessage(WrapperClassOutInterceptor.java:103)
	... 36 more
javax.xml.ws.soap.SOAPFaultException: Fault occurred while processing.
	at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:145)
	at $Proxy87.greetMe(Unknown Source)
	at org.apache.camel.example.cxf.Client.invoke(Client.java:65)
	at org.apache.camel.example.cxf.CamelCxfExample.main(CamelCxfExample.java:82)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at org.codehaus.mojo.exec.ExecJavaMojo$1.run(ExecJavaMojo.java:283)
	at java.lang.Thread.run(Thread.java:595)
Caused by: org.apache.cxf.binding.soap.SoapFault: Fault occurred while processing.
	at org.apache.cxf.binding.soap.interceptor.Soap11FaultInInterceptor.unmarshalFault(Soap11FaultInInterceptor.java:75)
	at org.apache.cxf.binding.soap.interceptor.Soap11FaultInInterceptor.handleMessage(Soap11FaultInInterceptor.java:46)
	at org.apache.cxf.binding.soap.interceptor.Soap11FaultInInterceptor.handleMessage(Soap11FaultInInterceptor.java:35)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
	at org.apache.cxf.interceptor.AbstractFaultChainInitiatorObserver.onMessage(AbstractFaultChainInitiatorObserver.java:96)
	at org.apache.cxf.binding.soap.interceptor.CheckFaultInterceptor.handleMessage(CheckFaultInterceptor.java:69)
	at org.apache.cxf.binding.soap.interceptor.CheckFaultInterceptor.handleMessage(CheckFaultInterceptor.java:34)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
	at org.apache.cxf.endpoint.ClientImpl.onMessage(ClientImpl.java:641)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleResponseInternal(HTTPConduit.java:2114)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleResponse(HTTPConduit.java:1993)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.close(HTTPConduit.java:1918)
	at org.apache.cxf.transport.AbstractConduit.close(AbstractConduit.java:66)
	at org.apache.cxf.transport.http.HTTPConduit.close(HTTPConduit.java:614)
	at org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor.handleMessage(MessageSenderInterceptor.java:62)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:469)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:299)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:251)
	at org.apache.cxf.frontend.ClientProxy.invokeSync(ClientProxy.java:73)
	at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:124)
	... 9 more",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76720,,,Wed Jul 29 09:49:05 UTC 2009,,,,,,,0|i01kxb:,7159,,,,,,,,,"29/Jul/09 09:49;njiang;camel 1.x branch
http://svn.apache.org/viewvc?rev=796639&view=rev",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Files size after simply route from file to file is smaller then the original size.,CAMEL-1844,12487151,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,rafal.janik,rafal.janik,21/Jul/09 14:43,07/Feb/10 09:56,14/Mar/19 02:42,24/Jul/09 07:03,2.0-M2,,,,,,,,,,2.0.0,,,camel-core,,,,0,"I've got very simply camel route:

CamelContext context = new DefaultCamelContext();
context.addRoutes(new RouteBuilder() {
  public void configure() {
    from(""file://"" + INBOX_DIR + ""?noop=false"").to(""file://"" + OUTBOX_DIR);
  }
});
context.start();

All this route does, is to copy a file from INBOX_DIR to OUTBOX_DIR.

And everything goes fine for smaller files, but when I put something bigger into INBOX_DIR (on my machine problem starts with files bigger than ~100MB) things go wrong.
The file in OUTBOX_DIR has different size than the original one. In general it is smaller than the original (its size varies - can be 3/4 of the original, can be 1/2 etc).
With Camel 1.6.1 with noop set to ""true"" the file in OUTBOX was bigger than the original one (even 1,5-2 times larger !). With Camel 2.0-M2 setting noop to true or false didn't matter - the file in OUTBOX was smaller than the original one.

It is possible to avoid this bug, by setting delay but this is no good. To handle large files, I'd have to set a very high value which would slow down the whole application.

I've tried all possible configurations noop=true/false, readLock, readLockTimeout but without success.

Tested on both Apache Camel 1.6.1 and 2.0-M2 with similar results.


My environment:
Java: 1.6.0.14
OS: Linux, Kubuntu 9.04


Attached you will find a Maven project which exposes the bug.
Unpack it, run
mvn assembly:assembly
next run
run.sh
and copy big file to inbox dir and observe resulting file in outbox dir.

To kill the application hit CTRL+C ","Java: 1.6.0.14
OS: Linux, Kubuntu 9.04
Intel Core Duo (2x2,5GHz), 4GB ram ",,,,,,,,,,,,,,,,23/Jul/09 15:36;davsclaus;camel-core-2.0-SNAPSHOT.jar;https://issues.apache.org/jira/secure/attachment/12463033/camel-core-2.0-SNAPSHOT.jar,21/Jul/09 14:45;rafal.janik;camelTest.tar.gz;https://issues.apache.org/jira/secure/attachment/12463029/camelTest.tar.gz,,,,2.0,,,,,,,,,,,,,,,,,,,2009-07-23 12:27:46.439,,,no_permission,,,,,,,,,,,,,76721,,,Fri Jul 24 07:03:37 UTC 2009,,,,,,,0|i01kx3:,7158,,,,,,,,,"21/Jul/09 14:45;rafal.janik;Maven project which exposes the bug.
Unpack it, run
mvn assembly:assembly
next run
run.sh
and copy big file to inbox dir and observe resulting file in outbox dir.

To kill the application hit CTRL+C ","23/Jul/09 12:27;davsclaus;See answer posted on user forum
http://www.nabble.com/Large-files-processing-td24568287.html",23/Jul/09 12:29;davsclaus;Could you try with adding option {{readLock=rename}} to the Camel file consumer.,"23/Jul/09 15:18;davsclaus;Damn the Java IO File API sucks big time.

All its fancy locking does not detect if you use a regular {{cp}} to copy a big file that its in progress.

I am adding a new strategy: {{changed}} that you can use that will detect whether the file size/modified timestamp have changed.
However it requires that it uses at least 1 sec to detect whether the file is currently being copied or not.

{code}
                from(""file:target/changed/in?readLock=changed"").to(""file:target/changed/out"", ""mock:result"");
{code}

",23/Jul/09 15:35;davsclaus;tunnk: 797105.,23/Jul/09 15:36;davsclaus;.jar with the new changed option,"23/Jul/09 15:36;davsclaus;Rafal I have attached a camel-core .jar with this new feature. You can test in your environment by adding this to the URI

{code}
readLock=changed
{code}

That will use the new strategy and it should avoid copying the file while its being in progress.",23/Jul/09 15:46;davsclaus;Update wiki pages as well,24/Jul/09 07:03;rafal.janik;Thank You very much.  Now it works fine :),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fixed the camel-mail and camel-cxf features issue,CAMEL-1840,12485234,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,20/Jul/09 12:08,07/Feb/10 09:56,14/Mar/19 02:42,29/Jul/09 09:51,1.6.1,2.0-M1,2.0-M2,,,,,,,,1.6.2,2.0.0,,,,,,0,Current camel-cxf and camel-mail features can't load the camel-cxf and camel-mail and their dependents third part bundle rightly.,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76722,,,Wed Jul 29 09:51:26 UTC 2009,,,,,,,0|i01kw7:,7154,,,,,,,,,"29/Jul/09 09:51;njiang;trunk
http://svn.apache.org/viewvc?rev=795790&view=rev

camel-1.x branch
http://svn.apache.org/viewvc?rev=796135&view=rev",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"camel-web can't process the endpoint with ""://"" schema, like /endpoints/mock://results",CAMEL-1839,12486690,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,xueqiang.mi,xueqiang.mi,19/Jul/09 03:22,21/Nov/09 11:59,14/Mar/19 02:42,19/Jul/09 03:34,2.0-M2,,,,,,,,,,2.0-M3,,,camel-web,,,,0,"After improving the endpoint URI schema on http://issues.apache.org/activemq/browse/CAMEL-1756, camel-web's endpoint request URL is changed from http://localhost:8080/endpoints/mock:results into http://localhost:8080/endpoints/mock://results while ""//"" is a separator for URL, so camel-web will use only the ""mock:"" to get the expected endpoint, which will throw an exception:
org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: mock: due to: Expected scheme-specific part at index 5: mock:
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:367)
	at org.apache.camel.web.resources.EndpointsResource.getEndpoint(EndpointsResource.java:75)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at com.sun.jersey.server.impl.uri.rules.SubLocatorRule.invokeSubLocator(SubLocatorRule.java:135)
	at com.sun.jersey.server.impl.uri.rules.SubLocatorRule.accept(SubLocatorRule.java:89)
	at com.sun.jersey.server.impl.uri.rules.RightHandPathRule.accept(RightHandPathRule.java:111)
	at com.sun.jersey.server.impl.uri.rules.SubLocatorRule.accept(SubLocatorRule.java:105)
	at com.sun.jersey.server.impl.uri.rules.RightHandPathRule.accept(RightHandPathRule.java:111)
	at com.sun.jersey.server.impl.uri.rules.ResourceClassRule.accept(ResourceClassRule.java:71)
	at com.sun.jersey.server.impl.uri.rules.RightHandPathRule.accept(RightHandPathRule.java:111)
	at com.sun.jersey.server.impl.uri.rules.RootResourceClassesRule.accept(RootResourceClassesRule.java:63)
	at com.sun.jersey.server.impl.application.WebApplicationImpl._handleRequest(WebApplicationImpl.java:654)
	at com.sun.jersey.server.impl.application.WebApplicationImpl.handleRequest(WebApplicationImpl.java:612)
	at com.sun.jersey.server.impl.application.WebApplicationImpl.handleRequest(WebApplicationImpl.java:603)
	at com.sun.jersey.spi.container.servlet.WebComponent.service(WebComponent.java:309)
	at com.sun.jersey.spi.container.servlet.ServletContainer.service(ServletContainer.java:425)
	at com.sun.jersey.spi.container.servlet.ServletContainer.doFilter(ServletContainer.java:737)
	at com.sun.jersey.spi.container.servlet.ServletContainer.doFilter(ServletContainer.java:689)
	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1148)
	at com.opensymphony.module.sitemesh.filter.PageFilter.parsePage(PageFilter.java:119)
	at com.opensymphony.module.sitemesh.filter.PageFilter.doFilter(PageFilter.java:55)
	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1148)
	at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:387)
	at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216)
	at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181)
	at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765)
	at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:417)
	at org.mortbay.jetty.handler.HandlerCollection.handle(HandlerCollection.java:114)
	at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)
	at org.mortbay.jetty.Server.handle(Server.java:324)
	at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:535)
	at org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:865)
	at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:539)
	at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:212)
	at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404)
	at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:409)
	at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:520)
Caused by: java.net.URISyntaxException: Expected scheme-specific part at index 5: mock:
	at java.net.URI$Parser.fail(URI.java:2816)
	at java.net.URI$Parser.failExpecting(URI.java:2822)
	at java.net.URI$Parser.parse(URI.java:3025)
	at java.net.URI.<init>(URI.java:578)
	at org.apache.camel.util.URISupport.normalizeUri(URISupport.java:354)
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:365)
	... 39 more",,,,,,,,,,,,,,,,,19/Jul/09 03:33;xueqiang.mi;camel-1839.patch;https://issues.apache.org/jira/secure/attachment/12463030/camel-1839.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2009-07-19 06:47:57.43,,,no_permission,,,,,,,,,,,,,76723,,,Sat Nov 21 11:59:12 UTC 2009,,,Patch Available,,,,0|i01kvz:,7153,,,,,,,,,"19/Jul/09 03:38;xueqiang.mi;Only let the endpointLink to generate an old endpoint URI without ""//"" to render the URL for requesting a endpoint now.","19/Jul/09 06:47;davsclaus;trunk: 795483.

","19/Jul/09 06:50;davsclaus;Xueqiang you might want to try with an endpoint URI that is a bit more _nasty_ such as a file endpoint that can contain ${ } placeholders. To see if it can be renedered correctly, I added a TODO in the source code where you may need to use the safe encoder for that.

For instance try with this and see how it renders in the web console
{code}
from(""direct:start"").to(""file://foo?fileName=${header.bar}.txt"");
{code}",19/Jul/09 06:51;davsclaus;I also upgraded to latest Jersey release 1.1.1-ea. ,21/Nov/09 11:59;davsclaus;Closing all 2.0M3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-ftp - Recover from lost connection issue,CAMEL-1838,12485820,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,17/Jul/09 05:10,15/Apr/15 09:51,14/Mar/19 02:42,18/Jul/09 05:56,2.0-M2,,,,,,,,,,2.0-M3,,,camel-ftp,,,,0,"See nabble
http://www.nabble.com/FTP-Component-Network-Failure-Recovery-Problem-td24517828.html",,,,,,,,,,,,CAMEL-8639,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76724,,,Sat Nov 21 11:59:12 UTC 2009,,,,,,,0|i01kvr:,7152,,,,,,,,,17/Jul/09 05:50;davsclaus;trunk: 794965.,21/Nov/09 11:59;davsclaus;Closing all 2.0M3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Message content sent to exception handler is not re-readable,CAMEL-1834,12487658,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gertvanthienen,gertvanthienen,gertvanthienen,15/Jul/09 19:00,03/Nov/10 05:10,14/Mar/19 02:42,15/Jul/09 19:40,1.6.1,,,,,,,,,,1.6.2,,,,,,,0,"When a route contains an exception handler clause, stream based message being sent to the error handler have been cached, but the message still isn't readable.
This only happens with a 1.6.2-SNAPSHOT, the trunk handles stream-based messages correctly.

",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76725,,,Wed Jul 15 19:40:20 UTC 2009,,,,,,,0|i01kuv:,7148,,,,,,,,,"15/Jul/09 19:40;gertvanthienen;Fixed for 1.6.2-SNAPSHOT in http://svn.apache.org/viewvc?view=rev&revision=794375,
the extra unit test was added to trunk first in http://svn.apache.org/viewvc?view=rev&revision=794368",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jaxb prettyPrint does not work,CAMEL-1828,12486687,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,13/Jul/09 11:20,21/Nov/09 11:59,14/Mar/19 02:42,16/Jul/09 10:02,1.4.0,1.5.0,1.6.0,1.6.1,2.0-M1,2.0-M2,,,,,1.6.2,2.0-M3,,camel-jaxb,,,,0,"Here is the mail thread with discuss about it.

 http://www.nabble.com/JAXB-pretty-print-marshaling-td24449564.html",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-11-21 11:59:12.592,,,no_permission,,,,,,,,,,,,,76726,,,Sat Nov 21 11:59:12 UTC 2009,,,,,,,0|i01ktj:,7142,,,,,,,,,"16/Jul/09 10:02;njiang;trunk
http://svn.apache.org/viewvc?rev=793547&view=rev
http://svn.apache.org/viewvc?rev=793555&view=rev
camel-1.x branch
http://svn.apache.org/viewvc?rev=793557&view=rev",21/Nov/09 11:59;davsclaus;Closing all 2.0M3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-cxf feature osgi bundles have not right version ,CAMEL-1827,12486688,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,13/Jul/09 09:38,21/Nov/09 11:59,14/Mar/19 02:42,16/Jul/09 11:01,1.6.1,2.0-M2,,,,,,,,,1.6.2,2.0-M3,,,,,,0,"the camel-cxf features includes these bundles which are wrong
    <bundle>mvn:org.apache.servicemix.specs/org.apache.servicemix.specs.jsr311-api-1.0/${</bundle>
    <bundle>mvn:org.apache.geronimo.specs/geronimo-ws-metadata_2.0_spec/${geronimo-ws-metadata-bundle-version}</bundle>",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-11-21 11:59:12.565,,,no_permission,,,,,,,,,,,,,76727,,,Sat Nov 21 11:59:12 UTC 2009,,,,,,,0|i01ktb:,7141,,,,,,,,,"16/Jul/09 11:01;njiang;trunk
http://svn.apache.org/viewvc?rev=792471&view=rev
camel-1.x branch
http://svn.apache.org/viewvc?rev=793522&view=rev",21/Nov/09 11:59;davsclaus;Closing all 2.0M3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"GenericFileDeleteProcessStrategy in some cases seems to delete a file, but then throw an exception saying it can't delete the file, even though it has.",CAMEL-1825,12486681,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,alexl,alexl,11/Jul/09 21:17,21/Nov/09 11:59,14/Mar/19 02:42,12/Jul/09 08:12,2.0-M2,,,,,,,,,,2.0-M3,,,camel-core,,,,0,"In some cases, GenericFileDeleteProcessStrategy seems to delete a file, but then it throws an exception saying it can't delete the file, even though it has.  Because this happens, it causes a rollback even though the file has been processed and deleted correctly.  This only seems to happen on our Linux box which is using a network share to process files from.  We have managed to work around it by checking if the file exists again straightaway after ""operations.deleteFile(...)"", and this always says the file does not exist as expected, so not sure why the call  ""operations.deleteFile(...)"" returns false.  The modified code below works around this issue, and logs a warning if the file still exists (though you may wish to throw and exception instead), but so far the log statement has not been called in our test runs even though it does enter the "" if (!deleted)"" block.


    @Override
    public void commit(GenericFileOperations<T> operations, GenericFileEndpoint<T> endpoint, GenericFileExchange<T> exchange, GenericFile<T> file) throws Exception {
        // must invoke super
        super.commit(operations, endpoint, exchange, file);

        boolean deleted = operations.deleteFile(file.getAbsoluteFilePath());
        if (!deleted) {
            final File javaFile = new File(file.getAbsoluteFilePath());
            if (javaFile.exists()) {
                log.warn(""Cannot delete file: "" + file);
            }
        }
    }
","Red Hat Linux., Java 1.5_17, Mounted network share.",,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-07-12 07:10:18.897,,,no_permission,,,,,,,,,,,,,76728,,,Sat Nov 21 11:59:12 UTC 2009,,,,,,,0|i01ksv:,7139,,,,,,,,,"12/Jul/09 07:10;davsclaus;Yeah the java.io.File is a bit terrible in the JDK. We must wait for JDK7 with NIO2 to get a decent file API.

Thanks for the patch and suggestion how to fix it.","12/Jul/09 08:12;davsclaus;Thanks Alexander for reporting.

trunk: 793288.

If possible then please test the trunk code in your system",21/Nov/09 11:59;davsclaus;Closing all 2.0M3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
GenericFileConsumer fails to pick up all files in a directory if there are more files than maxMessagePerPoll setting,CAMEL-1824,12486683,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,alexl,alexl,11/Jul/09 21:03,21/Nov/09 11:59,14/Mar/19 02:42,12/Jul/09 08:11,2.0-M2,,,,,,,,,,2.0-M3,,,camel-core,,,,0,"Camel adds filenames it is processing to an in memory, in progress map.  Once it is finished processing it removes them.  If we specific a maxMessagesPerPoll number less then the files in a directory, it only processes up to the number of files we specify for each poll.  It then removes the rest from the in progress map and tries them again next poll.  This is the code (from GenericFileConsumer:processBatch()) for the last part:

       for (int index = 0; index < exchanges.size() && isRunAllowed(); index++) {
            GenericFileExchange<T> exchange = (GenericFileExchange<T>) exchanges.poll();
            String key = exchange.getGenericFile().getFileName();
            endpoint.getInProgressRepository().remove(key);
        }
 
Unfortunately, as you can see it uses exchanges.size() to determine how many file names to remove (i.e. how many times to loop), however exchanges.poll() removes one from the head of exchanges for each loop.  This means that the exchanges.size() reduces by one for each loop, which means it only cleans up half of the filenames that are in exchanges, which means these files are never picked up again as Camel thinks it is still processing them.

The fix is to replace the for loop with a while:

        while ((exchanges.size() > 0) && isRunAllowed()) {
            GenericFileExchange<T> exchange = (GenericFileExchange<T>) exchanges.poll();
            String key = exchange.getGenericFile().getFileName();
            endpoint.getInProgressRepository().remove(key);
        }


",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-07-12 08:11:52.586,,,no_permission,,,,,,,,,,,,,76729,,,Sat Nov 21 11:59:12 UTC 2009,,,,,,,0|i01ksn:,7138,,,,,,,,,"12/Jul/09 08:11;davsclaus;Thanks Alexander for reporting.

trunk: 793288.

If possible then please test the trunk code in your system",21/Nov/09 11:59;davsclaus;Closing all 2.0M3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
XMPP receives only a single issue,CAMEL-1821,12486806,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,slewis,eaubin,eaubin,10/Jul/09 13:52,03/Jun/10 07:23,14/Mar/19 02:42,22/Sep/09 06:23,1.6.1,,,,,,,,,,2.1.0,,,camel-xmpp,,,,0,"If I run the attached camel 1.6.1 program (http://www.nabble.com/file/p24402449/Test2.java Test2.java ), the camel xmpp component only receives a single
message. A chat client like adium receives all messages.  If one of the senders is commented out, camel gets everything.","Openfire 3.6.4, Camel 1.6.1 ",,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-09-21 06:17:54.324,,,no_permission,,,,,,,,,,,,,76730,,,Thu Jun 03 07:23:42 UTC 2010,,,,,,,0|i01krz:,7135,,,,,,,,,"21/Sep/09 06:17;davsclaus;Stan didnt you fix this in 2.x? Do you mind take a look.

","21/Sep/09 13:13;slewis;This sounds like CAMEL-1914, Ethan would you be able to try 2.1-SNAPSHOT to see how that does for you?",03/Jun/10 07:23;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel features file used by Apache Felix Karaf/ ServiceMix Kernel contains errors,CAMEL-1819,12487122,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,cmoulliard,cmoulliard,10/Jul/09 10:20,03/Jun/10 07:23,14/Mar/19 02:42,21/Sep/09 07:17,,,,,,,,,,,1.6.2,2.1.0,,,,,,0,"The Camel features file generated which is used by Apache Felix Karaf/ ServiceMix Kernel contains errors

e.g.

<bundle>mvn:org.apache.servicemix.specs/org.apache.servicemix.specs.jsr311-api-1.0/${</bundle>
<bundle>mvn:org.apache.geronimo.specs/geronimo-ws-metadata_2.0_spec/${geronimo-ws-metadata-bundle-version}</bundle>

<bundle>mvn:org.guiceyfruit/guiceyfruit-core/${guicyfruit-version}</bundle>

<bundle>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.ognl/${ognl-bundle-version></bundle>
<bundle>mvn:org.apache.camel/camel-ognl/${pom.version}</bundle>

...",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-09-13 18:51:05.305,,,no_permission,,,,,,,,,,,,,76731,,,Thu Jun 03 07:23:41 UTC 2010,,,,,,,0|i01krj:,7133,,,,,,,,,"13/Sep/09 18:51;davsclaus;Willem can you take a look at this to ensure our feature files are generated correctly?

Looks like some ${ } placeholders not gets resolved. Or maybe this is fixed alreay?",21/Sep/09 06:27;davsclaus;Willem have you fixed this?,"21/Sep/09 07:17;njiang;trunk 
http://svn.apache.org/viewvc?rev=815690&view=rev
camel 1.x branch
http://svn.apache.org/viewvc?rev=815682&view=rev",03/Jun/10 07:23;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HttpProducer doesn't copy the in message header to out message,CAMEL-1813,12486566,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,09/Jul/09 00:45,21/Nov/09 11:59,14/Mar/19 02:42,09/Jul/09 04:48,2.0-M2,,,,,,,,,,2.0-M3,,,,,,,0,"Here is the mail thread which discuss about it.
http://www.nabble.com/HTTP-component-and-IN-head-loss-to24393415.html",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-11-21 11:59:12.345,,,no_permission,,,,,,,,,,,,,76732,,,Sat Nov 21 11:59:12 UTC 2009,,,,,,,0|i01kq7:,7127,,,,,,,,,"09/Jul/09 04:48;njiang;trunk
http://svn.apache.org/viewvc?rev=792381&view=rev",21/Nov/09 11:59;davsclaus;Closing all 2.0M3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RedeliverErrorHandler - Should remove redeliver headers is failure processor is handling the caused exception,CAMEL-1803,12486670,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,06/Jul/09 11:11,21/Nov/09 11:59,14/Mar/19 02:42,06/Jul/09 12:13,1.6.1,2.0-M2,,,,,,,,,2.0-M3,,,camel-core,,,,0,"If for instance an onException() is handling a given exception the traces of the redelivery headers should be removed from the message.
As if the exchange will fail yet another again then it will continue using counters from where the old left. It should start from 0 again.

",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76733,,,Sat Nov 21 11:59:12 UTC 2009,,,,,,,0|i01knz:,7117,,,,,,,,,06/Jul/09 12:13;davsclaus;trunk: 791456.,21/Nov/09 11:59;davsclaus;Closing all 2.0M3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Spring DSL - tracer is tracing double in some cases,CAMEL-1797,12486672,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,05/Jul/09 09:46,21/Nov/09 11:59,14/Mar/19 02:42,05/Jul/09 10:17,2.0-M2,,,,,,,,,,2.0-M3,,,camel-core,camel-spring,,,0,"The tracer is Spring DSL is under some circumstances being registered twice and thus doing double tracing.

",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76734,,,Sat Nov 21 11:59:12 UTC 2009,,,,,,,0|i01kmn:,7111,,,,,,,,,05/Jul/09 10:17;davsclaus;trunk: 791215.,21/Nov/09 11:59;davsclaus;Closing all 2.0M3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jms - wrong defaults causes message listener to use new thread when receiving a message,CAMEL-1795,12486400,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,davsclaus,davsclaus,davsclaus,03/Jul/09 14:54,21/Nov/09 11:59,14/Mar/19 02:42,03/Jul/09 15:13,1.6.1,2.0-M2,,,,,,,,,1.6.2,2.0-M3,,camel-jms,,,,0,"JmsConfiguratiuon have a bad default
maxMessagesPerTask=1

It should be -1 as we do not want to strict the DefaultMessageListenerContainer to only handle 1 message per thread.
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76735,,,Sat Nov 21 11:59:12 UTC 2009,,,,,,,0|i01km7:,7109,,,,,,,,,03/Jul/09 14:55;davsclaus;A workaround is to always use option {{maxMessagesPerTask=-1}} on all your JMS endpoints.,"03/Jul/09 15:13;davsclaus;trunk: 790936
1.x: 790946.

Updated wiki with a warning on the jms page",21/Nov/09 11:59;davsclaus;Closing all 2.0M3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
small glitches in tutorial-osgi-camel-partxxx,CAMEL-1794,12487175,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,cmoulliard,zhangyongjiang2,zhangyongjiang2,03/Jul/09 14:48,03/Jun/10 07:23,14/Mar/19 02:42,19/Nov/09 16:32,,,,,,,,,,,2.1.0,,,osgi,,,,0,"First of all, thanks a lot for the great tutorial. Actually I think it's the best tutorial for Camel.

Few glitches I found:

* In new version of serviceMix 4.x, it changed the command syntax from ""osgi install"" to ""osgi/install"". But in the tutorial, it only mentioned ""osgi install"". If people download the latest servicemix, it will not work.

* At the bottom of tutorial web pages, there are couple links. The href links are mismatched. ""Part 2a"" points xxx-part2.html, ""Part 2b"" links to xxx-part2a.html, etc.

* cannot build reportincident.activemq in the attached resource. The error is:

C:\temp\grid-console\reportincident.activemq>mvn          install org.ops4j:maven-pax-plugin:eclipse
[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Building ActiveMQ Queuing engine
[INFO]    task-segment: [install, org.ops4j:maven-pax-plugin:eclipse]
[INFO] ------------------------------------------------------------------------
[INFO] ------------------------------------------------------------------------
[ERROR] BUILD ERROR
[INFO] ------------------------------------------------------------------------
[INFO] Cannot find lifecycle mapping for packaging: 'bundle'.
Component descriptor cannot be found in the component repository: org.apache.maven.lifecycle.mapping.LifecycleMappingbundle.
[INFO] ------------------------------------------------------------------------
[INFO] For more information, run Maven with the -e switch
[INFO] ------------------------------------------------------------------------
[INFO] Total time: < 1 second
[INFO] Finished at: Fri Jul 03 07:16:51 PDT 2009
[INFO] Final Memory: 2M/5M
[INFO] ------------------------------------------------------------------------

After I added ""<extensions>true</extensions> "" to the pom.xml, it works.

",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-09-13 18:48:47.314,,,no_permission,,,,,,,,,,,,,76736,,,Thu Jun 03 07:23:40 UTC 2010,,,,,,,0|i01klz:,7108,,,,,,,,,13/Sep/09 18:48;davsclaus;Charles can you fix this in your tutorial?,27/Oct/09 20:12;davsclaus;Charles you could you take a look at this?,30/Oct/09 14:06;cmoulliard;Part 1 of the tutorial has been review to run the example top of Apache Felix Karaf 1.0.0 and Apache Camel 2.0,"20/Nov/09 13:15;cmoulliard;Part 2 of the tutorial has been updated to run on Apache Felix Karaf 1.0.0

;-)",03/Jun/10 07:23;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CustomerServicesWsAddressingTest hangs sometimes,CAMEL-1793,12486669,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,janstey,janstey,03/Jul/09 13:12,21/Nov/09 11:59,14/Mar/19 02:42,03/Jul/09 13:34,1.6.1,,,,,,,,,,1.6.2,2.0-M3,,tests,,,,0,"Sometimes I get the following error

[23:59:55]: Running org.apache.camel.itest.customerrelations.CustomerServicesWsAddressingTest
[00:00:06]: Exception in thread ""DefaultMessageListenerContainer-4"" java.lang.NullPointerException
[00:00:06]: at java.lang.String.indexOf(String.java:1564)
[00:00:06]: at java.lang.String.indexOf(String.java:1546)
[00:00:06]: at org.springframework.jms.support.JmsUtils.buildExceptionMessage(JmsUtils.java:255)
[00:00:06]: at org.springframework.jms.listener.DefaultMessageListenerContainer.handleListenerSetupFailure(DefaultMessageListenerContainer.java:745)
[00:00:06]: at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:897)
[00:00:06]: at java.lang.Thread.run(Thread.java:595)

... which then causes a hang. Its a known issue in spring-jms 2.5.6 (http://jira.springframework.org/browse/SPR-5470). Happens when we try to do a shutdown of the context. Reverting back to 2.5.5 fixes this issue, but we probably don't want to do that :)",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-11-21 11:59:12.103,,,no_permission,,,,,,,,,,,,,76737,,,Sat Nov 21 11:59:12 UTC 2009,,,,,,,0|i01klr:,7107,,,,,,,,,"03/Jul/09 13:17;janstey;Seems that switching to a VM transport in ActiveMQ changes the original exception being thrown (not null anymore) and so we don't hit this spring-jms bug. Will commit this in a few mins. Of course, when Spring 3.0 is out we should upgrade since it fixes the spring-jms bug.","03/Jul/09 13:34;janstey;trunk: http://svn.apache.org/viewvc?rev=790907&view=rev
1.x: http://svn.apache.org/viewvc?rev=790910&view=rev",21/Nov/09 11:59;davsclaus;Closing all 2.0M3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-irc parsing of channel name and parameters is incorrect,CAMEL-1786,12486348,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,janstey,slewis,slewis,02/Jul/09 17:54,21/Nov/09 11:59,14/Mar/19 02:42,02/Jul/09 18:23,1.6.1,2.0-M2,,,,,,,,,1.6.2,2.0-M3,,,,,,0,"If you try and pass some parameters to camel-irc it turns out that camel joins a different IRC channel than expected, for example a URI like:

irc://camel-con@irc.codehaus.org:6667/#camel-test?nickname=camel-con

causes camel to join #camel-test?nickname=camel-con and not #camel-test with a nickname of camel-con.  Will attach a patch that addresses this and updates the unit test.",,,,,,,,,,,,,,,,,02/Jul/09 17:54;slewis;patch.txt;https://issues.apache.org/jira/secure/attachment/12463015/patch.txt,,,,,1.0,,,,,,,,,,,,,,,,,,,2009-07-02 18:23:23.778,,,no_permission,,,,,,,,,,,,,76739,,,Sat Nov 21 11:59:11 UTC 2009,,,Patch Available,,,,0|i01kk7:,7100,,,,,,,,,"02/Jul/09 17:54;slewis;The patch, made to apply to the top level of camel-irc.","02/Jul/09 18:23;janstey;Applied your fix to trunk: http://svn.apache.org/viewvc?rev=790701&view=rev

Thanks!",02/Jul/09 18:29;slewis;No problem!,02/Jul/09 18:39;janstey;Applied fix to 1.x as well: http://svn.apache.org/viewvc?rev=790702&view=rev,21/Nov/09 11:59;davsclaus;Closing all 2.0M3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-archetype-war throws velocity error on creation,CAMEL-1785,12486361,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,janstey,janstey,02/Jul/09 12:33,21/Nov/09 11:59,14/Mar/19 02:42,02/Jul/09 12:46,2.0-M2,,,,,,,,,,2.0-M3,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-11-21 11:59:11.936,,,no_permission,,,,,,,,,,,,,76740,,,Sat Nov 21 11:59:11 UTC 2009,,,,,,,0|i01kjz:,7099,,,,,,,,,02/Jul/09 12:46;janstey;trunk: http://svn.apache.org/viewvc?rev=790562&view=rev,21/Nov/09 11:59;davsclaus;Closing all 2.0M3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
connecting private chat consumer fails every other time,CAMEL-1782,12487173,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,slewis,machenmusik@comcast.net,machenmusik@comcast.net,02/Jul/09 01:42,03/Jun/10 07:23,14/Mar/19 02:42,22/Sep/09 06:22,2.0-M2,,,,,,,,,,2.1.0,,,camel-xmpp,,,,0,"in using a private chat consumer in a route -- paraphrasing,

from(""xmpp://server.where.ever:5222/recipient@where.ever? ..."").process(...)

the first connect generally succeeds but no XMPP messages flow.

stopping later and restarting (second route) generally works properly with both connection and XMPP messages flowing.

tried with both jabber.org and talk.google.com
","multiple -- linux, macos",,,,,,,,,,,,,,,,03/Jul/09 01:04;machenmusik@comcast.net;cameltest.tgz;https://issues.apache.org/jira/secure/attachment/12463017/cameltest.tgz,,,,,1.0,,,,,,,,,,,,,,,,,,,2009-07-02 11:02:26.603,,,no_permission,,,,,,,,,,,,,76741,,,Thu Jun 03 07:23:39 UTC 2010,,,,,,,0|i01kjb:,7096,,,,,,,,,"02/Jul/09 11:02;davsclaus;Can you post your entire route?

There could maybe be a glitch when using more than 1 xmpp endpoing.

And if you could prepare or write a little instructions how to reproduce with steps. Then we can quicker get started and look into this.","03/Jul/09 01:04;machenmusik@comcast.net;attaching a little test to demonstrate.

the test logs in as cameltest@jabber.org (pw: cameltest)
opens private chat to cameltest2@jabber.org (pw: cameltest2)
and consumes into a processor that prints what it got
(but nothing is received)
then stops and starts again
(and here you can see things being received)

",03/Jul/09 01:04;machenmusik@comcast.net;test case,"21/Sep/09 06:17;davsclaus;Stan you did some fixes and updates to XMPP. Do you mind checking whether we have other issues with it.

Would be great to have a solid XMPP component with Camel.","21/Sep/09 13:01;slewis;Yeah, this should definitely be working in trunk, there's a test I added that does this very thing.  M Chen, can you try 2.1-SNAPSHOT?",03/Jun/10 07:23;davsclaus;Closing old resolved issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The Exchange.BEAN_METHOD_NAME header is not be set rightly when the message exchange pattern is InOut,CAMEL-1777,12486664,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,01/Jul/09 07:34,20/Oct/15 13:42,14/Mar/19 02:42,01/Jul/09 09:50,1.6.0,1.6.1,2.0-M1,2.0-M2,,,,,,,1.6.2,2.0-M3,,camel-core,,,,0,"If the Bean endpoint has an explicit method name ,   the Bean processor will set the message header of Exchange.Bean_METHOD_NAME with the value of method name  before the invocation and will try to reset the message header of Exchange.Bean_METHOD_NAME with the preview method name after the invocation. 
Current camel code just set the InMessage's header , if the ExchangePatter is InOut , it forget to reset the OutMessage's header.
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-11-21 11:59:11.763,,,no_permission,,,,,,,,,,,,,76742,,,Sat Nov 21 11:59:11 UTC 2009,,,,,,,0|i01ki7:,7091,,,,,,,,,"01/Jul/09 09:50;njiang;camel trunk
http://svn.apache.org/viewvc?rev=790052&view=rev
camel 1.x branch
http://svn.apache.org/viewvc?rev=790055&view=rev",21/Nov/09 11:59;davsclaus;Closing all 2.0M3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
cxfbean does not propagate in http response code to Camel header,CAMEL-1774,12485948,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,wtam,wtam,wtam,30/Jun/09 01:33,21/Nov/09 11:59,14/Mar/19 02:42,30/Jun/09 01:53,2.0-M1,2.0-M2,,,,,,,,,2.0-M3,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-11-21 11:59:11.742,,,no_permission,,,,,,,,,,,,,76743,,,Sat Nov 21 11:59:11 UTC 2009,,,,,,,0|i01khj:,7088,,,,,,,,,"30/Jun/09 01:53;wtam;Add code to propagate HTTP response code in cxfbean.
Committed revision 789534.
",21/Nov/09 11:59;davsclaus;Closing all 2.0M3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ProducerCache should be limited to not eat memory (was: recipientList leaks memory),CAMEL-1771,12486665,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,davsclaus,kalamaks,kalamaks,29/Jun/09 09:22,21/Nov/09 11:59,14/Mar/19 02:42,30/Jun/09 07:45,1.4.0,1.5.0,1.6.0,1.6.1,2.0-M2,,,,,,1.6.2,2.0-M3,,,,,,0,"I found that RecipientList leaks memory .
The problem is that RecipientList stores endpoints in producerCache and cache key computed by using getEndpointUri. If endpoint uris are unique ( as we have ) then every new entry will stored in cache and will never released.

In example we are using recipientList  to send messages to the external http server, every url contains unique query parameters therefor every recipientList entry will create new producer ant that producer will stored in producerCache.
In our system recipientList wlil leak about 20M per day

Unfortunately I was unable to find any workaround 
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-06-29 09:49:58.824,,,no_permission,,,,,,,,,,,,,76744,,,Sat Nov 21 11:59:11 UTC 2009,,,,,,,0|i01kgv:,7085,,,,,,,,,"29/Jun/09 09:49;davsclaus;Ah cool with your finding. 

I will fix the ProducerCache to be size limited so it wont grow forever. Using a LRUCache instead of Map, with a default of 1000.
","29/Jun/09 10:24;kalamaks;Tnx Claus
is it possible to use one of the concurrent API for LRUcache to get ride of  syncronization in ProducerCache.getProducer ?","29/Jun/09 10:49;davsclaus;Yeah I guess LRUCache was created before Java 5 really took off.

I am wondering thought if there is an implementation in Java 5 from the concurrency API that supports a Map like sorted on usage.","29/Jun/09 11:02;davsclaus;trunk: 789285
1.x: 789287.","29/Jun/09 15:33;kalamaks;much better now however there is still some leak. I'm not 100% sure but seemst that DefaultCamelContext.addEndpoint adds unique endpoints to the endpoints hashmap ( like in ProducerCache )

Only thing I will see is that there is lot of Hasmap entrys containing HttpEndpoints  and the count of HttpEndpoints  growing and  this hasmap is inside SpringCamelContext ( DefaultCamelContext ). If it helps I will provide memory snapshot in yourkit format","29/Jun/09 15:55;davsclaus;Yeah CamelContext also holds a list of all endpoints created. I guess we should use a LRUCache as well to avoid high memory usages.

Another idea is to not add these endpoints to the CamelContext internal list at all as you will not re-use them later anyway.
But I am working on a patch for the JMX console right now. Only registering 1 endpoint for all the https.","29/Jun/09 16:03;davsclaus;I actually think we should not *store* the endpoints that have lenient properties, such as *http*. Then we wont store them in the CamelContext.

So if you need such an endpoint its created on demand when you call the {{getEndpoint(uri)}} method.
So when you do as you have millions http endpoints that are different it wont be added to Camel and also not in JMX.

In the future we could add the first in JMX to have a single entry there so we later can track number of invocations to this endpoint and more.
But all the JMX stuff is slated for an overhaul in 2.1","30/Jun/09 05:27;davsclaus;See nabble for discussion
http://www.nabble.com/-DISCUSS----Camel-2.0---About-Endpoints-with-lenient-properties--eating-to-much-memory-td24266319s22882.html",30/Jun/09 06:29;kalamaks;Another thing I was wonderingi is that do we realy need ProducerCache in RecipientList ? Path to the camelContext seems relatively short  (allmost direct call to camelContext.getEndpoint(uri) ) and camelContext caches endpoints anyway,"30/Jun/09 06:59;davsclaus;Yeah we need the cache when people send to the same endpoint again and again.

ProducerCache if for caching *producers*
CamelContext caches *endpoints*

So we need both.","30/Jun/09 07:45;davsclaus;trunk: 789593.
1.x: 789598.

Andres can you try again with latest code? I have fixed this and also the JMX issue as well, so Camel will not register all the http endpoints.
So you do *not* need your own custom naming strategy anymore.

The fix is for both 1.6.2 and 2.0","30/Jun/09 11:05;kalamaks;
 I tested 789598 and no more memory leaks - supercool :)
I hope  1.6.2 will realeased soon so that we can switch our pdoduction also to 1.6.2

thank you Claus 


",21/Nov/09 11:59;davsclaus;Closing all 2.0M3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
License for One-JAR classes not included in camel-example-spring one-jar artifact. Also apache legal files missing,CAMEL-1765,12486383,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Blocker,Fixed,hadrian,djencks,djencks,27/Jun/09 18:04,21/Nov/09 11:59,14/Mar/19 02:42,03/Jul/09 07:05,2.0.0,,,,,,,,,,2.0-M3,,,examples,,,,0,"The license for the com/simontuffs/onejar files is at http://one-jar.sourceforge.net/index.php?page=documents&file=license.

When I build camel-example-spring neither this license nor the apache license nor apache notice file is in the one-jar.jar artifact.

I'd suggest disabling the one-jar plugin until someone can figure out how to include these files.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-06-28 19:30:13.703,,,no_permission,,,,,,,,,,,,,76747,,,Sat Nov 21 11:59:11 UTC 2009,,,,,,,0|i01kfj:,7079,,,,,,,,,"28/Jun/09 19:30;hadrian;David, thanks for spotting this.  I will look into it.",01/Jul/09 18:07;davsclaus;Lets comment out this plugin so we wont have license issues. I has no real use anyway. Was something James added as he spotted this plugin.,"03/Jul/09 07:05;davsclaus;Removed the plugin from the pom.xml

trunk: 790812.",21/Nov/09 11:59;davsclaus;Closing all 2.0M3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel builds should not use platform specific encoding,CAMEL-1764,12485945,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,hadrian,hadrian,27/Jun/09 16:49,21/Nov/09 11:59,14/Mar/19 02:42,27/Jun/09 17:08,1.6.1,2.0-M2,,,,,,,,,1.6.2,2.0-M3,,,,,,0,"The builds on my Mac use the platform specific encoding thus leading to the following warngin:
{code}
[WARNING] Using platform encoding (MacRoman actually) to copy filtered resources, i.e. build is platform dependent!
{code}

We should use the <project.build.sourceEncoding> property to specify a project specific encoding (UTF-8).",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-11-21 11:59:11.5,,,no_permission,,,,,,,,,,,,,76748,,,Sat Nov 21 11:59:11 UTC 2009,,,,,,,0|i01kfb:,7078,,,,,,,,,"27/Jun/09 17:02;hadrian;Fixed in:
r788998 (trunk)
r788999 (camel-1.x)",21/Nov/09 11:59;davsclaus;Closing all 2.0M3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unable to read post params from request,CAMEL-1760,12486667,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,kalamaks,kalamaks,25/Jun/09 12:45,21/Nov/09 11:59,14/Mar/19 02:42,25/Jun/09 16:07,1.6.0,,,,,,,,,,1.6.2,2.0-M3,,camel-jetty,,,,0,"If consuming messsages from jetty endpoint there is no way to read *post* parameters from HttpServletRequest. 

In example  getting HttpServletRequest  from body :
HttpServletRequest req = exchange.getIn().getBody(HttpServletRequest.class);

req.getParameterMap() returns allways empty map

The problem is that jetty Request.extractParameters() method is trying  to read post parameters from Request.getInputStream().  But unfortunately someone strips the input stream before and req.getInputStream() returns allways 0 bytes

The workaround for me is to extend DefaultHttpBinding as described in:  http://camel.apache.org/jetty.html

{code:title= MyHttpBinding .java|borderStyle=solid}
public class MyHttpBinding extends DefaultHttpBinding {
    
    public void readRequest(HttpServletRequest request, HttpMessage message) {
       request.getParameterMap();
       super.readRequest(request,message);
    }
}
{code}
calling  request.getParameterMap()  will cache parameters inside jetty Request and it's possible to query params later,  without having inputStream

",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-06-25 16:07:38.642,,,no_permission,,,,,,,,,,,,,76749,,,Sat Nov 21 11:59:11 UTC 2009,,,,,,,0|i01kef:,7074,,,,,,,,,"25/Jun/09 16:07;njiang;Apply the patch with thanks to  Andres, and I also added a simple test to verify it.

trunk
http://svn.apache.org/viewvc?rev=788393&view=rev

camel-1.x branch
http://svn.apache.org/viewvc?rev=788406&view=rev",21/Nov/09 11:59;davsclaus;Closing all 2.0M3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Tracer - when using delay, throttle the to node keeps displaying the parent",CAMEL-1759,12486663,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,25/Jun/09 08:09,21/Nov/09 11:59,14/Mar/19 02:42,26/Jun/09 17:48,2.0-M2,,,,,,,,,,2.0-M3,,,camel-core,,,,0,".delay(100) does affect the Tracer log and do not output correctly in the to destination

See SedaComplexInOutTest

Also Throttler, Split. Looks like sub routes in general is not displayed correctly in tracer",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76750,,,Sat Nov 21 11:59:11 UTC 2009,,,,,,,0|i01ke7:,7073,,,,,,,,,25/Jun/09 14:48;davsclaus;Tracing with interceptor is letting interceptor shadow the original node that was intercepted.,"26/Jun/09 08:03;davsclaus;trunk: 788621, 788663, 788766.","26/Jun/09 17:48;davsclaus;trunk: 788786.

This was a tough one to crack as onCompletion, onException and intercept needed special care.

But the tracer is now fine grained and shows much better the traced routing.",21/Nov/09 11:59;davsclaus;Closing all 2.0M3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Failover load balancer - should prepare exchange before failover,CAMEL-1755,12485433,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,24/Jun/09 11:14,21/Nov/09 11:59,14/Mar/19 02:42,24/Jun/09 11:31,2.0-M2,,,,,,,,,,2.0-M3,,,camel-core,,,,0,"When the failover load balancer does a fail over it only clears the exception.

When you use dead letter channel or default error handler with redeliveries enabled they will have such information.
This should also be cleared before failover. So we have a clean and fresh start.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76751,,,Sat Nov 21 11:59:11 UTC 2009,,,,,,,0|i01kdb:,7069,,,,,,,,,24/Jun/09 11:31;davsclaus;trunk: 787982.,21/Nov/09 11:59;davsclaus;Closing all 2.0M3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
validator component should be configurable for either Sax or Dom as MSV component requires Dom,CAMEL-1753,12485525,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,24/Jun/09 09:19,21/Nov/09 11:59,14/Mar/19 02:42,24/Jun/09 09:32,2.0-M2,,,,,,,,,,2.0-M3,,,camel-core,,,,0,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76752,,,Sat Nov 21 11:59:11 UTC 2009,,,,,,,0|i01kcv:,7067,,,,,,,,,"24/Jun/09 09:32;davsclaus;trunk: 787958.

Added option {{useDom}} to validator components.",21/Nov/09 11:59;davsclaus;Closing all 2.0M3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SpringCamelContext will get into endless loop of calling start method if the route service calling the ApplicationContext refresh method in it's initial method,CAMEL-1752,12486660,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,24/Jun/09 01:38,21/Nov/09 11:59,14/Mar/19 02:42,24/Jun/09 10:27,1.6.1,2.0-M1,2.0-M2,,,,,,,,1.6.2,2.0-M3,,camel-spring,,,,0,"Here is the mail thread which discusses this issue.

http://www.nabble.com/StackOverFlow-error-with-Camel-1.6.1-tp24172060p24172060.html",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-11-21 11:59:11.096,,,no_permission,,,,,,,,,,,,,76753,,,Sat Nov 21 11:59:11 UTC 2009,,,,,,,0|i01kcn:,7066,,,,,,,,,"24/Jun/09 10:27;njiang;trunk
http://svn.apache.org/viewvc?rev=787928&view=rev
camel-1.x
http://svn.apache.org/viewvc?rev=787932&view=rev",21/Nov/09 11:59;davsclaus;Closing all 2.0M3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Validator component lacks a DOMSource converter from an InputStream,CAMEL-1743,12486648,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,23/Jun/09 07:29,21/Nov/09 11:59,14/Mar/19 02:42,23/Jun/09 08:19,1.6.1,2.0-M2,,,,,,,,,1.6.2,2.0-M3,,camel-core,,,,0,"The Validator component requires the payload to be of type DOMSource so it converters it to this type.

But we lack a XmlConverter from an InputStream to this type.

See nabble:
http://www.nabble.com/XML-Validation-throws-NoXmlBodyValidationException-td24147734.html",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76755,,,Sat Nov 21 11:59:10 UTC 2009,,,,,,,0|i01kan:,7057,,,,,,,,,"23/Jun/09 08:19;davsclaus;trunk: 787581.
1.x: 787583.",21/Nov/09 11:59;davsclaus;Closing all 2.0M3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MessageSupport - when using message fallback type converter Camel should not report type converter issue with message instead of the real type,CAMEL-1742,12487657,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,23/Jun/09 06:44,03/Nov/10 05:10,14/Mar/19 02:42,23/Jun/09 07:19,1.6.1,,,,,,,,,,1.6.2,,,camel-core,,,,0,"See this forum
http://fusesource.com/forums/thread.jspa?threadID=963&tstart=0

{code}
org.apache.camel.NoTypeConversionAvailableException: No type converter available to convert from type: class org.apache.camel.impl.DefaultMessage to the required type: java.io.InputStream with value Message: org.apache.camel.CamelException: java.lang.Exception
        at org.apache.camel.impl.converter.DefaultTypeConverter.doConvertTo(DefaultTypeConverter.java:147)
        at org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:90)
        at org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:86)
        at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:85)
        at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:52)
{code}

Camel should instead this confusing type converter issue, instead it should report the real body type as not having a type converter.
And the fallback should also be optimized like the regular type to only be invoked when needed (i.e. to skip when we know for a fact there is no type converter possible)",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76756,,,Tue Jun 23 07:19:24 UTC 2009,,,,,,,0|i01kaf:,7056,,,,,,,,,23/Jun/09 07:19;davsclaus;1.x: 787571.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Docs for the http component are incorrect regarding the HttpConstants class,CAMEL-1740,12486369,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,hadrian,hadrian,22/Jun/09 20:37,21/Nov/09 11:59,14/Mar/19 02:42,03/Jul/09 07:03,2.0-M2,,,,,,,,,,2.0-M3,,,,,,,0,"The documentation on the wiki needs updating after many of the HTTP constants were moved from HttpConstants to Exchange in r777808.

The HttpConstants class is not even necessary anymore, the only constant remaining there is HttpConstants.CONTENT_ENCODING which is duplicated actually by Exchange.HTTP_CHARACTER_ENCODING.  The latter should be used, HttpConstants.java removed and the wiki updated.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-07-03 06:11:58.539,,,no_permission,,,,,,,,,,,,,76757,,,Sat Nov 21 11:59:10 UTC 2009,,,,,,,0|i01k9z:,7054,,,,,,,,,"23/Jun/09 02:41;hadrian;Actually HTTP_CHARACTER_ENCODING is not a duplicate.  I ended up moving CONTENT_ENCODING to HttpMessage and removing HttpConstants.java as it only had this one header name defined.  Moving it to HttpMessage seems a better choice and following the same convention used by other parts of the code such as CXF.

Committed fix in r787522.  Need to update the wiki.  I think a bit more work is needed around headers in camel-http.","03/Jul/09 06:11;davsclaus;Hadrian it is confusing where to put the constant keys.

That is why the xxxConstants classes was introduced. So I would rather have it there than on the HttpMessage.
Then end users knows where to look for them

In these 2 places
- xxxConstants
- org.apache.camel.Exchange

","03/Jul/09 06:48;davsclaus;Hadrian I am working on this.

{code}
Content-Type
Content-Encoding
{code}

Is now provided on Exchange and using the 100% same keys as the HTTP protocol. It makes it much easier to use these with Camel.
",03/Jul/09 06:49;davsclaus;This also makes the constant on HttpMessage obsolete as its moved to Exchange,"03/Jul/09 07:03;davsclaus;trunk: 790811.

",21/Nov/09 11:59;davsclaus;Closing all 2.0M3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Memory leak if using JMX and recipientList,CAMEL-1738,12486630,12486665,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,kalamaks,kalamaks,22/Jun/09 11:10,21/Nov/09 11:59,14/Mar/19 02:42,30/Jun/09 07:46,1.6.0,,,,,,,,,,1.6.2,2.0-M3,,camel-core,jmx,,,1,"There seems to be a memory leak if you are using recipientList and JMX enabled. The problem is that endpoint MBean name computed by using hashCode, if there is lot of different endpoints (created on runtime) every new endpoint will create a new MBean instance. 
Also in recipientList every entry will create new endpoint. 
In example if we have 3 urls ; 
 http://host/index?id=1
	http://host/index?id=2
	http://host/index?id=3
Camel will add 3 different MBeans entry to JMX. As url parameters are normally unique then camel will end up with creating thousands of endpoint entries. But every MBean takes memory.
","WinXP, Java 1.6",,,,,,,,,,,,,,,,22/Jun/09 11:14;kalamaks;JConsole.jpg;https://issues.apache.org/jira/secure/attachment/12463003/JConsole.jpg,22/Jun/09 11:13;kalamaks;MemLeak.java;https://issues.apache.org/jira/secure/attachment/12463002/MemLeak.java,30/Jun/09 07:47;davsclaus;Picture 1.png;https://issues.apache.org/jira/secure/attachment/12463011/Picture+1.png,,,3.0,,,,,,,,,,,,,,,,,,,2009-06-24 09:02:41.372,,,no_permission,,,,,,,,,,,,,76758,,,Sat Nov 21 11:59:10 UTC 2009,,,,,,,0|i01k9j:,7052,,,,,,,,,22/Jun/09 11:13;kalamaks;Example class to reproduce problem,22/Jun/09 11:14;kalamaks;JConsole picture,"22/Jun/09 11:23;kalamaks;Temporary workaround that works for me is  to overwrite CamelNamingStrategy via custom lifecycleStrategy bean.

My custom CamelNamingStrategy overwrites getEndpointId and computes EndpointId so that url parameters not considered.","24/Jun/09 09:02;davsclaus;Thanks for reporting. 

JMX is scheduled for an overhaul in Camel 2.1",29/Jun/09 11:55;davsclaus;Duplicate of CAMEL-1771,29/Jun/09 11:55;davsclaus;Sorry this is JMX registering new endpoints all the time,"29/Jun/09 11:57;davsclaus;I guess some endpoints should not consider parameters and others should as they could differ.

The http should obviously not consider parameters.","29/Jun/09 12:09;davsclaus;Its kinda like the issue with seda component as well.

We should have a new method on Endpoint to compute a *key* for the JMX bean to use.
{{getEndpointKey()}}
Then all your http endpoints can share the same JMX bean.

But each endpoint is registered individually in the endpoint cache as they are different as they have a different id parameter.

Thanks for the unit test. It uses about 50mb more memory with or without the patch on my laptop.",29/Jun/09 13:09;davsclaus;The direct component does not have its consumer named nicely as its an anonymous inner class. I am fixing this.,30/Jun/09 07:46;davsclaus;Fixed by CAMEL-1771,30/Jun/09 07:47;davsclaus;jconsole with Camel 1.6.2 showing that the http endpoints is only registered once.,21/Nov/09 11:59;davsclaus;Closing all 2.0M3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-cxf defaultHeaderFilterStrategy doesn't filter the Camel releates headers,CAMEL-1736,12484697,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,22/Jun/09 09:17,21/Nov/09 11:59,14/Mar/19 02:42,23/Jun/09 06:55,1.6.1,2.0-M2,,,,,,,,,1.6.2,2.0-M3,,camel-cxf,,,,0,"Here is the mailing thread[1] which discuss this issue.
[1] http://www.nabble.com/-camel-cxf--Stripping-headers-td24143323.html",,,,,,,,,,,,,,,,,22/Jun/09 12:00;alitokmen;headers.txt;https://issues.apache.org/jira/secure/attachment/12463004/headers.txt,22/Jun/09 12:01;alitokmen;test-java.zip;https://issues.apache.org/jira/secure/attachment/12463005/test-java.zip,,,,2.0,,,,,,,,,,,,,,,,,,,2009-06-22 12:00:49.073,,,no_permission,,,,,,,,,,,,,76759,,,Sat Nov 21 11:59:10 UTC 2009,,,,,,,0|i01k93:,7050,,,,,,,,,22/Jun/09 12:00;alitokmen;Attaching sample headers.,"22/Jun/09 12:01;alitokmen;Attaching sample code.

The full sample project is on svn://svn.forge.objectweb.org/svnroot/jonas/sandbox/camel-jonas5/trunk/camel-osgi-package","23/Jun/09 06:55;njiang;trunk
 http://svn.apache.org/viewvc?rev=787206&view=rev
camel 1.x
 http://svn.apache.org/viewvc?rev=787220&view=rev","24/Jun/09 11:10;alitokmen;Thanks for the patch, looks like the auto-generated CAMEL headers are now stripped.

I'm checking if it creates any issues with other applications, but expect it not to (a WS service message's details are always expected to be in the payload or attachments, and not in the HTTP headers, anyway!)

Cheers

S. Ali Tokmen
http://ali.tokmen.com/",21/Nov/09 11:59;davsclaus;Closing all 2.0M3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-example-etl - bug in sample about type converter,CAMEL-1735,12484672,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,davsclaus,davsclaus,22/Jun/09 08:35,21/Nov/09 11:59,14/Mar/19 02:42,24/Jun/09 05:29,2.0-M2,,,,,,,,,,2.0-M3,,,examples,,,,0,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76760,,,Sat Nov 21 11:59:10 UTC 2009,,,,,,,0|i01k8v:,7049,,,,,,,,,"22/Jun/09 08:35;davsclaus;See nabble
http://www.nabble.com/etl-example-and-message-conversion-td24142904.html","22/Jun/09 08:37;davsclaus;The issue is that the type converter is not discovered in the package
{{org.apache.camel.example.etl}}

That is was supposed to.","24/Jun/09 05:29;davsclaus;trunk: 787909, 787911.",21/Nov/09 11:59;davsclaus;Closing all 2.0M3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel does not build with maven 2.1.0,CAMEL-1731,12486310,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,gnt,gnt,18/Jun/09 09:24,21/Nov/09 11:59,14/Mar/19 02:42,23/Jun/09 06:54,1.6.1,,,,,,,,,,1.6.2,2.0-M3,,,,,,0,"It barfs with the following error:

[INFO] The projects in the reactor contain a cyclic reference: Edge between 'Vertex{label='org.apache.camel:camel-buildtools'}' and 'Vertex{label='org.apache.camel:camel-buildtools'}' introduces to cycle in the graph org.apache.camel:camel-buildtools --> org.apache.camel:camel-buildtools


The problem is that the parent pom defines the checkstyle plugin and defines a dependency on buildtools.  So when maven tries to buid buildtools, it has a dependency on itself because it is inherited from  the parent pom.

A fix would be to define a ""parent"" module.   The root pom would not define the checkstyle plugin, but this definition would be in the parent module.  The buildtool module would directly inherit from the root pom, while all other modules inherit from the ""parent"" pom.

You can see how this is set up in mina:
  http://svn.apache.org/repos/asf/mina/trunk/pom.xml
  http://svn.apache.org/repos/asf/mina/trunk/legal/pom.xml
  http://svn.apache.org/repos/asf/mina/trunk/parent/pom.xml
  http://svn.apache.org/repos/asf/mina/trunk/core/pom.xml

",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-06-23 06:54:46.286,,,no_permission,,,,,,,,,,,,,76762,,,Sat Nov 21 11:59:10 UTC 2009,,,,,,,0|i01k7z:,7045,,,,,,,,,"23/Jun/09 06:54;njiang;trunk
http://svn.apache.org/viewvc?rev=786141&view=rev
camel 1.x branch
http://svn.apache.org/viewvc?rev=787565&view=rev",21/Nov/09 11:59;davsclaus;Closing all 2.0M3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Converters are not correctly loaded in OSGi,CAMEL-1729,12486517,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,gnt,gnt,18/Jun/09 09:05,21/Nov/09 11:59,14/Mar/19 02:42,18/Jun/09 15:43,,,,,,,,,,,1.6.2,2.0-M3,,osgi,,,,0,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-06-18 15:43:44.635,,,no_permission,,,,,,,,,,,,,76763,,,Sat Nov 21 11:59:10 UTC 2009,,,,,,,0|i01k7j:,7043,,,,,,,,,"18/Jun/09 09:08;gnt;Fixed in 1.x branch:

Sending        camel-osgi/src/main/java/org/apache/camel/osgi/Activator.java
Sending        camel-osgi/src/main/java/org/apache/camel/osgi/OsgiAnnotationTypeConverterLoader.java
Sending        camel-osgi/src/test/java/org/apache/camel/osgi/ActivatorTest.java
Transmitting file data ...
Committed revision 785968.
","18/Jun/09 15:43;njiang;camel trunk
http://svn.apache.org/viewvc?rev=785987&view=rev",21/Nov/09 11:59;davsclaus;Closing all 2.0M3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-bean - should throw MethodNotExist exception if method name provided but not found on bean,CAMEL-1728,12486603,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,18/Jun/09 06:37,21/Nov/09 11:59,14/Mar/19 02:42,18/Jun/09 07:26,1.6.1,2.0-M2,,,,,,,,,2.0-M3,,,camel-core,,,,0,"See nabble
http://www.nabble.com/AmbiguousMethodCallException-td24042324s22882.html
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76764,,,Sat Nov 21 11:59:10 UTC 2009,,,,,,,0|i01k7b:,7042,,,,,,,,,18/Jun/09 07:26;davsclaus;trunk: 785941.,21/Nov/09 11:59;davsclaus;Closing all 2.0M3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"camel-mail - Alternative Body Header is included in mail as a header, it should be skipped",CAMEL-1727,12486502,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,18/Jun/09 05:45,21/Nov/09 11:59,14/Mar/19 02:42,18/Jun/09 05:53,1.6.1,2.0-M2,,,,,,,,,1.6.2,2.0-M3,,camel-mail,,,,0,"See nabble
http://www.nabble.com/Camel-Mail%3A-Alternate-body-is-included-twice-td24049547.html
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76765,,,Sat Nov 21 11:59:10 UTC 2009,,,,,,,0|i01k73:,7041,,,,,,,,,"18/Jun/09 05:53;davsclaus;trunk: 785915.
1.x: 785916.",21/Nov/09 11:59;davsclaus;Closing all 2.0M3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
POM in examples has SNAPSHOT not M2,CAMEL-1726,12486507,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,jrobens,jrobens,18/Jun/09 01:16,20/Jul/09 04:08,14/Mar/19 02:42,29/Jun/09 13:38,2.0-M2,,,,,,,,,,2.0-M3,,,examples,,,,0,"Hi 

SNAPSHOT in POM files does not work . Should be M2. Sounds trivial, but probably is a barrier for people trialing this software.","linux, Netbeans, java 1.6, maven 2",,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-06-24 07:15:10.368,,,no_permission,,,,,,,,,,,,,76766,,,Mon Jun 29 13:44:34 UTC 2009,,,,,,,0|i01k6v:,7040,,,,,,,,,24/Jun/09 07:15;davsclaus;Hadrian could you take a look at this? Could be something related to the release process. We should make sure the 2.0 final POMs are okay.,"29/Jun/09 08:47;njiang;@Claus,

I don't think this is an issue. since the example's project version will be updated when we did the release. 
And let the example dependents on the current SNAPSHOT vesion could help us to make sure the snapshot changes don't broke the unit tests of example.

If the use wants to try out the example, he could choice the released version of example instead of the SNAPSHOT one.

","29/Jun/09 11:39;davsclaus;Is it the 2.0m2 .zip distribution that has SNAPSHOT in pom.xml? If so we should make sure its correct in the 2.0 final release.

Yeah the examples in trunk should depend on SNAPSHOT so we can test it with latest code.","29/Jun/09 13:38;jrobens;I downloaded the M2 tar file today and it was fine. 

I updated from subversion and the only error I got is (macos/java 1.6_13):

2009-06-29 22:02:09.201::WARN:  EXCEPTION on HttpExchange@10779770=POST//localhost:52319/cometd/cometd#4
org.eclipse.jetty.io.EofException
	at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:310)
	at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:203)
	at org.eclipse.jetty.client.HttpConnection.handle(HttpConnection.java:271)
	at org.eclipse.jetty.client.SocketConnector$1.run(SocketConnector.java:71)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:436)
	at java.lang.Thread.run(Thread.java:613)
2009-06-29 22:02:09.201::WARN:  IOE on HttpExchange@10779770=POST//localhost:52319/cometd/cometd#9
passed CometDisconnectFailureTest.testDisconnectFailure

","29/Jun/09 13:44;hadrian;The examples in our code, actually all subprojects do depend on the *same* snapshot version.  One step in the release process is to update the release version.  Consequently all projects, components and examples will depend on the correct version in the release.

This is the way it should be to ensure that the examples keep working while we make changes to the code.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-mail - sending mails with text/plain could give a content type error by java mail,CAMEL-1724,12486482,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,17/Jun/09 10:46,21/Nov/09 11:59,14/Mar/19 02:42,18/Jun/09 07:28,1.6.1,2.0-M2,,,,,,,,,1.6.2,2.0-M3,,camel-mail,,,,0,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76767,,,Sat Nov 21 11:59:10 UTC 2009,,,,,,,0|i01k6f:,7038,,,,,,,,,"17/Jun/09 10:47;davsclaus;On delivery attempt: 0 caught: org.springframework.mail.MailSendException; nested exceptions (1) are:
Failed message 1: javax.mail.MessagingException: IOException while sending message (javax.activation.UnsupportedDataTypeException: text/plain; charset=us-ascii)
org.springframework.mail.MailSendException; nested exception details (1) are:
Failed message 1:
javax.mail.MessagingException: IOException while sending message (javax.activation.UnsupportedDataTypeException: text/plain; charset=us-ascii)
        at com.sun.mail.smtp.SMTPTransport.sendMessage(SMTPTransport.java:625)
        at org.springframework.mail.javamail.JavaMailSenderImpl.doSend(JavaMailSenderImpl.java:403)
        at org.springframework.mail.javamail.JavaMailSenderImpl.send(JavaMailSenderImpl.java:342)
        at org.springframework.mail.javamail.JavaMailSenderImpl.send(JavaMailSenderImpl.java:357)
        at org.springframework.mail.javamail.JavaMailSenderImpl.send(JavaMailSenderImpl.java:346)
        at org.apache.camel.component.mail.MailProducer.process(MailProducer.java:46)
        at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:69)
        at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:50)
        at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:79)
        at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:84)
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:80)
        at org.apache.camel.processor.interceptor.StreamCachingInterceptor.proceed(StreamCachingInterceptor.java:87)
        at org.apache.camel.processor.interceptor.StreamCachingInterceptor.process(StreamCachingInterceptor.java:82)
        at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:189)
        at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:133)
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:115)
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:89)
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:41)
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:55)
        at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:50)
        at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:79)
        at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:84)
        at org.apache.camel.processor.interceptor.StreamCachingInterceptor.proceed(StreamCachingInterceptor.java:90)
        at org.apache.camel.processor.interceptor.StreamCachingInterceptor.process(StreamCachingInterceptor.java:82)
        at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:52)
        at org.apache.camel.component.file.FileConsumer.pollFile(FileConsumer.java:154)
        at org.apache.camel.component.file.FileConsumer.pollFileOrDirectory(FileConsumer.java:90)
        at org.apache.camel.component.file.FileConsumer.pollFileOrDirectory(FileConsumer.java:100)
        at org.apache.camel.component.file.FileConsumer.poll(FileConsumer.java:66)
        at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:66)
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:417)
        at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:280)
        at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:135)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:65)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:146)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:170)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:651)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:676)
        at java.lang.Thread.run(Thread.java:613)
Caused by: javax.activation.UnsupportedDataTypeException: text/plain; charset=us-ascii
        at javax.activation.DataHandler.writeTo(DataHandler.java:78)
        at javax.mail.internet.MimeMessage.writeTo(MimeMessage.java:1166)
        at com.sun.mail.smtp.SMTPTransport.sendMessage(SMTPTransport.java:585)
        ... 39 more

 ","17/Jun/09 10:54;davsclaus;1.x: 785548.
2.0: 785549.",21/Nov/09 11:59;davsclaus;Closing all 2.0M3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Some website issues,CAMEL-1721,12486628,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,joegottman,joegottman,16/Jun/09 14:29,21/Nov/09 11:59,14/Mar/19 02:42,18/Jun/09 07:06,2.0-M1,,,,,,,,,,2.0-M3,,,,,,,0,"There are a few minor problems with the website:

1)  The link for the pdf version of the Camel 2.0-M2 manual is broken.
2) The list of components does not include camel-jing
3) @Handler is not included in the list of new annotations on the ""Camel 2.0-M2 release"" page.
4) Also on the ""Camel 2.0-M2 release"" page, a new option for the File component is described as ""existFile"".  This should be ""fileExist"".",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-06-16 16:21:40.409,,,no_permission,,,,,,,,,,,,,76768,,,Sat Nov 21 11:59:10 UTC 2009,,,,,,,0|i01k5r:,7035,,,,,,,,,"16/Jun/09 16:21;davsclaus;ad 1)
Hadrian will take care of it. Takes some time for the html website to be updated

ad 2)
camel-jing contains 2 components with scheme name: rng and rnc.
If you look at the components page they list the artifact as camel-jing

ad 3)
Fixed

ad 4)
Fixed

Note 3 and 4 is fixed on the ongoing 2.0 release page. And not the 2.0m2.",21/Nov/09 11:59;davsclaus;Closing all 2.0M3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
bean component should thrown NoTypeConverterException when bean parameter binding cannot convert to method signature type,CAMEL-1719,12486622,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,16/Jun/09 11:47,21/Nov/09 11:59,14/Mar/19 02:42,16/Jun/09 13:24,2.0-M2,,,,,,,,,,2.0-M3,,,camel-core,,,,0,"See nabble:
http://www.nabble.com/Error-not-raised-by-Camel-if-the-%40Header-type-define-in-a-bean-is-not--correct-td24051086s22882.html
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76769,,,Sat Nov 21 11:59:10 UTC 2009,,,,,,,0|i01k5b:,7033,,,,,,,,,16/Jun/09 13:24;davsclaus;trunk: 785204.,21/Nov/09 11:59;davsclaus;Closing all 2.0M3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Simple language support for AND / OR to concat multiple expressions fails if string constants are enclosed in single quotation marks,CAMEL-1716,12486619,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ohecker,ohecker,15/Jun/09 21:18,21/Nov/09 11:59,14/Mar/19 02:42,16/Jun/09 05:04,2.0.0,,,,,,,,,,2.0-M3,,,camel-core,,,,0,"The current implementation for CAMEL-1637 fails if the string constants in the two expressions are enclosed in single quotation marks as given in the following example 

{code}
${in.header.foo} == 'abc' and ${in.header.bar} == '123'
{code}

This is due to an issue with the GROUP_PATTERN regular expression in SimpleLanguageSupport.java. The matching pattern in between the single quotes is greedy and thus does not match correctly.
",,,,,,,,,,,,,,,,,15/Jun/09 21:22;ohecker;camel_1637_greedy_problem.fix.java.patch;https://issues.apache.org/jira/secure/attachment/12462982/camel_1637_greedy_problem.fix.java.patch,15/Jun/09 21:22;ohecker;camel_1637_greedy_problem.testcase.java.patch;https://issues.apache.org/jira/secure/attachment/12462993/camel_1637_greedy_problem.testcase.java.patch,,,,2.0,,,,,,,,,,,,,,,,,,,2009-06-16 05:04:54.06,,,no_permission,,,,,,,,,,,,,76770,,,Sat Nov 21 11:59:10 UTC 2009,,,Patch Available,,,,0|i01k4n:,7030,,,,,,,,,15/Jun/09 21:22;ohecker;A patch file to extend the given unit tests to reproduce the problem and a patch containing the fix for the issue.,"16/Jun/09 05:04;davsclaus;Thanks a lot Oliver for reporting and providing a patch with unit test as well. That is great. Keep 'em coming :)

trunk: 785080.",21/Nov/09 11:59;davsclaus;Closing all 2.0M3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Routes are started twice with webapplication context,CAMEL-1711,12486343,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,davsclaus,akuhtz,akuhtz,15/Jun/09 11:16,21/Nov/09 11:59,14/Mar/19 02:42,17/Jun/09 13:02,1.6.1,2.0-M2,,,,,,,,,1.6.2,2.0-M3,,camel-spring,,,,0,"I've a spring based web application that has 2 applicationContexts (the second has the first as parent). My problem is that the SpringCamelContext listens to the ContextRefreshedEvent and starts the camel context.

This works fine if you have only 1 context but if the ContextRefreshedEvent of the second context is received the routes are started a second time.
The second start of the camel context is catched correctly (in ServiceSupport) but I think the the startRoutes() in the start()-method of DefaultCamelContext should also prevent to be called twice...  

See discussion here [http://www.nabble.com/How-to-prevent-routes-from-started-twice--td23983653.html]

Attached is a test-project. The core project simply defines a service that is exported in the web project. The applicationContext-services.xml creates the camelContext and the DispatcherServlet is used to export the service as remoteService.

Start the webapp with the jetty-run.cmd in the web project. The logfile is created in the web project.

The root web application context is started:
{noformat}
2009-06-15 11:43:24.771 DEBUG [main][org.apache.camel.spring.SpringCamelContext] - Publishing spring-event: \
   org.springframework.context.event.ContextRefreshedEvent[source=org.springframework.web.context.support.XmlWebApplicationContext@1d4e49a: \
   display name [Root WebApplicationContext]; startup date [Mon Jun 15 11:43:22 CEST 2009]; root of context hierarchy]
2009-06-15 11:43:24.771 DEBUG [main][org.apache.camel.spring.SpringCamelContext] - Starting the CamelContext now that the ApplicationContext has started
2009-06-15 11:43:24.771 INFO  [main][org.apache.camel.impl.DefaultCamelContext] - Apache Camel 1.6.1 (CamelContext:camel-amq) is starting
....
2009-06-15 11:43:25.245 INFO  [main][org.apache.camel.impl.DefaultCamelContext] - Apache Camel 1.6.1 (CamelContext:camel-amq) started
....
2009-06-15 11:43:25.372 INFO  [main][org.springframework.web.context.ContextLoader] - Root WebApplicationContext: initialization completed in 2420 ms
2009-06-15 11:43:25.435 INFO  [main][/camel-spring-problem-web] - Initializing Spring FrameworkServlet 'CamelSpringProblem'
2009-06-15 11:43:25.435 INFO  [main][org.springframework.web.servlet.DispatcherServlet] - FrameworkServlet 'CamelSpringProblem': initialization started
2009-06-15 11:43:25.435 INFO  [main][org.springframework.web.context.support.XmlWebApplicationContext] - Refreshing org.springframework.web.context.support.XmlWebApplicationContext@1ccbdf7: \
   display name [WebApplicationContext for namespace 'CamelSpringProblem-servlet']; startup date [Mon Jun 15 11:43:25 CEST 2009]; parent: \
   org.springframework.web.context.support.XmlWebApplicationContext@1d4e49a
...
{noformat}
And now the web application context for the servlet is started:
{noformat}
2009-06-15 11:43:25.530 DEBUG [main][org.apache.camel.spring.SpringCamelContext] - Publishing spring-event: \
   org.springframework.context.event.ContextRefreshedEvent[source=org.springframework.web.context.support.XmlWebApplicationContext@1ccbdf7: \
   display name [WebApplicationContext for namespace 'CamelSpringProblem-servlet']; startup date [Mon Jun 15 11:43:25 CEST 2009]; \
   parent: org.springframework.web.context.support.XmlWebApplicationContext@1d4e49a]
2009-06-15 11:43:25.530 DEBUG [main][org.apache.camel.spring.SpringCamelContext] - Starting the CamelContext now that the ApplicationContext has started
2009-06-15 11:43:25.530 DEBUG [main][org.apache.camel.management.DefaultInstrumentationAgent] - Registered MBean with objectname: \
   org.apache.camel:context=chaw389c/camel-amq,type=consumers,name=JmsConsumer(0x14bcb5c)
2009-06-15 11:43:25.530 INFO  [main][org.apache.camel.impl.DefaultCamelContext] - Apache Camel 1.6.1 (CamelContext:camel-amq) started
2009-06-15 11:43:25.530 INFO  [main][org.springframework.web.servlet.DispatcherServlet] - FrameworkServlet 'CamelSpringProblem': initialization completed in 95 ms
{noformat}

The ContextRefreshedEvent is published and causes the SpringCamelContext to handle the event and try to start the camel context again. But the start() in DefaultCamelContext calls super.start() and ServiceSupport detects correctly that the context is already started and does nothing but the call to startRoutes(...) is executed and this should no happen.

{code:title=DefaultCamelContext.java|borderStyle=solid}
public void start() throws Exception {
        super.start();
        
        // the context is now considered started (i.e. isStarted() == true))
        // starting routes is done after, not during context startup
        synchronized (this) {
            startRoutes(routes);
        }

        LOG.info(""Apache Camel "" + getVersion() + "" (CamelContext:"" + getName() + "") started"");
}
{code}


My favorite solution would be to add a flag that would prevent the camel context to be started from the ContextRefreshed event but allows to start the context manually from another user defined bean (possible by calling the start() method on SpringCamelContext. The shouldStartContext blocks both ways if set to false.",WinXP,,,,,,,,,,,,,,,,15/Jun/09 11:17;akuhtz;camel-spring-problem.zip;https://issues.apache.org/jira/secure/attachment/12462975/camel-spring-problem.zip,15/Jun/09 11:17;akuhtz;camelspringproblem-server-web.log;https://issues.apache.org/jira/secure/attachment/12462978/camelspringproblem-server-web.log,,,,2.0,,,,,,,,,,,,,,,,,,,2009-06-16 16:27:51.623,,,no_permission,,,,,,,,,,,,,76771,,,Sat Nov 21 11:59:10 UTC 2009,,,,,,,0|i01k3j:,7025,,,,,,,,,15/Jun/09 11:17;akuhtz;Sample project,15/Jun/09 11:17;akuhtz;The logfile that contains the messages that are referenced in the description,16/Jun/09 16:27;davsclaus;We had another Camel user report this on user forum.,17/Jun/09 10:20;davsclaus;Andreas are you using CXF with your project?,17/Jun/09 10:31;akuhtz;The sample project does not contain CXF and the problem exists (... in my real project I use CXF ...).,"17/Jun/09 11:55;davsclaus;trunk: 785564.

Andreas could you give it a test? You could grap the source and build yourself or wait for a SNAPSHOT to be deployed to the apache maven snapshot repo",17/Jun/09 13:02;davsclaus;1.x: 785578.,"17/Jun/09 13:07;akuhtz;Currently building trunk ... 

But one thing that I've already seen: The {{doStart()}} calls {{maybeDoStart()}} that checks {{getShouldStartContext()}} and this prevents the camel context to 
be started from another bean calling the {{start()}} on the camel context (Our usecase: We use camel on a richclient and must wait for the user to login before the camel context can be started. Therefore we have a bean that listens on a special event to start the camel context) if the {{shouldStartContext}} flag is set to false.
If {{doStart()}} would just be 
{code}
protected void doStart() throws Exception {
    super.doStart();
    if (eventEndpoint == null) {
        eventEndpoint = createEventEndpoint();
    }
}
{code}
this would work.

I'm not sure if this additional check in {{doStart()}} is needed in other cases but I haven't seen any reason....
","17/Jun/09 20:25;akuhtz;Claus, the fix works fine for me. However I think my comment (06:07 AM) about the {{doStart()}} method above should be added.",10/Jul/09 09:05;pledge;We found this issue too.  Running against the latest CI build of 1.6.x does seem to fix the problem.,10/Jul/09 09:09;davsclaus;Martin can you download and build from the source locally. The Apache maven repo for SNAPSHOTS can get ***** and return old .jars.,"10/Jul/09 09:19;pledge;Claus, we took a build from the Camel Hudson server (a problem with our corporate Maven proxy is preventing Camel building).  We've been running off it for most of this week and it seems fine.",21/Nov/09 11:59;davsclaus;Closing all 2.0M3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fixed the test error of FileExclusiveReadRenameStrategyTest,CAMEL-1710,12486601,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,15/Jun/09 07:55,21/Nov/09 11:59,14/Mar/19 02:42,18/Jun/09 15:45,,,,,,,,,,,2.0-M3,,,,,,,0,"The test is failed because of recent change in camel repository

org.apache.camel.component.file.FileExclusiveReadRenameStrategyTest.testPollFileWhileSlowFileIsBeingWritten =================
java.lang.AssertionError: mock:result Received message count. Expected: <1> but was: <0>
	at org.apache.camel.component.mock.MockEndpoint.fail(MockEndpoint.java:879)
	at org.apache.camel.component.mock.MockEndpoint.assertEquals(MockEndpoint.java:861)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:240)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:218)
	at org.apache.camel.component.file.FileExclusiveReadRenameStrategyTest.testPollFileWhileSlowFileIsBeingWritten(FileExclusiveReadRenameStrategyTest.java:90)

org.apache.camel.component.file.FileExclusiveReadRenameStrategyTest.testPollFileWhileSlowFileIsBeingWrittenWithTimeoutAndNoop =================
java.lang.AssertionError: mock:result Received message count. Expected: <1> but was: <0>
	at org.apache.camel.component.mock.MockEndpoint.fail(MockEndpoint.java:879)
	at org.apache.camel.component.mock.MockEndpoint.assertEquals(MockEndpoint.java:861)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:240)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:218)
	at org.apache.camel.component.file.FileExclusiveReadRenameStrategyTest.testPollFileWhileSlowFileIsBeingWrittenWithTimeoutAndNoop(FileExclusiveReadRenameStrategyTest.java:145)
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-06-15 08:30:07.952,,,no_permission,,,,,,,,,,,,,76772,,,Sat Nov 21 11:59:09 UTC 2009,,,,,,,0|i01k3b:,7024,,,,,,,,,15/Jun/09 08:30;davsclaus;the same mistake is in FileLockExclusiveReadLockStrategy also!,"18/Jun/09 15:45;njiang;trunk
http://svn.apache.org/viewvc?rev=784697&view=rev",21/Nov/09 11:59;davsclaus;Closing all 2.0M3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Dead Letter Channel - RedeliveryOption - delay clash with delay EIP,CAMEL-1705,12486380,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,14/Jun/09 06:10,21/Nov/09 11:59,14/Mar/19 02:42,14/Jun/09 06:52,2.0-M1,2.0-M2,,,,,,,,,2.0-M3,,,,,,,0,"Using RedeliveryOptions with the DeadLetterChannel in Java DSL you have a name clash with the delay EIP.
delay should be renamed to redeliverDelay to avoid this clash. ",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76773,,,Sat Nov 21 11:59:09 UTC 2009,,,,,,,0|i01k27:,7019,,,,,,,,,14/Jun/09 06:52;davsclaus;trunk: 784513.,21/Nov/09 11:59;davsclaus;Closing all 2.0M3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Java DSL for multicast, split, aggregate does not use block explicit",CAMEL-1697,12486473,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,11/Jun/09 09:56,21/Nov/09 11:58,14/Mar/19 02:42,12/Jun/09 09:00,2.0-M1,,,,,,,,,,2.0-M2,,,camel-core,,,,0,"When using one of the EIP that uses a nested route for sub processing, typically EIPs that does some sort of aggregation such as
- multicast (for aggregating a response)
- split
- aggregate
And maybe a few others

They should use pushBlock so the {{end()}} DSL to indicate end of sub route works correctly in Java DSL.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76774,,,Sat Nov 21 11:58:03 UTC 2009,,,,,,,0|i01k0f:,7011,,,,,,,,,"11/Jun/09 11:43;davsclaus;Got myself into knee deep on this one. I gotta it sorted exception that doTry .. doCatch and doFinally also need to use end() to indicate end of each of their block.
So you can end up with having to 2 x end() might not be intuitive

{code}
doTry()
   ...
doCatch()
   ..
end() // to end do catch
end() // to end do try
// now we can continue the route
{code}

I will look into allowing you to only set 1 end as when you are in a doCatch Camel knows there is a doTry also.","11/Jun/09 12:26;davsclaus;Okay looks like I got the doTry sorted as well

{code}
                from(""direct:start"")
                    .doTry()
                        .process(new ProcessorFail())
                        .to(""mock:result"")
                    .doCatch(Exception.class)
                        .process(new ProcessorHandle())
                    .doFinally()
                        .to(""mock:finally"")
                    .end()
                    .to(""mock:last"");
{code}

Works as expected now.
So mock:last is always invoked as it comes after the big try ... catch .. finally block.","12/Jun/09 08:19;davsclaus;I have decided to keep the old behavior. It does work best this way. So in Java DSL you have to use end() more consistently. Think of them as } in Java code.

Ah I added the special handling for doing end() in doTry .. doCatch .. doFinally. Only 1 end is needed.
{code}
from(""direct:start"")
                    .doTry()
                        .process(new ProcessorFail())
                        .to(""mock:result"")
                    .doCatch(Exception.class)
                         .process(new ProcessorHandle())
                     .doFinally()
                         .to(""mock:finally"")
                    .end() // to end try block
                    .to(""mock:last"");
{code}",12/Jun/09 09:00;davsclaus;trunk: 784038.,21/Nov/09 11:58;davsclaus;Closing all 2.0M2 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Refreshing a bundle with a camel-cxf route gives exception 'BeanFactory not initialized or already closed,CAMEL-1696,12486557,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,11/Jun/09 09:14,21/Nov/09 11:58,14/Mar/19 02:42,11/Jun/09 13:31,1.6.0,1.6.1,2.0-M1,,,,,,,,1.6.2,2.0-M2,,,,,,0,"smx@root:/> osgi/refresh 120
smx@root:/> Exception in thread ""SpringOsgiExtenderThread-16"" org.springframework.beans.factory.BeanCreationException: E
rror creating bean with name 'illustrationGenerationEndpoint': Initialization of bean failed; nested exception is java.l
ang.IllegalStateException: BeanFactory not initialized or already closed - call 'refresh' before accessing beans via the
ApplicationContext
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCap
ableBeanFactory.java:480)
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBea
nFactory.java:409)
at java.security.AccessController.doPrivileged(Native Method)
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapab
leBeanFactory.java:380)
at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:264)
at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegis
try.java:222)
at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:261)
at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185)
at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164)
at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListable
BeanFactory.java:429)
at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplic
ationContext.java:728)
at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.access$1600(AbstractDel
egatedExecutionApplicationContext.java:68)
at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext$4.run(AbstractDelegated
ExecutionApplicationContext.java:343)
at org.springframework.osgi.util.internal.PrivilegedUtils.executeWithCustomTCCL(PrivilegedUtils.java:85)
at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.completeRefresh(Abstrac
tDelegatedExecutionApplicationContext.java:308)
at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor$Co
mpleteRefreshTask.run(DependencyWaiterApplicationContextExecutor.java:138)
at java.lang.Thread.run(Thread.java:595)
Caused by: java.lang.IllegalStateException: BeanFactory not initialized or already closed - call 'refresh' before access
ing beans via the ApplicationContext
at org.springframework.context.support.AbstractRefreshableApplicationContext.getBeanFactory(AbstractRefreshableA
pplicationContext.java:153)
at org.springframework.context.support.AbstractApplicationContext.getBeanDefinitionNames(AbstractApplicationCont
ext.java:929)
at org.apache.cxf.configuration.spring.ConfigurerImpl.initWildcardDefinitionMap(ConfigurerImpl.java:77)
at org.apache.cxf.configuration.spring.ConfigurerImpl.addApplicationContext(ConfigurerImpl.java:223)
at org.apache.cxf.bus.spring.BusWiringBeanFactoryPostProcessor.updateBusReferencesInContext(BusWiringBeanFactory
PostProcessor.java:118)
at org.apache.camel.component.cxf.spring.CxfEndpointBeanDefinitionParser$CxfSpringEndpointBean.setApplicationCon
text(CxfEndpointBeanDefinitionParser.java:115)
at org.springframework.context.support.ApplicationContextAwareProcessor.postProcessBeforeInitialization(Applicat
ionContextAwareProcessor.java:70)
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeIni
tialization(AbstractAutowireCapableBeanFactory.java:350)
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireC
apableBeanFactory.java:1331)
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCap
ableBeanFactory.java:473)
... 16 more",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-11-21 11:58:03.101,,,no_permission,,,,,,,,,,,,,76775,,,Sat Nov 21 11:58:03 UTC 2009,,,,,,,0|i01k07:,7010,,,,,,,,,"11/Jun/09 12:56;njiang;When call the ConfigurerImpl.addApplicationContext(ctx) to add a new application context, we need to check if the ConfigureImpl's ApplicationContext is closed.
Since if we closed the application context which the ConfigureImpl has and add a new application context to it, we will got the exception of ""BeanFactory not initialized or already closed"".

I work around this issue by clean up the BusFactory default factory when the application context is closed, but we still need to fix this issue in CXF[1].

[1] https://issues.apache.org/jira/browse/CXF-2279 ","11/Jun/09 13:31;njiang;Clean up the BunFactory's default bus factory when the application context is stopped.
trunk
http://svn.apache.org/viewvc?rev=783743&view=rev
camel-1.x 
http://svn.apache.org/viewvc?rev=783745&view=rev",21/Nov/09 11:58;davsclaus;Closing all 2.0M2 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JMS-Headers are ignored in Producer,CAMEL-1689,12486579,12486201,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,siegfriedwirth,siegfriedwirth,09/Jun/09 15:49,21/Nov/09 11:59,14/Mar/19 02:42,01/Jul/09 12:46,2.0-M1,,,,,,,,,,2.0-M3,,,camel-jms,,,,0,"Camel jms producer ignores some JMSHeaders. For example the header JMSPriority is ignored - due to the comment in the code, because it is set by the producer. But it should not only be set by the produer due to the received message, it should also be possible to set a priority using the JMSPriority header on the consumer. (See also the option preserveMessageQos on the jms endpoint - if every JMSHeader is ignored by the producer it is impossible to set Qos-Properties on the message.)

The reason for the bug is in org.apache.camel.component.jms.JmsBinding#appendJmsProperty. 

The follwoing JMS message headers are useful for sending messages and therefore should be copied to the jms message:
- JMSDestination
- JMSDeliveryMode
- JMSExpiration
- JMSPriority
- JMSMessageID
- JMSTimestamp
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-06-10 08:15:14.905,,,no_permission,,,,,,,,,,,,,76776,,,Sat Nov 21 11:59:09 UTC 2009,,,,,,,0|i01jyn:,7003,,,,,,,,,"10/Jun/09 08:15;davsclaus;Thanks for reporting.

James Strachan had a look and came up with:

[10:00]  <jstrachan> davsclaus: yeah, looks like we could let folks specify those headers; it'll be a tad complex to implement given the complex code path in JmsProducer - and the fact that we wanna clear down the fact that we are customizing the QoS on the JmsTemplate after we have sent them (so we might wanna create a new temporary JmsTemplate if any of the QoS headers are specified on the message) - but its possible, yes


I put it on the roadmap for Camel 2.1.
But maybe we take a stab at it before so it will be in 2.0.",29/Jun/09 06:58;davsclaus;Looks like Spring JMS Template have default configuration for eg. JMSPriority = 4. So even if you set the JMSPriority on the javax.jms.Message object it will be disregarded and Spring uses its default value of 4 instead.,29/Jun/09 07:02;davsclaus;Added unit test for starters: 789236.,30/Jun/09 11:08;davsclaus;Creating a temporary JmsTemplate is the only option if user is having custom QoS headers,"01/Jul/09 06:19;davsclaus;Looks like I found a glitch in camel-jms.

Its possible with Spring JMSTemplate to use reuse template but sending custom values for
- JMSDeliveryMode
- JMSPriority
- JMSExpiration

That requires however currently that the option {{PreserveMessageQos}} is enabled on the endpoint.","01/Jul/09 07:58;davsclaus;We can set the following headers now requiring that you enable the {{preserveMessageQos=true}} on the endpoint to take over:
- JMSDeliveryMode
- JMSExpiration
- JMSPriority

Otherwise the QoS of the endpoint is used.","01/Jul/09 08:22;davsclaus;JMSDestination is *not* possible to set in a IN header as it can cause jms routing to go into looping such as:

{code}
from(""jms:queue:foo"").to(""jms:queue:bar"")
{code}

In this case when we receive a message from *foo* then it will populate a Camel message that contains the details from the javax.jms.Message and thus also {{JMSDestination}}.
And it will be {{queue://foo}}. So when the message is routed to the {{to}} endpoint then it will mistakenly send it back to itself, instead of using the {{queue:bar}} destination defined on the endpoint.


","01/Jul/09 09:01;davsclaus;To use a different JMSDestiantion you can do
{code}
exchange.setProperty(""JMSDestination"", destination);
{code}

Maybe we can support a special header to override the destination as a string name

To send it to bar instead of the regular destination
{code}
exchange.getIn().setHeader(JmsConstants.JMS_DESTINATION_NAME, ""activemq:queue:bar"");
{code}
as its often easier to work with String names for JMS destinations than javax.jms.Destination objects.",01/Jul/09 12:46;davsclaus;trunk: 790144.,"01/Jul/09 13:29;hadrian;@Claus, component specific properties is a general problem that exists with other components.  Since very few components have a XyzConstants class, but pretty much all of them have a XyzComponent I am thinking of putting the configuration specific property/headers in the XyzComponent class and make it consistent across all components.

What do you think?","01/Jul/09 13:33;davsclaus;[15:33]  <cibsen> yeah a good idea to have it on component instead
[15:34]  <cibsen> and the xxxConstants is introduced in 2.0 so we could change it before final
",07/Aug/09 05:11;davsclaus;trunk: 801884 fixing setting JMSPriority with a value as zero is accepted as well,21/Nov/09 11:59;davsclaus;Closing all 2.0M3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Endpoint.getParticipant should return Endpoint.getUser() if participant is null.,CAMEL-1676,12486394,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,edward.campbell,edward.campbell,05/Jun/09 20:54,21/Nov/09 11:58,14/Mar/19 02:42,08/Jun/09 15:45,1.6.1,2.0-M1,,,,,,,,,1.6.2,2.0-M2,,camel-xmpp,,,,0,"The participant should default to the user  if the participant is null.

{code:java}
    public String getParticipant() {
        return participant != null ? participant : getUser();
    }
{code}

",,,300,300,,0%,300,300,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-06-06 11:28:19.793,,,no_permission,,,,,,,,,,,,,76777,,,Sat Nov 21 11:58:02 UTC 2009,,,,,,,0|i01jvr:,6990,,,,,,,,,"06/Jun/09 11:28;davsclaus;Where exactly do you want this change?

And what is it good for?","08/Jun/09 12:47;edward.campbell;The change should replace the getParticipant method in org.apache.camel.component.xmpp.XmppEndpoint.java
Without the change, the participant needs to be specified for all XMPP connections, which is not desirable, since participant is an optional parameter.","08/Jun/09 15:45;davsclaus;trunk: 782681.
1.x: 782682.",21/Nov/09 11:58;davsclaus;Closing all 2.0M2 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect enum name for WaitForTaskToComplete enum,CAMEL-1671,12486546,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,joegottman,joegottman,04/Jun/09 23:03,21/Nov/09 11:58,14/Mar/19 02:42,05/Jun/09 02:42,2.0-M1,,,,,,,,,,2.0-M2,,,camel-core,,,,0,"The WaitForTaskToComplete  enum has 3 possible values:  Newer, IfReplyExpected, Always.  The first one should be Never, with a ""v"" as the third letter instead of a ""w"".
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-06-05 02:42:31.127,,,no_permission,,,,,,,,,,,,,76778,,,Sat Nov 21 11:58:02 UTC 2009,,,,,,,0|i01jun:,6985,,,,,,,,,"05/Jun/09 02:42;njiang;trunk

http://svn.apache.org/viewvc?rev=781892&view=rev",05/Jun/09 06:00;davsclaus;There are some samples in camel-spring that uses the enum. I will fix it.,05/Jun/09 06:13;davsclaus;trunk: 781920.,21/Nov/09 11:58;davsclaus;Closing all 2.0M2 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
thread() and File Components,CAMEL-1670,12486548,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,joegottman,joegottman,04/Jun/09 22:57,21/Nov/09 11:58,14/Mar/19 02:42,08/Jun/09 07:04,2.0-M1,,,,,,,,,,2.0-M2,,,camel-core,,,,0,"I just experimented with adding calls to thread(10) to my route to make it multithreaded.  This definitely speeds up by route, but it keeps throwing java.nio.channels.OverlappingFileLockException  errors and leaving lock files behind it.  The start of my route looks like

 

from(""file:\\startDirectory?move=endDirectory"")
.threads(10)
.bean(""myBean"", ""myMethod"")

Afterwards, my route ran successfully but an OverlappingFileLockException was thrown for every file that was read and all the lock files were left in my source directory.",Microsoft Windows XP,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-06-05 06:03:53.99,,,no_permission,,,,,,,,,,,,,76779,,,Sat Nov 21 11:58:02 UTC 2009,,,,,,,0|i01juf:,6984,,,,,,,,,"05/Jun/09 06:03;davsclaus;Hi Joe

I assume its the *trunk* you try? As 2.0m1 is 2 months old.

Could you try different combinations of the *readLock* on the file endpoint.
See this wiki page for possible values:
http://camel.apache.org/file2.html

And also try with *noop=true* instead of *move=endDirectory* to avoid the last move operation.

All in all to help pin point where Windows have a problem with lock files.

And could you paste the stacktrace.","06/Jun/09 06:08;davsclaus;From Joe:

OK.  My process reads a file, does some work on it, writes it to output,
then saves the results to a database.  If the same file is processed twice
there is a database error.

I used the same route and data with readLock equal to markerFile, fileLock,
and rename.  In each case, all the data made it to the database as expected.
With markerFile, an OverlappingFileLockException  was thrown for each file,
each file was moved, and there was a marker file left behind for each file.

With fileLock, nothing ever got moved, so my process was stuck trying and
failing to process the same files over and over again (since an error was
thrown when the same file was saved to the database twice).

With rename, everything got moved, but the second time a file was accessed a
database file was thrown and the file completely disappeared.  If I let my
process continue long enough all the output files went away.

  I'm pretty sure what's happening is a race condition between the one
Camel thread moving a file and another one reading it again.  You need to
hold you lock until Windows is finished moving the file.
","06/Jun/09 06:11;davsclaus;Joe, thanks for the report.

Could you *please* paste the stacktrace.

And you could much likely remedy this issue by instructing the threads to wait for the task to complete.
{code}
.threads(10). waitForTaskToComplete(Always)
{code}","06/Jun/09 11:50;davsclaus;> OK. My process reads a file, does some work on it, writes it to output,
> then saves the results to a database. If the same file is processed twice
> there is a database error.

Can you show the route that does this? What do you mean writes it to output? Which output?

We have server farms that tests Camel on all sorts of platforms, and of course also incl. windows and we have never had the exception you say you have.
But we need more accurate information to be able to construct an unit test that resembles what you do to be able to reproduce the issue on Windows.

So please help provide the details.","06/Jun/09 12:05;davsclaus;How do you create the files to be used during testing?

I just remembered that you cannot on some platforms in the same JVM write a file and obtains exclusive locks on the file.
So basically what is needed is to test by having some other system produce the files for unit testing. Eg create another JVM that drops in continuously new files.


","06/Jun/09 13:15;davsclaus;I got it reproduced now.

Will look into it this weekend.","07/Jun/09 08:21;davsclaus;This is a first cut for a fix. It resolves the issue for the markerFile lock (the default one).

But we are considering a more generic solution for registering in progress exchanges. For instance there is a ticket about idempotent consumer EIP pattern that could also benefit from this.

trunk: 782345.","08/Jun/09 07:04;davsclaus;Now fixed for all lock types etc.

Thanks for reporting Joe.

trunk: 782544.",08/Jun/09 08:48;davsclaus;And the camel-ftp component fixed as well: 782560.,21/Nov/09 11:58;davsclaus;Closing all 2.0M2 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Spring BeanPostProcessors do not work on beans which are used in Camel route builders ,CAMEL-1663,12486385,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,pledge,pledge,31/May/09 10:52,21/Nov/09 11:58,14/Mar/19 02:42,03/Jun/09 12:05,1.5.0,1.6.0,1.6.1,2.0-M1,,,,,,,2.0-M2,,,camel-spring,,,,0,Spring PostProcessors stop working for beans which are injected into Camel route builders.  See attached test cases showing processor breaks as soon as injected into a route builder.,,,,,,,,,,,,,,,,,31/May/09 10:56;pledge;camel-1663.zip;https://issues.apache.org/jira/secure/attachment/12462967/camel-1663.zip,,,,,1.0,,,,,,,,,,,,,,,,,,,2009-06-02 13:51:29.996,,,no_permission,,,,,,,,,,,,,76780,,,Sat Nov 21 11:58:02 UTC 2009,,,,,,,0|i01jsv:,6977,,,,,,,,,31/May/09 10:56;pledge;Test case is written for 1.6.0 which is the version I am using.  I have run the tests against 2.0-M1 and get the same result.  I have left the code in the POM and tests so the two can be toggled.,"02/Jun/09 13:51;davsclaus;This is a hard one to get fixed.

Namespace handlers in Spring is like a 2nd class citizen so the CamelBeanPostProcessor is not registered like the regular post processors as its done from a namespace handler. And then Spring just goes blank and denies running post processors as the initial number of post processors != current number of post processors.

Then you get the dreadful 'bean X is not eligible for post processing'.

Its kinda like a catch-22 situation. I got a few more ideas to find a solution.","03/Jun/09 06:26;davsclaus;Okay finally looks like I am on track now.

Spring is really a bit odd, as it disable post processing if you use its application context to lookup certain beans.
That ended up in a circular reference as CamelContext automatic creates a CamelBeanPostProcessor, and the CamelBeanPostProcessor have a reference to the CamelContext it belongs to. And as this id done while Spring namespace handler creates the CamelContext it regard it as a circular reference. And then the ballpark for post processors changes. And that looks like the case for the Autowired and other post processors for the @annotation stuff do not kick in.

To remedy this problem I use a reference to the CamelContext bean id from the CamelBeanPostProcessor (just a String) then we do not have a circular reference.

As I got a bit of experiment code I need to work a bit more on it to get a polished and working solution.
With the current code however I got both Spring and Camel to be happy and have their post processors work side by side and being able to setup all the @annotations people insert on their POJO classes and the Camel RouteBuilders as well.


","03/Jun/09 09:27;davsclaus;trunk: 781314

The {{spring-event}} component has a flaw. I will look into it but if its to complex to get working I would consider ditching it.
Much more important to get the @annotations to work.

Martin I have applied it on trunk only. If you have the time please try testing it in your system.","03/Jun/09 12:05;davsclaus;And the last part with the spring-event fix

trunk: 781349.","05/Jun/09 10:18;davsclaus;And this unit test in camel-spring demonstrating the mixed usage of annotations in same POJO with Spring and Camel annotations

trunk: 781974.
","05/Jun/09 10:37;davsclaus;Camel 1.x *before* fix
{code}
[                          main] ClassPathXmlApplicationContext INFO  Bean 'org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0' is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[                          main] ClassPathXmlApplicationContext INFO  Bean 'org.springframework.transaction.config.internalTransactionAdvisor' is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[                          main] DefaultCamelContext            INFO  JMX enabled. Using InstrumentationLifecycleStrategy.
[                          main] ClassPathXmlApplicationContext INFO  Bean 'annotatedRoute' is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[                          main] DriverManagerDataSource        INFO  Loaded JDBC driver: org.hsqldb.jdbcDriver
[                          main] ClassPathXmlApplicationContext INFO  Bean 'dataSource' is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[                          main] ClassPathXmlApplicationContext INFO  Bean 'txManager' is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[                          main] ClassPathXmlApplicationContext INFO  Bean 'PROPAGATION_REQUIRED' is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[                          main] ClassPathXmlApplicationContext INFO  Bean 'camel' is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[                          main] ClassPathXmlApplicationContext INFO  Bean 'camel' is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
{code}

Camel 2.0 *after* fix:
{code}
2009-06-05 12:36:31,711 [main           ] INFO  ClassPathXmlApplicationContext - Bean factory for application context [org.springframework.context.support.ClassPathXmlApplicationContext@5c98f3]: org.springframework.beans.factory.support.DefaultListableBeanFactory@75db37
2009-06-05 12:36:31,802 [main           ] INFO  ClassPathXmlApplicationContext - Bean 'org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0' is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2009-06-05 12:36:31,809 [main           ] INFO  ClassPathXmlApplicationContext - Bean 'org.springframework.transaction.config.internalTransactionAdvisor' is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
{code}

Notice that with the fix all the beans used by the application as such can be post processed.
In Camel 1.x many of the beans *cannot* be.",21/Nov/09 11:58;davsclaus;Closing all 2.0M2 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Memory leak in File component when using batch processing,CAMEL-1652,12486445,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,chris@die-schneider.net,chris@die-schneider.net,27/May/09 21:45,16/Jun/09 03:06,14/Mar/19 02:42,28/May/09 05:05,2.0-M1,,,,,,,,,,2.0-M2,,,camel-core,,,,0,"See http://www.nabble.com/convertBodyTo-heap-problem-to23743181.html

When using a file endpoint with sorting as start of a route then the files are processed in a batch. In the current implementation this means a List of exchanges is created and given to the batch processing. The list is then traversed and each exchange is processed. This means the list references all exchanges during the whole batch processing. So none of the exchanges can be collected by the garbage collector till the whole batch is fully processed.

The problem really becomes bad when the exchanges are large. For example if you use convertBodyTo(String.class) and the files are large. If you have 100 files with 10 MB each then camel will consume 1 GB of heap. What is even worse is that it seems the processing simply stops when the heap is full. 

I have written a small test that shows the problem and a patch that corrects this problem. I hope this gets into 2.0-M2 as this is a quite serious bug. ",,,,,,,,,,,,,,,,,27/May/09 21:47;chris@die-schneider.net;camel-core.patch;https://issues.apache.org/jira/secure/attachment/12462966/camel-core.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2009-05-27 23:57:20.345,,,no_permission,,,,,,,,,,,,,76781,,,Thu May 28 22:16:13 UTC 2009,,,Patch Available,,,,0|i01jqf:,6966,,,,,,,,,27/May/09 21:47;chris@die-schneider.net;Test and patch for this issue,"27/May/09 23:57;njiang;@claus

I think this issue is introduced by the recent new feature of BatchConsumer CAMEL-1640, you may need to recheck the components of mail, ibatis, jpa.  ","28/May/09 04:18;davsclaus;@willem

The bug has been there before CAMEL-1640, it used a List for quite some time. But glad we discovered it and have a fix for it.

Yes it should be applied to the other listed here:
http://camel.apache.org/batch-consumer.html
","28/May/09 04:35;davsclaus;Running the unit test for 30 sec on my laptop: 

*Before patch:* usage = 42mb
*After patch:* usage = 5mb

","28/May/09 04:40;davsclaus;Not critical, as there is a workaround by clearing the exchange body after usage.","28/May/09 05:05;davsclaus;trunk: 779434.

Thanks Christian for the patch and unit test.

I have applied the fix for the other BatchConsumer components as well.",28/May/09 22:16;chris@die-schneider.net;Thanks for committing the patch,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DefaultHttpBinding prevents response streaming,CAMEL-1651,12486135,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,mrt1nz,mrt1nz,27/May/09 15:05,21/Nov/09 11:58,14/Mar/19 02:42,28/May/09 09:33,1.6.1,2.0-M1,,,,,,,,,1.6.2,2.0-M2,,camel-http,,,,0,http://www.nabble.com/DefaultHttpBinding-prevents-response-streaming-to23742014s22882.html,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-05-28 05:11:43.653,,,no_permission,,,,,,,,,,,,,76782,,,Sat Nov 21 11:58:02 UTC 2009,,,,,,,0|i01jq7:,6965,,,,,,,,,"28/May/09 05:11;davsclaus;Yeah CAMEL-1327 could have been better as it could have checked the content type before reading into memory :)

Thanks for reporting.","28/May/09 09:33;davsclaus;trunk: 779489.
1.x: 779508.",21/Nov/09 11:58;davsclaus;Closing all 2.0M2 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Race condition in IdempotentConsumer,CAMEL-1650,12486450,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ohecker,ohecker,27/May/09 12:38,21/Nov/09 11:58,14/Mar/19 02:42,07/Jun/09 11:23,2.0-M1,,,,,,,,,,2.0-M2,,,camel-core,,,,0,"A possible possible race condition exists in the IdempotentConsumer implementation:
The code first checks in the MessageIdRepository if the message was already processed. If not then it processes the message and
afterwards adds the id to the repository. (See also http://issues.apache.org/activemq/browse/CAMEL-1451). There is no locking
between the check with ""contains"" and the insert with ""add"". So if multiple threads/instances try this in parallel for the same id, then
it might happen that more than one finds the id not yet contained in the repository and the same message is processed multiple
times.

I enclose an extended version of IdempotentConsumerTest which illustrates the problem.
It is important to note that even if the test demonstrates the issue with an MemoryIdempotentRepository a solution should also
address the case of a database based respository in a clustered environment. So this might imply that some locking mechanism on the
database is required.",,,,,,,,,,,,,,,,,27/May/09 12:40;ohecker;IdempotentConsumerTest.java;https://issues.apache.org/jira/secure/attachment/12462965/IdempotentConsumerTest.java,,,,,1.0,,,,,,,,,,,,,,,,,,,2009-05-27 13:23:50.2,,,no_permission,,,,,,,,,,,,,76783,,,Sat Nov 21 11:58:02 UTC 2009,,,,,,,0|i01jpz:,6964,,,,,,,,,27/May/09 12:40;ohecker;Extended version of the unit test which shows the problem.,"27/May/09 13:23;davsclaus;Thanks for the unit test.

The problem is a bit chicken and egg. Should you add the id before you start process the message or afterwards?
If you do it before then you have the issue what if the processing failed? Should the id be removed or should it stay?

Maybe we should expose options so end user can configure
- before
- after
- and if id should be removed in case of failure

","27/May/09 14:56;ohecker;Yes, I see the problem. The way how it is implemented at the moment assures an ""at least once"" quality of service.
Assuming that race conditions will not occur quite often this seems to be OK for most cases.
I was testing this because I am looking for a way to manage scheduled jobs (via Camel Quartz) in a clustered szenario
running the same camel config on multiple host in parallel. I am looking for a way to assure that even if the job is triggered
on every host only one of them gets actually processed. Due to the timers running more or less synchronous on all hosts
I am expecting that race conditions might occur quite often. (I actually also investigated in using the cluster features of Quartz
itself but found it not working within Camel Quartz)

Removing the id in case of a failure will not work if there there is some (technical) problem which prevents from deleting the entry
in the database. So if we crash after inserting in the database but before we could deliver to the destination then the message then
even when retrying later the filter will filter out the message.

I was thinking of some intermediate state to be stored in the repository to serve as a lock for the time between ""contains"" and ""add"".
But this requires quite some effort concerning coordination and detecting failed instances in the cluster.

So the Interface of IdempotentRepository might be something like

isProcessedAndLockIfNot (the former ""contains""): 
  - Returns true if the id is contained in state ""processed""
  - Returns false if id is not contained. Will insert id in state ""locked""
  - if id is contained in state ""locked"" then the call will be blocked until
      - the id is either removed or goes to state processed, then proceed as above   or
      - a timeout is reached which indicates that the process which set the lock possibly crashed; in this case the lock will be stolen and false will be returned

setProcessed (the former ""add""):
  - set state of ID to ""processed""

unlock (new):
  - delete id from the repository;

It might even be necessary to keep track of who aquired a lock to avoid messing up if the locker tries to release a lock after the timeout occurred.

In any case this requires quite some interface and coding changes (and some more thoughts about how to do it).
","05/Jun/09 14:46;davsclaus;We could add a 1st cache that is a JVM only memory pool for the in flight exchanges.
So if there is a duplicate sent while another is currently being processed it can be found in the memory pool and be rejected.

","05/Jun/09 18:27;a_abes@yahoo.com;Sounds that what you're looking for is a bit like transaction management - you want to make sure that the Quartz event gets processed exactly once.
If the UnitOfWork provided a means to register  ""start"" synchronization objects, with access to the Exchange then you could potentially do something like:
 - sync.start() - extract the message ID and perform duplication check against DB (or memory) and implement your decision algorithm, potentially delaying until timeout. Potentially polling for completion against the DB. In a memory based approach, you could get notified when the lock on the process is signaled.

 -sync.onFailure / onComplete would update the database (memory) with the status and continue.

this basically would provide a means to have an ""exclusive"" unit of work...
","05/Jun/09 19:43;ohecker;Andi summarized quite exaclty what I am looking for. I think this is how interaction with the IdempotentRepository should look like to make shure it works in a parallel processing scenario.
The old implementation (pre CAMEL-1451) had the issue that the message gets lost when the route fails after checking the repository.
The current implentation has the issue that there might be duplicates because identical messages are not detected unless the first one gets processed completely. 

The solution with the in memory cache might improve the situation but will have no effect in my main use case (Quartz trigger duplicates) because here the duplicate messages occur on always on different machines. So in this scenario a synchronization via database is required to make it work. 
","07/Jun/09 09:49;davsclaus;Oliver, thanks for the unit test.

I have reproduced the problem, and working with CAMEL-1679 on a solution.","07/Jun/09 10:02;davsclaus;I added the *remove* operation to the idempotent interface so you can implement your DB based solution.

And changed the behavior to add the key before processing. And in case of a failure it will invoke the remove operation so you can process the failed message at a later stage.


{code}
public interface IdempotentRepository<E> {

    /**
     * Adds the key to the repository.
     *
     * @param key the key of the message for duplicate test
     * @return <tt>true</tt> if this repository did <b>not</b> already contain the specified element
     */
    boolean add(E key);

    /**
     * Returns <tt>true</tt> if this repository contains the specified element.
     *
     * @param key the key of the message
     * @return <tt>true</tt> if this repository contains the specified element
     */
    boolean contains(E key);

    /**
     * Removes the key from the repository.
     *
     * @param key the key of the message for duplicate test
     * @return <tt>true</tt> if the key was removed
     */
    boolean remove(E key);
}
{code}


","07/Jun/09 11:01;ohecker;Thanks Claus.
I was in the meantime locally working on a solution as I had drafted it above. It would be a major change in the IdempotentRepository interface. Also the interface
would no longer be as easy as the ""Set-alike"" interface of the current IdempotentRepository.
 
The main idea is that the key might be first ""reserved"" in the repository which also includes a timeout and might lateron either be ""confirmed"" or ""released"".

I already got a changed MemoryIdempotentRepository working and an IdempotentConsumer implementation. For the
FileConsumer it is not that straightforward as the lockHandle Object needs to be attached to the Exchange due to the asynchronous processor.

Probably CAMEL-1679 provides a more generic solution for this and similar requirements.

I just want to note that your approach with the {{remove}} method might result in loss of the message if processing the message fails after executing {{add}} 
and removing the key from the repository with {{remove}} also fails. Especially when using a DB based Repository this might happen when loosing the network
connection when processing the message.

For completeness here is the IdempotentRepository Interface as I was experimenting with:
{code}
public interface IdempotentRepository<E> {
    /**
     * Reserves a given key in the repository.
     * <ul>
     * <li>If the key is neither reserved nor confirmed then the key will be reserved and an Object will be returned which serves as handle for either confirming or
     * releasing the key lateron.</li>
     * <li>If the key is already confirmed then <code>null</code> will be returned immediately.</li>
     * <li>If the key is reserved then the method will block until
     *   <ul>
     *     <li>the key is confirmed by the actor which reserved the key</li>
     *     <li>the key is released by the actor which reserved the key</li>
     *     <li>the reservation of the original actor timed out</li>
     *   </ul>
     *   In all cases the method will then try to reserve the key and react as indicated above.</li>
     * </ul>
     * On completion of the method it is guaranteed that
     * <ul>
     *   <li>the key was successfully reserved, indicated by a returned lock handle object, or</li>
     *   <li>the key was already confirmed, indicated by returning <code>null</code></li>
     * </ul>     
     * 
     * @param key The key which should be reserved in the repository.
     * @param timeOut Indicates how long the key is locked before the lock might be broken by another actor requesting to reserve the same key. This is
     * a minimum time and the lock might still be valid even after the timeout.
     * @return a lock handle object in case of successful reservation; <code>null</code> is the key was already confirmed beforehand
     */
    Serializable reserveKey(E key, int timeOut);

    
    /**
     * Releases the key in the repository which is represented by the given lock handle object.
     * The key is then available again for reservation by this or another actor.
     * If the lock handle object is unknown (which might also be caused by a timed out lock or the lock already being released or confirmed)
     * no action is taken.
     * @param lockHandle the lock handle object which was returned when reserving the key via the {@link #reserveKey(Object,int)} method.
     */
    void releaseKey(Serializable lockHandle);

    /**
     * Confirms the key in the repository which is represented by the given lock handle object.
     * @param lockHandle the lock handle object which was returned when reserving the key via the {@link #reserveKey(Object,int)} method.
     * @throws CamelException  if the lock handle object is unknown (which might also be caused by a timed out lock or the lock already
     * being released or confirmed) 
     */
    void confirmKey(Serializable lockHandle) throws CamelException;
    
}
{code}

If I don't get any other message from you I will stop working on this for now.","07/Jun/09 11:23;davsclaus;trunk: 782371.

Oliver we now eagerly adds to repository to be able to detect duplications of in progress exchanges.

Camel also provides a jpa based repository you can use. Check out camel-jpa and some of the unit tests there.

","07/Jun/09 18:38;davsclaus;Oliver

Sorry I did not see you comments before I marked this as fixed. I had prepared by pressing fixed, and was running one last final test and waiting for the SVN rev. no.

You have a good idea about the confirm key. So I have created a ticket for this issue. See the sub ticket.
I do think that adding the confirm to the SPI interface you will be able to implement your timeout feature.

But lets take that discussion at the sub ticket.","08/Jun/09 05:51;davsclaus;I add the confirm key to the repo interface. This allows you to be able to impl. your timeout version.

{code}
MyRepo repo = new MyRepo();
repo.setTimeout(20000);
{code}

And then use MyRepo with the idempotent consumer EIP.

Camel will eagerly add and then when the exchange is done call the confirm.
In case of failure it will call the remove instead.

I also added an {{eager}} option so you can turn it on/off. Its enabled by default.
If disabled then Camel will add when the exchange is complete.

trunk: 782534.",21/Nov/09 11:58;davsclaus;Closing all 2.0M2 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-restlet - Should be InOut exchange pattern,CAMEL-1646,12486537,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,25/May/09 12:08,21/Nov/09 11:58,14/Mar/19 02:42,25/May/09 12:16,1.6.1,2.0-M1,,,,,,,,,1.6.2,2.0-M2,,camel-restlet,,,,0,camel-restlet creates exchanges that are {{inOnly}}. But they should be {{InOut}}.,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76784,,,Sat Nov 21 11:58:02 UTC 2009,,,,,,,0|i01jp3:,6960,,,,,,,,,"25/May/09 12:16;davsclaus;trunk: 778399
1.x: 778401",21/Nov/09 11:58;davsclaus;Closing all 2.0M2 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Can't set the outgoing mail's content-type and charset,CAMEL-1645,12486533,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,rohitbrai,rohitbrai,25/May/09 09:40,21/Nov/09 11:58,14/Mar/19 02:42,11/Jun/09 05:47,1.6.0,1.6.1,2.0-M1,,,,,,,,1.6.2,2.0-M2,,camel-mail,,,,0,"The document at http://camel.apache.org/mail.html suggests that contentType header should set the Content-Type of the out going mail, but that doesn't work.

I am trying to set the content type of the mail I send using the contentType header. That doesn't work, but it works if I put the contentType in the endpoint uri. i.e. - 

            <camel:setHeader headerName=""contentType""> 
                <camel:constant>text/html</camel:constant> 
            </camel:setHeader> 

Has no effect, while this works - 
             smtp://rohitr@xyzab.pramati.com?password=32478hds78&contentType=text/html 

But I am not able to set the charset and it always takes us-ascii 

So for the mail the content type header comes as - 
Content-Type: text/html; charset=us-ascii

I tried using 
            <camel:setHeader headerName=""contentType""> 
                <camel:constant>text/html;charset=UTF-8</camel:constant> 
            </camel:setHeader> 

and also 

            <camel:setHeader headerName=""content-type""> 
                <camel:constant>text/html;charset=UTF-8</camel:constant> 
            </camel:setHeader> 

and 
smtp://rohitr@xyzab.pramati.com?password= 32478hds78&contentType=text/html;charset=UTF-8 

but nothing works",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-05-27 12:43:11.478,,,no_permission,,,,,,,,,,,,,76785,,,Sat Nov 21 11:58:02 UTC 2009,,,,,,,0|i01jov:,6959,,,,,,,,,"27/May/09 12:43;davsclaus;trunk: 779143.
1.x: 779149.","10/Jun/09 10:36;rohitbrai;The change works only in case of non multipart message i.e. message without alternative message body and without attachments, but in case of multipart messages the following code is executed -

protected void addBodyToMultipart(org.apache.camel.Message camelMessage, MailConfiguration configuration, MimeMultipart activeMultipart) throws MessagingException {
        BodyPart bodyMessage = new MimeBodyPart();
        bodyMessage.setContent(camelMessage.getBody(String.class), configuration.getContentType());
        activeMultipart.addBodyPart(bodyMessage);
 }

which takes contentType from configuration and doesn't respect the header passed.

We should use the contentType header value if passed to set the contentType and fall back to configuration.getContentType only if required.

Will that take care of applying the charset to the body, if the contentType header is defined as - text/html; charset=UTF-8?","10/Jun/09 11:29;davsclaus;Rohit thanks for reporting.

Arrrrggghh why is that every API that SUN does it terrible low level and a pain to work with.

Yeah I have to a bit of refator to let the I put the content on this part of the mime message being able to detect content type and set it correctly as either text or content and handle the charset as well :) ","11/Jun/09 05:46;davsclaus;trunk: 783632.
1.x : 783638.

I did a fix on 1.x that did not involve API changes. In 2.0 I did cleanup the API a bit.

Rohit can you test it?",21/Nov/09 11:58;davsclaus;Closing all 2.0M2 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Splitter with streaming - GenericFile is not detected when creating the java.util.Scanner,CAMEL-1642,12485712,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,24/May/09 08:15,21/Nov/09 11:58,14/Mar/19 02:42,24/May/09 08:29,2.0-M1,,,,,,,,,,2.0-M2,,,camel-core,,,,0,getScanner should recognize GenericFile as type so we can leverage the underlying java.io.File handle.,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76786,,,Sat Nov 21 11:58:01 UTC 2009,,,,,,,0|i01jo7:,6956,,,,,,,,,"24/May/09 08:25;davsclaus;See nabble:
http://www.nabble.com/split-%2B-stream-%2B-choice%2C-what-wrong--td23689175s22882.html
","24/May/09 08:29;davsclaus;trunk: 778114.

This bug is only in Camel 2.0. Camel 1.x works fine.",21/Nov/09 11:58;davsclaus;Closing all 2.0M2 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-ftp is not thread safe,CAMEL-1641,12486440,12486444,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,23/May/09 08:14,21/Nov/09 11:58,14/Mar/19 02:42,25/May/09 13:26,2.0-M1,,,,,,,,,,2.0-M2,,,camel-ftp,,,,0,"See nabble for discussion:
http://www.nabble.com/Threadsafety-of-Camel-FTP-td23615932.html

Basically FTPClient should be created as a new instance for each created producer or consumer (like http component does)",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76787,,,Sat Nov 21 11:58:01 UTC 2009,,,,,,,0|i01jnz:,6955,,,,,,,,,"25/May/09 08:50;davsclaus;trunk: 778354.

When/if CAMEL-1644 is implemented then this bug is already fixed.
However remember to add the unit test in FtpProducerConcurrentTest java. There is a TODO.","25/May/09 13:26;davsclaus;trunk: 778419

And fixed by CAMEL-1644.",21/Nov/09 11:58;davsclaus;Closing all 2.0M2 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
XMPPConsumer.processPacket does not correctly handle received non-message packets.,CAMEL-1633,12486514,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,edward.campbell,edward.campbell,20/May/09 14:24,21/Nov/09 11:58,14/Mar/19 02:42,11/Jun/09 05:53,1.6.1,,,,,,,,,,1.6.2,2.0-M2,,camel-xmpp,,,,0,"I am currently porting an application using an in house Smack integration to Apache Camel.

Specifically, I am getting failures with multiuser chat where messages stop being received in the middle of the message stream I am sending.
I have yet to verify the issue exists with private chat as well, but the XMPPConsumer source looks like there will be a similar issue.

The XMPPConsumer class registers itself for all packet types in the doStart method, but in the processPacket method immediately casts the received Packet to Message.

I have found with the in house integration that Smack sends several types of Packets, and I could not find assurance that it would not call the packet listener with a null message.

A simple if((null != packet) && (packet instanceof Message))  should be used to prevent improper packets from being utilized.

FYI: the above if statement should also prevent packets from building up in the Smack message queue, since all messages will be processed without throwing an exception.
So a call to muc.nextMessage() is unnecessary, and actually detrimental (since if the next packet is a message, it will be dropped without processing).
It may be wise to actually use a try/catch block to prevent exceptions from being thrown by the processPacket method, since messages that throw exceptions seem to stay in the Smack message queue.
",,,,,,,,,,,,,,,,,26/May/09 20:30;edward.campbell;XmppConsumer.java;https://issues.apache.org/jira/secure/attachment/12462964/XmppConsumer.java,,,,,1.0,,,,,,,,,,,,,,,,,,,2009-05-23 10:32:01.659,,,no_permission,,,,,,,,,,,,,76788,,,Sat Nov 21 11:58:01 UTC 2009,,,,,,,0|i01jm7:,6947,,,,,,,,,23/May/09 10:32;davsclaus;Edward feel free to try working on a patch to fix this.,26/May/09 20:30;edward.campbell;That should fix it.,"27/May/09 11:56;davsclaus;trunk: 779121.
1.x: 779124.

Applied patch with thanks to Edward Campbell.","09/Jun/09 21:17;edward.campbell;Only half the patch was applied.
Please apply the changes to the processPacket and processMessage methods from the file I previously attached to fix the problem.","10/Jun/09 04:58;davsclaus;Hi Edward

Thanks for spotting it.

trunk: 783204.
1.x: 783205.","10/Jun/09 19:05;edward.campbell;My fault.
After going through a bunch of testing, I found some issues with the fix I originally posted.
Specifically the doStart() method of XmppConsumer.java should be as follows:

{code:java}
    protected void doStart() throws Exception {
        connection = endpoint.createConnection();

        if (endpoint.getRoom() == null) {
            Chat privateChat = connection.getChatManager().createChat(endpoint.getParticipant(), this);
            if (LOG.isInfoEnabled()) {
                LOG.info(""Open private chat to: "" + privateChat.getParticipant());
            }
        } else {
            // add the presence packet listener to the connection so we only get packets that concerns us
            final ToContainsFilter toFilter = new ToContainsFilter(endpoint.getParticipant());
            final AndFilter packetFilter = new AndFilter(new PacketTypeFilter(Presence.class), toFilter);
            connection.addPacketListener(this, packetFilter);

            muc = new MultiUserChat(connection, endpoint.resolveRoom(connection));
            muc.addMessageListener(this);
            DiscussionHistory history = new DiscussionHistory();
            history.setMaxChars(0); // we do not want any historical messages

            muc.join(endpoint.getNickname(), null, history, SmackConfiguration.getPacketReplyTimeout());
            if (LOG.isInfoEnabled()) {
                LOG.info(""Joined room: "" + muc.getRoom() + "" as: "" + endpoint.getNickname());
            }
        }

        super.doStart();
    }
{code}

For some reason the order of adding listeners is important with smack. I haven't yet downloaded the smack source to find out why.
","11/Jun/09 05:53;davsclaus;Thanks Edward for reporting and providing the solution.
I have changed the order so the listener is created first.

trunk: 783639.
1.x: 783640.","11/Jun/09 17:33;edward.campbell;Found out why the order mattered in this case...
According to the smack documentation if you register the same listener multiple times, only the most recent filter is used.
Since the XmppConsumer is being used for all listeners in this case only the last add<Message|Packet>Listener call is honored.
It would be wiser to have the listeners as separate classes, then the handling of each packet/message type can be addressed separately.
A ConnectionListener can be added as well to handle connections that go down and can be retried later.
I'm going to put an improvement request in for this...",21/Nov/09 11:58;davsclaus;Closing all 2.0M2 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
File component - from endpoint is not set on file consumer,CAMEL-1632,12486497,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,19/May/09 15:46,21/Nov/09 11:58,14/Mar/19 02:42,19/May/09 16:02,2.0-M1,,,,,,,,,,2.0-M2,,,camel-core,camel-ftp,,,0,"So when you later call exchange.getFromEndpoint() it returns null. What it should return is the file/ftp endpoint that it was consumed from.

See nabble:
http://www.nabble.com/Get-The-intercepted-endpoint-when-using-inetrcept%28%29-td23543993s22882.html
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76789,,,Sat Nov 21 11:58:01 UTC 2009,,,,,,,0|i01jlz:,6946,,,,,,,,,19/May/09 16:02;davsclaus;trunk: 776372.,21/Nov/09 11:58;davsclaus;Closing all 2.0M2 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
GenericFileProducer does not work with absolute URLs on Linux,CAMEL-1630,12486505,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,jfe,jfe,19/May/09 13:01,21/Nov/09 11:58,14/Mar/19 02:42,19/May/09 14:44,2.0-M1,,,,,,,,,,2.0-M2,,,camel-core,,,,0,"I have the following simple configuration :

{code:xml}<route>
    <from uri=""file:///home/julien/tests/a?include=.*?\.xml"" />
    <to uri=""file:///home/julien/tests/b?fileName=${date:now:yyyy_MM_dd}/${file:onlyname}""/>
</route>
{code}

After putting an input file into /home/julien/tests/a I get the following error:
{noformat} 
org.apache.camel.component.file.GenericFileOperationFailedException: Cannot store file: /home/julien/tests/b/2009_05_19/160903061200040046.xml
        at org.apache.camel.component.file.FileOperations.storeFile(FileOperations.java:188)
        at org.apache.camel.component.file.GenericFileProducer.writeFile(GenericFileProducer.java:135)
        at org.apache.camel.component.file.GenericFileProducer.processExchange(GenericFileProducer.java:78)
        at org.apache.camel.component.file.GenericFileProducer.process(GenericFileProducer.java:49)
        at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43)
        at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:83)
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)
        at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:195)
        at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:130)
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)
        at org.apache.camel.processor.interceptor.StreamCachingInterceptor.proceed(StreamCachingInterceptor.java:88)
        at org.apache.camel.processor.interceptor.StreamCachingInterceptor.process(StreamCachingInterceptor.java:83)
        at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:52)
        at org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:157)
        at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:98)
        at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:66)
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
        at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)
        at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:181)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:205)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
        at java.lang.Thread.run(Thread.java:619)
Caused by: java.io.FileNotFoundException: /home/julien/tests/b/2009_05_19/160903061200040046.xml (No such file or directory)
        at java.io.RandomAccessFile.open(Native Method)
        at java.io.RandomAccessFile.<init>(RandomAccessFile.java:212)
        at org.apache.camel.component.file.FileOperations.prepareOutputFileChannel(FileOperations.java:253)
        at org.apache.camel.component.file.FileOperations.writeFileByFile(FileOperations.java:205)
        at org.apache.camel.component.file.FileOperations.storeFile(FileOperations.java:178)
        ... 24 more
{noformat} 

In the meantime, Camel has created a fubar directory /home/julien/tests/b/home/julien/tests/b/2009_05_19 .

I tracked the problem and found it to be cause by the following code section in GenericFileProducer.java
{code:java}

    protected void writeFile(GenericFileExchange<T> exchange, String fileName) throws GenericFileOperationFailedException {
        InputStream payload = exchange.getIn().getBody(InputStream.class);
        try {
            // build directory if auto create is enabled
            if (endpoint.isAutoCreate()) {
                int lastPathIndex = fileName.lastIndexOf(File.separator);
                if (lastPathIndex != -1) {
                    String directory = fileName.substring(0, lastPathIndex);
                    // skip trailing /
                    directory = FileUtil.stripLeadingSeparator(directory);
                    if (!operations.buildDirectory(directory, false)) {
                        log.debug(""Cannot build directory ["" + directory + ""] (could be because of denied permissions)"");
                    }
                }
            }
          ....................
{code}

Instead of stripping the {{trailing}} separator as noted in the comment, the code strips the leading separator...
",Linux,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-05-19 13:45:55.853,,,no_permission,,,,,,,,,,,,,76790,,,Sat Nov 21 11:58:01 UTC 2009,,,,,,,0|i01jlj:,6944,,,,,,,,,"19/May/09 13:45;davsclaus;Hi Julien

Thanks for reporting I am looking into this now.",19/May/09 14:44;davsclaus;trunk: 776336.,21/Nov/09 11:58;davsclaus;Closing all 2.0M2 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SpringDeadLetterChannelUseOriginalBodyWithFileTest test failing on trunk,CAMEL-1625,12486805,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ryangardner,ryangardner,18/May/09 22:59,21/Nov/09 11:58,14/Mar/19 02:42,19/May/09 06:10,,,,,,,,,,,2.0-M2,,,,,,,0,"-------------------------------------------------------------------------------
Test set: org.apache.camel.spring.processor.SpringDeadLetterChannelUseOriginalBodyWithFileTest
-------------------------------------------------------------------------------
Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 4.379 sec <<< FAILURE!
testOriginalInBodyIsFile(org.apache.camel.spring.processor.SpringDeadLetterChannelUseOriginalBodyWithFileTest)  Time elapsed: 4.106 sec  <<< ERROR!
java.lang.AssertionError: mock:dead bodyAs[java.lang.String] == Hello on Exchange[GenericFileMessage: GenericFile[hello.txt]]
	at org.apache.camel.util.PredicateAssertHelper.assertMatches(PredicateAssertHelper.java:38)
	at org.apache.camel.component.mock.AssertionClause.applyAssertionOn(AssertionClause.java:115)
	at org.apache.camel.component.mock.MockEndpoint$14.run(MockEndpoint.java:639)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:251)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:218)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:151)
	at org.apache.camel.ContextTestSupport.assertMockEndpointsSatisfied(ContextTestSupport.java:286)
	at org.apache.camel.processor.DeadLetterChannelUseOriginalInBodyWithFileTest.testOriginalInBodyIsFile(DeadLetterChannelUseOriginalInBodyWithFileTest.java:39)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at junit.framework.TestCase.runTest(TestCase.java:164)
	at junit.framework.TestCase.runBare(TestCase.java:130)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:120)
	at junit.framework.TestSuite.runTest(TestSuite.java:230)
	at junit.framework.TestSuite.run(TestSuite.java:225)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.maven.surefire.junit.JUnitTestSet.execute(JUnitTestSet.java:213)
	at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:140)
	at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:165)
	at org.apache.maven.surefire.Surefire.run(Surefire.java:107)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:289)
	at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:993)

When trying to build latest svn trunk ( 776125 ) with 'mvn clean install'",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-05-19 01:27:11.033,,,no_permission,,,,,,,,,,,,,76792,,,Sat Nov 21 11:58:01 UTC 2009,,,,,,,0|i01jkf:,6939,Unit Test Broken,,,,,,,,"19/May/09 01:27;njiang;I got this error sometimes,  
it looks like the GenericFileConverter's fallback converter method is not be loaded before the common toString converter.
But if I run this test separately ,  the test error goes away.

","19/May/09 04:48;davsclaus;Spring IoC is kinda slow to initialize so I guess the unit test that is actually in camel-core is *too fast* :)

On my laptop however I have not seen this error, might be because I have a brand new laptop so its still fast.
","19/May/09 05:21;njiang;I think we could add a delay before the exception throwing processor to make sure the Converter is initialized.
","19/May/09 06:10;davsclaus;Ah I got it, a noop=true was missing. The problem is that when the file consumer is faster than the mock, then it would move the consumed file into a .camel subfolder.

The camel-core has this option, it was missing in the spring XML file.

trunk: 776196.",21/Nov/09 11:58;davsclaus;Closing all 2.0M2 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Subject not correctly set in xmpp message in both chat producers.,CAMEL-1624,12486801,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,edward.campbell,edward.campbell,18/May/09 16:19,21/Nov/09 11:58,14/Mar/19 02:42,19/May/09 06:44,1.6.1,,,,,,,,,,1.6.2,2.0-M2,,camel-xmpp,,,,0,"The code in XmppPrivateChatProducer and XmppGroupChatProducer does not call setSubject() on the org.jivesoftware.smack.packet.Message object.
Setting a subject property on the org.apache.camel.Message object produces a header on the Smack object via its superclass org.jivesoftware.smack.packet.Packet, but that never gets reflected in the Message object because the Message object does not override the setProperty() method on Packet.

{code:java}
private void send(String camelConnectionString) {
		final CamelContext camel = new DefaultCamelContext();
		camel.start();
		Endpoint endpoint = camel.getEndpoint(camelConnectionString);
		Exchange exchange = endpoint.createExchange(ExchangePattern.InOut);
		Producer producer = endpoint.createProducer();
		producer.start();

		// send the message
		Message message = exchange.getIn();
		message.setBody(""The message body"");
		message.setHeader(""subject"", ""Message subject for filtering."");
		producer.process(exchange);
}
{code}

The annoying part about this, is that I am trying to integrate with a receiving system that handles messages using the subject as a key to determine how the message should be handled.
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-05-19 06:11:31.403,,,no_permission,,,,,,,,,,,,,76793,,,Sat Nov 21 11:58:01 UTC 2009,,,,,,,0|i01jk7:,6938,,,,,,,,,19/May/09 06:11;davsclaus;added code formatting to description,"19/May/09 06:44;davsclaus;trunk: 776198
1.x: 776202.

I also added this feature to be able to set the language as well.

So subject and language is not set on the xmpp message if provided in a Camel Message header with the key name. The type is converted to String.",21/Nov/09 11:58;davsclaus;Closing all 2.0M2 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-osgi doesn't support to look up the fallback converter,CAMEL-1622,12486800,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,18/May/09 13:59,21/Nov/09 11:58,14/Mar/19 02:42,18/May/09 14:28,1.6.0,2.0-M1,,,,,,,,,1.6.2,2.0-M2,,,,,,0,"camel-osgi module doesn't support to lookup the fallback coverter from the active bundles.
And I got the user complain in the support forums
http://fusesource.com/forums/message.jspa?messageID=2787#2787 ",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-11-21 11:58:01.337,,,no_permission,,,,,,,,,,,,,76794,,,Sat Nov 21 11:58:01 UTC 2009,,,,,,,0|i01jjr:,6936,,,,,,,,,"18/May/09 14:28;njiang;trunk
http://svn.apache.org/viewvc?rev=775959&view=rev
camel 1.x branch
http://svn.apache.org/viewvc?rev=775963&view=rev",21/Nov/09 11:58;davsclaus;Closing all 2.0M2 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StickyLoadBalancer - Not possible to configure easily from Spring DSL,CAMEL-1621,12486485,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,16/May/09 16:32,21/Nov/09 11:58,14/Mar/19 02:42,16/May/09 18:16,1.6.1,2.0-M1,,,,,,,,,2.0-M2,,,camel-core,,,,0,The correlation expression is not easy to set from Spring DSL.,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76795,,,Sat Nov 21 11:58:01 UTC 2009,,,,,,,0|i01jjj:,6935,,,,,,,,,16/May/09 18:16;davsclaus;trunk: 775503.,21/Nov/09 11:58;davsclaus;Closing all 2.0M2 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DSL doesn't support the bean expression without registry,CAMEL-1618,12486085,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,15/May/09 09:46,21/Nov/09 11:58,14/Mar/19 02:42,16/May/09 13:25,1.5.0,1.6.0,2.0-M1,,,,,,,,2.0-M2,,,,,,,0,"Here is the mail thread of it
[1] http://www.nabble.com/Non-registry-beans-td20088181.html",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-05-15 09:54:33.169,,,no_permission,,,,,,,,,,,,,76796,,,Sat Nov 21 11:58:01 UTC 2009,,,,,,,0|i01jiv:,6932,,,,,,,,,"15/May/09 09:54;davsclaus;Its already there in BeanLanguage. 

But what is missing is a method in the BuilderSupport so you can use it with predicates.","15/May/09 09:56;davsclaus;What I also meant to say is that is *only* when doing predicates is missing.

In regular routing its there, eg if you do a .bean(MyClass.class) is there.","16/May/09 07:21;davsclaus;Willem

Sadly it breaks camel-spring in its SpringRouteBuilder.
You have to revert the change in 1.x as we need to keep the API stable.

On trunk we have the luxury of being able to change the API in SpringRouteBuilder so it does not conflict with camel-core.

In SpringRouteBuilder we also have a bean method for lookup in the spring registry. 
They are not the same

- one is for expression
- the other is for a lookup, so I am inclined to rename the methods in SpringRouteBuilder to {{lookup}} instead.","16/May/09 08:08;njiang;Claus,

My bad, I just ran the tests in camel-core :(.

How about just removing the DSL of Bean(Class BeanType) from the BuilderSupport in the camel 1.x?
In this way we don't need ot change the API of SpringRouteBuilder and can use bean expression without registry.

For the Camel trunk, I'd like to rename the lookup bean() method to lookupBean..

Willem
",16/May/09 08:47;davsclaus;I am renaming the {{bean}} method in SpringRouuteBuilder to {{lookup}} to avoid the clash. And the bean method is actually a lookup so its a better suited name anyway.,"16/May/09 09:40;njiang;@Claus,
Thanks for looking this compile error.
I will take care of camel-1.x , now I removed the bean(Class beanType) from  BuilderSupport  in camel-1.x branch and am running the test.",16/May/09 12:57;davsclaus;Fixed the problem on trunk: 775458.,"16/May/09 13:25;njiang;Reverted the change of camel-1.x.

trunk
http://svn.apache.org/viewvc?rev=775123&view=rev
http://svn.apache.org/viewvc?rev=775155&view=rev",21/Nov/09 11:58;davsclaus;Closing all 2.0M2 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CamelExchangeException implements Serializable but may not be serializable,CAMEL-1615,12485969,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,mproch,mproch,14/May/09 10:48,21/Nov/09 11:58,14/Mar/19 02:42,16/May/09 15:25,2.0-M1,,,,,,,,,,2.0-M2,,,camel-core,,,,0,CamelExchangeException implements Serializable (as inheriting from Exception) but has not transient field Exchange.,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-05-16 15:25:03.172,,,no_permission,,,,,,,,,,,,,76797,,,Sat Nov 21 11:58:01 UTC 2009,,,,,,,0|i01ji7:,6929,,,,,,,,,16/May/09 15:25;davsclaus;trunk: 775486.,21/Nov/09 11:58;davsclaus;Closing all 2.0M2 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Warning ""Disabling JMSReplyTo as this Exchange is not OUT capable"" on false positives in JBossAS5",CAMEL-1614,12487940,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,fs5,fs5,14/May/09 07:11,21/Nov/09 11:58,14/Mar/19 02:42,14/May/09 08:44,1.6.0,2.0-M1,,,,,,,,,1.6.2,2.0-M2,,camel-jms,,,,0,see: http://www.nabble.com/Disabling-JMSReplyTo-as-this-Exchange-is-not-OUT-capable-td23524909s22882.html,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-05-14 08:44:26.953,,,no_permission,,,,,,,,,,,,,76798,,,Sat Nov 21 11:58:01 UTC 2009,,,,,,,0|i01jhz:,6928,,,,,,,,,"14/May/09 08:44;davsclaus;trunk: 774678
1.x: 774687


Frank feel free to test the fix",21/Nov/09 11:58;davsclaus;Closing all 2.0M2 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Endpoint are not assigned to correct contexts,CAMEL-1612,12487145,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,siegfriedwirth,siegfriedwirth,13/May/09 16:30,07/Feb/10 09:55,14/Mar/19 02:42,14/Sep/09 05:59,2.0-M1,,,,,,,,,,2.1.0,,,camel-core,,,,0,"When defining routes in two camel contexts the endpoints are not correctly assigned to the contexts. The bug can easily be observed by using jconsole / jmx. For one camel context the endpoints are not registered.

From debugging up to InstrumentationLifecycleStrategy#onEndpointAdd(Endpoint) it looks like the order of starting contexts and registering endpoints is wrong. (Camel tries to add endpoints with this method to one context before (initialized) and so the endpoints are not really added. It looks like the reason for this is in the order of initializing contexts and routes/endpoints.)

See also discussion http://www.nabble.com/Two-camel-contexts-and-assinging-endpoints-(visible-by-jconsole%2C-jmx)-td23520282.html.","Java 1.6, Spring 2.5.6",,,,,,,,,,,,,,,,13/May/09 16:37;siegfriedwirth;applicationContext.xml;https://issues.apache.org/jira/secure/attachment/12462958/applicationContext.xml,13/May/09 16:37;siegfriedwirth;jconsoletwocontexts.png;https://issues.apache.org/jira/secure/attachment/12462959/jconsoletwocontexts.png,,,,2.0,,,,,,,,,,,,,,,,,,,2009-05-16 14:57:13.186,,,no_permission,,,,,,,,,,,,,76799,,,Mon Sep 14 06:03:12 UTC 2009,,,,,,,0|i01jhj:,6926,,,,,,,,,"13/May/09 16:37;siegfriedwirth;Added a simple example demonstrating the issue. Use the attached applicationContext.xml as configuration for camel and start a jconsole. (To see the route working create a file /tmp/file1.txt which will be renamed to file2.txt by one route and named back to file1.txt by the other route.)

Using jconsole the result looks like shown in jconsoletwocontexts.png: You can observe that the endpoints for one context are not assigned to the correct context.

Further investigation does indicate it is not a problem with the jmx support, but with the order of creating, starting and initializing contexts and endpoint.",16/May/09 14:57;davsclaus;JMX is planned for a rewrite/overhaul in Camel 2.1,14/Sep/09 05:59;davsclaus;trunk: 814483.,14/Sep/09 06:03;siegfriedwirth;(was automatic out of office reply),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
IOConverterTest unit test failure,CAMEL-1611,12487141,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,eaubin,eaubin,13/May/09 14:40,07/Feb/10 09:55,14/Mar/19 02:42,15/May/09 05:39,1.6.0,,,,,,,,,,1.6.1,,,camel-core,,,,0,"The IOConverter unit test fails with

-------------------------------------------------------------------------------
Test set: org.apache.camel.converter.IOConverterTest
-------------------------------------------------------------------------------
Tests run: 2, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.102 sec <<< FAILURE!
testToBytes(org.apache.camel.converter.IOConverterTest)  Time elapsed: 0.003 sec  <<< FAILURE!
junit.framework.AssertionFailedError: expected:<!> but was:<
>
	at junit.framework.Assert.fail(Assert.java:47)
	at junit.framework.Assert.failNotEquals(Assert.java:280)
	at junit.framework.Assert.assertEquals(Assert.java:64)
	at junit.framework.Assert.assertEquals(Assert.java:172)
	at junit.framework.Assert.assertEquals(Assert.java:178)
	at org.apache.camel.converter.IOConverterTest.testToBytes(IOConverterTest.java:40)

","camel 1.6.0 osx 10.5.6, java 1.6",,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-05-15 05:39:31.467,,,no_permission,,,,,,,,,,,,,76800,,,Fri May 15 05:39:31 UTC 2009,,,,,,,0|i01jhb:,6925,,,,,,,,,15/May/09 05:39;davsclaus;Willem Jiang already fixed this.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Content type for HTTP not being send in header,CAMEL-1609,12486334,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,frankc,frankc,13/May/09 11:47,21/Nov/09 11:58,14/Mar/19 02:42,13/May/09 15:14,1.6.0,2.0-M1,,,,,,,,,1.6.1,2.0-M2,,camel-http,,,,0,"I use the following route:

		final	String	spurl = protocols.get(0).getEpUrl();
			cc.addRoutes(new RouteBuilder()
			{
				public	void	configure()
				{
					from(""direct:say"")
					.setHeader(HttpConstants.HTTP_CONTENT_TYPE, 
							constant(""application/octet-stream""))
					.to(spurl);
				}
			});

where ""spurl"" is the servlet URL endpoint. The messages are being sent to the servlet, but the content type in the ""doPost(...)"" is null.


","MAC OSX (Leapord), Eclipse 3.4, TomCat 6",,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-05-13 12:54:57.499,,,no_permission,,,,,,,,,,,,,76801,,,Sat Nov 21 11:58:01 UTC 2009,,,,,,,0|i01jgv:,6923,,,,,,,,,"13/May/09 12:54;davsclaus;This bug should also exist in Camel 1.6.0. It has been reported in FUSE MR 1.6.0.

Willem is looking into it.","13/May/09 12:55;davsclaus;BTW a workaround is creating your own http header filter stategy and define it on the http component.

See the camel http wiki page, the advanced section how to overload the http component and configure it in Spring XML (for instance)","13/May/09 15:14;njiang;trunk
 http://svn.apache.org/viewvc?rev=774383&view=rev
camel-1.x
 http://svn.apache.org/viewvc?rev=774394&view=rev","14/May/09 08:42;njiang;Did some enhancement
trunk
http://svn.apache.org/viewvc?rev=774658&view=rev
camel-1.x  (camel 1.6.2)
http://svn.apache.org/viewvc?rev=774672&view=rev",21/Nov/09 11:58;davsclaus;Closing all 2.0M2 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FileLanguage - name.ext is missing in Camel 1.x,CAMEL-1607,12487134,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,12/May/09 14:04,07/Feb/10 09:55,14/Mar/19 02:42,12/May/09 14:18,1.6.0,,,,,,,,,,1.6.1,,,camel-core,,,,0,"[15:19]  <jacovt> cibsen: I actually had a look specifically at the documentation regarding that.
[15:19]  <jacovt> It says clearly there that for camel 1.5+ file:name.ext is supported.
[15:19]  <jacovt> So, thats why I was unsure if it should work or not.
[15:19]  <jacovt> :)
[15:20]  * mrhoden (~mrhoden@cerberus.franklinamerican.com) has joined #camel
[15:21]  <jacovt> cibsen: As you can see, ${file:name} works, but ${file.name.ext} does not.
[15:21]  <jacovt> 's/${file.name.ext}/${file:name.ext}
[15:22]  <jacovt> Strange.
[15:45]  * Disconnected ().
[15:59]  * Now talking on #camel
[16:00]  * gtully (~gtully@86-46-32-207-dynamic.b-ras3.mvw.galway.eircom.net) has joined #camel
[16:00]  <cibsen> jacovt let me see in the code
[16:01]  <cibsen> in 1.x the code is:
[16:01]  <cibsen>             } else if (ObjectHelper.equal(remainder, ""name.noext"")) {
[16:01]  <cibsen>                 return FileExpressionBuilder.fileNameNoExtensionExpression();
[16:02]  <cibsen> jacovt I will be dammed file:name.ext does not exist in 1.x codebase

",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76802,,,Tue May 12 14:18:21 UTC 2009,,,,,,,0|i01jgf:,6921,,,,,,,,,12/May/09 14:18;davsclaus;1.x: 773908.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bunch of Camel-Hl7 tests failed on windows,CAMEL-1603,12486431,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,12/May/09 08:16,21/Nov/09 11:58,14/Mar/19 02:42,12/May/09 14:45,,,,,,,,,,,1.6.1,2.0-M2,,tests,,,,0,"It looks like we can't start a TCP client to connect the 0.0.0.0:8888 on windows.
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-05-12 14:22:03.286,,,no_permission,,,,,,,,,,,,,76804,,,Sat Nov 21 11:58:00 UTC 2009,,,,,,,0|i01jfj:,6917,,,,,,,,,"12/May/09 14:22;davsclaus;Willem have you fixed this? In case Hadrian have time to build 1.6.1 he must be sure no outstanding issues planned for 1.6.1.

So we should not keep tickets for 1.6.1 open. ","12/May/09 14:45;njiang;trunk
http://svn.apache.org/viewvc?rev=773819&view=rev
camel 1.x branch 
http://svn.apache.org/viewvc?rev=773824&view=rev",21/Nov/09 11:58;davsclaus;Closing all 2.0M2 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
@Transactional annotation doesn't perform correctly within SpringRouteBuilder,CAMEL-1601,12486428,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,tristan.koen,tristan.koen,11/May/09 13:22,21/Nov/09 11:58,14/Mar/19 02:42,05/Jun/09 14:29,1.6.0,,,,,,,,,,2.0-M2,,,camel-spring,camel-spring-integration,,,0,"The Spring @Transactional annotation doesn't work as expected with JtaTransactionManager in routes created using SpringRouteBuilder.
Programatically defined transactions seem to be fine.","Ubuntu Desktop v9.04 (Jaunty)
Java (1.6.0_13)
ActiveMQ 5.2
Glassfish v2.1
Camel v1.6.1_SNAPSHOT",,,,,,,,,,,,,,CAMEL-1663,,11/May/09 13:25;tristan.koen;transactions.tar.gz;https://issues.apache.org/jira/secure/attachment/12462953/transactions.tar.gz,,,,,1.0,,,,,,,,,,,,,,,,,,,2009-06-05 07:48:30.613,,,no_permission,,,,,,,,,,,,,76805,,,Sat Nov 21 11:58:00 UTC 2009,,,,,,,0|i01jf3:,6915,,,,,,,,,11/May/09 13:25;tristan.koen;This file demonstrates the issue. It requires a JEE server to replicate since a JtaTransactionManager is required.,"05/Jun/09 07:48;davsclaus;CAMEL-1663 fixes this issue.

Tristan fell free to try the SNAPSHOT","05/Jun/09 09:04;davsclaus;Tristan

You might need to add @Transactional to the class definition in your DefaultTestDao class.

{code}
@Transactional
public class DefaultTestDao extends SimpleJdbcDaoSupport implements TestDao
{code}

Otherwise the tx annotation driven might not discover your class
{code}
    <tx:annotation-driven transaction-manager=""txManager""/>
{code}

I am working on adding an unit test to Camel and I have to add it at class level to get the class instrumented.",05/Jun/09 14:29;davsclaus;Is fixed by CAMEL-1663,21/Nov/09 11:58;davsclaus;Closing all 2.0M2 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ClosedByInterruptException in file endpoint when processing first message within aggregator,CAMEL-1595,12486290,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,rsmith,rsmith,09/May/09 19:15,21/Nov/09 11:58,14/Mar/19 02:42,11/May/09 05:55,2.0-M1,,,,,,,,,,1.6.1,2.0-M2,,camel-core,,,,0,"A java.nio.channels.ClosedByInterruptException exception is encountered when processing the first message for a file endpoint and a file must be created.

The exception occurs at the line of code labeled ** in the following FileOperations function:

    private FileChannel prepareOutputFileChannel(File target, FileChannel out) throws IOException {
        if (endpoint.isAppend()) {
            out = new RandomAccessFile(target, ""rw"").getChannel();
            out = out.position(out.size());  // ** Exception here
        } else {
            out = new FileOutputStream(target).getChannel();
        }
        return out;
    }


I ran the unit test org.apache.camel.component.file.NewFileProduceTest and it passes, so it seems to be something specific to how the route is configured, such as the use of the aggregator.
","Java(TM) 2 Runtime Environment, Standard Edition (build 1.5.0_16-b06-284)
Mac OS Leopard",,,,,,,,,,,,,,,,09/May/09 19:21;rsmith;git_camel_problem_demo.tar.gz;https://issues.apache.org/jira/secure/attachment/12462956/git_camel_problem_demo.tar.gz,,,,,1.0,,,,,,,,,,,,,,,,,,,2009-05-10 05:31:43.859,,,no_permission,,,,,,,,,,,,,76806,,,Sat Nov 21 11:58:00 UTC 2009,,,,,,,0|i01jdr:,6909,,,,,,,,,"09/May/09 19:21;rsmith;The attached project recreates the problem.
Run via mvn camel:run and a message such as

Message exchange has failed so breaking out of pipeline: Exchange[Message: aggregated] exception: org.apache.camel.component.file.GenericFileOperationFailedException: Cannot store file: target/reports/ID-Macintosh-local-51822-1241896763576-1-0 fault: null

is generated.
","10/May/09 05:31;mrt1nz;Hi Ron,

that's likely related to CAMEL-1510 and will be fixed in Camel 1.6.1 and 2.0-M2. Can you give it a try again with the latest revision of Camel 2.0 trunk or Camel 1.x branch?","11/May/09 04:41;rsmith;Tested with 2.0 SNAPSHOT in maven repo and it seems to be working fine.
thanks!",11/May/09 05:55;davsclaus;Already fixed as by Martins instructions.,21/Nov/09 11:58;davsclaus;Closing all 2.0M2 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TransactedErrorHandler - ExchangeProperty tries to double register transacted,CAMEL-1592,12486439,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,08/May/09 07:12,07/Feb/10 09:55,14/Mar/19 02:42,08/May/09 07:28,1.6.0,,,,,,,,,,1.6.1,,,camel-core,,,,0,"See nabble:
http://www.nabble.com/Transaction-Exception-td23434439s22882.html

",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76807,,,Fri May 08 07:28:34 UTC 2009,,,,,,,0|i01jd3:,6906,,,,,,,,,08/May/09 07:28;davsclaus;1.x: 772869.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"camel-test.jar - jndi.properties is required, should be optional",CAMEL-1590,12486368,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,07/May/09 15:42,21/Nov/09 11:58,14/Mar/19 02:42,07/May/09 15:43,2.0-M1,,,,,,,,,,2.0-M2,,,,,,,0,"See nabble:
http://www.nabble.com/Unit-Tests-without-jndi.properties-td23428533s22882.html
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76808,,,Sat Nov 21 11:58:00 UTC 2009,,,,,,,0|i01jcn:,6904,,,,,,,,,07/May/09 15:43;davsclaus;trunk: 772683.,21/Nov/09 11:58;davsclaus;Closing all 2.0M2 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-cxf producer loses the content-type ,CAMEL-1586,12486208,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,06/May/09 03:47,21/Nov/09 11:58,14/Mar/19 02:42,06/May/09 07:00,1.6.0,,,,,,,,,,1.6.1,2.0-M2,,,,,,0,"camel-cxf doesn't put the Protocol-Header into the camel message header, so we lost the content-type message.
Here is the mail thread for the discussion.
http://www.nabble.com/camel-cxf-content-type-response-header-tt23370337.html",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-11-21 11:58:00.317,,,no_permission,,,,,,,,,,,,,76809,,,Sat Nov 21 11:58:00 UTC 2009,,,,,,,0|i01jbr:,6900,,,,,,,,,"06/May/09 07:00;njiang;camel trunk
http://svn.apache.org/viewvc?rev=772054&view=rev
camel 1.x branch
http://svn.apache.org/viewvc?rev=772053&view=rev
",21/Nov/09 11:58;davsclaus;Closing all 2.0M2 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"SFTP GenericFileProducer.createFileName produces OS normalized file name, that doesn't work with SFTP",CAMEL-1585,12486058,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,dwsmith75,dwsmith75,05/May/09 19:52,21/Nov/09 11:58,14/Mar/19 02:42,06/May/09 06:59,2.0-M1,,,,,,,,,,2.0-M2,,,camel-ftp,,,,0,"The use of File.separator and FileUtil.normalizePath in GenericFileProducer.createFileName produce a OS normalized file name, that doesn't work with SFTP

e.g. outbound\\out_20090501_091940_ACC.txt which will not work produce a file called outboundout_20090501_091940_ACC.txt

The proper name should be outbound/out_20090501_091940_ACC.txt",Windows XP,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-05-06 04:39:44.261,,,no_permission,,,,,,,,,,,,,76810,,,Sat Nov 21 11:58:00 UTC 2009,,,,,,,0|i01jbj:,6899,,,,,,,,,"06/May/09 04:39;davsclaus;Willem. I guess we need an option on FTP endpoint to define the / or \ separator to use.
Unit testing with the mocked FTP server might not work on windows with the \ separator.

But for FTP the / is the proper separator, even on Windows :)
","06/May/09 05:13;njiang;@Claus,

Yes, I just checked the code, we do use the ""/"" as the separator for the remote file even on Windows.
Maybe I need run a unit test with a real ftp server.","06/May/09 05:32;njiang;I found there are something wrong on the RemoteFileProducer side if GenericFileProducer uses the File.separator and FileUtil.normalizedPath.
Just wonder why the FTP unit test can't find this kind of error. I will dig the code for it.
","06/May/09 05:41;davsclaus;We have another Camel end user on 2.0m1 that uses SFTP on Windows.
The current code base works for him.

So I think we need that option to set to use either / or \ to cater for this. ","06/May/09 06:23;njiang;
I did a quick fix for it  by overriding the GenericFileProducer's getFileSeparator and normalizedPath in RemoteFileProducer.
The tests look good, and we need the end user to verify it.

BTW, I checked the RemoteFileConsumer , it doen't have  the FileSeparator and normalizedPath issue.
So if the end user just use the RemoteFileConsumer to poll the file , everything will be fine.
","06/May/09 06:59;njiang;committed a quick fix for it
http://svn.apache.org/viewvc?rev=772071&view=rev","06/May/09 07:05;davsclaus;Willem, great work. Yeah looking at the patch it was just the producer side not using the getFileSeparator. 
",21/Nov/09 11:58;davsclaus;Closing all 2.0M2 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ldap component is not thread safe,CAMEL-1583,12486246,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,huntc@internode.on.net,huntc@internode.on.net,02/May/09 10:20,21/Nov/09 11:58,14/Mar/19 02:42,04/May/09 14:05,1.6.0,2.0-M1,,,,,,,,,1.6.1,2.0-M2,,camel-ldap,,,,0,"JNDI context objects are not thread-safe. The LDAP component shares a directory context across all threads that use the component. This is not safe.

In addition the LDAP component will attempt to establish a connection on instantiation of the component, and not when the component is required to process requests. If the LDAP server is not ready e.g. temporarily unavailable then the entire Camel application will stop.

JNDI directory contexts should be established when a consuming thread needs it and should be released when the thread is finished with the component i.e.:

{code}
ctx = new InitialDirContext(env);
try {
  ...
} finally {
  ctx.close();
}
{code}

The above will release the connection with the LDAP server as soon as possible. The existing component relies on JNDI to release the socket in its own time (several seconds later).
",N/A,,,,,,,,,,,,,,,,04/May/09 05:25;huntc@internode.on.net;LdapProducer.java.diff;https://issues.apache.org/jira/secure/attachment/12462945/LdapProducer.java.diff,,,,,1.0,,,,,,,,,,,,,,,,,,,2009-05-04 14:05:00.297,,,no_permission,,,,,,,,,,,,,76811,,,Sat Nov 21 11:58:00 UTC 2009,,,,,,,0|i01jb3:,6897,,,,,,,,,"04/May/09 05:25;huntc@internode.on.net;Changes to the 1.6.1 branch.

In essence a context is retrieved from the registry each time that an exchange is to be produced.

Given that the contract for an InitialContext states:

_An InitialContext instance is not synchronized against concurrent access by multiple threads. Multiple threads each manipulating a different InitialContext instance need not synchronize. Threads that need to access a single InitialContext instance concurrently should synchronize amongst themselves and provide the necessary locking._

...the registry entry should either: (a) provide an InitialContext that is known to be thread safe; or (b) ensure that the registry instantiates a new bean each time that the bean is looked up. The latter will be the general situation and so, for example with Spring IOC, use a bean declaration similar to:

{code}
	<!-- Directory Context -->
	<bean id=""ldapserver"" class=""javax.naming.directory.InitialDirContext"" scope=""prototype"">
		<constructor-arg>
			<props>
				<prop key=""java.naming.factory.initial"">com.sun.jndi.ldap.LdapCtxFactory</prop>
				<prop key=""java.naming.provider.url"">ldap://localhost:10389</prop>
				<prop key=""java.naming.security.authentication"">none</prop>
			</props>
		</constructor-arg>
	</bean>
{code}

It is important to use a prototype scope to ensure that a new directory context is obtained for each exchange produced.",04/May/09 07:01;huntc@internode.on.net;I forgot to mention that I ran the ldap unit tests and all was well. In addition I used the modified class within my application and confiirmed (using the debugger) that a new context instance was being used each time.,"04/May/09 14:05;davsclaus;trunk: 771303, 771307.
1.x: 771309.

Yeah I needed two commits on trunk as the patch was for 1.x and it used generics in the LdapProducer. So I had to remove it again on trunk :)","04/May/09 14:05;davsclaus;Christopher.

Thanks again for doing the patch and the investigations. And provided yet another patch.",21/Nov/09 11:58;davsclaus;Closing all 2.0M2 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
 ClassCastException when using camel-cxf and camel-jms in the InOut same flow,CAMEL-1581,12487135,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,02/May/09 07:07,07/Feb/10 09:55,14/Mar/19 02:42,03/May/09 01:55,1.5.0,1.6.0,,,,,,,,,1.6.1,,,,,,,0,"As per thread on FUSE forum http://fusesource.com/forums/thread.jspa?threadID=834&tstart=0:

[[
I have a camel route that listens on a CXFEndpoint (for MESSAGE data as DOMSource) and routes the message to a JMS queue. Something like:

<route>
<from uri=""cxf:bean:passportRequestWS?dataFormat=MESSAGE""/>
<to uri=""soapProcessor""/>
<convertBodyTo type=""java.lang.String""/>
<to uri=""activemq:queue:blah""/>
<convertBodyTo type=""javax.xml.transform.dom.DOMSource""/>
</route>

My understanding is that the JMS producer will realize that the exchange is InOut, create a temporary queue for the response, and then wait for the response to arrive on the temporary queue before sending the original CXFExchange on along the pipeline. Indeed, this is what I observe! However, I?ve discovered a little nasty.

When the JMSProducer gets in the incoming message, it sets the Out message of the original CXFExchange to a JmsMessage. Then, the pipeline processor calls exchange.getOut on the CXFExchange and BANG! we get a class-cast exception. Turns out that the CXFExchange.getOut() method always casts the message to a CxfMessage. Ouch. Surely this means then that camel-cxf can?t talk to any producer that does not produce a CXFMessage - very limiting.
]]

The response on the form from davsclaus was:

[[
Well spotted.

If just the damn Exchange was final so we had one implementation of it. But I guess we have to thank Java generics for that so the first API had generics for per component.

Could you create a ticket in JIRA for this?

As a workaround you can add a processor where you have full access to the Exchange so you can set a CxfMessage as the payload.
]]",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76812,,,Sun May 03 01:54:46 UTC 2009,,,,,,,0|i01jan:,6895,,,,,,,,,"02/May/09 07:12;njiang;Since we removed the CxfMessage and CxfExchange in Camel 2.0,  we will not get into this trouble in Camel 2.0.
I just committed a integration test in the camel-trunk to confirm it. ","03/May/09 01:54;njiang;Fixed the test in camel 1.x branch
 http://svn.apache.org/viewvc?rev=770910&view=rev",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Converting from stream/reader to string changes line breaks other than ""\n""",CAMEL-1568,12486168,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,christian.ohr,christian.ohr,27/Apr/09 09:43,21/Nov/09 11:57,14/Mar/19 02:42,28/Apr/09 05:00,1.6.0,2.0-M1,,,,,,,,,1.6.1,2.0-M2,,camel-core,,,,0,"The IOConverter#toString(Reader/Stream) copies the input data line by line. A line is considered to be terminated by any one of a line feed ('\n'), a carriage return ('\r'), or a carriage return followed immediately by a linefeed. Unfortunately, the lines are always concatenated with ""\n"", so that HL7 messages (which use ""\r"") become unusable after conversion.

Also see http://www.nabble.com/HL7-messages-become-unusable-after-convertBodyTo%28String.class%29-td23219748.html",,,,,,,,,,,,,,,,,27/Apr/09 09:47;christian.ohr;IOConverter-1.6.1.patch;https://issues.apache.org/jira/secure/attachment/12462937/IOConverter-1.6.1.patch,27/Apr/09 10:41;christian.ohr;IOConverter-2.0m2.patch;https://issues.apache.org/jira/secure/attachment/12462938/IOConverter-2.0m2.patch,,,,2.0,,,,,,,,,,,,,,,,,,,2009-04-28 05:00:15.586,,,no_permission,,,,,,,,,,,,,76814,,,Sat Nov 21 11:57:59 UTC 2009,,,Patch Available,,,,0|i01j7r:,6882,,,,,,,,,27/Apr/09 09:47;christian.ohr;Patch for 2.0m2 follows asap,"28/Apr/09 05:00;davsclaus;trunk: 769239.
1.x: 769241.",28/Apr/09 05:00;davsclaus;Thanks for the the patch Christian,"28/Apr/09 15:32;davsclaus;There was a bug in the patch. It did not read the entire stream

trunk: 769434.
1.x : 769435.",21/Nov/09 11:57;davsclaus;Closing all 2.0M2 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HL7/MLLP receivers fails for long HL7 messages,CAMEL-1566,12486292,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,christian.ohr,christian.ohr,24/Apr/09 15:56,21/Nov/09 11:57,14/Mar/19 02:42,29/Apr/09 20:11,1.6.0,,,,,,,,,,1.6.1,2.0-M2,,camel-mina,,,,0,"Long HL7 messages are split up into several exchanges,
see http://www.nabble.com/HL7-ProtocolCodec-truncates-long-HL7-messages-td23219074.html for more details",,,,,,,,,,,,,,,,,27/Apr/09 21:29;christian.ohr;hl7codec-1.6.1.patch;https://issues.apache.org/jira/secure/attachment/12462939/hl7codec-1.6.1.patch,27/Apr/09 21:29;christian.ohr;hl7codec-2.0-m2.patch;https://issues.apache.org/jira/secure/attachment/12462940/hl7codec-2.0-m2.patch,29/Apr/09 14:31;christian.ohr;mdm_t02.txt;https://issues.apache.org/jira/secure/attachment/12462942/mdm_t02.txt,,,3.0,,,,,,,,,,,,,,,,,,,2009-04-28 17:55:11.547,,,no_permission,,,,,,,,,,,,,76815,,,Sat Nov 21 11:57:59 UTC 2009,,,Patch Available,,,,0|i01j7b:,6880,,,,,,,,,24/Apr/09 15:57;christian.ohr;the package names of the classes need to be adapted,27/Apr/09 21:23;christian.ohr;Patches for the decoding problem for 1.x branch and trunk,"28/Apr/09 17:55;hadrian;Christian, thanks for the great patch.
For me HL7MLLPCodecLongTest still fails on the 1.x branch, once I figure it out I will commit the patches.","29/Apr/09 13:12;christian.ohr;Let me know if I can help. 
Remark: In the tests I had to change the host name of the MINA endpoints from localhost to 0.0.0.0. because on my Vista machine at home, localhost is resolved to an IPv6 loopback address (0:0:0:0:0:0:0:1), which either Mina or Java or both can't bind. Unfortunately, Vista does not allow to remove the IPv6 loopback interface. 0.0.0.0 forces IPv4, which worked.",29/Apr/09 13:29;hadrian;There may be a problem with the way the src/test/resources/mdm_t02.txt was extracted from the patch.  Could you please attach just that file to this jira?  Thanks,"29/Apr/09 15:09;hadrian;That one test is still not passing.  I wonder if it is in any way related to l10n, code pages and all.  If you could jump on the #camel irc channel and sort this out in an interactive way, it would be great.","29/Apr/09 20:11;hadrian;Patches applied with many, many thanks to Christian who spent a long evening resolving a few quirks interactively over irc.  Great work, and we hope to see more patches from you!",21/Nov/09 11:57;davsclaus;Closing all 2.0M2 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Make camel-validation thread-safe,CAMEL-1565,12486163,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,raulvk,raulvk,24/Apr/09 12:32,21/Nov/09 11:57,14/Mar/19 02:42,24/Apr/09 16:10,1.4.0,,,,,,,,,,1.6.1,2.0-M2,,camel-core,,,,0,"When a flow which contains a camel-validation endpoint is started, the XSD schemas are not loaded until the first request comes in and the camel-validation endpoint is first hit.
If two requests come in simultaneously, the initialization will be performed twice, at the same time. It seems that SchemaFactory is not thread-safe, so this results in the following exception:

10:38:20,860 | ERROR - org.apache.camel.processor.DeadLetterChannel - org.apache.camel.processor.Logger - Failed delivery for exchangeId: ID-ATOS-B624
E47AF0/3211-1240562892751/0-11. On delivery attempt: 0 caught: org.xml.sax.SAXException: FWK005 parse may not be called while parsing.
org.xml.sax.SAXException: FWK005 parse may not be called while parsing.
        at com.sun.org.apache.xerces.internal.jaxp.validation.Util.toSAXException(Util.java:62)
        at com.sun.org.apache.xerces.internal.jaxp.validation.XMLSchemaFactory.newSchema(XMLSchemaFactory.java:214)
        at javax.xml.validation.SchemaFactory.newSchema(SchemaFactory.java:594)
        at org.apache.camel.processor.validation.ValidatingProcessor.createSchema(ValidatingProcessor.java:204)
        at org.apache.camel.processor.validation.ValidatingProcessor.getSchema(ValidatingProcessor.java:118)
        at org.apache.camel.processor.validation.ValidatingProcessor.process(ValidatingProcessor.java:54)
        at org.apache.camel.impl.ProcessorEndpoint.onExchange(ProcessorEndpoint.java:92)
        at org.apache.camel.impl.ProcessorEndpoint$1.process(ProcessorEndpoint.java:66)
        at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43) 
.....

For more info: http://www.nabble.com/Concurrency-Issue-with-camel-validation-td23213294.html

Is it possible to backport the fix to 1.4?",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-04-24 15:51:11.294,,,no_permission,,,,,,,,,,,,,76816,,,Sat Nov 21 11:57:59 UTC 2009,,,,,,,0|i01j73:,6879,,,,,,,,,"24/Apr/09 15:51;davsclaus;Raul, we will not backport a fix into Camel 1.4.x.

You have to use your own component or patch Camel yourself.
But the patch will make it into the existing 1.x line, that is 1.6.1","24/Apr/09 16:10;davsclaus;1.x: 768346
trunk: 768342","24/Apr/09 16:14;davsclaus;Raul see this link for the patch
http://svn.apache.org/viewvc?view=rev&revision=768346
",21/Nov/09 11:57;davsclaus;Closing all 2.0M2 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ErrorHandler to be wrapped at every node incl children,CAMEL-1548,12486097,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,20/Apr/09 12:14,21/Nov/09 11:57,14/Mar/19 02:42,21/Apr/09 11:14,2.0-M1,,,,,,,,,,2.0-M2,,,camel-core,,,,0,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76817,,,Sat Nov 21 11:57:59 UTC 2009,,,,,,,0|i01j3b:,6862,,,,,,,,,"20/Apr/09 12:16;davsclaus;There could be other types it should apply for as its basically BatchProcessor that ""swallows"" exceptions.

So its also
- resequencer

And what else?","20/Apr/09 15:32;davsclaus;The solution I am work is general and applies to pipeline children as well.

Also I should remember to add a DEBUG logging the routes as:
- routes (with details)
- routes (with no details, eg all error handler and interceptors are not there, for easier spotting the route)","21/Apr/09 08:16;davsclaus;It should work now.

trunk: 767064",21/Nov/09 11:57;davsclaus;Closing all 2.0M2 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Delayer and StreamCaching will not be exculded if the CamelContext is restarted,CAMEL-1547,12486328,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,20/Apr/09 08:16,21/Nov/09 11:57,14/Mar/19 02:42,30/Apr/09 08:22,1.5.0,1.6.0,2.0-M1,,,,,,,,1.6.1,2.0-M2,,,,,,0,"The InterceptStrategy of Delayer and StreamCaching can't tell if the camelContext's InterceptStrategies has the instance of Delayer or StreamCaching.
So the  InterceptStrategy of Delayer and StreamCaching  will be added to the CamelContext's InterceptStrategies, when the CamelContext  is restarted.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-04-22 08:11:04.35,,,no_permission,,,,,,,,,,,,,76818,,,Sat Nov 21 11:57:59 UTC 2009,,,,,,,0|i01j33:,6861,,,,,,,,,22/Apr/09 08:11;davsclaus;Willem there is now also a HandleFault interceptor strategy that might need same fix. This is on *trunk only*,30/Apr/09 05:44;davsclaus;Willem can you update status on this as Hadrian would like to be able to build 1.6.1 RC,"30/Apr/09 08:22;njiang;trunk
http://svn.apache.org/viewvc?rev=766633&view=rev
camel-1.x
http://svn.apache.org/viewvc?rev=766635&view=rev","30/Apr/09 08:32;njiang;I just checked the code of HandleFault on the trunk, every thing looks good.",21/Nov/09 11:57;davsclaus;Closing all 2.0M2 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Multiple consumers getting created in custom endpoint,CAMEL-1544,12485677,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,20/Apr/09 03:00,21/Nov/09 11:57,14/Mar/19 02:42,23/Apr/09 06:28,1.4.0,1.5.0,1.6.0,2.0-M1,,,,,,,1.6.1,2.0-M2,,,,,,0,"If you restart the camel context ,you will get into trouble of creating multiple consumers.
Here is the mail thread with talks about it.
http://www.nabble.com/Multiple-consumers-getting-created-in-custom-endpoint-td22928845.html#a22928845",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-11-21 11:57:59.229,,,no_permission,,,,,,,,,,,,,76819,,,Sat Nov 21 11:57:59 UTC 2009,,,,,,,0|i01j2f:,6858,,,,,,,,,"23/Apr/09 06:28;njiang;trunk
http://svn.apache.org/viewvc?rev=766564&view=rev
http://svn.apache.org/viewvc?rev=766633&view=rev
camel-1.x
http://svn.apache.org/viewvc?rev=766635&view=rev",21/Nov/09 11:57;davsclaus;Closing all 2.0M2 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java.lang.Error thrown in mock/dataset assertions causes the async processing to not complete as just catches Exception,CAMEL-1535,12486494,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,16/Apr/09 07:00,21/Nov/09 11:57,14/Mar/19 02:42,16/Apr/09 08:11,2.0-M1,,,,,,,,,,1.6.1,2.0-M2,,camel-core,,,,0,"java.lang.AssertionException extends java.lang.Error

So the mock endpoint should deal with this and catch Throwable instead of Exception when it handles failures.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76820,,,Sat Nov 21 11:57:59 UTC 2009,,,,,,,0|i01j0f:,6849,,,,,,,,,"16/Apr/09 08:11;davsclaus;trunk: 765493

Camel 1.x did not suffer from this bug but I committed some cosmetic changes
1.x: 765501.


",21/Nov/09 11:57;davsclaus;Closing all 2.0M2 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
PackageHelper.isValidVersion NPE in osgi,CAMEL-1529,12486571,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,cameronbraid,cameronbraid,14/Apr/09 11:50,21/Nov/09 11:59,14/Mar/19 02:42,23/Apr/09 07:38,,,,,,,,,,,2.0-M3,,,osgi,,,,0,"[    SpringOsgiExtenderThread-4] PackageHelper                  DEBUG Failed to find out org.springframework.jms version: java.lang.NullPointerException
java.lang.NullPointerException
	at org.apache.camel.util.PackageHelper.isValidVersion(PackageHelper.java:47)
	at org.apache.camel.component.jms.JmsConfiguration.defaultCacheLevel(JmsConfiguration.java:1036)
	at org.apache.camel.component.jms.JmsConfiguration.configureMessageListenerContainer(JmsConfiguration.java:942)
	at org.apache.camel.component.jms.JmsConfiguration.createMessageListenerContainer(JmsConfiguration.java:417)
	at org.apache.camel.component.jms.JmsEndpoint.createConsumer(JmsEndpoint.java:161)
	at org.apache.camel.component.jms.JmsEndpoint.createConsumer(JmsEndpoint.java:51)
	at org.apache.camel.impl.EventDrivenConsumerRoute.addServices(EventDrivenConsumerRoute.java:61)
	at org.apache.camel.Route.getServicesForRoute(Route.java:74)
	at org.apache.camel.impl.RouteService.doStart(RouteService.java:77)
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:54)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:773)
	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:94)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:113)
	at org.springframework.context.event.SimpleApplicationEventMulticaster$1.run(SimpleApplicationEventMulticaster.java:78)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:49)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:76)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:274)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:736)
	at org.springframework.osgi.context.support.AbstractOsgiBundleApplicationContext.finishRefresh(AbstractOsgiBundleApplicationContext.java:235)
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext$4.run(AbstractDelegatedExecutionApplicationContext.java:358)
	at org.springframework.osgi.util.internal.PrivilegedUtils.executeWithCustomTCCL(PrivilegedUtils.java:85)
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.completeRefresh(AbstractDelegatedExecutionApplicationContext.java:320)
	at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor$CompleteRefreshTask.run(DependencyWaiterApplicationContextExecutor.java:136)
	at java.lang.Thread.run(Thread.java:619)


isValidVersion fortunately returns true when an exception occurs, so it gets passed this check anyway.","osgi - Equinox 3.4.2
org.apache.activemq/activemq-core/5.2.0
org.apache.activemq/activemq-camel/5.2.0
org.apache.activemq/activemq-pool/5.2.0
org.apache.camel/camel-core/2.0-SNAPSHOT
org.apache.camel/camel-jms/2.0-SNAPSHOT
org.apache.camel/camel-spring/2.0-SNAPSHOT
org.apache.camel/camel-osgi/2.0-SNAPSHOT
",,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-04-18 10:31:58.469,,,no_permission,,,,,,,,,,,,,76821,,,Sat Nov 21 11:59:09 UTC 2009,,,,,,,0|i01iz3:,6843,,,,,,,,,"18/Apr/09 10:31;davsclaus;Willem something for you to look at in the OSGi land.

As the application runs fine I have lowered the priority. But would be nice to get the exception fixed so the log isnt spammed.","23/Apr/09 06:50;njiang;Since spring provides OSGi bundle after Spring 2.5.5, and  JmsConfiguration uses PackageHelper to check if the Spring version upper than 2.5.1.
 I'd like to add check of Null Point in  PackageHelper to walk around this issue.","23/Apr/09 07:38;njiang;trunk
 http://svn.apache.org/viewvc?rev=767824&view=rev
camel-1.x
 http://svn.apache.org/viewvc?rev=767829&view=rev",21/Nov/09 11:59;davsclaus;Closing all 2.0M3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
seda component - the exchange copied should not use the UoW from the source,CAMEL-1525,12485643,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,09/Apr/09 09:09,21/Nov/09 11:57,14/Mar/19 02:42,10/Apr/09 08:24,1.6.0,2.0-M1,,,,,,,,,2.0-M2,,,camel-core,,,,0,"The async endpoints such as seda and wireTap should not share the same UnitOfWork as the source.

They are a total new independent exchange and should have their own UnitOfWork.

See nabble
http://www.nabble.com/UnitOfWork-ends-too-soon-with-Seda-endpoints-td22950359.html
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76822,,,Sat Nov 21 11:57:58 UTC 2009,,,,,,,0|i01iy7:,6839,,,,,,,,,"10/Apr/09 08:24;davsclaus;Fixed on 2.0 only as there is an API change and the issue is not serious. The UoW is scheduled for an overhaul in Camel 2.1

trunk: 763886
",21/Nov/09 11:57;davsclaus;Closing all 2.0M2 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-irc URI parsing is flawed,CAMEL-1524,12486433,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,hadrian,darren.davison,darren.davison,07/Apr/09 19:29,21/Nov/09 11:57,14/Mar/19 02:42,18/Apr/09 10:29,1.6.0,,,,,,,,,,1.6.1,2.0-M2,,documentation,,,,0,"the example URI for the camel-irc component (see http://camel.apache.org/irc.html) does not work.  Further, the current URI parsing code is flawed and subject to NPE's.

In IrcConfiguration.configure(URI uri) (see https://svn.apache.org/repos/asf/camel/branches/camel-1.x/components/camel-irc/src/main/java/org/apache/camel/component/irc/IrcConfiguration.java) the code attempts to parse a channel name as a path.  Because the '#' char is a fragment marker in a URI, the path (in the documented example) is zero length.

The following URI works with the current code implementation (note the required '//' and html-escaped '#' char):

{code}irc://nick@server.org/%23channel{code}",,,,,,,,,,,,,,,,,08/Apr/09 19:27;slewis;patch.txt;https://issues.apache.org/jira/secure/attachment/12462914/patch.txt,,,,,1.0,,,,,,,,,,,,,,,,,,,2009-04-08 19:27:56.068,,,no_permission,,,,,,,,,,,,,76823,,,Sat Nov 21 11:57:58 UTC 2009,,,,,,,0|i01ixz:,6838,,,,,,,,,08/Apr/09 19:27;slewis;Here's a patch that sorts out the NPEs and also makes the runtime follow the documentation.  Both irc: and irc:// can be used and you can use '#' instead of %23.  Updated the unit test too.,"18/Apr/09 10:29;davsclaus;Thanks Darren for the patch. I have applied it to 1.x and trunk.

trunk: 766289
1.x: 766290",18/Apr/09 11:23;darren.davison;it was actually Stan's patch :)  But thanks for applying it.,21/Nov/09 11:57;davsclaus;Closing all 2.0M2 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Spring DSL - Transacted routes with policy seems to not work - same route in Java DSL works ,CAMEL-1519,12486125,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,06/Apr/09 15:52,21/Nov/09 11:57,14/Mar/19 02:42,06/Apr/09 17:16,1.6.0,2.0-M1,,,,,,,,,1.6.1,2.0-M2,,camel-spring,,,,0,"In 1.x see rev 762400 where I added an unit test demonstrating the bug

The TX interceptor gets applied wrong with Spring DSL versus Java DSL.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76824,,,Sat Nov 21 11:57:58 UTC 2009,,,,,,,0|i01iwv:,6833,,,,,,,,,"06/Apr/09 17:16;davsclaus;trunk: 762421
1.x: 762419, 762420

","06/Apr/09 17:17;davsclaus;The issue are when you define the transacted policy in a single tag such as <policy ref=""required""/>.
When you span the entire route in a <policy> ROUTE HERE </policy> then it worked before also.",21/Nov/09 11:57;davsclaus;Closing all 2.0M2 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE of camel-restlet ,CAMEL-1516,12486345,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,03/Apr/09 10:31,21/Nov/09 11:57,14/Mar/19 02:42,19/Apr/09 02:13,1.5.0,1.6.0,2.0-M1,,,,,,,,1.6.1,2.0-M2,,,,,,0,"I'm getting a NullPointerException in Restlet when I use the Restlet component as a client.  I set up a Route that's something like:

from(endpointUri).setExchangePattern(ExchangePattern.InOut)
    .to(""restlet:http://localhost:9000/whatever"")
    .process(new SomeProcessor());

When I hit this route, I gett a NullPointerException at com.noelios.restlet.http.HttpConverter.getLogger().  Ultimately, it's trying to warn me about some headers that Restlet is going to ignore.  I see that when the RestletProducer creates the Restlet Client, it doesn't set a context (which is the object that's null, causing the NPE).  If I simply hack in:

client.setContext(new Context());
after the client is instantiated, it works.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-11-21 11:57:58.052,,,no_permission,,,,,,,,,,,,,76825,,,Sat Nov 21 11:57:58 UTC 2009,,,,,,,0|i01iw7:,6830,,,,,,,,,"19/Apr/09 02:13;njiang;trunk
http://svn.apache.org/viewvc?rev=761607&view=rev
camel-1.x branch
http://svn.apache.org/viewvc?rev=761612&view=rev",21/Nov/09 11:57;davsclaus;Closing all 2.0M2 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-csv : mutliple messages lead to repeated values,CAMEL-1513,12485438,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,jfe,jfe,02/Apr/09 14:42,21/Nov/09 11:57,14/Mar/19 02:42,09/Apr/09 08:17,2.0-M1,,,,,,,,,,1.6.1,2.0-M2,,camel-core,,,,0,"I have this config : 
{code:xml}
<route>
  <from uri=""direct:msgIn""/>
  <marshal><csv /></marshal>
  <to uri=""file://msgs?fileName=messages.csv"" />
</route>
{code}

I send Map objects with this :
{code:java}

ProducerTemplate template = context.createProducerTemplate();

Map msg1 = new HashMap();
msg1.put(""A"", 1);
msg1.put(""B"", 1);
Map msg2 = new HashMap();
msg2.put(""A"", 2);
msg2.put(""B"", 2);
template.sendBody(""direct:msgIn"", msg1);
template.sendBody(""direct:msgIn"", msg2);
{code}

This produces the following result :
{code}
1,1
2,2,2,2
{code}
instead of 
{code}
1,1
2,2
{code}
The more messages are pumped into the CSV marshaller, the more the values are repeated. This is because the marshal method in CsvDataFormat keeps adding columns to the config even if they are already present :
{code:java|title=CsvDataFormat.java}
  ........
        CSVConfig conf = getConfig();
        // lets add fields
        Set set = map.keySet();
        for (Object value : set) {
            if (value != null) {
                String text = value.toString();
                CSVField field = new CSVField(text);
                conf.addField(field);
            }
        }
        CSVWriter writer = new CSVWriter(conf);

  .......
{code}

I think the marshal method should perform something like
{code:java}
if (config == null) {
    config = createConfig();
    // lets add fields
    Set set = map.keySet();
    for (Object value : set) {
        if (value != null) {
     ..............
}
{code}

",,,,,,,,,,,,,,,,,09/Apr/09 07:48;jfe;camel-csv.patch;https://issues.apache.org/jira/secure/attachment/12462915/camel-csv.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2009-04-04 18:23:17.363,,,no_permission,,,,,,,,,,,,,76826,,,Sat Nov 21 11:57:57 UTC 2009,,,,,,,0|i01ivj:,6827,,,,,,,,,"04/Apr/09 18:23;davsclaus;Julien, well spotted

Do you care to try to create a patch?
http://camel.apache.org/support.html

And please add an unit test demonstrating this bug is fixed.

The problem is indeed the fact that CSVConfig is not created on each operation.

So the CSVConfig should *not* be a shared instance. It should be created on each invocation.

","06/Apr/09 06:44;jfe;Ok, I'll work on it. But I don't think the CSVConfig should be automatically created on each invocation because it would forbid providing one's own CSVConfig instance through setConfig(). Note that manually assigning a CSVConfig doesn't work as it should because of the current bug.","09/Apr/09 07:48;jfe;Here is a patch for this issue along with unit tests. The behavior is now by default to add new fields only if they have not already been set by previous messages. Thus, the field order stays consistent. The field addition is synchronized to avoid concurrency problems. The new property _autogenColumns_ can be set to false in order to disable the automatic generation of fields. Disabling automatic generation is especially useful in the case of a custom CSVConfig.
","09/Apr/09 08:17;davsclaus;Applied patch with thanks to Julien

trunk: 763551
1.x: 763553",21/Nov/09 11:57;davsclaus;Closing all 2.0M2 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BatchProcessor interrupt has side effects,CAMEL-1510,12485271,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,wtam,huntc@internode.on.net,huntc@internode.on.net,02/Apr/09 01:05,21/Nov/09 11:57,14/Mar/19 02:42,16/Apr/09 20:31,1.6.0,2.0-M1,,,,,,,,,1.6.1,2.0-M2,,camel-core,,,,0,"I have noticed that the BatchProcessor class uses the Thread class interrupt method to wake the run loop from sleeping within the enqueueExchange method.

The unfortunate side effect of this is that if the run loop is in the middle of processing exchanges, and the processing involves something slow like establishing a JMS connection over SSL or queuing to an asynchronous processor, then the processing can become interrupted. The consequence of this side effect is that the batch sender thread rarely gets the opportunity to complete properly and exceptions regarding the interrupt are thrown.

This all became apparent during some performance testing that resulted in continuously adding exchanges to the aggregator, the threshold becoming reached, and then trying to enqueue the aggregated result to a JMS queue.

If my analysis of the BatchProcessor is correct then I would recommend finer grained concurrency controls being used instead of relying upon interrupting a thread. Perhaps something like the following (untested) re-write of the sender:

{code}
    private class BatchSender extends Thread {
        private Queue<Exchange> queue;
        private boolean exchangeQueued = false;
        private Lock queueMutex = new ReentrantLock();
        private Condition queueCondition = queueMutex.newCondition();

        public BatchSender() {
            super(""Batch Sender"");
            this.queue = new LinkedList<Exchange>();
        }

        public void cancel() {
            interrupt();
        }

        private void drainQueueTo(Collection<Exchange> collection, int batchSize) {
            for (int i = 0; i < batchSize; ++i) {
                Exchange e = queue.poll();
                if (e != null) {
                    collection.add(e);
                } else {
                    break;
                }
            }
        }

        public void enqueueExchange(Exchange exchange) {
            queueMutex.lock();
            try {
                queue.add(exchange);
                exchangeQueued = true;
                queueCondition.signal();
            } finally {
                queueMutex.unlock();
            }
        }

        @Override
        public void run() {
            queueMutex.lock();
            try {
                do {
                    try {
                        if (!exchangeQueued) {
                            queueCondition.await(batchTimeout,
                                    TimeUnit.MILLISECONDS);
                            if (!exchangeQueued) {
                                drainQueueTo(collection, batchSize);
                            }
                        }

                        if (exchangeQueued) {
                            exchangeQueued = false;
                            queueMutex.unlock();
                            try {
                                while (isInBatchCompleted(queue.size())) {
                                    queueMutex.lock();
                                    try {
                                        drainQueueTo(collection, batchSize);
                                    } finally {
                                        queueMutex.unlock();
                                    }
                                }

                                if (!isOutBatchCompleted()) {
                                    continue;
                                }
                            } finally {
                                queueMutex.lock();
                            }

                        }

                        queueMutex.unlock();
                        try {
                            try {
                                sendExchanges();
                            } catch (Exception e) {
                                getExceptionHandler().handleException(e);
                            }
                        } finally {
                            queueMutex.lock();
                        }
                    } catch (InterruptedException e) {
                        break;
                    }
                } while (true);
            } finally {
                queueMutex.unlock();
            }
        }

        private void sendExchanges() throws Exception {
            Iterator<Exchange> iter = collection.iterator();
            while (iter.hasNext()) {
                Exchange exchange = iter.next();
                iter.remove();
                processExchange(exchange);
            }
        }
    }
{code}

I have replaced the concurrent queue with a regular linked list and mutexed its access. In addition any queuing of exchanges is noted. This should result in less locking.

The main change though is that queuing an exchange does not interrupt the batch sender's current activity.

I hope that this sample is useful.",Mac OS X,,,,,,,,,,,,,,,,17/Apr/09 00:02;huntc@internode.on.net;BatchProcessor-lockmin.java.20.diff;https://issues.apache.org/jira/secure/attachment/12462918/BatchProcessor-lockmin.java.20.diff,16/Apr/09 04:23;huntc@internode.on.net;BatchProcessor.java.20.diff;https://issues.apache.org/jira/secure/attachment/12462917/BatchProcessor.java.20.diff,16/Apr/09 19:10;mrt1nz;camel-core-1.x.patch;https://issues.apache.org/jira/secure/attachment/12462919/camel-core-1.x.patch,16/Apr/09 19:10;mrt1nz;camel-core-2.x.patch;https://issues.apache.org/jira/secure/attachment/12462920/camel-core-2.x.patch,,4.0,,,,,,,,,,,,,,,,,,,2009-04-12 09:11:24.173,,,no_permission,,,,,,,,,,,,,76827,,,Sat Nov 21 11:57:57 UTC 2009,,,Patch Available,,,,0|i01iuv:,6824,,,,,,,,,02/Apr/09 01:07;huntc@internode.on.net;Formatted code,"02/Apr/09 01:30;huntc@internode.on.net;The collection.clear() statement was incorrect. Removed.
","02/Apr/09 01:36;huntc@internode.on.net;Just wondering... the batch processor's collection should always be a thread-safe type of collection. Is this the case in practice? If the collection is not thread safe then the batch sender run method will contend with the processor's isOutBatchCompleted(), doStop() and getCollection() methods.
","11/Apr/09 22:11;huntc@internode.on.net;Upon inspecting the 2.0 trunk I see that this problem will be carried through.

Is there any interest in fixing this problem?","12/Apr/09 09:11;mrt1nz;Christopher, sorry for reacting so late - didn't see the JIRA notification earlier. I wonder if it's sufficient to make the methods {{enqueueExchange()}} and {{sendExchanges}} synchronized to solve that problem. What do you think?","12/Apr/09 11:58;huntc@internode.on.net;Hi Martin,

Thank you for replying.

I presume by synchronised you mean that the enqueueExchange and sendExchanges lock on some shared mutex.

I wonder with your suggestion if you might also have to try synchronising with other things that can then be overloaded e.g. isInBatchCompleted and isOutBatchCompleted. Who would know what these methods could eventually be doing?

Personally I prefer to see the batch sender awake from known conditions i.e. timeout or exchange enqueued. For some reason I also feel that Interrupts are a little brutal and should be used sparingly.

In addition I think that what I have proposed (albeit untested) would be more efficient as there is only one lock in play. The present solution has the lock associated within the blocking queue. You would of course being adding another lock with the potential for a deadlock.

Thanks for the continued dialogue.

Kind regards,
Christopher","12/Apr/09 18:21;mrt1nz;Hi Christopher,

agreed that it's a bit more elegant to use the locking mechanism from {{java.util.concurrent.locks}} when using Java 5 or higher :) I just tried to solve the problem using {{ReentrantLock}} and {{Condition}} too but instead of using an {{exchangeQueued}} variable I let the {{enqueueExchange()}} and the {{cancel()}} methods to _signal_ the batch sender to resume processing. I tested the following code with the {{AggregatorTest}} unit tests.

{code:java}
    private class BatchSender extends Thread {
        
        private volatile boolean cancelRequested;

        private Queue<Exchange> queue;
        
        private Lock queueMutex = new ReentrantLock();
        
        private Condition queueCondition = queueMutex.newCondition();

        public BatchSender() {
            super(""Batch Sender"");
            this.queue = new LinkedList<Exchange>();
        }

        @Override
        public void run() {
            while (true) {
                queueMutex.lock();
                try {
                    boolean signalled = queueCondition.await(batchTimeout, TimeUnit.MILLISECONDS);
                    processEnqueuedExchanges(signalled);
                } catch (InterruptedException e) {
                    break;
                } catch (Exception e) {
                    // TODO: handle exception ...
                    e.printStackTrace();
                } finally {
                    queueMutex.unlock();
                }
                
            }
        }
        
        public void cancel() {
            cancelRequested = true;
            queueMutex.lock();
            try {
                queueCondition.signal();
            } finally {
                queueMutex.unlock();
            }
        }
     
        public void enqueueExchange(Exchange exchange) {
            queue.add(exchange);
            queueMutex.lock();
            try {
                if (isInBatchCompleted(queue.size())) {
                    queueCondition.signal();
                }
            } finally {
                queueMutex.unlock();
            }
        }
        
        private void processEnqueuedExchanges(boolean signalled) throws Exception {

            if (!signalled) { 
                drainQueueTo(collection, batchSize); 
            } else {
                if (cancelRequested) {
                    return;
                }
                while (isInBatchCompleted(queue.size())) {
                    drainQueueTo(collection, batchSize);  
                }
                
                if (!isOutBatchCompleted()) {
                    return;
                }
            }
            
            
            try {
                sendExchanges();
            } catch (Exception e) {
                getExceptionHandler().handleException(e);
            }
            
        }
        
        private void sendExchanges() throws Exception {
           ...
        }
        
        private void drainQueueTo(Collection<Exchange> collection, int batchSize) {
           ...
        }

    }    
{code}

Does this make sense to you?

BTW similar changes should also be applied to the stream resequencer. Let's close this issue only when both the {{BatchProcessor}} and {{StreamResequencer}} are fixed.
","12/Apr/09 23:00;huntc@internode.on.net;Hi Martin,

I'm still leaning to the patch that I provided... I think that it closely resembles the code that is already there which is essentially flawed only in the sense that it interrupts when adding an exchange. 

A couple of observations with your changes:
- cancel still needs to interrupt - you really want to interrupt with cancellations.
- cancelRequested is not being protected within the cancel method.
- cancelRequested wouldn't be required if cancel interrupts.
- drainQueueTo will need to protect the queue also.

... my code did do all of the above.

Kind regards,
Christopher","13/Apr/09 08:13;mrt1nz;Christopher, my intention was to provide an implementation that signals the batch sender to stop waiting when the batch size has been reached and to continue processing. I think we should keep that. This is especially useful when the batch timeout is set to a high value. It prevents the batch sender from unecessarily waiting when the batch size has already been reached. From what I've seen in your proposal this is not the case i.e. the batch sender continues to wait even if the in-batch size has been reached before the timeout. Changing cancellation to use {{interrupt()}} makes sense to me.

Maybe we should also consider to have a shared implementation for the wait/signal/cancel mechanisms for the {{BatchProcessor}} and the {{StreamResequencer}}, otherwise, we'd need to implement similar things in two different places. Do you want to provide a patch file plus some tests or should we wait for comments from one of the commiters how to proceed?
","13/Apr/09 08:48;huntc@internode.on.net;""my intention was to provide an implementation that signals the batch sender to stop waiting when the batch size has been reached and to continue processing. I think we should keep that. ""

I see the problem here - I forgot to include a signal of the condition variable. I will update my original comment to reflect this. My sincere apologies for the confusion. Would you mind re-reviewing my code?

""Maybe we should also consider to have a shared implementation for the wait/signal/cancel mechanisms for the BatchProcessor and the StreamResequencer, otherwise, we'd need to implement similar things in two different places. ""

I agree, a shared batch sender style of class should be useful.

""Do you want to provide a patch file plus some tests or should we wait for comments from one of the commiters how to proceed?""

I'm happy to provide a patch file, though I did have difficulty building the camel distro. I could try again.

I think that it would be great to receive some more feedback on this incident.

Thanks again for the dialogue.",13/Apr/09 08:50;huntc@internode.on.net;Now signals the queue condition signal - forgot to include it in my original code suggestion.,"14/Apr/09 03:38;wtam;Thanks for the great discussion and proposal.   I personally think Martin's version of BatchSender is a bit easier to read.  If they both solve the performance issue, I'd give it a +1.  I think we agree to call intercept() in cancel().  Regarding the last bullet, it looks like drainQueueTo() is called with queueMutex already held, right?","14/Apr/09 04:23;huntc@internode.on.net;My feedback on Martin's proposal:

1. cancelRequested is not required.
2. Line 19: move the lock before the while statement so that the block becomes (also using do instead of while) - less locking i.e.:

{code}
    queueMutex.lock();
    try {
      do {
        try {
          boolean signalled = queueCondition.await(batchTimeout,
              TimeUnit.MILLISECONDS);
          processEnqueuedExchanges(signalled);
        } catch (InterruptedException e) {
          break;
        } catch (Exception e) {
          // TODO: handle exception ...
          e.printStackTrace();
        }

      } while (true);
    } finally {
      queueMutex.unlock();
    }
{code}

3. Preserve the existing code for the cancel method i.e. it should continue performing an interrupt i.e.:

{code}
    public void cancel() {
      interrupt();
    }
{code}

4. enqueueExchange needs to add to the queue while the queue is locked i.e.:

{code}
  public void enqueueExchange(Exchange exchange) {
    queueMutex.lock();
    try {
      queue.add(exchange);
      if (isInBatchCompleted(queue.size())) {
        queueCondition.signal();
      }
    } finally {
      queueMutex.unlock();
    }
  }
{code}

NOTE: isInBatchCompleted is called while the queue is locked - my example did not do this. My focus was on keeping the locks locked minimally given the goal of performance and throughput.

5. processEnqueuedExchanges does not need to check if the batch is cancelled as the interrupt would have previously called an exception i.e.:

{code}
  private void processEnqueuedExchanges(boolean signalled) throws Exception {

    if (!signalled) {
      drainQueueTo(collection, batchSize);
    } else {
      while (isInBatchCompleted(queue.size())) {
        drainQueueTo(collection, batchSize);
      }

      if (!isOutBatchCompleted()) {
        return;
      }
    }

    try {
      sendExchanges();
    } catch (Exception e) {
      getExceptionHandler().handleException(e);
    }

  }
{code}

NOTE: isInBatchCompleted is now being called a second time - once inside enqueueExchange and now here.

NOTE: sendExchanges is being called while the queue is locked. If there is some slow IO occurring (as was indeed the case with my determining this issue originally) then nothing can be added to the queue during sendExchanges.

My focus with the original code submission was on minimising lock contentions while retaining a structure that built on proven code.","14/Apr/09 05:59;mrt1nz;My feedback on Christopher's comments:

1) ok
2) ok
3) ok
4) I added {{isInBatchCompleted()}} here because otherwise we'd always stop the batch sender from waiting {{batchTimeout}} ms. I think that's also an issue in the original code (i.e. in the codebase, not Christopher's proposal): the batch sender has always been interrupted whenever a message was enequeued. From a user's perspective there's no noticable batch timeout, for example, when the {{batchTimout}} is set to 1000 ms and every 300 ms there is a message coming in (assuming the batch size is 100). Normally, the batch processor should send 3 messages after the timout occurs but using the original code it would send more (I'd expect 100 messages) The unit test testing the batch timout only works because it only sends a single message (BTW the original patch from CAMEL-1037 honored the batch timeout). I didn't verify these statements in a unit test - just derived that from looking at the code. We should consider that when fixing this issue (maybe Christopher's initial proposal is not 'built on a proven code'). Regarding all other comments for this point: ok (it makes sense to do a more fine-grained locking).
5) Actually, I don't fully understand why a {{while (isInBatchCompleted(queue.size()))}} is used here anyway. Any thoughts? Regarding lock granularity: a more fine-grained locking woud make sense here too.

Furthermore, I agree with William that Christopher's original proposal is a bit difficult to read. Some refactorings would help. ","14/Apr/09 06:23;huntc@internode.on.net;Hi guys,

Thanks for this great dialogue.

With regards to:

_I think that's also an issue in the original code (i.e. in the codebase, not Christopher's proposal): the batch sender has always been interrupted whenever a message was enequeued. From a user's perspective there's no noticable batch timeout, for example, when the batchTimout is set to 1000 ms and every 300 ms there is a message coming in (assuming the batch size is 100). Normally, the batch processor should send 3 messages after the timout occurs but using the original code it would send more (I'd expect 100 messages)_

I do not believe that is the case with the original code or my proposal. The queue is only drained into the collection if the batch times out. Using my code to illustrate:

{code}
if (!exchangeQueued) {
  drainQueueTo(collection, batchSize);
}
{code}

Furthermore sendExchanges would not even be called unless the batch is complete given the following block:

{code}
  if (exchangeQueued) {
       exchangeQueued = false;
       queueMutex.unlock();
       try {
           while (isInBatchCompleted(queue.size())) {
               queueMutex.lock();
               try {
                   drainQueueTo(collection, batchSize);
               } finally {
                   queueMutex.unlock();
               }
           }

           if (!isOutBatchCompleted()) {
               continue;
           }
       } finally {
           queueMutex.lock();
       }

   }

{code}

... if the batch is not completed then the loop will continue.

On the re-factoring, please bear in mind that in essence, all that I have done is moved blocks of existing code around and used a condition to signal when adding to the queue.","15/Apr/09 04:11;wtam;@Martin
Let me try to answer your question regarding InBatchCompleted(),  the original patch from CAMEL-1037 has an issue.  (I thought it had anyway.)   Suppose the batch size is a very small number (say 2).  Someone can send a large number (say 1000) of messages to the BatchProcessor in a short period of time.  It can cause the queue size to become much greater than the batch size. The reason is that the enqueueExchange only interrupts the Sender thread if it is sleeping.  If the Sender thread is not sleeping it only drain 2 messages from the queue.  The queue can back up pretty easily.   When that happens, (hundreds of) messages are stuck on the queue until batchTimeout expires.  However, it only drains 2 messages (batchSize) for each batchTimeout.  Most of messages in the queue really should have been sent.   It should have at most 1 message left in the queue in this example.

The ""while (isInBatchCompleted(queue.size()"" is to address the issue.  We actually introduced new parameters InBatchSize and OutBatchSize.  InBatchSize is how big the queue can grow before draining the messages to the collection.  OutBatchSize is how big the collection can grow before messages are sent.  

BTW, setting the OutBatchSize would give you the behavior in the original patch.

","15/Apr/09 05:15;wtam;@Christopher
You are pretty close to have a patch, right?  Would you mind to create one?   ",15/Apr/09 05:48;huntc@internode.on.net;Sure thing. I should be able to do this tomorrow - shall I work off the 2.0 trunk?,15/Apr/09 06:12;mrt1nz;Thank you guys for this great discussion. It would be great to have a patch for the 2.x trunk and the 1.x branch. If I can help you doing that please let me know.,"16/Apr/09 04:23;huntc@internode.on.net;Batch file attached for the trunk (v2) build.

I have tested this by running AggregatorTest - do you think that is sufficient?

I have not had the time yet to update the v.1.x branch.","16/Apr/09 04:45;wtam;Hi Christopher,
Thanks for working on the issue.  I'd say at least running all tests in camel-core. ","16/Apr/09 05:15;huntc@internode.on.net;I have now ran all of the camel-core tests and things appear fine:

{code}
cd Development/Eclipse/camel-workspace/camel-trunk/
cd camel-core/
mvn test
[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: Core
[INFO]    task-segment: [test]
[INFO] ------------------------------------------------------------------------
[INFO] [resources:resources]
[INFO] Using default encoding to copy filtered resources.
[INFO] [compiler:compile]
[INFO] Compiling 1 source file to /Volumes/Users HD/Users/huntc/Development/Eclipse/camel-workspace/camel-trunk/camel-core/target/classes
[INFO] [resources:testResources]
[INFO] Using default encoding to copy filtered resources.
[INFO] [compiler:testCompile]
[INFO] Nothing to compile - all classes are up to date
[INFO] [surefire:test]
[INFO] Surefire report directory: /Volumes/Users HD/Users/huntc/Development/Eclipse/camel-workspace/camel-trunk/camel-core/target/surefire-reports

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running org.apache.camel.management.JmxInstrumentationWithConnectorTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 7.151 sec
Running org.apache.camel.issues.InterceptorLogTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.821 sec
Running org.apache.camel.processor.RemoveHeaderTest
...
Running org.apache.camel.converter.ConverterTest
Tests run: 15, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.703 sec <<< FAILURE!
...
Running org.apache.camel.util.jndi.JndiTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.175 sec
Running org.apache.camel.component.bean.CustomParameterMappingStrategyTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.799 sec

Results :

Failed tests: 

Tests run: 941, Failures: 1, Errors: 0, Skipped: 0

[INFO] ------------------------------------------------------------------------
[ERROR] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
{code}

ConverterTest fails because I am running on Mac OS X and have a path that includes a space:

{code}
ConverterTest
org.apache.camel.converter.ConverterTest
testFileToString(org.apache.camel.converter.ConverterTest)
junit.framework.AssertionFailedError: Should have returned a String!
	at junit.framework.Assert.fail(Assert.java:47)
	at junit.framework.Assert.assertTrue(Assert.java:20)
	at junit.framework.Assert.assertNotNull(Assert.java:217)
	at org.apache.camel.converter.ConverterTest.testFileToString(ConverterTest.java:166)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at junit.framework.TestCase.runTest(TestCase.java:164)
	at junit.framework.TestCase.runBare(TestCase.java:130)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:120)
	at junit.framework.TestSuite.runTest(TestSuite.java:230)
	at junit.framework.TestSuite.run(TestSuite.java:225)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:81)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:45)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)

{code}

(that's an unlreated problem)

Please note that I have not attempted to apply my changes to StreamResequencer. Martin highlighted that StreamResequencer has a similar structure to BatchProcessor.",16/Apr/09 05:18;mrt1nz;I'll provide a patch for the StreamResequencer within the next days.,"16/Apr/09 15:40;wtam;Thanks guys.  Christopher, your patch looks good.  I slightly modified it. 

1. I got it to pass style check.  FYI, you enable style checker by ""mvn -Psourcecheck"".

2. I made sure queue.size() is called with queueLock held.

(Regarding ""while loop around (isInBatchCompleted(queue.size)"", your patch and the original code stand correct.  It is still needed but only for the timeout case.)



","16/Apr/09 17:17;wtam;Christopher's patch has been submitted to trunk (r765686) and 1.x (r765689).   
Martin, I will submit your fix to StreamResequencer whenever you are ready. 

Thanks!
","16/Apr/09 18:59;wtam;To answer Christopher's question:
""Just wondering... the batch processor's collection should always be a thread-safe type of collection. Is this the case in practice? If the collection is not thread safe then the batch sender run method will contend with the processor's isOutBatchCompleted(), doStop() and getCollection() methods.""

The batch processor's collection is exclusively accessed by the BatchSender thread (with the exception accessed by the doStop() method), so the collection does not need to be a thread-safe type.  The doStop() method is called during shutdown and it interrupts the BatchSender thread before clear() on the collection, so it should be fine.  The getCollection() is a protected method and it never gets called.  We probably should get rid of getCollection() and make In/OutBatchCompleted() method private.  Thoughts?","16/Apr/09 19:10;mrt1nz;Attached are the StreamResequencer patches for 2.x trunk and 1.x branch:

* camel-core-2.x.patch
* camel-core-1.x.patch",16/Apr/09 19:58;wtam;Submitted Martin's patch to trunk (r765729) and 1.x (r765731);,"16/Apr/09 20:31;wtam;Also, submitted changes to reduce the scope of methods that access collection object to trunk (r765743) and 1.x (r765748).  Big thanks to Christopher Hunt and Martin Krasser for working on this issue!","17/Apr/09 00:01;huntc@internode.on.net;Hi William,

Thanks for submitting my patch to BatchProcessor. Thank you also for reviewing the code and noticing that queue.size() wasn't protected. I obtained your version of BatchProcessor from the trunk and further noticed that the call to isOutBatchCompleted can be safely performed while retaining the queue lock. I was under the original impression (through not looking) that isInBatchCompleted and isOutBatchCompleted were overload-able. Since they are private then this can not be the case and thus can be invoked while retaining the queue lock. The code is nicely simplified by removing the locking around these calls.

I have attached a minor patch reflecting the above after having performed the camel-core test cases successfully again. The patch is for the 2.0 source.

Kind regards,
Christopher","17/Apr/09 00:02;huntc@internode.on.net;Reduced locking further:

BatchProcessor-lockmin.java.20.diff
",17/Apr/09 01:18;wtam;Submitted Christopher's second patch (rr765824 and r765825).  Thanks!,"19/Apr/09 02:46;huntc@internode.on.net;Hi Martin,

I just had a look at your changes to StreamResequencer and wonder if you need to signal that a request has been delivered using a boolean as well as relying on the condition variable. Perhaps you do not need to discriminate between a timeout and whether a request is made, but I thought you should know that a condition variable can wake up spuriously on some platforms i.e. non-timeout and non-signal.

From the Java 5 javadoc:

_When waiting upon a Condition, a ""spurious wakeup"" is permitted to occur, in general, as a concession to the underlying platform semantics. This has little practical impact on most application programs as a Condition should always be waited upon in a loop, testing the state predicate that is being waited for. An implementation is free to remove the possibility of spurious wakeups but it is recommended that applications programmers always assume that they can occur and so always wait in a loop._

'hope that this is useful to you.

Kind regards,
Christopher","19/Apr/09 16:25;mrt1nz;Hi Christopher,

Spurious wakeups are ok for the stream resequencer. If they occur the ResequencerEngine takes care that only elements are delivered if they really timed-out (the ResequencerEngine tracks timeouts for each element separately). We can leave the code as is.
",21/Nov/09 11:57;davsclaus;Closing all 2.0M2 tickets,,,,,,,,,,,,,,,,,,,,,,,,,
DefaultCamelContext.isStarting returns incorrect status,CAMEL-1509,12485056,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,san,san,01/Apr/09 17:12,21/Nov/09 11:57,14/Mar/19 02:42,08/Apr/09 09:23,1.6.0,2.0-M1,,,,,,,,,1.6.1,2.0-M2,,camel-core,,,,0,"DefaultCamelContext.isStarting returns true while it actually not started.
So the following groovy test case fails:

{code:title=test.groovy}
import org.apache.camel.impl.DefaultCamelContext;
import org.apache.camel.language.groovy.GroovyRouteBuilder;

class Foo {
    def name
    def data
    void run(data) {
        println ""[${name}] got ${data}""
        this.data = data
    }
}

public class MyRoute extends GroovyRouteBuilder {
    def bean = new Foo(name: ""bean"")
    protected void configure() {
        from(""direct:start"").bean(bean, ""run"")
    }
}

camelCtx = new DefaultCamelContext()
route = new MyRoute()
camelCtx.addRoutes(route);

Thread.start {
    camelCtx.start();
}

while (camelCtx.isStarting()) {
    Thread.sleep(1000)
}

camelCtx.createProducerTemplate().sendBody(""direct:start"", ""data"")
if (!route.bean.data) {
    println ""FAILED: no data has been received!""
} else {
    println ""PASSED""
}

camelCtx.stop();
{code}

Note, after moving of  
{code}
camelCtx.addRoutes(route)
{code}
 after
{code}
Thread.start {
    camelCtx.start();
}
{code}
the test passes.

Also the program does not finish after camelCtx.stop();
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-04-02 02:28:46.957,,,no_permission,,,,,,,,,,,,,76828,,,Sat Nov 21 11:57:57 UTC 2009,,,,,,,0|i01iun:,6823,,,,,,,,,"02/Apr/09 02:28;njiang;Hi
Can you add a check for the camelCtx.isStarted() for waiting for camelCtx starting?
{code}
camelCtx = new DefaultCamelContext()
route = new MyRoute()
camelCtx.addRoutes(route);

Thread.start {
    camelCtx.start();
}

while (!camelCtx.isStarted() || camelCtx.isStarting()) {
    Thread.sleep(1000)
}
{code}
I just checked the code. If the camelCtx.start() code is running later than the camelCtx.isStarting() check,
the test will failed since the route rule is not started yet.
","02/Apr/09 03:37;san;Willem, thank you for taking this!
Should not this implication be always true:
{code}
isStarting => !isStarted
{code}
?","02/Apr/09 03:51;njiang;Here your are the starting codes
{code}
    public void start() throws Exception {
        if (started.compareAndSet(false, true)) {
            starting.set(true);
            try {
                if (childServices != null) {
                    ServiceHelper.startServices(childServices);
                }
                doStart();
            } finally {
                notStarting();
            }
        }
    }
{code}
started and starting flag are false by default.

if the camel context finishe the start process, 
the staring flag wil be set to false again.

So , if the camel context's start method doesn't be called , 
isStarting != ! isStarted.

","02/Apr/09 03:56;san;BTW,
Timer thread introduced in https://issues.apache.org/activemq/browse/CAMEL-1129 prevents the program from being finished.
That's because timer is being created as not a daemon. I tried DeadLetterChannel.java with line 52 fixed as this:
{code}
    private static Timer timer = new Timer(true); // create timer with associated thread running as daemon
{code}
and it works fine.
Should it be a separate issue, or this info is enough for issue to be fixed?","02/Apr/09 04:03;san;{quote}
if the camel context finishe the start process,
the staring flag wil be set to false again.

So , if the camel context's start method doesn't be called ,
isStarting != ! isStarted.
{quote}
:) of course, I mean the timeline between ctx.start() and ctx.stop() (outside of which both methods should return false).","02/Apr/09 04:23;marat;The logic in the ServiceSupport is somewhat interesting. 

The state goes from

Thread1 -> ServiceSuppoet.start() -> starting = false and stared = false -> starting = true and started = true -> starting = false and started = true

Now why is started = true is set before starting = true? started is in pass tense, so to me this is clearly that started = true should have been set *after* starting went from true to false

Moreover there is also a race.

Look at the ServiceSupport.stop() method its state goes like this:

Thread 1-> ServiceSupport.stop() -> started = true and stopping = false -> stopping = true -> stopped = true and  started = false and stopping = false

Now lets look at this scenario, 2 threads invoking onto the same CamelContext

Thread1 ->ServiceSupport.start() -> starting = false and stared = false -> starting = true and started = true -> @
Thread2-> ServiceSupport.stop() -> started = true and stopping = false -> stopping = true -> @

@ is the point in time when we will have a concurrent start and stop logic executed on the same context and I'd imagine this can't be good ;)

","02/Apr/09 07:01;njiang;@Alexander
Thanks for point out the timer's issue. I will did a quick fix for that.
Since it a small fix, I think we can trace it in this issue.
","02/Apr/09 07:08;njiang;@Marat

I  think we set tthe started and stopped to true at first line is to avoid different thread calling the start() or stop() more than twice at the same time.
For the thread1, and thread2 call the start() and stop() at the same time I don't think it will happen in normal situation. 
","02/Apr/09 07:20;davsclaus;Yeah the logic is a bit special

I guess it needs to be set as Started before starting all its child services. I am just guessing here. James S. might remember.

However it could be that the *isStarted* method could be changed to:
{code}
    public boolean isStarted() {
        return started.get() && !starting.get();
    }
{code}
Then it will only return true when the starting is complete.

","02/Apr/09 07:23;njiang;@Alexander,

I just checked the code of Camel trunk ( Camel 2.0-SNAPSHOT) the timer thread issue was fixed in CAMEL-1460, but the patch is not merged into camel-1.x branch.
I'm working on this.
","07/Apr/09 06:21;hadrian;@Willem, I just committed a fix for the state machine.  The state transitions are:

Created -> Starting
Starting -> Started
Starting -> Stopping (on exception)
Stopping -> Stopped

Started only becomes true *after* the starting process finished, so starting and started are not true at the same time anymore.

Please note that I left the previous route starting behavior unchanged.  That is routes start *after* the context is started, which means that the context may be reported as started, but the routes may still be starting.  I believe this is the correct behavior given the fact that routes could be added at runtime to a started context.

Is there anything left to be done for this issue? ","07/Apr/09 08:20;njiang;@Hadrian
Thanks for looking into this issue, your patch make the service state more clear :) 
Here is a side effect of your changing (CAMEL-1515) if we change the semantic of started, it will cause some side effect by adding some component which will not be started.
Don't worry , I just did a quick fix for that. ","07/Apr/09 12:01;hadrian;@Willem, you're right.  I saw that and later forgot about it, that method didn't need to be there anymore. Thanks!

Can we close this now?","08/Apr/09 09:22;njiang;@Hadrian

I merged the patch back to camel-1.x, so we can close it know.

trunk
http://svn.apache.org/viewvc?rev=762633&view=rev

camel-1.x
http://svn.apache.org/viewvc?rev=763092&view=rev",21/Nov/09 11:57;davsclaus;Closing all 2.0M2 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TypeConverter - Can find Object type converter even though there is a more specialized converter to use,CAMEL-1508,12485875,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,01/Apr/09 11:25,21/Nov/09 11:57,14/Mar/19 02:42,01/Apr/09 13:20,1.6.0,,,,,,,,,,2.0-M2,,,camel-core,,,,0,The code travels down the super to fast. And the code that checks for Object and inherited types in the end of the lookup code should be run as last resort.,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76829,,,Sat Nov 21 11:57:57 UTC 2009,,,,,,,0|i01iuf:,6822,,,,,,,,,"01/Apr/09 13:20;davsclaus;Only fixing on trunk as DefaulttTypeConverter is a bit different in 1.x

trunk: 760877",21/Nov/09 11:57;davsclaus;Closing all 2.0M2 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Recursively scan multipart nodes of an email for attachments - not just top level nodes,CAMEL-1506,12485045,12490635,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,ryangardner,ryangardner,31/Mar/09 21:18,27/Nov/10 06:42,14/Mar/19 02:42,02/Apr/09 07:43,2.0.0,,,,,,,,,,2.0-M2,,,camel-mail,,,,0,"The current code will only scan the top level of a multipart message. This misses any attachments that are under another node.

All unit tests still run for me after applying this patch.",,,900,900,,0%,900,900,,,,,,,CAMEL-1507,,31/Mar/09 21:19;ryangardner;MailContentAttachmentScanning.patch;https://issues.apache.org/jira/secure/attachment/12462907/MailContentAttachmentScanning.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2009-04-01 13:40:27.405,,,no_permission,,,,,,,,,,,,,76830,,,Sat Nov 21 11:57:57 UTC 2009,,,Patch Available,,,,0|i01itz:,6820,,,,,,,,,31/Mar/09 21:19;ryangardner;fixes attachment scanning behavior.,"01/Apr/09 13:40;davsclaus;Willem when you get this fixed in Camel you should ping Lars from the SMX team as the Mail component in SMX was the base we used for the Camel one as well.
So they have parts of code that is similar.

So this bug could also exists in SMX.","01/Apr/09 13:48;njiang;Sure, I will.","01/Apr/09 15:05;ryangardner;A very easy way to test this bug out is to apply CAMEL-1507 (even if you immediately roll it back) where I have two unit tests that implement different ways of sending attachments with multipart/alternative messages. 

Without some change, it will only scan the top level of the message for attachments and will incorrectly report 0 attachments for both of those. 

I'm not sure recursion is the right way to go - but since it seems unlikely that a mail message can be sent that will be more than a few levels deep it was the quickest way to get something in place that would work. ","01/Apr/09 15:07;davsclaus;Willem

This header
public static final String DEFAULT_ALTERNATE_BODY_HEADER = ""mail_alternateBody"";

Should be in MailConstants.java and it should follow the Camel 2.0 convention: eg like {{CamelMailAlternativeBody}}","02/Apr/09 07:43;njiang;Applied the patch in trunk and  camel-1.x branch with thanks to Ryan
trunk
http://svn.apache.org/viewvc?rev=760909&view=rev
camel-1.x
http://svn.apache.org/viewvc?rev=760920&view=rev",21/Nov/09 11:57;davsclaus;Closing all 2.0M2 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
deploy the CamelContext with velocity endpoint into the Servicemix 4.0 will get the  NoClassDefFoundError,CAMEL-1505,12485039,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,31/Mar/09 09:57,27/Nov/10 06:14,14/Mar/19 02:42,01/Apr/09 04:48,1.6.0,2.0-M1,,,,,,,,,1.6.1,2.0-M2,,,,,,0,"[trace] ***********************************************************
********
 [debug] Starting Apache Velocity v1.5 (compiled: 2007-02-22 08:52:29)
 [trace] RuntimeInstance initializing.
 [debug] Default Properties File: org\apache\velocity\runtime\defaults\velocity.
properties
 [debug] Trying to use logger class org.apache.velocity.runtime.log.Log4JLogChut
e
 [debug] Couldn't find class org.apache.velocity.runtime.log.Log4JLogChute or ne
cessary supporting classes in classpath.
org/apache/log4j/Layout
java.lang.NoClassDefFoundError: org/apache/log4j/Layout
        at java.lang.Class.forName0(Native Method)
        at java.lang.Class.forName(Class.java:164)
        at org.apache.velocity.util.ClassUtils.getClass(ClassUtils.java:76)
        at org.apache.velocity.util.ClassUtils.getNewInstance(ClassUtils.java:95
)
        at org.apache.velocity.runtime.log.LogManager.createLogChute(LogManager.
java:147)


We can get around this issue by replacing the org.apache.velocity.runtime.log.Log4JLogChute with
org.apache.velocity.runtime.log.Log4JLogChute, and also need to update the Servicemix Velocity bundle to 1.6.",,,,,,,,,,,,,,,SMX4-261,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-11-21 11:57:57.238,,,no_permission,,,,,,,,,,,,,76831,,,Sat Nov 21 11:57:57 UTC 2009,,,,,,,0|i01itr:,6819,,,,,,,,,"01/Apr/09 04:48;njiang;trunk
http://svn.apache.org/viewvc?rev=760779&view=rev
camel-1.x branch
http://svn.apache.org/viewvc?rev=760780&view=rev",21/Nov/09 11:57;davsclaus;Closing all 2.0M2 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HTTP_URI and HTTP_PATH message headers not concatenated when sending messages to http endpoint,CAMEL-1504,12486251,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,mschwuchow,mschwuchow,31/Mar/09 08:47,21/Nov/09 11:57,14/Mar/19 02:42,02/Apr/09 16:16,2.0-M1,,,,,,,,,,2.0-M2,,,camel-http,,,,0,"When a message is sent to an http endpoint, the path specified in the HTTP_PATH header is ignored.

In the HttpProducer.createMethod() of the camel-http component, the URI is taken from the HTTP_URI header or the endpoint, but the HTTP_PATH header is not concatenated. 

See also the discussion on the mailing list: http://www.nabble.com/Setting-a-path-in-message-header-with-Camel-http-2.0M1-td22781504.html",,,,,,,,,,,,,,,,,31/Mar/09 23:59;mschwuchow;Patch_Issue_CAMEL-1504_V01.patch;https://issues.apache.org/jira/secure/attachment/12462908/Patch_Issue_CAMEL-1504_V01.patch,01/Apr/09 15:38;mschwuchow;Patch_Issue_CAMEL-1504_V02.patch;https://issues.apache.org/jira/secure/attachment/12462910/Patch_Issue_CAMEL-1504_V02.patch,,,,2.0,,,,,,,,,,,,,,,,,,,2009-04-02 16:16:23.878,,,no_permission,,,,,,,,,,,,,76832,,,Sat Nov 21 11:57:57 UTC 2009,,,,,,,0|i01itj:,6818,,,,,,,,,"31/Mar/09 23:59;mschwuchow;I tried to fix the HttpProducer.createMethod(...).

If provided, the HTTP_PATH is appended to the HTTP_URI or the URI from the endpoint.

Maybe there should also be a check if the URI ends with ""/"" and the path starts with ""/"" to avoid URIs like http://myUri//myPath . Could add it if required.","01/Apr/09 15:38;mschwuchow;Added a check to ensure that there is exactly one ""/"" between URI and Path.

A unit test extending the HttpGetTest is also included in the patch.","02/Apr/09 16:16;davsclaus;@Mathis, thanks a lot for the patch.

trunk: 761334",21/Nov/09 11:57;davsclaus;Closing all 2.0M2 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-mail - Better re connect in case some servers throw exception in isConnected test,CAMEL-1501,12486267,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,30/Mar/09 12:03,26/Nov/09 11:15,14/Mar/19 02:42,30/Mar/09 12:03,1.6.0,,,,,,,,,,1.6.1,2.0-M2,,camel-mail,,,,0,In case some mail servers throws exception for {{isConnected}} test. We should better cater for that with a try .. catch and re connect in case of exception.,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76833,,,Sat Nov 21 11:57:57 UTC 2009,,,,,,,0|i01isv:,6815,,,,,,,,,"30/Mar/09 12:03;davsclaus;trunk at apache: 759931
1.x at apache: 759933",21/Nov/09 11:57;davsclaus;Closing all 2.0M2 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CamelContext.getEndpoint - returns null if scheme not defined properly,CAMEL-1498,12484974,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,28/Mar/09 10:49,21/Nov/09 11:57,14/Mar/19 02:42,29/Mar/09 09:36,1.6.0,,,,,,,,,,2.0-M2,,,camel-core,,,,0,"If you for instance forget to add a colon as the scheme name, then Camel cannot find a component and will return null.

This happens typically when you mistype an URI: eg {{activemq.queue.foo}} instead of correct {{activemq:queue.foo}}",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76834,,,Sat Nov 21 11:57:57 UTC 2009,,,,,,,0|i01is7:,6812,,,,,,,,,21/Nov/09 11:57;davsclaus;Closing all 2.0M2 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JmsPollingConsumer - receive does not work,CAMEL-1497,12484973,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,28/Mar/09 10:37,21/Nov/09 11:57,14/Mar/19 02:42,23/Jun/09 05:37,1.6.0,,,,,,,,,,1.6.1,2.0-M2,,camel-jms,,,,0,"The timeout values to set on Spring JmsTemplate is wrong. We should uses the provided constants on JmsTemplate for this

{code}
	/**
	 * Timeout value indicating that a receive operation should
	 * check if a message is immediately available without blocking.
	 */
	public static final long RECEIVE_TIMEOUT_NO_WAIT = -1;

	/**
	 * Timeout value indicating a blocking receive without timeout.
	 */
	public static final long RECEIVE_TIMEOUT_INDEFINITE_WAIT = 0;
{code}

Is the correct values. Looks like the values was reverted in the camel-jms code ",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-06-22 19:48:10.496,,,no_permission,,,,,,,,,,,,,76835,,,Sat Nov 21 11:57:57 UTC 2009,,,,,,,0|i01irz:,6811,Regression,,,,,,,,"28/Mar/09 10:59;davsclaus;trunk: 759453.
1.x: 759454.","22/Jun/09 19:48;rgavlin;Unfortunately, this commit broke the ability to use Camel 1.x with Spring JMS 2.0.x. Please consider using the correct integer values for the 1.x branch and use the Spring JMS 2.5.x-specific constants only for the trunk.

Thanks.",23/Jun/09 05:37;davsclaus;See ticket about the spring 2.0.x issue: CAMEL-1741,21/Nov/09 11:57;davsclaus;Closing all 2.0M2 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Using request parameters in the feed url will result in ResolveEndpointFailedException for Unknown parameters,CAMEL-1496,12484971,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,jreijn,jreijn,27/Mar/09 16:01,21/Nov/09 11:57,14/Mar/19 02:42,03/Apr/09 06:41,2.0-M1,,,,,,,,,,1.6.1,2.0-M2,,camel-atom,camel-rss,,,0,"While configuring a route like:

<route>
 <from uri=""atom://http://somehost/?feed=1234567""/>
 <to uri=""seda:feeds""/>
</route>

camel throws an exception with:

Failed to resolve endpoint due to: org.apache.camel.ResolveEndpointFailedException: There are 1 parameters that couldn't be set on the endpoint",,,,,,,,,,,,,,,,,31/Mar/09 20:54;jreijn;CAMEL-1496.patch.txt;https://issues.apache.org/jira/secure/attachment/12462905/CAMEL-1496.patch.txt,,,,,1.0,,,,,,,,,,,,,,,,,,,2009-04-03 06:41:49.184,,,no_permission,,,,,,,,,,,,,76836,,,Sat Nov 21 11:57:57 UTC 2009,,,Patch Available,,,,0|i01irr:,6810,,,,,,,,,"31/Mar/09 20:54;jreijn;Added new patch, which solves issue with file based URI's, which should not keep the request parameters, but http and https should.","03/Apr/09 06:41;davsclaus;trunk: 761536
1.x: 761538",10/Apr/09 13:41;jreijn;Thanks!,21/Nov/09 11:57;davsclaus;Closing all 2.0M2 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Allow parementer append for jms bindings with no endpoint,CAMEL-1492,12486263,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,dejanb,dejanb,26/Mar/09 18:35,21/Nov/09 11:57,14/Mar/19 02:42,27/Mar/09 09:28,2.0-M1,,,,,,,,,,2.0-M2,,,camel-jms,,,,0,See test failures in https://issues.apache.org/activemq/browse/AMQ-2182,,,,,,,,,,,,,,,,,27/Mar/09 09:15;dejanb;patch.txt;https://issues.apache.org/jira/secure/attachment/12462903/patch.txt,26/Mar/09 18:36;dejanb;patch.txt;https://issues.apache.org/jira/secure/attachment/12462883/patch.txt,,,,2.0,,,,,,,,,,,,,,,,,,,2009-03-27 07:31:26.474,,,no_permission,,,,,,,,,,,,,76837,,,Sat Nov 21 11:57:56 UTC 2009,,,Patch Available,,,,0|i01iqv:,6806,,,,,,,,,"27/Mar/09 07:31;davsclaus;Dejan thanks for reporting. I modified your patch a bit.

trunk: 759042.
","27/Mar/09 09:15;dejanb;Just one more minor change, which causes null-pointer exception in activemq-camel test","27/Mar/09 09:28;davsclaus;Sorry missed that one. Committed patch. Thanks.

trunk: 759071
",21/Nov/09 11:57;davsclaus;Closing all 2.0M2 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BeanInfo.overridesExistingMethod() doesn't handle overloaded methods correctly.,CAMEL-1488,12484969,12485443,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,belmore,belmore,25/Mar/09 20:18,21/Nov/09 11:57,14/Mar/19 02:42,26/Mar/09 09:23,2.0-M1,,,,,,,,,,1.6.1,2.0-M2,,camel-core,,,,0,"Camel can fail to determine the appropriate method to call on a bean that has overloaded (vs. overridden) methods. It will always call the first overloaded method, even if the parameter is not the same type as that of the message being processed.

The bug is in BeanInfo.overridesExistingMethod. Here's the offending code:

            for (int i = 0; i < info.getMethod().getParameterTypes().length; i++) {
                Class type1 = info.getMethod().getParameterTypes()[i];
                Class type2 = methodInfo.getMethod().getParameterTypes()[i];
                if (!type1.equals(type2)) {
                    continue;
                }
            }

            // same name, same parameters, then its overrides an existing class
            return info;

If the parameter types don't match, the continue statement is not going to do what you'd want. The author obviously intended the ""continue"" to continue with the next methodInfo. Instead, it checks the next parameter and will always return the current methodInfo  if it reaches this point.

Here's a unit test that exemplifies the issue:

----------------------------------

package biz.firethorn.hostinterface.camel;

import java.lang.reflect.Method;

import junit.framework.Assert;
import junit.framework.TestCase;

import org.apache.camel.CamelContext;
import org.apache.camel.Exchange;
import org.apache.camel.Message;
import org.apache.camel.RuntimeCamelException;
import org.apache.camel.component.bean.AmbiguousMethodCallException;
import org.apache.camel.component.bean.BeanInfo;
import org.apache.camel.component.bean.MethodInvocation;
import org.apache.camel.impl.DefaultCamelContext;
import org.apache.camel.impl.DefaultExchange;
import org.apache.camel.impl.DefaultMessage;

public class BeanInfoTest extends TestCase {

	public void test() throws Exception {
		
		CamelContext camelContext = new DefaultCamelContext();
		BeanInfo beanInfo = new BeanInfo(camelContext, Bean.class);
		
		Message message = new DefaultMessage();
		message.setBody(new RequestB());
		Exchange exchange = new DefaultExchange(camelContext);
		exchange.setIn(message);
		
		MethodInvocation methodInvocation = beanInfo.createInvocation(new Bean(), exchange);
		Method method = methodInvocation.getMethod();
		
		Assert.assertEquals(""doSomething"", method.getName());
		
		Assert.assertEquals(RequestB.class, method.getGenericParameterTypes()[0]);
	}
}

class Bean {
	public void doSomething(RequestA request) {	
	}
	
	public void doSomething(RequestB request) {
	}
}

class RequestA {
	public int i;
}

class RequestB {
	public String s;
}
",,,,,,,,,,,,,,,,,25/Mar/09 20:21;belmore;BeanInfoTest.java;https://issues.apache.org/jira/secure/attachment/12462901/BeanInfoTest.java,,,,,1.0,,,,,,,,,,,,,,,,,,,2009-03-26 07:15:16.972,,,no_permission,,,,,,,,,,,,,76838,,,Sat Nov 21 11:57:56 UTC 2009,,,,,,,0|i01ipz:,6802,,,,,,,,,"26/Mar/09 07:15;davsclaus;Thanks Bruce.

I will look into it.","26/Mar/09 09:23;davsclaus;2.0: 758563
1.x: 758569","26/Mar/09 13:03;belmore;Claus,

Thanks for taking care of this so quickly! Greatly appreciated!

Bruce

",21/Nov/09 11:57;davsclaus;Closing all 2.0M2 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JMS - Sending a message with jmsTemplate102=true fails,CAMEL-1480,12486250,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,24/Mar/09 07:10,21/Nov/09 11:57,14/Mar/19 02:42,24/Mar/09 08:33,2.0-M1,,,,,,,,,,2.0-M2,,,camel-jms,,,,0,"See nabble:
http://www.nabble.com/Apache-Camel-2.0-M1-java.lang.ClassCastException%3A-org.apache.camel.component.jms.JmsConfiguration%24CamelJmsTeemplate102-td22665483s22882.html

The ClassCastException is because of the old JMS API is used.
Camel should test whether the template is 1.1 or 1.0.2 and cast to correct type.


",WebSphere MQ 5.3 that uses the old JMS 1.0.2 API,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76841,,,Sat Nov 21 11:57:56 UTC 2009,,,,,,,0|i01io7:,6794,,,,,,,,,24/Mar/09 08:33;davsclaus;Committed revision 757686.,21/Nov/09 11:57;davsclaus;Closing all 2.0M2 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RouteBuilderRef - does not work with injected endpoints,CAMEL-1477,12484878,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,23/Mar/09 04:54,21/Nov/09 11:57,14/Mar/19 02:42,23/Mar/09 06:53,1.6.0,,,,,,,,,,1.6.1,2.0-M2,,camel-core,camel-spring,,,0,"When using *routeBuilderRef* instead of *package* to configure route builder in spring XML then the former does not work if you have eg endpoint defined as well and injected the endpoint using {{EndpointInjected}}

{code}
    @EndpointInject(name = ""data"")
    protected Endpoint data;

    public void configure() throws Exception {
        // configure a global transacted error handler
        errorHandler(transactionErrorHandler(required));

        from(data)
        ...
}
{code}

And the Spring DSL
{code:xml}
    <bean id=""route"" class=""org.apache.camel.itest.tx.JmsToHttpWithRollbackRoute""/>

    <!-- Camel context -->
    <camelContext id=""camel"" xmlns=""http://camel.apache.org/schema/spring"">
        <!-- use our route -->
        <routeBuilder ref=""route""/>

        <!-- define our data endpoint as the activemq queue we send a message to -->
        <endpoint id=""data"" uri=""activemq:queue:data""/>
    </camelContext>
{code}",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76842,,,Sat Nov 21 11:57:56 UTC 2009,,,,,,,0|i01inj:,6791,,,,,,,,,"23/Mar/09 05:19;davsclaus;Okay its the *autowireRouteBuilders* attribute on camel context causing this.

Its kinda auto installing any beans in Spring DSL that is a route builder and thus we get our route 2x installed.
But the first time it cannot run the camel bean post processor that injects the Camel annotations. 

So we need to @deprecated/remove this feature and rely only on people adding refs to it.
Also this feature is very questionable as end users want to have control of which routes is used. ","23/Mar/09 06:53;davsclaus;trunk: 757326
1.x: 757329",21/Nov/09 11:57;davsclaus;Closing all 2.0M2 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Easier transacted configuration of routes,CAMEL-1475,12484819,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,22/Mar/09 11:45,21/Nov/09 11:57,14/Mar/19 02:42,17/Apr/09 09:33,1.6.0,,,,,,,,,,2.0-M2,,,camel-core,camel-spring,,,0,"See TransactionalClientWithRollbackTest in camel-spring

The {{.policy(required)}} is needed in the routes even though we have a global transaction error handler with a default policy set:
{code}
                 errorHandler(transactionErrorHandler(required));
{code}

So Camel should fallback and use the global policy if the route itself does not have a policy defined.",,,,,,,,,,,,,,,CAMEL-1511,,14/Apr/09 06:17;davsclaus;JMS_lookup_TX_manager.patch;https://issues.apache.org/jira/secure/attachment/12462916/JMS_lookup_TX_manager.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76843,,,Sat Nov 21 11:57:56 UTC 2009,,,,,,,0|i01in3:,6789,,,,,,,,,"04/Apr/09 18:14;davsclaus;I am thinking that we should have a discussion on this matter how to let the TX configuration be easier in Camel

The codebase requires the {{policy}} to be defined in the route to properly configure a route as transacted.
This is in fact fine as it explicit declare the route as transacted.

However policy is a generic term, so we could consider renaming it to transacted

Then the error handler configuration could probably be optional as if its missing the transacted could auto create one on demand, such as looking for a TX manager in the registry or how we can make it easier.

","06/Apr/09 07:11;davsclaus;Okay the {{policy}} is required to define a route as transacted. Then we do not need to configure the error handler as transactional, and thus we can just do:

{code:java}
                Policy required = context.getRegistry().lookup(""PROPAGATION_REQUIRED"", SpringTransactionPolicy.class);

                // set the required policy for this route so its transacted
                from(""direct:okay"").policy(required).
                    setBody(constant(""Tiger in Action"")).beanRef(""bookService"").
                    setBody(constant(""Elephant in Action"")).beanRef(""bookService"");
{code}
","06/Apr/09 07:15;davsclaus;Maybe we can add some convention over configuration so we can auto lookup the SpringTransactionPolicy

So we can shorten the route to:
{code:java}
                // set the required policy for this route
                from(""direct:okay"").policy(""PROPAGATION_REQUIRED"").
                    setBody(constant(""Tiger in Action"")).beanRef(""bookService"").
                    setBody(constant(""Elephant in Action"")).beanRef(""bookService"");
{code}

Maybe we can have a nicer default name for {{PROPAGATION_REQUIRED}}.
{code:java}
                // set the required policy for this route
                from(""direct:okay"").policy(""REQUIRED"").
                    setBody(constant(""Tiger in Action"")).beanRef(""bookService"").
                    setBody(constant(""Elephant in Action"")).beanRef(""bookService"");
{code}

Or it defaults to required if no parameters specified

{code:java}
                // set the required policy for this route
                from(""direct:okay"").policy().
                    setBody(constant(""Tiger in Action"")).beanRef(""bookService"").
                    setBody(constant(""Elephant in Action"")).beanRef(""bookService"");
{code}

And while we are at it, maybe the *policy* itself could be renamed to something that better reflects its a transaction
{code:java}
                // this route is transacted
                from(""direct:okay"").transacted().
                    setBody(constant(""Tiger in Action"")).beanRef(""bookService"").
                    setBody(constant(""Elephant in Action"")).beanRef(""bookService"");
{code}","06/Apr/09 08:16;davsclaus;See discussion at
http://www.nabble.com/-DISCUSS----Camel-2.0---Easier-Camel-Spring-Transaction-configuration-td22904091.html
","06/Apr/09 10:07;davsclaus;Improved the configuration as the TransactedErrorHandlerBuilder is not needed to be configured.

trunk: 762267
","06/Apr/09 11:12;davsclaus;Okay got this baby working now
{code:java}
                from(""direct:okay"")
                    // marks this route as transacted, and we dont pass in any parameters so we
                    // will auto lookup and use the Policy defined in the spring XML file
                    .transacted()
                    .setBody(constant(""Tiger in Action"")).beanRef(""bookService"")
                    .setBody(constant(""Elephant in Action"")).beanRef(""bookService"");
{code}

And with the Spring XML below Camel will lookup beans with the type {{org.apache.camel.spi.Policy}} and if there are 1 policy defined it will use that as default.

{code:xml}
    <!-- START SNIPPET: e1 -->
    <!-- datasource to the database -->
    <bean id=""dataSource"" class=""org.springframework.jdbc.datasource.DriverManagerDataSource"">
        <property name=""driverClassName"" value=""org.hsqldb.jdbcDriver""/>
        <property name=""url"" value=""jdbc:hsqldb:mem:camel""/>
        <property name=""username"" value=""sa""/>
        <property name=""password"" value=""""/>
    </bean>

    <!-- spring transaction manager -->
    <bean id=""txManager"" class=""org.springframework.jdbc.datasource.DataSourceTransactionManager"">
        <property name=""dataSource"" ref=""dataSource""/>
    </bean>

    <!-- policy for required transaction used in our Camel routes -->
    <bean id=""PROPAGATION_REQUIRED"" class=""org.apache.camel.spring.spi.SpringTransactionPolicy"">
        <property name=""transactionManager"" ref=""txManager""/>
    </bean>

    <!-- bean for book business logic -->
    <bean id=""bookService"" class=""org.apache.camel.spring.interceptor.BookService"">
        <property name=""dataSource"" ref=""dataSource""/>
    </bean>
    <!-- END SNIPPET: e1 -->
{code}

Next step is to make it even easier, eg to be able to lookup the PlatformManager and if there is 1 single defined use that one and use REQUIRED by default.
Then we can loose the PROPAGATION_REQUIRED bean.","07/Apr/09 07:02;davsclaus;New Revision: 762641

Introduced transacted DSL keyword to more clearly state a route is transacted. Also Camel can autolookup the spring transaction policy, hence to make the Spring XML configuration a bit easier.

","07/Apr/09 08:07;davsclaus;And now Spring DSL is also easier
trunk: 762645.
",07/Apr/09 08:07;davsclaus;Update wiki page *DONE*,"14/Apr/09 06:11;davsclaus;Camel can now auto lookup the PlatformTransactionManager so the PROPAGATION_REQUIRED spring bean is not needed anymore, if you want to use the default settings.
trunk: 764683","14/Apr/09 06:17;davsclaus;I was working on letting the JMS component auto lookup the TX manager as well. Patch attached.

However want to discuss it a bit more, eg what if the platform manager in Spring XML is not JMS based, eg a DataSource based = DataSourceTransactionManager. Then I assume the JMS component cannot work anyway.

And the Spring PlatformTransactionManager does not support any operations to determine if it supports your resource type (JMS, JDBC, etc.).

But it makes great sense when you have define a JTA TX manager.

But of course you just need to define the transactionManager property on the ActiveMQComponent then you are good to go anyway.
Such as:
{code:xml}
    <!-- define our activemq component -->
    <bean id=""activemq"" class=""org.apache.activemq.camel.component.ActiveMQComponent"">
        <property name=""connectionFactory"" ref=""jmsConnectionFactory""/>
        <!-- define the jms consumer/producer as transacted -->
        <property name=""transacted"" value=""true""/>
        <property name=""transactionManager"" ref=""jmsTransactionManager""/>
    </bean>
{code}

So what we are talking about is being able to loose the last property
        <property name=""transactionManager"" ref=""jmsTransactionManager""/>
And have Camel auto lookup the TX manager.


","17/Apr/09 09:33;davsclaus;Keeping the JMS component as is.

Last piece off code committed: 765920",21/Nov/09 11:57;davsclaus;Closing all 2.0M2 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
On the wire headers are dropped inside camel route between two CxfEndpoints,CAMEL-1474,12484813,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,wtam,marat,marat,20/Mar/09 19:26,21/Nov/09 11:57,14/Mar/19 02:42,26/Mar/09 04:26,1.6.0,,,,,,,,,,1.6.1,2.0-M2,,camel-cxf,,,,0,"Currently if there is a Camel route that involves two or more cxf endpoints, then the on the wire message headers such as SOAP headers are dropped.

This fix enables one to relay these headers along the route or preserve the old behaviour and drop the headers. 

Headers relay/drop is bidirectional. Both out-of-band (*not* defined  in WSDL contract) and in-band (defined in WSDL contract) headers are supported.

Relaying headers can be further customized by implementing additional logic inside of MessageHeadersRelay interface. 

The default behaviour is to relay headers provided that  an instance of MessageHeadersRelay bound to message binding namespace allows a header to be relayed. 

Please see .../components/camel-cxf/src/test/java/org/apache/camel/component/cxf/soap/headers/CxfMessageHeadersRelayTest.java for details on how this is done.

Attached is the patch that provides this functionality.

Thanks,
Marat",,,,,,,,,,,,,,,,,20/Mar/09 19:27;marat;camel-cxf-CAMEL-1474-2009-03-20.patch.txt;https://issues.apache.org/jira/secure/attachment/12462854/camel-cxf-CAMEL-1474-2009-03-20.patch.txt,,,,,1.0,,,,,,,,,,,,,,,,,,,2009-03-20 20:09:58.293,,,no_permission,,,,,,,,,,,,,76844,,,Sat Nov 21 11:57:56 UTC 2009,,,Patch Available,,,,0|i01imv:,6788,,,,,,,,,"20/Mar/09 20:09;wtam;Patch applied (r756742).  Big thanks to Marat.   I'll propagate fix to trunk.
",21/Mar/09 09:46;davsclaus;Remember to update the wiki as well with this new feature,"26/Mar/09 03:32;wtam;Trunk: Committed revision 758505.
","26/Mar/09 15:37;davsclaus;William

You need to fix the SMX side as well. You now get failure in SMX when running Camel 2.0 trunk there:
{code}
13:41:14,211 | WARN  | nerContainer-323 | DefaultMessageListenerContainer  | AbstractMessageListenerContainer  646 | Execution of JMS message listener failed    
java.lang.NoSuchMethodError: org.apache.camel.spi.HeaderFilterStrategy.applyFilterToCamelHeaders(Ljava/lang/String;Ljava/lang/Object;)Z                          
        at org.apache.camel.component.mail.MailBinding.appendHeadersFromCamelMessage(MailBinding.java:126)                                                      
        at org.apache.camel.component.mail.MailBinding.populateMailMessage(MailBinding.java:82)                                                                  
        at org.apache.camel.component.mail.MailProducer$1.prepare(MailProducer.java:48)                                                                          
        at org.springframework.mail.javamail.JavaMailSenderImpl.send(JavaMailSenderImpl.java:354)                                                                
        at org.springframework.mail.javamail.JavaMailSenderImpl.send(JavaMailSenderImpl.java:346)                                                                
        at org.apache.camel.component.mail.MailProducer.process(MailProducer.java:46)                                                                            
        at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:69)                                                                              
        at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:49)                                                                  
        at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:78)                                                                      
        at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:115)                                                            
        at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43)           
{code}",26/Mar/09 16:05;wtam;Thanks Claus. I'll fix SMX,"26/Mar/09 16:27;wtam;@claus
Actually, it looks like your camel-mail hasn't been reinstalled?  Is it possible?","26/Mar/09 16:42;wtam;@claus
Actually, it looks like the your camel-mail hasn't been
rebuilt/reinstalled?  Is it possible?

","26/Mar/09 16:43;davsclaus;@William

What do you mean with camel-mail?","26/Mar/09 16:44;davsclaus;Ah

The above stacktrace is from an end user on camel IRC. So maybe he just needs to rebuild all Camel components?","26/Mar/09 17:05;wtam;Yea, I'd make sure all component are rebuilt and re-install.  From the stackstrace, it looks like camel-mail component is still invoking the old method of HeaderFilterStrategy that does not have a new Exchange argument.",21/Nov/09 11:57;davsclaus;Closing all 2.0M2 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
OutOfMemory Exception in XMPP Component,CAMEL-1467,12486155,12485960,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,othuang,othuang,19/Mar/09 17:35,08/Jul/10 05:15,14/Mar/19 02:42,08/Jul/10 05:15,,,,,,,,,,,1.6.1,2.0-M2,,camel-xmpp,,,,0,"on publishing messages lots of messages using XMPP component (layered on top of Smack 3.0.4/3.1.0 client), Out of Memory Exception occurs. 

With standard JVM settings, client runs out of memory at around 6600 messages sent. With -Xmx1024M set, client runs out at ~110K messages sent.

Appears that on a

chat.sendMessage(message);

The server sends the message back and the messages needs to be processed on the client side or the client will continue filling its local queue until it runs out of memory

FIX:

For XmppPrivateChatProducer and XmppGroupChatProducer, need to insert chat.nextMessage() after chat.sendMessage()

 public void process(Exchange exchange) {
   ...
        try {
            chat.sendMessage(message);
            chat.nextMessage();
        } catch (XMPPException e) {
            throw new RuntimeXmppException(e);
        }
    }","Mac OS 10.4.11, Java 1.5, Smack 3.0.4/3.1.0",,300,300,,0%,300,300,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-03-20 07:36:18.081,,,no_permission,,,,,,,,,,,,,76845,,,Thu Jul 08 05:15:50 UTC 2010,,,Patch Available,,,,0|i01ilb:,6781,,,,,,,,,"20/Mar/09 07:36;davsclaus;Trunk: Committed revision 756348.
1.x: Committed revision 756358.","20/Mar/09 07:37;davsclaus;@Orton

{{     chat.nextMessage();}} was only available in XmppGroupChatProducer. So I have only fixed it 1 place.
On XmppPrivateChatProducer the method does not exists.


","20/Mar/09 15:40;othuang;Hi Claus,

Good to hear from you again. Hope you're doing well

Sorry bout the confusion.

In XmppPrivateChatProducer, the method that needs to be updated is:

I added the chat.nextMessage() after the chat.sendMessage(message) (line 73) below:

Thanks!

------

  public void process(Exchange exchange) {
        String threadId = exchange.getExchangeId();

        try {
            ChatManager chatManager = endpoint.getConnection().getChatManager();
            Chat chat = chatManager.getThreadChat(threadId);

            if (chat == null) {
                chat = chatManager.createChat(getParticipant(), threadId, new MessageListener() {
                    public void processMessage(Chat chat, Message message) {
                        // not here to do conversation
                    }
                });
            }

            // TODO it would be nice if we could reuse the message from the exchange
            Message message = new Message();
            message.setTo(participant);
            message.setThread(threadId);
            message.setType(Message.Type.normal);

            endpoint.getBinding().populateXmppMessage(message, exchange);
            if (LOG.isDebugEnabled()) {
                LOG.debug("">>>> message: "" + message.getBody());
            }

            chat.sendMessage(message);
            // receive the return message here - orton
            chat.nextMessage();
        } catch (XMPPException e) {
            throw new RuntimeXmppException(e);
        }
    }




","20/Mar/09 17:51;davsclaus;Orton

There are *no* nextMessage() on the chat object in XmppPrivateChatProducer.
Only the other one got the method.","20/Mar/09 18:34;othuang;Hi Claus,

Ah, sorry little confusion. The nextMessage() needs to be in there to avoid the OOM exception...



Orton


On 3/20/09 12:52 PM, ""Claus Ibsen (JIRA)"" <jira@apache.org> wrote:



    [ https://issues.apache.org/activemq/browse/CAMEL-1467?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel=50715#action_50715 ]

Claus Ibsen commented on CAMEL-1467:
------------------------------------

Orton

There are *no* nextMessage() on the chat object in XmppPrivateChatProducer.
Only the other one got the method.


--
This message is automatically generated by JIRA.
-
You can reply to this email to add a comment to the issue online.


","26/Mar/09 01:19;othuang;Hi Claus,

Just downloaded the Camel 1.6.1 version... Do you think you can make the same XMPP fixes in 1.6.1 that you made in 2.0?


FIX:
For XmppPrivateChatProducer and XmppGroupChatProducer, need to insert chat.nextMessage() after chat.sendMessage()
 public void process(Exchange exchange) {
    ...
         try {
             chat.sendMessage(message);
             chat.nextMessage(); // <----- this line needed!
         } catch (XMPPException e) {
             throw new RuntimeXmppException(e);
         }
           }


Thanks!!
Orton


On 3/20/09 12:52 PM, ""Claus Ibsen (JIRA)"" <jira@apache.org> wrote:



    [ https://issues.apache.org/activemq/browse/CAMEL-1467?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel=50715#action_50715 ]

Claus Ibsen commented on CAMEL-1467:
------------------------------------

Orton

There are *no* nextMessage() on the chat object in XmppPrivateChatProducer.
Only the other one got the method.


--
This message is automatically generated by JIRA.
-
You can reply to this email to add a comment to the issue online.


","26/Mar/09 01:19;othuang;Hi Claus,

Just downloaded the Camel 1.6.1 version... Do you think you can make the same XMPP fixes in 1.6.1 that you made in 2.0?


FIX:
For XmppPrivateChatProducer and XmppGroupChatProducer, need to insert chat.nextMessage() after chat.sendMessage()
 public void process(Exchange exchange) {
    ...
         try {
             chat.sendMessage(message);
             chat.nextMessage(); // <----- this line needed!
         } catch (XMPPException e) {
             throw new RuntimeXmppException(e);
         }
           }


Thanks!!
Orton


On 3/20/09 12:52 PM, ""Claus Ibsen (JIRA)"" <jira@apache.org> wrote:



    [ https://issues.apache.org/activemq/browse/CAMEL-1467?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel=50715#action_50715 ]

Claus Ibsen commented on CAMEL-1467:
------------------------------------

Orton

There are *no* nextMessage() on the chat object in XmppPrivateChatProducer.
Only the other one got the method.


--
This message is automatically generated by JIRA.
-
You can reply to this email to add a comment to the issue online.


","27/Mar/09 07:00;davsclaus;Fixed it on XmppConsumer as well. Thanks orton

trunk:  759033, 759036
1.x: 759035",21/Nov/09 11:57;davsclaus;Closing all 2.0M2 tickets,"06/Jul/10 12:14;mark.ford;The patch for this bug was removed in revision 779121. The result is that the XMPPConsumer does not remove the message from the MultiUserChat and the possibility for an OutOfMemoryException still exists.

The OOM occurs because the org.jivesoftware.smackx.muc.RoomListenerMultiplexor is a packet listener that contains a collector that stores all of the messages received up to a hard coded limit of 65k messages. These messages are not removed unless muc.pollMessage() or muc.nextMessage() is called. I'm not sure the reason behind storing these messages in a collector. 

I have tested this in 2.1.0 and 2.3.0 and reviewed the code in 2.4-SNAPSHOT. I can supply a test case if needed.
","06/Jul/10 14:27;mark.ford;Here's a relevant defect from the smack library:

http://www.igniterealtime.org/issues/browse/SMACK-129",06/Jul/10 15:29;davsclaus;Yeah Mark a test case and a patch is much welcome.,08/Jul/10 05:15;davsclaus;This issue is continued at CAMEL-2922,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JMX instrumentation - will add DeadLetterChannel even if you have defined to use NoErrorHandler,CAMEL-1463,12484732,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,17/Mar/09 08:27,21/Nov/09 11:57,14/Mar/19 02:42,18/Mar/09 07:05,1.6.0,,,,,,,,,,1.6.1,2.0-M2,,camel-core,,,,0,"See nabble:
http://www.nabble.com/StreamCaching-in-Camel-1.6-td22305654s22882.html

I will add an unit test that demonstrates this:
org.apache.camel.processor.ChoiceNoErrorHandlerTest

The route should at all time *not* contain any error handler at all, regardless wether JMX is enabled or not.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76847,,,Sat Nov 21 11:57:55 UTC 2009,,,,,,,0|i01ikn:,6778,,,,,,,,,"17/Mar/09 09:29;davsclaus;I have committed a unit test showing the bug
Committed revision 755163.

org.apache.camel.processor.ChoiceNoErrorHandlerTest

The bug is not fixed yet, only a test to show the bug","17/Mar/09 12:41;davsclaus;Lowering priority to major.

This bug is only manifested when
- disabled error handler = noErrorHandler (not default)
- disabled JMX (not default)","17/Mar/09 16:24;davsclaus;Its the {{InstrumentationErrorHandlerWrappingStrategy}} that is the culprint.

With JMX enable camel context gets this strategy added that skips interceptors.
But with no JMX we do not have a such a strategy and thus a default error handler is added","18/Mar/09 07:05;davsclaus;Yes got it now.

Trunk: Committed revision 755487.
1.x: Committed revision 755493.",21/Nov/09 11:57;davsclaus;Closing all 2.0M2 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JMXAgent - If no privileges then lifecycle is null,CAMEL-1462,12484727,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,17/Mar/09 05:43,21/Nov/09 11:57,14/Mar/19 02:42,17/Mar/09 07:35,1.6.0,,,,,,,,,,1.6.1,2.0-M2,,camel-spring,,,,0,"If you run Camel on OC4j then it will by default not grant access to its JMX MbeanServer.

So if you use jmxAgent in Camel spring configuration it is setup but Camel cannot access it and it causes a NPE when you do endpoint lookup later.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76848,,,Sat Nov 21 11:57:55 UTC 2009,,,,,,,0|i01ikf:,6777,,,,,,,,,"17/Mar/09 07:35;davsclaus;Trunk: Committed revision 755136.
1.x: Committed revision 755138.

Camel will now fallback to Non JMX if it cannot access it on Camel context startup.
It is logged at WARN level.",21/Nov/09 11:57;davsclaus;Closing all 2.0M2 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
A request route with a topic node incurs a 20 second wait and refers to the wrong MEP.,CAMEL-1461,12484723,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,mwc_tonesoft,mwc_tonesoft,16/Mar/09 18:15,21/Nov/09 11:57,14/Mar/19 02:42,24/Mar/09 11:19,1.6.0,,,,,,,,,,1.6.1,2.0-M2,,camel-jms,,,,0,"If a route contains a node that publishes to a topic, the route is incorrectly suspended for a default 20 seconds at the topic node.  Further, JmsProducer.java checks the MEP of the original request Exchange and not the endpoint of the topic.

For example, say I have a route built like this:
{code}
from(""activemq:queue:request"").
  to(""generate_news"").
  to(""activemq:topic:news"").
  to(""do_something_else"");
{code}

The original request is expecting a reply. However, after the ""news"" is pumped into the news topic, there is a default 20 second wait (requestTimeout).  This wait always results in the exception: ""The OUT message was not received within: 20000 millis on the exchange..."" 

After reading the JmsProducer code, I changed the route to the following:
{code}
from(""activemq:queue:request"").
  to(""generate_news"").
  to(""activemq:topic:news?exchangePattern=InOnly"").
  to(""do_something_else"");
{code}
This reveals the root of the bug, which is in the first few lines of method org.apache.camel.component.jms.JmsProducer.process(Exchange):
{code}//
    public void process(final Exchange exchange) {
        final org.apache.camel.Message in = exchange.getIn();

        if (exchange.getPattern().isOutCapable()) {
{code}
The above if statement checks the MEP of the original request's Exchange and not the new endpoint of the news topic. This makes the above ""?exchangePattern=InOnly"" configuration useless, because the original request MEP is InOut.  The result is that after that 20 second time-out, the temporary queue for the original request has expired, so the whole request failed. Note that the next node ""do_something_else"" is never reached due to the time-out exception.
",ActiveMQ/Camel,,,,,,,,,,,,,,,,05/Apr/09 05:59;marat;CAMEL-1461-2009-04-05-01-58.patch;https://issues.apache.org/jira/secure/attachment/12462912/CAMEL-1461-2009-04-05-01-58.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2009-03-23 16:00:29.555,,,no_permission,,,,,,,,,,,,,76849,,,Sat Nov 21 11:57:55 UTC 2009,,,,,,,0|i01ik7:,6776,,,,,,,,,"23/Mar/09 16:00;davsclaus;Have you tried the inOnly() DSL

{code}
from
to
inOnly(""activemq:topic:news"")
to
{code}","24/Mar/09 09:07;davsclaus;Okay I got this boiled down to
- when you sent an inOnly to the jms topic the JMSReplyTo is still there from the original JMS Message. This one needs to be cleared so Camel wont try to send a reply from the topic.

This can however be disabled on the endpoint with {{""activemq:topic:news?disableReplyTo=true""}}.
","24/Mar/09 09:11;davsclaus;This one works:
{code}
                from(""activemq:queue:inbox"")
                    .to(""mock:inbox"")
                    .inOnly(""activemq:topic:order"")
                    .beanRef(""orderService"", ""handleOrder"");

                from(""activemq:topic:order?disableReplyTo=true"")
                    .to(""mock:topic"");
{code}

I will work on the {{disableReplyTo=true}} so it is not needed to be specified. ","24/Mar/09 11:19;davsclaus;Fixed now. The disableReplyTo is now not needed.

trunk: r757693, 757730, 758617
1.x: 757728, 758638","04/Apr/09 00:44;marat;Michael,

I think your analysis is incorrect. The from(...:queue/topic....) route would only create an INOUT Exchange if you've explicitly set a Message.replyTo field in the code that sent the message into this queue/topic in the first place. So if you did that then it is expected that the route will return a reply unless you explicitly set disableReplyTo=true in the from() endpoint. The replyTo value would have still been propagated, just the runtime would not create a consumer to expect a reply from the to() endpoint

Claus, 

I think the fact that the disableReplyTo=true does not mean that we need to reset the replyTo or correlationID on the outgoing message in the producer that belongs to to(...) endpoint

The example shows a case in point:

from(""amq-1:request"").to(""amq-2:request""); // route-1
from(""amq-2:reply"").to(""amq-1:reply""); // route-2

so you can have:

app-1 -> amq-1:request -> amq2:request -> app-2 -> amq-2:reply -> amq1:reply -> app-1

Here we have app-1 and app-2 have a conversion over two queues In fact if you want to do any kind of transactional bridging this is the pattern you'd have to use. 

Also when one would want to use CamelTemplate to produce messages to a JMS broker with the replyTo != null this change would reset replyTo = null unless explicitQosEnabled=true irrespective of whether we're sending to a destination that is used in a one-way or a two-way route.

So I'd revert the change as I think the use case that this bug was filed under can be simply resolved by using: from(""...?disableReplyTo=true"") and keeping the changes introduced changes to the contract that can really be avoided.

Marat","04/Apr/09 06:17;davsclaus;@Marat,

The problem is that the replyTo is inherited from the very first {{from(""activemq:queue:request"")}} when you send a replyTo JMS Message to it in the first place - then this replyTo is propagated in the the route.
And we dont want this replyTo propgated when you send to other JMS destinations, such as the topic.

The changes introduces check the MEP contract. If the MEP is *not* out capable then it wont set a {{JMSReplyTo}} on the {{javax.jms.Message}} object when Camel sends it. 
This is more correct than ignoring this fact, its very common to route messages with Camel using JMS and send it to other JMS destinations during the routing.

Remembering to add {{jmsDisableReplyTo=true}} is a pity workaround IMHO and many end users will face same problem as Michael and wont find the solution immediately. The JMS component has too many options and its hard to know which options to use for what. Maybe splitting the table into commonly used, rarely used and advanced only would help out. ","04/Apr/09 06:33;davsclaus;Oh and not to forget. What if the topic we sent to in the original sample is *not* based on Camel, then you cannot disable reply to on this destination.

What if the topic was a WebSphereMQ destination? 
","04/Apr/09 17:37;marat;Claus,

I disagree. 

> The problem is that the replyTo is inherited from the very first from(""activemq:queue:request"") when you send a replyTo JMS Message to it in the first place - then this replyTo is propagated in the the route.

from() becomes an INOUT  *only* from the fact that the original message came with replyTo != null or you explicitly set a replyDestination as part of from() endpoint configuration.

The fact that the user choose to set the replyTo destination in the original message suggests that one wants to receive a reply to its original message. If the designer of the Camel route decided to drop this replyTo then he has to explicitly state that in the contract. Had Michael done that he'd be all set. 

You want to make his live easier and not to require this flag. Fine. 

But you just broke the old contract and now people that use CamleTemplate to send JMS messages with replyTo not null will have to set explicitQoSEnabled=true on the from() endpoint they send messages to! You will soon have people coming back and complaining about what I just described.


> And we dont want this replyTo propgated when you send to other JMS destinations, such as the topic.

Why not? It is a very reasonable default to have the replyTo destination (topic or queue) be relayed along the route as this was the message originator intention. You *could* plugin a HeaderFilterStrategy and exclude headers you wish were not propagated (including replyTo header). If HeaderFilterStrategy is not supported in JMS I'd rather fix this than keep the changes comitted.

> What if the topic we sent to in the original sample is not based on Camel, then you cannot disable reply to on this destination.

Why not? 

> What if the topic was a WebSphereMQ destination? 

If you have a cross broker message flow then you need to have alwaysCopyMessage=true as you will not be able to send a AMQ message with replyTo != null to WebSphere with replyTo != null  This is already supported today. The replyTo will be resolved using WebSphere session.

I still recommend to revert the change.
","04/Apr/09 18:05;davsclaus;>> The problem is that the replyTo is inherited from the very first from(""activemq:queue:request"") when you send a replyTo JMS Message to it in the first place - then this replyTo is propagated in the the route.
> from() becomes an INOUT only from the fact that the original message came with replyTo != null or you explicitly set a replyDestination as part of from() endpoint configuration.
Agree

> The fact that the user choose to set the replyTo destination in the original message suggests that one wants to receive a reply to its original message. If the designer of the Camel route decided to drop this
> replyTo then he has to explicitly state that in the contract. Had Michael done that he'd be all set.
That is what he is in fact trying to do. He want to return a reply but at the same time send a fire and forget message to a topic. To send this ""fire and forget"" message he should use either:
- wireTap
- inOnly
- to with pattern=InOnly

The problem is that when he does that Camel will propagate the original JMS headers along, and then Camel itself sees that there is a JMSReplyTo and therefore it want to wait as well.

The original exchange will still be InOut and Camel will send a reply back. Its the _fire and forget_ JMS message that is the problem. This cannot be cleanup done out of the box with Camel if we revert the change, then you need to add clear all the JMS headers with a custom HeaderFilterStategy or whatever. This is not very easy. The route explicit states that its a _fire and forget_ and thus there should be *no* JMSReplyTo send.

The HeaderFilterStategy is a kinda advanced feature where you need to plug it in and add your own java implementation. This is not desired for doing a very common route such as spin off a _fire and forget_ while doing a JMS request/reply. 


> But you just broke the old contract and now people that use CamleTemplate to send JMS messages with replyTo not null will have to set explicitQoSEnabled=true on the from()
> endpoint they send messages to! You will soon have people coming back and complaining about what I just described.
What do you mean? If the use CamelTemplate and send a request/reply (eg requestXXX) then its an InOut and then the from endpoint should not have any special options.

For instance in the code below:
{code}
from(""activemq:queue:foo).to(""bean:bye"");

String out = template.requestBody(""activemq:queue:foo"", ""Hello"", String.class);
{code}

Assuming the {{bye}} bean returns a response such as: {{ return ""Bye World"" }} then the {{out}} String will contain the value returned = {{Bye World}}.

The method {{requestBody}} is used for *InOut* MEP and thus Camel will set a {{JMSReplyTo}} when it send the {{Hello}} message to the JMS foo queue. And when Camel receives this message it sees the JMSReplyTo and returns the response.

The contract is *not* broken.



>> What if the topic we sent to in the original sample is not based on Camel, then you cannot disable reply to on this destination.
> Why not?
Why should Camel send a JMSReplyTo to a MQ destination in the first place where we *do not* want a reply? Lets imagine the MQ destination is part of a production system you cannot change.
So what if it inspects this JMSReplyTo and want to send a reply that it was *never* intended to send. It was after all just a _fire and forget_ message that was send to it. ","04/Apr/09 20:30;marat;Claus,

Ok I think there are a couple of things going on. My tests are failing not due to replyTo being set to null but rather correlationID set to null. I'll explain bellow.

So let's take a look at the original requirement again.

> That is what he is in fact trying to do. He want to return a reply but at the same time send a fire and forget message to a topic.

So shouldn't his route look like this?

/* 1 */  from(""activemq:queue:inbox"")                         
/* 2 */  .inOnly(""mock:inbox"")                                
/* 3 */  .inOnly(""activemq:topic:order"")                  
/* 4 */  .beanRef(""orderService"", ""handleOrder"");  

So the steps are 

- Either a native JMS client or CamelTemplate send a message with replyTo != null to (1)
- (1) would propagate the replyTo and correlationID and will expect a reply for up to timeout
- (2) and (3) and (4) should send the messages along without expecting the reply, *but still propagating replyTo and correlationID*
Now whatever endpoint (2, 3, 4)  or some external consumer off (3) would take that replyTo and correlationID values and will send the reply back to (1) completing the flow

So the point Michael made about JMS component honoring the contract of the 'to' endpoints is valid. We need to fix this so that if this is an inOnly MEP on the to() endpoint we won't be expecting a reply on the to() endpoint but will still propagate replyTo and correlationID values

Now the reason my tests are all going busts is because of the following:

I have a bridge scenario between two independent JMS brokers say AMQ and WMQ with XA in between. I need to use two one way routes in order to accommodate that due to transactional semantics.

/*1 */ from(""amq:queue:request"").to(""mq:queue:request"");
/*2 */ from(""mq:queue:reply"").to(""amq:queue:reply"");

So in order to be able to correlate a request message (1) I load a correlationID, but since that change the correlationID is dropped and when (2) writes a reply message I miss them since their correlationID is null now.

So I think we can address both of the use cases if we were to still propagate replyTo and correlationID but honor the inOnly pattern of the to() endpoints even if the endpoint prior to it in the chain was an  in-out

What do you think?","04/Apr/09 21:01;davsclaus;Marat,

Just a quick reply.

In your bridge scenario have you tried the *preserveMessageQos=true* in the to destination?
That should keep the JMSReplyTo and JMSCorrelationID.

On a side note I do think there are two scenarios here that is difficult to support out of the box without special configuration.
Just the most obvious should be the default one, that is IMHO the problem Michael faced.

In your first example Camel will at (1) expect to return a reply, and that reply is when the current exchanges ends, and it ends after step (4). So the reply sent back is what the Exchange OUT message is after step (4) = what the order service bean returns.

On the other hand, if you for instance at step (3) had a consumer on the other side, that *also* sends a reply, then you end up with sending *x2* replies. To prevent this you have to set the *disableReplyTo* on the from endpoint, so Camel after step (4) does not return a reply, and the only reply is from the ""other side"".


> So the point Michael made about JMS component honoring the contract of the 'to' endpoints is valid. We need to fix this so that if this is an inOnly MEP on the to() endpoint 
> we won't be expecting a reply on the to() endpoint but will still propagate replyTo and correlationID values
We can only fix this in the JMS Producer to *not* listen for a reply. But the problem is that if we also propagate JMSReplyTo/JMSCorrelationID then the consumer does not know its an *inOnly* and this consumer can/will still send a reply. If this consumer is also Camel then it will send a reply to the JMSReplyTo, and thus we end up with the *x2* reply situation, even thought the to was set with a {{pattern=InOnly}}. As I understand there are no MEP standard for JMS, so we cannot propate the JMSReplyTo/JMSCorrelationID and then at the same time tell the consumer, *not* to send a reply.

What do you think?","04/Apr/09 21:21;davsclaus;> So I think we can address both of the use cases if we were to still propagate replyTo and correlationID but honor the inOnly pattern of the to() endpoints even
> if the endpoint prior to it in the chain was an  in-out
Yeah, that should be our goal. We agree here.

That should already be possible if you set the *preserveMessageQos=true* option in the *to*. That instructs Camel JMSProducer to _not_ drop the JMSReplyTo/JMSCorrelationID. See JMSProducer.java around codeline 275.

Eg we kinda have reverse the problem between your bridge and Michaels use-case, for which must configure the JMS endpoints with special options.
Before Michael had to se the disableReplyTo=true on his from route. This was in fact quite wrong as the consumer could have been a non Camel one.
Well never the less its fixed now.

Now its your situation that has to set the special *preserveMessageQos=true* on the to endpoint, eg when sending.

So dont we have the solution now?","05/Apr/09 06:16;marat;Claus,

Yes I did manage to get all of the tests to pass before I restarted this thread, but as you said my use case is now quite cumbersome and I think it really does not have to be.

Please take a look at the patch attached. I think this will keep all happy. 

I also show how the use case you described could be implemented. That is when one wants to have a request/reply over a queue and then also send a message (notification) over a topic and then collect correlated acknowledgement message(s) that those notification have been received.

source app -> queue:request -> target app -> queue:reply -> source app
                     -> topic:notification

topic:notification -> notification subscriber app 1 -> queue:notificationAck
topic:notification -> notification subscriber app 2 -> queue:notificationAck
queue:notificationAck -> source app correlates ack using original request correlationID or a unique selector

The usual use case for topics are one way messages, so if the user really wants to reply to destination that came with a message received over a topic then the receiver should be ready to accept more than one reply correlated on the same source message. Since a request/reply pattern is 1 request 1 reply, then the reply destination embedded in the message that came over a topic should really be decoupled from the destination used to receive a reply from request/reply pattern.
","05/Apr/09 07:12;davsclaus;Marat,

> Yes I did manage to get all of the tests to pass before I restarted this thread, but as you said my use case is now quite cumbersome and I think it really does not have to be.
Did you try the option I suggested?


> Please take a look at the patch attached. I think this will keep all happy.
Thanks a lot for the patch and that you kept pushing your views. And not the least had the patience to explain it in details so I could understand it :)

I have applied the patch:
trunk: 762047
1.x: 762050


> The usual use case for topics are one way messages, so if the user really wants to reply to destination that came with a message received over a topic then the receiver
> should be ready to accept more than one reply correlated on the same source message. 
Agree

> Since a request/reply pattern is 1 request 1 reply, then the reply destination embedded in the message
> that came over a topic should really be decoupled from the destination used to receive a reply from request/reply pattern.
Agree if you by decoupled mean the original request/reply pattern - eg the original caller JMSReplyTo should be decoupled from the JMSReplyTo that came over the topic. 

","06/Apr/09 14:12;marat;Claus,

Thanks for applying the patch. Yes I was aware that I could work around the change made, but with the patch you just applied no changes will be required either to my tests/demos and Michael will still be happy.

Cheers,
Marat",21/Nov/09 11:57;davsclaus;Closing all 2.0M2 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CXF component running in Payload mode does not work with Holders,CAMEL-1454,12486242,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,wtam,wtam,wtam,12/Mar/09 17:04,31/Jul/09 06:34,14/Mar/19 02:42,12/Mar/09 19:09,1.6.0,,,,,,,,,,1.6.1,2.0-M1,,camel-cxf,,,,0,"If you convert the CxfWsdlFirstTest to run in PAYLOAD mode (by simply changing the endpoint URI in Spring xml), the client.getPerson() invocation will fail.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-07-31 06:34:14.446,,,no_permission,,,,,,,,,,,,,76850,,,Fri Jul 31 06:34:14 UTC 2009,,,,,,,0|i01iin:,6769,,,,,,,,,"12/Mar/09 19:09;wtam;camel-1.x:  Committed revision 752974.
trunk: Committed revision 752956.",31/Jul/09 06:34;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel FTP - move and delete should happen after processing,CAMEL-1448,12486099,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,davsclaus,davsclaus,davsclaus,11/Mar/09 08:34,31/Jul/09 06:34,14/Mar/19 02:42,11/Mar/09 08:54,1.6.0,,,,,,,,,,1.6.1,2.0-M1,,camel-ftp,,,,0,"Only applies for 1.x as 2.0 have a totally redone FTP+File component.

Have discovered that the camel-ftp component deletes/moves the file before processing; so, if processing fails, then the file is not available for redelivery. ",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76852,,,Fri Jul 31 06:34:13 UTC 2009,,,,,,,0|i01ihb:,6763,,,,,,,,,11/Mar/09 08:54;davsclaus;1.x: Committed revision 752410.,31/Jul/09 06:34;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-mina - UDP protocol could have an issue if used in same camel context as both client and server sending to localhost,CAMEL-1444,12486147,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,10/Mar/09 11:17,31/Jul/09 06:34,14/Mar/19 02:42,10/Mar/09 11:34,1.6.0,,,,,,,,,,1.6.1,2.0-M1,,camel-mina,,,,0,"A mina bytebuffer could be shared in a mina session. It should not be.

See nabble, that could lead to that problem the end user has:
http://www.nabble.com/Camel-1.6-2.0-MINA-UDP-issue-td22426433s22882.html
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76853,,,Fri Jul 31 06:34:13 UTC 2009,,,,,,,0|i01igf:,6759,,,,,,,,,"10/Mar/09 11:34;davsclaus;trunk:  r752068 
1.x: Committed revision 752070, 758538",31/Jul/09 06:34;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unable to resolve scripting languages in OSGi environment,CAMEL-1443,12485490,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,zzhou,zzhou,10/Mar/09 04:14,31/Jul/09 06:34,14/Mar/19 02:42,12/Mar/09 07:47,1.6.0,,,,,,,,,,1.6.1,2.0-M1,,osgi,,,,0,"The OsgiLanguageResolver.java created since CAMEL-1221 does not resolve scripting languages by using the default resolver declared in camel-script. The DefaultLanguageResolver, however in the non-osgi context, handles it properly.

This leads to NullPointerException while launching a route in an OSGi container using a scripting language, e.g. javascript.

Exception in thread ""SpringOsgiExtenderThread-2"" java.lang.NullPointerException
	at org.apache.camel.model.language.ExpressionType.createPredicate(ExpressionType.java:145)
	at org.apache.camel.model.ExpressionNode.createFilterProcessor(ExpressionNode.java:95)
	at org.apache.camel.model.WhenType.createProcessor(WhenType.java:57)
	at org.apache.camel.model.ChoiceType.createProcessor(ChoiceType.java:73)
...

",Felix OSGi Platform [1.2.2],,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-03-10 07:51:16.818,,,no_permission,,,,,,,,,,,,,76854,,,Fri Jul 31 06:34:13 UTC 2009,,,,,,,0|i01ig7:,6758,,,,,,,,,"10/Mar/09 07:51;njiang;
Thanks for point it out.
I just checked the code, current OsgiLanguageResolver can't handle the LanguageResolver rightly and  will did a quick fix for it.

Willem
","12/Mar/09 07:47;njiang;trunk
http://svn.apache.org/viewvc?rev=752117&view=rev
http://svn.apache.org/viewvc?rev=752764&view=rev
http://svn.apache.org/viewvc?rev=752773&view=rev

1.x branch 
http://svn.apache.org/viewvc?rev=752137&view=rev
http://svn.apache.org/viewvc?rev=752787&view=rev",31/Jul/09 06:34;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
unmarshaling of data always send the last occurence of the stream,CAMEL-1442,12486103,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,cmoulliard,cmoulliard,09/Mar/09 15:37,31/Jul/09 06:34,14/Mar/19 02:42,12/Mar/09 13:59,2.0-M1,,,,,,,,,,2.0-M1,,,camel-bindy,,,,0,The unmarshaling method of BindyDataFormat (CSV or Key Value Pair) does not create a new model object for each new line of the stream readed,,,,,,,,,,,,,,,,,10/Mar/09 13:41;cmoulliard;crlf_noModelReset.patch;https://issues.apache.org/jira/secure/attachment/12462853/crlf_noModelReset.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2009-03-10 12:23:01.727,,,no_permission,,,,,,,,,,,,,76855,,,Fri Jul 31 06:34:13 UTC 2009,,,,,,,0|i01ifz:,6757,,,,,,,,,10/Mar/09 11:47;cmoulliard;and no carriage return (CRLF) was added after a record in the outputstream,"10/Mar/09 12:23;davsclaus;Charles could you make the CR LF configurable. What if end users just want unix format, mac format. eg only CR or LF","10/Mar/09 12:42;cmoulliard;+1 Claus,

I will add new parameter in the annotation to define the character to be used for the carriage return/Line feed and extend the class ConvertSeparator



","10/Mar/09 13:41;cmoulliard;- Class ConvertSeparator has been renamed into Converter
- A new property has been added to the annotations class : CsvRecord and MEssage : crlf. Three values can be used ""WINDOWS"", ""UNIX"" and ""MAC""
- Marshall method uses this property to add CRLF after each record","10/Mar/09 14:23;cmoulliard;@All,

Camel-bindy wiki documentation has been updated.","12/Mar/09 13:59;hadrian;Patch applied with thanks.  Good work Charles.

I had to make a few changes because of some test issues.  For some Marshall tests he expected string did not end with ""\r\n"" but the crlf style was 'windows' so actuals differed from expected.  For some Unmarshall tests the exchange was ending up in the dlc because of an NPE in the Object.toString().  Modifying the code to String.valueOf(Object) fixes that.  There's a bit more that could be cleaned up for consistency, but these were the minimum changes to get the tests to pass.",31/Jul/09 06:34;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-file : java.lang.StringIndexOutOfBoundsException: String index out of range: 1,CAMEL-1441,12486162,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,cmoulliard,cmoulliard,09/Mar/09 13:25,17/Mar/09 03:35,14/Mar/19 02:42,09/Mar/09 15:26,2.0-M1,,,,,,,,,,2.0-M1,,,,,,,0,"The following spring DSL routes generates an error :  

	<camelContext trace=""true"" xmlns=""http://camel.apache.org/schema/osgi"">

		<camel:package>org.apache.camel.example.reportincident.routing</camel:package>

		<!-- File route  -->
		<camel:route>
			<camel:from	uri=""file://d:/temp/data/?move=d:/temp/done/${file:name}"" />
			<camel:unmarshal ref=""bindyDataformat"" />
			<camel:to uri=""bean:csv"" />
			<camel:to uri=""activemq:queue:in"" />
		</camel:route>
		
		<camel:route>
			<camel:from uri=""activemq:queue:in"" />
			<camel:from	uri=""file://d:/temp/data/queue"" />
		</camel:route>

2009-03-09 14:23:09,968 WARN  ScheduledPollConsumer - An exception occurred while polling: Endpoint[file://d:/temp/data/?move=d:/temp/done/${file:name}]: String index out of range: 1 
java.lang.StringIndexOutOfBoundsException: String index out of range: 1
	at java.lang.String.charAt(String.java:687)
	at java.util.regex.Matcher.appendReplacement(Matcher.java:703)
	at java.util.regex.Matcher.replaceAll(Matcher.java:813)
	at java.lang.String.replaceAll(String.java:2190)
	at org.apache.camel.component.file.GenericFile.normalizePathToProtocol(GenericFile.java:238)
	at org.apache.camel.component.file.GenericFile.setEndpointPath(GenericFile.java:223)
	at org.apache.camel.component.file.FileConsumer.asGenericFile(FileConsumer.java:103)
	at org.apache.camel.component.file.FileConsumer.pollDirectory(FileConsumer.java:56)
	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:66)
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:66)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:181)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:205)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:619)
",Camel 2.0SNAPSHOT (09/03/2009),,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-03-09 13:38:40.133,,,no_permission,,,,,,,,,,,,,76856,,,Mon Mar 09 15:22:38 UTC 2009,,,,,,,0|i01ifr:,6756,,,,,,,,,"09/Mar/09 13:38;davsclaus;Charles can you try again? I have committed a fix

Committed revision 751676.
","09/Mar/09 13:57;cmoulliard;Error is always there : 

2009-03-09 14:53:41,390 WARN  ScheduledPollConsumer - An exception occurred while polling: Endpoint[file://d:/temp/data/?move=d:/temp/done/${file:name}]: String index out of range: 1 
java.lang.StringIndexOutOfBoundsException: String index out of range: 1
	at java.lang.String.charAt(String.java:687)
	at java.util.regex.Matcher.appendReplacement(Matcher.java:703)
	at java.util.regex.Matcher.replaceAll(Matcher.java:813)
	at java.lang.String.replaceAll(String.java:2190)
	at org.apache.camel.component.file.GenericFile.normalizePathToProtocol(GenericFile.java:235)
	at org.apache.camel.component.file.GenericFile.setEndpointPath(GenericFile.java:217)
	at org.apache.camel.component.file.FileConsumer.asGenericFile(FileConsumer.java:103)
	at org.apache.camel.component.file.FileConsumer.pollDirectory(FileConsumer.java:56)
	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:66)
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:66)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:181)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:205)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:619)","09/Mar/09 14:42;davsclaus;Okay Charles try again

Committed revision 751694.
","09/Mar/09 15:22;cmoulliard;@Claus,

No more error now. We can close it.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Archeypes will not output debug level logging ,CAMEL-1436,12485865,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,bsnyder,bsnyder,bsnyder,08/Mar/09 19:25,31/Jul/09 06:34,14/Mar/19 02:42,08/Mar/09 20:02,1.6.0,,,,,,,,,,1.6.1,2.0-M1,,tooling,,,,0,"The archetypes work great but they won't output debug level logging because they don't include a dependency on Log4J. By simply adding the dependency on Log4J, outputting debug level logging is possible. ",,,,,,,,,,,,,,,,,08/Mar/09 20:02;bsnyder;CAMEL-1436-camel-1.x.patch;https://issues.apache.org/jira/secure/attachment/12462847/CAMEL-1436-camel-1.x.patch,08/Mar/09 20:02;bsnyder;CAMEL-1436-camel-2.0.patch;https://issues.apache.org/jira/secure/attachment/12462848/CAMEL-1436-camel-2.0.patch,,,,2.0,,,,,,,,,,,,,,,,,,,2009-07-31 06:34:13.379,,,no_permission,,,,,,,,,,,,,76857,,,Fri Jul 31 06:34:13 UTC 2009,,,Patch Available,,,,0|i01ien:,6751,,,,,,,,,"08/Mar/09 20:01;bsnyder;Committed to branches/camel-1.x/: 

Sending        archetypes/camel-archetype-activemq/pom.xml
Sending        archetypes/camel-archetype-activemq/src/main/resources/archetype-resources/pom.xml
Sending        archetypes/camel-archetype-java/pom.xml
Sending        archetypes/camel-archetype-java/src/main/resources/archetype-resources/pom.xml
Sending        archetypes/camel-archetype-scala/pom.xml
Sending        archetypes/camel-archetype-scala/src/main/resources/archetype-resources/pom.xml
Sending        archetypes/camel-archetype-spring/pom.xml
Sending        archetypes/camel-archetype-spring/src/main/resources/archetype-resources/pom.xml
Transmitting file data ........
Committed revision 751507.


Committed to trunk/: 

Sending        archetypes/camel-archetype-activemq/pom.xml
Sending        archetypes/camel-archetype-activemq/src/main/resources/archetype-resources/pom.xml
Sending        archetypes/camel-archetype-java/pom.xml
Sending        archetypes/camel-archetype-java/src/main/resources/archetype-resources/pom.xml
Sending        archetypes/camel-archetype-scala/pom.xml
Sending        archetypes/camel-archetype-scala/src/main/resources/archetype-resources/pom.xml
Sending        archetypes/camel-archetype-spring/pom.xml
Sending        archetypes/camel-archetype-spring/src/main/resources/archetype-resources/pom.xml
Transmitting file data ........
Committed revision 751511.
",31/Jul/09 06:34;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SftpConsumer : GenericFileRenameProcessStrategy - String index out of bounds,CAMEL-1428,12485458,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,watcher,watcher,05/Mar/09 17:08,31/Jul/09 06:34,14/Mar/19 02:42,09/Mar/09 15:30,2.0.0,,,,,,,,,,2.0-M1,,,camel-ftp,,,,0,"While trying to consume a file via SFTP and using the moveExpression to move the file into a done folder a renameException is thrown.

In GenericFile the relativeFileName reads something like the following.   /incoming/test/file1.txt

When it tries to call this code and exception is thrown because File.separator is '\' in a windows environment.
String relative = relativeFileName.substring(0, relativeFileName.lastIndexOf(File.separator));",Windows XP,,,,,,,,,,,,,,,,05/Mar/09 17:08;watcher;camel-error.txt;https://issues.apache.org/jira/secure/attachment/12462769/camel-error.txt,05/Mar/09 19:54;watcher;camel-error2.txt;https://issues.apache.org/jira/secure/attachment/12462698/camel-error2.txt,06/Mar/09 09:26;watcher;camel-error3.txt;https://issues.apache.org/jira/secure/attachment/12462736/camel-error3.txt,06/Mar/09 18:32;watcher;camel-error4.txt;https://issues.apache.org/jira/secure/attachment/12462833/camel-error4.txt,,4.0,,,,,,,,,,,,,,,,,,,2009-03-05 17:22:55.386,,,no_permission,,,,,,,,,,,,,76858,,,Fri Jul 31 06:34:12 UTC 2009,,,,,,,0|i01icv:,6743,,,,,,,,,"05/Mar/09 17:22;davsclaus;Hi Paddy

Thanks for reporting. I have commited a fix. Do you mind trying again when you get hold of an updated .jar?

Committed revision 750515.
","05/Mar/09 17:23;davsclaus;Maybe we have a record, 14 min bug fix :)","05/Mar/09 19:54;watcher;WOW, what a response time. Glad to be part of that record.

Good news is that issue is solved. However I'm now getting another issue.
","06/Mar/09 05:16;davsclaus;Hi Paddy

Thanks for the 2nd report. I got that fixed now.
It was a refactor that didnt look in the sftp file. The regular ftp was okay.

Committed revision 750770.

Could you try again, much appreciated.","06/Mar/09 05:16;davsclaus;BTW: This time the response time is longer, I had to sleep you know :)","06/Mar/09 09:26;watcher;Still one more issue. I think I noticed a file path generated with .done twice.

e.g temp/files/incoming/.done/.done/file.txt 

During the move into the done folder it looks like it trying to delete it from the .done folder instead of the incoming folder.

- Sleeping is cheating ;-)",06/Mar/09 09:40;davsclaus;Paddy can you show me your URI configuration of the FTP,"06/Mar/09 09:45;watcher;<endpoint id=""sftp"" uri=""sftp://${sftpusername}@${ipaddress}//temp?password=pass&amp;binary=true&amp;recursive=true&amp;delay=10000&amp;initialDelay=2000&amp;moveExpression=.done/${file:name}&amp;knownHostsFile=c://known_host&amp;filter=#myAntFilter""/>

<!-- we use the AntPathMatcherRemoteFileFilter to use ant paths for includes and exlucde --> 	
	<bean id=""myAntFilter"" class=""org.apache.camel.component.file.AntPathMatcherGenericFileFilter"">
	   
	    <property name=""includes"" value=""**/incoming/*""/>
	    <property name=""excludes"" value=""**/outgoing/*""/>
	</bean>",06/Mar/09 09:46;davsclaus;And beware the FTP should not use absolute paths for names. They should all be relative to the FTP home directory.,06/Mar/09 10:13;davsclaus;I can reproduce it here locally. Will work on a fix.,06/Mar/09 14:24;davsclaus;Paddy I am still working on this one as it leads me to do a minor refactor in the core to fix it better. ,06/Mar/09 14:30;watcher;Thanks for the update Claus,"06/Mar/09 16:31;davsclaus;Paddy can you try again? I have just committed a fix. I had to do some more work to get it properly fixed.

Now the code that handles/computes file names, and rename file names etc. is much cleaner and relies a bit more on JDK.
","06/Mar/09 18:30;watcher;I'm getting a null in my path now.

I've updated my uri since, i.e just removed  the temp folder.

<endpoint id=""sftp"" uri=""sftp://${sftpusername}@${ipaddress}?password=pass&amp;binary=true&amp;recursive=true&amp;delay=10000&amp;initialDelay=2000&amp;moveExpression=.done/${file:name}&amp;knownHostsFile=c://known_host&amp;filter=#myAntFilter""/>

When you referred to 
""beware the FTP should not use absolute paths for names"" 
do you mean the knownHostsFile path.
","07/Mar/09 08:18;davsclaus;Paddy can you try again? I have committed a new fix
Committed revision 751221.

My tests was having a starting directory configured, where as you URI option above does not.

About the *absolute* paths. That is the move expression should not be like D:/myfolder, or //myserver/path, or /rootfolder as all paths in FTP should be considered relative to starting directory you configure in the URI.","07/Mar/09 09:23;davsclaus;Paddy notice CAMEL-1434

I have shortened the xxxExpression options to:
moveExpression = move
preMoveExpression = preMove
fileExpression = fileName","07/Mar/09 09:26;watcher;Here's the error now.

Why is it trying to delete the file from the .done directory?

[le.remote.SftpComponent@7b1641] SftpConsumer                   DEBUG Done processing file: GenericFile[temp/incoming/file.txt]. Status is: processed OK
[le.remote.SftpComponent@7b1641] SftpConsumer                   DEBUG Committing remote file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@1be4663 for file: GenericFile[temp/incoming/file.txt]
[le.remote.SftpComponent@7b1641] SftpOperations                 DEBUG Deleteing file: /.done/file.txt
[le.remote.SftpComponent@7b1641] SftpConsumer                   WARN  Error committing remote file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@1be4663
org.apache.camel.component.file.remote.RemoteFileOperationFailedException: Cannot delete file: /.done/file.txt
	at org.apache.camel.component.file.remote.SftpOperations.deleteFile(SftpOperations.java:154)
	at org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy.renameFile(GenericFileRenameProcessStrategy.java:65)
	at org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy.commit(GenericFileRenameProcessStrategy.java:58)","07/Mar/09 09:43;davsclaus;Paddy

Could you try again, with this new commit?
Committed revision 751231.

Its trying to delete the file, in case an existing file exists, before it moves the file. The API does not allow you to instruct it to overriding any existing files. Hence we delete it before move.",07/Mar/09 09:55;watcher;Still the same issue/error,"07/Mar/09 10:21;davsclaus;Okay a new fix :)
Committed revision 751237.

I will be out the door for approx. 1h","07/Mar/09 11:18;watcher;When I look into the GenericFileRenameProcessStrategy

 operations.deleteFile(to.getAbsoluteFileName());

The ""to""  the canonicalFileName is pointing to my local directory

C:\source\router\.done\file.txt

The to.getAbsoluteFileName() translates to 
/.done/file.txt

I'm going to look into the  channel.rm(name); code now
","07/Mar/09 12:09;davsclaus;Paddy did you try the latest patch? It should translate /.done/file.txt -> .done/file.txt when it does the delete operation.

The problem is likely that the SFTP server you use eg doesnt jail the user, so using / will escape and give access to the root of your file system.

So I fix this for the FTP operations to remove any leading / for file names.
","07/Mar/09 12:21;watcher;Yeah, got the latest patch

[e.remote.SftpComponent@167e3a5] SftpConsumer                   ERROR Cannot delete file: .done/file.txt
org.apache.camel.component.file.remote.RemoteFileOperationFailedException: Cannot delete file: .done/file.txt","07/Mar/09 12:30;davsclaus;Ah got it, must have started blind:
RemoteFileOperationFailedException is extending the wrong base class. Will commit a fix in a sec.
","07/Mar/09 12:37;davsclaus;Paddy commited a fix
Committed revision 751256.

Sorry for causing all this trouble. There are no Java SFTP library we can use for unit testing. So we rely on the fact that the codebase for FTP and SFTP is as similar as possible. However the SFTP and FTP client .jars are a bit differently. The FTP returns true/false for many of its operations where as the SFTP throws Exception.

So this bug was not caught by the FTP unit testing.

Let me know how it goes this time.","07/Mar/09 12:56;watcher;That worked.

However the file ended up in the .done folder relative to the root folder.

sftpRootFolder/
                             .done
                                      /file.txt   <---- end here


                          /temp
                                   /incoming
                                                     /file.txt   <-- consumed from here 
                                   /.done                     
                                                    /file1.txt   <-- expected here","07/Mar/09 14:29;davsclaus;Great glad it worked now.

About the location of the .done folder.
Yeah I guess that it should be local since you enter a relative path (eg not starting with /)

I will check into it when I get a bit time.

So entering:
- .done/${file:name} will be a subfolder where the file was consumed
- ../.done/${file:name} will be a parent folder (sibling) to where the file was consumed
- /.done/${file:name} will be a subfolder in the FTP root folder","07/Mar/09 14:55;davsclaus;Paddy

About the placement of the .done folder. You should use the full power of the file language to put together an expression that solves your needs.

So if you want to place the file in a .done subfolder in the *same* folder it was consumed from, then you need to combine the ${file:parent} and ${file:name} such as:
{{move=${file:parent}/.done/${file:name}}}

I have reworked the code a bit as ${file:name} should always only return the name (no directories) etc. as it should mimmic the corresponding java.io.File method.
See the file language wiki page for more.

Using just .done/${file:name} will place it in  the root as Camel uses absolute names when it performs FTP operations. The reason is that it does a double pass, first find files to consume and then in the 2nd pass process them. This allows Camel to pickup the total number of files, for people that need to rely on batch processing where the want to know the current index and when the are no more files.","07/Mar/09 15:14;watcher;Thanks Claus

I'm heading out now. Will probably not get to try that until Monday. 
Have a good weekend.
-Paddy","08/Mar/09 10:30;watcher;I've added the the expression ->move=${file:parent}/.done/${file:name}

and its generating this error.

{code}
[le.remote.SftpComponent@e80740] SftpConsumer                   DEBUG Total 1 files to consume
[le.remote.SftpComponent@e80740] SftpEndpoint                   DEBUG Using Generic file process strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@1f42731
[le.remote.SftpComponent@e80740] SftpOperations                 DEBUG Renaming file: temp/incoming/file.txt to: temp/incoming/file.txt.camelExclusiveReadLock
[le.remote.SftpComponent@e80740] SftpOperations                 DEBUG Renaming file: temp/incoming/file.txt.camelExclusiveReadLock to: temp/incoming/file.txt
[le.remote.SftpComponent@e80740] SftpConsumer                   DEBUG About to process file: GenericFile[temp/incoming/file.txt] using exchange: Exchange[GenericFileMessage: GenericFile[temp/incoming/file.txt]]
[le.remote.SftpComponent@e80740] RouterComponent                INFO  filename temp/incoming/file.txt
[le.remote.SftpComponent@e80740] GenericFileProducer            DEBUG Wrote [c:\fileserver\file.txt] to [Endpoint[file://c://fileserver]]
[le.remote.SftpComponent@e80740] ObjectHelper                   WARN  Cannot find class: org.apache.xalan.xsltc.trax.DOM2SAX
[le.remote.SftpComponent@e80740] SftpConsumer                   DEBUG Done processing file: GenericFile[temp/incoming/file.txt]. Status is: processed OK
[le.remote.SftpComponent@e80740] SftpConsumer                   DEBUG Committing remote file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@1f42731 for file: GenericFile[temp/incoming/file.txt]
[le.remote.SftpComponent@e80740] SftpOperations                 DEBUG Deleteing file: \temp\incoming\.done/file.txt
[le.remote.SftpComponent@e80740] SftpOperations                 DEBUG Trying to build remote directory: temp\incoming\.done
[le.remote.SftpComponent@e80740] SftpConsumer                   WARN  Error committing remote file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@1f42731
org.apache.camel.component.file.GenericFileOperationFailedException: Cannot create directory: \temp\incoming\.done (could be because of denied permissions)
	at org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy.renameFile(GenericFileRenameProcessStrategy.java:74)
	at org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy.commit(GenericFileRenameProcessStrategy.java:58)
	at org.apache.camel.component.file.GenericFileConsumer.processStrategyCommit(GenericFileConsumer.java:226)
	at org.apache.camel.component.file.GenericFileConsumer$1.done(GenericFileConsumer.java:180)
	at org.apache.camel.processor.UnitOfWorkProcessor$1.done(UnitOfWorkProcessor.java:57)
	at org.apache.camel.management.InstrumentationProcessor$1.done(InstrumentationProcessor.java:74)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:106)


{code}","08/Mar/09 11:16;davsclaus;Paddy I have committed a fix for you to try out.
Committed revision 751401.

There might still be a gremlin in there but I would like to see how it goes on your XP with SFTP.","08/Mar/09 11:29;davsclaus;Another minor fix
Committed revision 751402.
","08/Mar/09 11:31;watcher;Sorry got to head out the door, wont be back for a few hours","08/Mar/09 14:57;watcher;{code}
[e.remote.SftpComponent@19b808a] SftpConsumer                   DEBUG Total 1 files to consume
[e.remote.SftpComponent@19b808a] SftpEndpoint                   DEBUG Using Generic file process strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@149f041
[e.remote.SftpComponent@19b808a] SftpOperations                 DEBUG Renaming file: /temp/incoming/file.txt to: /temp/incoming/file.txt.camelExclusiveReadLock
[e.remote.SftpComponent@19b808a] SftpOperations                 DEBUG Renaming file: /temp/incoming/file.txt.camelExclusiveReadLock to: /temp/incoming/file.txt
[e.remote.SftpComponent@19b808a] SftpConsumer                   DEBUG About to process file: GenericFile[temp/incoming/file.txt] using exchange: Exchange[GenericFileMessage: GenericFile[temp/incoming/file.txt]]
[e.remote.SftpComponent@19b808a] RouterComponent                INFO  filename null
[e.remote.SftpComponent@19b808a] DeadLetterChannel              ERROR Failed delivery for exchangeId: ID-DELLPD-2562-1236524034668-0-0. On delivery attempt: 0 caught: java.lang.NullPointerException
java.lang.NullPointerException
	at java.util.StringTokenizer.<init>(StringTokenizer.java:182)
	at java.util.StringTokenizer.<init>(StringTokenizer.java:204)
	at com.opt2vote.easyprint.router.RouterComponent$1.process(RouterComponent.java:45)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:80)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:194)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:129)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:115)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:89)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)
	at org.apache.camel.processor.interceptor.StreamCachingInterceptor.proceed(StreamCachingInterceptor.java:88)
	at org.apache.camel.processor.interceptor.StreamCachingInterceptor.process(StreamCachingInterceptor.java:83)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:52)
	at org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:165)
	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:98)
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:66)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:181)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:205)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:619)

{code}",08/Mar/09 15:18;davsclaus;Paddy the bug is in *your* code. You gotta check you route. Check RouterComponent.java:45 what you are doing there.,"08/Mar/09 16:10;watcher;The filename is null now for some reason

{code}
from(getSFTPEndPoint())		
		.process(new Processor() {
			public void process(final Exchange exchange) throws Exception {
				Message message = (Message) exchange.getIn();
				String filename = (String) message.getHeader(Exchange.FILE_NAME);
				log.info(""filename "" + filename);
				StringTokenizer tokenizer = new StringTokenizer(filename, ""/"");
				while(tokenizer.hasMoreTokens()){
					String token = tokenizer.nextToken();
					if(tokenizer.hasMoreTokens() == false){
						log.debug(""setting filename header on exchange to "" + token);
						exchange.getOut().setHeader(
								Exchange.FILE_NAME,
								token);
					}
				}
			}
		}). 
		to(getFileRepository())
		.setHeader(
				""filename"", groovy(""in.headers.filename"")).setBody(constant(null)).to(""activemq:queue:print"");
{code}","08/Mar/09 16:14;davsclaus;And you rebuild all the code when you try again?

camel-ftp and camel-core should always be recompiled?

I will try to look if there is something I can spot, and create a unit test that resembles your route. Albeit with regular FTP.","08/Mar/09 16:25;davsclaus;BTW In all the code you do above I have added a new header: {{Exchange.FILE_NAME_ONLY}} that just returns the name with no paths at all.

And its best practice to use the 2nd parameter to provide the type:
{code}
String name = message.getHeader(Exchange.FILE_NAME_ONLY, String.class);
{code}


","09/Mar/09 05:02;watcher;I've rebuilt both camel-ftp and camel-core and updated my route to use FILE_NAME_ONLY and I'm getting an error

{code}
[e.remote.SftpComponent@110278e] SftpConsumer                   DEBUG About to process file: GenericFile[temp/incoming/file.txt] using exchange: Exchange[GenericFileMessage: GenericFile[temp/incoming/file.txt]]
[e.remote.SftpComponent@110278e] RouterComponent                INFO  message GenericFileMessage: GenericFile[temp/incoming/file.txt]
[e.remote.SftpComponent@110278e] RouterComponent                INFO  filename file.txt
[e.remote.SftpComponent@110278e] GenericFileProducer            DEBUG Wrote [c:\fileserver\file.txt] to [Endpoint[file://c://fileserver]]
[e.remote.SftpComponent@110278e] ObjectHelper                   WARN  Cannot find class: org.apache.xalan.xsltc.trax.DOM2SAX
[e.remote.SftpComponent@110278e] SftpConsumer                   DEBUG Done processing file: GenericFile[temp/incoming/file.txt]. Status is: processed OK
[e.remote.SftpComponent@110278e] SftpConsumer                   DEBUG Committing remote file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@19c4091 for file: GenericFile[temp/incoming/file.txt]
[e.remote.SftpComponent@110278e] SftpOperations                 DEBUG Deleteing file: /\temp\incoming\.done/file.txt
[e.remote.SftpComponent@110278e] SftpOperations                 DEBUG Trying to build remote directory: \temp\incoming\.done
[e.remote.SftpComponent@110278e] SftpConsumer                   WARN  Error committing remote file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@19c4091
org.apache.camel.component.file.GenericFileOperationFailedException: Cannot create directory: \temp\incoming\.done (could be because of denied permissions)
	at org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy.renameFile(GenericFileRenameProcessStrategy.java:74)
	at org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy.commit(GenericFileRenameProcessStrategy.java:58)
	at org.apache.camel.component.file.GenericFileConsumer.processStrategyCommit(GenericFileConsumer.java:226)
	at org.apache.camel.component.file.GenericFileConsumer$1.done(GenericFileConsumer.java:180)
	at org.apache.camel.processor.UnitOfWorkProcessor$1.done(UnitOfWorkProcessor.java:57)
	at org.apache.camel.management.InstrumentationProcessor$1.done(InstrumentationProcessor.java:74)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:106)

{code}

Error seems to be here

DEBUG Deleteing file: /\temp\incoming\.done/file.txt","09/Mar/09 07:02;davsclaus;Ahh yeah bloddy world with either / or \ as path separators. 

I have changed the logic in Camel to rely more on the JDK to compute file paths for me, instead of me build them self using strings.
So the problem manifests when you use Windows that uses \ separators with a FTP protocol that uses /.

This one: Deleteing file: /\temp\incoming\.done/file.txt
Will just be ignored if it cannot delete it.

But the dir path is correct FTP path: \temp\incoming\.done
I suspect I wont like the leading separator = \

I will look into it and commit a fix in approx 1h or less.","09/Mar/09 08:19;davsclaus;Paddy a new fix committed, could you test it again?
Committed revision 751614.

Both camel-core and camel-ftp should be rebuild.","09/Mar/09 09:19;watcher;Just arrived @work. Here ya go.

{code}
[le.remote.SftpComponent@8ae59a] SftpConsumer                   DEBUG Done processing file: GenericFile[temp/incoming/file.txt]. Status is: processed OK
[le.remote.SftpComponent@8ae59a] SftpConsumer                   DEBUG Committing remote file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@7f3b8a for file: GenericFile[temp/incoming/file.txt]
[le.remote.SftpComponent@8ae59a] SftpOperations                 DEBUG Deleteing file: temp/incoming/file.txt
[le.remote.SftpComponent@8ae59a] nericFileRenameProcessStrategy DEBUG Renaming file: GenericFile[temp/incoming/file.txt] to: GenericFile[temp/incoming/file.txt]
[le.remote.SftpComponent@8ae59a] SftpOperations                 DEBUG Renaming file: temp/incoming/file.txt to: temp/incoming/file.txt
[le.remote.SftpComponent@8ae59a] SftpConsumer                   WARN  Error committing remote file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@7f3b8a
org.apache.camel.component.file.GenericFileOperationFailedException: Cannot rename file from: temp/incoming/file.txt to: temp/incoming/file.txt
	at org.apache.camel.component.file.remote.SftpOperations.renameFile(SftpOperations.java:167)
	at org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy.renameFile(GenericFileRenameProcessStrategy.java:80)
	at org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy.commit(GenericFileRenameProcessStrategy.java:58)
	at org.apache.camel.component.file.GenericFileConsumer.processStrategyCommit(GenericFileConsumer.java:226)
	at org.apache.camel.component.file.GenericFileConsumer$1.done(GenericFileConsumer.java:180)
	at org.apache.camel.processor.UnitOfWorkProcessor$1.done(UnitOfWorkProcessor.java:57)
	at org.apache.camel.management.InstrumentationProcessor$1.done(InstrumentationProcessor.java:74)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:106)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)
	at org.apache.camel.processor.interceptor.StreamCachingInterceptor.proceed(StreamCachingInterceptor.java:88)
	at org.apache.camel.processor.interceptor.StreamCachingInterceptor.process(StreamCachingInterceptor.java:83)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:52)
	at org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:165)
	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:98)
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:66)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)
{code}","09/Mar/09 09:44;davsclaus;Paddy can you post your route and FTP uri as I am wondering why its trying to rename a file to the exact same name.
This can of course be optimized in Camel, but I am wondering though.","09/Mar/09 09:51;watcher;{code}
	 <camelContext xmlns=""http://camel.apache.org/schema/spring"">
	    <package>com.xxx.xxx.router</package>    
	    <!-- use myFilter as filter to allow setting ANT paths for which files to scan for -->
	    <endpoint id=""sftpEndPoint"" uri=""sftp://${sftpusername}@${ipaddress}?password=pass&amp;readLock=rename&amp;binary=true&amp;recursive=true&amp;delay=10000&amp;initialDelay=2000&amp;move=${file:parent}/.done/${file:name}&amp;knownHostsFile=c://known_host&amp;filter=#myAntFilter""/> 	  
	    <endpoint id=""fileRepository"" uri=""file://c://fileserver""/>
	 </camelContext>

	<!-- we use the AntPathMatcherRemoteFileFilter to use ant paths for includes and exlucde --> 	
	<bean id=""myAntFilter"" class=""org.apache.camel.component.file.AntPathMatcherGenericFileFilter"">	   
	    <property name=""includes"" value=""**/incoming/*""/>
	    <property name=""excludes"" value=""**/outgoing/*""/>
	</bean>
{code}

{code}
	from(getSftpEndPoint())
		
		.process(new Processor() {
			public void process(final Exchange exchange) throws Exception {
				Message message =  exchange.getIn();
				log.info(""message "" + message);
				String filename = message.getHeader(Exchange.FILE_NAME_ONLY, String.class);
				log.info(""filename "" + filename);
				exchange.getOut().setHeader(
								Exchange.FILE_NAME,
								filename);
			}
		}). 
		to(getFileRepository())
		.setHeader(
				""filename"", groovy(""in.headers.filename"")).setBody(constant(null)).to(""activemq:queue:print"");
				
{code}","09/Mar/09 10:55;davsclaus;Paddy can you try with:
${file:parent}/.done/${file:onlyname}

You must use the *onlyname* to store it correctly.

For me it looks like when there is no parent, then the evaluation of the:
${file:parent}/.done/${file:name}
results in ${file:name} and not as it should .done/${file:name}

And thus the file gets the exact same name.


","09/Mar/09 10:58;davsclaus;PS: in your processor above you should change the name directly on the IN.

Message message = exchange.getIn();
String filename = message.getHeader(Exchange.FILE_NAME_ONLY, String.class);

// replace name on IN to force no relative names
message.setHeader(Exchange.FILE_NAME, filename);

","09/Mar/09 11:26;davsclaus;Paddy can you do me a favor

Adding the tracer to your route. Just add the code below in your route builder, before the from(getFTP...)
{code}
                getContext().addInterceptStrategy(new Tracer());
{code}

This will log at INFO level the message as they are routed.

I would like to see what all the headers got resolve to, in that last bug of yours, eg using:
${file:parent}/.done/${file:name}

PS: I am wondering if Camel should default add the pre and postfix so you as an end user just sets:
move=.done

And then Camel will add the ${file:parent} and ${file:onlyname} itself. Then its easier for end users to work with.","09/Mar/09 11:34;watcher;This time the file is deleted from the incoming folder. It does not appear in any .done folder

{code}
[le.remote.SftpComponent@7b1641] RouterComponent                INFO  filename file.txt
[le.remote.SftpComponent@7b1641] GenericFileProducer            DEBUG Wrote [c:\fileserver\file.txt] to [Endpoint[file://c://fileserver]]
[le.remote.SftpComponent@7b1641] ObjectHelper                   WARN  Cannot find class: org.apache.xalan.xsltc.trax.DOM2SAX
[le.remote.SftpComponent@7b1641] SftpConsumer                   DEBUG Done processing file: GenericFile[temp/incoming/file.txt]. Status is: processed OK
[le.remote.SftpComponent@7b1641] SftpConsumer                   DEBUG Committing remote file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@19214b1 for file: GenericFile[temp/incoming/file.txt]
[le.remote.SftpComponent@7b1641] SftpOperations                 DEBUG Deleteing file: temp/incoming/file.txt
[le.remote.SftpComponent@7b1641] nericFileRenameProcessStrategy DEBUG Renaming file: GenericFile[temp/incoming/file.txt] to: GenericFile[temp/incoming/file.txt]
[le.remote.SftpComponent@7b1641] SftpOperations                 DEBUG Renaming file: temp/incoming/file.txt to: temp/incoming/file.txt
[le.remote.SftpComponent@7b1641] SftpConsumer                   WARN  Error committing remote file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@19214b1
org.apache.camel.component.file.GenericFileOperationFailedException: Cannot rename file from: temp/incoming/file.txt to: temp/incoming/file.txt
	at org.apache.camel.component.file.remote.SftpOperations.renameFile(SftpOperations.java:167)
	at org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy.renameFile(GenericFileRenameProcessStrategy.java:80)
	at org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy.commit(GenericFileRenameProcessStrategy.java:58)
	at org.apache.camel.component.file.GenericFileConsumer.processStrategyCommit(GenericFileConsumer.java:226)
	at org.apache.camel.component.file.GenericFileConsumer$1.done(GenericFileConsumer.java:180)
	at org.apache.camel.processor.UnitOfWorkProcessor$1.done(UnitOfWorkProcessor.java:57)
	at org.apache.camel.management.InstrumentationProcessor$1.done(InstrumentationProcessor.java:74)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:106)
{code}","09/Mar/09 11:35;watcher;only after seeing your comments above, will retry","09/Mar/09 11:45;watcher;move=${file:parent}/.done/${file:name}

{code}

	getContext().addInterceptStrategy(new Tracer());
	from(getSftpEndPoint())
		
		.process(new Processor() {
			public void process(final Exchange exchange) throws Exception {
				Message message =  exchange.getIn();
				log.info(""message "" + message);
				String filename = message.getHeader(Exchange.FILE_NAME_ONLY, String.class);
				
				message.setHeader(Exchange.FILE_NAME, filename);
				log.info(""filename "" + filename);
				exchange.getOut().setHeader(
								Exchange.FILE_NAME,
								filename);
			}
		}). 
		to(getFileRepository())
		.setHeader(
				""filename"", groovy(""in.headers.filename"")).setBody(constant(null)).to(""activemq:queue:print"");
				
{code}


{code}
[le.remote.SftpComponent@1321f5] SftpEndpoint                   DEBUG Using Generic file process strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@e7d53
[le.remote.SftpComponent@1321f5] SftpOperations                 DEBUG Renaming file: temp/incoming/file.txt to: temp/incoming/file.txt.camelExclusiveReadLock
[le.remote.SftpComponent@1321f5] SftpOperations                 DEBUG Renaming file: temp/incoming/file.txt.camelExclusiveReadLock to: temp/incoming/file.txt
[le.remote.SftpComponent@1321f5] SftpConsumer                   DEBUG About to process file: GenericFile[temp/incoming/file.txt] using exchange: Exchange[GenericFileMessage: GenericFile[temp/incoming/file.txt]]
[le.remote.SftpComponent@1321f5] TraceInterceptor               INFO  ID-DELLPD-2715-1236598778931-2-0 >>> sftp://xxxDemo@192.168.51.x?password=pass&readLock=rename&binary=true&recursive=true&delay=10000&initialDelay=2000&move=${file:parent}/.done/${file:name}&knownHostsFile=c://known_host&filter=#myAntFilter --> process(com.xxx.xxx.router.RouterComponent$1@cd4544), Pattern:InOnly, Headers:{CamelFileBatchSize=1, CamelFileNameOnly=file.txt, CamelFileBatchIndex=0, CamelFileLastModified=Mon Mar 09 11:34:06 GMT 2009, CamelFileRelativePath=temp/incoming/file.txt, CamelFileAbsolutePath=temp/incoming/file.txt, CamelFileName=null, CamelFilePath=\temp/incoming/file.txt, CamelFileParent=temp/incoming, CamelFileHost=192.168.51.5, CamelFileAbsolute=false}, BodyType:org.apache.camel.component.file.remote.RemoteFile, Body:
[le.remote.SftpComponent@1321f5] RouterComponent                INFO  message GenericFileMessage: GenericFile[temp/incoming/file.txt]
[le.remote.SftpComponent@1321f5] RouterComponent                INFO  filename file.txt
[le.remote.SftpComponent@1321f5] TraceInterceptor               INFO  ID-DELLPD-2715-1236598778931-2-0 >>> process(com.xxx.xxx.router.RouterComponent$1@cd4544) --> to(file://c://fileserver), Pattern:InOnly, Headers:{CamelFileNameOnly=file.txt, CamelFileLastModified=Mon Mar 09 11:34:06 GMT 2009, CamelFileRelativePath=temp/incoming/file.txt, CamelFileAbsolutePath=temp/incoming/file.txt, CamelFileName=file.txt, CamelFilePath=\temp/incoming/file.txt, CamelFileParent=temp/incoming, CamelFileAbsolute=false}, BodyType:java.io.ByteArrayOutputStream, Body:
[le.remote.SftpComponent@1321f5] GenericFileProducer            DEBUG Wrote [c:\fileserver\file.txt] to [Endpoint[file://c://fileserver]]
[le.remote.SftpComponent@1321f5] TraceInterceptor               INFO  ID-DELLPD-2715-1236598778931-2-0 >>> to(file://c://fileserver) --> setHeader(groovy: in.headers.filename), Pattern:InOnly, Headers:{CamelFileNameOnly=file.txt, CamelFileLastModified=Mon Mar 09 11:34:06 GMT 2009, CamelFileRelativePath=temp/incoming/file.txt, CamelFileAbsolutePath=temp/incoming/file.txt, CamelFileName=file.txt, CamelFilePath=\temp/incoming/file.txt, CamelFileParent=temp/incoming, CamelFileNameProduced=c:\fileserver\file.txt, CamelFileAbsolute=false}, BodyType:java.io.ByteArrayOutputStream, Body:
[le.remote.SftpComponent@1321f5] TraceInterceptor               INFO  ID-DELLPD-2715-1236598778931-2-0 >>> setHeader(groovy: in.headers.filename) --> setBody(null), Pattern:InOnly, Headers:{CamelFileNameOnly=file.txt, CamelFileLastModified=Mon Mar 09 11:34:06 GMT 2009, CamelFileRelativePath=temp/incoming/file.txt, CamelFileAbsolutePath=temp/incoming/file.txt, CamelFileName=file.txt, CamelFilePath=\temp/incoming/file.txt, CamelFileParent=temp/incoming, filename=null, CamelFileNameProduced=c:\fileserver\file.txt, CamelFileAbsolute=false}, BodyType:java.io.ByteArrayOutputStream, Body:
[le.remote.SftpComponent@1321f5] TraceInterceptor               INFO  ID-DELLPD-2715-1236598778931-2-0 >>> setBody(null) --> to(activemq:queue:print), Pattern:InOnly, Headers:{CamelFileNameOnly=file.txt, CamelFileLastModified=Mon Mar 09 11:34:06 GMT 2009, CamelFileRelativePath=temp/incoming/file.txt, CamelFileAbsolutePath=temp/incoming/file.txt, CamelFileName=file.txt, CamelFilePath=\temp/incoming/file.txt, CamelFileParent=temp/incoming, filename=null, CamelFileNameProduced=c:\fileserver\file.txt, CamelFileAbsolute=false}, BodyType:java.io.ByteArrayOutputStream, Body:
[le.remote.SftpComponent@1321f5] ObjectHelper                   WARN  Cannot find class: org.apache.xalan.xsltc.trax.DOM2SAX
[le.remote.SftpComponent@1321f5] SftpConsumer                   DEBUG Done processing file: GenericFile[temp/incoming/file.txt]. Status is: processed OK
[le.remote.SftpComponent@1321f5] SftpConsumer                   DEBUG Committing remote file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@e7d53 for file: GenericFile[temp/incoming/file.txt]
[le.remote.SftpComponent@1321f5] SftpOperations                 DEBUG Deleteing file: temp/incoming/file.txt
[le.remote.SftpComponent@1321f5] nericFileRenameProcessStrategy DEBUG Renaming file: GenericFile[temp/incoming/file.txt] to: GenericFile[temp/incoming/file.txt]
[le.remote.SftpComponent@1321f5] SftpOperations                 DEBUG Renaming file: temp/incoming/file.txt to: temp/incoming/file.txt
[le.remote.SftpComponent@1321f5] SftpConsumer                   WARN  Error committing remote file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@e7d53
org.apache.camel.component.file.GenericFileOperationFailedException: Cannot rename file from: temp/incoming/file.txt to: temp/incoming/file.txt
	at org.apache.camel.component.file.remote.SftpOperations.renameFile(SftpOperations.java:167)
	at org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy.renameFile(GenericFileRenameProcessStrategy.java:80)
	at org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy.commit(GenericFileRenameProcessStrategy.java:58)
	at org.apache.camel.component.file.GenericFileConsumer.processStrategyCommit(GenericFileConsumer.java:226)
	at org.apache.camel.component.file.GenericFileConsumer$1.done(GenericFileConsumer.java:180)
	at org.apache.camel.processor.UnitOfWorkProcessor$1.done(UnitOfWorkProcessor.java:57)
	at org.apache.camel.processor.interceptor.StreamCachingInterceptor.proceed(StreamCachingInterceptor.java:96)

{code}","09/Mar/09 12:15;davsclaus;Paddy could you try again. I have commited a fix and added some DEBUG logging I need when the name is changed/computed.

Committed revision 751658.

Please run the same test as above.","09/Mar/09 12:37;watcher;That worked. :-)

Here's the logs 

{code}
[e.remote.SftpComponent@15dc37d] SftpConsumer                   DEBUG Total 1 files to consume
[e.remote.SftpComponent@15dc37d] SftpEndpoint                   DEBUG Using Generic file process strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@1f42731
[e.remote.SftpComponent@15dc37d] GenericFile                    DEBUG Changing name to: file.txt.camelExclusiveReadLock
[e.remote.SftpComponent@15dc37d] GenericFile                    DEBUG Name changed: GenericFile[temp/incoming/file.txt.camelExclusiveReadLock]
[e.remote.SftpComponent@15dc37d] SftpOperations                 DEBUG Renaming file: temp/incoming/file.txt to: temp/incoming/file.txt.camelExclusiveReadLock
[e.remote.SftpComponent@15dc37d] SftpOperations                 DEBUG Renaming file: temp/incoming/file.txt.camelExclusiveReadLock to: temp/incoming/file.txt
[e.remote.SftpComponent@15dc37d] SftpConsumer                   DEBUG About to process file: GenericFile[temp/incoming/file.txt] using exchange: Exchange[GenericFileMessage: GenericFile[temp/incoming/file.txt]]
[e.remote.SftpComponent@15dc37d] TraceInterceptor               INFO  ID-DELLPD-3120-1236601791200-2-0 >>> sftp://xxxDemo@192.168.51.x?password=pass&readLock=rename&binary=true&recursive=true&delay=10000&initialDelay=2000&move=${file:parent}/.done/${file:name}&knownHostsFile=c://known_host&filter=#myAntFilter --> process(com.xxx.xxx.router.RouterComponent$1@c5122f), Pattern:InOnly, Headers:{CamelFileBatchSize=1, CamelFileNameOnly=file.txt, CamelFileBatchIndex=0, CamelFileLastModified=Mon Mar 09 12:23:23 GMT 2009, CamelFileRelativePath=temp/incoming/file.txt, CamelFileAbsolutePath=temp/incoming/file.txt, CamelFileName=null, CamelFilePath=temp/incoming/file.txt, CamelFileParent=temp/incoming, CamelFileHost=192.168.51.5, CamelFileAbsolute=false}, BodyType:org.apache.camel.component.file.remote.RemoteFile, Body:
[e.remote.SftpComponent@15dc37d] RouterComponent                INFO  message GenericFileMessage: GenericFile[temp/incoming/file.txt]
[e.remote.SftpComponent@15dc37d] RouterComponent                INFO  filename file.txt
[e.remote.SftpComponent@15dc37d] TraceInterceptor               INFO  ID-DELLPD-3120-1236601791200-2-0 >>> process(com.xxx.xxx.router.RouterComponent$1@c5122f) --> to(file://c://fileserver), Pattern:InOnly, Headers:{CamelFileNameOnly=file.txt, CamelFileLastModified=Mon Mar 09 12:23:23 GMT 2009, CamelFileRelativePath=temp/incoming/file.txt, CamelFileAbsolutePath=temp/incoming/file.txt, CamelFileName=file.txt, CamelFilePath=temp/incoming/file.txt, CamelFileParent=temp/incoming, CamelFileAbsolute=false}, BodyType:java.io.ByteArrayOutputStream, Body:
[e.remote.SftpComponent@15dc37d] GenericFileProducer            DEBUG Wrote [c:\fileserver\file.txt] to [Endpoint[file://c://fileserver]]
[e.remote.SftpComponent@15dc37d] TraceInterceptor               INFO  ID-DELLPD-3120-1236601791200-2-0 >>> to(file://c://fileserver) --> setHeader(groovy: in.headers.filename), Pattern:InOnly, Headers:{CamelFileNameOnly=file.txt, CamelFileLastModified=Mon Mar 09 12:23:23 GMT 2009, CamelFileRelativePath=temp/incoming/file.txt, CamelFileAbsolutePath=temp/incoming/file.txt, CamelFileName=file.txt, CamelFilePath=temp/incoming/file.txt, CamelFileParent=temp/incoming, CamelFileNameProduced=c:\fileserver\file.txt, CamelFileAbsolute=false}, BodyType:java.io.ByteArrayOutputStream, Body:
[e.remote.SftpComponent@15dc37d] TraceInterceptor               INFO  ID-DELLPD-3120-1236601791200-2-0 >>> setHeader(groovy: in.headers.filename) --> setBody(null), Pattern:InOnly, Headers:{CamelFileNameOnly=file.txt, CamelFileLastModified=Mon Mar 09 12:23:23 GMT 2009, CamelFileRelativePath=temp/incoming/file.txt, CamelFileAbsolutePath=temp/incoming/file.txt, CamelFileName=file.txt, CamelFilePath=temp/incoming/file.txt, CamelFileParent=temp/incoming, filename=null, CamelFileNameProduced=c:\fileserver\file.txt, CamelFileAbsolute=false}, BodyType:java.io.ByteArrayOutputStream, Body:
[e.remote.SftpComponent@15dc37d] TraceInterceptor               INFO  ID-DELLPD-3120-1236601791200-2-0 >>> setBody(null) --> to(activemq:queue:print), Pattern:InOnly, Headers:{CamelFileNameOnly=file.txt, CamelFileLastModified=Mon Mar 09 12:23:23 GMT 2009, CamelFileRelativePath=temp/incoming/file.txt, CamelFileAbsolutePath=temp/incoming/file.txt, CamelFileName=file.txt, CamelFilePath=temp/incoming/file.txt, CamelFileParent=temp/incoming, filename=null, CamelFileNameProduced=c:\fileserver\file.txt, CamelFileAbsolute=false}, BodyType:java.io.ByteArrayOutputStream, Body:
[e.remote.SftpComponent@15dc37d] ObjectHelper                   WARN  Cannot find class: org.apache.xalan.xsltc.trax.DOM2SAX
[e.remote.SftpComponent@15dc37d] SftpConsumer                   DEBUG Done processing file: GenericFile[temp/incoming/file.txt]. Status is: processed OK
[e.remote.SftpComponent@15dc37d] SftpConsumer                   DEBUG Committing remote file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@1f42731 for file: GenericFile[temp/incoming/file.txt]
[e.remote.SftpComponent@15dc37d] GenericFile                    DEBUG Changing name to: temp/incoming/.done/file.txt
[e.remote.SftpComponent@15dc37d] GenericFile                    DEBUG Name changed: GenericFile[temp/incoming/.done/file.txt]
[e.remote.SftpComponent@15dc37d] SftpOperations                 DEBUG Deleteing file: temp/incoming/.done/file.txt
[e.remote.SftpComponent@15dc37d] nericFileRenameProcessStrategy DEBUG Renaming file: GenericFile[temp/incoming/file.txt] to: GenericFile[temp/incoming/.done/file.txt]
[e.remote.SftpComponent@15dc37d] SftpOperations                 DEBUG Renaming file: temp/incoming/file.txt to: temp/incoming/.done/file.txt
{code}","09/Mar/09 13:20;davsclaus;Great. This was a long operation :)

Paddy I have removed some crux code.
Could you update and try again. To make sure it still works for you.

Committed revision 751673.
","09/Mar/09 13:38;watcher;Yeah, still working.

Great stuff Claus.","09/Mar/09 14:42;davsclaus;Paddy. CAMEL-1441 had a bug with the file component on Windows.

Can you try again to test if your SFTP is still working
Committed revision 751694.
","09/Mar/09 14:55;watcher;yeah, still works , no problems to report","09/Mar/09 15:30;davsclaus;Okay Paddy, this is is finally fixed. You got me out for a spin :)

Glad you could help so much and be very quick to respond and try all my attempts.","11/Mar/09 07:32;davsclaus;Paddy with CAMEL-1440 you should be able to enter the move option a bit more simple

before:
move=${file:parent}/.done/${file:name}

now:
move=.done


","11/Mar/09 09:32;watcher;Great, 
thanks for the update",31/Jul/09 06:34;davsclaus;Closing 2.0m1 tickets
java.lang.IllegalStateException: BeanFactory not initialized or already closed - call 'refresh' before accessing beans via the ApplicationContext,CAMEL-1427,12485565,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,cmoulliard,cmoulliard,05/Mar/09 14:55,07/Feb/10 09:55,14/Mar/19 02:42,18/Mar/09 15:35,,,,,,,,,,,,,,osgi,,,,0,"Hi,

When I run the following spring DSL in SMX4

<?xml version=""1.0"" encoding=""UTF-8""?>
<beans xmlns=""http://www.springframework.org/schema/beans""
	xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
	xmlns:camel=""http://camel.apache.org/schema/spring""
	xmlns:cxf=""http://camel.apache.org/schema/cxf""
	xsi:schemaLocation="" http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
		http://camel.apache.org/schema/osgi
		http://camel.apache.org/schema/osgi/camel-osgi.xsd
		http://camel.apache.org/schema/spring
		http://camel.apache.org/schema/spring/camel-spring.xsd
		http://camel.apache.org/schema/cxf
		http://camel.apache.org/schema/cxf/camel-cxf.xsd"">
 
	<bean id=""bindyDataformat""
		  class=""org.apache.camel.dataformat.bindy.csv.BindyCsvDataFormat"">
	     <constructor-arg type=""java.lang.String"" value=""org.apache.camel.example.reportincident.model"" />
	</bean>
	
	<bean id=""csv"" class=""org.apache.camel.example.reportincident.csv.CsvBean"" />

	<bean id=""OK"" class=""org.apache.camel.example.reportincident.OutputReportIncident"">
		<property name=""code"" value=""0""/>
	</bean>

	<camelContext trace=""true"" xmlns=""http://camel.apache.org/schema/osgi"">
		<camel:package>org.apache.camel.example.reportincident.routing</camel:package>
		
		<!-- File route  -->
		<camel:route>
			<camel:from	uri=""file://d:/temp/data/?moveExpression=d:/temp/done/${file:name}"" />
			<camel:unmarshal ref=""bindyDataformat"" />
			<camel:to uri=""bean:csv"" />
		</camel:route>
		
		<!-- CXF route -->
		<camel:route>
			<camel:from uri=""cxf://http://localhost:8080/camel-example/incident?serviceClass=org.apache.camel.example.reportincident.service.ReportIncidentEndpoint&amp;wsdlURL=wsdl/report_incident.wsdl"" />
			<camel:convertBodyTo type=""org.apache.camel.example.reportincident.InputReportIncident"" />
			<camel:to uri=""log:cxf"" />
			<camel:transform>
			    <camel:method bean=""OK"" method=""code""/>
			</camel:transform>
		</camel:route>
	 
	</camelContext>
</beans>

, I receive the following error :

15:48:59,209 | ERROR | xtenderThread-15 | OsgiBundleXmlApplicationContext  | gatedExecutionApplicationContext  366 | Post refresh error
java.lang.IllegalStateException: BeanFactory not initialized or already closed - call 'refresh' before accessing beans via the ApplicationContext
	at org.springframework.context.support.AbstractRefreshableApplicationContext.getBeanFactory(AbstractRefreshableApplicationContext.java:153)
	at org.springframework.context.support.AbstractApplicationContext.containsBean(AbstractApplicationContext.java:892)
	at org.apache.cxf.configuration.spring.ConfigurerImpl.configureBean(ConfigurerImpl.java:141)
	at org.apache.cxf.configuration.spring.ConfigurerImpl.configureBean(ConfigurerImpl.java:111)
	at org.apache.cxf.transport.http.AbstractHTTPTransportFactory.configure(AbstractHTTPTransportFactory.java:229)
	at org.apache.cxf.transport.http.AbstractHTTPTransportFactory.configure(AbstractHTTPTransportFactory.java:224)
	at org.apache.cxf.transport.http_jetty.JettyHTTPTransportFactory.createDestination(JettyHTTPTransportFactory.java:121)
	at org.apache.cxf.transport.http_jetty.JettyHTTPTransportFactory.getDestination(JettyHTTPTransportFactory.java:103)
	at org.apache.cxf.endpoint.ServerImpl.initDestination(ServerImpl.java:90)
	at org.apache.cxf.endpoint.ServerImpl.<init>(ServerImpl.java:69)
	at org.apache.cxf.frontend.ServerFactoryBean.create(ServerFactoryBean.java:121)
	at org.apache.cxf.jaxws.JaxWsServerFactoryBean.create(JaxWsServerFactoryBean.java:168)
	at org.apache.camel.component.cxf.CxfConsumer.<init>(CxfConsumer.java:102)
	at org.apache.camel.component.cxf.CxfEndpoint.createConsumer(CxfEndpoint.java:95)
	at org.apache.camel.impl.EventDrivenConsumerRoute.addServices(EventDrivenConsumerRoute.java:62)
	at org.apache.camel.Route.getServicesForRoute(Route.java:74)
	at org.apache.camel.impl.RouteService.doStart(RouteService.java:77)
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:50)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:743)
	at org.apache.camel.spring.SpringCamelContext.maybeDoStart(SpringCamelContext.java:165)
	at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:160)
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:50)
	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:95)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:114)
	at org.springframework.context.event.SimpleApplicationEventMulticaster$1.run(SimpleApplicationEventMulticaster.java:78)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:49)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:76)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:274)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:736)
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.finishRefresh(AbstractDelegatedExecutionApplicationContext.java:380)
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext$4.run(AbstractDelegatedExecutionApplicationContext.java:346)
	at org.springframework.osgi.util.internal.PrivilegedUtils.executeWithCustomTCCL(PrivilegedUtils.java:85)
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.completeRefresh(AbstractDelegatedExecutionApplicationContext.java:308)
	at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor$CompleteRefreshTask.run(DependencyWaiterApplicationContextExecutor.java:138)
	at java.lang.Thread.run(Thread.java:595)

but the error is not generated when running outside of an OSGI server (SMX4)
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-03-13 16:09:27.264,,,no_permission,,,,,,,,,,,,,76859,,,Wed Mar 18 15:35:54 UTC 2009,,,,,,,0|i01icn:,6742,,,,,,,,,"13/Mar/09 15:39;cmoulliard;Hi Willem,

I don't have this error anymore. Have you change something or modified the code ?","13/Mar/09 15:42;cmoulliard;Nevertheless, I see that the 

1) convertBodyType does not work because I have the following error in the log :

Could not convert body of IN message: Message: [org.apache.camel.example.reportincident.InputReportIncident@1728992] to type: org.apache.camel.example.reportincident.InputReportIncident 

when I use the route :
{code}
<camel:from uri=""cxf://http://localhost:8080/camel-example/incident?serviceClass=org.apache.camel.example.reportincident.service.ReportIncidentEndpoint&amp;wsdlURL=wsdl/report_incident.wsdl"" />
<camel:convertBodyTo type=""org.apache.camel.example.reportincident.InputReportIncident"" />
<camel:transform>
<camel:method bean=""OK"" method=""code""/>
</camel:transform>
{code}

If in a processor, I use the following code, it works :

{code}
	    List<?> parameter = exchange.getIn().getBody(List.class);
	    // Get the first object in the list that is our InputReportIncident
	    Object input = parameter.get(0);
	    
	    ObjectHelper.notNull(input, ""Object incident"" );
	    InputReportIncident incident = (InputReportIncident)input;
	    
		LOG.debug(""Incident received from : "" + incident.getFamilyName() + "", "" + incident.getGivenName());
		LOG.debug(""Incident info : "" + incident.getIncidentId() + "", at : "" + incident.getIncidentDate());
		LOG.debug(""Incident details : "" + incident.getDetails() + "", summary : "" + incident.getSummary());
		
	    // replace with our input
	    exchange.getOut().setBody(input);
{code}

and

2)  that the transform does not return anything to the web client issuing the web call","13/Mar/09 16:09;davsclaus;Ad 1)
It could be because of the @FallbackTypeconverter not kick in, eg when using OSGi.

camel-cxf has a CxfConverter that is a @FallbackTypeConverter that should deal with the CXF List stuff.","16/Mar/09 11:52;cmoulliard;I don't know it it is related or not (or can provide addtional help for you) but I see the following warning in the console :

12:48:40,808 | WARN  | 19816691@qtp2-0  | DefaultPackageScanClassResolver  | .DefaultPackageScanClassResolver  377 | Could not find class 'org/apache/camel/component/cxf/converter/CxfConverter.class' in any classloaders: [BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], 96.0, BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)]]
12:48:40,918 | WARN  | 19816691@qtp2-0  | DefaultPackageScanClassResolver  | .DefaultPackageScanClassResolver  377 | Could not find class 'org/apache/activemq/camel/converter/ActiveMQConverter.class' in any classloaders: [BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], 96.0, BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)]]
12:48:40,918 | WARN  | 19816691@qtp2-0  | DefaultPackageScanClassResolver  | .DefaultPackageScanClassResolver  377 | Could not find class 'org/apache/activemq/camel/converter/ActiveMQMessageConverter.class' in any classloaders: [BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], 96.0, BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)]]
12:48:40,965 | WARN  | 19816691@qtp2-0  | DefaultPackageScanClassResolver  | .DefaultPackageScanClassResolver  377 | Could not find class 'org/apache/activemq/camel/converter/ActiveMQMessageConverter$1.class' in any classloaders: [BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], 96.0, BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)], BundleDelegatingClassLoader for [Report Incident Interfaces Bundle (reportincident.interfaces)]]
12:48:41,152 | INFO  | 19816691@qtp2-0  | TraceInterceptor                 | rg.apache.camel.processor.Logger   88 | ID-dell-charles-1294-1237204077246-2-0 >>> http://localhost:8080/camel-example/incident --> to(bean:webService), Pattern:InOut, Properties:{org.apache.camel.component.cxf.DataFormat=POJO, org.apache.cxf.service.model.BindingOperationInfo=[BindingOperationInfo: {http://reportincident.example.camel.apache.org}ReportIncident]}, Headers:{content-type=text/xml;charset=UTF-8, content.type=text/xml;charset=UTF-8, operationName=ReportIncident, Host=localhost:8080, Content-Length=639, SOAPAction=""http://reportincident.example.camel.apache.org/ReportIncident"", User-Agent=Jakarta Commons-HttpClient/3.1, operationNameSpace=http://reportincident.example.camel.apache.org}, BodyType:org.apache.cxf.message.MessageContentsList, Body:[org.apache.camel.example.reportincident.InputReportIncident@9875a3]
12:48:41,183 | INFO  | 19816691@qtp2-0  | TraceInterceptor                 | rg.apache.camel.processor.Logger   88 | ID-dell-charles-1294-1237204077246-2-0 >>> to(bean:webService) --> transform(), Pattern:InOut, Properties:{CamelBeanHolder=bean: webService, org.apache.camel.component.cxf.DataFormat=POJO, org.apache.cxf.service.model.BindingOperationInfo=[BindingOperationInfo: {http://reportincident.example.camel.apache.org}ReportIncident]}, BodyType:org.apache.camel.example.reportincident.InputReportIncident, Body:org.apache.camel.example.reportincident.InputReportIncident@9875a3
","17/Mar/09 10:32;njiang;Hi Charles,

Can you add the import of camel-core, camel-cxf into the bundle of Report Incident Interfaces Bundle (reportincident.interfaces)?
In this way , we could let the BundleDelegatingClassLoader load the converter class.

Willem

","17/Mar/09 12:08;cmoulliard;Yes, the warning disappears by adding in the Import-package of the bundle the package org.apache.camel.component.cxf.converter 

and the convertBodyTo of camel

{code}
<camel:convertBodyTo type=""org.apache.camel.example.reportincident.InputReportIncident"" />
{code}

works now.

Thks :-)

It only remains to find why this part of the camel route return nothing :

{code}
<camel:transform>
<camel:method bean=""OK"" method=""code""/>
</camel:transform>
{code}

","18/Mar/09 07:09;njiang;Hi Charles,

After studied the Spring Osgi relates ApplicationContext code, I found they will use the managed thread to refresh the application.
Since your application context didn't import any CXF relates components, CXF bus will try to create the application context itself, 
then you may hit that kind of  java.lang.IllegalStateException: BeanFactory not initialized or already closed , 
if the CXF bus's application context doesn't finish the initialization before camel setup the  cxf endpoint for your.

So please include the below line into your Spring configuration to load the bus explicitly.
{code}
 <import resource=""classpath:META-INF/cxf/cxf.xml""/>
 <import resource=""classpath:META-INF/cxf/cxf-extension-soap.xml""/>
 <import resource=""classpath:META-INF/cxf/cxf-extension-http-jetty.xml""/>
{code}

Willem
","18/Mar/09 10:04;cmoulliard;@Willem,

Error still there :

START LEVEL 100
   ID   State         Spring     Level  Name
[   0] [Active     ] [       ] [    0] System Bundle (1.5.0.r752991)
[   1] [Active     ] [       ] [   10] Apache ServiceMix Specs :: JAXP API 1.4 (1.3.0.SNAPSHOT)
[   2] [Active     ] [       ] [   10] Apache Felix Prefrences Service (1.0.2)
[   3] [Active     ] [       ] [   10] geronimo-annotation_1.0_spec (1.1.1)
[   4] [Active     ] [       ] [   10] OSGi R4 Compendium Bundle (4.1.0)
[   5] [Active     ] [       ] [   10] Apache ServiceMix Bundles: jaxp-ri-1.4.2 (1.4.2.1)
[   6] [Active     ] [       ] [   10] Apache Felix Configuration Admin Service (1.0.4)
[   7] [Active     ] [       ] [   10] geronimo-servlet_2.5_spec (1.1.2)
[   8] [Active     ] [Started] [   40] Apache ServiceMix Kernel :: GShell Core (1.1.0.SNAPSHOT)
[   9] [Active     ] [       ] [    8] OPS4J Pax Logging - API (1.3.0)
[  10] [Active     ] [       ] [    8] OPS4J Pax Logging - Service (1.3.0)
[  11] [Active     ] [       ] [    5] OPS4J Pax Url - wrap: (0.3.3)
[  12] [Active     ] [       ] [    5] OPS4J Pax Url - mvn: (0.3.3)
[  13] [Active     ] [       ] [   30] Apache ServiceMix Kernel :: JAAS Modules (1.1.0.SNAPSHOT)
[  14] [Active     ] [       ] [   30] Apache ServiceMix Kernel :: GShell Features (1.1.0.SNAPSHOT)
[  15] [Active     ] [       ] [   30] Apache ServiceMix Kernel :: GShell Admin (1.1.0.SNAPSHOT)
[  16] [Active     ] [       ] [   30] Apache ServiceMix Bundles: mina-1.1.7 (1.1.7.1)
[  17] [Active     ] [       ] [   30] spring-osgi-extender (1.2.0.rc1)
[  18] [Active     ] [       ] [   30] Apache ServiceMix Kernel :: GShell PackageAdmin Commands (1.1.0.SNAPSHOT)
[  19] [Active     ] [       ] [   30] Apache ServiceMix Kernel :: GShell ConfigAdmin Commands (1.1.0.SNAPSHOT)
[  20] [Active     ] [Started] [   30] Apache ServiceMix Kernel :: GShell OSGi Commands (1.1.0.SNAPSHOT)
[  21] [Active     ] [       ] [   30] Spring Context (2.5.6)
[  22] [Active     ] [       ] [   30] Apache ServiceMix Bundles: commons-jexl-1.1 (1.1.0.1)
[  23] [Active     ] [Started] [   30] Apache ServiceMix Kernel :: JAAS Config (1.1.0.SNAPSHOT)
[  24] [Active     ] [       ] [   30] Apache ServiceMix Bundles: commons-httpclient-3.1 (3.1.0.1)
[  25] [Active     ] [       ] [   30] Spring Core (2.5.6)
[  26] [Active     ] [       ] [   30] jmx-impl (1.0.0.r6125-patched)
[  27] [Active     ] [       ] [   30] spring-osgi-io (1.2.0.rc1)
[  28] [Active     ] [       ] [   30] jmx (1.0.0.r6125-patched)
[  29] [Active     ] [Started] [   30] Apache ServiceMix Kernel :: GShell Log Commands (1.1.0.SNAPSHOT)
[  30] [Active     ] [       ] [   30] spring-osgi-core (1.2.0.rc1)
[  31] [Active     ] [       ] [   30] Apache ServiceMix Bundles: commons-vfs-1.0 (1.0.0.1)
[  32] [Active     ] [       ] [   30] Spring Beans (2.5.6)
[  33] [Active     ] [       ] [   30] Unnamed - com.google.code.sshd:sshd:bundle:0.1 (0.1)
[  34] [Active     ] [Started] [   30] Apache ServiceMix Kernel :: Management (1.1.0.SNAPSHOT)
[  35] [Active     ] [       ] [   30] Apache ServiceMix Bundles: commons-codec-1.2 (1.2.0.1)
[  36] [Active     ] [       ] [   30] Apache ServiceMix Bundles: cglib-2.1_3 (2.1.0.3_1)
[  37] [Active     ] [       ] [   30] Apache ServiceMix Bundles: jline-0.9.94 (0.9.94.1)
[  38] [Active     ] [       ] [   30] Apache ServiceMix Bundles: aopalliance-1.0 (1.0.0.1)
[  39] [Active     ] [       ] [   30] Spring AOP (2.5.6)
[  40] [Active     ] [Started] [   30] Apache ServiceMix Kernel :: Spring Deployer (1.1.0.SNAPSHOT)
[  41] [Active     ] [       ] [   30] Apache ServiceMix Bundles: oro-2.0.8 (2.0.8.1)
[  42] [Active     ] [       ] [   15] Apache ServiceMix Kernel :: File Monitor (1.1.0.SNAPSHOT)
[  43] [Active     ] [       ] [   60] Apache ServiceMix Bundles: jaxb-impl-2.1.6 (2.1.6.1)
[  44] [Active     ] [       ] [   60] Apache ServiceMix Specs :: JAXB API 2.1 (1.2.0)
[  45] [Active     ] [       ] [   60] Apache ServiceMix Specs :: ACTIVATION API 1.4 (1.2.0)
[  46] [Active     ] [       ] [   60] ObjectWeb ASM (2.2.3)
[  47] [Active     ] [       ] [   60] Commons Collections (3.2.1)
[  48] [Active     ] [       ] [   60] Commons Lang (2.4)
[  49] [Active     ] [       ] [   60] Apache Commons Pool Bundle (1.4)
[  50] [Active     ] [       ] [   60] geronimo-jta_1.1_spec (1.1.1)
[  51] [Active     ] [       ] [   60] geronimo-j2ee-connector_1.5_spec (2.0.0)
[  52] [Active     ] [       ] [   60] Apache ServiceMix Bundles: howl-1.0.1-1 (1.0.1.1_1)
[  53] [Active     ] [       ] [   60] Geronimo TxManager :: Transaction (2.2.0.r634076)
[  54] [Active     ] [       ] [   60] Spring Transaction (2.5.6)
[  55] [Active     ] [Started] [   60] Apache ServiceMix Transaction (1.0.0.SNAPSHOT)
[  56] [Active     ] [       ] [   60] Geronimo TxManager :: Connector (2.2.0.r634076)
[  57] [Active     ] [       ] [   60] geronimo-jms_1.1_spec (1.1.1)
[  58] [Active     ] [       ] [   60] Apache ServiceMix Bundles: jencks-2.1 (2.1.0.1)
[  59] [Active     ] [       ] [   60] geronimo-j2ee-management_1.1_spec (1.0.1)
[  60] [Active     ] [       ] [   60] xbean-spring (3.4.3)
[  61] [Active     ] [       ] [   60] activemq-core (5.2.0)
[  62] [Active     ] [       ] [   60] activemq-ra (5.2.0)
[  63] [Active     ] [       ] [   60] activemq-console (5.2.0)
[  64] [Active     ] [       ] [   60] activemq-pool (5.2.0)
[  65] [Active     ] [Started] [   60] Apache ServiceMix Features :: ActiveMQ Commands (4.0.0.m2-SNAPSHOT)
[  66] [Active     ] [       ] [   60] Apache ServiceMix Bundles: jetty-6.1.14 (6.1.14.1)
[  67] [Active     ] [       ] [   60] OPS4J Pax Web - Web Container (0.5.2)
[  68] [Active     ] [       ] [   60] OPS4J Pax Web - Jsp Support (0.5.2)
[  69] [Active     ] [       ] [   60] OPS4J Pax Web Extender - WAR (0.5.0)
[  70] [Active     ] [       ] [   60] OPS4J Pax Web Extender - Whiteboard (0.5.0)
[  71] [Active     ] [       ] [   60] OPS4J Pax Url - war:, war-i: (0.3.3)
[  72] [Active     ] [Started] [   60] Apache ServiceMix WAR Deployer (4.0.0.m2-SNAPSHOT)
[  73] [Active     ] [       ] [   60] Apache ServiceMix Bundles: commons-dbcp-1.2.2 (1.2.2.1)
[  74] [Active     ] [       ] [   60] Apache ServiceMix Bundles: FastInfoset-1.2.2 (1.2.2.1)
[  75] [Active     ] [       ] [   60] Apache ServiceMix Bundles: xmlsec-1.3.0 (1.3.0.1)
[  76] [Active     ] [       ] [   60] Apache ServiceMix Bundles: wss4j-1.5.4 (1.5.4.1)
[  77] [Active     ] [       ] [   60] Apache ServiceMix Bundles: xmlbeans-2.4.0 (2.4.0.1)
[  78] [Active     ] [       ] [   60] Apache ServiceMix Bundles: xmlresolver-1.2 (1.2.0.1)
[  79] [Active     ] [       ] [   60] Apache ServiceMix Bundles: xmlschema-1.4.2 (1.4.2.1)
[  80] [Active     ] [       ] [   60] Apache ServiceMix Bundles: ant-1.7.0 (1.7.0.1)
[  81] [Active     ] [       ] [   60] Apache ServiceMix Bundles: jdom-1.1 (1.1.0.1)
[  82] [Active     ] [       ] [   60] Apache ServiceMix Bundles: werken-xpath-0.9.4 (0.9.4.1)
[  83] [Active     ] [       ] [   60] Apache ServiceMix Bundles: velocity-1.5 (1.5.0.1)
[  84] [Active     ] [       ] [   60] Apache ServiceMix Bundles: neethi-2.0.4 (2.0.4.1)
[  85] [Active     ] [       ] [   60] Apache ServiceMix Bundles: abdera-0.4.0-incubating (0.4.0.incubating_1)
[  86] [Active     ] [       ] [   60] Apache ServiceMix Bundles: junit-4.4 (4.4.0.1)
[  87] [Active     ] [       ] [   60] Apache ServiceMix Bundles: antlr-3.0.1 (3.0.1.1)
[  88] [Active     ] [       ] [   60] Apache ServiceMix Bundles: commons-io-1.3.2 (1.3.2.1)
[  89] [Active     ] [       ] [   60] Apache ServiceMix Specs :: JAVAMAIL API 1.4 (1.2.0)
[  90] [Active     ] [       ] [   60] Apache ServiceMix Specs :: JAXWS API 2.1 (1.2.0)
[  91] [Active     ] [       ] [   60] Apache ServiceMix Specs :: SAAJ API 1.3 (1.2.0)
[  92] [Active     ] [       ] [   60] Apache ServiceMix Bundles: wsdl4j-1.6.1 (1.6.1.1)
[  93] [Active     ] [       ] [   60] geronimo-ws-metadata_2.0_spec (1.1.2)
[  94] [Active     ] [       ] [   60] Apache CXF Bundle Jar (2.2.0.SNAPSHOT)
[  95] [Active     ] [       ] [   60] camel-core (2.0.0.SNAPSHOT)
[  96] [Active     ] [       ] [   60] camel-spring (2.0.0.SNAPSHOT)
[  97] [Active     ] [       ] [   60] camel-osgi (2.0.0.SNAPSHOT)
[  98] [Active     ] [       ] [   60] camel-bindy (2.0.0.SNAPSHOT)
[  99] [Active     ] [       ] [   60] Spring JMS (2.5.6)
[ 100] [Active     ] [       ] [   60] camel-jms (2.0.0.SNAPSHOT)
[ 101] [Active     ] [       ] [   60] camel-cxf (2.0.0.SNAPSHOT)
[ 102] [Active     ] [       ] [   60] activemq-camel (5.2.0)
[ 103] [Active     ] [Started] [   60] OSGI Queuing Service (1.0.0.SNAPSHOT)
[ 104] [Active     ] [Started] [   60] Report Incident Domain Bundle (1.0.0.SNAPSHOT)
[ 105] [Active     ] [Started] [   60] Report Incident Service Bundle (1.0.0.SNAPSHOT)
[ 106] [Active     ] [Started] [   60] Report Incident Interfaces Bundle (1.0.0.SNAPSHOT)
[ 107] [Active     ] [Started] [   60] activemq-broker-camel2.0.xml (0.0.0)
smx@root:osgi> update 106
smx@root:osgi> Exception in thread ""SpringOsgiExtenderThread-17"" java.lang.IllegalStateException: BeanFactory not initialized or already closed - call
 'refresh' before accessing beans via the ApplicationContext
        at org.springframework.context.support.AbstractRefreshableApplicationContext.getBeanFactory(AbstractRefreshableApplicationContext.java:153)
        at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor.close(DependencyWaiterApplicatio
nContextExecutor.java:345)
        at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor.fail(DependencyWaiterApplication
ContextExecutor.java:401)
        at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor.stageOne(DependencyWaiterApplica
tionContextExecutor.java:287)
        at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor.refresh(DependencyWaiterApplicat
ionContextExecutor.java:175)
        at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.refresh(AbstractDelegatedExecutionApplicationContext.
java:175)
        at org.springframework.osgi.extender.internal.activator.ContextLoaderListener$2.run(ContextLoaderListener.java:716)
        at java.lang.Thread.run(Thread.java:595)

with the following modification :

{code}
<?xml version=""1.0"" encoding=""UTF-8""?>
<beans xmlns=""http://www.springframework.org/schema/beans""
	xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
	xmlns:camel=""http://camel.apache.org/schema/spring""
	xmlns:osgi=""http://www.springframework.org/schema/osgi""
	xmlns:cxf=""http://camel.apache.org/schema/cxf""
	xsi:schemaLocation=""
	    http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
		http://www.springframework.org/schema/osgi
		http://www.springframework.org/schema/osgi/spring-osgi.xsd
		http://camel.apache.org/schema/osgi
		http://camel.apache.org/schema/osgi/camel-osgi.xsd
		http://camel.apache.org/schema/spring
		http://camel.apache.org/schema/spring/camel-spring.xsd
		http://camel.apache.org/schema/cxf
		http://camel.apache.org/schema/cxf/camel-cxf.xsd"">
		
 <import resource=""classpath:META-INF/cxf/cxf.xml""/>
 <import resource=""classpath:META-INF/cxf/cxf-extension-soap.xml""/>
 <import resource=""classpath:META-INF/cxf/cxf-extension-http-jetty.xml""/>

	<bean id=""bindyDataformat"" class=""org.apache.camel.dataformat.bindy.csv.BindyCsvDataFormat"">
		<constructor-arg type=""java.lang.String"" value=""org.apache.camel.example.reportincident.model"" />
	</bean>

	<bean id=""csv"" class=""org.apache.camel.example.reportincident.beans.Csv"" />
	<bean id=""webservice"" class=""org.apache.camel.example.reportincident.beans.WebService"" />
	<bean id=""feedback"" class=""org.apache.camel.example.reportincident.beans.Feedback"" />
	
	<!-- webservice endpoint -->
	<cxf:cxfEndpoint id=""reportIncident""
		address=""http://localhost:8080/camel-example/incident"" wsdlURL=""wsdl/report_incident.wsdl""
		serviceClass=""org.apache.camel.example.reportincident.ReportIncidentEndpoint""
		xmlns:s=""http://reportincident.example.camel.apache.org"">
	</cxf:cxfEndpoint>
	
	<osgi:reference id=""queuingservice"" interface=""org.apache.camel.Component"" />

	<camelContext trace=""true"" xmlns=""http://camel.apache.org/schema/osgi"">

		<!-- File route  -->
		<camel:route>
			<camel:from	uri=""file://d:/temp/data/?move=d:/temp/done/${file:name}"" />
			<camel:unmarshal ref=""bindyDataformat"" />
			<camel:to uri=""bean:csv"" />
			<camel:to uri=""queuingservice:queue:in"" />
		</camel:route>
		
		<!-- -->
		<camel:route>
			<camel:from uri=""queuingservice:queue:in"" />
			<camel:marshal ref=""bindyDataformat"" />
			<camel:to uri=""file://d:/temp/data/queue"" />
		</camel:route>

		<!-- CXF route -->
		<camel:route>
			<camel:from uri=""cxf:bean:reportIncident"" />
			<camel:convertBodyTo type=""org.apache.camel.example.reportincident.InputReportIncident"" />
			<camel:to uri=""bean:webservice"" />
			<camel:transform>
				<camel:method bean=""feedback"" method=""setOk"" />
			</camel:transform>
		</camel:route>
	</camelContext>
</beans>
{code}","18/Mar/09 12:41;cmoulliard;@Willem

In fact, we cannot use import 

{code}
<import resource=""classpath:META-INF/cxf/cxf.xml""/>
 <import resource=""classpath:META-INF/cxf/cxf-extension-soap.xml""/>
 <import resource=""classpath:META-INF/cxf/cxf-extension-http-jetty.xml""/>
{code}

because in this case in a OSGI server, the camel routes defined with the string url for the cxf endpoint does not work.

Temporary conclusion :

Top of SMX4, we cannot use import statements and we can't use the cxf:endpoint but only declare the uri like this :

{code}
<camel:from uri=""cxf://http://localhost:8080/camel-example/incident? .....
{code}

Remark : I will create a bundle of the reportincident example and deploy it in SMX to see if the error appears in OSGI
","18/Mar/09 15:35;cmoulliard;Hi,

I have been able to deploy successfully camel cxf:endpoint in ServiceMix engine. Both configuration (using the cxf:endpoint or uri=cxf:///) works except that I have to restart the SMX server in order to launch correctly the Camel CXF bundle after an update of the bundle.

To run it correctly, I have imported in my bundle MANIFEST file different packages. Here is the list. This could be helpfull for others :

{code}
						<Import-Package>
						    META-INF.cxf,
						    META-INF.wsdl,
						    org.apache.commons.logging,
						    org.apache.camel,
						    org.apache.camel.component,
						    org.apache.camel.component.cxf,
						    org.apache.camel.component.cxf.converter,
						    org.apache.camel.component.jms,
							org.apache.camel.dataformat.bindy,
							org.apache.camel.dataformat.bindy.csv,
							org.apache.camel.example.reportincident,
							org.apache.camel.example.reportincident.model,
							org.apache.camel.processor,
							org.apache.activemq.camel.component;${activemq.osgi.version},
							org.apache.activemq.camel.converter;${activemq.osgi.version},
							org.apache.activemq.pool,
							org.apache.cxf,
							org.apache.cxf.binding,
							org.apache.cxf.binding.corba,
							org.apache.cxf.binding.soap,
							org.apache.cxf.binding.soap.spring,
							org.apache.cxf.bus,
							org.apache.cxf.bus.resource,
							org.apache.cxf.bus.spring,
							org.apache.cxf.buslifecycle,
							org.apache.cxf.catalog,
							org.apache.cxf.configuration,
							org.apache.cxf.configuration.spring,
							org.apache.cxf.endpoint,
							org.apache.cxf.headers,
							org.apache.cxf.management,
							org.apache.cxf.management.jmx,
							org.apache.cxf.phase,
							org.apache.cxf.resource,
							org.apache.cxf.transport,
							org.apache.cxf.transport.http,
							org.apache.cxf.transport.http.policy,
							org.apache.cxf.transport.http_jetty,
							org.apache.cxf.transport.jms,
							org.apache.cxf.transports.http,
							org.apache.cxf.workqueue,
							org.apache.cxf.wsdl,
							org.apache.cxf.wsdl11,
							org.springframework.beans.factory.config,
							*
					    </Import-Package>
{code}

I will discuss this point with G. Nodet.

Here is an example of the config used :

{code}
<?xml version=""1.0"" encoding=""UTF-8""?>
<beans xmlns=""http://www.springframework.org/schema/beans""
	xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
	xmlns:camel=""http://camel.apache.org/schema/spring""
	xmlns:osgi=""http://www.springframework.org/schema/osgi""
	xmlns:cxf=""http://camel.apache.org/schema/cxf""
	xsi:schemaLocation=""
	    http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
		http://www.springframework.org/schema/osgi
		http://www.springframework.org/schema/osgi/spring-osgi.xsd
		http://camel.apache.org/schema/osgi
		http://camel.apache.org/schema/osgi/camel-osgi.xsd
		http://camel.apache.org/schema/spring
		http://camel.apache.org/schema/spring/camel-spring.xsd
		http://camel.apache.org/schema/cxf
		http://camel.apache.org/schema/cxf/camel-cxf.xsd"">
		
  <import resource=""classpath:META-INF/cxf/cxf.xml""/>
 <import resource=""classpath:META-INF/cxf/cxf-extension-soap.xml""/>
 <import resource=""classpath:META-INF/cxf/cxf-extension-http-jetty.xml""/>
 

	<bean id=""bindyDataformat"" class=""org.apache.camel.dataformat.bindy.csv.BindyCsvDataFormat"">
		<constructor-arg type=""java.lang.String"" value=""org.apache.camel.example.reportincident.model"" />
	</bean>

	<bean id=""csv"" class=""org.apache.camel.example.reportincident.beans.Csv"" />
	<bean id=""webservice"" class=""org.apache.camel.example.reportincident.beans.WebService"" />
	<bean id=""feedback"" class=""org.apache.camel.example.reportincident.beans.Feedback"" />
	
	<!-- webservice endpoint --> 
	<cxf:cxfEndpoint id=""reportIncident""
		address=""http://localhost:8080/camel-example/incident"" wsdlURL=""report_incident.wsdl""
		serviceClass=""org.apache.camel.example.reportincident.ReportIncidentEndpoint""
		xmlns:s=""http://reportincident.example.camel.apache.org"">
	</cxf:cxfEndpoint>
	
	<osgi:reference id=""queuingservice"" interface=""org.apache.camel.Component"" />

	<camelContext trace=""true"" xmlns=""http://camel.apache.org/schema/osgi"">

		<!-- File route -->
		<camel:route>
			<camel:from	uri=""file://d:/temp/data/?move=d:/temp/done/${file:name}"" />
			<camel:unmarshal ref=""bindyDataformat"" />
			<camel:to uri=""bean:csv"" />
			<camel:to uri=""queuingservice:queue:in"" />
		</camel:route>
		
		<!-- -->
		<camel:route>
			<camel:from uri=""queuingservice:queue:in"" />
			<camel:marshal ref=""bindyDataformat"" />
			<camel:to uri=""file://d:/temp/data/queue"" />
		</camel:route>
		 

		<!-- CXF route -->
		<camel:route>
			<camel:from uri=""cxf:bean:reportIncident"" />
			<camel:convertBodyTo type=""org.apache.camel.example.reportincident.InputReportIncident"" />
			<camel:to uri=""bean:webservice"" />
			<camel:transform>
				<camel:method bean=""feedback"" method=""setOk"" />
			</camel:transform>
		</camel:route>

	</camelContext>
</beans>


{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel Spring configuration doen't support to scan the SpringRouteBuilder,CAMEL-1426,12485518,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,05/Mar/09 09:46,31/Jul/09 06:34,14/Mar/19 02:42,06/Mar/09 07:21,1.4.0,1.5.0,1.6.0,,,,,,,,1.6.1,2.0-M1,,,,,,0,"Here is the mail thread which talks about it.
http://www.nabble.com/Error%3A-This-SpringBuilder-is-not-being-used-with-a-SpringCamelContext-and-there-is-no-applicationContext-property-configured-to22326547s22882.html",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-07-31 06:34:12.497,,,no_permission,,,,,,,,,,,,,76860,,,Fri Jul 31 06:34:12 UTC 2009,,,,,,,0|i01icf:,6741,,,,,,,,,"06/Mar/09 07:21;njiang;trunk
 http://svn.apache.org/viewvc?rev=750761&view=rev

1.x branch
 http://svn.apache.org/viewvc?rev=750767&view=rev",31/Jul/09 06:34;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cxf Endpoint String bean properites are not merged,CAMEL-1421,12486220,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,wtam,wtam,wtam,04/Mar/09 20:33,31/Jul/09 06:34,14/Mar/19 02:42,04/Mar/09 20:39,2.0.0,,,,,,,,,,2.0-M1,,,camel-cxf,,,,0,"CxfEndpointBeanDefinitionParser maintains a property map that can be overridden by user provided property map.  They should be merged.
Please see the email thread. 
http://www.nabble.com/camel-cxf---dataformat-tp22332652p22332652.html",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-07-31 06:34:11.618,,,no_permission,,,,,,,,,,,,,76861,,,Fri Jul 31 06:34:11 UTC 2009,,,,,,,0|i01ibb:,6736,,,,,,,,,04/Mar/09 20:39;wtam;Committed revision 750147.,31/Jul/09 06:34;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StreamCache causes to many type converters not possible,CAMEL-1417,12486137,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,davsclaus,davsclaus,davsclaus,04/Mar/09 08:26,31/Jul/09 06:34,14/Mar/19 02:42,04/Mar/09 10:58,1.6.0,,,,,,,,,,1.6.1,2.0-M1,,camel-core,,,,0,"Since StreamCache is default turned on it cause to many convters attempt that fails in MessageSupport.

No type converter available to convert from type: java.lang.Integer to the required type: org.apache.camel.StreamCache with value 1

It hurts performance to much. 

See nabble:
http://www.nabble.com/Performance-and-MessageSupport.getBody-%281.6.0%29-td22291841s22882.html
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76862,,,Fri Jul 31 06:34:11 UTC 2009,,,,,,,0|i01iaf:,6732,,,,,,,,,"04/Mar/09 10:58;davsclaus;Trunk: Committed revision 749956.
1.x: Committed revision 749962.",31/Jul/09 06:34;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Using # notation to reference CXF serviceClass is not working,CAMEL-1416,12484893,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,wtam,wtam,wtam,03/Mar/09 20:35,31/Jul/09 06:34,14/Mar/19 02:42,03/Mar/09 21:49,2.0.0,,,,,,,,,,2.0-M1,,,camel-cxf,,,,0,"See issue reported in mailing list.
http://www.nabble.com/camel-cxf-endpoint---error-%3A-Failed-to-convert-property-value-of-type--...-tp22312601p22312601.html",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-03-04 12:42:49.492,,,no_permission,,,,,,,,,,,,,76863,,,Fri Jul 31 06:34:11 UTC 2009,,,,,,,0|i01ia7:,6731,,,,,,,,,03/Mar/09 21:49;wtam;Committed revision 749772.,04/Mar/09 12:42;cmoulliard;I have retested and everything is ok.,31/Jul/09 06:34;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JMSMessage vanishes attachments,CAMEL-1414,12486117,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,bouil,bouil,03/Mar/09 14:37,31/Jul/09 06:34,14/Mar/19 02:42,03/Mar/09 15:46,2.0.0,,,,,,,,,,1.6.1,2.0-M1,,camel-jms,,,,0,"When using this kind of route
<from uri=""activemq:queue:test""/>
<camel:process ref=""mailProcessor"" />
<to uri=""smtp://localhost:25?to=user@localhost"" />

and trying to enrich the message in the mailProcessor with

exchange.getIn().addAttachment(""attachement.txt"",
                new DataHandler(""Hello world"", ""text/plain""));

The received mail doesn't contains any attachment.

If the input ""from"" is a ""direct"" instead of activemq, it works fine.

Inspecting source code,  MessageSupport.copyFrom(Message that) does
getAttachments().putAll(that.getAttachments());
but the child class JmsMessage doesn't.

",,,,,,,,,,,,,,,,,03/Mar/09 14:47;bouil;JmsMessageCopyAttachments.diff;https://issues.apache.org/jira/secure/attachment/12462846/JmsMessageCopyAttachments.diff,,,,,1.0,,,,,,,,,,,,,,,,,,,2009-03-03 15:46:35.163,,,no_permission,,,,,,,,,,,,,76864,,,Fri Jul 31 06:34:11 UTC 2009,,,Patch Available,,,,0|i01i9r:,6729,,,,,,,,,03/Mar/09 14:47;bouil;Attached patch against components/camel-jms/,"03/Mar/09 15:46;njiang;Applied patch with thanks to Nicolas.
trunk
http://svn.apache.org/viewvc?rev=749628&view=rev
1.x branch
http://svn.apache.org/viewvc?rev=749631&view=rev",31/Jul/09 06:34;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Can not load the QueueBrowserStrategy in OSGI environment,CAMEL-1412,12484734,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,03/Mar/09 09:58,31/Jul/09 06:34,14/Mar/19 02:42,06/Mar/09 07:35,1.6.0,,,,,,,,,,1.6.1,2.0-M1,,camel-jms,,,,0,"Here is the mail thread which discusses about it.
http://www.nabble.com/Classloading-and-OSGI-to22303475.html#a22303475",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-07-31 06:34:11.3,,,no_permission,,,,,,,,,,,,,76865,,,Fri Jul 31 06:34:11 UTC 2009,,,,,,,0|i01i9b:,6727,,,,,,,,,"06/Mar/09 07:35;njiang;trunk
http://svn.apache.org/viewvc?rev=749574&view=rev
1.x
http://svn.apache.org/viewvc?rev=749591&view=rev",31/Jul/09 06:34;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CamelContext - Add ClassResolver to be used when you need to load a class instead of ObjectHelper.loadClass to work in OSGi environments,CAMEL-1411,12484725,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,davsclaus,davsclaus,davsclaus,03/Mar/09 09:24,31/Jul/09 06:34,14/Mar/19 02:42,03/Mar/09 16:59,1.6.0,,,,,,,,,,2.0-M1,,,osgi,,,,1,Add the skeleton and let Willem add the stuff in camel-osgi,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-03-03 13:59:58.145,,,no_permission,,,,,,,,,,,,,76866,,,Fri Jul 31 06:34:11 UTC 2009,,,,,,,0|i01i93:,6726,,,,,,,,,03/Mar/09 10:49;davsclaus;Send mail to dev forum for discussion first.,"03/Mar/09 13:17;davsclaus;This is also related to let ResolverUtil be pluggable so you can let it work in other platforms such as JBoss, WebSphere.

Will add stuff for both strategies to be pluggable.","03/Mar/09 13:59;njiang;Since some ResolverUtil created without any  camel context involved,  we need to find more specify way to do this.","03/Mar/09 14:24;davsclaus;ResolverUtil is used in
camel-spring
camel-osgi
camel-bindy
camel-core

I got the stuff on camel-core working. I know I can get bindy working as well as it can get hold of the camel context when doing marhsall/unmarshal.

camel-spring and camel-osgi should be possible. camel-spring is creating the camel-context.
And camel-osgi should set its osgi aware resolvers instead of the default one when it creates the camel context.

So I do think its doable.",03/Mar/09 14:39;njiang;So we need to add a method in camel context to get a right ResolverUtil now.,"03/Mar/09 14:45;davsclaus;Yes I am adding a new SPI interface for the pluggable resolvers. And having getters/setters on the CamelContext so you can plugin which one you want to use.

And let camel-spring auto discover them in the spring bean registry if any provided so it can be automatic set just by declaring a bean in spring XML","03/Mar/09 16:58;davsclaus;I have committed it to trunk. There is now a getClassResolver() on CamelContext that works as ObjectHelper does.

But it allows us to provide another class resolver for OSGi if needed. ",04/Mar/09 08:31;cmoulliard;Do I have to change something in Camel-bindy code or the modification will be transparent not matter if deployment is done on osgi server or not ?,"04/Mar/09 15:25;hadrian;@Charles, yes, there should be no difference if the deployment is in an osgi container or not.",04/Mar/09 15:29;cmoulliard;I made a test and everything works fine. Thanks ;-),31/Jul/09 06:34;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
File component - better support for absolute path,CAMEL-1408,12486057,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,28/Feb/09 16:36,31/Jul/09 06:34,14/Mar/19 02:42,28/Feb/09 17:38,2.0-M1,,,,,,,,,,2.0-M1,,,camel-core,,,,0,"See nabble:
http://www.nabble.com/File%3A-using-absolute-file-paths-with-moveExpressions-td22253199.html
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76867,,,Fri Jul 31 06:34:11 UTC 2009,,,,,,,0|i01i8f:,6723,,,,,,,,,28/Feb/09 17:38;davsclaus;Committed revision 748891.,31/Jul/09 06:34;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DelayProcessor should handle interrupting while shutting down,CAMEL-1406,12485986,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,28/Feb/09 10:03,31/Jul/09 06:34,14/Mar/19 02:42,28/Feb/09 12:57,1.6.0,,,,,,,,,,1.6.1,2.0-M1,,camel-core,,,,0,"See nabble:
http://www.nabble.com/Re%3A-Delayer%3A-%22Transport-disposed%22-at-JVM-Shutdown-td22202577s22882.html
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76868,,,Fri Jul 31 06:34:10 UTC 2009,,,,,,,0|i01i7z:,6721,,,,,,,,,"28/Feb/09 12:57;davsclaus;Trunk: 748821
1.x: 748841",31/Jul/09 06:34;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Integration tests may stall,CAMEL-1403,12485997,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,gertvanthienen,gertvanthienen,27/Feb/09 08:54,31/Jul/09 06:34,14/Mar/19 02:42,27/Feb/09 17:22,,,,,,,,,,,2.0-M1,,,tests,,,,0,Cfr. http://hudson.zones.apache.org/hudson/job/Camel/35/  -- the build was hanging on the Camel itests,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-02-27 17:22:21.266,,,no_permission,,,,,,,,,,,,,76869,,,Fri Jul 31 06:34:10 UTC 2009,,,,,,,0|i01i7b:,6718,,,,,,,,,"27/Feb/09 17:22;davsclaus;Found the problem in a unit test. Fixed it by adding mocks so it will fail after 20 sec in case of problems.

Committed revision 748606.
",31/Jul/09 06:34;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JaxbDataFormat is not thread-safe,CAMEL-1401,12485365,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,davsclaus,wfrag,wfrag,27/Feb/09 06:31,31/Jul/09 06:34,14/Mar/19 02:42,27/Feb/09 09:12,1.5.0,1.6.0,,,,,,,,,1.6.1,2.0-M1,,camel-jaxb,,,,0,"JaxbDataFormat reuses the Marshaller/Unmarshaller instances.

However, according to the https://jaxb.dev.java.net/faq/index.html#threadSafety, Marshaller/Unmarshaller instances are NOT thread safe, so you can't use them from separate threads at the same time.

Due to this we are getting exceptions from the JAXB implementation (like ClassCastException or ""org.xml.sax.SAXException: FWK005 parse may not be called while parsing.""). Everything works nice with our custom JaxbDataFormat that creates new Unmarshaller/Marshaller instance on every request.

Also, lazy-creating instances (like JAXBContext) in getter methods is not thread-safe as well (because explicit synchronization is required).",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-02-27 07:31:50.408,,,no_permission,,,,,,,,,,,,,76870,,,Fri Jul 31 06:34:10 UTC 2009,,,,,,,0|i01i6v:,6716,,,,,,,,,27/Feb/09 07:31;davsclaus;Thanks for reporting this. I will get it fixed asap.,"27/Feb/09 09:12;davsclaus;Trunk: Committed revision 748436.
1.x: Committed revision 748450.",31/Jul/09 06:34;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Restlet default binding does not acknowledge Fault message in the exchange when creating a response,CAMEL-1400,12485245,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,wtam,wtam,wtam,27/Feb/09 04:53,31/Jul/09 06:34,14/Mar/19 02:42,27/Feb/09 05:00,,,,,,,,,,,1.6.1,2.0-M1,,camel-restlet,,,,0,"More details can be found in this mail thread.
http://www.nabble.com/Restlet-Component-Fault-Handling-tp22173327p22173327.html",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-07-31 06:34:09.99,,,no_permission,,,,,,,,,,,,,76871,,,Fri Jul 31 06:34:09 UTC 2009,,,,,,,0|i01i6n:,6715,,,,,,,,,"27/Feb/09 05:00;wtam;committed to trunk: Committed revision 748392.
committed to 1.x: Committed revision 748393.",31/Jul/09 06:34;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ExchangeHelper should respect ExchangePattern.InOptionalOut ,CAMEL-1384,12485243,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,mwc_tonesoft,mwc_tonesoft,25/Feb/09 17:54,31/Jul/09 06:34,14/Mar/19 02:42,27/Feb/09 10:00,1.6.0,,,,,,,,,,2.0-M1,,,camel-core,,,,0,"The utility method org.apache.camel.util.ExchangeHelper.copyResults() is use by many core classes. However, this method does not properly support MEP InOptionalOut.

Assuming in an InOptionalOut exchange, having no out message means just that -- no out message should be sent, then the following lines in this method
{code}//
            Message out = source.getOut(false);
            if (out != null) {
                result.getOut(true).copyFrom(out);
            } else {
                // no results so lets copy the last input
{code}
should be changed to:
{code}//
            Message out = source.getOut(false);
            if (out != null) {
                result.getOut(true).copyFrom(out);
            } else if (result.getPattern() == ExchangePattern.InOptionalOut) {
                result.setOut(null);
            } else {
                // no results so lets copy the last input
{code}

",ActiveMQ/Camel,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-02-27 10:00:24.485,,,no_permission,,,,,,,,,,,,,76872,,,Fri Jul 31 06:34:09 UTC 2009,,,,,,,0|i01i33:,6699,,,,,,,,,27/Feb/09 10:00;davsclaus;Committed revision 748469.,31/Jul/09 06:34;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Mina configuration is shared between endpoints,CAMEL-1379,12485522,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,huntc@internode.on.net,huntc@internode.on.net,24/Feb/09 22:36,17/Mar/09 14:20,14/Mar/19 02:42,02/Mar/09 02:03,1.5.0,,,,,,,,,,1.6.1,2.0-M1,,camel-mina,,,,0,"Establishing a MINA endpoint with a custom codec, and then establishing another without a custom codec is a problem. The second endpoint inherits the first endpoint's codec.

My recommendation is to not share configuration data between endpoint creation. I recommend that the MINA component instantiate a new configuration for each new endpoint instead of copying the previous configuration.

As a workaround the user can specify ""codec"" as a URI parameter with no value.",All,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-02-25 07:08:11.783,,,no_permission,,,,,,,,,,,,,76873,,,Mon Mar 02 02:03:31 UTC 2009,,,,,,,0|i01i1z:,6694,,,,,,,,,"25/Feb/09 07:08;davsclaus;Please add an unit test verifying the fix, but adding 2 mina consumers:
- with custom codec
- no custom codec, eg textline=true

And backport the fix to 1.x if possible. Mina on trunk is changed a bit over 1.x","25/Feb/09 07:26;njiang;@ Claus

I'm working on the back porting to 1.x branch now and will add the unit test for it.","02/Mar/09 02:03;njiang;1.x banch 
http://svn.apache.org/viewvc?rev=747706&view=rev
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DeadLetterChannel - on redelivery should not call done on callback as will complete the exchange,CAMEL-1367,12484743,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,21/Feb/09 11:45,31/Jul/09 06:34,14/Mar/19 02:42,21/Feb/09 12:18,1.6.0,2.0.0,,,,,,,,,1.6.1,2.0-M1,,camel-core,,,,0,"This bug only surfaces when you use an anonymous inline processor for redelivery as it wont be wrapped in a route with a pipeline etc, that doesnt call the done if it was completed sync

So we havent seen this bug before now:
{code}
                errorHandler(deadLetterChannel(""mock:error"").delayPattern(""0:250;2:500"").maximumRedeliveries(3)
                        .onRedelivery(new Processor() {
                    public void process(Exchange exchange) throws Exception {
                        counter++;
                    }
               }));
{code}

Will resolve in a NPE later.

But this works:
{code}
                errorHandler(deadLetterChannel(""mock:error"")
                        .onRedelivery(new MyRedeliverPrcessor())
{code}
Since the processor is not inlined.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76874,,,Fri Jul 31 06:34:08 UTC 2009,,,,,,,0|i01hzb:,6682,,,,,,,,,21/Feb/09 12:18;davsclaus;Committed revision 746489.,21/Feb/09 12:34;davsclaus;Committed revision 746492. for 1.x branch,31/Jul/09 06:34;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
EndpointMessageListener should respect ExchangePattern,CAMEL-1366,12486565,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,mwc_tonesoft,mwc_tonesoft,20/Feb/09 22:28,31/Jul/09 06:34,14/Mar/19 02:42,27/Feb/09 13:16,1.6.0,,,,,,,,,,2.0-M1,,,camel-jms,,,,0,"In all current releases, org.apache.camel.component.jms.EndpointMessageListener.onMessage() has the following logic (line 90 in 1.6.0 code):
{code}
// send the reply
if (rce == null && body != null && !disableReplyTo) {
    sendReply(replyDestination, message, exchange, body);
}
{code}
This logic should also respect ExchangePattern of the exchange, so I propose a change to:
{code}
// send the reply
if (rce == null && body != null && exchange.isOutCapable()) {
    sendReply(replyDestination, message, exchange, body);
}
{code}
This change allows a processing pattern where the route may change the ExchangePattern using methods like RouteBuilder.inOnly() to switch the MEP at will so that the reply is send at a later time (true asynchronous exchange).  This processing pattern is particularly useful for integrating long running services. For example,
{code}
// Java DSL
from(""activemq:my_queue?exchangePattern=InOnly"").to(""predict_weather://?reply_later=true"");
// or
from(""activemq:my_queue2"").inOnly().to(""predict_weather://?reply_later=true"");
{code}
The flaw of the current logic makes it impossible to do true asynchronous exchange, because 1) it does not respect the ExchangePattern; 2) if property ""disableReplyTo"" is used, the ""org.apache.camel.jms.replyDestination"" property will not be set (see method createExchange in the same file), thus downstream cannot find the reply destination.

The proposed change can also deprecate the disableReplyTo property and put the MEP concept into good use.
",ActiveMQ/Camel,,,,,,,,,,,,,,CAMEL-1405,CAMEL-1384,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-02-21 09:30:05.81,,,no_permission,,,,,,,,,,,,,76875,,,Fri Jul 31 06:34:08 UTC 2009,,,,,,,0|i01hz3:,6681,,,,,,,,,"21/Feb/09 09:30;davsclaus;What if the JMSMessage have a replyTo desintation set?

Then the original caller expects a response. Then we can not just disregard this.
Could you dig into the code and check how this is handled.


","24/Feb/09 17:25;mwc_tonesoft;As I stated above, I want to end the current process chain without sending back a reply.  When the long running services is completed, the reply will be sent then and only then.  This free up the original processing thread immediately.  The original caller still gets the response it expect.

I now realize that the RouteBuilder methods like inOnly(), outOnly(), etc. are useless.  They only effects downstream processors in the route.  It does NOT change the MEP of the endpoint and its behavior.  I will submit a separate bug on this.","25/Feb/09 07:16;davsclaus;@Michael

The last one is not a bug. inOnly, inOut is used to affect/change the MEP on route.

What you are asking for is on the consumer side (jms consumer, the from node) to set it to request only, or request-reply.

However the jms spec has this JMSReplyTo that we should honor. So if someone sends a JMS message to a queue with a JMSReplyTo header then that caller would expect a reply on that destination and thus Camel should honor this and return a reply.

So today you can do what you want:
{code}
from(""activemq:my_queue"").to(""predict_weather://?reply_later=true"");
{code}

If the message sent to my_queue does NOT contain a JMSReplyTo then its a request only.

However what we could consider is to also test for exchange.isOutCapable() and send a ""null"" body if the test fails to signal no/empty reply.","25/Feb/09 17:31;mwc_tonesoft;exchange.isOutCapable() is always true downstream due to the logic in method EndpointMessageListener.createExchange().  That method forces the MEP to be InOut if JMSReplyTo is present in the original request.

If your reason for forcing a reply is to honor the JMS spec, I can't argue otherwise. Please close this bug.

However, I believe the camel.component.jms implementation should offer the option of not replying the original request and give that job to other components or processors downstream.  This does not break the JMS spec, but just a matter of which Camel component is replying.","26/Feb/09 11:01;davsclaus;@Michael

That is actually a good idea. The reply can be done later as you say. 
But isnt that supported already with the disableReplyTo option?

{code}
from(""activemq:my_queue?disableReplyTo=true"").to(""predict_weather://?reply_later=true"");
{code}


","26/Feb/09 17:11;mwc_tonesoft;Actually, the logic in EndpointMessageListener.createExchange() made it impossible. If disableReplyTo is set to true, the ""org.apache.camel.jms.replyDestination"" will not be set.  Downstream processor will have no way to know how to reply.

Since we have talked about it, I want to *reinstate* the original change suggestion *plus* the following. In the createExchange() method, these lines:
{code}//
        if (replyDestination != null && !disableReplyTo) {
            exchange.setProperty(""org.apache.camel.jms.replyDestination"", replyDestination);
            exchange.setPattern(ExchangePattern.InOut);
        }
{code}
should be changed to:
{code}//
        if (replyDestination != null && !disableReplyTo) {
            exchange.setProperty(""org.apache.camel.jms.replyDestination"", replyDestination);
            if (!exchange.getPattern().isOutCapable())
                exchange.setPattern(ExchangePattern.InOut);
        }
{code}
This change will account for ExchangePattern.InOptionalOut. However, it will also require the fix for bug CAMEL-1384 I submitted yesterday for everything to work.  In summary, a route could be defined as:
{code}
from(""activemq:my_queue?exchangePattern=InOptionalOut"").to(""predict_weather://?reply_later=true"");
{code}
Then if and only if the last processor does NOT set a out message, camel.jms will not sent a reply.  It is the downstream processors' responsibility to use property ""org.apache.camel.jms.replyDestination"" to construct and sent the JMS reply message.

The two changes in this bug and CAMEL-1384 are 100% backward compatible, since InOptionalOut has not been considered for camel.jms before.
","26/Feb/09 17:44;davsclaus;Good idea.

I was planning to look into a few tickets for camel-jms related to Camel 2.0. Will look into this one as well, so we can support your use case.",27/Feb/09 10:26;davsclaus;trunk: Committed revision 748476.,27/Feb/09 13:13;davsclaus;James created the stuff in camel-jms to support this,"27/Feb/09 13:16;davsclaus;The reply destination is set as a property on the exchange:
{code}
Destination replyDestination = in.getHeader(JmsConstants.JMS_REPLY_DESTINATION, Destination.class);
{code}

So you have a Destination object you can use to send the reply later.

See unit test JmsSimpleRequestLateReplyTest in camel-jms.",31/Jul/09 06:34;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
no log displayed on the console or file when the command mvn camel:run is launched,CAMEL-1359,12486089,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,cmoulliard,cmoulliard,19/Feb/09 16:03,20/Feb/09 09:55,14/Mar/19 02:42,20/Feb/09 09:55,2.0.0,,,,,,,,,,,,,camel-core,,,,0,"Hi,

I don't see any log displayed on the console or file when I use the command mvn camel:run. The log4j.properties file is present in the target/classes directory :

# The logging properties used during tests..
#
log4j.rootLogger=DEBUG, out

# CONSOLE appender not used by default
log4j.appender.console=org.apache.log4j.ConsoleAppender
log4j.appender.console.layout=org.apache.log4j.PatternLayout
log4j.appender.console.layout.ConversionPattern=%d %-5p %c{1} - %m %n

# File appender
log4j.appender.file=org.apache.log4j.FileAppender
log4j.appender.file.layout=org.apache.log4j.PatternLayout
log4j.appender.file.layout.ConversionPattern=%d %-5p %c{1} - %m %n
log4j.appender.file.file=target/camel-bindy-test.log

# debug loging for Camel
log4j.logger.org.apache.camel.component.bindy=DEBUG
log4j.com.xpectis.camel.bindy.fix=DEBUG

On the console, I only see the information with level INFO

19-fÚvr.-2009 16:59:39 org.apache.camel.component.file.FileEndpoint createConsumer
INFO: Endpoint is configured with noop=true so forcing endpoint to be idempotent as well
19-fÚvr.-2009 16:59:39 org.apache.camel.component.file.FileEndpoint createConsumer
INFO: Using default memory based idempotent repository with cache max size: 1000
19-fÚvr.-2009 16:59:39 org.apache.camel.impl.DefaultCamelContext doStart
INFO: Apache Camel 2.0-SNAPSHOT (CamelContext:camelContext) started
19-fÚvr.-2009 16:59:39 org.apache.camel.util.MainSupport generateDot
INFO: Generating DOT file for routes: D:\Dvlpt\Java\workspace-ganymede\camel-source\bindy\target/site/cameldoc for: org.
apache.camel.spring.SpringCamelContext@56c528 with name: camelContext
19-fÚvr.-2009 16:59:40 org.apache.camel.processor.Logger process
INFO: >>>  --> interceptor(Instrumentation(Pipeline[Dea, Pattern:InOnly, Properties:{CamelFileLockName=D:\Dvlpt\Java\wor
kspace-ganymede\camel-source\bindy\src\data\fix\fix.txt.camelLock, CamelFileLock=sun.nio.ch.FileLockImpl[0:9223372036854
775807 exclusive valid]}, Headers:{CamelFileBatchIndex=0, CamelFileLastModified=Thu Feb 19 14:59:08 CET 2009, CamelFileA
bsolutePath=D:\Dvlpt\Java\workspace-ganymede\camel-source\bindy\src\data\fix\fix.txt, CamelFileLength=18, CamelFileName=
fix.txt, CamelFileCanonicalPath=D:\Dvlpt\Java\workspace-ganymede\camel-source\bindy\src\data\fix\fix.txt, CamelFilePath=
src\data\fix\fix.txt, CamelFileParent=src\data\fix, CamelFileBatchTotal=1}, Body:8=FIX.4.2☺9=1☺35=D
19-fÚvr.-2009 16:59:40 org.apache.camel.processor.Logger process
INFO: >>> interceptor(Instrumentation(Pipeline[Dea --> unmarshal(), Pattern:InOnly, Properties:{CamelFileLockName=D:\Dvl
pt\Java\workspace-ganymede\camel-source\bindy\src\data\fix\fix.txt.camelLock, CamelFileLock=sun.nio.ch.FileLockImpl[0:92
23372036854775807 exclusive valid]}, Headers:{CamelFileBatchIndex=0, CamelFileLastModified=Thu Feb 19 14:59:08 CET 2009,
 CamelFileAbsolutePath=D:\Dvlpt\Java\workspace-ganymede\camel-source\bindy\src\data\fix\fix.txt, CamelFileLength=18, Cam
elFileName=fix.txt, CamelFileCanonicalPath=D:\Dvlpt\Java\workspace-ganymede\camel-source\bindy\src\data\fix\fix.txt, Cam
elFilePath=src\data\fix\fix.txt, CamelFileParent=src\data\fix, CamelFileBatchTotal=1}, Body:8=FIX.4.2☺9=1☺35=D
19-fÚvr.-2009 16:59:40 org.apache.camel.processor.Logger process
INFO: >>> unmarshal()                              --> to(bean:fix), Pattern:InOnly, Properties:{CamelFileLockName=D:\Dv
lpt\Java\workspace-ganymede\camel-source\bindy\src\data\fix\fix.txt.camelLock, CamelFileLock=sun.nio.ch.FileLockImpl[0:9
223372036854775807 exclusive valid]}, Headers:{CamelFileBatchIndex=0, CamelFileLastModified=Thu Feb 19 14:59:08 CET 2009
, CamelFileAbsolutePath=D:\Dvlpt\Java\workspace-ganymede\camel-source\bindy\src\data\fix\fix.txt, CamelFileLength=18, Ca
melFileName=fix.txt, CamelFileCanonicalPath=D:\Dvlpt\Java\workspace-ganymede\camel-source\bindy\src\data\fix\fix.txt, Ca
melFilePath=src\data\fix\fix.txt, CamelFileParent=src\data\fix, CamelFileBatchTotal=1}, Body:[{com.xpectis.camel.bindy.m
odel.fix.Header=8=FIX.4.2, 9=1, 35=D}]

but in my Bean, I have several LOG.DEBUG method

	private static final transient Log LOG = LogFactory.getLog(HandleFixBean.class);

	if (LOG.isDebugEnabled()) {
		LOG.debug(""Count : "" + count + "", Class type : "" + model.get(key).getClass());
	}

",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-02-19 16:41:36.404,,,no_permission,,,,,,,,,,,,,76876,,,Fri Feb 20 09:55:47 UTC 2009,,,,,,,0|i01hxj:,6674,,,,,,,,,"19/Feb/09 16:41;davsclaus;The logging output looks like its from the dreaful Java Util Logging in the JDK.

Looks like log4j.jar is missing in the classpath.
You need to add it in the maven dependency.","20/Feb/09 09:55;cmoulliard;sorry for my mistake.

There was a dependency in the maven file but the scope was defined as Test.",20/Feb/09 09:55;cmoulliard;No issue,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix for RouteTest problem in Camel-Web component,CAMEL-1358,12485918,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,sgargan,sgargan,19/Feb/09 00:41,31/Jul/09 06:34,14/Mar/19 02:42,19/Feb/09 09:40,,,,,,,,,,,2.0-M1,,,camel-web,,,,0,"I've created a patch to fix the marshalling problems in the Camel-web project. It scans the camel model and rest model packages to gather the classes required for the jaxb context. The routing test passes now.

(FYI: there is no listing for this  component in the components view above, under camel-web or camel-rest)",Linux  2.6.27-11-generic ,,,,,,,,,,,,,,,,19/Feb/09 00:42;sgargan;camel-web-patch.txt;https://issues.apache.org/jira/secure/attachment/12462684/camel-web-patch.txt,,,,,1.0,,,,,,,,,,,,,,,,,,,2009-02-19 09:33:05.548,,,no_permission,,,,,,,,,,,,,76877,,,Fri Jul 31 06:34:07 UTC 2009,,,Patch Available,,,,0|i01hxb:,6673,,,,,,,,,"19/Feb/09 09:33;jstrachan;Awesome stuff Stephen! 

Unfortunately I tried fixing this before I saw your patch. You're patch is much more clever :) I just added a constant String to the org.apache.camel.model.Constants class which contains all the packages that contain JAXB classes (which others might find handy anyway - we were already using this String in some test classes) - then appended the package for the camel-web code. I figured this was maybe a bit simpler & faster? (though much less clever & cool! :)

I've applied the other bit of your patch though, to re-enable the failing test - thanks for spotting that I'd forgotten all about it :)

BTW did this part of your patch help?

{code}
-              <version>${jersey-version}</version>
+              <version>1.0.1</version>
{code}

am wondering if there's some issue with 1.0.3-SNAPSHOT?


",19/Feb/09 09:40;jstrachan;this test case is now working (and the other section about getting the RoutesType object is working too) - thanks for your help Stephen!,"19/Feb/09 18:51;sgargan;No worries so James, just glad its working. I changed the artifact version as I was having issues with a missing doclet in SNAPSHOT. I'm assuming you have no such trouble? I'll clear it from my repo and see if that doesn't remedy it.","20/Feb/09 02:13;sgargan;Are sure this test is passing for you now? After a clean checkout and build I'm still seeing the same error. Out of interest, what JDK version are you using, as I've had strange collisions before between maven jaxb dependencies and those bundled with the JDK. I'm running ....

java version ""1.6.0_10""
Java(TM) SE Runtime Environment (build 1.6.0_10-b33)
Java HotSpot(TM) Server VM (build 11.0-b15, mixed mode)

thx

ste
",31/Jul/09 06:34;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"TryProcessor sets ""caught.exception"" header to in message, while there can be out already",CAMEL-1356,12486107,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,romkal,romkal,romkal,18/Feb/09 16:43,17/Mar/09 03:34,14/Mar/19 02:42,25/Feb/09 15:33,1.6.0,,,,,,,,,,2.0-M1,,,camel-core,,,,0,"Error exists in {{org.apache.camel.processor.TryProcessor.handleException(Exchange, Throwable)}}. If your exchange has already out message (that can happen if you set out and then throw an exception. Then the exception caught is set on in message. When it reaches a pipeline it will be lost after first hop.

I believe {{TryProcessor}} should do what Pipelient does - copy *out* to *in* in new exchange if out exists.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-02-25 07:18:47.309,,,no_permission,,,,,,,,,,,,,76878,,,Wed Feb 25 15:33:43 UTC 2009,,,,,,,0|i01hwv:,6671,,,,,,,,,25/Feb/09 07:18;davsclaus;Roman please also change the header key to the new CamelCase syntax for the 2.x commit. You can look at samples on the Exchange interface in 2.0.,"25/Feb/09 15:33;romkal;Used exchange property to store the exception. Property name is Exchange.EXCEPTION_CAUGHT constant.

Committed only to 2.0.0 as it completely changes the behavior of exception handling. If someone had code depending on ""caught.exception"" header it will break.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"HttpHeaderFilterStrategy tries to filter out ""http.requestMethod"" but doesn't",CAMEL-1352,12486181,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,trev,trev,18/Feb/09 02:32,31/Jul/09 06:34,14/Mar/19 02:42,18/Feb/09 03:58,1.6.0,,,,,,,,,,1.6.1,2.0-M1,,camel-http,,,,0,"I actually found this in 1.5.0, but a quick look in ViewVC indicates that it still happens in 1.6.0 and in the trunk.

HttpHeaderFilterStrategy uses String.toLowerCase on ""http.responseCode"" because of the capital C.

It should also use toLowerCase on ""http.requestMethod"" because of the capital M, but it doesn't.

Thus the http.requestMethod header leaks into the HTTP protocol headers.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-02-18 03:58:04.89,,,no_permission,,,,,,,,,,,,,76879,,,Fri Jul 31 06:34:07 UTC 2009,,,,,,,0|i01hvz:,6667,,,,,,,,,"18/Feb/09 03:58;njiang;Patch applied with thank to Trev.
trunk :
http://svn.apache.org/viewvc?rev=745367&view=rev
1.x branch:
http://svn.apache.org/viewvc?rev=745372&view=rev",31/Jul/09 06:34;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
First to commit condition: Error formatting macro: snippet: java.lang.IllegalArgumentException: Invalid url: must begin with a configured prefix. ,CAMEL-1346,12486826,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gertvanthienen,cmoulliard,cmoulliard,17/Feb/09 10:29,21/Nov/09 11:56,14/Mar/19 02:42,17/Feb/09 10:54,,,,,,,,,,,1.6.0,,,website,,,,0,"Hi,

The following error 

Then we are ready to fire the tests. First to commit condition:
Error formatting macro: snippet: java.lang.IllegalArgumentException: Invalid url: must begin with a configured prefix. 

is reported in the page : http://cwiki.apache.org/CAMEL/transactional-client.html",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-02-17 10:54:35.955,,,no_permission,,,,,,,,,,,,,76880,,,Sat Nov 21 11:56:58 UTC 2009,,,,,,,0|i01hun:,6661,,,,,,,,,"17/Feb/09 10:54;gertvanthienen;Fixed, it was just a typo in the url.
The snippet url was starting with *{{acamel/}}* instead of *{{camel/}}*",21/Nov/09 11:56;davsclaus;Closing all 1.6.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FtpConsumerLocalWorkDirectoryTest failed in Windows box,CAMEL-1341,12486150,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,15/Feb/09 03:27,31/Jul/09 06:34,14/Mar/19 02:42,20/Feb/09 05:53,,,,,,,,,,,2.0-M1,,,camel-ftp,,,,0,"org.apache.camel.component.file.remote.FtpConsumerLocalWorkDirectoryTest.testLocalWorkDirectory =================
java.lang.AssertionError: mock:result Received message count. Expected: <1> but was: <0>
	at org.apache.camel.component.mock.MockEndpoint.fail(MockEndpoint.java:791)
	at org.apache.camel.component.mock.MockEndpoint.assertEquals(MockEndpoint.java:773)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:238)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:216)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:149)
	at org.apache.camel.ContextTestSupport.assertMockEndpointsSatisfied(ContextTestSupport.java:274)
	at org.apache.camel.component.file.remote.FtpConsumerLocalWorkDirectoryTest.testLocalWorkDirectory(FtpConsumerLocalWorkDirectoryTest.java:64)
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-07-31 06:34:06.016,,,no_permission,,,,,,,,,,,,,76881,,,Fri Jul 31 06:34:06 UTC 2009,,,,,,,0|i01htj:,6656,,,,,,,,,31/Jul/09 06:34;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Client side (i.e. CxfProducer) Jaxws handler's handleMessage() does not get called,CAMEL-1340,12486827,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,wtam,wtam,wtam,13/Feb/09 23:56,21/Nov/09 11:56,14/Mar/19 02:42,14/Feb/09 00:21,1.5.0,,,,,,,,,,1.6.0,,,camel-cxf,,,,0,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-11-21 11:56:58.114,,,no_permission,,,,,,,,,,,,,76882,,,Sat Nov 21 11:56:58 UTC 2009,,,,,,,0|i01htb:,6655,,,,,,,,,"14/Feb/09 00:21;wtam;camel-1.x branch: Committed revision 744310.

The fix is to make sure we don't propagate HandleChainInvoker in the request context as it can mess up JAXWS handlers.",21/Nov/09 11:56;davsclaus;Closing all 1.6.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cannot use system properties to set ssl options,CAMEL-1334,12486148,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,janstey,janstey,11/Feb/09 15:02,31/Jul/09 06:34,14/Mar/19 02:42,11/Feb/09 17:08,,,,,,,,,,,2.0-M1,,,camel-jetty,,,,0,"A FUSE user was having trouble using system properties to configure jetty to use ssl (jetty.ssl.keystore, jetty.ssl.keypassword, etc). Our wiki states that we can do this so I'm gonna look into whats going on here.

FYI as a workaround I suggested this:

{code:language=xml}
<bean id=""jetty"" class=""org.apache.camel.component.jetty.JettyHttpComponent"">
  <property name=""sslPassword"" value=""password1""/>
  <property name=""sslKeyPassword"" value=""password2""/>
  <property name=""keystore"" value=""/home/brett/workspace/Camel-https/keystore""/>
</bean>  
  
<camelContext id=""camel"" xmlns=""http://camel.apache.org/schema/spring"">
  <route>
    <from uri=""jetty:https://localhost:8443/security""/>
    ...
  </route>
</camelContext>
{code} ",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-07-31 06:34:05.817,,,no_permission,,,,,,,,,,,,,76883,,,Fri Jul 31 06:34:05 UTC 2009,,,,,,,0|i01hrz:,6649,,,,,,,,,11/Feb/09 17:08;janstey;Fixed this up in revision 743402.,31/Jul/09 06:34;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StreamCachingInterceptor can be enabled both as a strategy and as an interceptor -- should only be a strategy,CAMEL-1332,12486852,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,gertvanthienen,gertvanthienen,10/Feb/09 15:37,21/Nov/09 11:57,14/Mar/19 02:42,15/Apr/09 14:26,1.5.0,2.0-M1,,,,,,,,,2.0-M2,,,camel-core,,,,0,"Right now, there are two ways of enabling stream caching:
- explicitly enable it through the DSL
- implicitly enable it through e.g. a Multicast or DeadletterChannel

We should make that a single way of enablement or else document the rationale for the difference properly.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-04-14 13:56:02.418,,,no_permission,,,,,,,,,,,,,76884,,,Sat Nov 21 11:57:55 UTC 2009,,,,,,,0|i01hrj:,6647,,,,,,,,,"14/Apr/09 13:56;davsclaus;Gertv I think it should be just as the Tracer, and it should be enabled by default.

For instance if you do transacted routing (eg not using DeadLetterChannel) and content based router where you do xpath predicates then the payload is gonna be read multiple times. And therefore we need the cache to be default enabled.

We can add a easy switch in the Spring XML to disable it for people really not liking it, eg just like the Tracer.

Then we can remove the special code in DeadLetterChannel, Multicast that enables it.","14/Apr/09 15:55;davsclaus;gertv I got it now.

StreamCache is default enabled and only applied in the start of the route, to not clutter the route with unneeded wrappings.","14/Apr/09 16:36;gertvanthienen;Claus, I don't think enabling it at the start of the route is enough.  If you look at CAMEL-1271, the problem there was an InOut style interaction with an external service in the middle of the route.  If the response from the service is a streaming data type (e.g. a StreamSource), you would need to cache that as well to ensure proper handling. ","15/Apr/09 04:55;davsclaus;@Gert

Ah of course. Thanks a lot. I must have blundered. You can of course enrich or invoke external services that return data that is stream based, that of course also should be re readable using the cache interceptor.","15/Apr/09 09:23;davsclaus;trunk: 765089

There is a issue with TX routes and steam cache I need to sort it. There is a TODO in some unit tests in camel-spring that shows the problem.
I know what to do but I wanted to get this part with pure stream cache committed before I mess with TX error handler.","15/Apr/09 14:25;davsclaus;2nd part done. Now it works nicely with TX routes as well

trunk: 765211

Will keep this fix on trunk only as it will impact 1.6 API and we dont wanna do a 1.7 release.",21/Nov/09 11:57;davsclaus;Closing all 2.0M2 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-cxf Soap-Fault not returned as 500 http error code,CAMEL-1330,12485964,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,10/Feb/09 13:33,31/Jul/09 06:34,14/Mar/19 02:42,11/Feb/09 13:05,1.5.0,,,,,,,,,,1.6.0,2.0-M1,,,,,,0,"Here is the mail thread which talks about it.
http://markmail.org/message/4qvwufpboro3lj34?q=camel-cxf+Soap-Fault+not+returned+as+500+http+error+code",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-07-31 06:34:04.92,,,no_permission,,,,,,,,,,,,,76885,,,Fri Jul 31 06:34:04 UTC 2009,,,,,,,0|i01hr3:,6645,,,,,,,,,"11/Feb/09 13:05;njiang;trunk
http://svn.apache.org/viewvc?rev=743229&view=rev
1.x
http://svn.apache.org/viewvc?rev=743243&view=rev",31/Jul/09 06:34;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Two more NullPointerExceptions when context classloader is null,CAMEL-1325,12486215,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,trev,trev,08/Feb/09 21:33,31/Jul/09 06:34,14/Mar/19 02:42,08/Feb/09 23:10,1.5.0,,,,,,,,,,1.6.0,2.0-M1,,camel-core,,,,0,"When I applied the [CAMEL-1301|http://issues.apache.org/activemq/browse/CAMEL-1301] fix (thanks Claus) I hit two more NullPointerExceptions caused by code that assumes that the context classloader will never be null.

Here's the relevant part of one stack trace:

java.lang.NullPointerException
 at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.findPackages(AnnotationTypeConverterLoader.java:97)
 at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.findPackageNames(AnnotationTypeConverterLoader.java:91)

And the other:

java.lang.NullPointerException
 at org.apache.camel.util.ResolverUtil.getResources(ResolverUtil.java:402)
 at org.apache.camel.util.ResolverUtil.find(ResolverUtil.java:313)
 at org.apache.camel.util.ResolverUtil.find(ResolverUtil.java:290)

A patch is attached.","JRE 1.6.0_11, Commons Daemon 1.0.1, MS Windows XP",,,,,,,,,,,,,,,,08/Feb/09 21:41;trev;camel_1325.patch;https://issues.apache.org/jira/secure/attachment/12462646/camel_1325.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2009-02-08 22:17:28.009,,,no_permission,,,,,,,,,,,,,76886,,,Fri Jul 31 06:34:04 UTC 2009,,,Patch Available,,,,0|i01hpz:,6640,,,,,,,,,08/Feb/09 22:17;hadrian;Patch applied on the camel-1.5 branch.  Trunk will follow soon.  Thanks Trev for discovering this and providing a patch.,08/Feb/09 23:10;hadrian;Patch applied with thanks!,31/Jul/09 06:34;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Classloading leak in camel-jaxb component,CAMEL-1321,12485939,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,davsclaus,hadrian,hadrian,07/Feb/09 01:03,21/Nov/09 11:56,14/Mar/19 02:42,11/Feb/09 12:55,1.5.0,,,,,,,,,,1.6.0,,,camel-jaxb,,,,0,"See message thread:

http://www.nabble.com/Classloading-leak-in-camel-jaxb-component-td21879801s22882.html",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-02-07 07:20:41.808,,,no_permission,,,,,,,,,,,,,76887,,,Sat Nov 21 11:56:56 UTC 2009,,,,,,,0|i01hp3:,6636,,,,,,,,,"07/Feb/09 07:20;davsclaus;I gave it a crude try to do a simple fix.

trunk: 741848
1.x: 741849","11/Feb/09 03:14;njiang;I think Claus did a quick fix for it last week.
@ Claus 
Could you verified it  ?","11/Feb/09 06:49;davsclaus;@Willem

Yeah I have committed a fix and wrote on the user forum to the end user he should try it out. But no response.",11/Feb/09 07:25;davsclaus;I wrote an email to the end user to get his attention,"11/Feb/09 12:55;davsclaus;I do think its resolved. So setting it as fixed for now, so Hadrian can build a 1.6.0 release very soon.",21/Nov/09 11:56;davsclaus;Closing all 1.6.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Restlet component should allow response content type and return code to be set,CAMEL-1312,12485901,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,wtam,wtam,wtam,03/Feb/09 22:58,31/Jul/09 06:34,14/Mar/19 02:42,04/Feb/09 04:18,,,,,,,,,,,1.6.0,2.0-M1,,camel-restlet,,,,0,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-07-31 06:34:03.106,,,no_permission,,,,,,,,,,,,,76888,,,Fri Jul 31 06:34:03 UTC 2009,,,,,,,0|i01hn3:,6627,,,,,,,,,"04/Feb/09 04:18;wtam;2.0 trunk: Committed revision 740596.
1.5 branch: Committed revision 740599.",31/Jul/09 06:34;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StringSource is not serializable,CAMEL-1309,12486212,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,gnt,gnt,03/Feb/09 08:55,31/Jul/09 06:34,14/Mar/19 02:42,03/Feb/09 13:16,,,,,,,,,,,1.6.0,2.0-M1,,camel-core,,,,0,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-02-03 09:19:35.106,,,no_permission,,,,,,,,,,,,,76889,,,Fri Jul 31 06:34:03 UTC 2009,,,,,,,0|i01hmf:,6624,,,,,,,,,"03/Feb/09 09:19;davsclaus;Guillaumn can you elaborate?

StringSource extends Externalizable that implements Serializable

public class org.apache.camel.converter.jaxp.StringSource extends StreamSource implements Externalizable


In StreamCacheConverter there is a SourceCache that extends StringSource and its missing a no-args constructor.
Could that cause trouble? 

{code}
    /*
     * {@link StreamCache} implementation for {@link Source}s
     */
    private class SourceCache extends StringSource implements StreamCache {

        private static final long serialVersionUID = 4147248494104812945L;

        public SourceCache(String text) {
            super(text);
        }

        public void reset() {
            // do nothing here
        }

    }
{code}","03/Feb/09 09:33;gnt;Yes, the problem is that there are possible null fields that throw exceptions when serialized.
The problem is that writeUTF barfs when given a null string.
Here is a patch I was planning to commit asap:

{code}
    public void writeExternal(ObjectOutput out) throws IOException {
        int b = ((text != null ? 0x01 : 0x00) + (encoding != null ? 0x02 : 0x00)
                            + (getPublicId() != null ? 0x04 : 0x00) + (getSystemId() != null ? 0x08 : 0x00));
        out.writeByte(b);
        if ((b & 0x01) != 0) {
            out.writeUTF(text);
        }
        if ((b & 0x02) != 0) {
            out.writeUTF(encoding);
        }
        if ((b & 0x04) != 0) {
            out.writeUTF(getPublicId());
        }
        if ((b & 0x08) != 0) {
            out.writeUTF(getSystemId());
        }
    }

    public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {
        int b = in.readByte();
        if ((b & 0x01) != 0) {
            text = in.readUTF();
        }
        if ((b & 0x02) != 0) {
            encoding = in.readUTF();
        }
        if ((b & 0x04) != 0) {
            setPublicId(in.readUTF());
        }
        if ((b & 0x08) != 0) {
            setSystemId(in.readUTF());
        }
    }
{code}","03/Feb/09 13:16;davsclaus;Trunk: 740295
1.x: 740297",31/Jul/09 06:34;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE in FactoryFinder.findClass when context classloader is null,CAMEL-1301,12485942,12486215,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,trev,trev,29/Jan/09 01:52,31/Jul/09 06:34,14/Mar/19 02:42,30/Jan/09 08:09,1.5.0,,,,,,,,,,1.6.0,2.0-M1,,camel-core,,,,0,"My program works fine, when I run it as a normal Windows app.  But when I try to run it as a service, it throws a ""Could not auto create component: http"" which is caused by a NullPointerException which is caused by Thread.currentThread().getContextClassLoader() returning null.

A quick search found this ActiveMQ bug: http://issues.apache.org/activemq/browse/AMQ-1229 which is essentially identical.  If it's been fixed in ActiveMQ, probably you can just merge the fix from org.apache.activemq.util.FactoryFinder into org.apache.camel.util.FactoryFinder.

Incidentally, the fact that the context classloader is null has also been reported as a bug: http://issues.apache.org/jira/browse/DAEMON-100","JRE 1.6.0_11, Commons Daemon 1.0.1, MS Windows XP",,,,,,,,,,,,,,,,30/Jan/09 04:36;trev;stacktrace_1301.txt;https://issues.apache.org/jira/secure/attachment/12462752/stacktrace_1301.txt,,,,,1.0,,,,,,,,,,,,,,,,,,,2009-01-29 12:02:12.368,,,no_permission,,,,,,,,,,,,,76890,,,Fri Jul 31 06:34:02 UTC 2009,,,,,,,0|i01hkn:,6616,,,,,,,,,"29/Jan/09 12:02;davsclaus;Trev, could you paste the stacktrace please.

FactoryFinder delegates its classloading to ObjectHelper.loadClass and it looks like it handles the null. So a stacktrace is needed.","30/Jan/09 04:36;trev;ObjectHelper.loadClass returns a null, and eventually FactoryFinder.findClass passes that null to ConcurrentHashMap.put, which causes the NPE.  Stacktrace attached.","30/Jan/09 07:29;davsclaus;Trev, thanks for the stacktrace.

I am currently improving Camel to be able to handle the nulls.",31/Jul/09 06:34;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"camel-ftp : uri set on endpoint has stripped all parameters, that is wrong as they should be there as well",CAMEL-1296,12485821,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,27/Jan/09 07:27,31/Jul/09 06:34,14/Mar/19 02:42,27/Jan/09 07:28,1.5.0,,,,,,,,,,1.6.0,2.0-M1,,camel-ftp,,,,0,"See nabble
http://www.nabble.com/Camel-Remote-File-Producer---Recipient-List-Password-Issue-td21678952s22882.html

The bug is introduced with CAMEL-941",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76891,,,Fri Jul 31 06:34:01 UTC 2009,,,,,,,0|i01hjj:,6611,,,,,,,,,"27/Jan/09 07:28;davsclaus;davsclaus:(svn)camel-1x[camel-1.x:736957]/components/camel-ftp$ svn commit --message ""CAMEL-1296: camel-ftp should condigure the endpoint with the full uri (caused by CAMEL-941).""
Sending        camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileComponent.java
Transmitting file data .
Committed revision 738016.",27/Jan/09 08:03;davsclaus;New Revision: 738019 on trunk,31/Jul/09 06:34;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SQLComponent should preserve headers,CAMEL-1292,12486144,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,23/Jan/09 06:02,31/Jul/09 06:34,14/Mar/19 02:42,23/Jan/09 06:07,1.5.0,,,,,,,,,,1.6.0,2.0-M1,,,,,,0,"{code}
                from(""direct:start"")
                    .setHeader(""foo"", constant(""bar""))
                    .to(""sql:select * from projects"")
                    .to(""mock:result"");
{code}
The foo header should be preserved so when its routed to the mock its still there.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76892,,,Fri Jul 31 06:34:01 UTC 2009,,,,,,,0|i01hin:,6607,,,,,,,,,"23/Jan/09 06:07;davsclaus;Trunk: Committed revision 736953.
1.x: Committed revision 736957.",31/Jul/09 06:34;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FTPConsumer - Error in Rename Strategy.,CAMEL-1290,12485823,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,watcher,watcher,22/Jan/09 09:44,31/Jul/09 06:34,14/Mar/19 02:42,03/Feb/09 06:12,2.0.0,,,,,,,,,,2.0-M1,,,camel-ftp,,,,0,"Consuming from a FTP server using the following endpoint cause a StringIndexOutOfBoundsException when using the rename strategy.

<endpoint id=""candidateUrl"" uri=""ftp://username@127.0.0.1?password=password&amp;delete=true&amp;binary=true&amp;delay=10000&amp;readLock=rename""/>

22 Jan 2009 09:36:59,501 ERROR [Thread: 1 org.apache.camel.component.file.remote.RemoteFileComponent
@8f7aa2] FtpConsumer.log(207) | String index out of range: -1
java.lang.StringIndexOutOfBoundsException: String index out of range: -1
        at java.lang.String.substring(String.java:1938)
        at org.apache.camel.component.file.remote.RemoteFile.getParent(RemoteFile.java:139)
        at org.apache.camel.component.file.remote.RemoteFile.changeFileName(RemoteFile.java:65)
        at org.apache.camel.component.file.remote.strategy.RemoteFileRenameExclusiveReadLockStrategy
.acquireExclusiveReadLock(RemoteFileRenameExclusiveReadLockStrategy.java:45)
        at org.apache.camel.component.file.remote.strategy.RemoteFileProcessStrategySupport.begin(Re
moteFileProcessStrategySupport.java:32)
        at org.apache.camel.component.file.remote.RemoteFileConsumer.processExchange(RemoteFileConsu
mer.java:131)
        at org.apache.camel.component.file.remote.RemoteFileConsumer.poll(RemoteFileConsumer.java:98
)
        at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:66)
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
        at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)
        at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(Scheduled
ThreadPoolExecutor.java:98)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(Schedule
dThreadPoolExecutor.java:181)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadP
oolExecutor.java:205)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
        at java.lang.Thread.run(Thread.java:619)


A workaround is to add a folder in the url like the following
<endpoint id=""candidateUrl"" uri=""ftp://username@127.0.0.1//myFolder/?password=password&amp;delete=true&amp;binary=true&amp;delay=10000&amp;readLock=rename""/>
",Windows XP,add test case and resolved issue.;26/Jan/09 01:08;rbuckland;1800,,0,1800,,,0,1800,,,,,,,,26/Jan/09 01:03;rbuckland;CAMEL-1290_Fix_StringIndexOutOfBounds.diff;https://issues.apache.org/jira/secure/attachment/12462819/CAMEL-1290_Fix_StringIndexOutOfBounds.diff,26/Jan/09 01:04;rbuckland;CAMEL-1290_TestToShowFix.diff;https://issues.apache.org/jira/secure/attachment/12462733/CAMEL-1290_TestToShowFix.diff,,,,2.0,,,,,,,,,,,,,,,,,,,2009-01-23 06:32:40.896,,,no_permission,,,,,,,,,,,,,76893,,,Fri Jul 31 06:34:01 UTC 2009,,,,,,,0|i01hi7:,6605,,,,,,,,,"23/Jan/09 06:32;davsclaus;Paddy thank for the bug report.

We are in the works of a big refactor in trunk to allow the file based transports to be much more reuseable between types (a kind of VFS in Camel itself)
So I will refrain from committing to the trunk right now in the FTP/File component.

We need to get this refactor done first, with help from Ramon Buckland that is working on this right now.

",23/Jan/09 06:34;davsclaus;CAMEL-1241 must be done before we commit to FTP/File as CAMEL-1241 is a big refactor and we would like to keep the trunk code aligned with Ramon who is working on CAMEL-1241,"26/Jan/09 01:02;rbuckland;The issue is caused by a call to getParentFile which assumes a / root path exists. Since there doesn't in an ""ftp"" server relative manner, the fix is simply to check first 

The patch and test case are attached. (see following) 
It does not affect Camel 1.5.x


The fix is simply a check on resolving the getParent method in the new GenericFile. This change is applied AFTER CAMEL-1241 - CAMEL-1241_Refactor_S-FTP_to_use_GenericYYY.patch is applied.

OLD
{code}
    public String getParent() {
        return getAbsoluteFileName().substring(0, getAbsoluteFileName().lastIndexOf(""/""));
    }
{code}

NEW
{code}
    public String getParent() {
	if (getAbsoluteFileName().lastIndexOf(""/"") > 0) {
	    return getAbsoluteFileName().substring(0, getAbsoluteFileName().lastIndexOf(""/""));
	} else {
	    return """";
	}
    }
{code}
","26/Jan/09 01:03;rbuckland;This fix can (should) only be applied to CAMEL-1241 after 

CAMEL-1241_Refactor_S-FTP_to_use_GenericYYY.patch

is applied.","26/Jan/09 01:04;rbuckland;This is the test case.

It does NOT depend on 1241, of course, it will fail if the attached patch is not applied.","26/Jan/09 01:08;rbuckland;Claus, please apply patches as required.

In order 
1. (apply CAMEL-1241 - CAMEL-1241_Refactor_S-FTP_to_use_GenericYYY.patch ) 
2. two attached file (patch and test case)","26/Jan/09 12:45;davsclaus;@Paddy

The fix should have been committed just recently.

But the fix is part of a big refactor of the, underlying file transport in Camel, that the FTP now sits on top off. So please test it a bit throughly as there might have slipped a bug in the refactor. Its still an ongoing refactor, but the FTP part should be mostly done.


","26/Jan/09 15:56;watcher;Claus
I should have more time to check this tomorrow. ","29/Jan/09 09:54;watcher;Its working now :-) 

I be able to test the new build more throughly next week and I'll report any problems I might find.
Sorry about the delay. 

-P",31/Jul/09 06:34;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Restlet binding does not properly insert/extract Restlet message.,CAMEL-1284,12485770,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,wtam,wtam,wtam,22/Jan/09 04:50,31/Jul/09 06:34,14/Mar/19 02:42,23/Jan/09 02:44,,,,,,,,,,,1.6.0,2.0-M1,,,,,,0,"This issue is described in this email thread.
http://www.nabble.com/restlet-usage-td21572086s22882.html#a21592556
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-07-31 06:34:00.886,,,no_permission,,,,,,,,,,,,,76894,,,Fri Jul 31 06:34:00 UTC 2009,,,,,,,0|i01hgv:,6599,,,,,,,,,"23/Jan/09 02:44;wtam;1.x: Committed revision 736894
2.x: Committed revision 736562",31/Jul/09 06:34;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SQL component doesn't handle wrong number of parameters,CAMEL-1283,12485773,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,romkal,romkal,romkal,21/Jan/09 23:41,31/Jul/09 06:34,14/Mar/19 02:42,22/Jan/09 15:39,1.5.0,,,,,,,,,,2.0-M1,,,,,,,0,"NPE thrown when null body sent to to SQL endpoint. When to many parameters are set then exception is thrown but nothing wrong happens when to less parameters are set.

It should be possible to set null as a body as there might be parameterless statement to execute. There should be consistent Exception thrown when wrong number of parameters is set.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-07-31 06:34:00.864,,,no_permission,,,,,,,,,,,,,76895,,,Fri Jul 31 06:34:00 UTC 2009,,,,,,,0|i01hgn:,6598,,,,,,,,,22/Jan/09 15:39;romkal;Patch commited,31/Jul/09 06:34;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
VelocityEndpoint reads velocity templates using default encoding - add parameter to set encoding,CAMEL-1278,12485706,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,dgolda,dgolda,20/Jan/09 16:59,31/Jul/09 06:34,14/Mar/19 02:42,20/Jan/09 17:49,1.5.0,,,,,,,,,,1.6.0,2.0-M1,,camel-velocity,,,,0,"VelocityEndpoints reads templates using default encoding, so I cannot get correct content while running on Windows and Linux.

The reason is that there is used InputStreamReader constructor without encoding parameter.

I've added simple support for setting encoding - see attached patch",,,,,,,,,,,,,,,,,20/Jan/09 17:00;dgolda;VelocityEndpoint.diff;https://issues.apache.org/jira/secure/attachment/12462802/VelocityEndpoint.diff,,,,,1.0,,,,,,,,,,,,,,,,,,,2009-01-20 17:46:27.314,,,no_permission,,,,,,,,,,,,,76896,,,Fri Jul 31 06:34:00 UTC 2009,,,Patch Available,,,,0|i01hfj:,6593,,,,,,,,,20/Jan/09 17:00;dgolda;Patch to VelocityEndpoint.java,20/Jan/09 17:46;janstey;I've committed your changes in revision 736046. Thanks for the contribution Damian! I also added a little unit test for this new option. ,20/Jan/09 17:49;janstey;Updated the wiki here as well http://cwiki.apache.org/confluence/display/CAMEL/Velocity,20/Jan/09 17:49;davsclaus;Remember to update the wiki,"20/Jan/09 18:01;janstey;Haha! Beat you to it, wiki police ;)","20/Jan/09 21:20;dgolda;Jonathan, thank you for very quick action. I'm impressed.",31/Jul/09 06:34;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Apache camel example reportincident dependency removed from pom.xml,CAMEL-1277,12484866,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,cmoulliard,cmoulliard,20/Jan/09 12:31,07/Feb/10 09:54,14/Mar/19 02:42,20/Jan/09 12:56,2.0.0,,,,,,,,,,,,,,,,,0,"Hi,

Someone has removed the following dependency from the camel pom.xml file :

          <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-example-reportincident</artifactId>
              <version>${project.version}</version>
    </dependency>

",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76897,,,Tue Jan 20 12:52:35 UTC 2009,,,,,,,0|i01hfb:,6592,,,,,,,,,"20/Jan/09 12:52;cmoulliard;Here is the error generated when a mvn command is launched :

D:\Dvlpt\Java\workspace-ganymede\camel-source>mvn help:describe -Dplugin=help
[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[ERROR] FATAL ERROR
[INFO] ------------------------------------------------------------------------
[INFO] Error building POM (may not be this project's POM).


Project ID: org.apache.camel:apache-camel
POM Location: D:\Dvlpt\Java\workspace-ganymede\camel-source\apache-camel\pom.xml
Validation Messages:

    [0]  'dependencies.dependency.version' is missing for org.apache.camel:camel-example-reportincident


Reason: Failed to validate POM for project org.apache.camel:apache-camel at D:\Dvlpt\Java\workspace-ganymede\camel-sourc
e\apache-camel\pom.xml


[INFO] ------------------------------------------------------------------------
[INFO] Trace
org.apache.maven.reactor.MavenExecutionException: Failed to validate POM for project org.apache.camel:apache-camel at D:
\Dvlpt\Java\workspace-ganymede\camel-source\apache-camel\pom.xml
        at org.apache.maven.DefaultMaven.getProjects(DefaultMaven.java:378)
        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:292)
        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:129)
        at org.apache.maven.cli.MavenCli.main(MavenCli.java:287)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)
        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)
        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)
        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)
        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)
Caused by: org.apache.maven.project.InvalidProjectModelException: Failed to validate POM for project org.apache.camel:ap
ache-camel at D:\Dvlpt\Java\workspace-ganymede\camel-source\apache-camel\pom.xml
        at org.apache.maven.project.DefaultMavenProjectBuilder.processProjectLogic(DefaultMavenProjectBuilder.java:1108)

        at org.apache.maven.project.DefaultMavenProjectBuilder.buildInternal(DefaultMavenProjectBuilder.java:878)
        at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromSourceFileInternal(DefaultMavenProjectBuilder.ja
va:506)
        at org.apache.maven.project.DefaultMavenProjectBuilder.build(DefaultMavenProjectBuilder.java:198)
        at org.apache.maven.DefaultMaven.getProject(DefaultMaven.java:583)
        at org.apache.maven.DefaultMaven.collectProjects(DefaultMaven.java:461)
        at org.apache.maven.DefaultMaven.collectProjects(DefaultMaven.java:534)
        at org.apache.maven.DefaultMaven.getProjects(DefaultMaven.java:365)
        ... 11 more
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 20 seconds
[INFO] Finished at: Tue Jan 20 13:51:23 CET 2009
[INFO] Final Memory: 18M/33M
[INFO] ------------------------------------------------------------------------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Can't get the camelcontext been enjected into CamelConduit and CamelDestination,CAMEL-1275,12485615,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,20/Jan/09 03:35,31/Jul/09 06:34,14/Mar/19 02:42,21/Jan/09 03:07,,,,,,,,,,,1.6.0,2.0-M1,,camel-cxf,,,,0,Recent  change of CAMEL-1238  introduced this issue. An unit test should be added to track this issue.,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-07-31 06:34:00.067,,,no_permission,,,,,,,,,,,,,76898,,,Fri Jul 31 06:34:00 UTC 2009,,,,,,,0|i01hev:,6590,,,,,,,,,21/Jan/09 03:07;njiang;Merged the change of camel 1.5.1 back to trunk.,31/Jul/09 06:34;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jetty HTTP SelectChannelConnector is not closed when CamelContext is stopped,CAMEL-1274,12486183,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,gertvanthienen,gertvanthienen,gertvanthienen,19/Jan/09 22:02,31/Jul/09 06:34,14/Mar/19 02:42,19/Jan/09 22:49,1.5.0,,,,,,,,,,1.6.0,2.0-M1,,camel-jetty,,,,0,"When the camel-jetty component is shut down, it leaves Jetty SelectChannelConnector instances active.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-07-31 06:34:00.019,,,no_permission,,,,,,,,,,,,,76899,,,Fri Jul 31 06:34:00 UTC 2009,,,,,,,0|i01hen:,6589,,,,,,,,,"19/Jan/09 22:49;gertvanthienen;Fixed for trunk in http://svn.eu.apache.org/viewvc?view=rev&revision=735847
Backported to 1.x branch in http://svn.eu.apache.org/viewvc?view=rev&revision=735862",31/Jul/09 06:34;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Can only interact with servicemix-http if logging is at DEBUG,CAMEL-1271,12485754,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gertvanthienen,darren.davison,darren.davison,18/Jan/09 20:30,31/Jul/09 06:33,14/Mar/19 02:42,10/Feb/09 15:39,1.5.0,,,,,,,,,,1.6.0,2.0-M1,,camel-jbi,,,,0,"Given the following camel DSL:

from(""activemq:queue.testJms.in"")                                              
    .to(""jbi:service:urn:oms:testHttp?mep=in-out"")                           
    .to(""activemq:queue.testJms.out""); 


and the following xbean.xml for the smx (3.3) SU:

<http:endpoint                                                                            
    service=""oms:testHttp""                                                   
    endpoint=""testHttp""                                                       
    role=""provider""                                                                       
    locationURI=""http://localhost:8080/testP1"">                                           
</http:endpoint>   


then Camel operates correctly (or at least as desired) only if DEBUG logging is enabled in the org.apache.servicemix.http package.  This seems to be because a DOMSource is returned (which Camel can convert).  If the log level is reduced (say to WARN) then a StreamSource object is returned instead which Camel appears unable to convert.  This results in stack traces such as:

ERROR - DeadLetterChannel              - Failed delivery for exchangeId:                  
ID-davisond-laptop/53380-1232099798317/0-0. On delivery attempt: 0                        
caught: org.apache.camel.RuntimeCamelException:                                           
javax.xml.transform.TransformerException: java.io.IOException: Attempted                  
read on closed stream.                                                                    
org.apache.camel.RuntimeCamelException:                                                   
javax.xml.transform.TransformerException: java.io.IOException: Attempted                  
read on closed stream.                                                                    
        at                                                                                
org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:441)                    
        at                                                                                
org.apache.camel.impl.converter.InstanceMethodTypeConverter.convertTo(InstanceMethodTypeCo
+nverter.java:57) ",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-01-19 02:47:16.919,,,no_permission,,,,,,,,,,,,,76900,,,Fri Jul 31 06:33:59 UTC 2009,,,,,,,0|i01hdz:,6586,,,,,,,,,"19/Jan/09 02:47;njiang;You need to cache the stream when routing the message in camel. Because Camel will cache the stream when it's logging level is set to be DEBUG. 
Here is the code snippet of enable the SteamCaching interceptor in your router.

{code}
 //Stream caching for a single route...
 from(""direct:a"").streamCaching().to(""mock:a"");

 //... or for all the following routes in this builder
 streamCaching();
 from(""direct:b"").to(""mock:b"");
{code}",19/Jan/09 06:13;davsclaus;I updated the JBI component page with a hint about this streamCaching,19/Jan/09 07:40;gertvanthienen;Shouldn't the stream caching be done automatically now since CAMEL-520 got resolved?,"19/Jan/09 07:49;davsclaus;@Darren

Which version of Camel are you using? As Gert pointed out the stream caching should have been default enabled in Camel 1.5.0.","19/Jan/09 08:03;gertvanthienen;Right, sorry about the confusion!  servicemix-camel 2008.01 does use Camel 1.4.0 instead of Camel 1.5.0 so the call to streamCaching() is necessary.","19/Jan/09 09:21;davisond;sorry, I should have mentioned.. we're using Camel 1.5.0.  As we needed unrelated fixes made since 1.4, we re-packaged the servicemix-camel SU to use 1.5.  So I guess this should work but still doesn't.

We had already tried several variants of the streamCaching() DSL snippet to no avail anyway.  Here are the results with the 2 you mentioned:

{code}from(""activemq:queue.testJms.in"")
  .streamCaching()
  .to(""jbi:service:urn:oms:testHttp?mep=in-out"")
  .to(""activemq:queue.testJms.out""); {code}

in the above change, no excpetions or log messages  from servicemix.  The target webservice is called and responds correctly.  The .in queue shows messages enqueued and dequeued correctly, the .out queue is empty (no message ever appears on it).  With this change, we simply lose our response messages completely and without apparent warning.


{code}streamCaching();
from(""activemq:queue.testJms.in"")
  .to(""jbi:service:urn:oms:testHttp?mep=in-out"")
  .to(""activemq:queue.testJms.out""); {code}

with this change, I see exactly the same results as above.

So even with Camel 1.5, the explicit streamCaching() *does* appear to cause different behaviour.  But it looks worse to me :(

I'm not convinced by the unit tests in this instance since they don't involve HTTP connections that are likely to be closed before the StreamSource that wraps them has been read.  I may be wrong though.


<joke>
Should I turn the logging up to see what's happening? :)
</joke>
","19/Jan/09 09:29;davisond;for completeness, I've also tried amending the DSL as follows with no difference in results already noted:
{code}from(""activemq:queue.testJms.in"")
  .streamCaching()  // or without..
  .to(""jbi:service:urn:oms:testHttp?mep=in-out"")
  .convertBodyTo(String.class)
  .to(""activemq:queue.testJms.out"");{code}

Cheers,","19/Jan/09 09:51;davsclaus;Can you try the TRACE to see if that helps logging what is going on?

http://activemq.apache.org/camel/tracer.html
","19/Jan/09 09:52;davsclaus;I guess the issue is in SMX http since it returns different objects depending on logging level.

It should return a payload that Camel at least once can read.","19/Jan/09 09:59;davsclaus;@Darren

Can you show us some more of the stacktrace please?","19/Jan/09 10:00;davsclaus;Gertv will look at this from SMX and Camel point of view, as he have a hand in both teams","19/Jan/09 10:18;davisond;Complete output when tracing is enabled and logging (for org.apache.camel only) is set to DEBUG is shown below.  The trace doesn't really seem to help much, but the last 2 log messages at DEBUG look like they should be re-configured to ERROR (or at least WARN).  

Seems to confirm the original issue - Camel cannot deal with a StreamSource.  Whether it should be able to or not might be a different issue.

Cheers,


DEBUG - EndpointMessageListener        - Endpoint[activemq:queue.testJms.in] consumer receiving JMS message: ActiveMQTextMessage {commandId = 5, responseRequired = false, messageId = ID:davisond-laptop-57670-1232359825629-2:37:1:1:1, originalDestination = null, originalTransactionId = null, producerId = ID:davisond-laptop-57670-1232359825629-2:37:1:1, destination = queue://queue.testJms.in, transactionId = null, expiration = 0, timestamp = 1232359865722, arrival = 0, brokerInTime = 1232359865723, brokerOutTime = 1232359865761, correlationId = null, replyTo = null, persistent = false, type = null, priority = 0, groupID = null, groupSequence = 0, targetConsumerId = null, compressed = false, userID = null, content = org.apache.activemq.util.ByteSequence@17c323d, marshalledProperties = null, dataStructure = null, redeliveryCounter = 0, size = 0, properties = null, readOnlyProperties = true, readOnlyBody = true, droppable = false, text = null}
INFO  - TraceInterceptor               - ID-davisond-laptop/46122-1232359835725/2-0 -> to(service:urn:oms:testHttp?mep=in-out) , Pattern:InOnly , Headers:{JMSXGroupID=null, JMSCorrelationID=null, JMSType=null, JMSExpiration=0, JMSMessageID=ID:davisond-laptop-57670-1232359825629-2:37:1:1:1, JMSRedelivered=false, JMSDeliveryMode=1, JMSPriority=0, JMSReplyTo=null, JMSTimestamp=1232359865722, JMSDestination=queue://queue.testJms.in} , BodyType:String , Body:<in><msg>foo4</msg></in> 
DEBUG - Pipeline                       - Message exchange has failed so breaking out of pipeline: Exchange[JmsMessage: ActiveMQTextMessage {commandId = 5, responseRequired = false, messageId = ID:davisond-laptop-57670-1232359825629-2:37:1:1:1, originalDestination = null, originalTransactionId = null, producerId = ID:davisond-laptop-57670-1232359825629-2:37:1:1, destination = queue://queue.testJms.in, transactionId = null, expiration = 0, timestamp = 1232359865722, arrival = 0, brokerInTime = 1232359865723, brokerOutTime = 1232359865761, correlationId = null, replyTo = null, persistent = false, type = null, priority = 0, groupID = null, groupSequence = 0, targetConsumerId = null, compressed = false, userID = null, content = null, marshalledProperties = null, dataStructure = null, redeliveryCounter = 0, size = 0, properties = null, readOnlyProperties = true, readOnlyBody = true, droppable = false, text = <in><msg>foo4</msg></in>}] exception: null fault: JmsMessage: javax.xml.transform.stream.StreamSource@19aed36
DEBUG - EndpointMessageListener        - Cannot send reply message as there is no replyDestination for: JmsMessage: javax.xml.transform.stream.StreamSource@19aed36
","19/Jan/09 10:21;davisond;hmm.. just noticed something from the trace output that I missed.. is this relevant?

INFO - TraceInterceptor - ID-davisond-laptop/46122-1232359835725/2-0 -> to(service:urn:oms:testHttp?*mep=in-out*) , *Pattern:InOnly*","28/Jan/09 12:22;davisond;tried with the 2008.2 snapshot as requested; now getting what looks like an odd low level parsing issue:

{noformat}org.apache.camel.RuntimeCamelException: javax.xml.transform.TransformerException: java.io.IOException: 
CRLF expected at end of chunk: 48/13{noformat}

I can send you the log file for the whole in/out route if you like, but it has some proprietary info in there that I don't want to post here.","03/Feb/09 10:18;gertvanthienen;Fixed for trunk in http://svn.eu.apache.org/viewvc?view=rev&revision=740251
and backported to branch in http://svn.eu.apache.org/viewvc?view=rev&revision=740263

Darren, could you give it another go with a local build of both Camel and servicemix-camel?
","03/Feb/09 11:34;davsclaus;Gertv there is a bug with disabling the stream cache

noStreamCaching();
Can not disable it

So you get String wrapped as a: org.apache.camel.converter.stream.StreamCacheConverter$SourceCache

","03/Feb/09 12:47;gertvanthienen;Claus:  Do we want noStreamCaching() to disable stream caching for the DeadLetterChannel?  Sending a stream through the DeadLetterChannel without caching it won't work anyhow.

I agree we should at least make the streamCaching options behave the same in the DLC and in the RouteBuilder though -- right now the first one uses an InterceptStrategy and the latter one uses a plain Interceptor.
",03/Feb/09 14:06;davsclaus;Thanks to gertv we got the camel-jaxb fixed,10/Feb/09 15:39;gertvanthienen;This should be fixed now -- there are a few follow-up issues (CAMEL-1310 and CAMEL-1332),31/Jul/09 06:33;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Starting Camel using Main from camel:run or Main.class - countdown latch is hanging,CAMEL-1270,12485269,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,18/Jan/09 09:56,31/Jul/09 06:33,14/Mar/19 02:42,18/Jan/09 10:06,1.5.0,,,,,,,,,,1.6.0,2.0-M1,,camel-core,camel-spring,,,0,"The countdown latch in MainSupport is not completed when Main is stopping.

Then we have a hanging thread. Can bee seen using ctrl + \",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76901,,,Fri Jul 31 06:33:59 UTC 2009,,,,,,,0|i01hdr:,6585,,,,,,,,,"18/Jan/09 10:06;davsclaus;trunk: 735421
1.x: 735424",31/Jul/09 06:33;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MailConsumer throws exception on line 113,CAMEL-1263,12485686,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,mwc_tonesoft,mwc_tonesoft,15/Jan/09 19:12,31/Jul/09 06:33,14/Mar/19 02:42,18/Jan/09 10:21,1.5.0,,,,,,,,,,1.6.0,2.0-M1,,camel-mail,,,,0,"When the mail box is empty (no mail available), MailConsumer throws the following exception on line 113.  It happens for both pop3 and imap protocols (Java Mail API 1.4.1 Sun implementation).  

Regardless the cause, closing the folder should be enclosed in a try/catch block and ignore any exception thrown, because it is no longer interesting to the client application.  It can surely log the exception, but shouldn't throw it.
{code}
[java] javax.mail.MessagingException: A6 NO Mailbox is locked by POP server;
[java]   nested exception is:
[java]     com.sun.mail.iap.CommandFailedException: A6 NO Mailbox is locked by POP server
[java]     at com.sun.mail.imap.IMAPFolder.close(IMAPFolder.java:1128)
[java]     at com.sun.mail.imap.IMAPFolder.close(IMAPFolder.java:1055)
[java]     at org.apache.camel.component.mail.MailConsumer.poll(MailConsumer.java:113)
[java]     at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:66)
[java]     at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
[java]     at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)
[java]     at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)
[java]     at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98)
[java]     at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:181)
[java]     at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:205)
[java]     at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
[java]     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
[java]     at java.lang.Thread.run(Thread.java:619)
[java] Caused by: com.sun.mail.iap.CommandFailedException: A6 NO Mailbox is locked by POP server
[java]     at com.sun.mail.iap.Protocol.handleResult(Protocol.java:341)
[java]     at com.sun.mail.iap.Protocol.simpleCommand(Protocol.java:363)
[java]     at com.sun.mail.imap.protocol.IMAPProtocol.close(IMAPProtocol.java:976)
[java]     at com.sun.mail.imap.IMAPFolder.close(IMAPFolder.java:1125)
[java]     ... 12 more
{code}",Camel,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-01-15 19:59:37.376,,,no_permission,,,,,,,,,,,,,76902,,,Fri Jul 31 06:33:59 UTC 2009,,,,,,,0|i01hc7:,6578,,,,,,,,,15/Jan/09 19:19;mwc_tonesoft;Note that there was no exception thrown inside the matching try block above line 113 of MailConsumer.  The processing of the mail (empty) folder was successful.,"15/Jan/09 19:31;mwc_tonesoft;It turns out regardless whether there is mail in the mailbox or not, the folder.close(true) line always throw this exception.","15/Jan/09 19:59;davsclaus;Do you know which Mail Server you connect to?

This is the first time we hear about this. ","16/Jan/09 17:01;mwc_tonesoft;The mail server is running on Fedora Core 4, version cyrus_imapd-2.2.12-6.fc4.","18/Jan/09 10:21;davsclaus;Thanks for reporting.

We now catch the MessagingException and log a debug message that closing the folder was not possible and ignore it.",31/Jul/09 06:33;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
persistence.xml should not be in camel-jpa jar,CAMEL-1257,12485872,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,14/Jan/09 15:44,31/Jul/09 06:33,14/Mar/19 02:42,14/Jan/09 16:18,1.5.0,,,,,,,,,,1.6.0,2.0-M1,,,,,,0,src/main/resources/persistence.xml should be deleted from camel-jpa.jar,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76903,,,Fri Jul 31 06:33:58 UTC 2009,,,,,,,0|i01hav:,6572,,,,,,,,,31/Jul/09 06:33;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MailConfiguration injected into MailComponent by Spring is ignored.,CAMEL-1249,12485496,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,mwc_tonesoft,mwc_tonesoft,12/Jan/09 18:06,31/Jul/09 06:33,14/Mar/19 02:42,13/Jan/09 09:05,1.4.0,1.5.0,,,,,,,,,1.6.0,2.0-M1,,camel-mail,,,,0,"A Camel org.apache.camel.component.mail.MailComponent is configured via Spring as:
{code}
<bean id=""mailbox"" class=""org.apache.camel.component.mail.MailComponent"">
  <property name=""configuration"">
    <bean id=""mailbox_config"" class=""org.apache.camel.component.mail.MailConfiguration"">
      <property name=""protocol""><value>pop3</value></property>
      <property name=""host""><value>mail.abc.com</value></property>
      <property name=""username""><value>test</value></property>
      <property name=""password""><value>test</value></property>
    </bean>
  </property>
</bean>
{code}
It is silly to use the hard-coded URI in Java code to create a mail endpoint. Instead I want to use the above method to specify everything (I mean everything) about how to access a mail server (send or receive) in different deployments.  Up to Camel 1.5, line 73 of MailComponent.createEndpoint() ignored the MailConfiguration variable MailComponent.configuration and created a new one to parse the URI. This defeats the Spring injection above, which is recommended by Camel's own User's Guide.

Line 73 and 74 should be changed from:
{quote}
        MailConfiguration config = new MailConfiguration();
        config.configure(url);
{quote}
to
{quote}
        configuration.configure(url);
{quote}
In addition, if the uri parameter equals the component name, createEndpoint() should not parse it at all, so that the following route builder will create the mail endpoint solely according to the Spring injection of MailConfiguration:
{quote}
    from(""mailbox"").to(""my_queue"");
{quote}",Camel,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-01-13 06:53:22.571,,,no_permission,,,,,,,,,,,,,76904,,,Fri Jul 31 06:33:57 UTC 2009,,,,,,,0|i01h93:,6564,,,,,,,,,"13/Jan/09 06:53;davsclaus;Thanks for reporting this. I have fixed it.

About the last one using your own component. You need to set the mail configuration to ignore scheme
   <property name=""ignoreUriScheme""><value>true</value></property>

And then ""mailbox"" needs to be added as a Component. That is easy from Java, but in Spring there might be some component XML tag to declare this.
If not then I think we need it.

*updated* with the correct property name","13/Jan/09 18:01;mwc_tonesoft;Claus,

Please correct your comment for this bug that mentioned the wrong 
property name. The correct name according to your source code change is 
""ignoreUriScheme"", not ""ignoreSchemeUri"".  It may cause confusion for 
others reading this fix.

Thank you

--Michael


","14/Jan/09 05:03;davsclaus;Thanks Michael, I have updated it",31/Jul/09 06:33;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SFTP : Polling - Cannot list directory Error,CAMEL-1247,12486112,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,watcher,watcher,12/Jan/09 12:18,31/Jul/09 06:33,14/Mar/19 02:42,14/Jan/09 05:05,2.0.0,,,,,,,,,,2.0-M1,,,camel-ftp,,,,0,"http://www.nabble.com/SFTP-%3A-Polling---Cannot-list-directory-to21413159s22882.html


",Windows Xp,,,,,,,,,,,,,,,,13/Jan/09 10:33;watcher;example.log;https://issues.apache.org/jira/secure/attachment/12462720/example.log,13/Jan/09 09:34;watcher;example.log;https://issues.apache.org/jira/secure/attachment/12462695/example.log,,,,2.0,,,,,,,,,,,,,,,,,,,2009-01-13 09:40:49.527,,,no_permission,,,,,,,,,,,,,76905,,,Fri Jul 31 06:33:57 UTC 2009,,,,,,,0|i01h8n:,6562,,,,,,,,,"13/Jan/09 09:34;watcher;Here's the log file for the following route

<endpoint id=""printerSFTP"" uri=""sftp://pdaly@127.0.0.1?password=password&amp;binary=true&amp;expression=done/${file:name}&amp;recursive=true&amp;delay=10000&amp;initialDelay=2000&amp;readLock=rename&amp;knownHostsFile=c://known_host&amp;filter=#myAntFilter""/>","13/Jan/09 09:40;davsclaus;Thanks for the log. Are you sure its using TRACE. I cant see any TRACE log lines in the file?


",13/Jan/09 10:15;davsclaus;I think I got it now. Running full unit test with the fix,"13/Jan/09 10:33;watcher;Sorry about that, here you go.","13/Jan/09 11:03;davsclaus;@Paddy

I have commited a fix to camel trunk. Would be lovely if you could test it.

You can wait X hours or how long it takes for Apache INFRA to build and deploy a new SNAPSHOT of Camel 2.0 or you can grab the source and build a camel-ftp jar yourself.

The fix is in r734095",13/Jan/09 11:24;davsclaus;This bug does not exists in 1.x,"13/Jan/09 12:21;watcher;Claus 
The StringIndexOutOfBoundsException is fixed however I'm still getting an error.

Here is my directory structure.
    c:/folder/printer
                              /test1
                                      /incoming
                                      /outgoing
                              /test2
                                      /incoming
                                      /outgoing

I've set the user pdaly@127.0.0.1 to the root folder of c:/folder/printer

Here's the log from the sftp server


000000001358 2009-01-13 12:11:02.131690 UTC WinSSHD 5.04 [111] Info
  Session thread 1103 for Windows account 'pdaly' from 127.0.0.1:3431:
  Session channel 1: FlowSfsWin: Closed directory 'C:\folder\printer\test1'. Registered 1 successful
  operation. Listed 3 entries in 1 operation.

000000001359 2009-01-13 12:11:02.132952 UTC WinSSHD 5.04 [118] Info
  Session thread 1103 for Windows account 'pdaly' from 127.0.0.1:3431:
  Session channel 1: FlowSfsWin: Reading attributes for 'C:\folder\printer\incoming' (follow symlink)
  failed with NoSuchFile. GetFileAttributes() failed: Windows error 2: The system cannot find the file
  specified.

Is there something wrong with my filter

	<bean id=""myAntFilter"" class=""org.apache.camel.component.file.remote.AntPathMatcherRemoteFileFilter"">	   
	    <property name=""includes"" value=""**/incoming/*""/>
	    <property name=""excludes"" value=""**/outgoing/*""/>
	</bean>
 
above should be
star star/incoming/star

","13/Jan/09 12:29;davsclaus;Hi

Looks like when it gets the file list it can not detect that the incoming is a directory and not a file. I will look in the code and try to get a fix for you to test again","13/Jan/09 12:43;davsclaus;@Paddy

I have commited a fix for the new problem

Sending        camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpConsumer.java
Transmitting file data .
Committed revision 734117.
","13/Jan/09 14:08;watcher;I still get an error in SftpRemoteFileOperations

  Vector files = channel.ls(path);

when path equals ""incoming""

 WARN  An exception occured while polling: Endpoint[sftp://pdaly@127.0.0.1]: Cannot list directory: incoming
org.apache.camel.component.file.remote.RemoteFileOperationFailedException: Cannot list directory: incoming
	at org.apache.camel.component.file.remote.SftpRemoteFileOperations.listFiles(SftpRemoteFileOperations.java:270)
	at org.apache.camel.component.file.remote.SftpConsumer.pollDirectory(SftpConsumer.java:47)
	at org.apache.camel.component.file.remote.SftpConsumer.pollDirectory(SftpConsumer.java:53)
	at org.apache.camel.component.file.remote.SftpConsumer.pollDirectory(SftpConsumer.java:53)
	at org.apache.camel.component.file.remote.RemoteFileConsumer.poll(RemoteFileConsumer.java:65)
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:66)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:181)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:205)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:619)
Caused by: 2: SfsStatusCode.NoSuchFile
	at com.jcraft.jsch.ChannelSftp.throwStatusError(Unknown Source)
	at com.jcraft.jsch.ChannelSftp.stat(Unknown Source)
	at com.jcraft.jsch.ChannelSftp.ls(Unknown Source)
	at org.apache.camel.component.file.remote.SftpRemoteFileOperations.listFiles(SftpRemoteFileOperations.java:264)
	... 14 more
[te.RemoteFileComponent@100d6ea] ScheduledPollConsumer    
","13/Jan/09 14:19;davsclaus;Sorry I have found the bug.

The problem with the SFTP is that we dont have a java SFTP server we can use for automatic unit testing. So we run all the unit tests with the regular FTP component. The SFTP codebase is 98% identical to the FTP. But I found the bug with the sub folder stuff.

Will commit a patch shortly. ","13/Jan/09 14:26;davsclaus;@Paddy

I have commited a fix to trunk. Could you please test it? Sorry for the issues. However Camel FTP has had a major refactor in Camel 2.x compared to 1.x.


New Revision: 734141
","13/Jan/09 14:50;watcher;Its processing the file ok now, however it fails to put the file into the done directory and throws the following exception.

[te.RemoteFileComponent@1c1e333] SftpConsumer                   ERROR Cannot delete file: /test1/inc
oming/.done/New Text Document.txt
org.apache.camel.component.file.remote.RemoteFileOperationFailedException: Cannot delete file: /test
1/incoming/.done/New Text Document.txt
        at org.apache.camel.component.file.remote.SftpRemoteFileOperations.deleteFile(SftpRemoteFile
Operations.java:138)
        at org.apache.camel.component.file.remote.strategy.RenameRemoteFileProcessStrategy.renameFil
e(RenameRemoteFileProcessStrategy.java:71)
        at org.apache.camel.component.file.remote.strategy.RenameRemoteFileProcessStrategy.commit(Re
nameRemoteFileProcessStrategy.java:65)
        at org.apache.camel.component.file.remote.RemoteFileConsumer.processStrategyCommit(RemoteFil
eConsumer.java:215)
        at org.apache.camel.component.file.remote.RemoteFileConsumer$1.done(RemoteFileConsumer.java:
170)
        at org.apache.camel.processor.UnitOfWorkProcessor$1.done(UnitOfWorkProcessor.java:57)
        at org.apache.camel.management.InstrumentationProcessor$1.done(InstrumentationProcessor.java
:74)","13/Jan/09 15:45;davsclaus;Hi

Could you try a file without spaces in the file name?
",13/Jan/09 15:48;watcher;same issue,"13/Jan/09 15:57;davsclaus;@Paddy

I have commited a new fix to trunk about the move bug. Could you try it?

Committed revision 734164.
","13/Jan/09 16:32;watcher;That works. :-) 

I tested folder names with spaces and file names with spaces too.

Thanks so much for your effort today.

","14/Jan/09 05:05;davsclaus;Thanks with good help from Paddy we have fixed the issues with SFTP/FTP consumers in Camel 2.0. 

Paddy thanks for being patient and reporting and testing this issue. Much appreciated by the community.",31/Jul/09 06:33;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Pipeline could change the MEP unintended,CAMEL-1233,12486159,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,davsclaus,davsclaus,davsclaus,07/Jan/09 13:26,31/Jul/09 06:33,14/Mar/19 02:42,07/Jan/09 16:46,1.5.0,,,,,,,,,,1.6.0,2.0-M1,,camel-core,,,,0,"When exchanges is processed from pipeline they result is copyed as input to the next exchange. However during this copy Camel could potentially change the MEP to InOut. It should respect the original MEP.

The flaw is in ExchangeHelper#copyResults

Fixing this also forces end users to use the correct send/request method on ProducerTemplate. Now Camel will keep the MEP.
So if you are using send then its *inOnly* and then you the there is no result. Use *request* for InOut MEP's.

This breaks a few of our own unit testing that was using the wrong method.",,,,,,,,,,,,,,,,,07/Jan/09 15:29;davsclaus;CAMEL-1233.patch;https://issues.apache.org/jira/secure/attachment/12462800/CAMEL-1233.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76906,,,Fri Jul 31 06:33:56 UTC 2009,,,,,,,0|i01h5j:,6548,,,,,,,,,07/Jan/09 13:27;davsclaus;I guess we should get it into 1.x as well?,07/Jan/09 15:29;davsclaus;The patch with the fix plus a few unit tests than should send the correct MEP when starting the route,"07/Jan/09 16:02;davsclaus;Fixed in trunk

Sending        camel-core/src/main/java/org/apache/camel/util/ExchangeHelper.java
Sending        camel-core/src/test/java/org/apache/camel/processor/MultiCastAggregatorTest.java
Adding         camel-core/src/test/java/org/apache/camel/processor/PipelineMEPTest.java
Sending        camel-core/src/test/java/org/apache/camel/processor/PipelineTest.java
Sending        camel-core/src/test/java/org/apache/camel/processor/SplitterTest.java
Adding         camel-core/src/test/java/org/apache/camel/processor/onexception/InterceptAlterMessageBeforeRedeliveryTest.java
Transmitting file data ......
Committed revision 732378.",07/Jan/09 16:46;davsclaus;1.x branch: Committed revision 732393.,31/Jul/09 06:33;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel activemq archetype fails with ClassNotFoundException,CAMEL-1230,12486560,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,janstey,janstey,06/Jan/09 18:22,31/Jul/09 06:33,14/Mar/19 02:42,06/Jan/09 18:34,,,,,,,,,,,1.6.0,2.0-M1,,,,,,0,"I'm getting this when running projects generated from the 1.x/2.x camel-archetype-activemq

Caused by: java.lang.ClassNotFoundException: org.apache.activemq.camel.component.ActiveMQComponent

Looking into this now...
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-01-06 18:26:50.419,,,no_permission,,,,,,,,,,,,,76907,,,Fri Jul 31 06:33:56 UTC 2009,,,,,,,0|i01h4v:,6545,,,,,,,,,"06/Jan/09 18:25;janstey;Ah, there's an easy fix. The ActiveMQComponent moved out of activemq-core in version 5.2.0. I need to just add a dependency on activemq-camel and all is well. This is not a problem for our current release because 1.5.0 depended on ActiveMQ 5.1.0.",06/Jan/09 18:26;davsclaus;Yeah jon I was about to suggest this. ,"06/Jan/09 18:34;janstey;Yeah, I remembered the component move soon after creating this JIRA... a bit too quick on the JIRA trigger finger I guess ;) The simple fix has been merged to 1.x/2.x now.",31/Jul/09 06:33;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Duplicate type converter toString(Source) in two classes in camel-core,CAMEL-1225,12486127,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,janstey,davsclaus,davsclaus,05/Jan/09 10:11,31/Jul/09 06:33,14/Mar/19 02:42,05/Jan/09 15:11,1.5.0,,,,,,,,,,1.6.0,2.0-M1,,camel-core,,,,0,"See nabble
http://www.nabble.com/Seda-StaticMethodTypeConverter-TransformerException-td21287333s22882.html

This type converter is needed by JBI containers so we should make sure the fix is correct.
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-01-05 15:11:32.632,,,no_permission,,,,,,,,,,,,,76908,,,Fri Jul 31 06:33:55 UTC 2009,,,,,,,0|i01h3r:,6540,,,,,,,,,05/Jan/09 15:11;janstey;Both converters were doing exactly the same thing so there was no harm in removing one.,31/Jul/09 06:33;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unable to find dynamically loaded languages when using OSGi,CAMEL-1221,12486562,12486184,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,mmansell,mmansell,03/Jan/09 22:58,31/Jul/09 06:33,14/Mar/19 02:42,09/Jan/09 07:24,1.5.0,,,,,,,,,,1.6.0,2.0-M1,,osgi,,,,0,"The camel-osgi component only supports loading Components via the OSGi bundles in the 1.5.0 release code. It looks like someone started to add more things that can be automatically loaded on the trunk, because there was a refactor to allow TypeConverters to be added via OSGi bundles. 

Definitely, adding Languages is still missing (both in 1.5.0 and on the trunk). Perhaps there are more as well, as I'm not up on all the things that Camel loads using the same mechanism.

I've got Languages working by patching my copy of 1.5.0 (basically by creating my own version of the LanguageResolver based on the OSGiComponentResolver), but as the refactor seems to be taking the code in a different direction, I'm not going to push a patch yet.",OSGi Equinox 3.4.2,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-01-04 01:27:30.633,,,no_permission,,,,,,,,,,,,,76909,,,Fri Jul 31 06:33:55 UTC 2009,,,,,,,0|i01h2v:,6536,,,,,,,,,"04/Jan/09 01:27;njiang;Hi Michael,

Thanks for pointing  the language resolver issue out. I will take care of it.

Willem
","09/Jan/09 07:24;njiang;Hi Michael,

Could you check out the latest Camel2.0 snapshot or camel 1.5.1 snapshot  to verify my fixing ?

Willem",31/Jul/09 06:33;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Get the Jetty component's 'httpClient.' options to work with indeed apache http client,CAMEL-1217,12486552,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,03/Jan/09 08:18,31/Jul/09 06:33,14/Mar/19 02:42,04/Jan/09 07:18,1.3.0,1.4.0,1.5.0,,,,,,,,1.6.0,2.0-M1,,camel-jetty,,,,0,"Current Jetty component just set the 'httpClient.' parameter to a useless Jetty http client, and using the apache common http client indeed.
We need to pass the parameters into the apache common http client and remove the useless Jetty http client.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-07-31 06:33:55.083,,,no_permission,,,,,,,,,,,,,76910,,,Fri Jul 31 06:33:55 UTC 2009,,,,,,,0|i01h1z:,6532,,,,,,,,,04/Jan/09 07:18;njiang;Also updated the 1.5.1 release note for it.,31/Jul/09 06:33;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jms consumer does not set camel message id based on JMS message id if the next node is not JMS based,CAMEL-1213,12485851,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,02/Jan/09 17:13,31/Jul/09 06:33,14/Mar/19 02:42,06/Jan/09 05:46,1.5.0,,,,,,,,,,1.6.0,2.0-M1,,camel-jms,,,,0,"The code in org.apache.camel.component.jms.copyFrom looks odd

I think the ! should be removed

BEFORE
{code}
        if (!copyMessageId) {
            setMessageId(that.getMessageId());
        }
{code}

AFTER
{code}
        if (copyMessageId) {
            setMessageId(that.getMessageId());
        }
{code}

I will add a unit test (JmsToFileMessageIdTest) based on end user having some trouble with it",,,,,,,,,,,,,,,,,02/Jan/09 17:37;davsclaus;CAMEL-1213.patch;https://issues.apache.org/jira/secure/attachment/12462696/CAMEL-1213.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2009-01-02 17:43:26.203,,,no_permission,,,,,,,,,,,,,76911,,,Fri Jul 31 06:33:54 UTC 2009,,,,,,,0|i01h13:,6528,,,,,,,,,"02/Jan/09 17:37;davsclaus;Fellow riders, please review the patch.","02/Jan/09 17:43;janstey;Claus,

The fix makes sense to me. I think the ! was just a typo when JmsMessage was originally created.",05/Jan/09 18:40;jstrachan;agreed! :),05/Jan/09 18:41;jstrachan;bad James! :),"06/Jan/09 05:46;davsclaus;trunk: r731836
1.x: r731839",31/Jul/09 06:33;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
cometd is missing in the distribution,CAMEL-1210,12485812,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,janstey,janstey,31/Dec/08 16:36,31/Jul/09 06:33,14/Mar/19 02:42,31/Dec/08 16:39,,,,,,,,,,,2.0-M1,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-07-31 06:33:54.906,,,no_permission,,,,,,,,,,,,,76912,,,Fri Jul 31 06:33:54 UTC 2009,,,,,,,0|i01h0f:,6525,,,,,,,,,"31/Dec/08 16:39;janstey;Sending        apache-camel/bundle/pom.xml
Sending        apache-camel/pom.xml
Sending        pom.xml
Transmitting file data ...
Committed revision 730412.
",31/Jul/09 06:33;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Invalid maven-metadata.xml files in the central repo,CAMEL-1208,12486544,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,hadrian,hadrian,hadrian,29/Dec/08 16:33,31/Jul/09 06:33,14/Mar/19 02:42,07/Jan/09 22:25,1.5.0,,,,,,,,,,1.6.0,2.0-M1,,,,,,0,"http://www.nabble.com/Fwd%3A-FW%3A--nexus-user--Bad-metadata-in-central-repo---nexus-to-the-rescue---td21152738s22882.html

This is a staging problem that could be fixed either manually (but there are a lot of metadata files in camel), or will be fixed automatically during the next release - 1.6 (which should come out shortly, still a few issues to resolve).

I'll am looking for a script that could fix all the files automatically, if not, we'll decide if to wait for the next release or bite the bullet and apply a manual fix.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-07-31 06:33:54.829,,,no_permission,,,,,,,,,,,,,76913,,,Fri Jul 31 06:33:54 UTC 2009,,,,,,,0|i01gzz:,6523,,,,,,,,,06/Jan/09 07:36;hadrian;This should be fixed now.  I manually fixed all the maven-metadata.xml files in the m2-ibiblio-rsync-repository.  I will wait for the sync to take place and verify in the central maven repo before closing this.,"07/Jan/09 22:25;hadrian;This is fixed and already synced at http://mirrors.ibiblio.org/pub/mirrors/maven2/org/apache/camel/.
Central maven repo should sync soon.",31/Jul/09 06:33;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ConcurrentModificationException when stop the camel-osgi bundle,CAMEL-1207,12486542,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,29/Dec/08 09:59,31/Jul/09 06:33,14/Mar/19 02:42,05/Jan/09 00:07,1.4.0,1.5.0,,,,,,,,,1.6.0,2.0-M1,,osgi,,,,0,"ERROR: Error stopping mvn:org.apache.camel/camel-osgi/1.5.0 (org.osgi.fra
mework.BundleException: Activator stop error.)
java.util.ConcurrentModificationException
        at java.util.HashMap$HashIterator.nextEntry(HashMap.java:841)
        at java.util.HashMap$ValueIterator.next(HashMap.java:871)
        at org.apache.camel.osgi.Activator.mayBeRemoveComponentFor(Activator.jav
a:85)
        at org.apache.camel.osgi.Activator.stop(Activator.java:120)
        at org.apache.felix.framework.util.SecureAction.stopActivator(SecureActi
on.java:613)
        at org.apache.felix.framework.Felix._stopBundle(Felix.java:1995)
        at org.apache.felix.framework.Felix.stopBundle(Felix.java:1952)
        at org.apache.felix.framework.Felix.setFrameworkStartLevel(Felix.java:11
51)
        at org.apache.felix.framework.StartLevelImpl.run(StartLevelImpl.java:267
)
        at java.lang.Thread.run(Thread.java:595)",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-07-31 06:33:54.805,,,no_permission,,,,,,,,,,,,,76914,,,Fri Jul 31 06:33:54 UTC 2009,,,,,,,0|i01gzr:,6522,,,,,,,,,31/Jul/09 06:33;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
@EndpointInject can not lookup bean if endpoint is defined directly as a consumer (from),CAMEL-1205,12486532,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,29/Dec/08 09:32,31/Jul/09 06:33,14/Mar/19 02:42,10/Feb/09 16:30,1.6.0,2.0.0,,,,,,,,,2.0-M1,,,camel-spring,,,,0,"I was messing with camel-spring and routes using spring DSL

I had this part of unit test code
{code:java}
    @EndpointInject(name = ""myFileEndpoint"")
    protected Endpoint inputFile;
{code}

To lookup an endppoint with the given name *myFileEndpoint*

But if I define it directly then it cannot be found
{code:xml}
        <route>
            <from id=""myFileEndpoint"" uri=""file://target/antpathmatcher?consumer.recursive=true&amp;filter=#myFilter""/>
            <to uri=""mock:result""/>
        </route>
{code}

So I have to define it as a loose endpoint as:
{code:xml}
        <endpoint id=""myFileEndpoint"" uri=""file://target/antpathmatcher?consumer.recursive=true&amp;filter=#myFilter""/>

        <route>
            <from ref=""myFileEndpoint""/>
            <to uri=""mock:result""/>
        </route>
{code}

",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76915,,,Fri Jul 31 06:33:54 UTC 2009,,,,,,,0|i01gzb:,6520,,,,,,,,,"29/Dec/08 14:38;davsclaus;This is the correct stacktrace

{code}
java.lang.IllegalArgumentException: registry entry called myFileEndpoint of type org.apache.camel.Endpoint must be specified
	at org.apache.camel.util.ObjectHelper.notNull(ObjectHelper.java:168)
	at org.apache.camel.util.CamelContextHelper.mandatoryLookup(CamelContextHelper.java:174)
	at org.apache.camel.util.CamelContextHelper.getEndpointInjection(CamelContextHelper.java:219)
	at org.apache.camel.impl.CamelPostProcessorHelper.getEndpointInjection(CamelPostProcessorHelper.java:120)
	at org.apache.camel.impl.CamelPostProcessorHelper.getInjectionValue(CamelPostProcessorHelper.java:132)
	at org.apache.camel.spring.CamelBeanPostProcessor.injectField(CamelBeanPostProcessor.java:143)
	at org.apache.camel.spring.CamelBeanPostProcessor$2.doWith(CamelBeanPostProcessor.java:132)
	at org.springframework.util.ReflectionUtils.doWithFields(ReflectionUtils.java:523)
	at org.springframework.util.ReflectionUtils.doWithFields(ReflectionUtils.java:500)
	at org.apache.camel.spring.CamelBeanPostProcessor.injectFields(CamelBeanPostProcessor.java:128)
	at org.apache.camel.spring.CamelBeanPostProcessor.postProcessBeforeInitialization(CamelBeanPostProcessor.java:76)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:350)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1331)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:341)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:111)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:75)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:255)
	at org.springframework.test.context.junit38.AbstractJUnit38SpringContextTests.runBare(AbstractJUnit38SpringContextTests.java:183)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:40)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:90)
{code}

On this unit test
{code:java}
@ContextConfiguration
public class SpringFileAntPathMatcherFilterTest extends AbstractJUnit38SpringContextTests {
    protected String expectedBody = ""Godday World"";
    @Autowired
    protected ProducerTemplate template;
    @EndpointInject(name = ""myFileEndpoint"")
    protected Endpoint inputFile;
    @EndpointInject(uri = ""mock:result"")
    protected MockEndpoint result;

    public void testAntPatchMatherFilter() throws Exception {
        result.expectedBodiesReceived(expectedBody);

        template.sendBodyAndHeader(inputFile, ""Hello World"", FileComponent.HEADER_FILE_NAME, ""hello.txt"");
        template.sendBodyAndHeader(inputFile, ""Bye World"", FileComponent.HEADER_FILE_NAME, ""bye.xml"");
        template.sendBodyAndHeader(inputFile, expectedBody, FileComponent.HEADER_FILE_NAME, ""subfolder/godday.txt"");

        result.assertIsSatisfied();
    }

    @Override
    protected void setUp() throws Exception {
        TestSupport.deleteDirectory(""target/antpathmatcher"");
        super.setUp();
    }
}
{code}",10/Feb/09 16:30;davsclaus;Committed revision 743010.,31/Jul/09 06:33;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MinaExchange should override newInstance(),CAMEL-1202,12486824,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,trev,trev,24/Dec/08 02:03,21/Nov/09 11:56,14/Mar/19 02:42,10/Feb/09 17:01,1.5.0,,,,,,,,,,1.6.0,,,camel-mina,,,,0,"MinaExchange.copy() should create a MinaExchange, but instead it creates a DefaultExchange, because MinaExchange doesn't override newInstance().

See discussion: [a MinaExchange suddenly becomes a DefaultExchange?|http://www.nabble.com/a-MinaExchange-suddenly-becomes-a-DefaultExchange--to21100904s22882.html]",,,,,,,,,,,,,,,,,24/Dec/08 02:09;trev;camel_1202.patch;https://issues.apache.org/jira/secure/attachment/12462798/camel_1202.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2009-02-10 16:56:08.792,,,no_permission,,,,,,,,,,,,,76916,,,Sat Nov 21 11:56:56 UTC 2009,,,Patch Available,,,,0|i01gyn:,6517,,,,,,,,,10/Feb/09 16:56;davsclaus;In Camel 2.0 we got rid of the MinaExchange so this only applies to Camel 1.x,"10/Feb/09 17:01;davsclaus;r729204 | ningjiang | 2008-12-24 04:12:12 +0100 (Wed, 24 Dec 2008) | 1 line

CAMEL-1202 Applied patch with thanks to Trev",21/Nov/09 11:56;davsclaus;Closing all 1.6.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Messages dropped with ActiveMQ/JMS component and Resequencer pattern ,CAMEL-1201,12485772,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,bsnyder,bsnyder,22/Dec/08 19:36,31/Jul/09 06:33,14/Mar/19 02:42,14/Jan/09 17:04,1.5.0,,,,,,,,,,2.0-M1,,,camel-activemq,camel-jms,eip,,0,"I've created a simple class to test the resequencer as listed below: 

{code}
public final class MyCamelResequencer {
    private static final Logger LOG = Logger.getLogger(MyCamelResequencer.class);

    private MyCamelResequencer() {}

    public static void main(String args[]) throws Exception {
        CamelContext context = new DefaultCamelContext();
        Tracer tracer = new Tracer();
        tracer.getFormatter().setShowBreadCrumb(false);
        tracer.getFormatter().setShowNode(true);
        context.addInterceptStrategy(tracer);
       
        String brokerUrl = ""vm://localhost?broker.persistent=false"";
//        String brokerUrl = ""tcp://localhost:61616"";
        context.addComponent(""activemq"", ActiveMQComponent.activeMQComponent(brokerUrl));
        context.addRoutes(new RouteBuilder() {
            public void configure() {
//                from(""seda:FOO"").to(""log:PLANETS"");
//                from(""seda:FOO"").resequencer(header(""seqnum"")).to(""log:PLANETS"");
//                from(""activemq:TEST.IN"").to(""log:PLANETS"");
                from(""activemq:TEST.IN"").resequencer(header(""seqnum"")).to(""log:PLANETS"");
//                from(""activemq:TEST.IN"").resequencer(header(""seq"")).to(""activemq:TEST.OUT"");
            }
        });

        ProducerTemplate template = context.createProducerTemplate();

        context.start();

        List<String> planets = new ArrayList(8);
        planets.add(""Mercury"");
        planets.add(""Venus"");
        planets.add(""Earth"");
        planets.add(""Mars"");
        planets.add(""Jupiter"");
        planets.add(""Saturn"");
        planets.add(""Uranus"");
        planets.add(""Neptune"");
        
        List<Integer> numbers = new ArrayList<Integer>(8);
        numbers.add(1);
        numbers.add(2);
        numbers.add(3);
        numbers.add(4);
        numbers.add(5);
        numbers.add(6);
        numbers.add(7);
        numbers.add(8);
        
        for (String planet: planets) {
            Collections.shuffle(numbers);
            int seqnum = numbers.remove(0);
            String message = ""I am the planet "" + planet + "" with seqnum: "" + seqnum;
            LOG.info(""Sending message: "" + message);
            template.sendBodyAndHeader(""activemq:TEST.IN"", message, ""seqnum"", seqnum);
//            template.sendBodyAndHeader(""seda:FOO"", message, ""seqnum"", seqnum);
        }

        Thread.sleep(10000);
        LOG.info(""Shutting down the Camel context"");
        context.stop();
        System.exit(1);
    }
{code}

The following are my observations: 

* SEDA -> log receives all messages 
* SEDA -> resequencer -> log receives all messages 
* ActiveMQ -> log receives all messages 
* ActiveMQ -> resequencer -> log does not receive all messages 

Upon enabling the Tracer interceptor, I'm able to see that it doesn't even receive all messages from the ActiveMQ component: 

{panel}
[                          main] DefaultCamelContext            INFO  JMX enabled. Using InstrumentationLifecycleStrategy.
[                          main] BrokerService                  INFO  Using Persistence Adapter: MemoryPersistenceAdapter
[                          main] BrokerService                  INFO  ActiveMQ null JMS Message Broker (localhost) is starting
[                          main] BrokerService                  INFO  For help or more information please see: http://activemq.apache.org/
[                 JMX connector] ManagementContext              WARN  Failed to start jmx connector: Cannot bind to URL [rmi://localhost:1099/jmxrmi]: javax.naming.NameAlreadyBoundException: jmxrmi [Root exception is java.rmi.AlreadyBoundException: jmxrmi]
[                          main] BrokerService                  INFO  ActiveMQ JMS Message Broker (localhost, ID:174-155-37-223.pools.spcsdns.net-58792-1229973871555-0:0) started
[                          main] TransportConnector             INFO  Connector vm://localhost Started
[                          main] MyCamelResequencer             INFO  Sending message: I am the planet Mercury with seqnum: 1
[                          main] MyCamelResequencer             INFO  Sending message: I am the planet Venus with seqnum: 3
[                          main] MyCamelResequencer             INFO  Sending message: I am the planet Earth with seqnum: 6
[                          main] MyCamelResequencer             INFO  Sending message: I am the planet Mars with seqnum: 2
[                          main] MyCamelResequencer             INFO  Sending message: I am the planet Jupiter with seqnum: 4
[                          main] MyCamelResequencer             INFO  Sending message: I am the planet Saturn with seqnum: 8
[                          main] MyCamelResequencer             INFO  Sending message: I am the planet Uranus with seqnum: 7
[                          main] MyCamelResequencer             INFO  Sending message: I am the planet Neptune with seqnum: 5
[aultMessageListenerContainer-1] TraceInterceptor               INFO  -> interceptor1 Interceptor[Delegate(DeadLetterChannel[Delegate(TraceInterceptor[Resequencer[ [] -> [To[log:PLANETS]]]]), RecipientList[log:org.apache.camel.DeadLetterChannel?level=error], RedeliveryPolicy[maximumRedeliveries=6]])] InOnly Properties:{} Headers:{JMSDestination=queue://TEST.IN, JMSTimestamp=1229973871918, JMSRedelivered=false, JMSExpiration=0, JMSType=null, seqnum=1, JMSXGroupID=null, JMSMessageID=ID:174-155-37-223.pools.spcsdns.net-58792-1229973871555-2:1:1:1:1, JMSDeliveryMode=2, JMSCorrelationID=null, JMSReplyTo=null, JMSPriority=4} BodyType:String Body:I am the planet Mercury with seqnum: 1
[aultMessageListenerContainer-1] TraceInterceptor               INFO  -> resequencer1 Resequencer[ [] -> [To[log:PLANETS]]] InOnly Properties:{CamelCauseException=null} Headers:{JMSDestination=queue://TEST.IN, JMSTimestamp=1229973871918, JMSRedelivered=false, JMSExpiration=0, JMSType=null, seqnum=1, JMSXGroupID=null, JMSMessageID=ID:174-155-37-223.pools.spcsdns.net-58792-1229973871555-2:1:1:1:1, JMSDeliveryMode=2, JMSCorrelationID=null, JMSReplyTo=null, JMSPriority=4} BodyType:String Body:I am the planet Mercury with seqnum: 1
[aultMessageListenerContainer-2] TraceInterceptor               INFO  -> interceptor1 Interceptor[Delegate(DeadLetterChannel[Delegate(TraceInterceptor[Resequencer[ [] -> [To[log:PLANETS]]]]), RecipientList[log:org.apache.camel.DeadLetterChannel?level=error], RedeliveryPolicy[maximumRedeliveries=6]])] InOnly Properties:{} Headers:{JMSDestination=queue://TEST.IN, JMSTimestamp=1229973871930, JMSRedelivered=false, JMSExpiration=0, JMSType=null, seqnum=6, JMSXGroupID=null, JMSMessageID=ID:174-155-37-223.pools.spcsdns.net-58792-1229973871555-2:1:1:1:3, JMSDeliveryMode=2, JMSCorrelationID=null, JMSReplyTo=null, JMSPriority=4} BodyType:String Body:I am the planet Earth with seqnum: 6
[aultMessageListenerContainer-2] TraceInterceptor               INFO  -> resequencer1 Resequencer[ [] -> [To[log:PLANETS]]] InOnly Properties:{CamelCauseException=null} Headers:{JMSDestination=queue://TEST.IN, JMSTimestamp=1229973871930, JMSRedelivered=false, JMSExpiration=0, JMSType=null, seqnum=6, JMSXGroupID=null, JMSMessageID=ID:174-155-37-223.pools.spcsdns.net-58792-1229973871555-2:1:1:1:3, JMSDeliveryMode=2, JMSCorrelationID=null, JMSReplyTo=null, JMSPriority=4} BodyType:String Body:I am the planet Earth with seqnum: 6
[aultMessageListenerContainer-3] TraceInterceptor               INFO  -> interceptor1 Interceptor[Delegate(DeadLetterChannel[Delegate(TraceInterceptor[Resequencer[ [] -> [To[log:PLANETS]]]]), RecipientList[log:org.apache.camel.DeadLetterChannel?level=error], RedeliveryPolicy[maximumRedeliveries=6]])] InOnly Properties:{} Headers:{JMSDestination=queue://TEST.IN, JMSTimestamp=1229973871930, JMSRedelivered=true, JMSExpiration=0, JMSType=null, seqnum=2, JMSXGroupID=null, JMSMessageID=ID:174-155-37-223.pools.spcsdns.net-58792-1229973871555-2:1:1:1:4, JMSDeliveryMode=2, JMSCorrelationID=null, JMSReplyTo=null, JMSPriority=4} BodyType:String Body:I am the planet Mars with seqnum: 2
[aultMessageListenerContainer-3] TraceInterceptor               INFO  -> resequencer1 Resequencer[ [] -> [To[log:PLANETS]]] InOnly Properties:{CamelCauseException=null} Headers:{JMSDestination=queue://TEST.IN, JMSTimestamp=1229973871930, JMSRedelivered=true, JMSExpiration=0, JMSType=null, seqnum=2, JMSXGroupID=null, JMSMessageID=ID:174-155-37-223.pools.spcsdns.net-58792-1229973871555-2:1:1:1:4, JMSDeliveryMode=2, JMSCorrelationID=null, JMSReplyTo=null, JMSPriority=4} BodyType:String Body:I am the planet Mars with seqnum: 2
[aultMessageListenerContainer-4] TraceInterceptor               INFO  -> interceptor1 Interceptor[Delegate(DeadLetterChannel[Delegate(TraceInterceptor[Resequencer[ [] -> [To[log:PLANETS]]]]), RecipientList[log:org.apache.camel.DeadLetterChannel?level=error], RedeliveryPolicy[maximumRedeliveries=6]])] InOnly Properties:{} Headers:{JMSDestination=queue://TEST.IN, JMSTimestamp=1229973871936, JMSRedelivered=false, JMSExpiration=0, JMSType=null, seqnum=4, JMSXGroupID=null, JMSMessageID=ID:174-155-37-223.pools.spcsdns.net-58792-1229973871555-2:1:1:1:5, JMSDeliveryMode=2, JMSCorrelationID=null, JMSReplyTo=null, JMSPriority=4} BodyType:String Body:I am the planet Jupiter with seqnum: 4
[aultMessageListenerContainer-4] TraceInterceptor               INFO  -> resequencer1 Resequencer[ [] -> [To[log:PLANETS]]] InOnly Properties:{CamelCauseException=null} Headers:{JMSDestination=queue://TEST.IN, JMSTimestamp=1229973871936, JMSRedelivered=false, JMSExpiration=0, JMSType=null, seqnum=4, JMSXGroupID=null, JMSMessageID=ID:174-155-37-223.pools.spcsdns.net-58792-1229973871555-2:1:1:1:5, JMSDeliveryMode=2, JMSCorrelationID=null, JMSReplyTo=null, JMSPriority=4} BodyType:String Body:I am the planet Jupiter with seqnum: 4
[aultMessageListenerContainer-5] TraceInterceptor               INFO  -> interceptor1 Interceptor[Delegate(DeadLetterChannel[Delegate(TraceInterceptor[Resequencer[ [] -> [To[log:PLANETS]]]]), RecipientList[log:org.apache.camel.DeadLetterChannel?level=error], RedeliveryPolicy[maximumRedeliveries=6]])] InOnly Properties:{} Headers:{JMSDestination=queue://TEST.IN, JMSTimestamp=1229973871938, JMSRedelivered=false, JMSExpiration=0, JMSType=null, seqnum=7, JMSXGroupID=null, JMSMessageID=ID:174-155-37-223.pools.spcsdns.net-58792-1229973871555-2:1:1:1:7, JMSDeliveryMode=2, JMSCorrelationID=null, JMSReplyTo=null, JMSPriority=4} BodyType:String Body:I am the planet Uranus with seqnum: 7
[aultMessageListenerContainer-5] TraceInterceptor               INFO  -> resequencer1 Resequencer[ [] -> [To[log:PLANETS]]] InOnly Properties:{CamelCauseException=null} Headers:{JMSDestination=queue://TEST.IN, JMSTimestamp=1229973871938, JMSRedelivered=false, JMSExpiration=0, JMSType=null, seqnum=7, JMSXGroupID=null, JMSMessageID=ID:174-155-37-223.pools.spcsdns.net-58792-1229973871555-2:1:1:1:7, JMSDeliveryMode=2, JMSCorrelationID=null, JMSReplyTo=null, JMSPriority=4} BodyType:String Body:I am the planet Uranus with seqnum: 7
[aultMessageListenerContainer-6] TraceInterceptor               INFO  -> interceptor1 Interceptor[Delegate(DeadLetterChannel[Delegate(TraceInterceptor[Resequencer[ [] -> [To[log:PLANETS]]]]), RecipientList[log:org.apache.camel.DeadLetterChannel?level=error], RedeliveryPolicy[maximumRedeliveries=6]])] InOnly Properties:{} Headers:{JMSDestination=queue://TEST.IN, JMSTimestamp=1229973871938, JMSRedelivered=true, JMSExpiration=0, JMSType=null, seqnum=5, JMSXGroupID=null, JMSMessageID=ID:174-155-37-223.pools.spcsdns.net-58792-1229973871555-2:1:1:1:8, JMSDeliveryMode=2, JMSCorrelationID=null, JMSReplyTo=null, JMSPriority=4} BodyType:String Body:I am the planet Neptune with seqnum: 5
[aultMessageListenerContainer-6] TraceInterceptor               INFO  -> resequencer1 Resequencer[ [] -> [To[log:PLANETS]]] InOnly Properties:{CamelCauseException=null} Headers:{JMSDestination=queue://TEST.IN, JMSTimestamp=1229973871938, JMSRedelivered=true, JMSExpiration=0, JMSType=null, seqnum=5, JMSXGroupID=null, JMSMessageID=ID:174-155-37-223.pools.spcsdns.net-58792-1229973871555-2:1:1:1:8, JMSDeliveryMode=2, JMSCorrelationID=null, JMSReplyTo=null, JMSPriority=4} BodyType:String Body:I am the planet Neptune with seqnum: 5
[[log:PLANETS]]] Polling Thread] TraceInterceptor               INFO  -> to1 To[log:PLANETS] InOnly Properties:{} Headers:{JMSDestination=queue://TEST.IN, JMSTimestamp=1229973871929, JMSRedelivered=false, JMSExpiration=0, JMSType=null, seqnum=3, JMSXGroupID=null, JMSMessageID=ID:174-155-37-223.pools.spcsdns.net-58792-1229973871555-2:1:1:1:2, JMSDeliveryMode=2, JMSCorrelationID=null, JMSReplyTo=null, JMSPriority=4} BodyType:String Body:I am the planet Venus with seqnum: 3
[[log:PLANETS]]] Polling Thread] PLANETS                        INFO  Exchange[BodyType:String, Body:I am the planet Venus with seqnum: 3]
[[log:PLANETS]]] Polling Thread] TraceInterceptor               INFO  -> to1 To[log:PLANETS] InOnly Properties:{} Headers:{JMSDestination=queue://TEST.IN, JMSTimestamp=1229973871937, JMSRedelivered=false, JMSExpiration=0, JMSType=null, seqnum=8, JMSXGroupID=null, JMSMessageID=ID:174-155-37-223.pools.spcsdns.net-58792-1229973871555-2:1:1:1:6, JMSDeliveryMode=2, JMSCorrelationID=null, JMSReplyTo=null, JMSPriority=4} BodyType:String Body:I am the planet Saturn with seqnum: 8
[[log:PLANETS]]] Polling Thread] PLANETS                        INFO  Exchange[BodyType:String, Body:I am the planet Saturn with seqnum: 8]
[                          main] MyCamelResequencer             INFO  Shutting down the Camel context
[         ActiveMQ ShutdownHook] BrokerService                  INFO  ActiveMQ Message Broker (localhost, ID:174-155-37-223.pools.spcsdns.net-58792-1229973871555-0:0) is shutting down
[         ActiveMQ ShutdownHook] TransportConnector             INFO  Connector vm://localhost Stopped
[         ActiveMQ ShutdownHook] BrokerService                  INFO  ActiveMQ JMS Message Broker (localhost, ID:174-155-37-223.pools.spcsdns.net-58792-1229973871555-0:0) stopped

{panel}",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-12-25 08:43:14.888,,,no_permission,,,,,,,,,,,,,76917,,,Fri Jul 31 06:33:53 UTC 2009,,,,,,,0|i01gyf:,6516,,,,,,,,,"25/Dec/08 08:43;davsclaus;Could you try on the trunk? I recall that Martin Krasser has submitted a great patch to fix the BatchProcessor that is the core for the resequencer, aggregator etc. It should fix adding a competing consumer, so that could explain the dropped messages.",14/Jan/09 17:04;bsnyder;It appears that the problem has been fixed in the trunk. I hazard a guess that the fixes to the {{BatchProcessor}} et al. in CAMEL-1037 fixed it. ,31/Jul/09 06:33;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Throttler appears to ""throttle"" per thread instead of throttling across multiple threads",CAMEL-1199,12485721,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gertvanthienen,rgavlin,rgavlin,19/Dec/08 12:20,31/Jul/09 06:33,14/Mar/19 02:42,05/Jan/09 08:53,1.5.0,,,,,,,,,,1.6.0,2.0-M1,,camel-core,,,,0,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-12-22 15:34:20.354,,,no_permission,,,,,,,,,,,,,76918,,,Fri Jul 31 06:33:53 UTC 2009,,,,,,,0|i01gxz:,6514,,,,,,,,,"22/Dec/08 15:34;hadrian;Ron, I tried to reproduce your issue and the throttler seems to work with the following route.  The Throttler code keeps everything per object, so as long as there is one object everything seems ok.  One odd thing I noticed is that at 3 messages per second I expected the whole thing to take a bit over 7 seconds, but it takes (consistently) over 6 seconds (and a bit over 60 sec for 240 messages).  

{code}
// START SNIPPET: ex
from(""direct:a"").thread(5).
    throttler(3).timePeriodMillis(1000).to(""mock:result"");
// END SNIPPET: ex
{code}

and the client code makes invocations from multiple threads, as smx does.  The core pool size didn't infulence the results.

{code}
        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();
        executor.setCorePoolSize(5);
        executor.afterPropertiesSet();
        long start = System.currentTimeMillis();
        executor.execute(new Runnable() {
            public void run() {
                long start = System.currentTimeMillis();
                for (int i = 0; i < messageCount; i++) {
                    template.sendBody(""direct:a"", ""<message>"" + i + ""</message>"");
                }
                duration = System.currentTimeMillis() - start;
            };
        });
{code}

Can you please make it fail or give more details about what you experience?  How does your route look like?
","22/Dec/08 16:36;rgavlin;Hi Adrian,

I am attempting to use the throttler within smx-camel. I suspect this represents a different use case than using the throttler natively from multiple threads within camel. My route is:

<from uri=""jbi:...jms_consumer""/>
<throttler/>
<to uri=""jbi:...jms_provider""/>

So, I am not sure if this is a camel problem or a smx-camel problem. I thought I would post the issue here first.

/Ron

",29/Dec/08 15:32;hadrian;Gert is taking a look at this in the context of smx.  Thanks Gert.,"30/Dec/08 14:03;gertvanthienen;There is only one Throttler object when running in ServiceMix too, but on my machine submitting multiple messages to a direct-endpoint from an Executor does lead to problems.
http://svn.eu.apache.org/viewvc?view=rev&revision=730132 makes the implementation of the throttler a bit more thread-safe","05/Jan/09 08:53;gertvanthienen;The throttler always delayed until the next time period, regardless of the number of exchanges already waiting for being handled in that period.  The new algorithm allows the the throttler to delay exchanges for more than one time period if necessary.

Fixed in http://svn.eu.apache.org/viewvc?view=rev&revision=731488
and backported to 1.5.x in http://svn.eu.apache.org/viewvc?view=rev&revision=731493",31/Jul/09 06:33;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MockEndpoint - sleep for empty test doesnt work,CAMEL-1196,12485543,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,davsclaus,davsclaus,davsclaus,18/Dec/08 05:59,31/Jul/09 06:33,14/Mar/19 02:42,18/Dec/08 13:09,1.5.0,,,,,,,,,,1.6.0,2.0-M1,,camel-core,,,,0,"See nabble:
http://www.nabble.com/MockEndpoint---sleep-for-empty-tests-is-flawed--td21067367s22882.html",,,,,,,,,,,,,,,,,18/Dec/08 06:13;davsclaus;CAMEL-1196.patch;https://issues.apache.org/jira/secure/attachment/12462746/CAMEL-1196.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76919,,,Fri Jul 31 06:33:53 UTC 2009,,,,,,,0|i01gxb:,6511,,,,,,,,,"18/Dec/08 13:09;davsclaus;r727713 for trunk
r727718 for 1.x",31/Jul/09 06:33;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Interceptors for multicast,CAMEL-1193,12486527,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,sinavolu@progress.com,sinavolu@progress.com,17/Dec/08 14:53,31/Jul/09 06:33,14/Mar/19 02:42,19/Dec/08 08:18,1.4.0,1.5.0,,,,,,,,,1.6.0,2.0-M1,,camel-core,,,,0,"MulticastType override the method wrapProcessorInInterceptors() and adds a StreamCachingInterceptor.

This is giving a problem for the debugger in FUSE Integration designer. FID debugger works using the Debug Interceptor, because we are not add an interceptor for Multicast node, it will not stop at that node even if we place a break point.

camel-dev mailing list thread related to this: http://www.nabble.com/Camel-Multicast-and-Interceptors-td21053645s22882.html
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-12-19 08:18:54.304,,,no_permission,,,,,,,,,,,,,76920,,,Fri Jul 31 06:33:53 UTC 2009,,,,,,,0|i01gwn:,6508,,,,,,,,,"19/Dec/08 08:18;njiang;trunk 
 http://svn.apache.org/viewvc?rev=727624&view=rev

1.x branch
http://svn.apache.org/viewvc?rev=727651&view=rev",31/Jul/09 06:33;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-velocity - log4j is needed at runtime,CAMEL-1191,12486129,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,janstey,davsclaus,davsclaus,17/Dec/08 08:33,31/Jul/09 06:33,14/Mar/19 02:42,17/Dec/08 14:41,1.5.0,,,,,,,,,,1.6.0,2.0-M1,,camel-velocity,,,,0,"See nabble:
http://www.nabble.com/velocity%3A-Couldn%27t-find-class-org.apache.velocity.runtime.log.SimpleLog4JLogSystem-td21036449s22882.html

Jon do you mind taking a look at this, you are are good at maven pom's ;)",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-12-17 14:25:16.485,,,no_permission,,,,,,,,,,,,,76921,,,Fri Jul 31 06:33:52 UTC 2009,,,,,,,0|i01gw7:,6506,,,,,,,,,"17/Dec/08 14:25;janstey;:)

Sure thing, will take a look.","17/Dec/08 14:37;janstey;Sending        camel-velocity/pom.xml
Transmitting file data .
Committed revision 727398.

Luckily, velocity specified log4j as 'provided' so we won't have any version conflicts. I think I will merge this to 1.x as well.",31/Jul/09 06:33;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SoapMessageInInterceptor imports test generated code(pizza.types.CallerIDHeaderType),CAMEL-1190,12487943,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,janstey,a_abes@yahoo.com,a_abes@yahoo.com,16/Dec/08 21:02,31/Jul/09 06:33,14/Mar/19 02:42,16/Dec/08 21:36,2.0.0,,,,,,,,,,1.6.0,2.0-M1,,camel-cxf,,,,0,"org.apache.camel.component.cxf.interceptors.SoapMessageInInterceptor imports a class generated from test code 
import org.apache.camel.pizza.types.CallerIDHeaderType;

This makes life a bit annoying when trying to debug/develop with camel-cxf without generating the full test code.
",pure code,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-12-16 21:31:51.212,,,no_permission,,,,,,,,,,,,,76922,,,Fri Jul 31 06:33:52 UTC 2009,,,Patch Available,,,,0|i01gvz:,6505,,,,,,,,,"16/Dec/08 21:03;a_abes@yahoo.com;Index: F:/aabes/workspaces/projects/apache_camle/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/interceptors/SoapMessageInInterceptor.java
===================================================================
--- F:/aabes/workspaces/projects/apache_camle/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/interceptors/SoapMessageInInterceptor.java	(revision 727142)
+++ F:/aabes/workspaces/projects/apache_camle/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/interceptors/SoapMessageInInterceptor.java	(working copy)
@@ -32,7 +32,6 @@
 import org.w3c.dom.Node;
 
 
-import org.apache.camel.pizza.types.CallerIDHeaderType;
 import org.apache.cxf.binding.soap.SoapMessage;
 import org.apache.cxf.binding.soap.model.SoapBindingInfo;
 import org.apache.cxf.common.logging.LogUtils;
",16/Dec/08 21:04;a_abes@yahoo.com;previous comment is patch.,"16/Dec/08 21:31;janstey;Yeah, thats not good :) Will commit your patch shortly. Thanks Andi!",31/Jul/09 06:33;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Exceptions thrown from when - methodCall are not caught by onException,CAMEL-1188,12486521,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,sagnet,sagnet,16/Dec/08 13:52,31/Jul/09 06:33,14/Mar/19 02:42,16/Dec/08 18:40,1.5.0,,,,,,,,,,1.6.0,2.0-M1,,camel-core,camel-spring,,,0,"See the route below. beanOne throws ExceptionOneException and beanTwo throws ExceptionTwoException. ExceptionOneException it caught and handled as it's supposed to.  But ExceptionTwoException goes all the way through, without  being caught and routed to the exceptionTwoQueue. Is it the when tag or the methodCall tag that is the cause of this?

{code}
<camelContext id=""MyCamelContext xmlns=""http://activemq.apache.org/camel/schema/spring"">
	<endpoint id=""myMainQueue"" uri=""activemq:${my.project.queue.main}""/>
	<endpoint id=""exceptionOneQueue"" uri=""activemq:${my.project.queue.exceptionOne}""/>
	<endpoint id=""exceptionTwoQueue"" uri=""activemq:${my.project.queue.exceptionTwo}""/>
	<route>		
		<from ref=""myMainQueue"" />
		<onException>
			<exception>my.project.queue.ExceptionOneException</exception>
			<redeliveryPolicy maximumRedeliveries=""0"" />
			<handled>
				<constant>true</constant>
			</handled>
			<to ref=""exceptionOneQueue""/>
		</onException>
		<onException>
			<exception>my.project.queue.ExceptionTwoException</exception>
			<redeliveryPolicy maximumRedeliveries=""0"" />
			<handled>
				<constant>true</constant>
			</handled>
			<to ref=""exceptionTwoQueue""/>
		</onException>
		<onException>
			<exception>java.lang.Exception</exception>
			<redeliveryPolicy maximumRedeliveries=""0"" />
			<handled>
				<constant>false</constant>
			</handled>
		</onException>
		<unmarshal>
			<jaxb prettyPrint=""true"" contextPath=""my.project.domain"" />
		</unmarshal>
		<choice>
			<when>
				<methodCall bean=""beanTwo"" method=""methodFromBeanTwo""/>
			</when>
			<otherwise>
				<to uri=""bean:beanOne?methodName=methodFromBeanOne"" />
			</otherwise>
		</choice>
	</route>
</camelContext>
{code}",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-12-16 18:33:58.467,,,no_permission,,,,,,,,,,,,,76923,,,Fri Jul 31 06:33:52 UTC 2009,,,,,,,0|i01gvj:,6503,,,,,,,,,"16/Dec/08 15:12;sagnet;Here's the Nabble thread for this: http://www.nabble.com/Will-onException-handle-exceptions-thrown-from-%27when%27-clause--ts21033017s22882.html I've tried using <filter> instead of <choice>/<when>/<otherwise>, which gives the same results. So my assumption is that it is the use of <methodCall> intead of <to> that causes the exception not to be caught.","16/Dec/08 18:33;davsclaus;Ah I got it. This is already fixed in Camel 1.5.1

When you use bean for predicates and they throw an exception it's wrapped in a RuntimeBeanExpressionException. And sadly Camel 1.5.0 does not look into the exception tree to find the real caused exception.

Rikard you can try the 1.5.1-SNAPSHOT
http://activemq.apache.org/camel/download.html",16/Dec/08 18:40;davsclaus;Already fixed in 1.5.1 (will now look into exception tree to find the real caused exception),31/Jul/09 06:33;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The Mina VM protocol is not recognising codec and other options,CAMEL-1187,12485156,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,huntc@internode.on.net,huntc@internode.on.net,15/Dec/08 05:48,31/Jul/09 06:33,14/Mar/19 02:42,15/Dec/08 08:17,1.5.0,,,,,,,,,,1.6.0,2.0-M1,,camel-mina,,,,0,"Use of the vm protocol appears to ignore any codec options. There could be other options that are missed also.

Using the same URI but for tcp works fine.","Mac OS X, Java 1.5",,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-12-15 08:17:21.675,,,no_permission,,,,,,,,,,,,,76924,,,Fri Jul 31 06:33:52 UTC 2009,,,,,,,0|i01gvb:,6502,,,,,,,,,"15/Dec/08 08:17;davsclaus;Is committed to both 2.0 and 1.5.1

",31/Jul/09 06:33;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Clean build of 1.5.x does not work,CAMEL-1182,12486825,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,11/Dec/08 07:11,21/Nov/09 11:56,14/Mar/19 02:42,11/Dec/08 07:38,,,,,,,,,,,1.6.0,,,,,,,0,http://www.nabble.com/Clean-build-of-1.5.x-does-not-work-td20949929s22882.html,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-11-21 11:56:56.683,,,no_permission,,,,,,,,,,,,,76925,,,Sat Nov 21 11:56:56 UTC 2009,,,,,,,0|i01gu7:,6497,,,,,,,,,11/Dec/08 07:38;njiang;Applied patch with thanks to Ivan.,21/Nov/09 11:56;davsclaus;Closing all 1.6.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
html manuals are not deploying,CAMEL-1170,12486388,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,janstey,janstey,09/Dec/08 16:18,31/Jul/09 06:33,14/Mar/19 02:42,10/Dec/08 13:37,,,,,,,,,,,1.6.0,2.0-M1,,,,,,0,"No html manual here http://repo2.maven.org/maven2/org/apache/camel/camel-manual/1.5.0/
or here http://people.apache.org/maven-snapshot-repository/org/apache/camel/camel-manual/2.0-SNAPSHOT/",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-07-31 06:33:50.507,,,no_permission,,,,,,,,,,,,,76926,,,Fri Jul 31 06:33:50 UTC 2009,,,,,,,0|i01grj:,6485,,,,,,,,,"10/Dec/08 13:37;janstey;Sending        camel-manual/pom.xml
Transmitting file data .
Committed revision 725277.
",31/Jul/09 06:33;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Aggregator must be the only output added to the route is fooled by onException,CAMEL-1150,12486490,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,davsclaus,davsclaus,davsclaus,06/Dec/08 09:48,31/Jul/09 06:33,14/Mar/19 02:42,06/Dec/08 10:56,1.5.0,,,,,,,,,,1.6.0,2.0-M1,,camel-core,,,,0,"See nabble:
http://www.nabble.com/Redelivery-Strategy-td20861316s22882.html

We should convert the 
        if (!getOutputs().isEmpty()) {
            throw new IllegalArgumentException(""Aggregator must be the only output added to the route: "" + this);
        }

ïnto a WARN log until we get the aggreagator fixed so you can define it anywhere in the route path. We have a ticket for this bug also.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76927,,,Fri Jul 31 06:33:47 UTC 2009,,,,,,,0|i01gn3:,6465,,,,,,,,,"06/Dec/08 10:56;davsclaus;D:\project\camel\camel-core>svn commit --message ""CAMEL-1150: Fixed aggregator not working with onException in a route""
Sending        camel-core\src\main\java\org\apache\camel\model\ProcessorType.java
Sending        camel-core\src\main\java\org\apache\camel\util\CollectionHelper.java
Adding         camel-core\src\test\java\org\apache\camel\processor\aggregator\AggregatorAndOnExceptionTest.java
Transmitting file data ...
Committed revision 723966.


And for 1.x branch
Committed revision 723967.",06/Dec/08 10:56;davsclaus;Will now log at WARN instead,31/Jul/09 06:33;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-mina adds two versions of slf4j on the classpath,CAMEL-1146,12486481,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,janstey,janstey,04/Dec/08 15:24,31/Jul/09 06:33,14/Mar/19 02:42,04/Dec/08 16:42,1.5.0,,,,,,,,,,1.6.0,2.0-M1,,camel-mina,,,,0,"One version comes from camel-mina (version 1.5.5) and one from mina-core (version 1.4.3). This causes problems as seen when trying to use camel-mina at runtime or in my case deploying to ServiceMix. This is the error I get

{code}
org.apache.xbean.kernel.ServiceRegistrationException: java.lang.NoSuchFieldError: name
	at org.apache.xbean.kernel.standard.ServiceManagerRegistry.registerService(ServiceManagerRegistry.java:424)
	at org.apache.xbean.kernel.standard.StandardKernel.registerService(StandardKernel.java:220)
	at org.apache.xbean.server.spring.loader.SpringLoader.load(SpringLoader.java:152)
	at org.apache.servicemix.common.xbean.AbstractXBeanDeployer.deploy(AbstractXBeanDeployer.java:83)
	at org.apache.servicemix.camel.CamelSpringDeployer.deploy(CamelSpringDeployer.java:83)
	at org.apache.servicemix.common.BaseServiceUnitManager.doDeploy(BaseServiceUnitManager.java:88)
	at org.apache.servicemix.common.BaseServiceUnitManager.deploy(BaseServiceUnitManager.java:69)
	at org.apache.servicemix.jbi.framework.DeploymentService.deployServiceAssembly(DeploymentService.java:508)
	at org.apache.servicemix.jbi.framework.AutoDeploymentService.checkPendingSAs(AutoDeploymentService.java:482)
	at org.apache.servicemix.jbi.framework.AutoDeploymentService.checkPendingComponents(AutoDeploymentService.java:535)
	at org.apache.servicemix.jbi.framework.AutoDeploymentService.updateSharedLibrary(AutoDeploymentService.java:317)
	at org.apache.servicemix.jbi.framework.AutoDeploymentService.updateArchive(AutoDeploymentService.java:254)
	at org.apache.servicemix.jbi.framework.AutoDeploymentService.monitorDirectory(AutoDeploymentService.java:667)
	at org.apache.servicemix.jbi.framework.AutoDeploymentService.access$800(AutoDeploymentService.java:62)
	at org.apache.servicemix.jbi.framework.AutoDeploymentService$1.run(AutoDeploymentService.java:631)
	at java.util.TimerThread.mainLoop(Timer.java:512)
	at java.util.TimerThread.run(Timer.java:462)
Caused by: java.lang.NoSuchFieldError: name
	at org.slf4j.impl.SimpleLogger.<init>(SimpleLogger.java:83)
	at org.slf4j.impl.SimpleLoggerFactory.getLogger(SimpleLoggerFactory.java:67)
	at org.slf4j.LoggerFactory.getLogger(LoggerFactory.java:103)
	at org.apache.mina.util.NamePreservingRunnable.<init>(NamePreservingRunnable.java:32)
	at org.apache.mina.transport.socket.nio.SocketAcceptor.startupWorker(SocketAcceptor.java:165)
	at org.apache.mina.transport.socket.nio.SocketAcceptor.bind(SocketAcceptor.java:141)
	at org.apache.camel.component.mina.MinaConsumer.doStart(MinaConsumer.java:60)
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:47)
	at org.apache.camel.impl.DefaultCamelContext.addService(DefaultCamelContext.java:421)
	at org.apache.camel.impl.DefaultCamelContext.startRoutes(DefaultCamelContext.java:659)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:632)
	at org.apache.camel.spring.SpringCamelContext.maybeDoStart(SpringCamelContext.java:167)
	at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:162)
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:47)
	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:97)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:116)
	at org.springframework.context.event.SimpleApplicationEventMulticaster$1.run(SimpleApplicationEventMulticaster.java:77)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:49)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:75)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:246)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:617)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:355)
	at org.apache.xbean.server.spring.configuration.SpringConfiguration.<init>(SpringConfiguration.java:63)
	at org.apache.xbean.server.spring.configuration.SpringConfigurationServiceFactory.createService(SpringConfigurationServiceFactory.java:106)
	at org.apache.xbean.kernel.standard.ServiceManager.start(ServiceManager.java:420)
	at org.apache.xbean.kernel.standard.ServiceManager.initialize(ServiceManager.java:200)
	at org.apache.xbean.kernel.standard.RegistryFutureTask$RegisterCallable.call(RegistryFutureTask.java:110)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:269)
	at java.util.concurrent.FutureTask.run(FutureTask.java:123)
	at org.apache.xbean.kernel.standard.ServiceManagerRegistry.registerService(ServiceManagerRegistry.java:409)
{code}

 ",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-12-10 10:51:57.099,,,no_permission,,,,,,,,,,,,,76928,,,Fri Jul 31 06:33:47 UTC 2009,,,,,,,0|i01gm7:,6461,,,,,,,,,04/Dec/08 18:08;janstey;FYI I added a test case in ServiceMix for this here https://issues.apache.org/activemq/browse/SM-1720,"10/Dec/08 10:51;huntc@internode.on.net;Hi there,

Is this able to be worked around in 1.5.0? I tried excluding either slf4j from the camel-mina dependency but to no avail.

As a further question, should this problem cause Mina to stop working?

Kind regards,
Christopher","10/Dec/08 11:16;huntc@internode.on.net;I think I have a 1.5.0 work-around - it appears to work for me. Can you please confirm:

		<dependency>
			<groupId>org.apache.camel</groupId>
			<artifactId>camel-mina</artifactId>
			<version>1.5.0</version>
			<exclusions>
				<!--  This exclusion is a 1.5.0 work-around for CAMEL-1146 -->
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-simple</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<!--  This dependency is a 1.5.0 work-around for CAMEL-1146 -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-simple</artifactId>
			<version>1.5.5</version>
		</dependency>

","10/Dec/08 12:52;janstey;Hi Christopher,

The work-around I have been using is this:

{code}
<dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-mina</artifactId>
      <version>1.5.0</version>
        <exclusions>
          <exclusion>
            <groupId>org.apache.mina</groupId>
            <artifactId>mina-core</artifactId>
          </exclusion>
        </exclusions>
    </dependency>
    <dependency>
      <groupId>org.apache.mina</groupId>
      <artifactId>mina-core</artifactId>
      <version>1.1.7</version>
      <exclusions>
        <exclusion>
          <groupId>org.slf4j</groupId>
          <artifactId>slf4j-simple</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.slf4j</groupId>
          <artifactId>slf4j-api</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
{code}

The different version of slf4j seems to have no affect on mina (all mina unit tests passed) so all should be well. 
",31/Jul/09 06:33;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CxfExchange does not copy unit of work and thus its null and thus NPE is thrown,CAMEL-1145,12485624,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,davsclaus,davsclaus,04/Dec/08 11:42,31/Jul/09 06:33,14/Mar/19 02:42,05/Dec/08 10:05,1.5.0,,,,,,,,,,1.6.0,2.0-M1,,camel-cxf,,,,0,"William could you check this error reported by end user

See nabble:
http://www.nabble.com/UnitOfWork-td20829434s22882.html",,,,,,,,,,,,,,,,,04/Dec/08 13:07;boriss;RouteBuilderCxfTracer.java;https://issues.apache.org/jira/secure/attachment/12462666/RouteBuilderCxfTracer.java,04/Dec/08 13:07;boriss;TestJiraRoute.java;https://issues.apache.org/jira/secure/attachment/12462730/TestJiraRoute.java,04/Dec/08 13:07;boriss;context-jira.xml;https://issues.apache.org/jira/secure/attachment/12462794/context-jira.xml,,,3.0,,,,,,,,,,,,,,,,,,,2008-12-04 12:16:25.688,,,no_permission,,,,,,,,,,,,,76929,,,Fri Jul 31 06:33:46 UTC 2009,,,,,,,0|i01glz:,6460,,,,,,,,,04/Dec/08 12:16;boriss;additionally you will need some log4j configuration in your classpath,"04/Dec/08 12:34;njiang;Hi Boris

Can you grant ASF license to the files which you submited ?
I want to put them into the repository as a part of  the the camel-cxf unit test. You can change it from this link[1]

[1] https://issues.apache.org/activemq/secure/ManageAttachments.jspa?id=28688

Willem",04/Dec/08 13:07;boriss;Now with the grant license.,31/Jul/09 06:33;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Exceptions thrown from converters are not correctly handled,CAMEL-1144,12486461,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,davsclaus,pledge,pledge,04/Dec/08 10:44,31/Jul/09 06:33,14/Mar/19 02:42,04/Dec/08 13:38,1.5.0,,,,,,,,,,1.6.0,2.0-M1,,camel-core,,,,0,"Related nabble: http://www.nabble.com/Handling-converter-failure-td20830148s22882.html

When an exception is thrown from a @Converter it is not correctly handled by onException.  The handler is receiving a RuntimeCamelException and not checking the cause when determining the best handler.

{code}
/////Converter
@Converter
public static LocalDateTime toLocalDateTime(final Object localDateTime)
{
  System.out.println(""Converting to local date time"");
  throw new IllegalArgumentException(""Bad data"");
}

/////Routes
Routes routes = new RouteBuilder() {

  @Override
  public void configure() throws Exception {
    onException(IllegalArgumentException.class).handled(true).to(""mock:exception"");
    from(""direct:test"").convertBodyTo(LocalDateTime.class).to(""mock:end"");
  }
};


/////Test
MockEndpoint endpoint = (MockEndpoint)
camelContext.getEndpoint(""mock:end"");
endpoint.expectedMessageCount(0);
MockEndpoint endpoint2 = (MockEndpoint)
camelContext.getEndpoint(""mock:exception"");
endpoint2.expectedMessageCount(1);

camelContext.createProducerTemplate().sendBody(""direct:test"", ""test"");

endpoint.assertIsSatisfied();
endpoint2.assertIsSatisfied();

{code}",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-12-04 10:49:38.657,,,no_permission,,,,,,,,,,,,,76930,,,Fri Jul 31 06:33:46 UTC 2009,,,,,,,0|i01glr:,6459,,,,,,,,,"04/Dec/08 10:49;davsclaus;Just to give a workaround.

Use onException(Exception.class).onWhen(bean(IsThisTheExceptionIWant.class)) and implement the logic in your own POJO

","04/Dec/08 12:52;davsclaus;This new rule applies:
- If the thrown exception has a caused by then this exception is used for selection, if no match found the original exception is used for selection instead


I was wondering if we should do this cause by check for all the entire exception hierarchy starting from the bottom and then recurring up?

1) RuntimeCamelException
2) +IOException
3)    + FileNotFoundException

So Camel will start with (3) and then match up the tree until (1)

Currently we support tree level 1+2 but I guess we should support all levels and start from the bottom, the real cause!","04/Dec/08 13:11;davsclaus;Okay got the tree fixed by introducing an iterator that walks the order we would like.

Other implementations could extend and use their own ordering.


    /**
     * Iterator that walks the exception hieracy in the order we should match.
     * <p/>
     * Will default walk from bottom upwards to the root exception
     */
    protected class ExceptionIterator implements Iterator<Throwable> {
","04/Dec/08 13:27;davsclaus;D:\project\camel\camel-core>svn commit --message ""CAMEL-1144: DefaultExceptionPolicyStrategy now tests caused by exceptions (using bottom to top exception hieracy iterator)""
Sending        camel-core\src\main\java\org\apache\camel\processor\exceptionpolicy\DefaultExceptionPolicyStrategy.java
Adding         camel-core\src\test\java\org\apache\camel\processor\onexception\OnExceptionWrappedExceptionTest.java
Transmitting file data ..
Committed revision 723314.
",04/Dec/08 13:38;davsclaus;Committed revision 723319. in 1.5 branch,"04/Dec/08 13:39;davsclaus;PS: I have updated the wiki at exception clause trying to explain how camel works when it select which onException to use.

section: Exception Policy
http://cwiki.apache.org/confluence/display/CAMEL/Exception+Clause",31/Jul/09 06:33;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MinaProducer - when remote session closed it should raise exception,CAMEL-1140,12485881,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,03/Dec/08 09:29,31/Jul/09 06:33,14/Mar/19 02:42,03/Dec/08 14:12,1.5.0,,,,,,,,,,1.6.0,2.0-M1,,camel-mina,,,,0,"See nabble:
http://www.nabble.com/camel-mina-in-servicemix---how-to-process-TCP-response--td20794416s22882.html",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76931,,,Fri Jul 31 06:33:46 UTC 2009,,,,,,,0|i01gkv:,6455,,,,,,,,,"03/Dec/08 13:16;davsclaus;D:\project\camel\components\camel-mina>svn commit --message ""CAMEL-1140: MinaProducer now throws CamelExchangeException if no message received from remote server when sync=true""
Sending        camel-mina\src\main\java\org\apache\camel\component\mina\MinaProducer.java
Sending        camel-mina\src\test\java\org\apache\camel\component\mina\MinaCustomCodecTest.java
Adding         camel-mina\src\test\java\org\apache\camel\component\mina\MinaNoResponseFromServerTest.java
Sending        camel-mina\src\test\java\org\apache\camel\component\mina\MinaProducerShutdownMockTest.java
Sending        camel-mina\src\test\java\org\apache\camel\component\mina\MinaProducerShutdownTest.java
Sending        camel-mina\src\test\java\org\apache\camel\component\mina\MinaTcpTest.java
Sending        camel-mina\src\test\java\org\apache\camel\component\mina\MinaTcpTextlineDelimiterTest.java
Sending        camel-mina\src\test\java\org\apache\camel\component\mina\MinaTcpTextlineProtocolTest.java
Transmitting file data ........
Committed revision 722878.",03/Dec/08 14:11;davsclaus;Committed revision 722893. for 1.5.1 branch,31/Jul/09 06:33;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Memory leak in FileConsumer,CAMEL-1138,12486223,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,davsclaus,hadrian,hadrian,02/Dec/08 16:36,23/Mar/09 08:40,14/Mar/19 02:42,03/Dec/08 17:15,1.5.0,,,,,,,,,,1.6.0,2.0-M1,,camel-core,,,,0,"Using a memory profiler, we've identified what appears to be a substantial memory leak in FileConsumer in Camel 1.5.0.  It appears that the noopMap is constantly having items added to it, but nothing performs a remove on it when the file is consumed.  This causes a very large amount of string data to be accumulated in the heap.  In our application, this was a leak of several hundred megabytes and is a showstopper.   Considering the apparent severity of this issue, it would really be nice if a fix could be incorporated into a 1.5.1 version. 

http://www.nabble.com/Memory-leak-in-FileConsumer-in-Camel-1.5.0-td20794405s22882.html#a20794405",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-12-02 18:14:49.986,,,no_permission,,,,,,,,,,,,,76932,,,Wed Dec 03 15:55:41 UTC 2008,,,,,,,0|i01gkf:,6453,,,,,,,,,"02/Dec/08 18:14;davsclaus;This is *fixed in 2.0* as we have removed all this troublesome code.

For 1.5.1 I suggest to replace the noopMap with the LRUCahce Map so it keeps up till 1000 files and nothing more.","03/Dec/08 08:16;davsclaus;These maps is part of some code logic to determine if the file has been changed using timestamp and filesize checks. All this code has been @deprecated and removed in 2.0.
It leads to unexpected behavior and is hard to test. And shouldn't generally be used.

If you use file connectivity then you should either delete or move files after they are processed and not keep then around. 
As a fix for this in 1.5.1 I have added the LRUCache so the maps will contain at most 1000 elements. ","03/Dec/08 08:30;davsclaus;D:\project\camel-1x\camel-core>svn commit --message ""CAMEL-1138: Quick fix for file consumer not freeing memory""
Sending        camel-core\src\main\java\org\apache\camel\component\file\FileConsumer.java
Transmitting file data .
Committed revision 722808.",03/Dec/08 14:13;davsclaus;Hadrian is the current quick fix okay?,"03/Dec/08 15:18;hadrian;I think so.  It actually solves the leak problem.

The side effect is that if a file is not moved/renamed after 1000 other entries/files it will disappear from the lru cache and look new again and get reprocessed, which may also lead to an infinite loop (that would make another one of those 1000+ files new/out of cache, and so on).  However I don't think this scenario is a valid one as it has other flaws, such as the fact that the state is lost after a camel restart, so files would get processed again in that case too (a comment in the code mentions that, actually).

I would add a warn in the wiki that not renaming/moving files is a dangerous scenario and should not be used.  ",03/Dec/08 15:55;hadrian;I think we can close this issue.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TestEndpointTest  Unit test failed which may be caused by recent change of File Component,CAMEL-1135,12486432,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,njiang,njiang,01/Dec/08 14:36,31/Jul/09 06:33,14/Mar/19 02:42,02/Dec/08 07:40,2.0.0,,,,,,,,,,2.0-M1,,,camel-core,,,,0,"Here are the stack trace of the TestEndpointTest.testMocksAreValid on different machines

org.apache.camel.component.test.TestEndpointTest.testMocksAreValid =================
java.lang.AssertionError: test:file://src/test/data?noop=true&consumer.recursive=true&consumer.delay=2000 Received message count. Expected: <567> but was: <78>
	at org.apache.camel.component.mock.MockEndpoint.fail(MockEndpoint.java:712)
	at org.apache.camel.component.mock.MockEndpoint.assertEquals(MockEndpoint.java:694)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:238)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:214)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:141)
	at org.apache.camel.component.test.TestEndpointTest.testMocksAreValid(TestEndpointTest.java:49)

org.apache.camel.component.test.TestEndpointTest.testMocksAreValid =================
java.lang.AssertionError: test:file://src/test/data?noop=true&consumer.recursive=true&consumer.delay=2000 Received message count. Expected: <219> but was: <78>
	at org.apache.camel.component.mock.MockEndpoint.fail(MockEndpoint.java:712)
	at org.apache.camel.component.mock.MockEndpoint.assertEquals(MockEndpoint.java:694)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:238)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:214)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:141)
	at org.apache.camel.component.test.TestEndpointTest.testMocksAreValid(TestEndpointTest.java:49)

I don't know why the test endpoint could get so many received message.
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-12-01 14:42:52.123,,,no_permission,,,,,,,,,,,,,76933,,,Fri Jul 31 06:33:46 UTC 2009,,,,,,,0|i01gjr:,6450,,,,,,,,,"01/Dec/08 14:42;davsclaus;It's my bad. I will fix it soon. Running full unit test now, so 10 min.

It's in camel-spring that I dont test as often as camel-core",31/Jul/09 06:33;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MockEndpont.expectedMinimumMessageCount() doesn't work right,CAMEL-1125,12486410,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,28/Nov/08 07:14,31/Jul/09 06:33,14/Mar/19 02:42,28/Nov/08 07:23,1.3.0,1.4.0,1.5.0,,,,,,,,1.6.0,2.0-M1,,camel-core,,,,0,"In MockEndpoint.assertIsSatisfied(), don't use the right counter for assertion.

{code}      
      if (expectedMinimumCount >= 0) {
            int receivedCounter = getReceivedCounter();
            assertTrue(""Received message count "" + receivedCounter + "", expected at least "" + expectedCount, expectedCount <= receivedCounter);
        }
{code}

it should be change to 
{code}      
      if (expectedMinimumCount >= 0) {
            int receivedCounter = getReceivedCounter();
            assertTrue(""Received message count "" + receivedCounter + "", expected at least "" + expectedMinimumCount, expectedMinimumCount <= receivedCounter);
        }
{code}",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-07-31 06:33:45.224,,,no_permission,,,,,,,,,,,,,76934,,,Fri Jul 31 06:33:45 UTC 2009,,,,,,,0|i01ghj:,6440,,,,,,,,,28/Nov/08 07:23;njiang;Applied this patch into trunk and camel-1.x branch.,31/Jul/09 06:33;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
commons-csv contains SNAPHSOT dependency,CAMEL-1123,12486408,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,janstey,janstey,27/Nov/08 13:30,31/Jul/09 06:33,14/Mar/19 02:42,27/Nov/08 13:50,1.5.0,,,,,,,,,,1.6.0,2.0-M1,,,,,,0,This could be bad if commons-sandbox-parent 3-SNAPSHOT ever gets removed (the build will break). ServiceMix has a version of commons-csv without this SNAPSHOT dependency. I'm going to try switching to that one.,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-07-31 06:33:45.182,,,no_permission,,,,,,,,,,,,,76935,,,Fri Jul 31 06:33:45 UTC 2009,,,,,,,0|i01gh3:,6438,,,,,,,,,31/Jul/09 06:33;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel should propagate exception cause in InOnly scenarios,CAMEL-1122,12486409,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,janstey,janstey,26/Nov/08 11:21,31/Jul/09 06:33,14/Mar/19 02:42,26/Nov/08 13:05,1.5.0,,,,,,,,,,1.6.0,2.0-M1,,,,,,0,"In the case an exception is handled by the DeadLetterChannel, Camel will currently set the exception to null and add an exchange property containing the exception. We should also add this as a message header so that it will be propagated to external services, like a JBI service.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-07-31 06:33:44.458,,,no_permission,,,,,,,,,,,,,76936,,,Fri Jul 31 06:33:44 UTC 2009,,,,,,,0|i01ggv:,6437,,,,,,,,,26/Nov/08 13:05;janstey;Fixed on trunk and 1.x,31/Jul/09 06:33;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"HttpProducer discards response headers, if response code >= 300",CAMEL-1119,12486398,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,trev,trev,26/Nov/08 10:19,31/Jul/09 06:33,14/Mar/19 02:42,30/Nov/08 14:09,1.5.0,,,,,,,,,,1.6.0,2.0-M1,,camel-http,,,,0,"In Camel 1.4.0, when a Web server sends an error page to HttpProducer, the Camel route can access the response headers that were sent by the server.  In Camel 1.5.0, these headers are discarded by HttpProducer, so the Camel route cannot access them.

Camel 1.5.0 also discards the _content_ of the error page, but that was fixed in [CAMEL-1083|https://issues.apache.org/activemq/browse/CAMEL-1083].

See discussion: [HttpProducer: how to access the body of an error page?|http://www.nabble.com/HttpProducer%3A-how-to-access-the-body-of-an-error-page--to20475651s22882.html]",,,,,,,,,,,,,,,,,26/Nov/08 10:32;trev;camel_1119.patch;https://issues.apache.org/jira/secure/attachment/12462664/camel_1119.patch,30/Nov/08 13:11;trev;camel_1119_b.patch;https://issues.apache.org/jira/secure/attachment/12462728/camel_1119_b.patch,,,,2.0,,,,,,,,,,,,,,,,,,,2008-11-26 11:14:50.329,,,no_permission,,,,,,,,,,,,,76937,,,Fri Jul 31 06:33:44 UTC 2009,,,Patch Available,,,,0|i01gg7:,6434,Regression,,,,,,,,26/Nov/08 11:14;davsclaus;Applied patch with thanks to Trev,"30/Nov/08 13:11;trev;This will be more self-explanatory if the field name is responseHeaders
instead of just headers.  It will be obvious that responseHeaders is
closely associated with responseBody, and it will help distinguish these
headers from the several other kinds of headers that are found in Camel.

I don't know why I didn't name it this way in the first place.  Must
have been operating with insufficient caffeine, I suppose.

Attached: [^camel_1119_b.patch]","30/Nov/08 14:09;davsclaus;Hi Trev

Thanks for the b patch. I have commited it to 2.0 and 1.5.1","05/Jan/09 17:39;anielson;Claus,

Was it commited to 1.5.1.0?

B.R.","05/Jan/09 18:05;janstey;Anderson,

This fix made it into the 1.5.2.0 version of Camel from FUSE. See release notes here http://fusesource.com/wiki/display/ProdInfo/FUSE+Mediation+Router+v1.5+Release+Notes

Cheers,
Jon",31/Jul/09 06:33;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SFTP endpoint does not peform host key verification,CAMEL-1118,12485829,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,janstey,janstey,25/Nov/08 17:35,31/Jul/09 06:33,14/Mar/19 02:42,25/Nov/08 17:46,1.5.0,,,,,,,,,,1.6.0,2.0-M1,,,,,,0,Camel does allow users to configure JSch with a known_hosts file. This makes the users vulnerable to man in the middle type attacks.,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-11-25 17:53:06.564,,,no_permission,,,,,,,,,,,,,76938,,,Fri Jul 31 06:33:44 UTC 2009,,,,,,,0|i01gfz:,6433,,,,,,,,,"25/Nov/08 17:38;janstey;Sending        camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileConfiguration.java
Sending        camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpEndpoint.java
Sending        camel-ftp/src/test/java/org/apache/camel/component/file/remote/UriConfigurationTest.java
Transmitting file data ...
Committed revision 720547.

Also should mention that Dave Stanley came up with the fix for this. Many thanks Dave!","25/Nov/08 17:53;davsclaus;This is the Wiki police - not so fast young boy, you must add the new option to the FTP wiki page
http://activemq.apache.org/camel/ftp.html","25/Nov/08 18:04;janstey;Hahahahaha :) Busted!

Will update it now ;)",31/Jul/09 06:33;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HttpProducer - Side effect of using URI-based endpoint config disables POST method use,CAMEL-1111,12486379,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,majikshoe,majikshoe,24/Nov/08 02:35,31/Jul/09 06:33,14/Mar/19 02:42,24/Nov/08 19:33,1.5.0,,,,,,,,,,1.6.0,2.0-M1,,camel-http,,,,0,"Hello all,

I'm using Camel HTTP component to send data across to HTTP web services.  Of course we need to POST this data over, and it's all been peachy until I started on a storycard to implement error handling and retry on timeouts.

Following the docco here (http://activemq.apache.org/camel/http.html), I made the same change to my endpoint to include {{?httpClient.SoTimeout=5000}}, and that's when the problems started.

After stepping through the code, I have now found that Camel thinks ""httpClient.soTimeout"" is actually a query string parameter that I want to pass across to the remote service, when it is not - it's just a configuration option for the HTTPClient.  Perhaps Camel needs a QueryStringFilter (or something like it) so that it can distinguish configuration options as opposed to real GET method parameters, or maybe for now ignore any parameters beginning with {{httpClient}}.

Filing as a bug for now because at the very least, the documentation should be updated to highlight the limitation of only allowing GET methods when URI-based configuration is employed.  I haven't identified a workaround yet (using Spring DSL) but I'm sure it won't be too difficult.

Thanks!
Jason",Any,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-11-24 09:22:01.92,,,no_permission,,,,,,,,,,,,,76939,,,Fri Jul 31 06:33:43 UTC 2009,,,,,,,0|i01gef:,6426,,,,,,,,,"24/Nov/08 09:22;davsclaus;I think this is fixed in 1.5.1 where I recently fixed some related issues.

Basically it should remove the httpClient.XXX options from the URI so it will revert to POST.

However you can force it to use POST see the wiki",24/Nov/08 19:33;davsclaus;Fixed by CAMEL-1107,31/Jul/09 06:33;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ParallelProcessing and executor flags are ignored in Multicast processor,CAMEL-1108,12486351,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,vadimos,vadimos,21/Nov/08 20:33,31/Jul/09 06:33,14/Mar/19 02:42,27/Nov/08 20:50,1.5.0,,,,,,,,,,1.6.0,2.0-M1,,camel-core,,,,0,"The parallelProcessing and executor arguments are ignored in the constructor of MulticastProcessor. 
Here is a call that MulticastType makes
{code:title=org.apache.camel.model.MulticastType.java}
    return new MulticastProcessor(list, aggregationStrategy, isParallelProcessing(), threadPoolExecutor);
{code}
MulticastProcessor ignores parallelProcessing and executor arguments and invokes a chain constructor with ""..,false, null,..""
{code:title=org.apache.camel.processor.MulticastProcessor.java}
    public MulticastProcessor(Collection<Processor> processors, AggregationStrategy aggregationStrategy, boolean parallelProcessing, ThreadPoolExecutor executor) {
        this(processors, aggregationStrategy, false, null, false);
    }

    public MulticastProcessor(Collection<Processor> processors, AggregationStrategy aggregationStrategy, boolean parallelProcessing, ThreadPoolExecutor executor, boolean streaming) {
        notNull(processors, ""processors"");
        this.processors = processors;
        this.aggregationStrategy = aggregationStrategy;
        this.isParallelProcessing = parallelProcessing;
        if (isParallelProcessing) {
            if (executor != null) {
                this.executor = executor;
            } else { 
                // setup default Executor
                this.executor = new ThreadPoolExecutor(processors.size(), processors.size(), 0, TimeUnit.MILLISECONDS, new ArrayBlockingQueue<Runnable>(processors.size()));
            }
        }
        this.streaming = streaming;
    }
{code}

Attached a patch but have not tested it. Also need a unit test for this.","Windows XP, Java 6",,,,,,,,,,,,,,,,21/Nov/08 20:33;vadimos;ASF.LICENSE.NOT.GRANTED--MulticastProcessor.java;https://issues.apache.org/jira/secure/attachment/12462715/ASF.LICENSE.NOT.GRANTED--MulticastProcessor.java,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-11-22 03:39:40.191,,,no_permission,,,,,,,,,,,,,76940,,,Fri Jul 31 06:33:43 UTC 2009,,,Patch Available,,,,0|i01gdr:,6423,,,,,,,,,"22/Nov/08 03:39;njiang;Hi Vadim,

Thanks for patching this. 
Can you use svn diff  to create the patch and grand it with ASF license ?
Also the Unit test should help us to review your patch more quickly :).

Willem
",27/Nov/08 07:09;davsclaus;Vadim any update on this one? As Willem writes please resubmit the patch with the ASF license granted.,"27/Nov/08 20:50;davsclaus;I did some code polishing and found the issue myself.

I have fixed it in 2.0 and 1.x","28/Nov/08 22:56;vadimos;Sorry, I could not get to it. Thanks for fixing the issue.

vadim",31/Jul/09 06:33;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-http - does not remove httpClient.xxx URI options,CAMEL-1107,12486090,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,21/Nov/08 10:23,31/Jul/09 06:33,14/Mar/19 02:42,21/Nov/08 18:43,1.5.0,,,,,,,,,,1.6.0,2.0-M1,,camel-http,,,,0,"When using the options to configure httpClient using URI option, they should be removed from the uri that is left over to the HTTPProducer.

{code}
http://someserver?httpClient.soTimeOut=5000
{code}

should remove the httpClient.xxx so it's
{code}
http://someserver
{code}


",,,,,,,,,,,CAMEL-1111,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76941,,,Fri Jul 31 06:33:43 UTC 2009,,,,,,,0|i01gdj:,6422,,,,,,,,,21/Nov/08 10:24;davsclaus;Will be fixed in a patch for other issues,21/Nov/08 18:43;davsclaus;I have also added httpClient.XXX options configuration of camel-jetty as well,31/Jul/09 06:33;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Delayer not working as expected.,CAMEL-1103,12486279,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,gistenjunge,gistenjunge,19/Nov/08 16:13,31/Jul/09 06:33,14/Mar/19 02:42,19/Nov/08 19:55,1.5.0,,,,,,,,,,1.6.0,2.0-M1,,camel-core,,,,0,"The delayer expression is not evaluated in my route builder:

from(waitQueueName).delayer(header(HEADER_EXECUTION_TIME)).bean(routerBean).recipientList(header(HEADER_TARGET_ROUTE));

While the recipientList expression is working the header expression is always ignored. I stepped through the code and saw that in DelayerType.createAbsoluteTimeDelayExpression() ""expr.getLanguage()"" is always null:

    private Expression createAbsoluteTimeDelayExpression(RouteContext routeContext) {
        ExpressionType expr = getExpression();
        if (expr != null) {
            if (ObjectHelper.isNotNullAndNonEmpty(expr.getLanguage())) {
                return expr.createExpression(routeContext);
            }
        }
        return null;
    }

I have seen that this was changed in 1.5.0 (http://issues.apache.org/activemq/browse/CAMEL-811). 
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-11-19 18:34:19.527,,,no_permission,,,,,,,,,,,,,76942,,,Fri Jul 31 06:33:42 UTC 2009,,,,,,,0|i01gcn:,6418,,,,,,,,,"19/Nov/08 18:34;davsclaus;A workaround is of course to use your own BEAN or processor to do the sleep yourself.

I am sure we will get this fixed in 1.5.1 and 2.0 in a short time. But I am a bit busy until the weekend.",19/Nov/08 18:44;janstey;I'll give it a quick look since I touched the delayer last :),19/Nov/08 19:55;janstey;Fixed this in rev 719041 on trunk and will shortly merge it to the 1.5 fixes branch.,31/Jul/09 06:33;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Multicast swallows exception,CAMEL-1100,12486276,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,ulmi,ulmi,19/Nov/08 09:34,31/Jul/09 06:33,14/Mar/19 02:42,04/Jan/09 08:34,1.5.0,,,,,,,,,,1.6.0,2.0-M1,,camel-core,,,,0,"if I use the following spring-xml, the exceptions from 'converter1' get swallowed, and nothing is logged.
As soons as the multicast-tag is removed, the exception appears in the logfile.
Using <multicast parallelProcessing=true> made no difference.

<route>
	<from ref=""queueA"" />
	<bean ref=""mapper"" method=""map"" />
	<multicast>
		<pipeline>
			<bean ref=""converter1"" method=""convert"" />
			<to ref=""TopicB"" />
		</pipeline>
		<pipeline>
			<bean ref=""DBpersister"" method=""onMessage"" />
		</pipeline>
	</multicast>
</route>
",WinXP / Jboss 4.2.2 / JDK 1.6,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-12-19 08:12:29.145,,,no_permission,,,,,,,,,,,,,76943,,,Fri Jul 31 06:33:42 UTC 2009,,,,,,,0|i01gbz:,6415,,,,,,,,,"19/Dec/08 08:12;njiang;The issue is caused by current AggregationStrategy take the exchange's exception into consideration.

I just did some change in the UseLatestAggregationStrategy.java for CAMEL-159  to hold the latest exception in the exchange and added a unit test in SplitterTest to test for the propagating exceptions testing.",31/Jul/09 06:33;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jetty - Content-Type should be set on response if provided as OUT header,CAMEL-1095,12486274,12486226,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,16/Nov/08 09:17,03/Dec/12 09:24,14/Mar/19 02:42,21/Nov/08 18:42,1.5.0,,,,,,,,,,1.6.0,2.0-M1,,camel-jetty,,,,0,"The Content-Type is not set in HttpBinding if an end-user has provided one as a OUT header.

So if an user exposes a Jetty service and lets requests fly in that is text/plain and want to return a response that is image/jpeg or the likes the content type can not be set as:
            exchange.getOut().setHeader(""Content-Type"", ""image/jpeg"");
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-12-03 09:24:55.624,,,no_permission,,,,,,,,,,,,,76944,,,Mon Dec 03 09:24:55 UTC 2012,,,,,,,0|i01gav:,6410,,,,,,,,,16/Nov/08 09:22;davsclaus;Content-Length is also missing,"16/Nov/08 09:33;davsclaus;Example as the http headers returned now
{code}
HTTP/1.x 200 OK
Transfer-Encoding: chunked
Server: Jetty(6.1.11)
{code}

And with a code fix we have for the same request:
{code}
HTTP/1.x 200 OK
Content-Type: image/jpeg
Content-Length: 10249
Server: Jetty(6.1.11)
{code}",31/Jul/09 06:33;davsclaus;Closing 2.0m1 tickets,"03/Dec/12 09:24;tosheer;Claus,

We are still facing the mentioned issue.

Camel Version: 2.9.2
Camel Jetty Jar Version 2.9.0

Problem statement: Although I include the statement setHeader(""Content-Type"", ""application/json""); or setHeader(""Content-Type"", ""application/xml"");, upon debugging I can see the following behaviour.

1.) Class ""DefaultHeaderFilterStrategy"", method ""doFiltering"" contains ""Content-Type"" as one of the filters to skip. Thus it removes the ""Content-Type"" from header if mentioned explicitly also.

Please provide the resolution to set the ""Content-Type"" in response header or please let us know in-case we are missing something. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-cxf: Jaxws handler can only be added to the consumer side,CAMEL-1094,12486271,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,wtam@iona.com,wtam@iona.com,15/Nov/08 15:36,31/Jul/09 06:33,14/Mar/19 02:42,16/Nov/08 03:04,,,,,,,,,,,1.6.0,2.0-M1,,camel-cxf,,,,0,"Here is a email thread on this issue.   Basically, the CxfProducer rrelies on Jaxws/ClientFactoryBean to create a client object.  However, JaxwsClientFactoryBean does not support setting and building jaxws handler chain.   Even if it did, we would still have to replicate the same logics (that build the handler chain) in Camel's CxfClientFactoryBean because it CxfClientFactoryBean is a hybrid of both Jaxws and simple client frontend.

http://www.nabble.com/camel-cxf-jaxws-handler-support-td20512478s22882.html
",,,,,,,,,,,,,,,,,15/Nov/08 15:42;wtam@iona.com;CAMEL-1094.patch;https://issues.apache.org/jira/secure/attachment/12462661/CAMEL-1094.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-11-16 03:04:00.891,,,no_permission,,,,,,,,,,,,,76945,,,Fri Jul 31 06:33:42 UTC 2009,,,,,,,0|i01gan:,6409,,,,,,,,,15/Nov/08 15:42;wtam@iona.com;The patch was done on the 1.x.  Please review it  We will need to update the document and mention that SEI must be an interface.,"16/Nov/08 03:04;njiang;Applied the patch into trunk and camel-1.x branch with thanks to William.
Also updated the camel-cxf wiki page.","16/Nov/08 06:54;davsclaus;I think the SEI change needs to be documented on the release notes for 1.5.1 and 2.0 that it *must* be an interface now.

http://activemq.apache.org/camel/camel-151-release.html
http://activemq.apache.org/camel/camel-200-release.html",31/Jul/09 06:33;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jetty - Exchange failures should not be returned as 200,CAMEL-1093,12485789,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,15/Nov/08 11:01,31/Jul/09 06:33,14/Mar/19 02:42,21/Nov/08 18:43,1.5.0,,,,,,,,,,1.6.0,2.0-M1,,camel-jetty,,,,0,"The code below:

{code}
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            public void configure() throws Exception {
                errorHandler(noErrorHandler());
                from(""jetty:http://localhost:8080/myapp/myservice"").process(new MyBookService());
            }
        };
    }

    public class MyBookService implements Processor {
        public void process(Exchange exchange) throws Exception {
            throw new IllegalArgumentException(""Damm"");
        }
    }
{code}

Will return http response code 200. We should let end users easily set what response code they want and in case of route failures we should probably return 500 and return the stracktrace in the body",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76946,,,Fri Jul 31 06:33:41 UTC 2009,,,,,,,0|i01gaf:,6408,,,,,,,,,15/Nov/08 11:10;davsclaus;HttpBinding should test for failures,31/Jul/09 06:33;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
core\src\main\java\org\apache\camel\util\ResolverUtil.java has dependency on OSGi Bundle class,CAMEL-1092,12486823,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,seumas.soltysik,seumas.soltysik,14/Nov/08 18:57,21/Nov/09 11:56,14/Mar/19 02:42,16/Jan/09 07:33,1.6.0,,,,,,,,,,1.6.0,,,camel-core,,,,0,"When running a Camel router scenario, I am getting a ClassNotFoundError  for the OSGi Bundle class from the ResolverUtil class. It seems like this code should be in the camel-osgi bundle or perhaps should be more reflection based.",,,,,,,,,,,,,,,,,20/Nov/08 20:41;wtam@iona.com;test.tar.gz;https://issues.apache.org/jira/secure/attachment/12462727/test.tar.gz,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-11-15 09:19:39.274,,,no_permission,,,,,,,,,,,,,76947,,,Sat Nov 21 11:56:56 UTC 2009,,,,,,,0|i01ga7:,6407,,,,,,,,,"15/Nov/08 09:19;davsclaus;Seumas do you run it in an OSGi platform?

The imports for OSGi bundle classes should only kick in if Camel have determine that the classloader is a OSGi bundle loader.

You can enable TRACE logging (eg Log4j set level to TRACE) and it will spit out a lot of useful logs for Hadrian to check out.

BTW: I am wondering if we should add somekind of flag to control this behavior so you can force it to not scan OSGi bundles. And Gerv has some ideas to improve the OSGi stuff for 2.0.
There is another ticket somewehere about this.","20/Nov/08 05:27;wtam@iona.com;Also, you don't want to have camel-osgi jar in your classpath, if you are using Spring to inject CamelContext but not running camel in OSGi container.  Otherwise, the org.apache.camel.osgi.CamelNamespaceHandler takes over and it tries to load classes from OSGi packages.","20/Nov/08 11:59;hadrian;This is not entirely accurate.  It depends on the namespace.  For camel-osgi, camelContext is in the ""http://activemq.apache.org/camel/schema/osgi"" namespace.  If that namespace is used org.apache.camel.osgi.CamelNamespaceHandler takes over.","20/Nov/08 20:41;wtam@iona.com;I wasn't entirely accurate.   Here is what I saw.  If both camel-osgi and spring-osgi-core jars are present in the classpath, then the OSGI version of the SpringCamelContext will kick in even though the namespace does not specify the osgi one.  I am not sure how it happens.  Any enlightenment would be appreciated.  Spring must have pulled some magic. :-)  It is nice because the route configuration does not have to know anything about osgi (namespace) and it just works in either environment.  The attached test case can demonstrate that behavior.  Uncomment the spring-osgi-core-1.1.2.jar line in the build.xml and set it to the jar location, then run ""ant router"" target  It will fail with  ""java.lang.NoClassDefFoundError: org/osgi/framework/BundleContext"".   Before running the ant.

1) Get 1.5.0 binary distribution and untar it.
2) Set CAMEL_HOME to the camel installation directory
3) Untar the test.tar to CAMEL_HOME directory 
","20/Nov/08 22:05;hadrian;@William, thanks for the test.  I banged my head against this one for 2 days now.  I think I know what the problem is.    OSGI awareness is sort built into the core assuming that osgi is always used with camel-osgi, which is obviously not the case.  I think it's our bug, not Spring's magic.

I think I'm almost done with this.  I only have a chicken'n'egg bootstrapping issue to fix, but I badly need a bit of luck.","21/Nov/08 05:51;wtam@iona.com;Thanks Hadrian.   Good luck with the fix.   I believe we are actually talking about different issues.    I guess mine isn't really an issue.  FYI,  my mystery has been solved.  It is the org.apache.camel.spring.handler.CamelNamspaceHandler.init() method doing the trick.",16/Jan/09 07:33;njiang;I think this issue is resolved with CAMEL-1240,21/Nov/09 11:56;davsclaus;Closing all 1.6.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jetty endpoints ignore host specified in URI and expose an endpoint on all interfaces,CAMEL-1091,12486182,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,romkal,romkal,romkal,14/Nov/08 16:54,31/Jul/09 06:33,14/Mar/19 02:42,17/Nov/08 14:03,1.5.0,,,,,,,,,,1.6.0,2.0-M1,,camel-jetty,,,,0,http://www.nabble.com/Jetty-and-Mina%3A-how-to-bind-to-%22anylocal%22-AKA-%22wildcard%22-address--tp20475674s22882p20494645.html,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-11-17 17:18:04.013,,,no_permission,,,,,,,,,,,,,76948,,,Fri Jul 31 06:33:41 UTC 2009,,,,,,,0|i01g9z:,6406,,,,,,,,,17/Nov/08 14:03;romkal;Warning is added when someone creates flow that refers to 'localhost' and it proposes 0.0.0.0 instead. Warning appears once per jetty connector (host+port pair) so if you have 10 flows with localhost:80 you have only one warning.,17/Nov/08 17:18;davsclaus;Rom it doesn't compile on jdk1.5. Camel should be build with 1.5 only.,17/Nov/08 17:18;davsclaus;And maybe the 0.0.0.0 stuff cant be tested on unix as you normally cant bind to ports under < 1024. Jonathan can help test on all sort of platforms.,"17/Nov/08 17:28;janstey;janstey@mojo:/x1/apache/camel-trunk/components/camel-jetty$ svn ci -m ""CAMEL-1091 - Fix compilation issue on Java 1.5""
Sending        camel-jetty/src/test/java/org/apache/camel/component/jetty/InterfacesTest.java
Transmitting file data .
Committed revision 718279.

Roman, would you mind reviewing my fix for this test? It should work now on Java 1.5/1.6.","17/Nov/08 17:47;janstey;Another note by Willem:

(02:04:43 PM) willem: There'r a MalformedURLException http://rafb.net/p/8s9PsR33.html when I run the InterfacesTest, It looks like the URL doesn't support IPV6's address. I ran the test on my Windows Vista box with JDK 1.5.0_13.

From http://rafb.net/p/8s9PsR33.html
{code}
java.net.MalformedURLException: For input string: ""0:0:0:0:5efe:c0a8:76%21:4567""
	at java.net.URL.<init>(URL.java:601)
	at java.net.URL.<init>(URL.java:464)
	at java.net.URL.<init>(URL.java:413)
	at org.apache.camel.component.jetty.InterfacesTest.testLocalInterfaceHandled(InterfacesTest.java:48)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at junit.framework.TestCase.runTest(TestCase.java:164)
	at junit.framework.TestCase.runBare(TestCase.java:130)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:120)
	at junit.framework.TestSuite.runTest(TestSuite.java:230)
	at junit.framework.TestSuite.run(TestSuite.java:225)
	at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:130)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)
{code}","17/Nov/08 19:06;romkal;I committed the test that I believe should work for IPv6. Unfortunately I don't have IPv6 interface at my machine so I cannot test it out. If someone that has IPv6 enabled (I can see Willem has) could run this test it would be great. If you find some obvious errors, please fix them, as IPv6 is something I can hardly test.","18/Nov/08 06:57;njiang;Hi Roman, 

The IPV6 test does not work in my Vista box with JDK1.5.0_13 or JDK1.6.0_6.  After struggling this for an hour, I found It's a known issue of SUN's JDK[1].

So I will disable the test of IPV6.

[1] http://bugs.sun.com/view_bug.do;jsessionid=70afcb213c8795d4c8b77a9d4175?bug_id=6230761

Willem","18/Nov/08 08:44;romkal;Hey Willem,

I had no chance to hit this problem without IPv6 interface on my Windows XP :). On the other hand test passes on my linux box at home that have IPv6. Anyway of course we don't want to hurt anyone with Windows with this test ;)

Thank you for finding it out.","18/Nov/08 08:50;davsclaus;From a skin read of the sun bug report it looks like they will only fix the Windows IPv6 on JDK7, that seems a bit harsh I think. But I could be mistaking.",31/Jul/09 06:33;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ThroughputLogger incorrectly reports duration 0,CAMEL-1090,12486217,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gtully,gtully,gtully,14/Nov/08 15:28,31/Jul/09 06:33,14/Mar/19 02:42,14/Nov/08 15:30,1.5.0,,,,,,,,,,1.6.0,2.0-M1,,camel-core,,,,0,"from the apache-camel-load test:

2008-11-14 15:27:01,114 [mponent@1296d1d] INFO  aset:myDataSet?produceDelay=10 - Sent: 600 messages so far. Last group took: 0 millis which is: 85.106 messages per second. average: 80.128

The ThroughputLogger used by DataSet resets the duration before reporting it.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-11-14 15:44:22.696,,,no_permission,,,,,,,,,,,,,76949,,,Fri Jul 31 06:33:41 UTC 2009,,,,,,,0|i01g9r:,6405,,,,,,,,,14/Nov/08 15:30;gtully;resolved in r714032,"14/Nov/08 15:44;njiang;Hi Gary

Current Camel trunk's version is 2.0-snapshot, if you wants this patch to be applied into the 1.5.1-snapshot , you need merge it from trunk to camel-1.x branch.
Don't worry, I will do  the merge for you in a minute :)

Willem",14/Nov/08 15:50;njiang;The patch is in camel trunk and camel1.x branch now.,31/Jul/09 06:33;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Can't get the soap header when the camel-cxf endpoint working in the PAYLOAD data fromat,CAMEL-1088,12485679,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,14/Nov/08 07:15,31/Jul/09 06:33,14/Mar/19 02:42,14/Nov/08 07:26,1.3.0,1.4.0,1.5.0,,,,,,,,1.6.0,2.0-M1,,camel-cxf,,,,0,"When I added a unit test to show how to get the SOAP header from a PAYLOAD camel-cxf endpoint , I found the soap header stuff is not working.
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-07-31 06:33:41.322,,,no_permission,,,,,,,,,,,,,76950,,,Fri Jul 31 06:33:41 UTC 2009,,,,,,,0|i01g9b:,6403,,,,,,,,,14/Nov/08 07:26;njiang;Also updated the wiki page.,31/Jul/09 06:33;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-cxf non-pojo mode endpoint's provider leaves incorrect cxf endpoint in the exchange,CAMEL-1086,12485680,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,wtam@iona.com,wtam@iona.com,14/Nov/08 06:00,31/Jul/09 06:33,14/Mar/19 02:42,14/Nov/08 13:40,,,,,,,,,,,1.6.0,2.0-M1,,camel-cxf,,,,0,"The ""from"" endpoint instead of the ""to"" cxf endpoint object is left in the cxf exchange by CxfClient, which can cause problems for CXF interceptors that depend on cxf endpoint object in the exchange.",,,,,,,,,,,,,,,,,14/Nov/08 06:05;wtam@iona.com;CAMEL-1086.patch;https://issues.apache.org/jira/secure/attachment/12462644/CAMEL-1086.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-11-14 13:40:12.482,,,no_permission,,,,,,,,,,,,,76951,,,Fri Jul 31 06:33:41 UTC 2009,,,,,,,0|i01g8v:,6401,,,,,,,,,14/Nov/08 06:05;wtam@iona.com;Note: the patch was created from the 1.x branch.   ,14/Nov/08 13:40;njiang;Applied patch with thanks to William.,31/Jul/09 06:33;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The DataSetSedaTest will fail in a slower box,CAMEL-1080,12486203,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,njiang,njiang,12/Nov/08 08:23,31/Jul/09 06:33,14/Mar/19 02:42,13/Nov/08 03:46,1.4.0,1.5.0,,,,,,,,,1.6.0,2.0-M1,,camel-core,,,,0,"org.apache.camel.component.dataset.DataSetSedaTest.test
 =================
java.lang.AssertionError: dataset:foo Failed due to caught exception: java.lang.AssertionError: Header: camelDataSetIndex does not match. Expected: 363 but was: 362 on Exchange[Message: <hello>world!</hello>] with headers: {camelDataSetIndex=362}
	at org.apache.camel.component.mock.MockEndpoint.fail(MockEndpoint.java:712)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:255)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:214)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:141)
	at org.apache.camel.ContextTestSupport.assertMockEndpointsSatisfied(ContextTestSupport.java:274)
	at org.apache.camel.component.dataset.DataSetSedaTest.test(DataSetSedaTest.java:35)

",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-07-31 06:33:40.367,,,no_permission,,,,,,,,,,,,,76952,,,Fri Jul 31 06:33:40 UTC 2009,,,,,,,0|i01g7j:,6395,,,,,,,,,31/Jul/09 06:33;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CxfProducer could drop MessageDataFormatFeature and PayLoadDataFormatFeature ,CAMEL-1079,12485697,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,wtam@iona.com,wtam@iona.com,11/Nov/08 23:01,31/Jul/09 06:33,14/Mar/19 02:42,12/Nov/08 08:28,,,,,,,,,,,1.6.0,2.0-M1,,camel-cxf,,,,0,"If mycamel-cxf (non-pojo mode) endpoint is configured by Spring  to inject CXF other features, CxfProducer drops  MessageDataFormatFeature or PayLoadDataFormatFeature that it has added when endpoint.configure(cfb) is invoked.",,,,,,,,,,,,,,,,,12/Nov/08 05:26;wtam@iona.com;CAMEL-1079.patch;https://issues.apache.org/jira/secure/attachment/12462690/CAMEL-1079.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-11-11 23:58:00.169,,,no_permission,,,,,,,,,,,,,76953,,,Fri Jul 31 06:33:40 UTC 2009,,,,,,,0|i01g7b:,6394,,,,,,,,,11/Nov/08 23:45;wtam@iona.com;working on a patch.,"11/Nov/08 23:58;hadrian;@William, make sure you add a unit test too.  Thanks.","12/Nov/08 03:13;wtam@iona.com;@Hadrian, sure.",12/Nov/08 08:07;njiang;Applied apach into trunk and 2.1.x branch.,31/Jul/09 06:33;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
".unmarshal(new JaxbDataFormat(""com.foo.bar"")) returning JAXBElement",CAMEL-1074,12485669,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,tmcnamara,tmcnamara,11/Nov/08 00:21,31/Jul/09 06:33,14/Mar/19 02:42,27/Nov/08 10:23,1.4.0,,,,,,,,,,1.6.0,2.0-M1,,camel-jaxb,,,,0,"using .unmarshal(new JaxbDataFormat(""com.foo.bar"") is returning a JAXBElement instead of the desired object that was generated by xjc.",java 1.5,,,,,,,,,,,,,,,,11/Nov/08 00:21;tmcnamara;ASF.LICENSE.NOT.GRANTED--camel-jaxb.zip;https://issues.apache.org/jira/secure/attachment/12462629/ASF.LICENSE.NOT.GRANTED--camel-jaxb.zip,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-11-13 07:50:52.114,,,no_permission,,,,,,,,,,,,,76954,,,Fri Jul 31 06:33:40 UTC 2009,,,,,,,0|i01g67:,6389,Unit Test Broken,,,,,,,,"13/Nov/08 07:50;njiang;The JAXBElement is create by the ObjectFactory's ""public JAXBElement<PersonType> createPerson(PersonType value) "" method.
You can get the PersonType instance by calling the JAXBElement's getValue() method.

If you just want to get the PersonType after the unmashalling, you just need to comment out the JAXBElement createPerson method.
May be you can tell xjc don't create the JAXBElement by passing some arguments when you generate the code from xsd.

","13/Nov/08 07:54;njiang;It is a JAXB ObjectFactory issue. 
BTW, you can remove the ObjectFactory , just leave the jaxb.index file along, we can still get a  PersonType instance after unmarshalling.

jaxb.index works for the code first programming model and ObjectFactory is generated for the schema first programming model.",15/Nov/08 01:55;tmcnamara;This is a workaround and not a fix.   ,"21/Nov/08 05:33;njiang;I could add an option int he JaxbDataFormat to let it return the value of JAXBElement, so you don't do additional hacking on the ObjectFactory. ",27/Nov/08 10:23;njiang;Also updated the wiki page.,"27/Nov/08 10:25;njiang;Hi Tim

Could you try out the latest Camel 1.5.1-snapshot and 2.0-snapshot with you test case ?
Please let me know if there is any question :)

Willem

",31/Jul/09 06:33;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-cxf non-pojo mode endpoints ignore injected features,CAMEL-1073,12486202,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,wtam@iona.com,wtam@iona.com,10/Nov/08 22:05,31/Jul/09 06:33,14/Mar/19 02:42,12/Nov/08 09:21,,,,,,,,,,,1.6.0,2.0-M1,,camel-cxf,,,,0,CXF message and payload mode endpoints do not honor CXF features that are injected by Spring configuration.,,,,,,,,,,,,,,,,,10/Nov/08 22:08;wtam@iona.com;CAMEL-1073.patch;https://issues.apache.org/jira/secure/attachment/12462762/CAMEL-1073.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-11-12 09:21:50.086,,,no_permission,,,,,,,,,,,,,76955,,,Fri Jul 31 06:33:40 UTC 2009,,,,,,,0|i01g5z:,6388,,,,,,,,,"12/Nov/08 09:21;njiang;Applied path into trunk and camel-1.x branch with thanks to William.
",31/Jul/09 06:33;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
org.apache.camel.Message - hasAttachments is buggy,CAMEL-1070,12486051,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,10/Nov/08 16:38,31/Jul/09 06:33,14/Mar/19 02:42,10/Nov/08 16:55,1.4.0,1.5.0,,,,,,,,,1.6.0,2.0-M1,,camel-core,,,,0,"I must use
                        if (exchange.getIn().getAttachments().size() > 0) {
Instead of
                        if (exchange.getIn().hasAttachments()) {
As the latter always returns false. Or at least returns false even though the size is > 0",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76956,,,Fri Jul 31 06:33:39 UTC 2009,,,,,,,0|i01g5b:,6385,,,,,,,,,31/Jul/09 06:33;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel ActiveMQ service not recovering from lost broker,CAMEL-1064,12487102,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,hadrian,huntc@internode.on.net,huntc@internode.on.net,08/Nov/08 11:30,07/Feb/10 09:54,14/Mar/19 02:42,23/Feb/09 16:30,1.4.0,1.5.0,,,,,,,,,,,,camel-activemq,,,,1,"If the ActiveMQ broker is shut down and then started again while a Camel ActiveMQ endpoint based program is listening on its queue, the program does not pick the queue back up for consuming when ActiveMQ is back up. Anything subsequently posted to the new broker becomes available only when the Camel program is restarted.

This is a problem in production style scenarios where the broker has to be restarted for some reason e.g. so that modifications to its configuration can be made.

I have been able to observe the above behaviour with the camel-example-jms-file project and attach a modified version of the CamelJmsToFileExample.java file. My modifications bind to the broker at tcp://localhost:61616 and cause the example to pause for 20s before sending out any messages. In this time, if the broker (which has to be started externally prior to executing the example) is shutdown and then started again, no messages are received.

Here are the actual recommended steps to reproduce the problem:
1. Start the ActiveMQ broker in one terminal window
2. Run the example via mvn compile exec:java
3. When the message displays stating that you have 20s, Ctrl-C the broker in the broker terminal window
4. When the broker stops, start it again

At this point no messages are displayed - you would expect them to be - they have actually been sent out. This can be verified also:

5. Type mvn compile exec:java again
6. Let the example continue without interfering with the broker.

You will now see the messages posted previously prior while the program waits for 20 seconds (remember no messages have been posted at this point). Letting the example continue demonstrates that after the 20 seconds, the messages are sent out and then received quickly given that we have not touched the broker.

The original thread posting can be found at:

http://www.nabble.com/Camel-ActiveMQ-service-not-recovering-from-lost-broker-to20379163s22882.html
","Mac OS X (10.5), Java 1.5, ActiveMQ 5.1.0",,,,,,,,,,,,,,,,08/Nov/08 11:33;huntc@internode.on.net;CamelJmsToFileExample.java;https://issues.apache.org/jira/secure/attachment/12462670/CamelJmsToFileExample.java,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-11-08 12:04:26.526,,,no_permission,,,,,,,,,,,,,76957,,,Mon Feb 23 21:09:20 UTC 2009,,,,,,,0|i01g3z:,6379,,,,,,,,,"08/Nov/08 11:33;huntc@internode.on.net;Modified camel-example-jms-file project file from the Camel 1.4.0 distribution. The modifications allow time for a broker to be shutdown subsequently to the consumer environment being set up, but before any messages are sent out.",08/Nov/08 12:04;hadrian;@Christopher thanks for spotting it and for the detailed steps and example.  This is indeed a serious problem.  I will upgrade this to critical and we'll look into it as soon as possible.,16/Nov/08 06:56;davsclaus;Hadrian did you have a look at it?,18/Nov/08 06:26;hadrian;Not yet :(.  Let me look into this this week.,"27/Nov/08 07:48;huntc@internode.on.net;I appreciate that life is full and busy, but has anybody been able to identify a potential work-around for this issue? I'm looking to move my Camel based service into production next week so it'd be great to have a resolution one way or another. Thank you for your help.","29/Nov/08 10:26;akuhtz;Hi Christopher,

Not sure if I got all of your problem but if you change the url for the connection factory from *tcp://localhost:61616* to *failover:tcp://localhost:61616* it uses failover transport that does reconnect and you will receive messages after the broker is back again (at least it did when I started your test).","30/Nov/08 08:48;huntc@internode.on.net;Thanks for this - this sounds like a viable work around and I shall test it shortly. I presume that this is indeed regarded as a work-around though and that the issue remains to be fixed?

Thanks again.","04/Dec/08 04:38;huntc@internode.on.net;Hi Hadrian,

Any further advice on the investigation of this issue?

Kind regards,
Christopher","23/Feb/09 16:30;jstrachan;using *failover:tcp://localhost:61616* as the connection URL is the correct approach for dealing with reconnection to the broker in case of broker failure or network issues causing temporary socket loss.

in 5.2.0 or later of ActiveMQ the connection factory and ActiveMQ camel component use failover in the default URL by default to avoid folks having to know about the failover configuration. i.e. if you don't configure anything you will get failover and so auto-reconnection",23/Feb/09 21:09;huntc@internode.on.net;Thanks for this. Was this a 1.6.0 fix for Camel? You implied that the ActiveMQ Camel component was changed also; or is it because of 5.2.0's connection factory change that Camel's component inherits the fix?,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"camel-sql - setting datasource should be easier, and improve the wiki documentation",CAMEL-1063,12486197,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,08/Nov/08 08:57,31/Jul/09 06:33,14/Mar/19 02:42,12/Nov/08 09:26,1.5.0,,,,,,,,,,1.6.0,2.0-M1,,,,,,0,"See nabble:
http://www.nabble.com/Camel-SQL-Component---dataSource-property-td20386559s22882.html",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76958,,,Fri Jul 31 06:33:39 UTC 2009,,,,,,,0|i01g3r:,6378,,,,,,,,,31/Jul/09 06:33;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
PipelineConcurrentTest.java fails randomly,CAMEL-1062,12485563,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,hadrian,hadrian,hadrian,07/Nov/08 15:26,31/Jul/09 06:33,14/Mar/19 02:42,07/Nov/08 21:27,1.5.0,,,,,,,,,,1.6.0,2.0-M1,,camel-core,,,,0,"The test fails with an IllegalStateException: Queue full.  I believe the reason for this is that there are 10000 messages sent, but the default queue size is 1000.   On a fast machine, the queue fills up before the consumer gets a chance to pop the messages from the queue.
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-07-31 06:33:39.154,,,no_permission,,,,,,,,,,,,,76959,,,Fri Jul 31 06:33:39 UTC 2009,,,,,,,0|i01g3j:,6377,,,,,,,,,31/Jul/09 06:33;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HandleFaultProcessor need to check the fault message before it call the callback done method,CAMEL-1058,12486194,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,07/Nov/08 05:34,31/Jul/09 06:33,14/Mar/19 02:42,07/Nov/08 13:59,,,,,,,,,,,1.6.0,2.0-M1,,camel-core,,,,0,To make sure the check fault work to be done first.,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-07-31 06:33:39.083,,,no_permission,,,,,,,,,,,,,76960,,,Fri Jul 31 06:33:39 UTC 2009,,,,,,,0|i01g2n:,6373,,,,,,,,,31/Jul/09 06:33;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
XQuery creates an empty out message that makes it impossible to chain more processors behind it,CAMEL-1057,12486195,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,davsclaus,balazs.zsoldos,balazs.zsoldos,07/Nov/08 00:56,31/Jul/09 06:33,14/Mar/19 02:42,07/Nov/08 13:23,1.4.0,1.5.0,,,,,,,,,1.6.0,2.0-M1,,camel-saxon,,,,0,"When using XQuery the getOut() function is called on the message so if it is not used at a place where the out is filled an empty out message will be created. With this xquery cannot be used for example in setBody, setHeader... and anywhere where the out is not filled.
An example where this causes real trouble:

<choice>
  <when>
    <xquery>...</xquery>
    <to uri=""direct:follow"" />
  </when>
</choice>

...
<from uri=""direct:follow"">
<to ...>
<to ...>

In the patch the out property in the xquery context is filled only if it is not null. With it all of my pipelines seem to work well for me.",,,,,,,,,,,,,,,,,07/Nov/08 13:03;balazs.zsoldos;XQueryBuilder.java.patch;https://issues.apache.org/jira/secure/attachment/12462711/XQueryBuilder.java.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-11-07 07:07:53.855,,,no_permission,,,,,,,,,,,,,76961,,,Fri Jul 31 06:33:39 UTC 2009,,,Patch Available,,,,0|i01g2f:,6372,,,,,,,,,"07/Nov/08 07:07;davsclaus;Balazs could you re attach the patch with the ASF license granted. We can not accept patches without this license.

The general rule with JIRA is *not* to attach files while creating the ticket. Only attach files *afterwards* since then there is a checkbox where you can grant the ASF license.","07/Nov/08 13:03;balazs.zsoldos;Hi, here is the file with the license.",07/Nov/08 13:23;davsclaus;Applied patch with thanks to Balazs,31/Jul/09 06:33;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
spring integration xsd change breaks component,CAMEL-1053,12484721,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,janstey,janstey,05/Nov/08 00:21,31/Jul/09 06:33,14/Mar/19 02:42,05/Nov/08 12:48,1.4.0,1.5.0,,,,,,,,,1.6.0,2.0-M1,,camel-spring-integration,,,,0,Thread is here http://www.nabble.com/-HEADS-UP--camel-spring-integration-issue-td20331450s22882.html,,,,,,,,,,,,,,,,,05/Nov/08 00:23;janstey;springupgrade.patch;https://issues.apache.org/jira/secure/attachment/12462712/springupgrade.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2009-07-31 06:33:38.243,,,no_permission,,,,,,,,,,,,,76962,,,Fri Jul 31 06:33:38 UTC 2009,,,,,,,0|i01g1j:,6368,,,,,,,,,05/Nov/08 00:23;janstey;Its a way bigger change than I thought :) Here's what I have so far if anyone wants to take a look over night.,05/Nov/08 12:48;janstey;Willem fixed this last night on trunk and 1.x.,31/Jul/09 06:33;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HandleFaultProcessor does not implement the AsyncProcessor interface,CAMEL-1051,12486187,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,04/Nov/08 07:42,31/Jul/09 06:33,14/Mar/19 02:42,04/Nov/08 13:25,,,,,,,,,,,1.6.0,2.0-M1,,camel-core,,,,0,"Here is a the smx-camel thread to hang issue[1] , it is caused by HandleFaultProcessor doesn't implement the AsyncProcessor interface.
Since it is a DelegateProcessor, if it wrappes an AsycProcessor , the AsycProcessor's callback.done() method will never be called.

[1] https://issues.apache.org/activemq/browse/SM-1673",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-07-31 06:33:38.187,,,no_permission,,,,,,,,,,,,,76963,,,Fri Jul 31 06:33:38 UTC 2009,,,,,,,0|i01g13:,6366,,,,,,,,,31/Jul/09 06:33;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Messages in Resequencer between 2 JMS queues get stuck,CAMEL-1037,12486175,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,wtam,janstey,janstey,30/Oct/08 16:00,31/Jul/09 06:33,14/Mar/19 02:42,09/Dec/08 07:22,1.5.0,,,,,,,,,,1.6.0,2.0-M1,,camel-core,,,,0,"Martin describes the issue as follows in CAMEL-1034:

""The issue with the regular resequencer (the one that extends the BatchProcessor) remains because the process(Exchange) method is empty. In addition to the BatchProcessor's polling consumer, an additional JmsConsumer is created by the JMS endpoint that competes with the polling consumer. The JmsConsumer then calls the empty process(Exchange) method and the exchange is lost.""",,,,,,,,,,,,,,,,,08/Dec/08 13:09;mrt1nz;camel-1.x.patch;https://issues.apache.org/jira/secure/attachment/12462795/camel-1.x.patch,08/Dec/08 17:11;mrt1nz;camel-2.0.patch;https://issues.apache.org/jira/secure/attachment/12462765/camel-2.0.patch,,,,2.0,,,,,,,,,,,,,,,,,,,2008-10-31 12:52:04.83,,,no_permission,,,,,,,,,,,,,76964,,,Fri Jul 31 06:33:37 UTC 2009,,,,,,,0|i01fxz:,6352,,,,,,,,,31/Oct/08 12:52;mrt1nz;CAMEL-642 also mentions race between event-driven JMS consumer and BatchProcessor's polling consumer.,31/Oct/08 12:56;mrt1nz;Not sure if this issue is also related to CAMEL-393. I just mention it here so that I don't forget to investigate.,"08/Dec/08 13:09;mrt1nz;Attached is a patch that fixes this issue and also issue CAMEL-393. What has been done in this patch:

* I removed the polling consumer from the BatchProcessor because it 
** competes with other threads e.g. those that consume messages from a JMS queue (already described in CAMEL-642 and CAMEL-1034). 
** it consumes messages directly from the starting-endpoint of the current route (obtained via {{routeContext.getEndpoint()}}). This caused CAMEL-393.
* BatchProcessor now queues up exchanges which are then sent by a separate thread. The separate thread is needed to deal with timeouts. The old BatchProcessor implementation also stored exchanges in memory so there is at least no decrease in QoS with this patch. Reliable batch processing (and stream-resequencing) will be addressed with issue CAMEL-949 (for which I don't have a patch yet).   
* CAMEL-393 was reported for the aggregator but the same problems arise for the batch resequencer and stream resequencer. All three can now be used in route definitions as requested in CAMEL-393. (This required to remove the polling consumer from the StreamResequencer too).

CAMEL-1037 came up because because in Camel 1.4 the {{org.apache.camel.Processor}} interface was introduced for the BatchProcessor with an empty {{process(Exchange)}} implementation. The JMS consumer threads competed with the polling thread of the batch processor where all exchanges delivered via the JMS consumer threads have been lost (i.e. {{process(Exchange)}} ignored those exchanges). 

So far I created this patch for the Camel-1.x branch because I'm not sure if you (comitters, others) already thought about a different solution to this problem for Camel 2.0. If you don't have any objections to this patch please tell me and I'll create one for the current trunk.
","08/Dec/08 13:49;davsclaus;At the very first peek it looks like a yet again a really great patch Martin. 

To my knowledge we haven't thought of a different solution for this in Camel 2.0. Hadrian / Jonathan what do you say?","08/Dec/08 14:10;janstey;Very thorough patch + description Martin. Great work! 

To my knowledge we haven't come up with another solution in Camel 2.0. Would be good to get this fix into trunk as well.

",08/Dec/08 17:11;mrt1nz;... here it is. The file camel-2.0.patch fixes the aforementioned issues on the trunk.,"08/Dec/08 20:15;wtam;Nice work, Martin!  I am looking to apply this patch but testBatchResequencer() is failing on me.  Do you have any suggestion?  I'm on 1.x currently. 

java.lang.AssertionError: mock:result body == 9 failed on Exchange[JmsMessage: ActiveMQObjectMessage {commandId = 5, responseRequired = true, messageId = ID:lenw500-55044-1228766892918-2:113:1:1:1, originalDestination = null, originalTransactionId = null, producerId = ID:lenw500-55044-1228766892918-2:113:1:1, destination = queue://out, transactionId = null, expiration = 0, timestamp = 1228766893813, arrival = 0, brokerInTime = 1228766893813, brokerOutTime = 1228766893813, correlationId = null, replyTo = null, persistent = true, type = null, priority = 4, groupID = null, groupSequence = 0, targetConsumerId = null, compressed = false, userID = null, content = org.apache.activemq.util.ByteSequence@56f2c96c, marshalledProperties = null, dataStructure = null, redeliveryCounter = 0, size = 1106, properties = {num=11}, readOnlyProperties = true, readOnlyBody = true, droppable = false}] with left value <11> right value <9>
	at org.apache.camel.builder.BinaryPredicateSupport.assertMatches(BinaryPredicateSupport.java:57)
	at org.apache.camel.builder.BinaryPredicateSupport.assertMatches(BinaryPredicateSupport.java:1)
	at org.apache.camel.component.mock.AssertionClause.applyAssertionOn(AssertionClause.java:114)
	at org.apache.camel.component.mock.MockEndpoint$8.run(MockEndpoint.java:496)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:249)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:214)
	at org.apache.camel.component.jms.issues.JmsResequencerTest.testResequencer(JmsResequencerTest.java:66)
	at org.apache.camel.component.jms.issues.JmsResequencerTest.testBatchResequencer(JmsResequencerTest.java:51)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at junit.framework.TestCase.runTest(TestCase.java:164)
	at org.springframework.test.context.junit38.AbstractJUnit38SpringContextTests.runManaged(AbstractJUnit38SpringContextTests.java:307)
	at org.springframework.test.context.junit38.AbstractJUnit38SpringContextTests.access$000(AbstractJUnit38SpringContextTests.java:94)
	at org.springframework.test.context.junit38.AbstractJUnit38SpringContextTests$1.run(AbstractJUnit38SpringContextTests.java:193)
	at org.springframework.test.context.junit38.AbstractJUnit38SpringContextTests.runTest(AbstractJUnit38SpringContextTests.java:270)
	at org.springframework.test.context.junit38.AbstractJUnit38SpringContextTests.runTestTimed(AbstractJUnit38SpringContextTests.java:228)
	at org.springframework.test.context.junit38.AbstractJUnit38SpringContextTests.runBare(AbstractJUnit38SpringContextTests.java:191)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:120)
	at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:130)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)

","09/Dec/08 04:40;wtam;The resequencer seems to be working properly.  I wonder the during the sending from activemq.queue:out to mock:result could mess up the message order?  If I change the routes to forward output of the resequencer directly to mock:result, it still verifies the working of the resequencer and tests pass.

{code}
 from(""activemq:queue:in1"").resequence().body().batch().size(100).timeout(10000L).to(""mock:result"");
 from(""activemq:queue:in2"").resequence().header(""num"").stream().timeout(2000L).to(""mock:result"");
{code}

One question on the patch:  The BatchSender uses a private queue to buffer incoming messages.   The queue is drained to the ""collection"" until the batch of messages should be sent.  My concern is that the protected method getCollection() can fool the caller thinking the batch is empty.  I don't know if getCollection() is really needed, though.  It is only referenced by Aggregator to read the size of the collection.   ",09/Dec/08 07:21;wtam;We can possibly remove the protected method BatchProcessor.getConnection().,"09/Dec/08 07:22;wtam;Committed revision 724629 to camel-1.x.
Committed revision 724619 to trunk

","09/Dec/08 07:27;wtam;Martin, many thanks to your patch.  I've checked it in with a modification to the test mentioned above.  Feel free to reopen with a new patch if you have a better way to do it.","09/Dec/08 08:49;mrt1nz;William,

thanks for applying the patch. You are completly right that during the sending from activemq.queue:out to mock:result the exchange order is messed up because I've configured 10 concurrent consumers. This is needed to test concurrent access to the resequencers but doesn't make any sense for sending re-ordered messages to the mock endpoint - sorry for messing that up. An alternative is to register a second JMS component configured with only one consumer, then the messages are kept in order (but this doesn't bring any better test because all related issues came from interaction with the first JMS queue ({{activemq.queue:in}} in our example. So we should leave it as you suggested).

Regarding {{getCollection}}: The way how it is used in {{Aggregator}} doesn't make sense to me either (even before the patch). In my opinion, it does make sense to keep the {{getCollection}} method but it shouldn't be used to determine the current batch size. For that a separate {{getBatchSize}} method should be provided that operates on the private queue (buffer) of the batch processor. ",09/Dec/08 11:44;davsclaus;Maybe you can use expectedInAnyOrder mock assertions for the concurrent consumer test?,31/Jul/09 06:33;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ResolverUtil under Eclipse RPC (OSGi) error: Could not read entries in url: bundleresource://36/org/apache/camel/converter,CAMEL-1035,12486173,12486184,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,ehildebrandt,ehildebrandt,30/Oct/08 10:25,31/Jul/09 06:33,14/Mar/19 02:42,09/Jan/09 07:27,1.5.0,,,,,,,,,,1.6.0,2.0-M1,,camel-core,,,,0,"Using Apache Camel 1.5-SNAPSHOT with Eclipse RCP 3.x I get a java.io.FileNotFoundException on loading the converters (see stacktrace below). 
It seems that issue CAMEL-774 is not fixed. 

I tried to debug the source code: 

--- SOURCE: ResolverUtil.java ---- 

            Method mth = loader.getClass().getMethod(""getBundle"", new Class[] {}); 
            if (mth != null) { 
                // it's osgi bundle class loader, so we need to load implementation in bundles 
                if (LOG.isDebugEnabled()) { 
                    LOG.debug(""Loading from osgi buindle using classloader: "" + loader); 
                } 
                loadImplementationsInBundle(test, packageName, loader, mth); 
                return; 
            } 

--- END SOURCE --- 

""loader.getClass().getMethod(""getBundle"", new Class[] {});"" returns null because the loader is of type ""org.eclipse.core.runtime.internal.adaptor.ContextFinder"" and does not have a ""getBundle"" method.

Please see discussion at: http://www.nabble.com/ResolverUtil-under-Eclipse-RPC-(OSGi)-error%3A-Could-not-read-entries-in-url%3A-bundleresource%3A--36-org-apache-camel-converter-to20205017s22882.html

Sample project can be downloaded at: http://www.fastshare.org/download/eclipse_camel_test.zip

Unzip the project and import it to you Eclipse Workspace.
You have to use Eclipse because it's an Eclipse plugin.

Instructions to start the project:
1.	Download, unzip and start an ActiveMQ server.
2.	Run ""ServiceServer"" as ""Java-Application"".
3.	Open plugin.xml and click on ""Launch an Eclipse Application"";
4.	A new Eclipse instance will be start. Select ""Sample Menu""  ""Sample Action"" in the new Eclipse window.
5.	Check the errors in the console view.


--- START TRACE LOG ---

28.10.2008 16:18:17 org.apache.camel.util.ResolverUtil findAnnotated
FEIN: Searching for annotations of org.apache.camel.Converter in packages:
[org.apache.camel.converter, org.apache.camel.spring.converter]
28.10.2008 16:18:17 org.apache.camel.util.ResolverUtil find
AM FEINSTEN: Searching for: annotated with @Converter in package:
org/apache/camel/converter using classloader:
org.eclipse.core.runtime.internal.adaptor.ContextFinder
28.10.2008 16:18:17 org.apache.camel.util.ResolverUtil find
AM FEINSTEN: It's not an osgi bundle classloader
28.10.2008 16:18:17 org.apache.camel.util.ResolverUtil getResources
AM FEINSTEN: Getting resource URL for package: org/apache/camel/converter
with classloader:
org.eclipse.core.runtime.internal.adaptor.ContextFinder@983d95
28.10.2008 16:18:17 org.apache.camel.util.ResolverUtil find
AM FEINSTEN: URL from classloader:
bundleresource://36/org/apache/camel/converter
28.10.2008 16:18:17 org.apache.camel.util.ResolverUtil find
AM FEINSTEN: Decoded urlPath: /org/apache/camel/converter
28.10.2008 16:18:17 org.apache.camel.util.ResolverUtil find
AM FEINSTEN: Scanning for classes in [/org/apache/camel/converter] matching
criteria: annotated with @Converter
28.10.2008 16:18:17 org.apache.camel.util.ResolverUtil find
WARNUNG: Could not read entries in url:
bundleresource://36/org/apache/camel/converter
java.io.FileNotFoundException: \org\apache\camel\converter (Das System kann
den angegebenen Pfad nicht finden)
        at java.io.FileInputStream.open(Native Method)
        at java.io.FileInputStream.<init>(FileInputStream.java:106)
        at org.apache.camel.util.ResolverUtil.find(ResolverUtil.java:371)
        at org.apache.camel.util.ResolverUtil.find(ResolverUtil.java:279)
        at org.apache.camel.util.ResolverUtil.findAnnotated(ResolverUtil.java:255)
        at
org.apache.camel.impl.converter.AnnotationTypeConverterLoader.load(AnnotationTypeConverterLoader.java:66)
        at
org.apache.camel.impl.converter.DefaultTypeConverter.checkLoaded(DefaultTypeConverter.java:218)
        at
org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:64)
        at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:59)
        at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:50)
        at
org.apache.camel.processor.interceptor.TraceFormatter.getBodyAsString(TraceFormatter.java:115)
        at
org.apache.camel.processor.interceptor.TraceFormatter.format(TraceFormatter.java:39)
        at
org.apache.camel.processor.interceptor.TraceInterceptor.format(TraceInterceptor.java:68)
        at org.apache.camel.processor.Logger.logMessage(Logger.java:218)
        at org.apache.camel.processor.Logger.process(Logger.java:88)
        at
org.apache.camel.processor.interceptor.TraceInterceptor.logExchange(TraceInterceptor.java:124)
        at
org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:55)
        at
org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43)
        at
org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:39)
        at
org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:41)
        at
org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:66)
        at
org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:47)
        at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:149)
        at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:134)
        at
org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:92)
        at
org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:74)
        at
org.apache.camel.component.cxf.transport.CamelConduit$CamelOutputStream.commitOutputMessage(CamelConduit.java:168)
        at
org.apache.camel.component.cxf.transport.CamelConduit$CamelOutputStream.doClose(CamelConduit.java:151)
        at org.apache.cxf.io.CachedOutputStream.close(CachedOutputStream.java:156)
        at
org.apache.cxf.io.CacheAndWriteOutputStream.postClose(CacheAndWriteOutputStream.java:47)
        at org.apache.cxf.io.CachedOutputStream.close(CachedOutputStream.java:159)
        at org.apache.cxf.transport.AbstractConduit.close(AbstractConduit.java:66)
        at
org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor.handleMessage(MessageSenderInterceptor.java:62)
        at
org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:221)
        at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:296)
        at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:242)
        at org.apache.cxf.frontend.ClientProxy.invokeSync(ClientProxy.java:73)
        at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:178)
        at $Proxy84.gibAlleDimensionenUndDescriptoren(Unknown Source)
        at
net.enbw.etg.rcm.pfc.marktdaten.MarktDatenProviderImpl.getAlleDimensionenUndDescriptoren(MarktDatenProviderImpl.java:183)
        at
net.enbw.etg.rcm.pfc.proxies.ServiceLocator.getAlleDimensionenUndDeskriptoren(ServiceLocator.java:187)
        at
net.enbw.etg.rcm.pfc.view.navigator.Navigator$2.doInBackground(Navigator.java:181)
        at
net.enbw.etg.rcm.pfc.view.navigator.Navigator$2.doInBackground(Navigator.java:1)
        at javax.swing.SwingWorker$1.call(SwingWorker.java:278)
        at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
        at java.util.concurrent.FutureTask.run(FutureTask.java:138)
        at javax.swing.SwingWorker.run(SwingWorker.java:317)
        at
java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885)
        at
java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
        at java.lang.Thread.run(Thread.java:619)
28.10.2008 16:18:17 org.apache.camel.util.ResolverUtil find
AM FEINSTEN: Searching for: annotated with @Converter in package:
org/apache/camel/converter using classloader:
org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader
28.10.2008 16:18:17 org.apache.camel.util.ResolverUtil find
AM FEINSTEN: It's not an osgi bundle classloader
28.10.2008 16:18:17 org.apache.camel.util.ResolverUtil getResources
AM FEINSTEN: Getting resource URL for package: org/apache/camel/converter
with classloader:
org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader@cec0c5
28.10.2008 16:18:17 org.apache.camel.util.ResolverUtil find
AM FEINSTEN: URL from classloader:
bundleresource://36/org/apache/camel/converter
28.10.2008 16:18:17 org.apache.camel.util.ResolverUtil find
AM FEINSTEN: Decoded urlPath: /org/apache/camel/converter
28.10.2008 16:18:17 org.apache.camel.util.ResolverUtil find
AM FEINSTEN: Scanning for classes in [/org/apache/camel/converter] matching
criteria: annotated with @Converter
28.10.2008 16:18:17 org.apache.camel.util.ResolverUtil find
WARNUNG: Could not read entries in url:
bundleresource://36/org/apache/camel/converter
java.io.FileNotFoundException: \org\apache\camel\converter (Das System kann
den angegebenen Pfad nicht finden)
        at java.io.FileInputStream.open(Native Method)
        at java.io.FileInputStream.<init>(FileInputStream.java:106)
        at org.apache.camel.util.ResolverUtil.find(ResolverUtil.java:371)
        at org.apache.camel.util.ResolverUtil.find(ResolverUtil.java:279)
        at org.apache.camel.util.ResolverUtil.findAnnotated(ResolverUtil.java:255)
        at
org.apache.camel.impl.converter.AnnotationTypeConverterLoader.load(AnnotationTypeConverterLoader.java:66)
        at
org.apache.camel.impl.converter.DefaultTypeConverter.checkLoaded(DefaultTypeConverter.java:218)
        at
org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:64)
        at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:59)
        at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:50)
        at
org.apache.camel.processor.interceptor.TraceFormatter.getBodyAsString(TraceFormatter.java:115)
        at
org.apache.camel.processor.interceptor.TraceFormatter.format(TraceFormatter.java:39)
        at
org.apache.camel.processor.interceptor.TraceInterceptor.format(TraceInterceptor.java:68)
        at org.apache.camel.processor.Logger.logMessage(Logger.java:218)
        at org.apache.camel.processor.Logger.process(Logger.java:88)
        at
org.apache.camel.processor.interceptor.TraceInterceptor.logExchange(TraceInterceptor.java:124)
        at
org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:55)
        at
org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43)
        at
org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:39)
        at
org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:41)
        at
org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:66)
        at
org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:47)
        at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:149)
        at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:134)
        at
org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:92)
        at
org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:74)
        at
org.apache.camel.component.cxf.transport.CamelConduit$CamelOutputStream.commitOutputMessage(CamelConduit.java:168)
        at
org.apache.camel.component.cxf.transport.CamelConduit$CamelOutputStream.doClose(CamelConduit.java:151)
        at org.apache.cxf.io.CachedOutputStream.close(CachedOutputStream.java:156)
        at
org.apache.cxf.io.CacheAndWriteOutputStream.postClose(CacheAndWriteOutputStream.java:47)
        at org.apache.cxf.io.CachedOutputStream.close(CachedOutputStream.java:159)
        at org.apache.cxf.transport.AbstractConduit.close(AbstractConduit.java:66)
        at
org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor.handleMessage(MessageSenderInterceptor.java:62)
        at
org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:221)
        at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:296)
        at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:242)
        at org.apache.cxf.frontend.ClientProxy.invokeSync(ClientProxy.java:73)
        at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:178)
        at $Proxy84.gibAlleDimensionenUndDescriptoren(Unknown Source)
        at
net.enbw.etg.rcm.pfc.marktdaten.MarktDatenProviderImpl.getAlleDimensionenUndDescriptoren(MarktDatenProviderImpl.java:183)
        at
net.enbw.etg.rcm.pfc.proxies.ServiceLocator.getAlleDimensionenUndDeskriptoren(ServiceLocator.java:187)
        at
net.enbw.etg.rcm.pfc.view.navigator.Navigator$2.doInBackground(Navigator.java:181)
        at
net.enbw.etg.rcm.pfc.view.navigator.Navigator$2.doInBackground(Navigator.java:1)
        at javax.swing.SwingWorker$1.call(SwingWorker.java:278)
        at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
        at java.util.concurrent.FutureTask.run(FutureTask.java:138)
        at javax.swing.SwingWorker.run(SwingWorker.java:317)
        at
java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885)
        at
java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
        at java.lang.Thread.run(Thread.java:619)
28.10.2008 16:18:17 org.apache.camel.util.ResolverUtil find
AM FEINSTEN: Searching for: annotated with @Converter in package:
org/apache/camel/spring/converter using classloader:
org.eclipse.core.runtime.internal.adaptor.ContextFinder
28.10.2008 16:18:17 org.apache.camel.util.ResolverUtil find
AM FEINSTEN: It's not an osgi bundle classloader
28.10.2008 16:18:17 org.apache.camel.util.ResolverUtil getResources
AM FEINSTEN: Getting resource URL for package:
org/apache/camel/spring/converter with classloader:
org.eclipse.core.runtime.internal.adaptor.ContextFinder@983d95
28.10.2008 16:18:17 org.apache.camel.util.ResolverUtil find
AM FEINSTEN: No URLs returned by classloader
28.10.2008 16:18:17 org.apache.camel.util.ResolverUtil find
AM FEINSTEN: Searching for: annotated with @Converter in package:
org/apache/camel/spring/converter using classloader:
org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader
28.10.2008 16:18:17 org.apache.camel.util.ResolverUtil find
AM FEINSTEN: It's not an osgi bundle classloader
28.10.2008 16:18:17 org.apache.camel.util.ResolverUtil getResources
AM FEINSTEN: Getting resource URL for package:
org/apache/camel/spring/converter with classloader:
org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader@cec0c5

--- END TRACE LOG ---

",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-10-30 11:00:50.55,,,no_permission,,,,,,,,,,,,,76965,,,Fri Jul 31 06:33:37 UTC 2009,,,,,,,0|i01fxj:,6350,,,,,,,,,"30/Oct/08 11:00;davsclaus;I think a workaround is to register the needed type converters manually.

If you can get hold of DefaultTypeConverter there is an addTypeConverter() method.
But of course it would be great if the annotation based classloading works as well.

I have this Eclipse:
Version: 3.3.0
Build id: I20070621-1340

Do I need to download any other Eclipse stuff to get working, or is all the needed .jars in the .zip project?","30/Oct/08 11:11;ehildebrandt;>I think a workaround is to register the needed type converters manually.
>If you can get hold of DefaultTypeConverter there is an addTypeConverter() method.

Thanks for the tipp. I will try this.

>Do I need to download any other Eclipse stuff to get working, or is all the needed .jars in the .zip project?

The project contains all needed JARs. You only need Eclipse with plugins for ""RCP / Plugin Developers"" (see http://www.eclipse.org/downloads/).","30/Oct/08 11:17;davsclaus;You should get the DefaultTypeConverter from CamelContext.getTypeConverter(). Just cast it to DefaultTypeConverter.

We should however consider exposing the TypeConverterRegistry from CamelContext so end users more easily can get hold of it and add new converters.","30/Oct/08 12:54;ehildebrandt;After adding the converters manually to the context, the code is now working as Eclipse plugin.  The suggested workaround is OK for now.

Thank you very much for your help!","30/Oct/08 17:50;davsclaus;Okay I got Eclipse and have tried it a few times and can get the error as well.

But damm I hate SUN for their java util logging. I dont know how many times I have messed with getting the ****** switch to use log4j.properties instead of their dreadful logger. With log4j.properties I can control what gets logged and at what level.

Now it logs using JUL at INFO level and cant get it switch to TRACE level.",30/Oct/08 18:20;davsclaus;Okay got the logging with log4j - needed on classpath and to change it in commons-logging.properties,"01/Nov/08 17:58;davsclaus;Eduard, does it work if you do not start it using from an existing Eclipse? Basically I am asking for does it work when its deployed/installed as it should be?

Since what we get hold of is non OSGi classloaders that Eclipse RCP gives us. And their API is rather verbose and non intuitive how to get hold of the OSGi bundler classloaders.

[                          main] ResolverUtil                   TRACE Not an OSGi classloader: org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader@101bb2c
[                          main] ResolverUtil                   TRACE Not an OSGi classloader: org.eclipse.core.runtime.internal.adaptor.ContextFinder@14e45b3",01/Nov/08 18:26;davsclaus;Well the DefaultClassLoader is OSGi aware but it doesnt expose getBundle or any methods to get hold of the OSGI API where we can find entries using the existing OSGi resolver code in Camel,"01/Nov/08 20:18;davsclaus;All the Camel .jars is added as a classpath to your eclipse application. After some work to get the OSGi discovery working with the IBM eclipse stuff I gut stuck with the problem that the type converters is in the camel .jars on the classpath.

How do I get the Bundle-ClassPath information using standard OSGi? 

{code}
Manifest-Version: 1.0
Bundle-ManifestVersion: 2
Bundle-Name: Eclipse Camel Test Plug-in
Bundle-SymbolicName: eclipse_camel_test; singleton:=true
Bundle-Version: 1.0.0
Bundle-Activator: test.Activator
Require-Bundle: org.eclipse.ui,
 org.eclipse.core.runtime
Bundle-ActivationPolicy: lazy
Bundle-RequiredExecutionEnvironment: J2SE-1.5
Bundle-ClassPath: lib/log4j-1.2.14.jar,
 lib/activation-1.1.jar,
 lib/aopalliance-1.0.jar,
 lib/asm-2.2.3.jar,
 lib/bcprov-jdk14-136.jar,
 lib/camel-core-2.0-SNAPSHOT.jar,
 lib/camel-cxf-1.5-SNAPSHOT.jar,
 lib/camel-jms-1.5-SNAPSHOT.jar,
 lib/camel-spring-1.5-SNAPSHOT.jar,
 lib/commons-io-1.3.2.jar,
 lib/commons-lang-2.4.jar,
 lib/commons-logging-1.1.1.jar,
 lib/commons-pool-1.3.jar,
 lib/cxf-api-2.1.1.jar,
 lib/cxf-common-schemas-2.1.1.jar,
 lib/cxf-common-utilities-2.1.1.jar,
 lib/cxf-rt-bindings-soap-2.1.1.jar,
 lib/cxf-rt-bindings-xml-2.1.1.jar,
 lib/cxf-rt-core-2.1.1.jar,
 lib/cxf-rt-databinding-jaxb-2.1.1.jar,
 lib/cxf-rt-frontend-jaxws-2.1.1.jar,
 lib/cxf-rt-frontend-simple-2.1.1.jar,
 lib/cxf-rt-ws-addr-2.1.1.jar,
 lib/cxf-rt-ws-security-2.1.1.jar,
 lib/cxf-tools-common-2.1.1.jar,
 lib/FastInfoset-1.2.2.jar,
 lib/geronimo-annotation_1.0_spec-1.1.1.jar,
 lib/geronimo-javamail_1.4_spec-1.3.jar,
 lib/geronimo-jaxws_2.1_spec-1.0.jar,
 lib/geronimo-jms_1.1_spec-1.1.1.jar,
 lib/geronimo-jta_1.1_spec-1.1.1.jar,
 lib/geronimo-stax-api_1.0_spec-1.0.1.jar,
 lib/geronimo-ws-metadata_2.0_spec-1.1.2.jar,
 lib/jaxb-api-2.1.jar,
 lib/jaxb-impl-2.1.6.jar,
 lib/jaxb-xjc-2.1.6.jar,
 lib/junit-3.8.1.jar,
 lib/neethi-2.0.4.jar,
 lib/opensaml-1.1.jar,
 lib/saaj-api-1.3.jar,
 lib/saaj-impl-1.3.jar,
 lib/spring-aop-2.5.5.jar,
 lib/spring-beans-2.5.5.jar,
 lib/spring-context-2.5.5.jar,
 lib/spring-context-support-2.5.5.jar,
 lib/spring-core-2.5.5.jar,
 lib/spring-jms-2.5.5.jar,
 lib/spring-tx-2.5.5.jar,
 lib/stax-api-1.0-2.jar,
 lib/velocity-1.4.jar,
 lib/velocity-dep-1.4.jar,
 lib/wsdl4j-1.6.1.jar,
 lib/wss4j-1.5.4.jar,
 lib/wstx-asl-3.2.4.jar,
 lib/xalan-2.7.0.jar,
 lib/xml-resolver-1.2.jar,
 lib/XmlSchema-1.4.2.jar,
 lib/xmlsec-1.4.0.jar,
 .,
 lib/activemq-core-5.1.0.jar,
 lib/geronimo-j2ee-management_1.0_spec-1.0.jar
{code}","02/Nov/08 07:23;davsclaus;CAMEL-1043 should cater for this in the long run.

Currently the workaround that Eduard is using is suitable, by manually adding the needed type converters.","02/Nov/08 20:32;ehildebrandt;>Eduard, does it work if you do not start it using from an existing Eclipse?
>Basically I am asking for does it work when its deployed/installed as it should be? 

The code is working fine if you start it from a usual main-method. You can test it yourself by using the class ""ServiceClient"". This class access a webservice using camel from a main-Method. But it's not working as eclipse plugin in any way.

> I gut stuck with the problem that the type converters is in the camel .jars on the classpath.
> How do I get the Bundle-ClassPath information using standard OSGi?

I have the same problem here. At the moment I have no idea.
I will chat with an eclipse expert in our company...
","09/Jan/09 07:27;njiang;It should work by using the spring-osgi's BundleDelegateClassLoader to load type converters.
Please check out the camel latest version for verification.",31/Jul/09 06:33;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Messages in StreamResequencer between 2 ActiveMQ queues seem to be stuck,CAMEL-1034,12486169,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,plexico1989,plexico1989,29/Oct/08 14:09,31/Jul/09 06:33,14/Mar/19 02:42,30/Oct/08 15:07,1.4.0,,,,,,,,,,1.6.0,2.0-M1,,camel-core,,,,0,"Perhaps some subtle configuration issue, but a Camel stream resequencer that is a route between 2 ActiveMQ queues fails to deliver all ordered messages. In fact, using the defaults for a StreamResequencer only 1 out of 100 messages are delivered. However, all 100 messages have been removed from the Producer queue by the resequencer and are not moved to the consumer queue either (even unordered). 

Relevant points:
- Broker is run external to Camel route (non-embedded, no VM transport)
- Producer is a Camel ProducerTemplate
- Consumer is a Camel route that listens on another delivery queue and delivers message to a simple stdout Processor
- Resequencer uses stream defaults (100, 1000ms)
- Trace warns of some Converter override (see attached trace) and throws a breadcrumb error
- Resequencer fails delivery whether using body (long) or seqnum header (long)
- all JMS components are configured for AutoAcks","Windows XP SP3, Sun JDK 1.5.0_11, FUSE Mediation Router 1.4.5, ActiveMQ 5.1.0.1",,,,,,,,,,,,,,,,29/Oct/08 14:09;plexico1989;ASF.LICENSE.NOT.GRANTED--stream-resequencer-eclipse-test.zip;https://issues.apache.org/jira/secure/attachment/12462537/ASF.LICENSE.NOT.GRANTED--stream-resequencer-eclipse-test.zip,29/Oct/08 14:09;plexico1989;ASF.LICENSE.NOT.GRANTED--stream-resequencer-trace.txt;https://issues.apache.org/jira/secure/attachment/12462538/ASF.LICENSE.NOT.GRANTED--stream-resequencer-trace.txt,30/Oct/08 13:58;mrt1nz;camel-core.patch;https://issues.apache.org/jira/secure/attachment/12462726/camel-core.patch,,,3.0,,,,,,,,,,,,,,,,,,,2008-10-29 14:18:50.399,,,no_permission,,,,,,,,,,,,,76966,,,Fri Jul 31 06:33:37 UTC 2009,,,,,,,0|i01fxb:,6349,,,,,,,,,29/Oct/08 14:18;jstrachan;BTW does the test work when using regular requencer rather than the stream one?,30/Oct/08 01:08;plexico1989;Same thing with batch...just one message gets through with default config.,"30/Oct/08 13:58;mrt1nz;Peter,

thanks for your detailed report. Attached is a patch that fixes the issue with the StreamResequencer. 

The issue with the regular resequencer (the one that extends the BatchProcessor) remains because the process(Exchange) method is empty. In addition to the BatchProcessor's polling consumer, an additional JmsConsumer is created by the JMS endpoint that competes with the polling consumer. The JmsConsumer then calls the empty process(Exchange) method and the exchange is lost. I had no time so far to fix the issues for the BatchProcessor. Hope the fix for the StreamResequencer helps you so far.","30/Oct/08 14:34;janstey;Thanks for this Martin! I've committed your fix in revision 709173.

Peter, would you mind trying out the latest code from trunk?",30/Oct/08 15:04;plexico1989;Works great for stream. Thanks all!,"30/Oct/08 15:44;davsclaus;Could we create a new ticket or sub ticket with the renaming work on the non stream that Martin mentions, so we wont forget it. Maybe if Martin has a bit time in the future he will commit a fix for that issue as well.",30/Oct/08 16:00;janstey;Created CAMEL-1037 to track this issue.,31/Jul/09 06:33;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Don't require username on send mail routes (relays don't require login),CAMEL-1028,12485250,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,hockeydave,hockeydave,27/Oct/08 11:08,27/Oct/08 12:35,14/Mar/19 02:42,27/Oct/08 12:35,1.4.0,,,,,,,,,,1.5.0,,,camel-mail,,,,0,"Don't require a login in the send mail URI because internal relay mail servers don't require them.  If you do include one, the mail server gets confused and thinks that you are looping and it will bounce the email so this is a bit inconvenient bug.

Thread [Thread: 1 org.apache.camel.component.mail.MailComponent@663ec] (Suspended (exception NullPointerException))	
	Properties(Hashtable<K,V>).put(K, V) line: 394	
	MailConfiguration.createJavaMailProperties() line: 146	
	MailConfiguration.createJavaMailSender() line: 107	
	MailEndpoint.createProducer() line: 53	
	ProducerCache<E>.getProducer(Endpoint<E>) line: 50	
	ProducerCache<E>.send(Endpoint<E>, Processor) line: 84	
	DefaultProducerTemplate<E>.send(Endpoint<E>, Processor) line: 84	
	DefaultProducerTemplate<E>.sendBodyAndHeaders(Endpoint, Object, Map<String,Object>) line: 143	
	DefaultProducerTemplate<E>.sendBodyAndHeaders(String, Object, Map<String,Object>) line: 139	
	LogEmailThrowsAdvice.sendEmail(String) line: 64	
	LogEmailThrowsAdvice.afterThrowing(Method, Object[], Object, Exception) line: 42	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 39	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 25	
	Method.invoke(Object, Object...) line: 597	
	ThrowsAdviceInterceptor.invokeHandlerMethod(MethodInvocation, Throwable, Method) line: 146	
	ThrowsAdviceInterceptor.invoke(MethodInvocation) line: 131	
	ReflectiveMethodInvocation.proceed() line: 171	
	JdkDynamicAopProxy.invoke(Object, Method, Object[]) line: 204	
	$Proxy24.process(Exchange) line: not available	
	BeanProcessor.process(Exchange) line: 81	
	BeanEndpoint(ProcessorEndpoint).onExchange(Exchange) line: 92	
	ProcessorEndpoint$1.process(Exchange) line: 66	
	AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(Exchange, AsyncCallback) line: 43	
	SendProcessor.process(Exchange, AsyncCallback) line: 75	
	InstrumentationProcessor.process(Exchange, AsyncCallback) line: 57	
	DeadLetterChannel.process(Exchange, AsyncCallback, DeadLetterChannel$RedeliveryData) line: 155	
	DeadLetterChannel.process(Exchange, AsyncCallback) line: 91	
	InstrumentationProcessor.process(Exchange, AsyncCallback) line: 57	
	UnitOfWorkProcessor.process(Exchange, AsyncCallback) line: 39	
	AsyncProcessorHelper.process(AsyncProcessor, Exchange) line: 41	
	UnitOfWorkProcessor(DelegateAsyncProcessor).process(Exchange) line: 66	
	MailConsumer.processMessage(Message) line: 169	
	MailConsumer.processMessages(Message[]) line: 151	
	MailConsumer.poll() line: 105	
	MailConsumer(ScheduledPollConsumer<E>).run() line: 65	
	Executors$RunnableAdapter<T>.call() line: 441	
	FutureTask$Sync.innerRunAndReset() line: 317	
	ScheduledThreadPoolExecutor$ScheduledFutureTask<V>(FutureTask<V>).runAndReset() line: 150	
	ScheduledThreadPoolExecutor$ScheduledFutureTask<V>.access$101(ScheduledThreadPoolExecutor$ScheduledFutureTask) line: 98	
	ScheduledThreadPoolExecutor$ScheduledFutureTask<V>.runPeriodic() line: 181	
	ScheduledThreadPoolExecutor$ScheduledFutureTask<V>.run() line: 205	
	ThreadPoolExecutor$Worker.runTask(Runnable) line: 885	
	ThreadPoolExecutor$Worker.run() line: 907	
	Thread.run() line: 619	


Code:
AOPExceptionHandler:
	private void sendEmail(String errors) {
		template = camelContext.createProducerTemplate();
		StringBuffer body = new StringBuffer(""Hello Techops.\n"");
		body.append(""Got an exception please handle.\n\nRegards Reportdev.\n\n"");
		body.append(errors);
		template.sendBodyAndHeaders(emailServerUri, body, emailProperties);
	}

applicationContext.xml
<bean id=""logThrowsAdvice"" class=""com.contextweb.advice.LogEmailThrowsAdvice"">
		<property name=""camelContext"" ref=""camel"" />
		<property name=""sendMail"" value=""true"" />
		<!-- username=reportdev&amp;to=DPeterson@apache.com -->
		<property name=""emailServerUri""
			value=""smtp://mail.apache.corp"" />
		<property name=""emailProperties"">
			<map>
				<entry key=""From"">
					<value>""ReportDev@apache.com""</value>
				</entry>
				<entry key=""Subject"">
					<value>""Exception in 3rd Party Reporting Email
						Processing""</value>
				</entry>
				<entry key=""To"">
					<value>""DPeterson@apache.com""</value>
				</entry>
			</map>
		</property>
		<property name=""logFactory"" ref=""LogFactoryBean"" />
	</bean>

Workaround is to use URI for ""To"" and put the username after the ? in the URI.  This will fool the mail relay server into routing the email bypassing it's loop detection logic:
	<!-- Define the ThrowsAdvice bean -->
	<bean id=""logThrowsAdvice"" class=""com.contextweb.advice.LogEmailThrowsAdvice"">
		<property name=""camelContext"" ref=""camel"" />
		<property name=""sendMail"" value=""true"" />
		<property name=""emailServerUri""
			value=""smtp://mail.contextweb.corp?username=reportdev&amp;to=DPeterson@apache.com"" />
		<property name=""emailProperties"">
			<map>
				<entry key=""From"">
					<value>""ReportDev@apache.com""</value>
				</entry>
				<entry key=""Subject"">
					<value>""Exception in 3rd Party Reporting Email
						Processing""</value>
				</entry>
			</map>
		</property>
		<property name=""logFactory"" ref=""LogFactoryBean"" />
	</bean>",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-10-27 11:35:38.247,,,no_permission,,,,,,,,,,,,,76967,,,Mon Oct 27 12:35:30 UTC 2008,,,,,,,0|i01fvz:,6343,,,,,,,,,27/Oct/08 11:16;hockeydave;Changed eclipse to catch the actual NullPointerException so replacing the stack trace w/ a better one.,"27/Oct/08 11:35;davsclaus;David I think this one is fixed in Camel 1.5.

Can you try with 1.5-SNAPSHOT? ",27/Oct/08 11:59;hockeydave;This seems to be fixed in 1.5-SNAPSHOT.  Feel free to close this.,"27/Oct/08 12:00;hockeydave;Yes, it is fixed in 1.5-SNAPSHOT.

Thanks.



","27/Oct/08 12:13;hockeydave;However, I have to stay with my workaround for now.  I cannot switch to 1.5-SNAPSHOT until this gets fixed (was working in 1.4, broken in 1.5).

http://www.nabble.com/processOnlyUnseenMessages%3Dtrue-not-working-in-1.4.0--tt20120636s22882.html#a20169282","27/Oct/08 12:22;davsclaus;David

Isn't he problem with processOnlyUnseenMessages not because of POP3? If you use IMAP does it not work in 1.5?","27/Oct/08 12:30;hockeydave;Yes, I'm speaking about the new error #2. Sorry, it's a bit buried down in the Forum thread, but here is a snippet of it along with Janstey's comment that it will be fixed in the next snapshot.

2.  New Exception in trying to process Excel files.  This works in 1.4.0 so something got broken in 1.5-SNAPSHOT.

[org.apache.camel.NoTypeConversionAvailableException] thrown by target class [com.contextweb.mail.MailReader] and method [public abstract void org.apache.camel.Processor.process(org.apache.camel.Exchange) throws java.lang.Exception]org.apache.camel.NoTypeConversionAvailableException: No type converter available to convert from type: class com.sun.mail.util.BASE64DecoderStream to the required type: org.apache.commons.logging.Log with value com.sun.mail.util.BASE64DecoderStream@aa4bf8 
        at org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:117) 

Janstey response:

#2 should be fixed in the next SNAPSHOT deploy. 



","27/Oct/08 12:35;davsclaus;David

#2 Yes it should be fixed in 1.5.

Jonathan have committed the fix:
Author: janstey
Date: Sat Oct 25 18:38:39 2008
New Revision: 707928",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ConvertBodyType toString doesn't take consideration of the typeClass setting,CAMEL-1027,12486034,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,njiang,njiang,27/Oct/08 08:30,16/Feb/09 05:51,14/Mar/19 02:42,27/Oct/08 09:00,1.3.0,1.4.0,,,,,,,,,1.5.0,,,camel-core,,,,0,"The toString() codes of  ConvertBodyType 
{code}
public String toString() {
        return ""convertBodyTo["" + getType() + ""]"";
 }
{code}

if the ConvertBodyType's  typeClass member is set, the toString() method will not not reflect that.

Here is the mail thread which talks about it.
http://markmail.org/message/irikh3gxsff6vnlg?q=Problems+with+convertBodyTo+in+Java+DSL



",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-02-16 05:51:56.045,,,no_permission,,,,,,,,,,,,,76968,,,Mon Feb 16 05:51:56 UTC 2009,,,,,,,0|i01fvr:,6342,,,,,,,,,16/Feb/09 05:51;davsclaus;Closing all 1.5.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel:dot - pipeline is drawn as a multicast,CAMEL-1023,12485131,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,24/Oct/08 05:51,16/Feb/09 05:51,14/Mar/19 02:42,27/Oct/08 12:36,1.5.0,,,,,,,,,,1.5.0,,,tooling,,,,0,And it has a few other areas as well that could be polished.,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76970,,,Mon Feb 16 05:51:55 UTC 2009,,,,,,,0|i01fuv:,6338,,,,,,,,,24/Oct/08 06:00;davsclaus;Committed a fix,16/Feb/09 05:51;davsclaus;Closing all 1.5.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
some issues with the examples in 1.5RC1,CAMEL-1021,12485138,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,23/Oct/08 17:57,27/Oct/08 12:37,14/Mar/19 02:42,27/Oct/08 12:35,1.5.0,,,,,,,,,,1.5.0,,,examples,,,,0,This is a ticket holding some issues I have seen with the examples we ship in Camel. Please add if you find any issues as well,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-10-24 06:22:47.489,,,no_permission,,,,,,,,,,,,,76971,,,Fri Oct 24 14:28:16 UTC 2008,,,,,,,0|i01fuf:,6336,,,,,,,,,"23/Oct/08 17:58;davsclaus;camel-example-spring-jms

Throws a Spring exception during starup. Looks like a Spring Bug: http://jira.springframework.org/browse/SPR-4524 *NO*
Ah it was the fact that the Camel Spring Main main arguments changed from *a* to *ac* to indicate which spring xml file to load. *DONE*
","23/Oct/08 17:59;davsclaus;camel-example-spring-xquery

doesn't transform and output the first and lastname of James. So the name xml tag is empty in the output file in: target\outputFiles *DONE*","23/Oct/08 18:00;davsclaus;camel-example-guice-jms

The ANT build.xml file is a copy from another example *DONE*
The readme.txt should also state that you need to download GUICE and GUICEFRUIT as well. *DONE*","23/Oct/08 18:04;davsclaus;camel-example-docs

Should not use DEBUG logging for Camel *DONE*
","24/Oct/08 06:22;njiang;I can't find the way to download the guicyfuit without help of maven.
Maybe we need to add a assembly module in guicyfuit to generate the kit.","24/Oct/08 06:28;davsclaus;@Willem. Yeah those wanna download the guicy stuff are in bad luck if not using maven. There is probably a ton of .jars to go hunt for in the repos ;)

I am sure James would love some help/patches to his project so he could generate a nice .zip for non maven users as well.
http://code.google.com/p/guiceyfruit/

","24/Oct/08 14:28;njiang;@Claus

I just submitted a patch for adding an assembly module for guiceyfruit.  
Hope James will commit it soon.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
-a option in camel-spring Main class stopped working (caused by changes in camel-core),CAMEL-1016,12486046,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,magyardude,magyardude,21/Oct/08 21:51,16/Feb/09 05:51,14/Mar/19 02:42,22/Oct/08 01:07,,,,,,,,,,,1.5.0,,,camel-core,,,,0,"In the org.apache.camel.util.MainSupport class, the option ""-ad"" (aggregate-dot) conflicts with the option ""-a"" (applicationContext) defined in org.apache.camel.spring.Main. Both start with ""a"". See MainSupport.java:437: fullName.startsWith(arg) yields true with -a and aggregate-dot.

I'm not sure if this is camel-spring or camel-core issue, it depends what was created first. It was working before so I guess the camel-core brought it in recently.

One of the options should be renamed. I would rename the -a to -ac in the camel-spring Main class. So the apps that used -a would barf on the non-existing option so people will know what's going on. What happens now is it just silently ignores your spring config file. Let me know if you need a patch for the change.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-10-22 01:06:48.676,,,no_permission,,,,,,,,,,,,,76973,,,Mon Feb 16 05:51:55 UTC 2009,,,,,,,0|i01ftb:,6331,,,,,,,,,21/Oct/08 21:53;magyardude;I forgot. Temporary woraround is using the full option name: -applicationContext instead of -a.,"22/Oct/08 01:06;janstey;Nice catch Bela, thanks! I've committed a fix for this.",16/Feb/09 05:51;davsclaus;Closing all 1.5.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
LoadBalanceType does not wrap children processors,CAMEL-1013,12486061,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,wtam@iona.com,wtam@iona.com,21/Oct/08 16:03,16/Feb/09 05:51,14/Mar/19 02:42,21/Oct/08 18:05,,,,,,,,,,,1.5.0,,,camel-core,,,,0,"It looks like children processors of load balancer are not being
wrapped by interceptor strategy.  As a result, sendTo processors may
not be debuggable by Debugger or monitored by JMX.  ",,,,,,,,,,,,,,,,,21/Oct/08 16:04;wtam@iona.com;lb-fix.patch;https://issues.apache.org/jira/secure/attachment/12462628/lb-fix.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-10-21 17:39:48.21,,,no_permission,,,,,,,,,,,,,76974,,,Mon Feb 16 05:51:55 UTC 2009,,,,,,,0|i01fsn:,6328,,,,,,,,,"21/Oct/08 17:39;davsclaus;William, do you mind double check if there are other model types in camel-core that has this issue as well?",21/Oct/08 17:47;wtam@iona.com;Sure Claus.  I'll do a quick search.,21/Oct/08 18:05;davsclaus;Applied patch with thanks,21/Oct/08 20:46;wtam@iona.com;I haven't found any other processor that's having the similar issue.  I'll raise a JIRA when I do see any.,21/Oct/08 20:51;wtam@iona.com;I think we should get rid of the casting to SendProcessor.  It does not make too much sense.,16/Feb/09 05:51;davsclaus;Closing all 1.5.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
seda component - will lose message if its stopped while it polls,CAMEL-1003,12485200,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,21/Oct/08 05:42,23/Oct/08 04:33,14/Mar/19 02:42,21/Oct/08 14:32,1.4.0,,,,,,,,,,1.5.0,,,camel-core,,,,0,"See attached patch for details

Unit test inspired by nabble:
http://www.nabble.com/Wait-for-condition-td20064420s22882.html",,,,,,,,,,,,,,,,,21/Oct/08 05:44;davsclaus;CAMEL_1003.patch;https://issues.apache.org/jira/secure/attachment/12462682/CAMEL_1003.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76975,,,Thu Oct 23 04:33:52 UTC 2008,,,Patch Available,,,,0|i01fqf:,6318,,,,,,,,,21/Oct/08 14:32;davsclaus;Got a +1 from James,23/Oct/08 04:33;davsclaus;Closing 1.5 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ExceptionType handledPolicy is not exposed in the XSD,CAMEL-1001,12485775,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,rgavlin,rgavlin,20/Oct/08 15:33,16/Feb/09 05:51,14/Mar/19 02:42,21/Oct/08 17:36,1.5.0,,,,,,,,,,1.5.0,,,camel-core,,,,0,"ExceptionType handledPolicy is not exposed in the XSD. 

See nabble thread http://www.nabble.com/RE%3A-How-to-express-new-%22handled%22-predicate-in-Spring-DSL-p20069223.html.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-10-21 15:37:52.49,,,no_permission,,,,,,,,,,,,,76976,,,Mon Feb 16 05:51:55 UTC 2009,,,Patch Available,,,,0|i01fpz:,6316,,,,,,,,,21/Oct/08 15:37;davsclaus;The spring DSL is really not easily usable for the more complex stuff you can do in Java. ,"21/Oct/08 16:06;rgavlin;Hi Claus,

Yes, Spring DSL is limiting. However, would it be possible to simply expose the ""HandledPolicy"" setter so that I can dependency inject a value using Spring?

- Ron","21/Oct/08 16:10;davsclaus;CAMEL-1014 is needed to allow using expressions/predicates. That will be in Camel 2.0

So I am thinking of setting a boolean you can use for handled as this is the most common use-case anyway?

What do you think Ron?
  <handled>true</handled>","21/Oct/08 16:38;rgavlin;Yes, that would be great.

Thanks,

- Ron","21/Oct/08 16:47;davsclaus;Great I have the java DSL example from here:
http://activemq.apache.org/camel/exception-clause.html

Now working with Spring DSL. So I need to tidy it up and add some snippets so we can have the spring sample in the wiki doc as well.","21/Oct/08 17:36;davsclaus;See wiki for sample

http://cwiki.apache.org/confluence/display/CAMEL/Exception+Clause","21/Oct/08 17:49;rgavlin;Hi Claus,

Thanks for the excellent support!

/Ron","21/Oct/08 23:51;janstey;Hey guys,

If you want to use other expression languages in the handled element, I've just added support for this. So the simple boolean case now looks like

{code}
<handled>
  <constant>true</constant>
</handled>
{code}
",16/Feb/09 05:51;davsclaus;Closing all 1.5.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE in TraceFormatter,CAMEL-993,12487094,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,vchekan,vchekan,17/Oct/08 07:50,07/Feb/10 09:54,14/Mar/19 02:42,09/Jun/09 06:18,1.5.0,,,,,,,,,,1.5.0,1.6.2,,camel-core,,,,0,"This configuration causes NPE:
{code}
		from(""timer://kickoff_5?period=10000"").
		setHeader(""a"").constant(""aa"").setBody().constant(""a b c a_1 b_1"").
		splitter(body().tokenize("" "")).
		setHeader(""aggreagation_header"").body().
		aggregator(header(""aggreagation_header"")).
		to(""mock:out"");
{code}

{code}
2008-10-17 07:47:11,321 [ Polling Thread] DEBUG DefaultAggregationCollection   - put exchange:Exchange[Message: null] for key:null
2008-10-17 07:47:12,237 [ Polling Thread] ERROR Aggregator                     - 
java.lang.NullPointerException
	at org.apache.camel.processor.interceptor.TraceFormatter.getBreadCrumbID(TraceFormatter.java:150)
	at org.apache.camel.processor.interceptor.TraceFormatter.format(TraceFormatter.java:45)
	at org.apache.camel.processor.interceptor.TraceInterceptor.format(TraceInterceptor.java:94)
	at org.apache.camel.processor.Logger.logMessage(Logger.java:219)
	at org.apache.camel.processor.Logger.process(Logger.java:124)
	at org.apache.camel.processor.interceptor.TraceInterceptor.logException(TraceInterceptor.java:119)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:87)
	at org.apache.camel.processor.BatchProcessor.processExchange(BatchProcessor.java:190)
	at org.apache.camel.processor.BatchProcessor.processBatch(BatchProcessor.java:168)
	at org.apache.camel.processor.BatchProcessor.run(BatchProcessor.java:68)
	at java.lang.Thread.run(Thread.java:619)
{code}",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-10-18 11:32:03.539,,,no_permission,,,,,,,,,,,,,76978,,,Tue Jun 09 06:18:29 UTC 2009,,,,,,,0|i01fo7:,6308,,,,,,,,,"18/Oct/08 11:32;davsclaus;This bug is because of CAMEL-393 where the aggregator attaches itself directly to the consumer (from) so all the stuff in between is bypassed.

So you need to divide the route into two parts, such as:
{code}
                from(""timer://kickoff?period=10000"").
                    setHeader(""id"").constant(""foo"").setBody().constant(""a b c"").
                    splitter(body().tokenize("" "")).to(""seda:splitted"");

                from(""seda:splitted"").
                    aggregator(header(""id"")).
                    to(""mock:result"");
{code}
",16/Feb/09 05:51;davsclaus;Closing all 1.5.0 issues,"08/Jun/09 16:23;rpollack;I am experiencing the same problem in 1.6.0, without an aggregator. My route logic (in XML) is

      <route errorHandlerRef=""myErrorHandler"">
         <from uri=""jbi:service:urn:distributor.dmf.company.com:DistributorService""/>
         <convertBodyTo type=""java.lang.String""/>
         <inOnly uri=""direct:packetQueue""/>
      </route>

My stack trace is

java.lang.NullPointerException
        at org.apache.camel.processor.interceptor.TraceFormatter.getBreadCrumbID(TraceFormatter.java:202)
        at org.apache.camel.processor.interceptor.TraceFormatter.getExchangeAndNode(TraceFormatter.java:271)
        at org.apache.camel.processor.interceptor.TraceFormatter.format(TraceFormatter.java:54)
        at org.apache.camel.processor.interceptor.TraceInterceptor.format(TraceInterceptor.java:97)
        at org.apache.camel.processor.Logger.logMessage(Logger.java:234)
        at org.apache.camel.processor.Logger.process(Logger.java:125)
        at org.apache.camel.processor.interceptor.TraceInterceptor.logException(TraceInterceptor.java:122)
        at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:90)
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:80)
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:41)
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:55)
        at org.apache.camel.processor.LoggingErrorHandler.process(LoggingErrorHandler.java:54)
        at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43)
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:115)
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:89)
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:41)
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:55)
        at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:50)
        at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:79)
        at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:84)
        at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43)
        at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:64)
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:41)
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:66)
        at org.apache.servicemix.camel.CamelProviderEndpoint.handleActiveProviderExchange(CamelProviderEndpoint.java:109)
        at org.apache.servicemix.camel.CamelProviderEndpoint.process(CamelProviderEndpoint.java:81)
        at org.apache.servicemix.common.AsyncBaseLifeCycle.doProcess(AsyncBaseLifeCycle.java:631)
        at org.apache.servicemix.common.AsyncBaseLifeCycle.processExchange(AsyncBaseLifeCycle.java:585)
        at org.apache.servicemix.common.AsyncBaseLifeCycle.processExchangeInTx(AsyncBaseLifeCycle.java:480)
        at org.apache.servicemix.common.AsyncBaseLifeCycle$2.run(AsyncBaseLifeCycle.java:349)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
        at java.lang.Thread.run(Thread.java:619)

The code in TraceFormatter.java looks like this:

    protected Object getBreadCrumbID(Exchange exchange) {
        UnitOfWork unitOfWork = exchange.getUnitOfWork();
        return unitOfWork.getId();
    }

But there is code in UnitOfWorkProcessor.process() which seems to indicate that exchange.getUnitOfWork() will sometimes return null. This method begins by saying

        if (exchange.getUnitOfWork() == null) {
            // If there is no existing UoW, then we should start one and
            // terminate it once processing is completed for the exchange.

Would it be possible to enhance TraceFormatter to simply check for this?  I'm going to try

    protected Object getBreadCrumbID(Exchange exchange) {
        UnitOfWork unitOfWork = exchange.getUnitOfWork();
        if (unitOfWork != null) {
            return unitOfWork.getId();
        } else {
           return ""[unknown UOW]"";
        }
    }

If this doesn't work, I'll follow up with a message here.","09/Jun/09 06:18;davsclaus;Fixed the NPE in 1.x: 782893
Was already fixed in 2.0",09/Jun/09 06:18;davsclaus;Thanks Robert for reporting. I have fixed the NPE in 1.x. Will be in the next Camel release 1.6.2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Component spring ""event"" is not auto registered by Camel. Add a Event file in the folder META-INF/services/org/apache/camel/compoment of camel-spring",CAMEL-992,12485735,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,cmoulliard,cmoulliard,16/Oct/08 14:48,17/Oct/08 08:14,14/Mar/19 02:42,16/Oct/08 16:44,1.4.0,,,,,,,,,,1.4.0,1.5.0,,,,,,0,"Component spring ""event"" is not auto registered by Camel. Add a Event file in the folder META-INF/services/org/apache/camel/compoment of camel-spring.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76979,,,Fri Oct 17 08:14:37 UTC 2008,,,,,,,0|i01fnz:,6307,,,,,,,,,17/Oct/08 08:14;cmoulliard;I have tested the correction with the last snapshot and this error does not appear anymore. Incident can be closed.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
failing test case BeanInfoInheritanceTest,CAMEL-988,12484708,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,jstrachan,jstrachan,15/Oct/08 16:17,16/Feb/09 05:51,14/Mar/19 02:42,15/Oct/08 18:54,,,,,,,,,,,1.5.0,,,tests,,,,0,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-10-15 18:54:16.898,,,no_permission,,,,,,,,,,,,,76980,,,Mon Feb 16 05:51:55 UTC 2009,,,,,,,0|i01fn3:,6303,Unit Test Broken,,,,,,,,15/Oct/08 18:54;davsclaus;Should be fixed now.,16/Feb/09 05:51;davsclaus;Closing all 1.5.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"when deal with a response header,  an  infinite loop occurs",CAMEL-987,12485744,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,sky,sky,15/Oct/08 02:12,16/Feb/09 05:51,14/Mar/19 02:42,22/Oct/08 07:31,1.4.0,,,,,,,,,,1.5.0,,,camel-cxf,,,,0,"I use apache-camel-1.4.0 and apache-cxf-2.1.1 in my application. 
My application is a web service application.Which receive a soap header + soap body, and then response a soap header + soap body. 

I use WSDLToJava tool to create the java code from wsdl, it creates an interface for me as follow: 

@WebService(targetNamespace = ""http://com.aspire/"", name = ""SreServicePortType"")
@XmlSeeAlso({aspire.com.xsd.ObjectFactory.class})
@SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)

public interface SreServicePortType {

/*
 * 
 */

    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    @WebMethod
    public void serviceContentFetchReq(
        @WebParam(partName = ""request"", name = ""serviceContentFetchReq"", targetNamespace = ""http://com.aspire/xsd"")
        aspire.com.xsd.ServiceContentFetchReq request,
        @WebParam(partName = ""requestHeader"", name = ""serviceHeader"", targetNamespace = ""http://com.aspire/xsd"", header = true)
        aspire.com.xsd.ServiceHeader requestHeader,
        @WebParam(partName = ""response"", mode = WebParam.Mode.OUT, name = ""serviceContentFetchReqResponse"", targetNamespace = ""http://com.aspire/xsd"")
        javax.xml.ws.Holder<aspire.com.xsd.ServiceContentFetchReqResponse> response,
        @WebParam(partName = ""responseHeader"", mode = WebParam.Mode.OUT, name = ""serviceHeader"", targetNamespace = ""http://com.aspire/xsd"", header = true)
        javax.xml.ws.Holder<aspire.com.xsd.ServiceHeader> responseHeader
    );
}

Then, I implement the routing rules in the xml file:

        <process ref=""ipValidateProcessor"" />
        <choice>
            <when>
                 <!-- First predicate -->
                 <el>${in.headers.IP_VALIDATE_RESULT == 'true'}</el>
                 <to uri=""cxf:bean:serviceEndpoint"" />
                 <process ref=""responseProcessor"" />
            </when>
           <otherwise>
                  <process ref=""invalidIPProcessor"" />
           </otherwise>
     </choice>

In the ipValidateProcessor,  I set  in.headers.IP_VALIDATE_RESULT = false, so the invalidIPProcessor will run.In the invalidIPProcessor,  I only need set response body and response header.
I have traced the exchange object in the processor, the exchange.out element is null, and the exchange.in element is a CxfMessage object. The exchange.in.body element is a MessageContentList object: Object[0] is a ServiceContentFetchReq , Object[1] is a ServiceHeader, Object[2] is a Holder<T>, Object[3] is a Holder<T>. 

So i put response body into Object[2], and put response header into Object[3]: 

               org.apache.camel.Message in = exchange.getIn(); 
          List inBody = (List) in.getBody(); 
          Holder holderBody = (Holder)inBody.get(2); 
          holderBody .value = body;// body is a ServiceContentFetchReqResponse object 
               Holder holderHeader = (Holder)inBody.get(3); 
          holderHeader .value = header;//header is a ServiceHeader object 

But, when I run the application, I got an Exception:java.lang.OutOfMemoryError: Java heap space. 
I debuged into program, there is an Infinite Loop occured at the 
org.apache.cxf.jaxws.interceptors.HolderOutInterceptor(72): 

                for (int x = 0; x < inObjects.size(); x++) { 
                    Object o = inObjects.get(x); 
                    if (o instanceof Holder) { 
                        outObjects.set(x + 1, o); 
                    } 
                } 

I have traced and found: inObjects == outObjects is true, which leads to an Infinite Loop. 

Stack trace: 

2008-10-14 9:40:19 sun.reflect.NativeMethodAccessorImpl invoke0 
严重: EXCEPTION 
java.lang.OutOfMemoryError: Java heap space 
2008-10-14 9:40:19 org.apache.cxf.phase.PhaseInterceptorChain doIntercept 
信息: Interceptor has thrown exception, unwinding now 
org.apache.cxf.binding.soap.SoapFault: Error reading XMLStreamReader. 
at org.apache.cxf.binding.soap.interceptor.ReadHeadersInterceptor.handleMessage(ReadHeadersInterceptor.java:183) 
at org.apache.cxf.binding.soap.interceptor.ReadHeadersInterceptor.handleMessage(ReadHeadersInterceptor.java:54) 
at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:221) 
at org.apache.cxf.endpoint.ClientImpl.onMessage(ClientImpl.java:449) 
at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleResponse(HTTPConduit.java:1996) 
at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.close(HTTPConduit.java:1832) 
at org.apache.cxf.transport.AbstractConduit.close(AbstractConduit.java:66) 
at org.apache.cxf.transport.http.HTTPConduit.close(HTTPConduit.java:591) 
at org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor.handleMessage(MessageSenderInterceptor.java:62) 
at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:221) 
at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:296) 
at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:242) 
at org.apache.cxf.frontend.ClientProxy.invokeSync(ClientProxy.java:73) 
at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:178) 
at $Proxy48.serviceContentFetchReq(Unknown Source) 
at com.aspire.archtype.camel.Client.invoke(Client.java:77) 
at com.aspire.archtype.camel.spring.Main.main(Main.java:19) 
Caused by: com.ctc.wstx.exc.WstxEOFException: Unexpected EOF in prolog 
 at [row,col {unknown-source}]: [1,0] 
at com.ctc.wstx.sr.StreamScanner.throwUnexpectedEOF(StreamScanner.java:661) 
at com.ctc.wstx.sr.BasicStreamReader.handleEOF(BasicStreamReader.java:2134) 
at com.ctc.wstx.sr.BasicStreamReader.nextFromProlog(BasicStreamReader.java:2040) 
at com.ctc.wstx.sr.BasicStreamReader.next(BasicStreamReader.java:1069) 
at com.ctc.wstx.sr.BasicStreamReader.nextTag(BasicStreamReader.java:1095) 
at org.apache.cxf.binding.soap.interceptor.ReadHeadersInterceptor.handleMessage(ReadHeadersInterceptor.java:83) 
... 16 more 
javax.xml.ws.soap.SOAPFaultException: Error reading XMLStreamReader. 
at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:199) 
at $Proxy48.serviceContentFetchReq(Unknown Source) 
at com.aspire.archtype.camel.Client.invoke(Client.java:77) 
at com.aspire.archtype.camel.spring.Main.main(Main.java:19) 
Caused by: org.apache.cxf.binding.soap.SoapFault: Error reading XMLStreamReader. 
at org.apache.cxf.binding.soap.interceptor.ReadHeadersInterceptor.handleMessage(ReadHeadersInterceptor.java:183) 
at org.apache.cxf.binding.soap.interceptor.ReadHeadersInterceptor.handleMessage(ReadHeadersInterceptor.java:54) 
at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:221) 
at org.apache.cxf.endpoint.ClientImpl.onMessage(ClientImpl.java:449) 
at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleResponse(HTTPConduit.java:1996) 
at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.close(HTTPConduit.java:1832) 
at org.apache.cxf.transport.AbstractConduit.close(AbstractConduit.java:66) 
at org.apache.cxf.transport.http.HTTPConduit.close(HTTPConduit.java:591) 
at org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor.handleMessage(MessageSenderInterceptor.java:62) 
at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:221) 
at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:296) 
at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:242) 
at org.apache.cxf.frontend.ClientProxy.invokeSync(ClientProxy.java:73) 
at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:178) 
... 3 more 
Caused by: com.ctc.wstx.exc.WstxEOFException: Unexpected EOF in prolog 
 at [row,col {unknown-source}]: [1,0] 
at com.ctc.wstx.sr.StreamScanner.throwUnexpectedEOF(StreamScanner.java:661) 
at com.ctc.wstx.sr.BasicStreamReader.handleEOF(BasicStreamReader.java:2134) 
at com.ctc.wstx.sr.BasicStreamReader.nextFromProlog(BasicStreamReader.java:2040) 
at com.ctc.wstx.sr.BasicStreamReader.next(BasicStreamReader.java:1069) 
at com.ctc.wstx.sr.BasicStreamReader.nextTag(BasicStreamReader.java:1095) 
at org.apache.cxf.binding.soap.interceptor.ReadHeadersInterceptor.handleMessage(ReadHeadersInterceptor.java:83) 
... 16 more 
","operating system: windows 2000
software platform: apache-camel-1.4.0 + apache-cxf-2.1.1",,,,,,,,,,,,,,,,15/Oct/08 02:12;sky;ASF.LICENSE.NOT.GRANTED--camel-context.xml;https://issues.apache.org/jira/secure/attachment/12462688/ASF.LICENSE.NOT.GRANTED--camel-context.xml,15/Oct/08 02:12;sky;ASF.LICENSE.NOT.GRANTED--sre.wsdl;https://issues.apache.org/jira/secure/attachment/12462662/ASF.LICENSE.NOT.GRANTED--sre.wsdl,22/Oct/08 06:13;sky;processors.rar;https://issues.apache.org/jira/secure/attachment/12462601/processors.rar,,,3.0,,,,,,,,,,,,,,,,,,,2008-10-16 06:07:12.651,,,no_permission,,,,,,,,,,,,,76981,,,Mon Feb 16 05:51:55 UTC 2009,,,,,,,0|i01fmv:,6302,,,,,,,,,16/Oct/08 03:02;sky;I think this is a camel-cxf component bug.,"16/Oct/08 06:07;njiang;Can you show me the code of ipValidateProcessor and the other processors?
I think you may set a wrong response message in the processor.
Here is an example[1] of how to deal with the holders, please pay attentions to the below codes

{code}
        // Set the response message, first element is the return value of the operation,
        // the others are the holders of method parameters
        exchange.getOut().setBody(new Object[] {null, personId, ssn, name});
{code}

[1] http://cwiki.apache.org/CAMEL/cxf.html#CXF-HowtoconsumethemessagefromthecamelcxfendpointinPOJOdataformat","22/Oct/08 06:11;sky;I'm very sorry for reply so late.I  have waited for an email notify when sombody commented on this bug, but i didn't receive anyone. And when i log in  JIRA today,  i found you have replied. Very sorry!

I hava uploaded my processors,  pls see the attachments.Thanks again!

","22/Oct/08 06:24;sky;I found i filled a mis-spelling email address,  and correct it now:)","22/Oct/08 07:00;njiang;I saw this line in the ResponseProcess

this.setOutBody(this.getInBody());

You did not change any holder's value, can you try out the codes that I showed in my last comment.

NOTE: You need put the  return value of the method as the first array element into the out message body.


","22/Oct/08 07:18;sky;The infinite loop occurs in invalidIProcessor, and it wouldn't run in ResponseProcessor.

I try you last comment, and modified InvalidProcessor like this:

private void buildResponse() {
		//get body
		ServiceContentFetchReq req = (ServiceContentFetchReq) this.getInBody();
		ProcessorRequest request = req.getRequest();

		ServiceContentFetchReqResponse serviceResponse = new ServiceContentFetchReqResponse();
		ProcessorResponse response = new ProcessorResponse();
		response.setHret(""21000000"");
		response.setVersion(request.getVersion());
		response.setTransactionID(request.getTransactionID());
		serviceResponse.setReturn(response);
		
		
		ServiceHeader serviceHeader = new ServiceHeader();
		Header header = new Header();
		header.setTargetIP(""10.1.3.63"");
		serviceHeader.setHeader(header);
		
		org.apache.camel.Message in = exchange.getIn();
		List inBody = (List) in.getBody();
		Holder holderHeader = (Holder)inBody.get(2);
		holderHeader.value = serviceResponse;
		Holder holderValue = (Holder)inBody.get(3);
		holderValue.value = serviceHeader;
		
		this.exchange.getOut().setBody(new Object[]{inBody.get(0), inBody.get(1), holderValue, holderHeader});
	

Then it runs ok, and i would modify other processors in the same way:)




","22/Oct/08 07:31;njiang;I just close this issue, as we have example and document to show how to set the hold response.","23/Oct/08 02:41;sky;hello, Willem.After I walk around this trouble, I meet another trouble.
I do a pressure testing on this application with LoadRunner. 

My test case is as follows:
1. loadrunner does a request
2. server receive a request, and then forward it to  IPValidateProcessor
3. IPValidateProcessor set exchange.getIn().setHeader(""IP_VALIDATE_RESULT"", ""true""); 
4. do <to uri=""cxf:bean:serviceEndpoint"" />
5. do <process ref=""responseProcessor"" />
6. end

Route logic as follows, I just want to test the <when> clause:
<route>
	<from uri=""cxf:bean:routerEndpoint"" />
	<try>
		<process ref=""ipValidateProcessor"" />
		<choice>
			<when>
				<!-- First predicate -->
				<el>${in.headers.IP_VALIDATE_RESULT == 'true'}</el>
				<to uri=""cxf:bean:serviceEndpoint"" />
				<process ref=""responseProcessor"" />
			</when>
			<otherwise>
				<process ref=""invalidIPProcessor"" />
			</otherwise>
		</choice>
		<catch>
			<exception>com.aspire.archtype.camel.exception.AppException</exception>
			<process ref=""sreExceptionHandler""></process>
		</catch>
	</try>
</route>

When only an virtual user runs the test case once, it runs ok.
But when have 30 virtual users run for 1 minute, some of  the transactions run failure, and logic run into <otherwise> clause.I found that the in.headers.IP_VALIDATE_RESULT is null, so logic run into <otherwise>.

I don't now why, the same request, some run into <when>, some run into  <otherwith>?




","23/Oct/08 07:01;njiang;Hi Sky,

Shall we start a new thread in the mail list to discuss this issue ?
Since it does not relate to this JIRA's topic.

Willem","23/Oct/08 07:10;sky;OK, I will fill a new JIRA to discuss.","23/Oct/08 07:43;sky;I have created a new issue:
https://issues.apache.org/activemq/browse/CAMEL-1019
",16/Feb/09 05:51;davsclaus;Closing all 1.5.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BeanInfo - should consider overridden methods when selecting method from operations list,CAMEL-983,12485610,12484708,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,13/Oct/08 19:05,23/Oct/08 04:37,14/Mar/19 02:42,15/Oct/08 18:54,1.4.0,,,,,,,,,,1.5.0,,,camel-core,,,,0,"See nabble:
http://www.nabble.com/BeanInfo.chooseMethodWithMatchingBody-throws-an-AmbiguousMethodCallException-when-there%27s-no-ambiguity-td19959124s22882.html",,,,,,,,,,,,,,,,,13/Oct/08 19:08;davsclaus;CAMEL-983.patch;https://issues.apache.org/jira/secure/attachment/12462625/CAMEL-983.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,76982,,,Thu Oct 23 04:37:14 UTC 2008,,,,,,,0|i01flz:,6298,,,,,,,,,"13/Oct/08 19:08;davsclaus;A patch with a solution.

I would like review of this patch. 
PS: The methods should be named override*s*ExistingMethod (a s is missing)","14/Oct/08 06:24;davsclaus;Bruce did a review and the code in the patch should use continue and not return false:

Hi

Ah of course it should be continue ;) I coded it with the laptop on my lap on the couch with the wife grumping why I looked at the computer and not hear. But I wanted quickly to throw in some code for review and suggestions.

I was a bit surprised to not find an API to be able to easier identify if a method is overridden. I have been working with the IDEA API for my generate toString() plugin for 6+ years and they have such a nice API where you can get tons of information about your code.

I would like the change to be tested more thoroughly before we can commit it. So feel free to add more unit tests that test with more methods in the inherited classes, without inheritance etc. We are closing in on 1.5 and I would be sad to break something this late in the game.
","14/Oct/08 06:25;davsclaus;Should be:

   private boolean overrideExistingMethod(MethodInfo methodInfo) {
+        for (MethodInfo info : operationsWithBody) {
+
+            // name test
+            if (!info.getMethod().getName().equals(methodInfo.getMethod().getName())) {
+                continue;
+            }
+
+            // parameter types
+            if (info.getMethod().getParameterTypes().length != methodInfo.getMethod().getParameterTypes().length) {
+                continue;
+            }
+
+            for (int i = 0; i < info.getMethod().getParameterTypes().length; i++) {
+                Class type1 = info.getMethod().getParameterTypes()[i];
+                Class type2 = methodInfo.getMethod().getParameterTypes()[i];
+                if (!type1.equals(type2)) {
+                    continue;
+                }
+            }
+
+            // sanme name, same parameters, then its overrides an existing class
+            return true;
+        }
+
+        return false;
+    }
",14/Oct/08 10:50;davsclaus;James suggested to use a comparator: create a Set(NameAndParamTypesComparator),14/Oct/08 14:20;davsclaus;Working on a better patch.,14/Oct/08 19:32;davsclaus;Commited a fix. See SVN log (JIRA has such a tab),15/Oct/08 10:07;davsclaus;The last commit failed camel-spring and some unit tests. Reverted the fix until I get this working as well.,15/Oct/08 18:54;davsclaus;Should be fixed now.,23/Oct/08 04:37;davsclaus;Closing 1.5 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
File component - can not delete consumed file when processing failed (look into real cause),CAMEL-980,12485648,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,davsclaus,davsclaus,davsclaus,13/Oct/08 07:20,23/Oct/08 04:33,14/Mar/19 02:42,16/Oct/08 20:53,1.4.0,,,,,,,,,,1.5.0,,,camel-core,,,,1,"See nabble:
http://www.nabble.com/Problem-with-FileEndpoint-td19940096s22882.html

*Workaround*
Use .convertBodyTo(String.class) in the route so the file is read into memory, and the java.io.File handler shouldn't be open/locked when camel attempts to delete it after wards.",,,,,,,,,,,,,,,,,15/Oct/08 22:50;chris@die-schneider.net;CamelExampleFileJaxb.zip;https://issues.apache.org/jira/secure/attachment/12462709/CamelExampleFileJaxb.zip,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-10-13 19:50:49.799,,,no_permission,,,,,,,,,,,,,83261,,,Thu Oct 23 04:33:52 UTC 2008,,,,,,,0|i01flb:,6295,,,,,,,,,"13/Oct/08 19:50;chris@die-schneider.net;I have attached a complete example for file endpoint with jaxb and bean processor. The readme.txt explains how to use the example and how to reproduce this issue. 

Please write back if the example works and also shows you the issue.",15/Oct/08 19:26;davsclaus;Christian. The jaxb stuff 'com.sun.tools.xjc.maven2' can not be found in the maven repo you have in the pom.xml,"15/Oct/08 19:33;davsclaus;Have to add this to pom.xml

{code:xml}
    <pluginRepositories>
        <pluginRepository>
			<id>java.net</id> 
			<name>java.net Maven Repository</name> 
			<url>http://download.java.net/maven/1/</url> 
			<layout>legacy</layout> 
			<releases>
				<enabled>true</enabled> 
			</releases>
			<snapshots>
				<enabled>false</enabled> 
			</snapshots>
        </pluginRepository>
    </pluginRepositories>
{code}","15/Oct/08 19:48;davsclaus;Christian can you either supply a pom.xml that works out-of-the-box and can download all the needed .jars.
Or switch to another jaxb maven plugin that actually works and is installable.

Googling looks like you need to install manually and/or rename all versions to jswdp.

https://jaxb.dev.java.net/jaxb-maven2-plugin/
http://maven-plugins.sourceforge.net/maven-jaxb-plugin/


Downloading: http://download.java.net/maven/2/jwsdp/jaxb-api/jwsdp.1.5/jaxb-api-jwsdp.1.5.pom
Downloading: http://repository.jboss.org/maven2/jwsdp/jaxb-api/jwsdp.1.5/jaxb-api-jwsdp.1.5.pom
Downloading: http://mirrors.ibiblio.org/pub/mirrors/maven2/jwsdp/jaxb-api/jwsdp.1.5/jaxb-api-jwsdp.1.5.pom
Downloading: http://download.java.net/maven/2/jwsdp/jaxb-api/jwsdp.1.5/jaxb-api-jwsdp.1.5.pom
Downloading: https://maven-repository.dev.java.net/repository/jwsdp/jaxb-api/jwsdp.1.5/jaxb-api-jwsdp.1.5.pom
Downloading: http://repo1.maven.org/maven2/jwsdp/jaxb-api/jwsdp.1.5/jaxb-api-jwsdp.1.5.pom
Downloading: http://download.java.net/maven/2/jwsdp/jaxb-impl/jwsdp.1.5/jaxb-impl-jwsdp.1.5.pom
Downloading: http://repository.jboss.org/maven2/jwsdp/jaxb-impl/jwsdp.1.5/jaxb-impl-jwsdp.1.5.pom
Downloading: http://mirrors.ibiblio.org/pub/mirrors/maven2/jwsdp/jaxb-impl/jwsdp.1.5/jaxb-impl-jwsdp.1.5.pom
Downloading: http://download.java.net/maven/2/jwsdp/jaxb-impl/jwsdp.1.5/jaxb-impl-jwsdp.1.5.pom
Downloading: https://maven-repository.dev.java.net/repository/jwsdp/jaxb-impl/jwsdp.1.5/jaxb-impl-jwsdp.1.5.pom
Downloading: http://repo1.maven.org/maven2/jwsdp/jaxb-impl/jwsdp.1.5/jaxb-impl-jwsdp.1.5.pom
Downloading: http://download.java.net/maven/2/jwsdp/jaxb-xjc/jwsdp.1.5/jaxb-xjc-jwsdp.1.5.pom
Downloading: http://repository.jboss.org/maven2/jwsdp/jaxb-xjc/jwsdp.1.5/jaxb-xjc-jwsdp.1.5.pom
Downloading: http://mirrors.ibiblio.org/pub/mirrors/maven2/jwsdp/jaxb-xjc/jwsdp.1.5/jaxb-xjc-jwsdp.1.5.pom
Downloading: http://download.java.net/maven/2/jwsdp/jaxb-xjc/jwsdp.1.5/jaxb-xjc-jwsdp.1.5.pom
Downloading: https://maven-repository.dev.java.net/repository/jwsdp/jaxb-xjc/jwsdp.1.5/jaxb-xjc-jwsdp.1.5.pom
Downloading: http://repo1.maven.org/maven2/jwsdp/jaxb-xjc/jwsdp.1.5/jaxb-xjc-jwsdp.1.5.pom
Downloading: http://download.java.net/maven/2/jwsdp/jaxb-libs/jwsdp.1.5/jaxb-libs-jwsdp.1.5.pom
Downloading: http://repository.jboss.org/maven2/jwsdp/jaxb-libs/jwsdp.1.5/jaxb-libs-jwsdp.1.5.pom
Downloading: http://mirrors.ibiblio.org/pub/mirrors/maven2/jwsdp/jaxb-libs/jwsdp.1.5/jaxb-libs-jwsdp.1.5.pom
Downloading: http://download.java.net/maven/2/jwsdp/jaxb-libs/jwsdp.1.5/jaxb-libs-jwsdp.1.5.pom
Downloading: https://maven-repository.dev.java.net/repository/jwsdp/jaxb-libs/jwsdp.1.5/jaxb-libs-jwsdp.1.5.pom
Downloading: http://repo1.maven.org/maven2/jwsdp/jaxb-libs/jwsdp.1.5/jaxb-libs-jwsdp.1.5.pom
Downloading: http://download.java.net/maven/2/jwsdp/jax-qname/jwsdp.1.5/jax-qname-jwsdp.1.5.pom
Downloading: http://repository.jboss.org/maven2/jwsdp/jax-qname/jwsdp.1.5/jax-qname-jwsdp.1.5.pom
Downloading: http://mirrors.ibiblio.org/pub/mirrors/maven2/jwsdp/jax-qname/jwsdp.1.5/jax-qname-jwsdp.1.5.pom
Downloading: http://download.java.net/maven/2/jwsdp/jax-qname/jwsdp.1.5/jax-qname-jwsdp.1.5.pom",15/Oct/08 20:51;davsclaus;I guess the failure can be simulated by just throwing an exception in the processor instead of all the jaxb failing?,15/Oct/08 22:50;chris@die-schneider.net;I have attached a new example with a working pom. Sorry .. did not check if it works with an empty repo.,"16/Oct/08 11:25;davsclaus;Thanks Christian.

Sorry I was a bit grumpy. It was late and I wasn't in the mood to fight with maven. ","16/Oct/08 16:22;chris@die-schneider.net;It was indeed quite a fight with maven. There are several different versions out there in several repositories and most do not work. The documentation from the plugin website also does not really help. ;-(

About your comment on using a processor to show the failure. I am not sure if it is possbile to do so. It depends where the file will be opened. I guess when I simply add a processor after the file endpoint the file will not be opened at all. So I would guess the error will not show. ","16/Oct/08 16:59;davsclaus;Christian when I run your sample using camel 1.4.0 and drop first the ok and then the error file I get:

C:\cameltest>dir /s /b
C:\cameltest\in
C:\cameltest\ok
C:\cameltest\error
C:\cameltest\ok\shiporder_ok.xml
C:\cameltest\ok\shiporder_error.xml
C:\cameltest\error\shiporder_error.xml

There is no files in the in folder that is locked etc. However you get the error files *twice* and as it's in the ok folder *and* the error folder. We might consider the *moveNamePrefix* option to only work if the processing was a success (no exceptions). ",16/Oct/08 17:00;davsclaus;Christian what OS are you using? I am on Windows XP.,16/Oct/08 17:04;davsclaus;Sorry forgot about the convertBodyTo(String.class),16/Oct/08 17:08;davsclaus;I think this is OS dependent. I have tried 1.4.0 and 1.5-SNAPSHOT with and without the convertBodyTo and all moves the file from IN.,"16/Oct/08 17:11;davsclaus;However I am wondering if we should support a more flexible rename strategy so you can
- move to a folder if OK
- delete if OK
- move to another folder if ERROR
- delete if ERROR

Where you can mix and match what you need.

Well something to consider for Camel 2.0","16/Oct/08 17:12;davsclaus;Christian can you also try 1.5-SNAPSHOT as the file component had some changes as well, also regarding this WARN can not rename.

See camel download page for maven snapshot repo
http://activemq.apache.org/camel/download.html","16/Oct/08 18:21;chris@die-schneider.net;Hi Claus,

I am running Windows Vista but I don´t think this is a OS dependent issue. Could you reproduce the error when you leave out the convertBodyTo ?

I have debugged the error. The problem seems to be in:
org.apache.camel.converter.jaxb.FallbackTypeConverter line 90

InputStream inputStream = parentTypeConverter.convertTo(InputStream.class, value);
            if (inputStream != null) {
>>>>                Object unmarshalled = unmarshaller.unmarshal(inputStream);
                return type.cast(unmarshalled);
            }

It opens an inputstream and calls unmarshall. I am not sure how unmarshall should work. Does it close the stream when all goes well?
In any case it leaves the stream open if some exception happens. So I think there should be a try {} finally {}  in FallbackTypeConverter that 
tries to close the stream. Of with a try catch on close. 

This block is probably also necessary for the other variants following.

What do you think?
","16/Oct/08 19:58;davsclaus;Christian

Well spotted. I am working on a patch to properly close the stream after use. 

Could you then test it using 1.5-SNAPSHOT on your system to see if it works? ","16/Oct/08 20:08;davsclaus;I have committed a fix. It should take 2+ hours for the new 1.5-SNAPSHOT to be published to the maven repo.

Maybe you can try tomorrow morning.","16/Oct/08 20:43;chris@die-schneider.net;Hi Claus,

I just updated my checkout and compiled myself. The issue does not occur anymore. 
Thanks for this fast fix.

Greetings

Christian
","16/Oct/08 20:53;davsclaus;That is so great. Thanks Christian for taking the time to provide a test app and pin point the issue.

I have looked elsewhere and have fixed a few other data formats as well where resources should be closed as well.",23/Oct/08 04:33;davsclaus;Closing 1.5 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DataSetSedaTest intermittent test failure,CAMEL-974,12486843,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,hadrian,hadrian,11/Oct/08 00:23,21/Nov/09 11:57,14/Mar/19 02:42,18/Apr/09 10:15,1.4.0,,,,,,,,,,2.0-M2,,,camel-core,,,,0,"I get this kind of failures in the DataSetSedaTest now and then:

Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 4.731 sec <<< FAILURE!
test(org.apache.camel.component.dataset.DataSetSedaTest)  Time elapsed: 4.49 sec  <<< ERROR!
java.lang.AssertionError: dataset:foo Failed due to caught exception: java.lang.AssertionError: Header: camelDataSetIndex does not match. Expected: 33 but was: 32 on Exchange[Message: <hello>world!</hello>] with headers: {camelDataSetIndex=32}
        at org.apache.camel.component.mock.MockEndpoint.fail(MockEndpoint.java:712)
        at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:255)
        at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:214)
        at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:141)
        at org.apache.camel.ContextTestSupport.assertMockEndpointsSatisfied(ContextTestSupport.java:283)
        at org.apache.camel.component.dataset.DataSetSedaTest.test(DataSetSedaTest.java:35)


I am not sure yet if it's just a test issue (quite probable) or there's a more serious underlying issue.  If anybody else experienced this please add a comment.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-10-12 10:02:30.024,,,no_permission,,,,,,,,,,,,,83262,,,Sat Nov 21 11:57:54 UTC 2009,,,,,,,0|i01fjz:,6289,,,,,,,,,"12/Oct/08 10:02;davsclaus;I do think there were some high concurrency issue with the seda component. Willem fixed a problem with copying exchanges, but I used once in a while to get such errors as well.

But not for 2+ months or so.

See also CAMEL-901 that somehow could be related

If you change it to use direct queues then I am sure it works all the time.",14/Oct/08 13:28;janstey;You can also slow down the dataset producer by adding produceDelay=numOfMilliseconds. The default is 3 (milliseconds) but maybe this is not large enough?,"14/Oct/08 13:44;hadrian;@Claus, I saw that mail exchange, but didn't look into it, since you were on top of it :)

@Jon, well, the question is if there is some subtle problem in the seda component, of course we can work it around.

It doesn't happen often, it never happens in eclipse, i didn't see it if i enable logging, it's definitely some timing issue.  ","14/Oct/08 14:12;janstey;Hadrian, yeah, we don't want to just mask the problem :) I just remember having this issue in routes that did not have any seda endpoint

See: http://svn.apache.org/repos/asf/activemq/trunk/activemq-camel-loadtest/src/test/resources/org/apache/activemq/soaktest/LoadTest-context.xml

In that route, removing the produceDelay (which will then default it to 3 ms) will cause the same problem you see in DataSetSedaTest.","18/Apr/09 10:15;davsclaus;DataSet expects the data to receive in order, but the seda is async so some exchanges can arrive out of order.
I have added the produceDelay to the unit test and fixed the seda consumer to not minimum sleep for 4 millis.

trunk: 766288",21/Nov/09 11:57;davsclaus;Closing all 2.0M2 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TypeConverter Exception is thrown in the latest build of camel,CAMEL-973,12486821,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gertvanthienen,edelln,edelln,10/Oct/08 19:29,21/Nov/09 11:56,14/Mar/19 02:42,10/Feb/09 15:40,1.5.0,,,,,,,,,,1.6.0,,,camel-jbi,,,,0,"I have upgraded to the latest of Camel and when I attempt to use the content based router pattern - its now throwing an error.

The contents of the Message passed is a StringSource object and from debugging camel - the BodyType is a StringSource but it is attempting to convert from a StreamCache to a StringSource. 

I will try and put a testcase together but if anyone has any ideas of its cause in the meantime ?

The error it throws it below.

thanks, Edell.

No type converter available to convert from type: class org.apache.servicemix.camel.JbiMessage to the required type: org.w3c.dom.Document with value JbiMessage: org.apache.servicemix.jbi.runtime.impl.NormalizedMessageImpl@1d03b5b
org.apache.camel.NoTypeConversionAvailableException: No type converter available to convert from type: class org.apache.servicemix.camel.JbiMessage to the required type: org.w3c.dom.Document with value JbiMessage: org.apache.servicemix.jbi.runtime.impl.NormalizedMessageImpl@1d03b5b
	at org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:117)
	at org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:65)
	at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:69)
	at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:51)
	at org.apache.camel.builder.xml.XPathBuilder.getDocument(XPathBuilder.java:528)
	at org.apache.camel.builder.xml.XPathBuilder.evaluateAs(XPathBuilder.java:420)
	at org.apache.camel.builder.xml.XPathBuilder.matches(XPathBuilder.java:98)
	at org.apache.camel.builder.xml.XPathBuilder.matches(XPathBuilder.java:63)
	at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:47)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:75)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:174)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:96)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:63)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:47)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:41)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:66)
	at org.apache.servicemix.camel.CamelProviderEndpoint.handleActiveProviderExchange(CamelProviderEndpoint.java:115)
	at org.apache.servicemix.camel.CamelProviderEndpoint.process(CamelProviderEndpoint.java:73)
	at org.apache.servicemix.common.AsyncBaseLifeCycle.doProcess(AsyncBaseLifeCycle.java:600)
	at org.apache.servicemix.common.AsyncBaseLifeCycle.processExchange(AsyncBaseLifeCycle.java:554)
	at org.apache.servicemix.common.AsyncBaseLifeCycle.processExchangeInTx(AsyncBaseLifeCycle.java:456)
	at org.apache.servicemix.common.AsyncBaseLifeCycle$2.run(AsyncBaseLifeCycle.java:341)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675)
	at java.lang.Thread.run(Thread.java:595)",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-10-11 01:53:48.936,,,no_permission,,,,,,,,,,,,,83349,,,Sat Nov 21 11:56:56 UTC 2009,,,,,,,0|i01fjr:,6288,,,,,,,,,"11/Oct/08 01:53;njiang;I don't know if it relates to CAMEL-520 and CAMEL-858.

From the stack trace, it looks like camel can't find a JbiMessage to Document converting method.","11/Oct/08 10:11;davsclaus;Willem I think you need to align this with ServiceMix. Hadrian changed the type converter strategy to throw a NoTypeConversionAvailableException if no type converter found. Before Camel silently ignored this. ServiceMix should adjust by using try .. .catch (NoTypeConversionAvailableException e) and ignore it, or provide the missing type converter out-of-the-box in their camel-jbi.jar

I think this issue is a blocker for servicemix, that it needs to adjust to this change in camel 1.5","13/Oct/08 09:40;gertvanthienen;Part of the problem is that our current StreamCacheInterceptor is caching Source types that do not need any caching.
An example: a StringSource can be read multiple times without any problem, but because it extends StreamSource it is still being 'streamcached'

http://svn.eu.apache.org/viewvc?view=rev&revision=703990 should fix this end of the problem.","14/Oct/08 19:42;gertvanthienen;While looking into this issue, I created a new test case (cfr. http://svn.eu.apache.org/viewvc?view=rev&revision=704638).

This test fails if you remove the convertBodyTo(String.class) from the route, although one would expect that the StreamSource would have been cached with the solution for CAMEL-520.  Not sure why that is yet, so let me assign this issue to myself while I figure it out.","10/Feb/09 13:01;davsclaus;Gertv. Looks like you latest changes to the StreamCache have fixed this one as well.

I think this ticket is fixed in Camel 1.6.0",10/Feb/09 15:40;gertvanthienen;Fixed as part of CAMEL-1271,21/Nov/09 11:56;davsclaus;Closing all 1.6.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
schemagen gets disabled when release profile is enabled,CAMEL-972,12485398,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,janstey,janstey,janstey,09/Oct/08 15:52,16/Feb/09 05:51,14/Mar/19 02:42,09/Oct/08 16:04,,,,,,,,,,,1.5.0,,,,,,,0,"When camel is built with -Prelease, the schemagen stuff in camel-spring gets disabled (it is in an activeByDefault profile)",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-02-16 05:51:55.319,,,no_permission,,,,,,,,,,,,,103426,,,Mon Feb 16 05:51:55 UTC 2009,,,,,,,0|i01fjj:,6287,,,,,,,,,"09/Oct/08 16:02;janstey;Activation conditions in Maven profiles are pretty limited so it doesn't look like this can be fixed. The workaround is to just pass in -Prelease,enable-schemagen instead of -Prelease, which isn't so bad :) I'll update the release documentation.",09/Oct/08 16:04;janstey;Fixed with the workaround mentioned.,16/Feb/09 05:51;davsclaus;Closing all 1.5.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
createConnector attribute for CamelJMXAgentType should default to 'true',CAMEL-970,12485088,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,hadrian,hadrian,08/Oct/08 17:40,16/Feb/09 05:51,14/Mar/19 02:42,08/Oct/08 18:23,1.4.0,,,,,,,,,,1.5.0,,,camel-spring,,,,0,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-02-16 05:51:55.284,,,no_permission,,,,,,,,,,,,,83263,,,Mon Feb 16 05:51:55 UTC 2009,,,,,,,0|i01fj3:,6285,,,,,,,,,16/Feb/09 05:51;davsclaus;Closing all 1.5.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CamelContext.setRoutes() documentation is misleading,CAMEL-969,12485026,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,geoffgibbs,geoffgibbs,08/Oct/08 14:16,16/Feb/09 05:51,14/Mar/19 02:42,08/Oct/08 19:16,1.4.0,,,,,,,,,,1.5.0,,,camel-core,,,,0,"The javaDoc for CamelContext.setRoutes() states:

""Sets the routes for this context, replacing any current routes""

Yet when used, and the context started, startRouteDefinitions() is used first, causing any existing routes created through the definitions (such as those from RouteBuilders) to be re-created and started before the new routes provided to setRoutes() are started.
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-10-08 19:16:01.816,,,no_permission,,,,,,,,,,,,,83264,,,Mon Feb 16 05:51:55 UTC 2009,,,,,,,0|i01fiv:,6284,,,,,,,,,"08/Oct/08 19:16;davsclaus;Thanks for reporting this.

You should use addRoutes instead, as overriding existing routes is not supported yet, use addRoutes instead",16/Feb/09 05:51;davsclaus;Closing all 1.5.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Get Table not found error when running the IBatisRouteTest on the slower box,CAMEL-967,12486053,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,08/Oct/08 07:13,16/Feb/09 05:51,14/Mar/19 02:42,08/Oct/08 12:04,,,,,,,,,,,1.5.0,,,camel-ibatis,,,,0,"org.apache.camel.RuntimeCamelException: Failed to poll: Endpoint[ibatis:selectAllAccounts]. Reason: com.ibatis.common.jdbc.exception.NestedSQLException:
--- The error occurred in org/apache/camel/component/ibatis/Account.xml.
--- The error occurred while executing query.
--- Check the      select * from ACCOUNT   .
--- Check the SQL Statement (preparation failed).
--- Cause: java.sql.SQLException: Table not found in statement [     select * from ACCOUNT   ]
        at org.apache.camel.component.ibatis.IBatisPollingConsumer.receiveNoWait
(IBatisPollingConsumer.java:50)
        at org.apache.camel.impl.DefaultScheduledPollConsumer.poll(DefaultScheduledPollConsumer.java:46)
        at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:66)
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:417)
        at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:280)
        at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:135)",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-10-08 07:37:46.128,,,no_permission,,,,,,,,,,,,,103423,,,Mon Feb 16 05:51:55 UTC 2009,,,,,,,0|i01fif:,6282,,,,,,,,,08/Oct/08 07:17;njiang;the polling Consumer should support delay parameter.,"08/Oct/08 07:37;davsclaus;William see:
http://activemq.apache.org/camel/ibatis.html

Use a timer to delay. We are planning for a much better scheduling i camel 2.0 to move this responsibility out of each component but into a common feature that is much more flexible and supporting fluent builders.

See the camel-dev topic where we have a discussion about this.",16/Feb/09 05:51;davsclaus;Closing all 1.5.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"When camel-osgi is on the classpath but camel is not used in an OSGi context, camel-osgi behaves badly",CAMEL-965,12484853,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gnt,gnt,gnt,07/Oct/08 16:33,16/Feb/09 05:51,14/Mar/19 02:42,07/Oct/08 18:12,,,,,,,,,,,1.5.0,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-02-16 05:51:55.129,,,no_permission,,,,,,,,,,,,,103421,,,Mon Feb 16 05:51:55 UTC 2009,,,,,,,0|i01fhz:,6280,,,,,,,,,"07/Oct/08 18:12;gnt;Sending        components/camel-osgi/src/main/java/org/apache/camel/osgi/CamelContextFactoryBean.java
Transmitting file data .
Committed revision 702569.",16/Feb/09 05:51;davsclaus;Closing all 1.5.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Inconsistency in recipient list documentation?,CAMEL-958,12486049,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,oisin,oisin,02/Oct/08 14:31,16/Feb/09 05:51,14/Mar/19 02:42,05/Oct/08 14:45,1.4.0,,,,,,,,,,1.5.0,,,documentation,,,,0,"The mail thread at http://tinyurl.com/47bqre seems to contradict the documentation at http://activemq.apache.org/camel/recipient-list.html -- not sure if this is a doc issue, or a camel behavioural issue.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-10-03 15:24:32.431,,,no_permission,,,,,,,,,,,,,83265,,,Mon Feb 16 05:51:54 UTC 2009,,,,,,,0|i01fg7:,6272,,,,,,,,,"03/Oct/08 15:24;davsclaus;See nabble:
http://www.nabble.com/Regarding-multiple-%3Cto..%3E-recipients-td19799388s22882.html

For more mistakes in wiki","05/Oct/08 14:19;davsclaus;About wiretab:

We state on the wiki doc that the tab gets the message *before* the destination. This can only be support as it currently does with the pipeline using to(tab, destination).

However the EIP page states its route as a recipient list.

I guess we should be safe and change the samples to use multicast.",05/Oct/08 14:45;davsclaus;Fixed the wiretab examples,16/Feb/09 05:51;davsclaus;Closing all 1.5.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-spring/rest does not build on HP-UX,CAMEL-957,12486043,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,janstey,janstey,02/Oct/08 12:39,16/Feb/09 05:51,14/Mar/19 02:42,02/Oct/08 12:58,1.4.0,,,,,,,,,,1.5.0,,,camel-spring,,,,0,"I'm getting the following error from camel-spring on the HP-UX platform. I should be able to reuse a fix I made to a similar problem in CAMEL-939

[18:53:50]: [ERROR] FATAL ERROR
[18:53:50]: [INFO] ------------------------------------------------------------------------
[18:53:50]: [INFO] com/sun/mirror/apt/AnnotationProcessorFactory
[18:53:50]: [INFO] ------------------------------------------------------------------------
[18:53:50]: [INFO] Trace
[18:53:50]: java.lang.NoClassDefFoundError: com/sun/mirror/apt/AnnotationProcessorFactory
[18:53:50]: at com.sun.tools.jxc.maven2.SchemaGenMojo.execute(SchemaGenMojo.java:143)
[18:53:50]: at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:451)",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-02-16 05:51:54.912,,,no_permission,,,,,,,,,,,,,83266,,,Mon Feb 16 05:51:54 UTC 2009,,,,,,,0|i01ffz:,6271,,,,,,,,,02/Oct/08 12:57;janstey;Committed a fix for this in revision 701109. I did need to get around this http://jira.codehaus.org/browse/MNG-1753 maven issue with a few duplicated plugins but its not too bad :),16/Feb/09 05:51;davsclaus;Closing all 1.5.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Can't set the jms message header which has the Data object in JMS Component,CAMEL-942,12486016,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,28/Sep/08 04:02,15/Jan/15 13:12,14/Mar/19 02:42,28/Sep/08 04:13,1.4.0,,,,,,,,,,1.5.0,,,camel-jms,,,,0,"When I came across to fix the FileRouteToJMSTest failure, I found the JMSComponent can't handle the message header with the Data object rightly.

org.springframework.jms.MessageFormatException: Only objectified primitive objects, String, Map and List types are allowed but was: Sun Sep 28 09:52:36 CST 2008 type: class java.util.Date; nested exception is javax.jms.MessageFormatException: Only objectified primitive objects, String, Map and List types are allowed but was: Sun Sep 28 09:52:36 CST 2008 type: class java.util.Date
	at org.springframework.jms.support.JmsUtils.convertJmsAccessException(JmsUtils.java:273)
	at org.springframework.jms.support.JmsAccessor.convertJmsAccessException(JmsAccessor.java:168)
	at org.springframework.jms.core.JmsTemplate.execute(JmsTemplate.java:474)
	at org.springframework.jms.core.JmsTemplate.send(JmsTemplate.java:548)
	at org.apache.camel.component.jms.JmsProducer.process(JmsProducer.java:227)
	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:75)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:57)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:174)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:96)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:57)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:39)
	at org.apache.camel.component.file.FileConsumer.pollFile(FileConsumer.java:153)
	at org.apache.camel.component.file.FileConsumer.pollFileOrDirectory(FileConsumer.java:89)
	at org.apache.camel.component.file.FileConsumer.pollFileOrDirectory(FileConsumer.java:99)
	at org.apache.camel.component.file.FileConsumer.poll(FileConsumer.java:65)
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:66)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:417)
	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:280)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:135)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:65)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:142)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:166)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675)
	at java.lang.Thread.run(Thread.java:595)
Caused by: javax.jms.MessageFormatException: Only objectified primitive objects, String, Map and List types are allowed but was: Sun Sep 28 09:52:36 CST 2008 type: class java.util.Date
	at org.apache.activemq.command.ActiveMQMessage.checkValidObject(ActiveMQMessage.java:432)
	at org.apache.activemq.command.ActiveMQMessage.setObjectProperty(ActiveMQMessage.java:397)
	at org.apache.activemq.command.ActiveMQMessage.setObjectProperty(ActiveMQMessage.java:385)
	at org.apache.activemq.command.ActiveMQBytesMessage.setObjectProperty(ActiveMQBytesMessage.java:844)
	at org.apache.camel.component.jms.JmsBinding.appendJmsProperty(JmsBinding.java:254)
	at org.apache.camel.component.jms.JmsBinding.appendJmsProperties(JmsBinding.java:220)
	at org.apache.camel.component.jms.JmsBinding.makeJmsMessage(JmsBinding.java:198)
	at org.apache.camel.component.jms.JmsProducer$2.createMessage(JmsProducer.java:229)
	at org.springframework.jms.core.JmsTemplate.doSend(JmsTemplate.java:570)
	at org.springframework.jms.core.JmsTemplate$4.doInJms(JmsTemplate.java:551)
	at org.springframework.jms.core.JmsTemplate.execute(JmsTemplate.java:471)
	... 23 more

",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-02-16 05:51:54.694,,,no_permission,,,,,,,,,,,,,83267,,,Thu Jan 15 13:12:41 UTC 2015,,,,,,,0|i01fcn:,6256,,,,,,,,,16/Feb/09 05:51;davsclaus;Closing all 1.5.0 issues,15/Jan/15 13:00;laeubi;How was this fiexd? I also encountered the problem that it is not possible to send java.util.Date header via JMS. Must I enable something for this to work?,"15/Jan/15 13:12;davsclaus;Do not comment on old tickets. 

Use the mailing list / user forum / stackoverflow to ask this kind of question",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Investigate test failures on AIX,CAMEL-939,12485990,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,janstey,janstey,26/Sep/08 12:15,16/Feb/09 05:51,14/Mar/19 02:42,29/Oct/08 12:09,1.4.0,,,,,,,,,,1.5.0,,,camel-core,camel-spring,,,0,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-02-16 05:51:54.642,,,no_permission,,,,,,,,,,,,,83269,,,Mon Feb 16 05:51:54 UTC 2009,,,,,,,0|i01fbz:,6253,,,,,,,,,"26/Sep/08 12:22;janstey;Just fixed a compile error in camel-core but also found two other errors:

1. In camel-spring, looks like the schemagen plugin doesn't work on AIX.

{code}
Error starting apt
        at com.sun.tools.jxc.AptBasedTask$InternalAptAdapter.execute(AptBasedTask.java:68)
        at com.sun.tools.jxc.AptBasedTask.compile(AptBasedTask.java:108)
        at com.sun.tools.jxc.maven2.SchemaGenAdapter.execute(SchemaGenAdapter.java:111)
        at com.sun.tools.jxc.maven2.SchemaGenMojo.execute(SchemaGenMojo.java:161)
        at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:451)
        ...
        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)
Caused by: java.lang.ClassNotFoundException: com.sun.tools.apt.Main
        at java.lang.Class.forName(Class.java:130)
        at com.sun.tools.jxc.AptBasedTask$InternalAptAdapter.execute(AptBasedTask.java:52)
{code}

2. In camel-core I get this 

{code}
org.apache.camel.builder.xml.InvalidXPathExpression: Invalid xpath: java:org.apache.camel.builder.xml.XPathTest.func(string(/header 
value)). Reason: javax.xml.xpath.XPathExpressionException: org.apache.xpath.XPathException: Can not convert #STRING to a NodeList!
at org.apache.camel.builder.xml.XPathBuilder.evaluateAs(XPathBuilder.java:443)
at org.apache.camel.builder.xml.XPathBuilder.evaluate(XPathBuilder.java:110)
at org.apache.camel.TestSupport.assertExpression(TestSupport.java:197)
at org.apache.camel.builder.xml.XPathTest.assertExpression(XPathTest.java:84)
at org.apache.camel.builder.xml.XPathTest.testUsingJavaExtensions(XPathTest.java:69)
Caused by: javax.xml.xpath.XPathExpressionException: org.apache.xpath.XPathException: Can not convert #STRING to a NodeList!
at org.apache.xpath.jaxp.XPathExpressionImpl.evaluate(XPathExpressionImpl.java:103)
at org.apache.camel.builder.xml.XPathBuilder.evaluateAs(XPathBuilder.java:429)
... 30 more
Caused by: org.apache.xpath.XPathException: Can not convert #STRING to a NodeList!
at org.apache.xpath.objects.XObject.error(XObject.java:707)
at org.apache.xpath.objects.XObject.nodelist(XObject.java:453)
at org.apache.xpath.jaxp.XPathExpressionImpl.xObjectToObject(XPathExpressionImpl.java:226)
at org.apache.xpath.jaxp.XPathExpressionImpl.evaluate(XPathExpressionImpl.java:91)
... 31 more
{code}

Looking into these issues now.","26/Sep/08 13:17;janstey;I think the only way to get around #1 would be to remove camel-spring from the build on AIX. The schema generation just isn't going to fly on that platform. Of course, we still need to test the camel-spring tests on AIX... I'm running these now.

I propose to have a separate project (under <camel-root>/tests perhaps) that would download camel-spring built elsewhere on another platform, and then just run the tests. This would be enabled only for AIX.",29/Sep/08 12:24;janstey;Fixed #2 in revision 700090. The test was supposed to be ignored when Xalan was not on the CP.,29/Sep/08 18:01;janstey;Disabled build of camel-spring/rest on AIX in revision 700186. Still working on getting the tests running for this.,01/Oct/08 17:07;janstey;Got the camel-spring/rest tests running by simply ignoring the schemagen plugin on AIX and downloading the last deployed xsd instead.,"02/Oct/08 17:51;janstey;I'm taking a long weekend so I figured I would put up whats left to get Camel working on AIX.

1. LDAP not working
LdapRouteTest.testLdapRoute  (org.apache.camel.component.ldap)
- ApacheDS seems to be using the SunX509 KeyManagerFactory directly, which is obviously not in the IBM JDK... not sure how were going to get around this besides patching Apache DS...

2. Ruby not working
RubyExpressionTest.testSendMatchingMessage (org.apache.camel.builder.script)
RubyExpressionTest.testSendNonMatchingMessage (org.apache.camel.builder.script)
Jsr223Test.testLanguageNames (org.apache.camel.builder.script)
RubyFilterTest.testSendMatchingMessage (org.apache.camel.builder.script.example)

and

org.apache.camel.ruby.RouteUsingNestedScopesTest
file:/home/janstey/.m2/repository/org/jruby/jruby/1.1.4/jruby-1.1.4.jar!/builtin/javasupport.rb:47:in `require': IO error -- builtin/java/regex (LoadError)
        from file:/home/janstey/.m2/repository/org/jruby/jruby/1.1.4/jruby-1.1.4.jar!/builtin/javasupport.rb:47
        from file:/home/janstey/.m2/repository/org/jruby/jruby/1.1.4/jruby-1.1.4.jar!/builtin/javasupport.rb:17:in `require'
        from /x1/janstey/apache/camel/trunk/components/camel-ruby/target/classes/camel.rb:17
        from /x1/janstey/apache/camel/trunk/components/camel-ruby/target/classes/camel.rb:17:in `require'
        from src/test/java/org/apache/camel/ruby/scopes.rb:17

- Basically, all are failing to load the jruby library

3. Python test failing
PythonLanguageTest.testLanguageExpressions (org.apache.camel.language.script)
- At first glance, looks to be just a timing issue on slower machines. Should be an easy one.",20/Oct/08 14:21;janstey;I provided a fix to ApacheDS that resolves the camel-ldap failure (https://issues.apache.org/jira/browse/DIRSERVER-1279). We'll just need a new release of it to incorporate the fix in Camel. I'm thinking of putting up a patched ApacheDS 1.5.4 at repo.open.iona.com/maven2,"20/Oct/08 16:38;janstey;Submitted a fix for the python test case in rev 706330. 

Remaining issues: 
* jruby failing to load, 
* camel should depend on a patched version of apache ds.
",23/Oct/08 15:46;janstey;I did up my own release of ApacheDS with the aforementioned fix. Camel now depends on this version which works fine on AIX - yay!,27/Oct/08 16:24;janstey;Disabled ruby scripting tests for IBM JDK only. I think this issue is release notable since we have a bunch of other scripting languages to choose from. When this gets fixed in JRuby (JRUBY-3073) we should upgrade JRuby and enable the tests again. I'll create a JIRA reminder for this & update the 1.5 release notes.,27/Oct/08 16:32;janstey;Running final tests now with IBM JDK on AIX and Linux to see if any new issues cropped up.,"29/Oct/08 12:08;janstey;I'm still getting some failures in my CI environment but everything passes when I run the same tests myself. I'm calling this task complete, for 1.5 too! :)

I'll investigate these CI environment issues offline.",16/Feb/09 05:51;davsclaus;Closing all 1.5.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Current 1.5 snapshot kit don't include the manual doc,CAMEL-938,12485746,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,26/Sep/08 07:46,16/Feb/09 05:51,14/Mar/19 02:42,27/Sep/08 03:58,,,,,,,,,,,1.5.0,,,,,,,0,I just found current Camel kit didn't include the manual doc in the bin distribution.,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-02-16 05:51:54.61,,,no_permission,,,,,,,,,,,,,103401,,,Mon Feb 16 05:51:54 UTC 2009,,,,,,,0|i01fbr:,6252,,,,,,,,,16/Feb/09 05:51;davsclaus;Closing all 1.5.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
current http component producer don't support the https protocol,CAMEL-934,12484688,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,24/Sep/08 01:59,16/Feb/09 05:51,14/Mar/19 02:42,25/Sep/08 07:38,1.2.0,1.3.0,1.4.0,,,,,,,,1.5.0,,,camel-http,,,,0,http://www.nabble.com/Is-there-an-HTTPS-producer-endpoint--td19635772s22882.html,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-02-16 05:51:54.53,,,no_permission,,,,,,,,,,,,,83124,,,Mon Feb 16 05:51:54 UTC 2009,,,,,,,0|i01fav:,6248,,,,,,,,,16/Feb/09 05:51;davsclaus;Closing all 1.5.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Double input without output produce exception,CAMEL-927,12485983,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,vchekan,vchekan,22/Sep/08 06:09,16/Feb/09 05:51,14/Mar/19 02:42,28/Sep/08 08:35,1.5.0,,,,,,,,,,1.5.0,,,camel-core,,,,0,"Turn trace on.
Run this route:
		from(""timer://kickoff_1?period=10000&delay=1"");
As expected there is output from Trace Interceptor every 10 sec.

Now run this route:
		from(""timer://kickoff_1?period=10000&delay=1"").
		from(""timer://kickoff_2?period=10000&delay=2"");
You will get exception:
2008-09-22 06:03:01,871 [d=10000&delay=2] INFO  TraceInterceptor               - ID-ubuntu/50540-1222063381751/2-1 -> interceptor1 Interceptor[Delegate(null)] InOnly Properties:{org.apache.camel.timer.name=kickoff_2, org.apache.camel.timer.firedTime=Mon Sep 22 06:03:01 GMT 2008, org.apache.camel.timer.period=10000} Headers:{firedTime=Mon Sep 22 06:03:01 GMT 2008} BodyType:null Body:Message: null
2008-09-22 06:03:01,872 [d=10000&delay=2] ERROR DeadLetterChannel              - Failed delivery for exchangeId: ID-ubuntu/50540-1222063381751/0-0. On delivery attempt: 0 caught: java.lang.NullPointerException
java.lang.NullPointerException
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:69)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:41)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:50)
	at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:50)
	at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:79)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:67)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:69)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:174)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:96)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:57)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:41)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:50)
	at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:50)
	at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:79)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:67)
	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:39)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:41)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:66)
	at org.apache.camel.component.timer.TimerConsumer.sendTimerExchange(TimerConsumer.java:98)
	at org.apache.camel.component.timer.TimerConsumer$1.run(TimerConsumer.java:49)
	at java.util.TimerThread.mainLoop(Timer.java:512)
	at java.util.TimerThread.run(Timer.java:462)


Why single input works fine and two produce an exception?",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-09-22 08:58:42.98,,,no_permission,,,,,,,,,,,,,83350,,,Mon Feb 16 05:51:53 UTC 2009,,,,,,,0|i01f9b:,6241,,,,,,,,,"22/Sep/08 08:58;davsclaus;Vadim I have tried to reproduce the bug with an unit test.
camel-core\src\test\java\org\apache\camel\issues\TwoTimerWithJMSIssue.java
I can not provoke the error. 

Can you get the error every time? What is your route, isn't there any destination from the timer? = i.e. there is no TO","23/Sep/08 03:58;vchekan;I upgraded to the current trunk and I still see exception every time I run it.
Claus, there is a bug in the unit test: in my 2nd example two routes are concatenated by dot, not by semicolon. In other words it is a single java statement. Could you check it please? If you still can not reproduce it then I'll keep digging.
Yes, when there is any output then double input works fine. I'm playing with my DSL and I'm testing weird combinations :)","23/Sep/08 06:16;davsclaus;Ah so you are actually making silly routes as:

{code}
from(x).from(y);
{code}

Okay then there could of course be some quirks.","24/Sep/08 07:53;davsclaus;Vadim and others

I think we should add a check in the builder when you do silly stacks so as:
from().from()

we should raise an exception stating its not valid to do like this.

Any thoughts?

We have a few of those checks for other bad combos.","24/Sep/08 13:13;davsclaus;Ah of course you can stack inputs as well ;)

so from().from() should basically be supported. But the don't have outputs and thus causes the bug",24/Sep/08 13:17;davsclaus;Ah the culprit is the JMX stuff that assumes that there is an output. ,"25/Sep/08 06:37;davsclaus;TODO: Add unit tests with multi inputs
- from(x).from(y)
- from(x, y)","25/Sep/08 17:22;vchekan;Well, I filed this bug not because I worry about selseless combo from().from(); but because I see some inconsistency in error handling.

In case of ""from();"" there is the same exception happen internally. A processor tries to call the next processor withing the chain and fails with NPE. This exception is intercepted and message is marked as ""failed"". But you can not see anything wrong logged to the console. But in case of double inputs, exception becomes visible.
So I suspect that actually ""from.from"" produces correct behavior when ""from"" hides an error.

I don't think that ""from.from"" is totally bogus. Lets say we want to drain some data source and we are not interested in the result.

Am I right that processes shoud call this.proceed instead of calling next processor in the chain explicitly? Anyway, my concern is invisible exception in the single ""from"" case. There is still NPE happening, why I can't see it in the output?","28/Sep/08 07:59;davsclaus;Vadim, that is a valid use-case but I guess its seldom used.

However a NPE is a NPE and its in camel-core so we should fix it. It happends because of the JMX instruments the routing and assumes it can process it to the next in the chain.

",16/Feb/09 05:51;davsclaus;Closing all 1.5.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
file component - should throw exception if can not delete or renamed consumed file,CAMEL-925,12485637,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,21/Sep/08 10:18,23/Oct/08 04:37,14/Mar/19 02:42,21/Sep/08 11:03,1.4.0,,,,,,,,,,1.5.0,,,camel-core,,,,0,"Currently it logs at WARN level that camel could not rename/delete the consumer file after processing.

However as end-users might not notice this ""could be bigger problem"" we should throw an IOException instead.
PS: The File API is terrible as it returns a boolean of this operation (will be fixed in NIO2 with a much better API).

The bigger problem is that if you don't want to consume the file twice you should get a ""exception"" to track down the problem. WARN logs can be harder to track down.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,83270,,,Thu Oct 23 04:37:13 UTC 2008,,,,,,,0|i01f8v:,6239,,,,,,,,,23/Oct/08 04:37;davsclaus;Closing 1.5 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Remove deps on persistence-api jar, non compliant with the spec",CAMEL-922,12485996,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,hadrian,hadrian,19/Sep/08 16:06,16/Feb/09 05:51,14/Mar/19 02:42,19/Sep/08 20:37,1.4.0,,,,,,,,,,1.5.0,,,camel-jpa,,,,0,"I mentioned a while ago a warning I couldn't explain in eclipse related to the use of @UniqueConstraint in camel-jpa.

It turned out to be due to the fact that camel-jpa has a dependency on persistence api, but used for testing openjpa that has a dependency on geronimo-jpa_3.0_spec.  So camel-jpa pulls in two different implementation of the same spec.  So far so good.  It also turns out that the definition of the @UniqueConstraint annotation is different in the two jars, the persistence-api (and the camel-jpa code as implemented) being non spec compliant.  I found other inconsistencies in the persistence-api impl and it seems to be based on an older version of the spec.

(More precisely persistence api annotates the @interface UniqueConstraint with @Target({TYPE}) whereas the spec and the geronimo impl use: @Target({}))

My recommendation is to replace the dependency on persistence-api with the geronimo version.  I will commit a change for this in the next hour or so, but leave this issue open.  If anybody has any objections please shout and I will revert the change.




",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-09-19 19:49:00.482,,,no_permission,,,,,,,,,,,,,83271,,,Mon Feb 16 05:51:53 UTC 2009,,,,,,,0|i01f87:,6236,,,,,,,,,"19/Sep/08 19:49;davsclaus;+1

maybe set the version of the dependency as a property in the uber pom.xml. Its a good overview of all the deps we commonly use and easy to upgrade to a newer version.","19/Sep/08 20:37;hadrian;Thanks Claus.  Yeah, the version stuff is already done that way :).",16/Feb/09 05:51;davsclaus;Closing all 1.5.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ResolverUtil complain about cant find the convert package in Servicemix 4,CAMEL-921,12485557,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,19/Sep/08 10:25,16/Feb/09 05:51,14/Mar/19 02:42,19/Sep/08 10:35,1.4.0,,,,,,,,,,1.5.0,,,,,,,0,"java.io.FileNotFoundException: /org/apache/camel/converter (No such file or directory)
        at java.io.FileInputStream.open(Native Method)
        at java.io.FileInputStream.<init>(FileInputStream.java:106)
        at org.apache.camel.util.ResolverUtil.loadImplementationsInJar(ResolverUtil.java:476)
        at org.apache.camel.util.ResolverUtil.find(ResolverUtil.java:362)
        at org.apache.camel.util.ResolverUtil.find(ResolverUtil.java:277)
        at org.apache.camel.util.ResolverUtil.findAnnotated(ResolverUtil.java:253)
        at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.load(AnnotationTypeConverterLoader.java:66)
        at org.apache.camel.impl.converter.DefaultTypeConverter.checkLoaded(DefaultTypeConverter.java:218)
        at org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:64)
        at org.apache.camel.util.IntrospectionSupport.convert(IntrospectionSupport.java:216)
        at org.apache.camel.util.IntrospectionSupport.setProperty(IntrospectionSupport.java:194)
        at org.apache.camel.util.IntrospectionSupport.setProperties(IntrospectionSupport.java:167)
        at org.apache.camel.impl.DefaultComponent.setProperties(DefaultComponent.java:181)
        at org.apache.camel.component.timer.TimerComponent.createEndpoint(TimerComponent.java:54)
        at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:81)
        at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:253)
        at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:52)
        at org.apache.camel.model.RouteType.resolveEndpoint(RouteType.java:100)
        at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:102)
        at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:108)
        at org.apache.camel.model.FromType.resolveEndpoint(FromType.java:73)
        at org.apache.camel.impl.DefaultRouteContext.getEndpoint(DefaultRouteContext.java:77)
        at org.apache.camel.model.RouteType.addRoutes(RouteType.java:214)
        at org.apache.camel.model.RouteType.addRoutes(RouteType.java:90)
        at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:520)
        at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:512)
        at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:149)
        at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:47)
        at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:103)
        at org.springframework.context.event.SimpleApplicationEventMulticaster$1.run(SimpleApplicationEventMulticaster.java:78)
        at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:49)
        at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:76)
        at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:275)
        at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:737)
        at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:384)
        at org.apache.servicemix.common.xbean.AbstractXBeanDeployer.deploy(AbstractXBeanDeployer.java:86)
        at org.apache.servicemix.camel.CamelSpringDeployer.deploy(CamelSpringDeployer.java:71)
        at org.apache.servicemix.common.BaseServiceUnitManager.doDeploy(BaseServiceUnitManager.java:88)
        at org.apache.servicemix.common.BaseServiceUnitManager.deploy(BaseServiceUnitManager.java:69)
        at org.apache.servicemix.jbi.deployer.impl.ServiceUnitImpl.deploy(ServiceUnitImpl.java:89)
        at org.apache.servicemix.jbi.deployer.impl.Deployer.deployServiceAssembly(Deployer.java:306)
        at org.apache.servicemix.jbi.deployer.impl.Deployer.register(Deployer.java:170)
        at org.apache.servicemix.jbi.deployer.impl.AbstractBundleWatcher.onBundleStarted(AbstractBundleWatcher.java:80)
        at org.apache.servicemix.jbi.deployer.impl.AbstractBundleWatcher.access$000(AbstractBundleWatcher.java:34)
        at org.apache.servicemix.jbi.deployer.impl.AbstractBundleWatcher$1.bundleChanged(AbstractBundleWatcher.java:53)
        at org.apache.felix.framework.util.EventDispatcher.invokeBundleListenerCallback(EventDispatcher.java:690)
        at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:619)
        at org.apache.felix.framework.util.EventDispatcher.fireBundleEvent(EventDispatcher.java:532)
        at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:3601)
        at org.apache.felix.framework.Felix._startBundle(Felix.java:1616)
        at org.apache.felix.framework.Felix.startBundle(Felix.java:1544)
        at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:371)
        at org.apache.servicemix.kernel.filemonitor.FileMonitor.refreshPackagesAndStartOrUpdateBundles(FileMonitor.java:550)
        at org.apache.servicemix.kernel.filemonitor.FileMonitor.onFilesChanged(FileMonitor.java:297)
        at org.apache.servicemix.kernel.filemonitor.FileMonitor$1.filesChanged(FileMonitor.java:140)
        at org.apache.servicemix.kernel.filemonitor.Scanner.reportBulkChanges(Scanner.java:433)
        at org.apache.servicemix.kernel.filemonitor.Scanner.reportDifferences(Scanner.java:322)
        at org.apache.servicemix.kernel.filemonitor.Scanner.scan(Scanner.java:254)
        at org.apache.servicemix.kernel.filemonitor.Scanner$1.run(Scanner.java:214)
        at java.util.TimerThread.mainLoop(Timer.java:512)
        at java.util.TimerThread.run(Timer.java:462)
18:10:15,452 | ERROR | Timer-1          | ResolverUtil                     | g.apache.camel.util.ResolverUtil  489 | Could not search jar file '/org/apache/camel/converter' for classes matching criteria: annotated with @Converter due to an IOException: /org/apache/camel/converter (No such file or directory)
java.io.FileNotFoundException: /org/apache/camel/converter (No such file or directory)
        at java.io.FileInputStream.open(Native Method)
        at java.io.FileInputStream.<init>(FileInputStream.java:106)
        at org.apache.camel.util.ResolverUtil.loadImplementationsInJar(ResolverUtil.java:476)
        at org.apache.camel.util.ResolverUtil.find(ResolverUtil.java:362)
        at org.apache.camel.util.ResolverUtil.find(ResolverUtil.java:277)
        at org.apache.camel.util.ResolverUtil.findAnnotated(ResolverUtil.java:253)
        at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.load(AnnotationTypeConverterLoader.java:66)
        at org.apache.camel.impl.converter.DefaultTypeConverter.checkLoaded(DefaultTypeConverter.java:218)
        at org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:64)
        at org.apache.camel.util.IntrospectionSupport.convert(IntrospectionSupport.java:216)
        at org.apache.camel.util.IntrospectionSupport.setProperty(IntrospectionSupport.java:194)
        at org.apache.camel.util.IntrospectionSupport.setProperties(IntrospectionSupport.java:167)
        at org.apache.camel.impl.DefaultComponent.setProperties(DefaultComponent.java:181)
        at org.apache.camel.component.timer.TimerComponent.createEndpoint(TimerComponent.java:54)
        at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:81)
        at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:253)
        at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:52)
        at org.apache.camel.model.RouteType.resolveEndpoint(RouteType.java:100)
        at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:102)
        at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:108)
        at org.apache.camel.model.FromType.resolveEndpoint(FromType.java:73)
        at org.apache.camel.impl.DefaultRouteContext.getEndpoint(DefaultRouteContext.java:77)
        at org.apache.camel.model.RouteType.addRoutes(RouteType.java:214)
        at org.apache.camel.model.RouteType.addRoutes(RouteType.java:90)
        at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:520)
        at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:512)
        at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:149)
        at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:47)
        at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:103)
        at org.springframework.context.event.SimpleApplicationEventMulticaster$1.run(SimpleApplicationEventMulticaster.java:78)
        at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:49)
        at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:76)
        at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:275)
        at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:737)
        at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:384)
        at org.apache.servicemix.common.xbean.AbstractXBeanDeployer.deploy(AbstractXBeanDeployer.java:86)
        at org.apache.servicemix.camel.CamelSpringDeployer.deploy(CamelSpringDeployer.java:71)
        at org.apache.servicemix.common.BaseServiceUnitManager.doDeploy(BaseServiceUnitManager.java:88)
        at org.apache.servicemix.common.BaseServiceUnitManager.deploy(BaseServiceUnitManager.java:69)
        at org.apache.servicemix.jbi.deployer.impl.ServiceUnitImpl.deploy(ServiceUnitImpl.java:89)
        at org.apache.servicemix.jbi.deployer.impl.Deployer.deployServiceAssembly(Deployer.java:306)
        at org.apache.servicemix.jbi.deployer.impl.Deployer.register(Deployer.java:170)
        at org.apache.servicemix.jbi.deployer.impl.AbstractBundleWatcher.onBundleStarted(AbstractBundleWatcher.java:80)
        at org.apache.servicemix.jbi.deployer.impl.AbstractBundleWatcher.access$000(AbstractBundleWatcher.java:34)
        at org.apache.servicemix.jbi.deployer.impl.AbstractBundleWatcher$1.bundleChanged(AbstractBundleWatcher.java:53)
        at org.apache.felix.framework.util.EventDispatcher.invokeBundleListenerCallback(EventDispatcher.java:690)
        at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:619)
        at org.apache.felix.framework.util.EventDispatcher.fireBundleEvent(EventDispatcher.java:532)
        at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:3601)
        at org.apache.felix.framework.Felix._startBundle(Felix.java:1616)
        at org.apache.felix.framework.Felix.startBundle(Felix.java:1544)
        at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:371)
        at org.apache.servicemix.kernel.filemonitor.FileMonitor.refreshPackagesAndStartOrUpdateBundles(FileMonitor.java:550)
        at org.apache.servicemix.kernel.filemonitor.FileMonitor.onFilesChanged(FileMonitor.java:297)
        at org.apache.servicemix.kernel.filemonitor.FileMonitor$1.filesChanged(FileMonitor.java:140)
        at org.apache.servicemix.kernel.filemonitor.Scanner.reportBulkChanges(Scanner.java:433)
        at org.apache.servicemix.kernel.filemonitor.Scanner.reportDifferences(Scanner.java:322)
        at org.apache.servicemix.kernel.filemonitor.Scanner.scan(Scanner.java:254)
        at org.apache.servicemix.kernel.filemonitor.Scanner$1.run(Scanner.java:214)
        at java.util.TimerThread.mainLoop(Timer.java:512)
        at java.util.TimerThread.run(Timer.java:462)",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-02-16 05:51:53.401,,,no_permission,,,,,,,,,,,,,83272,,,Mon Feb 16 05:51:53 UTC 2009,,,,,,,0|i01f7z:,6235,,,,,,,,,16/Feb/09 05:51;davsclaus;Closing all 1.5.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"file component consumer.regexPattern does not work as expected (matching is applied not only to file, but also to directory)",CAMEL-920,12485736,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,davsclaus,oirad,oirad,19/Sep/08 08:47,23/Sep/08 08:20,14/Mar/19 02:42,19/Sep/08 18:59,1.5.0,,,,,,,,,,1.5.0,,,camel-core,,,,0,"file component consumer.regexPattern does not work as expected

example : from(""file://d:/the_input_dir?consumer.regexPattern=.*\.xml$"".to(whatever)

(should match only files, that has extention .xml)

the result of the above regexPattern is, that no file will be proccessed, regardless if an existing filename matches the pattern.
FileConsumer.pollFileOrDirectory() applies the regexPattern on the starting directory (the_input_dir) which will not match.




","Windows XP, JDK 1.5, Apache Camel 1.5 Snapshot",,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-09-19 09:35:46.627,,,no_permission,,,,,,,,,,,,,83351,,,Tue Sep 23 08:20:55 UTC 2008,,,,,,,0|i01f7r:,6234,,,,,,,,,19/Sep/08 09:35;davsclaus;Will look into it this weekend.,"19/Sep/08 09:41;davsclaus;Well is there any use cases for being able to exclude/regex directories also? I doubt it

I will change the matching to be *files only* except that any directories starting with a ""."" (dot) will also be skipped.",19/Sep/08 16:51;davsclaus;Remember the FTP component could have similar problem,"19/Sep/08 18:08;davsclaus;TODO: update wiki that directories is not matched against against regexp or exclude names etc.
TODO: Only directories starting with a dot (.) is skipped","19/Sep/08 18:59;davsclaus;Dario, if you please try the latest snapshot to test if the fix works for you.","23/Sep/08 08:20;oirad;It works, many thanks",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RouteBuilder.getRoutes does not return routes,CAMEL-919,12486035,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,prange,prange,19/Sep/08 06:52,16/Feb/09 05:51,14/Mar/19 02:42,21/Sep/08 17:09,1.4.0,,,,,,,,,,1.5.0,,,camel-core,,,,0,"Suspected reason:
Looking at the code reveals that the initalization of the routebuilder actually sets the routes in the injected CamelContext, but does not populate the local list of routes. 

Consequence:
One is not able to replace routes in the CamelContext by fetching routes from routebuilders, and then set the list of routes in the camel context.


{code}


List<Routes> routeList = new ArrayList();

//Some method fetching all my builders
List<Routes> routesList = getRouteBuilders();

//Build a list of all routes, thereby updating my camel context with fresh routes...
for(Routes routes:routesList){

    //Fetches an empty list, but the builder now sets the route in the context
    List<Route> routeListFromBuilder = routes.getRouteList();

    //I am now adding an empty list to my list of routes
    routeList.addAll( routeListFromBuilder );

}

//Sets an empty list into the context, thereby clearing all routes
camleContext.setRoutes( routeList );
{code}




Possible solution:

in RouteBuilder replace:
{code}
protected void populateRoutes(List<Route> routes) throws Exception {
        CamelContext camelContext = getContext();
        if (camelContext == null) {
            throw new IllegalArgumentException(""No CamelContext has been injected!"");
        }
        routeCollection.setCamelContext(camelContext);
        camelContext.addRouteDefinitions(routeCollection.getRoutes());
}
{code}
with
{code}

protected void populateRoutes(List<Route> routes) throws Exception {
        CamelContext camelContext = getContext();
        if (camelContext == null) {
            throw new IllegalArgumentException(""No CamelContext has been injected!"");
        }
        routeCollection.setCamelContext(camelContext);
        routes.addAll(routeCollection.getRoutes());
}
{code}
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-09-21 07:26:43.083,,,no_permission,,,,,,,,,,,,,83273,,,Mon Feb 16 05:51:53 UTC 2009,,,,,,,0|i01f7j:,6233,,,,,,,,,"21/Sep/08 07:26;davsclaus;Thanks for reporting this.

The Route is hardly used in Camel as we use the model RoutesType to build the route paths.",21/Sep/08 10:14;davsclaus;Hardly used by end-users I mean. End-users usually add the routing using a route builder that uses the models. But I think I got it fixed now.,"21/Sep/08 11:35;davsclaus;Currently Camel doesn't properly support removing existing routes and adding new dynamically. This is scheduled for Camel 2.x.

You should use the camelContext.addRoutes(routeList) to add you new routes to an existing context.

At present time we can not add a fix for this as it will break to much at current time.",21/Sep/08 12:08;davsclaus;I will cleanup the unused routes in RouteBuilder and add a throws UnsupportedOperationException for setRoutes in CamelContext.,21/Sep/08 17:08;davsclaus;Changing to fixed.,21/Sep/08 17:09;davsclaus;Notice that you should use addRoutes. setRoutes is not possible until Camel 2.x,16/Feb/09 05:51;davsclaus;Closing all 1.5.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel Maven plugin should not look for routes in target/test-classes,CAMEL-914,12485982,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,pledge,pledge,17/Sep/08 12:26,16/Feb/09 05:51,14/Mar/19 02:42,18/Sep/08 18:33,1.4.0,,,,,,,,,,1.5.0,,,tooling,,,,0,"Currently the Maven Plugin attempts to load Camel Routes from both target/classes and target/test-classes.  This causes an issue when you have the same package defined for testing as you have in your Camel Context.  An example problem is using a super class for a test which is only available a test dependency which results in a ClassNotFoundException.

I would propose one of the following:

# Prevent the plugin from using target/test-classes altogther
# Add a mojo parameter to allow for routes under test-classes to be scanned
#* This should default to False
#* If this parameter is set to True then the plugin should add dependencies marked as ""test"" to the classpath",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-09-17 17:42:26.932,,,no_permission,,,,,,,,,,,,,83274,,,Mon Feb 16 05:51:53 UTC 2009,,,,,,,0|i01f6f:,6228,,,,,,,,,17/Sep/08 13:03;pledge;See http://www.nabble.com/Camel-Maven-Plugin-looking-in-test-classes-td19530527s22882.html,17/Sep/08 13:18;pledge;It also seems to be using classpath resources from src/test/resources such as log4j configs. ,"17/Sep/08 17:42;davsclaus;I will go for option #1.

It looks like it adds the test classes.
But neither resources, so that should be added.

I actually doubt that we should add anything from the test? Is an option needed then afterall?","17/Sep/08 17:59;davsclaus;Martin I have commited a fix for this. Now the test-classes is not added to the classpath.

Can you test it? You need to use version 1.5-SNAPSHOT of the plugin. And to add the maven plugin snapshot repo to your maven repo.

{code:xml}
    <pluginRepositories>
        <pluginRepository>
            <id>apache-plugin-snapshots</id>
            <name>Apache Maven Plugins Snapshot Repository</name>
            <url>http://people.apache.org/maven-snapshot-repository</url>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
            <releases>
                <enabled>false</enabled>
            </releases>
        </pluginRepository>
    </pluginRepositories>
{code}","18/Sep/08 06:12;davsclaus;A reminder to myself. Check if test scoped .jar is added as well, they should not.","18/Sep/08 06:42;davsclaus;Okay I have refined it to not include test scoped jars as well. 

Also I have added a INFO logging with the classpath resolved just as {{mvn jetty:run}} also does. So now end-users can see the classpath when they using this tool.

Martin, let me know how it goes for you.","18/Sep/08 10:02;pledge;I have tested the same project and can confirm that it only attempts to load routes from target/classes now, which is fantastic.

However I do not see any INFO logging statements about the classpath.  In fact one issue is that without a log4j.properties/xml in src/main resources the only message that the plugin prints out is:
[INFO] [camel:run]
At first I wasn't even sure if Camel had completed startup.  I think a INFO statement saying ""Camel route creation complete"" or similar would be useful if possible.

When I add a log4j config with the root level set to DEBUG you can nicely see the details of the routes that are being created.  I will add this to the wiki page as it is very useful info to see when prototyping your app.","18/Sep/08 10:06;davsclaus;Thanks Martin

The INFO logging of classpath is recent added, so you have to wait until the Apache INFRA has build a new snapshot of the plugin. Wait X hours and try again. It should then have the classpath logged just as jetty does it.

eg a sample from running the spring example on my local laptop
{code}
[INFO] [camel:run]
[INFO] Classpath = [file:/D:/project/camel/examples/camel-example-spring/target/classes/, file:/C:/Documents and Settings/Claus Ibsen/.m2/repository/org/apache/camel/camel-spring/1.5-SNAPSHOT/camel-spring-1.5-SNAPSHOT.jar, file:/C:/Documents and Settings/Claus Ibsen/.m2/repository/org/apache/camel/c
amel-core/1.5-SNAPSHOT/camel-core-1.5-SNAPSHOT.jar, file:/C:/Documents and Settings/Claus Ibsen/.m2/repository/commons-logging/commons-logging-api/1.1/commons-logging-api-1.1.jar, file:/C:/Documents and Settings/Claus Ibsen/.m2/repository/javax/xml/bind/jaxb-api/2.1/jaxb-api-2.1.jar, file:/C:/Docume
nts and Settings/Claus Ibsen/.m2/repository/javax/xml/stream/stax-api/1.0-2/stax-api-1.0-2.jar, file:/C:/Documents and Settings/Claus Ibsen/.m2/repository/javax/activation/activation/1.1/activation-1.1.jar, file:/C:/Documents and Settings/Claus Ibsen/.m2/repository/com/sun/xml/bind/jaxb-impl/2.1.6/j
axb-impl-2.1.6.jar, file:/C:/Documents and Settings/Claus Ibsen/.m2/repository/org/springframework/spring-core/2.5.5/spring-core-2.5.5.jar, file:/C:/Documents and Settings/Claus Ibsen/.m2/repository/commons-logging/commons-logging/1.1.1/commons-logging-1.1.1.jar, file:/C:/Documents and Settings/Clau
s Ibsen/.m2/repository/org/springframework/spring-context/2.5.5/spring-context-2.5.5.jar, file:/C:/Documents and Settings/Claus Ibsen/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar, file:/C:/Documents and Settings/Claus Ibsen/.m2/repository/org/springframework/spring-beans/2.5.5/spri
ng-beans-2.5.5.jar, file:/C:/Documents and Settings/Claus Ibsen/.m2/repository/org/springframework/spring-tx/2.5.5/spring-tx-2.5.5.jar, file:/C:/Documents and Settings/Claus Ibsen/.m2/repository/org/springframework/spring-aop/2.5.5/spring-aop-2.5.5.jar, file:/C:/Documents and Settings/Claus Ibsen/.m
2/repository/org/apache/camel/camel-jms/1.5-SNAPSHOT/camel-jms-1.5-SNAPSHOT.jar, file:/C:/Documents and Settings/Claus Ibsen/.m2/repository/org/springframework/spring-jms/2.5.5/spring-jms-2.5.5.jar, file:/C:/Documents and Settings/Claus Ibsen/.m2/repository/commons-pool/commons-pool/1.4/commons-pool
-1.4.jar, file:/C:/Documents and Settings/Claus Ibsen/.m2/repository/org/springframework/spring-context-support/2.5.5/spring-context-support-2.5.5.jar, file:/C:/Documents and Settings/Claus Ibsen/.m2/repository/org/apache/geronimo/specs/geronimo-jms_1.1_spec/1.1.1/geronimo-jms_1.1_spec-1.1.1.jar, fi
le:/C:/Documents and Settings/Claus Ibsen/.m2/repository/org/apache/geronimo/specs/geronimo-jta_1.1_spec/1.1.1/geronimo-jta_1.1_spec-1.1.1.jar, file:/C:/Documents and Settings/Claus Ibsen/.m2/repository/org/apache/activemq/activemq-core/5.1.0/activemq-core-5.1.0.jar, file:/C:/Documents and Settings/
Claus Ibsen/.m2/repository/org/apache/activemq/activeio-core/3.1.0/activeio-core-3.1.0.jar, file:/C:/Documents and Settings/Claus Ibsen/.m2/repository/backport-util-concurrent/backport-util-concurrent/2.1/backport-util-concurrent-2.1.jar, file:/C:/Documents and Settings/Claus Ibsen/.m2/repository/or
g/apache/geronimo/specs/geronimo-j2ee-management_1.0_spec/1.1/geronimo-j2ee-management_1.0_spec-1.1.jar, file:/C:/Documents and Settings/Claus Ibsen/.m2/repository/org/apache/activemq/activeio-core/3.1.0/activeio-core-3.1.0-tests.jar]
2008-09-18 12:06:21 org.apache.camel.spring.Main doStart
INFO: Apache Camel 1.5-SNAPSHOT starting
{code}","18/Sep/08 10:10;pledge;Thanks Claus,  I will be testing this app over the next few days so it should appear at some point.
I have updated the wiki about this change.",16/Feb/09 05:51;davsclaus;Closing all 1.5.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-cxf component is not passing request context through correctly,CAMEL-912,12485993,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,ramnarine,ramnarine,16/Sep/08 22:16,16/Feb/09 05:51,14/Mar/19 02:42,17/Sep/08 00:38,1.4.0,,,,,,,,,,1.5.0,,,,,,,0,"CxfProducer.process() is not setting up the request context correctly during createCxfMessage, so later in that method propagateContext has no request data to propagate.  Also, we need the exchange properties to be added to the request context, so that non-camel components can pass properties into the cxf request context.

I have coded a fix for this, along with a unit test of course.  I'll attach the patch to this JIRA.
",,,,,,,,,,,,,,,,,16/Sep/08 22:22;ramnarine;CAMEL-912.patch;https://issues.apache.org/jira/secure/attachment/12462577/CAMEL-912.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-09-17 00:38:59.842,,,no_permission,,,,,,,,,,,,,83275,,,Mon Feb 16 05:51:53 UTC 2009,,,,,,,0|i01f5z:,6226,,,,,,,,,17/Sep/08 00:38;njiang;Applied the patch with thanks to Mike.,16/Feb/09 05:51;davsclaus;Closing all 1.5.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JmsProducer - option requestTimeout isn't configured properly,CAMEL-906,12485464,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,16/Sep/08 07:36,23/Oct/08 04:37,14/Mar/19 02:42,16/Sep/08 08:45,1.4.0,,,,,,,,,,1.5.0,,,camel-jms,,,,0,"When sending a JMS message to a destination using camel-jms (JMSProducer) I can't get it to use my requestTimeout option in the endpoint configuration. It always default to 20000.

{code}
template.requestBody(""activemq:queue:slow?requestTimeout=1000"", ""Hello World"");
{code}

This doesn't work as expected with a timeout of only 1 sec.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,83276,,,Thu Oct 23 04:37:13 UTC 2008,,,,,,,0|i01f4n:,6220,,,,,,,,,16/Sep/08 08:45;davsclaus;Fixed and added the option to the wiki and a small sample as well.,23/Oct/08 04:37;davsclaus;Closing 1.5 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The should throw the exception if there is some thing wrong with <convertBodyTo> type attribute,CAMEL-902,12486022,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,15/Sep/08 07:05,16/Feb/09 05:51,14/Mar/19 02:42,16/Sep/08 04:46,1.3.0,1.4.0,,,,,,,,,1.5.0,,,camel-core,,,,0,"If you specify an invalided class name in the  convertBodyTo@type, you will get a NPE error, but no detail log information for the type attribute.
We need to throw the exception for user to locate the error.
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-02-16 05:51:53.225,,,no_permission,,,,,,,,,,,,,83163,,,Mon Feb 16 05:51:53 UTC 2009,,,,,,,0|i01f3r:,6216,,,,,,,,,16/Feb/09 05:51;davsclaus;Closing all 1.5.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
If using thread() processor followed by a pipeline Camel redelivers to the wrong processor,CAMEL-901,12485764,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,magyardude,magyardude,14/Sep/08 21:17,23/Oct/08 04:31,14/Mar/19 02:42,22/Oct/08 04:51,1.0.0,1.1.0,1.2.0,1.3.0,1.4.0,1.5.0,,,,,1.5.0,,,camel-core,,,,0,"Setup:

Error handler is specified before the thread processor and there are 3 processor after the thread() call. Third processor fails. 

Bug #1:

The exchange received by the failed processor (#3) gets redelivered to the first processor in the pipe.
It should be redeliver to #3 (this works without the thread processor).

Bug #2:

The specified errorHandler (log:testError) receives the exchange that entered processor #1 (first in the pipe).

See details in the attached unit test. Also take a look at the log4j log (copy attached). The 3rd line from the bottom is the log by testError. 
",,,,,,,,,,,,,,,,,14/Sep/08 21:18;magyardude;BelasErrorHandlerLoggingTest.java;https://issues.apache.org/jira/secure/attachment/12462708/BelasErrorHandlerLoggingTest.java,21/Oct/08 14:38;davsclaus;CAMEL-901_2nd_patch.patch;https://issues.apache.org/jira/secure/attachment/12462710/CAMEL-901_2nd_patch.patch,14/Sep/08 21:19;magyardude;camel-core-test.log;https://issues.apache.org/jira/secure/attachment/12462535/camel-core-test.log,20/Oct/08 09:33;davsclaus;camel_901_pipeline.patch;https://issues.apache.org/jira/secure/attachment/12462627/camel_901_pipeline.patch,,4.0,,,,,,,,,,,,,,,,,,,2008-10-10 16:55:35.216,,,no_permission,,,,,,,,,,,,,83111,,,Thu Oct 23 04:31:38 UTC 2008,,,,,,,0|i01f3j:,6215,,,,,,,,,14/Sep/08 21:18;magyardude;Unit Test,14/Sep/08 21:19;magyardude;Log messages for the unit test,"10/Oct/08 16:55;davsclaus;Ad #1)
Not a bug. Your route is a pipeline (pipes and filters) http://activemq.apache.org/camel/pipes-and-filters.html

So the routing is: from -> process1 -> process2 -> process3. So when the message is redelivered it starts all over again at the *from* and this should be routed through the pipeline again","10/Oct/08 16:58;davsclaus;Ad #2)
Not a bug. Its the original exchange that is received, that is passed to the error handler.
E.g. so you can move the message to a JMS queue and later move the message back again to consume the *original* exchange.","10/Oct/08 17:21;magyardude;#1
Well, not so fast. Take out the thread() and it will behave differently, they way I suggested it, that is it will re-deliver to the #3 processor where the failure occurred.

I guess I mistook a feature for a bug :) The doc is not clear about the redelivery behavior (or I should RTFM). My $0.02 is that if we use the pipeline() then it should re-deliver to the pipe otherwise the failing processor. 

#2 That makes sense if it re-delivers to the pipe...","10/Oct/08 17:54;davsclaus;#1

Camel is smart but *not* that smart. When it do redelivery it does not know which route steps last time was successful, it always start *all over again*.

Okay so there might be a bug/issue if it works different depending if you have thread or no thread. I will look into it.","10/Oct/08 18:41;davsclaus;#2

Ah each step with the processors are again wrapped in a DeadLetterChannel and thus Camel should retry at the processor that failed. And in this case at the last processor.

",14/Oct/08 19:40;davsclaus;Could be related to useing seda as the queue. We have seen some timing issues with high concurrency with seda queues.,14/Oct/08 20:12;davsclaus;Using the new handled(true) DSL and onException works.,15/Oct/08 20:50;davsclaus;Also test with direct queue instead of seda,"20/Oct/08 04:43;davsclaus;#3
Thread adds a nested pipeline that yet again adds a DLC. Then when the exchange has been failure handled by the inner DLC then its 'thrown' back to the outer DLC that yet again will try to handle it.

ThreadType#createProcessor adds the nested Pipeline. Maybe we can avoid this.

#4
Because of the nested Pipeline and it's copy result nature it creates a new exchange id that get's routed by the outer Pipeline, and thus by magic there is 2 messages being routed, and not only one.","20/Oct/08 05:19;davsclaus;#5
The inner processing in the Pipeline is missing the exception handled check that the outer processor has","20/Oct/08 05:20;davsclaus;#6
And the DLC should also have this exception handled check in it's processing code","20/Oct/08 05:26;davsclaus;TODO: Reminder to me. DefaultExchange when copy from parent - I think we should copy the exchange id as well

I copy the exchange id in Pipeline so the same id is used.","20/Oct/08 05:39;davsclaus;TODO: exchangeId should not be lazy initialized I think, it should not depend on a DEBUG log or toString to init it","20/Oct/08 09:32;davsclaus;Issue #1 *fixed*
Issue #2 *fixed*
Issue #3 *working as designed*
Issue #4 *fixed*
Issue #5 *fixed*
Issue #6 *fixed*

I got it working now, but it is a bit complicate with the thread as it adds a pipeline as well, so we get double pipelines.
I also added some TRACE logging to Pipleline.",20/Oct/08 09:33;davsclaus;My current patch if anyone wants to review as its a bit *long haired* in the Pipeline,"20/Oct/08 14:15;hadrian;Thanks Claus!

I'll review this.  At first sight, log4j.properties should be restored to remove 
+log4j.logger.org.apache.camel.processor.Pipeline=TRACE

",21/Oct/08 14:38;davsclaus;A better patch with the findings from hadrian and gertv,21/Oct/08 17:37;davsclaus;Gertv had a review as well. He spotted that the reuse of exchange id should be better documented. I have improved the code comments (alot),22/Oct/08 04:51;davsclaus;Hadrian have reviewed and committed the patch,23/Oct/08 01:50;magyardude;I just wanted to say that I plugged in the latest build into my app and everything works as expected. Thanks guys!,"23/Oct/08 04:31;davsclaus;Thanks for reporting, and being persistent. It was a hard one to crack as it took some debugging efforts to find the culprit.

Glad it works now. So keep on providing hardball unit tests ;)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-ftp - handle invalid login better,CAMEL-894,12484820,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,13/Sep/08 16:16,23/Oct/08 04:37,14/Mar/19 02:42,13/Sep/08 21:11,1.4.0,,,,,,,,,,1.5.0,,,camel-ftp,,,,0,"If the login to the FTP server fails then Camel will at the 2nd pool still try to consume files from the ftp server as it has network connection, but end-user is still not connected. Camel will of course not be able to get anything from the server but you get some stacktrace errors",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,83277,,,Thu Oct 23 04:37:13 UTC 2008,,,,,,,0|i01f1z:,6208,,,,,,,,,13/Sep/08 16:47;davsclaus;Remember to do the same for the SFTP part as well.,13/Sep/08 21:11;davsclaus;See release notes for impact on upgrading Camel.,23/Oct/08 04:37;davsclaus;Closing 1.5 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-RMI looks up wrong name in RMI Registry,CAMEL-890,12486092,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,conradpilloud,conradpilloud,10/Sep/08 16:57,01/Jul/10 06:11,14/Mar/19 02:42,12/Sep/08 15:29,1.4.0,,,,,,,,,,1.5.0,,,,,,,0,"It appears the RMI component is not pulling the right name from the URI I defined in my routebuilder.  

In a separate application (the one I'm trying to connect and send data to), I've bound a remote object in the RMI Registry as: ""GDRService"".  (I even wrote a little app to list the RMI registry entries and it does indeed show up as ""GDRService"").

However, my camel route:    .to(""rmi://localhost:1099/GDRService"");

produces this result...
java.rmi.NotBoundException: /GDRService
        at sun.rmi.registry.RegistryImpl.lookup(RegistryImpl.java:106)
        at sun.rmi.registry.RegistryImpl_Skel.dispatch(Unknown Source)
....

I think this is the problem...
According to the code for  RMIEndPoint:
public String getName() {
        String path = uri.getPath();
        if (path == null) {
            path = uri.getSchemeSpecificPart();
        }
        return path;
    }

I believe uri.getPath() is returning ""/GDRService"" and not ""GDRService"" and thus, Camel can't find the actual service. 

Here's a longer stacktrace (just the last of the 5 attempts to route via RMI prior to dead-letter drop).

[          AnonymousIoService-2] DeadLetterChannel              ERROR Failed delivery for exchangeId: ID-dmco500084358/
683-1221065595195/0-0. On delivery attempt: 5 caught: java.rmi.NotBoundException: /GDRService
java.rmi.NotBoundException: /GDRService
        at sun.rmi.registry.RegistryImpl.lookup(RegistryImpl.java:106)
        at sun.rmi.registry.RegistryImpl_Skel.dispatch(Unknown Source)
        at sun.rmi.server.UnicastServerRef.oldDispatch(UnicastServerRef.java:386)
        at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:250)
        at sun.rmi.transport.Transport$1.run(Transport.java:159)
        at java.security.AccessController.doPrivileged(Native Method)
        at sun.rmi.transport.Transport.serviceCall(Transport.java:155)
        at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:535)
        at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:790)
        at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:649)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
        at java.lang.Thread.run(Thread.java:619)
        at sun.rmi.transport.StreamRemoteCall.exceptionReceivedFromServer(StreamRemoteCall.java:255)
        at sun.rmi.transport.StreamRemoteCall.executeCall(StreamRemoteCall.java:233)
        at sun.rmi.server.UnicastRef.invoke(UnicastRef.java:359)
        at sun.rmi.registry.RegistryImpl_Stub.lookup(Unknown Source)
        at org.apache.camel.component.rmi.RmiRegistryBean.lookupBean(RmiRegistryBean.java:44)
        at org.apache.camel.component.bean.RegistryBean.getBean(RegistryBean.java:61)
        at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:73)
        at org.apache.camel.component.rmi.RmiProducer.process(RmiProducer.java:46)
        at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncPro
essorTypeConverter.java:43)
        at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:75)
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:57)
        at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:155)
        at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:91)
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:101)
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:85)
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:57)
        at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:39)
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:41)
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:66)
        at org.apache.camel.component.mina.MinaConsumer$ReceiveHandler.messageReceived(MinaConsumer.java:95)
        at org.apache.mina.common.support.AbstractIoFilterChain$TailFilter.messageReceived(AbstractIoFilterChain.java:5
0)
        at org.apache.mina.common.support.AbstractIoFilterChain.callNextMessageReceived(AbstractIoFilterChain.java:299)
        at org.apache.mina.common.support.AbstractIoFilterChain.access$1100(AbstractIoFilterChain.java:53)
        at org.apache.mina.common.support.AbstractIoFilterChain$EntryImpl$1.messageReceived(AbstractIoFilterChain.java:
48)
        at org.apache.mina.filter.codec.support.SimpleProtocolDecoderOutput.flush(SimpleProtocolDecoderOutput.java:58)
        at org.apache.mina.filter.codec.ProtocolCodecFilter.messageReceived(ProtocolCodecFilter.java:180)
        at org.apache.mina.common.support.AbstractIoFilterChain.callNextMessageReceived(AbstractIoFilterChain.java:299)
        at org.apache.mina.common.support.AbstractIoFilterChain.access$1100(AbstractIoFilterChain.java:53)
        at org.apache.mina.common.support.AbstractIoFilterChain$EntryImpl$1.messageReceived(AbstractIoFilterChain.java:
48)
        at org.apache.mina.filter.executor.ExecutorFilter.processEvent(ExecutorFilter.java:220)
        at org.apache.mina.filter.executor.ExecutorFilter$ProcessEventsRunnable.run(ExecutorFilter.java:264)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
        at org.apache.mina.util.NamePreservingRunnable.run(NamePreservingRunnable.java:51)
        at java.lang.Thread.run(Thread.java:619)
[          AnonymousIoService-2] DefaultListableBeanFactory     DEBUG Creating instance of bean 'org.apache.camel.compo
ent.log.LogComponent'
[          AnonymousIoService-2] DefaultListableBeanFactory     DEBUG Finished creating instance of bean 'org.apache.ca
el.component.log.LogComponent'
[          AnonymousIoService-2] DeadLetterChannel              ERROR Exchange[BodyType:String, Body:<?xml version=""1.0............


","Camel 1.4.0, Windows XP Professional, JDK 1.6.0_07",,36000,36000,,0%,36000,36000,,,,,,,,,11/Sep/08 18:12;conradpilloud;camel-arb-log.log;https://issues.apache.org/jira/secure/attachment/12462660/camel-arb-log.log,11/Sep/08 18:21;davsclaus;camel-rmi-1.5-SNAPSHOT.jar;https://issues.apache.org/jira/secure/attachment/12462639/camel-rmi-1.5-SNAPSHOT.jar,,,,2.0,,,,,,,,,,,,,,,,,,,2008-09-11 16:37:09.389,,,no_permission,,,,,,,,,,,,,83278,,,Mon Feb 16 05:51:52 UTC 2009,,,,,,,0|i01f13:,6204,,,,,,,,,"11/Sep/08 16:37;davsclaus;Conrad, thanks for the report. I have commit a fix based on your suggestion.

Can you test it? You can try the latest 1.5-SNAPSHOT version.

See this page how to get the SNAPSHOT:
http://activemq.apache.org/camel/download.html","11/Sep/08 18:10;conradpilloud;Claus,
I tried it and got the same result.  I'll attach log output showing I'm using the 1.5-SNAPSHOT and the resulting error.",11/Sep/08 18:12;conradpilloud;Log file showing error in 1.5-SNAPSHOT,"11/Sep/08 18:18;davsclaus;Conrad. You are very fast. The Apache infrastructure is building the SNAPSHOTS on a regular interval.

I think you should wait some more to be sure the snapshot is with my latest fix. Could you try in 3-4 hours or maybe tomorrow, to really be sure.

If we still have an error then maybe a little test app from you can help me dig into it and fix it. You are also of course welcome to checkout the camel source and build the camel-rmi component and install it in your local repo. Then you have the changes immediately. Then you can also try to fix it yourself. And if you find a good solution, you can create a patch and submit to this ticket.

http://activemq.apache.org/camel/building.html
http://activemq.apache.org/camel/contributing.html
",11/Sep/08 18:21;davsclaus;I have attached the camel-rmi.jar that is genered on my computer with the fix. You can install/copy this .jar in your local m2 repo.,"11/Sep/08 19:05;conradpilloud;Super--that works!! (well, at least I've moved on to my next problem...  it looks like I've got to include a .policy file somewhere.
Cheers
Conrad
[          AnonymousIoService-2] DeadLetterChannel              ERROR Failed delivery for exchangeId: ID-dmco500084358/2062-1221159175926/0-0. On delivery attempt: 0 caught: java.rmi.UnmarshalException: error unmarshalling return; nested exception is: 
	java.lang.ClassNotFoundException: com.foo.gdr.GDRService (no security manager: RMI class loader disabled)
java.rmi.UnmarshalException: error unmarshalling return; nested exception is: 
	java.lang.ClassNotFoundException: com.foo.gdr.GDRService (no security manager: RMI class loader disabled)","12/Sep/08 06:36;davsclaus;Glad this solved the first step.

The little snippet of stacktrace shown reveals that its something with a class not found. ClassNotFoundException.

Are you sure that com.foo.gdr.GDRService.class is included in the classpath on both the server and client side?","12/Sep/08 15:16;conradpilloud;Actually, I wanted my router to be as free as possible from 'knowing' the contents of the messages.  RMI will support downloading the class from the RMI server to the client when a SecurityManager exists with proper policy--I tried that, but couldn't get a SecurityManager to work that didn't break a lot of other things in Camel & Spring.  So I decided to include the com.foo.gdr.GDRService.class in the client (Camel) after all.

FYI, other errors I was having was due to Camel MINA 'sync' option default changing from false to true in Camel 1.5--since my TCP inbound endpoint is receive only, I had to explicitly say sync=false in my MINA URI for Camel 1.5.  That was a surprise, but easy to overcome.

Life is good.  Thanks for the super-fast fix.  Cheers--Conrad","12/Sep/08 15:29;davsclaus;Conrad. Glad its working now.

And thanks for letting us know about the mina change. It was however documented in the release note
http://activemq.apache.org/camel/camel-150-release.html

However 1.5 is still work in progress.","12/Sep/08 16:27;davsclaus;BTW: Maybe Java WebStart is better at distributing software to clients, instead of RMI server with downloaded .jars.",16/Feb/09 05:51;davsclaus;Closing all 1.5.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
<jaxb> element should not require contextPath attribute,CAMEL-886,12485992,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,ammulder,ammulder,09/Sep/08 16:12,16/Feb/09 05:51,14/Mar/19 02:42,15/Sep/08 19:19,1.4.0,,,,,,,,,,1.5.0,,,camel-core,,,,0,"In the Java DSL, you can say from(""foo"").marshal().jaxb().to(""bar"")

In XML I think it would look like this:

<from uri=""..."" />
<marshal>
  <jaxb />
</marshal>
<to uri=""..."" />

The problem is that you can't use the <jaxb /> element without the contextPath attribute, which the XSD says is required.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-09-15 19:19:30.652,,,no_permission,,,,,,,,,,,,,83279,,,Mon Feb 16 05:51:52 UTC 2009,,,,,,,0|i01f07:,6200,,,,,,,,,"15/Sep/08 19:19;janstey;Fix committed in revision 695586.

Thanks for reporting this Aaron!",16/Feb/09 05:51;davsclaus;Closing all 1.5.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DefaultProducerTemplate.extractResultBody() should throw an exception if there was a failure rather than returning the input message,CAMEL-885,12485660,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,davsclaus,jstrachan,jstrachan,09/Sep/08 15:08,16/Feb/09 05:51,14/Mar/19 02:42,12/Sep/08 17:53,1.4.0,,,,,,,,,,1.5.0,,,camel-core,,,,0,we should throw an exception if there was a Fault or the exchange contains an Exception,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-09-11 16:10:50.764,,,no_permission,,,,,,,,,,,,,83280,,,Mon Feb 16 05:51:52 UTC 2009,,,,,,,0|i01ezz:,6199,,,,,,,,,"11/Sep/08 16:10;davsclaus;Indeed a stupid behavior in Camel. We should of course throw an exception if the exchange failed.

However this can break existing solutions that rely on the ""old odd"" behavior. We should document this in the release notes.","11/Sep/08 16:23;davsclaus;All the methods doesn't have any exceptions declared to be thrown. I suggest to wrap the exception as a RuntimeCamelException with the caused exception.
Otherwise we need to add throws Exception to all methods.

We could check if the exception already is a runtime exception and throw it as is. Then *only* wrap the checked.

Any thoughts?","11/Sep/08 18:12;davsclaus;We are gonna break some unit tests that relied on the old odd behaviour of not rethrowning any exception.

This is from testing camel-core

Tests run: 554, Failures: 27, Errors: 40, Skipped: 0","12/Sep/08 09:15;davsclaus;Refined the extract method:

Tests in error:

Tests run: 554, Failures: 0, Errors: 39, Skipped: 0","12/Sep/08 09:51;davsclaus;Okay this is just hard tedious work to refine the unit tests to handle that exceptions is now thrown from the template.sendBodyXXX methods.

16 unit tests to go in camel-core. Then there is just all the other components ;)

Tests run: 554, Failures: 0, Errors: 16, Skipped: 0",12/Sep/08 10:46;davsclaus;Okay got camel-core fixed now. Just the rest ;),"12/Sep/08 17:53;davsclaus;I am proposing this change
==========================
 - If exchange has exception then throw it (wrapped as RuntimeCamelException as the plain send method does).
 - If has FAULT message then return FAULT message
 - as before, return either IN/OUT based on exchange pattern

",16/Feb/09 05:51;davsclaus;Closing all 1.5.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SftpEndpoint ignores custom ssh port,CAMEL-882,12486032,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,magyardude,magyardude,07/Sep/08 21:51,16/Feb/09 05:51,14/Mar/19 02:42,08/Sep/08 01:10,1.5.0,,,,,,,,,,1.4.0,1.5.0,,camel-ftp,,,,0,SftpEndpoint ignores custom ssh port. It works only if server runs on port 22. ,,,,,,,,,,,,,,,,,07/Sep/08 21:53;magyardude;patchfile.txt;https://issues.apache.org/jira/secure/attachment/12462575/patchfile.txt,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-09-08 01:10:33.021,,,no_permission,,,,,,,,,,,,,83352,,,Mon Feb 16 05:51:51 UTC 2009,,,Patch Available,,,,0|i01ezb:,6196,,,,,,,,,07/Sep/08 21:53;magyardude;This fixes the custom ssh port problem. Call the getSession with the port.,08/Sep/08 01:10;njiang;Applied patch with thanks to Bela.,16/Feb/09 05:51;davsclaus;Closing all 1.5.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-mina - codec options should fail if not possible to find i registry,CAMEL-881,12484864,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,07/Sep/08 13:32,23/Oct/08 04:37,14/Mar/19 02:42,07/Sep/08 13:53,1.4.0,,,,,,,,,,1.5.0,,,camel-mina,,,,0,If you configure the codec option on camel-mina and you eg make a spelling mistake camel will default to Mina default protocol if not found. We should throw an exception instead so end user knows about this and can fix his spelling mistake.,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,83282,,,Thu Oct 23 04:37:13 UTC 2008,,,,,,,0|i01ez3:,6195,,,,,,,,,23/Oct/08 04:37;davsclaus;Closing 1.5 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Headers lost when using scriptBuilder to set headers dynamically,CAMEL-880,12486018,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,kingjamm,kingjamm,05/Sep/08 18:21,16/Feb/09 05:51,14/Mar/19 02:42,06/Sep/08 03:18,1.4.0,,,,,,,,,,1.5.0,,,camel-script,,,,0,"When running a dynamic script evaluation in a setHeader, the header is lost as the Pipeline chain uses the data from the out body as the source of headers. 

So trying to figure this out, I looked into the source, and found that if the getOut is not null, the out message is used to set the header in the setHeader processor. Unfortunately in the script engine this block of code always ensures that it's NOT null. 

script builder class line 520 of Camel 1.4 

        ScriptContext context = engine.getContext(); 
        int scope = ScriptContext.ENGINE_SCOPE; 
        context.setAttribute(""context"", exchange.getContext(), scope); 
        context.setAttribute(""exchange"", exchange, scope); 
        context.setAttribute(""request"", exchange.getIn(), scope); 
        context.setAttribute(""response"", exchange.getOut(), scope); 

The place were the out message is used is here in the Pipeline class at line 79 

            if (first) { 
                first = false; 
            } else { 
                nextExchange = createNextExchange(processor, nextExchange); 
            } 

The specifics of my setup were:

Used spring with the following configuration:

	<camel:camelContext>
		<camel:route>
			<camel:from uri=""jms://LLAQueue?disableReplyTo=true"" />
			<camel:setHeader headerName=""activity.type"">
				<camel:jxpath>exchange.getIn().getBody().getExerciseHighLevelActivity().getActivityType()</camel:jxpath>
			</camel:setHeader>
			<camel:choice>
				<camel:when>
					<camel:javaScript>
						exchange.getIn().getHeader('activity.type') == 3
					</camel:javaScript>
					<camel:transform>
						<camel:javaScript>
							exchange.getIn().getBody().getData() !=
							undefined ?
							exchange.getIn().getBody().getData() : """"
						</camel:javaScript>
					</camel:transform>
					<camel:to uri=""log:info?showAll=true"" />
				</camel:when>
			</camel:choice>
		</camel:route>
	</camel:camelContext>

I did not test this problem with other exchange types, just the JMS type.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-09-06 02:32:02.634,,,no_permission,,,,,,,,,,,,,83283,,,Mon Feb 16 05:51:51 UTC 2009,,,,,,,0|i01eyv:,6194,,,,,,,,,"06/Sep/08 02:32;njiang;This issue is easy to fix. 
{code}
 // change 
 context.setAttribute(""response"", exchange.getOut(), scope); 
  // to 
 context.setAttribute(""response"", exchange.getOut(false), scope); 
{code}
In this way a new out message will not be create if the exchange's out message is not be set.

I will add new test to verify my change.",06/Sep/08 03:18;njiang;Just committed a quick fix for it.,16/Feb/09 05:51;davsclaus;Closing all 1.5.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Intercept does not work properly in Spring DSL,CAMEL-879,12486029,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,davsclaus,janstey,janstey,05/Sep/08 14:25,31/Jul/09 06:33,14/Mar/19 02:42,19/Feb/09 14:09,1.4.0,1.5.0,1.6.0,1.6.1,,,,,,,1.6.1,2.0-M1,,camel-core,,,,0,"Fixed in 1.x:
New Revision: 745870

This was a hard one to get fixed. Took me most of 2 x 0.5 days to get done.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-02-18 13:30:55.322,,,no_permission,,,,,,,,,,,,,83284,,,Fri Jul 31 06:33:35 UTC 2009,,,,,,,0|i01eyn:,6193,,,,,,,,,"05/Sep/08 14:26;janstey;See comment from Willem in CAMEL-460.

"" InterceptType also not support take the predicate from XML,
if I put a ChoiceType member in the interceptType , I will create a Cycle dependency between the InterceptType and ChoiceType.""","18/Feb/09 13:30;davsclaus;Okay its the <stop/> that is the problem, the predicate is supported and it works fine.

However its only the <stop/> that is the problem as it gets global and stops always
{code:xml}
        <intercept>
            <when>
                <simple>${body} contains 'Goofy'</simple>
                <to uri=""mock:goofy""/>
            </when>
            <stop/>
        </intercept>
{code}

We only want it to stop if the predicate is true. Its silly to stop always as it will intercept all and just stop. So we might wanna do some tricks on the Spring DSL side and only perform stop if the predicate was evaluated to true.
","19/Feb/09 11:55;davsclaus;Fixed in trunk
Committed revision 745826.
",31/Jul/09 06:33;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Current mina component can't tansfer the exchange fault message body,CAMEL-873,12486007,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,01/Sep/08 09:27,16/Feb/09 05:51,14/Mar/19 02:42,03/Sep/08 07:00,1.4.0,,,,,,,,,,1.5.0,,,camel-mina,,,,0,"I just found MinaTransferExchangeOptionTest don't show how to set fault message and the fault message is not a part of MinaPayloadHolder.
You can't set the exception on the exchange in the processor , sine the camel DeadLetterChannel will try to redeliver the message.
So we just need to support put the exception which need to send back to the camel client into the fault message body.
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-02-16 05:51:51.784,,,no_permission,,,,,,,,,,,,,83285,,,Mon Feb 16 05:51:51 UTC 2009,,,,,,,0|i01exb:,6187,,,,,,,,,16/Feb/09 05:51;davsclaus;Closing all 1.5.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-spring - data format using camel xml elements doesnt work,CAMEL-871,12485644,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,davsclaus,davsclaus,30/Aug/08 12:51,23/Oct/08 04:43,14/Mar/19 02:42,15/Sep/08 17:24,1.4.0,,,,,,,,,,1.5.0,,,camel-spring,,,,0,"If you have a route that uses data format and you configure the data format using camel xml elements it doesn't work.

See nabble: 
http://www.nabble.com/xstream-in-xml-configuration-td19227970s22882.html",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-09-11 17:08:52.933,,,no_permission,,,,,,,,,,,,,83286,,,Mon Sep 15 17:24:39 UTC 2008,,,,,,,0|i01ewv:,6185,,,,,,,,,30/Aug/08 16:02;davsclaus;Also using child tags works.,"11/Sep/08 17:03;davsclaus;Jonathan. Glad you are on it. 

I doubt many use this as it doesn't work. So I suggest that we also restructure the XSD so all dataformats isn't avaiable in the camel root but in a nested tag named <dataFormat>

Then when you use IDE for XML editiing you can get a much simpler ctrl + space overview of possible tags. Could you look into that also?

I think many end-users get confused when they press ctrl + space and see artixDS and all the other 10+ dataformats along with package, route and all the other important camel tags.",11/Sep/08 17:08;janstey;Agree with the confusing bit. I was thinking this also while looking at all the xml elements available on the CamelContextFactoryBean - whew! :) I'll do up your suggestion with this ticket. ,15/Sep/08 17:02;janstey;Committed revision 695550.,15/Sep/08 17:10;janstey;I forgot to update the other components that use the old format. Looking at this now.,15/Sep/08 17:24;janstey;Fixed and also updated http://cwiki.apache.org/confluence/display/CAMEL/Data+Format with the new format.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DeadLetterChannel does not set the EXCEPTION_CAUSE_PROPERTY,CAMEL-860,12485510,12486835,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,oirad,oirad,27/Aug/08 13:58,31/Aug/08 19:52,14/Mar/19 02:42,30/Aug/08 11:00,1.4.0,,,,,,,,,,1.5.0,,,camel-core,,,,0,"The DeadLetterChannel does not set the EXCEPTION_CAUSE_PROPERTY.

It looks like a bug in the method:
public boolean process(final Exchange exchange, final AsyncCallback callback, final RedeliveryData data) 

The property is set by getting the Exception from the exchange:
exchange.setProperty(EXCEPTION_CAUSE_PROPERTY, exchange.getException());

but several lines before the Exception ist set to null in exchange:
if (exchange.getException() != null) {
                Throwable e = exchange.getException();
                exchange.setException(null); // Reset it since we are handling it.

to fix the bug, i think it is simply done by preserving the Throwable like this
Throwable e = exchange.getException();
if (exchange.getException() != null) {
                exchange.setException(null); // Reset it since we are handling it.
...
exchange.setProperty(EXCEPTION_CAUSE_PROPERTY, e);

","Windows XP,  JDK 6",,300,300,,0%,300,300,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-08-28 05:45:22.993,,,no_permission,,,,,,,,,,,,,83287,,,Sun Aug 31 19:52:17 UTC 2008,,,,,,,0|i01euf:,6174,,,,,,,,,"28/Aug/08 05:45;davsclaus;Thanks for the report. 

I looked into it and yes the code is a bit ""tricky"" in the DLC. It actually restores the exception in the incrementRedeliveryCounter method.

However I feel the code could be a bit more ""less surprising"" so I am re factoring it a bit (based on your suggestions)","29/Aug/08 09:34;oirad;The fix does not work, the property is not set.
Example code :

from(""file:/data"").convertBodyTo(String.class)
.errorHandler(deadLetterChannel(""myjms:dead"").maximumRedeliveries(2).useExponentialBackOff())
.setHeader(""xyz"", xquery(""wrong xquery {}"").asString())
.to(""direct:blabla"");

The use case is: 
in case of an exchange-failure, the cause should be visible in the dead-letter-channel, for later investigate.

 ","30/Aug/08 10:57;davsclaus;Dario it is working as exepected. I have added some more unit test to verify that the original caused exception is on the exchange.

However I can see what your problem is. You DLC is a *jms* queue. And the JMS spec doesn't allow to send complex objects as properties on a JMSMessage. So the exception object is lost when its send to the JMS queue, only the body and simple properties is sent.

The issue is that we need the JMS producer to send the entire exchange as an object to the JMS queue.
I will create a ticket for this feature in JIRA.",30/Aug/08 11:00;davsclaus;See CAMEL-870 about the use of jms for DLC queues.,"31/Aug/08 19:52;oirad;Thank you for the explanation, i think i have to dive deeper in Apache Camel ...
Many thanks!
With best regards, Dario",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Log component should cache the message body's InputStream ,CAMEL-858,12484689,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,27/Aug/08 07:26,16/Feb/09 05:51,14/Mar/19 02:42,27/Aug/08 07:44,1.3.0,1.4.0,,,,,,,,,1.5.0,,,camel-core,,,,0,"If we put the log between an InputStream consumer and InputStream producer like below 
from(""InputStream Consumer"").to(""log:ShowMessageBody"").to(""InputStream Producer"");
The InputStream Producer can't read the any date from the in message body.

",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-02-16 05:51:51.676,,,no_permission,,,,,,,,,,,,,83164,,,Mon Feb 16 05:51:51 UTC 2009,,,,,,,0|i01etz:,6172,,,,,,,,,16/Feb/09 05:51;davsclaus;Closing all 1.5.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DeadLetterChannel - maximum redelivery is not corrent and redelivery counter is wrong when failure handled,CAMEL-857,12484816,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,27/Aug/08 05:20,23/Oct/08 04:37,14/Mar/19 02:42,27/Aug/08 06:24,1.4.0,,,,,,,,,,1.5.0,,,camel-core,,,,0,"The unit test from CAMEL-794 demonstrates a few issues with the DLC in Camel
- the maximum redelivery is not reached - eg. setting it to 2 will only perform 1 normal attempt + 1 redelivery, and not as expected 2 redeliveries
- when the exchanged could *not* be redelivered at all then the redeliverycounter has already been incremented and thus is off by +1",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,83288,,,Thu Oct 23 04:37:13 UTC 2008,,,,,,,0|i01etr:,6171,,,,,,,,,"27/Aug/08 06:12;davsclaus;Okay is fixing this now.

Camel will now as before do by default: 1 regular attempt + 5 re-deliveries = a total of 6 times to process an exchange before moving to the dead letter channel.
Camel does this in 1.4 or older, just the counter was wrong when you was reading it from the dead letter channel after it was moved there. ",27/Aug/08 06:12;davsclaus;Also the redelivery boolean flag was always TRUE even though there was no attempt of redelivery. This is also fixed now.,23/Oct/08 04:37;davsclaus;Closing 1.5 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Typo in system property name to enable tracing in DefaultCamelContext,CAMEL-856,12485625,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,davsclaus,callain,callain,27/Aug/08 03:55,16/Feb/09 05:51,14/Mar/19 02:42,27/Aug/08 04:01,1.4.0,,,,,,,,,,1.5.0,,,,,,,0,"In DefaultCamelContext, the system property should read camel.trace and not canel.trace (I guess from the project name which is Camel and not Canel).

    public boolean getTrace() {
        final Boolean value = getTracing();
        if (value != null) {
            return value;
        } else {
            return SystemHelper.isSystemProperty(""canel.trace"");
        }
    }","Windows, Camel 1.4.0",,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-08-27 04:01:14.884,,,no_permission,,,,,,,,,,,,,83289,,,Mon Feb 16 05:51:51 UTC 2009,,,,,,,0|i01etj:,6170,,,,,,,,,27/Aug/08 04:01;davsclaus;Thanks Carl for reporting this. It was already fixed in 1.5 ;),16/Feb/09 05:51;davsclaus;Closing all 1.5.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel:dot - spring xml files located in different folder ,CAMEL-851,12485580,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,26/Aug/08 11:43,23/Oct/08 04:37,14/Mar/19 02:42,01/Sep/08 09:51,1.4.0,,,,,,,,,,1.5.0,,,tooling,,,,0,"camel:dot doesn't support loading spring .xml files using the configuration option to the plugin. Currently it loads from META-INF/spring/*.xml

The other two: run and embedded has this feature.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,83290,,,Thu Oct 23 04:37:13 UTC 2008,,,,,,,0|i01esf:,6165,,,,,,,,,01/Sep/08 09:51;davsclaus;Now it supports the applicationContextUri or fileApplicationContextUri configuration as well.,23/Oct/08 04:37;davsclaus;Closing 1.5 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
handleFault does not interrupt processing on successful retry,CAMEL-842,12485534,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,hadrian,hadrian,21/Aug/08 15:58,16/Feb/09 05:51,14/Mar/19 02:42,21/Aug/08 21:53,1.4.0,,,,,,,,,,1.5.0,,,camel-core,,,,0,"See following thread for more details.

http://www.nabble.com/Handling-JBI-faults-td19090487s22882.html#a19090487",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-02-16 05:51:51.387,,,no_permission,,,,,,,,,,,,,83291,,,Mon Feb 16 05:51:51 UTC 2009,,,,,,,0|i01eqf:,6156,,,,,,,,,16/Feb/09 05:51;davsclaus;Closing all 1.5.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Trailing slash missing in SftpConsumer,CAMEL-834,12486019,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,spaddo,spaddo,18/Aug/08 13:09,16/Feb/09 05:51,14/Mar/19 02:42,20/Aug/08 04:08,1.4.0,,,,,,,,,,1.5.0,,,camel-ftp,,,,0,"When this route 

{code}
    <camel:route>
        <camel:from uri=""sftp://someuser@hostname/path/to/directory/?password=secret&amp;directory=true&amp;binary=true&amp;consumer.useFixedDelay=false&amp;consumer.setNames=true&amp;consumer.recursive=false"" />
        <camel:to uri=""file:///C:/camel/output/"" />
    </camel:route>
{code}

is configured the files in the remote directory are download, but subsequent calls of the method ""pollDir"" result in this exception:

{code}
[ Thread: 1 RemoteFileComponent] SftpConsumer                   WARN  Caught SftpException:2: No such file
[ Thread: 1 RemoteFileComponent] SftpConsumer                   WARN  Doing nothing for now, need to determine an appropriate action
[ Thread: 1 RemoteFileComponent] ScheduledPollConsumer          WARN  An exception occured while polling: Endpoint[sftp://someuser@hostname/path/to/directory/?password=secret&amp;directory=true&amp;binary=true&amp;consumer.useFixedDelay=false&amp;consumer.setNames=true&amp;consumer.recursive=false]: No such file 2: No such file
{code}

As you can see the slash is definitely in the configured route. If I check for the missing slash and add it to the dir variable (line 115 in SftpConsumer) then the consumer works:

{code}
    	if(!dir.startsWith(""/"")) {
    		dir = ""/"" + dir;
    	}
{code}

Didn't have the time to have a closer look. The root cause of the missing slash is somewhere else.","Windows Vista Business, JDK 1.6.0_05",,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-08-18 17:38:57.192,,,no_permission,,,,,,,,,,,,,83292,,,Mon Feb 16 05:51:51 UTC 2009,,,,,,,0|i01eon:,6148,,,,,,,,,"18/Aug/08 17:38;davsclaus;Hi

Thanks for reporting this. Do you mind trying 1.5-SNAPSHOT as the camel-ftp component has been refactored and improved quite a bit.

See the download page how to setup the maven repo to get snapshot releases
http://activemq.apache.org/camel/download.html",18/Aug/08 18:40;spaddo;Actually I did test it against the latest Maven snapshots. Forgot to tell that. The problem with those was that the download didn't even start. For the moment I can't tell why.,"19/Aug/08 03:55;davsclaus;Hmm strange.

You can enable {{TRACE}} logging at {{org.apache.camel}} and then the logging might hint what could be wrong. 

","19/Aug/08 04:14;davsclaus;Yes the TRACE logging should output what directory it tries to poll

        if (log.isTraceEnabled()) {
            log.trace(""Polling directory: "" + dir);
        }

So if you can enable the TRACE logging on camel 1.5-SNAPSHOT and see what is happening.
Also the new feature for exclusive read lock might have an influce. So setting consumer.exclusiveReadLock=false could help also.",19/Aug/08 04:21;davsclaus;What SFTP server are you using?,"19/Aug/08 09:27;spaddo;The hint with ""consumer.exclusiveReadLock=false"" pointed me in the right direction. I verified if I have write rights on the server... and I do not. I guess that's why nothing was downloaded when I tried with 1.5-SNAPSHOT.

So, I'm happy... bug is fixed in 1.5... I'll continue to use this version.

Thanks for the extensive help Claus.","19/Aug/08 09:38;davsclaus;Hi

Glad its working in 1.5 also for the SFTP part that we dont have a mock test server for.

I am wondering if exclusiveReadLock should be *false* in the FTP part as having write privileges is not always the normal use-case.",20/Aug/08 04:08;davsclaus;The exclusiveReadLock option is now default *false* in Camel 1.5.,16/Feb/09 05:51;davsclaus;Closing all 1.5.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
File polling consumer does not remove file lock if exchange fails,CAMEL-826,12485520,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,hadrian,hadrian,14/Aug/08 23:38,16/Feb/09 05:51,14/Mar/19 02:42,15/Aug/08 00:06,1.3.0,,,,,,,,,,1.5.0,,,camel-core,,,,0,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-02-16 05:51:51.218,,,no_permission,,,,,,,,,,,,,83165,,,Mon Feb 16 05:51:51 UTC 2009,,,,,,,0|i01emv:,6140,,,,,,,,,15/Aug/08 00:06;hadrian;Fixed in revision 686094,16/Feb/09 05:51;davsclaus;Closing all 1.5.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Should preserve the exchange type in the routing slip,CAMEL-818,12485349,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,janstey,janstey,13/Aug/08 11:25,16/Feb/09 05:51,14/Mar/19 02:42,15/Aug/08 07:49,1.3.0,1.4.0,,,,,,,,,1.5.0,,,camel-core,,,,0,"Currently, the routing slip will create a new InOut exchange for each target based on the target endpoint type. This means that someone calling from a jbi endpoint (or other endpoint with custom exchange) into the routing slip will have their exchange type changed (to mostly likely DefaultExchange). I will be including a patch to fix this issue shortly. ",,,,,,,,,,,,,,,,,13/Aug/08 11:31;janstey;preserveExchangeTypeInRoutingSlip.patch;https://issues.apache.org/jira/secure/attachment/12462635/preserveExchangeTypeInRoutingSlip.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-08-15 07:49:42.383,,,no_permission,,,,,,,,,,,,,83166,,,Mon Feb 16 05:51:50 UTC 2009,,,Patch Available,,,,0|i01el3:,6132,,,,,,,,,"13/Aug/08 11:31;janstey;Patch to fix the issue.

The fix employs a technique similar to that of the pipeline processor to preserve the exchange type. Basically, in order for a type of Exchange to be propagated, it must override the newInstance method so the routing slip has a way to create a clean instance of it.","15/Aug/08 07:49;njiang;Applied patch with thanks to Jonathan.
http://svn.apache.org/viewvc?rev=685557&view=rev",16/Feb/09 05:51;davsclaus;Closing all 1.5.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
delayer pattern doesn't work in Spring DSL,CAMEL-811,12485585,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,janstey,janstey,11/Aug/08 16:45,16/Feb/09 05:51,14/Mar/19 02:42,11/Aug/08 17:43,1.4.0,,,,,,,,,,1.5.0,,,camel-core,camel-spring,,,0,You can't configure the delayer pattern properly in the Spring DSL currently. I will be attaching a patch for this shortly.,,,,,,,,,,,,,,,,,11/Aug/08 16:47;janstey;fixUpTheDelayerPatternInSpring.patch;https://issues.apache.org/jira/secure/attachment/12462463/fixUpTheDelayerPatternInSpring.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-08-11 17:43:50.959,,,no_permission,,,,,,,,,,,,,83293,,,Mon Feb 16 05:51:49 UTC 2009,,,,,,,0|i01ejj:,6125,,,,,,,,,11/Aug/08 16:47;janstey;Patch to fix this issue.,11/Aug/08 17:43;hadrian;Patch applied with many thanks to Jon.,16/Feb/09 05:51;davsclaus;Closing all 1.5.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HttpProducer premature out message creation,CAMEL-807,12486000,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,tourist604,tourist604,10/Aug/08 22:22,16/Feb/09 05:51,14/Mar/19 02:42,25/Sep/08 23:27,1.4.0,,,,,,,,,,1.5.0,,,camel-http,,,,0,"I believe there is incorrect flow in the HttpProducer which can subvert error handling in the route:

in Camel 1.4.0 in HttpProducer on line 76 a ""blank"" out message is set on the exchange:

Message out = exchange.getOut(true);
        try {
            int responseCode = httpClient.executeMethod(method);
...

1. If an IO error occurs on connect, the out message will be passed to the error handling code and if the originating endpoint was a JmsMessage it will cause an NPE when JmsMessage.getMessageId() is called. It also obscures the offending message I believe.
2. A similar situation will happen if the HTTP service returned an error code; the out message will contain a reply message even though the processing resulted in an error (e.g. HTTP Status 500) 
3. Also, shouldn't this code test whether the exchange expects an ""out"" altogether, and if not, perhaps, put just put the return HTTP status into the ""in"" message header.

--Bill",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-08-12 08:48:50.742,,,no_permission,,,,,,,,,,,,,83294,,,Mon Feb 16 05:51:49 UTC 2009,,,,,,,0|i01ein:,6121,,,,,,,,,"12/Aug/08 08:48;davsclaus;Thanks for reporting this. Will target this for Camel 1.5.

Ad 1)
Can you provide a unit test the demonstrates this bug? Or at least a routebuilder with the setup? Helps a lot with something to start with.

Ad 2)
Yeah it should test for != 200 and set a fault message or the like for all the non OK result.

Ad 3)
The MEP (InOnly, InOut) is a bit confusing in Camel right now. The components doesn't isn't strict about them. They were added becasue of JBI to my knowledge.
We are discussing to do something about it in Camel 2.0. For now we wont change the current behavior.

But yes doing a isOutCapable is a good idea. and set on in if not.

BTW: If you fancy then patches is highly appreciated
http://activemq.apache.org/camel/contributing.html","25/Sep/08 09:01;njiang;For 
1) I  fixed the NPE in CAMEL-785. Please check out the Camel 1.5 snapshot for verification.

2) I just updated the code if the responseCode != 200, we put the result into the fault message.

3) Since we are thinking the InMessage should be a mutable, I'd like to keep the out  message for store the result.

Maybe we will review this in the Camel2.0.



","25/Sep/08 14:48;hadrian;@Willem, I think for things like 500 (transient errors) it should still be exception.","25/Sep/08 23:27;hadrian;On a second thought, let's close this one.  We'll have quite some cleanup to do across all components after CAMEL-316 is fixed.",16/Feb/09 05:51;davsclaus;Closing all 1.5.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Strict Uri option validation fails HTTP Get Requests,CAMEL-806,12486005,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,sgargan,sgargan,10/Aug/08 06:52,16/Feb/09 05:51,14/Mar/19 02:42,11/Aug/08 08:34,1.4.0,,,,,,,,,,1.5.0,,,camel-core,,,,0,"The new strict URI validation requires that the named parameter options be validated prior to calling endpoint. This has the unfortunate side effect of failing exchanges to Endpoints where the parameter options are variable e.g. a GET request to HTTP server. In cases such as these it would be useful to be able to circumvent this strict validation.

The attached test illustrates the issue.

",All.,,,,,,,,,,,,,,,,10/Aug/08 06:52;sgargan;ASF.LICENSE.NOT.GRANTED--HttpGetWithParamTest.java;https://issues.apache.org/jira/secure/attachment/12462657/ASF.LICENSE.NOT.GRANTED--HttpGetWithParamTest.java,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-08-11 06:07:17.125,,,no_permission,,,,,,,,,,,,,83295,,,Mon Feb 16 05:51:49 UTC 2009,,,,,,,0|i01eif:,6120,,,,,,,,,11/Aug/08 06:07;davsclaus;Okay got it covered now. Will commit the fix later today.,11/Aug/08 08:28;davsclaus;Stephan the paramsViaHeader works in Camel 1.4 already. You just need to remove the leading ? in the value.,16/Feb/09 05:51;davsclaus;Closing all 1.5.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
File component - recursive=false should scan first directory ,CAMEL-804,12484850,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,09/Aug/08 10:20,23/Oct/08 04:37,14/Mar/19 02:42,09/Aug/08 11:00,1.4.0,,,,,,,,,,1.5.0,,,camel-core,,,,0,"See nabble:
http://www.nabble.com/FileEndpoing-%22consumer.recursive%22-is-misleading-td18897261s22882.html",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,83296,,,Thu Oct 23 04:37:12 UTC 2008,,,,,,,0|i01ehz:,6118,,,,,,,,,23/Oct/08 04:37;davsclaus;Closing 1.5 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ValidatingProcessor not thread-safe,CAMEL-803,12486003,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,mrt1nz,mrt1nz,09/Aug/08 06:27,16/Feb/09 05:51,14/Mar/19 02:42,09/Aug/08 17:33,1.4.0,,,,,,,,,,1.5.0,,,camel-core,,,,0,"The method org.apache.camel.processor.validation.ValidatingProcessor.process() is executed concurrently but error information is stored in a shared errorHandler. Because each thread calls errorHandler.reset() it may clean errors written by another thread. The easiest way to fix this issue would be a synchronized block:

{code:java|title=ValidatingProcessor.java}
...
synchronized (errorHandler) {
    errorHandler.reset();
    validator.setErrorHandler(errorHandler);
    
    DOMResult result = new DOMResult();
    validator.validate(source, result);
    
    errorHandler.handleErrors(exchange, schema, result);
}
... 
{code}

The disadvantage of this solution is that is serializes threads. A locally created error handler would be preferrable ...
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-08-09 12:01:22.695,,,no_permission,,,,,,,,,,,,,83297,,,Mon Feb 16 05:51:49 UTC 2009,,,,,,,0|i01ehr:,6117,,,,,,,,,"09/Aug/08 12:01;davsclaus;I am wondering if the code below would do the trick?
I does however assume that it can create a new instance of the error handler provided.

{code:java}
        // create a new errorHandler and set it on the validator
        // must be a local instance to avoid problems with concurrency (to be thread safe)
        ValidatorErrorHandler handler = errorHandler.getClass().newInstance();
        validator.setErrorHandler(handler);

        DOMResult result = new DOMResult();
        validator.validate(source, result);

        handler.handleErrors(exchange, schema, result);
{code}",09/Aug/08 16:00;davsclaus;BTW: We need a unit test that covers ValidatingProcessor. The ones I have seen have created their own processor and not using the one from camel-core.,09/Aug/08 17:33;davsclaus;Fixed in rev 684301,16/Feb/09 05:51;davsclaus;Closing all 1.5.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
mvn dependency:go-offline does not work in camel-scala,CAMEL-799,12485989,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,gertvanthienen,janstey,janstey,08/Aug/08 12:51,16/Feb/09 05:51,14/Mar/19 02:42,08/Aug/08 12:59,1.4.0,,,,,,,,,,1.5.0,,,camel-scala,,,,0,"When I run 'mvn dependency:go-offline' I get the following error in camel-scala:

{code}
[ERROR] BUILD ERROR
[INFO] ------------------------------------------------------------------------
[INFO] Failed to resolve artifact.

GroupId: org.scala-tools
ArtifactId: maven-scala-plugin
Version: RELEASE

Reason: Unable to determine the release version

Try downloading the file manually from the project website.

Then, install it using the command: 
    mvn install:install-file -DgroupId=org.scala-tools -DartifactId=maven-scala-plugin 
    -Dversion=RELEASE -Dpackaging=maven-plugin -Dfile=/path/to/file

Alternatively, if you host your own repository you can deploy the file there: 
    mvn deploy:deploy-file -DgroupId=org.scala-tools -DartifactId=maven-scala-plugin 
    -Dversion=RELEASE -Dpackaging=maven-plugin -Dfile=/path/to/file -Durl=[url] -DrepositoryId=[id]

  org.scala-tools:maven-scala-plugin:maven-plugin:RELEASE
{code}
Adding an explicit version for the scala plugin fixes this. ",,,,,,,,,,,,,,,,,08/Aug/08 12:52;janstey;ASF.LICENSE.NOT.GRANTED--fixDependencyGoOffline.patch;https://issues.apache.org/jira/secure/attachment/12462656/ASF.LICENSE.NOT.GRANTED--fixDependencyGoOffline.patch,08/Aug/08 12:51;janstey;fixDependencyGoOffline.patch;https://issues.apache.org/jira/secure/attachment/12462633/fixDependencyGoOffline.patch,,,,2.0,,,,,,,,,,,,,,,,,,,2008-08-08 12:59:58.75,,,no_permission,,,,,,,,,,,,,83298,,,Mon Feb 16 05:51:49 UTC 2009,,,Patch Available,,,,0|i01egv:,6113,,,,,,,,,08/Aug/08 12:52;janstey;Adding patch *with* ASF license...,"08/Aug/08 12:59;gertvanthienen;Fixed in http://svn.eu.apache.org/viewvc?view=rev&revision=683956.
Thanks to Jon for providing the patch!",16/Feb/09 05:51;davsclaus;Closing all 1.5.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException is generated when Flatpack component is used with Tracer,CAMEL-798,12485583,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,cmoulliard,cmoulliard,08/Aug/08 12:07,16/Feb/09 05:51,14/Mar/19 02:42,09/Aug/08 17:03,1.4.0,,,,,,,,,,1.5.0,,,camel-flatpack,,,,0,"Hi, 

The following error is returned when Tracer is activated for the Flatpack component :

4317672 [Thread: 2 org.apache.camel.component.file.FileComponent@14f5a31] INFO  org.apache.camel.processor.interceptor.TraceInterceptor  - ID-dell-charles/1671-1218196761734/1-1 -> interceptor2 Interceptor[Delegate(DeadLetterChannel[Delegate(TraceInterceptor[To[flatpack:fixed:com/bravura/babel/transformation/cutas/in/CUTAS.xml]]), sendTo(Endpoint[seda:errors]), RedeliveryPolicy[maximumRedeliveries=1]])] InOnly Properties:{org.apache.camel.file.lock.name=c:\temp\cutas\input\clientA\ST000355.txt.cameLock, org.apache.camel.file.lock=sun.nio.ch.FileLockImpl[0:9223372036854775807 exclusive valid], org.apache.camel.fileChannel=sun.nio.ch.FileChannelImpl@4610fa} Headers:{org.apache.camel.file.name=ST000355.txt} BodyType:java.io.File
4317672 [Thread: 2 org.apache.camel.component.file.FileComponent@14f5a31] INFO  org.apache.camel.processor.interceptor.TraceInterceptor  - ID-dell-charles/1671-1218196761734/1-1 -> to4 To[flatpack:fixed:com/bravura/babel/transformation/cutas/in/CUTAS.xml] InOnly Properties:{CamelCauseException=null, org.apache.camel.file.lock.name=c:\temp\cutas\input\clientA\ST000355.txt.cameLock, org.apache.camel.file.lock=sun.nio.ch.FileLockImpl[0:9223372036854775807 exclusive valid], org.apache.camel.fileChannel=sun.nio.ch.FileChannelImpl@4610fa} Headers:{org.apache.camel.file.name=ST000355.txt} BodyType:java.io.File
4318031 [Thread: 2 org.apache.camel.component.file.FileComponent@14f5a31] INFO  org.apache.camel.processor.interceptor.TraceInterceptor  - ID-dell-charles/1671-1218196761734/1-2 -> interceptor3 Interceptor[Delegate(DeadLetterChannel[Delegate(TraceInterceptor[To[activemq:queue:cutas.clientA.accepted.in]]), sendTo(Endpoint[seda:errors]), RedeliveryPolicy[maximumRedeliveries=1]])] InOnly Properties:{} Headers:{camelFlatpackCounter=0} BodyType:net.sf.flatpack.DefaultDataSet
4318031 [Thread: 2 org.apache.camel.component.file.FileComponent@14f5a31] INFO  org.apache.camel.processor.interceptor.TraceInterceptor  - ID-dell-charles/1671-1218196761734/1-2 -> to5 To[activemq:queue:cutas.clientA.accepted.in] InOnly Properties:{CamelCauseException=null} Headers:{camelFlatpackCounter=0} BodyType:net.sf.flatpack.DefaultDataSet
4318172 [Thread: 2 org.apache.camel.component.file.FileComponent@14f5a31] INFO  org.apache.camel.processor.interceptor.TraceInterceptor  - ID-dell-charles/1671-1218196761734/1-3 -> interceptor3 Interceptor[Delegate(DeadLetterChannel[Delegate(TraceInterceptor[To[activemq:queue:cutas.clientA.accepted.in]]), sendTo(Endpoint[seda:errors]), RedeliveryPolicy[maximumRedeliveries=1]])] InOnly Properties:{} Headers:{camelFlatpackCounter=1} BodyType:net.sf.flatpack.DefaultDataSet
4318172 [Thread: 2 org.apache.camel.component.file.FileComponent@14f5a31] INFO  org.apache.camel.processor.interceptor.TraceInterceptor  - ID-dell-charles/1671-1218196761734/1-3 -> to5 To[activemq:queue:cutas.clientA.accepted.in] InOnly Properties:{CamelCauseException=null} Headers:{camelFlatpackCounter=1} BodyType:net.sf.flatpack.DefaultDataSet
4318172 [Thread: 2 org.apache.camel.component.file.FileComponent@14f5a31] INFO  org.apache.camel.processor.interceptor.TraceInterceptor  - ID-dell-charles/1671-1218196761734/1-4 -> interceptor3 Interceptor[Delegate(DeadLetterChannel[Delegate(TraceInterceptor[To[activemq:queue:cutas.clientA.accepted.in]]), sendTo(Endpoint[seda:errors]), RedeliveryPolicy[maximumRedeliveries=1]])] InOnly Properties:{} Headers:{camelFlatpackCounter=2} BodyType:net.sf.flatpack.DefaultDataSet
4318172 [Thread: 2 org.apache.camel.component.file.FileComponent@14f5a31] INFO  org.apache.camel.processor.interceptor.TraceInterceptor  - ID-dell-charles/1671-1218196761734/1-4 -> to5 To[activemq:queue:cutas.clientA.accepted.in] InOnly Properties:{CamelCauseException=null} Headers:{camelFlatpackCounter=2} BodyType:net.sf.flatpack.DefaultDataSet
4318172 [Thread: 2 org.apache.camel.component.file.FileComponent@14f5a31] INFO  org.apache.camel.processor.interceptor.TraceInterceptor  - ID-dell-charles/1671-1218196761734/1-5 -> interceptor3 Interceptor[Delegate(DeadLetterChannel[Delegate(TraceInterceptor[To[activemq:queue:cutas.clientA.accepted.in]]), sendTo(Endpoint[seda:errors]), RedeliveryPolicy[maximumRedeliveries=1]])] InOnly Properties:{} Headers:{camelFlatpackCounter=3} BodyType:net.sf.flatpack.DefaultDataSet
4318172 [Thread: 2 org.apache.camel.component.file.FileComponent@14f5a31] INFO  org.apache.camel.processor.interceptor.TraceInterceptor  - ID-dell-charles/1671-1218196761734/1-5 -> to5 To[activemq:queue:cutas.clientA.accepted.in] InOnly Properties:{CamelCauseException=null} Headers:{camelFlatpackCounter=3} BodyType:net.sf.flatpack.DefaultDataSet
4318172 [Thread: 2 org.apache.camel.component.file.FileComponent@14f5a31] INFO  org.apache.camel.processor.interceptor.TraceInterceptor  - ID-dell-charles/1671-1218196761734/1-6 -> interceptor3 Interceptor[Delegate(DeadLetterChannel[Delegate(TraceInterceptor[To[activemq:queue:cutas.clientA.accepted.in]]), sendTo(Endpoint[seda:errors]), RedeliveryPolicy[maximumRedeliveries=1]])] InOnly Properties:{} Headers:{camelFlatpackCounter=4} BodyType:net.sf.flatpack.DefaultDataSet
4318172 [Thread: 2 org.apache.camel.component.file.FileComponent@14f5a31] INFO  org.apache.camel.processor.interceptor.TraceInterceptor  - ID-dell-charles/1671-1218196761734/1-6 -> to5 To[activemq:queue:cutas.clientA.accepted.in] InOnly Properties:{CamelCauseException=null} Headers:{camelFlatpackCounter=4} BodyType:net.sf.flatpack.DefaultDataSet
4318172 [Thread: 2 org.apache.camel.component.file.FileComponent@14f5a31] INFO  org.apache.camel.processor.interceptor.TraceInterceptor  - ID-dell-charles/1671-1218196761734/1-7 -> interceptor3 Interceptor[Delegate(DeadLetterChannel[Delegate(TraceInterceptor[To[activemq:queue:cutas.clientA.accepted.in]]), sendTo(Endpoint[seda:errors]), RedeliveryPolicy[maximumRedeliveries=1]])] InOnly Properties:{} Headers:{camelFlatpackCounter=5} BodyType:net.sf.flatpack.DefaultDataSet
4318172 [Thread: 2 org.apache.camel.component.file.FileComponent@14f5a31] INFO  org.apache.camel.processor.interceptor.TraceInterceptor  - ID-dell-charles/1671-1218196761734/1-7 -> to5 To[activemq:queue:cutas.clientA.accepted.in] InOnly Properties:{CamelCauseException=null} Headers:{camelFlatpackCounter=5} BodyType:net.sf.flatpack.DefaultDataSet
4318219 [DefaultMessageListenerContainer-9] WARN  org.apache.camel.component.jms.EndpointMessageListener  - Endpoint[activemq:queue:cutas.clientA.accepted.in] consumer caught an exception while processing JMS message: ActiveMQMessage {commandId = 5, responseRequired = true, messageId = ID:dell-charles-1675-1218196762046-2:3:1:1:1, originalDestination = null, originalTransactionId = null, producerId = ID:dell-charles-1675-1218196762046-2:3:1:1, destination = queue://cutas.clientA.accepted.in, transactionId = null, expiration = 0, timestamp = 1218196771187, arrival = 0, brokerInTime = 1218196771187, brokerOutTime = 1218196771218, correlationId = null, replyTo = null, persistent = true, type = null, priority = 4, groupID = null, groupSequence = 0, targetConsumerId = null, compressed = false, userID = null, content = null, marshalledProperties = null, dataStructure = null, redeliveryCounter = 0, size = 1024, properties = {camelFlatpackCounter=0}, readOnlyProperties = true, readOnlyBody = true, droppable = false}
43org.apache.camel.RuntimeCamelException: java.lang.NullPointerException
	at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:71)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:531)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:466)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:435)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:322)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:260)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:944)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:875)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.NullPointerException
	at org.apache.camel.processor.interceptor.TraceFormatter.getBodyTypeAsString(TraceFormatter.java:124)
	at org.apache.camel.processor.interceptor.TraceFormatter.format(TraceFormatter.java:39)
	at org.apache.camel.processor.interceptor.TraceInterceptor.format(TraceInterceptor.java:68)
	at org.apache.camel.processor.Logger.logMessage(Logger.java:218)
	at org.apache.camel.processor.Logger.process(Logger.java:125)
	at org.apache.camel.processor.interceptor.TraceInterceptor.logException(TraceInterceptor.java:128)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:59)
	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:39)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:41)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:66)
	at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:68)
	... 8 more
	
Code snippet :

	public void configure() {
			
		errorHandler(deadLetterChannel(""seda:errors"").maximumRedeliveries(1)
				.useExponentialBackOff());
		
        // Display trace
		Tracer tracer = new Tracer();
		tracer.getFormatter().setShowBody(false);
		tracer.getFormatter().setShowHeaders(true);
		tracer.getFormatter().setShowNode(true);
		getContext().addInterceptStrategy(tracer);
		
	
		from(file:///c:/temp/cutas/input/clientA/?delete=false&amp;lock=true&amp;consumer.delay=500&amp;consumer.initialDelay=10)
		.to(flatpack:fixed:com/bravura/babel/transformation/cutas/in/CUTAS.xml);
		
		from(flatpack:fixed:com/bravura/babel/transformation/cutas/in/CUTAS.xml)
		.to(activemq:queue:cutas.clientA.accepted.in);
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-08-08 12:10:44.227,,,no_permission,,,,,,,,,,,,,83299,,,Mon Feb 16 05:51:49 UTC 2009,,,,,,,0|i01egn:,6112,,,,,,,,,"08/Aug/08 12:10;davsclaus;Hi Charles

This should be fixed with the 1.5-SNAPSHOT.

What you can do as a workaround in Camel 1.4 is to *not* show the body type.
tracer.getFormatter().setShowBodyType(false);",08/Aug/08 12:39;cmoulliard;The error is also generated (in Camel 1.4) even if i use : tracer.getFormatter().setShowBodyType(false);,"08/Aug/08 12:44;davsclaus;Hi Charles

Hmm that is to bad. You can also try to disable the body all together just for testing
tracer.getFormatter().setShowBody(false);","08/Aug/08 13:46;cmoulliard;This is not really blocking. I can wait for Camel 1.5.

Nevertheless, there is a bug with the flatpack component because in the case presented here, the endpoint ""from(flatpack:fixed:com/bravura/babel/transformation/cutas/in/CUTAS.xml)"" send a flatpack DataSet object which is not accepted by the activemq queue.","08/Aug/08 13:53;davsclaus;Yes the flatpack component needs an overhaul for Camel 1.5. It was added very late in 1.4 and thus not complete.

Charles if you are up for it you are welcome to give a go at improving the flatpack component ;)","08/Aug/08 15:23;cmoulliard;I have faxed my apache CLA so now I wait to be listed on apache web site. Next week, I will try to spend some time on this beautiful Apache project. I have almost finished the Proof Of Concept for which I was busy since a couple weeks so now I will have a few times for open source community (if my boss agrees ;)","09/Aug/08 17:03;davsclaus;Charles about the bug?

You need to convert the content to something that can be serailized/handled by the JMS provider.
But as said before we should give the flatpack component an overhaul.

But can you test with this (there is a type converter from DataSet to Map)

from(flatpack:fixed:com/bravura/babel/transformation/cutas/in/CUTAS.xml)
.convertBodyTo(Map.class)
.to(activemq:queue:cutas.clientA.accepted.in);

I will close this as not a bug. And then we must make sure the flatpack stuff can be sent to JMS out-of-the-box with eg a good type converter or a camel type that is seiralizable.",09/Aug/08 17:03;davsclaus;The original reported bug is *already* fixed in Camel 1.5,16/Feb/09 05:51;davsclaus;Closing all 1.5.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MinaConsumerTest failure,CAMEL-795,12485998,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,hadrian,hadrian,08/Aug/08 05:48,16/Feb/09 05:51,14/Mar/19 02:42,08/Aug/08 05:57,1.4.0,,,,,,,,,,1.5.0,,,camel-mina,,,,0,"The test fails with the following error:

junit.framework.ComparisonFailure: expected:<[Bye World]> but was:<[]>
	at junit.framework.Assert.assertEquals(Assert.java:81)
	at junit.framework.Assert.assertEquals(Assert.java:87)
	at org.apache.camel.component.mina.MinaConsumerTest.testSendTextlineSyncText(MinaConsumerTest.java:28)
...

One test sends sync the text ""World"" and the should receive ""Bye World"" in response.
2008-08-08 01:35:25,589 DEBUG MinaProducer - Message received: Bye World 
2008-08-08 01:35:25,589 DEBUG MinaProducer - Message received:  
2008-08-08 01:35:25,589 DEBUG MinaProducer - Message received: Bye  
2008-08-08 01:35:25,589 DEBUG MinaProducer - Message received:  

There are actually not one, but two messages received which causes the reply to be overridden by the second message.  The problem is with the test itself that actually returns ""Bye "" + body + ""\n""!  Because the test uses the 'textline' mina codec, the encoder actually adds another '\n'.  With the textline codec there's one message per line, so the extra \n makes it two lines and hence the extra message.  The decoder at the other end suppresses the LineDelimiter (\n), so the extra message is actually an empty string.

Removing the extra \n in the message fixes the test, but the notes above should be considered when camel-mina is used with the textline codec.




",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-02-16 05:51:49.608,,,no_permission,,,,,,,,,,,,,83300,,,Mon Feb 16 05:51:49 UTC 2009,,,,,,,0|i01efz:,6109,,,,,,,,,16/Feb/09 05:51;davsclaus;Closing all 1.5.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Pipeline with thread() processor also redelivers following the default policy independently from the preset  errorhadling ,CAMEL-794,12485979,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,magyardude,magyardude,08/Aug/08 03:02,16/Feb/09 05:51,14/Mar/19 02:42,07/Sep/08 16:58,1.4.0,,,,,,,,,,1.5.0,,,camel-core,,,,0,"When using the thread processor in a simple pipeline, the exchange will be redelivered 6 times (default policy) along with the preset errorhandler settings. The code below will re-deliver 6 times to the default DeadLetterChannel and once to the log:errorTester.

    	errorHandler(deadLetterChannel(""log:errorTester?level=ERROR"").maximumRedeliveries(1));
		
    	from(""seda:whatEver"")
        .thread(2)
       	.process(new Processor() {
        		public void process(Exchange exchange) throws Exception {
        			System.out.println(""### Exchg : "" + exchange.getExchangeId());
        			throw new Exception(""Kaboom 2!"");
        		}
        });
",,,,,,,,,,,,,,,,,17/Aug/08 22:22;magyardude;BelasThreadErrorHandlerTest1.java;https://issues.apache.org/jira/secure/attachment/12462620/BelasThreadErrorHandlerTest1.java,17/Aug/08 22:22;magyardude;BelasThreadErrorHandlerTest2.java;https://issues.apache.org/jira/secure/attachment/12462563/BelasThreadErrorHandlerTest2.java,,,,2.0,,,,,,,,,,,,,,,,,,,2008-08-08 12:12:38.173,,,no_permission,,,,,,,,,,,,,83301,,,Mon Feb 16 05:51:49 UTC 2009,,,,,,,0|i01efr:,6108,,,,,,,,,"08/Aug/08 03:06;magyardude;err correction: re-delivers 6 times  before it goes to the default DeadLetterChannel, then once more before it goes to the specified ErrorHandler. It seems like the message gets re-delivered parallel: once following the default ErrorHandler policy and also following the preset error handler.",08/Aug/08 12:12;davsclaus;Target for Camel 1.5. Error handling is important that it *just works*,"15/Aug/08 21:46;magyardude;So far this is what I see: 

The thread processor wraps everything following into a pipeline. One problem is that the ""children"" (the members of the pipeline) don't inherit the the settings for the Error Channel. Since the ErrorHandlerBulder is null it falls back to the default (6 re-tries, DLC). This probably can be corrected at ProcessorType.java:1610 by copying the ErrorHandlerBuilder of the parent.

But there is another problem. If we bomb in one of the members of the pipeline after the thread processor, the error handling will be executed two times: once for the member (that would be the desirable behavior) and once for the whole pipeline. Camel actually re-delivers the exchange to the first member after the thread(). 

Well that is it so far.  Let me know if you want me to keep poking...

","16/Aug/08 07:41;davsclaus;Bela thanks for the help, much appreciated ",16/Aug/08 08:00;davsclaus;It might already be fixed in Camel 1.5. Using your unit test I can only get it redelivered once.,"16/Aug/08 08:02;davsclaus;See unit test added:
http://svn.apache.org/viewvc?view=rev&revision=686461

org.apache.camel.issues.ThreadErrorHandlerTest
","17/Aug/08 22:21;magyardude;More digging...

I attached 2 unit tests. The extra is that I'm counting the actual execution of the processor.

The first  is the simpler test (BelasThreadErrorHandlerTest1.java). It demonstrates that the exchange gets delivered 1 less times than the number specified in the errorHandler statement. This happens even without the thread processor. By the way am I right here? We mean ""re""-delivery, meaning executing the processor, where the failure occurred, once (failure) + plus the number of ""re"" times, right? Btw with zero doesn't even call the processor. 

The second unit test is about the thread processor behavior (BelasThreadErrorHandlerTest1.java). The error handlig behavior is different depending where you put the errorHandler call inside the route: before or after. If it comes before the only problem is the one less re-delivery (see above in the first unit test). If you put the errorHandler spec after the thread processor it gets ignored and Camel will redeliver 5 times followed by the default DLC (one less again because 6 is the default).",17/Aug/08 22:22;magyardude;Unit test to show the number of re-deliveries is one less than expected.,17/Aug/08 22:22;magyardude;Unit test to test the errorHandling with thread processor.,"18/Aug/08 04:05;davsclaus;Hi Bela

Thanks for all the digging.
maximumRedelivery=0 should disable it = newer retry.",23/Aug/08 10:01;davsclaus;Thanks for the unit tests. Will look into it later.,"28/Aug/08 05:29;davsclaus;The ""number of re-deliveries is one less than expected."" has been fixed.","28/Aug/08 08:22;davsclaus;The outstanding issue is when you configure an errorHandler *after* the *thread*.

{code}
   from(xxx)
   .thread(2)
   .errorHandler(...)
   .process(...)
{code}

Then its using the parent errorhandler and if none exists its the default error handler using DLC with 5 retries.


But setting the errorhandler *before* works as expected:
{code}
   from(xxx)
   .errorHandler(...)
   .thread(2)
   .process(...)
{code}

So we gotta figure out how Camel should handle this, and if the *after* should be supported also. ","07/Sep/08 16:58;davsclaus;Setting error handler *after* thread is not supported. End users should set it on the correct type such as a RouteType such as the *from*.

The thread children is now also configured with the inherited error handler as suggested by Bela.

Thanks Bela for reporting and digging into this issue.","07/Sep/08 21:06;magyardude;There's only one issue with this, but isn't a big deal. The failure gets logged twice. Once for the thread(n) and once for the processor which failed somewhere after the thread(n).  They get logged with their respective exchanges. I think only the exchange before the failed processor should be logged.

I will try to create a test case, but not sure how can this be automated with JUnit (you have to set it to debug and watch the log). 
Anyway this is not a showstopper bug.

 ","08/Sep/08 08:53;davsclaus;Bela yes please if you are digging into this create a new ticket with the findings.

When you say ""logged"" do you mean the DEBUG logging in camel or that the exchange is moved to a dead letter channel after all redeliveries failed? Can you elaborate a bit on this?","14/Sep/08 21:22;magyardude;Yes, I meant the log messages. I cannot reproduce it in a unit test, but it is still happening in my system.
While trying to create the test I found someting else:

https://issues.apache.org/activemq/browse/CAMEL-901

It maybe the indirect cause of my logging problem. Let me know if I can help in any ways.",16/Feb/09 05:51;davsclaus;Closing all 1.5.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
smtp connection without authentication (no username and password given) doesn't work,CAMEL-793,12485546,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,magyardude,magyardude,08/Aug/08 02:49,16/Feb/09 05:51,14/Mar/19 02:42,08/Aug/08 04:07,1.4.0,,,,,,,,,,1.5.0,,,camel-mail,,,,0,Connections to smtp servers with no authentication fail. The mail.smtp.auth is always set to true. The patch sets it to false if no username is given.,,,,,,,,,,,,,,,,,08/Aug/08 02:51;magyardude;MailConfiguration_patch.txt;https://issues.apache.org/jira/secure/attachment/12462462/MailConfiguration_patch.txt,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-08-08 04:07:33.8,,,no_permission,,,,,,,,,,,,,83302,,,Mon Feb 16 05:51:49 UTC 2009,,,Patch Available,,,,0|i01efj:,6107,,,,,,,,,08/Aug/08 04:07;davsclaus;Applied patch with thanks to Bela.,16/Feb/09 05:51;davsclaus;Closing all 1.5.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Exception is not logged or handled when error handler is LoggingErrorHandler and processing occurs inside Pipeline,CAMEL-792,12485995,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,tdomzal,tdomzal,07/Aug/08 21:22,16/Feb/09 05:51,14/Mar/19 02:42,13/Aug/08 18:42,1.4.0,,,,,,,,,,1.5.0,,,camel-core,,,,0,"Exception throw inside Pipeline is not reported or handled when error handler is LoggingErrorHandler.
Attached unit test fails - exchange with exception is not passed to ""mock:error"" endpoints.
Test will pass when you change error handler to default (DeadLetterErrorHandler)
or when processor throwing an exception is processed not inside Pipeline.

After some digging inside source code I noticed Pipeline source code fragment.
{code:java}
    public void process(Exchange exchange) throws Exception {
        AsyncProcessorHelper.process(this, exchange);
    }
{code}
AsyncProcessorHelper.process(..) never throws exception directly.
Instead it passes exception information in exchange object properties.
Problem is LoggingErrorHandler doesn't use it correctly because (code snipped from LoggingErrorHandler):
{code:java}
    public void process(Exchange exchange) throws Exception {
        try {
            output.process(exchange);
        } catch (Throwable e) {
            if (!customProcessorForException(exchange, e)) {
                logError(exchange, e);
            }
        }
    }
{code}
it is logging only exception returned directly by output.process call.
","camel-core-1.4.0.0-fuse. windows xp, java 6",,,,,,,,,,,,,,,,07/Aug/08 21:32;tdomzal;ExceptionHandlingWithLoggingHanderAndPipelineTest.java;https://issues.apache.org/jira/secure/attachment/12462560/ExceptionHandlingWithLoggingHanderAndPipelineTest.java,11/Aug/08 08:15;tdomzal;camel-792-logging-error-handler-test-case.patch.txt;https://issues.apache.org/jira/secure/attachment/12462517/camel-792-logging-error-handler-test-case.patch.txt,11/Aug/08 08:14;tdomzal;camel-792-logging-error-handler.patch.txt;https://issues.apache.org/jira/secure/attachment/12462634/camel-792-logging-error-handler.patch.txt,,,3.0,,,,,,,,,,,,,,,,,,,2008-08-08 12:25:14.561,,,no_permission,,,,,,,,,,,,,83303,,,Mon Feb 16 05:51:49 UTC 2009,,,,,,,0|i01efb:,6106,,,,,,,,,08/Aug/08 12:25;davsclaus;Error handling should *just work* so target for Camel 1.5,"11/Aug/08 08:19;tdomzal;Attached patch for LoggingErrorHandler and verifying test case (new file).

Two doubts:

1)
Inside LoggingErrorHandler, before passing to handling exception cause is moved to exchange property.
Is that correct ?

{code:java}
public void process(Exchange exchange) throws Exception {
	try {
		output.process(exchange);
	} catch (Throwable e) {
		exchange.setException(e);
	}
	if (exchange.getException()!=null) {

		// move exchange exception cause to property
		Throwable e = exchange.getException();
		exchange.setProperty(DeadLetterChannel.EXCEPTION_CAUSE_PROPERTY, e);
		exchange.setException(null);

		if (!customProcessorForException(exchange, e)) {
			logError(exchange, e);
		}

		// restore exception on exchange
		exchange.setException((Throwable)exchange.getProperty(DeadLetterChannel.EXCEPTION_CAUSE_PROPERTY));
	}
}
{code}
2)
Inside test case.
When defining exception enclusure in path DSL definition I used 'end()' element to close 'exception handling' subpath.
(without 'end()' exception handling is not working at all.)
Is that correct ?
{code:java}
from(...)
	.exception(SomeException.class).to(...).end()
	.process(...)
	.to(...);
{code}","12/Aug/08 04:27;davsclaus;Hi Thomasz

Thanks for looking into this and providing patches and with comments as well.

Ad 1)
Ah here we get a bit confusing with Camel.

You can fail a route by:
a) throwing an exception
b) setting an exception on the exchange

case a is handled today by the logging error handler. The bug is that case b is not. The DLC handles both cases.

What you do by setting the exception on the message is that a is now => b. I do think we should keep the two cases separated.


Ad 2)
Ah this is not seen very often but clever. You have the exception within the from = in your route path.
Yes the end() is needed otherwise Camel doesn't know when to stop if it goes by the exception path.
It doesn't know about new lines so it would just continue. With this you can do fancy stuff

exception(xxx).to(yy).process(zzz).choice()....
Just like a regular route path. So when you have it nested you need to tell Camel when to end this path.

If you move the exception outside then you can use the semi colon to stop ;

exception(xxx).to(yy);
from(aaa).process(bla);

Then the ; is like the end()

","12/Aug/08 18:34;tdomzal;So you suggest not touching ""case a"" and adding proper handling of ""case b"" ?
","12/Aug/08 19:00;davsclaus;Yes, something like
{code}
Throwable toBeLogged = null;

// case a
// base b

if (toBeLogged != null) {
  // log it
}
{code}",13/Aug/08 18:42;davsclaus;Tomasz thanks for the patches. I have applied a fix based on your work. Also I fixed that for INFO logging it was logging at DEBUG level instead.,"14/Aug/08 16:31;tdomzal;I was still working on this but you ware faster :)
BWT. I'm digging a little bit more around LoggingErrorHandler and found some issues directly related to modified error handler fragment. Should I report it here or rather on mailing list ?
","16/Aug/08 06:02;davsclaus;Tomasz the mailing list is a good place if you are not sure its really a in issue or you need help.
If you are pretty sure its a bug then please open a new JIRA ticket.

Glad you are looking into this and take time to report it. Digging into the code also helps you understand how Camel works so you get some education as well ;)
",16/Feb/09 05:51;davsclaus;Closing all 1.5.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Quartz endpoint generates an error which is not serialisable (java.io.NotSerializableException: org.apache.camel.component.quartz.QuartzEndpoint),CAMEL-787,12485165,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,cmoulliard,cmoulliard,06/Aug/08 14:46,24/Oct/08 08:00,14/Mar/19 02:42,07/Aug/08 06:57,1.4.0,,,,,,,,,,1.5.0,,,camel-quartz,,,,0,"Quartz endpoint generates an error which is not serialisable (java.io.NotSerializableException: org.apache.camel.component.quartz.QuartzEndpoint)


43java.lang.RuntimeException: org.apache.camel.component.quartz.QuartzEndpoint
	at org.apache.activemq.command.ActiveMQObjectMessage.storeContent(ActiveMQObjectMessage.java:104)
	at org.apache.activemq.command.ActiveMQObjectMessage.setObject(ActiveMQObjectMessage.java:155)
	at org.apache.activemq.ActiveMQSession.createObjectMessage(ActiveMQSession.java:317)
	at org.apache.activemq.pool.PooledSession.createObjectMessage(PooledSession.java:149)
	at org.apache.camel.component.jms.JmsBinding.createJmsMessage(JmsBinding.java:273)
	at org.apache.camel.component.jms.JmsBinding.makeJmsMessage(JmsBinding.java:139)
	at org.apache.camel.component.jms.JmsProducer$2.createMessage(JmsProducer.java:229)
	at org.springframework.jms.core.JmsTemplate.doSend(JmsTemplate.java:570)
	at org.springframework.jms.core.JmsTemplate$4.doInJms(JmsTemplate.java:551)
	at org.springframework.jms.core.JmsTemplate.execute(JmsTemplate.java:471)
	at org.springframework.jms.core.JmsTemplate.send(JmsTemplate.java:548)
	at org.apache.camel.component.jms.JmsProducer.process(JmsProducer.java:227)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:61)
	at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:50)
	at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:79)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:57)
	at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:55)
	at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:50)
	at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:79)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:57)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:69)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:155)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:91)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:101)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:85)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:57)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:41)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:50)
	at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:50)
	at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:79)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:57)
	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:52)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:41)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:66)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:47)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:61)
	at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:50)
	at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:79)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:57)
	at org.apache.camel.processor.MulticastProcessor.process(MulticastProcessor.java:185)
	at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:50)
	at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:79)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:57)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:69)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:155)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:91)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:101)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:85)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:57)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:41)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:50)
	at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:50)
	at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:79)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:57)
	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:39)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:41)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:66)
	at org.apache.camel.processor.loadbalancer.QueueLoadBalancer.process(QueueLoadBalancer.java:41)
	at org.apache.camel.component.quartz.QuartzEndpoint.onJobExecute(QuartzEndpoint.java:117)
	at org.apache.camel.component.quartz.CamelJob.execute(CamelJob.java:32)
	at org.quartz.core.JobRunShell.run(JobRunShell.java:202)
	at org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:531)
Caused by: java.io.NotSerializableException: org.apache.camel.component.quartz.QuartzEndpoint
	at java.io.ObjectOutputStream.writeObject0(Unknown Source)
	at java.io.ObjectOutputStream.writeObject(Unknown Source)
	at java.util.HashMap.writeObject(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at java.io.ObjectStreamClass.invokeWriteObject(Unknown Source)
	at java.io.ObjectOutputStream.writeSerialData(Unknown Source)
	at java.io.ObjectOutputStream.writeOrdinaryObject(Unknown Source)
	at java.io.ObjectOutputStream.writeObject0(Unknown Source)
	at java.io.ObjectOutputStream.defaultWriteFields(Unknown Source)
	at java.io.ObjectOutputStream.writeSerialData(Unknown Source)
	at java.io.ObjectOutputStream.writeOrdinaryObject(Unknown Source)
	at java.io.ObjectOutputStream.writeObject0(Unknown Source)
	at java.io.ObjectOutputStream.defaultWriteFields(Unknown Source)
	at java.io.ObjectOutputStream.writeSerialData(Unknown Source)
	at java.io.ObjectOutputStream.writeOrdinaryObject(Unknown Source)
	at java.io.ObjectOutputStream.writeObject0(Unknown Source)
	at java.io.ObjectOutputStream.writeObject(Unknown Source)
	at org.apache.activemq.command.ActiveMQObjectMessage.storeContent(ActiveMQObjectMessage.java:98)
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-08-06 18:39:32.347,,,no_permission,,,,,,,,,,,,,83304,,,Fri Oct 24 08:00:22 UTC 2008,,,,,,,0|i01ee7:,6101,,,,,,,,,"06/Aug/08 18:39;davsclaus;Hi Charles

What are you doing? Looks like some quartz stuff is sent over the JMS transport? (activemq)?

Could you post some snippets of your route and what you send to trigger this problem? Any of the xxxEndpoints in Camel is not supposed to be sent over JMS only the Exchange as its the *data*.",07/Aug/08 06:57;cmoulliard;Sorry. There was an error in my code. Quartz works very well. The issue can be closed.,"23/Oct/08 12:54;danielwu;Hi Charles,
could you please tell me what was the error in your code? I'm having the same exception here. Thanks!","24/Oct/08 08:00;cmoulliard;Hi Daniel,

The error was due to the fact that the java object generated by JAXB was not serializable and when the message containing this object has been posted on the JMS bus, JMS has propagated the error to the Quartz endpoint ;)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE happens when the JmsMessage's jmsMessage is null,CAMEL-785,12485968,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,06/Aug/08 04:33,16/Feb/09 05:51,14/Mar/19 02:42,06/Aug/08 06:53,1.3.0,1.4.0,,,,,,,,,1.5.0,,,camel-jms,,,,0,"[aultMessageListenerContainer-1] DeadLetterChannel              ERROR Failed del
ivery for exchangeId: ID-TsingTao/51509-1217997092428/0-0. On delivery attempt:
5 caught: java.lang.NullPointerException
java.lang.NullPointerException
        at org.apache.camel.component.jms.JmsMessage.createMessageId(JmsMessage.
java:165)
        at org.apache.camel.impl.MessageSupport.getMessageId(MessageSupport.java
:127)
        at org.apache.camel.component.cxf.CxfMessage.copyFrom(CxfMessage.java:47
)
        at org.apache.camel.impl.DefaultExchange.safeCopy(DefaultExchange.java:9
9)
        at org.apache.camel.impl.DefaultExchange.copyFrom(DefaultExchange.java:8
2)
        at org.apache.camel.impl.DefaultEndpoint.createExchange(DefaultEndpoint.
java:145)
        at org.apache.camel.component.cxf.CxfProducer.process(CxfProducer.java:1
75)
        at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$Processor
ToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43)
        at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:7
5)
        at org.apache.camel.management.InstrumentationProcessor.process(Instrume
ntationProcessor.java:57)
        at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChanne
l.java:155)
        at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChanne
l.java:91)
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:101)
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:85)
        at org.apache.camel.management.InstrumentationProcessor.process(Instrume
ntationProcessor.java:57)
        at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProc
essor.java:39)
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelp
er.java:41)
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsy
ncProcessor.java:66)
        at org.apache.camel.component.jms.EndpointMessageListener.onMessage(Endp
ointMessageListener.java:68)
        at org.springframework.jms.listener.AbstractMessageListenerContainer.doI
nvokeListener(AbstractMessageListenerContainer.java:531)
        at org.springframework.jms.listener.AbstractMessageListenerContainer.inv
okeListener(AbstractMessageListenerContainer.java:466)
        at org.springframework.jms.listener.AbstractMessageListenerContainer.doE
xecuteListener(AbstractMessageListenerContainer.java:435)
        at org.springframework.jms.listener.AbstractPollingMessageListenerContai
ner.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:322)
        at org.springframework.jms.listener.AbstractPollingMessageListenerContai
ner.receiveAndExecute(AbstractPollingMessageListenerContainer.java:260)
        at org.springframework.jms.listener.DefaultMessageListenerContainer$Asyn
cMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:944)

        at org.springframework.jms.listener.DefaultMessageListenerContainer$Asyn
cMessageListenerInvoker.run(DefaultMessageListenerContainer.java:875)",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-02-16 05:51:49.494,,,no_permission,,,,,,,,,,,,,83167,,,Mon Feb 16 05:51:49 UTC 2009,,,,,,,0|i01edr:,6099,,,,,,,,,06/Aug/08 06:53;njiang; http://svn.apache.org/viewvc?rev=683125&view=rev,16/Feb/09 05:51;davsclaus;Closing all 1.5.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Tracer incorrectly treats messages with InputStream as body,CAMEL-782,12487939,12484689,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,lordorient,lordorient,05/Aug/08 11:41,16/Feb/09 05:51,14/Mar/19 02:42,27/Aug/08 07:44,1.4.0,,,,,,,,,,1.5.0,,,camel-core,,,,0,"Suppose we have the following flow:

 from(""activemq:vasea"")
  .to(""cxf:bean:serviceEndpoint?dataFormat=MESSAGE"")
    .unmarshal().string()
  .to(""activemq:petea"");

In this flow cxf:bean:serviceEndpoint returns ByteArrayInputStream as body. Under normal conditions everything works fine: WS output gets to the queue.
But if we add:
getContext().addInterceptStrategy(new Tracer());
Queue starts receiving empty messages. After digging in the code I found out that tracer reads input stream in order to display body, but not resets it. Thus when message reaches unmarshaller, nothing could be read from the stream.
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-08-06 04:15:50.701,,,no_permission,,,,,,,,,,,,,83305,,,Mon Feb 16 05:51:49 UTC 2009,,,,,,,0|i01ed3:,6096,,,,,,,,,"06/Aug/08 04:15;davsclaus;Ah good catch. The logger could have the same problem as well.

I remember there is something with streamcache that might can help out here. I don't have the time to dig into it yet.

A workaround is to disable logging of the body in the tracer. There are options for this in the formatter:
http://activemq.apache.org/camel/tracer.html","27/Aug/08 07:44;njiang;Hi Genadii

 I just did a quick fix for it.  
 Please check out the latest Camel 1.5 snapshot and let me know you feed back :)

Willem",16/Feb/09 05:51;davsclaus;Closing all 1.5.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Allow '@' in usernames.,CAMEL-777,12484931,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,avatah,avatah,01/Aug/08 09:11,16/Feb/09 05:51,14/Mar/19 02:42,08/Aug/08 05:53,1.4.0,,,,,,,,,,1.5.0,,,camel-mail,,,,0,Many servers use 'username'@'servername' as a login name. Camel-mail doesn't allow this.,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-08-01 14:05:08.807,,,no_permission,,,,,,,,,,,,,83306,,,Mon Feb 16 05:51:49 UTC 2009,,,,,,,0|i01ebz:,6091,,,,,,,,,"01/Aug/08 14:05;magyardude;It does allow it. Try to upgrade to 1.4.
This works for me:

String smtpUri = 
			 ""smtp://mail.server.com?username=freeforall@server.com&password=freeforall"" +
			 ""&From=freeforall@server.com&To=otheruser@server.com"";
","01/Aug/08 14:26;avatah;I use camel 1.4 and javax.mail 1.4.1.
If I define camel endpoint with '@' in username there is an exception during sending mail:
org.springframework.mail.MailParseException: Could not parse mail; nested exception is javax.mail.internet.AddressException: Illegal character in domain in string ``Wojciech.Durczynski@server.com@smtp.server.com''
	at org.springframework.mail.javamail.JavaMailSenderImpl.send(JavaMailSenderImpl.java:363)
	at org.springframework.mail.javamail.JavaMailSenderImpl.send(JavaMailSenderImpl.java:346)
	at org.apache.camel.component.mail.MailProducer.process(MailProducer.java:46)
	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:75)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:57)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:155)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:91)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:101)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:85)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:57)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:39)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:41)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:66)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:47)
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:149)
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:86)
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:84)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBodyAndHeader(DefaultProducerTemplate.java:122)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBodyAndHeader(DefaultProducerTemplate.java:117)
	at com.comarch.p7samples.minis.password.PasswordPlugin$1.onSubmit(PasswordPlugin.java:92)
	at org.apache.wicket.markup.html.form.Form.delegateSubmit(Form.java:1355)
	at org.apache.wicket.markup.html.form.Form.onFormSubmitted(Form.java:810)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.wicket.RequestListenerInterface.invoke(RequestListenerInterface.java:183)
	at org.apache.wicket.request.target.component.listener.ListenerInterfaceRequestTarget.processEvents(ListenerInterfaceRequestTarget.java:73)
	at org.apache.wicket.request.AbstractRequestCycleProcessor.processEvents(AbstractRequestCycleProcessor.java:91)
	at com.comarch.p7.ui.core.application.BaseRequestCycleProcessor.processEvents(BaseRequestCycleProcessor.java:20)
	at org.apache.wicket.RequestCycle.processEventsAndRespond(RequestCycle.java:1171)
	at org.apache.wicket.RequestCycle.step(RequestCycle.java:1248)
	at org.apache.wicket.RequestCycle.steps(RequestCycle.java:1349)
	at org.apache.wicket.RequestCycle.request(RequestCycle.java:493)
	at org.apache.wicket.protocol.http.WicketFilter.doGet(WicketFilter.java:387)
	at org.apache.wicket.protocol.http.WicketServlet.doPost(WicketServlet.java:145)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:727)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:820)
	at com.comarch.p7.ui.webscope.ListenerServlet$FilterChainImpl.doFilter(ListenerServlet.java:206)
	at com.comarch.p7.ui.webscope.ListenerServlet.service(ListenerServlet.java:85)
	at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:487)
	at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:362)
	at org.ops4j.pax.web.service.internal.HttpServiceServletHandler.handle(HttpServiceServletHandler.java:66)
	at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181)
	at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:726)
	at org.ops4j.pax.web.service.internal.HttpServiceContext.handle(HttpServiceContext.java:107)
	at org.ops4j.pax.web.service.internal.JettyServerHandlerCollection.handle(JettyServerHandlerCollection.java:64)
	at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)
	at org.mortbay.jetty.Server.handle(Server.java:324)
	at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:505)
	at org.mortbay.jetty.HttpConnection$RequestHandler.content(HttpConnection.java:843)
	at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:648)
	at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:211)
	at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:380)
	at org.mortbay.jetty.bio.SocketConnector$Connection.run(SocketConnector.java:228)
	at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:488)
Caused by: javax.mail.internet.AddressException: Illegal character in domain in string ``Wojciech.Durczynski@server.com@smtp.server.com''
	at javax.mail.internet.InternetAddress.checkAddress(InternetAddress.java:947)
	at javax.mail.internet.InternetAddress.parse(InternetAddress.java:833)
	at javax.mail.internet.InternetAddress.parse(InternetAddress.java:569)
	at javax.mail.internet.InternetAddress.parse(InternetAddress.java:546)
	at javax.mail.internet.MimeMessage.setRecipients(MimeMessage.java:607)
	at org.apache.camel.component.mail.MailBinding.populateMailMessage(MailBinding.java:53)
	at org.apache.camel.component.mail.MailProducer$1.prepare(MailProducer.java:48)
	at org.springframework.mail.javamail.JavaMailSenderImpl.send(JavaMailSenderImpl.java:354)
	... 56 more","01/Aug/08 14:34;avatah;and in RouteBuilder I do simply:
.to(""smtp://smtp.server.com?password=myPass&username=Wojciech.Durczynski@server.com&debugMode=true"")","01/Aug/08 14:53;avatah;The problem probably exists because in class MailConfiguration there is a method:

    public void setUsername(String username) {
        this.username = username;
        if (!recipients.containsKey(Message.RecipientType.TO)) {
            // set default destination to username@host for backwards compatibility
            // can be overridden by URI parameters
            String address = username + ""@"" + host;
            recipients.put(Message.RecipientType.TO, address);
        }
    }

If ""To"" isn't a parameter in url, broken address is added to recipients map.
And my url doesn't have ""To"" parameter, because I always provide it as a header in a message.","04/Aug/08 12:13;davsclaus;Hi

Ah interesting, I would assume the TO header option is a quite common use-case. I do think Camel should support this as well.",06/Aug/08 05:06;davsclaus;Okay I got it now. Added a unit test that demonstrated the bug and now you can have @ in the username option.,"07/Aug/08 10:16;avatah;Sadly your improvement doesn't solve problem.

Look into this usecase:
endpoint: smtp://smtp.server.com?password=secret&username=user1@server.com
header: To=user2@server2.com

Then during sending mail:
In MailConfiguration.setUsername() recipients map doesn't have element ""To"", so 
    recipients.put(javax.mail.Message.RecipientType.TO, ""user1@server.com"");
is invoked

Later in MailBinding.populateMailMessage()
appendHeadersFromCamel() is invoked, which sets ""To"" recipients of message right (to user2@server2.com)
but in the same method just after this, is invoked:
        if(recipients.containsKey(javax.mail.Message.RecipientType.TO))
            mimeMessage.setRecipients(javax.mail.Message.RecipientType.TO, (String)recipients.get(javax.mail.Message.RecipientType.TO));

And this rewrites ""To"" recipients of message to these, which are set in recipients map. And that's ""user1@server.com"" only, which is wrong.

Because of this recipient of the mail doesn't receive message, but only sender gets it.

Why to bother with the following code and not remove it?:
        if(!recipients.containsKey(javax.mail.Message.RecipientType.TO))
        {
            String address = username;
            if(address.indexOf(""@"") == -1)
                address = (new StringBuilder()).append(address).append(""@"").append(host).toString();
            recipients.put(javax.mail.Message.RecipientType.TO, address);
        }
","07/Aug/08 10:47;davsclaus;Hi Wojciech

Yeah I was a little battle to try to fix it while staying 100% backwards compatible. I might as well take the heat and improve it so the *headers* always overrides whatever you have pre configured on the endpoint/URI. 

And the userinfo from the URI should not be set as TO but in a special holder then we are in a better situation to preserve the *headers* while populating the minemessage.

","07/Aug/08 18:28;davsclaus;Wojciech

I am thinking about the following
- configuration of recipients (to, from, bcc) is *either* pre configured only (etc. URI) *or* message headers only.

So if you have *none* To, CC or BCC in the message headers it will use the pre configured
If you have a To, CC and/or BCC in the message header camel will only use these and not any from the pre configuration.

So its like exclusive. Either pre configuration or headers (never mixed).

Some will use it with pre configuration to just send mails to the same all the time (eg alert mails)
Others as you need dynamic recipients and therefore use message headers.","08/Aug/08 05:50;davsclaus;Change of strategy.

Camel will first apply any headers from the message and set them as To, CC and BCC.
And then if any provided on the URI configuration they will *override* these settings.

This will support your use-case and let people without any headers configure camel to use the same To, CC and BCC from the URI configuration at all times.","08/Aug/08 05:53;davsclaus;Hi

Try my latest patch that is just committed.",08/Aug/08 05:54;davsclaus;Update wiki with the mail *overrule* strategy *TODO*,"11/Aug/08 11:42;avatah;Yes it works well now. But why have you changed your strategy? Headers should have greater priority then url parameters. Consider following use case:
somebody wants to define smtp endpoint with default recipient. If recipient is given in header, he receives mail. And if not, then default recipient receives it. 
With your current approach this use case is impossible to achieve. 
Maybe apply headers at the end of processing in MailBinding?","11/Aug/08 11:53;davsclaus;The short answer is that it will break existing behaviors in Camel 1.4 or older.

I also though that if you have any recipient informations in the headers what should Camel do?
a) only use headers 
b) only use pre configued (no - then dynamic recipients is not possible)
c) headers append to existing pre configured
d) headers override existing pre configured
e) pre configured override headers (reverse as option e)

What we have now is option (e). What you want is option (d). But what about option (c) isn't the the most correct and least surprised one to have?

I would like to change the behavior and if its not 100% backwards compatible then its okay anyway - we will write about it in the release notes.

Any thoughts?","11/Aug/08 14:57;avatah;Both (c) and (d) are better than (e). I don't know which one of them is better. 
When there is no To recipients in url, MailConfiguration adds sender as recipient. And what you surely need to avoid is sending mail to recipients declared in message headers AND to sender himself. There is danger of this behaviour in (c).
Maybe think about new parameter in url, something like overrideRecipientsInHeaders. And depending on it use (c) or (d) for particular endpoint.

","11/Aug/08 18:34;davsclaus;From Hadrian

To me it looks like d) is better than c) (and e) ).  I think headers explicitly express the expected behavior and that should not be altered by the pre-existing conf.  imho the pre-existing conf is there only for the case where explicit info is not present in the headers, constituting a default behaviour, but not a base to be added to.

my $0.02,
Hadrian
",11/Aug/08 18:36;davsclaus;I also think that d) is the best one and least surprise. Will create a sub task to implement it in Camel 1.5,16/Feb/09 05:51;davsclaus;Closing all 1.5.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ResolverUtil under OSGi error: Could not search jar file '/org/apache/camel/converter',CAMEL-774,12485911,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ceefour,ceefour,31/Jul/08 20:39,16/Feb/09 05:51,14/Mar/19 02:42,04/Aug/08 12:14,1.4.0,,,,,,,,,,1.5.0,,,camel-core,camel-stream,osgi,,0,"This is a sequel of CAMEL-577, which itself duplicated by CAMEL-558 and CAMEL-522. Probably related to CAMEL-636, CAMEL-693, and CAMEL-689.

First of all, to even get this to ""work"" requires my own bundle to have this manifest:
DynamicImport-Package: org.apache.camel.*

Failing to do so will result in more classloading errors.

Even so, it still fails with this:

[SpringOsgiExtenderThread-2] TRACE org.apache.camel.util.ResolverUtil - Testing for class org.apache.camel.converter.jaxp.XmlConverter matches criteria [annotated with @Converter]
[SpringOsgiExtenderThread-2] TRACE org.apache.camel.util.ResolverUtil - Found class: class org.apache.camel.converter.jaxp.XmlConverter in classloader: BundleDelegatingClassLoader for [org.elfattah.shell (org.elfattah.shell)]
[SpringOsgiExtenderThread-2] TRACE org.apache.camel.util.ResolverUtil - Testing for class org.apache.camel.converter.stream.StreamCacheConverter$StreamSourceCache matches criteria [annotated with @Converter]
[SpringOsgiExtenderThread-2] TRACE org.apache.camel.util.ResolverUtil - Testing for class org.apache.camel.converter.stream.StreamCacheConverter$InputStreamCache matches criteria [annotated with @Converter]
[SpringOsgiExtenderThread-2] TRACE org.apache.camel.util.ResolverUtil - Searching for: annotated with @Converter in package: org/apache/camel/converter using classloader: org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader
[SpringOsgiExtenderThread-2] TRACE org.apache.camel.util.ResolverUtil - It's not an osgi bundle classloader
[SpringOsgiExtenderThread-2] TRACE org.apache.camel.util.ResolverUtil - Getting resource URL for package: org/apache/camel/converter with classloader: org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader@1a5db4b
[SpringOsgiExtenderThread-2] TRACE org.apache.camel.util.ResolverUtil - URL from classloader: bundleresource://20/org/apache/camel/converter
[SpringOsgiExtenderThread-2] TRACE org.apache.camel.util.ResolverUtil - Decoded urlPath: /org/apache/camel/converter
[SpringOsgiExtenderThread-2] TRACE org.apache.camel.util.ResolverUtil - Scanning for classes in [/org/apache/camel/converter] matching criteria: annotated with @Converter
[SpringOsgiExtenderThread-2] DEBUG org.apache.camel.util.ResolverUtil - Loading from jar: /org/apache/camel/converter
[SpringOsgiExtenderThread-2] ERROR org.apache.camel.util.ResolverUtil - Could not search jar file '/org/apache/camel/converter' for classes matching criteria: annotated with @Converter due to an IOException: /org/apache/camel/converter (No such file or directory)
java.io.FileNotFoundException: /org/apache/camel/converter (No such file or directory)
	at java.io.FileInputStream.open(Native Method)
	at java.io.FileInputStream.<init>(FileInputStream.java:106)
	at org.apache.camel.util.ResolverUtil.loadImplementationsInJar(ResolverUtil.java:476)
	at org.apache.camel.util.ResolverUtil.find(ResolverUtil.java:362)
	at org.apache.camel.util.ResolverUtil.find(ResolverUtil.java:277)
	at org.apache.camel.util.ResolverUtil.findAnnotated(ResolverUtil.java:253)
	at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.load(AnnotationTypeConverterLoader.java:66)
	at org.apache.camel.impl.converter.DefaultTypeConverter.checkLoaded(DefaultTypeConverter.java:218)
	at org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:64)
	at org.apache.camel.util.IntrospectionSupport.convert(IntrospectionSupport.java:216)
	at org.apache.camel.util.IntrospectionSupport.setProperty(IntrospectionSupport.java:194)
	at org.apache.camel.util.IntrospectionSupport.setProperties(IntrospectionSupport.java:167)
	at org.apache.camel.impl.DefaultComponent.setProperties(DefaultComponent.java:187)
	at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:89)
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:270)
	at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:52)
	at org.apache.camel.model.RouteType.resolveEndpoint(RouteType.java:100)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:102)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:108)
	at org.apache.camel.model.FromType.resolveEndpoint(FromType.java:73)
	at org.apache.camel.impl.DefaultRouteContext.getEndpoint(DefaultRouteContext.java:77)
	at org.apache.camel.model.RouteType.addRoutes(RouteType.java:214)
	at org.apache.camel.model.RouteType.addRoutes(RouteType.java:90)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:537)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:529)
	at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:149)
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:47)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:103)
	at org.springframework.context.event.SimpleApplicationEventMulticaster$1.run(SimpleApplicationEventMulticaster.java:78)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:49)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:76)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:275)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:737)
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.finishRefresh(AbstractDelegatedExecutionApplicationContext.java:306)
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.completeRefresh(AbstractDelegatedExecutionApplicationContext.java:279)
	at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor$CompleteRefreshTask.run(DependencyWaiterApplicationContextExecutor.java:145)
	at java.lang.Thread.run(Thread.java:619)
[SpringOsgiExtenderThread-2] DEBUG org.apache.camel.util.ResolverUtil - Found: [class org.apache.camel.converter.ObjectConverter, class org.apache.camel.converter.jaxp.DomConverter, class org.apache.camel.converter.IOConverter, class org.apache.camel.converter.jaxp.StaxConverter, class org.apache.camel.converter.jaxp.XmlConverter, class org.apache.camel.converter.stream.StreamCacheConverter, class org.apache.camel.converter.jaxp.StreamSourceConverter, class org.apache.camel.converter.NIOConverter, class org.apache.camel.converter.CollectionConverter, class org.apache.camel.converter.CamelConverter]

The project that demonstrates this error is open source, check it out here:
http://svn.assembla.com/svn/elfattah/trunk

do mvn install on elfattah-api and elfattah-shell

Then go to elfattah-shell and:

mvn pax:provision","Linux/Ubuntu, Maven 2.0.9, Camel 1.4.0, Spring 2.5.5, Spring-DM 1.1.0",,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-08-01 05:43:45.047,,,no_permission,,,,,,,,,,,,,83307,,,Mon Feb 16 05:51:48 UTC 2009,,,,,,,0|i01ebb:,6088,,,,,,,,,"31/Jul/08 20:46;ceefour;FYI, the bundle #20 mentioned by the error logger is camel-core:

osgi> b 20
initial@reference:file:org.apache.camel.camel-core_1.4.0.jar/ [20]
  Id=20, Status=ACTIVE      Data Root=/home/ceefour/project/elfattah/elfattah-shell/runner/equinox/org.eclipse.osgi/bundles/20/data
  No registered services.
  No services in use.
  Exported packages
    org.apache.camel.model.loadbalancer; version=""1.4.0""[exported]
    org.apache.camel.component.dataset; version=""1.4.0""[exported]
    org.apache.camel.language.simple; version=""1.4.0""[exported]
    org.apache.camel.processor.loadbalancer; version=""1.4.0""[exported]
    org.apache.camel.processor.aggregate; version=""1.4.0""[exported]
    org.apache.camel.component.log; version=""1.4.0""[exported]
    org.apache.camel.converter.jaxp; version=""1.4.0""[exported]
    org.apache.camel.processor.resequencer; version=""1.4.0""[exported]
    org.apache.camel.processor.interceptor; version=""1.4.0""[exported]
    org.apache.camel.impl.converter; version=""1.4.0""[exported]
    org.apache.camel.management; version=""1.4.0""[exported]
    org.apache.camel.util.jndi; version=""1.4.0""[exported]
    org.apache.camel.util; version=""1.4.0""[exported]
    org.apache.camel.impl; version=""1.4.0""[exported]
    org.apache.camel.builder.xml; version=""1.4.0""[exported]
    org.apache.camel.component.list; version=""1.4.0""[exported]
    org.apache.camel.component.direct; version=""1.4.0""[exported]
    org.apache.camel.component.seda; version=""1.4.0""[exported]
    org.apache.camel.component.ref; version=""1.4.0""[exported]
    org.apache.camel.component.file; version=""1.4.0""[exported]
    org.apache.camel.converter; version=""1.4.0""[exported]
    org.apache.camel.language.bean; version=""1.4.0""[exported]
    org.apache.camel.model.config; version=""1.4.0""[exported]
    org.apache.camel.model.dataformat; version=""1.4.0""[exported]
    org.apache.camel.processor; version=""1.4.0""[exported]
    org.apache.camel.component.mock; version=""1.4.0""[exported]
    org.apache.camel.component.timer; version=""1.4.0""[exported]
    org.apache.camel.component.vm; version=""1.4.0""[exported]
    org.apache.camel.model.language; version=""1.4.0""[exported]
    org.apache.camel.model; version=""1.4.0""[exported]
    org.apache.camel.converter.stream; version=""1.4.0""[exported]
    org.apache.camel.builder; version=""1.4.0""[exported]
    org.apache.camel.component.jmx; version=""1.4.0""[exported]
    org.apache.camel.spi; version=""1.4.0""[exported]
    org.apache.camel; version=""1.4.0""[exported]
    org.apache.camel.component.bean; version=""1.4.0""[exported]
    org.apache.camel.language; version=""1.4.0""[exported]
    org.apache.camel.view; version=""1.4.0""[exported]
    org.apache.camel.processor.validation; version=""1.4.0""[exported]
    org.apache.camel.processor.idempotent; version=""1.4.0""[exported]
    org.apache.camel.processor.exceptionpolicy; version=""1.4.0""[exported]
    org.apache.camel.component.file.strategy; version=""1.4.0""[exported]
  Imported packages
    javax.activation; version=""0.0.0""<System Bundle [0]>
    javax.management; version=""0.0.0""<System Bundle [0]>
    javax.management.modelmbean; version=""0.0.0""<System Bundle [0]>
    javax.management.monitor; version=""0.0.0""<System Bundle [0]>
    javax.management.remote; version=""0.0.0""<System Bundle [0]>
    javax.naming; version=""0.0.0""<System Bundle [0]>
    javax.naming.spi; version=""0.0.0""<System Bundle [0]>
    javax.xml.bind.annotation; version=""0.0.0""<System Bundle [0]>
    javax.xml.namespace; version=""0.0.0""<System Bundle [0]>
    javax.xml.parsers; version=""0.0.0""<System Bundle [0]>
    javax.xml.stream; version=""0.0.0""<System Bundle [0]>
    javax.xml.transform; version=""0.0.0""<System Bundle [0]>
    javax.xml.transform.dom; version=""0.0.0""<System Bundle [0]>
    javax.xml.transform.sax; version=""0.0.0""<System Bundle [0]>
    javax.xml.transform.stream; version=""0.0.0""<System Bundle [0]>
    javax.xml.validation; version=""0.0.0""<System Bundle [0]>
    javax.xml.xpath; version=""0.0.0""<System Bundle [0]>
    org.apache.commons.logging; version=""1.1.1""<initial@reference:file:org.ops4j.pax.logging.pax-logging-api_1.1.1.jar/ [12]>
    org.osgi.framework; version=""1.4.0""<System Bundle [0]>
    org.springframework.jmx.export.annotation; version=""2.5.5""<initial@reference:file:org.springframework.bundle.spring.context_2.5.5.jar/ [15]>
    org.springframework.jmx.export.assembler; version=""2.5.5""<initial@reference:file:org.springframework.bundle.spring.context_2.5.5.jar/ [15]>
    org.springframework.jmx.export.metadata; version=""2.5.5""<initial@reference:file:org.springframework.bundle.spring.context_2.5.5.jar/ [15]>
    org.w3c.dom; version=""0.0.0""<System Bundle [0]>
    org.xml.sax; version=""0.0.0""<System Bundle [0]>
  No fragment bundles
  Named class space
    org.apache.camel.camel-core; bundle-version=""1.4.0""[provided]
  No required bundles
","31/Jul/08 20:51;ceefour;To assist you and to make sure that future revisions of our project don't mask the bug, I've tagged it dedicated to this bug:

http://svn.assembla.com/svn/elfattah/tags/camel-774-bug","01/Aug/08 05:43;davsclaus;Hi Hendry

Thanks for the detailed error report. The bug is definitely that Camel fails to identify that its is a *bundle* loader
{code}
[SpringOsgiExtenderThread-2] TRACE org.apache.camel.util.ResolverUtil - It's not an osgi bundle classloader
{code}","01/Aug/08 06:00;ceefour;Thanks Claus. I hope this can help getting it resolved. Let me know if it is, even a snapshot will do very well for us.

Another question, is below ""DynamicImport-Package workaround"" supposed to be bug? Or it's just the way Camel needs to be configured on OSGi? If so it should be mentioned somewhere in the docs... not everybody knows that DynamicImport-Package even exists.. (even some OSGi programmers)

-----

First of all, to even get this to ""work"" requires my own bundle to have this manifest:
DynamicImport-Package: org.apache.camel.*

Failing to do so will result in more classloading errors.","01/Aug/08 06:29;davsclaus;Hi Hendry

I got your project and is running it with jdk6 update 7 (had to update from u3, not using java6 normally with camel development).
I can reproduce the bug on my laptop.

It actually pick ups the converters with the real bundle classloader, but since Camel will try several classloaders it gets to this one as well that we are not supposed to use.
I will work on a patch.

About the dynamic stuff. I am not an OSGi expert either but we get the attentions of the good people that know much more about this stuff.","01/Aug/08 06:40;davsclaus;Okay got it working now with a 1.5-SNAPSHOT.

I will improve the fix in camel-core and commit it later. I am afraid you need to use 1.5 snapshots but they are published on apache snapshot repos.

{code}
[seda:shellIn thread:1] DEBUG org.apache.camel.impl.ProducerCache - >>>> Endpoint[seda:shellOut] Exchange[Message: Thank you for saying 'Hej med dig']
[seda:shellIn thread:1] DEBUG org.apache.camel.impl.ProducerCache - >>>> Endpoint[seda:shellOut] Exchange[Message: Seriously, this is good...!]
{code}","01/Aug/08 07:20;davsclaus;Hendry

I have commited a patch in camel 1.5 snapshot that should work - at least on my laptop.

You can try it out by switching from 1.4.0 to 1.5-SNAPSHOT for camel-version. You can get the jars from apache snapshot maven repo
Documentation is here:
http://activemq.apache.org/camel/download.html

Wait 2-3 hours or more before the CI server have build and published the jars.",01/Aug/08 07:20;davsclaus;And please let us know if it works for you.,"01/Aug/08 08:46;ceefour;Thanks Claus I'll check it out

Regarding DynamicImport-Package for me it's ""OK"" bcuz I also do it with Swing, however maybe there are better alternative

For now the workaround is that, so should put it somewhere in documentation especially the ones relating to OSGi - Camel relationship (as Camel have been touted as OSGi friendly since 1.2 esp. by James)","01/Aug/08 11:11;ceefour;Thanks, working fine:

http://trac.assembla.com/elfattah/changeset/26

Changeset 26

Timestamp:
    08/01/08 11:09:03 (less than one hour ago)
Author:
    ceefour
Message:

    Now using Apache Camel 1.5-SNAPSHOT, which fixed an OSGi problem. See: https://issues.apache.org/activemq/browse/CAMEL-774 . Thank you Claus Ibsen for helping me in this.

Files:

        *          trunk/elfattah-parent/pom.xml (modified) (2 diffs)
        *          trunk/elfattah-shell/debug.args (added)
        *          trunk/elfattah-shell/pom.xml (modified) (1 diff)
        *          trunk/elfattah-shell/src/main/java/org/elfattah/shell/ShellRouteBuilder.java (modified) (1 diff)

",16/Feb/09 05:51;davsclaus;Closing all 1.5.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Trace does not look at camel.trace property,CAMEL-773,12485575,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,janstey,janstey,30/Jul/08 15:06,16/Feb/09 05:51,14/Mar/19 02:42,30/Jul/08 15:33,1.4.0,,,,,,,,,,1.5.0,,,camel-core,,,,0,This has a simple fix - it was a spelling error :),,,,,,,,,,,,,,,,,30/Jul/08 15:06;janstey;ASF.LICENSE.NOT.GRANTED--camelTrace.patch;https://issues.apache.org/jira/secure/attachment/12462615/ASF.LICENSE.NOT.GRANTED--camelTrace.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-07-30 15:33:39.686,,,no_permission,,,,,,,,,,,,,83308,,,Mon Feb 16 05:51:48 UTC 2009,,,Patch Available,,,,0|i01eb3:,6087,,,,,,,,,30/Jul/08 15:33;hadrian;Patch applied with many thanks!,16/Feb/09 05:51;davsclaus;Closing all 1.5.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
InstrumentationProcessor should catch Throwable,CAMEL-765,12485555,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,wtam@iona.com,wtam@iona.com,29/Jul/08 04:02,29/Jul/08 13:15,14/Mar/19 02:42,29/Jul/08 07:03,1.4.0,,,,,,,,,,1.5.0,,,camel-core,,,,0,"The InstrumentationProcessor currently only catches exception and sets it in the exception.   Runtime errors and throwables can be thrown all the way out of the DeadLetterChannel's process method, out of the reach of exception policy.",,,,,,,,,,,,,,,,,29/Jul/08 04:03;wtam@iona.com;exception_with_mgt.patch;https://issues.apache.org/jira/secure/attachment/12462655/exception_with_mgt.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-07-29 07:03:03.871,,,no_permission,,,,,,,,,,,,,83309,,,Tue Jul 29 07:03:03 UTC 2008,,,Patch Available,,,,0|i01e9b:,6079,,,,,,,,,"29/Jul/08 07:03;njiang;Patch applied with thanks to William.

 http://svn.apache.org/viewvc?rev=680633&view=rev",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CamelContext's setErrorHandler is not effect when the jmx agent is disabled,CAMEL-763,12485526,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,28/Jul/08 04:07,16/Feb/09 05:51,14/Mar/19 02:42,28/Jul/08 08:10,1.4.0,,,,,,,,,,1.5.0,,,camel-core,,,,0,"The example applications from Camel 1.4 source distribution work correctly on my machine.  After comparing the sample Spring XML configuration and my Spring configuration, I noticed there is no jmxAgent element in the sample XML where my configuration has this element.  The problem I noticed was that when the disabled attribute of the jmxAgent element is set to true, the redelivery policy does not work.   

http://www.nabble.com/DeadLetterChannel-Configuration-Camel-1.4-td18622356s22882.html#a18622356",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-02-16 05:51:47.998,,,no_permission,,,,,,,,,,,,,83310,,,Mon Feb 16 05:51:47 UTC 2009,,,,,,,0|i01e8v:,6077,,,,,,,,,28/Jul/08 08:10;njiang;http://svn.apache.org/viewvc?rev=680249&view=rev,16/Feb/09 05:51;davsclaus;Closing all 1.5.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SFTP Producer - Doesn't handle folder already exists when trying to create the remote folder,CAMEL-758,12485659,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,25/Jul/08 07:39,23/Oct/08 04:37,14/Mar/19 02:42,31/Jul/08 18:07,1.4.0,,,,,,,,,,1.5.0,,,camel-ftp,,,,0,"The SFTP (the secure) has this bug that it doesn't check if the folder already exsits before it tries to create the remote folder.

See nabble:
http://www.nabble.com/SftpProducer-bug-td18640519s22882.html

Bela the reported want to contribute a patch later, or he will be able to test it.",,,,,,,,,,,,,,,,,28/Jul/08 00:04;magyardude;patchfile.txt;https://issues.apache.org/jira/secure/attachment/12462614/patchfile.txt,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-07-28 00:01:53.577,,,no_permission,,,,,,,,,,,,,83311,,,Thu Oct 23 04:37:12 UTC 2008,,,,,,,0|i01e7r:,6072,,,,,,,,,"25/Jul/08 07:44;davsclaus;Remember to check the regular FTP producer as well, it could have similar bug.","26/Jul/08 11:15;davsclaus;A fix is committed
http://svn.apache.org/viewvc?view=rev&revision=679979

Bela should test it on SFTP.",28/Jul/08 00:01;magyardude;It works only if the last folder is missing. It seems the sftp servers don't create intrermediate folders for you. At least my server doesn't (out of the box Fedora 7). So I think we have to bring back the code to create the folders on by one.,28/Jul/08 00:04;magyardude;SftpProducer patch to fix the folder creation issue.,28/Jul/08 04:15;davsclaus;Applied patch. Thanks Bela.,28/Jul/08 04:15;davsclaus;Just for the record. I made the same code changes for the regular FTP producer as well.,23/Oct/08 04:37;davsclaus;Closing 1.5 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AMQP component can't send an ObjectMessage,CAMEL-756,12486803,12485991,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,janstey,janstey,24/Jul/08 18:09,21/Nov/09 11:57,14/Mar/19 02:42,10/Jun/09 08:12,1.4.0,1.5.0,,,,,,,,,2.0-M2,,,,,,,0,Sending a TextMessage and BytesMessage work fine but when you try to send a Serializable object it gets lost somehow... see the testJmsRouteWithObjectMessage test in http://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-amqp/src/test/java/org/apache/camel/component/amqp/AMQPRouteTest.java to see what happens.,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-07-26 09:00:52.831,,,no_permission,,,,,,,,,,,,,83312,,,Sat Nov 21 11:57:54 UTC 2009,,,,,,,0|i01e7b:,6070,,,,,,,,,"25/Jul/08 17:58;janstey;I tried the same test out on ActiveMQ and it works fine. This maybe an issue with Qpid itself or maybe how camel-jms interacts with Qpid.

Since sending a byte array works, a workaround for sending objects could be to get the AMQP component to serialize the object itself before sending it along to Qpid.

If there are no objections, I could submit a patch for this.",26/Jul/08 09:00;davsclaus;+1,"28/Jul/08 16:46;janstey;After further inspection, this is a known Qpid bug. See: https://issues.apache.org/jira/browse/QPID-1092. The fix has been merged already so the next Qpid release should work.

As for the workaround I mentioned, it wouldn't work as well as I thought. By not using Qpid's ObjectMessage (and just using BytesMessage) Camel would have no way of knowing it had to auto deserialize the byte array back to an Object. This would actually be more confusing to the user IMO.

I guess we'll just have to wait until Qpid gets released again?

","29/Jul/08 07:20;jstrachan;Yeah - lets just wait for qpid to get stable & working
",29/Jul/08 16:40;davsclaus;Damm they have approx 250 fixed out of 400 and its just M3 to M4. There is a long way ;),05/Sep/08 14:36;janstey;FYI M3 has just passed the vote so will be available soonish. The issue in Qpid has been fixed in M3 so sending ObjectMessages should be OK... a quick test didn't work for me but maybe after a little more investigation this can be solved for Camel 1.5.,"06/Sep/08 16:32;davsclaus;Jon could you try to upgrade the dep on mina-core to the the same from the uber pom = 1.1.7

We have a conflict here:
http://activemq.apache.org/camel/maven/dependency-convergence.html","09/Sep/08 16:45;janstey;Unfortunately, Qpid requires MINA 1.0.1... it blows up otherwise.  ",25/Sep/08 16:39;janstey;M3 still isn't released. I'm moving this one to Camel 2.0,02/Oct/08 07:23;davsclaus;Jonathan. I just got a blog news that M3 has been released.,02/Oct/08 11:17;janstey;Cool stuff. Doesn't seem to be in the incubating maven repo yet but I'm sure it eventually will be.,"07/Oct/08 12:27;janstey;The Qpid project has apparently abandoned Maven altogether! I guess we could always put the qpid artifacts in a maven repo ourselves (perhaps the ServiceMix repo)?  

See: http://aidan-skinner.livejournal.com/229584.html","16/Nov/08 08:06;davsclaus;Jon we might need to let gertv add the M3 on the servicemix repo so we can upgrade

The M3 version is here:
http://www.apache.org/dist/incubator/qpid/M3-incubating/","16/Nov/08 13:17;janstey;Yeah, this seems to be our only option. I was hoping the Qpid guys would use the script I made for them to do the maven deploy... doesn't look like they've used it yet :(

Gert, would be great if you could add Qpid M3 to the ServiceMix repo. ","31/Mar/09 12:56;davsclaus;Jonathan they have released M4

I can upload .jars to fusesource repo, so if the M4 or later is not in a central maven repo, we should upload to our own and get this done in 2.0
http://qpid.apache.org/download.html
","10/Jun/09 08:12;davsclaus;upgraded to qpid v0.5.0 and the object unit test now works.

trunk: 783248.",21/Nov/09 11:57;davsclaus;Closing all 2.0M2 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AMQP Tests are disabled,CAMEL-755,12485991,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,janstey,janstey,24/Jul/08 18:02,16/Feb/09 05:51,14/Mar/19 02:42,24/Jul/08 18:45,1.4.0,,,,,,,,,,1.5.0,,,,,,,0,"The AMQP tests are currently disabled. Adding an older version of MINA (than Camel uses) & commons lang to the classpath got the tests passing except for ObjectMessage type test.

Sending a TextMessage and BytesMessage work fine so I'm opening up a separate JIRA for the ObjectMessage issue.",,,,,,,,,,,,,,,,,24/Jul/08 18:02;janstey;ASF.LICENSE.NOT.GRANTED--enableAmqpTests.patch;https://issues.apache.org/jira/secure/attachment/12462512/ASF.LICENSE.NOT.GRANTED--enableAmqpTests.patch,24/Jul/08 18:12;janstey;enableAmqpTests.patch;https://issues.apache.org/jira/secure/attachment/12462612/enableAmqpTests.patch,,,,2.0,,,,,,,,,,,,,,,,,,,2008-07-24 18:45:26.186,,,no_permission,,,,,,,,,,,,,83313,,,Mon Feb 16 05:51:47 UTC 2009,,,Patch Available,,,,0|i01e73:,6069,,,,,,,,,24/Jul/08 18:12;janstey;Granting Apache license this time around...,24/Jul/08 18:45;davsclaus;Applied patch with thanks.,16/Feb/09 05:51;davsclaus;Closing all 1.5.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
xpath expression with $header and the header doesnt exist on the in message results in NPE,CAMEL-747,12485699,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,23/Jul/08 19:17,23/Oct/08 04:37,14/Mar/19 02:42,23/Jul/08 19:45,1.4.0,,,,,,,,,,1.5.0,,,camel-core,,,,0,"Using the $headerkey shorthand for xpath expression throws a NPE if the headerkey doesn't exists on the in message.

We should try to find a better workaround for key doesn't exists. The NPE is thrown by SUN in their xpath engine.

Check nabble:
http://www.nabble.com/Camel-XPath-and-no-variables-found-in-MessageVariableResolver---What-should-Camel-do--td18603960s22882.html",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,83315,,,Thu Oct 23 04:37:12 UTC 2008,,,,,,,0|i01e53:,6060,,,,,,,,,"23/Jul/08 19:45;davsclaus;Fixed in trunk, rev 679170",23/Oct/08 04:37;davsclaus;Closing 1.5 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
xstream produces empty body,CAMEL-744,12485000,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,,vchekan,vchekan,22/Jul/08 18:52,23/Oct/08 19:51,14/Mar/19 02:42,25/Jul/08 06:28,1.4.0,,,,,,,,,,1.5.0,,,camel-stream,,,,0,"1. Set -Dfile.encoding=Cp1252

2. Set tracing ON.

3. Run the code:
====================================================
from(""timer://kickoff?period=10000"").
		process(new Processor() {
			public void process(Exchange exchange) throws Exception {
				ArrayList<HashMap<String, Object>> rows = new ArrayList<HashMap<String, Object>>();
				HashMap<String, Object> row = new HashMap<String, Object>();
				row.put(""column1"", ""Value 1"");
				rows.add(row);
				exchange.getOut().setBody(rows);
			}
		}).
		marshal().xstream().
		to(""mock:result"");
====================================================

3. Observe output:
====================================================
Jul 22, 2008 11:35:28 AM org.apache.camel.processor.Logger process
INFO: ID-vchekan/4855-1216751728436/1-0 -> interceptor1 Interceptor[Delegate(Pipeline[DeadLetterChannel[Delegate(TraceInterceptor[Processor[enviance.org.test.MessageBrokerPackage$1@13e0aba]]), RecipientList[log:org.apache.camel.DeadLetterChannel?level=error], RedeliveryPolicy[maximumRedeliveries=6]], DeadLetterChannel[Delegate(TraceInterceptor[Marshal[org.apache.camel.model.dataformat.XStreamDataFormat@3257b8]]), RecipientList[log:org.apache.camel.DeadLetterChannel?level=error], RedeliveryPolicy[maximumRedeliveries=6]], DeadLetterChannel[Delegate(TraceInterceptor[To[mock:result]]), RecipientList[log:org.apache.camel.DeadLetterChannel?level=error], RedeliveryPolicy[maximumRedeliveries=6]]])] InOnly Properties:{org.apache.camel.timer.time=null, org.apache.camel.timer.period=10000, org.apache.camel.timer.name=kickoff} Headers:{} BodyType:null Body:Message: null
Jul 22, 2008 11:35:28 AM org.apache.camel.processor.Logger process
INFO: ID-vchekan/4855-1216751728436/1-0 -> processor1 Processor[enviance.org.test.MessageBrokerPackage$1@13e0aba] InOnly Properties:{org.apache.camel.timer.time=null, org.apache.camel.timer.period=10000, CamelCauseException=null, org.apache.camel.timer.name=kickoff} Headers:{} BodyType:null Body:Message: null
Jul 22, 2008 11:35:28 AM org.apache.camel.processor.Logger process
INFO: ID-vchekan/4855-1216751728436/1-0 -> marshal1 Marshal[org.apache.camel.model.dataformat.XStreamDataFormat@3257b8] InOnly Properties:{org.apache.camel.timer.time=null, org.apache.camel.timer.period=10000, CamelCauseException=null, org.apache.camel.timer.name=kickoff} Headers:{} BodyType:java.util.ArrayList Body:[{column1=Value 1}]
Jul 22, 2008 11:35:29 AM org.apache.camel.processor.Logger process
INFO: ID-vchekan/4855-1216751728436/1-0 -> to1 To[mock:result] InOnly Properties:{org.apache.camel.timer.time=null, org.apache.camel.timer.period=10000, CamelCauseException=null, org.apache.camel.timer.name=kickoff} Headers:{} BodyType:[B Body:
====================================================

As you see xstream returms an empty array (the end of the last line).

4. Change encoding in step 1 to -Dfile.encoding=UTF-8 and re-run the application.
====================================================
Jul 22, 2008 11:40:18 AM org.apache.camel.processor.Logger process
INFO: ID-vchekan/4875-1216752017927/1-0 -> interceptor1 Interceptor[Delegate(Pipeline[DeadLetterChannel[Delegate(TraceInterceptor[Processor[enviance.org.test.MessageBrokerPackage$1@13e0aba]]), RecipientList[log:org.apache.camel.DeadLetterChannel?level=error], RedeliveryPolicy[maximumRedeliveries=6]], DeadLetterChannel[Delegate(TraceInterceptor[Marshal[org.apache.camel.model.dataformat.XStreamDataFormat@3257b8]]), RecipientList[log:org.apache.camel.DeadLetterChannel?level=error], RedeliveryPolicy[maximumRedeliveries=6]], DeadLetterChannel[Delegate(TraceInterceptor[To[mock:result]]), RecipientList[log:org.apache.camel.DeadLetterChannel?level=error], RedeliveryPolicy[maximumRedeliveries=6]]])] InOnly Properties:{org.apache.camel.timer.time=null, org.apache.camel.timer.period=10000, org.apache.camel.timer.name=kickoff} Headers:{} BodyType:null Body:Message: null
Jul 22, 2008 11:40:18 AM org.apache.camel.processor.Logger process
INFO: ID-vchekan/4875-1216752017927/1-0 -> processor1 Processor[enviance.org.test.MessageBrokerPackage$1@13e0aba] InOnly Properties:{org.apache.camel.timer.time=null, org.apache.camel.timer.period=10000, CamelCauseException=null, org.apache.camel.timer.name=kickoff} Headers:{} BodyType:null Body:Message: null
Jul 22, 2008 11:40:18 AM org.apache.camel.processor.Logger process
INFO: ID-vchekan/4875-1216752017927/1-0 -> marshal1 Marshal[org.apache.camel.model.dataformat.XStreamDataFormat@3257b8] InOnly Properties:{org.apache.camel.timer.time=null, org.apache.camel.timer.period=10000, CamelCauseException=null, org.apache.camel.timer.name=kickoff} Headers:{} BodyType:java.util.ArrayList Body:[{column1=Value 1}]
Jul 22, 2008 11:40:18 AM org.apache.camel.processor.Logger process
INFO: ID-vchekan/4875-1216752017927/1-0 -> to1 To[mock:result] InOnly Properties:{org.apache.camel.timer.time=null, org.apache.camel.timer.period=10000, CamelCauseException=null, org.apache.camel.timer.name=kickoff} Headers:{} BodyType:[B Body:<?xml version=""1.0"" ?><list><map><entry><string>column1</string><string>Value 1</string></entry></map></list>
====================================================

You see xml now.

I think it is a bug when xstream component silently refuses to work by producing empty output. It should either take into account configured encoding when producing output or explicitly refuse to work if encoding is ""wrong"" (throw an exception explaining the reasons of error).

Fixing this error is important because it affects at least 2 windows environments: Eclipse and ActiveMQ.
By default Eclipse on Windows has Cp1252 encoding set.
I do not know what encoding is set in ActiveMQ for Windows but it does not work unless activemq.bat is edited and encoding is explicitly set there.",Windows Server 2003; jdk1.6.0_06 ,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-07-24 05:59:48.615,,,no_permission,,,,,,,,,,,,,83316,,,Fri Jul 25 06:29:55 UTC 2008,,,,,,,0|i01e4f:,6057,,,,,,,,,"24/Jul/08 05:59;davsclaus;Vadim I have tried to reproduce the bug but failed. I have added a unit test to camel-xstream component: MarshalListTest

I have also upgraded the xstream .jars in the pom.xml to newer releases. So could you try it out with the 1.5-SNAPSHOT version?","25/Jul/08 05:03;vchekan;This is getting interesting Claus.
I've upgraded to trunk and I still can reproduce the issue.
In my output in eclipse there is no encoding in xml. But I get it in the test. And maven tests pass on my box.
So now I have 3 combinations: no body at all, xml without encoding and xml with encoding 8)
I keep working on it.","25/Jul/08 06:28;vchekan;Claus, looks like upgrade to xstream 1.3 solved the problem. After I refreshed my eclipse project and made sure that xstream-1.3.jar is loaded I have xml output with explicit encoding whichever file.encofing I set.
You can close the issue. Thanks!",25/Jul/08 06:29;vchekan;Actually I can close it :),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CamelConduit's should check the TargetReference when create its instance,CAMEL-741,12485976,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,22/Jul/08 10:08,16/Feb/09 05:51,14/Mar/19 02:42,24/Jul/08 03:12,1.3.0,,,,,,,,,,1.5.0,,,camel-cxf,,,,0,"CAMEL-726 shows a ws-address error when using Camel transport for CXF.
After running the code , I found there is no To address tag  generated in the soap header. It was caused by the CamelConduit can set right targe reference.

",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-02-16 05:51:47.736,,,no_permission,,,,,,,,,,,,,83168,,,Mon Feb 16 05:51:47 UTC 2009,,,,,,,0|i01e3r:,6054,,,,,,,,,24/Jul/08 03:12;njiang;http://svn.apache.org/viewvc?rev=678732&view=rev,16/Feb/09 05:51;davsclaus;Closing all 1.5.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"After the downloading process, the layout of the remote file system doesn't match the local's one",CAMEL-738,12485925,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,iamryadh,iamryadh,20/Jul/08 01:50,16/Feb/09 05:51,14/Mar/19 02:42,20/Jul/08 02:52,1.3.0,1.4.0,,,,,,,,,1.5.0,,,camel-ftp,,,,0,"When downloading a directory with a complex layout (mutli level directory), the downloaded files do not reflect the local one
more info here http://www.nabble.com/FTP-component%3A-Possible-bug-td18540318s22882.html",,,,,,,,,,,,,,,,,20/Jul/08 02:04;iamryadh;FromFtpToBinaryFilesTest.java;https://issues.apache.org/jira/secure/attachment/12462511/FromFtpToBinaryFilesTest.java,20/Jul/08 02:02;iamryadh;FtpConsumer.patch;https://issues.apache.org/jira/secure/attachment/12462673/FtpConsumer.patch,,,,2.0,,,,,,,,,,,,,,,,,,,2008-07-20 02:52:45.429,,,no_permission,,,,,,,,,,,,,83169,,,Mon Feb 16 05:51:47 UTC 2009,,,Patch Available,,,,0|i01e33:,6051,,,,,,,,,20/Jul/08 02:02;iamryadh;The patch also contains the unit test.,20/Jul/08 02:04;iamryadh;license granted to ASF,"20/Jul/08 02:52;njiang;Patch applied with thanks to Ryadh.

http://svn.apache.org/viewvc?rev=678246&view=rev",20/Jul/08 06:48;davsclaus;Just for the note: the SFTP part has the same issue then,"20/Jul/08 06:52;davsclaus;Comitted the fix for the SFTP part, and the failing test on Bamboo due to clash with port number. Remember to use a new number for each test.",20/Jul/08 06:54;iamryadh;note taken regarding the port number.,"20/Jul/08 07:10;davsclaus;Ryadh. Oh the port number issue is only surfaced on the Bamboo CI server. Running mvn test locally doesn't really show this issue. So this issue has bitten us from time to time ;)

BTW: Thanks for taking a good look at the FTP component and finding the issues it has and fixing them as well. This is really great.
I have added a new improved unit test that uses 2 folders and different logo files. Works correctly now.","20/Jul/08 07:33;iamryadh;That's a pity, thought that jsch would cut it.
You welcome, I'll try to provide help as much as I can ;)",16/Feb/09 05:51;davsclaus;Closing all 1.5.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"When getContext().addInterceptorStrategy(new Tracer());  is added in a RouteBuilder class, then the timer component does not work",CAMEL-737,12485956,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,cmoulliard,cmoulliard,18/Jul/08 13:01,16/Feb/09 05:51,14/Mar/19 02:42,18/Jul/08 18:26,1.4.0,,,,,,,,,,1.5.0,,,,,,,0,"When 

getContext().addInterceptorStrategy(new Tracer());

is added in a RouteBuilder Class, then the timer component does not start.

e.g. 

public class RouteBuilder extends RouteBuilder {

    getContext().addInterceptorStrategy(new Tracer());

    public void configure() {

        from(""timer://export"")
        .to(""bean:myBean"");
    }
}",,,,,,,,,,,,,,,,,18/Jul/08 16:13;wtam@iona.com;Camel-737.patch;https://issues.apache.org/jira/secure/attachment/12462613/Camel-737.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-07-18 13:12:24.28,,,no_permission,,,,,,,,,,,,,83317,,,Mon Feb 16 05:51:47 UTC 2009,,,,,,,0|i01e2v:,6050,,,,,,,,,18/Jul/08 13:12;davsclaus;Moving to Camel 1.5,18/Jul/08 14:49;wtam@iona.com;let me take a look.,"18/Jul/08 15:43;wtam@iona.com;It was caused by NPE thrown by TraceFormatter

java.lang.NullPointerException
	at org.apache.camel.processor.interceptor.TraceFormatter.getBodyTypeAsString(TraceFormatter.java:124)
	at org.apache.camel.processor.interceptor.TraceFormatter.format(TraceFormatter.java:46)
	at org.apache.camel.processor.interceptor.TraceInterceptor.format(TraceInterceptor.java:68)
	at org.apache.camel.processor.Logger.logMessage(Logger.java:218)
	at org.apache.camel.processor.Logger.process(Logger.java:125)
	at org.apache.camel.processor.interceptor.TraceInterceptor.logException(TraceInterceptor.java:128)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:59)
	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:155)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:91)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:39)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:41)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:66)
	at org.apache.camel.component.timer.TimerConsumer.sendTimerExchange(TimerConsumer.java:91)
	at org.apache.camel.component.timer.TimerConsumer$1.run(TimerConsumer.java:48)
	at java.util.TimerThread.mainLoop(Unknown Source)
	at java.util.TimerThread.run(Unknown Source)",18/Jul/08 15:44;wtam@iona.com;The patch fixes NPE in TraceFormatter and adds an unit test .,"18/Jul/08 18:26;davsclaus;Applied patch with thanks to William Tam.

Also fixed the same problem for LogFormatter.",16/Feb/09 05:51;davsclaus;Closing all 1.5.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"If directory=false and the file is in the root directory, camel-ftp crashes with index out of bounds",CAMEL-734,12485242,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,gholden,gholden,17/Jul/08 16:15,16/Feb/09 05:51,14/Mar/19 02:42,17/Jul/08 16:57,,,,,,,,,,,1.5.0,,,camel-ftp,,,,0,Using a URI like ftp://localhost/file.txt?directory=false the FtpConsumer will give a index out of bounds exception.,,,,,,,,,,,,,,,,,17/Jul/08 16:15;gholden;camel-ftp-poll.patch;https://issues.apache.org/jira/secure/attachment/12462556/camel-ftp-poll.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-07-17 16:57:27.784,,,no_permission,,,,,,,,,,,,,103264,,,Mon Feb 16 05:51:47 UTC 2009,,,Patch Available,,,,0|i01e27:,6047,,,,,,,,,17/Jul/08 16:16;gholden;The error happens when poll() is called.,17/Jul/08 16:57;hadrian;Patch applied with many thanks! Good catch!,16/Feb/09 05:51;davsclaus;Closing all 1.5.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Spring-aop don't ship with the camel bin distribution,CAMEL-728,12484720,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,16/Jul/08 04:48,23/Jul/08 03:57,14/Mar/19 02:42,16/Jul/08 05:18,,,,,,,,,,,1.4.0,,,,,,,0,"Since Spirng-aop is used when we enable the jmx support for camel by default,  we need to ship that jar in the camel bin distribution.
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-07-23 03:57:32.119,,,no_permission,,,,,,,,,,,,,103258,,,Wed Jul 23 03:57:32 UTC 2008,,,,,,,0|i01e0v:,6041,,,,,,,,,16/Jul/08 05:18;njiang;http://svn.apache.org/viewvc?rev=677153&view=rev,23/Jul/08 03:57;davsclaus;Closing 1.4 issues.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Propagated CXF header's value should not include quotes,CAMEL-727,12484718,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,wtam@iona.com,wtam@iona.com,15/Jul/08 18:35,17/Jul/08 13:13,14/Mar/19 02:42,15/Jul/08 19:35,1.3.0,,,,,,,,,,1.4.0,,,camel-cxf,,,,0,"CAMEL-686 fixed the issue of not propagating transport headers (e.g. SOAPAction) but it looks like we added quotes around the value (i.e. getCustomer becomes ""getCustomer"").  I updated the CustomerServicesTest to illustrate the problem.  Also, I cleaned up the client/server-application.xml.
",,,,,,,,,,,,,,,,,15/Jul/08 20:34;wtam@iona.com;test_patch.txt;https://issues.apache.org/jira/secure/attachment/12462672/test_patch.txt,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-07-16 05:02:32.391,,,no_permission,,,,,,,,,,,,,83170,,,Wed Jul 16 05:02:32 UTC 2008,,,,,,,0|i01e0n:,6040,,,,,,,,,"15/Jul/08 19:35;wtam@iona.com;It is not a bug as the quotes came from CXF.  CXF puts quotes around the SOAPAction's value.  Anyway, I think we should apply the patch to verify header values in the test because activemq does not look for SOAPAction header (like TIBCO EMS) so the old test was not verifying the header propagation functionality.","16/Jul/08 05:02;njiang;Applied test patch with thanks to William.

http://svn.apache.org/viewvc?rev=677156&view=rev",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Exception on using WS-Addressing with Apache Camel as Transport,CAMEL-726,12485977,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,ehildebrandt,ehildebrandt,15/Jul/08 15:28,16/Feb/09 05:51,14/Mar/19 02:42,24/Jul/08 03:13,1.4.0,,,,,,,,,,1.5.0,,,camel-cxf,,,,0,"Not sure if this is a bug in CXF or Camel. Please see attached sample project.

--------------------------------------------------

INFO: Interceptor has thrown exception, unwinding now
org.apache.cxf.binding.soap.SoapFault: A header representing a Message Addressing Property is not valid and the message cannot be processed
	at org.apache.cxf.ws.addressing.MAPAggregator.mediate(MAPAggregator.java:375)
	at org.apache.cxf.ws.addressing.MAPAggregator.handleMessage(MAPAggregator.java:159)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:221)
	at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:78)
	at org.apache.camel.component.cxf.transport.CamelDestination.incoming(CamelDestination.java:148)
	at org.apache.camel.component.cxf.transport.CamelDestination$ConsumerProcessor.process(CamelDestination.java:172)
	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:59)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:75)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:57)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:155)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:91)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:57)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:39)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:41)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:66)
	at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:68)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:531)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:466)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:435)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:322)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:260)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:944)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:875)
	at java.lang.Thread.run(Thread.java:595)",,,,,,,,,,,,,,,,,15/Jul/08 15:28;ehildebrandt;ASF.LICENSE.NOT.GRANTED--example-ws-addr.zip;https://issues.apache.org/jira/secure/attachment/12462595/ASF.LICENSE.NOT.GRANTED--example-ws-addr.zip,16/Jul/08 08:25;ehildebrandt;http-example.zip;https://issues.apache.org/jira/secure/attachment/12462555/http-example.zip,,,,2.0,,,,,,,,,,,,,,,,,,,2008-07-16 06:13:07.019,,,no_permission,,,,,,,,,,,,,83318,,,Mon Feb 16 05:51:47 UTC 2009,,,,,,,0|i01e0f:,6039,,,,,,,,,"16/Jul/08 06:13;davsclaus;The best person to look into this is Willem.

Eduard have your tried google and checked that without Camel the CXF part works? Maybe you could debug and track what the header name/value was that cause this exception.
Would help in the trace of the bug.","16/Jul/08 07:47;njiang;Eduard, 

Can you try to run the sample with cxf default http transport first ?
The Message Address is in the soap header, it should not be affected by the JMS transport.

I will dig your issue, when I have time next week.

Willem.",16/Jul/08 08:25;ehildebrandt;HTTP Example,16/Jul/08 08:26;ehildebrandt;I haven't time to debug this issue yet. It could be a CXF issue. I have tried using HTTP and everything is running fine. I have attached the HTTP example. It seems that the HTTP transport is setting some properties in CXF context. ,"16/Jul/08 21:49;ehildebrandt;I have reported this issue to CXF guys, too.
Please take a look at:
https://issues.apache.org/jira/browse/CXF-1703","16/Jul/08 21:50;ehildebrandt;By the way: ""MTOM"" does not work with Camel as transport, too.
Please have a look at following JIRA issue:
https://issues.apache.org/jira/browse/CXF-1702

The HTTP transport in CXF uses a „Content-Type"" header. This property is missing in JMS transport and Camel transport.",17/Jul/08 09:47;davsclaus;Moving for 1.5,"22/Jul/08 10:26;njiang;After dug the code and went through the WS-Addressing specification, I find the error that you should not set the SOAPAction in the WSDL and also a bug[2] of CamelConduit.

According Web Services Addressing 1.0 - SOAP Binding[1] 4.2 Description, The value of the SOAPAction HTTP header MUST either be identical to the value of the wsa:Action header, or be empty.

[1]http://www.w3.org/TR/2005/CR-ws-addr-soap-20050817
[2]https://issues.apache.org/activemq/browse/CAMEL-741","24/Jul/08 03:13;njiang;Added a integration test with the attached example.

http://svn.apache.org/viewvc?rev=678734&view=rev
",16/Feb/09 05:51;davsclaus;Closing all 1.5.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CxfBinding will never run into the code in case the messasge body is List.class,CAMEL-719,12485489,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,ffang,ffang,15/Jul/08 04:06,23/Jul/08 03:57,14/Mar/19 02:42,15/Jul/08 06:28,,,,,,,,,,,1.4.0,,,camel-cxf,,,,0,"since CAMEL-709 add getBody method to CxfMessage, so the code in CxfBinding.createCxfMessage()
Object body = in.getBody(InputStream.class); will never always return InputStream object, which means the code will never run into the case that the message body is List.class, but it will break the logic when the MESSAGEFORMAT is POJO for camel-cxf, so we need try to getBody(List.class) firstly to fix it",,,,,,,,,,,,,,,,,15/Jul/08 04:08;ffang;CAMEL-719.patch;https://issues.apache.org/jira/secure/attachment/12462652/CAMEL-719.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-07-15 06:17:02.237,,,no_permission,,,,,,,,,,,,,103251,,,Wed Jul 23 03:57:32 UTC 2008,,,,,,,0|i01dyv:,6032,,,,,,,,,"15/Jul/08 04:32;ffang;sorry, correct my typo from previous comment

since CAMEL-709 add getBody method to CxfMessage, so the code in CxfBinding.createCxfMessage()
Object body = in.getBody(InputStream.class); will  always return InputStream object, which means the code will never run into the case that the message body is List.class, but it will break the logic when the MESSAGEFORMAT is POJO for camel-cxf, so we need try to getBody(List.class) firstly to fix it","15/Jul/08 06:17;njiang;I did some modification on your patch to make it easy to read the code. I also did some update in the SoapBinding class.

The patch is applied in the reversion 676805.

http://svn.apache.org/viewvc?rev=676805&view=rev",15/Jul/08 06:28;ffang;thanks Willem,"15/Jul/08 06:54;davsclaus;Willem, did this patch actually make it into the new RC4 hadrian just released?","15/Jul/08 07:02;njiang;No , I am afraid we have to do other RC release.",23/Jul/08 03:57;davsclaus;Closing 1.4 issues.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Anonymous FTP doesn't work without username,CAMEL-718,12485513,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,gholden,gholden,14/Jul/08 16:27,23/Jul/08 03:57,14/Mar/19 02:42,16/Jul/08 04:43,1.3.0,1.4.0,,,,,,,,,1.4.0,,,camel-ftp,,,,0,"The web site for the FTP modules says you can use a URL like ftp://publicftpserver.com/download for anonymous FTP, but this doesn't work unless you specify a username.",All,,,,,,,,,,,,,,,,15/Jul/08 12:01;gholden;camel-ftp.patch;https://issues.apache.org/jira/secure/attachment/12462554/camel-ftp.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-07-15 02:18:42.578,,,no_permission,,,,,,,,,,,,,83171,,,Wed Jul 23 03:57:32 UTC 2008,,,Patch Available,,,,0|i01dyn:,6031,,,,,,,,,"15/Jul/08 02:18;njiang;Hi Geoff

Please resubmit your patch with the ASF License granted, or I can't apply the patch.
Here is the link for manage the patch https://issues.apache.org/activemq/secure/ManageAttachments.jspa?id=27543

Thanks,

Willem","15/Jul/08 07:06;davsclaus;The workaround is to specify ""anonymous"" as the username.","16/Jul/08 04:43;njiang;Applied patch with thanks to Geoff.
http://svn.apache.org/viewvc?rev=677141&view=rev",23/Jul/08 03:57;davsclaus;Closing 1.4 issues.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ConcurrentModificationException in ThreadProcessor,CAMEL-715,12485957,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,avatah,avatah,14/Jul/08 10:19,25/May/17 20:04,14/Mar/19 02:42,24/Jul/08 05:17,1.4.0,,,,,,,,,,1.5.0,,,camel-core,,,,0,"When defining very simple routing with ThreadProcessor I get ConcurrentModificationException on multicore systems.

Example:
 from(""direct:a"").thread(10).process(new Processor() {

          @Override
          public void process(Exchange ex) throws Exception {
            //sth
          }
});

Stack trace:
Exception in thread ""Thread Processor""
java.util.ConcurrentModificationException
	at java.util.HashMap$HashIterator.nextEntry(HashMap.java:793)
	at java.util.HashMap$EntryIterator.next(HashMap.java:834)
	at java.util.HashMap$EntryIterator.next(HashMap.java:832)
	at java.util.HashMap.putAll(HashMap.java:523)
	at
org.apache.camel.processor.Pipeline.createNextExchange(Pipeline.java:146
)
	at org.apache.camel.processor.Pipeline$1.done(Pipeline.java:123)
	at
org.apache.camel.processor.ThreadProcessor$ProcessCall.run(ThreadProcess
or.j
ava:66)
	at
java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecuto
r.ja
va:885)
	at
java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.ja
va:9
07)
	at java.lang.Thread.run(Thread.java:619)


",,,,,,,,,,,,,,,,,14/Jul/08 14:15;avatah;JUnitTestCase.java;https://issues.apache.org/jira/secure/attachment/12462510/JUnitTestCase.java,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-07-14 13:17:59.204,,,no_permission,,,,,,,,,,,,,83319,,,Mon Feb 16 05:51:47 UTC 2009,,,,,,,0|i01dxz:,6028,,,,,,,,,"14/Jul/08 13:17;davsclaus;Hi

Could you attach your sample that doesn't work on your system.

I have tried to create an unit test that demonstrates the bug but I runs fine here.","14/Jul/08 13:18;davsclaus;And please provide us with information about OS: Camel Version, Java Version etc.",14/Jul/08 14:05;avatah;JUnit test case that causes error,"14/Jul/08 14:09;avatah;Attached test case causes ConcurrentModificationException.
It happens on multicore machines only (always on quad core processor, never on single core)

Testing environment:
jdk 1.6.0_06
camel 1.4-SNAPSHOT
windows xp
eclipse 3.4",14/Jul/08 14:15;avatah;Attachment without license,"14/Jul/08 14:28;davsclaus;Wojciech. Thanks for the test. It fails on my laptop as well.

However I must say though that such a scenario isn't really a real use-case. Who will fire 500000 messages simulationsly in one thread ;)
But we will try to look into it.",24/Jul/08 05:17;njiang;http://svn.apache.org/viewvc?rev=679273&view=rev,16/Feb/09 05:51;davsclaus;Closing all 1.5.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FileProducer - consumes file instead of producing!,CAMEL-713,12485089,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,davsclaus,davsclaus,davsclaus,13/Jul/08 11:50,17/Jul/08 12:01,14/Mar/19 02:42,13/Jul/08 12:35,1.3.0,1.4.0,,,,,,,,,1.4.0,,,camel-core,,,,0,"The strange code in the FileProducer that if the exchange is out capable it will poll the file instead bites us big time.

James must have had a beer and a fancy moment when he created the code. Something with a dynamic receipentlist where the endpoints should be polled from a file but the expression uses a Producer when the endpoints is created. For the file it should consume instead but it doesn't. Any basically it should consume instead.

It also bites us when we send an InOut exchange to the FileProducer it will *not* produce the file but consume it and there is no file so nothing happens.

This code
{code}
public class FileBackupTest extends ContextTestSupport {

    public void testMailGeneration() throws Exception {
        MockEndpoint mock = getMockEndpoint(""mock:result"");
        mock.expectedMessageCount(1);

        template.requestBody(""seda:mails"", ""Hello World"");

        mock.assertIsSatisfied();
    }

    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            public void configure() throws Exception {
                from(""seda:mails"")
                    .to(""file:target/mails"")
                    .to(""mock:result"");
            }
        };
    }
{code}
Would not create a file in target/mails folder as we are using template.*request* that is an InOut MEP.

I will fix it by removing the strange consumer code in the FileProducer and change the fancy dynamic recepientlist test (SimulatorTest), to not use file based endpoints.

It could be a blocker for the 1.4 release and we should consider creating a new RC!",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,83172,,,Sun Jul 13 12:35:44 UTC 2008,,,,,,,0|i01dxj:,6026,,,,,,,,,13/Jul/08 11:55;davsclaus;Also remember to add a unit test that is InOut MEP to the file components.,"13/Jul/08 12:26;davsclaus;Added new header on the in message

        // lets store the name we really used in the header, so end-users can retrieve it
        message.setHeader(FileComponent.HEADER_FILE_NAME_PRODUCED, answer.getAbsolutePath());

Remember to add this to wiki",13/Jul/08 12:35;davsclaus;We should consider creating a new RC for 1.4 with this fix.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Xmpp private chat does not work,CAMEL-712,12485499,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,,vchekan,vchekan,12/Jul/08 19:53,23/Jul/08 03:57,14/Mar/19 02:42,12/Jul/08 20:38,1.4.0,,,,,,,,,,1.4.0,,,,,,,0,"This configuration logs in, presence works, but message is not received by the participant.
{code}
		from(""timer://kickoff?period=10000&delay=1"").
		setBody(constant(""xmpp message"")).
		to(""xmpp://xxxxxxxx@gmail.com/?resource=camel-user&password=xxxxxx&participant=xxxxxxxx@jabber.org"");
{code}

It is cause by the code 
{code}message.setFrom(endpoint.getUser());{code}

1. There is no need to set ""from"" field: smack will fetch this info from the connection info and will set it up properly.

2. I can't find the link, but according to common sence and examples in [Instant Messaging and Presence|http://www.ietf.org/rfc/rfc3921.txt]  ""from"" should be JID (Jabber ID) and not just user name!
{quote}
   <message
       to='romeo@example.net'
       from='juliet@example.com/balcony'
       type='chat'
       xml:lang='en'>
     <body>Wherefore art thou, Romeo?</body>
   </message>
{quote}


3. ""Normal"" message is just a hint to UI that the message is not part of conversation but a standalone message. It does not matter practically but ideologically  xmpp component will send messages as they flow and I'd say it is a conversation (or monologue to be precise). So no need to set ""Normal"" flag either. Smack will set it to the default ""chat"" type.","xmpp sender: xmpp camel component; account @gmail.com
xmpp receiver: Psi version 0.11; account @jabber.org",,,,,,,,,,,,,,,,12/Jul/08 19:53;vchekan;patch.txt;https://issues.apache.org/jira/secure/attachment/12462597/patch.txt,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-07-12 20:38:03.175,,,no_permission,,,,,,,,,,,,,83320,,,Wed Jul 23 03:57:31 UTC 2008,,,Patch Available,,,,0|i01dxb:,6025,,,,,,,,,12/Jul/08 20:38;hadrian;Vadim you're keeping us busy :).  Patch applied with thanks!,23/Jul/08 03:57;davsclaus;Closing 1.4 issues.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Presence is sent twice by xmpp,CAMEL-710,12485491,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,vchekan,vchekan,12/Jul/08 19:08,23/Jul/08 03:57,14/Mar/19 02:42,12/Jul/08 19:41,1.4.0,,,,,,,,,,1.4.0,,,camel-xmpp,,,,0,"When using smack library sending presence message after login is redundant.
According to smack documentation (and confirmed by experiment) login sends the presence.
[http://www.igniterealtime.org/builds/smack/docs/latest/javadoc/org/jivesoftware/smack/XMPPConnection.html#login(java.lang.String,%20java.lang.String)]
{quote}Logs in to the server using the strongest authentication mode supported by the server, then *sets presence to available*{quote}",,,,,,,,,,,,,,,,,12/Jul/08 19:09;vchekan;patch.txt;https://issues.apache.org/jira/secure/attachment/12462508/patch.txt,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-07-12 19:40:39.045,,,no_permission,,,,,,,,,,,,,83321,,,Wed Jul 23 03:57:31 UTC 2008,,,Patch Available,,,,0|i01dwv:,6023,,,,,,,,,12/Jul/08 19:40;davsclaus;Thanks for the patch and the info. Keep 'em coming ;),23/Jul/08 03:57;davsclaus;Closing 1.4 issues.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JMX Instrumentation - Nodeid can be null,CAMEL-707,12485480,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,12/Jul/08 06:29,17/Jul/08 12:01,14/Mar/19 02:42,12/Jul/08 08:43,1.4.0,,,,,,,,,,1.4.0,,,camel-core,,,,0,"The processors that is registered in JMX can have null in their id. So the JMX path is processor -> null -> 0.

Either we should replace null with unknown as we do for endpoints. Or try to fix that the id is generated.
",,,,,,,,,,,,,,,,,12/Jul/08 06:30;davsclaus;screenshot-1.jpg;https://issues.apache.org/jira/secure/attachment/12462553/screenshot-1.jpg,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,83322,,,Sat Jul 12 08:43:15 UTC 2008,,,,,,,0|i01dw7:,6020,,,,,,,,,12/Jul/08 06:30;davsclaus;See screenshot,"12/Jul/08 08:09;davsclaus;The instanceid is not needed, will be removed. The process id is unique.","12/Jul/08 08:43;davsclaus;nodeid is now mandatory and the instanceid has been removed, as nodeid is unique.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
net.sf.saxon.trans.StaticError: XQuery syntax error in ##: generated when several threads are created for a route,CAMEL-702,12485185,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,cmoulliard,cmoulliard,11/Jul/08 15:38,17/Jul/08 12:01,14/Mar/19 02:42,14/Jul/08 14:48,1.4.0,,,,,,,,,,1.4.0,,,camel-saxon,,,,0,"Hi,

When I configure the following routes to process 10 xml files in a directory , everything works correctly

A) 

		from(""file:///c:/temp/test/?delete=false&lock=true&consumer.delay=500&consumer.initialDelay=10"").thread(10)
		.to(""bean:authenticate"")
				.choice().when(header(""authenticated"").isEqualTo(true))
					//.to(""display"")
				    .to(""direct:extractDocument"")
		.otherwise().to(""activemq:queue:rejectedmessages.queue"");
		
B) 

			from(""direct:extractDocument"").thread(1)
			.setHeader(""responder"").xpath(""//XyZ:Response/text()"", String.class, ns)
			.setHeader(""channel"", ""File-Channel"")
			
			.to(""bean:saveContent"")
			.to(""xquery:com/myapplication/transformation/in/extract.xquery"")
			.to(""activemq:queue:A.in.queue"");
	}
	
C) 		from(""activemq:queue:A.in.queue"").thread(10)
		.filter(body().isInstanceOf(String.class))
		.unmarshal(jaxb)
		.to(""bean:convert"")
		.to(""bean:save"")
		.to(""activemq:queue:A.in.queue"");

Here is the log trace

4336937 [Thread Processor] INFO  Authenticate  - Company authenticated
4336937 [Thread Processor] INFO  Authenticate  - Company authenticated
4336937 [Thread Processor] INFO  Authenticate  - Company authenticated
4336937 [Thread Processor] INFO  Authenticate  - Company authenticated
4336937 [Thread Processor] INFO  Authenticate  - Company authenticated
4336937 [Thread Processor] INFO  Authenticate  - Company authenticated
4336937 [Thread Processor] INFO  Authenticate  - Company authenticated
4336937 [Thread Processor] INFO  Authenticate  - Company authenticated
4336937 [Thread Processor] INFO  Authenticate  - Company authenticated
4336937 [Thread Processor] INFO  Authenticate  - Company authenticated
4337359 [Thread Processor] INFO  SaveContent  - Message saved
4338562 [Thread Processor] INFO  SaveContent  - Message saved
4338828 [Thread Processor] INFO  SaveContent  - Message saved
4339062 [Thread Processor] INFO  SaveContent  - Message saved
4339328 [Thread Processor] INFO  SaveContent  - Message saved
4339890 [Thread Processor] INFO  SaveContent  - Message saved
4340312 [Thread Processor] INFO  SaveContent  - Message saved
4340515 [Thread Processor] INFO  SaveContent  - Message saved
4340687 [Thread Processor] INFO  SaveContent  - Message saved
4340750 [Thread Processor] INFO  Convert  - Message send
4340906 [Thread Processor] INFO  SaveContent  - Message saved
4341218 [Thread Processor] INFO  Save  - Order saved
4341328 [Thread Processor] INFO  Convert  - Message send
4341890 [Thread Processor] INFO  Save  - Order saved
4341922 [Thread Processor] INFO  Convert  - Message send
4342672 [Thread Processor] INFO  Save  - Order saved
4342734 [Thread Processor] INFO  Convert  - Message send
4343672 [Thread Processor] INFO  Save  - Order saved
4343718 [Thread Processor] INFO  Convert  - Message send
4344703 [Thread Processor] INFO  Save  - Order saved
4344734 [Thread Processor] INFO  Convert  - Message send
4345937 [Thread Processor] INFO  Save  - Order saved
4345984 [Thread Processor] INFO  Convert  - Message send
4347359 [Thread Processor] INFO  Save  - Order saved
4347375 [Thread Processor] INFO  Convert  - Message send
4349078 [Thread Processor] INFO  Save  - Order saved
4349109 [Thread Processor] INFO  Convert  - Message send
4350859 [Thread Processor] INFO  Save  - Order saved
4350906 [Thread Processor] INFO  Convert  - Message send
4352593 [Thread Processor] INFO  Save  - Order saved

but when I would like to increase the number of threads to execute more than one XQUERY at a time

B)			from(""direct:extractDocument"").thread(10)
			.setHeader(""responder"").xpath(""//XyZ:Response/text()"", String.class, ns)
			.setHeader(""channel"", ""File-Channel"")
			
			.to(""bean:saveContent"")
			.to(""xquery:com/myapplication/transformation/in/extract.xquery"")
			.to(""activemq:queue:A.in.queue"");

 the following error is generated

4315906 [Thread Processor] INFO  com.bravura.babel.server.common.Authenticate  - Company authenticated
4315906 [Thread Processor] INFO  com.bravura.babel.server.common.Authenticate  - Company authenticated
4315906 [Thread Processor] INFO  com.bravura.babel.server.common.Authenticate  - Company authenticated
4315906 [Thread Processor] INFO  com.bravura.babel.server.common.Authenticate  - Company authenticated
4315906 [Thread Processor] INFO  com.bravura.babel.server.common.Authenticate  - Company authenticated
4315906 [Thread Processor] INFO  com.bravura.babel.server.common.Authenticate  - Company authenticated
4315906 [Thread Processor] INFO  com.bravura.babel.server.common.Authenticate  - Company authenticated
4315906 [Thread Processor] INFO  com.bravura.babel.server.common.Authenticate  - Company authenticated
4315906 [Thread Processor] INFO  com.bravura.babel.server.common.Authenticate  - Company authenticated
4315906 [Thread Processor] INFO  com.bravura.babel.server.common.Authenticate  - Company authenticated
4316750 [Thread Processor] INFO  com.bravura.babel.server.common.SaveContent  - Message saved
4316781 [Thread Processor] INFO  com.bravura.babel.server.common.SaveContent  - Message saved
4316781 [Thread Processor] INFO  com.bravura.babel.server.common.SaveContent  - Message saved
4317094 [Thread Processor] INFO  com.bravura.babel.server.common.SaveContent  - Message saved
4317125 [Thread Processor] INFO  com.bravura.babel.server.common.SaveContent  - Message saved
4317172 [Thread Processor] INFO  com.bravura.babel.server.common.SaveContent  - Message saved
4317203 [Thread Processor] INFO  com.bravura.babel.server.common.SaveContent  - Message saved
4317250 [Thread Processor] INFO  com.bravura.babel.server.common.SaveContent  - Message saved
4317281 [Thread Processor] INFO  com.bravura.babel.server.common.SaveContent  - Message saved
4317328 [Thread Processor] INFO  com.bravura.babel.server.common.SaveContent  - Message saved

43Error on line 1 column 0 
  XPST0003: XQuery syntax error in ##:
    Unexpected token ""<eof>"" in path expression
Error on line 1 column 0 
  XPST0003: XQuery syntax error in ##:
    Unexpected token ""<eof>"" in path expression
Error on line 1 column 0 
  XPST0003: XQuery syntax error in ##:
    Unexpected token ""<eof>"" in path expression
Error on line 1 column 0 
  XPST0003: XQuery syntax error in ##:
    Unexpected token ""<eof>"" in path expression
Error on line 1 column 0 
  XPST0003: XQuery syntax error in ##:
    Unexpected token ""<eof>"" in path expression
Error on line 1 column 0 
  XPST0003: XQuery syntax error in ##:
    Unexpected token ""<eof>"" in path expression
Error on line 1 column 0 
  XPST0003: XQuery syntax error in ##:
    Unexpected token ""<eof>"" in path expression
Error on line 1 column 0 
  XPST0003: XQuery syntax error in ##:
    Unexpected token ""<eof>"" in path expression
Error on line 1 column 0 
  XPST0003: XQuery syntax error in ##:
    Unexpected token ""<eof>"" in path expression
18219 [Thread Processor] ERROR org.apache.camel.processor.DeadLetterChannel  - Failed delivery for exchangeId: ID-dell-charles/4777-1215789902562/0-1. On delivery attempt: 0 caught: org.apache.camel.RuntimeExpressionException: net.sf.saxon.trans.StaticError: XQuery syntax error in ##:
    Unexpected token ""<eof>"" in path expression
43org.apache.camel.RuntimeExpressionException: net.sf.saxon.trans.StaticError: XQuery syntax error in ##:
    Unexpected token ""<eof>"" in path expression
	at org.apache.camel.component.xquery.XQueryBuilder.evaluate(XQueryBuilder.java:125)
	at org.apache.camel.component.xquery.XQueryBuilder.process(XQueryBuilder.java:89)
	at org.apache.camel.impl.ProcessorEndpoint.onExchange(ProcessorEndpoint.java:92)
	at org.apache.camel.impl.ProcessorEndpoint$1.process(ProcessorEndpoint.java:66)
	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:75)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:101)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:85)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:101)
	at org.apache.camel.processor.Pipeline.access$100(Pipeline.java:40)
	at org.apache.camel.processor.Pipeline$1.done(Pipeline.java:124)
	at org.apache.camel.processor.ThreadProcessor$ProcessCall.run(ThreadProcessor.java:66)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675)
	at java.lang.Thread.run(Thread.java:595)
Caused by: net.sf.saxon.trans.StaticError: XQuery syntax error in ##:
    Unexpected token ""<eof>"" in path expression
	at net.sf.saxon.query.QueryParser.grumble(QueryParser.java:323)
	at net.sf.saxon.expr.ExpressionParser.grumble(ExpressionParser.java:136)
	at net.sf.saxon.expr.ExpressionParser.parseBasicStep(ExpressionParser.java:1403)
	at net.sf.saxon.expr.ExpressionParser.parseStepExpression(ExpressionParser.java:1220)
	at net.sf.saxon.expr.ExpressionParser.parseRelativePath(ExpressionParser.java:1160)
	at net.sf.saxon.expr.ExpressionParser.parsePathExpression(ExpressionParser.java:1146)
	at net.sf.saxon.expr.ExpressionParser.parseUnaryExpression(ExpressionParser.java:1025)
	at net.sf.saxon.expr.ExpressionParser.parseCastExpression(ExpressionParser.java:684)
	at net.sf.saxon.expr.ExpressionParser.parseCastableExpression(ExpressionParser.java:639)
	at net.sf.saxon.expr.ExpressionParser.parseTreatExpression(ExpressionParser.java:620)
	at net.sf.saxon.expr.ExpressionParser.parseInstanceOfExpression(ExpressionParser.java:602)
	at net.sf.saxon.expr.ExpressionParser.parseIntersectExpression(ExpressionParser.java:1058)
	at net.sf.saxon.expr.ExpressionParser.parseUnionExpression(ExpressionParser.java:1040)
	at net.sf.saxon.expr.ExpressionParser.parseMultiplicativeExpression(ExpressionParser.java:977)
	at net.sf.saxon.expr.ExpressionParser.parseAdditiveExpression(ExpressionParser.java:957)
	at net.sf.saxon.expr.ExpressionParser.parseRangeExpression(ExpressionParser.java:873)
	at net.sf.saxon.expr.ExpressionParser.parseComparisonExpression(ExpressionParser.java:823)
	at net.sf.saxon.expr.ExpressionParser.parseAndExpression(ExpressionParser.java:414)
	at net.sf.saxon.expr.ExpressionParser.parseOrExpression(ExpressionParser.java:396)
	at net.sf.saxon.expr.ExpressionParser.parseExprSingle(ExpressionParser.java:350)
	at net.sf.saxon.expr.ExpressionParser.parseExpression(ExpressionParser.java:314)
	at net.sf.saxon.query.QueryParser.parseQuery(QueryParser.java:256)
	at net.sf.saxon.query.QueryParser.makeXQueryExpression(QueryParser.java:97)
	at net.sf.saxon.query.StaticQueryContext.compileQuery(StaticQueryContext.java:450)
	at net.sf.saxon.query.StaticQueryContext.compileQuery(StaticQueryContext.java:513)
	at org.apache.camel.component.xquery.XQueryBuilder$3.createQueryExpression(XQueryBuilder.java:216)
	at org.apache.camel.component.xquery.XQueryBuilder.getExpression(XQueryBuilder.java:294)
	at org.apache.camel.component.xquery.XQueryBuilder.evaluateAsDOM(XQueryBuilder.java:153)
	at org.apache.camel.component.xquery.XQueryBuilder.evaluate(XQueryBuilder.java:115)
	... 14 more


",Win2K / Camel Apache 1.4-SNAPSHOT (11/07/2208),,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-07-12 06:01:16.696,,,no_permission,,,,,,,,,,,,,83323,,,Tue Jul 15 10:19:32 UTC 2008,,,,,,,0|i01dv3:,6015,,,,,,,,,12/Jul/08 06:01;davsclaus;Could be an concurrency issue with the xquery and saxon framework.,14/Jul/08 06:38;cmoulliard;Should we have to open a defect on Saxon Jira web site ?,14/Jul/08 06:47;davsclaus;I do think Gert did some changes in Camel related to some concurrency issues with a component similar to this one. We should get his attention first I think.,"14/Jul/08 07:12;davsclaus;Charles is it possible for you to create a unit test that fails with this?

Can you trigger the problem all the time?",14/Jul/08 08:35;davsclaus;Charles I am looking into this. I will try to commit a patch later. Could you then try out with the latest 1.4-SNAPSHOT. I will post again here when its ready.,"14/Jul/08 09:26;davsclaus;Charles we have a proposed patch now. Gert is taking a look too.

When the builds server has created a new snapshot build on the maven repo you can try it out. Wait a few hours.","14/Jul/08 09:39;cmoulliard;Many thanks. I suppose that the current snaphot (not yet created with the patch) is ?

[   ] apache-camel-1.4-20080714.001554-34.zip                     14-Jul-2008 02:03  6.7M ","14/Jul/08 10:08;davsclaus;2008-07-14 12:05:42,406 [hread Processor] ERROR DeadLetterChannel              - Failed delivery for exchangeId: ID-claus-acer/4188-1216029941640/0-0. On delivery attempt: 0 caught: org.apache.camel.RuntimeExpressionException: java.lang.IllegalArgumentException: Supplied node must be built using the same or a compatible Configuration
org.apache.camel.RuntimeExpressionException: java.lang.IllegalArgumentException: Supplied node must be built using the same or a compatible Configuration
	at org.apache.camel.component.xquery.XQueryBuilder.evaluate(XQueryBuilder.java:124)
	at org.apache.camel.model.language.ExpressionType.evaluate(ExpressionType.java:98)
	at org.apache.camel.processor.TransformProcessor.process(TransformProcessor.java:42)
	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:101)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:85)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:101)
	at org.apache.camel.processor.Pipeline.access$100(Pipeline.java:40)
	at org.apache.camel.processor.Pipeline$1.done(Pipeline.java:124)
	at org.apache.camel.processor.ThreadProcessor$ProcessCall.run(ThreadProcessor.java:66)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675)
	at java.lang.Thread.run(Thread.java:595)
Caused by: java.lang.IllegalArgumentException: Supplied node must be built using the same or a compatible Configuration
	at net.sf.saxon.query.DynamicQueryContext.setContextItem(DynamicQueryContext.java:89)
	at org.apache.camel.component.xquery.XQueryBuilder.createDynamicContext(XQueryBuilder.java:390)
	at org.apache.camel.component.xquery.XQueryBuilder.evaluateAsDOM(XQueryBuilder.java:151)
	at org.apache.camel.component.xquery.XQueryBuilder.evaluate(XQueryBuilder.java:114)
	... 12 more","14/Jul/08 10:10;davsclaus;Could be when was the last build? There has been some commits before this today that could have caused this build. But try it out and see how it goes.

Charles the build server has just finished the build. So check back in a little while to see if there is a new build.","14/Jul/08 11:24;davsclaus;Charles. Gert and I have found a solution (we think). I have just committed the final details.

Could you test it. The builds should take approx 2 hours before its online on the maven repo. Or wait until tomorrow with the test, then you are sure to grab the latest build.","15/Jul/08 08:11;cmoulliard;Well. We progress but I have a new error. This is reproducible. The error does not occur for every message and unfortunately for us, Camel receives a null pointer exception.

4320078 [Thread Processor] ERROR org.apache.camel.processor.DeadLetterChannel  - Failed delivery for exchangeId: ID-dell-charles/2644-1216109166046/0-1. On delivery attempt: 0 caught: org.apache.camel.RuntimeExpressionException: java.lang.NullPointerException
43org.apache.camel.RuntimeExpressionException: java.lang.NullPointerException
	at org.apache.camel.component.xquery.XQueryBuilder.evaluate(XQueryBuilder.java:132)
	at org.apache.camel.component.xquery.XQueryBuilder.process(XQueryBuilder.java:90)
	at org.apache.camel.impl.ProcessorEndpoint.onExchange(ProcessorEndpoint.java:92)
	at org.apache.camel.impl.ProcessorEndpoint$1.process(ProcessorEndpoint.java:66)
	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:75)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:101)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:85)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:101)
	at org.apache.camel.processor.Pipeline.access$100(Pipeline.java:40)
	at org.apache.camel.processor.Pipeline$1.done(Pipeline.java:124)
	at org.apache.camel.processor.ThreadProcessor$ProcessCall.run(ThreadProcessor.java:66)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675)
	at java.lang.Thread.run(Thread.java:595)
Caused by: java.lang.NullPointerException
	at net.sf.saxon.value.Value.asItem(Value.java:71)
	at net.sf.saxon.expr.VariableReference.evaluateItem(VariableReference.java:291)
	at net.sf.saxon.functions.QNameFn.evaluateItem(QNameFn.java:66)
	at net.sf.saxon.instruct.ComputedElement.getNameCode(ComputedElement.java:283)
	at net.sf.saxon.instruct.ElementCreator.constructElement(ElementCreator.java:290)
	at net.sf.saxon.instruct.ElementCreator.evaluateItem(ElementCreator.java:270)
	at net.sf.saxon.instruct.Instruction.iterate(Instruction.java:320)
	at net.sf.saxon.expr.IfExpression.iterate(IfExpression.java:257)
	at net.sf.saxon.expr.ForExpression$MappingAction.map(ForExpression.java:591)
	at net.sf.saxon.expr.MappingIterator.next(MappingIterator.java:54)
	at net.sf.saxon.query.XQueryExpression$ErrorReportingIterator.next(XQueryExpression.java:553)
	at net.sf.saxon.pull.PullFromIterator.next(PullFromIterator.java:60)
	at net.sf.saxon.pull.PullFilter.next(PullFilter.java:83)
	at net.sf.saxon.pull.PullNamespaceReducer.next(PullNamespaceReducer.java:66)
	at net.sf.saxon.pull.PullFilter.next(PullFilter.java:83)
	at net.sf.saxon.pull.PullPushTee.next(PullPushTee.java:57)
	at net.sf.saxon.pull.PullConsumer.consume(PullConsumer.java:27)
	at net.sf.saxon.pull.PullPushCopier.copy(PullPushCopier.java:27)
	at net.sf.saxon.query.XQueryExpression.pull(XQueryExpression.java:402)
	at org.apache.camel.component.xquery.XQueryBuilder.evaluateAsDOM(XQueryBuilder.java:162)
	at org.apache.camel.component.xquery.XQueryBuilder.evaluate(XQueryBuilder.java:122)
	... 14 more","15/Jul/08 09:37;davsclaus;Charles does the message succed in the next redelivery?

The stacktrace is on the first failure = On delivery attempt: 0

Do you also have:
On delivery attempt: 1
On delivery attempt: 2
On delivery attempt: 3
etc.

How high is your throughput? Have you tried to lower the threads from 10 to eg. 5?
And you can also try a throttler() in from of the xquery to let XXX number of exchanges pass per. second. - throttle(20) will only pass 20 messages per second.","15/Jul/08 09:47;davsclaus;Charles can you also try with a never version of Saxon.
http://saxon.sourceforge.net/

Has released v9.1.0.1 of Saxon. Unfortunately not in a maven repo (yet)","15/Jul/08 10:11;cmoulliard;The message is not redelivered.
Here is the full stack trace :

4315594 [Thread Processor] ERROR org.apache.camel.processor.DeadLetterChannel  - Failed delivery for exchangeId: ID-dell-charles/3883-1216116412562/0-0. On delivery attempt: 0 caught: org.apache.camel.RuntimeExpressionException: java.lang.NullPointerException
43org.apache.camel.RuntimeExpressionException: java.lang.NullPointerException
	at org.apache.camel.component.xquery.XQueryBuilder.evaluate(XQueryBuilder.java:132)
	at org.apache.camel.component.xquery.XQueryBuilder.process(XQueryBuilder.java:90)
	at org.apache.camel.impl.ProcessorEndpoint.onExchange(ProcessorEndpoint.java:92)
	at org.apache.camel.impl.ProcessorEndpoint$1.process(ProcessorEndpoint.java:66)
	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:75)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:101)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:85)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:101)
	at org.apache.camel.processor.Pipeline.access$100(Pipeline.java:40)
	at org.apache.camel.processor.Pipeline$1.done(Pipeline.java:124)
	at org.apache.camel.processor.ThreadProcessor$ProcessCall.run(ThreadProcessor.java:66)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675)
	at java.lang.Thread.run(Thread.java:595)
Caused by: java.lang.NullPointerException
	at net.sf.saxon.value.Value.asItem(Value.java:71)
	at net.sf.saxon.expr.VariableReference.evaluateItem(VariableReference.java:291)
	at net.sf.saxon.functions.QNameFn.evaluateItem(QNameFn.java:66)
	at net.sf.saxon.instruct.ComputedElement.getNameCode(ComputedElement.java:283)
	at net.sf.saxon.instruct.ElementCreator.constructElement(ElementCreator.java:290)
	at net.sf.saxon.instruct.ElementCreator.evaluateItem(ElementCreator.java:270)
	at net.sf.saxon.instruct.Instruction.iterate(Instruction.java:320)
	at net.sf.saxon.expr.IfExpression.iterate(IfExpression.java:257)
	at net.sf.saxon.expr.ForExpression$MappingAction.map(ForExpression.java:591)
	at net.sf.saxon.expr.MappingIterator.next(MappingIterator.java:54)
	at net.sf.saxon.query.XQueryExpression$ErrorReportingIterator.next(XQueryExpression.java:553)
	at net.sf.saxon.pull.PullFromIterator.next(PullFromIterator.java:60)
	at net.sf.saxon.pull.PullFilter.next(PullFilter.java:83)
	at net.sf.saxon.pull.PullNamespaceReducer.next(PullNamespaceReducer.java:66)
	at net.sf.saxon.pull.PullFilter.next(PullFilter.java:83)
	at net.sf.saxon.pull.PullPushTee.next(PullPushTee.java:57)
	at net.sf.saxon.pull.PullConsumer.consume(PullConsumer.java:27)
	at net.sf.saxon.pull.PullPushCopier.copy(PullPushCopier.java:27)
	at net.sf.saxon.query.XQueryExpression.pull(XQueryExpression.java:402)
	at org.apache.camel.component.xquery.XQueryBuilder.evaluateAsDOM(XQueryBuilder.java:162)
	at org.apache.camel.component.xquery.XQueryBuilder.evaluate(XQueryBuilder.java:122)
	... 14 more
15594 [Thread Processor] ERROR org.apache.camel.processor.DeadLetterChannel  - Failed delivery for exchangeId: ID-dell-charles/3883-1216116412562/0-1. On delivery attempt: 0 caught: org.apache.camel.RuntimeExpressionException: java.lang.NullPointerException
43org.apache.camel.RuntimeExpressionException: java.lang.NullPointerException
	at org.apache.camel.component.xquery.XQueryBuilder.evaluate(XQueryBuilder.java:132)
	at org.apache.camel.component.xquery.XQueryBuilder.process(XQueryBuilder.java:90)
	at org.apache.camel.impl.ProcessorEndpoint.onExchange(ProcessorEndpoint.java:92)
	at org.apache.camel.impl.ProcessorEndpoint$1.process(ProcessorEndpoint.java:66)
	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:75)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:101)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:85)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:101)
	at org.apache.camel.processor.Pipeline.access$100(Pipeline.java:40)
	at org.apache.camel.processor.Pipeline$1.done(Pipeline.java:124)
	at org.apache.camel.processor.ThreadProcessor$ProcessCall.run(ThreadProcessor.java:66)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675)
	at java.lang.Thread.run(Thread.java:595)
Caused by: java.lang.NullPointerException
	at net.sf.saxon.value.Value.asItem(Value.java:71)
	at net.sf.saxon.expr.VariableReference.evaluateItem(VariableReference.java:291)
	at net.sf.saxon.functions.QNameFn.evaluateItem(QNameFn.java:66)
	at net.sf.saxon.instruct.ComputedElement.getNameCode(ComputedElement.java:283)
	at net.sf.saxon.instruct.ElementCreator.constructElement(ElementCreator.java:290)
	at net.sf.saxon.instruct.ElementCreator.evaluateItem(ElementCreator.java:270)
	at net.sf.saxon.instruct.Instruction.iterate(Instruction.java:320)
	at net.sf.saxon.expr.IfExpression.iterate(IfExpression.java:257)
	at net.sf.saxon.expr.ForExpression$MappingAction.map(ForExpression.java:591)
	at net.sf.saxon.expr.MappingIterator.next(MappingIterator.java:54)
	at net.sf.saxon.query.XQueryExpression$ErrorReportingIterator.next(XQueryExpression.java:553)
	at net.sf.saxon.pull.PullFromIterator.next(PullFromIterator.java:60)
	at net.sf.saxon.pull.PullFilter.next(PullFilter.java:83)
	at net.sf.saxon.pull.PullNamespaceReducer.next(PullNamespaceReducer.java:66)
	at net.sf.saxon.pull.PullFilter.next(PullFilter.java:83)
	at net.sf.saxon.pull.PullPushTee.next(PullPushTee.java:57)
	at net.sf.saxon.pull.PullConsumer.consume(PullConsumer.java:27)
	at net.sf.saxon.pull.PullPushCopier.copy(PullPushCopier.java:27)
	at net.sf.saxon.query.XQueryExpression.pull(XQueryExpression.java:402)
	at org.apache.camel.component.xquery.XQueryBuilder.evaluateAsDOM(XQueryBuilder.java:162)
	at org.apache.camel.component.xquery.XQueryBuilder.evaluate(XQueryBuilder.java:122)
	... 14 more

I will test with new Saxon release and/or add the throttle.
When I change the number of threads, I can sometimes send messages without errors.","15/Jul/08 10:19;cmoulliard;The error has disappeared with the last version of Saxon 9-1-0-1j.

remark : I haven't added the throttle option to make the test.

Many thanks for your help.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BeanInvocation - Do not allow Exchange as the return type,CAMEL-701,12485492,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,11/Jul/08 12:02,12/Jul/08 08:45,14/Mar/19 02:42,11/Jul/08 12:38,1.4.0,,,,,,,,,,1.4.0,,,camel-core,,,,0,"Currently if you have a bean invocation configure that is something like this

{code}
public Exchange doSomething(Exchange exchange) {
 ..
 return exchange;
}
{code}

Then Camel will set the exchange on the exchange out body. This should not be allowed.
Wiki documentation is updated about this, but the code does not check for such condition.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,83324,,,2008-07-11 12:02:35.0,,,,,,,0|i01duv:,6014,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
transform() doesnt propogate headers,CAMEL-697,12485467,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,11/Jul/08 08:53,12/Jul/08 08:45,14/Mar/19 02:42,11/Jul/08 09:23,1.4.0,,,,,,,,,,1.4.0,,,camel-core,,,,0,"The new transform() DSL doesn't propogate headers so you can not do:

{code}
                from(""direct:four"")
                    .transform().constant(""London"")
                    .to(""mock:result"");
{code}

And expect that any headers on the exchange at direct:four is received after the transform
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,83325,,,Fri Jul 11 08:54:07 UTC 2008,,,,,,,0|i01dtz:,6010,,,,,,,,,"11/Jul/08 08:54;davsclaus;The solution is to add this in the TransformProcessor
{code}
    public void process(Exchange exchange) throws Exception {
        Object newBody = expression.evaluate(exchange);
        exchange.getOut().setBody(newBody);

        // propogate headers
        exchange.getOut().getHeaders().putAll(exchange.getIn().getHeaders());
        
        super.process(exchange);
    }
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ProducerTemplate doenst honor exchange pattern when it extracts the result,CAMEL-696,12485473,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,11/Jul/08 08:38,12/Jul/08 08:45,14/Mar/19 02:42,11/Jul/08 11:20,1.3.0,,,,,,,,,,1.4.0,,,camel-core,,,,0,"The code the extracts the result that is returned when you use the sendXXX, requestXXX methods on the producer template doens't honor the exchange pattern.

{code}
    protected Object extractResultBody(E result) {
        Object answer = null;
        if (result != null) {
            Message out = result.getOut(false);
            if (out != null) {
                answer = out.getBody();
            } else {
                answer = result.getIn().getBody();
            }
        }
        return answer;
    }
{code}

It defaults to preferring out messages all the time. But in some circumstances the out body could be set to null but the real response is in the in body.
Setting the exchange pattern to InOnly doesn't honor this.

Maybe this ticket is a symptom of the MEP problem that we have in Camel. See the discussion on the dev forum.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,83173,,,Fri Jul 11 09:41:42 UTC 2008,,,,,,,0|i01dtr:,6009,,,,,,,,,11/Jul/08 09:41;davsclaus;I do think the MEP should be added as a parameter and isOutCapable should be tested if we want to get the Out body as the answer.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
xquery doesnt propogate headers,CAMEL-695,12485506,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,11/Jul/08 08:35,23/Jul/08 03:57,14/Mar/19 02:42,11/Jul/08 09:26,1.3.0,,,,,,,,,,1.4.0,,,camel-saxon,,,,0,"You can not propagate headers through the xquery component
{code}
                from(""direct:one"")
                    .to(""xquery:org/apache/camel/component/xquery/transform.xquery"")
                    .to(""mock:result"");
{code}

The mock will not receive any of the headers the exchange had when it was send to direct:one",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,83174,,,Wed Jul 23 03:57:31 UTC 2008,,,,,,,0|i01dtj:,6008,,,,,,,,,23/Jul/08 03:57;davsclaus;Closing 1.4 issues.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CXF component's CamelDestination gets configured twice,CAMEL-694,12485519,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,11/Jul/08 04:43,23/Jul/08 03:57,14/Mar/19 02:42,11/Jul/08 06:48,1.3.0,,,,,,,,,,1.4.0,,,camel-cxf,,,,0,"CamelTransportFactory does not need to call
""configurer.configurationBean(destination)"" as it has been performed
by CamelDestination..initConfig() in its constructor.  

{code}
Index: components/camel-cxf/src/main/java/org/apache/camel/component/cxf/transport/CamelTransportFactory.java
===================================================================
--- components/camel-cxf/src/main/java/org/apache/camel/component/cxf/transport/CamelTransportFactory.java	(revision 675685)
+++ components/camel-cxf/src/main/java/org/apache/camel/component/cxf/transport/CamelTransportFactory.java	(working copy)
@@ -26,7 +26,6 @@
 
 import org.apache.camel.CamelContext;
 import org.apache.cxf.Bus;
-import org.apache.cxf.configuration.Configurer;
 import org.apache.cxf.service.model.EndpointInfo;
 import org.apache.cxf.transport.AbstractTransportFactory;
 import org.apache.cxf.transport.Conduit;
@@ -87,12 +86,7 @@
     }
 
     public Destination getDestination(EndpointInfo endpointInfo) throws IOException {
-        CamelDestination destination = new CamelDestination(camelContext, bus, this, endpointInfo);
-        Configurer configurer = bus.getExtension(Configurer.class);
-        if (null != configurer) {
-            configurer.configureBean(destination);
-        }
-        return destination;
+        return new CamelDestination(camelContext, bus, this, endpointInfo);
     }
 
     public Set<String> getUriPrefixes() {
{code}",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-07-23 03:57:31.81,,,no_permission,,,,,,,,,,,,,83175,,,Wed Jul 23 03:57:31 UTC 2008,,,Patch Available,,,,0|i01dtb:,6007,,,,,,,,,"11/Jul/08 06:48;njiang;Patch applied with thanks to William.

http://svn.apache.org/viewvc?rev=675833&view=rev",23/Jul/08 03:57;davsclaus;Closing 1.4 issues.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Classes missing in camel-jpa.jar,CAMEL-692,12485495,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,10/Jul/08 07:28,11/Jul/08 04:30,14/Mar/19 02:42,10/Jul/08 07:33,1.4.0,,,,,,,,,,1.4.0,,,camel-jpa,,,,0,"Hi,

I am playing with Camel 1.4-SNAPSHOT.

I have created a route that goes to jpa, but I receive the error
""[PersistenceUnit: camel-jpa] class or package not found"". 

In persistence.xml in camel-jpa-1.4-SNAPSHOT.jar camel-jpa is defined as:
<persistence-unit name=""camel-jpa"" transaction-type=""RESOURCE_LOCAL"">
     
<class>org.apache.camel.processor.idempotent.jpa.MessageProcessed</class>
  </persistence-unit>

Where can I find the MessageProcessed class? It is not in camel-core nor camel-jpa.
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,83326,,,Thu Jul 10 07:28:25 UTC 2008,,,,,,,0|i01dsv:,6005,,,,,,,,,"10/Jul/08 07:28;davsclaus;See nabble:
http://www.nabble.com/-PersistenceUnit%3A-camel-jpa--class-or-package-not-found-td18362845s22882.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CxfExchange  do not copy the exchange pattern when copying itself.,CAMEL-691,12485351,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,10/Jul/08 07:26,23/Jul/08 03:57,14/Mar/19 02:42,10/Jul/08 08:26,1.2.0,1.3.0,,,,,,,,,1.4.0,,,camel-cxf,,,,0,"When I applied the CAMEL-688 patch , I found the CxfSoapMessageProviderTest failed. 
After digging into the code , I found CxfExchange do not copy the exchange pattern when the exchange copying itself.
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-07-23 03:57:31.793,,,no_permission,,,,,,,,,,,,,83125,,,Wed Jul 23 03:57:31 UTC 2008,,,,,,,0|i01dsn:,6004,,,,,,,,,10/Jul/08 08:26;njiang;http://svn.apache.org/viewvc?rev=675467&view=rev,23/Jul/08 03:57;davsclaus;Closing 1.4 issues.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
XMPP component has wrong documentation,CAMEL-690,12485109,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,vchekan,vchekan,10/Jul/08 04:54,17/Jul/08 12:01,14/Mar/19 02:42,12/Jul/08 10:59,1.3.0,1.4.0,,,,,,,,,1.4.0,,,documentation,,,,0,"XMPP component page http://activemq.apache.org/camel/xmpp.html states that uri is ""xmpp:hostname[:port][/room]"". But in fact it does not work: the room is not recognised for ""xmpp:jabber.org/room33"". There is missing // to make it a valid hierarchical uri. See http://java.sun.com/j2se/1.4.2/docs/api/java/net/URI.html

Fix:
the url should be ""xmpp://vchekan@jabber.org/room33"". Notice ""//"".

Also: according to the code it is possible to set a user name like this:
xmpp://[login@]hostname[:port][/room]
which would be nice to mention.

Also it is not clear at all how to set up password. Without password there is not too much use of this component so it is critical to document it.

If I am provided with access to confluence, I could fix it on my own. Mu login is ""vchekan"".",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-07-12 10:59:06.952,,,no_permission,,,,,,,,,,,,,83176,,,Sat Jul 12 10:59:06 UTC 2008,,,,,,,0|i01dsf:,6003,,,,,,,,,12/Jul/08 10:59;davsclaus;Thanks for the reporting. There are a few tickets on the XMPP slated for 1.5 with features to set password and more.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
process method of should check ExchnagePAttern before setting out,CAMEL-688,12485416,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,ffang,ffang,10/Jul/08 03:22,23/Jul/08 03:57,14/Mar/19 02:42,10/Jul/08 10:20,1.3.0,1.4.0,,,,,,,,,1.4.0,,,,,,,0,,,,,,,,,,,,,,,,,,10/Jul/08 06:41;ffang;CAMEL-688.patch;https://issues.apache.org/jira/secure/attachment/12462552/CAMEL-688.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-07-10 06:49:06.137,,,no_permission,,,,,,,,,,,,,83177,,,Wed Jul 23 03:57:31 UTC 2008,,,,,,,0|i01drz:,6001,,,,,,,,,"10/Jul/08 03:26;ffang;sorry, not complete the subject of this issue, and I have no permission to edit it :-(
the subject of this issue should be 
""process method of BeanProcessor should check ExchangePattern before set out message""
this part
           if (value != null) {
                exchange.getOut().setBody(value);
           }
the exchange.getOut() might return null if the ExchangePattern is InOnly of this Exchange, so get NPE here

shoud be
           if (value != null && !exchange.getPattern().equals(ExchangePattern.InOnly)) {
                exchange.getOut().setBody(value);
            }","10/Jul/08 06:49;davsclaus;Ah good the patch uses outCapable check

Note: We can use getOut(true) to force the out message being created if not exists.

Could we have a unit test that demonstrates the NPE bug that this patch fixes? That would be awesome.","10/Jul/08 07:22;njiang;Applying this patch help me find out a CxfExchange bug in camel-cxf which do not copy the change pattern :)
I am still working on it.",10/Jul/08 07:39;davsclaus;Target for 1.4,"10/Jul/08 09:40;davsclaus;I found a side effect for this patch.

I do think the code should be like this:
{code}
            if (value != null) {
                if (exchange.getPattern().isOutCapable()) {
                    // force out creating if not already created (as its lazy)
                    if (LOG.isDebugEnabled()) {
                        LOG.debug(""Setting bean invocation value on OUT message: "" + value);
                    }
                    exchange.getOut(true).setBody(value);
                } else {
                    // if not out then set it on the in
                    if (LOG.isDebugEnabled()) {
                        LOG.debug(""Setting bean invocation value on IN message: "" + value);
                    }
                    exchange.getIn().setBody(value);
                }
{code}

Before in some situations the bean invocation value was never set, as this route demonstrates:
{code}
                from(""direct:in"").
                    to(""bean:myBean"").
                    setHeader(FileComponent.HEADER_FILE_NAME, ""hello.txt"").
                    to(""file://target"");
{code}

","10/Jul/08 09:41;davsclaus;As Gert have pointed out on the dev forum we should step up and find out what we want with this MEP that can turn into a mess:

http://www.nabble.com/ExchangePattern-handling-in-Camel-td18378396s22882.html",10/Jul/08 10:15;davsclaus;Okay I have comitted my change and added unit test to demonstrate the bug caused by the original patch.,"10/Jul/08 10:20;davsclaus;D:\project\camel\camel-core>svn commit --message ""CAMEL-688: Fixed problem when bean processor did not set invocation value at all. Added unit test to demonstrate the bug.""
Sending        camel-core\src\main\java\org\apache\camel\component\bean\BeanProcessor.java
Adding         camel-core\src\test\java\org\apache\camel\component\file\BeanToFileTest.java
Transmitting file data ..
Committed revision 675500.",23/Jul/08 03:57;davsclaus;Closing 1.4 issues.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CXF - Feedback from Eduard on problems with CXF over JMS,CAMEL-686,12485014,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,davsclaus,davsclaus,08/Jul/08 11:05,23/Jul/08 03:57,14/Mar/19 02:42,10/Jul/08 04:02,1.4.0,,,,,,,,,,1.4.0,,,camel-cxf,,,,0,"See user forum:
http://www.nabble.com/Fwd%3A-Using-Apache-Camel-as-Transport-for-Apache-CXF-with-SOAP-over-JMS-td18314917s22882.html",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-07-09 06:49:22.886,,,no_permission,,,,,,,,,,,,,83327,,,Wed Jul 23 03:57:31 UTC 2008,,,,,,,0|i01drj:,5999,,,,,,,,,08/Jul/08 12:42;davsclaus;Lets see how much Willem makes before the next 1.4 RC ;). Set the fix to 1.4.,"09/Jul/08 06:49;njiang;FYI,  there are some discussions about the protocol header.
http://www.nabble.com/-PROPOSAL--ProtocolMessage-to18078001s22882.html#a18078001
",10/Jul/08 04:02;njiang;The patch and test case are all in the trunk now.,23/Jul/08 03:57;davsclaus;Closing 1.4 issues.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JMS - propation of message properties should honor jms spec that only primitives is allowed,CAMEL-685,12485325,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,davsclaus,davsclaus,davsclaus,08/Jul/08 11:05,11/Jul/08 04:21,14/Mar/19 02:42,08/Jul/08 12:07,1.3.0,1.4.0,,,,,,,,,1.4.0,,,camel-jms,,,,0,"See the user forum:
http://www.nabble.com/Fwd%3A-Using-Apache-Camel-as-Transport-for-Apache-CXF-with-SOAP-over-JMS-td18314917s22882.html

Basically JmsBinding should check for primitives before setting the object property on the jms message.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,83178,,,Tue Jul 08 12:06:54 UTC 2008,,,,,,,0|i01drb:,5998,,,,,,,,,"08/Jul/08 11:50;davsclaus;Will allow primitive types, strings, numbers etc.

But objects will be skipped
2008-07-08 13:47:29,843 [main           ] DEBUG JmsBinding                     - Ignoring non primitive header: order of class: org.apache.camel.component.jms.issues.DummyOrder with value: DummyOrder{orderId=333, itemId=4444, quantity=2}
",08/Jul/08 12:06;davsclaus;Fixed in Revision #674786,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Instrumentation agent should be able to register multiple instances of a processor,CAMEL-679,12485066,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,wtam@iona.com,wtam@iona.com,07/Jul/08 05:05,10/Jul/08 19:56,14/Mar/19 02:42,08/Jul/08 12:37,1.4.0,,,,,,,,,,1.4.0,,,camel-core,,,,0,"If you have a route like this: from(""jms:queue"").to(""bean:testBean"").to(""bean:testBean""),
the second instance of the processor ""to(bean:testBean)"" will fail to register with mbean server because of duplicated objectname.  As a result, only one instance of the ""to(bean:testBean)"" processor is visible to mbean server and we won't set the performance counter of the second instance.

 http://www.nabble.com/Starting-Camel-context-causes-JMX-exception.-tp18304692s22882p18304692.html
",,,,,,,,,,,,,,,,,07/Jul/08 06:48;wtam@iona.com;patch.txt;https://issues.apache.org/jira/secure/attachment/12462509/patch.txt,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-07-08 12:37:41.763,,,no_permission,,,,,,,,,,,,,83328,,,Tue Jul 08 12:37:41 UTC 2008,,,,,,,0|i01dq7:,5993,,,,,,,,,"07/Jul/08 06:46;wtam@iona.com;Patch to include node id in processor's objectname.  Since node id is an option id, instrumentation agent adds instance id into the objectname as well.",08/Jul/08 12:37;davsclaus;Applied patch with thanks to William Tam.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BAM example does not work,CAMEL-677,12485081,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,chris@die-schneider.net,chris@die-schneider.net,06/Jul/08 17:09,23/Jul/08 03:57,14/Mar/19 02:42,11/Jul/08 16:45,1.4.0,,,,,,,,,,1.4.0,,,camel-bam,,,,0,Currently the BAM example is commented out for the distribution. As Claus said probably as it does not work at the moment. Does anyone know what exactly goes wrong with the example?,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-07-07 04:30:58.468,,,no_permission,,,,,,,,,,,,,83329,,,Wed Jul 23 03:57:31 UTC 2008,,,,,,,0|i01dpr:,5991,,,,,,,,,"07/Jul/08 04:30;davsclaus;On my trunk I get this output
{code}
[INFO] [camel:run]
[pache.camel.spring.Main.main()] Main                           INFO  Apache Camel 1.4-SNAPSHOT starting
[pache.camel.spring.Main.main()] Main                           INFO  Generating DOT file for routes: D:\project\camel\examples\camel-example-bam\target/site/cameldoc for: org.apache.camel.spring.SpringCamelContext@bdb6ae with name: camel
Failed to load preferences.  Proceeding with defaults:

[         ActivityMonitorEngine] BamFailures                    ERROR Exchange[Message: ActivityState[3 on ProcessInstance[p1] Activity[1 name: file:src/data/invoices?noop=true]]]
[         ActivityMonitorEngine] BamFailures                    ERROR Exchange[Message: ActivityState[5 on ProcessInstance[p2] Activity[1 name: file:src/data/invoices?noop=true]]]
[         ActivityMonitorEngine] BamFailures                    ERROR Exchange[Message: ActivityState[6 on ProcessInstance[p3] Activity[1 name: file:src/data/invoices?noop=true]]]
Stopping
{code}","08/Jul/08 12:47;davsclaus;Revision: 666227
Author: jstrachan
Date: 19:33:36, 10. juni 2008
Message:
removed the BAM examples from the distro until we can figure out how to get the example working again :)
----
Modified : /activemq/camel/trunk/apache-camel/src/main/descriptors/unix-bin.xml
Modified : /activemq/camel/trunk/apache-camel/src/main/descriptors/windows-bin.xml


",08/Jul/08 12:48;davsclaus;James any update on this? Can you try again. It seems fine on my windows laptop. Any mac / unix out there to try it on their platform?,"11/Jul/08 07:09;davsclaus;Claus,

Doesn't this output report three missing files now instead of just one (for the missing invoiceB.xml) or am I just mis-interpreting the log output?  Only invoiceB.xml is missing for purchase order p2 and these errors seems to indicate BAM failures for all three PO/Invoice combinations.

Regards,

Gert
",11/Jul/08 16:43;davsclaus;Okay got the sample to work again.,"11/Jul/08 16:45;davsclaus;Readded the bam-example in the bin dist

D:\project\camel\apache-camel>svn commit --message ""CAMEL-677: BAM example now works again.""
Sending        apache-camel\src\main\descriptors\unix-bin.xml
Sending        apache-camel\src\main\descriptors\windows-bin.xml
Transmitting file data ..
Committed revision 676027.",23/Jul/08 03:57;davsclaus;Closing 1.4 issues.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
intercept with stop and predicate causes NPE,CAMEL-675,12485340,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,davsclaus,davsclaus,davsclaus,06/Jul/08 07:56,11/Jul/08 04:21,14/Mar/19 02:42,06/Jul/08 09:43,1.4.0,,,,,,,,,,1.4.0,,,camel-core,,,,0,"I am working to improve the intercept DSL documentation and the new stop() type

This code fails with a NPE

{code}
    public void testInterceptor() throws Exception {
        MockEndpoint mockOk = getMockEndpoint(""mock:ok"");
        mockOk.expectedBodiesReceived(""Camel in Action"");

        template.sendBodyAndHeader(""direct:order"", ""Camel in Action"", ""user"", ""James"");

        mockOk.assertIsSatisfied();
    }

    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            public void configure() throws Exception {
                intercept(header(""user"").isEqualTo(""test"")).to(""mock:test"").stop();

                from(""direct:order"").to(""mock:ok"");
            }
        };
    }


java.lang.NullPointerException
	at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:48)
	at org.apache.camel.processor.Interceptor.process(Interceptor.java:41)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:69)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:155)
{code}

",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,83330,,,Sun Jul 06 09:43:57 UTC 2008,,,,,,,0|i01dpb:,5989,,,,,,,,,06/Jul/08 09:43;davsclaus;See ChoiceProcessor#process,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Transactional Client - Uses DeadLetterChannel to much,CAMEL-667,12484750,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,04/Jul/08 10:24,06/Jul/08 06:29,14/Mar/19 02:42,04/Jul/08 19:51,1.4.0,,,,,,,,,,1.4.0,,,camel-core,camel-spring,,,0,"The new changes to the transactional client EIP pattern to let Camel support spring based TX does a trick to the DLC to set its max redeliveries to 1 if in transacted mode.
This causes the normal DLC code to be executed and it will report that in case of failures that its being handled by its error handler, this is normally to move it to an error queue.
This of course doesn't happen. The DLC should be short cutted to let the underlying system handling the redelivery without the DLC infecting it currently. 
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-07-04 12:58:45.113,,,no_permission,,,,,,,,,,,,,83331,,,Fri Jul 04 19:51:37 UTC 2008,,,,,,,0|i01dnj:,5981,,,,,,,,,04/Jul/08 12:37;davsclaus;Maybe a better approach than my current fix is to not add the DLC to the route node in questions that are under transactional control somehow with the policy element?,"04/Jul/08 12:58;jstrachan;BTW I've just added a TransactionalErrorHandlerBuilder...

https://issues.apache.org/activemq/browse/CAMEL-663

that never retries - but just rollsback the transaction which might be better for transacational routes.

You can now use XML to specify this on the <camelContext> <route> or a <pipeline> now
https://issues.apache.org/activemq/browse/CAMEL-662
https://issues.apache.org/activemq/browse/CAMEL-661


",04/Jul/08 13:05;davsclaus;Ah maybe we should try switching whatever error handler the node has currently set (ie DLC as default) to the transaction one instead?,04/Jul/08 18:52;davsclaus;The new TransactionErrorHandlerBuilder is in camel-spring and the others is in camel-core.,04/Jul/08 19:00;jstrachan;Yeah - its in camel-spring as it depends on spring. We should have a ponder for 1.5 or 2.0 as to whether Spring transaction based error handler - or a retry/deadletter is the best default,"04/Jul/08 19:51;davsclaus;Fixed with CAMEL-663 and that end-users should switch error handler to the transaction one instead of the default.

Later as James write we can change the behavior in Camel 1.5 or 2.0.
Also the wiki documentation for the transactional client has been updated with this new error handler.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Operattion namespace never gets set.,CAMEL-664,12485330,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,wtam@iona.com,wtam@iona.com,03/Jul/08 21:50,06/Jul/08 08:03,14/Mar/19 02:42,04/Jul/08 06:26,1.4.0,,,,,,,,,,1.4.0,,,camel-cxf,,,,0,"Operattion namespace never gets set.  As the result, invoking an operation that has a different namespace than the service will not work.",,,,,,,,,,,,,,,,,03/Jul/08 21:53;wtam@iona.com;patch.txt;https://issues.apache.org/jira/secure/attachment/12462592/patch.txt,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-07-04 06:26:28.864,,,no_permission,,,,,,,,,,,,,83332,,,Fri Jul 04 06:26:28 UTC 2008,,,,,,,0|i01dmv:,5978,,,,,,,,,03/Jul/08 21:51;wtam@iona.com;quick fix attached,04/Jul/08 06:26;davsclaus;Williem have applied the patch with thanks,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CsvDataFormat.marshal never uses custom CSVConfig,CAMEL-657,12485006,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,bfrackie,bfrackie,02/Jul/08 13:19,06/Jul/08 06:30,14/Mar/19 02:42,02/Jul/08 19:08,1.3.0,,,,,,,,,,1.4.0,,,,,,,0,"Affected class: org.apache.camel.dataformat.csv.CsvDataFormat 

Method ""marshal"" has a strange behaviour. The CSVConfig for the CSVWriter can not be set via setConfig, because ""marshal"" has this line:

{code}
CSVConfig conf = createConfig();
{code}

Therefore you can not use your own CSVConfig to adjust marshalling. 

Fix proposal:

- remove method createConfig
- see unmarshaling with corresponding getter/setter



",not relevant,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-07-02 19:08:12.163,,,no_permission,,,,,,,,,,,,,83179,,,Sun Jul 06 06:30:56 UTC 2008,,,,,,,0|i01dlb:,5971,,,,,,,,,"02/Jul/08 19:08;davsclaus;Bart, thanks alot for the bug report. It should be fixed now using:
{code}
CSVConfig conf = getConfig();
{code}
that will use the config from the setter if provided.",06/Jul/08 06:30;davsclaus;Closing 1.4 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jython Expressions always return null/false,CAMEL-655,12485069,12485300,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,ammulder,ammulder,01/Jul/08 20:03,23/Jul/08 03:57,14/Mar/19 02:42,10/Jul/08 04:49,1.3.0,1.4.0,,,,,,,,,1.4.0,,,camel-script,,,,0,"A Jython expression used for example like this always returns null, which is now translated to false:

from(""..."").choice().when().jython(""some expression"").to(...)

For example, here's an expression that always evaluates to null/false:

request.headers['foo'] == 'bar'

To see this, look at the test PythonExpressionTest in the camel-script module.
","Jython 2.2.1, camel-script 1.3.0/1.4.0-SNAPSHOT, jython integration lib from java.net or logicblaze.com repo",,,,,,,,,,,,,,,,08/Jul/08 06:06;dcoleman;CAMEL-655.patch.txt;https://issues.apache.org/jira/secure/attachment/12462551/CAMEL-655.patch.txt,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-07-03 08:39:45.19,,,no_permission,,,,,,,,,,,,,83180,,,Wed Jul 23 03:57:31 UTC 2008,,,Patch Available,,,,0|i01dkv:,5969,Unit Test Broken,,,,,,,,"01/Jul/08 20:04;ammulder;I asked a Jython guy and here's what I got:

---------

The Python syntax is correct, but the Jython script engine does not return the value of the expression from engine.eval.  I think you need to put the value into the context.  This is how it used to work pre-JSR, and a quick test show this still works.  

In the following quick and dirty example, the output is always null, but the result.flag is getting set correctly.

---------
{code:java}
import java.io.FileReader;
import java.io.Reader;
import java.util.HashMap;
import java.util.Map;

import javax.script.ScriptEngine;
import javax.script.ScriptException;
import javax.script.ScriptEngineFactory;
import javax.script.ScriptEngineManager;

public class ScriptEval {
    public static void main(String[] args) throws Exception {
        final ScriptEngineManager manager = new ScriptEngineManager();
        final ScriptEngine engine = manager.getEngineByName(""jython"");

        final MyRequest request = new MyRequest(args[0]);
        engine.put(""request"", request);
        final EvalResult result = new EvalResult();
        engine.put(""result"", result);
        final Reader script = new FileReader(args[1]);
        System.out.printf(""Output: %s\n"", engine.eval(script));
        System.out.printf(""Result value: %s\n"", result.getFlag());
    }
}

class MyRequest {
    private Map<String, String> headers;

    public MyRequest(final String value) {
        headers = new HashMap<String, String>();
        headers.put(""console"", value);
        headers.put(""other_key"", ""other_value"");
    }

    public Map<String, String> getHeaders() {
        return headers;
    }
}

class EvalResult {
    private boolean flag;

    public void setFlag(final boolean flag) {
        this.flag = flag;
    }

    public boolean getFlag() {
        return flag;
    }
}
{code}","01/Jul/08 20:23;ammulder;A follow-up from Dave, my Jython guy.  We'd obviously need to massage this a bit if we were going to go this way, but it's an option.

-----------

It figures that I found Invocable right after I sent that out.  This works:

args[0] should be the value you want for request.headers['foo']
args[1] should be the name of the script file

{code:java|title=JyScript.java}
import java.io.*;
import java.util.*;
import javax.script.*;

public class JyScript {
    public static void main(String[] args) throws Exception {
        final ScriptEngineManager manager = new ScriptEngineManager();
        final ScriptEngine engine = manager.getEngineByName(""jython"");
        final MyRequest request = new MyRequest(args[0]);
        engine.put(""request"", request);
        engine.eval(new BufferedReader(new FileReader(args[1])));
        final Invocable invocable = (Invocable) engine;
        Object result = invocable.invokeFunction(""is_console_header_value"", ""bar"");
        System.out.printf(""Result is: %s"", result);
    }
}

class MyRequest {
    private Map<String, String> headers;

    public MyRequest(final String value) {
        headers = new HashMap<String, String>();
        headers.put(""foo"", value);
        headers.put(""other_key"", ""other_value"");
    }

    public Map<String, String> getHeaders() {
        return headers;
    }
}
{code}

{code:title=my_func.py}
def is_console_header_value(val):
    return request.headers['foo'] == val
{code}","03/Jul/08 08:39;njiang;Jython engin.eval(""print a"") always return null,
I got a way to walk around it by set the result value to result variable.

Please check the latest camel svn trunk for more information.

","03/Jul/08 08:48;davsclaus;Willem, please add code comments that you do this deliberately for the phyton, jython engines - with the result stuff.

And a small cosmetic issue. Please uppercase the first letter when outputting to debugger.","03/Jul/08 08:48;davsclaus;And Willem, there is another jira ticket for script unit test is not running - you have fixed this now - great. You can close that ticket.","08/Jul/08 06:06;dcoleman;The Jython JSR-223 engine defaults to compiling code in ""exec"" mode.
Changing this to ""eval"" mode allows Py.runCode() to return results to engine.eval()

{code}
if (isPython()) {
    ScriptContext context = engine.getContext();
    context.setAttribute(""com.sun.script.jython.comp.mode"", ""eval"", ScriptContext.ENGINE_SCOPE);
}
{code}

CAMEL-655.patch.txt fixes ScriptBuilder.java and the unit tests
","08/Jul/08 06:38;njiang;cool, I will take care of this patch.","10/Jul/08 04:25;hadrian;Not critical for the 1.4 release, I suppose.","10/Jul/08 04:49;njiang;I think the patch resolved that issue, and I also committed it into the trunk.
Now it is a port of camel 1.4 :)",10/Jul/08 04:49;njiang;The patch is in the trunk now.,23/Jul/08 03:57;davsclaus;Closing 1.4 issues.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bean method lost when sending a message from one JMS queue to another,CAMEL-653,12484992,12485958,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,belmore,belmore,30/Jun/08 12:57,06/Jul/08 06:30,14/Mar/19 02:42,02/Jul/08 18:45,1.3.0,1.4.0,,,,,,,,,1.4.0,,,camel-jms,,,,0,"I noticed a problem in JmsBinding.java. If Camel has read a JMS message from a queue and that message has a bean method specified in the header (""org.apache.camel.MethodName""), the method header will removed if that message is written to another queue. Here's the offending code: 

    protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName, 
                                         Object headerValue) { 
        return headerValue != null && !getIgnoreJmsHeaders().contains(headerName) 
               && ObjectHelper.isJavaIdentifier(headerName); 
    } 

""org.apache.camel.MethodName"" fails the check isJavaIdentifier and is excluded from the headers written to the new message. I'm not sure the purpose of this check, but this might be an unintended side effect. 

The call chain is something like this: 

JmsProducer.process 
JmsBinding.makeJmsMessage 
JmsBinding.appendJmsProperties 
JmsBinding.shouldOutputHeader 

Update: Experimenting later with WebLogic's JMS, I noticed that WebLogic (9.2) does not allow this header name. Maybe this was the original motivation for this check. In order to be compatible with WebLogic, perhaps the method header name should changed to something like ""CamelMethod"". I believe this would correct both problems.","Windows XP, ActiveMQ",,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-06-30 13:14:09.172,,,no_permission,,,,,,,,,,,,,83181,,,Sun Jul 06 06:30:56 UTC 2008,,,,,,,0|i01dkf:,5967,,,,,,,,,"30/Jun/08 13:14;davsclaus;Yes the JMS spec doesn't allow dots in header names for JMS properties.

So either there should be some convention to substitute dots to underscore and reverse when receive the message (not nice).
Or to use simpler header names without dots.","30/Jun/08 13:15;davsclaus;We should agree how to handle properties on exchanges. Maybe all the dot should be removed, even though we favor to use keys that has a package name of some sort.","30/Jun/08 13:16;davsclaus;Marat has a patch to the transactional client not working properly that uses an helper (ExchangeProperties) to access properties on exchanges. Using this indirection we can ensure that dots and other non wanted names is not used.

However we could break old application that still uses dots in the headers. Okay we should discuss this on the dev forum.","01/Jul/08 09:44;davsclaus;Also affected by 1.4.

Target for 1.5 to address this. We could for being backwards compatible add two headers
- the original long name with package name with dots
- without packagename

And let the bean component look for the header in the two keys?

Later we could use the ExchangeProperty feature where we have a mean to address more generally the dot problem with JMS destinations.

Bruce are you in a desperate need for a fix? Or can you wait for 1.5?","01/Jul/08 13:06;belmore;Claus,

I'd rather not resort to changing the Camel source myself. On the hand, I know a simple change that I could make (changing the method header name constant in the BeanInfo) that would fix the problem.
Thanks!

Bruce

",01/Jul/08 16:15;davsclaus;If you have a unit test or route example that demonstrates the bug then we will be faster to implement a fix for it.,02/Jul/08 04:46;davsclaus;There are some tickets for the JMS header exclusion stuff as using illegal characters in MQ / WebLogic is prohibited and what we should do to avoid this problem.,"02/Jul/08 05:33;davsclaus;I am adding a workaround special for BeanProcessor so we can send {{org.apache.camel.MethodName}} over the wire, and being backwards compatible so end-users doesn't need to change their code.

The workaround is to send {{org.apache.camel.MethodName}} as {{org_apache_camel_MethodName}} and have BeanProcessor fallback to the underscore if the regular key wasn't found.","02/Jul/08 06:43;davsclaus;The workaround works but I am not satisfied. Asking for thoughts on this in the dev forum.
We have the same problem for the FileComponent.

My best shot is to fix Camel headers only by
- the key must start with ""org.apache.camel"" 
- will use underscore and restore the key when Camel consumes the message again","02/Jul/08 13:00;belmore;Keep in mind that if the user is using WebLogic's JMS (at least WL 9.2), a message with the header named ""org.apache.camel.Method"" will be rejected when you initially try to add it to a queue.

The problem that I was initially describing (the header getting stripped off when writing to second queue) would be true regardless of the implementation of the JMS queue (even ActiveMQ).

Off the top of my head, I'd think a solution would be to change the constant to use the underscores and change the logic in the BeanProcessor and BeanInfo to handle the method being specified by either ""org.apache.camel.Method"" or ""org_apache_camel_Method"".

","02/Jul/08 15:18;davsclaus;Bruce that was also my first shot on the solution = hacking BeanProcessor to accept headers with underscore as well.
But then again I wanted to try a generic solution that also works for the FileProducer and other areas in Camel where headers use package name.

So a solution to handle {{org.apache.camel}} specially would be ideal for a first shot solution. Or maybe even better replacing all dots with underscore and if the headerkey is a valid java identifier then its accepted.","02/Jul/08 18:45;davsclaus;Okay got it into the trunk now.

See JmsBeanMethodHeaderTest added to jms component unit tests
And there is also one for the file example as well.

Notice only dot to underscore is supported and the header key must still be a java identifier to be accepted, so no other funny chars in the name is allowed.
",06/Jul/08 06:30;davsclaus;Closing 1.4 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-cxf example build.xml is out of date,CAMEL-652,12484627,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,30/Jun/08 09:24,06/Jul/08 08:03,14/Mar/19 02:42,30/Jun/08 11:51,1.3.0,,,,,,,,,,1.4.0,,,examples,,,,0,Need to update the build.xml of example-camel-cxf to support run the examples of camel transport and web service provider API.,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,83182,,,Mon Jun 30 11:51:26 UTC 2008,,,,,,,0|i01dk7:,5966,,,,,,,,,30/Jun/08 11:51;njiang;The build.xml is updated.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BeanProcessor more intelligent choosing of correct method (AOP proxies problems),CAMEL-651,12484777,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,30/Jun/08 06:55,06/Jul/08 06:29,14/Mar/19 02:42,01/Jul/08 16:27,1.4.0,,,,,,,,,,1.4.0,,,camel-core,,,,0,"The example: example-spring-jms using AOP proxies as a part of the enhancer server demonstration to do somekind of audit tracking using aspectj and spring.

However Camel now have trouble picking the correct method (broken in later 1.4-SNAPSHOT) or as the AOP proxied object now has an removeAdvisor(int) method that Camel think it can invoke also.

However the BeanInfo#chooseMethodWithMatchingBody method doens't consider the MEP pattern (InOut etc). So when there is an Out pattern the method should not be void.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,83333,,,Tue Jul 01 14:31:17 UTC 2008,,,,,,,0|i01djz:,5965,,,,,,,,,"30/Jun/08 07:18;davsclaus;Okay got a better matching now considering the MEP pattern.

Will now skip void methods for out capable exchanges.","01/Jul/08 14:31;davsclaus;This issue can be closed, however would be nice with an exclude list of known AOP proxy methods. But its not a show stopper to cut a new 1.4.0 RC",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
log4j.properties in apache-camel-1.4.0.jar,CAMEL-650,12485213,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,davsclaus,davsclaus,30/Jun/08 04:39,12/Jul/08 08:45,14/Mar/19 02:42,11/Jul/08 17:07,1.4.0,,,,,,,,,,1.4.0,,,camel-core,,,,0,In the big jar file apache-camel-1.4.0.jar we have included log4j.properties in the root classpath. This file should not be there. Its very annoying.,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,83334,,,Mon Jun 30 04:43:28 UTC 2008,,,,,,,0|i01djr:,5964,,,,,,,,,"30/Jun/08 04:40;davsclaus;Also the big jars contain the package

org.apache.camel.issues that contains unit tests",30/Jun/08 04:40;davsclaus;Also unit tests in org.apache.camel.management,30/Jun/08 04:41;davsclaus;And some spring xml test files in org.apache.camel.model as well,30/Jun/08 04:42;davsclaus;Unit tests in the org.apache.camel.processor package as well,30/Jun/08 04:43;davsclaus;And unit tests in util and view,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel JMX useJmx=false does not work,CAMEL-643,12484782,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,davsclaus,davsclaus,27/Jun/08 17:52,06/Jul/08 06:29,14/Mar/19 02:42,27/Jun/08 17:54,1.4.0,,,,,,,,,,1.4.0,,,camel-core,,,,0,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,83335,,,Fri Jun 27 17:53:57 UTC 2008,,,,,,,0|i01di7:,5957,,,,,,,,,27/Jun/08 17:53;davsclaus;See patch in CAMEL-637,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jms aggregation does not work,CAMEL-642,12485552,12486175,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,27/Jun/08 12:51,31/Oct/08 12:52,14/Mar/19 02:42,04/Jul/08 08:32,1.4.0,,,,,,,,,,1.4.0,,,camel-jms,,,,0,"I found this issue when I test  Camel 1.4.0 RC2 kit, I just add a test case to show the error.

https://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-jms/src/test/java/org/apache/camel/component/jms/AggregratedJmsRouteTest.java

You can reproduce the error if you remove the x character from xtestJmsMulticastAndAggregration() method.

BTW the test case works with the Camel 1.4.0 RC1.",,,,,,,,,,,,,,,,,02/Jul/08 21:40;wtam@iona.com;AggregatedJmsRouteTest.patch.txt;https://issues.apache.org/jira/secure/attachment/12462533/AggregatedJmsRouteTest.patch.txt,02/Jul/08 08:52;wtam@iona.com;defaultcamelcontext_patch.txt;https://issues.apache.org/jira/secure/attachment/12462648/defaultcamelcontext_patch.txt,02/Jul/08 08:19;wtam@iona.com;patch.txt;https://issues.apache.org/jira/secure/attachment/12462593/patch.txt,,,3.0,,,,,,,,,,,,,,,,,,,2008-06-27 22:44:11.02,,,no_permission,,,,,,,,,,,,,83336,,,Fri Jul 04 08:32:38 UTC 2008,,,,,,,0|i01dhz:,5956,,,,,,,,,"27/Jun/08 22:44;marat;I'm a little bit surprised how this test could have worked at all...

Looking at the route that this test is testing: 

from(""jms:queue:reply"").aggregator(header(""cheese"").....

and then debugging through it show that this portion of the route 'from(""jms:queue:reply)'  creates an event driven JMS consumer, and then the 'aggregator' bit creates a JMS polling consumer on the *same* destination.

This is clearly a race, as we now have two consumers competing for messages off the same destination.

It seems a possible fix for this type of construct would be having the 'from' type realize that its followed by an aggregator and then disable creation of its even driven consumer and letting the aggregator get the messages and then deliver them to their ultimate destinations

Comments?",02/Jul/08 04:23;wtam@iona.com;I'm looking into ti.,"02/Jul/08 08:19;wtam@iona.com;The problem is we shouldn't create eventdrivenroute if it is an aggregator.  Otherwise, we see the race condition that marat mentioned.   If we don't wrap aggregator with an interceptor, it normally invokes the ""addRoutes"" method in AggregatorType and EventDrienRoute will not be added.   But if we do wrap with an interceptor, the interceptor becomes the first node and it will create an event drive route.   Attached a patch that sets a flag in the routecontext.  if a route has been added, it won't try to add an event driven route.","02/Jul/08 08:52;wtam@iona.com;also, need the second patch  to fix a NPE where routes can be uninitialized.","02/Jul/08 19:54;davsclaus;Willem Jiang has commited the patch. However unit test fails on my local laptop:

{code}
-------------------------------------------------------------------------------
Test set: org.apache.camel.component.jms.AggregratedJmsRouteTest
-------------------------------------------------------------------------------
Tests run: 2, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 28.204 sec <<< FAILURE!
testJmsMulticastAndAggregration(org.apache.camel.component.jms.AggregratedJmsRouteTest)  Time elapsed: 21.625 sec  <<< ERROR!
java.lang.AssertionError: mock:reply Received message count. Expected: <2> but was: <0>
            at org.apache.camel.component.mock.MockEndpoint.fail(MockEndpoint.java:662)
            at org.apache.camel.component.mock.MockEndpoint.assertEquals(MockEndpoint.java:644)
            at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:223)
            at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:199)
            at org.apache.camel.component.jms.AggregratedJmsRouteTest.testJmsMulticastAndAggregration(AggregratedJmsRouteTest.java:66)
{code}","02/Jul/08 21:10;wtam@iona.com;Claus, could you enable debug and attached the camel-test.log from the camel-jms/target?  Will have a look.","02/Jul/08 21:40;wtam@iona.com;when debug logging is enabled, i sometimes get this failure (but i at least get one message delivered).  please see my patch that add a wait in the test.",04/Jul/08 06:34;davsclaus;If JMX is disable then it runs on my laptop,"04/Jul/08 07:30;wtam@iona.com;Claus, turn on debug log and run the test, search the log for ""Routing Rules are"".   See if you find something like:

2008-07-02 17:44:37,698 [main           ] DEBUG AggregratedJmsRouteTest        - Routing Rules are: [AggregatorRoute[Endpoint[jms:queue:test.b] -> sendTo(Endpoint[mock:result])],  ....

If you see ""EventDrivenRoute"" instead, that means you haven't picked up the fix.  Let me know.

","04/Jul/08 07:43;wtam@iona.com;Claus, more specifically, look for the endpoint ""jms:queue:reply"" and verify it is a ""AggregatorRoute[Endpoint[jms:queue:reply] -> sendTo(Endpoint[mock:reply])]"".  There are some EventDrivenConsumerRoute for other endpoints and they are fine.","04/Jul/08 08:32;davsclaus;Yes it works now out-of-the-box with no svn diffs.

Thanks William for your hard work on this one.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wrong/missing entries in spring.schemas file,CAMEL-641,12485276,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,gertvanthienen,gertvanthienen,gertvanthienen,27/Jun/08 09:41,11/Jul/08 04:21,14/Mar/19 02:42,28/Jun/08 12:22,1.3.0,,,,,,,,,,1.4.0,,,camel-spring,camel-spring-integration,,,0,"spring.schema files contains the correct entries for camel-spring
{noformat}
http\://activemq.apache.org/camel/schema/spring/camel-spring.xsd=camel-spring.xsd

http\://activemq.apache.org/camel/schema/spring/camel-spring-1.0.0.xsd=camel-spring.xsd
http\://activemq.apache.org/camel/schema/spring/camel-spring-1.1.0.xsd=camel-spring.xsd
http\://activemq.apache.org/camel/schema/spring/camel-spring-1.2.0.xsd=camel-spring.xsd
http\://activemq.apache.org/camel/schema/spring/camel-spring-1.3.0.xsd=camel-spring.xsd
http\://activemq.apache.org/camel/schema/spring/camel-spring-1.4.0.xsd=camel-spring.xsd
{noformat}

...but others (like camel-osgi, camel-spring-integration) have missing entries or even wrong (old SNAPSHOT) entries.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,83183,,,Sat Jun 28 12:22:44 UTC 2008,,,,,,,0|i01dhr:,5955,,,,,,,,,28/Jun/08 12:22;gertvanthienen;Fixed in http://svn.eu.apache.org/viewvc?view=rev&revision=672500,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jaba.io.NotSerializableException - JAXB - ActiveMq when unmarshalled objects are send to VM ActiveMQ,CAMEL-638,12485430,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,cmoulliard,cmoulliard,26/Jun/08 08:29,14/Jul/08 14:48,14/Mar/19 02:42,11/Jul/08 15:47,1.4.0,,,,,,,,,,1.4.0,,,camel-jaxb,,,,0,"When I unmarshall a xml file using Jaxb through Camel and that I send the result to an in-memory ActiveMq queue (brokerURL = VM), I receive the following error :

1) Error

GRAVE: Failed delivery for exchangeId: ID-dell-charles/1108-1214228785562/0-2. On delivery attempt: 0 caught: java.lang.RuntimeException: com.company.soft.type.schema.Document
java.lang.RuntimeException: com.company.soft.type.schema.Document
        at org.apache.activemq.command.ActiveMQObjectMessage.storeContent(ActiveMQObjectMessage.java:104)
        at org.apache.activemq.command.ActiveMQObjectMessage.setObject(ActiveMQObjectMessage.java:155)
        at org.apache.activemq.ActiveMQSession.createObjectMessage(ActiveMQSession.java:317)
        at org.apache.activemq.pool.PooledSession.createObjectMessage(PooledSession.java:149)
        at org.apache.camel.component.jms.JmsBinding.createJmsMessage(JmsBinding.java:221)
        at org.apache.camel.component.jms.JmsBinding.makeJmsMessage(JmsBinding.java:136)
        at org.apache.camel.component.jms.JmsProducer$2.createMessage(JmsProducer.java:229)
        at org.springframework.jms.core.JmsTemplate.doSend(JmsTemplate.java:557)
        at org.springframework.jms.core.JmsTemplate$4.doInJms(JmsTemplate.java:538)
        at org.springframework.jms.core.JmsTemplate.execute(JmsTemplate.java:459)
        at org.springframework.jms.core.JmsTemplate.send(JmsTemplate.java:535)
        at org.apache.camel.component.jms.JmsProducer.process(JmsProducer.java:227)
        at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:61)
        at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:50)
        at org.apache.camel.processor.DelegateProcessor.process(DelegateProcessor.java:45)
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:43)
        at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43)
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:101)
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:85)
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:41)
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:57)
        at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:50)
        at org.apache.camel.processor.DelegateProcessor.process(DelegateProcessor.java:45)
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:43)
        at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43)
        at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:146)
        at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:90)
        at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:39)
        at org.apache.camel.component.file.FileConsumer.pollFile(FileConsumer.java:128)
        at org.apache.camel.component.file.FileConsumer.pollFileOrDirectory(FileConsumer.java:77)
        at org.apache.camel.component.file.FileConsumer.pollFileOrDirectory(FileConsumer.java:84)
        at org.apache.camel.component.file.FileConsumer.poll(FileConsumer.java:57)
        at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:65)
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:417)
        at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:280)
        at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:135)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:65)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:142)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:166)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675)
        at java.lang.Thread.run(Thread.java:595)
Caused by: java.io.NotSerializableException: com.company.soft.type.schema.Document
        at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1081)
        at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1375)
        at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1347)
        at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1290)
        at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1079)
        at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:302)
        at org.apache.activemq.command.ActiveMQObjectMessage.storeContent(ActiveMQObjectMessage.java:98)

2) Config

        public void configure() {

                DataFormat jaxb = new JaxbDataFormat(
                                ""com.company.soft.type.schema"");

                errorHandler(deadLetterChannel(""seda:errors"").maximumRedeliveries(1)
                                .useExponentialBackOff());
                from(
                                ""file:///c:/temp/test?moveNamePrefix=c:/temp/consumed/&moveNamePostfix=old"")
                                .unmarshal(jaxb)
                                .to(""activemq:queue:component.queue"");
                               
                               
                               
       <camelContext useJmx=""true""
              xmlns=""http://activemq.apache.org/camel/schema/spring"">                
      <package>com.company.soft.core.routing</package>
          </camelContext>
         
          <!--  ActiveMQ brokerURL using VM protocol -->
          <bean id=""activemq"" class=""org.apache.activemq.camel.component.ActiveMQComponent"">
        <property name=""brokerURL"" value=""vm://localhost:61616?broker.persistent=false""/>
      </bean>

3) Version used : apache - Camel 1.4 SNAPSHOT, ActiveMQ - 5.1 ",Win 2K,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-07-01 16:37:16.74,,,no_permission,,,,,,,,,,,,,83337,,,Fri Jul 11 15:47:10 UTC 2008,,,,,,,0|i01dh3:,5952,,,,,,,,,"01/Jul/08 16:37;davsclaus;Charles do you mind creating a sample project that demonstrates the bug? Maybe with the source / or some part of the source from com.company.soft.type.schema that isn't serializable?

If we have a failing unit test or sample project then it's much easier to reproduce the bug and fix it","11/Jul/08 15:45;cmoulliard;You can close the bug. Indeed the classes created in the package com.company.soft.type.schema weren't serialisable. After adding ""implements serializable""  to each class, my camel routes have been executed perfectly.

","11/Jul/08 15:47;cmoulliard;The JAXB classes that I created weren't serialisable. I have add to each class ""implements serialisable"" and now everything works perfectly.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ResolverUtil can't resolve converter annotations in WebSphere 6.1,CAMEL-636,12485450,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,25/Jun/08 11:40,11/Jul/08 04:21,14/Mar/19 02:42,09/Jul/08 16:18,1.4.0,,,,,,,,,,1.4.0,,,camel-core,,,,0,"I have a simple hello world file based ESB that scans a folder for files, invoke a POJO and store the output as a file in another folder.

Deployed as a WAR file in WebSphere it seems as if Camel 1.4-SNAPSHOT can not load the converters needed to converter to String to InputStream for the FileProducer when it is about to store the file.

The logging output where the ResolverUtil can't find the annotated converters in camel jar itself
{code}
[06-25 13:31:23] DEBUG ResolverUtil [Thread: 1 org.apache.camel.component.file.FileComponent@7ade7ade]: Searching for annotations of org.apache.camel.Converter in packages: [org.apache.camel.spring.converter, org.apache.camel.converter]
[06-25 13:31:23] DEBUG ResolverUtil [Thread: 1 org.apache.camel.component.file.FileComponent@7ade7ade]: Found: []
{code}

And the stacktrace:
{code}
org.apache.camel.InvalidPayloadException: No in body available of type: java.io.InputStream but has value: This is important work
\temp\camel\in\README.txt
Done by me. of type: java.lang.String on: Message: This is important work
\temp\camel\in\README.txt
Done by me. on the exchange: Exchange[Message: This is important work
\temp\camel\in\README.txt
Done by me.]
	at org.apache.camel.util.ExchangeHelper.getMandatoryInBody(ExchangeHelper.java:127)
	at org.apache.camel.component.file.FileProducer.process(FileProducer.java:67)
	at org.apache.camel.component.file.FileProducer.process(FileProducer.java:55)
	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:75)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:57)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:146)
{code}","WebSphere 6.1.0.0 on Windows
WebSphere 6.1.0.17 on Windows",,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,83338,,,Wed Jul 09 16:18:11 UTC 2008,,,,,,,0|i01dgn:,5950,,,,,,,,,"25/Jun/08 13:12;davsclaus;Just for the record. WebSphere is able to load classes from WEB-INF/classes, but not from jars in WEB-INF/lib.

If extracting camel-core into WEB-INF/classes then the annotated converters can be loaded:
{code}
[06-25 14:58:58] TRACE ResolverUtil [Thread: 1 org.apache.camel.component.file.FileComponent@76da76da]: URLs loaded: java.lang.ClassLoader$2@28ce28ce
[06-25 14:58:58] TRACE ResolverUtil [Thread: 1 org.apache.camel.component.file.FileComponent@76da76da]: Trying URL: file:/C:/was61/profiles/AppSrv01/installedApps/claus-acerNode01Cell/camel-example-helloworld-1_0fixed_war.ear/camel-example-helloworld-1.0fixed.war/WEB-INF/classes/org/apache/camel/converter/
[06-25 14:58:58] TRACE ResolverUtil [Thread: 1 org.apache.camel.component.file.FileComponent@76da76da]: Scanning for classes in [/C:/was61/profiles/AppSrv01/installedApps/claus-acerNode01Cell/camel-example-helloworld-1_0fixed_war.ear/camel-example-helloworld-1.0fixed.war/WEB-INF/classes/org/apache/camel/converter/] matching criteria: annotated with @Converter
[06-25 14:58:58] DEBUG ResolverUtil [Thread: 1 org.apache.camel.component.file.FileComponent@76da76da]: Loading from directory: C:\was61\profiles\AppSrv01\installedApps\claus-acerNode01Cell\camel-example-helloworld-1_0fixed_war.ear\camel-example-helloworld-1.0fixed.war\WEB-INF\classes\org\apache\camel\converter
[06-25 14:58:58] TRACE ResolverUtil [Thread: 1 org.apache.camel.component.file.FileComponent@76da76da]: Testing for class org.apache.camel.converter.CamelConverter$1 matches criteria [annotated with @Converter]
[06-25 14:58:58] TRACE ResolverUtil [Thread: 1 org.apache.camel.component.file.FileComponent@76da76da]: Testing for class org.apache.camel.converter.CamelConverter$2 matches criteria [annotated with @Converter]
[06-25 14:58:58] TRACE ResolverUtil [Thread: 1 org.apache.camel.component.file.FileComponent@76da76da]: Testing for class org.apache.camel.converter.CamelConverter matches criteria [annotated with @Converter]
[06-25 14:58:58] TRACE ResolverUtil [Thread: 1 org.apache.camel.component.file.FileComponent@76da76da]: Found class: class org.apache.camel.converter.CamelConverter in classloader: 
com.ibm.ws.classloader.CompoundClassLoader@68ec68ec
   Local ClassPath: C:\was61\profiles\AppSrv01\installedApps\claus-acerNode01Cell\camel-example-helloworld-1_0fixed_war.ear\camel-example-helloworld-1.0fixed.war\WEB-INF\classes;C:\was61\profiles\AppSrv01\installedApps\claus-acerNode01Cell\camel-example-helloworld-1_0fixed_war.ear\camel-example-helloworld-1.0fixed.war\WEB-INF\lib\activation-1.1.jar;C:\was61\profiles\AppSrv01\installedApps\claus-acerNode01Cell\camel-example-helloworld-1_0fixed_war.ear\camel-example-helloworld-1.0fixed.war\WEB-INF\lib\aopalliance-1.0.jar;C:\was61\profiles\AppSrv01\installedApps\claus-acerNode01Cell\camel-example-helloworld-1_0fixed_war.ear\camel-example-helloworld-1.0fixed.war\WEB-INF\lib\camel-core-1.4-SNAPSHOT.jar;C:\was61\profiles\AppSrv01\installedApps\claus-acerNode01Cell\camel-example-helloworld-1_0fixed_war.ear\camel-example-helloworld-1.0fixed.war\WEB-INF\lib\camel-spring-1.4-SNAPSHOT.jar;C:\was61\profiles\AppSrv01\installedApps\claus-acerNode01Cell\camel-example-helloworld-1_0fixed_war.ear\camel-example-helloworld-1.0fixed.war\WEB-INF\lib\commons-logging-1.1.1.jar;C:\was61\profiles\AppSrv01\installedApps\claus-acerNode01Cell\camel-example-helloworld-1_0fixed_war.ear\camel-example-helloworld-1.0fixed.war\WEB-INF\lib\commons-logging-api-1.1.jar;C:\was61\profiles\AppSrv01\installedApps\claus-acerNode01Cell\camel-example-helloworld-1_0fixed_war.ear\camel-example-helloworld-1.0fixed.war\WEB-INF\lib\jaxb-api-2.1.jar;C:\was61\profiles\AppSrv01\installedApps\claus-acerNode01Cell\camel-example-helloworld-1_0fixed_war.ear\camel-example-helloworld-1.0fixed.war\WEB-INF\lib\jaxb-impl-2.1.6.jar;C:\was61\profiles\AppSrv01\installedApps\claus-acerNode01Cell\camel-example-helloworld-1_0fixed_war.ear\camel-example-helloworld-1.0fixed.war\WEB-INF\lib\log4j-1.2.14.jar;C:\was61\profiles\AppSrv01\installedApps\claus-acerNode01Cell\camel-example-helloworld-1_0fixed_war.ear\camel-example-helloworld-1.0fixed.war\WEB-INF\lib\org.osgi.core-1.0.1.jar;C:\was61\profiles\AppSrv01\installedApps\claus-acerNode01Cell\camel-example-helloworld-1_0fixed_war.ear\camel-example-helloworld-1.0fixed.war\WEB-INF\lib\spring-aop-2.5.4.jar;C:\was61\profiles\AppSrv01\installedApps\claus-acerNode01Cell\camel-example-helloworld-1_0fixed_war.ear\camel-example-helloworld-1.0fixed.war\WEB-INF\lib\spring-beans-2.5.4.jar;C:\was61\profiles\AppSrv01\installedApps\claus-acerNode01Cell\camel-example-helloworld-1_0fixed_war.ear\camel-example-helloworld-1.0fixed.war\WEB-INF\lib\spring-context-2.5.4.jar;C:\was61\profiles\AppSrv01\installedApps\claus-acerNode01Cell\camel-example-helloworld-1_0fixed_war.ear\camel-example-helloworld-1.0fixed.war\WEB-INF\lib\spring-core-2.5.4.jar;C:\was61\profiles\AppSrv01\installedApps\claus-acerNode01Cell\camel-example-helloworld-1_0fixed_war.ear\camel-example-helloworld-1.0fixed.war\WEB-INF\lib\spring-tx-2.5.4.jar;C:\was61\profiles\AppSrv01\installedApps\claus-acerNode01Cell\camel-example-helloworld-1_0fixed_war.ear\camel-example-helloworld-1.0fixed.war\WEB-INF\lib\spring-web-2.5.4.jar;C:\was61\profiles\AppSrv01\installedApps\claus-acerNode01Cell\camel-example-helloworld-1_0fixed_war.ear\camel-example-helloworld-1.0fixed.war\WEB-INF\lib\stax-api-1.0-2.jar;C:\was61\profiles\AppSrv01\installedApps\claus-acerNode01Cell\camel-example-helloworld-1_0fixed_war.ear\camel-example-helloworld-1.0fixed.war
   Delegation Mode: PARENT_FIRST
[06-25 14:58:58] TRACE ResolverUtil [Thread: 1 org.apache.camel.component.file.FileComponent@76da76da]: Testing for class org.apache.camel.converter.CollectionConverter matches criteria [annotated with @Converter]
[06-25 14:58:58] TRACE ResolverUtil [Thread: 1 org.apache.camel.component.file.FileComponent@76da76da]: Found class: class org.apache.camel.converter.CollectionConverter in classloader: 
com.ibm.ws.classloader.CompoundClassLoader@68ec68ec
{code}","07/Jul/08 08:35;davsclaus;See also the CXF App Server Guide for WAS:
http://cwiki.apache.org/confluence/display/CXF20DOC/AppServerGuide#AppServerGuide-Websphere","09/Jul/08 05:38;davsclaus;Using the app server guide from CXF didn't help.

WebSphere is ****** it can not load resources from its classpath in jar files if you define a package name.","09/Jul/08 08:42;davsclaus;Okay looks like WebSphere doens't like to load resources if you just enter the packagename for JAR files. If you explicit enter a .class then its able to resolve it (okay I was trying with Spring resource loader).
So there is some hope. ","09/Jul/08 11:42;davsclaus;Okay I am about to tame the beast and get a working solution (fingers crossed).

Would love to get it into 1.4 so I am working on this today and tomorrow.","09/Jul/08 12:02;davsclaus;Yes got it working now. I will test it some more, and see if the camel-examples can work in WebSphere 6.1","09/Jul/08 16:18;davsclaus;Oh boy nice to be able to resolve this one. 

Camel deployed as plain war files on WebSphere 6.1 is not doable.
I have only tested on Windows XP platform. Anyone with a WebSphere on Unix would be highly appreciated if you can test it.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DeadLetterChannel default redelivery policy eclipsed expected transactional behaviour in a transacted route,CAMEL-634,12484978,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,marat,marat,24/Jun/08 22:09,06/Jul/08 06:30,14/Mar/19 02:42,01/Jul/08 14:29,1.4.0,,,,,,,,,,1.4.0,,,camel-core,camel-jms,,,0,"Camel routes get a DLC processor with a redelivery policy, which defaults to redeliverying a message to a destination processor up to 6 times.  In case of a transacted route it is preferable that DLC's delivery policy be reset to a single attempt, so that a fan-out transacted route would not hold tx locks on destinations for too long. 

The DLC's default redelivery policy has also made transactional tests not really testing tx behavior of Camel Components backed runtimes (jms brokers, etc), rather DLC would catch the exception and try to redeliver the message to destination processor and not letting the components to rollback native transactions initiated by components backed runtimes (jms, db)

The attached patch installs a property into Camel Exchange that indicates weather a route is transacted. This is done in org.apache.camel.spring.spi.TransactionInterceptor.java

DLC then checks if the flow is transacted and sets its redelivery policy to 1

With this change JMS transactions are actually rolled back and messages are put back into the queue and then consumed again, verifying that brokers support transactions and can redeliver messages into Camel routes that were previously rolled back.",,,,,,,,,,,,,,,,,24/Jun/08 22:11;marat;tx.fix.2008-06-24-16-54.patch;https://issues.apache.org/jira/secure/attachment/12462607/tx.fix.2008-06-24-16-54.patch,30/Jun/08 23:18;marat;tx.fix.2008-06-30-19-16.patch;https://issues.apache.org/jira/secure/attachment/12462609/tx.fix.2008-06-30-19-16.patch,,,,2.0,,,,,,,,,,,,,,,,,,,2008-06-26 04:09:05.411,,,no_permission,,,,,,,,,,,,,83339,,,Sun Jul 06 06:30:56 UTC 2008,,,Patch Available,,,,0|i01dg7:,5948,,,,,,,,,"26/Jun/08 04:09;davsclaus;Marat thanks a lot for the patch, we appreciate all the hard work you do to report and fix the problems. Great work.

As the 1.4 release is just about to get cut I would like to schedule this patch for 1.5. I am hoping that you don't mind this.","26/Jun/08 18:58;marat;Claus,

I don't mind that as long as the patch can be applied to trunk and the sooner the better :)","27/Jun/08 04:57;davsclaus;Marat we appreciate all your great patches for the more hardcore JMS related stuff.

I am sure this patch will be accepted and submitted to the trunk. 
The 1.4 should just be voted released before we will apply this patch to the trunk that is for the 1.5 release.

The vote for 1.4 release is in progress as I write this.
http://www.nabble.com/-VOTE--Release-apache-camel-1.4-td18146965s22882.html","29/Jun/08 15:33;davsclaus;Marat.

Could you provide a unit test for the new class ExchangeProperty also?","29/Jun/08 15:38;davsclaus;And I am wondering if we should introduce an method on Exchange interface that returns whether this exchange is in transacted mode or not?

","29/Jun/08 15:48;davsclaus;According to the spring transaction programmatic stuff you can set the rollback only status.

I am wondering if we should do this also when we do the rollback by throwing the wrapped exception?","29/Jun/08 16:36;davsclaus;I do think I got a failing exception on my local system with the patch.

{code}
-------------------------------------------------------------------------------
Test set: org.apache.camel.component.jms.tx.QueueToQueueRequestReplyTransactionTest
-------------------------------------------------------------------------------
Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 23.047 sec <<< FAILURE!
testRollbackUsingXmlQueueToQueueRequestReplyUsingDynamicMessageSelector(org.apache.camel.component.jms.tx.QueueToQueueRequestReplyTransactionTest)  Time elapsed: 22.875 sec  <<< FAILURE!
junit.framework.AssertionFailedError: Received unexpeced reply
	at junit.framework.Assert.fail(Assert.java:47)
	at junit.framework.Assert.assertTrue(Assert.java:20)
	at org.apache.camel.component.jms.tx.QueueToQueueRequestReplyTransactionTest.testRollbackUsingXmlQueueToQueueRequestReplyUsingDynamicMessageSelector(QueueToQueueRequestReplyTransactionTest.java:70)
{code}",29/Jun/08 16:58;davsclaus;I am wondering if we should also cleanup? We are adding a TRANSACTED property on the Exchange that is never removed.,29/Jun/08 17:05;davsclaus;The unit tests now all *passes* sorry my bad,"29/Jun/08 17:23;davsclaus;Marat your ExchangeProperty is quite nice. As this class is in org.apache.camel package I do think it should have javadoc stating its purpose.

Other components and end-users could start using it so it should be clearly documented and ... we should have an unit test for it also.","30/Jun/08 19:06;marat;Claus:

> Could you provide a unit test for the new class ExchangeProperty also?

Working on it.

> I am wondering if we should introduce an method on Exchange interface that returns whether this exchange is in transacted mode or not?

Sure. Will add that

> According to the spring transaction programmatic stuff you can set the rollback only status. And I am wondering if we should do this also when we do the rollback by throwing the wrapped exception?

I can add that, however it has no effect on JMS tx being rolled back as there is a bug in the way tx management is implemented in Spring's JMS DefaultListenerContainer

> We are adding a TRANSACTED property on the Exchange that is never removed.

That's not quite true I believe. As far as I can tell an Exchange lifespan is a single call flow. So if this call flow is transacted then this property is installed on it.  Once this Exchange instance is freed so are its properties.

> As this class is in org.apache.camel package I do think it should have javadoc stating its purpose.

Working on that as well.","30/Jun/08 19:21;davsclaus;We should get this in 1.4 before its release. To important to not include as the transaction client EIP pattern doesn't work otherwise.

Marats patch is surely great. Just need it to be more polished that he is working on ;)","30/Jun/08 23:19;marat;Claus:

Updated patch is attached. Note, I've added type safety check on DefaultExchange for well known set of Exchange Properties","01/Jul/08 04:25;davsclaus;Marat, do you mind documenting why you are looking as you do, for the active TX, in the code below?
You are first looking into the TSM if not found then on status, and then on the casting to DTS etc.
Is all this code really needed? You had to do it like this? I am asking because when someone else look at this code in 1-2 years he would be a little puzzled?

So I do think we should add some code comments on the strategy below and why it needed to do it like this.
You can just comment here and I will add it to the code.

{code}
activeTx = TransactionSynchronizationManager.isActualTransactionActive();
+                    if (!activeTx) {
+                        activeTx = status.isNewTransaction() && !status.isCompleted();
+                        if (!activeTx) {
+                            if (DefaultTransactionStatus.class.isAssignableFrom(status.getClass())) {
+                                DefaultTransactionStatus defStatus = DefaultTransactionStatus.class.cast(status);
+                                activeTx = defStatus.hasTransaction() && !status.isCompleted();
+                            }
+                        }
+                    }
{code}","01/Jul/08 06:33;davsclaus;D:\project\camel>svn commit --message ""CAMEL-634: Applied patch with thanks to Marat. Added unit test for transactional DataSource.""
Sending        camel-core\src\main\java\org\apache\camel\Exchange.java
Adding         camel-core\src\main\java\org\apache\camel\ExchangeProperty.java
Sending        camel-core\src\main\java\org\apache\camel\impl\DefaultExchange.java
Sending        camel-core\src\main\java\org\apache\camel\processor\DeadLetterChannel.java
Adding         camel-core\src\test\java\org\apache\camel\ExchangePropertyTest.java
Sending        components\camel-jms\src\main\java\org\apache\camel\component\jms\EndpointMessageListener.java
Sending        components\camel-jms\src\test\java\org\apache\camel\component\jms\tx\ConditionalExceptionProcessor.java
Sending        components\camel-jms\src\test\java\org\apache\camel\component\jms\tx\QueueToQueueRequestReplyTransactionTest.java
Sending        components\camel-spring\pom.xml
Sending        components\camel-spring\src\main\java\org\apache\camel\spring\spi\TransactionInterceptor.java
Adding         components\camel-spring\src\test\java\org\apache\camel\spring\interceptor\BookService.java
Adding         components\camel-spring\src\test\java\org\apache\camel\spring\interceptor\TransactionalClientDataSourceTest.java
Adding         components\camel-spring\src\test\resources\org\apache\camel\spring\interceptor\transactionalClientDataSource.xml
Transmitting file data .............
Committed revision 673008.","01/Jul/08 14:20;hadrian;Can this issue be closed?

","01/Jul/08 14:29;davsclaus;Yes it can.

Marat should just document why he uses the code he does to retrieve if the exchange is transacted from the spring TM",06/Jul/08 06:30;davsclaus;Closing 1.4 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel won't compile on AIX,CAMEL-631,12485493,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,janstey,janstey,23/Jun/08 19:04,06/Jul/08 06:35,14/Mar/19 02:42,23/Jun/08 23:31,1.4.0,,,,,,,,,,1.4.0,,,camel-core,,,,0,"Failure is:

[INFO] ------------------------------------------------------------------------
[ERROR] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Compilation failure

/x1/camel/camel-core/src/main/java/org/apache/camel/model/ProcessorType.java:[1587,18] inconvertible types
found   : org.apache.camel.model.ProcessorType<Type>
required: org.apache.camel.model.ExceptionType

/x1/camel/camel-core/src/main/java/org/apache/camel/model/ProcessorType.java:[1587,51] inconvertible types
found   : org.apache.camel.model.ProcessorType<Type>
required: org.apache.camel.model.TryType

/x1/camel/camel-core/src/main/java/org/apache/camel/model/InterceptType.java:[90,16] inconvertible types
found   : org.apache.camel.model.ProcessorType<capture of ?>
required: org.apache.camel.model.ChoiceType

/x1/camel/camel-core/src/main/java/org/apache/camel/model/InterceptType.java:[91,49] inconvertible types
found   : org.apache.camel.model.ProcessorType<capture of ?>
required: org.apache.camel.model.ChoiceType

/x1/camel/camel-core/src/main/java/org/apache/camel/management/InstrumentationLifecycleStrategy.java:[203,20] inconvertible types
found   : org.apache.camel.model.ProcessorType<capture of ?>
required: org.apache.camel.model.ExceptionType
","AIX 5.3

java version ""1.5.0""
Java(TM) 2 Runtime Environment, Standard Edition (build pap32dev-20060511 (SR2))
IBM J9 VM (build 2.3, J2RE 1.5.0 IBM J9 2.3 AIX ppc-32 j9vmap3223-20060504 (JIT enabled)
J9VM - 20060501_06428_bHdSMR
JIT  - 20060428_1800_r8
GC   - 20060501_AA)
JCL  - 20060511a
",,,,,,,,,,,,,,,,23/Jun/08 19:06;janstey;camel-aix.patch;https://issues.apache.org/jira/secure/attachment/12462608/camel-aix.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-06-23 23:31:46.726,,,no_permission,,,,,,,,,,,,,83340,,,Sun Jul 06 06:35:11 UTC 2008,,,,,,,0|i01dfj:,5945,,,,,,,,,23/Jun/08 19:06;janstey;Patch to fix this issue.,"23/Jun/08 23:31;njiang;Patch applied with thanks to Jonathan.
 http://svn.apache.org/viewvc?rev=670784&view=rev",06/Jul/08 06:35;davsclaus;Closing 1.4 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Re-add getContext/setContext to Endpoint as deprecated methods to improve backward compatibilty,CAMEL-629,12485182,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gertvanthienen,gertvanthienen,gertvanthienen,23/Jun/08 13:02,06/Jul/08 06:35,14/Mar/19 02:42,23/Jun/08 13:33,1.4.0,,,,,,,,,,1.4.0,,,camel-core,,,,0,"In recent refactorings, the getContext()/setContext() methods on Endpoint were renamed to getCamelContext()/setCamelContext().  As discussed recently (http://www.nabble.com/Deprecating-old-methods-and-changing-the-default-error-handler-td17998268s22882.html), it would be better to use deprecation for now and only actually remove the method on our next big release.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-07-06 06:35:11.62,,,no_permission,,,,,,,,,,,,,83341,,,Sun Jul 06 06:35:11 UTC 2008,,,,,,,0|i01df3:,5943,,,,,,,,,23/Jun/08 13:33;gertvanthienen;Fixed in http://svn.apache.org/viewvc?view=rev&revision=670567,06/Jul/08 06:35;davsclaus;Closing 1.4 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Apache CXF is now out of incubation and upgrade it to 2.1.1,CAMEL-626,12485175,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,23/Jun/08 04:02,06/Jul/08 06:29,14/Mar/19 02:42,23/Jun/08 04:23,1.4.0,,,,,,,,,,1.4.0,,,camel-cxf,,,,0,"Apache CXF is used in examples and the links to it in the README.txt are using the incubator.

Apache CXF 2.1.1 has just been released we should upgrade to this version also.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-06-23 04:18:36.665,,,no_permission,,,,,,,,,,,,,83342,,,Mon Jun 23 04:23:56 UTC 2008,,,,,,,0|i01def:,5940,,,,,,,,,23/Jun/08 04:04;davsclaus;Willem I did the readme fix and bumbed the pom.xml. If there are issues with the CFX component itself maybe you are the expert to look at it?,"23/Jun/08 04:18;njiang;Go ahead Claus, I will keep any eye on it :)","23/Jun/08 04:23;davsclaus;He he I tend to misspell CXF as CFX. Maybe I am not the only one, with this problem ;)","23/Jun/08 04:23;davsclaus;Sending        components\camel-cxf\pom.xml
Sending        examples\camel-example-cxf\README.txt
Sending        pom.xml
Transmitting file data ...
Committed revision 670442.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
cannot convert from a StreamSource to an InputStream,CAMEL-624,12484869,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jstrachan,jstrachan,jstrachan,20/Jun/08 11:42,11/Jul/08 04:21,14/Mar/19 02:42,20/Jun/08 11:45,,,,,,,,,,,1.4.0,,,,,,,0,"e.g. from JBI to File automaticaly

See this thread
 http://www.nabble.com/working-with-jms-tp18026353s22882p18026676.html
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,103195,,,Fri Jun 20 11:45:10 UTC 2008,,,,,,,0|i01ddz:,5938,,,,,,,,,"20/Jun/08 11:45;jstrachan;Patch applied to fix this.

A workaround for now is to use a dummy processor

{code}
from(...).process(
  new Processor() {
     public void process(Exchange exchange) {
        StreamSource source = exchange.getIn().getBody(StreamSource.class);
        if (source != null) {
            in.setBody(source.getInputStream());
        }
    }
}).
to(...)
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ResequencerType.createProcessor could throw NPE as stream config does not get initialized.,CAMEL-620,12484939,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,wtam@iona.com,wtam@iona.com,19/Jun/08 22:45,06/Jul/08 06:30,14/Mar/19 02:42,24/Jun/08 04:45,1.3.0,1.4.0,,,,,,,,,1.4.0,,,camel-core,,,,0,"java.lang.NullPointerException
	at org.apache.camel.model.ResequencerType.createStreamResequencer(ResequencerType.java:198)
	at org.apache.camel.model.ResequencerType.createProcessor(ResequencerType.java:163)
	at org.apache.camel.model.ProcessorType.createOutputsProcessor(ProcessorType.java:1584)
	at org.apache.camel.model.ProcessorType.createOutputsProcessor(ProcessorType.java:93)
	at org.apache.camel.model.InterceptorRef.createProcessor(InterceptorRef.java:61)
	at org.apache.camel.model.ProcessorType.makeProcessor(ProcessorType.java:1471)
	at org.apache.camel.model.ProcessorType.addRoutes(ProcessorType.java:97)
	at org.apache.camel.model.RouteType.addRoutes(RouteType.java:210)
	at org.apache.camel.model.RouteType.addRoutes(RouteType.java:80)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:462)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:454)
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:47)
	at org.apache.camel.ContextTestSupport.startCamelContext(ContextTestSupport.java:108)
	at org.apache.camel.ContextTestSupport.setUp(ContextTestSupport.java:81)
	at org.apache.camel.processor.ResequencerTest.setUp(ResequencerTest.java:48)
	at junit.framework.TestCase.runBare(TestCase.java:128)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:120)
	at junit.framework.TestSuite.runTest(TestSuite.java:230)
	at junit.framework.TestSuite.run(TestSuite.java:225)
	at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:130)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)
",,,,,,,,,,,,,,,,,23/Jun/08 16:38;wtam@iona.com;patch.txt;https://issues.apache.org/jira/secure/attachment/12462403/patch.txt,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-06-23 03:57:44.976,,,no_permission,,,,,,,,,,,,,83184,,,Sun Jul 06 06:30:56 UTC 2008,,,,,,,0|i01dd3:,5934,,,,,,,,,19/Jun/08 23:25;wtam@iona.com;patch attached to camel-606 has a workaround.,"23/Jun/08 03:57;davsclaus;William is this *fixed* by patch from CAMEL-606 or is it only a workaround?

We need to know if we can close this issue or there are still an issue to be addressed?","23/Jun/08 16:38;wtam@iona.com;After taking a closer look, it is indeed a fix not a workaround.  I add some tests to verify correct resequencers (batch vs stream) are created.  ","24/Jun/08 03:58;davsclaus;Great William.

Is it possible to provide these tests as a patch - would be great to include them in the source?",24/Jun/08 04:45;davsclaus;Applied patch with thanks to William.,06/Jul/08 06:30;davsclaus;Closing 1.4 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Oracle AQ contains a typo ""JMSXRecvTimeStamp"" -- the JMS spec lists  the correct spelling as ""JMSXRcvTimeStamp"". Camel's JmsBinding also has the correct spelling, but can be patched to prevent Oracle AQ from puking.",CAMEL-618,12485055,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,fucema,fucema,19/Jun/08 15:25,23/Oct/08 20:01,14/Mar/19 02:42,19/Jun/08 16:57,1.3.0,,,,,,,,,,1.4.0,,,camel-jms,,,,0,"http://www.nabble.com/%28Fixed-%29-Updated---Help-w--Oracle-JMS-and-AQjmsException-%28JMS-147%29-td17989368s22882.html

Oracle's Message implementation (AQjmsMessage) has a typo, I am pretty certain that it exists as ""JMSXRecvTimeStamp"". To workaround this typo I patched org.apache.camel.component.jms.JMSBinding to include the misspelled property name in set of ignored headers/properties.

Additionally, I believe Oracle might be setting null values for empty or missing standard and optional JMS reserved properties/headers. Most notably JMSReplyTo. This is resulting in JMSBinding attempting to set a null Destination on the JMSReplyTo header which then results in an Oracle exception. A quick patch was to check for null values and ignore them in the method JmsBinding.appendJmsProperties() for the JMSReplyTo header. A better fix is probably to prevent empty/blank headers or properties from originating at the Oracle level... assuming nulls/blanks are not allowed by the JMS 1.1 spec.

Anyhoo, I will attach some diff patches to this issue for your review. 

Cheers!
Seon","Windows XP, OC4J standalone Release 10.1.330, Oracle Database 10g Release 10.2.1.0",,,,,,,,,,,,,,,,19/Jun/08 15:50;fucema;oraclebugs.diff;https://issues.apache.org/jira/secure/attachment/12462506/oraclebugs.diff,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-06-19 15:42:15.282,,,no_permission,,,,,,,,,,,,,83185,,,Sun Jul 06 06:35:11 UTC 2008,,,Patch Available,,,,0|i01dcn:,5932,,,,,,,,,"19/Jun/08 15:29;fucema;I posted about this bug on the Oracle forums and someone replied that it has been addressed, possibly even for a future release?

Here is the link:

http://forums.oracle.com/forums/thread.jspa?messageID=2600654&#2600654","19/Jun/08 15:42;hadrian;Thanks for riding the camel and for the patch! 

We cannot apply patches if explicit approval was not granted by the author.  See the ""Submitting patches"" [here|http://activemq.apache.org/camel/contributing.html].  Other than that I reviewed the patch and it looks good.  If you want this patch applied, say for users who will still use the unpatched oracle versions, please grant us license, otherwise you can close this issue with a 'won't fix'.


","19/Jun/08 15:52;fucema;Hi Hadrian, I removed the original patch and reattached a new one with the ASF permission check marked.  Camel is a fun ride so far, I'm enjoying it. My old hoopty was the Mule. I like both for different reasons.

Cheers!
Seon

",19/Jun/08 16:57;hadrian;Patch applied with many thanks!,06/Jul/08 06:35;davsclaus;Closing 1.4 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Exchange should end in error when no choice in a ChoiceType matches,CAMEL-612,12485277,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,gertvanthienen,gertvanthienen,gertvanthienen,16/Jun/08 06:38,11/Jul/08 04:21,14/Mar/19 02:42,23/Jun/08 12:41,1.3.0,1.4.0,,,,,,,,,1.4.0,,,camel-core,,,,0,"When you define a route with a choice() and no matching when() clause is found, the Exchange just ends successfully without doing anything.  In my mind, it should fail by default in this case (or we should at least have an easy way to get this behavior).

{code}
from(DIRECT_ROUTER).choice()
  .when(xpath(""/oc:order_confirmation/oc:order/oc:customer/@category = '140'""))
    .to(DIRECT_CUSTOMER1)
  .when(xpath(""/oc:order_confirmation/oc:order/oc:customer/@category = '116'""))
    .to(DIRECT_CUSTOMER2);
{code}",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-06-16 08:55:20.519,,,no_permission,,,,,,,,,,,,,83186,,,Mon Jun 23 12:41:58 UTC 2008,,,,,,,0|i01dbb:,5926,,,,,,,,,"16/Jun/08 08:55;davsclaus;Gert I do think that the choice() should *always* have an otherwise() so there always is a match.

{code}
from(DIRECT_ROUTER).choice()
  .when(xpath(""/oc:order_confirmation/oc:order/oc:customer/@category = '140'""))
    .to(DIRECT_CUSTOMER1)
  .when(xpath(""/oc:order_confirmation/oc:order/oc:customer/@category = '116'""))
    .to(DIRECT_CUSTOMER2);
  .otherwise().to(DIRECT_CUSTOMER3);
{code}

If the otherwise() is missing on the choice() then Camel should thrown an exception. Maybe checked during the route creation stuff.","17/Jun/08 06:49;gertvanthienen;Claus,

I actually do think this use case for a choice() block does make sense.  I definitely do not want all my unmatched exchanges to go to any third customer, so I usually code something like:
{code}
...otherwise().process(new Processor() { //make the exchange fail here });
{code}
... to get my RouteBuilder's error handler to pick it up.

We should at least make this behavior easier to implement or maybe even make it the default when no explicit otherwise() was given.  

Gert","17/Jun/08 13:29;hadrian;-1 [edit: retracting my +1]

In other words if there is no explicit otherwise() to go the errorHandler (no redelivery of course).

Thinking more about this I think the behavior of choice should be the way it already is.  If no clause matches and there is no otherwise it should silently succeed with a noop.  Users are familiar with this from switch() statements and is i think a reasonable expectation.

I think it's perfectly reasonable to add the otherwise (as one would add a default: ) to make it explicit that the exchange should fail if there is no match:

{code}
    [...].otherwise().exception(MyException.class);
{code}

What I would do though is adding a log (below INFO) in the ChoiceProcessor.process() if otherwise == null that would say that exchange is not processed.","18/Jun/08 04:09;davsclaus;Hadrian good comments.

>In other words if there is no explicit otherwise() to go the errorHandler (no redelivery of course).
How can we archive this, the DeadLetterChannel is probably already ""chaining"" the routing?

Would be good to have it documented somehow. I do think the wiki needs a section where each DSL types is documented one-by-one. That is a however a extensive work to do.","18/Jun/08 14:29;gertvanthienen;OK, I wasn't aware of the {{throwFault()}} method that allows a user to easily make the message exchange fail instead of having to use the {{Processor}} trick.  Reducing the priority of the issue, because I guess I only need to document the default, messsage filtering behavior of the choice() on the site to make people more aware of it.  ",23/Jun/08 12:41;gertvanthienen;I added a warning to the logging in http://svn.apache.org/viewvc?view=rev&revision=670544 and I changed the documentation at http://cwiki.apache.org/confluence/x/IcE,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel spring / Camel osgi need to import the needed packages for the JAXBContext to work in OSGi,CAMEL-610,12485296,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gnt,gnt,gnt,13/Jun/08 13:36,11/Jul/08 04:21,14/Mar/19 02:42,13/Jun/08 15:44,,,,,,,,,,,1.4.0,,,camel-spring,,,,0,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,103185,,,Fri Jun 13 15:44:20 UTC 2008,,,,,,,0|i01dav:,5924,,,,,,,,,"13/Jun/08 15:44;gnt;URL: http://svn.apache.org/viewvc?rev=667533&view=rev
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Duplicate type convert in http component,CAMEL-607,12485313,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,13/Jun/08 08:24,06/Jul/08 06:29,14/Mar/19 02:42,13/Jun/08 08:58,1.3.0,1.4.0,,,,,,,,,1.4.0,,,camel-http,,,,0,"See nabble
http://www.nabble.com/how-to-disable-warn-log-message-when-running-HttpGetTest.java---td17598680s22882.html

Basically the duplicated should be removed and the System.out removed as well!",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,83187,,,Fri Jun 13 08:58:41 UTC 2008,,,,,,,0|i01da7:,5921,,,,,,,,,13/Jun/08 08:58;davsclaus;Is already fixed in trunk,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
plugin manager error in samples,CAMEL-598,12484776,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,janstey,janstey,09/Jun/08 19:37,18/Jun/08 05:13,14/Mar/19 02:42,11/Jun/08 02:00,1.4.0,,,,,,,,,,1.4.0,,,examples,,,,0,"I've been getting this weird error in the 1.4.0 release candidate. I needed to delete my local .m2 directory, and then run mvn camel:run in the bam example (others failed similarly). The patch I attached seems to fix the issue.

[INFO] [compiler:testCompile]
[INFO] No sources to compile
-----------------------------------------------------
this realm = app0.child-container[org.apache.camel:camel-maven-plugin]
urls[0] = file:/home/janstey/.m2/repository/org/apache/camel/camel-maven-plugin/1.4.0/camel-maven-plugin-1.4.0.jar
urls[1] = file:/home/janstey/.m2/repository/org/codehaus/plexus/plexus-utils/1.1/plexus-utils-1.1.jar
Number of imports: 6
import: org.codehaus.classworlds.Entry@4891bb28
import: org.codehaus.classworlds.Entry@f8e44ca4
import: org.codehaus.classworlds.Entry@c51bc9e7
import: org.codehaus.classworlds.Entry@bece5185
import: org.codehaus.classworlds.Entry@3fee8e37
import: org.codehaus.classworlds.Entry@3fee19d8


this realm = plexus.core
urls[0] = file:/opt/apache-maven-2.0.9/lib/maven-2.0.9-uber.jar
Number of imports: 6
import: org.codehaus.classworlds.Entry@4891bb28
import: org.codehaus.classworlds.Entry@f8e44ca4
import: org.codehaus.classworlds.Entry@c51bc9e7
import: org.codehaus.classworlds.Entry@bece5185
import: org.codehaus.classworlds.Entry@3fee8e37
import: org.codehaus.classworlds.Entry@3fee19d8
-----------------------------------------------------
[INFO] ------------------------------------------------------------------------
[ERROR] BUILD ERROR
[INFO] ------------------------------------------------------------------------
[INFO] Internal error in the plugin manager executing goal 'org.apache.camel:camel-maven-plugin:1.4.0:run': Unable to find the mojo 'org.apache.camel:camel-maven-plugin:1.4.0:run' in the plugin 'org.apache.camel:camel-maven-plugin'
org/codehaus/mojo/exec/AbstractExecMojo",,,,,,,,,,,,,,,,,09/Jun/08 19:37;janstey;ASF.LICENSE.NOT.GRANTED--fix-broken-examples.patch;https://issues.apache.org/jira/secure/attachment/12462502/ASF.LICENSE.NOT.GRANTED--fix-broken-examples.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-06-11 02:00:29.634,,,no_permission,,,,,,,,,,,,,83343,,,Wed Jun 11 02:00:29 UTC 2008,,,Patch Available,,,,0|i01d87:,5912,,,,,,,,,"11/Jun/08 02:00;njiang;Patch applied with thanks to Jonathan.
http://svn.apache.org/viewvc?rev=665957&view=rev",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[patch] faulty ctor initialization,CAMEL-597,12484933,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,dbrosius,dbrosius,09/Jun/08 17:51,06/Jul/08 06:30,14/Mar/19 02:42,09/Jun/08 18:50,1.3.0,,,,,,,,,,1.4.0,,,camel-jms,,,,0,"JmsQueueEndpoint has faulty initialization logic, checking a parameter and if null, setting that parameter. The code should be setting the member variable instead.

Code was

     public JmsQueueEndpoint(String uri, JmsComponent component, String destination,
             JmsConfiguration configuration, QueueBrowseStrategy queueBrowseStrategy) {
         super(uri, component, destination, false, configuration);
         this.queueBrowseStrategy = queueBrowseStrategy;
         if (queueBrowseStrategy == null) {
            queueBrowseStrategy = createQueueBrowseStrategy();
         }
     }
 
patch fixes this (two places)",,,,,,,,,,,,,,,,,09/Jun/08 17:51;dbrosius;ASF.LICENSE.NOT.GRANTED--faulty_ctor_initialization.patch;https://issues.apache.org/jira/secure/attachment/12462589/ASF.LICENSE.NOT.GRANTED--faulty_ctor_initialization.patch,09/Jun/08 19:28;dbrosius;faulty_ctor_initialization.patch;https://issues.apache.org/jira/secure/attachment/12462438/faulty_ctor_initialization.patch,,,,2.0,,,,,,,,,,,,,,,,,,,2008-06-09 18:50:35.579,,,no_permission,,,,,,,,,,,,,83190,,,Sun Jul 06 06:30:56 UTC 2008,,,Patch Available,,,,0|i01d7z:,5911,,,,,,,,,09/Jun/08 18:50;davsclaus;Applied patch with thanks to Dave.,"09/Jun/08 18:52;davsclaus;Dave you have to remember to add the file after your create the ticket as you could then tick off ""grant ASF rights"" = so the is an Apache icon on the file attachment.

Could you reattch the file so the ASF license is in order?",06/Jul/08 06:30;davsclaus;Closing 1.4 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[patch] make sure file read code, reads fully",CAMEL-595,12485038,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,davsclaus,dbrosius,dbrosius,09/Jun/08 17:09,06/Jul/08 06:30,14/Mar/19 02:42,09/Jun/08 20:37,1.3.0,,,,,,,,,,1.4.0,,,camel-core,,,,0,"code uses in.read(buf) assuming that the read will be greedy. This isn't guaranteed, Patch fixes this.",,,,,,,,,,,,,,,,,09/Jun/08 17:09;dbrosius;read_fully.patch;https://issues.apache.org/jira/secure/attachment/12462419/read_fully.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-06-09 18:55:48.439,,,no_permission,,,,,,,,,,,,,38598,,,Sun Jul 06 06:30:56 UTC 2008,,,Patch Available,,,,0|i01d7j:,5909,,,,,,,,,"09/Jun/08 18:55;davsclaus;Dave thanks for all the findings. Is there other places in the code that have similiar issues with the read?, could be in some of the components as well.

However I haven't seen this kind of code to properly handling reading from an inputsource to a buffer not done with the just the one-liners in.read(buf) in other frameworks.
I don't think its well know that this problem could exists that the buffer isn't read in one operation.

Dave do you have experience that this has happened? eg reading a very large file etc?","09/Jun/08 19:32;dbrosius;It's not guaranteed by the InputStream contract. Some streams may greedy read, others may not. Large streams are a likely cause. For files, I believe it's up to each platform to decide how to manage this, so it might be that unix and win32 work perfectly fine, but perhaps some smaller platform does not. I didn't notice any other places in the code that has this problem. ",09/Jun/08 20:37;davsclaus;Thanks Dave for all your patches. Great that you take the time to dig into the code and find these. Please keep em coming -. I will fire up to svn commit command ;),06/Jul/08 06:30;davsclaus;Closing 1.4 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Missing compile step in example readmes,CAMEL-594,12485429,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,janstey,janstey,09/Jun/08 14:34,06/Jul/08 06:35,14/Mar/19 02:42,09/Jun/08 18:11,1.4.0,,,,,,,,,,1.4.0,,,documentation,examples,,,0,I noticed that some examples that are run via mvn exec:java require that the example be compiled first. I've updated the readmes to include this step...,,,,,,,,,,,,,,,,,09/Jun/08 14:35;janstey;camel-594.patch;https://issues.apache.org/jira/secure/attachment/12462501/camel-594.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-06-09 18:11:52.149,,,no_permission,,,,,,,,,,,,,83344,,,Sun Jul 06 06:35:10 UTC 2008,,,Patch Available,,,,0|i01d7b:,5908,,,,,,,,,09/Jun/08 14:35;janstey;Patch to update the readmes.,09/Jun/08 18:11;davsclaus;Thanks again Jonathan for your care of details and providing easy to patch patches.,06/Jul/08 06:35;davsclaus;Closing 1.4 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[patch] Make sure streams get closed,CAMEL-593,12485432,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,dbrosius,dbrosius,08/Jun/08 21:59,18/Jun/08 05:12,14/Mar/19 02:42,09/Jun/08 08:23,1.3.0,,,,,,,,,,1.4.0,,,camel-core,,,,0,a couple places streams are opened and are not closed. patch fixes this.,,,,,,,,,,,,,,,,,08/Jun/08 22:00;dbrosius;close_streams.patch;https://issues.apache.org/jira/secure/attachment/12462481/close_streams.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-06-09 04:00:02.791,,,no_permission,,,,,,,,,,,,,83191,,,Mon Jun 09 08:23:38 UTC 2008,,,Patch Available,,,,0|i01d73:,5907,,,,,,,,,"09/Jun/08 04:00;davsclaus;Dave thanks for the patches. I do think we have in Camel a ObjectHelper.close that is usable for closing stuff (That is Closeable) and handling the try catch warn logging.
We ought to use this one instead of our own try ... catch handling","09/Jun/08 08:23;njiang;Patch applied with thanks to Dave.
http://svn.apache.org/viewvc?rev=664624&view=rev
[ Show » ]
Willem Jiang - 09/Jun/08 01:23 AM Patch applied with thanks to Dave. http://svn.apache.org/viewvc?rev=664624&view=rev
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Can't switch to log4j in the camel-cxf component,CAMEL-587,12485454,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,08/Jun/08 08:31,18/Jun/08 05:11,14/Mar/19 02:42,11/Jun/08 02:06,1.2.0,1.3.0,,,,,,,,,1.4.0,,,camel-cxf,,,,0,"Need to make sure we Use CXF LogUtils to get logger , so we can switch the logger from java.utils.Logger to log4j.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,83126,,,Wed Jun 11 02:06:29 UTC 2008,,,,,,,0|i01d5r:,5901,,,,,,,,,"11/Jun/08 02:06;njiang;Patch revision is 664468.
http://svn.apache.org/viewvc?rev=664468&view=rev",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BeanWithPropertiesAndHeadersAndBodyInjectionTest causes java.lang.StackOverflowError,CAMEL-584,12485436,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,06/Jun/08 11:33,06/Jul/08 06:29,14/Mar/19 02:42,06/Jun/08 12:27,1.4.0,,,,,,,,,,1.4.0,,,camel-core,,,,0,"This unit test cases infinitive loop

{code}
Caused by: java.lang.StackOverflowError
	at java.util.HashMap$HashIterator.<init>(HashMap.java:822)
	at java.util.HashMap$EntryIterator.<init>(HashMap.java:881)
	at java.util.HashMap$EntryIterator.<init>(HashMap.java:881)
	at java.util.HashMap.newEntryIterator(HashMap.java:895)
	at java.util.HashMap$EntrySet.iterator(HashMap.java:988)
	at java.util.AbstractMap.toString(AbstractMap.java:584)
	at java.lang.String.valueOf(String.java:2615)
	at java.lang.StringBuilder.append(StringBuilder.java:116)
	at org.apache.camel.component.bean.BeanWithPropertiesAndHeadersAndBodyInjectionTest$MyBean.toString(BeanWithPropertiesAndHeadersAndBodyInjectionTest.java:91)
	at java.lang.String.valueOf(String.java:2615)
	at java.lang.StringBuffer.append(StringBuffer.java:220)
	at java.util.AbstractMap.toString(AbstractMap.java:598)
	at java.lang.String.valueOf(String.java:2615)
	at java.lang.StringBuilder.append(StringBuilder.java:116)
	at org.apache.camel.component.bean.BeanWithPropertiesAndHeadersAndBodyInjectionTest$MyBean.toString(BeanWithPropertiesAndHeadersAndBodyInjectionTest.java:91)
	at java.lang.String.valueOf(String.java:2615)
{code}",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,83345,,,Fri Jun 06 11:56:17 UTC 2008,,,,,,,0|i01d53:,5898,,,,,,,,,"06/Jun/08 11:47;davsclaus;The bug is in BeanProcessor that adds the bean itself as a propery the the exchange

{code}
    public void process(Exchange exchange) throws Exception {
        if (LOG.isDebugEnabled()) {
            LOG.debug("">>>> invoking method for: "" + exchange);
        }

        Object bean = beanHolder.getBean();
        exchange.setProperty(""CamelBean"", bean);
{code}

And then when you do a toString() as the unit test does with the properties:

{code}
        public String toString() {
            return ""MyBean[foo: "" + foo + "" bar: "" + bar + "" body: "" + body + ""]"";
        }
{code}

And the properties is the foo argument, then you get circular dependency.


Why do Camel set the bean itself as a property? Is this used by end-users at all?
""CamelBean"" is not used anywhere else in the java code, so I do think its safe to delete the codeline but then end-users that this property existed isn't there anymore.

We could remedy this by setting the BeanHolder instead of the bean directly.","06/Jun/08 11:56;davsclaus;The fix is now:

Bean component sets a reference to the bean that is being invoked as a property on the Exchange. This property has change its key from ""CamelBean"" to ""org.apache.camel.bean.BeanHolder"" and the type is now a BeanHolder.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JAXB - Unit test failing - DumpToXmlTest,CAMEL-583,12484748,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,06/Jun/08 08:32,06/Jul/08 06:29,14/Mar/19 02:42,07/Jun/08 14:24,1.3.0,1.4.0,,,,,,,,,1.4.0,,,camel-jaxb,,,,0,"The unit test in camel-jaxb is failing DumpToXmlTest

However since there are no assertions its not failing the build.
{code}
2008-06-06 10:31:16,546 [mponent@15ee671] ERROR DeadLetterChannel              - Failed delivery for exchangeId: ID-claus-acer/1691-1212741073109/0-0. On delivery attempt: 3 caught: org.apache.camel.RuntimeCamelException: com.sun.xml.bind.v2
notationExceptions
XmlElementRef points to a non-existent class.
        this problem is related to the following location:
                at java.util.List org.apache.camel.converter.jaxb.MessageType.headers
                at org.apache.camel.converter.jaxb.MessageType

org.apache.camel.RuntimeCamelException: com.sun.xml.bind.v2.runtime.IllegalAnnotationsException: 1 counts of IllegalAnnotationExceptions
XmlElementRef points to a non-existent class.
        this problem is related to the following location:
                at java.util.List org.apache.camel.converter.jaxb.MessageType.headers
                at org.apache.camel.converter.jaxb.MessageType

        at org.apache.camel.converter.jaxb.FallbackTypeConverter.convertTo(FallbackTypeConverter.java:70)
        at org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:71)
        at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:52)
        at org.apache.camel.processor.ConvertBodyProcessor.process(ConvertBodyProcessor.java:40)
        at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43)
        at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:146)
        at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:90)
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:101)
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:85)
        at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:39)
        at org.apache.camel.component.file.FileConsumer.pollFile(FileConsumer.java:128)
        at org.apache.camel.component.file.FileConsumer.pollFileOrDirectory(FileConsumer.java:77)
        at org.apache.camel.component.file.FileConsumer.pollFileOrDirectory(FileConsumer.java:84)
        at org.apache.camel.component.file.FileConsumer.poll(FileConsumer.java:57)
        at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:65)
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:417)
        at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:280)
        at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:135)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:65)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:142)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:166)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675)
        at java.lang.Thread.run(Thread.java:595)
Caused by: com.sun.xml.bind.v2.runtime.IllegalAnnotationsException: 1 counts of IllegalAnnotationExceptions
XmlElementRef points to a non-existent class.
        this problem is related to the following location:
                at java.util.List org.apache.camel.converter.jaxb.MessageType.headers
                at org.apache.camel.converter.jaxb.MessageType

        at com.sun.xml.bind.v2.runtime.IllegalAnnotationsException$Builder.check(IllegalAnnotationsException.java:66)
        at com.sun.xml.bind.v2.runtime.JAXBContextImpl.getTypeInfoSet(JAXBContextImpl.java:422)
        at com.sun.xml.bind.v2.runtime.JAXBContextImpl.<init>(JAXBContextImpl.java:270)
        at com.sun.xml.bind.v2.ContextFactory.createContext(ContextFactory.java:103)
        at com.sun.xml.bind.v2.ContextFactory.createContext(ContextFactory.java:81)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:585)
        at javax.xml.bind.ContextFinder.newInstance(ContextFinder.java:211)
        at javax.xml.bind.ContextFinder.find(ContextFinder.java:372)
        at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:574)
        at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:522)
        at org.apache.camel.converter.jaxb.FallbackTypeConverter.createContext(FallbackTypeConverter.java:141)
        at org.apache.camel.converter.jaxb.FallbackTypeConverter.unmarshall(FallbackTypeConverter.java:84)
        at org.apache.camel.converter.jaxb.FallbackTypeConverter.convertTo(FallbackTypeConverter.java:61)
        ... 23 more
{code}",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,83192,,,Sat Jun 07 14:24:28 UTC 2008,,,,,,,0|i01d4v:,5897,,,,,,,,,"06/Jun/08 09:13;davsclaus;The problem is that in MessageType its defined to use an abstract class (= HeaderType) and this does not work

{code}
@XmlRootElement(name = ""message"")
@XmlAccessorType(value = XmlAccessType.FIELD)
public class MessageType {
    @XmlElementRef(type = HeaderType.class)
    private List<HeaderType> headers = new ArrayList<HeaderType>();
{code}

Changing to use a real class such as StringHeader does work
{code}
@XmlRootElement(name = ""message"")
@XmlAccessorType(value = XmlAccessType.FIELD)
public class MessageType {
    @XmlElementRef(type = StringHeader.class)
    private List<HeaderType> headers = new ArrayList<HeaderType>();
{code}

And the bar.xml and foo.xml files are not valid messsages as well, they need the outer <message> tag","06/Jun/08 09:18;davsclaus;We need JAXB experts to look into this.

My idea to remedy this is, either
- remove the header types and let all objects be specified as plain strings (PropertyType)
- do as the content, let it all be any elements and use lax = true","07/Jun/08 14:24;davsclaus;Added TODO in the code and fixed the unit test.

MessageType is work in progress.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CamelTemplate should clear endpoint cache when stopping,CAMEL-581,12485424,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,davsclaus,davsclaus,davsclaus,05/Jun/08 09:13,06/Jul/08 06:29,14/Mar/19 02:42,06/Jun/08 05:14,1.3.0,,,,,,,,,,1.4.0,,,camel-core,,,,0,"Only the producer cache is stopped and cleared

{code}
  // start and stop in camel template

    protected void doStart() throws Exception {
        producerCache.start();
    }

    protected void doStop() throws Exception {
        producerCache.stop();
    }


  // stop in producer cache
    protected void doStop() throws Exception {
        ServiceHelper.stopServices(producers.values());
        producers.clear();
    }
{code}",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,83193,,,2008-06-05 09:13:58.0,,,,,,,0|i01d4f:,5895,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Multicast default excecutor do not create the enough thread for parallel processing ,CAMEL-574,12485421,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,04/Jun/08 01:42,05/Jun/08 09:29,14/Mar/19 02:42,04/Jun/08 02:38,1.3.0,,,,,,,,,,1.4.0,,,,,,,0,"When I added the loan broker example CAMEL-556, I found there is no performance improvement when using the parallelly mulitcast.
After digging into to code, I found we should create the enough thread for the parallel processing.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,83194,,,Wed Jun 04 02:38:07 UTC 2008,,,,,,,0|i01d2v:,5888,,,,,,,,,"04/Jun/08 02:38;njiang;http://svn.apache.org/viewvc?rev=662940&view=rev
The patch is in the trunk now.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
loadResourceAsStream in ObjectHelper is incorrect,CAMEL-572,12485322,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ffang,ffang,03/Jun/08 11:19,06/Jul/08 06:30,14/Mar/19 02:42,03/Jun/08 18:29,,,,,,,,,,,1.4.0,,,camel-core,,,,0,"it is
try {
        ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();
        if (contextClassLoader != null) {
            in = contextClassLoader.getResourceAsStream(name);
        }
 ----  if (in != null) {  -----//here is incorrect, should be see if  in==null then get chance to use another classloader to load the stream
+++ if (in == null) { +++
            in = ObjectHelper.class.getClassLoader().getResourceAsStream(name);
        }
        } catch (Exception e){
        	System.out.println(""Could not find class: "" + name + "". Reason: "" + e);
        }",,,,,,,,,,,,,,,,,03/Jun/08 13:28;ffang;camel-572.patch;https://issues.apache.org/jira/secure/attachment/12462524/camel-572.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-06-03 18:29:57.944,,,no_permission,,,,,,,,,,,,,103161,,,Sun Jul 06 06:30:56 UTC 2008,,,,,,,0|i01d2f:,5886,,,,,,,,,"03/Jun/08 18:29;davsclaus;Freeman, thanks a lot for all the patches and findings you have submitted recently. Great work and good bug reports. Keep it up and  ;)",06/Jul/08 06:30;davsclaus;Closing 1.4 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CamelInvoker should set ExchangePattern according to the ServiceModel when use MESSAGE and PAYLOAD dataFormat,CAMEL-568,12485321,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,ffang,ffang,01/Jun/08 15:04,05/Jun/08 09:29,14/Mar/19 02:42,03/Jun/08 09:22,,,,,,,,,,,1.4.0,,,camel-cxf,,,,0,"add code as below         
       BindingOperationInfo bop = exchange.get(BindingOperationInfo.class);
        
        if (bop != null && bop.getOperationInfo().isOneWay()) {
            cxfExchange.setPattern(ExchangePattern.InOnly);
        } else {
            cxfExchange.setPattern(ExchangePattern.InOut);
        }",,,,,,,,,,,,,,,,,01/Jun/08 15:05;ffang;camel-568.patch;https://issues.apache.org/jira/secure/attachment/12462564/camel-568.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-06-03 09:22:08.303,,,no_permission,,,,,,,,,,,,,103157,,,Tue Jun 03 09:22:08 UTC 2008,,,,,,,0|i01d1j:,5882,,,,,,,,,03/Jun/08 09:14;ffang;http://svn.apache.org/viewvc?rev=662237&view=rev,03/Jun/08 09:22;njiang;The patch is in the trunk as Freeman pointed.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-route archetype missing depends on camel-core,CAMEL-567,12485027,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,01/Jun/08 09:34,05/Jun/08 09:46,14/Mar/19 02:42,01/Jun/08 09:44,1.3.0,,,,,,,,,,1.4.0,,,tooling,,,,0,"When creating a new camel route project using maven archetype there is no dependeny on camel-core. This should be added.

    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-core</artifactId>
      <version>${camel-version}</version>
    </dependency>",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,83195,,,Sun Jun 01 09:44:08 UTC 2008,,,,,,,0|i01d1b:,5881,,,,,,,,,01/Jun/08 09:44;davsclaus;Completed: At revision: 662188,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CamelInvoker fail if operationName in the wsdl portype begin with uppercase,CAMEL-566,12485284,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,ffang,ffang,01/Jun/08 08:13,05/Jun/08 09:29,14/Mar/19 02:42,01/Jun/08 14:58,1.3.0,,,,,,,,,,1.4.0,,,camel-cxf,,,,0,"the generated method name in java file is always begin with lower case, but the operationName in the servicemodel begin with uppercase per the wsdl, this mismatch will cause the invocation fail throwing NO_OPERATION_FOUND exception
we should set CxfConstants.OPERATION_NAME as the one from servicemodel",,,,,,,,,,,,,,,,,01/Jun/08 10:26;ffang;camel-566.patch;https://issues.apache.org/jira/secure/attachment/12462399/camel-566.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-06-01 09:16:13.144,,,no_permission,,,,,,,,,,,,,83196,,,Tue Jun 03 09:13:41 UTC 2008,,,,,,,0|i01d13:,5880,,,,,,,,,01/Jun/08 09:16;davsclaus;Is it possible to add a small unit test that demonstrates the bug and now runs with the patch?,"01/Jun/08 09:16;davsclaus;Willem, I suppose you don't mind I assign this to you as CXF is your ball park ;)","01/Jun/08 09:29;ffang;sure, will add test later on

Cheers",01/Jun/08 14:58;njiang;Patch applied with thanks to Freeman.,03/Jun/08 09:13;ffang;http://svn.apache.org/viewvc?rev=662226&view=rev,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"""cxf"" name conflict in the spring context",CAMEL-563,12485032,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,ffang,ffang,30/May/08 09:40,05/Jun/08 09:28,14/Mar/19 02:42,30/May/08 12:18,,,,,,,,,,,1.4.0,,,camel-cxf,,,,0,"When I try to use camel-cxf component in smx4, I still get exceptions like
 Exception in thread ""SpringOsgiExtenderThread-9"" org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: cxf:bean:routerEndpoint due to: org.apache.camel.RuntimeCamelException: Could not auto create component: cxf
        at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:262)
        at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:52)
        at org.apache.camel.model.RouteType.resolveEndpoint(RouteType.java:90)
        at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:98)
        at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:104)
        at org.apache.camel.model.FromType.resolveEndpoint(FromType.java:67)
        at org.apache.camel.impl.DefaultRouteContext.getEndpoint(DefaultRouteContext.java:73)
        at org.apache.camel.model.RouteType.addRoutes(RouteType.java:204)
        at org.apache.camel.model.RouteType.addRoutes(RouteType.java:81)
        at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:451)
        at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:443)
        at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:149)
        at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:47)
        at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:103)
        at org.springframework.context.event.SimpleApplicationEventMulticaster$1.run(SimpleApplicationEventMulticaster.java:78)
        at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:49)
        at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:76)
        at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:275)
        at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:737)
        at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.finishRefresh(AbstractDelegatedExecutionApplicationContext.java:271)
        at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.completeRefresh(AbstractDelegatedExecutionApplicationContext.java:254)
        at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor$CompleteRefreshTask.run(DependencyWaiterApplicationContextExecutor.java:136)
        at java.lang.Thread.run(Thread.java:595)
Caused by: org.apache.camel.RuntimeCamelException: Could not auto create component: cxf
        at org.apache.camel.impl.DefaultCamelContext.getComponent(DefaultCamelContext.java:149)
        at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:233)
        ... 22 more
Caused by: java.lang.IllegalArgumentException: Bean with name: cxf in registry is not a Component: org.apache.cxf.bus.CXFBusImpl@3ca56f
        at org.apache.camel.osgi.OsgiComponentResolver.resolveComponent(OsgiComponentResolver.java:167)
        at org.apache.camel.impl.DefaultCamelContext.getComponent(DefaultCamelContext.java:138)
        ... 23 more
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-05-30 12:18:44.462,,,no_permission,,,,,,,,,,,,,103156,,,Fri May 30 12:18:44 UTC 2008,,,,,,,0|i01d0f:,5877,,,,,,,,,"30/May/08 12:18;njiang;we could let component be created by the resolver if we can't get the right component by looking up the context registry.
Please check it out.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-example-jms-file can't work within the Camel 1.4.0 snapshot,CAMEL-562,12484998,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,njiang,njiang,30/May/08 08:32,05/Jun/08 09:26,14/Mar/19 02:42,31/May/08 15:08,1.4.0,,,,,,,,,,1.4.0,,,examples,,,,0,"The stack trace :

SEVERE: Failed delivery for exchangeId: ID-TsingTao/53940-1212136063400/0-0. On delivery attempt: 0 caught: java.io.FileNotFoundException: target\ID:TsingTao-53937-1212136063115-2:1:1:1:1 (The filename, directory name, or volume label syntax is incorrect)
java.io.FileNotFoundException: target\ID:TsingTao-53937-1212136063115-2:1:1:1:1 (The filename, directory name, or volume label syntax is incorrect)
	at java.io.RandomAccessFile.open(Native Method)
	at java.io.RandomAccessFile.<init>(RandomAccessFile.java:212)
	at org.apache.camel.component.file.FileProducer.process(FileProducer.java:76)
	at org.apache.camel.component.file.FileProducer.process(FileProducer.java:54)
	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:75)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:146)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:90)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:39)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:41)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:66)
	at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:67)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:531)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:466)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:435)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:322)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:260)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:944)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:875)
	at java.lang.Thread.run(Thread.java:595)

BTW, The sample is workable with Camel-1.3.0.
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-05-31 06:23:44.451,,,no_permission,,,,,,,,,,,,,83347,,,Sat May 31 15:08:37 UTC 2008,,,,,,,0|i01d07:,5876,,,,,,,,,"31/May/08 06:23;davsclaus;Strange bug:

TsingTao-53937-1212136063115-2:1:1:1:1 is generated as message.id that uses the UUIDGenerator that should not use unfriendly files chars.
",31/May/08 08:02;davsclaus;Some of the other samples that involves files fails to.,31/May/08 13:44;davsclaus;The problem seems to be the JMS component that generates the id that is not file friendly.,31/May/08 15:08;davsclaus;Fixed. camel-jms in 1.4 now generates unique message id differently that was file unfriendly. Fixed by improving FileProducer to handle these situations as its the one that writes the files.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
some samples' poms are using apache-activemq module which will introduce some lower version of Spring and wstx-asl to the eclipse workspace,CAMEL-561,12484836,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,30/May/08 08:06,05/Jun/08 09:26,14/Mar/19 02:42,30/May/08 08:37,1.3.0,,,,,,,,,,1.4.0,,,examples,,,,0,"When using mvn eclipse:eclipse to setup the workspace for camel example to run. 
I found some camel-cxf related example can't work in eclipse which is caused by using the lower version of wstx-asl.

We can using the activemq-core instead of apache-activemq to fix this issue.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-05-31 07:28:12.977,,,no_permission,,,,,,,,,,,,,83198,,,Sat May 31 07:29:25 UTC 2008,,,,,,,0|i01czz:,5875,,,,,,,,,30/May/08 08:37;njiang;The patch is in the trunk now.,31/May/08 07:28;davsclaus;camel-example-spring-xquery was using the big instead of the core so I am changing it to use activemq-core,"31/May/08 07:29;davsclaus;Hmm some of the ActiveMQ is dependent on Spring 1.2.8

Downloading: http://people.apache.org/repo/m2-ibiblio-rsync-repository/org/springframework/spring/1.2.8/spring-1.2.8.jar
Downloading: http://repo1.maven.org/maven2//org/springframework/spring/1.2.8/spring-1.2.8.jar
1887K downloaded

This is with activemq-5.1.0 btw that I am trying to upgrade to in Camel.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Converters should be thread safe,CAMEL-560,12484665,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,hadrian,hadrian,30/May/08 04:44,30/May/08 04:45,14/Mar/19 02:42,30/May/08 04:45,,,,,,,,,,,1.4.0,,,,,,,0,"See context at:

http://www.nabble.com/Should-message-converters-be-thread-safe--td17543780s22882.html
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,103155,,,2008-05-30 04:44:55.0,,,,,,,0|i01czr:,5874,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Scanning for Type Converters doesn't work in OSGi,CAMEL-558,12485254,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,ivanzgb,ivanzgb,29/May/08 07:57,11/Jul/08 04:21,14/Mar/19 02:42,12/Jun/08 10:30,1.3.0,,,,,,,,,,1.4.0,,,,,,,0,"Even the core type converters could not be loaded:

18:26:04,982 | ERROR | ExtenderThread-4 | ResolverUtil | g.apache.camel.util.ResolverUtil  364 | Could not search jar file '/org/apache/camel/converter' for classes matching criteria: annotated with @Converterdue to an IOException: /org/apache/camel/converter (No such file or directory) ",ServiceMix Kernel 1.0-rc1,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-06-12 10:30:33.677,,,no_permission,,,,,,,,,,,,,83199,,,Thu Jun 12 10:30:33 UTC 2008,,,,,,,0|i01czb:,5872,,,,,,,,,12/Jun/08 10:30;davsclaus;Duplicate of CAMEL-577,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-spring is dependent on spring-aop,CAMEL-552,12485009,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,28/May/08 04:34,05/Jun/08 09:46,14/Mar/19 02:42,29/May/08 04:46,1.3.0,,,,,,,,,,1.4.0,,,camel-spring,,,,0,"    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-aop</artifactId>
      <version>${spring-version}</version>
    </dependency>

is needed in pom.xml for camel-spring as its needed to let camel-spring component work out-of-the-box. Without it the camel-example-spring does not work and blows up with a ClassNotFoundException when you use camel:run

",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,83200,,,2008-05-28 04:34:40.0,,,,,,,0|i01cxz:,5866,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
File component - noop does not lock the file during processing,CAMEL-551,12485308,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,26/May/08 04:17,05/Jun/08 09:46,14/Mar/19 02:42,26/May/08 05:10,1.3.0,,,,,,,,,,1.4.0,,,camel-core,,,,0,"The noop=true option does not lock the file during processing as it states in its class javadoc. The parameter is false. It should be true instead.

    public NoOpFileProcessStrategy() {
        super(false);
    }
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,83201,,,Mon May 26 05:10:21 UTC 2008,,,,,,,0|i01cxr:,5865,,,,,,,,,"26/May/08 05:10;davsclaus;commited to trunk, see FileNoOpLockFileTest",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE from came:run with below route codes,CAMEL-550,12484695,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,25/May/08 06:30,18/Jun/08 04:11,14/Mar/19 02:42,26/May/08 15:49,1.2.0,1.3.0,,,,,,,,,1.4.0,,,camel-core,camel-spring,,,0,"With the following route:

{noformat}
				from(""timer://tutorial?fixedRate=true&period=10"")
						.setBody(
								constant(""<?xml version='1.0' encoding='UTF-8'?><greetMe>Hello World</greetMe>""))
						.setHeader(""CBR1"", constant(""No"")).choice().when(
								header(""CBR1"").isEqualTo(""Yes"")).setHeader(
								""CreditcardValidation"", constant(""Yes"")).to(
								""log:CBRBean?level=INFO"").to(""log:XSLT for provider1?level=INFO"")
						.when(header(""CBR1"").isEqualTo(""No"")).setHeader(
								""CreditcardValidation"", constant(""No"")).to(
								""log:XSLT for provider2?level=INFO"").end().choice()
						.when(header(""CreditcardValidation"").isEqualTo(""Yes""))
						.to(""log:CCVBean?level=INFO"").to(""log:XSLT for consumer1?level=INFO"").when(
								header(""CreditcardValidation"").isEqualTo(""No""))
						.to(""log:XSLT for consumer2?level=INFO"").otherwise()
						.to(""log:test?level=INFO"").end();
{noformat}

running mvn camel:run 
I get the following stack trace:

{noformat}
java.lang.NullPointerException
	at org.apache.camel.view.NodeData.<init>(NodeData.java:136)
	at org.apache.camel.view.GraphGeneratorSupport.getNodeData(GraphGeneratorSupport.java:142)
	at org.apache.camel.view.RouteDotGenerator.printNode(RouteDotGenerator.java:101)
	at org.apache.camel.view.RouteDotGenerator.printNode(RouteDotGenerator.java:123)
	at org.apache.camel.view.RouteDotGenerator.printRoute(RouteDotGenerator.java:87)
	at org.apache.camel.view.RouteDotGenerator.printRoutes(RouteDotGenerator.java:64)
	at org.apache.camel.view.RouteDotGenerator.printRoutes(RouteDotGenerator.java:48)
	at org.apache.camel.view.RouteDotGenerator.generateFile(RouteDotGenerator.java:169)
	at org.apache.camel.view.GraphGeneratorSupport.generateFile(GraphGeneratorSupport.java:103)
	at org.apache.camel.view.GraphGeneratorSupport.drawRoutes(GraphGeneratorSupport.java:81)
	at org.apache.camel.spring.Main.generateDot(Main.java:392)
	at org.apache.camel.spring.Main.postProcessContext(Main.java:374)
	at org.apache.camel.spring.Main.doStart(Main.java:333)
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:47)
	at org.apache.camel.spring.Main.run(Main.java:123)
	at org.apache.camel.spring.Main.run(Main.java:114)
	at org.apache.camel.spring.Main.main(Main.java:106)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at org.apache.camel.maven.RunMojo$1.run(RunMojo.java:333)
	at java.lang.Thread.run(Thread.java:613)
{noformat}

the error seems related to the maven camel plugin failing generating the dot file for the route.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,83127,,,Mon May 26 15:49:16 UTC 2008,,,,,,,0|i01cxj:,5864,,,,,,,,,"26/May/08 15:49;njiang;This error is caused by NodeData will take the optional  ""otherwise"" node as a required node.
A patch is committed for fix this error.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
org.apache.camel.spring.Main can't take -o output and -d duration operations,CAMEL-549,12485316,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,25/May/08 06:19,18/Jun/08 04:10,14/Mar/19 02:42,26/May/08 15:45,1.4.0,,,,,,,,,,1.4.0,,,camel-spring,,,,0,The added -d Debugger option broke the  org.apache.camel.spring.Main's parameters consumption. ,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,83348,,,Mon May 26 15:45:39 UTC 2008,,,,,,,0|i01cxb:,5863,,,,,,,,,26/May/08 15:45;njiang;The patch is applied in to svn repository.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
File component should have option for deleting file if it was handled by an exception handler etc,CAMEL-548,12485301,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,24/May/08 17:23,05/Jun/08 09:46,14/Mar/19 02:42,25/May/08 12:23,1.3.0,,,,,,,,,,1.4.0,,,camel-core,,,,1,"See the user forum where a user has detailed the problem:

http://www.nabble.com/File-Component-Error-handling-td15372041s22882.html",,,,,,,,,,,,,,,,,25/May/08 07:59;davsclaus;CAMEL-548.patch;https://issues.apache.org/jira/secure/attachment/12462478/CAMEL-548.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-05-24 23:52:58.155,,,no_permission,,,,,,,,,,,,,83202,,,Sun May 25 12:22:53 UTC 2008,,,,,,,0|i01cx3:,5862,,,,,,,,,"24/May/08 23:52;drewmca;The trouble appears to start around line 119 in ""FileConsumer"" (on the 1.3 release), where the call to processStrategy.commit() never gets reach if an exception occurs during the asynch processor's processing.","25/May/08 07:59;davsclaus;A proposed patch that works, however I need a few more investigations",25/May/08 08:04;davsclaus;The problem is that the lock file is not deleted when the failure handler has handled the exception. The callback when this happens is not executing the code that deletes the lock file,"25/May/08 12:22;davsclaus;Okay commitet but now needs dependency on DeadLetterChannel for a constant it exposes.  

Camel need some kind of addition to the ErrorHandler interface to let it be able to do failure processing also, or a helper method on exchange to expose if it was handled by a failure processor.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel public XSD is old,CAMEL-545,12484702,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,davsclaus,davsclaus,24/May/08 11:12,18/Jun/08 04:14,14/Mar/19 02:42,05/Jun/08 08:39,1.2.0,1.3.0,,,,,,,,,1.4.0,,,camel-core,,,,0,"The public Camel XSD at the default http location is very old (26kb)
http://activemq.apache.org/camel/schema/spring/camel-spring.xsd

Camel 1.3 is 40kb and 1.4-snapshot is 42kb

",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-06-05 00:07:01.133,,,no_permission,,,,,,,,,,,,,83128,,,Wed Jun 18 04:14:31 UTC 2008,,,,,,,0|i01cwf:,5859,,,,,,,,,"28/May/08 04:26;davsclaus;Reading the last section of: 
http://activemq.apache.org/camel/xml-reference.html

It states that Camel will at runtime use the XSD included in camel-spring.jar.
I suppose that we should either:
- remove the XSD from the site at http://activemq.apache.org/camel/schema/spring/camel-spring.xsd so it wont confuse people and let their IDE autofetch this old external resource.
- upgrade it to the latest released version = Camel 1.3


However then the XML reference javadoc is outdated:
http://activemq.apache.org/camel/maven/camel-spring/xsddoc/

This is very old and does not include all the new stuff.","05/Jun/08 00:07;janstey;I vote we (at the very least) update the public xsd to the latest and greatest. The last few items added to the schema (routingSlip, convertBodyTo, setHeader, etc..) are not available in the current one.","05/Jun/08 00:37;janstey;Actually, someone with apache ssh privileges could easily set up a profile in camel-spring to automatically deploy the xsd to this location :)

The maven-deploy-plugin could be configured for this:
http://maven.apache.org/plugins/maven-deploy-plugin/deploy-file-mojo.html

Let me know if you need any help doing this.","05/Jun/08 00:59;njiang;Actually ,  the schema is updated by the below script
https://svn.apache.org/repos/asf/activemq/scripts/activemq-schema-copy.sh

we could change this script to copy the latest released schema to camel-spring.xsd ;)","05/Jun/08 08:39;njiang;The scripts are committed into the https://svn.apache.org/repos/asf/activemq/scripts 
The committed revision is 663498

","05/Jun/08 09:58;janstey;Oh nice, I didn't even know we had this script :) Thanks Willem!

Could someone with the proper privileges run this script now?",10/Jun/08 16:08;jstrachan;I'm now running the latest greatest scripts,"10/Jun/08 16:16;janstey;Cool, thanks James",18/Jun/08 04:14;njiang;The schema is in the activem.apache.org web site.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-cxf component not propagating context data,CAMEL-536,12484704,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,edwyer,edwyer,21/May/08 09:13,18/Jun/08 04:17,14/Mar/19 02:42,23/May/08 08:37,1.3.0,,,,,,,,,,1.4.0,,,camel-cxf,,,,0,"For POJO data formats the CxfProducer currently invokes the following method to invoke on a target server
result = client.invoke(operation, parameters.toArray());
This fails to setup the Request and Response contexts for the out (request) message and in (response) message. It should instead be copying the relevant data from the consumer and invoking the following operation on the Client interface
Object[] invoke(BindingOperationInfo oi,   Object[] params,  Map<String, Object> context) throws Exception;

Likewise the PAYLOAD and MESSAGE data formats are not setting up their contexts before they call the dispatch operation. In fact there is comments in the current codebase...
                // invoke the message prepare the context
                Map<String, Object> context = new HashMap<String, Object>();
                Map<String, Object> requestContext = new HashMap<String, Object>();
                Map<String, Object> responseContext = new HashMap<String, Object>();
                // TODO Get the requestContext from the CamelExchange
                context.put(CxfClient.REQUEST_CONTEXT, requestContext);
                context.put(CxfClient.RESPONSE_CONTEXT, responseContext);

The fix should also include a fix for all three data format types",,,172800,172800,,0%,172800,172800,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-05-21 14:37:41.096,,,no_permission,,,,,,,,,,,,,83203,,,Wed Jun 18 04:17:15 UTC 2008,,,,,,,0|i01cuf:,5850,,,,,,,,,"21/May/08 14:37;njiang;Yes, we can get the context from exchange header or the in Message.  I will do a quick fix for it.

","23/May/08 08:37;njiang;The patch is in the revision 659468.
Also update the CXF wiki page[1]

[1]http://cwiki.apache.org/confluence/display/CAMEL/CXF","18/Jun/08 04:17;njiang;Here is the Unit Test for it
https://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfProducerContextTest.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"camel mina udp throws exception ""Already released buffer""",CAMEL-534,12485278,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,21/May/08 07:53,18/Jun/08 05:07,14/Mar/19 02:42,21/May/08 08:04,1.2.0,1.3.0,,,,,,,,,1.4.0,,,camel-mina,,,,0,http://www.nabble.com/camel-mina-udp-throws-exception-%22Already-released-buffer%22-td17342374.html#a17343387,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,83129,,,Wed May 21 08:04:57 UTC 2008,,,,,,,0|i01ctz:,5848,,,,,,,,,21/May/08 08:00;njiang;This issue is caused by the type converter does not acquire the ByteBuffer when it coverts it into ByteArray.,21/May/08 08:04;njiang;The patch is in the revision 658580.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ExceptionHandling & JMSReplyTo in @MessageDriven,CAMEL-533,12486070,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,ammulder,ammulder,21/May/08 04:38,16/Feb/09 05:53,14/Mar/19 02:42,18/Aug/08 16:22,1.3.0,,,,,,,,,,1.4.0,,,camel-core,,,,0,"I have an ActiveMQ Queue and a Spring Bean.  The bean is set to throw an IllegalStateException on 1/3 of all invocations.  The message publisher sets the JMSReplyTo destination, and there's a listener on the reply queue.

If I configure a route in XML <from uri=""activemq:queue:Test""/><to uri=""bean:MyBean:doSomething"" /> then when the exception is thrown, the bean is invoked a second time.  (I can tell as the JMS Message ID is annotated into an argument to the doSomething method).  The reply queue gets exactly one response for every request, regardless of the number of exceptions thrown (I can tell as the JMSCorrelationID on the response is set to the incoming JMSMessageID using an @OutHeaders annotated argument).

If I drop the XML route and instead use @MessageDriven(uri=""activemq:queue:Test"") then when the exception comes up, the message silently disappears.  There is no error emitted by Camel, and the reply queue just never gets a message for those requests where the bean threw an exception.

This is unexpected -- I would have thought the configured routing and @MessageDriven routing had exactly the same behavior when the route was the same.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-08-12 17:10:47.031,,,no_permission,,,,,,,,,,,,,83204,,,Mon Feb 16 05:53:17 UTC 2009,,,,,,,0|i01ctr:,5847,,,,,,,,,12/Aug/08 17:10;jstrachan;Got a test case you could contribute?,"18/Aug/08 16:22;ammulder;I tried this again in 1.4 and it seems to have been fixed.

Specifically, with the default ""activemq"" component, when the bean throws an exception I see a stack trace in the console (below) and the message is not redelivered.  If I use a custom ActiveMQ component with transactions enabled, I see the same stack trace and then the message is redelivered.

[aultMessageListenerContainer-7] EndpointMessageListener        WARN  Endpoint[customJMS:topic:AnnotationTest] consumer caught an exception while processing JMS message: ActiveMQTextMessage {commandId = 5, responseRequired = false, messageId = ID:hagrid.chariotsolutions.com-50882-1219076163784-0:2:1:1:1, originalDestination = null, originalTransactionId = null, producerId = ID:hagrid.chariotsolutions.com-50882-1219076163784-0:2:1:1, destination = topic://AnnotationTest, transactionId = null, expiration = 0, timestamp = 1219076164434, arrival = 0, brokerInTime = 1219076164434, brokerOutTime = 1219076164434, correlationId = null, replyTo = null, persistent = false, type = null, priority = 4, groupID = null, groupSequence = 0, targetConsumerId = null, compressed = false, userID = null, content = null, marshalledProperties = org.apache.activemq.util.ByteSequence@63676602, dataStructure = null, redeliveryCounter = 0, size = 0, properties = {console=Wii, game=Dance Dance Revolution}, readOnlyProperties = true, readOnlyBody = true, droppable = false, text = message text}
org.apache.camel.RuntimeCamelException: java.lang.IllegalStateException: This exception is just to see what happens.
	at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:77)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:531)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:466)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:435)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:316)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:235)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:887)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:822)
	at java.lang.Thread.run(Thread.java:637)
Caused by: java.lang.IllegalStateException: This exception is just to see what happens.
	at training.spring.AnnotationTest.doSomething(AnnotationTest.java:20)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.camel.component.bean.MethodInfo.invoke(MethodInfo.java:124)
	at org.apache.camel.component.bean.MethodInfo$1.proceed(MethodInfo.java:68)
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:110)
	at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:68)
	... 8 more
[aultMessageListenerContainer-7] efaultMessageListenerContainer WARN  Execution of JMS message listener failed
org.apache.camel.RuntimeCamelException: java.lang.IllegalStateException: This exception is just to see what happens.
	at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:77)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:531)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:466)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:435)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:316)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:235)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:887)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:822)
	at java.lang.Thread.run(Thread.java:637)
Caused by: java.lang.IllegalStateException: This exception is just to see what happens.
	at training.spring.AnnotationTest.doSomething(AnnotationTest.java:20)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.camel.component.bean.MethodInfo.invoke(MethodInfo.java:124)
	at org.apache.camel.component.bean.MethodInfo$1.proceed(MethodInfo.java:68)
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:110)
	at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:68)
	... 8 more

",16/Feb/09 05:53;davsclaus;Closing old tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Intermittent MailFetchSizeTest failure,CAMEL-528,12484926,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,wtam@iona.com,wtam@iona.com,18/May/08 04:40,06/Jul/08 06:30,14/Mar/19 02:42,22/May/08 04:17,1.3.0,,,,,,,,,,1.4.0,,,camel-mail,,,,0,"I am seeing MailFetchSizeTest failing on my windows box.  After taking a look at the mock mailbox code, I think it is because mock mailbox (org.jvnet.mock_javamail.Mailbox) is not threadsafe.  If I add a half second sleep before checking mailbox.size() (see attached patch), it does not fail on my box anymore.  It is still not a guaranteed fix though.  I think we could remove the mailbox size checks if the ""sleep"" trick does not work because mock mailbox does not seem to support our testcase and we already verify messages on the receiving mock endpoint.",,,,,,,,,,,,,,,,,18/May/08 04:40;wtam@iona.com;patch.txt;https://issues.apache.org/jira/secure/attachment/12462436/patch.txt,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-05-22 04:17:21.279,,,no_permission,,,,,,,,,,,,,83205,,,Sun Jul 06 06:30:56 UTC 2008,,,Patch Available,,,,0|i01csn:,5842,,,,,,,,,22/May/08 04:17;davsclaus;CAMEL-528: Applied patch with thanks to William Tam,06/Jul/08 06:30;davsclaus;Closing 1.4 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
IntrumentationProcessor does properly record processing time,CAMEL-524,12484706,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,wtam@iona.com,wtam@iona.com,16/May/08 21:04,18/Jun/08 05:07,14/Mar/19 02:42,19/May/08 02:17,1.3.0,,,,,,,,,,1.4.0,,,camel-core,,,,0,"The InstrumentationLifeCycleStrategy inserts an InstrumentationProcessor interceptor at the end of a route which is intercepted after the processing has been done.  The InstrumentationProcessor does not actually record the time spent on the route.  It is fixed by inserting InstrumentationProcessor at the beginning of the route and wrapping all the outputs.

There two MBeans (ManagedRoute and PerformanceCounter) registered for each route eventhough ManagedRoute already extends PerformanceCounter.  We probably only need to expose one MBean.  The ManagedRoute MBean shows performance attributes and operations (since it extends PerformanceCoutner) but these performance related stuffs don't really work.  This is fixed by registering only the ManagedRoute MBean and making the performance related attributes and operations functional.

This patch supports exposing all processors within a route as PerformanceCounter MBeans so that users are possible to monitor performance at the processor's level.

With this patch, the org.apache.camel.spi package no longer depends CamelNamingStrategy of the org.apache.camel.management.management package.  It follows the suggestion mentioned in https://issues.apache.org/activemq/browse/CAMEL-264.

Another update is to following the JMX spec convention of including a ""type"" property in the ObjectName (replacing the current ""groups"" property).  This patch also simplify the ManagedRoute's ObjectName a bit by removing builder and group properties.  If for some reasons, they need to be in the ObjectName, please add them back.
",,,,,,,,,,,,,,,,,16/May/08 21:07;wtam@iona.com;jconsole.PNG;https://issues.apache.org/jira/secure/attachment/12462451/jconsole.PNG,16/May/08 21:04;wtam@iona.com;patch.txt;https://issues.apache.org/jira/secure/attachment/12462477/patch.txt,,,,2.0,,,,,,,,,,,,,,,,,,,2008-05-17 06:14:22.943,,,no_permission,,,,,,,,,,,,,83207,,,Mon May 19 02:17:42 UTC 2008,,,Patch Available,,,,0|i01crj:,5837,,,,,,,,,16/May/08 21:07;wtam@iona.com;Here's how the tree will look in JConsole,"17/May/08 06:14;davsclaus;Great spot William and very nice screenshot.

Willem (the assignee) now we should get the JMX page stuff added to the wiki - its great eye candy to see your routes on the jconsole and get some metrics.

I guess these metrics also could be read by Hyperic or some similar monitoring agents, that would be sweet to have it alerts if the routes starts to process more slowly.
Okay sorry this topic is for the miss-timing. 

",19/May/08 02:17;njiang;patch applied with thanks to  William.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Problem with scanning Jar files for Converters if application is loaded with webstart,CAMEL-522,12486590,12485326,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,akuhtz,akuhtz,16/May/08 13:35,04/Nov/09 05:33,14/Mar/19 02:42,04/Nov/09 05:16,1.3.0,1.4.0,,,,,,,,,1.5.0,,,camel-core,,,,0,"I've encountered a problem with the scanning of jar files with the @Converter annotation if the Jars are loaded with the webstart classloader. Because the URL starts with _http:_ the conversion to a file fails in ResolverUtil. 
I've attached a patch that uses an UrlResource if the url starts with _http:_ and this works if the jar-resource has the version information added to the jar file in the JNLP-file (like <jar href=""camel-core-1.4-SNAPSHOT.jar""/>). But if the version is added separately (like <jar href=""activemq-core.jar"" version=""5.1.0""/>) it fails because the classloader returns the name of the jar-file without the version information (like http://....../activemq-core.jar) and this file does not exist. 

I'm currently trying if it is possible to check whether the application is started via webstart (there is a class Tool that should only exist in the webstart classloader) and in this case I'll check if the filename of the jar-file is returned correctly. If yes maybe we can provide another patch to get rid of the problem described above.",Windows XP,,,,,,,,,,CAMEL-537,,,,,,30/Jul/08 07:02;akuhtz;ResolverUtil.patch;https://issues.apache.org/jira/secure/attachment/12462616/ResolverUtil.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-05-17 06:08:51.527,,,no_permission,,,,,,,,,,,,,83208,,,Wed Nov 04 05:15:07 UTC 2009,,,Patch Available,,,,0|i01cr3:,5835,Regression,,,,,,,,"17/May/08 06:08;davsclaus;Good work Andreas.

Could be an idea to look how Spring does loading jars. I know Juergen has done tremendous work to get Spring to work with all kind of strange behaviors in various version of WebSphere, WebLogic, JBoss, and even AFIAR on the AS400 platform maybe also from webstart.

",17/May/08 14:19;akuhtz;While searching for a solution I stumbled over the following pages (http://jdevelopment.nl/java/jdk6-web-start-cache-location/ and http://java.sun.com/javase/6/docs/technotes/guides/javaws/enhancements6.html) and now I'm not sure if the behaviour is different on JDK5 and JDK6 because I've tested only with JDK6 (I forgot to list that in the environment...).,21/May/08 12:39;davsclaus;See CAMEL-537 for an example of log errors,"24/Jul/08 07:55;akuhtz;The patch resolves the issue with url based JAR locations.
I use the webstart-maven-plugin to generate the jnlp and I had to specify the JARs that contain the converters as jarResources with a specific version number because in this case the JAR is referenced in the url with the version number added and not in a separate version attribute. Specified this way the location of the jar returned by the classloader is correct and the scan proceeds.


{code:xml|title=pom.xml|borderStyle=solid} 
<plugin>
  <groupId>org.codehaus.mojo.webstart</groupId>
  <artifactId>webstart-maven-plugin</artifactId>
  .....
  <configuration>
    .....
    <jnlpFiles>
      <jnlpFile>
      <templateFilename>jnlpTemplate.vm</templateFilename>
        <outputFilename>appl.jnlp</outputFilename>
        <jarResources>
          <jarResource>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-core</artifactId>
            <version>${camel-version}</version>
            <!-- set the outputJarVersion to false appends the version to the jar filename in the href -->
            <outputJarVersion>false</outputJarVersion>
          </jarResource>
          <jarResource>
            <groupId>org.apache.activemq</groupId>
            <artifactId>activemq-core</artifactId>
            <version>${activemq-version}</version>
            <outputJarVersion>false</outputJarVersion>
          </jarResource>
          .....
        </jarResources>
      <jnlpFile>
    <jnlpFiles>
    .....
  <configuration>
<plugin>
{code} 


{code:xml|title=appl.jnlp|borderStyle=solid} 
<jnlp .....>
  .......
  <resources>
    .......
    <jar href=""camel-core-1.4.01.jar""/>
    <jar href=""activemq-core-5.2-SNAPSHOT.jar""/>
    .......
    <jar href=""spring-core.jar"" version=""2.5.5""/>
  </resources>
</jnlp>
{code} ",29/Jul/08 17:33;davsclaus;We need a patch that is not dependent on spring-core. The current attached patch uses spring.,29/Jul/08 17:40;davsclaus;Okay I think I got it without dependency to spring .jars,"29/Jul/08 17:42;davsclaus;Andreas do you mind posting some parts of the .vm template you use for creating the output .jnlp file?

I would like to add a wiki page how to get Camel working with webstart and how to generate the jnlp using maven.
Maybe if you have the ideas how such a wiki page could be please feel free to post it here.

I will test the patch a bit more before commiting.","29/Jul/08 18:13;davsclaus;Andreas can you resubmit the patch with the ASF license granted. There is a bullet in the attach file wizard to grant license.

And can you load .jars over the HTTPS protocol as well? If so I think we should also test for ""https:"" as well.",30/Jul/08 07:02;akuhtz;Updated patch with AFS license,"30/Jul/08 07:56;akuhtz;Claus, a good description is under http://mojo.codehaus.org/webstart/webstart-maven-plugin/ (and a copy under http://coffeebreaks.org/tmp/maven-staging/webstart/site/).

This is almost the default jnlpTemplate.vm. The properties in the resources tag are not required, they just show how to set properties that can be used in the spring configuration....

{code:xml|title=jnlpTemplate.vm|borderStyle=solid}
$explicitTimestamp
<?xml version=""1.0"" encoding=""utf-8""?>
<jnlp
    spec=""$jnlpspec""
    codebase=""$$codebase""
    context=""$$context""
    href=""$$name"">
  <information>
    <title>$project.Name $project.Version</title>
    <vendor>$project.Organization.Name</vendor>
    <description>$project.Description</description>
	<icon href=""images/mylogo.gif"" width=""64"" height=""64""/>
	<icon kind=""splash"" href=""images/mysplash.gif""/>
#if($offlineAllowed)
    <offline-allowed/>
#end
  </information>
#if($allPermissions)
  <security>
     <all-permissions/>
  </security>
#end
  <resources>
    <j2se version=""$j2seVersion"" max-heap-size=""448m"" />
    <property name=""remoteSite"" value=""https://$$hostname:32463""/>
    <property name=""amq.broker.url"" value=""failover:tcp://$$hostname:32935""/>
    $dependencies
  </resources>
  <application-desc main-class=""$mainClass""/>
</jnlp>
{code}",30/Jul/08 15:55;davsclaus;*TODO*: Update wiki with how to use Camel with webstart,"31/Jul/08 04:38;davsclaus;Thanks Andreas a lot for the help.

I added the webstart to the FAQ:
http://cwiki.apache.org/confluence/display/CAMEL/How+do+I+run+Camel+using+Java+WebStart",16/Feb/09 05:51;davsclaus;Closing all 1.5.0 issues,"03/Nov/09 15:27;aptesameer;I am using camel 2.0.0 and the application works ok when  the codebase attribute starts with ""http://...""
However it fails when codebase attribute value starts with ""https....""
In the resources section I am putting jar names along with version. e.g. 

      <jar href=""camel-core-2.0.0.jar""/>
      <jar href=""camel-csv-2.0.0.jar""/>
      <jar href=""camel-ftp-2.0.0.jar""/>
      <jar href=""camel-mvel-2.0.0.jar""/>
      <jar href=""camel-quartz-2.0.0.jar""/>
      <jar href=""camel-spring-2.0.0.jar""/>

As said earlier with ""https"" I can see following exception in log file.
2009-11-03 12:00:36,406 [ApplicationMain] WARN  efaultPackageScanClassResolver - Could not read entries in url: jar:https://localhost:8443/tabernus/despatchnotegenerator/camel-ftp-2.0.0.jar!/org/apache/camel/component/file/remote
java.io.FileNotFoundException: https:\localhost:8443\tabernus\despatchnotegenerator\camel-ftp-2.0.0.jar (The filename, directory name, or volume label syntax is incorrect)
	at java.io.FileInputStream.open(Native Method)
	at java.io.FileInputStream.<init>(Unknown Source)
	at org.apache.camel.impl.DefaultPackageScanClassResolver.find(DefaultPackageScanClassResolver.java:250)
	at org.apache.camel.impl.DefaultPackageScanClassResolver.find(DefaultPackageScanClassResolver.java:178)
	at org.apache.camel.impl.DefaultPackageScanClassResolver.findAnnotated(DefaultPackageScanClassResolver.java:98)
	at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.load(AnnotationTypeConverterLoader.java:62)
	at org.apache.camel.impl.converter.DefaultTypeConverter.checkLoaded(DefaultTypeConverter.java:359)
	at org.apache.camel.impl.converter.DefaultTypeConverter.doConvertTo(DefaultTypeConverter.java:153)
	at org.apache.camel.impl.converter.DefaultTypeConverter.mandatoryConvertTo(DefaultTypeConverter.java:113)
	at org.apache.camel.impl.converter.DefaultTypeConverter.mandatoryConvertTo(DefaultTypeConverter.java:107)
	at org.apache.camel.util.IntrospectionSupport.convert(IntrospectionSupport.java:270)
	at org.apache.camel.util.IntrospectionSupport.setProperty(IntrospectionSupport.java:226)
	at org.apache.camel.util.IntrospectionSupport.setProperties(IntrospectionSupport.java:193)
	at org.apache.camel.util.EndpointHelper.setProperties(EndpointHelper.java:151)
	at org.apache.camel.impl.DefaultComponent.setProperties(DefaultComponent.java:213)
	at org.apache.camel.component.file.GenericFileComponent.createEndpoint(GenericFileComponent.java:65)
	at org.apache.camel.component.file.GenericFileComponent.createEndpoint(GenericFileComponent.java:35)
	at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:79)
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:394)
	at org.apache.camel.spring.CamelEndpointFactoryBean.createEndpoint(CamelEndpointFactoryBean.java:108)
	at org.apache.camel.spring.CamelEndpointFactoryBean.getObject(CamelEndpointFactoryBean.java:54)
	at org.springframework.beans.factory.support.FactoryBeanRegistrySupport$1.run(FactoryBeanRegistrySupport.java:121)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.doGetObjectFromFactoryBean(FactoryBeanRegistrySupport.java:116)
	at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.getObjectFromFactoryBean(FactoryBeanRegistrySupport.java:98)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getObjectForBeanInstance(AbstractBeanFactory.java:1288)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:217)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:168)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:884)
	at org.apache.camel.spring.spi.ApplicationContextRegistry.lookup(ApplicationContextRegistry.java:41)
	at org.apache.camel.impl.DefaultRouteContext.lookup(DefaultRouteContext.java:124)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:111)
	at org.apache.camel.model.FromDefinition.resolveEndpoint(FromDefinition.java:72)
	at org.apache.camel.impl.DefaultRouteContext.getEndpoint(DefaultRouteContext.java:74)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:432)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:126)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:569)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:924)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:901)
	at org.apache.camel.spring.SpringCamelContext.maybeDoStart(SpringCamelContext.java:165)
	at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:160)
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:816)
	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:99)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:119)
	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:469)
	at org.springframework.context.event.SimpleApplicationEventMulticaster$1.run(SimpleApplicationEventMulticaster.java:78)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:49)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:76)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:274)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:736)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:383)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:139)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:83)
	at com.thehutgroup.despatchnotegenerator.GuernseyDespatchNoteGenerator.main(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at com.sun.javaws.Launcher.executeApplication(Unknown Source)
	at com.sun.javaws.Launcher.executeMainClass(Unknown Source)
	at com.sun.javaws.Launcher.doLaunchApp(Unknown Source)
	at com.sun.javaws.Launcher.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)


Any help is welcome!

Regards,
Sameer","04/Nov/09 05:15;davsclaus;Sameer please do *not* reopen old tickets.

Create a new ticket and link to this one.

Reopening old tickets messes with the changelogs and release notes.
And you issue is just a sub issue of this.


Can you try with latest code from trunk (e.g. Camel 2.1-SNAPSHOT).
I have added additional TRACE logging.

And then enable TRACE logging for {{org.apache.camel.impl.DefaultPackageScanClassResolver}}
That can help identify the issue and help fix it",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Enable stream caching on DeadLetterChannel by default,CAMEL-520,12485609,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,gertvanthienen,gertvanthienen,16/May/08 06:19,16/Feb/09 05:51,14/Mar/19 02:42,30/Aug/08 01:28,1.3.0,,,,,,,,,,1.5.0,,,camel-core,,,,0,"The dead letter channel will retry to send the same message multiple times, so the message content should be stream-cached before trying to process it the first time.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-08-30 01:28:02.845,,,no_permission,,,,,,,,,,,,,83209,,,Mon Feb 16 05:51:46 UTC 2009,,,,,,,0|i01cqn:,5833,,,,,,,,,"29/Aug/08 07:13;gertvanthienen;The current fix handles an InputStream being sent as the message body correctly, but I think we should also handle other kinds of streaming data (StaxSource, Reader, ...).  How about using the same as the interceptor logic from the StreamCachingInterceptor?  We still have to find a way to reset the stream between redelivery attempts (adding a reset() method to the StreamCache interface perhaps?)","30/Aug/08 01:28;njiang;Added the unit test to show how the Source, Read, InputStream can be cached with StreamCache.",16/Feb/09 05:51;davsclaus;Closing all 1.5.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
XML Syntax does not support enabling/disabling stream caching,CAMEL-519,12485070,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,gertvanthienen,gertvanthienen,16/May/08 05:58,11/Jul/08 04:26,14/Mar/19 02:42,21/May/08 07:13,1.3.0,,,,,,,,,,1.4.0,,,camel-core,,,,0,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,83210,,,Wed May 21 07:13:54 UTC 2008,,,,,,,0|i01cqf:,5832,,,,,,,,,21/May/08 07:13;gertvanthienen;Fixed in http://svn.apache.org/viewvc?view=rev&revision=658131 and http://svn.apache.org/viewvc?view=rev&revision=658240,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-mail thrown NotSupportedOperation for nntp protocol as not supporter (yet),CAMEL-518,12485101,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,davsclaus,davsclaus,davsclaus,16/May/08 04:38,16/May/08 05:43,14/Mar/19 02:42,16/May/08 05:43,1.3.0,,,,,,,,,,1.4.0,,,camel-mail,,,,0,"nntp is reserved for future implementation in camel-mail. Camel registers this protocol as supported by the autoscan of the META-INF files.

We should throw an exception to the end-user stating its not implemented yet.
Link to ticket that has the request for NNTP protocol support.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,83211,,,2008-05-16 04:38:19.0,,,,,,,0|i01cq7:,5831,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Javadoc - improve summaries etc,CAMEL-517,12485048,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,16/May/08 03:58,05/Jun/08 09:46,14/Mar/19 02:42,26/May/08 19:24,1.3.0,,,,,,,,,,1.4.0,,,documentation,,,,0,"The javadoc could use to be polished for eg. summaries statis the Apache license instead of a short brief summary what the class/package does etc.

It's all the javadoc also for the components.
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-05-25 14:23:37.276,,,no_permission,,,,,,,,,,,,,83212,,,Mon May 26 19:24:48 UTC 2008,,,,,,,0|i01cpz:,5830,,,,,,,,,"22/May/08 18:26;davsclaus;- Add Ref as a Component *DONE*
- Remove duplicated javadoc in classes that should use the javadoc from the interface *DONE*
- Prefer to have javadoc on interfaces rather than impl classes *DONE*",22/May/08 18:28;davsclaus;- Add missing summaries for Exceptions in Camel *DONE*,"22/May/08 18:39;davsclaus;- Fix layput problems on the published javadoc *DONE*
- Add missing class javadoc for public classes in Camel core *DONE*",23/May/08 04:12;davsclaus;- Remove unused imports *DONE*,"24/May/08 06:42;davsclaus;- consider renaming InstrumentationAgentImpl to DefaultInstrumentationAgent *DONE*
- look for other xxxImpl could be renamed to a more appropriate name *DONE, only InstrumentationAgentImpl exists*",24/May/08 06:54;davsclaus;- XPathLanguage should be moved to language package and not the builder.xml package as now,"24/May/08 07:58;davsclaus;- XPathAnnotationExpressionFactory, DefaultAnnotationExpressionFactory, AnnotationExpressionFactory should be moved from the bean component to a better suited package",24/May/08 09:41;davsclaus;- ListPollingConsumer on the SEDA component is not used - marked as @deprecated but we should consider deleting it *DONE*,"24/May/08 15:20;davsclaus;- ReportingTypeConverterLoader and the likes has been marked as @deprecated (not used at all) *No used by camel maven plugin*
- Out.class from the util package has been removed (not used at all) *DONE*","24/May/08 16:32;davsclaus;Damm for some obsure reason someone is using Out in camel-jms.
- Fixed by adding Out.java as ValueHolder.java and updated camel-jms *DONE*",24/May/08 17:20;davsclaus;- track down Eclipse non javadoc to see if it can be removed: (non-Javadoc) *DONE*,"25/May/08 14:23;hadrian;@Claus

The Reporting* classes are used by the camel-maven-plugin!",25/May/08 14:29;davsclaus;Thanks Hadrian I have removed the @deprecations,26/May/08 19:08;davsclaus;- Fixed loggers to be transient and commons-logging *DONE*,26/May/08 19:24;davsclaus;Pheeevv no more javadoc polishing for ... a while ;),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Intermittent test failure in MultiCastAggregatorTest,CAMEL-510,12484911,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,wtam@iona.com,wtam@iona.com,13/May/08 03:43,06/Jul/08 06:30,14/Mar/19 02:42,13/May/08 04:21,1.3.0,,,,,,,,,,1.4.0,,,camel-core,,,,0,There is a race condition in the test that both in/out aggregators are aggregating the output.  It looks like the InAggregator should to make a copy of the exchange.  The attached patch also gets rid of a unused method.,,,,,,,,,,,,,,,,,13/May/08 03:43;wtam@iona.com;patch.txt;https://issues.apache.org/jira/secure/attachment/12462435/patch.txt,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-05-13 04:21:26.217,,,no_permission,,,,,,,,,,,,,83215,,,Sun Jul 06 06:30:56 UTC 2008,,,Patch Available,,,,0|i01cof:,5823,,,,,,,,,13/May/08 04:21;davsclaus;Applied patch with thanks to William Tam,06/Jul/08 06:30;davsclaus;Closing 1.4 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JMX Connector is not closed by InstrumentationAgentImpl.doStop(),CAMEL-509,12484852,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,wtam@iona.com,wtam@iona.com,12/May/08 20:58,10/Jul/08 19:59,14/Mar/19 02:42,13/May/08 02:01,1.3.0,,,,,,,,,,1.4.0,,,camel-core,,,,0,,,,,,,,,,,,,,,,,,12/May/08 20:58;wtam@iona.com;patch.txt;https://issues.apache.org/jira/secure/attachment/12462584/patch.txt,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-05-13 02:01:04.298,,,no_permission,,,,,,,,,,,,,83216,,,Tue May 13 02:01:04 UTC 2008,,,Patch Available,,,,0|i01co7:,5822,,,,,,,,,13/May/08 02:01;hadrian;Patch applied with many thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Some issues with creating MBeanServer,CAMEL-508,12485028,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,wtam@iona.com,wtam@iona.com,12/May/08 19:59,05/Jun/08 09:27,14/Mar/19 02:42,14/May/08 08:02,,,,,,,,,,,1.4.0,,,camel-core,,,,0,"In InstrumentationAgentImpl.doStart(), the method createMBeanServer() is never get invoked if mbean server  is not injected because
the getMBeanServer() always return non-null (the getMBeanServer() method always returns the platform mbean server)

         if (getMBeanServer() == null) {
             // The MBeanServer was not injected
            createMBeanServer();
         }

A few side effects if not calling the createMBeanServer() method.
1. users always get platform mbean server
2. system properties processing in createMBeanServer() is bypassed
3. jmx connector is not created as it is created indirectly by the createMBeanServer() metthod.

I propose to invoke createMBeanServer() inside getMBeanServer() and update createMBeanServer() to read a property to determine when platform mbean should be use. (see attached patch)

",,,,,,,,,,,,,,,CAMEL-284,,12/May/08 20:00;wtam@iona.com;patch.txt;https://issues.apache.org/jira/secure/attachment/12462499/patch.txt,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-05-13 04:10:21.795,,,no_permission,,,,,,,,,,,,,103126,,,Wed May 14 08:02:16 UTC 2008,,,Patch Available,,,,0|i01cnz:,5821,,,,,,,,,"13/May/08 04:10;davsclaus;I propose the system property is named with org.apache.camel or similar name to indicate its a system property for Camel.

We should also remember to add this feature to a JMX wiki page whenever we get one up. There is already a ticket for the documentation.","14/May/08 08:02;njiang;I think the system property named with org.apache.camel.jmx as prefix is OK , I will head on the JMX wiki document right now .",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AtomProducer lacks to set several entries on the feed,CAMEL-504,12485020,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,12/May/08 14:00,16/May/08 04:52,14/Mar/19 02:42,16/May/08 04:52,1.3.0,,,,,,,,,,1.4.0,,,camel-atom,,,,0,"The AtomProducer that creates the feed does not set all needed entries such as author and other fields.

There is a TODO in the code:
// TODO categories, authors etc

Also we need an unit test that covers the producing part. We now only have the consuming.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,83217,,,Fri May 16 04:52:24 UTC 2008,,,,,,,0|i01cn3:,5817,,,,,,,,,"15/May/08 05:18;davsclaus;I refactored the atom component:
- removed the producer as it does make sense currently
- improved the consumer to add options on the uri configuration
- added unit tests

Now it needs documentation on the wiki - there is a ticket for this","15/May/08 07:29;davsclaus;Oh I forgot to set a sensible default for the AtomConsumer as it will now consume every 500 millis and that is to fast.

We should set a default of one poll pr. 60 seconds.",16/May/08 04:52;davsclaus;Refactored and added a default poll interval of 60 seconds.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-cxf has dependencies on test JARs in the compile scope,CAMEL-503,12485257,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,andri,andri,12/May/08 13:55,11/Jul/08 04:21,14/Mar/19 02:42,12/May/08 20:25,1.3.0,,,,,,,,,,1.4.0,,,camel-cxf,,,,0,"
Currently, the camel-cxf pom declares dependencies on two test JARs without specifying their scope:
   <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-core</artifactId>
      <type>test-jar</type>
    </dependency>

    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-spring</artifactId>
      <type>test-jar</type>      
    </dependency>

This means that the scope defaults to ""compile"", and those test JARs are included with every compile, although they aren't really needed.

The fix would be to add a <scope>test</scope> element to both of these dependencies.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-05-12 15:52:21.685,,,no_permission,,,,,,,,,,,,,83218,,,Mon May 12 20:26:01 UTC 2008,,,,,,,0|i01cmv:,5816,,,,,,,,,12/May/08 15:52;davsclaus;Willem this is your territory ;),"12/May/08 20:26;hadrian;Andri, nice spot!  Thanks!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Typo in StickyLoadBalanceStrategy,CAMEL-500,12485324,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,wtam@iona.com,wtam@iona.com,10/May/08 17:17,30/May/08 08:38,14/Mar/19 02:42,11/May/08 02:14,,,,,,,,,,,1.4.0,,,camel-core,,,,0,"Typo in StickyLoadBalanceStrategy causes class member loadBalancerType not getting initialized.

  public StickyLoadBalanceStrategy(ExpressionType expressionType, LoadBalancerType loadBalancerTyep) {
",,,,,,,,,,,,,,,,,10/May/08 17:18;wtam@iona.com;patch.txt;https://issues.apache.org/jira/secure/attachment/12462542/patch.txt,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-05-11 02:14:00.911,,,no_permission,,,,,,,,,,,,,103120,,,Sun May 11 02:14:00 UTC 2008,,,Patch Available,,,,0|i01cm7:,5813,,,,,,,,,11/May/08 02:14;njiang;Applied patch with thanks to William.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-core does not compile on HP-UX,CAMEL-499,12485469,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,janstey,janstey,08/May/08 17:24,06/Jul/08 06:35,14/Mar/19 02:42,09/May/08 05:09,1.3.0,,,,,,,,,,1.4.0,,,camel-core,,,,0,"camel-core/src/main/java/org/apache/camel/model/ProcessorType.java:[871,12] inconvertible types
 found   : org.apache.camel.model.ProcessorType<Type>
 required: org.apache.camel.model.InterceptType

camel-core/src/main/java/org/apache/camel/model/ProcessorType.java:[872,39] inconvertible types
 found   : org.apache.camel.model.ProcessorType<Type>
 required: org.apache.camel.model.InterceptType

camel-core/src/main/java/org/apache/camel/model/ProcessorType.java:[884,12] inconvertible types
 found   : org.apache.camel.model.ProcessorType<Type>
 required: org.apache.camel.model.InterceptType

camel-core/src/main/java/org/apache/camel/model/ProcessorType.java:[885,38] inconvertible types
 found   : org.apache.camel.model.ProcessorType<Type>
 required: org.apache.camel.model.InterceptType ","HP-UX B.11.11 U 
java version ""1.5.0.04""
Java(TM) 2 Runtime Environment, Standard Edition (build 1.5.0.04-_27_jul_2006_10_52)
Java HotSpot(TM) Server VM (build 1.5.0.04 jinteg:07.27.06-09:57 PA2.0 (aCC_AP), mixed mode)",,,,,,,,,,,,,,,,08/May/08 17:25;janstey;camel-hpux.patch;https://issues.apache.org/jira/secure/attachment/12462583/camel-hpux.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-05-09 05:09:04.007,,,no_permission,,,,,,,,,,,,,83219,,,Sun Jul 06 06:35:10 UTC 2008,,,Patch Available,,,,0|i01clz:,5812,,,,,,,,,08/May/08 17:25;janstey;Fixes the compile error and doesn't change functionality :),09/May/08 05:09;davsclaus;Applied the patch with thanks.,06/Jul/08 06:35;davsclaus;Closing 1.4 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
file endpoint with noop=true does not detect old files moved into a directory,CAMEL-498,12485181,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jstrachan,jstrachan,jstrachan,08/May/08 09:09,11/Jul/08 04:21,14/Mar/19 02:42,08/May/08 18:22,1.3.0,,,,,,,,,,1.4.0,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,83220,,,Thu May 08 18:22:49 UTC 2008,,,,,,,0|i01clr:,5811,,,,,,,,,08/May/08 18:22;jstrachan;Fix applied - see test MoveFilesToDirectoryWithNoopTest,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Intermittent failures of TransactedJmsRouteTest,CAMEL-483,12485145,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jstrachan,hadrian,hadrian,25/Apr/08 12:29,06/Jul/08 06:35,14/Mar/19 02:42,17/Jun/08 19:08,1.3.0,,,,,,,,,,1.4.0,,,camel-jms,,,,0,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-06-17 19:08:14.159,,,no_permission,,,,,,,,,,,,,83223,,,Sun Jul 06 06:35:10 UTC 2008,,,,,,,0|i01cif:,5796,,,,,,,,,"17/Jun/08 19:08;davsclaus;Works now in Camel 1.4

-------------------------------------------------------------------------------
Test set: org.apache.camel.component.jms.TransactedJmsRouteTest
-------------------------------------------------------------------------------
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 40.297 sec
",06/Jul/08 06:35;davsclaus;Closing 1.4 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect behavior of intercept() if more than one route configured,CAMEL-482,12485267,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,hadrian,hadrian,24/Apr/08 21:30,11/Jul/08 04:21,14/Mar/19 02:42,19/Jun/08 01:26,1.3.0,,,,,,,,,,1.4.0,,,camel-core,,,,1,"With the RouteBuilder defining more than one route, the intercept() will actually have one instance of the interceptor shared among routes which causes the odd behavior of proceeding to a destination in all routes.  For instance in the example below, sending a message to ""direct:foo"" will cause both ""mock:one"" and ""mock:two"" to receive a message.

{code}
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            public void configure() throws Exception {
                intercept().to(""log:foo"").proceed();

                from(""direct:foo"").to(""mock:one"");
                from(""direct:bar"").to(""mock:two"");
            }
        };
    }
{code}
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-04-25 07:34:40.747,,,no_permission,,,,,,,,,,,,,83224,,,Wed Jun 18 15:26:40 UTC 2008,,,,,,,0|i01ci7:,5795,,,,,,,,,25/Apr/08 00:51;hadrian;I am disabling InterceptorLogTest pending fix for this issue (code above is a modified version of this test).  Must be reenabled and working when this is resolved.,25/Apr/08 07:34;davsclaus;I think this is exactly the same bug reported by CAMEL-462,"18/Jun/08 15:26;hadrian;The complication with this is that the interceptType (with its proceed), is added to both routes, so the proceed block ends up proceeding on both routes when a message is sent to any of the from endpoints.  Some cloning/proxying and replacing of outputs has to go on and i didn't get it right in all scenarios yet.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Provide a configurable strategy for temporary replyTo destination scoping,CAMEL-474,12485323,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,marat,marat,21/Apr/08 04:49,12/May/08 07:21,14/Mar/19 02:42,09/May/08 10:43,1.3.0,,,,,,,,,,1.4.0,,,camel-jms,,,,0,"Currently in request/reply scenarios a temporary replyTo destination is created and is shared among all Producers that were created from a given named JMS Component instance. If those Producers are then uses to correlate message flows among endpoints that are part of the same call flow using component generated or user provided correlation ID (not message ID), then there is a guaranteed reply loss:

client -> jsm1.producer1 -> corrId -> jsm1.consumer1 -> jsm1.producer2 -> corrId -> jsmX.consumer
               jsm1.producer1 (@) <- corrId <- jsm1. consumer1 <- jsm1.producer2 <- corrId <- reply

@ - point of reply message being dropped due to the fact that jsm1.producer2 has already consumed a reply message with the same corrId and has disposed of outstanding request entry mapped to the same corrID

Note that while this configuration breaks under outlined conditions it's an optimum way of correlating call flow when messageID is used as correlationID.

Hence a way to fix this would be to keep the current strategy while allowing to configure the component to create a temporary replyTo destination per Producer instance, insulating producers from competing for reply messages correlated on the same id

I'll probably take care of this one shortly.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-05-09 10:43:52.502,,,no_permission,,,,,,,,,,,,,83226,,,Mon May 12 07:21:47 UTC 2008,,,,,,,0|i01cgf:,5787,,,,,,,,,"03/May/08 01:47;marat;There is a patch attached to http://issues.apache.org/activemq/browse/CAMEL-490 that addresses this issue.

One can now configure the affinity between producer and temporary destination used for receiving replies. Note that this variable only applies to temporary replyTo destinations. For persistent replyTo destination this property is ignored.

This  configuration property ""replyToTempDestinationAffinity""  can can have these values: ""component"", ""endpoint"", ""producer"". The default value is ""endpoint""

component - a single temp queue is shared among all producers for a given component instance
endpoint - a single temp queue is shared among all producers for a given endpoint instance
producer - a single temp queue is created per producer

",09/May/08 10:43;davsclaus;Fixed by CAMEL-490,"12/May/08 07:21;marat;Thanks Willem, Claus",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"""Embedded error: duplicate entry"" occurs sometimes building the distribution",CAMEL-466,12485465,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,janstey,janstey,janstey,14/Apr/08 16:31,06/Jul/08 06:35,14/Mar/19 02:42,14/Apr/08 17:37,1.3.0,,,,,,,,,,1.4.0,,,,,,,0,"If you don't do a ""mvn clean"" before generating the apache-camel distribution you may get an error that looks like:

Embedded error: duplicate entry: org/apache/camel/component/mina/MinaComponent$1$1.class

Folk have seen several other duplicate entries popping up here as well... it is the maven-shade-plugin thats barfing.
",,,,,,,,,,,,,,,,,14/Apr/08 16:33;janstey;camel-466.patch;https://issues.apache.org/jira/secure/attachment/12462523/camel-466.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-04-14 17:37:07.921,,,no_permission,,,,,,,,,,,,,83227,,,Sun Jul 06 06:35:10 UTC 2008,,,,,,,0|i01cen:,5779,,,,,,,,,14/Apr/08 16:33;janstey;Patch to fix the issue.,14/Apr/08 17:37;hadrian;Patch applied with huge thanks!,06/Jul/08 06:35;davsclaus;Closing 1.4 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Interceptor does not work with the logging example,CAMEL-461,12485290,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,14/Apr/08 04:02,12/May/08 07:46,14/Mar/19 02:42,14/Apr/08 04:22,1.3.0,,,,,,,,,,1.4.0,,,camel-core,,,,0,"The wiki logging example does not work out of the box
http://activemq.apache.org/camel/dsl.html

It has been discussed on the forum:
http://www.nabble.com/interceptors---something-is-terrible-wrong-td16661322s22882.html

Jonathan was so kind to provide a patch.",,,,,,,,,,,,,,,,,14/Apr/08 04:03;davsclaus;intercept.patch;https://issues.apache.org/jira/secure/attachment/12462472/intercept.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,83228,,,Mon Apr 14 04:22:31 UTC 2008,,,Patch Available,,,,0|i01cdj:,5774,,,,,,,,,14/Apr/08 04:03;davsclaus;Jonathans patch,14/Apr/08 04:22;davsclaus;Updated wiki as well.,"14/Apr/08 04:22;davsclaus;{code}
intercept().to(""log:foo"").proceed();
{code}
Works",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel should raise an exception if parsing of xslt file fails,CAMEL-457,12484838,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,tmielke,tmielke,10/Apr/08 08:04,06/Jul/08 06:30,14/Mar/19 02:42,12/Apr/08 08:20,1.3.0,,,,,,,,,,1.4.0,,,camel-core,,,,0,"Consider a Camel route that involves an xslt component. When Camel sets up the route, the XsltBuilder ignores any errors coming from the xerces xml parser and continues constructing the route even though the xslt transformer is not initialized. 

Later when the route is executed Camel correctly checks if the transformer is initialized and raises an error if not:
java.lang.IllegalArgumentException: No transformer configured!

However in case of a parse error in the xslt file, the whole route becomes unusable and the setup routine that constructs the route should fail with an appropriate error message. A sanity check needs to be added in method
org.apache.camel.builder.xml.XsltBuilder.setTransformerSource(javax.xml.transform.Source).


","Camel 1.3.2.0, xslt component",,,,,,,,,,,,,,,,10/Apr/08 09:13;tmielke;CAMEL-457.patch;https://issues.apache.org/jira/secure/attachment/12462520/CAMEL-457.patch,10/Apr/08 09:06;tmielke;CamelXSLTTestcase.zip;https://issues.apache.org/jira/secure/attachment/12462328/CamelXSLTTestcase.zip,,,,2.0,,,,,,,,,,,,,,,,,,,2008-04-11 04:11:39.882,,,no_permission,,,,,,,,,,,,,83229,,,Sun Jul 06 06:30:55 UTC 2008,,,Patch Available,,,,0|i01ccn:,5770,,,,,,,,,10/Apr/08 08:41;tmielke;JUnit testcase,10/Apr/08 09:06;tmielke;JUnit testcase. See included README.txt,10/Apr/08 09:13;tmielke;proposed patch,"11/Apr/08 04:11;davsclaus;Torsten, thanks a lot for the patch","12/Apr/08 08:02;davsclaus;Torsten the bug must be a ServiceMix only.

In pure Camel I do get a compile stylesheet error during creating of the routes.

Using this simple unit route builder where invalid.xsl is your xsl file with no changes.
{code}
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            public void configure() throws Exception {
                from(""seda:a"").to(""xslt:org/apache/camel/component/xslt/invalid.xsl"");
            }
        };
    }
{code}


{code}
ERROR:  'line 35: Variable or parameter 'datetimemod' is undefined.'
FATAL ERROR:  'Could not compile stylesheet'

org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: xslt:org/apache/camel/component/xslt/invalid.xsl due to: javax.xml.transform.TransformerConfigurationException: Could not compile stylesheet
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:260)
	at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:52)
	at org.apache.camel.model.RouteType.resolveEndpoint(RouteType.java:92)
	at org.apache.camel.impl.RouteContext.resolveEndpoint(RouteContext.java:95)
	at org.apache.camel.impl.RouteContext.resolveEndpoint(RouteContext.java:104)
	at org.apache.camel.model.ToType.resolveEndpoint(ToType.java:78)
	at org.apache.camel.model.ToType.createProcessor(ToType.java:72)
	at org.apache.camel.model.ProcessorType.makeProcessor(ProcessorType.java:1385)
	at org.apache.camel.model.ProcessorType.addRoutes(ProcessorType.java:93)
	at org.apache.camel.model.RouteType.addRoutes(RouteType.java:189)
	at org.apache.camel.model.RouteType.addRoutes(RouteType.java:83)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:438)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:430)
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:47)
	at org.apache.camel.ContextTestSupport.startCamelContext(ContextTestSupport.java:108)
	at org.apache.camel.ContextTestSupport.setUp(ContextTestSupport.java:81)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:40)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:90)
Caused by: javax.xml.transform.TransformerConfigurationException: Could not compile stylesheet
	at com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl.newTemplates(TransformerFactoryImpl.java:824)
	at com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl.newTransformer(TransformerFactoryImpl.java:619)
	at org.apache.camel.builder.xml.XsltBuilder.setTransformerSource(XsltBuilder.java:204)
	at org.apache.camel.builder.xml.XsltBuilder.setTransformerInputStream(XsltBuilder.java:234)
	at org.apache.camel.component.xslt.XsltComponent.createEndpoint(XsltComponent.java:66)
	at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:71)
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:236)
	... 33 more
{code}",12/Apr/08 08:20;davsclaus;Applied the patch to trunk with thanks to Torsten,06/Jul/08 06:30;davsclaus;Closing 1.4 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Invalid jar in binary distribution,CAMEL-456,12485264,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,janstey,hadrian,hadrian,09/Apr/08 15:48,11/Jul/08 04:21,14/Mar/19 02:42,12/Apr/08 22:12,1.3.0,,,,,,,,,,1.4.0,,,,,,,0,"The apache-camel jar in the binary distribution misses a lot of files, including class and schema files (12k in size compared to the 1.9M released jar). ",,,,,,,,,,,,,,,,,12/Apr/08 18:34;janstey;camel-456.patch;https://issues.apache.org/jira/secure/attachment/12462327/camel-456.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-04-12 18:34:59.95,,,no_permission,,,,,,,,,,,,,38617,,,Sat Apr 12 22:12:46 UTC 2008,,,Patch Available,,,,0|i01ccf:,5769,,,,,,,,,"12/Apr/08 18:34;janstey;Here's a patch to fix this issue.

Basically, the shaded jar (i.e. the larger one) was being generated *after* the assemblies were created and so was not being included. The simple fix would have been to change the ordering in the pom... when I tried to do this, the shade plugin messed up the environment such that the assembly plugin didn't work anymore. Try it for yourself, it was quite wonky :) Anyway, the solution was to separate out the shade portion to a submodule.",12/Apr/08 22:12;hadrian;Awesome.  Thanks a lot Jon.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JXPath does not handle null results from an evaluation,CAMEL-439,12485204,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,art.gramlich@healthtrio.com,art.gramlich@healthtrio.com,04/Apr/08 19:49,05/Jun/08 09:01,14/Mar/19 02:42,05/Apr/08 07:32,1.3.0,,,,,,,,,,1.4.0,,,,,,,0,The assertResultType method In org.apache.camel.language.jxpath.JXPathExpression throws a null pointer exception if the result parameter is null.  A null test in that method or in the evaluate method in that class is needed.,,,,,,,,,,,,,,,,,05/Apr/08 06:17;gertvanthienen;CAMEL-439.diff;https://issues.apache.org/jira/secure/attachment/12462495/CAMEL-439.diff,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-04-05 06:17:38.917,,,no_permission,,,,,,,,,,,,,83231,,,Sat Apr 05 07:32:19 UTC 2008,,,Patch Available,,,,0|i01c8n:,5752,,,,,,,,,05/Apr/08 06:17;gertvanthienen;Added a unit test and the check to assertResultType.,05/Apr/08 07:32;njiang;patch applied with thanks to Art.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
consumeDelete=false option of etl sample doesn't seem to work,CAMEL-430,12484693,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,peterjones,peterjones,02/Apr/08 19:20,12/May/08 12:45,14/Mar/19 02:42,03/Apr/08 05:08,1.2.0,1.3.0,,,,,,,,,1.3.0,,,camel-jpa,examples,,,0,"In org/apache/camel/example/etl/EtlRoutes.java, the following line:

{code}
    from(""jpa:org.apache.camel.example.etl.CustomerEntity?consumeDelete=false?consumer.delay=3000&consumeLockEntity=false"")
        .setHeader(FileComponent.HEADER_FILE_NAME, el(""${in.body.userName}.xml""))
        .to(""file:target/customers?append=false"");
{code}

seems to successfully dump the database entries to files in the target/customers directory.  Unless I'm misunderstanding the sample, the consumeDelete=false is meant to ensure that the dump of the database does not delete the entries from the database.  However, when running the etl sample querying the customer table in the database, the list is empty.  I suspect the consumeDelete=false isn't working.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-04-03 04:51:30.471,,,no_permission,,,,,,,,,,,,,83131,,,Mon May 12 12:45:35 UTC 2008,,,,,,,0|i01c6n:,5743,,,,,,,,,"03/Apr/08 04:51;davsclaus;A few other options hasnt been documented

flushOnSend   (default = true)
maximumResults   (default = -1)","03/Apr/08 05:08;davsclaus;It was just a mistyped URI in the sample.

The JPA component works fine.
I will spin off a new task for the missing options in the wiki",03/Apr/08 05:09;davsclaus;committed a fix to trunk,12/May/08 12:45;davsclaus;Closed all 1.3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
finallyBlock() not processed when exception thrown from handle() clause,CAMEL-422,12485041,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,romkal,romkal,romkal,01/Apr/08 19:47,12/May/08 12:45,14/Mar/19 02:42,01/Apr/08 19:49,,,,,,,,,,,1.3.0,,,camel-core,,,,0,problem shown in {{org.apache.camel.processor.ValidationWithErrorInHandleAndFinallyBlockTest}},,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-05-12 12:45:34.996,,,no_permission,,,,,,,,,,,,,103059,,,Mon May 12 12:45:34 UTC 2008,,,,,,,0|i01c4v:,5735,,,,,,,,,12/May/08 12:45;davsclaus;Closed all 1.3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FTPComponent - problems and improvements,CAMEL-420,12485080,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,01/Apr/08 11:46,12/May/08 07:46,14/Mar/19 02:42,12/Apr/08 14:32,1.3.0,,,,,,,,,,1.4.0,,,camel-ftp,,,,0,"See this forum:
http://www.nabble.com/FTP-to-FILE-td16354813s22882.html

Problems:
- Using ASCII you need to use convertBodyTo(String.class) to let it work out of the box *Fixed*
- Using BINARY we need some Type Converters to let it consume files from a FTP Server and store it as a File *Fixed*
- You have to set the filename using the header in the configuration otherwise the filename can be wrong *Fixed*
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,83232,,,Sat Apr 12 14:32:51 UTC 2008,,,,,,,0|i01c4f:,5733,,,,,,,,,01/Apr/08 11:47;davsclaus;The binary transfer type could also be a problem.,02/Apr/08 05:01;davsclaus;The binary is failing out-of-the-box as we do not provide type converters. I got it working now with binary files.,"02/Apr/08 05:03;davsclaus;Does camel FTP support using the remote FTP filename to use as filename when writing to a file if not configured to a fixed filename using the header propery

{code}
                String fileUrl = ""file:target/ftptest/?noop=true"";
                from(ftpUrl).setHeader(FileComponent.HEADER_FILE_NAME, constant(""deleteme.jpg"")).
                        to(fileUrl, ""mock:result"");
{code}

Does it work with the setHeader? And use the remote filename from the FTP Server?

No it does not: camel tries to store the file using concatted filename as:
java.io.FileNotFoundException: target\ftptest\localhost:\tmp4\camel\logo.jpeg (The filename, directory name, or volume label syntax is incorrect) 

To culprint: FileProducer.createFileName(Message msg) is bogus. It does not handle remote filenames to well.
",06/Apr/08 09:02;davsclaus;Comitted missing file converters to trunk so we can consume binary files (download binary files),"06/Apr/08 13:33;davsclaus;We are changing a default option on the FTPConsumer in Camel 1.4.

Camel 1.3
setNames=false

Camel 1.4
setNames=true


The issue is tracked in CAMEL-420.


The issue is that Camel in v1.3 or below does not default to use the filenames from the downloaded files from the FTP Server. So you as the end user have to explicity set a filename if you want to eg. store the downaloded file directly to a local file etc using the File component.

An example (Camel 1.3)
{code}
String fileUrl = ""file:target/ftptest/?append=false&noop=true"";
String ftpUrl =
""ftp://admin@localhost:21/tmp3/camel?password=admin&binary=false"";

from(ftpUrl).setHeader(FileComponent.HEADER_FILE_NAME,
constant(""deleteme.txt"")).
convertBodyTo(String.class).to(fileUrl);
{code}
In the example above we have to set an filename using the setHeader option with the special key FileComponent.HEADER_FILE_NAME

If we just want to use the filename from the FTP Server we have to do this in Camel 1.3. Set the setNames option to true. So the ftpUrl is:
{code}
String ftpUrl =
""ftp://admin@localhost:21/tmp3/camel?password=admin&binary=false&consume
r.setNames=true"";
{code}
In Camel 1.4 the default value of consumer.setNames is true as opposed to false in Camel 1.3

So in Camel 1.4 it works out of the box that Camel will use the filename from the FTP Server if you have not explicity set a new filename using the setHeader(FileComponent.HEADER_FILE_NAME, ""mynewfilename.txt"")

So the Camel 1.4 example is:
{code}
String fileUrl = ""file:target/ftptest/?append=false&noop=true"";
String ftpUrl =
""ftp://admin@localhost:21/tmp3/camel?password=admin&binary=false"";

from(ftpUrl).convertBodyTo(String.class).to(fileUrl);
{code}",07/Apr/08 08:12;davsclaus;Fix failing unit test on Bamboo,"12/Apr/08 14:32;davsclaus;Most of the major problems is fixed now.

Unit test for the SFTP part would be nice but it requires some mocking as we do not have a SFTP java server at the moment.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
multicast parallelProcessing is always true,CAMEL-415,12485065,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,30/Mar/08 14:23,12/May/08 07:46,14/Mar/19 02:42,30/Mar/08 14:48,1.3.0,,,,,,,,,,1.3.0,,,camel-core,,,,0,"{code}
    public MulticastType multicast(AggregationStrategy aggregationStrategy, boolean parallelProcessing) {
        MulticastType answer = new MulticastType();
        addOutput(answer);
        answer.setAggregationStrategy(aggregationStrategy);
        answer.setParallelProcessing(true);
        return answer;
    }
{code}

The parameter parallelProcessing is never used. setParallelProcessing is always true.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,83233,,,Sun Mar 30 14:24:13 UTC 2008,,,,,,,0|i01c3b:,5728,,,,,,,,,"30/Mar/08 14:24;davsclaus;Fixed by
{code}
answer.setParallelProcessing(parallelProcessing);
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
OSX mvn -e -o org.apache.camel:camel-maven-plugin:dot fails due to the lack of dot.exe,CAMEL-412,12485047,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,kevin.ross@metova.com,kevin.ross@metova.com,29/Mar/08 15:04,06/Jul/08 06:30,14/Mar/19 02:42,08/May/08 14:42,1.2.0,1.3.0,,,,,,,,,1.4.0,,,,,,,0,"Though the intent seemed to be there, the DotMojo does not skip conversion of the file if there is no value for <executable/> in the pom.xml.  The parameter was defaulted.

#. removed the default.
#. added log message.",OSX,,,,,,,,,,,,,,CAMEL-418,,29/Mar/08 15:04;kevin.ross@metova.com;DotMojo.java.patch;https://issues.apache.org/jira/secure/attachment/12462320/DotMojo.java.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-03-31 14:35:43.577,,,no_permission,,,,,,,,,,,,,83132,,,Sun Jul 06 06:30:55 UTC 2008,,,Patch Available,,,,0|i01c2n:,5725,,,,,,,,,"31/Mar/08 14:35;jstrachan;I've applied half of your patch - that if the executable property is empty or null then the generation is skipped.

BTW its maybe an idea not to reformat the code before sending patches in the future, its kinda hard to see what you really did :)

I'm not sure if we should remove the default executable name for DOT. Its up to users to use the plugin or not - you can also use [maven profiles|http://maven.apache.org/guides/introduction/introduction-to-profiles.html] to only enable the plugin if its activated and so forth. So I like the idea of the plugin invoking ""dot"" on the path by default (as thats gonna work on most OSes).
 
Maybe to disable the use of dot we can just use another property? I've added a useDot property so folks can disable the running of dot - would that do the trick?",14/Apr/08 07:11;davsclaus;This ticket is a new solution to avoid using dot.exe (GraphicViz),"16/Apr/08 18:17;davsclaus;Kevin have you seen the option to setup the executable at http://activemq.apache.org/camel/camel-dot-maven-goal.html
where you can configure the DOT.exe to use (on windows).

And if patch is meant to be include then please provide a patch that doesn't change the current code style in Camel.","16/Apr/08 19:29;kevin.ross@metova.com;Claus, I'm aware of how to set the executable, I mention this in the description of the issue.  I don't want it to execute any dot program, I just want the dot file to be generated so that I can view in Graphviz for Mac.  It will automatically render for me when I choose to view it.

I think James has the right idea.  If the doc page you referenced were updated to reflect the additional that James made, this could be resolved without further work or application of the patch.","17/Apr/08 04:59;davsclaus;James / Kevin

How do you actually configued the new option useDot to eg set it to false?
I am not a super maven wizard and have tried with

mvn camel:dot
Is what I used to start it

-DuseDot=false
<useDot>false</useDot> in the pom.xml in the configuration tag.

But neither fails.

Also in the source code
runCamelEmbedded()
it has hardcoded useDot to true

            mojo.setDotEnabled(true);

Shouldn't it honor the useDot option instead so it should be
            mojo.setDotEnabled(useDot);

","08/May/08 14:42;jstrachan;To show this in use I've disabled the dot invocation in examples/camel-example-spring-xquery

{code}
  <reporting>
    <plugins>
      <plugin>
        <groupId>org.apache.camel</groupId>
        <artifactId>camel-maven-plugin</artifactId>
        <configuration>
          <useDot>false</useDot>
        </configuration>
      </plugin>
    </plugins>
  </reporting>
{code}

",09/May/08 05:13;davsclaus;I updated the wiki with James example,06/Jul/08 06:30;davsclaus;Closing 1.4 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Exception handling of the ErrorHandlerSupport class,CAMEL-410,12484817,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ddudley,ddudley,28/Mar/08 19:51,06/Jul/08 06:30,14/Mar/19 02:42,05/Apr/08 11:23,1.2.0,1.3.0,,,,,,,,,1.4.0,,,camel-core,,,,0,"When you configure your route builder and say you want to configure two exceptions lets say: NullPointer and Exception. 

Now say the bean you call as your end point throws a NullPointer, wouldn't you think the NullPointer policy would handle that exception? 

Well I'm seeing sometimes it does and sometimes it doesn't due to the map not keeping the exceptions in any particular order.  Is there anyway this could be changed to a LinkedHashMap or a List?

Issue with class: org.apache.camel.processor.ErrorHandlerSupport

",,,,,,,,,,,,,,,,,03/Apr/08 14:48;ddudley;BaseRouteBuilder.java;https://issues.apache.org/jira/secure/attachment/12462415/BaseRouteBuilder.java,02/Apr/08 15:32;ddudley;ErrorHandlerSupportTest.java;https://issues.apache.org/jira/secure/attachment/12462340/ErrorHandlerSupportTest.java,31/Mar/08 14:49;ddudley;patch.txt;https://issues.apache.org/jira/secure/attachment/12462339/patch.txt,,,3.0,,,,,,,,,,,,,,,,,,,2008-03-30 10:08:40.317,,,no_permission,,,,,,,,,,,,,83133,,,Sun Jul 06 06:30:55 UTC 2008,,,Patch Available,,,,0|i01c27:,5723,,,,,,,,,"30/Mar/08 10:08;davsclaus;Dan could you re attach you patch with the license to ASF granted.
We can not apply patches that we do not hold rights for.

When you attach a file to an existing ticket there is a tick box to grant this license.","01/Apr/08 18:59;davsclaus;Dan do you have a snippet of your camel context cofiguration where you have the exceåtions configured.

I would like to create a unit test that tests this problem.

Looking at the ErrorHandlerSupport code it would use the first found Exception that isInstanceof so it could potentially find a less specific type exception that was not the best suited.","02/Apr/08 15:21;ddudley;That's the problem we are experiencing.  The camel context configuration only encounters this problem sometimes.  I would be more than happy to make a unit test to prove that this is a problem, but it seems to be...impossible since the IdentityHashMap is ignoring the hashcode method and is going directly to a native method to resolve the hashcode.

If you discover a way to test this and get it consistently to fail I would like to see how you did it.","02/Apr/08 15:32;ddudley;Here is the unit test I was working on.  It was consistently failing for me, but you may see different results. :0(","02/Apr/08 17:48;davsclaus;Thanks Dan for the unit test.

I was also looking for a camel context configuration eg. with the fluent builder (DSL) that demonstrates the use-case with configuration using several exceptions and an exchange between endpoints etc.

Dan if you have relevant parts of the camel context configuration in question that only encounters the problem sometimes, then please attach this material also.","03/Apr/08 04:36;davsclaus;Dan I can not get the unit test to fail on my system.

However I do think we need an example using the DSL configuration to see how the ExecptionType configures the DeadLetterChannel that extends the ErrorHandlerSupport.
So this is why I am calling for your camel route configuration that only encounters this problem sometimes.",03/Apr/08 14:48;ddudley;This is our base RouteBuilder that sets up the general error handling.,"03/Apr/08 18:09;davsclaus;Dan, thanks for the new attachment. I can reproduce the bug here. Camel pick ups java.lang.Exception at first even though there is a exact match such as NPE.","03/Apr/08 19:44;davsclaus;I got something better now that finds the best suited exception type configured for the given thrown exception.

The code need a little polishing and some more testing.",04/Apr/08 07:49;davsclaus;Target for 1.3 release,"04/Apr/08 07:49;davsclaus;
I am introducing a strategy to resolve which is the best exception type to handle the thrown exception in questions. The default strategy will be to use the exception that is the closets match to the thrown exception.

eg. java.net.ConnectionException will match java.io.IOException
eg. CamelExchangeException will match CamelException
eg. MyBusinessException will match MyBaseBusinessException
eg. NullPointerException will match Exception

Well you might get the picture.

A different strategy could be to use the ordering of how the exceptions was configured. Use the fist match that can handle it etc (top-down).","05/Apr/08 06:26;davsclaus;Moving it to 1.4 release.

1.3 is about to be released really soon.","05/Apr/08 11:23;davsclaus;Fixed in trunk now wtih wiki documentation at Error Handler and Dead Letter Channel.

See also the unit tests for details etc.",06/Jul/08 06:30;davsclaus;Closing 1.4 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Password error for jetty:https endpoint,CAMEL-407,12484792,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,,mickysantomax,mickysantomax,28/Mar/08 10:56,12/May/08 12:45,14/Mar/19 02:42,28/Mar/08 19:01,1.3.0,,,,,,,,,,1.3.0,,,camel-jetty,,,,0,"I've defined an http endpoint by this code :
        this.from(""jetty:https://localhost:8193/SSLTest/"")
              .process(new Processor());

When I install my application in Tomcat 6.0.13 it throws this exception :

2008-03-18 20:05:42.998::WARN:  EXCEPTION
java.security.UnrecoverableKeyException: Password must not be null
        at sun.security.provider.JavaKeyStore.engineGetKey(JavaKeyStore.java:107)
        at sun.security.provider.JavaKeyStore$JKS.engineGetKey(JavaKeyStore.java:38)
        at java.security.KeyStore.getKey(KeyStore.java:763)
        at com.sun.net.ssl.internal.ssl.SunX509KeyManagerImpl.<init>(SunX509KeyManagerImpl.java:113)
        at com.sun.net.ssl.internal.ssl.KeyManagerFactoryImpl$SunX509.engineInit(KeyManagerFactoryImpl.java:48)
        at javax.net.ssl.KeyManagerFactory.init(KeyManagerFactory.java:239)
        at org.mortbay.jetty.security.SslSocketConnector.createFactory(SslSocketConnector.java:202)
        at org.mortbay.jetty.security.SslSocketConnector.newServerSocket(SslSocketConnector.java:407)
        at org.mortbay.jetty.bio.SocketConnector.open(SocketConnector.java:73)
        at org.mortbay.jetty.AbstractConnector.doStart(AbstractConnector.java:272)
        at org.mortbay.jetty.bio.SocketConnector.doStart(SocketConnector.java:147)
        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:39)
        at org.apache.camel.component.jetty.JettyHttpComponent.connect(JettyHttpComponent.java:98)
        at org.apache.camel.component.http.HttpEndpoint.connect(HttpEndpoint.java:80)
        at org.apache.camel.component.http.HttpConsumer.doStart(HttpConsumer.java:50)
        at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:51)
        at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:64)
        at org.apache.camel.impl.DefaultCamelContext.startRoutes(DefaultCamelContext.java:461)
        at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:435)
        at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:140)
        at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:51)
        at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:96)
        at org.springframework.context.event.SimpleApplicationEventMulticaster$1.run(SimpleApplicationEventMulticaster.java:77)
        at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:49)
        at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:75)
        at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:246)
        at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:355)
        at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:91)
        at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:75)
        at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:65)
        at it.unibas.springfreesbee.ContextStartup.contextInitialized(ContextStartup.java:43)
        at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:3827)
        at org.apache.catalina.core.StandardContext.start(StandardContext.java:4334)
        at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:791)
        at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:771)
        at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:525)
        at org.apache.catalina.startup.HostConfig.deployDescriptor(HostConfig.java:626)
        at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:511)
        at org.apache.catalina.startup.HostConfig.check(HostConfig.java:1220)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)
        at org.apache.tomcat.util.modeler.BaseModelMBean.invoke(BaseModelMBean.java:297)
        at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:836)
        at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:761)
        at org.apache.catalina.manager.ManagerServlet.check(ManagerServlet.java:1458)
        at org.apache.catalina.manager.ManagerServlet.deploy(ManagerServlet.java:820)
        at org.apache.catalina.manager.ManagerServlet.doGet(ManagerServlet.java:354)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:690)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:803)
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:230)
        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:175)
        at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:525)
        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128)
        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:104)
        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)
        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:261)
        at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:844)
        at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:581)
        at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:447)
        at java.lang.Thread.run(Thread.java:619)
2008-03-18 20:05:42.012::WARN:  failed SslSocketConnector@0.0.0.0:8193
java.io.IOException: Could not create JsseListener: java.security.UnrecoverableKeyException: Password must not be null
        at org.mortbay.jetty.security.SslSocketConnector.newServerSocket(SslSocketConnector.java:446)
        at org.mortbay.jetty.bio.SocketConnector.open(SocketConnector.java:73)
        at org.mortbay.jetty.AbstractConnector.doStart(AbstractConnector.java:272)
        at org.mortbay.jetty.bio.SocketConnector.doStart(SocketConnector.java:147)
        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:39)
        at org.apache.camel.component.jetty.JettyHttpComponent.connect(JettyHttpComponent.java:98)
        at org.apache.camel.component.http.HttpEndpoint.connect(HttpEndpoint.java:80)
        at org.apache.camel.component.http.HttpConsumer.doStart(HttpConsumer.java:50)
        at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:51)
        at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:64)
        at org.apache.camel.impl.DefaultCamelContext.startRoutes(DefaultCamelContext.java:461)
        at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:435)
        at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:140)
        at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:51)
        at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:96)
        at org.springframework.context.event.SimpleApplicationEventMulticaster$1.run(SimpleApplicationEventMulticaster.java:77)
        at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:49)
        at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:75)
        at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:246)
        at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:355)
        at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:91)
        at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:75)
        at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:65)
        at it.unibas.springfreesbee.ContextStartup.contextInitialized(ContextStartup.java:43)
        at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:3827)
        at org.apache.catalina.core.StandardContext.start(StandardContext.java:4334)
        at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:791)
        at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:771)
        at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:525)
        at org.apache.catalina.startup.HostConfig.deployDescriptor(HostConfig.java:626)
        at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:511)
        at org.apache.catalina.startup.HostConfig.check(HostConfig.java:1220)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)
        at org.apache.tomcat.util.modeler.BaseModelMBean.invoke(BaseModelMBean.java:297)
        at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:836)
        at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:761)
        at org.apache.catalina.manager.ManagerServlet.check(ManagerServlet.java:1458)
        at org.apache.catalina.manager.ManagerServlet.deploy(ManagerServlet.java:820)
        at org.apache.catalina.manager.ManagerServlet.doGet(ManagerServlet.java:354)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:690)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:803)
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:230)
        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:175)
        at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:525)
        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128)
        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:104)
        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)
        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:261)
        at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:844)
        at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:581)
        at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:447)
        at java.lang.Thread.run(Thread.java:619)
ERROR [it.unibas.springfreesbee.ContextStartup - contextInitialized] - org.apache.camel.RuntimeCamelException: java.io.IOException: Could not create JsseListener: java.security.UnrecoverableKeyException: Password must not be null

I have follow all steps of jetty ssl configuration, but the error is the same with both keytool and openssl applications.

I think that problems are in routing because if I set only 
     this.from(""jetty:https://localhost:8193/SSLTest/""); 
There aren't installation problems in Tomcat, when I access to the endpoint by browser it ask the acceptance of certificate. In this case there is another exception at runtime :

2008-03-26 18:56:14.933::WARN:  handle failed
java.lang.NullPointerException
        at org.mortbay.thread.BoundedThreadPool.isLowOnThreads(BoundedThreadPool.java:216)
        at org.mortbay.jetty.bio.SocketConnector$Connection.run(SocketConnector.java:218)
        at org.mortbay.jetty.security.SslSocketConnector$SslConnection.run(SslSocketConnector.java:620)
        at org.mortbay.thread.BoundedThreadPool$PoolThread.run(BoundedThreadPool.java:450)",,,,,,,,,,,,,,,,,02/Apr/08 18:40;mickysantomax;JettyHttpComponent.java;https://issues.apache.org/jira/secure/attachment/12462364/JettyHttpComponent.java,02/Apr/08 11:04;mickysantomax;TestHttpsRoute.java;https://issues.apache.org/jira/secure/attachment/12462471/TestHttpsRoute.java,,,,2.0,,,,,,,,,,,,,,,,,,,2008-03-28 19:01:11.677,,,no_permission,,,,,,,,,,,,,83234,,,Mon May 12 12:45:34 UTC 2008,,,,,,,0|i01c1j:,5720,,,,,,,,,28/Mar/08 19:01;jstrachan;I think this is now resolved in trunk - I'll spin up a separate JIRA for a test case once we've figured out how to get the certs & stuff working with maven/junit,"02/Apr/08 11:01;mickysantomax;I run the HttpRouteTest with https protocol, but receive the following error : 

    [junit] DEBUG [temp.TestHttpRoute - tearDown] - tearDown test: testHelloEndpoint
    [junit] ------------- ---------------- ---------------
    [junit] ------------- Standard Error -----------------
    [junit] 2008-04-02 12:50:52.776::INFO:  Logging to STDERR via org.mortbay.log.StdErrLog
    [junit] 2008-04-02 12:50:52.881::INFO:  jetty-6.1.8
    [junit] 2008-04-02 12:50:52.169::INFO:  Started SslSocketConnector@0.0.0.0:18196
    [junit] 2008-04-02 12:50:52.618::WARN:  EXCEPTION
    [junit] javax.net.ssl.SSLHandshakeException: Received fatal alert: certificate_unknown
    [junit]     at com.sun.net.ssl.internal.ssl.Alerts.getSSLException(Alerts.java:174)
    [junit]     at com.sun.net.ssl.internal.ssl.Alerts.getSSLException(Alerts.java:136)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.recvAlert(SSLSocketImpl.java:1657)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:932)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1096)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1123)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1107)
    [junit]     at org.mortbay.jetty.security.SslSocketConnector$SslConnection.run(SslSocketConnector.java:615)
    [junit]     at org.mortbay.thread.BoundedThreadPool$PoolThread.run(BoundedThreadPool.java:450)
    [junit] 2008-04-02 12:50:52.733::INFO:  jetty-6.1.8
    [junit] 2008-04-02 12:50:52.738::INFO:  Started SslSocketConnector@0.0.0.0:18196
    [junit] 2008-04-02 12:50:52.747::WARN:  EXCEPTION
    [junit] javax.net.ssl.SSLHandshakeException: Received fatal alert: certificate_unknown
    [junit]     at com.sun.net.ssl.internal.ssl.Alerts.getSSLException(Alerts.java:174)
    [junit]     at com.sun.net.ssl.internal.ssl.Alerts.getSSLException(Alerts.java:136)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.recvAlert(SSLSocketImpl.java:1657)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:932)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1096)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1123)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1107)
    [junit]     at org.mortbay.jetty.security.SslSocketConnector$SslConnection.run(SslSocketConnector.java:615)
    [junit]     at org.mortbay.thread.BoundedThreadPool$PoolThread.run(BoundedThreadPool.java:450)
    [junit] ------------- ---------------- ---------------
    [junit]
    [junit] Testcase: testEndpoint took 1,136 sec
    [junit]     Caused an ERROR
    [junit] javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
    [junit] org.apache.camel.RuntimeCamelException: javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
    [junit]     at org.apache.camel.util.ProducerCache.send(ProducerCache.java:86)
    [junit]     at org.apache.camel.CamelTemplate.send(CamelTemplate.java:119)
    [junit]     at org.apache.camel.CamelTemplate.sendBodyAndHeader(CamelTemplate.java:225)
    [junit]     at org.apache.camel.CamelTemplate.sendBodyAndHeader(CamelTemplate.java:211)
    [junit]     at it.unibas.icar.temp.TestHttpRoute.invokeHttpEndpoint(TestHttpRoute.java:59)
    [junit]     at it.unibas.icar.temp.TestHttpRoute.testEndpoint(TestHttpRoute.java:27)
    [junit] Caused by: javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
    [junit]     at com.sun.net.ssl.internal.ssl.Alerts.getSSLException(Alerts.java:174)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.fatal(SSLSocketImpl.java:1591)
    [junit]     at com.sun.net.ssl.internal.ssl.Handshaker.fatalSE(Handshaker.java:187)
    [junit]     at com.sun.net.ssl.internal.ssl.Handshaker.fatalSE(Handshaker.java:181)
    [junit]     at com.sun.net.ssl.internal.ssl.ClientHandshaker.serverCertificate(ClientHandshaker.java:975)
    [junit]     at com.sun.net.ssl.internal.ssl.ClientHandshaker.processMessage(ClientHandshaker.java:123)
    [junit]     at com.sun.net.ssl.internal.ssl.Handshaker.processLoop(Handshaker.java:516)
    [junit]     at com.sun.net.ssl.internal.ssl.Handshaker.process_record(Handshaker.java:454)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:884)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1096)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.writeRecord(SSLSocketImpl.java:623)
    [junit]     at com.sun.net.ssl.internal.ssl.AppOutputStream.write(AppOutputStream.java:59)
    [junit]     at java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:65)
    [junit]     at java.io.BufferedOutputStream.flush(BufferedOutputStream.java:123)
    [junit]     at java.io.FilterOutputStream.flush(FilterOutputStream.java:123)
    [junit]     at org.apache.commons.httpclient.methods.EntityEnclosingMethod.writeRequestBody(EntityEnclosingMethod.java:506)
    [junit]     at org.apache.commons.httpclient.HttpMethodBase.writeRequest(HttpMethodBase.java:2110)
    [junit]     at org.apache.commons.httpclient.HttpMethodBase.execute(HttpMethodBase.java:1088)
    [junit]     at org.apache.commons.httpclient.HttpMethodDirector.executeWithRetry(HttpMethodDirector.java:398)
    [junit]     at org.apache.commons.httpclient.HttpMethodDirector.executeMethod(HttpMethodDirector.java:171)
    [junit]     at org.apache.commons.httpclient.HttpClient.executeMethod(HttpClient.java:397)
    [junit]     at org.apache.commons.httpclient.HttpClient.executeMethod(HttpClient.java:323)
    [junit]     at org.apache.camel.component.http.HttpProducer.process(HttpProducer.java:59)
    [junit]     at org.apache.camel.util.ProducerCache.sendExchange(ProducerCache.java:147)
    [junit]     at org.apache.camel.util.ProducerCache.send(ProducerCache.java:84)
    [junit] Caused by: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
    [junit]     at sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:285)
    [junit]     at sun.security.validator.PKIXValidator.engineValidate(PKIXValidator.java:191)
    [junit]     at sun.security.validator.Validator.validate(Validator.java:218)
    [junit]     at com.sun.net.ssl.internal.ssl.X509TrustManagerImpl.validate(X509TrustManagerImpl.java:126)
    [junit]     at com.sun.net.ssl.internal.ssl.X509TrustManagerImpl.checkServerTrusted(X509TrustManagerImpl.java:209)
    [junit]     at com.sun.net.ssl.internal.ssl.X509TrustManagerImpl.checkServerTrusted(X509TrustManagerImpl.java:249)
    [junit]     at com.sun.net.ssl.internal.ssl.ClientHandshaker.serverCertificate(ClientHandshaker.java:954)
    [junit] Caused by: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
    [junit]     at sun.security.provider.certpath.SunCertPathBuilder.engineBuild(SunCertPathBuilder.java:174)
    [junit]     at java.security.cert.CertPathBuilder.build(CertPathBuilder.java:238)
    [junit]     at sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:280)
    [junit]
    [junit] Testcase: testHelloEndpoint took 0,222 sec
    [junit]     Caused an ERROR
    [junit] sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
    [junit] javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
    [junit]     at com.sun.net.ssl.internal.ssl.Alerts.getSSLException(Alerts.java:174)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.fatal(SSLSocketImpl.java:1591)
    [junit]     at com.sun.net.ssl.internal.ssl.Handshaker.fatalSE(Handshaker.java:187)
    [junit]     at com.sun.net.ssl.internal.ssl.Handshaker.fatalSE(Handshaker.java:181)
    [junit]     at com.sun.net.ssl.internal.ssl.ClientHandshaker.serverCertificate(ClientHandshaker.java:975)
    [junit]     at com.sun.net.ssl.internal.ssl.ClientHandshaker.processMessage(ClientHandshaker.java:123)
    [junit]     at com.sun.net.ssl.internal.ssl.Handshaker.processLoop(Handshaker.java:516)
    [junit]     at com.sun.net.ssl.internal.ssl.Handshaker.process_record(Handshaker.java:454)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:884)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1096)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1123)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1107)
    [junit]     at sun.net.www.protocol.https.HttpsClient.afterConnect(HttpsClient.java:405)
    [junit]     at sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect(AbstractDelegateHttpsURLConnection.java:166)
    [junit]     at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:977)
    [junit]     at sun.net.www.protocol.https.HttpsURLConnectionImpl.getInputStream(HttpsURLConnectionImpl.java:234)
    [junit]     at java.net.URL.openStream(URL.java:1009)
    [junit]     at it.unibas.icar.temp.TestHttpRoute.testHelloEndpoint(TestHttpRoute.java:47)
    [junit] Caused by: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
    [junit]     at sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:285)
    [junit]     at sun.security.validator.PKIXValidator.engineValidate(PKIXValidator.java:191)
    [junit]     at sun.security.validator.Validator.validate(Validator.java:218)
    [junit]     at com.sun.net.ssl.internal.ssl.X509TrustManagerImpl.validate(X509TrustManagerImpl.java:126)
    [junit]     at com.sun.net.ssl.internal.ssl.X509TrustManagerImpl.checkServerTrusted(X509TrustManagerImpl.java:209)
    [junit]     at com.sun.net.ssl.internal.ssl.X509TrustManagerImpl.checkServerTrusted(X509TrustManagerImpl.java:249)
    [junit]     at com.sun.net.ssl.internal.ssl.ClientHandshaker.serverCertificate(ClientHandshaker.java:954)
    [junit] Caused by: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
    [junit]     at sun.security.provider.certpath.SunCertPathBuilder.engineBuild(SunCertPathBuilder.java:174)
    [junit]     at java.security.cert.CertPathBuilder.build(CertPathBuilder.java:238)
    [junit]     at sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:280)
    [junit]
    [junit] Test it.unibas.icar.temp.TestHttpRoute FAILED","02/Apr/08 11:04;mickysantomax;I run personalized HttpRouteTest with https protocol but I receive the following error :


    [junit] DEBUG [temp.TestHttpsRoute - tearDown] - tearDown test: testHelloEndpoint
    [junit] ------------- ---------------- ---------------
    [junit] ------------- Standard Error -----------------
    [junit] 2008-04-02 12:50:52.776::INFO:  Logging to STDERR via org.mortbay.log.StdErrLog
    [junit] 2008-04-02 12:50:52.881::INFO:  jetty-6.1.8
    [junit] 2008-04-02 12:50:52.169::INFO:  Started SslSocketConnector@0.0.0.0:18196
    [junit] 2008-04-02 12:50:52.618::WARN:  EXCEPTION
    [junit] javax.net.ssl.SSLHandshakeException: Received fatal alert: certificate_unknown
    [junit]     at com.sun.net.ssl.internal.ssl.Alerts.getSSLException(Alerts.java:174)
    [junit]     at com.sun.net.ssl.internal.ssl.Alerts.getSSLException(Alerts.java:136)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.recvAlert(SSLSocketImpl.java:1657)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:932)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1096)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1123)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1107)
    [junit]     at org.mortbay.jetty.security.SslSocketConnector$SslConnection.run(SslSocketConnector.java:615)
    [junit]     at org.mortbay.thread.BoundedThreadPool$PoolThread.run(BoundedThreadPool.java:450)
    [junit] 2008-04-02 12:50:52.733::INFO:  jetty-6.1.8
    [junit] 2008-04-02 12:50:52.738::INFO:  Started SslSocketConnector@0.0.0.0:18196
    [junit] 2008-04-02 12:50:52.747::WARN:  EXCEPTION
    [junit] javax.net.ssl.SSLHandshakeException: Received fatal alert: certificate_unknown
    [junit]     at com.sun.net.ssl.internal.ssl.Alerts.getSSLException(Alerts.java:174)
    [junit]     at com.sun.net.ssl.internal.ssl.Alerts.getSSLException(Alerts.java:136)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.recvAlert(SSLSocketImpl.java:1657)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:932)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1096)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1123)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1107)
    [junit]     at org.mortbay.jetty.security.SslSocketConnector$SslConnection.run(SslSocketConnector.java:615)
    [junit]     at org.mortbay.thread.BoundedThreadPool$PoolThread.run(BoundedThreadPool.java:450)
    [junit] ------------- ---------------- ---------------
    [junit]
    [junit] Testcase: testEndpoint took 1,136 sec
    [junit]     Caused an ERROR
    [junit] javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
    [junit] org.apache.camel.RuntimeCamelException: javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
    [junit]     at org.apache.camel.util.ProducerCache.send(ProducerCache.java:86)
    [junit]     at org.apache.camel.CamelTemplate.send(CamelTemplate.java:119)
    [junit]     at org.apache.camel.CamelTemplate.sendBodyAndHeader(CamelTemplate.java:225)
    [junit]     at org.apache.camel.CamelTemplate.sendBodyAndHeader(CamelTemplate.java:211)
    [junit]     at it.unibas.icar.temp.TestHttpRoute.invokeHttpEndpoint(TestHttpRoute.java:59)
    [junit]     at it.unibas.icar.temp.TestHttpRoute.testEndpoint(TestHttpRoute.java:27)
    [junit] Caused by: javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
    [junit]     at com.sun.net.ssl.internal.ssl.Alerts.getSSLException(Alerts.java:174)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.fatal(SSLSocketImpl.java:1591)
    [junit]     at com.sun.net.ssl.internal.ssl.Handshaker.fatalSE(Handshaker.java:187)
    [junit]     at com.sun.net.ssl.internal.ssl.Handshaker.fatalSE(Handshaker.java:181)
    [junit]     at com.sun.net.ssl.internal.ssl.ClientHandshaker.serverCertificate(ClientHandshaker.java:975)
    [junit]     at com.sun.net.ssl.internal.ssl.ClientHandshaker.processMessage(ClientHandshaker.java:123)
    [junit]     at com.sun.net.ssl.internal.ssl.Handshaker.processLoop(Handshaker.java:516)
    [junit]     at com.sun.net.ssl.internal.ssl.Handshaker.process_record(Handshaker.java:454)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:884)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1096)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.writeRecord(SSLSocketImpl.java:623)
    [junit]     at com.sun.net.ssl.internal.ssl.AppOutputStream.write(AppOutputStream.java:59)
    [junit]     at java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:65)
    [junit]     at java.io.BufferedOutputStream.flush(BufferedOutputStream.java:123)
    [junit]     at java.io.FilterOutputStream.flush(FilterOutputStream.java:123)
    [junit]     at org.apache.commons.httpclient.methods.EntityEnclosingMethod.writeRequestBody(EntityEnclosingMethod.java:506)
    [junit]     at org.apache.commons.httpclient.HttpMethodBase.writeRequest(HttpMethodBase.java:2110)
    [junit]     at org.apache.commons.httpclient.HttpMethodBase.execute(HttpMethodBase.java:1088)
    [junit]     at org.apache.commons.httpclient.HttpMethodDirector.executeWithRetry(HttpMethodDirector.java:398)
    [junit]     at org.apache.commons.httpclient.HttpMethodDirector.executeMethod(HttpMethodDirector.java:171)
    [junit]     at org.apache.commons.httpclient.HttpClient.executeMethod(HttpClient.java:397)
    [junit]     at org.apache.commons.httpclient.HttpClient.executeMethod(HttpClient.java:323)
    [junit]     at org.apache.camel.component.http.HttpProducer.process(HttpProducer.java:59)
    [junit]     at org.apache.camel.util.ProducerCache.sendExchange(ProducerCache.java:147)
    [junit]     at org.apache.camel.util.ProducerCache.send(ProducerCache.java:84)
    [junit] Caused by: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
    [junit]     at sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:285)
    [junit]     at sun.security.validator.PKIXValidator.engineValidate(PKIXValidator.java:191)
    [junit]     at sun.security.validator.Validator.validate(Validator.java:218)
    [junit]     at com.sun.net.ssl.internal.ssl.X509TrustManagerImpl.validate(X509TrustManagerImpl.java:126)
    [junit]     at com.sun.net.ssl.internal.ssl.X509TrustManagerImpl.checkServerTrusted(X509TrustManagerImpl.java:209)
    [junit]     at com.sun.net.ssl.internal.ssl.X509TrustManagerImpl.checkServerTrusted(X509TrustManagerImpl.java:249)
    [junit]     at com.sun.net.ssl.internal.ssl.ClientHandshaker.serverCertificate(ClientHandshaker.java:954)
    [junit] Caused by: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
    [junit]     at sun.security.provider.certpath.SunCertPathBuilder.engineBuild(SunCertPathBuilder.java:174)
    [junit]     at java.security.cert.CertPathBuilder.build(CertPathBuilder.java:238)
    [junit]     at sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:280)
    [junit]
    [junit] Testcase: testHelloEndpoint took 0,222 sec
    [junit]     Caused an ERROR
    [junit] sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
    [junit] javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
    [junit]     at com.sun.net.ssl.internal.ssl.Alerts.getSSLException(Alerts.java:174)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.fatal(SSLSocketImpl.java:1591)
    [junit]     at com.sun.net.ssl.internal.ssl.Handshaker.fatalSE(Handshaker.java:187)
    [junit]     at com.sun.net.ssl.internal.ssl.Handshaker.fatalSE(Handshaker.java:181)
    [junit]     at com.sun.net.ssl.internal.ssl.ClientHandshaker.serverCertificate(ClientHandshaker.java:975)
    [junit]     at com.sun.net.ssl.internal.ssl.ClientHandshaker.processMessage(ClientHandshaker.java:123)
    [junit]     at com.sun.net.ssl.internal.ssl.Handshaker.processLoop(Handshaker.java:516)
    [junit]     at com.sun.net.ssl.internal.ssl.Handshaker.process_record(Handshaker.java:454)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:884)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1096)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1123)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1107)
    [junit]     at sun.net.www.protocol.https.HttpsClient.afterConnect(HttpsClient.java:405)
    [junit]     at sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect(AbstractDelegateHttpsURLConnection.java:166)
    [junit]     at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:977)
    [junit]     at sun.net.www.protocol.https.HttpsURLConnectionImpl.getInputStream(HttpsURLConnectionImpl.java:234)
    [junit]     at java.net.URL.openStream(URL.java:1009)
    [junit]     at it.unibas.icar.temp.TestHttpRoute.testHelloEndpoint(TestHttpRoute.java:47)
    [junit] Caused by: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
    [junit]     at sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:285)
    [junit]     at sun.security.validator.PKIXValidator.engineValidate(PKIXValidator.java:191)
    [junit]     at sun.security.validator.Validator.validate(Validator.java:218)
    [junit]     at com.sun.net.ssl.internal.ssl.X509TrustManagerImpl.validate(X509TrustManagerImpl.java:126)
    [junit]     at com.sun.net.ssl.internal.ssl.X509TrustManagerImpl.checkServerTrusted(X509TrustManagerImpl.java:209)
    [junit]     at com.sun.net.ssl.internal.ssl.X509TrustManagerImpl.checkServerTrusted(X509TrustManagerImpl.java:249)
    [junit]     at com.sun.net.ssl.internal.ssl.ClientHandshaker.serverCertificate(ClientHandshaker.java:954)
    [junit] Caused by: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
    [junit]     at sun.security.provider.certpath.SunCertPathBuilder.engineBuild(SunCertPathBuilder.java:174)
    [junit]     at java.security.cert.CertPathBuilder.build(CertPathBuilder.java:238)
    [junit]     at sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:280)
    [junit]
    [junit] Test temp.TestHttpsRoute FAILED","02/Apr/08 12:11;gtully;for: Caused by: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
see a good explination @ http://blogs.sun.com/andreas/entry/no_more_unable_to_find

Essentially the problem is that the cert is self signed or does not use a hostname as the CN component. The blog post and referenced code should help.

For my test I used a a jetty client (which uses apache commons httpclient) and added a protocol handler that will not validate the servers cert. Configuring the default jdk httpClient is probably a little different.

return new RouteBuilder() {
            public void configure() {
                
                Protocol easyhttps = new Protocol(""https"", new EasySSLProtocolSocketFactory(), 8080);
                Protocol.registerProtocol(""https"", easyhttps);
                
                
                from(""jetty:https://localhost:8080/test"").to(""mock:a"");

                Processor proc = new Processor() {
                    public void process(Exchange exchange) throws Exception {
                        exchange.getOut(true).setBody(""<b>Hello World</b>"");
                    }
                };
                from(""jetty:https://localhost:8080/hello"").process(proc);
            }
        };

where EasySSLProtocolSocketFactory is @ http://svn.apache.org/viewvc/httpcomponents/oac.hc3x/trunk/src/contrib/org/apache/commons/httpclient/contrib/ssl/EasySSLProtocolSocketFactory.java?view=markup

more doco for httpClient @ http://hc.apache.org/httpclient-3.x/sslguide.html

This is all to work around the use of a self-signed cert which is a little bogus.

The alternative is to use a real valid signed cert from one of the approved authorities and add it to the keystore.
","02/Apr/08 18:40;mickysantomax;James, I think is a good solution to set getter and setter methods for SslSocketConnector in JettyHttpComponent with which one can set (for example) the keystore path or anything else. 

If you want to consider this suggestion I have attached file with this patch","10/Apr/08 09:58;gtully;I have uploaded the HttpsRouteTest to https://issues.apache.org/activemq/browse/CAMEL-409?focusedCommentId=42164#action_42164

I added an exception test that verifies a SocketException on access to the https endpoint via http which works as expected. I don't get a status 200 ok. This is from the jdk URLConnection, not from a camel consumer however. I need to try the camel consumer.",10/Apr/08 10:16;gtully;just added another test and resubmitted the patch to CAMEL-409. The camel consumer throws an exception as expected when a http endpoint is invoked from http.,12/May/08 12:45;davsclaus;Closed all 1.3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Javadoc warnings,CAMEL-404,12484923,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,davsclaus,davsclaus,davsclaus,28/Mar/08 05:51,12/May/08 07:46,14/Mar/19 02:42,30/Mar/08 17:15,1.3.0,,,,,,,,,,1.3.0,,,,,,,0,Get the javadoc warnings reported by the javadoc generator fixed.,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,83235,,,Sun Mar 30 17:15:46 UTC 2008,,,,,,,0|i01c0v:,5717,,,,,,,,,28/Mar/08 11:33;davsclaus;And unused imports as well,"30/Mar/08 14:41;davsclaus;Progress:
- camel-core (301 warnings) fixed
- camel-cxf (11 warnings fixed)
- camel-http (1 warning fixed)
- camel-jms (17 warnings fixed)
- camel-mail (21 warnings fixed)
- camel-rmi (7 warnings fixed)
- camel-script (18 warnings fixed)
- camel-spring (5 warnings fixed)
- camel-xmpp (18 warnings fixed)","30/Mar/08 17:15;davsclaus;Okay got the warnings.

However the javadoc could use an overhaul, leaving this for another ticket.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
handleAll() swallows exceptions,CAMEL-399,12485252,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,romkal,romkal,26/Mar/08 10:40,12/May/08 12:45,14/Mar/19 02:42,27/Mar/08 23:01,,,,,,,,,,,1.3.0,,,camel-core,,,,0,handleAll() section in tryBlock() swallows exceptions even if they were not catched by some handle() section so intended behavior that should mimic finally keyword from java is not accomplished.,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-03-26 12:30:57.392,,,no_permission,,,,,,,,,,,,,103042,,,Mon May 12 12:45:34 UTC 2008,,,,,,,0|i01bzr:,5712,,,,,,,,,26/Mar/08 10:44;romkal;Patch applied.,"26/Mar/08 12:30;gtully;just one thought:
handleAll sounds like catch(Throwable) to me, to mimic the finally keyword I would expect a finallyBlock() that matches the tryBlock().","26/Mar/08 16:17;hadrian;The patch for this issue breaks the build.

We should also clarify the semantics based on Gary's comment.  Since handleAll could be achieved with a handle(Throwable), the missing semantics would be that of a finally block, as Roman assumed, but then we should probably change the dsl from 'handleAll' to 'finally'.

I am going to do that if there's no objection, in addition to fixing the failing test.",12/May/08 12:45;davsclaus;Closed all 1.3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
build fails now that the new javadoc patches have been applied,CAMEL-397,12485219,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,jstrachan,jstrachan,25/Mar/08 18:42,12/May/08 12:45,14/Mar/19 02:42,28/Mar/08 02:21,,,,,,,,,,,1.3.0,,,,,,,0,"Not sure why - but recent changes to fix the javadoc issue seems to have broken the assembly build. Does it still work for you on windows? Maybe if you trash your .m2/repository and try again it might not?

[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: Assembly
[INFO]    task-segment: [clean, install]
[INFO] ------------------------------------------------------------------------
[INFO] artifact org.apache.maven.plugins:maven-dependency-plugin: checking for updates from maven2-repository.dev.java.net
[INFO] artifact org.apache.maven.plugins:maven-dependency-plugin: checking for updates from codehaus.repo
[INFO] artifact org.apache.maven.plugins:maven-dependency-plugin: checking for updates from open.iona.m2
[INFO] artifact org.apache.camel:maven-camel-converters: checking for updates from apache.incubating.releases
[INFO] artifact org.apache.camel:maven-camel-converters: checking for updates from maven2-repository.dev.java.net
[INFO] artifact org.apache.camel:maven-camel-converters: checking for updates from codehaus.repo
[INFO] artifact org.apache.camel:maven-camel-converters: checking for updates from open.iona.m2
[INFO] snapshot org.apache.camel:maven-camel-converters:1.3-SNAPSHOT: checking for updates from apache.incubating.releases
[INFO] snapshot org.apache.camel:maven-camel-converters:1.3-SNAPSHOT: checking for updates from apache.snapshots
[INFO] snapshot org.apache.camel:maven-camel-converters:1.3-SNAPSHOT: checking for updates from maven2-repository.dev.java.net
[INFO] snapshot org.apache.camel:maven-camel-converters:1.3-SNAPSHOT: checking for updates from codehaus.repo
[INFO] snapshot org.apache.camel:maven-camel-converters:1.3-SNAPSHOT: checking for updates from open.iona.m2
[INFO] [clean:clean]
[INFO] Deleting directory /workspace/java/camel/apache-camel/target
[INFO] [resources:resources]
[INFO] Using default encoding to copy filtered resources.
[WARNING] POM for 'org.iso_relax.verifier.jaxp.validation:isorelax-jaxp-bridge:pom:1.0:compile' is invalid. It will be ignored for artifact resolution. Reason: Not a v4.0.0 POM. for project org.iso_relax.verifier.jaxp.validation:isorelax-jaxp-bridge at /Users/jstrachan/.m2/repository/org/iso_relax/verifier/jaxp/validation/isorelax-jaxp-bridge/1.0/isorelax-jaxp-bridge-1.0.pom
[INFO] snapshot org.apache.camel:camel-groovy:1.3-SNAPSHOT: checking for updates from apache.incubating.releases
[INFO] snapshot org.apache.camel:camel-groovy:1.3-SNAPSHOT: checking for updates from apache.snapshots
[INFO] snapshot org.apache.camel:camel-groovy:1.3-SNAPSHOT: checking for updates from open.iona.m2
[INFO] snapshot org.apache.camel:camel-groovy:1.3-SNAPSHOT: checking for updates from uface.m2
[INFO] snapshot org.apache.camel:camel-mina:1.3-SNAPSHOT: checking for updates from apache.incubating.releases
[INFO] snapshot org.apache.camel:camel-mina:1.3-SNAPSHOT: checking for updates from apache.snapshots
[INFO] snapshot org.apache.camel:camel-mina:1.3-SNAPSHOT: checking for updates from open.iona.m2
[INFO] snapshot org.apache.camel:camel-mina:1.3-SNAPSHOT: checking for updates from uface.m2
[INFO] snapshot org.apache.camel:camel-ftp:1.3-SNAPSHOT: checking for updates from apache.incubating.releases
[INFO] snapshot org.apache.camel:camel-ftp:1.3-SNAPSHOT: checking for updates from apache.snapshots
[INFO] snapshot org.apache.camel:camel-ftp:1.3-SNAPSHOT: checking for updates from open.iona.m2
[INFO] snapshot org.apache.camel:camel-ftp:1.3-SNAPSHOT: checking for updates from uface.m2
[INFO] snapshot org.apache.camel:camel-mail:1.3-SNAPSHOT: checking for updates from apache.incubating.releases
[INFO] snapshot org.apache.camel:camel-mail:1.3-SNAPSHOT: checking for updates from apache.snapshots
[INFO] snapshot org.apache.camel:camel-mail:1.3-SNAPSHOT: checking for updates from open.iona.m2
[INFO] snapshot org.apache.camel:camel-mail:1.3-SNAPSHOT: checking for updates from uface.m2
[INFO] snapshot org.apache.camel:camel-bam:1.3-SNAPSHOT: checking for updates from apache.incubating.releases
[INFO] snapshot org.apache.camel:camel-bam:1.3-SNAPSHOT: checking for updates from apache.snapshots
[INFO] snapshot org.apache.camel:camel-bam:1.3-SNAPSHOT: checking for updates from open.iona.m2
[INFO] snapshot org.apache.camel:camel-bam:1.3-SNAPSHOT: checking for updates from uface.m2
[INFO] snapshot org.apache.camel:camel-msv:1.3-SNAPSHOT: checking for updates from apache.incubating.releases
[INFO] snapshot org.apache.camel:camel-msv:1.3-SNAPSHOT: checking for updates from apache.snapshots
[INFO] snapshot org.apache.camel:camel-msv:1.3-SNAPSHOT: checking for updates from open.iona.m2
[INFO] snapshot org.apache.camel:camel-msv:1.3-SNAPSHOT: checking for updates from uface.m2
[INFO] snapshot org.apache.camel:camel-velocity:1.3-SNAPSHOT: checking for updates from apache.incubating.releases
[INFO] snapshot org.apache.camel:camel-velocity:1.3-SNAPSHOT: checking for updates from apache.snapshots
[INFO] snapshot org.apache.camel:camel-velocity:1.3-SNAPSHOT: checking for updates from open.iona.m2
[INFO] snapshot org.apache.camel:camel-velocity:1.3-SNAPSHOT: checking for updates from uface.m2
[INFO] snapshot org.apache.camel:camel-xmpp:1.3-SNAPSHOT: checking for updates from apache.incubating.releases
[INFO] snapshot org.apache.camel:camel-xmpp:1.3-SNAPSHOT: checking for updates from apache.snapshots
[INFO] snapshot org.apache.camel:camel-xmpp:1.3-SNAPSHOT: checking for updates from open.iona.m2
[INFO] snapshot org.apache.camel:camel-xmpp:1.3-SNAPSHOT: checking for updates from uface.m2
[INFO] snapshot org.apache.camel:camel-ibatis:1.3-SNAPSHOT: checking for updates from apache.incubating.releases
[INFO] snapshot org.apache.camel:camel-ibatis:1.3-SNAPSHOT: checking for updates from apache.snapshots
[INFO] snapshot org.apache.camel:camel-ibatis:1.3-SNAPSHOT: checking for updates from open.iona.m2
[INFO] snapshot org.apache.camel:camel-ibatis:1.3-SNAPSHOT: checking for updates from uface.m2
[INFO] snapshot org.apache.camel:camel-quartz:1.3-SNAPSHOT: checking for updates from apache.incubating.releases
[INFO] snapshot org.apache.camel:camel-quartz:1.3-SNAPSHOT: checking for updates from apache.snapshots
[INFO] snapshot org.apache.camel:camel-quartz:1.3-SNAPSHOT: checking for updates from open.iona.m2
[INFO] snapshot org.apache.camel:camel-quartz:1.3-SNAPSHOT: checking for updates from uface.m2
[INFO] snapshot org.apache.camel:camel-atom:1.3-SNAPSHOT: checking for updates from apache.incubating.releases
[INFO] snapshot org.apache.camel:camel-atom:1.3-SNAPSHOT: checking for updates from apache.snapshots
[INFO] snapshot org.apache.camel:camel-atom:1.3-SNAPSHOT: checking for updates from open.iona.m2
[INFO] snapshot org.apache.camel:camel-atom:1.3-SNAPSHOT: checking for updates from uface.m2
[INFO] snapshot org.apache.camel:camel-jetty:1.3-SNAPSHOT: checking for updates from apache.incubating.releases
[INFO] snapshot org.apache.camel:camel-jetty:1.3-SNAPSHOT: checking for updates from apache.snapshots
[INFO] snapshot org.apache.camel:camel-jetty:1.3-SNAPSHOT: checking for updates from open.iona.m2
[INFO] snapshot org.apache.camel:camel-jetty:1.3-SNAPSHOT: checking for updates from uface.m2
[INFO] snapshot org.apache.camel:camel-ognl:1.3-SNAPSHOT: checking for updates from apache.incubating.releases
[INFO] snapshot org.apache.camel:camel-ognl:1.3-SNAPSHOT: checking for updates from apache.snapshots
[INFO] snapshot org.apache.camel:camel-ognl:1.3-SNAPSHOT: checking for updates from open.iona.m2
[INFO] snapshot org.apache.camel:camel-ognl:1.3-SNAPSHOT: checking for updates from uface.m2
[INFO] snapshot org.apache.camel:camel-saxon:1.3-SNAPSHOT: checking for updates from apache.incubating.releases
[INFO] snapshot org.apache.camel:camel-saxon:1.3-SNAPSHOT: checking for updates from apache.snapshots
[INFO] snapshot org.apache.camel:camel-saxon:1.3-SNAPSHOT: checking for updates from open.iona.m2
[INFO] snapshot org.apache.camel:camel-saxon:1.3-SNAPSHOT: checking for updates from uface.m2
[INFO] snapshot org.apache.camel:camel-xmlbeans:1.3-SNAPSHOT: checking for updates from apache.incubating.releases
[INFO] snapshot org.apache.camel:camel-xmlbeans:1.3-SNAPSHOT: checking for updates from apache.snapshots
[INFO] snapshot org.apache.camel:camel-xmlbeans:1.3-SNAPSHOT: checking for updates from open.iona.m2
[INFO] snapshot org.apache.camel:camel-xmlbeans:1.3-SNAPSHOT: checking for updates from uface.m2
[INFO] snapshot org.apache.camel:camel-script:1.3-SNAPSHOT: checking for updates from apache.incubating.releases
[INFO] snapshot org.apache.camel:camel-script:1.3-SNAPSHOT: checking for updates from apache.snapshots
[INFO] snapshot org.apache.camel:camel-script:1.3-SNAPSHOT: checking for updates from open.iona.m2
[INFO] snapshot org.apache.camel:camel-script:1.3-SNAPSHOT: checking for updates from uface.m2
[INFO] snapshot org.apache.camel:camel-rmi:1.3-SNAPSHOT: checking for updates from apache.incubating.releases
[INFO] snapshot org.apache.camel:camel-rmi:1.3-SNAPSHOT: checking for updates from apache.snapshots
[INFO] snapshot org.apache.camel:camel-rmi:1.3-SNAPSHOT: checking for updates from open.iona.m2
[INFO] snapshot org.apache.camel:camel-rmi:1.3-SNAPSHOT: checking for updates from uface.m2
[INFO] snapshot org.apache.camel:camel-jcr:1.3-SNAPSHOT: checking for updates from apache.incubating.releases
[INFO] snapshot org.apache.camel:camel-jcr:1.3-SNAPSHOT: checking for updates from apache.snapshots
[INFO] snapshot org.apache.camel:camel-jcr:1.3-SNAPSHOT: checking for updates from open.iona.m2
[INFO] snapshot org.apache.camel:camel-jcr:1.3-SNAPSHOT: checking for updates from uface.m2
[INFO] snapshot org.apache.camel:camel-josql:1.3-SNAPSHOT: checking for updates from apache.incubating.releases
[INFO] snapshot org.apache.camel:camel-josql:1.3-SNAPSHOT: checking for updates from apache.snapshots
[INFO] snapshot org.apache.camel:camel-josql:1.3-SNAPSHOT: checking for updates from open.iona.m2
[INFO] snapshot org.apache.camel:camel-josql:1.3-SNAPSHOT: checking for updates from uface.m2
[INFO] snapshot org.apache.camel:camel-jxpath:1.3-SNAPSHOT: checking for updates from apache.incubating.releases
[INFO] snapshot org.apache.camel:camel-jxpath:1.3-SNAPSHOT: checking for updates from apache.snapshots
[INFO] snapshot org.apache.camel:camel-jxpath:1.3-SNAPSHOT: checking for updates from open.iona.m2
[INFO] snapshot org.apache.camel:camel-jxpath:1.3-SNAPSHOT: checking for updates from uface.m2
[INFO] snapshot org.apache.camel:camel-xstream:1.3-SNAPSHOT: checking for updates from apache.incubating.releases
[INFO] snapshot org.apache.camel:camel-xstream:1.3-SNAPSHOT: checking for updates from apache.snapshots
[INFO] snapshot org.apache.camel:camel-xstream:1.3-SNAPSHOT: checking for updates from open.iona.m2
[INFO] snapshot org.apache.camel:camel-xstream:1.3-SNAPSHOT: checking for updates from uface.m2
[INFO] snapshot org.apache.camel:camel-csv:1.3-SNAPSHOT: checking for updates from apache.incubating.releases
[INFO] snapshot org.apache.camel:camel-csv:1.3-SNAPSHOT: checking for updates from apache.snapshots
[INFO] snapshot org.apache.camel:camel-csv:1.3-SNAPSHOT: checking for updates from open.iona.m2
[INFO] snapshot org.apache.camel:camel-csv:1.3-SNAPSHOT: checking for updates from uface.m2
[INFO] snapshot org.apache.camel:camel-jdbc:1.3-SNAPSHOT: checking for updates from apache.incubating.releases
[INFO] snapshot org.apache.camel:camel-jdbc:1.3-SNAPSHOT: checking for updates from apache.snapshots
[INFO] snapshot org.apache.camel:camel-jdbc:1.3-SNAPSHOT: checking for updates from open.iona.m2
[INFO] snapshot org.apache.camel:camel-jdbc:1.3-SNAPSHOT: checking for updates from uface.m2
[INFO] snapshot org.apache.camel:camel-jing:1.3-SNAPSHOT: checking for updates from apache.incubating.releases
[INFO] snapshot org.apache.camel:camel-jing:1.3-SNAPSHOT: checking for updates from apache.snapshots
[INFO] snapshot org.apache.camel:camel-jing:1.3-SNAPSHOT: checking for updates from open.iona.m2
[INFO] snapshot org.apache.camel:camel-jing:1.3-SNAPSHOT: checking for updates from uface.m2
[INFO] snapshot org.apache.camel:camel-jhc:1.3-SNAPSHOT: checking for updates from apache.incubating.releases
[INFO] snapshot org.apache.camel:camel-jhc:1.3-SNAPSHOT: checking for updates from apache.snapshots
[INFO] snapshot org.apache.camel:camel-jhc:1.3-SNAPSHOT: checking for updates from open.iona.m2
[INFO] snapshot org.apache.camel:camel-jhc:1.3-SNAPSHOT: checking for updates from uface.m2
[INFO] snapshot org.apache.camel:camel-stringtemplate:1.3-SNAPSHOT: checking for updates from apache.incubating.releases
[INFO] snapshot org.apache.camel:camel-stringtemplate:1.3-SNAPSHOT: checking for updates from apache.snapshots
[INFO] snapshot org.apache.camel:camel-stringtemplate:1.3-SNAPSHOT: checking for updates from open.iona.m2
[INFO] snapshot org.apache.camel:camel-stringtemplate:1.3-SNAPSHOT: checking for updates from uface.m2
[INFO] snapshot org.apache.camel:camel-stream:1.3-SNAPSHOT: checking for updates from apache.incubating.releases
[INFO] snapshot org.apache.camel:camel-stream:1.3-SNAPSHOT: checking for updates from apache.snapshots
[INFO] snapshot org.apache.camel:camel-stream:1.3-SNAPSHOT: checking for updates from open.iona.m2
[INFO] snapshot org.apache.camel:camel-stream:1.3-SNAPSHOT: checking for updates from uface.m2
[INFO] snapshot org.apache.camel:camel-jaxb:1.3-SNAPSHOT: checking for updates from apache.incubating.releases
[INFO] snapshot org.apache.camel:camel-jaxb:1.3-SNAPSHOT: checking for updates from apache.snapshots
[INFO] snapshot org.apache.camel:camel-jaxb:1.3-SNAPSHOT: checking for updates from open.iona.m2
[INFO] snapshot org.apache.camel:camel-jaxb:1.3-SNAPSHOT: checking for updates from uface.m2
[INFO] snapshot org.apache.camel:camel-jpa:1.3-SNAPSHOT: checking for updates from apache.incubating.releases
[INFO] snapshot org.apache.camel:camel-jpa:1.3-SNAPSHOT: checking for updates from apache.snapshots
[INFO] snapshot org.apache.camel:camel-jpa:1.3-SNAPSHOT: checking for updates from open.iona.m2
[INFO] snapshot org.apache.camel:camel-jpa:1.3-SNAPSHOT: checking for updates from uface.m2
[INFO] snapshot org.apache.camel:camel-irc:1.3-SNAPSHOT: checking for updates from apache.incubating.releases
[INFO] snapshot org.apache.camel:camel-irc:1.3-SNAPSHOT: checking for updates from apache.snapshots
[INFO] snapshot org.apache.camel:camel-irc:1.3-SNAPSHOT: checking for updates from open.iona.m2
[INFO] snapshot org.apache.camel:camel-irc:1.3-SNAPSHOT: checking for updates from uface.m2
[INFO] snapshot org.apache.camel:camel-cxf:1.3-SNAPSHOT: checking for updates from apache.incubating.releases
[INFO] snapshot org.apache.camel:camel-cxf:1.3-SNAPSHOT: checking for updates from apache.snapshots
[INFO] snapshot org.apache.camel:camel-cxf:1.3-SNAPSHOT: checking for updates from open.iona.m2
[INFO] snapshot org.apache.camel:camel-cxf:1.3-SNAPSHOT: checking for updates from uface.m2
[INFO] [compiler:compile]
[INFO] No sources to compile
[INFO] [resources:testResources]
[INFO] Using default encoding to copy filtered resources.
[WARNING] POM for 'org.iso_relax.verifier.jaxp.validation:isorelax-jaxp-bridge:pom:1.0:compile' is invalid. It will be ignored for artifact resolution. Reason: Not a v4.0.0 POM. for project org.iso_relax.verifier.jaxp.validation:isorelax-jaxp-bridge at /Users/jstrachan/.m2/repository/org/iso_relax/verifier/jaxp/validation/isorelax-jaxp-bridge/1.0/isorelax-jaxp-bridge-1.0.pom
[INFO] [compiler:testCompile]
[INFO] Not compiling test sources
[WARNING] POM for 'org.iso_relax.verifier.jaxp.validation:isorelax-jaxp-bridge:pom:1.0:compile' is invalid. It will be ignored for artifact resolution. Reason: Not a v4.0.0 POM. for project org.iso_relax.verifier.jaxp.validation:isorelax-jaxp-bridge at /Users/jstrachan/.m2/repository/org/iso_relax/verifier/jaxp/validation/isorelax-jaxp-bridge/1.0/isorelax-jaxp-bridge-1.0.pom
[INFO] [surefire:test]
[INFO] Tests are skipped.
[WARNING] POM for 'org.iso_relax.verifier.jaxp.validation:isorelax-jaxp-bridge:pom:1.0:compile' is invalid. It will be ignored for artifact resolution. Reason: Not a v4.0.0 POM. for project org.iso_relax.verifier.jaxp.validation:isorelax-jaxp-bridge at /Users/jstrachan/.m2/repository/org/iso_relax/verifier/jaxp/validation/isorelax-jaxp-bridge/1.0/isorelax-jaxp-bridge-1.0.pom
[INFO] [jar:jar]
[INFO] Building jar: /workspace/java/camel/apache-camel/target/apache-camel-1.3-SNAPSHOT.jar
[INFO] [dependency:unpack {execution: unpack-camel-core-javadoc}]
[INFO] Configured Artifact: org.apache.camel:camel-core:javadoc:1.3-SNAPSHOT:jar
[INFO] Unpacking /Users/jstrachan/.m2/repository/org/apache/camel/camel-core/1.3-SNAPSHOT/camel-core-1.3-SNAPSHOT-javadoc.jarto
 /workspace/java/camel/apache-camel/target/javadoc/camel-core
with Includes null and excludes:null
[INFO] [dependency:unpack {execution: unpack-camel-spring-javadoc}]
[INFO] Configured Artifact: org.apache.camel:camel-spring:javadoc:1.3-SNAPSHOT:jar
Downloading: http://people.apache.org/repo/m2-incubating-repository/org/apache/camel/camel-spring/1.3-SNAPSHOT/camel-spring-1.3-SNAPSHOT-javadoc.jar
Downloading: http://people.apache.org/repo/m2-snapshot-repository/org/apache/camel/camel-spring/1.3-SNAPSHOT/camel-spring-1.3-SNAPSHOT-javadoc.jar
Downloading: http://repo.open.iona.com/maven2/org/apache/camel/camel-spring/1.3-SNAPSHOT/camel-spring-1.3-SNAPSHOT-javadoc.jar
Downloading: http://uface.googlecode.com/svn/maven//org/apache/camel/camel-spring/1.3-SNAPSHOT/camel-spring-1.3-SNAPSHOT-javadoc.jar
[INFO] ------------------------------------------------------------------------
[ERROR] BUILD ERROR
[INFO] ------------------------------------------------------------------------
[INFO] Failed to resolve artifact.

GroupId: org.apache.camel
ArtifactId: camel-spring
Version: 1.3-SNAPSHOT

Reason: Unable to download the artifact from any repository

Try downloading the file manually from the project website.

Then, install it using the command: 
    mvn install:install-file -DgroupId=org.apache.camel -DartifactId=camel-spring -Dversion=1.3-SNAPSHOT -Dclassifier=javadoc -Dpackaging=jar -Dfile=/path/to/file

Alternatively, if you host your own repository you can deploy the file there: 
    mvn deploy:deploy-file -DgroupId=org.apache.camel -DartifactId=camel-spring -Dversion=1.3-SNAPSHOT -Dclassifier=javadoc -Dpackaging=jar -Dfile=/path/to/file -Durl=[url] -DrepositoryId=[id]


  org.apache.camel:camel-spring:jar:1.3-SNAPSHOT

from the specified remote repositories:
  central (http://repo1.maven.org/maven2),
  apache.snapshots (http://people.apache.org/repo/m2-snapshot-repository),
  uface.m2 (http://uface.googlecode.com/svn/maven/),
  open.iona.m2 (http://repo.open.iona.com/maven2),
  apache.incubating.releases (http://people.apache.org/repo/m2-incubating-repository)",OS X and Linux with Maven 2.0.7 and 2.0.8...,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-03-25 20:07:06.458,,,no_permission,,,,,,,,,,,,,103040,,,Mon May 12 12:45:34 UTC 2008,,,,,,,0|i01bzb:,5710,,,,,,,,,25/Mar/08 20:07;davsclaus;It doesn't work on my windows either.,"26/Mar/08 07:46;njiang;The build error is caused by the camel-spring module do not pack the java doc. 
I just submitted a patch to fix this bug.","26/Mar/08 18:05;davsclaus;I get this error now. Looks like you want to get hold of 900megs ;)
I am on JDK1.5.0_11 

[WARNING] Warning building bundle org.apache.camel:camel-spring:bundle:1.3-SNAPSHOT : Did not find matching referal for !javax.xml.bind.annotation.adapters
[INFO] [antrun:run {execution: package}]
[INFO] Executing tasks
     [echo] Deleting unwanted resources from the test-jar
   [delete] Deleting: D:\project\camel\components\camel-spring\target\test-classes\log4j.properties
[INFO] Executed tasks
[INFO] [javadoc:jar {execution: package}]
[WARNING] -top option is not supported on Java version < 1.6. Ignore this option.
Error occurred during initialization of VM
Could not reserve enough space for object heap
[INFO] ------------------------------------------------------------------------
[ERROR] BUILD ERROR
[INFO] ------------------------------------------------------------------------
[INFO] Error while creating archive:Exit code: 1 - Could not create the Java virtual machine.

Command line was:d:\jdk1.5.0_11\jre\..\bin\javadoc.exe -J-Xmx900m @options @packages

[INFO] ------------------------------------------------------------------------
[INFO] For more information, run Maven with the -e switch
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 1 minute 18 seconds
[INFO] Finished at: Wed Mar 26 19:02:07 CET 2008
[INFO] Final Memory: 36M/65M","26/Mar/08 18:34;davsclaus;Reducing to 512mb in pom.xml works on my machine now

{code}
<maxmemory>512m</maxmemory>
{code}",28/Mar/08 02:21;njiang;This patch is in the svn repository.,12/May/08 12:45;davsclaus;Closed all 1.3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BatchProcessor always consumes directly from endpoint ignoring previous steps,CAMEL-393,12485892,12487094,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,romkal,romkal,20/Mar/08 22:07,31/Jul/09 06:33,14/Mar/19 02:42,30/Dec/08 10:24,,,,,,,,,,,1.6.0,2.0-M1,,camel-core,,,,1,"Aggregator when created connects itself directly to the endpoint it 'originates' - not to the last step of processing so in such case

{code}
from(""seda:header"").setHeader(""visited"", constant(true)).aggregator(header(""cheese"")).to(""mock:result"");
{code}

at {{mock:result}} _visited_ header is not set and in fact there are two different routes created that start from {{seda:header}}: one directly to aggregator, and the second one to {{setHeader()}}.

In case of direct endpoint everything works because direct component invokes flows one-by-one so it will set the header, and then aggregate, but with seda it doesn't work.

Lets look at the test I added to {{AggregatorTest}} class to see the problem ({{_testAggregatorNotAtStart()}}). This test doesn't pass so far and I was unable to fix it, because I'm not good enough in DSL code. maybe someone could handle this.
Another solution is to let to specify aggregator in RouteType so it could be used only just after {{from()}}.",,,,,,,,,,,,,,,,,18/Oct/08 13:23;davsclaus;CAMEL_393.patch;https://issues.apache.org/jira/secure/attachment/12462578/CAMEL_393.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-08-29 06:04:16.927,,,no_permission,,,,,,,,,,,,,103036,,,Fri Jul 31 06:33:32 UTC 2009,,,,,,,0|i01byf:,5706,,,,,,,,,29/Aug/08 06:04;njiang;Enabled the test by introducing  a direct endpoint before the BatchProcessor.,"29/Aug/08 08:12;romkal;Hello Willem!

I see that you enabled the test and it passes by introducing another direct endpoint.

The problem is that it should pass (In my opinion) without introducing this new endpoint in the exact form it was previously.",03/Oct/08 00:43;hadrian;This is a bit messy...  I may have to move it to 2.0.,"05/Oct/08 14:46;davsclaus;yes it actually is, I discovered this too when I was looking into the aggregator.

Great that you pick up the glove and we should get it sorted in camel 2.0.",05/Oct/08 14:47;davsclaus;Maybe we should write something to the release notes of 1.5 in the known issues section?,"18/Oct/08 13:23;davsclaus;A patch to throw an exception if the route is configured wrong so end-users get this exception and can fix it

Later we can get it fixed properly (if possible without to much hazzle)",19/Oct/08 13:50;davsclaus;I commited the patch that throws an exception if the route is not configued properly.,08/Dec/08 13:10;mrt1nz;A patch for this is attached to CAMEL-1037,30/Dec/08 10:24;davsclaus;This is fixed by Martin's patch,31/Jul/09 06:33;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"<camelContext> cannot include xmlns:c="".."" attributes due to Spring bug SPR-4599",CAMEL-391,12485203,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,jstrachan,jstrachan,19/Mar/08 09:21,12/May/08 12:45,14/Mar/19 02:42,19/Mar/08 12:10,,,,,,,,,,,1.3.0,,,,,,,0,"This is caused by this spring bug http://jira.springframework.org/browse/SPR-4599


",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-05-12 12:45:34.729,,,no_permission,,,,,,,,,,,,,103034,,,Mon May 12 12:45:34 UTC 2008,,,,,,,0|i01bxz:,5704,,,,,,,,,19/Mar/08 12:10;jstrachan;Test case NamespacePrefixTest added along with a patch,12/May/08 12:45;davsclaus;Closed all 1.3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Requestor doesn't honor JmsConfiguration.useVersion102,CAMEL-388,12487933,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,mikhail.krivoshein@gmail.com,mikhail.krivoshein@gmail.com,14/Mar/08 11:46,12/May/08 12:45,14/Mar/19 02:42,20/Mar/08 04:16,1.3.0,,,,,,,,,,1.3.0,,,camel-jms,,,,0,"Requestor doesn't honor JmsConfiguration.useVersion102

Within createListenerContainer() it creates instance of SimpleMessageListenerContainer, however for 1.0.2 it have to create instance of SimpleMessageListenerContainer102 instead.",,,,,,,,,,,,,,,,,18/Mar/08 15:01;gertvanthienen;CAMEL-388.diff;https://issues.apache.org/jira/secure/attachment/12462318/CAMEL-388.diff,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-03-18 15:01:27.494,,,no_permission,,,,,,,,,,,,,83236,,,Mon May 12 12:45:34 UTC 2008,,,Patch Available,,,,0|i01bxb:,5701,,,,,,,,,18/Mar/08 15:01;gertvanthienen;Like this?,"18/Mar/08 22:14;mikhail.krivoshein@gmail.com;Looks fine! Though I don't need is it possible for configuration to be null or not.
I'm still struggling with setting up Camel project within my Eclipse - the reason why I didn't submit a patch myself.
Thanks!",20/Mar/08 04:16;njiang;Patch applied with thanks. Please verify it when the new snapshot comes out.,12/May/08 12:45;davsclaus;Closed all 1.3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Support for a full customized soap-fault incl. fault-code and detail,CAMEL-384,12485166,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,gigerstyle,gigerstyle,12/Mar/08 18:48,12/May/08 12:45,14/Mar/19 02:42,14/Mar/08 02:21,1.3.0,,,,,,,,,,1.3.0,,,camel-cxf,,,,0,Don't wrap a Fault in a Fault.,,,,,,,,,,,,,,,,,12/Mar/08 18:48;gigerstyle;ASF.LICENSE.NOT.GRANTED--camel-cxf-fault.patch;https://issues.apache.org/jira/secure/attachment/12462470/ASF.LICENSE.NOT.GRANTED--camel-cxf-fault.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-03-14 02:20:37.974,,,no_permission,,,,,,,,,,,,,83237,,,Mon May 12 12:45:33 UTC 2008,,,Patch Available,,,,0|i01bwf:,5697,,,,,,,,,"14/Mar/08 02:20;njiang;Hi Marc,
I just applied your patch to the trunk by hand. 
Could you use ""svn diff "" to generate the patch? Since I am just use eclipse not IntelliJ :(.

Regards,

Willem",12/May/08 12:45;davsclaus;Closed all 1.3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Exchange.getOut() not returning (blocking till timeout) when ExchangePattern.InOut used as well as message headers and exchange properties not passed when a Camel Mina used.,CAMEL-383,12485294,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,georgiosgeorgiadis,georgiosgeorgiadis,12/Mar/08 16:18,12/May/08 12:45,14/Mar/19 02:42,24/Mar/08 11:47,1.2.0,,,,,,,,,,1.3.0,,,camel-mina,,,,0,"Exchange.getOut() not returning (blocking till timeout) when ExchangePattern.InOut used. Additionally, message properties and exchange headers does not seem to be passed when using MINA TCP communication. In direct pojo or bean, everything seems working.
I have attached the classes needed to resolve the issue. No modifications are made to interfaces (method signatures). Classes affected are:
org/apache/camel/component/mina/MinaEndpoint.java
org/apache/camel/component/mina/MinaProducer.java
org/apache/camel/component/mina/MinaConsumer.java
new class introduced:
org/apache/camel/component/mina/MinaTransportObject.java

Junit test attached:

org\apache\camel\component\mina\MinaTcpExchangeTest.java
",Windows,,,,,,,,,,,,,,,,12/Mar/08 16:18;georgiosgeorgiadis;ASF.LICENSE.NOT.GRANTED--MinaTcpExchangeTest.java;https://issues.apache.org/jira/secure/attachment/12462443/ASF.LICENSE.NOT.GRANTED--MinaTcpExchangeTest.java,12/Mar/08 16:18;georgiosgeorgiadis;ASF.LICENSE.NOT.GRANTED--mina.zip;https://issues.apache.org/jira/secure/attachment/12462337/ASF.LICENSE.NOT.GRANTED--mina.zip,15/Mar/08 17:11;davsclaus;camel_383_patch.txt;https://issues.apache.org/jira/secure/attachment/12462391/camel_383_patch.txt,,,3.0,,,,,,,,,,,,,,,,,,,2008-03-15 11:07:00.465,,,no_permission,,,,,,,,,,,,,83134,,,Mon May 12 12:45:33 UTC 2008,,,,,,,0|i01bw7:,5696,,,,,,,,,"15/Mar/08 11:07;davsclaus;George, thanks for the code. I am currently looking into it now.","15/Mar/08 17:11;davsclaus;A patch with the following changes:
- copyright headers for missing files
- removed an unused import
- new feature to transfer exchange objects using TCP protocol (transferExchange=true) see MinaTransferExchangeOptionTest how to use it

The new feature only works for the TCP protocol and for the default codec (= object). So do not use textline=true as option.","16/Mar/08 07:11;davsclaus;I think this ticket should be changed from bug to new feature.

Also anyone got a better name for the option (transferExchange)?
I considered the option bodyOnly also but then I needed to make sure the defaults would be bodyOnly=true even when the parameter is not specified. ",16/Mar/08 07:11;davsclaus;TODO: Remember to update wiki component documentation with the new option if patch is accepted.,"17/Mar/08 05:23;njiang;Hi Claus,

I just committed your patch. Here is one issue for the MinaTransferExchangeOptionTest, since we do not mashal or unmashal the exchange's exchangeId, so I comment out the process assertion for  the exchangeId to pass the test .  

BTW, the document for the transferExchange properties is highly demanded, and I like to use the transferExchange as the  parameter name since it is more clear for the user :)

Regards,

Willem.","19/Mar/08 14:32;davsclaus;Hi Willem

I am on vacation at my parents at the time being and there I have not access to the net. So its a bit challenge to work on Camel using maven in offline mode.
I decided in last minute to remove the transfer of exchangeid, but I forgot to remove it in the unit tests that still could pass if the generated ids are the same.

Today I have access to the net for a few hours so I am trying to catch up on the mail and the camel commits to merge with a few changes in the mina component I have improved during the last 3 days.

I will update the wiki documents on sunday when I am back home.
I am also working on providing a camel-mina-example sample for the distribution.",24/Mar/08 08:17;davsclaus;Basic documentation added to the mina component on the wiki.,12/May/08 12:45;davsclaus;Closed all 1.3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-mina UDP protocol fails when sending bytes,CAMEL-380,12485274,12485176,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,davsclaus,davsclaus,09/Mar/08 12:43,12/May/08 07:48,14/Mar/19 02:42,10/Mar/08 02:28,1.3.0,,,,,,,,,,1.3.0,,,camel-mina,,,,0,"Using a CamelProducer to send bytes to a mina UDP listener fails.

This unit tests below fails
Using: ""Hello from bytes"" as a plain string works fine.

{code}
    public void testSendingByteMessages() throws Exception {
        MockEndpoint endpoint = getMockEndpoint(""mock:result"");
        endpoint.expectedMessageCount(1);

        template.sendBody(""mina:udp://127.0.0.1:4445"", ""Hello from bytes"".getBytes());
        // sleeping for while to let the mock endpoint get all the message
        Thread.sleep(1000);

        assertMockEndpointsSatisifed();
        List<Exchange> list = endpoint.getReceivedExchanges();
        assertEquals(""Hello from bytes"", list.get(0).getIn().getBody(String.class));
    }
{code}",,,,,,,,,,,,,,,,,09/Mar/08 13:32;davsclaus;camel_380_patch.txt;https://issues.apache.org/jira/secure/attachment/12462317/camel_380_patch.txt,09/Mar/08 13:57;davsclaus;camel_380_patch2.txt;https://issues.apache.org/jira/secure/attachment/12462392/camel_380_patch2.txt,,,,2.0,,,,,,,,,,,,,,,,,,,2008-03-10 02:28:38.015,,,no_permission,,,,,,,,,,,,,83238,,,Mon Mar 10 02:28:38 UTC 2008,,,,,,,0|i01bvj:,5693,,,,,,,,,09/Mar/08 12:53;davsclaus;I think I got a fix now. It is in the works of being tested.,"09/Mar/08 13:32;davsclaus;The patch that fixes:
- this bug with bytes
- improved unit testing
- the 2 removed codelines in MinaComponent that converts to ByteBuffer is already handled by the first line in the method (convertTo).
",09/Mar/08 13:57;davsclaus;This patch is better as the unit tests is a bit better,10/Mar/08 02:28;njiang;The Patch is applied with thanks to Claus.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HttpBinding.writeResponse doesn't set the response status code (i.e. it's always 200),CAMEL-374,12485141,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,dtabwhite,dtabwhite,07/Mar/08 21:31,12/May/08 12:45,14/Mar/19 02:42,24/Mar/08 03:51,1.2.0,,,,,,,,,,1.3.0,,,camel-http,camel-jetty,,,0,"When writing out an Http response, the HttpBinding should check for the existing of the header HttpProducer.HTTP_RESPONSE_CODE and set it in the response if it's there.  This allows requests made via the http component to be output with the correct status code info.  If also allows processors in the flow to control the status code by setting the header themselves.",,,,,,,,,,,,,,,,,20/Mar/08 13:04;dtabwhite;HttpBinding.patch;https://issues.apache.org/jira/secure/attachment/12462492/HttpBinding.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-03-20 03:56:04.583,,,no_permission,,,,,,,,,,,,,83135,,,Mon May 12 12:45:33 UTC 2008,,,Patch Available,,,,0|i01bu7:,5687,,,,,,,,,"20/Mar/08 03:56;njiang;Hi David,
Please grand your patch with Apache license, or I can't apply this patch.
You can use the Manage Attachments link to do that .

Thanks,
Willem",24/Mar/08 03:51;njiang;Patch applied with thanks to David,12/May/08 12:45;davsclaus;Closed all 1.3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
xquery does not work from xml if query contains functions,CAMEL-373,12485237,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,hadrian,hadrian,07/Mar/08 15:09,12/May/08 12:45,14/Mar/19 02:42,07/Mar/08 20:50,1.3.0,,,,,,,,,,1.3.0,,,,,,,0,"Give something like this:

[                          main] DeadLetterChannel              ERROR Failed delivery for exchangeId: ID-xxxxx/63907-1204902526306/0-1. On delivery attempt: 0 caught: org.apache.camel.RuntimeExpressionException: net.sf.saxon.trans.DynamicError: org.w3c.dom.DOMException: HIERARCHY_REQUEST_ERR: An attempt was made to insert a node where it is not permitted. 
org.apache.camel.RuntimeExpressionException: net.sf.saxon.trans.DynamicError: org.w3c.dom.DOMException: HIERARCHY_REQUEST_ERR: An attempt was made to insert a node where it is not permitted. 
	at org.apache.camel.component.xquery.XQueryBuilder.evaluate(XQueryBuilder.java:124)



",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-05-12 12:45:33.881,,,no_permission,,,,,,,,,,,,,83240,,,Mon May 12 12:45:33 UTC 2008,,,,,,,0|i01btz:,5686,,,,,,,,,"07/Mar/08 15:14;hadrian;Patch applied, needs documentation.",07/Mar/08 20:50;hadrian;Patch and documentation done,12/May/08 12:45;davsclaus;Closed all 1.3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SftpConsumer is not connecting and retrieving remote files,CAMEL-370,12485169,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,hadrian,ccustine,ccustine,06/Mar/08 23:09,12/May/08 12:45,14/Mar/19 02:42,07/Mar/08 02:30,1.3.0,,,,,,,,,,1.3.0,,,camel-ftp,,,,0,SftpConsumer does not connect to server due to patch for CAMEL-251.  The SftpConsumer also checks remote file modification timestamp against last poll timestamp but incorrectly converts seconds to milliseconds using integer math so the resulting conversion is always negative and will never retrieve file.  I will attach the fixes to this issue.,,,,,,,,,,,,,,,,,06/Mar/08 23:48;ccustine;CAMEL-370.patch;https://issues.apache.org/jira/secure/attachment/12462376/CAMEL-370.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-03-07 02:30:31.754,,,no_permission,,,,,,,,,,,,,83241,,,Mon May 12 12:45:33 UTC 2008,,,Patch Available,,,,0|i01btb:,5683,,,,,,,,,06/Mar/08 23:48;ccustine;This patch fixes these issues and also reduces the log level on reconnects from WARN to INFO since this will happen on the first connection attempt every time and is normal behavior.  I also removed the TODO comments about checking TZ on the remote server because the SSH FTP spec already specifies UTC.,07/Mar/08 02:30;hadrian;Thanks Chris!,12/May/08 12:45;davsclaus;Closed all 1.3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
<to> with multiple <uri> elements invalid based on xsd schema.,CAMEL-368,12485167,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,kevin.ross@metova.com,kevin.ross@metova.com,06/Mar/08 15:52,12/May/08 12:45,14/Mar/19 02:42,07/Mar/08 18:05,,,,,,,,,,,1.3.0,,,camel-spring,,,,0,"From:
http://activemq.apache.org/camel/recipient-list.html

{code:xml}    <to>
      <uri>seda:b</uri>
      <uri>seda:c</uri>
      <uri>seda:d</uri>
    </to>
{code}",,,,,,,,,,,,,,,,,07/Mar/08 04:05;janstey;camel-368.patch;https://issues.apache.org/jira/secure/attachment/12462412/camel-368.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-03-07 02:29:47.117,,,no_permission,,,,,,,,,,,,,103019,,,Mon May 12 12:45:33 UTC 2008,,,Patch Available,,,,0|i01bsv:,5681,,,,,,,,,"07/Mar/08 02:29;janstey;Based on this forum entry 

http://www.nabble.com/Help-with-WireTap-please%21-%28Noob%29-to15710292s22882.html#a15712739

it seems that the correct format for this kinda thing is

{code}
  <route>
    <from uri=""seda:a""/>
    <to uri=""seda:b""/>
    <to uri=""seda:c""/>
    <to uri=""seda:d""/>
  </route>
{code}

That said, the public xsd (http://activemq.apache.org/camel/schema/spring/camel-spring.xsd) is way behind the one that gets auto generated in the camel-spring component... anybody know if that is planned to be updated?


",07/Mar/08 04:05;janstey;Just noticed that there was no test case for a static recipient list... attached is one using the DSL and one using Spring XML Extensions. ,07/Mar/08 18:05;jstrachan;patch applied with thanks,12/May/08 12:45;davsclaus;Closed all 1.3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-mina if exchange failed then out could potentially be a copy of in,CAMEL-364,12485173,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,davsclaus,davsclaus,06/Mar/08 06:04,12/May/08 07:48,14/Mar/19 02:42,09/Mar/08 07:37,1.3.0,,,,,,,,,,1.3.0,,,camel-mina,,,,0,"Using the camel-mina component in synchronous mode (InOut exchange pattern) there is a potential bug if eg a processor throws an exception.

This is a failed delivery in camel. And out-of-the-box the default policy is to retry up till 6 times. And if still failing camel-mina will continue and return a response to the client.
The respons is a duplicate of the in body.

A workaround is to set the out body to null immediately in your processor. If the body is null before the exception is thrown then camel-mina will no return a response.

To reproduce the bug see the MinaTcpWithInOutUsingPlainSocketTest and remove the setbody null code below and the test should fail.
{code}
 else if (""force-exception"".equals(in)) {
                            // clear out before throwing exception
                            e.getOut().setBody(null);
                            throw new IllegalArgumentException(""Forced exception"");
                        }
{code}

In MinaConsumer there is a TODO comment where the bug should be handled (from CAMEL-356)",,,,,,,,,,,,,,,CAMEL-356,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,83243,,,Sun Mar 09 07:37:46 UTC 2008,,,,,,,0|i01brz:,5677,,,,,,,,,06/Mar/08 06:05;davsclaus;Requires this patch,08/Mar/08 18:01;davsclaus;See patch on CAMEL-375,09/Mar/08 07:37;davsclaus;Fixed with patch from CAMEL-375,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-cxf component can't deal with the exception message in MESSAGE dataFormat,CAMEL-363,12485137,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,gigerstyle,gigerstyle,05/Mar/08 18:10,12/May/08 12:45,14/Mar/19 02:42,11/Mar/08 14:34,1.3.0,,,,,,,,,,1.3.0,,,camel-cxf,,,,0,"From: Willem Jiang
To: camel-user@activemq.apache.org
Subject: Re: camel-cxf throwing a fault
Date: Wed, 05 Mar 2008 16:26:41 +0800
Reply-To: camel-user@activemq.apache.org

Hi Marc,

It looks like camel-cxf component's issue which can't deal with the 
exception message in MESSAGE dataFormat.
Could you fill a JIRA for it ? I will fix it later this week.
As usual ,you just need throw the exception from the processor , CXF 
will try to marshal it into a soap fault.

Regards,
Willem

Marc Giger wrote:
> Hi,
>
> I'm trying to get the following camel route working where the
> dataformat is MESSAGE.
>
> <from uri=""cxf:bean:routerEndpoint?dataFormat=MESSAGE""/>            
> <process ref=""decryptProcessor""/>  
> <choice>
>     <when>  
>     	<methodCall bean=""endpointSelector"" method=""matches""/>
> 	    <to uri=""cxf:bean:serviceEndpoint?dataFormat=MESSAGE""/>  
>     </when>
>     <otherwise>  
>     	<to uri=""cxf:bean:localEndpoint?dataFormat=MESSAGE""/>   
>     </otherwise>
> </choice>  
>
> if the endpointSelector bean returns true the request is redirected to
> a remote webservice.
> otherwise the request is forwarded to a local cxf service (with
> local-transport)
>
> Now, if I invoke the routerEndpoint and somewhere in the pipeline
> happens an exception (in my case in the decryptProcessor), I get the
> following Exception in the outFault chain:
>
> Mar 4, 2008 10:48:35 PM org.apache.cxf.phase.PhaseInterceptorChain
> doIntercept INFO: Interceptor has thrown exception, unwinding now
> org.apache.cxf.interceptor.Fault
>         at
> org.apache.camel.component.cxf.interceptors.RawMessageContentRedirectInterceptor.handleMessage(RawMessageContentRedirectInterceptor.java:43)
> at
> org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:208)
> at
> org.apache.cxf.interceptor.OutgoingChainInterceptor.handleMessage(OutgoingChainInterceptor.java:74)
> at
> org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:208)
> at
> org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:77)
> at
> org.apache.cxf.transport.servlet.ServletDestination.doMessage(ServletDestination.java:79)
> at
> org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:264)
> at
> org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:160)
> at
> org.apache.cxf.transport.servlet.AbstractCXFServlet.invoke(AbstractCXFServlet.java:170)
> at
> org.apache.cxf.transport.servlet.AbstractCXFServlet.doPost(AbstractCXFServlet.java:148)
> at javax.servlet.http.HttpServlet.service(HttpServlet.java:727) at
> javax.servlet.http.HttpServlet.service(HttpServlet.java:820) at
> org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:487)
> at
> org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:362)
> at
> org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216)
> at
> org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181)
> at
> org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:712)
> at
> org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:405)
> at
> org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:211)
> at
> org.mortbay.jetty.handler.HandlerCollection.handle(HandlerCollection.java:114)
> at
> org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:139)
> at org.mortbay.jetty.Server.handle(Server.java:313) at
> org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:506)
> at
> org.mortbay.jetty.HttpConnection$RequestHandler.content(HttpConnection.java:844)
> at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:644) at
> org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:211) at
> org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:381) at
> org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:396)
> at
> org.mortbay.thread.BoundedThreadPool$PoolThread.run(BoundedThreadPool.java:442)
> Caused by: java.lang.NullPointerException at
> org.apache.commons.io.IOUtils.copyLarge(IOUtils.java:1025) at
> org.apache.commons.io.IOUtils.copy(IOUtils.java:999) at
> org.apache.camel.component.cxf.interceptors.RawMessageContentRedirectInterceptor.handleMessage(RawMessageContentRedirectInterceptor.java:39) ...
> 28 more
>
> This is because the InputStream is null in
> RawMessageContentRedirectInterceptor:
>
> public void handleMessage(Message message) throws Fault {
>
>         InputStream is = message.getContent(InputStream.class);
>         OutputStream os = message.getContent(OutputStream.class);
>         
>         try {            
>             IOUtils.copy(is, os);
>             is.close();
>             os.flush();
>         } catch (Exception e) {
>             throw new Fault(e);
>         }
>     }
>
> How can I return a custom soap-fault in a processor/filter?
>
> Thanks,
>
> Marc
>
>",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-03-11 14:34:02.316,,,no_permission,,,,,,,,,,,,,83244,,,Mon May 12 12:45:33 UTC 2008,,,,,,,0|i01brr:,5676,,,,,,,,,"11/Mar/08 14:34;njiang;The patch is committed, please check it out :)",12/May/08 12:45;davsclaus;Closed all 1.3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
@Component seems to cause configure() being called before @EndpointInject is invoked,CAMEL-361,12485160,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,jstrachan,jstrachan,05/Mar/08 13:37,05/Jun/08 09:04,14/Mar/19 02:42,14/May/08 06:27,,,,,,,,,,,1.4.0,,,camel-spring,,,,0,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-03-05 13:47:08.233,,,no_permission,,,,,,,,,,,,,103015,,,Wed May 14 06:27:39 UTC 2008,,,,,,,0|i01brb:,5674,,,,,,,,,"05/Mar/08 13:47;magnusheino;@Componet doesn't seem to matter. Same thing if I remove @Component. (Component was only there because I injected some spring stuff also)

My context looks like this:

<camelContext>
        <package>se.lantmateriet.origo</package>
        <endpoint id=""receiptChannel"" uri=""mock:updateReceipt"" />
        <endpoint id=""updateChannel"" uri=""file://src/test/data/EmptyChangeTransactionWithSoap.xml?noop=true"" />
        <endpoint id=""updateServiceChannel"" uri=""bean:updateService"" />
    </camelContext>

and in se.lantmateriet.origo.service.internal.ServiceRoutes that extends SpringRouteBuilder, configure is called before and @EndpointInject's are injected.",12/May/08 15:10;jstrachan;wonder if you fancy taking a look at this?,"13/May/08 07:28;njiang;Hi Magnus

Did you specify the <component-scan xmlns=""http://www.springframework.org/schema/context"" base-package=""*** /> in you spring configuration file?
You could take a look at the SpringComponentScanTest[1], which is workable for injecting the @component.

[1]https://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-spring/src/test/java/org/apache/camel/spring/config/scan/SpringComponentScanTest.java

Willem    ","13/May/08 08:53;magnusheino;I'm not sure I understand.

Create a class that extends SpringRouteBuilder.

Add @EndpointInject to inject endpoints created in the camelcontext, as the xml above.

Now, SpringRouteBuilder.configure is called before @EndpointInject is populated, so it is not possible to refer to the endpoints when you configure the route.

Ok?

/Magnus","13/May/08 10:04;njiang;Hi Magnus,

You need add @Autowired before the  @EndpointInject(name = ""yourEndpoint"") .
I just added a test to show that , please check out the MyRouteBuilder[1] for more information.

[1] https://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-spring/src/test/java/org/apache/camel/spring/config/scan/route/MyRouteBuilder.java

Willem","13/May/08 10:11;jstrachan;I wonder if we can avoid having to use @Autowired? Are you sure that @EndpointInject is even being used? (e.g. is it just @Autowired thats finding the Endpoint in the context?)

Is there some way to mark the @EndpointInject annotation so Spring knows its an injection point or something?","13/May/08 10:32;njiang;Hi James,

I just traced the code and found only the CamelBeanPostProcessor is in charge of the @EndpointInject. 
But the builder is not the bean that is created by spring, so the CamelBeanPostProcessor can't work here.
How can I touch the CamelBeanPostProcessor with the builder ?

Willem","13/May/08 10:37;jstrachan;So I guess the problem is if we use Camel's package scan, we're not using Spring to instantiate the RouteBuilder maybe? I wonder if we could use Spring to instantiate the RouteBuilder it'd invoke the CamelBeanPostProcessor? I wonder how we get Spring to invoke the BeanPostProcessor if a bean doesn't exist in the spring.xml?

I guess ultimately we should reuse Spring's @Component mechanism instead of the camel 'package' mechanism maybe?","14/May/08 06:27;njiang;The patch was committed into the trunk in Revision  656103, please check it out :)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Distribution assemblies generated from 1.3.0-RC2 tag are missing camel-core-1.3.0-tests.jar,CAMEL-353,12485124,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,sgargan,sgargan,04/Mar/08 01:59,12/May/08 12:45,14/Mar/19 02:42,04/Mar/08 04:36,,,,,,,,,,,1.3.0,,,,,,,0,"The Distributions are missing this core tests jar. THe spring tests jar is included, but depends in turn of the core tests jar. This is due to the core tests dependency being set with test scope. Removing the scoping includes it correctly. 

A patch is attached.

rgs,

ste","Windows XP (jdk 1.5.0_09) & Linux (2.6.24, jdk 1.5.0_14)",,,,,,,,,,,,,,,,04/Mar/08 03:18;sgargan;include-core-tests-in-bin.patch;https://issues.apache.org/jira/secure/attachment/12462429/include-core-tests-in-bin.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-03-04 03:00:55.727,,,no_permission,,,,,,,,,,,,,103007,,,Mon May 12 12:45:33 UTC 2008,,,Patch Available,,,,0|i01bpj:,5666,,,,,,,,,"04/Mar/08 03:00;njiang;Hi stephen,

Can you grand the ASF licence for you patch?  
Or I can't apply it .

Thanks,
Willem","04/Mar/08 03:10;sgargan;What do you need for me to do? Is it enough for me to grant it here? If so, duly granted! If you need a new patch with some extras just shout.

thx

ste","04/Mar/08 03:22;sgargan;Didn't see the selector the first time round. Good now.
","04/Mar/08 04:36;njiang;conformed the issue and applied the patch.

",12/May/08 12:45;davsclaus;Closed all 1.3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Aggregrator Batch Processor can sometimes ignore batchExpiry timeout that result in a hang/delay in processing, with jms",CAMEL-352,12485135,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gtully,gtully,gtully,03/Mar/08 14:13,22/Apr/08 14:13,14/Mar/19 02:42,03/Mar/08 14:36,1.3.0,,,,,,,,,,1.3.0,,,camel-core,,,,0,"The Batch processor behind the Aggregrator has a batch expiry timeout that governs the delivery of messages.  If the timeout expires during aggregration the resulting timeout value passed to PollingConsumer.receive will be negative. In the jms consumer case with the spring templates, a negative timeout != -1 is considered infinite/blocking.",,,,,,,,,,,,,,,,,03/Mar/08 14:14;gtully;batchTimeout.patch;https://issues.apache.org/jira/secure/attachment/12462316/batchTimeout.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-03-03 14:36:07.142,,,no_permission,,,,,,,,,,,,,83245,,,Mon Mar 03 14:36:07 UTC 2008,,,Patch Available,,,,0|i01bpb:,5665,,,,,,,,,"03/Mar/08 14:14;gtully;fix that breaks out of the processBatch loop if the batchTimeout goes negative.
Test case with jms component to validate and additional test case to the aggregrator to exercise the expiry code path.",03/Mar/08 14:36;hadrian;Patch applied with thanks! ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Minor mistakes in pom.xml,CAMEL-351,12485113,12486265,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,njiang,davsclaus,davsclaus,02/Mar/08 11:33,28/Mar/08 02:45,14/Mar/19 02:42,28/Mar/08 02:45,1.3.0,,,,,,,,,,1.3.0,,,camel-core,,,,0,"1)
apache-camel/pom.xml
Geronimo j2ee jacc spec is duplicated (2 of them)

2)
root/pomx.ml
httpcore-version>4.0-alpha6</httpcore-version
httpcore has released a -beta1 version

3)
root/pomx.ml
And groovy is listed as 
<version>1.1-beta-3</version>
Groovy 1.5.4 has been released.

4)
Hibernate has just released a new batch of GA versions

5)
camel-http/pom.xml
http-client has released a 3.1 final, the pom uses -rc1

camel-string/pom.xml
stringtemplate has released v3.1 but Camel refers to 2.3b6",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-03-05 14:18:37.695,,,no_permission,,,,,,,,,,,,,83246,,,Fri Mar 28 02:45:50 UTC 2008,,,,,,,0|i01bp3:,5664,,,,,,,,,05/Mar/08 10:16;davsclaus;If not mistaking OGNL has also released a newer version than i pom.xml files in Camel,"05/Mar/08 14:18;njiang;I just upgrade the httpcore to 4.0 beta1 and found there is no httpcore-niossl 4.0 beta1 component, also the latest stringtemplate in maven is v3.1b1. 
I will commit what I get at this moment.","05/Mar/08 19:24;davsclaus;#1 Fixed
#2 Partly fixed
#3 Fixed
#5 Fixed

7)
camel-mina/pom.xml
Mina has released 1.1.6 (is in maven)

8)
camel-amqp/pomx.ml
Refers to and old version of mina 1.1.3. Can it be upgraded to 1.1.6?

9)
camel-ognl/pom.xml
OGNL has released 2.7.2 (it is in maven)

10)
camel-script/pom.xml
jython has released 2.2.1 (is in maven)","05/Mar/08 19:26;davsclaus;ActiveMQ is set to v4.1.1, is there a reason it can not be upgraded to 5.0.0?","06/Mar/08 01:29;njiang;Fixed #7, #8, #9, #10 and upgraded ActiveMQ version to 5.0.0.","15/Mar/08 10:00;davsclaus;#11
In the root pom.xml line #1056 there is a single > char that doesn't seem to have a purpose.

{code}
                      <classpath refid=""etc.path""/>
                    </whichresource>
                    >

                    <mkdir dir=""${full.eclipse.workspace}/.metadata/.plugins/org.eclipse.core.runtime/.settings""/>
{code}","15/Mar/08 10:08;davsclaus;#12
In prereq we could bump maven to 2.0.8

#13
junit can be upgraded to 3.8.2

#14
easymock can maybe be upgraded to 2.3

#15
hsqldb can maybe be upgraded to 1.8.0.9

#16
apache derby has released 10.3.2.1

#17
commons-dbcp has released 1.2.2

#18
commons-pool is on release 1.4 now

","17/Mar/08 03:31;njiang;Done #11  #13, #14, #16, #17, #18 

#12,  If there is a critical bug in maven 2.0.7 for camel build , I don't we need to upgrade the prerequisite's version of maven.
#15,  there is no hsqldb 1.8.0.9 in the maven repository","28/Mar/08 02:45;njiang;Fixed most of them , and created the CAMEL-403 to keep an eye on http-core upgrading.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Exceptions in handle clause are swallowed,CAMEL-346,12485073,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,romkal,romkal,romkal,26/Feb/08 23:29,29/Feb/08 20:57,14/Mar/19 02:42,29/Feb/08 20:35,,,,,,,,,,,1.3.0,,,camel-core,,,,0,"In following code message should go to {{mock:invalid}} when invalid message is sent. Currently message is sent nowhere as exceptions in handle() clause are swallowed.

{code}
exception(ValidationException.class).to(""mock:invalid"");
                
from(""direct:start"").tryBlock().process(validator).to(""mock:valid"")
    .handle(ValidationException.class).process(validator);
{code}",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,103003,,,Fri Feb 29 20:35:39 UTC 2008,,,,,,,0|i01bnz:,5659,,,,,,,,,29/Feb/08 20:35;romkal;Fix commited,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Inconsistent exchange properties propagation,CAMEL-343,12485403,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,romkal,romkal,romkal,26/Feb/08 11:22,12/May/08 12:45,14/Mar/19 02:42,29/Feb/08 20:25,,,,,,,,,,,1.3.0,,,camel-core,,,,0,"There is an inconsistency in exchange properties propagation. To show few examples:
||code||{{test}} property value at {{mock:test}} || due to ||
|{code}
from(""direct:start"")
    .setProperty(""test"", ""inStart"")
    .to(""direct:subflow"")
    .to(""mock:test"");
from(""direct:subflow"")
    .setBody(""test"")
    .setProperty(""test"", ""inSubflow"");
{code} | inStart | properties are not propagated \\ back if they were set in super flow |
|{code}
from(""direct:start"")
    .setProperty(""test"", ""inStart"")
    .to(""direct:subflow"")
    .to(""mock:test"");
from(""direct:subflow"")
    .setProperty(""test"", ""inSubflow"")
    .setBody(""test"");
{code} | inSubflow | property is set to new value as \\ pipeline sends original \\ exchange to first step of pipeline |
|{code}
from(""direct:start"")
    .to(""direct:subflow"")
    .to(""mock:test"");
from(""direct:subflow"")
    .setBody(""test"")
    .setProperty(""test"", ""inSubflow"");
{code} | inSubflow | properties are propagated \\ back by default |

I believe we should clearly define how properties should be propagated:
* should they be kept for the whole flow and every change is visible to sub/super flows, or
* should they be visible only in scope of *current* flow and interaction with sub-flows (invoked by and endpoint) should be done with headers.

I believe that first is easier for users as they have a way to hold some data for further processing (while they are not exposed as protocol specific headers).

If you have another ideas - please advice.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-05-12 12:45:32.894,,,no_permission,,,,,,,,,,,,,103000,,,Mon May 12 12:45:32 UTC 2008,,,,,,,0|i01bnb:,5656,,,,,,,,,29/Feb/08 20:25;romkal;Properties are propagated back to super/sub flows. If property gets changed or removed in subflow it is also propagated back to original flow.,12/May/08 12:45;davsclaus;Closed all 1.3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
aggregator and JMS: AggregatorStrategy does not get called,CAMEL-341,12485095,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gtully,andrea.chiodoni,andrea.chiodoni,21/Feb/08 20:21,31/Mar/08 18:40,14/Mar/19 02:42,30/Mar/08 14:56,1.3.0,,,,,,,,,,1.3.0,,,camel-jms,,,,0,"Hi I'm using camel 1.3-SNAPSHOT. I don't get the aggregator to work as expected when messages come from a JMS endpoint and sent to a bean. I've tried the following configuration: 

//private static final String ENDPOINT = ""jms:myqueue""; 
private static final String ENDPOINT = ""direct:myqueue""; 

from(ENDPOINT).aggregator(header(""JMSCorrelationId""),new MyAggregatorStrategy()).bean(new SomeBean()); 

With ENDPOINT = ""jms:myqueue"" I get: 

[                      Thread-1] MyRouteBuilder                 INFO  Sending: message:1 
[                      Thread-1] MyRouteBuilder                 INFO  Sending: message:2 
[                      Thread-1] MyRouteBuilder                 INFO  Sending: message:3 
[meBean@3c2797]] Polling Thread] MyRouteBuilder                 INFO  Received: message:2 (null) 

End with ENDPOINT = ""direct:myqueue"" I get: 

[                      Thread-1] MyRouteBuilder                 INFO  Sending: message:1 
[                      Thread-1] MyRouteBuilder                 INFO  Sending: message:2 
[                      Thread-1] MyRouteBuilder                 INFO  Sending: message:3 
[meBean@3c2797]] Polling Thread] MyAggregatorStrategy           INFO  Strategy: message:1, message:2 
[meBean@3c2797]] Polling Thread] MyAggregatorStrategy           INFO  Strategy: message:1, message:2, message:3 
[meBean@3c2797]] Polling Thread] MyRouteBuilder                 INFO  Received: message:1, message:2, message:3 (null) 

Only with ENDPOINT = ""direct:myqueue"" I get the expected behavior. 

I've noticed the AggregatorStrategy even does not get called while using the JMS endpoit. 

I upload the complete sample (sample.zip) 

There is also a second issue I can not explain: on the sample I've tried to use a JMSCorrelationId but printing @Header(name=""JMSCorrelationID"") String correlationID I get ""null"". 

PS: Same sample using 1.2.0, the AggregatorStrategy get called but I loose message 2 
[                      Thread-1] MyRouteBuilder                 INFO  Sending: message:1 
[                      Thread-1] MyRouteBuilder                 INFO  Sending: message:2 
[                      Thread-1] MyRouteBuilder                 INFO  Sending: message:3 
[meBean@2cfeb7]] Polling Thread] MyAggregatorStrategy           INFO  Strategy: message:1, message:3 
[meBean@2cfeb7]] Polling Thread] MyRouteBuilder                 INFO  Received: message:1, message:3 (null) 

Andrea ",Mac OS X 10.5.2 JDK 1.5,,,,,,,,,,,,,,CAMEL-352,,21/Feb/08 20:21;andrea.chiodoni;ASF.LICENSE.NOT.GRANTED--sample.zip;https://issues.apache.org/jira/secure/attachment/12462521/ASF.LICENSE.NOT.GRANTED--sample.zip,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-03-03 14:18:43.773,,,no_permission,,,,,,,,,,,,,83248,,,Mon Mar 31 18:40:33 UTC 2008,,,,,,,0|i01bmv:,5654,,,,,,,,,03/Mar/08 14:18;gtully;adding reference to timeout expiry being ignored issue which can occur with the sample code provided with this issue,"03/Mar/08 14:51;gtully;There are a bunch of interesting issues with the sample:

first, as there is no completedPredicate for the aggregation strategy, the default strategy of reaching the batch size of 100 or the default timeout of 1 second needs to kick in.
With 3 messages, the batch size will never get there so the 1 second timeout will be in effect. With the 5 second delay before sending messages and with the batchTimeout starting once the route is created, so it will already have expired 5 times, CAMEL-352 is sometimes coming in to play.

A workaround (till 352 is committed) is to add a larger batchTimeout interval to the route in the sample code so that the receive does not time out for the duration of the test scenario:

{code}
from(ENDPOINT).aggregator(header(""JMSCorrelationID""),
				new MyAggregatorStrategy()).batchTimeout(20000).bean(new SomeBean());
{code}

In this case, the message batch will be delivered every 20 seconds and can't have timedout before the messages have been submitted by the client. 

second: with the default timeout, the vm broker seems to be re initialised, turning on jmx, I find that the jmx connection is dropped every time a batch is processed, as if the broker is being decommissioned. This needs some more investigation and may be part of the reason there is a jms and an activemq camel component.
With new sessions/connections being created on each batch receive and with the default prefetch size of amq being 100, the first connection consumes all three messages and the next receive does not get any.
Adding a sleep between sends of > 1 second, in the producer(client) and leaving the default batch timeoutOut  of 1 second, will get reliable results also.

In camel-context.xml, it is possible to set the default fetch as a property:

{code:xml}
<bean id=""prefetchPolicy"" class=""org.apache.activemq.ActiveMQPrefetchPolicy"">
    <property name=""queuePrefetch"" value=""1"" />
  </bean>
    
  <!-- lets configure the default ActiveMQ broker URL -->
  <bean id=""jms"" class=""org.apache.camel.component.jms.JmsComponent"">
    <property name=""connectionFactory"">
       <bean class=""org.apache.activemq.ActiveMQConnectionFactory"">
         <property name=""brokerURL"" value=""vm://localhost?broker.persistent=false&amp;broker.useJmx=true""/>
         <property name=""prefetchPolicy"" ref=""prefetchPolicy""/>
       </bean>   
    </property>
  </bean>
{code}


third: the code uses JMSCorrelationID and JMSCorrelationId, it needs to be JMSCorrelationID (note capital ID)
","03/Mar/08 15:41;gtully;all of the above relates to using the endpoint of the form jms:myqueue

with direct:myqueue, jms is totally out of the picture, the route interaction is through a java.util.Queue as you probably know.","30/Mar/08 10:15;davsclaus;Gary what is the status of this? CAMEL-352 has been committed.

Is there still a problem? Should it be postponed to be fixed in 1.4 or can we close it?","31/Mar/08 08:46;gtully;Claus, i think this can be closed as I don't think there is any issue here save CAMEL-352. Andrea should comment that all is ok though.","31/Mar/08 18:40;andrea.chiodoni;Hi Gary
it was a first of all a problem due to my little knowledge on camel.  
The I also run into CAMEL-352.
The explanation helped me to understand more on CAMEL.
Thanks
Andrea




",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Mina TCP does not support InOut pattern,CAMEL-340,12485303,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,davsclaus,davsclaus,17/Feb/08 16:54,12/May/08 07:48,14/Mar/19 02:42,28/Feb/08 08:49,1.2.0,,,,,,,,,,1.3.0,,,camel-mina,,,,0,"See this thread:
http://www.nabble.com/camel-mina-TCP-InOut-exchange-td15530602s22882.html

This builder does not support InOut when a client send a textline to localhost:8888.
The client never receives a response.

url = ""mina:tcp://localhost:8888?textline=true"";
from(uri).process(new Processor() {
                    public void process(Exchange e) {
                        String in = e.getIn().getBody(String.class);
                        // append newline at end to denote end of data for textline codec
                        e.getOut().setBody(""Hello "" + in + ""\n"");
                    }
                });

Attached is a patch that fixes this by introducing a new parameter to the URL for fluent builder sync=true (ie is there a better name?)

Using this url instead and the patch then Camel will send a response back to the client:
mina:tcp://localhost:8888?textline=true&sync=true


",,,,,,,,,,,,,,,,,17/Feb/08 16:57;davsclaus;MinaTcpWithInOutUsingPlainSocketTest.java;https://issues.apache.org/jira/secure/attachment/12462487/MinaTcpWithInOutUsingPlainSocketTest.java,17/Feb/08 16:56;davsclaus;camel_340_patch.txt;https://issues.apache.org/jira/secure/attachment/12462314/camel_340_patch.txt,,,,2.0,,,,,,,,,,,,,,,,,,,2008-02-27 09:37:39.848,,,no_permission,,,,,,,,,,,,,83136,,,Thu Feb 28 08:49:43 UTC 2008,,,Patch Available,,,,0|i01bmn:,5653,,,,,,,,,17/Feb/08 16:56;davsclaus;The patch,"17/Feb/08 16:57;davsclaus;And the unit tests for the patch.

To demonstrate the original bug use this unit test. It is a test that uses a plain socket client to send a message to Camel and wait for the response.","17/Feb/08 17:05;davsclaus;Oh I forgot to add code tags.

{code}
url = ""mina:tcp://localhost:8888?textline=true"";
from(uri).process(new Processor() {
    public void process(Exchange e) {
        String in = e.getIn().getBody(String.class); 
        // append newline at end to denote end of data for textline codec
        e.getOut().setBody(""Hello "" + in + ""\n"");
    }
});
{code}",27/Feb/08 09:37;jstrachan;fancy applying this patch before 1.3.0? ,28/Feb/08 08:49;njiang;Applied the patch with thanks to Claus,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
endpoints implementing Service do not get stopped,CAMEL-334,12484875,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,jstrachan,jstrachan,13/Feb/08 09:41,12/May/08 12:45,14/Mar/19 02:42,13/Feb/08 10:31,,,,,,,,,,,1.3.0,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-05-12 12:45:32.172,,,no_permission,,,,,,,,,,,,,102993,,,Mon May 12 12:45:32 UTC 2008,,,,,,,0|i01blb:,5647,,,,,,,,,13/Feb/08 10:31;jstrachan;patch applied!,12/May/08 12:45;davsclaus;Closed all 1.3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Throwing the  IllegalArgumentException if there are already another type bean which name is same with the URI schema,CAMEL-329,12485094,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,12/Feb/08 13:34,12/May/08 12:45,14/Mar/19 02:42,26/Feb/08 02:17,1.2.0,,,,,,,,,,1.3.0,,,camel-core,camel-cxf,,,0,"
Please see the discussion below
http://www.nabble.com/%22cxf%22-name-conflict-in-the-spring-context-td15427019s22882.html",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-05-12 12:45:32.106,,,no_permission,,,,,,,,,,,,,83137,,,Mon May 12 12:45:32 UTC 2008,,,,,,,0|i01bk7:,5642,,,,,,,,,12/May/08 12:45;davsclaus;Closed all 1.3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
bad content length header value in http response,CAMEL-324,12485119,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,gtully,alexc,alexc,10/Feb/08 10:30,12/May/08 12:45,14/Mar/19 02:42,28/Feb/08 03:52,1.3.0,,,,,,,,,,1.3.0,,,camel-http,,,,0,"By default HttpBinding class copies all request header attributes from the request to the response including 'Content-Length'. So the consequence is that the response is declaring the same size as the request which can lead to serious truncation problems! 

the workaround is simply to add the line:
out.removeHeader(""Content-Length""); 
in the writeResponse method of the httpbinding class allowing jetty to set the right value.  ",,,,,,,,,,,,,,,,,27/Feb/08 22:30;gtully;jetty_no_propagate_content_length.patch;https://issues.apache.org/jira/secure/attachment/12462469/jetty_no_propagate_content_length.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-02-12 18:35:17.517,,,no_permission,,,,,,,,,,,,,83249,,,Mon May 12 12:45:32 UTC 2008,,,,,,,0|i01bj3:,5637,,,,,,,,,"12/Feb/08 18:35;gtully;Hi Alex,
I am having difficulty reproducing the behaviour you describe. In writeResponse[1] on trunk,  the headers are correctly copied from the out message, not from the request. The out message defaults to an empty DefaultMessage which would have no headers.

Would it be possible to provide a test route or xml config fragment or some more detail?

Thanks,
Gary.

http://svn.apache.org/viewvc/activemq/camel/trunk/components/camel-http/src/main/java/org/apache/camel/component/http/HttpBinding.java?view=markup ","12/Feb/08 21:06;alexc;Sure, here is a route that reproduces the problem. This simply routes a java serialized, base64 encoded request (and returns the response back) to the echoService on a http channel: 

               from(""direct:echoService"").marshal().serialization().beanRef(""base64Encoder"")
		.to(""http://localhost:8088/echoService"").beanRef(""base64Decoder"").unmarshal().serialization();

		from(""jetty:http://localhost:8088/echoService"").beanRef(""base64Decoder"")
		.unmarshal().serialization().to(""bean:echoService"").marshal().serialization().beanRef(""base64Encoder"");	

I think the problem comes from the [un]marshall processor that copies the complete in message (with headers) to the out message before setting the [un]marshalled body in the out message. Here is the code:

        Message in = exchange.getIn();
        Object body = in.getBody();

        // lets setup the out message before we invoke the dataFormat
        // so that it can mutate it if necessary
        Message out = exchange.getOut(true);
        out.copyFrom(in);

Thanks,
Alex.","13/Feb/08 19:06;gtully;yea, it is the marshaller that does the copy, but going to any different exchange would do it.

One option is to add a .removeHeader(""Content-Length"") to your route rather than in the camel source. However I don't think this should be necessary, imho the Content-Length headers should never be copied/propagated from a HttpMessage.

I have posted to the dev list to get some feedback before I prepare a patch for this.","13/Feb/08 23:05;romkal;In CAMEL-254 there was similar problem described. The solution implemented there was to skip a set of headers while building the HTTP request, so headers was on Camel message, but were ignored by the endpoint.","27/Feb/08 22:30;gtully;This patch takes the lead from the jmsBinding and the fix for CAMEL-254. I pulled the skip code from HttpProducer into HttpBinding so it can be reused in the jetty component.
The option to override the set of ignored headers is provided via the IgnoredHeaders accessors
",28/Feb/08 03:52;hadrian;Patch applied with thanks!,12/May/08 12:45;davsclaus;Closed all 1.3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
spring-2.5.1.jar is twice in the camel distro,CAMEL-323,12485259,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,,davsclaus,davsclaus,10/Feb/08 10:21,12/May/08 07:48,14/Mar/19 02:42,16/Feb/08 17:47,1.3.0,,,,,,,,,,1.3.0,,,,,,,0,"I downloaded the latest snapshot apache-camel-1.3-20080210.022044-67.zip from
http://people.apache.org/repo/m2-snapshot-repository/org/apache/camel/apache-camel/1.3-SNAPSHOT/

The .zip file contains spring-2.5.1.jar twice
\camel\lib
\camel\lib\optional

Is Spring both mandatory and optional?

And btw it includes an old version of commons-logging-1.0.4.jar. v1.1 of commons logging is out.",apache-camel-snapshot-1.3,,,,,,,,,,,,,,,,16/Feb/08 15:42;janstey;camel-323.patch;https://issues.apache.org/jira/secure/attachment/12462360/camel-323.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-02-16 15:42:31.976,,,no_permission,,,,,,,,,,,,,83250,,,Sat Feb 16 17:47:02 UTC 2008,,,,,,,0|i01biv:,5636,,,,,,,,,"16/Feb/08 15:42;janstey;Is there any reason we have two of these? If not, I say we jettison the optional copy.",16/Feb/08 17:47;hadrian;Patch applied with thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DefaultParameterMappingStrategy doesn't load its defaults,CAMEL-320,12485907,12485328,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,acricken,acricken,05/Feb/08 13:10,14/Jul/10 23:39,14/Mar/19 02:42,06/Feb/08 20:56,1.2.0,,,,,,,,,,1.3.0,,,camel-core,,,,0,"This is preventing BeanProcessor from using bean methods with a Message parameter, or bean methods not named ""process"" that have an Exchange as their parameter.  For example, to map to a Message the it tries using the ParameterExpression bodyAs(Message.class) instead of inmessageExpression().",,,,,,,,,,,,,,,,,05/Feb/08 13:11;acricken;camel-core.loadDefaultParameterMapRegistry.patch;https://issues.apache.org/jira/secure/attachment/12462313/camel-core.loadDefaultParameterMapRegistry.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-02-06 20:56:00.914,,,no_permission,,,,,,,,,,,,,83138,,,Mon May 12 12:45:32 UTC 2008,,,Patch Available,,,,0|i01bi7:,5633,,,,,,,,,06/Feb/08 20:56;hadrian;Patch applied with thanks!,12/May/08 12:45;davsclaus;Closed all 1.3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"binary distro should include JAXB API, impl, StAX API, StAX impl, JAX API",CAMEL-317,12485917,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,jstrachan,jstrachan,04/Feb/08 16:15,14/Jul/10 23:38,14/Mar/19 02:42,06/Feb/08 17:04,,,,,,,,,,,1.3.0,,,camel-core,,,,0,"We need a few more jars in the binary distro to really be able to use Camel. e.g. if you set the classpath to lib/**/*.jar then you could be able to run the Java examples etc.
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-05-12 12:45:31.97,,,no_permission,,,,,,,,,,,,,102982,,,Mon May 12 12:45:31 UTC 2008,,,,,,,0|i01bhj:,5630,,,,,,,,,12/May/08 12:45;davsclaus;Closed all 1.3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unclosed InputStreams cause FileConsumer to hang on Windows,CAMEL-315,12485884,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,acricken,acricken,01/Feb/08 01:02,14/Jul/10 23:39,14/Mar/19 02:42,28/Feb/08 15:22,,,,,,,,,,,1.3.0,,,,,,,1,"FtpProducer/SftpProducer get their ""In"" Message bodies as InputStreams, which they then neglect to close.  This appears to cause a problem in Windows where Files that are processed in this manner have an exclusive lock placed upon them.

For more info, see this discussion thread: http://www.nabble.com/From-file-to-ftp-td14921828s22882.html",,,,,,,,,,,,,,,,,01/Feb/08 01:05;acricken;camel-core.closeInputStreams.patch;https://issues.apache.org/jira/secure/attachment/12462410/camel-core.closeInputStreams.patch,01/Feb/08 01:05;acricken;camel-ftp.closeInputStreams.patch;https://issues.apache.org/jira/secure/attachment/12462334/camel-ftp.closeInputStreams.patch,,,,2.0,,,,,,,,,,,,,,,,,,,2008-02-03 09:46:25.477,,,no_permission,,,,,,,,,,,,,102981,,,Mon May 12 12:45:31 UTC 2008,,,Patch Available,,,,0|i01bh3:,5628,,,,,,,,,"01/Feb/08 01:05;acricken;Added patch for camel-ftp for FtpProducer and SftpProducer.  Added patch for camel-core, as it looks like UnmarshalProcessor might cause the same thing to happen.",03/Feb/08 09:46;davsclaus;Could there be other parts in Camel that have forgotten this?,28/Feb/08 15:22;hadrian;Applied with thanks!,12/May/08 12:45;davsclaus;Closed all 1.3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
OgnlExpression causes null Message body/header propagation in Pipeline,CAMEL-310,12485051,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,acricken,acricken,28/Jan/08 14:41,12/May/08 12:45,14/Mar/19 02:42,07/Feb/08 19:48,,,,,,,,,,,1.3.0,,,,,,,0,"OgnlExpression eagerly gets an Exchange's Out Message when it's processing an Exchange.  This causes Pipeline to propagate the non-null Out Message (with null headers/body,) even in cases where the intention is propagate the In Message.  
eg:
{code}
<from uri=""direct:start"" />
<choice>
<when>
<ognl>request.header.foo == 'bar'</ognl>
<to uri=""mock:getsInMessage"" />
<to uri=""mock:getsOutMessage"" />
</when>
</choice>
{code}

The attached patch modifies OgnlExpression to avoid the eager fetch (the map being populated with the value seems unused anyway.)  Long term, maybe Pipeline should look at the Exchange's Pattern to determine which message it needs to propagate?
",,,,,,,,,,,,,,,,,28/Jan/08 14:42;acricken;camel-ognl.outMessageHandling.patch;https://issues.apache.org/jira/secure/attachment/12462370/camel-ognl.outMessageHandling.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-02-07 19:48:37.853,,,no_permission,,,,,,,,,,,,,102977,,,Mon May 12 12:45:31 UTC 2008,,,Patch Available,,,,0|i01bfz:,5623,,,,,,,,,"28/Jan/08 14:44;acricken;This fix applies to the camel-ognl component, but there was no such component in the listbox when I created this issue.","07/Feb/08 19:48;hadrian;Patch applied with thanks!  Good work, keep them coming!",12/May/08 12:45;davsclaus;Closed all 1.3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"when renaming a file, we should ensure that the new file name does not exist first (deleting any existing files if they are there)",CAMEL-307,12485042,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,jstrachan,jstrachan,22/Jan/08 12:37,06/Jul/08 06:30,14/Mar/19 02:42,26/May/08 04:20,1.2.0,1.3.0,,,,,,,,,1.4.0,,,camel-core,,,,0,See this discussion for more detail : http://www.nabble.com/From-file-to-ftp-tp14921828s22882p15016618.html,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-05-25 13:50:30.732,,,no_permission,,,,,,,,,,,,,83139,,,Sun Jul 06 06:30:54 UTC 2008,,,,,,,0|i01bfb:,5620,,,,,,,,,"25/May/08 13:50;davsclaus;Hadrian I am currently fighting with the File Component so I am taking over here, do you have any work in progress?

As I understand it Camel should delete any existing files for the rename strategy.",26/May/08 04:20;davsclaus;Commit to trunk. See added unit test: FileProducerRenameStrategyTest,06/Jul/08 06:30;davsclaus;Closing 1.4 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Multithreaded HTTP invocations doesn't work,CAMEL-304,12485034,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,romkal,romkal,romkal,22/Jan/08 00:39,12/May/08 12:45,14/Mar/19 02:42,22/Jan/08 00:48,1.3.0,,,,,,,,,,1.3.0,,,camel-http,,,,0,"Description of the bug:
http://www.nabble.com/Multithreaded-http-endpoint-to13646722s22882.html#a13646722",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-05-12 12:45:31.109,,,no_permission,,,,,,,,,,,,,83251,,,Mon May 12 12:45:31 UTC 2008,,,,,,,0|i01ben:,5617,,,,,,,,,"22/Jan/08 00:48;romkal;Patch applied.
There are possible problems with not released connection to MultithreadedConnectionManager. Those problems are described in JUnit test associated.",12/May/08 12:45;davsclaus;Closed all 1.3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect maven-bundle-plugin settings cause class duplication in several modules,CAMEL-300,12485940,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,vsalaman,vsalaman,21/Jan/08 11:06,16/Feb/09 05:51,14/Mar/19 02:42,19/Sep/08 12:58,1.2.0,1.3.0,,,,,,,,,1.5.0,,,,,,,0,"In the camel-spring module the osgi.export property is too greedy. Since the maven-bundle-plugin uses ANY resource even if it's a dependency, by specifying org.apache.camel.component* actually bundles everything under that package from any dependency in the POM, in this case camel-core.

  <properties>
    <camel.osgi.export.pkg>org.apache.camel.spring*,org.apache.camel.component*</camel.osgi.export.pkg>
  </properties>

It should be replaced to something like:

  <properties>
    <camel.osgi.export.pkg>org.apache.camel.spring*,org.apache.camel.component.event*,org.apache.camel.component.xslt*,org.apache.camel.component.vali
dator*</camel.osgi.export.pkg>
  </properties>

---

The camel-stream component suffers from the same symptom.
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-09-18 18:57:43.935,,,no_permission,,,,,,,,,,,,,83140,,,Mon Feb 16 05:51:46 UTC 2009,,,,,,,0|i01bdr:,5613,,,,,,,,,"21/Jan/08 13:18;vsalaman;A better solution actually would be leave the property as is, and modify the plugin definition in the main pom, so that it sets the ""excludeDependencies"" element to ""true"" or some configurable property. IMHO it should be set to true, since in a module bunlde you don't want the side effect of inclusion of classes outside the module.

      <plugin>
        <groupId>org.apache.felix</groupId>
        <artifactId>maven-bundle-plugin</artifactId>
        <version>${felix-version}</version>
        <extensions>true</extensions>
        <configuration>
          <excludeDependencies>true</excludeDependencies>
          <instructions>
            <Bundle-Name>${artifactId}</Bundle-Name>
            <Bundle-SymbolicName>${camel.osgi.symbolic.name}</Bundle-SymbolicName>
            <Export-Package>${camel.osgi.export}</Export-Package>
            <Import-Package>${camel.osgi.import}</Import-Package>
            <Private-Package>${camel.osgi.private.pkg}</Private-Package>
            <Implementation-Title>Apache Camel</Implementation-Title>
            <Implementation-Version>${project.version}</Implementation-Version>
          </instructions>
        </configuration>
      </plugin>","18/Sep/08 18:57;davsclaus;Hadrian we should start considering doing anything with this. If we start cutting a RC of Camel 1.5 then I guess we should have the OSGi bundles sorted.

",18/Sep/08 19:33;hadrian;Agree.  Looking into it now.,16/Feb/09 05:51;davsclaus;Closing all 1.5.0 issues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
tryCatch() doesn't propagate results from handle() section,CAMEL-297,12485393,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,romkal,romkal,romkal,18/Jan/08 13:25,12/May/08 12:45,14/Mar/19 02:42,24/Jan/08 11:34,1.3.0,,,,,,,,,,1.3.0,,,camel-core,,,,0,"in following flow
{code}
from(""direct:a"")
.setBody(constant(""body""))
.tryBlock()
.process(new ExceptionThrower())
.handle(Exception.class)
.setBody(constant(""exception""));
{code}

the result of such invocation is ""body"" instead of ""exception"".",,,,,,,,,,,,,,,,,18/Jan/08 13:36;romkal;tryCatch.patch;https://issues.apache.org/jira/secure/attachment/12462372/tryCatch.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-05-12 12:45:31.017,,,no_permission,,,,,,,,,,,,,83252,,,Mon May 12 12:45:31 UTC 2008,,,,,,,0|i01bd3:,5610,,,,,,,,,"18/Jan/08 13:36;romkal;Patch for this issue attached.

(and for one simple typo in comment ;) )",24/Jan/08 11:34;romkal;Patch applied. But patch attached to this issue covers this issue and newly created CAMEL-309,12/May/08 12:45;davsclaus;Closed all 1.3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
spring instrumentation causes issues in the spring example...,CAMEL-296,12485909,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,jstrachan,jstrachan,18/Jan/08 12:40,14/Jul/10 23:39,14/Mar/19 02:42,22/Jan/08 16:04,,,,,,,,,,,1.3.0,,,camel-core,,,,0,"When I run a build I see this...

Running org.apache.camel.example.spring.IntegrationTest
[                          main] Main                           INFO  Apache Camel 1.3-SNAPSHOT starting
[                          main] ClassPathXmlApplicationContext INFO  Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@9a0feb: display name [org.springframework.context.support.ClassPathXmlApplicationContext@9a0feb]; startup date [Fri Jan 18 12:34:29 GMT 2008]; root of context hierarchy
[                          main] XmlBeanDefinitionReader        INFO  Loading XML bean definitions from file [/workspace/java/camel/examples/camel-example-spring/target/classes/META-INF/spring/camel-context.xml]
[                          main] ClassPathXmlApplicationContext INFO  Bean factory for application context [org.springframework.context.support.ClassPathXmlApplicationContext@9a0feb]: org.springframework.beans.factory.support.DefaultListableBeanFactory@3864d9
[                          main] ClassPathXmlApplicationContext INFO  Bean 'mbeanServer' is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[                          main] ClassPathXmlApplicationContext INFO  Bean 'mbeanServer' is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[                          main] ClassPathXmlApplicationContext INFO  Bean 'org.apache.camel.example.spring.MyRouteBuilder' is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[                          main] ClassPathXmlApplicationContext INFO  Bean 'camel' is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[                          main] ClassPathXmlApplicationContext INFO  Bean 'camel' is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[                          main] DefaultListableBeanFactory     INFO  Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@3864d9: defining beans [camel:beanPostProcessor,camel,jms,agent,mbeanServer,registry,serverConnector]; root of factory hierarchy
[                          main] InstrumentationProcessor       WARN  Could not register CamelContext MBean
javax.management.InstanceAlreadyExistsException: org.apache.camel:context=stracbook.local/camel,name=context
        at com.sun.jmx.mbeanserver.RepositorySupport.addMBean(RepositorySupport.java:452)
        at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.internal_addObject(DefaultMBeanServerInterceptor.java:1410)
        at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerObject(DefaultMBeanServerInterceptor.java:936)
        at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerMBean(DefaultMBeanServerInterceptor.java:337)
        at com.sun.jmx.mbeanserver.JmxMBeanServer.registerMBean(JmxMBeanServer.java:497)
        at org.apache.camel.management.InstrumentationAgentImpl.registerMBeanWithServer(InstrumentationAgentImpl.java:186)
        at org.apache.camel.management.InstrumentationAgentImpl.register(InstrumentationAgentImpl.java:119)
        at org.apache.camel.management.InstrumentationAgentImpl.register(InstrumentationAgentImpl.java:102)
        at org.apache.camel.management.InstrumentationLifecycleStrategy.onContextCreate(InstrumentationLifecycleStrategy.java:53)
        at org.apache.camel.management.InstrumentationAgentImpl.doStart(InstrumentationAgentImpl.java:157)
        at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:51)
        at org.apache.camel.spring.SpringInstrumentationAgent.afterPropertiesSet(SpringInstrumentationAgent.java:39)
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-01-22 16:04:30.629,,,no_permission,,,,,,,,,,,,,102967,,,Mon May 12 12:45:30 UTC 2008,,,,,,,0|i01bcv:,5609,,,,,,,,,22/Jan/08 16:04;hzbarcea;Conflicting spring definitions in the example spring xml caused this error.,12/May/08 12:45;davsclaus;Closed all 1.3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
'Contains' predicate doesn't work for left side expressions that are not collections,CAMEL-290,12485391,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,,romkal,romkal,15/Jan/08 09:28,12/May/08 12:45,14/Mar/19 02:42,17/Jan/08 20:04,,,,,,,,,,,1.3.0,,,camel-core,,,,0,patch and summary explains everything ;),,,,,,,,,,,,,,,,,17/Jan/08 14:46;romkal;contains-predicate.patch;https://issues.apache.org/jira/secure/attachment/12462291/contains-predicate.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-01-16 21:21:34.35,,,no_permission,,,,,,,,,,,,,102962,,,Mon May 12 12:45:30 UTC 2008,,,Patch Available,,,,0|i01bbj:,5603,,,,,,,,,"16/Jan/08 21:21;hzbarcea;Roman, could you please grant license to ASF if you want the patch applied? Thanks!",17/Jan/08 14:46;romkal;Granted,17/Jan/08 20:04;hzbarcea;Patch applied with thanks!  Keep them coming.,12/May/08 12:45;davsclaus;Closed all 1.3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException in CXF routes when there is an endpoint between router and service CXF endpoints,CAMEL-286,12485384,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,wfreitas,wfreitas,11/Jan/08 17:08,12/May/08 12:45,14/Mar/19 02:42,12/Jan/08 07:26,1.2.0,,,,,,,,,,1.3.0,,,camel-cxf,,,,0,"When an endpoint is added between a cxf router and a cxf service endpoint the message exchange is interrupted by a NullPointerException.

Example code:

-----JAVA-BEGIN----------------------------------------------------------
//This code works
from(StringUtils.join(cxfRouterURI)).to(StringUtils.join(cxfServiceURI)); 

// This code crashes (same problem with seda and log endpoints)
String anyEndpoint = ""activemq:someQueue"";
-----JAVA-END----------------------------------------------------------
   
from(StringUtils.join(cxfRouterURI)).to(anyEndpoint).to(StringUtils.join(cxfServiceURI)); 

-----EXCEPTION-BEGIN------------------------------------
09/01/2008 18:32:40 org.apache.cxf.phase.PhaseInterceptorChain doIntercept
INFO: Interceptor has thrown exception, unwinding now
org.apache.cxf.interceptor.Fault
        at org.apache.camel.component.cxf.interceptors.RawMessageContentRedirectInterceptor.handleMessage(RawMessageContentRedirectInterceptor.java:43)
        at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:207)
        at org.apache.camel.component.cxf.invoker.CxfClient.invokeWithMessageStream(CxfClient.java:137)
        at org.apache.camel.component.cxf.invoker.CxfClient.dispatch(CxfClient.java:89)
        at org.apache.camel.component.cxf.CxfProducer.process(CxfProducer.java:202)
        at org.apache.camel.component.cxf.CxfProducer.process(CxfProducer.java:152)
        at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsynProcessorBridge.process(AsyncProcessorTypeConverter.java:44)
        at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:73)
        at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:143)
        at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:87)
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:101)
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:85)
        at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:40)
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:44)
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:68)
        at org.apache.camel.component.cxf.CamelInvoker.invoke(CamelInvoker.java:71)
        at org.apache.camel.component.cxf.interceptors.AbstractInvokerInterceptor.handleMessage(AbstractInvokerInterceptor.java:65)
        at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:207)
        at org.apache.camel.component.cxf.CxfMessageObserver.onMessage(CxfMessageObserver.java:83)
        at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.serviceRequest(JettyHTTPDestination.java:284)
        at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.doService(JettyHTTPDestination.java:240)
        at org.apache.cxf.transport.http_jetty.JettyHTTPHandler.handle(JettyHTTPHandler.java:54)
        at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:712)
        at org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:211)
        at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:139)
        at org.mortbay.jetty.Server.handle(Server.java:313)
        at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:506)
        at org.mortbay.jetty.HttpConnection$RequestHandler.content(HttpConnection.java:844)
        at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:726)
        at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:211)
        at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:381)
        at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:396)
        at org.mortbay.thread.BoundedThreadPool$PoolThread.run(BoundedThreadPool.java:442)
Caused by: java.lang.NullPointerException
        at org.apache.commons.io.IOUtils.copyLarge(IOUtils.java:1025)
        at org.apache.commons.io.IOUtils.copy(IOUtils.java:999)
        at org.apache.camel.component.cxf.interceptors.RawMessageContentRedirectInterceptor.handleMessage(RawMessageContentRedirectInterceptor.java:39)
        ... 32 more 
-----EXCEPTION-END------------------------------------

Known workaround:

Change the code like this:

-----JAVA-BEGIN----------------------------------------------------------
        String anyEndpoint = ""activemq:someQueue"";
    	
        from(StringUtils.join(cxfRouterURI)).process(new Processor(){
			public void process(Exchange exchange) throws Exception {
				exchange.setOut(exchange.getIn());
			}
        }).to(anyEndpoint).to(StringUtils.join(cxfServiceURI));
-----JAVA-END----------------------------------------------------------

","SO: Windows XP Professional 32bit
JDK 1.5.0_11-b03
",,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-01-12 07:26:28.143,,,no_permission,,,,,,,,,,,,,83142,,,Mon May 12 12:45:30 UTC 2008,,,,,,,0|i01ban:,5599,,,,,,,,,12/Jan/08 07:26;njiang;The patch has been committed to trunk.,12/May/08 12:45;davsclaus;Closed all 1.3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BeanProcessor permanently sets METHOD_NAME header,CAMEL-279,12485036,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,romkal,romkal,27/Dec/07 10:45,12/May/08 12:45,14/Mar/19 02:42,10/Feb/08 01:55,,,,,,,,,,,1.3.0,,,camel-core,,,,0,Issue described here: http://www.nabble.com/BeanProcessor-multiple-method-invocation-on-same-bean-to14506245s22882.html#a14506245,,,,,,,,,,,,,,,,,09/Feb/08 21:13;romkal;bean-processor.patch;https://issues.apache.org/jira/secure/attachment/12462441/bean-processor.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-01-17 06:30:29.229,,,no_permission,,,,,,,,,,,,,38735,,,Mon May 12 12:45:30 UTC 2008,,,Patch Available,,,,0|i01b93:,5592,,,,,,,,,17/Jan/08 06:30;njiang;Applied the patch with thanks to Roman.,"18/Jan/08 09:39;jstrachan;I was wondering if a neater solution would be that whenever we use code like this...

{code}
beanRef(""someBeanName"", ""someMethodName"")
{code}

that we always use that method name - and ignore the header thats on the message. i.e. if someone really wants a *foo* method to be called in the DSL, we shouldn't magically call some other method just because there's a header (from maybe a previous message exchange or something).

Thoughts?","20/Jan/08 05:38;njiang;Hi James, 

I agree with you and  just did a quick fix for this , it will be committed soon.

Willem.","20/Jan/08 10:08;romkal;Hello Guys!

Didn't we just came back to the very beginning of the issue with the patch that was applied?
Because now we explicitly set the {{METHOD_NAME}} header in {{BeanProcessor}} so it affects further invocations and clears the current value of the header (title of this issue ;) ).

I agree with James that we should use the method name provided, but

{code}
setHeader(METHOD_NAME, constant(""bar"")
.beanRef(""someBeanName"", ""foo"")
.beanRef(""someBeanName"")
{code}

should result (I think) with {{foo()}} invocation and then {{bar()}} (from header) while now the header seems to be overridden.

BTW I don't have any access to java on the computer I'm using right now, so it is hard to test it. If I'm wrong - just ignore it. I'm just looking at the mail that describes the latest commit.","21/Jan/08 03:41;njiang;Hi Roman,

I think there are lots of place can change the Message header  (the sender or the processor).
If you treat the DSL rule as the first class citizen in camel , I think we need to let DSL override the message Header's METHOD_NAME.

Any thoughts?

","21/Jan/08 16:46;romkal;I agree on the fact, that DSL could modify some header, and there is nothing wrong about it. I just think, that in a case I presented in my comment it shouldn't.

the question is: what is the intended behavior of

{code}
beanRef(""someBean"", ""fooMethod"")
{code}

I think, that it is 'execute {{fooMethod()}} on {{someBean}} (and doesn't change current {{METHOD_NAME}} header)', while it is not 'execute {{fooMethod()}} and overwrite {{METHOD_NAME}} so all next invocations will execute {{fooMethod()}}'.

Maybe it is my misunderstanding of the concept, but I believe, that from external point of view {{BeanProcessor}} shouldn't change {{METHOD_NAME}} header.

I assume that internally it could change this header, but I can imagine a bean that tries to use {{@Header(METHOD_NAME)}} annotation - should it be given it's own method name, or original value of {{METHOD_NAME}} header? I believe that the second answer is 'more' correct (but I'm not 100% convinced).

What I describe is only my thoughts - if we assume that it should work the way it does now, then let's document it and we are done. I just think, that it is not working in a way I would expect it to.
","09/Feb/08 03:10;hadrian;I think Roman's right.  The effects of an invocation 
{code:java}
beanRef(""someBeanName"", ""someMethodName"").
beanRef(""someBeanName"")
{code}
should not extend beyond its scope.  For the second call one should either explicitly define the method to be invoked or to rely on the request made by the caller via the METHOD_NAME header.  I updated the code to reflect this behavior.","09/Feb/08 03:11;hadrian;Roman, before I close this bug, could you please grant Apache license for inclusion of your patch (which Willem already applied).  Thanks!","09/Feb/08 21:13;romkal;License granted.

But have in mind that this patch is my original proposal. It *always* looks at the {{METHOD_NAME}} header, while it should look there only if there is no method explicitily specified on an endpoint (see James comment at the very beginning)","10/Feb/08 01:54;hadrian;Roman, I was aware of that, thanks for pointing it out.  Camel already behaves and James suggested.  My last patch addresses your comment that there should be no side effects if a method name is explicitly defined as per James' comment.  Please see my comment above.  I think this issue can now be closed to everybody's satisfaction.",12/May/08 12:45;davsclaus;Closed all 1.3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Spring integration] Bad urls in META-INF/spring.schemas,CAMEL-278,12485239,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,jdelagnes,jdelagnes,26/Dec/07 13:30,12/May/08 12:45,14/Mar/19 02:42,18/Jan/08 12:53,1.2.0,,,,,,,,,,1.3.0,,,camel-spring,,,,0,"http\://activemq.apache.org/camel/schema/spring/camel-spring-1.1.xsd becomes http\://activemq.apache.org/camel/schema/spring/camel-spring-1.1.0.xsd
http\://activemq.apache.org/camel/schema/spring/camel-spring-1.2.xsd becomes http\://activemq.apache.org/camel/schema/spring/camel-spring-1.2.0.xsd

There's no camel-spring-1.1.xsd and camel-spring-1.2.xsd under http://activemq.apache.org/camel/schema/spring/",,,,,,,,,,,,,,,,,26/Dec/07 13:30;jdelagnes;ASF.LICENSE.NOT.GRANTED--spring.schemas.patch;https://issues.apache.org/jira/secure/attachment/12462421/ASF.LICENSE.NOT.GRANTED--spring.schemas.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-01-18 12:53:28.105,,,no_permission,,,,,,,,,,,,,83143,,,Mon May 12 12:45:29 UTC 2008,,,Patch Available,,,,0|i01b8v:,5591,,,,,,,,,"18/Jan/08 12:53;jstrachan;Many thanks for the JIRA and patch. This was an easy fix so I fixed it without the patch.

Next time you submit a patch file could you please click on the ""Grant license to ASF for inclusion in ASF work"" button please?

Keep up the great work - thanks!",12/May/08 12:45;davsclaus;Closed all 1.3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Spring integration] TheadType is missing in org/apache/camel/model/jaxb.index ,CAMEL-277,12485921,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,jdelagnes,jdelagnes,26/Dec/07 13:16,14/Jul/10 23:39,14/Mar/19 02:42,18/Jan/08 12:49,1.2.0,,,,,,,,,,1.3.0,,,camel-core,,,,0,"TheadType is missing in org/apache/camel/model/jaxb.index => JAXB don't know how to unmarshall thread.

Bug description found in Camel Users forum : http://www.nabble.com/Processor-thread-pool-td13212513s22882.html

",,,,,,,,,,,,,,,,,26/Dec/07 13:16;jdelagnes;ASF.LICENSE.NOT.GRANTED--jaxb.index.patch;https://issues.apache.org/jira/secure/attachment/12462369/ASF.LICENSE.NOT.GRANTED--jaxb.index.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-01-17 06:13:42.164,,,no_permission,,,,,,,,,,,,,83144,,,Mon May 12 12:45:29 UTC 2008,,,Patch Available,,,,0|i01b8n:,5590,,,,,,,,,"17/Jan/08 06:13;hzbarcea;Hi Jerome, could you please grant license to ASF for patch inclusion? Thanks!
","18/Jan/08 12:49;jstrachan;since it was such a trivial fix, I just went ahead and added that string myself without using the patch :)",12/May/08 12:45;davsclaus;Closed all 1.3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bug in AggregatorType which makes setBatchTimeout unusable if setBatchSize is not set before,CAMEL-274,12485920,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,hadrian,pbudzik,pbudzik,24/Dec/07 13:11,14/Jul/10 23:39,14/Mar/19 02:42,17/Jan/08 16:05,1.3.0,,,,,,,,,,1.3.0,,,camel-core,,,,0,Bug in AggregatorType which makes setBatchTimeout method unusable if setBatchSize is not set before.,,,,,,,,,,,,,,,,,17/Jan/08 06:15;pbudzik;aggregator-type.patch;https://issues.apache.org/jira/secure/attachment/12462263/aggregator-type.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-01-17 05:11:53.269,,,no_permission,,,,,,,,,,,,,83253,,,Mon May 12 12:45:29 UTC 2008,,,Patch Available,,,,0|i01b7z:,5587,,,,,,,,,"17/Jan/08 05:11;hzbarcea;Nice catch Przemyslaw!

You didn't grant ASF license to apply this patch.  Do you mind doing it?  Thanks a bunch!",17/Jan/08 16:05;hzbarcea;Patch applied with thanks!,12/May/08 12:45;davsclaus;Closed all 1.3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
delayer(3000) throws an exception,CAMEL-273,12484985,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gnt,gnt,gnt,20/Dec/07 13:49,12/May/08 07:56,14/Mar/19 02:42,20/Dec/07 13:51,,,,,,,,,,,1.3.0,,,camel-core,,,,0,"A workaround seems to be
   delayer(constant(new Long(0)), 3000)",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,102950,,,Thu Dec 20 13:51:37 UTC 2007,,,,,,,0|i01b7r:,5586,,,,,,,,,"20/Dec/07 13:51;gnt;Sending        camel-core/src/main/java/org/apache/camel/model/DelayerType.java
Sending        camel-core/src/main/java/org/apache/camel/model/ExpressionNode.java
Sending        camel-core/src/test/java/org/apache/camel/processor/DelayerTest.java
Transmitting file data ...
Committed revision 605931.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CxfEndpointBeanDefinitionParser throws a ClassCastException when definining inner list elements in spring configuration,CAMEL-271,12485029,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,bravi,bravi,19/Dec/07 18:36,12/May/08 07:56,14/Mar/19 02:42,21/Dec/07 19:06,1.2.0,,,,,,,,,,1.3.0,,,camel-cxf,,,,0,"In the CxfEndpointBeanDefinitionParser, the list elements being read are cast to com.sun.xml.bind.v2.schemagen.xmlschema.List class which is never true...

Why don't we just leave it as a object or atleast cast it to a java.util.List?

For getting the error just add the following configuration to a cxf endpoint:

  <cxf:cxfEndpoint id=""toEndpoint1"" 
                   address=""http://localhost:9091/GreeterContext/GreeterPort"" 
                   serviceClass=""demo.router.Greeter"">
      <cxf:features>
          <cxfcore:logging/>
      </cxf:features>
  </cxf:cxfEndpoint>

cxfcore points to the ""http://cxf.apache.org/core"" namespace.

I have attached a patch for this problem & would appreciate if someone applied it.

Thanks

Balaji

",,,,,,,,,,,,,,,,,19/Dec/07 18:36;bravi;ASF.LICENSE.NOT.GRANTED--camel-cxf-classcast.patch;https://issues.apache.org/jira/secure/attachment/12462387/ASF.LICENSE.NOT.GRANTED--camel-cxf-classcast.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2007-12-21 19:06:24.953,,,no_permission,,,,,,,,,,,,,83145,,,Fri Dec 21 19:06:24 UTC 2007,,,Patch Available,,,,0|i01b7b:,5584,,,,,,,,,21/Dec/07 19:06;hzbarcea;Patch applied with thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Error in org.apache.camel.util.ObjectHelper,CAMEL-270,12485163,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,hohausal,hohausal,19/Dec/07 13:50,12/May/08 12:45,14/Mar/19 02:42,21/Jan/08 05:09,1.3.0,,,,,,,,,,1.3.0,,,camel-core,,,,0,"Found an error in method contains of class org.apache.camel.util.ObjectHelper.
If using an array instead of a collection.

Following line is wrong:
Iterator iter = ObjectConverter.iterator(value);

It should be iterated over collectionOrArray variable.
Correct line is:
Iterator iter = ObjectConverter.iterator(collectionOrArray);


Complete new method is:

public static boolean contains(Object collectionOrArray, Object value) {
    if (collectionOrArray instanceof Collection) {
        Collection collection = (Collection)collectionOrArray;
        return collection.contains(value);
    } else {
        Iterator iter = ObjectConverter.iterator(value);
        while (iter.hasNext()) {
            if (equal(value, iter.next())) {
                return true;
            }
        }
        return false;
    }
}
",,,,,,,,,,,,,,,CAMEL-290,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-01-21 05:08:53.59,,,no_permission,,,,,,,,,,,,,83254,,,Mon May 12 12:45:29 UTC 2008,,,,,,,0|i01b73:,5583,,,,,,,,,21/Jan/08 05:08;njiang;This issue has been fixed with the CAMEL-290,12/May/08 12:45;davsclaus;Closed all 1.3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
apache-camel.jar's TypeConverter file is incorrect,CAMEL-268,12485110,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,acricken,acricken,18/Dec/07 14:16,12/May/08 12:45,14/Mar/19 02:42,28/Feb/08 05:34,1.2.0,1.3.0,,,,,,,,,1.3.0,,,,,,,0,"apache-camel-1.2.jar's META-INF/services/org/apache/camel/TypeConverter file contained only ""org.apache.camel.converter""
The lastest apache-camel-1.3-SNAPSHOT.jar's file contains only ""org.apache.camel.components.mail""

Apparently, the file should contain the concatenation of all of the sub-component TypeConverter files.

For more info see: http://www.nabble.com/apache-camel-1.3-SNAPSHOT.jar-TypeConverter-to14387417s22882.html",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-05-12 12:45:29.174,,,no_permission,,,,,,,,,,,,,83146,,,Mon May 12 12:45:29 UTC 2008,,,,,,,0|i01b6n:,5581,,,,,,,,,12/May/08 12:45;davsclaus;Closed all 1.3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Predicate cannot be used as BeanProcessor,CAMEL-267,12485328,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,jstrachan,acricken,acricken,17/Dec/07 17:41,11/Jul/08 04:26,14/Mar/19 02:42,13/May/08 07:09,1.3.0,1.4.0,,,,,,,,,1.4.0,,,camel-core,,,,0,"The current Bean Expression mechanism doesn't support the use of a Predicate as the Bean/POJO.  The problem is that BeanInfo tries to use matches(Object) instead of matches(Exchange).  If you use the extra ""methodName"" hint, this happens because BeanInfo uses operations.get(name), which will only return the most recently introspected method (potentially the Object one.)  If you don't, then BeanInfo will try to find a method based on the inbound message body type, ignoring methods that take Exchange as a parameter.

This may too esoteric to bother working around?  It's relatively easy to workaround for the common case (match the incoming body), but it's still a little unexpected.  The only thing I can see this preventing is the use of Predicates that are looking at multiple messages at once (eg: comparing delta between in & out messages in an exchange.)",,,,,,,,,,,,,,,,,17/Dec/07 17:43;acricken;PredicateAsBeanTest.java;https://issues.apache.org/jira/secure/attachment/12462260/PredicateAsBeanTest.java,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-05-13 04:26:03.219,,,no_permission,,,,,,,,,,,,,83255,,,Tue May 13 13:55:06 UTC 2008,,,,,,,0|i01b6f:,5580,,,,,,,,,"05/Feb/08 13:12;acricken;CAMEL-320 may solve this issue (it makes the attached test pass, at any rate)","13/May/08 04:26;davsclaus;Aaron. 

Running latest camel trunk with your test case still fails. 
Hence I do not think CAMEL-320 fixed your issue.

{code}
-------------------------------------------------------------------------------
Test set: org.apache.camel.component.bean.PredicateAsBeanTest
-------------------------------------------------------------------------------
Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.531 sec <<< FAILURE!
testSendMessage(org.apache.camel.component.bean.PredicateAsBeanTest)  Time elapsed: 0.375 sec  <<< FAILURE!
junit.framework.ComparisonFailure: bean body: org.apache.camel.component.bean.PredicateAsBeanTest$MyPredicate@197a37c expected:<Wobble> but was:<null>
	at junit.framework.Assert.assertEquals(Assert.java:81)
	at org.apache.camel.component.bean.PredicateAsBeanTest.testSendMessage(PredicateAsBeanTest.java:43)
{code}",13/May/08 07:09;jstrachan;I've just added the test case and a fix (to provide Type Converter methods for Predicate or Expression implementations to a Processor),13/May/08 07:22;davsclaus;Damm James that was clever - using the type converter to do the trick. ,13/May/08 13:35;acricken;Good find!  Thanks for looking into this.,"13/May/08 13:55;jstrachan;Claus - you can use the Type Converter stuff do do all kinds of wacky stuff! :)

e.g. here's how we can invoke a JMS MessageListener as a bean in any Camel route...

https://svn.apache.org/repos/asf/activemq/trunk/activemq-core/src/test/java/org/apache/activemq/camel/converter/InvokeJmsMessageListenerTest.java

we could use a similar trick to integrate with any other 'messaging' API - whether its Servlets, Restlets, JBI, Mule or whatever",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
patch to fix some issue about camel-cxf component,CAMEL-261,12485385,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,ffang,ffang,14/Dec/07 05:52,12/May/08 12:45,14/Mar/19 02:42,18/Dec/07 04:26,1.2.0,,,,,,,,,,1.3.0,,,camel-cxf,,,,0,"this patch 
1.
@override
    protected boolean useIntrospectionOnEndpoint() {
        return false;
    }
to let parameter start with ""soap."" passed in soap endpoint

2. use
WSDLServiceFactory factory = new WSDLServiceFactory(getBus(), getWsdlURL(), getServiceQName());
instead of
WSDLServiceFactory factory = new WSDLServiceFactory(getBus(), getWsdlURL(), null);
so that can pass in servicename to WSDLServiceFactory, in case that more than one service in the wsdl, we can specify the one we want

3. add wait response into CxfProducer, so that if the MEP is not oneway, we can waiting for the response in certain period

4. add more type convert for CxfSoapBinding and CxfBinding, so that we can handle message body more than InputStream .
",,,,,,,,,,,,,,,,,14/Dec/07 06:01;ffang;patch.txt;https://issues.apache.org/jira/secure/attachment/12462384/patch.txt,,,,,1.0,,,,,,,,,,,,,,,,,,,2007-12-18 13:23:26.248,,,no_permission,,,,,,,,,,,,,83147,,,Mon May 12 12:45:29 UTC 2008,,,,,,,0|i01b53:,5574,,,,,,,,,"18/Dec/07 13:23;davsclaus;In the attached patch the file CxfSoapBinding.java has a Eclipse auto generated catch block where exceptions is swallowed and reported to system err.

Isn't this a problem, exceptions should be handled and logged properly.","18/Dec/07 13:39;ffang;thanks for pointing out this problem

I will fix it in next patch",28/Feb/08 09:07;njiang;Added the affects and fix version,12/May/08 12:45;davsclaus;Closed all 1.3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Build error from org.apache.camel.component.mina.MinaUdpTest,CAMEL-257,12485361,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,blin,blin,05/Dec/07 02:28,12/May/08 12:45,14/Mar/19 02:42,09/Mar/08 10:20,1.2.0,,,,,,,,,,1.3.0,,,camel-mina,,,,0,"-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running org.apache.camel.component.mina.MinaUdpTest
1578 [AnonymousIoService-1] WARN org.apache.camel.component.mina.MinaConsumer$1 - [/127.0.0.1:32858] EXCEPTION, please implement org.apache.camel.component.mina.MinaConsumer$1.exceptionCaught() for proper handling:
java.lang.IllegalStateException: Already released buffer.  You released the buffer too many times.
        at org.apache.mina.common.PooledByteBufferAllocator$PooledByteBuffer.release(PooledByteBufferAllocator.java:310)
        at org.apache.mina.util.ByteBufferUtil.releaseIfPossible(ByteBufferUtil.java:39)
        at org.apache.mina.common.support.AbstractIoFilterChain$TailFilter.messageReceived(AbstractIoFilterChain.java:572)
        at org.apache.mina.common.support.AbstractIoFilterChain.callNextMessageReceived(AbstractIoFilterChain.java:299)
        at org.apache.mina.common.support.AbstractIoFilterChain.access$1100(AbstractIoFilterChain.java:53)
        at org.apache.mina.common.support.AbstractIoFilterChain$EntryImpl$1.messageReceived(AbstractIoFilterChain.java:648)
        at org.apache.mina.filter.codec.support.SimpleProtocolDecoderOutput.flush(SimpleProtocolDecoderOutput.java:58)
        at org.apache.mina.filter.codec.ProtocolCodecFilter.messageReceived(ProtocolCodecFilter.java:173)
        at org.apache.mina.common.support.AbstractIoFilterChain.callNextMessageReceived(AbstractIoFilterChain.java:299)
        at org.apache.mina.common.support.AbstractIoFilterChain.access$1100(AbstractIoFilterChain.java:53)
        at org.apache.mina.common.support.AbstractIoFilterChain$EntryImpl$1.messageReceived(AbstractIoFilterChain.java:648)
        at org.apache.mina.filter.executor.ExecutorFilter.processEvent(ExecutorFilter.java:220)
        at org.apache.mina.filter.executor.ExecutorFilter$ProcessEventsRunnable.run(ExecutorFilter.java:264)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675)
        at org.apache.mina.util.NamePreservingRunnable.run(NamePreservingRunnable.java:51)
        at java.lang.Thread.run(Thread.java:595)
2143 [AnonymousIoService-2] WARN org.apache.camel.component.mina.MinaConsumer$1 - [/127.0.0.1:32858] EXCEPTION, please implement org.apache.camel.component.mina.MinaConsumer$1.exceptionCaught() for proper handling:
java.lang.IllegalStateException: Already released buffer.  You released the buffer too many times.
        at org.apache.mina.common.PooledByteBufferAllocator$PooledByteBuffer.release(PooledByteBufferAllocator.java:310)
        at org.apache.mina.util.ByteBufferUtil.releaseIfPossible(ByteBufferUtil.java:39)
        at org.apache.mina.common.support.AbstractIoFilterChain$TailFilter.messageReceived(AbstractIoFilterChain.java:572)
        at org.apache.mina.common.support.AbstractIoFilterChain.callNextMessageReceived(AbstractIoFilterChain.java:299)
        at org.apache.mina.common.support.AbstractIoFilterChain.access$1100(AbstractIoFilterChain.java:53)
        at org.apache.mina.common.support.AbstractIoFilterChain$EntryImpl$1.messageReceived(AbstractIoFilterChain.java:648)
        at org.apache.mina.filter.codec.support.SimpleProtocolDecoderOutput.flush(SimpleProtocolDecoderOutput.java:58)
        at org.apache.mina.filter.codec.ProtocolCodecFilter.messageReceived(ProtocolCodecFilter.java:173)
        at org.apache.mina.common.support.AbstractIoFilterChain.callNextMessageReceived(AbstractIoFilterChain.java:299)
        at org.apache.mina.common.support.AbstractIoFilterChain.access$1100(AbstractIoFilterChain.java:53)
        at org.apache.mina.common.support.AbstractIoFilterChain$EntryImpl$1.messageReceived(AbstractIoFilterChain.java:648)
        at org.apache.mina.filter.executor.ExecutorFilter.processEvent(ExecutorFilter.java:220)
        at org.apache.mina.filter.executor.ExecutorFilter$ProcessEventsRunnable.run(ExecutorFilter.java:264)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675)
        at org.apache.mina.util.NamePreservingRunnable.run(NamePreservingRunnable.java:51)
        at java.lang.Thread.run(Thread.java:595)
3151 [AnonymousIoService-3] WARN org.apache.camel.component.mina.MinaConsumer$1 - [/127.0.0.1:32858] EXCEPTION, please implement org.apache.camel.component.mina.MinaConsumer$1.exceptionCaught() for proper handling:
java.lang.IllegalStateException: Already released buffer.  You released the buffer too many times.
        at org.apache.mina.common.PooledByteBufferAllocator$PooledByteBuffer.release(PooledByteBufferAllocator.java:310)
        at org.apache.mina.util.ByteBufferUtil.releaseIfPossible(ByteBufferUtil.java:39)
        at org.apache.mina.common.support.AbstractIoFilterChain$TailFilter.messageReceived(AbstractIoFilterChain.java:572)
        at org.apache.mina.common.support.AbstractIoFilterChain.callNextMessageReceived(AbstractIoFilterChain.java:299)
        at org.apache.mina.common.support.AbstractIoFilterChain.access$1100(AbstractIoFilterChain.java:53)
        at org.apache.mina.common.support.AbstractIoFilterChain$EntryImpl$1.messageReceived(AbstractIoFilterChain.java:648)
        at org.apache.mina.filter.codec.support.SimpleProtocolDecoderOutput.flush(SimpleProtocolDecoderOutput.java:58)
        at org.apache.mina.filter.codec.ProtocolCodecFilter.messageReceived(ProtocolCodecFilter.java:173)
        at org.apache.mina.common.support.AbstractIoFilterChain.callNextMessageReceived(AbstractIoFilterChain.java:299)
        at org.apache.mina.common.support.AbstractIoFilterChain.access$1100(AbstractIoFilterChain.java:53)
        at org.apache.mina.common.support.AbstractIoFilterChain$EntryImpl$1.messageReceived(AbstractIoFilterChain.java:648)
        at org.apache.mina.filter.executor.ExecutorFilter.processEvent(ExecutorFilter.java:220)
        at org.apache.mina.filter.executor.ExecutorFilter$ProcessEventsRunnable.run(ExecutorFilter.java:264)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675)
        at org.apache.mina.util.NamePreservingRunnable.run(NamePreservingRunnable.java:51)
        at java.lang.Thread.run(Thread.java:595)
Sent 3 messages
Dec 5, 2007 10:28:57 AM org.apache.camel.component.mock.MockEndpoint assertIsSatisfied
INFO: Asserting: Endpoint[mock:result] is satisfied
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 4.442 sec
Running org.apache.camel.component.mina.MinaFileUdpTest
Dec 5, 2007 10:28:58 AM org.apache.camel.component.mock.MockEndpoint assertIsSatisfied
INFO: Asserting: Endpoint[mock:results] is satisfied
1600 [AnonymousIoService-3] WARN org.apache.camel.component.mina.MinaConsumer$1 - [/127.0.0.1:32858] EXCEPTION, please implement org.apache.camel.component.mina.MinaConsumer$1.exceptionCaught() for proper handling:
java.lang.IllegalStateException: Already released buffer.  You released the buffer too many times.
        at org.apache.mina.common.PooledByteBufferAllocator$PooledByteBuffer.release(PooledByteBufferAllocator.java:310)
        at org.apache.mina.util.ByteBufferUtil.releaseIfPossible(ByteBufferUtil.java:39)
        at org.apache.mina.common.support.AbstractIoFilterChain$TailFilter.messageReceived(AbstractIoFilterChain.java:572)
        at org.apache.mina.common.support.AbstractIoFilterChain.callNextMessageReceived(AbstractIoFilterChain.java:299)
        at org.apache.mina.common.support.AbstractIoFilterChain.access$1100(AbstractIoFilterChain.java:53)
        at org.apache.mina.common.support.AbstractIoFilterChain$EntryImpl$1.messageReceived(AbstractIoFilterChain.java:648)
        at org.apache.mina.filter.codec.support.SimpleProtocolDecoderOutput.flush(SimpleProtocolDecoderOutput.java:58)
        at org.apache.mina.filter.codec.ProtocolCodecFilter.messageReceived(ProtocolCodecFilter.java:173)
        at org.apache.mina.common.support.AbstractIoFilterChain.callNextMessageReceived(AbstractIoFilterChain.java:299)
        at org.apache.mina.common.support.AbstractIoFilterChain.access$1100(AbstractIoFilterChain.java:53)
        at org.apache.mina.common.support.AbstractIoFilterChain$EntryImpl$1.messageReceived(AbstractIoFilterChain.java:648)
        at org.apache.mina.filter.executor.ExecutorFilter.processEvent(ExecutorFilter.java:220)
        at org.apache.mina.filter.executor.ExecutorFilter$ProcessEventsRunnable.run(ExecutorFilter.java:264)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675)
        at org.apache.mina.util.NamePreservingRunnable.run(NamePreservingRunnable.java:51)
        at java.lang.Thread.run(Thread.java:595)
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.842 sec
Running org.apache.camel.component.mina.MinaUdpUsingTemplateTest
495 [AnonymousIoService-4] WARN org.apache.camel.component.mina.MinaConsumer$1 - [/127.0.0.1:32858] EXCEPTION, please implement org.apache.camel.component.mina.MinaConsumer$1.exceptionCaught() for proper handling:
java.lang.IllegalStateException: Already released buffer.  You released the buffer too many times.
        at org.apache.mina.common.PooledByteBufferAllocator$PooledByteBuffer.release(PooledByteBufferAllocator.java:310)
        at org.apache.mina.util.ByteBufferUtil.releaseIfPossible(ByteBufferUtil.java:39)
        at org.apache.mina.common.support.AbstractIoFilterChain$TailFilter.messageReceived(AbstractIoFilterChain.java:572)
        at org.apache.mina.common.support.AbstractIoFilterChain.callNextMessageReceived(AbstractIoFilterChain.java:299)
        at org.apache.mina.common.support.AbstractIoFilterChain.access$1100(AbstractIoFilterChain.java:53)
        at org.apache.mina.common.support.AbstractIoFilterChain$EntryImpl$1.messageReceived(AbstractIoFilterChain.java:648)
        at org.apache.mina.filter.codec.support.SimpleProtocolDecoderOutput.flush(SimpleProtocolDecoderOutput.java:58)
        at org.apache.mina.filter.codec.ProtocolCodecFilter.messageReceived(ProtocolCodecFilter.java:173)
        at org.apache.mina.common.support.AbstractIoFilterChain.callNextMessageReceived(AbstractIoFilterChain.java:299)
        at org.apache.mina.common.support.AbstractIoFilterChain.access$1100(AbstractIoFilterChain.java:53)
        at org.apache.mina.common.support.AbstractIoFilterChain$EntryImpl$1.messageReceived(AbstractIoFilterChain.java:648)
        at org.apache.mina.filter.executor.ExecutorFilter.processEvent(ExecutorFilter.java:220)
        at org.apache.mina.filter.executor.ExecutorFilter$ProcessEventsRunnable.run(ExecutorFilter.java:264)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675)
        at org.apache.mina.util.NamePreservingRunnable.run(NamePreservingRunnable.java:51)
        at java.lang.Thread.run(Thread.java:595)
497 [AnonymousIoService-4] WARN org.apache.camel.component.mina.MinaConsumer$1 - [/127.0.0.1:32858] EXCEPTION, please implement org.apache.camel.component.mina.MinaConsumer$1.exceptionCaught() for proper handling:
java.lang.IllegalStateException: Already released buffer.  You released the buffer too many times.
        at org.apache.mina.common.PooledByteBufferAllocator$PooledByteBuffer.release(PooledByteBufferAllocator.java:310)
        at org.apache.mina.util.ByteBufferUtil.releaseIfPossible(ByteBufferUtil.java:39)
        at org.apache.mina.common.support.AbstractIoFilterChain$TailFilter.messageReceived(AbstractIoFilterChain.java:572)
        at org.apache.mina.common.support.AbstractIoFilterChain.callNextMessageReceived(AbstractIoFilterChain.java:299)
        at org.apache.mina.common.support.AbstractIoFilterChain.access$1100(AbstractIoFilterChain.java:53)
        at org.apache.mina.common.support.AbstractIoFilterChain$EntryImpl$1.messageReceived(AbstractIoFilterChain.java:648)
        at org.apache.mina.filter.codec.support.SimpleProtocolDecoderOutput.flush(SimpleProtocolDecoderOutput.java:58)
        at org.apache.mina.filter.codec.ProtocolCodecFilter.messageReceived(ProtocolCodecFilter.java:173)
        at org.apache.mina.common.support.AbstractIoFilterChain.callNextMessageReceived(AbstractIoFilterChain.java:299)
        at org.apache.mina.common.support.AbstractIoFilterChain.access$1100(AbstractIoFilterChain.java:53)
        at org.apache.mina.common.support.AbstractIoFilterChain$EntryImpl$1.messageReceived(AbstractIoFilterChain.java:648)
        at org.apache.mina.filter.executor.ExecutorFilter.processEvent(ExecutorFilter.java:220)
        at org.apache.mina.filter.executor.ExecutorFilter$ProcessEventsRunnable.run(ExecutorFilter.java:264)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675)
        at org.apache.mina.util.NamePreservingRunnable.run(NamePreservingRunnable.java:51)
        at java.lang.Thread.run(Thread.java:595)
498 [AnonymousIoService-4] WARN org.apache.camel.component.mina.MinaConsumer$1 - [/127.0.0.1:32858] EXCEPTION, please implement org.apache.camel.component.mina.MinaConsumer$1.exceptionCaught() for proper handling:
java.lang.IllegalStateException: Already released buffer.  You released the buffer too many times.
        at org.apache.mina.common.PooledByteBufferAllocator$PooledByteBuffer.release(PooledByteBufferAllocator.java:310)
        at org.apache.mina.util.ByteBufferUtil.releaseIfPossible(ByteBufferUtil.java:39)
        at org.apache.mina.common.support.AbstractIoFilterChain$TailFilter.messageReceived(AbstractIoFilterChain.java:572)
        at org.apache.mina.common.support.AbstractIoFilterChain.callNextMessageReceived(AbstractIoFilterChain.java:299)
        at org.apache.mina.common.support.AbstractIoFilterChain.access$1100(AbstractIoFilterChain.java:53)
        at org.apache.mina.common.support.AbstractIoFilterChain$EntryImpl$1.messageReceived(AbstractIoFilterChain.java:648)
        at org.apache.mina.filter.codec.support.SimpleProtocolDecoderOutput.flush(SimpleProtocolDecoderOutput.java:58)
        at org.apache.mina.filter.codec.ProtocolCodecFilter.messageReceived(ProtocolCodecFilter.java:173)
        at org.apache.mina.common.support.AbstractIoFilterChain.callNextMessageReceived(AbstractIoFilterChain.java:299)
        at org.apache.mina.common.support.AbstractIoFilterChain.access$1100(AbstractIoFilterChain.java:53)
        at org.apache.mina.common.support.AbstractIoFilterChain$EntryImpl$1.messageReceived(AbstractIoFilterChain.java:648)
        at org.apache.mina.filter.executor.ExecutorFilter.processEvent(ExecutorFilter.java:220)
        at org.apache.mina.filter.executor.ExecutorFilter$ProcessEventsRunnable.run(ExecutorFilter.java:264)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675)
        at org.apache.mina.util.NamePreservingRunnable.run(NamePreservingRunnable.java:51)
        at java.lang.Thread.run(Thread.java:595)
Dec 5, 2007 10:29:00 AM org.apache.camel.component.mock.MockEndpoint assertIsSatisfied
INFO: Asserting: Endpoint[mock:result] is satisfied
",SUSE Linux 10.1,,,,,,,,,,,,,,,,09/Mar/08 09:26;davsclaus;camel_257_patch.txt;https://issues.apache.org/jira/secure/attachment/12462414/camel_257_patch.txt,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-03-08 21:39:28.045,,,no_permission,,,,,,,,,,,,,83148,,,Mon May 12 12:45:28 UTC 2008,,,,,,,0|i01b47:,5570,,,,,,,,,08/Mar/08 21:39;davsclaus;Is fixed in the recent Mina patches,08/Mar/08 21:40;davsclaus;Apache MINA 2.0 has a much better API where all the allocate and release should be handled internally by itself.,08/Mar/08 21:41;davsclaus;Is fixed by the latest mina patches that has been comitted,"09/Mar/08 05:02;njiang;The Exception
 Caused by: java.lang.IllegalStateException: Already released buffer.  You released the buffer too many times.
is still there in the latest trunk.

We still need to so something to fix it :(","09/Mar/08 08:16;davsclaus;Willem. Yes its potentially a little harder bug to track.

In the roadmap for MINA 2.x they have refactored this so the alloc/release would be much easier for clients. So we might get this for free when we upgrade to Mina 2.0. However it could take a while as Mina has just released the first milestone on 2.0 and we would like to fix it for MINA 1.1 users.

I have tried to track it down but as I had other bugs/improvements in the mina component I did not do a deep debugging.",09/Mar/08 08:30;davsclaus;The type should be changed from improvement to bug,"09/Mar/08 09:20;davsclaus;Yes got it now.

The hint was here:
http://markmail.org/message/ye7ijfeb4i4j7e2o#query:%22Already%20released%20buffer.%20You%20released%20the%20buffer%20too%20many%20times.%22+page:1+mid:34ud5ugapa5jz2bz+state:results

We should acquire the ByteBuffer in the datagram decoder.

I will attach a patch.","09/Mar/08 09:26;davsclaus;The patch. Notice that this file also contains parts for the CAMEL-371 patch.

I assume that applying CAMEL-371 and then this patch is the right order.

This fix is just the acquire() stuff in the datagram decoder.","09/Mar/08 09:46;njiang;Got that , you just added in.acqurie() call after the CAMEL-371 patch.
I need to keep up my speed to catch you patch ;)

",09/Mar/08 10:20;davsclaus;Finally we got this nailed and fixed.,"09/Mar/08 10:21;davsclaus;Sorry for the little mess with all these new JIRAs

I wanted to let 375 be a master and all the others as sub-task but I could not moved the already created bugs as a subtask of 375.","09/Mar/08 18:22;hadrian;As the patch is already applied could we close this issue?  A test for this patch would be great though! Thanks!


",12/May/08 12:45;davsclaus;Closed all 1.3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FileEndpoint generates empty string for filename header,CAMEL-249,12484766,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,acricken,acricken,29/Nov/07 18:16,14/Jul/10 23:39,14/Mar/19 02:42,07/Dec/07 03:31,,,,,,,,,,,1.3.0,,,,,,,0,FileEndpoint generates an empty string for the relative pathname it places in the header.,,,,,,,,,,,,,,,,,30/Nov/07 04:25;acricken;camel-core.relativePathnames.patch;https://issues.apache.org/jira/secure/attachment/12462270/camel-core.relativePathnames.patch,30/Nov/07 20:23;acricken;camel-core.relativePathnames.test.patch;https://issues.apache.org/jira/secure/attachment/12462282/camel-core.relativePathnames.test.patch,,,,2.0,,,,,,,,,,,,,,,,,,,2007-11-30 03:20:55.221,,,no_permission,,,,,,,,,,,,,102933,,,Fri Dec 07 03:31:53 UTC 2007,,,Patch Available,,,,0|i01b2f:,5562,,,,,,,,,"30/Nov/07 03:20;hzbarcea;Aaron, thank you for reporting this and for the patch.  Could you please add a unit test and, more importantly, grant license to ASF for inclusion.  Without this check we cannot apply it.",30/Nov/07 04:25;acricken;Re-attached patch w/ ASF license granted (it'd be nice if this was an option when creating a JIRA issue).  I'll see if I can get a unit test up by tomorrow.,30/Nov/07 20:23;acricken;Added patch to FileConfigureTest,07/Dec/07 03:31;hzbarcea;Patch applied with thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel loadbalance type do nothing with ref attribute,CAMEL-248,12484690,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,njiang,njiang,29/Nov/07 14:59,12/May/08 07:56,14/Mar/19 02:42,30/Nov/07 03:45,,,,,,,,,,,1.3.0,,,,,,,0,This patch fixed the Camel loadBalance tag 's attribute ref do not support to ref another loadBalancer strategy issue.,,,,,,,,,,,,,,,,,30/Nov/07 03:32;njiang;loadBalance.patch;https://issues.apache.org/jira/secure/attachment/12462345/loadBalance.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2007-11-29 17:38:53.534,,,no_permission,,,,,,,,,,,,,102932,,,Fri Nov 30 03:45:21 UTC 2007,,,Patch Available,,,,0|i01b27:,5561,,,,,,,,,29/Nov/07 17:38;hzbarcea;Patch applied with thanks!,"30/Nov/07 03:16;hzbarcea;Hi Willem,

I just noticed that you did not grant the license to ASF for inclusion.  Could you please resubmit the patch with the appropriate check or I will have to roll it back tomorrow.

Thanks
Hadrian",30/Nov/07 03:32;njiang;Resubmit the patch with granting license to ASF.,30/Nov/07 03:45;hzbarcea;That was quick.  Thanks Willem!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
some issues with camel-cxf component,CAMEL-247,12485386,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,ffang,ffang,29/Nov/07 09:09,12/May/08 07:56,14/Mar/19 02:42,29/Nov/07 17:38,1.2.0,,,,,,,,,,1.3.0,,,camel-cxf,,,,0,"1. input params List shouldn't be null, at lease it should be a empty List,
so use
List<Object> params = new ArrayList<Object>();
instead of 
List<Object> params = null;
in CamelInvoker.java
to avoid input params is null

2. Cxf Producer should only copy back exchange when ExchangePattern is not InOnly
so  use
if (exchange.getPattern() != ExchangePattern.InOnly) {
        	exchange.copyFrom(cxfExchange);
}
instead of 
    exchange.copyFrom(cxfExchange);",,,,,,,,,,,,,,,,,29/Nov/07 09:14;ffang;CAMEL-247.patch;https://issues.apache.org/jira/secure/attachment/12462381/CAMEL-247.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2007-11-29 17:38:33.781,,,no_permission,,,,,,,,,,,,,83149,,,Thu Nov 29 17:38:33 UTC 2007,,,,,,,0|i01b1z:,5560,,,,,,,,,"29/Nov/07 09:14;ffang;address this issue and append test to verify it works
Could anyone review and apply this patch for me?

Thanks ",29/Nov/07 17:38;hzbarcea;Patch applied with thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
small issues of CxfProducer and CxfConsunmer,CAMEL-243,12485336,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,ffang,ffang,23/Nov/07 06:57,12/May/08 07:56,14/Mar/19 02:42,27/Nov/07 14:22,,,,,,,,,,,1.3.0,,,,,,,0,"CxfProducer didn't write back return value to the exchange, so can't get return value when other kind of consumer (such as SMX consumer) work with CxfProducer
need add 
exchange.copyFrom(cxfExchange); 
in the public void process(Exchange exchange) method

The CamelInvoker used for CxfConsumer didn't set correct ExchangePattern after create the Exchage, 
need add
        if (bop.getOperationInfo().isOneWay()) {
        	cxfExchange.setPattern(ExchangePattern.InOnly);
        } else {
        	cxfExchange.setPattern(ExchangePattern.InOut);
        }

to set the MEP correctly according to the Cxf ServiceModel",,,,,,,,,,,,,,,,,23/Nov/07 07:01;ffang;camel-243.patch;https://issues.apache.org/jira/secure/attachment/12462352/camel-243.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2007-11-27 14:22:31.019,,,no_permission,,,,,,,,,,,,,102928,,,Tue Nov 27 14:22:31 UTC 2007,,,,,,,0|i01b13:,5556,,,,,,,,,23/Nov/07 07:01;ffang;patch for this issue,27/Nov/07 14:22;jstrachan;Patch applied with thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Intercept/proceed seems to be broken,CAMEL-240,12485374,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,wtam@iona.com,wtam@iona.com,19/Nov/07 23:51,12/May/08 07:56,14/Mar/19 02:42,20/Nov/07 15:00,,,,,,,,,,,1.3.0,,,camel-core,,,,0,"This problem can be demontrated by org.apache.camel.processor.InterceptWithoutProceedRouteTest

    protected RouteBuilder createRouteBuilder() {
        return new RouteBuilder() {
            public void configure() {
                // we will disable the output to 'mock:a' since we never proceed()
                intercept().filter(header(""foo"").isEqualTo(""bar"")).to(""mock:b"");

                from(""direct:start"").to(""mock:a"");
            }
        };
    }

If I slightly modify the testSendMatchingMessage() to make sure that my message was not proceeded to ""mock:a"", it fails.

    public void testSendMatchingMessage() throws Exception {
        b.expectedMessageCount(1);
        a.expectedMessageCount(0);  // added by me

        template.sendBodyAndHeader(""direct:start"", ""<matched/>"", ""foo"", ""bar"");

        assertMockEndpointsSatisifed();
    }

The problem can be observed in org.apache.camel.processor.InterceptRouteTest.

    protected RouteBuilder createRouteBuilder() {
        return new RouteBuilder() {
            public void configure() {
                intercept().choice().
                        when(header(""foo"").isEqualTo(""bar"")).to(""mock:b"").
                        otherwise().proceed();

                from(""direct:start"").to(""mock:a"");
            }
        };
    }


  public void testSendMatchingMessage() throws Exception {
        a.expectedMessageCount(0);  //   I don't expect mock:a to receive my message, but it did.

        b.expectedMessageCount(1);

        template.sendBodyAndHeader(""direct:start"", ""<matched/>"", ""foo"", ""bar"");

        assertMockEndpointsSatisifed();
    }",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2007-11-20 15:00:23.077,,,no_permission,,,,,,,,,,,,,102925,,,Tue Nov 20 15:00:23 UTC 2007,,,,,,,0|i01b0f:,5553,,,,,,,,,20/Nov/07 15:00;jstrachan;Resolved! ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
OsgiComponentResolver should recover after getting an exception from getEntryPaths(),CAMEL-233,12484674,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,wtam@iona.com,wtam@iona.com,19/Nov/07 00:03,12/May/08 07:56,14/Mar/19 02:42,19/Nov/07 11:04,1.3.0,,,,,,,,,,1.3.0,,,,,,,0,"There is a bug in FELIX-422 (NPE thrown by GetEntryPathsEnumeration constructor) when caused bundle.getEntryPaths() to throw NPE for the system bundle.  While this is a bug in Felix, Camel's OsgiComponentResolver should continue (after logging an error) to process the next bundle.  ",,,,,,,,,,,,,,,,,19/Nov/07 00:04;wtam@iona.com;camel-233-patch.txt;https://issues.apache.org/jira/secure/attachment/12462346/camel-233-patch.txt,,,,,1.0,,,,,,,,,,,,,,,,,,,2007-11-19 11:04:45.046,,,no_permission,,,,,,,,,,,,,83256,,,Mon Nov 19 11:04:45 UTC 2007,,,,,,,0|i01ayv:,5546,,,,,,,,,19/Nov/07 00:04;wtam@iona.com;Please review the attached patch,19/Nov/07 11:04;jstrachan;patch applied with thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix performance counters,CAMEL-232,12485896,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,hadrian,,18/Nov/07 15:42,14/Jul/10 23:42,14/Mar/19 02:42,19/Nov/07 11:43,1.2.0,,,,,,,,,,1.3.0,,,camel-core,,,,0,,,,,,,,,,,,,,,,,,18/Nov/07 15:42;ASF.LICENSE.NOT.GRANTED--camel-jmx-11.patch;https://issues.apache.org/jira/secure/attachment/12462292/ASF.LICENSE.NOT.GRANTED--camel-jmx-11.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2007-11-19 11:43:27.222,,,no_permission,,,,,,,,,,,,,83150,,,Mon Nov 19 11:43:27 UTC 2007,,,Patch Available,,,,0|i01ayn:,5545,,,,,,,,,19/Nov/07 11:43;jstrachan;Patch applied with thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Broken link on wiki page for Type Converter,CAMEL-231,12485184,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,,davsclaus,davsclaus,18/Nov/07 14:58,12/May/08 07:48,14/Mar/19 02:42,19/Nov/07 11:42,1.2.0,,,,,,,,,,1.3.0,,,website,,,,0,"I tried to figure out how i could edit the wiki page myself - i created an account but do not have edit rights, or I could not find the edit button.

Type converts has a broken link:
http://cwiki.apache.org/confluence/display/CAMEL/Type+Converter

In the chapter ""Discovering Type Converts"" the link for @Converter is missing the h in http so the link is broken.
""ttp://activemq.apache.org/camel/maven/camel-core/apidocs/org/apache/camel/Converter""

",Website,,300,300,,0%,300,300,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2007-11-19 11:34:14.488,,,no_permission,,,,,,,,,,,,,83151,,,Mon Nov 19 11:42:45 UTC 2007,,,,,,,0|i01ayf:,5544,,,,,,,,,"19/Nov/07 11:34;jstrachan;BTW see this FAQ entry on [how to edit the website|http://activemq.apache.org/camel/how-do-i-edit-the-website.html].



",19/Nov/07 11:42;jstrachan;Fix applied - thanks Claus! I've also granted you confluence karma - so you should be able to edit the wiki now :),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Headers lost after XSLT processing,CAMEL-224,12484654,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,arjanm,arjanm,16/Nov/07 08:33,19/Nov/07 08:17,14/Mar/19 02:42,16/Nov/07 18:01,1.3.0,,,,,,,,,,1.3.0,,,camel-core,,,,0,"After xslt processing the message headers are lost. See attached unit test, this test fails since revision 590680.

http://svn.apache.org/viewvc?view=rev&revision=590680
",,,,,,,,,,,,,,,,,16/Nov/07 08:33;arjanm;ASF.LICENSE.NOT.GRANTED--XsltLosesHeader.java;https://issues.apache.org/jira/secure/attachment/12462382/ASF.LICENSE.NOT.GRANTED--XsltLosesHeader.java,,,,,1.0,,,,,,,,,,,,,,,,,,,2007-11-16 18:01:12.47,,,no_permission,,,,,,,,,,,,,83257,,,Mon Nov 19 08:17:29 UTC 2007,,,,,,,0|i01awv:,5537,Unit Test Broken,,,,,,,,16/Nov/07 18:01;jstrachan;Patch applied with thanks - see XsltLosesHeaderTest in the camel-juel module. I've patched the code so it always copies any input headers first,19/Nov/07 08:17;arjanm;Thanks James!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
timing bug with AlberttoAggregatorTest which needs fixing,CAMEL-223,12485919,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,jstrachan,jstrachan,15/Nov/07 14:27,14/Jul/10 23:38,14/Mar/19 02:42,17/Jan/08 06:09,,,,,,,,,,,1.3.0,,,camel-core,,,,0,,,,,,,,,,,,,,,,CAMEL-274,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-01-07 21:16:31.915,,,no_permission,,,,,,,,,,,,,102914,,,Mon May 12 12:45:28 UTC 2008,,,,,,,0|i01awn:,5536,Unit Test Broken,,,,,,,,"07/Jan/08 21:16;pbudzik;I think it's not a bug in this test, but the result of CAMEL-274 (basically timeout is not long enough despite of the set value). After patching I can re-run this unit test endlessly and have it always passed. ",12/May/08 12:45;davsclaus;Closed all 1.3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
the 1.2.0 release didnt' seem to include the javadocs or doc directory (or manual)!,CAMEL-214,12485703,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,jstrachan,jstrachan,13/Nov/07 12:20,14/Jul/10 23:39,14/Mar/19 02:42,31/Mar/08 21:26,1.2.0,,,,,,,,,,1.3.0,,,,,,,0,I wondered if this was due to your machine Hiram having some dodgy maven plugin around or something?,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-03-30 10:16:16.846,,,no_permission,,,,,,,,,,,,,83152,,,Mon May 12 12:45:28 UTC 2008,,,,,,,0|i01aun:,5527,,,,,,,,,30/Mar/08 10:16;davsclaus;What is the status. Do we have the javadocs in the 1.3 RC3 release?,"30/Mar/08 12:58;njiang;I did some fixing work last week by adding the camel-core and camel-spring java doc into the doc directory.
But there is no user guide doc in the 1.3 RC3 since the build machine did not install the  Prince :(",31/Mar/08 21:26;hadrian;Fixed in apache-camel-1.3.0-RC4,12/May/08 12:45;davsclaus;Closed all 1.3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MQSeries doesn't seem to like the JMSXAppID header being set on a JMS message - so we should exclude it,CAMEL-213,12484806,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,jstrachan,jstrachan,13/Nov/07 11:38,12/May/08 07:56,14/Mar/19 02:42,13/Nov/07 11:43,,,,,,,,,,,1.3.0,,,camel-jms,,,,0,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,102905,,,Wed Nov 14 17:22:19 UTC 2007,,,,,,,0|i01auf:,5526,,,,,,,,,"13/Nov/07 11:43;jstrachan;I've fixed the code for the JMSXAppID header - see test case MQSeriesHeaderTest.

If there are any other MQ headers it doesn't like clients setting we can reopen this issue and fix them...",14/Nov/07 11:26;jstrachan;I just made another patch so that only valid Java identifier headers are output to the JMS message - to avoid further exceptions with MQSeries - see http://www.nabble.com/Camel-1.2-Websphere-MQ-6-issue-tf4793824s22882.html,"14/Nov/07 17:22;jstrachan;Just added another patch to conform to page 39 of the JMS 1.1 spec ignoring a bunch of other headers...

{code}
                ""JMSXUserID"", ""JMSXAppID"",
                ""JMSXDeliveryCount"", ""JMSXProducerTXID"", ""JMSXConsumerTXID"",
                ""JMSXRcvTimestamp"", ""JMSXState""
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
httpClientConfigurer component settings doesn't work,CAMEL-211,12484963,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,romkal,romkal,08/Nov/07 12:37,12/May/08 07:56,14/Mar/19 02:42,14/Nov/07 12:19,1.3.0,,,,,,,,,,1.3.0,,,camel-http,,,,0,httpClientConfigurer property is not propagated to the endpoint on endpoint creation.,,,,,,,,,,,,,,,,,08/Nov/07 12:37;romkal;ASF.LICENSE.NOT.GRANTED--http.patch;https://issues.apache.org/jira/secure/attachment/12462442/ASF.LICENSE.NOT.GRANTED--http.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2007-11-14 12:19:12.329,,,no_permission,,,,,,,,,,,,,83258,,,Wed Nov 14 12:19:12 UTC 2007,,,Patch Available,,,,0|i01atz:,5524,,,,,,,,,14/Nov/07 12:19;jstrachan;Patch applied with thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
exception clause doesn't proceed with pipeline,CAMEL-210,12485916,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,romkal,romkal,06/Nov/07 11:46,14/Jul/10 23:38,14/Mar/19 02:42,14/Nov/07 12:16,1.3.0,,,,,,,,,,1.3.0,,,camel-core,,,,0,"Problem is very similar to CAMEL-191 but this time with exception clause.
As exceptions are not cleared pipeline doesn't proceed.",,,,,,,,,,,,,,,,,13/Nov/07 13:36;romkal;exception-pipeline.patch;https://issues.apache.org/jira/secure/attachment/12462322/exception-pipeline.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2007-11-09 15:02:02.507,,,no_permission,,,,,,,,,,,,,83259,,,Wed Nov 14 12:16:00 UTC 2007,,,Patch Available,,,,0|i01atr:,5523,,,,,,,,,"06/Nov/07 18:17;romkal;This patch modifies DeadLetterQueue so before it sends a message to error processor it will clear exception information and store it as property.
At the end it retrieves it so all other flows are notified about the error that happened and (for example) pipelines will be terminated.
","09/Nov/07 15:02;hzbarcea;hmm, looks like this was the patch for camel-208, also copied here.","13/Nov/07 13:36;romkal;This patch should be better..

Sorry for this mistake - to many patches on my drive ;)",14/Nov/07 12:16;jstrachan;patch applied with thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
setOutHeader doesn't work in pipeline,CAMEL-208,12485910,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,romkal,romkal,05/Nov/07 17:41,14/Jul/10 23:39,14/Mar/19 02:42,07/Dec/07 04:11,1.3.0,,,,,,,,,,1.3.0,,,camel-core,,,,0,"Construct like:
{code}
setOutHeader(""header"", constant(""test"")).
setOutBody(constant(""body""));
{code}
doesn't work because {{setOutHeader()}} sets only header on out message that has {{null}} body. Then in pipeline when it creates new exchange it copies out message to in _only_ when out message is not null and it contains not null body (that is not the case here). So pipeline copies in -> in so our out header is lost.

Set out header should just copy message body or (I believe better solution) {{createNewExchange}} in pipeline should use out message even if body is null (consistent with {{ExchangeHelper.copyResults}}).",,,,,,,,,,,,,,,,,05/Nov/07 18:10;romkal;pipeline.patch;https://issues.apache.org/jira/secure/attachment/12462344/pipeline.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2007-12-07 04:11:54.885,,,no_permission,,,,,,,,,,,,,83260,,,Fri Dec 07 04:11:54 UTC 2007,,,Patch Available,,,,0|i01atb:,5521,,,,,,,,,05/Nov/07 18:10;romkal;File with JUnit test and patch itself attached.,"06/Nov/07 10:00;romkal;I see that my patch doesn't solve all the problem that is a little deeper. When you call {{setOutBody}} all it does it sets body of out message. As it is invoked in pipeline then previous _out_ header becomes _in_ header. Then we set _out_ body and the header previously set is lost.

I'm starting to think that this is just a _feature_ of the fact that we have _in_ and _out_ messages and the way pipeline works. But then it is quite confusing for end users as the first impression is that after executing the snippet I presented in previous comment we will have body _and_ header set.

At the moment I don't really know how to solve that problem, but I just want to show it.

Anyway patch I provided is (I believe) OK because of consistency with {{ExchangeHelper.copyResults}}.",07/Dec/07 04:11;hzbarcea;Patch applied with thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MapMessage are not correctly consumed in JMS; the Map is empty!,CAMEL-205,12484856,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,jstrachan,jstrachan,05/Nov/07 12:45,12/May/08 07:56,14/Mar/19 02:42,05/Nov/07 12:50,,,,,,,,,,,1.3.0,,,camel-jms,,,,0,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,102900,,,Mon Nov 05 12:50:16 UTC 2007,,,,,,,0|i01asn:,5518,,,,,,,,,05/Nov/07 12:50;jstrachan;for the test case see ConsumeJmsMapMessageTest in camel-jms,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FileComponent sometimes creates file instead of directory,CAMEL-203,12484872,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,arjanm,arjanm,05/Nov/07 11:32,19/Nov/07 08:18,14/Mar/19 02:42,16/Nov/07 17:55,1.2.0,,,,,,,,,,1.3.0,,,camel-core,,,,0,"When using the FileComponent (""file://"") to publish to a non-existent directory tree, the last part of the path is created as file instead of directory. It only happens when setting the filename in the header (FileComponent.HEADER_FILE_NAME).

This is because the method that determines the file name (which checks whether a directory exists), is called before the directory tree is built.


See also http://www.nabble.com/Problem-with-concurrent-dir-file-access--tf4724448s22882.html",WinXP,,,,,,,,,,,,,,,,05/Nov/07 11:32;arjanm;ASF.LICENSE.NOT.GRANTED--FileProducer.patch;https://issues.apache.org/jira/secure/attachment/12462310/ASF.LICENSE.NOT.GRANTED--FileProducer.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2007-11-16 17:55:07.799,,,no_permission,,,,,,,,,,,,,83153,,,Mon Nov 19 08:18:02 UTC 2007,,,Patch Available,,,,0|i01as7:,5516,,,,,,,,,16/Nov/07 17:55;jstrachan;patch applied with thanks! ,19/Nov/07 08:18;arjanm;Thanks James!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
released archetype for 1.2.0 when ran generates a project using version 1.1-SNAPSHOT,CAMEL-200,12485381,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,jstrachan,jstrachan,02/Nov/07 07:26,12/May/08 12:45,14/Mar/19 02:42,08/Feb/08 03:21,,,,,,,,,,,1.3.0,,,,,,,0,can we either fix the release guide - or make the archetype somehow use the current version?,,,,,,,,,,,,,,,,,08/Feb/08 01:31;janstey;camel-200.patch;https://issues.apache.org/jira/secure/attachment/12462335/camel-200.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-02-08 01:31:35.239,,,no_permission,,,,,,,,,,,,,102896,,,Mon May 12 12:45:28 UTC 2008,,,,,,,0|i01arj:,5513,,,,,,,,,08/Feb/08 01:31;janstey;This patch will make the archetype use the current version of camel.,08/Feb/08 03:21;hadrian;Applied with thanks!,12/May/08 12:45;davsclaus;Closed all 1.3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Processor invocation order,CAMEL-197,12485859,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,hadrian,,31/Oct/07 14:50,14/Jul/10 23:42,14/Mar/19 02:42,05/Nov/07 15:02,1.2.0,,,,,,,,,,1.3.0,,,camel-core,,,,0,"Please see attached patch to reproduce.

I made a small change to an existing unit test and created a route like this:
from(""direct:a"").intercept(interceptor1).process(orderProcessor).intercept(interceptor2).to(""direct:d""); 

I think one would expect to have one route and the invocation order to be interceptor1 -> orderProcessor -> interceptor2 -> direct:d.

Instead we have:
1. two routes
1. interceptor1 and interceptor2 are invoked twice
2. orderProcessor is never invoked
3. direct:d is invoked twice, i think.

",,,,,,,,,,,,,,,,,31/Oct/07 14:50;ASF.LICENSE.NOT.GRANTED--camel-interceptor-bug.patch;https://issues.apache.org/jira/secure/attachment/12462289/ASF.LICENSE.NOT.GRANTED--camel-interceptor-bug.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2007-11-05 15:02:26.658,,,no_permission,,,,,,,,,,,,,83154,,,Mon Nov 05 15:02:26 UTC 2007,,,,,,,0|i01aqv:,5510,,,,,,,,,"05/Nov/07 15:02;jstrachan;fixed - see the test cases...
InterceptorBuilderTest and InterceptorBuilderWithEndTest
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Converters are not found properly,CAMEL-194,12484970,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,romkal,romkal,30/Oct/07 15:33,12/May/08 07:56,14/Mar/19 02:42,14/Nov/07 12:53,1.2.0,,,,,,,,,,1.3.0,,,camel-core,,,,0,"There is default converter from dom.Document -> xml.transform.DOMSource

Unfortunately when you try to send DOM document (implementation) and convert it to Source there is no converter found, because Document cannot be assigned to implementation without a cast.",,,,,,,,,,,,,,,,,30/Oct/07 15:33;romkal;ASF.LICENSE.NOT.GRANTED--camel-converter.patch;https://issues.apache.org/jira/secure/attachment/12462279/ASF.LICENSE.NOT.GRANTED--camel-converter.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2007-11-14 12:53:02.124,,,no_permission,,,,,,,,,,,,,83155,,,Wed Nov 14 12:53:02 UTC 2007,,,Patch Available,,,,0|i01aq7:,5507,,,,,,,,,14/Nov/07 12:53;jstrachan;Patch applied with thanks! I guess we could do with a test case though :) ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Xslt Builder shouldn't create out messages.,CAMEL-193,12484952,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,romkal,romkal,30/Oct/07 15:25,12/May/08 07:56,14/Mar/19 02:42,13/Nov/07 13:15,1.2.0,,,,,,,,,,1.3.0,,,camel-core,,,,0,"current XsltBuilder lazy creates out messages even it doesn't work on them.

It causes problems as out messages are propagated by pipeline then.",,,,,,,,,,,,,,,,,30/Oct/07 15:25;romkal;ASF.LICENSE.NOT.GRANTED--camel-xslt.patch;https://issues.apache.org/jira/secure/attachment/12462371/ASF.LICENSE.NOT.GRANTED--camel-xslt.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,83156,,,Tue Nov 13 13:15:39 UTC 2007,,,Patch Available,,,,0|i01apz:,5506,,,,,,,,,13/Nov/07 13:15;romkal;This problem is fixed in 1.3 branch as now pipeline always copies Out->In that wasn't the case in 1.2.0 branch. Now xmls should populate Out message and it does it.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
@MessageDriven consumers don't seem to get closed with the CamelContext; plus injection of @Headers does not appear to work,CAMEL-192,12484915,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,jstrachan,jstrachan,26/Oct/07 15:20,12/May/08 07:56,14/Mar/19 02:42,26/Oct/07 16:15,,,,,,,,,,,1.3.0,,,camel-core,camel-spring,,,0,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,102892,,,Fri Oct 26 16:15:12 UTC 2007,,,,,,,0|i01apr:,5505,,,,,,,,,26/Oct/07 16:15;jstrachan;fix committed ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Catch clause with pipeline does not proceed,CAMEL-191,12484881,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,nickysandhu,nickysandhu,25/Oct/07 19:26,12/May/08 07:56,14/Mar/19 02:42,26/Oct/07 11:53,1.2.0,,,,,,,,,,1.3.0,,,camel-core,,,,0,"Catch clause with pipeline does not proceed. This is because the pipeline is designed to reject exceptions. The catch processor should give the exchange a fresh start

This started from thread http://www.nabble.com/Camel-1.2---CatchProcessor-not-working--t4690438s22882.html",,,,,,,,,,,,,,,,,25/Oct/07 19:31;nickysandhu;catch-with-pipeline-patch.txt;https://issues.apache.org/jira/secure/attachment/12462309/catch-with-pipeline-patch.txt,,,,,1.0,,,,,,,,,,,,,,,,,,,2007-10-26 11:53:42.522,,,no_permission,,,,,,,,,,,,,83157,,,Fri Oct 26 11:53:42 UTC 2007,,,Patch Available,,,,0|i01apj:,5504,,,,,,,,,"25/Oct/07 19:31;nickysandhu;Review patch. Gives the exchange a fresh start by removing the exception that caused it to reach the catch clause. The exception is still available in the in header map with ""caught.exception"" key",26/Oct/07 11:53;jstrachan;Patch applied with huge thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
System.out in source code - FtpProducer,CAMEL-189,12484851,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,,davsclaus,davsclaus,19/Oct/07 22:38,12/May/08 07:48,14/Mar/19 02:42,14/Nov/07 13:14,1.2.0,,,,,,,,,,1.3.0,,,camel-ftp,,,,0,"I was browsing the source for the FTP component to see how the inner works.

I discovered a System.out statement in the class FtpProducer:
            System.out.println(sb.toString() + "" = "" + success);
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,83158,,,2007-10-19 22:38:20.0,,,,,,,0|i01ap3:,5502,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
XPathBuilder doesn't support javax.xml.transform.dom.DOMSource inputs.,CAMEL-187,12484841,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,dpredovic,dpredovic,19/Oct/07 14:12,12/May/08 07:56,14/Mar/19 02:42,19/Oct/07 15:21,,,,,,,,,,,1.3.0,,,camel-core,,,,0,"When used in ServiceMix messages are of the type javax.xml.transform.dom.DOMSource and not org.w3c.dom.Node, so we get a class cast exception. ",,,,,,,,,,,,,,,,,19/Oct/07 14:12;dpredovic;ASF.LICENSE.NOT.GRANTED--domsource.patch;https://issues.apache.org/jira/secure/attachment/12462290/ASF.LICENSE.NOT.GRANTED--domsource.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2007-10-19 15:21:58.518,,,no_permission,,,,,,,,,,,,,102889,,,Fri Oct 19 15:21:58 UTC 2007,,,Patch Available,,,,0|i01aon:,5500,,,,,,,,,19/Oct/07 15:21;jstrachan;patch applied with thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BAM example failure,CAMEL-173,12485407,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,blin,blin,11/Oct/07 08:13,12/May/08 12:45,14/Mar/19 02:42,28/Mar/08 11:27,1.2.0,,,,,,,,,,1.3.0,,,examples,,,,0,"the example throws following error:

[pache.camel.spring.Main.main()] Main                           INFO  Apache Camel 1.2.0 starting
[pache.camel.spring.Main.main()] Main                           INFO  Generating DOT file for routes: /opt/dev/apache-camel-1.2.0/examples/camel-example-bam/target/site/cameldoc for: org.apache.camel.spring.SpringCamelContext@352d87
[nent.file.FileComponent@db248c] JDBCExceptionReporter          WARN  SQL Error: 0, SQLState: null
[nent.file.FileComponent@db248c] JDBCExceptionReporter          ERROR failed batch
Failed to load preferences.  Proceeding with defaults:

[nent.file.FileComponent@db248c] AbstractFlushingEventListener  ERROR Could not synchronize database state with session
org.hibernate.exception.GenericJDBCException: Could not execute JDBC batch update
        at org.hibernate.exception.SQLStateConverter.handledNonSpecificException(SQLStateConverter.java:103)
        at org.hibernate.exception.SQLStateConverter.convert(SQLStateConverter.java:91)
        at org.hibernate.exception.JDBCExceptionHelper.convert(JDBCExceptionHelper.java:43)
        at org.hibernate.jdbc.AbstractBatcher.executeBatch(AbstractBatcher.java:249)
        at org.hibernate.engine.ActionQueue.executeActions(ActionQueue.java:235)
        at org.hibernate.engine.ActionQueue.executeActions(ActionQueue.java:139)
        at org.hibernate.event.def.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:298)
        at org.hibernate.event.def.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:27)
        at org.hibernate.impl.SessionImpl.flush(SessionImpl.java:1000)
        at org.hibernate.ejb.AbstractEntityManagerImpl.flush(AbstractEntityManagerImpl.java:296)
        at org.springframework.orm.jpa.JpaTemplate$8.doInJpa(JpaTemplate.java:289)
        at org.springframework.orm.jpa.JpaTemplate.execute(JpaTemplate.java:191)
        at org.springframework.orm.jpa.JpaTemplate.flush(JpaTemplate.java:287)
        at org.apache.camel.bam.processor.JpaBamProcessorSupport.loadEntity(JpaBamProcessorSupport.java:118)
        at org.apache.camel.bam.processor.BamProcessorSupport$1.doInTransaction(BamProcessorSupport.java:96)
        at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:127)
        at org.apache.camel.bam.processor.BamProcessorSupport.process(BamProcessorSupport.java:91)
        at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsynProcessorBridge.process(AsyncProcessorTypeConverter.java:44)
        at org.apache.camel.component.file.FileConsumer.pollFile(FileConsumer.java:131)
        at org.apache.camel.component.file.FileConsumer.pollFileOrDirectory(FileConsumer.java:68)
        at org.apache.camel.component.file.FileConsumer.pollFileOrDirectory(FileConsumer.java:76)
        at org.apache.camel.component.file.FileConsumer.poll(FileConsumer.java:49)
        at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:63)
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:417)
        at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:280)
        at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:135)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:65)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:142)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:166)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675)
        at java.lang.Thread.run(Thread.java:595)
Caused by: java.sql.BatchUpdateException: failed batch
        at org.hsqldb.jdbc.jdbcStatement.executeBatch(Unknown Source)
        at org.hsqldb.jdbc.jdbcPreparedStatement.executeBatch(Unknown Source)
        at org.hibernate.jdbc.BatchingBatcher.doExecuteBatch(BatchingBatcher.java:48)
        at org.hibernate.jdbc.AbstractBatcher.executeBatch(AbstractBatcher.java:242)
        ... 28 more
[nent.file.FileComponent@db248c] BamProcessorSupport            INFO  Attempt to insert duplicate row due to concurrency issue, so retrying: org.springframework.orm.jpa.JpaSystemException: org.hibernate.exception.GenericJDBCException: Could not execute JDBC batch update; nested exception is javax.persistence.PersistenceException: org.hibernate.exception.GenericJDBCException: Could not execute JDBC batch update
[nent.file.FileComponent@db248c] BamProcessorSupport            INFO  Retry attempt due to duplicate row: 1
[         ActivityMonitorEngine] BamFailures                    ERROR Exchange[Message: ActivityState[2 on ProcessInstance[p3] Activity[2 name: file:src/data/invoices?noop=true]]]
[         ActivityMonitorEngine] BamFailures                    ERROR Exchange[Message: ActivityState[7 on ProcessInstance[p2] Activity[2 name: file:src/data/invoices?noop=true]]]
",testing the camel-1.2.0 RC2 on SUSE Linux,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-03-28 09:44:39.042,,,no_permission,,,,,,,,,,,,,83159,,,Mon May 12 12:45:27 UTC 2008,,,,,,,0|i01alj:,5486,,,,,,,,,"28/Mar/08 09:44;davsclaus;The exception is happening on startup, it does not affect the application later on. 
However it would be nicer to remove this noise.","28/Mar/08 10:02;jstrachan;Agreed. I""m thinking this could be caused by concurrent threads trying to insert the same row? Am wondering if a different JDBC provider does locking better or something?","28/Mar/08 11:27;davsclaus;CAMEL-173
- fixed concurrency issue with creating a new entity. Now using a ReentrantLock from Java.
- no more exceptions in the camel-bam-example demo app as well.
- added some assertions to the unit test","28/Mar/08 11:28;davsclaus;James please by all means review my patch committed. 

Running the demo app now only displays:
{code}
[INFO] [camel:run]
[pache.camel.spring.Main.main()] Main                           INFO  Apache Camel 1.3-SNAPSHOT starting
[pache.camel.spring.Main.main()] Main                           INFO  Generating DOT file for routes: D:\project\camel\examples\camel-example-bam\target/site/cameldoc for: org.apache.camel.spring.SpringCamelContext@ae4f8b
Failed to load preferences.  Proceeding with defaults:

[         ActivityMonitorEngine] BamFailures                    ERROR Exchange[Message: ActivityState[3 on ProcessInstance[p1] Activity[2 name: file:src/data/invoices?noop=true]]]
[         ActivityMonitorEngine] BamFailures                    ERROR Exchange[Message: ActivityState[4 on ProcessInstance[p3] Activity[2 name: file:src/data/invoices?noop=true]]]
[         ActivityMonitorEngine] BamFailures                    ERROR Exchange[Message: ActivityState[6 on ProcessInstance[p2] Activity[2 name: file:src/data/invoices?noop=true]]]
Stopping
{code}","28/Mar/08 11:32;jstrachan;Awesome stuff! :)

I guess the problem could still happen if folks were running multiple JVMs against the same database; though in that case a real database would be used that properly implements locks etc :)",12/May/08 12:45;davsclaus;Closed all 1.3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
org.apache.camel.component.file.remote.FromFileToFtpTest failure,CAMEL-171,12485373,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,blin,blin,11/Oct/07 03:05,12/May/08 12:45,14/Mar/19 02:42,28/Mar/08 07:08,1.1.0,,,,,,,,,,1.3.0,,,camel-ftp,,,,0,"Running org.apache.camel.component.file.remote.FromFileToFtpTest
Server ready :: Apache FTP Server
Oct 11, 2007 10:57:43 AM org.apache.camel.component.mock.MockEndpoint assertIsSatisfied
INFO: Asserting: Endpoint[mock:result] is satisfied
/ = true
//tmp2 = true
//tmp2/camel = true
Oct 11, 2007 10:57:44 AM org.apache.camel.processor.Logger log
SEVERE: On delivery attempt: 0 caught: org.apache.camel.RuntimeCamelException: error sending file
org.apache.camel.RuntimeCamelException: error sending file
        at org.apache.camel.component.file.remote.FtpProducer.process(FtpProducer.java:51)
        at org.apache.camel.component.file.remote.FtpProducer.process(FtpProducer.java:37)
        at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsynProcessorBridge.process(AsyncProcessorTypeConverter.java:44)
        at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:73)
        at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:136)
        at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:86)
        at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:40)
        at org.apache.camel.component.file.FileConsumer.pollFile(FileConsumer.java:131)
        at org.apache.camel.component.file.FileConsumer.pollFileOrDirectory(FileConsumer.java:68)
        at org.apache.camel.component.file.File


The build still said ""successful"" at the end",SUSE Linux 10.0.1,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-03-26 18:29:33.818,,,no_permission,,,,,,,,,,,,,83113,,,Mon May 12 12:45:27 UTC 2008,,,,,,,0|i01al3:,5484,,,,,,,,,26/Mar/08 18:29;davsclaus;Will see if the test has a problem on the trunk,28/Mar/08 07:08;davsclaus;Was fixed on trunk.,12/May/08 12:45;davsclaus;Closed all 1.3 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The release candidate seems to declare dependencies on camel-core 1.1-SNAPSHOT.,CAMEL-169,12485334,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jstrachan,aguther,aguther,09/Oct/07 18:07,12/May/08 07:56,14/Mar/19 02:42,11/Oct/07 18:45,1.2.0,,,,,,,,,,1.2.0,,,,,,,0,"The release candidate seems to declare dependencies on camel-core 1.1-SNAPSHOT.  A release should not declare dependencies on SNAPSHOT version and also not on previous releases.


http://people.apache.org/~chirino/apache-camel-1.2.0-RC1/maven2/org/apache/camel/camel-parent/1.2.0/camel-parent-1.2.0.pom

I checked out 1.2.0 from tags and build it myself.  I noticed that there were some 1.1 SNAPSHOT versions but did not pay too much attention to it.  I then deployed to our internal Maven repository and clean-up my local repository.  I had a dependency to camel-core 1.2.0 declared in my project.  This give me the following error:

Exception in thread ""main"" java.lang.NoSuchMethodError: org.apache.camel.util.CamelContextHelper.convertTo(Lorg/apache/camel/CamelContext;Ljava/lang/Class;Ljava/lang/Object;)Ljava/lang/Object;

If I remove the dependency I get the following compilation error:

Missing:
----------
1) org.apache.camel:camel-core:jar:1.1-SNAPSHOT

  Try downloading the file manually from the project website.

  Then, install it using the command:
      mvn install:install-file -DgroupId=org.apache.camel -DartifactId=camel-core \
          -Dversion=1.1-SNAPSHOT -Dpackaging=jar -Dfile=/path/to/file
Alternatively, if you host your own repository you can deploy the file there:       mvn deploy:deploy-file -DgroupId=org.apache.camel -DartifactId=camel
-core \
          -Dversion=1.1-SNAPSHOT -Dpackaging=jar -Dfile=/path/to/file \
           -Durl=[url] -DrepositoryId=[id]

  Path to dependency:
        1) markettools.platform:messaging:jar:1.0-SNAPSHOT
        2) org.apache.camel:camel-jms:jar:1.2.0
        3) org.apache.camel:camel-core:jar:1.1-SNAPSHOT

----------
1 required artifact is missing.



",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2007-10-11 18:45:25.557,,,no_permission,,,,,,,,,,,,,83161,,,Thu Oct 11 18:45:25 UTC 2007,,,,,,,0|i01akn:,5482,,,,,,,,,11/Oct/07 18:45;jstrachan;fixed in RC2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ognl classes not bundled in snapshot,CAMEL-168,12484950,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jstrachan,nickysandhu,nickysandhu,09/Oct/07 15:24,12/May/08 07:56,14/Mar/19 02:42,09/Oct/07 15:39,,,,,,,,,,,1.2.0,,,,,,,0,camel-ognl has a typo in its packaging. This causes the classes to be not included in the snapshot,,,,,,,,,,,,,,,,,09/Oct/07 15:25;nickysandhu;ognl-patch-0907.txt;https://issues.apache.org/jira/secure/attachment/12462466/ognl-patch-0907.txt,,,,,1.0,,,,,,,,,,,,,,,,,,,2007-10-09 15:39:02.155,,,no_permission,,,,,,,,,,,,,102875,,,Tue Oct 09 15:39:02 UTC 2007,,,Patch Available,,,,0|i01akf:,5481,,,,,,,,,09/Oct/07 15:39;jstrachan;Patch applied with thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
org.apache.camel.processor.UnitOfWorkWithAsyncFlowTest failure,CAMEL-166,12485331,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Blocker,Fixed,,blin,blin,09/Oct/07 05:24,12/May/08 07:56,14/Mar/19 02:42,10/Oct/07 17:40,1.1.0,,,,,,,,,,1.2.0,,,camel-core,,,,0,"Running org.apache.camel.processor.UnitOfWorkWithAsyncFlowTest
Tests run: 3, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 20.345 sec <<< FAILURE!

This prevents developer from building camel under Linux platform. Thanks!",SUSE Linux 10.1,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2007-10-10 12:19:08.048,,,no_permission,,,,,,,,,,,,,83114,,,Wed Oct 10 17:40:17 UTC 2007,,,,,,,0|i01ajz:,5479,,,,,,,,,10/Oct/07 12:19;jstrachan;made a blocker for 1.2.0,"10/Oct/07 17:40;chirino;Ok I figured out why this was failing.  Seem that when:
 (1) a route completes async (like in our UnitOfWorkWithAsyncFlowTest)
 (2) you invoked the route via the sync form of the Processor process() API.

The test was assuming that all the registered Synchronizations on the UnitOfWork would complete before the process() call finished.  Unfortunately, that's not the case.  The Synchronizations are completed async and perhaps after the process call finishes.

I patched up the test cases to account for this and now they should be working.",10/Oct/07 17:40;chirino;fixed in version 583549,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
URL link broken in org.apache.camel.Processor API doc,CAMEL-161,12484956,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,jstrachan,blin,blin,28/Sep/07 04:04,12/May/08 07:56,14/Mar/19 02:42,01/Oct/07 15:17,1.1.0,,,,,,,,,,1.2.0,,,,,,,0,"""Message Transformer"" link is broken.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2007-10-01 15:17:52.641,,,no_permission,,,,,,,,,,,,,83115,,,Mon Oct 01 15:17:52 UTC 2007,,,,,,,0|i01aiv:,5474,,,,,,,,,01/Oct/07 15:17;jstrachan;Great catch thanks! Have patched trunk; the nightly build should update the javadoc tomorrow. For now the right link is: http://activemq.apache.org/camel/message-translator.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TryProcessor does not process finally if no catch defined,CAMEL-160,12484914,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jstrachan,nickysandhu,nickysandhu,26/Sep/07 23:49,12/May/08 07:56,14/Mar/19 02:42,01/Oct/07 14:11,,,,,,,,,,,1.2.0,,,,,,,0,try{}finally{} pattern does not work. There is also the problem (see test) of TryType getting lost ( a fluent API issue).,,,,,,,,,,,,,,,,,26/Sep/07 23:49;nickysandhu;patch.txt;https://issues.apache.org/jira/secure/attachment/12462383/patch.txt,,,,,1.0,,,,,,,,,,,,,,,,,,,2007-10-01 14:11:20.051,,,no_permission,,,,,,,,,,,,,102869,,,Mon Oct 01 14:11:20 UTC 2007,,,Patch Available,,,,0|i01ain:,5473,,,,,,,,,27/Sep/07 03:42;nickysandhu;Attached a patch. I am not sure if on handleAll the dead letter handler should be disabled? However thats the implementation in the patch.,01/Oct/07 14:11;jstrachan;patch applied with huge thanks,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Splitter does not propagate exceptions,CAMEL-159,12485704,12486276,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,nickysandhu,nickysandhu,26/Sep/07 20:17,31/Jul/09 06:33,14/Mar/19 02:42,19/Dec/08 09:49,,,,,,,,,,,1.6.0,2.0-M1,,camel-core,,,,0,"Splitter in its process method iterates over the body of a message and processes each part synchronously. It does not propogate exceptions thrown by the processor when processing the exchange. This makes it problematic for tryBlock()....handleAll() kind of applications. 

",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-06-05 00:52:52.058,,,no_permission,,,,,,,,,,,,,102868,,,Fri Jul 31 06:33:31 UTC 2009,,,,,,,0|i01aif:,5472,,,,,,,,,05/Jun/08 00:52;janstey;Is this still an issue for you? The Splitter class has changed quite a bit since you created this ticket.,"09/Jun/08 12:57;romkal;Shouldn't exception propagation be handled by aggregationStrategy? I believe that in case of splitter when we have one exception and few successful responses it is not so obvious if it is an exception of not.

I believe that if aggregationStrategy aggregates the exception into result, then it will be handled. Maybe we should simply verify if default aggregation strategy used propagates those exceptions by choosing maybe the last one that occurred.","17/Dec/08 13:34;njiang;+1 for Roman's suggestion.
I just did some change in the UseLatestAggregationStrategy.java to hold the latest exception in the exchange and  added a unit test in SplitterTest to test for the propagating exceptions testing.
","19/Dec/08 09:49;njiang;trunk
http://svn.apache.org/viewvc?rev=727377&view=rev

1.x branch
http://svn.apache.org/viewvc?rev=727409&view=rev",31/Jul/09 06:33;davsclaus;Closing 2.0m1 tickets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jetty endpoint consumer does not send exchange output as the HTTP response,CAMEL-158,12484924,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,chirino,chirino,chirino,26/Sep/07 17:06,12/May/08 07:56,14/Mar/19 02:42,26/Sep/07 17:07,1.1.0,,,,,,,,,,1.2.0,,,camel-jetty,,,,0,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,83116,,,Wed Sep 26 17:07:54 UTC 2007,,,,,,,0|i01ai7:,5471,,,,,,,,,26/Sep/07 17:07;chirino;HttpBinding did was not fully implemented.  fix commited in rev 579718,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Improper wiring of camel context using Spring,CAMEL-154,12485887,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,hadrian,,24/Sep/07 14:31,14/Jul/10 23:42,14/Mar/19 02:42,25/Sep/07 15:52,1.2.0,,,,,,,,,,1.2.0,,,camel-spring,,,,0,"When using spring to wire camel components, the whole magic is driven by org.springframework.context.support.AbstractApplicationContext.refresh().

At about line 327 the xml file is read and at some point AbstractApplicationContext.doParse is called.  What is notable is that we use parseUsingJaxb (line 135) instead of the spring way of doing things, and then we still use 
BeanDefinitionParser(s) to build the BeanDefinition(s).

On a sample context definition like the one in the unit tests:
  <camelContext id=""camel"" xmlns=""http://activemq.apache.org/camel/schema/spring"">
    <beanPostProcessor/>
    <endpoint id=""endpoint1"" uri=""direct:start""/>
    <endpoint id=""endpoint2"" uri=""mock:end""/>

    <route>
      <from ref=""endpoint1""/>
      <to ref=""endpoint2""/>
    </route>
  </camelContext>
The jaxb parser instantiates the BeanPostProcessor, endpoints, the RouteType, From/ToTypes properly, but the BeanPostProcessor is not injected with the camelContext and applicationContext, obviously.

Later on in AbstractApplicationContext.refresh() during the registerBeanPostProcessors() call (line 337) spring figures out that it needs to instantiate the BeanPostProcessor first and use it before it initializes the other beans.  So far so good, but in doing so there are 2 major problems.
1. It uses the BeanDefinition instead of the instance already created during jaxb parsing.
2. There is a chicken and egg situation; while it initializes ""camel:beanPostProcessor"", it looks for a ""camel"" bean which isn't registered yet.  The model for it does exist though, so a new instance of the CamelContextFactoryBean gets instantiated (and the id now is null instead of ""camel"" as in the spring xml).

I wrestled with this and couldn't figure out a solution.
",,,,,,,,,,,,,,,,,25/Sep/07 15:01;camel-154.patch;https://issues.apache.org/jira/secure/attachment/12462407/camel-154.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2007-09-25 15:01:53.823,,,no_permission,,,,,,,,,,,,,83162,,,Tue Sep 25 15:52:50 UTC 2007,,,Patch Available,,,,0|i01ahb:,5467,,,,,,,,,"25/Sep/07 15:01;hzbarcea;The issue was the id not being set on the BeanDefinition, so when Spring initialized the CamelContextFactoryBean, the id was missing.

I also refactored the jmx naming conventions with this patch",25/Sep/07 15:52;chirino;Patch applied rev 579301,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bug in PredicateBuilder,CAMEL-150,12485353,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gnt,nickysandhu,nickysandhu,18/Sep/07 03:22,12/May/08 07:56,14/Mar/19 02:42,18/Sep/07 07:26,,,,,,,,,,,1.2.0,,,camel-core,,,,0,"PredicateBuilder reads
   public static <E extends Exchange> Predicate<E> isGreaterThanOrEqualTo(final Expression<E> left,
                                                                           final Expression<E> right) {
        return new BinaryPredicateSupport<E>(left, right) {

            protected boolean matches(E exchange, Object leftValue, Object rightValue) {
                return compare(leftValue, rightValue) < 0;
            }

            protected String getOperationText() {
                return "">="";
            }
        };
    }

This should be
 return compare(leftValue, rightValue) >= 0;",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2007-09-18 07:26:44.734,,,no_permission,,,,,,,,,,,,,102861,,,Tue Sep 18 07:26:44 UTC 2007,,,,,,,0|i01agf:,5463,,,,,,,,,"18/Sep/07 07:26;gnt;Fixed, thx for reporting this!

Sending        src/main/java/org/apache/camel/builder/PredicateBuilder.java
Transmitting file data .
Committed revision 576744.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
XsltBuilder instance not threadsafe and can't be used more then once.,CAMEL-140,12484895,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,dpredovic,dpredovic,10/Sep/07 14:17,12/May/08 07:56,14/Mar/19 02:42,01/Oct/07 16:15,1.1.0,,,,,,,,,,1.2.0,,,camel-core,,,,0,"XsltBuilder uses a ResultHandler instance variable to hold the result of the transformation. That makes it thread unsafe and at the same time, as it's never cleared/reset, it can't be used more then once.
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2007-10-01 16:15:11.369,,,no_permission,,,,,,,,,,,,,83117,,,Mon Oct 01 16:15:11 UTC 2007,,,,,,,0|i01ae7:,5453,,,,,,,,,01/Oct/07 16:15;jstrachan;Great catch! Many thanks Dejan! I've patched this to create a stack-local result instead,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JMSXGroupID is not copied across ActiveMQ endpoints,CAMEL-112,12484650,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,jstrachan,jstrachan,17/Aug/07 16:05,12/May/08 07:56,14/Mar/19 02:42,17/Aug/07 16:13,1.1.0,,,,,,,,,,1.2.0,,,camel-activemq,,,,0,See thread: http://www.nabble.com/MethodName-in-header-is-ignored-by-beanRef%28%29-tf4285009s22882.html#a12198390,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,83118,,,Fri Aug 17 16:13:12 UTC 2007,,,,,,,0|i01a7z:,5425,,,,,,,,,17/Aug/07 16:13;jstrachan;See test case ActiveMQReplyToHeaderUsingConverterTest,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
exception() DSL handling doesn't work with bean integration that throws the exception due to wrapping in InvocationTargetException,CAMEL-111,12484687,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,jstrachan,jstrachan,16/Aug/07 20:18,12/May/08 07:56,14/Mar/19 02:42,17/Aug/07 04:23,,,,,,,,,,,1.2.0,,,camel-core,,,,0,See  http://www.nabble.com/Exception-based-routing-tf4226796s22882.html#a12183747,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,102826,,,Fri Aug 17 04:23:01 UTC 2007,,,,,,,0|i01a7r:,5424,,,,,,,,,"17/Aug/07 04:23;jstrachan;See the test case 

https://svn.apache.org/repos/asf/activemq/camel/trunk/camel-core/src/test/java/org/apache/camel/processor/BeanWithExceptionTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FileProducer truncates message bodies > 256KB,CAMEL-105,12484822,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,acricken,acricken,14/Aug/07 21:27,12/May/08 07:56,14/Mar/19 02:42,14/Aug/07 21:43,1.1.0,,,,,,,,,,1.2.0,,,camel-core,,,,0,"Thanks to NIO's awesomely intuitive behavior, the FileProducer is only writing out the first & last buffers it reads.  Apparently ByteBuffer needs to be cleared after each FileChannel write?",,,,,,,,,,,,,,,CAMEL-95,,14/Aug/07 21:28;acricken;patchfile;https://issues.apache.org/jira/secure/attachment/12462422/patchfile,,,,,1.0,,,,,,,,,,,,,,,,,,,2007-08-14 21:43:05.487,,,no_permission,,,,,,,,,,,,,83119,,,Tue Aug 14 21:43:05 UTC 2007,,,,,,,0|i01a6f:,5418,Regression,,,,,,,,14/Aug/07 21:28;acricken;Added patch,14/Aug/07 21:43;jstrachan;Patch applied with thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ClassCastException when using GenericApplicationContext,CAMEL-103,12484649,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,jstrachan,jstrachan,14/Aug/07 18:22,12/May/08 07:56,14/Mar/19 02:42,17/Aug/07 04:42,1.1.0,,,,,,,,,,1.2.0,,,camel-spring,,,,0,"
Caused by: java.lang.ClassCastException:
org.springframework.context.support.GenericApplicationContext

           at
org.apache.camel.spring.SpringCamelContext.createInjector(SpringCamelCon
text.java:147)

           at
org.apache.camel.impl.DefaultCamelContext.getInjector(DefaultCamelContex
t.java:322)

           at
org.apache.camel.impl.DefaultCamelContext.forceLazyInitialization(Defaul
tCamelContext.java:407)

           at
org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.ja
va:373)

           at
org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.ja
va:139)

           at
org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:38)

           at
org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(Camel
ContextFactoryBean.java:103)

           ... 20 more


",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,83120,,,Fri Aug 17 04:42:11 UTC 2007,,,,,,,0|i01a5z:,5416,,,,,,,,,14/Aug/07 18:57;jstrachan;I've just committed a patch which I think resolves this - need a test case to be sure...,17/Aug/07 04:42;jstrachan;added a test case in CamelContextFactoryBeanTest,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ClassCastException when going file -> FTP,CAMEL-98,12484795,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,jstrachan,jstrachan,10/Aug/07 16:48,12/May/08 07:56,14/Mar/19 02:42,10/Aug/07 16:55,,,,,,,,,,,1.1.0,,,camel-core,,,,0,"For more details see: 
http://www.nabble.com/FileConsumer-to-FtpProducer-bug-tf4249639s22882.html",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,102815,,,Mon Aug 13 14:47:36 UTC 2007,,,,,,,0|i01a4v:,5411,,,,,,,,,10/Aug/07 16:55;jstrachan;Test case here: https://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFileToFtpTest.java,13/Aug/07 14:47;jstrachan;moved to 1.1.0 release...,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
the getJMS* properties on a JMS message are not correctly copied across when forwarding a message,CAMEL-96,12484811,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jstrachan,jstrachan,jstrachan,10/Aug/07 11:53,12/May/08 07:56,14/Mar/19 02:42,10/Aug/07 12:42,,,,,,,,,,,1.1.0,,,,,,,0,"e.g JMSCorrelationID, JMSReplyTo, JMSType

",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,102813,,,Fri Aug 10 12:42:31 UTC 2007,,,,,,,0|i01a4f:,5409,,,,,,,,,10/Aug/07 11:56;jstrachan;also the other JMS properties like JMSMessageID and JMSDestination are not explicitly visible on the Exchange/Message APIs - unless casting to the JmsExchange/JmsMessage and grabbing the underlying JMS Message object,"10/Aug/07 12:42;jstrachan;Fixed - see test cases

* https://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-activemq/src/test/java/org/apache/camel/component/activemq/ActiveMQJmsHeaderRouteTest.java
* https://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-activemq/src/test/java/org/apache/camel/component/activemq/ActiveMQReplyToHeaderUsingConverterTest.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FileConsumer-to-FileProducer bug,CAMEL-95,12484809,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,jstrachan,jstrachan,10/Aug/07 07:17,12/May/08 07:56,14/Mar/19 02:42,10/Aug/07 07:21,,,,,,,,,,,1.1.0,,,camel-core,,,,0,See http://www.nabble.com/FileConsumer-to-FileProducer-bug-tf4245175s22882.html for issue and patch,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,102812,,,Fri Aug 10 07:21:42 UTC 2007,,,Patch Available,,,,0|i01a47:,5408,,,,,,,,,"10/Aug/07 07:21;jstrachan;See the test case

https://svn.apache.org/repos/asf/activemq/camel/trunk/camel-core/src/test/java/org/apache/camel/component/file/FileConsumerProducerRouteTest.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
VM Component should extend Seda not Queue,CAMEL-85,12485396,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jstrachan,tgautier,tgautier,03/Aug/07 04:26,12/May/08 08:01,14/Mar/19 02:42,03/Aug/07 20:18,1.1.0,,,,,,,,,,1.1.0,,,,,,,0,It appears that the deprecation of the Queue component means the VM component incorrectly complains that it is deprecated.,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2007-08-03 20:18:56.746,,,no_permission,,,,,,,,,,,,,83121,,,Fri Aug 03 20:18:56 UTC 2007,,,,,,,0|i01a1z:,5398,,,,,,,,,03/Aug/07 20:18;jstrachan;Great spot - many thanks Taylor!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Stop logic a bit off in ServiceSupport.java,CAMEL-81,12485383,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,hadrian,,27/Jul/07 14:31,14/Jul/10 23:42,14/Mar/19 02:42,30/Jul/07 16:49,1.1.0,,,,,,,,,,1.1.0,,,camel-core,,,,0,"With the current logic, during stop the service is both started and stopped.",,,,,,,,,,,,,,,,,27/Jul/07 14:31;ASF.LICENSE.NOT.GRANTED--camel-stop.patch;https://issues.apache.org/jira/secure/attachment/12462269/ASF.LICENSE.NOT.GRANTED--camel-stop.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2007-07-30 16:49:10.279,,,no_permission,,,,,,,,,,,,,83122,,,Mon Jul 30 16:49:10 UTC 2007,,,Patch Available,,,,0|i01a13:,5394,,,,,,,,,30/Jul/07 16:49;jstrachan;Patch applied with thanks! ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JpaIdempotentConsumerTest fails on multiple runs,CAMEL-80,12485902,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,hadrian,,27/Jul/07 14:04,14/Jul/10 23:42,14/Mar/19 02:42,20/Aug/07 18:05,,,,,,,,,,,1.2.0,,,camel-jpa,,,,0,"Caused by: 
<4|true|0.9.6-incubating> org.apache.openjpa.persistence.ArgumentException: The type ""class org.apache.camel.processor.idempotent.jpa.MessageProcessed"" has not been enhanced.
	at org.apache.openjpa.meta.ClassMetaData.resolveMeta(ClassMetaData.java:1590)
	at org.apache.openjpa.meta.ClassMetaData.resolve(ClassMetaData.java:1564)
	at org.apache.openjpa.meta.MetaDataRepository.processBuffer(MetaDataRepository.java:654)
	at org.apache.openjpa.meta.MetaDataRepository.resolveMeta(MetaDataRepository.java:554)
	at org.apache.openjpa.meta.MetaDataRepository.resolve(MetaDataRepository.java:479)
	at org.apache.openjpa.meta.MetaDataRepository.getMetaData(MetaDataRepository.java:283)
	at org.apache.openjpa.kernel.jpql.JPQLExpressionBuilder.getClassMetaData(JPQLExpressionBuilder.java:162)
	at org.apache.openjpa.kernel.jpql.JPQLExpressionBuilder.resolveClassMetaData(JPQLExpressionBuilder.java:131)
	at org.apache.openjpa.kernel.jpql.JPQLExpressionBuilder.getCandidateMetaData(JPQLExpressionBuilder.java:211)
	at org.apache.openjpa.kernel.jpql.JPQLExpressionBuilder.getCandidateMetaData(JPQLExpressionBuilder.java:181)
	at org.apache.openjpa.kernel.jpql.JPQLExpressionBuilder.getCandidateType(JPQLExpressionBuilder.java:174)
	at org.apache.openjpa.kernel.jpql.JPQLExpressionBuilder.access$500(JPQLExpressionBuilder.java:61)
	at org.apache.openjpa.kernel.jpql.JPQLExpressionBuilder$ParsedJPQL.populate(JPQLExpressionBuilder.java:1657)
	at org.apache.openjpa.kernel.jpql.JPQLParser.populate(JPQLParser.java:52)
	at org.apache.openjpa.kernel.ExpressionStoreQuery.populateFromCompilation(ExpressionStoreQuery.java:145)
	at org.apache.openjpa.kernel.QueryImpl.newCompilation(QueryImpl.java:642)
	at org.apache.openjpa.kernel.QueryImpl.compilationFromCache(QueryImpl.java:623)
	at org.apache.openjpa.kernel.QueryImpl.compileForCompilation(QueryImpl.java:589)
	at org.apache.openjpa.kernel.QueryImpl.compileForExecutor(QueryImpl.java:651)
	at org.apache.openjpa.kernel.QueryImpl.getOperation(QueryImpl.java:1464)
	at org.apache.openjpa.kernel.DelegatingQuery.getOperation(DelegatingQuery.java:120)
	at org.apache.openjpa.persistence.QueryImpl.execute(QueryImpl.java:202)
	at org.apache.openjpa.persistence.QueryImpl.getResultList(QueryImpl.java:251)
	at org.springframework.orm.jpa.JpaTemplate$9.doInJpa(JpaTemplate.java:313)
	at org.springframework.orm.jpa.JpaTemplate.execute(JpaTemplate.java:191)
	at org.springframework.orm.jpa.JpaTemplate.executeFind(JpaTemplate.java:158)
	at org.springframework.orm.jpa.JpaTemplate.find(JpaTemplate.java:305)
	at org.apache.camel.processor.idempotent.jpa.JpaMessageIdRepository$1.doInTransaction(JpaMessageIdRepository.java:76)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:127)
	at org.apache.camel.processor.idempotent.jpa.JpaMessageIdRepository.contains(JpaMessageIdRepository.java:73)
	at org.apache.camel.processor.idempotent.IdempotentConsumer.process(IdempotentConsumer.java:57)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:77)
	at org.apache.camel.component.direct.DirectEndpoint.process(DirectEndpoint.java:65)
	at org.apache.camel.component.direct.DirectEndpoint$1.process(DirectEndpoint.java:54)
	at org.apache.camel.util.ProducerCache.send(ProducerCache.java:91)
	at org.apache.camel.CamelTemplate.send(CamelTemplate.java:93)
	at org.apache.camel.processor.IdempotentConsumerTest.sendMessage(IdempotentConsumerTest.java:51)
	at org.apache.camel.processor.IdempotentConsumerTest.testDuplicateMessagesAreFilteredOut(IdempotentConsumerTest.java:40)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at junit.framework.TestCase.runTest(TestCase.java:168)
	at junit.framework.TestCase.runBare(TestCase.java:134)
	at junit.framework.TestResult$1.protect(TestResult.java:110)
	at junit.framework.TestResult.runProtected(TestResult.java:128)
	at junit.framework.TestResult.run(TestResult.java:113)
	at junit.framework.TestCase.run(TestCase.java:124)
	at junit.framework.TestSuite.runTest(TestSuite.java:232)
	at junit.framework.TestSuite.run(TestSuite.java:227)
	at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:128)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)
[                          main] DeadLetterChannel              ERROR On delivery attempt: 3 caught: org.springframework.dao.InvalidDataAccessApiUsageException: The type ""class org.apache.camel.processor.idempotent.jpa.MessageProcessed"" has not been enhanced.; nested exception is <4|true|0.9.6-incubating> org.apache.openjpa.persistence.ArgumentException: The type ""class org.apache.camel.processor.idempotent.jpa.MessageProcessed"" has not been enhanced.
org.springframework.dao.InvalidDataAccessApiUsageException: The type ""class org.apache.camel.processor.idempotent.jpa.MessageProcessed"" has not been enhanced.; nested exception is <4|true|0.9.6-incubating> org.apache.openjpa.persistence.ArgumentException: The type ""class org.apache.camel.processor.idempotent.jpa.MessageProcessed"" has not been enhanced.
Caused by: 
<4|true|0.9.6-incubating> org.apache.openjpa.persistence.ArgumentException: The type ""class org.apache.camel.processor.idempotent.jpa.MessageProcessed"" has not been enhanced.
	at org.apache.openjpa.meta.ClassMetaData.resolveMeta(ClassMetaData.java:1590)
	at org.apache.openjpa.meta.ClassMetaData.resolve(ClassMetaData.java:1564)
	at org.apache.openjpa.meta.MetaDataRepository.processBuffer(MetaDataRepository.java:654)
	at org.apache.openjpa.meta.MetaDataRepository.resolveMeta(MetaDataRepository.java:554)
	at org.apache.openjpa.meta.MetaDataRepository.resolve(MetaDataRepository.java:479)
	at org.apache.openjpa.meta.MetaDataRepository.getMetaData(MetaDataRepository.java:283)
	at org.apache.openjpa.kernel.jpql.JPQLExpressionBuilder.getClassMetaData(JPQLExpressionBuilder.java:162)
	at org.apache.openjpa.kernel.jpql.JPQLExpressionBuilder.resolveClassMetaData(JPQLExpressionBuilder.java:131)
	at org.apache.openjpa.kernel.jpql.JPQLExpressionBuilder.getCandidateMetaData(JPQLExpressionBuilder.java:211)
	at org.apache.openjpa.kernel.jpql.JPQLExpressionBuilder.getCandidateMetaData(JPQLExpressionBuilder.java:181)
	at org.apache.openjpa.kernel.jpql.JPQLExpressionBuilder.getCandidateType(JPQLExpressionBuilder.java:174)
	at org.apache.openjpa.kernel.jpql.JPQLExpressionBuilder.access$500(JPQLExpressionBuilder.java:61)
	at org.apache.openjpa.kernel.jpql.JPQLExpressionBuilder$ParsedJPQL.populate(JPQLExpressionBuilder.java:1657)
	at org.apache.openjpa.kernel.jpql.JPQLParser.populate(JPQLParser.java:52)
	at org.apache.openjpa.kernel.ExpressionStoreQuery.populateFromCompilation(ExpressionStoreQuery.java:145)
	at org.apache.openjpa.kernel.QueryImpl.newCompilation(QueryImpl.java:642)
	at org.apache.openjpa.kernel.QueryImpl.compilationFromCache(QueryImpl.java:623)
	at org.apache.openjpa.kernel.QueryImpl.compileForCompilation(QueryImpl.java:589)
	at org.apache.openjpa.kernel.QueryImpl.compileForExecutor(QueryImpl.java:651)
	at org.apache.openjpa.kernel.QueryImpl.getOperation(QueryImpl.java:1464)
	at org.apache.openjpa.kernel.DelegatingQuery.getOperation(DelegatingQuery.java:120)
	at org.apache.openjpa.persistence.QueryImpl.execute(QueryImpl.java:202)
	at org.apache.openjpa.persistence.QueryImpl.getResultList(QueryImpl.java:251)
	at org.springframework.orm.jpa.JpaTemplate$9.doInJpa(JpaTemplate.java:313)
	at org.springframework.orm.jpa.JpaTemplate.execute(JpaTemplate.java:191)
	at org.springframework.orm.jpa.JpaTemplate.executeFind(JpaTemplate.java:158)
	at org.springframework.orm.jpa.JpaTemplate.find(JpaTemplate.java:305)
	at org.apache.camel.processor.idempotent.jpa.JpaMessageIdRepository$1.doInTransaction(JpaMessageIdRepository.java:76)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:127)
	at org.apache.camel.processor.idempotent.jpa.JpaMessageIdRepository.contains(JpaMessageIdRepository.java:73)
	at org.apache.camel.processor.idempotent.IdempotentConsumer.process(IdempotentConsumer.java:57)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:77)
	at org.apache.camel.component.direct.DirectEndpoint.process(DirectEndpoint.java:65)
	at org.apache.camel.component.direct.DirectEndpoint$1.process(DirectEndpoint.java:54)
	at org.apache.camel.util.ProducerCache.send(ProducerCache.java:91)
	at org.apache.camel.CamelTemplate.send(CamelTemplate.java:93)
	at org.apache.camel.processor.IdempotentConsumerTest.sendMessage(IdempotentConsumerTest.java:51)
	at org.apache.camel.processor.IdempotentConsumerTest.testDuplicateMessagesAreFilteredOut(IdempotentConsumerTest.java:40)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at junit.framework.TestCase.runTest(TestCase.java:168)
	at junit.framework.TestCase.runBare(TestCase.java:134)
	at junit.framework.TestResult$1.protect(TestResult.java:110)
	at junit.framework.TestResult.runProtected(TestResult.java:128)
	at junit.framework.TestResult.run(TestResult.java:113)
	at junit.framework.TestCase.run(TestCase.java:124)
	at junit.framework.TestSuite.runTest(TestSuite.java:232)
	at junit.framework.TestSuite.run(TestSuite.java:227)
	at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:128)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)
[                          main] DeadLetterChannel              ERROR On delivery attempt: 4 caught: org.springframework.dao.InvalidDataAccessApiUsageException: The type ""class org.apache.camel.processor.idempotent.jpa.MessageProcessed"" has not been enhanced.; nested exception is <4|true|0.9.6-incubating> org.apache.openjpa.persistence.ArgumentException: The type ""class org.apache.camel.processor.idempotent.jpa.MessageProcessed"" has not been enhanced.
org.springframework.dao.InvalidDataAccessApiUsageException: The type ""class org.apache.camel.processor.idempotent.jpa.MessageProcessed"" has not been enhanced.; nested exception is <4|true|0.9.6-incubating> org.apache.openjpa.persistence.ArgumentException: The type ""class org.apache.camel.processor.idempotent.jpa.MessageProcessed"" has not been enhanced.
Caused by: 
<4|true|0.9.6-incubating> org.apache.openjpa.persistence.ArgumentException: The type ""class org.apache.camel.processor.idempotent.jpa.MessageProcessed"" has not been enhanced.
	at org.apache.openjpa.meta.ClassMetaData.resolveMeta(ClassMetaData.java:1590)
	at org.apache.openjpa.meta.ClassMetaData.resolve(ClassMetaData.java:1564)
	at org.apache.openjpa.meta.MetaDataRepository.processBuffer(MetaDataRepository.java:654)
	at org.apache.openjpa.meta.MetaDataRepository.resolveMeta(MetaDataRepository.java:554)
	at org.apache.openjpa.meta.MetaDataRepository.resolve(MetaDataRepository.java:479)
	at org.apache.openjpa.meta.MetaDataRepository.getMetaData(MetaDataRepository.java:283)
	at org.apache.openjpa.kernel.jpql.JPQLExpressionBuilder.getClassMetaData(JPQLExpressionBuilder.java:162)

[...]",win/32,,,,,,,,,,,,,,,,16/Aug/07 04:52;camel-80.patch;https://issues.apache.org/jira/secure/attachment/12462351/camel-80.patch,10/Aug/07 06:58;camel-jpa.patch;https://issues.apache.org/jira/secure/attachment/12462287/camel-jpa.patch,,,,2.0,,,,,,,,,,,,,,,,,,,2007-07-27 14:07:13.322,,,no_permission,,,,,,,,,,,,,102799,,,Mon Aug 20 18:05:36 UTC 2007,,,Patch Available,,,,0|i01a0v:,5393,Unit Test Broken,,,,,,,,"27/Jul/07 14:07;hzbarcea;Possible cleanup issue.  The test always works on a clean working copy.  Subsequent runs consistently fail.  Removing the target dir manually causes the test to pass once.

This happens on winxp, don't know about other platforms.",30/Jul/07 16:26;jstrachan;I wonder if switching the database to use HSQL DB (i.e. memory only) fixes this?,10/Aug/07 07:39;jstrachan;set the patch available flag,"10/Aug/07 07:56;jstrachan;Patch applied with thanks! I made a minor change, cleaning up the repo on the start of the test rather than the end (in case a test fails mid-way through)","16/Aug/07 04:49;hzbarcea;The call to the cleanup method is actually commented out, so the cleanup doesn't take place.",16/Aug/07 04:52;hzbarcea;Also updated log4j.properties to make test cases succeed silently.,20/Aug/07 18:05;jstrachan;Patch applied with thanks! can you double check all the patches you intended have been applied correctly please? We can reopen if we've missed anything,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FileConfigureTest can't pass in Windows box,CAMEL-72,12485347,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,njiang,njiang,08/Jul/07 10:33,12/May/08 08:01,14/Mar/19 02:42,09/Jul/07 09:00,1.1.0,,,,,,,,,,1.1.0,,,camel-core,,,,0,"Because of the File.separator is different between the unix and windows system. 
So the test can't pass in windows box.
I just attached a patch for it.  
Please have a look at it, I tested it in windows box.",,,,,,,,,,,,,,,,,08/Jul/07 10:33;njiang;ASF.LICENSE.NOT.GRANTED--FileConfigureTest.patch;https://issues.apache.org/jira/secure/attachment/12462353/ASF.LICENSE.NOT.GRANTED--FileConfigureTest.patch,,,,,1.0,,,,,,,,,,,,,,,,,,,2007-07-09 09:00:19.343,,,no_permission,,,,,,,,,,,,,83123,,,Mon Jul 09 09:00:19 UTC 2007,,,Patch Available,,,,0|i019z3:,5385,,,,,,,,,09/Jul/07 09:00;jstrachan;patch applied with thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Issue with getHeader("""", Boolean.class)",CAMEL-3,12485054,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,jstrachan,nnordrum,nnordrum,04/Jun/07 07:38,12/May/08 08:01,14/Mar/19 02:42,04/Jun/07 10:09,,,,,,,,,,,1.0.0,,,camel-core,,,,0,"{code:java}
    public void testNPE() throws Exception {
        final CamelContext camelContext = new DefaultCamelContext();
        final String fromQueue = ""queue:A"";
        camelContext.addRoutes(new RouteBuilder() {
            public void configure() throws Exception {
                from(fromQueue).process(new Processor() {
                    public void process(Exchange exchange) throws Exception {
                        final Message in = exchange.getIn();
                        assertNotNull(""Message is Null"", in);
                        String isDebugString = in.getHeader(""someproperty"", String.class);
                        assertNull(isDebugString);
                        assertNotNull(""Message is Null"", in);
                        boolean isDebug = in.getHeader(""someproperty"", Boolean.class);
                        assertFalse(isDebug);
                    }
                });
            }
        });
        camelContext.start();
        new CamelTemplate(camelContext).sendBody(fromQueue, ""ha!"");
        Thread.sleep(5000L);
    }
{code}
throws NPE on the isDebug = ... line.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2007-06-04 10:09:12.191,,,no_permission,,,,,,,,,,,,,102725,,,Mon Jun 04 10:09:12 UTC 2007,,,,,,,0|i019jz:,5317,,,,,,,,,"04/Jun/07 10:09;jstrachan;I've added a test case here

https://svn.apache.org/repos/asf/activemq/camel/trunk/camel-core/src/test/java/org/apache/camel/issues/Issue3Test.java

which is a minor refactor of your test case. (I switched to the direct: endpoint so that the send is synchronous, so no need to sleep & the exception fails the test case - also I used the handy base class for starting/stopping the context etc).

I got a valid stack trace BTW. I suspect the reason you didn't was a JVM thing (e.g. try running with hotspot disabled maybe?).

Basically the issue was to do with Java 5's type coercion and not anything specific with Camel. 

Boolean b = in.getHeader(""foo"", Boolean.class);

does work fine and returns null for an undefined property. However if you force it to be coerced to a 'boolean' rather than 'Boolean') you get an NPE as the value is null (since there is no header called ""foo""). (The same is true when converting from Integer to int when the value is null).

I've just patched the converter code so that if you do 

boolean b = in.getHeader(""foo"", boolean.class);

then it returns a valid value and does not throw an NPE. (i.e. it returns false for missing headers).

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CSS in IE7 goes bad,CAMEL-2,12484883,,Bug,Closed,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,chirino,jstrachan,jstrachan,18/May/07 12:57,12/May/08 08:01,14/Mar/19 02:42,18/May/07 16:01,,,,,,,,,,,1.3.0,,,website,,,,0,Will attach a dump,,,,,,,,,,,,,,,,,18/May/07 12:59;jstrachan;ie7_display.JPG;https://issues.apache.org/jira/secure/attachment/12462342/ie7_display.JPG,,,,,1.0,,,,,,,,,,,,,,,,,,,2007-05-18 16:01:03.619,,,no_permission,,,,,,,,,,,,,102724,,,Fri May 18 16:01:03 UTC 2007,,,,,,,0|i019jr:,5316,,,,,,,,,"18/May/07 16:01;chirino;Fixed.  Cwiki updated for amq, nms, cpp, and camel spaces.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
