Summary,Issue key,Issue id,Issue Type,Status,Project key,Project name,Project type,Project lead,Project description,Project url,Priority,Resolution,Assignee,Reporter,Creator,Created,Updated,Last Viewed,Resolved,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Fix Version/s,Fix Version/s,Fix Version/s,Fix Version/s,Fix Version/s,Fix Version/s,Fix Version/s,Component/s,Component/s,Component/s,Due Date,Votes,Labels,Description,Environment,Log Work,Original Estimate,Remaining Estimate,Time Spent,Work Ratio,Σ Original Estimate,Σ Remaining Estimate,Σ Time Spent,Security Level,Outward issue link (Reference),Outward issue link (Reference),Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Custom field (Attachment count),Custom field (Blog - New Blog Administrators),Custom field (Blog - New Blog PMC),Custom field (Blog - Write access),Custom field (Blog Administrator?),Custom field (Blogs - Admin for blog),Custom field (Blogs - Email Address),Custom field (Blogs - Existing Blog Access Level),Custom field (Blogs - Existing Blog Name),Custom field (Blogs - New Blog Write Access),Custom field (Blogs - Username),Custom field (Bug Category),Custom field (Bugzilla - Email Notification Address),Custom field (Bugzilla - List of usernames),Custom field (Bugzilla - PMC Name),Custom field (Bugzilla - Project Name),Custom field (Bugzilla Id),Custom field (Change Category),Custom field (Complexity),Custom field (Date of First Response),Custom field (Discovered By),Custom field (Docs Text),Custom field (Enable Automatic Patch Review),Custom field (Epic Link),Custom field (Existing GitBox Approval),Custom field (External issue URL),Custom field (Git Notification Mailing List),Custom field (Git Repository Import Path),Custom field (Git Repository Name),Custom field (Git Repository Type),Custom field (GitHub Options),Custom field (Github Integration),Custom field (Github Integrations - Other),Custom field (Global Rank),Custom field (INFRA - Subversion Repository Path),Custom field (Initial Confluence Contributors),Custom field (Last public comment date),Custom field (Machine Readable Info),Custom field (New-TLP-TLPName),Custom field (Patch Info),Custom field (Priority),Custom field (Project),Custom field (Protected Branch),Custom field (Rank),Custom field (Rank (Obsolete)),Custom field (Severity),Custom field (Severity),Custom field (Space Description),Custom field (Space Key),Custom field (Space Name),Custom field (Test and Documentation Plan),Custom field (Testcase included),Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment
problem inserting more than 4000 charcters in oracle XMLTYPE column,OPENJPA-2761,13203088,Bug,Resolved,OPENJPA,OpenJPA,software,struberg,"Implementation of Java persistence, including the Java Persistence API JSR-220 (JPA 1.0) and JSR-317 (JPA 2.0).",http://openjpa.apache.org,Blocker,Fixed,struberg,nezih,nezih,07/Dec/18 16:46,14/Jan/19 11:56,13/Mar/19 23:08,14/Jan/19 11:56,2.2.1,2.4.3,3.0.0,,,,,,,,,,,,,,,,,3.0.1,,,,,,,,,,,0,,"In attachement an eclipse project with a testcase showing the problem.

my table is created with :

CREATE TABLE Message (id NUMBER NOT NULL, 
created TIMESTAMP, 
message VARCHAR2(255), 
XML_CONTENT XMLTYPE, 
PRIMARY KEY (id));

My jdbc4 driver version is 11.2.0.4 (ojdbc6.jar)

I tried to follow instructions mentioned here with no success : https://issues.apache.org/jira/browse/OPENJPA-1691?focusedCommentId=13086429&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13086429

Thx",,,,,,,,,,,,,07/Dec/18 16:34;nezih;XMLTypeTester.zip;https://issues.apache.org/jira/secure/attachment/12951018/XMLTypeTester.zip,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2019-01-06 22:23:01.628,,,no_permission,,,,,,,,,,,9223372036854775807,,,Mon Jan 14 11:56:20 UTC 2019,,,,,,,0|s01ah4:,9223372036854775807,,,,,,,,"06/Jan/19 22:23;struberg;I'm in the process of setting up a docker profile to run Oracle based tests much easier.
Would you mind sharing which Oracle server version you run?",07/Jan/19 08:59;nezih;Our oracle server version is : 12.2.0.1,"10/Jan/19 12:31;jira-bot;Commit aae0a95f6c8f38e0df18e5f538761ee502d9eb08 in openjpa's branch refs/heads/master from Mark Struberg
[ https://gitbox.apache.org/repos/asf?p=openjpa.git;h=aae0a95 ]

OPENJPA-2761 properly handle javax.sql.Types.SQLXML
","10/Jan/19 14:36;struberg;Hi [~nezih] I've fixed a missing handling of SQLXML types. Seems Oracle12 handles this a bit different than older versions. Now our internal tests cover this and do pass it.
Could you please verify? This needs the latest openjpa-3.0.1-SNAPSHOT. I will deploy it to our ASF snapshot repo when back home. Or you just build it yourself
{noformat}
$> mvn clean install -Dsurefire.excludes.locking=**/*
{noformat}",14/Jan/19 11:56;struberg;Resolving. Please reopen if your problem seems not to be covered by our fix - txs!,,,,,,,,,,,,,
OpenJPA ignores custom field strategies globally defined in persistence.xml,OPENJPA-2341,12634436,Bug,Resolved,OPENJPA,OpenJPA,software,struberg,"Implementation of Java persistence, including the Java Persistence API JSR-220 (JPA 1.0) and JSR-317 (JPA 2.0).",http://openjpa.apache.org,Blocker,Fixed,struberg,mrueegg,mrueegg,27/Feb/13 16:24,14/Oct/15 19:10,13/Mar/19 23:09,06/Oct/15 08:02,2.2.0,,,,,,,,,,,,,,,,,,,2.4.1,,,,,,,,,,,0,,"I use a custom field strategy value handler (a class that extends org.apache.openjpa.jdbc.meta.strats.AbstractValueHandler) for my entities that make use of joda time fields:

@Entity
public class MyEntity {
  org.joda.time.LocalDateTime creationDate;
}

When I use the inline strategy annotation (@Strategy(""com.xyz.LocalDateValueHandler"")), everything works as expected and my LocalDateTime field 'creationDate' gets mapped to an SQL timestamp. However, if I reference my value handler globally in the persistence.xml file, then OpenJPA is not able to find the value handler (i.e., it is never called), which results in a blob column type for 'creationDate'. Here's the corresponding snippet from my persistence.xml:

<property name=""openjpa.jdbc.MappingDefaults"" value=""FieldStrategies='org.joda.time.LocalDateTime=com.xyz.LocalDateValueHandler""/>

Note that if I use a mapping from a standard JDK class like java.lang.String to my value handler, then my handler is called as expected. Is this issue somehow related to #OPENJPA-758? Note that I use Derby as my database.

Any help would be much appreciated.
",,,,,,,,,,,,,30/Jun/15 20:02;struberg;OPENJPA-2341-wip-1.patch;https://issues.apache.org/jira/secure/attachment/12742915/OPENJPA-2341-wip-1.patch,29/Jun/15 21:50;struberg;OPENJPA-2341.patch;https://issues.apache.org/jira/secure/attachment/12742611/OPENJPA-2341.patch,,,,,,2.0,,,,,,,,,,,,,,,,,,,2015-06-29 21:50:40.824,,,no_permission,,,,,,,,,,,314929,,,Tue Oct 06 08:02:16 UTC 2015,,,,,,,0|i1icfj:,315273,,,,,,,,"29/Jun/15 21:50;struberg;First version, not yet fully working but a start.
I guess there is a cascade of issues. We tried to write a ValueHandler to convert joda Time values automatically. Reinhard wrote up a sample app for it: https://github.com/rsandtner/openjpa-converter

The first problem was that any handler was totally ignored if the field was Serializable. The patch fixes this problem and we now at least get the ValueHandler registered in the field. Still some other issues to resolve though...","29/Jun/15 22:08;struberg;Seems the code is fine, just our test sample was not really finished. We just had a ValueHandler for LocalDate but not for the other joda types used in the sample. Removing those columns made the sample green.","30/Jun/15 15:09;struberg;While tinkering a unit test I came across another weird issue. The custom ValueHandlers are totally ignored if the field is not a BASIC column. For _some_ types like joda's LocalDate it works 'by accident' as LocalDate is java.io.Serializable and thus gets detected as 'persistable' by OpenJPA (under FieldStrategy BASIC). 

We need to change this detection and also handle fields which have an explicit ValueHandler or PersistenceStrategy assigned.
This is not only important for the MetaData factory at runtime but also for all kind of enhancements, esp compile-time and javaagent enhancement!",30/Jun/15 15:19;struberg;The missing field handling is btw also broken even if you explicitly use @Strategy on the field...,30/Jun/15 20:02;struberg;work in progress; these tests fail as the mapped field is a java.security.Principal which is _not_ Serializable.,"03/Jul/15 06:08;jira-bot;Commit 1688947 from [~struberg] in branch 'openjpa/trunk'
[ https://svn.apache.org/r1688947 ]

OPENJPA-2341 fix ValueHandler pickup via FieldStrategies

Sadly this atm only works for fields which are Serializable. 
Menas the ValueHandler can just change the presentation right now
but it doesn't work for mapping non-Serializable classes like
java.security.Principal.","07/Jul/15 08:10;jira-bot;Commit 1689594 from [~struberg] in branch 'openjpa/trunk'
[ https://svn.apache.org/r1689594 ]

OPENJPA-2341 add unit test for Strategy handling",06/Oct/15 08:02;struberg;the handling now works perfectly fine if the field is Serializable. I think we should split out the remaining problems into a separate issue.,,,,,,,,,,
OpenJPA Ant enhancer task generates .class files with missing stackmap frame,OPENJPA-2339,12633817,Bug,Resolved,OPENJPA,OpenJPA,software,struberg,"Implementation of Java persistence, including the Java Persistence API JSR-220 (JPA 1.0) and JSR-317 (JPA 2.0).",http://openjpa.apache.org,Critical,Fixed,kwsutter,dominik.stadler@gmx.at,dominik.stadler@gmx.at,24/Feb/13 21:47,05/Mar/13 19:53,13/Mar/19 23:09,05/Mar/13 19:53,2.2.0,2.2.1,,,,,,,,,,,,,,,,,,2.2.1,,,,,,,,,,,0,,"I have a project which uses JaCoCo for code-coverage testing. Some of the tests load JPA Entities.

Any JPA entities cause error messages ""Missing or invalid stackmap frames."" in JaCoCo code, which the developers of JaCoco indicate is a problem in the code enhancing the .class file before, i.e. here Open JPA Enhancer. 

OPENJPA-2085 seems related, but it is fixed in 2.2.0, which I am using. Was this only fixed for Java 7?

I also upgraded to serp-1.14.1, which seems to have some related fixes, but the problem persists.

See https://github.com/jacoco/eclemma/issues/35 for a related discussion.

See the attached sample project/ant-file which reproduces the problem. Simply run ""ant test"" to trigger the error.

A full stacktrace is 

    [junit] Running MandantTest
    [junit] java.lang.instrument.IllegalClassFormatException: Error while instrumenting class Mandant.
    [junit]     at org.jacoco.agent.rt.internal_f6710df.CoverageTransformer.transform(CoverageTransformer.java:91)
    [junit]     at sun.instrument.TransformerManager.transform(TransformerManager.java:188)
    [junit]     at sun.instrument.InstrumentationImpl.transform(InstrumentationImpl.java:385)
    [junit]     at java.lang.ClassLoader.defineClass1(Native Method)
    [junit]     at java.lang.ClassLoader.defineClass(ClassLoader.java:634)
    [junit]     at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
    [junit]     at java.net.URLClassLoader.defineClass(URLClassLoader.java:277)
    [junit]     at java.net.URLClassLoader.access$000(URLClassLoader.java:73)
    [junit]     at java.net.URLClassLoader$1.run(URLClassLoader.java:212)
    [junit]     at java.security.AccessController.doPrivileged(Native Method)
    [junit]     at java.net.URLClassLoader.findClass(URLClassLoader.java:205)
    [junit]     at java.lang.ClassLoader.loadClass(ClassLoader.java:321)
    [junit]     at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:294)
    [junit]     at java.lang.ClassLoader.loadClass(ClassLoader.java:266)
    [junit]     at MandantTest.test(MandantTest.java:10)
    [junit]     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    [junit]     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
    [junit]     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    [junit]     at java.lang.reflect.Method.invoke(Method.java:616)
    [junit]     at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
    [junit]     at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
    [junit]     at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
    [junit]     at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
    [junit]     at org.junit.runners.BlockJUnit4ClassRunner.runNotIgnored(BlockJUnit4ClassRunner.java:79)
    [junit]     at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:71)
    [junit]     at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:49)
    [junit]     at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
    [junit]     at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
    [junit]     at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
    [junit]     at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
    [junit]     at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
    [junit]     at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
    [junit]     at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:541)
    [junit]     at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.launch(JUnitTestRunner.java:1064)
    [junit]     at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.main(JUnitTestRunner.java:923)
    [junit] Caused by: java.lang.IllegalStateException: Missing or invalid stackmap frames.
    [junit]     at org.jacoco.agent.rt.internal_f6710df.core.internal.instr.FrameTracker.assertValidFrames(FrameTracker.java:613)
    [junit]     at org.jacoco.agent.rt.internal_f6710df.core.internal.instr.FrameTracker.pop(FrameTracker.java:602)
    [junit]     at org.jacoco.agent.rt.internal_f6710df.core.internal.instr.FrameTracker.visitVarInsn(FrameTracker.java:386)
    [junit]     at org.jacoco.agent.rt.internal_f6710df.asm.MethodVisitor.visitVarInsn(Unknown Source)
    [junit]     at org.jacoco.agent.rt.internal_f6710df.asm.MethodVisitor.visitVarInsn(Unknown Source)
    [junit]     at org.jacoco.agent.rt.internal_f6710df.asm.tree.VarInsnNode.accept(Unknown Source)
    [junit]     at org.jacoco.agent.rt.internal_f6710df.asm.tree.InsnList.accept(Unknown Source)
    [junit]     at org.jacoco.agent.rt.internal_f6710df.asm.tree.MethodNode.accept(Unknown Source)
    [junit]     at org.jacoco.agent.rt.internal_f6710df.core.internal.flow.ClassProbesAdapter$1.visitEnd(ClassProbesAdapter.java:124)
    [junit]     at org.jacoco.agent.rt.internal_f6710df.asm.ClassReader.b(Unknown Source)
    [junit]     at org.jacoco.agent.rt.internal_f6710df.asm.ClassReader.accept(Unknown Source)
    [junit]     at org.jacoco.agent.rt.internal_f6710df.asm.ClassReader.accept(Unknown Source)
    [junit]     at org.jacoco.agent.rt.internal_f6710df.core.instr.Instrumenter.instrument(Instrumenter.java:74)
    [junit]     at org.jacoco.agent.rt.internal_f6710df.core.instr.Instrumenter.instrument(Instrumenter.java:87)
    [junit]     at org.jacoco.agent.rt.internal_f6710df.CoverageTransformer.transform(CoverageTransformer.java:89)
    [junit]     ... 34 more
","OpenJPA 2.2.0 & 2.2.1, JaCoCo latest from git, Java 6",,,,,,,,,,,,24/Feb/13 21:53;dominik.stadler@gmx.at;TestJaCoCoProblem.zip;https://issues.apache.org/jira/secure/attachment/12570688/TestJaCoCoProblem.zip,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-02-25 18:40:08.324,,,no_permission,,,,,,,,,,,314311,,,Tue Mar 05 19:53:52 UTC 2013,,,,,,,0|i1i8mf:,314656,,,,,,,,"25/Feb/13 18:40;kwsutter;Could this be related to JIRA https://issues.apache.org/jira/browse/OPENJPA-2298?  Although this issue was discovered in the Java 7 environment, your JaCoCo environment may be doing more class verification (similar to Java 7) and could have stumbled across this condition.","27/Feb/13 12:02;dominik.stadler@gmx.at;I don't know much about the things going on here, but according to https://github.com/jacoco/eclemma/issues/35 my problem is caused by missing stackmap frame information in the .class file, so it is not directly related to the bytecode-instructions, which OPENJPA-2298 seems to relate to...","27/Feb/13 15:50;kwsutter;I should have looked at your jacoco issue #35 a bit closer...  The call stack indicates that you are using Data Nucleus, not Apache OpenJPA.  You'll have to follow up with the Data Nucleus team.  Good luck.","27/Feb/13 19:52;dominik.stadler@gmx.at;No, i am actually using OpenJPA, i just used the reference to The bug as sample what The jacoco Team thinks causes such issues. OpenJPA and data nucleus cause the same problem.",27/Feb/13 20:29;curtisr7;Have you tried running on Java7?,"27/Feb/13 21:42;kwsutter;It would seem that your JoCoCo project is doing more validation of the class files than normal Java 6 runtime processing.  The stackmap issues became apparent when customers moved to the more stringent Java 7.  If you google this topic, you'll find that just all bytecode manipulation utilities (asm, serp, etc) had issues when first running with Java 7.  Java 6 (and previous versions) had been more tolerant of stackmap inconsistencies.  But, that was no longer the case with Java 7.

So, to support Java 7, OpenJPA introduced the use of ASM to clean up our stackmap table entries after Serp did the initial bytecode enhancement.  But, we only do this extra processing when we detect a Java 7 class file.  Thus, Rick's suggestion of trying Java 7 is probably worthwhile.

Also, just to explain the changes in openjpa-2298...  These changes would apply to either Java 6 or Java 7 environments.  But, based on your stated issues, I doubt that this change alone would get you up and running.  You'll probably need the ASM post-processing cleanup of the stackmap tables.","01/Mar/13 15:39;dominik.stadler@gmx.at;Hi, thanks for the comments, I just tried it with Java 7 and with that it runs without any error, so your analysis seems to be correct. I'll do some more testing to see if Java 7 works for the whole project, there are still some open issues in JIRA, hopefully I do not trigger any of those.

BTW, I get the following warning during enhancement, seems the OpenJPA enhancer still does not state that it support Java 7

    warning: Supported source version 'RELEASE_6' from annotation processor 'org.apache.openjpa.persistence.meta.AnnotationProcessor6' less than -source '1.7'
","01/Mar/13 19:47;kwsutter;The annotation processor message you referenced is from the MetaModel code generation that is performed for the Criteria API.  You're right -- that warning looks like it was missed.  Good thing is that it's benign and can be ignored.  If you want to open a child task for this, we can get that cleaned up.  Thanks.",05/Mar/13 17:31;kwsutter;It looks like Pinaki removed the @SupportedSourceVersion annotation via openjpa-2305.  This change is currently only in trunk (2.3.0-SNAPSHOT).  This change removes that warning about only supporting Java 6 source files...,"05/Mar/13 17:34;kwsutter;Hi Dominik,
So, what should we do with this JIRA?  Are you able to move up to Java 7?  Introducing a new dependency (ASM) into older service releases is difficult and not normally looked kindly on by users.  So, we would prefer that you can move up to Java 7.  Java 7 also has several new features and performance improvements, so it should be a worthwhile exercise.  Are you okay with resolving this issue?  Thanks.","05/Mar/13 19:53;dominik.stadler@gmx.at;I am fine with updating to Java 7, Java 6 is out of service now anyway and this was the missing push that gott me started on migratin, therefore setting this to fixed, thanks for the support.",,,,,,,
iSeries DB2 problem with using @GeneratedValue(strategy=GenerationType.IDENTITY),OPENJPA-1853,12478171,Bug,Resolved,OPENJPA,OpenJPA,software,struberg,"Implementation of Java persistence, including the Java Persistence API JSR-220 (JPA 1.0) and JSR-317 (JPA 2.0).",http://openjpa.apache.org,Critical,Fixed,techhusky,atomik,atomik,24/Oct/10 10:27,23/Feb/11 15:24,13/Mar/19 23:09,03/Nov/10 14:00,2.0.0,2.0.1,,,,,,,,,,,,,,,,,,2.1.0,,,,,,,sql,,,,0,,"I get the following error when I try to insert new row to a table that has a ""generated always Identity"" Column.


Exception in thread ""main"" <openjpa-2.0.1-r422266:989424 fatal store error> org.apache.openjpa.persistence.RollbackException: An error occurred attempting to invoke JDBC 3 method.  Your driver or database may not support JDBC 3 features.
	at org.apache.openjpa.persistence.EntityManagerImpl.commit(EntityManagerImpl.java:584)
	at de.meyerwerft.qs.laborpruef.laborprobe.dbaccess.LaborprobeBean.crtTest(LaborprobeBean.java:38)
	at de.meyerwerft.test.JSE_Client.jlm_run(JSE_Client.java:35)
	at de.meyerwerft.test.JSE_Client.<init>(JSE_Client.java:10)
	at de.meyerwerft.test.JSE_Client.main(JSE_Client.java:17)
Caused by: <openjpa-2.0.1-r422266:989424 nonfatal general error> org.apache.openjpa.persistence.PersistenceException: An error occurred attempting to invoke JDBC 3 method.  Your driver or database may not support JDBC 3 features.
	at org.apache.openjpa.kernel.BrokerImpl.beforeCompletion(BrokerImpl.java:1963)
	at org.apache.openjpa.kernel.LocalManagedRuntime.commit(LocalManagedRuntime.java:81)
	at org.apache.openjpa.kernel.BrokerImpl.commit(BrokerImpl.java:1479)
	at org.apache.openjpa.kernel.DelegatingBroker.commit(DelegatingBroker.java:925)
	at org.apache.openjpa.persistence.EntityManagerImpl.commit(EntityManagerImpl.java:560)
	... 4 more
Caused by: org.apache.commons.lang.exception.NestableRuntimeException: An error occurred attempting to invoke JDBC 3 method.  Your driver or database may not support JDBC 3 features.
	at org.apache.openjpa.lib.jdbc.DelegatingConnection.invokeJDBC3(DelegatingConnection.java:597)
	at org.apache.openjpa.lib.jdbc.DelegatingConnection.prepareStatement(DelegatingConnection.java:577)
	at org.apache.openjpa.lib.jdbc.LoggingConnectionDecorator$LoggingConnection.prepareStatement(LoggingConnectionDecorator.java:571)
	at org.apache.openjpa.lib.jdbc.DelegatingConnection.prepareStatement(DelegatingConnection.java:571)
	at org.apache.openjpa.lib.jdbc.DelegatingConnection.prepareStatement(DelegatingConnection.java:571)
	at org.apache.openjpa.lib.jdbc.DelegatingConnection.prepareStatement(DelegatingConnection.java:563)
	at org.apache.openjpa.jdbc.kernel.PreparedStatementManagerImpl.prepareStatement(PreparedStatementManagerImpl.java:287)
	at org.apache.openjpa.jdbc.kernel.PreparedStatementManagerImpl.flushAndUpdate(PreparedStatementManagerImpl.java:112)
	at org.apache.openjpa.jdbc.kernel.BatchingPreparedStatementManagerImpl.flushAndUpdate(BatchingPreparedStatementManagerImpl.java:81)
	at org.apache.openjpa.jdbc.kernel.PreparedStatementManagerImpl.flushInternal(PreparedStatementManagerImpl.java:99)
	at org.apache.openjpa.jdbc.kernel.PreparedStatementManagerImpl.flush(PreparedStatementManagerImpl.java:87)
	at org.apache.openjpa.jdbc.kernel.ConstraintUpdateManager.flush(ConstraintUpdateManager.java:550)
	at org.apache.openjpa.jdbc.kernel.ConstraintUpdateManager.flush(ConstraintUpdateManager.java:106)
	at org.apache.openjpa.jdbc.kernel.BatchingConstraintUpdateManager.flush(BatchingConstraintUpdateManager.java:59)
	at org.apache.openjpa.jdbc.kernel.AbstractUpdateManager.flush(AbstractUpdateManager.java:103)
	at org.apache.openjpa.jdbc.kernel.AbstractUpdateManager.flush(AbstractUpdateManager.java:76)
	at org.apache.openjpa.jdbc.kernel.JDBCStoreManager.flush(JDBCStoreManager.java:731)
	at org.apache.openjpa.kernel.DelegatingStoreManager.flush(DelegatingStoreManager.java:131)
	at org.apache.openjpa.kernel.BrokerImpl.flush(BrokerImpl.java:2139)
	at org.apache.openjpa.kernel.BrokerImpl.flushSafe(BrokerImpl.java:2037)
	at org.apache.openjpa.kernel.BrokerImpl.beforeCompletion(BrokerImpl.java:1955)
	... 8 more
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.openjpa.lib.jdbc.DelegatingConnection.invokeJDBC3(DelegatingConnection.java:593)
	... 28 more
Caused by: java.sql.SQLException: The driver does not support this function.
	at com.ibm.as400.access.JDError.throwSQLException(JDError.java:415)
	at com.ibm.as400.access.AS400JDBCConnection.prepareStatement(AS400JDBCConnection.java:2210)
	... 33 more



I have the following in persistence.xml
...
<property name=""openjpa.jdbc.DBDictionary"" value=""db2""/> 
<property name=""openjpa.ConnectionDriverName"" value=""com.ibm.as400.access.AS400JDBCDriver""/>
<property name=""openjpa.ConnectionURL"" value=""jdbc:as400://myserver/myschema""/>
...


In Version 1.2.3 this function works fine.


Thank you,
Andreas Tomik","DB2 on IBM iSeries V5R4, jt400.jar (JTOpen)",,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-10-24 14:36:35.202,,,no_permission,,,,,,,,,,,162089,,,Wed Nov 03 14:00:05 UTC 2010,,,,,,,0|i0yt3r:,201185,,,,,,,,"24/Oct/10 14:36;techhusky;Hi Andreas.  I've been looking at what looks to be the same issue - identity column id, iSeries toolbox driver with 2.1.0 snapshot, but haven't yet been able to reproduce it outside of an app server environment.  It looks to be caused by some odd sql getting generated.  If you could post a simple JSE test that would really help things along.","24/Oct/10 16:13;atomik;Hi Jeremy,
i attached a simple JSE Test. I hope this helps you.
Please do not hesitate to contact me if you have any further questions.",24/Oct/10 23:51;techhusky;Thanks so much for the test code.  I'll give it a try and let you know what I find.,"25/Oct/10 13:30;techhusky;Unfortunately, your test ran successfully on my system. The iSeries is at OS level V7R1 though. I'm trying to get access to a V5R4 system. Could you run on your system with toolbox jdbc trace turned on and post the output? There may be some clues in there.  

<property name=""openjpa.ConnectionURL"" value=""jdbc:as400://myserver/myschema;trace=true;toolbox trace=jdbc""/>

In addition, what type of entity enhancement are you using? The javaagent?","25/Oct/10 15:43;techhusky;In OpenJPA 2.x, a JDBC 3.0 enhancement for returning auto generated keys from a prepared statement was enabled by default based upon the JDBC driver level.  I've found that the toolbox driver running against a V5R4 system does not support this functionality on the server side.  This function does exist on the server side on V7R1 (and possibly V6), but only seems to work with the non-XA driver.  That's why I've been having issues only in an app server environment running against a V7R1 server.

The good news is that there's a simple workaround.  Adding this property to your persistence.xml will go back to the ""old way"" of doing business.

<property name=""openjpa.jdbc.DBDictionary"" value=""db2(supportsGetGeneratedKeys=false)""/>

I'll work on a code fix that checks the iSeries version in addition to the JDBC driver level and possibly whether the driver is XA (if that turns out to be a limitation rather than a bug) to determine how this value should be set.","25/Oct/10 20:20;techhusky;Auto generated keys are supported with OS V6R1 and later.  Although, toolbox/JTOpen appears to have a bug in this area when using an XA data source, but it won't affect non-XA users.  The JTOpen developers have been notified of the the XA issue and have been provided a simple test case to reproduce the problem.

A simple change was committed to 2.1.x/trunk under revision 1027250 that reverts back to the OpenJPA 1.x.x method of getting generated ids for V5R4 and prior OS levels.",03/Nov/10 14:00;techhusky;Please verify that this problem is corrected in trunk/2.1.0 as of the noted revision.,,,,,,,,,,,
java.lang.VerifyError thrown when trying to commit entity.,OPENJPA-1790,12473961,Bug,Resolved,OPENJPA,OpenJPA,software,struberg,"Implementation of Java persistence, including the Java Persistence API JSR-220 (JPA 1.0) and JSR-317 (JPA 2.0).",http://openjpa.apache.org,Critical,Fixed,fyrewyld,zhangkf,zhangkf,13/Sep/10 08:30,19/Nov/10 02:17,13/Mar/19 23:09,23/Sep/10 02:21,2.0.1,,,,,,,,,,,,,,,,,,,2.0.2,2.1.0,,,,,,kernel,,,,0,,"Hi,

Now I am working on OpenJPA support for Apache Shindig 2.0. There is a test case to insert some entity into backend derby database, but every time when running to commint(), there  is such error thrown, unfortunately I am not to work it out, and ask here if this is a known issue? Thanks.

I searched an issue past of: https://issues.apache.org/jira/browse/OPENJPA-91, and tried to put all openjpa related jars into jdk/jre/lib/ext, but it does not work for.

In DOS cmd line or in eclipse IDE, I run the junit test case with jdk 1.6, both  returning same error:

-------------------------------------------------------------------------------
Test set: org.apache.shindig.social.opensocial.jpa.spi.PersonServiceDbTest
-------------------------------------------------------------------------------
Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.391 sec <<< FAILURE!
org.apache.shindig.social.opensocial.jpa.spi.PersonServiceDbTest  Time elapsed: 0.438 sec  <<< ERROR!
java.lang.VerifyError: (class: org/apache/openjpa/util/java$util$concurrent$ConcurrentHashMap$11$proxy, method: remove signature: (Ljava/lang/Object;Ljava/lang/Object;)Z) Expecting to find integer on stack
	at java.lang.Class.forName0(Native Method)
	at java.lang.Class.forName(Class.java:247)
	at org.apache.openjpa.util.GeneratedClasses.loadBCClass(GeneratedClasses.java:67)
	at org.apache.openjpa.util.ProxyManagerImpl.getFactoryProxyMap(ProxyManagerImpl.java:382)
	at org.apache.openjpa.util.ProxyManagerImpl.newMapProxy(ProxyManagerImpl.java:207)
	at org.apache.openjpa.kernel.StateManagerImpl.newFieldProxy(StateManagerImpl.java:1829)
	at org.apache.openjpa.kernel.SingleFieldManager.proxy(SingleFieldManager.java:117)
	at org.apache.openjpa.kernel.StateManagerImpl.proxyFields(StateManagerImpl.java:2896)
	at org.apache.openjpa.kernel.PNonTransState.initialize(PNonTransState.java:45)
	at org.apache.openjpa.kernel.StateManagerImpl.setPCState(StateManagerImpl.java:287)
	at org.apache.openjpa.kernel.StateManagerImpl.commit(StateManagerImpl.java:1128)
	at org.apache.openjpa.kernel.BrokerImpl.endTransaction(BrokerImpl.java:2383)
	at org.apache.openjpa.kernel.BrokerImpl.afterCompletion(BrokerImpl.java:1975)
	at org.apache.openjpa.kernel.LocalManagedRuntime.commit(LocalManagedRuntime.java:94)
	at org.apache.openjpa.kernel.BrokerImpl.commit(BrokerImpl.java:1479)
	at org.apache.openjpa.kernel.DelegatingBroker.commit(DelegatingBroker.java:925)
	at org.apache.openjpa.persistence.EntityManagerImpl.commit(EntityManagerImpl.java:560)
	at org.apache.shindig.social.opensocial.jpa.spi.SpiDatabaseBootstrap.bootstrapDatabase(SpiDatabaseBootstrap.java:186)
	at org.apache.shindig.social.opensocial.jpa.spi.SpiDatabaseBootstrap.init(SpiDatabaseBootstrap.java:85)
	at org.apache.shindig.social.opensocial.jpa.spi.PersonServiceDbTest.setup(PersonServiceDbTest.java:71)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:27)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
	at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:62)
	at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:140)
	at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:127)
	at org.apache.maven.surefire.Surefire.run(Surefire.java:177)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:345)
	at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:1009)

","JDK1.6 u20, maven 2.2.1, Apache Shindig 2.0, OpenJPA 2.0.1",,86400,86400,,0%,86400,86400,,,,,11/Nov/10 16:17;jpaheath;OPENJPA-1790-2.0.x.patch;https://issues.apache.org/jira/secure/attachment/12459364/OPENJPA-1790-2.0.x.patch,14/Sep/10 06:20;zhangkf;PersonServiceDbTest.java;https://issues.apache.org/jira/secure/attachment/12454522/PersonServiceDbTest.java,14/Sep/10 06:20;zhangkf;SpiDatabaseBootstrap.java;https://issues.apache.org/jira/secure/attachment/12454523/SpiDatabaseBootstrap.java,21/Sep/10 19:01;fyrewyld;concurrent_junit.patch;https://issues.apache.org/jira/secure/attachment/12455178/concurrent_junit.patch,22/Sep/10 20:47;fyrewyld;openjpa-1790.patch;https://issues.apache.org/jira/secure/attachment/12455307/openjpa-1790.patch,14/Sep/10 06:20;zhangkf;persistence.xml;https://issues.apache.org/jira/secure/attachment/12454524/persistence.xml,13/Sep/10 08:34;zhangkf;pom.xml;https://issues.apache.org/jira/secure/attachment/12454437/pom.xml,7.0,,,,,,,,,,,,,,,,,,,2010-09-13 13:12:10.381,,,no_permission,,,,,,,,,,,162032,,,Thu Nov 11 16:17:55 UTC 2010,,,,,,,0|i0yt47:,201187,,,,,,,,"13/Sep/10 08:34;zhangkf;I pasted the pom.xml here, would you pls check if I used the maven plugin of openjpa and dependency correctly?

What I am running on is simple environment, just from cmd line of IDE, to run a junit test.

And just let me know if I missed anything. Thanks.","13/Sep/10 13:12;drwoods;Try removing these 2 depends -
  <dependency>
    <groupId>org.eclipse.persistence</groupId>
    <artifactId>eclipselink</artifactId>
    <version>1.0</version>
  </dependency>
  <dependency>
    <groupId>commons-dbcp</groupId>
    <artifactId>commons-dbcp</artifactId>
    <version>1.2.2</version>
  </dependency>
And replacing this OpenJPA depend -
  <dependency>
    <groupId>org.apache.openjpa</groupId>
    <artifactId>openjpa-persistence-jdbc</artifactId>
    <version>2.0.1</version>
  </dependency>
with the following -
  <dependency>
    <groupId>org.apache.openjpa</groupId>
    <artifactId>openjpa-all</artifactId>
    <version>2.0.1</version>
  </dependency>

Also, can you attach your persistence.xml and/or point me to a svn location of the SPI code that you are testing, so we can look at the entities?


","14/Sep/10 06:20;zhangkf;Hi Donald,

Thanks for so quick response. I attached files. I modified the pom.xml and changed according to your comment, but I still can see the error.

The files are from http://svn.apache.org/repos/asf/shindig/trunk/java/samples/src/test/java/org/apache/shindig/social/opensocial/jpa/spi/, but I made some changes locally to make sure openjpa work.

What I am testing is PersonServiceDBTest.java, but in its setup() method before running own test methods, it will call init() method on SpiDatabaseBootstrap. In this init() method, VerifyError was thrown when commit() called, in the last line of init() method.

If I comment out lines from ""entityManager.persist(buildCanonicalActivity(""canonical"", ""1""));"" to ""entityManager.persist(applicationDataMap5);"" in method bootstrapDatabase() in SpiDatabaseBootstrap, there will be no such VerifyError then.

Thanks a lot for helping to look at this, and please let me know if I need provide more details.","20/Sep/10 08:08;zhangkf;Could anybody please check this problem, such as ideas of under what situation this type of error would be thrown?","21/Sep/10 19:01;fyrewyld;Junit that reproduces the reported failure, commentary to follow.","21/Sep/10 19:11;fyrewyld;It turns out that the problem is with the way OpenJPA extends a Map type to implement Proxy and ProxyMap during runtime with the ProxyManagerImpl when the type of the map is a ConcurrentMap type, in Kai's case it is ConcurrentHashMap.  ConcurrentMap defines a method ""boolean replace(Object, Object)"" -- the very method that is in the reported Exception:

java.lang.VerifyError: (class: org/apache/openjpa/util/java$util$concurrent$ConcurrentHashMap$11$proxy, method: remove signature: (Ljava/lang/Object;Ljava/lang/Object;)Z) Expecting to find integer on stack 

After researching more on the VerifyError, it looks like the version of remove (remove methods are considered to be setter methods by  ProxyManagerImpl.isSetter()) is wrappered by ProxyManagerImpl.proxySetter().  And while it looks like proxySetter() is taking care to ensure the return type is preserved, the VerifyError suggests the bytecode is trying to return an object of type integer instead.

I've reproduced this problem with a junit test, all that needed to be done was to initialize a relationship field of type Map with a ConcurrentHashMap, and the Exception surfaced during transaction commit:

  <testcase time=""0.158"" classname=""org.apache.openjpa.persistence.relations.TestConcurrentMap"" name=""testConcurrentMap001"">
    <error message=""(class: org/apache/openjpa/util/java$util$concurrent$ConcurrentHashMap$1$proxy, method: remove signature: (Ljava/lang/Object;Ljava/lang/Object;)Z) Expecting to find integer on stack"" type=""java.lang.VerifyError"">java.lang.VerifyError: (class: org/apache/openjpa/util/java$util$concurrent$ConcurrentHashMap$1$proxy, method: remove signature: (Ljava/lang/Object;Ljava/lang/Object;)Z) Expecting to find integer on stack
	at java.lang.Class.forName0(Native Method)
	at java.lang.Class.forName(Class.java:247)
	at org.apache.openjpa.util.GeneratedClasses.loadBCClass(GeneratedClasses.java:71)
	at org.apache.openjpa.util.ProxyManagerImpl.getFactoryProxyMap(ProxyManagerImpl.java:382)
	at org.apache.openjpa.util.ProxyManagerImpl.newMapProxy(ProxyManagerImpl.java:207)
	at org.apache.openjpa.kernel.StateManagerImpl.newFieldProxy(StateManagerImpl.java:1829)
	at org.apache.openjpa.kernel.SingleFieldManager.proxy(SingleFieldManager.java:117)
	at org.apache.openjpa.kernel.StateManagerImpl.proxyFields(StateManagerImpl.java:2896)
	at org.apache.openjpa.kernel.PNonTransState.initialize(PNonTransState.java:45)
	at org.apache.openjpa.kernel.StateManagerImpl.setPCState(StateManagerImpl.java:287)
	at org.apache.openjpa.kernel.StateManagerImpl.commit(StateManagerImpl.java:1128)
	at org.apache.openjpa.kernel.BrokerImpl.endTransaction(BrokerImpl.java:2383)
	at org.apache.openjpa.kernel.BrokerImpl.afterCompletion(BrokerImpl.java:1975)
	at org.apache.openjpa.kernel.LocalManagedRuntime.commit(LocalManagedRuntime.java:94)
	at org.apache.openjpa.kernel.BrokerImpl.commit(BrokerImpl.java:1479)
	at org.apache.openjpa.kernel.DelegatingBroker.commit(DelegatingBroker.java:925)
	at org.apache.openjpa.persistence.EntityManagerImpl.commit(EntityManagerImpl.java:560)
	at org.apache.openjpa.persistence.relations.TestConcurrentMap.testConcurrentMap001(TestConcurrentMap.java:46)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at junit.framework.TestCase.runTest(TestCase.java:154)
	at org.apache.openjpa.persistence.test.AbstractPersistenceTestCase.runTest(AbstractPersistenceTestCase.java:516)

This junit should provide a baseline with developing a fix for this problem.",22/Sep/10 20:47;fyrewyld;Proposed patch for OJ-1790.,22/Sep/10 21:03;drwoods;+1,"23/Sep/10 02:20;mikedd;Nice patch Joe, I've committed it to trunk (revision 1000292)","26/Sep/10 01:31;zhangkf;I tried the new jar with patch of Joe, it works for me, the VerifyError is gone.

Thank you Joe and everyone.","11/Nov/10 16:17;jpaheath;I'm providing a patch for 2.0.x which is basically a back port of the changes from trunk.

Thanks,

Heath",,,,,,,
Indices specified using javax.persistence.Index annotation are not being created,OPENJPA-2777,13218858,Bug,Resolved,OPENJPA,OpenJPA,software,struberg,"Implementation of Java persistence, including the Java Persistence API JSR-220 (JPA 1.0) and JSR-317 (JPA 2.0).",http://openjpa.apache.org,Major,Fixed,solomax,solomax,solomax,01/Mar/19 10:40,05/Mar/19 13:45,13/Mar/19 23:09,05/Mar/19 13:45,3.0.0,,,,,,,,,,,,,,,,,,,3.0.1,,,,,,,jdbc,,,,0,,"Indices specified using javax.persistence.Index annotation are not being created

i saw a similar example but was hoping the index could be automatically 
created.  some indexes are automatically created but seeingly not others.
i tried the annotations as in the example and the index is never 
created.  here is what i have added to my class
@Entity
@Table(name = ""billentry"", indexes = {
         @Index(name = ""I_BLLNTRY_SECTION"", columnList = 
""BILLSECTION_ID"", unique = false),
         @Index(name = ""I_BLLNTRY_BILLTEMPLATEENTRY"", columnList = 
""btentryid"", unique = false) })
public class BillEntry implements Serializable {
     private static final long serialVersionUID = 1L;


     @Id
     @GeneratedValue(strategy = GenerationType.IDENTITY)
     private Long id;


     @Version
     private Long version;


     @ManyToOne
     private BillSection billSection;


     @ManyToOne
     @Column(name = ""btentryid"")
     private BillTemplateEntry billTemplateEntry;


Mail thread: https://markmail.org/message/c4tom6hwjt7temur",,"solomax commented on pull request #39: [OPENJPA-2777] Javax index
URL: https://github.com/apache/openjpa/pull/39
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;05/Mar/19 13:44;githubbot;600",,0,600,,,0,600,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2019-03-03 08:06:30.674,,,no_permission,,,,,,,,,,,9223372036854775807,,,Tue Mar 05 13:44:55 UTC 2019,,,,,,,0|z00860:,9223372036854775807,,,,,,,,"03/Mar/19 08:06;jira-bot;Commit d1e4c110e60a1eae335de3c3a26ad639f0cfde0f in openjpa's branch refs/heads/javax-index from Maxim Solodovnik
[ https://gitbox.apache.org/repos/asf?p=openjpa.git;h=d1e4c11 ]

[OPENJPA-2777] messages are corrected
","05/Mar/19 13:44;jira-bot;Commit cb20dd6b95a07fe87bf46a2c33580322d0b11cd0 in openjpa's branch refs/heads/master from Maxim Solodovnik
[ https://gitbox.apache.org/repos/asf?p=openjpa.git;h=cb20dd6 ]

[OPENJPA-2777] Javax index (#39)

[OPENJPA-2777] javax.persistense.Index can be used on Table annotation
","05/Mar/19 13:44;jira-bot;Commit cb20dd6b95a07fe87bf46a2c33580322d0b11cd0 in openjpa's branch refs/heads/master from Maxim Solodovnik
[ https://gitbox.apache.org/repos/asf?p=openjpa.git;h=cb20dd6 ]

[OPENJPA-2777] Javax index (#39)

[OPENJPA-2777] javax.persistense.Index can be used on Table annotation
",,,,,,,,,,,,,,,
Subquery parameters are incorrectly assigned,OPENJPA-2733,13150873,Bug,Resolved,OPENJPA,OpenJPA,software,struberg,"Implementation of Java persistence, including the Java Persistence API JSR-220 (JPA 1.0) and JSR-317 (JPA 2.0).",http://openjpa.apache.org,Major,Fixed,struberg,pveselov,pveselov,09/Apr/18 00:34,14/Feb/19 14:14,13/Mar/19 23:09,14/Feb/19 14:14,2.4.2,,,,,,,,,,,,,,,,,,,3.0.1,,,,,,,kernel,,,,0,,"When parameters are used both outside and inside a sub-query, the parameter values are overwritten by other parameters.

I did write up a test case, and provided *a* patch, but this patch has problems with replacing where clauses. Once a where clause is replaced, in either the root, or a sub query, params have to be cleaned up, but that doesn't clear out the _where property, which means they will not be rebuilt. But there are no tests that would catch that so far. That probably should be an extension of TestEdit#testEditParameterizedPredicateRemoved

",,,,,,,,,,,,,09/Apr/18 00:34;pveselov;1.diff;https://issues.apache.org/jira/secure/attachment/12918006/1.diff,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2019-02-14 14:09:55.089,,,no_permission,,,,,,,,,,,9223372036854775807,,,Thu Feb 14 14:14:13 UTC 2019,,,Patch Available,,,,0|i3sa87:,9223372036854775807,,,,,,,,"14/Feb/19 14:09;jira-bot;Commit 80736f6e9d38dfb180c89cec6cb2916341165a5c in openjpa's branch refs/heads/master from Mark Struberg
[ https://gitbox.apache.org/repos/asf?p=openjpa.git;h=80736f6 ]

OPENJPA-2733 subquery parameters are incorrectly assigned

patch submitted by Pawel Veselov - thanks!
","14/Feb/19 14:09;jira-bot;Commit 0e4ec5b392b978c4515b26c60e485f2b610de94f in openjpa's branch refs/heads/master from Mark Struberg
[ https://gitbox.apache.org/repos/asf?p=openjpa.git;h=0e4ec5b ]

OPENJPA-2733 fix param index.

Also handle the case if the same Param gets registered multiple times.
This eg happens in case of a Criteria Subquery having the same parameter name.
","14/Feb/19 14:13;struberg;Hi [~pveselov]! This was a pretty hard nut - thanks for providing a good unit test and the starting bits!
I've finished the logic and also catched more edge cases.
Could you please test whether this is now good enough for you?",14/Feb/19 14:14;struberg;Patch assigned and improved - thanks Pawel!,,,,,,,,,,,,,,
list of h2 reserved words is incomplete,OPENJPA-2772,13213478,Bug,Resolved,OPENJPA,OpenJPA,software,struberg,"Implementation of Java persistence, including the Java Persistence API JSR-220 (JPA 1.0) and JSR-317 (JPA 2.0).",http://openjpa.apache.org,Major,Fixed,struberg,struberg,struberg,02/Feb/19 12:15,02/Feb/19 12:55,13/Mar/19 23:09,02/Feb/19 12:49,3.0.0,,,,,,,,,,,,,,,,,,,3.0.1,,,,,,,jdbc,,,,0,,"Our list of reserved words for h2 is not complete. 
I'll update it with the latest information from http://h2database.com/html/advanced.html#compatibility",,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2019-02-02 12:55:46.24,,,no_permission,,,,,,,,,,,9223372036854775807,,,Sat Feb 02 12:55:46 UTC 2019,,,,,,,0|yi0lgw:,9223372036854775807,,,,,,,,"02/Feb/19 12:55;jira-bot;Commit 11863ed9327c70420c2a537dafa380d3fee7b548 in openjpa's branch refs/heads/master from Mark Struberg
[ https://gitbox.apache.org/repos/asf?p=openjpa.git;h=11863ed ]

OPENJPA-2772 update list of h2 resorved words
",,,,,,,,,,,,,,,,,
"It seems like h2 'unlimited' is not ""LIMIT 0"" but rather ""LIMIT -1""",OPENJPA-2771,13213471,Bug,Resolved,OPENJPA,OpenJPA,software,struberg,"Implementation of Java persistence, including the Java Persistence API JSR-220 (JPA 1.0) and JSR-317 (JPA 2.0).",http://openjpa.apache.org,Major,Fixed,struberg,struberg,struberg,02/Feb/19 09:21,02/Feb/19 11:10,13/Mar/19 23:09,02/Feb/19 11:10,3.0.0,,,,,,,,,,,,,,,,,,,3.0.1,,,,,,,jdbc,,,,0,,"Our H2Dictionary currently sets {{LIMIT 0 OFFSET 3}} when a {{Query#setFirstResult(3)}} is set without any {{setMaxResults}}. 
This results in zero entries in the result list.
When I set {{LIMIT -1}, then all works fine.

According to the h2database documentation at http://h2database.com/html/grammar.html we can assume the followint:
{quote}LIMIT and FETCH FIRST/NEXT ROW(S) ONLY limits the number of rows returned by the query (no limit if null or smaller than zero). OFFSET specified how many rows to skip{quote}

If I read this correctly then we can skip the whole LIMIT clause if no {{setMaxResults}} was set.",,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2019-02-02 11:09:49.771,,,no_permission,,,,,,,,,,,9223372036854775807,,,Sat Feb 02 11:09:49 UTC 2019,,,,,,,0|yi0lfc:,9223372036854775807,,,,,,,,"02/Feb/19 11:09;jira-bot;Commit 43aa42ccb533212db9acf1a238d24172b18dc513 in openjpa's branch refs/heads/master from Mark Struberg
[ https://gitbox.apache.org/repos/asf?p=openjpa.git;h=43aa42c ]

OPENJPA-2771 fix h2 'unlimited' LIMIT case

With h2 one should omit the LIMIT section to get all results.
Our old LIMIT 0 did effectively prune the whole result list to zero entries.
",,,,,,,,,,,,,,,,,
false boolean literal doesn't work,OPENJPA-2770,13211132,Bug,Resolved,OPENJPA,OpenJPA,software,struberg,"Implementation of Java persistence, including the Java Persistence API JSR-220 (JPA 1.0) and JSR-317 (JPA 2.0).",http://openjpa.apache.org,Major,Fixed,romain.manni-bucau,pveselov,pveselov,22/Jan/19 23:30,23/Jan/19 09:22,13/Mar/19 23:09,23/Jan/19 09:22,2.4.2,2.4.3,3.0.0,,,,,,,,,,,,,,,,,3.0.1,,,,,,,kernel,,,,0,,"Using CriteriaBuilder.literal(Boolean.FALSE) in expressions leads to literal value being treated as TRUE instead.

See https://github.com/veselov/Standalone-JPA-Test-Demo/tree/OPENJPA-2770 for test case.
I've also attached the extracted branch here.
Running
{noformat}
$ mvn -Dderby.language.logStatementText=true test
{noformat}
shows the problem. Though the cb.literal(Boolean.FALSE) is use in cb.equal(), the query is:
{noformat}
Wed Jan 23 00:24:51 CET 2019 Thread[main,5,main] (XID = 283), (SESSIONID = 11), (DATABASE = memory:jpaDemoDB), (DRDAID = null), Executing prepared statement: SELECT t0.user_id, t0.about, t0.firstName, t0.homePage, t0.lastName, t0.userName, t0.woo FROM Person t0 WHERE (t0.woo = ?) :End prepared statement with 1 parameters begin parameter #1: true :end parameter
{noformat}

I changed versions to 2.4.3 and 3.0.0, the problem is still there.
",,,,,,,,,,,,,22/Jan/19 23:36;pveselov;Standalone-JPA-Test-Demo-OPENJPA-2770.zip;https://issues.apache.org/jira/secure/attachment/12955877/Standalone-JPA-Test-Demo-OPENJPA-2770.zip,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2019-01-23 08:34:08.215,,,no_permission,,,,,,,,,,,9223372036854775807,,,Wed Jan 23 09:22:07 UTC 2019,,,,,,,0|yi071s:,9223372036854775807,,,,,,,,23/Jan/19 08:34;romain.manni-bucau;Will work on that issue. However I'd like to mention a trivial workaround is to use isTrue/isFalse for booleans instead of literals.,"23/Jan/19 09:22;jira-bot;Commit 9e222652dff1d959a2252cf96e5abb48a11dd7fd in openjpa's branch refs/heads/master from Romain Manni-Bucau
[ https://gitbox.apache.org/repos/asf?p=openjpa.git;h=9e22265 ]

OPENJPA-2770 ensure equal(xxx, literal(boolean)) works in criteria builder
",,,,,,,,,,,,,,,,
XMLStore SAXParser doesn't distinguish between element and extent,OPENJPA-2768,13208761,Bug,Resolved,OPENJPA,OpenJPA,software,struberg,"Implementation of Java persistence, including the Java Persistence API JSR-220 (JPA 1.0) and JSR-317 (JPA 2.0).",http://openjpa.apache.org,Major,Fixed,struberg,struberg,struberg,10/Jan/19 11:28,14/Jan/19 08:05,13/Mar/19 23:09,10/Jan/19 12:29,3.0.0,,,,,,,,,,,,,,,,,,,3.0.1,,,,,,,xml store,,,,0,,"OpenJPA contains a simple XMLStore backend to store entities also as XML.

Sadly the reader doesn't distinguish between the {{<element>}} and {{extent}} tags which might lead to NullPointerExceptions.",,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2019-01-10 12:31:28.821,,,no_permission,,,,,,,,,,,9223372036854775807,,,Mon Jan 14 08:05:08 UTC 2019,,,,,,,0|u00pd4:,9223372036854775807,,,,,,,,"10/Jan/19 12:31;jira-bot;Commit c1d9fd3c62ab40a893749ac3338b3ed20ddd6567 in openjpa's branch refs/heads/master from Mark Struberg
[ https://gitbox.apache.org/repos/asf?p=openjpa.git;h=c1d9fd3 ]

OPENJPA-2768 fix XMLStore xml handling

the SAXParser handler didn't properly distinguish between 'extent' and 'element'
","14/Jan/19 08:05;jira-bot;Commit 40d19ebc6cf56ab60e6adaf22044162bbed5c8a6 in openjpa's branch refs/heads/master from Mark Struberg
[ https://gitbox.apache.org/repos/asf?p=openjpa.git;h=40d19eb ]

OPENJPA-2768 delete xmlstore test db between runs.

This did lead to errors when running the tests multiple times.
",,,,,,,,,,,,,,,,
Map path expression tests behave random,OPENJPA-2764,13207236,Bug,Resolved,OPENJPA,OpenJPA,software,struberg,"Implementation of Java persistence, including the Java Persistence API JSR-220 (JPA 1.0) and JSR-317 (JPA 2.0).",http://openjpa.apache.org,Major,Fixed,struberg,struberg,struberg,02/Jan/19 08:57,02/Jan/19 08:59,13/Mar/19 23:09,02/Jan/19 08:59,3.0.0,,,,,,,,,,,,,,,,,,,3.0.1,,,,,,,build / infrastructure,,,,0,,"Most of the tests under org.apache.openjpa.persistence.jdbc.maps behave random when they test against a real database.

Those tests capture the JQPL path navigation for Maps (Covered in the spec in 4.4.4.1).
{code}
public class @Entity Division {
  private Map<Division, VicePresident> orga;
}
{code}

Such structures can be navitated via KEY(), VALUE(), and ENTRY().

Our tests did create 2 Divisions with 2 orga entries. And using {{query.getResultList().get(0)}} to verify the results. And this was exactly the problem. using {{get(0)}} leads to random behaviour with real databases. On the default Derby database it didn't make any difference as the result from the index query was always in the order in which the data got written to disk. But this is not guaranteed for performance tuned databases like PostgreSQL, MariaDB and MySQL. In those cases we got random errors.",,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2019-01-02 08:59:09.722,,,no_permission,,,,,,,,,,,9223372036854775807,,,Wed Jan 02 08:59:09 UTC 2019,,,,,,,0|u00fyw:,9223372036854775807,,,,,,,,"02/Jan/19 08:59;jira-bot;Commit 260042ba5184f1f415f2f0975e3449f13611b84a in openjpa's branch refs/heads/master from Mark Struberg
[ https://gitbox.apache.org/repos/asf?p=openjpa.git;h=260042b ]

OPENJPA-2764 fix tests with random behaviour

The behaviour was random due to the undefined order in which
real databases return data.
",,,,,,,,,,,,,,,,,
SchemaTool fails with MySQL,OPENJPA-2742,13169066,Bug,Resolved,OPENJPA,OpenJPA,software,struberg,"Implementation of Java persistence, including the Java Persistence API JSR-220 (JPA 1.0) and JSR-317 (JPA 2.0).",http://openjpa.apache.org,Major,Fixed,ilgrosso,ilgrosso,ilgrosso,29/Jun/18 05:36,23/Nov/18 16:41,13/Mar/19 23:09,02/Jul/18 06:11,2.4.3,3.0.0,,,,,,,,,,,,,,,,,,2.4.4,3.0.1,,,,,,jdbc,,,,0,mysql,"When running the SchemaTool for db initialization, an exception is reported:
{code:java}
MySQLNonTransientConnectionException: Can't call rollback when autocommit=true
{code}
No tables are created, and the OpenJPA initialization fails.

The problem is originated in SchemaTool#executeSQL where a rollback is issued before any DDL statement is effectively run, and this causes troubles to MySQL.

Prior to version 8, the MySQL JDBC Driver used to provide a property {{relaxAutocommit=true}} to append to the JDBC URL, which could be leveraged as workaround; now [this option was removed|https://dev.mysql.com/doc/connector-j/8.0/en/connector-j-properties-changed.html].",,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,9223372036854775807,,,Mon Jul 02 06:11:19 UTC 2018,,,,,,,0|i3vdc7:,9223372036854775807,,,,,,,,29/Jun/18 05:37;ilgrosso;Proposed patch: https://paste.apache.org/qPBh,"02/Jul/18 06:11;ilgrosso;trunk: http://svn.apache.org/viewvc?rev=1834818&view=rev
2_4_X: http://svn.apache.org/viewvc?rev=1834819&view=rev",,,,,,,,,,,,,,,,
upgrade to xbean-asm7 to support Java11,OPENJPA-2757,13197604,Bug,Resolved,OPENJPA,OpenJPA,software,struberg,"Implementation of Java persistence, including the Java Persistence API JSR-220 (JPA 1.0) and JSR-317 (JPA 2.0).",http://openjpa.apache.org,Major,Fixed,struberg,struberg,struberg,10/Nov/18 20:15,16/Nov/18 06:18,13/Mar/19 23:09,10/Nov/18 20:33,3.0.0,,,,,,,,,,,,,,,,,,,3.0.1,,,,,,,,,,,0,,Upgrade to xbean-asm7 for Java11 support,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-11-10 20:33:37.162,,,no_permission,,,,,,,,,,,9223372036854775807,,,Fri Nov 16 06:18:09 UTC 2018,,,,,,,0|s00cwg:,9223372036854775807,,,,,,,,"10/Nov/18 20:33;jira-bot;Commit 39bde81aa2fe6f5ac8348bf4a6a39669b67dbe7d in openjpa's branch refs/heads/master from [~struberg]
[ https://gitbox.apache.org/repos/asf?p=openjpa.git;h=39bde81 ]

OPENJPA-2757 upgrade to xbean-asm7 for Java7 support
","16/Nov/18 06:18;jira-bot;Commit 39bde81aa2fe6f5ac8348bf4a6a39669b67dbe7d in openjpa's branch refs/heads/OPENJPA-2754-maxTotal from [~struberg]
[ https://gitbox.apache.org/repos/asf?p=openjpa.git;h=39bde81 ]

OPENJPA-2757 upgrade to xbean-asm7 for Java7 support
",,,,,,,,,,,,,,,,
PostgreSQL requires escaping of search strings in all versions,OPENJPA-2756,13197602,Bug,Resolved,OPENJPA,OpenJPA,software,struberg,"Implementation of Java persistence, including the Java Persistence API JSR-220 (JPA 1.0) and JSR-317 (JPA 2.0).",http://openjpa.apache.org,Major,Fixed,struberg,struberg,struberg,10/Nov/18 19:46,16/Nov/18 06:18,13/Mar/19 23:09,10/Nov/18 19:53,3.0.0,,,,,,,,,,,,,,,,,,,3.0.1,,,,,,,jdbc,,,,0,,"Our {{PostgresDictionary}} did enable the flag {{requiresSearchStringEscapeForLike}} only for PostgreSQL versions <= 9.0. 
But this is essentially still needed. Just tested it with PostgreSQL-11.",,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-11-10 19:49:23.403,,,no_permission,,,,,,,,,,,9223372036854775807,,,Fri Nov 16 06:18:07 UTC 2018,,,,,,,0|s00cw0:,9223372036854775807,,,,,,,,"10/Nov/18 19:49;jira-bot;Commit db6f6b642203d60ae1fa7576715e180c6bbe6081 in openjpa's branch refs/heads/master from [~struberg]
[ https://gitbox.apache.org/repos/asf?p=openjpa.git;h=db6f6b6 ]

OPENJPA-2756 escape search strings for all Postgres versions

Can be disabled via config by explicitly setting the
DBDictionary to requiresSearchStringEscapeForLike=false
via persistence.xml for example.
","10/Nov/18 19:53;struberg;If this escaping is not welcome - e.g. when the escaping is already performed in the application code as a workaround for the bug - then the following can be used to disable it back to the old behaviour:

{noformat}
<persistence-unit name=""TestUnit"">
        <properties>
            <property name=""openjpa.jdbc.DBDictionary"" value=""(requiresSearchStringEscapeForLike=false)"" />
...
{noformat}
","16/Nov/18 06:18;jira-bot;Commit db6f6b642203d60ae1fa7576715e180c6bbe6081 in openjpa's branch refs/heads/OPENJPA-2754-maxTotal from [~struberg]
[ https://gitbox.apache.org/repos/asf?p=openjpa.git;h=db6f6b6 ]

OPENJPA-2756 escape search strings for all Postgres versions

Can be disabled via config by explicitly setting the
DBDictionary to requiresSearchStringEscapeForLike=false
via persistence.xml for example.
",,,,,,,,,,,,,,,
TINY/MEDIUM/LONG TEXT fields for MySQL and MariaDB are not supported,OPENJPA-2567,12771750,Bug,Resolved,OPENJPA,OpenJPA,software,struberg,"Implementation of Java persistence, including the Java Persistence API JSR-220 (JPA 1.0) and JSR-317 (JPA 2.0).",http://openjpa.apache.org,Major,Fixed,ilgrosso,solomax,solomax,02/Feb/15 15:35,06/Nov/18 09:19,13/Mar/19 23:09,03/Sep/18 12:01,2.3.0,,,,,,,,,,,,,,,,,,,2.4.4,3.0.1,,,,,,jdbc,,,,0,,"All string fields annotated with @Lob are being created in MySQL DB as ""TEXT"" no matter of length

Attached patch fixes this for trunk",,,,,,,,,,,,,17/Jul/18 04:51;solomax;text_fields_3.patch;https://issues.apache.org/jira/secure/attachment/12931880/text_fields_3.patch,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2018-07-19 11:36:19.124,,,no_permission,,,,,,,,,,,9223372036854775807,,,Tue Nov 06 09:19:28 UTC 2018,,,,,,,0|i252uf:,9223372036854775807,,,,,,,,"19/Jul/18 11:36;ilgrosso;As a workaround, we do use

{code}
org.apache.openjpa.jdbc.sql.MySQLDictionary(blobTypeName=LONGBLOB)
{code}","19/Jul/18 13:04;solomax;Our code should stay database independent, so we are using LOB and byte array :(","27/Aug/18 14:41;githubbot;GitHub user solomax opened a pull request:

    https://github.com/apache/openjpa/pull/18

    [OPENJPA-2567] various MySql text types support is added

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/solomax/openjpa trunk

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/openjpa/pull/18.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #18
    
----
commit 3e8def8eb2e2a7fb7b21791943b1958e1b4603b7
Author: Maxim Solodovnik <solomax666@...>
Date:   2018-08-27T14:40:25Z

    [OPENJPA-2567] various MySql text types support is added

----
","03/Sep/18 11:41;jira-bot;Commit 1839940 from ilgrosso@apache.org in branch 'openjpa/trunk'
[ https://svn.apache.org/r1839940 ]

[OPENJPA-2567] various MySql and MariaDB text types support is added - thanks @solomax - This closes #18","03/Sep/18 11:41;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/openjpa/pull/18
","03/Sep/18 12:00;jira-bot;Commit 1839943 from ilgrosso@apache.org in branch 'openjpa/branches/2.4.x'
[ https://svn.apache.org/r1839943 ]

[OPENJPA-2567] various MySql and MariaDB text types support is added - thanks @solomax","02/Nov/18 09:37;struberg;Folks, I have a question.

I get a test failure in {{testClobColumnType#testDefaultLob}}
{noformat}
Expected :BLOB
Actual   :TEXT
	at org.apache.openjpa.persistence.blob.mysql.TestClobColumnType.testDefaultLob(TestClobColumnType.java:92)
{noformat}

This appears legit to me!
I test with -Ptest-mysql-docker which right now defaults to mysql-5.7.
Which version did you do your tests with?

Afaik a {{@Lob}} on a String leads to TEXT (or TINYTEXT, MEDIUMTEXT, LONGTEXT depending on the {{@Column(length=n)}}).
But only a {{@Lob}} on a byte[] leads to BLOB (or variants depending on the length again).
See https://dev.mysql.com/doc/refman/5.7/en/blob.html","02/Nov/18 09:39;jira-bot;Commit 4bb1caa36dc753057790cb735f7e67ff24b4cef6 in openjpa's branch refs/heads/master from [~struberg]
[ https://gitbox.apache.org/repos/asf?p=openjpa.git;h=4bb1caa ]

OPENJPA-2567 @Lob on String results in TEXT not BLOB
","06/Nov/18 09:19;jira-bot;Commit 4bb1caa36dc753057790cb735f7e67ff24b4cef6 in openjpa's branch refs/heads/OPENJPA-2754-maxTotal from [~struberg]
[ https://gitbox.apache.org/repos/asf?p=openjpa.git;h=4bb1caa ]

OPENJPA-2567 @Lob on String results in TEXT not BLOB
",,,,,,,,,
OpenJPA Karaf feature is not complete,OPENJPA-2746,13179257,Bug,Resolved,OPENJPA,OpenJPA,software,struberg,"Implementation of Java persistence, including the Java Persistence API JSR-220 (JPA 1.0) and JSR-317 (JPA 2.0).",http://openjpa.apache.org,Major,Fixed,,jbonofre,jbonofre,16/Aug/18 05:23,22/Oct/18 18:32,13/Mar/19 23:09,16/Aug/18 06:35,,,,,,,,,,,,,,,,,,,,3.0.1,,,,,,,osgi,,,,0,,The OpenJPA features is not fully complete. The xbean asm6 shaded bundle is missing and also the provider capability.,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-08-16 05:25:59.59,,,no_permission,,,,,,,,,,,9223372036854775807,,,Mon Oct 22 18:32:06 UTC 2018,,,,,,,0|i3x3lj:,9223372036854775807,,,,,,,,"16/Aug/18 05:25;githubbot;GitHub user jbonofre opened a pull request:

    https://github.com/apache/openjpa/pull/16

    [OPENJPA-2746] Fix xbean asm bundle and add required capability

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/jbonofre/openjpa OPENJPA-2746

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/openjpa/pull/16.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #16
    
----
commit 4734a3528133a4802d7c7d703be233a2d40d612b
Author: Jean-Baptiste Onofré <jbonofre@...>
Date:   2018-08-16T05:25:21Z

    [OPENJPA-2746] Fix xbean asm bundle and add required capability

----
","16/Aug/18 06:35;jira-bot;Commit 1838151 from rmannibucau@apache.org in branch 'openjpa/trunk'
[ https://svn.apache.org/r1838151 ]

OPENJPA-2746 patch from jbonofre, OpenJPA Karaf feature is not complete, missing xbean asm 6 and provider capabilities","16/Aug/18 06:35;romain.manni-bucau;Thanks JB, applied.","22/Oct/18 18:32;githubbot;solomax commented on issue #16: [OPENJPA-2746] Fix xbean asm bundle and add required capability
URL: https://github.com/apache/openjpa/pull/16#issuecomment-431812493
 
 
   This PR seems to be merged

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","22/Oct/18 18:32;githubbot;solomax closed pull request #16: [OPENJPA-2746] Fix xbean asm bundle and add required capability
URL: https://github.com/apache/openjpa/pull/16
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/openjpa-features/src/main/feature/feature.xml b/openjpa-features/src/main/feature/feature.xml
index b9221d6d4..959f64635 100644
--- a/openjpa-features/src/main/feature/feature.xml
+++ b/openjpa-features/src/main/feature/feature.xml
@@ -28,8 +28,11 @@
 		<bundle dependency=""true"">mvn:commons-dbcp/commons-dbcp/1.4</bundle>
 		<bundle dependency=""true"">mvn:commons-collections/commons-collections/3.2.2</bundle>
         <bundle dependency=""true"">mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.serp/1.14.1_1</bundle>
-        <bundle dependency=""true"">mvn:org.apache.xbean/xbean-asm5-shaded/4.3</bundle>
+        <bundle dependency=""true"">mvn:org.apache.xbean/xbean-asm6-shaded/4.9</bundle>
         <bundle>mvn:org.apache.openjpa/openjpa/${project.version}</bundle>
+        <capability>
+            osgi.service;objectClass=javax.persistence.spi.PersistenceProvider;effective:=active;javax.persistence.provider=org.apache.openjpa.persistence.PersistenceProviderImpl
+        </capability>
     </feature>
 
 </features>


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
",,,,,,,,,,,,,
Deadlock Potential with ORM XML Processing,OPENJPA-1993,12506220,Bug,Resolved,OPENJPA,OpenJPA,software,struberg,"Implementation of Java persistence, including the Java Persistence API JSR-220 (JPA 1.0) and JSR-317 (JPA 2.0).",http://openjpa.apache.org,Major,Fixed,dazeydev,fyrewyld,fyrewyld,04/May/11 20:12,16/Aug/18 06:51,13/Mar/19 23:09,15/Aug/18 20:46,1.0.0,1.0.1,1.0.2,1.0.3,1.0.4,1.2.0,1.2.1,1.2.2,2.0.0,2.0.1,2.1.0,,,,,,,,,1.2.3,2.0.2,2.1.2,2.2.0,2.3.0,2.4.4,3.0.1,kernel,,,,0,,"There exists the potential for deadlock with the ORM XML processing function.  In an environment
with multiple threads (such as an application server), operations (such as creating a new
EntityManagerFactory or transformation Classloader activity) can lead to a point where
a Xerces SAX Parser (acquired by XMLFactory) is constituted and executed.  Xerces calls 
Thread.currentThread().getContextClassloader() during its execution to construct the
SAXParser (via ObjectFactory.createObject()).  This means that within the call to Xerces,
a ClassLoader lock will be attempted on the Thread's ContextClassLoader.  If there is already
a lock with a ClassLoader higher in the heirarchy, and another thread with a lock on the
same ContextClassLoader that is waiting to acquire a lock on a higher level ClassLoader, then
a deadlock will occur.

A solution to this problem is to temporally set the Thread's ContextClassLoader at the
point where XML APIs are invoked (such as in XMLFactory, XMLMetaDataParser) to the
ClassLoader that loaded the OpenJPA implementation classes.  This will prevent Xerces from
starting with a lower level classloader and avoid this deadlock potential.",,,,,,,,,,,,,15/Aug/18 16:33;dazeydev;XMLMetaDataParser.patch;https://issues.apache.org/jira/secure/attachment/12935712/XMLMetaDataParser.patch,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2018-08-15 16:33:11.188,,,no_permission,,,,,,,,,,,2334,,,Thu Aug 16 06:51:37 UTC 2018,,,,,,,0|i0z5mf:,203213,,,,,,,,"04/May/11 22:37;fyrewyld;Checked in the fix for this issue.  To preserve original behavior, the ContextClassLoader override will only take place if the following OpenJPA Compatibility option is set:

openjpa.Compatibility=""OverrideContextClassloader=true""",15/Aug/18 16:33;dazeydev;It appears we missed changing _overrideContextClassloader to 'true' in `org.apache.openjpa.lib.meta.XMLMetaDataParser` like it was changed in 'org.apache.openjpa.conf.Compatibility',"15/Aug/18 18:27;jira-bot;Commit 1838131 from dazeydev@apache.org in branch 'openjpa/branches/2.2.x'
[ https://svn.apache.org/r1838131 ]

OPENJPA-1993: Deadlock Potential with ORM XML Processing","16/Aug/18 06:51;jira-bot;Commit 1838153 from ilgrosso@apache.org in branch 'openjpa/branches/2.4.x'
[ https://svn.apache.org/r1838153 ]

[OPENJPA-1993] Backport the fix to 2.4.x","16/Aug/18 06:51;jira-bot;Commit 1838154 from ilgrosso@apache.org in branch 'openjpa/trunk'
[ https://svn.apache.org/r1838154 ]

[OPENJPA-1993] Backport the fix to trunk",,,,,,,,,,,,,
Sporadic NullPointerException occurs under heavy load when QuerySQLCache is enabled.,OPENJPA-2646,12981420,Bug,Resolved,OPENJPA,OpenJPA,software,struberg,"Implementation of Java persistence, including the Java Persistence API JSR-220 (JPA 1.0) and JSR-317 (JPA 2.0).",http://openjpa.apache.org,Major,Fixed,dazeydev,jpaheath,jpaheath,21/Jun/16 17:20,14/Aug/18 15:09,13/Mar/19 23:09,14/May/18 22:27,2.2.3,2.4.1,,,,,,,,,,,,,,,,,,2.2.3,2.4.3,3.0.0,,,,,query,,,,1,,"Hello!  This is a follow up/continuation of JIRA OPENJPA-2609.  I will assume the reader slogged through that one as some of the info in that JIRA is very relevant here.  The fix for that JIRA was necessary to plug a hole in PreparedQuery (PQ) cache.  The fix did reduce my customer's occurrence of the exception by around 90%.  However, they still saw the reported exception and in addition they see following exception:

Caused by: java.lang.NullPointerException
at org.apache.openjpa.persistence.QueryImpl.preExecute(QueryImpl.java:557)
at org.apache.openjpa.persistence.QueryImpl.execute(QueryImpl.java:285)
at org.apache.openjpa.persistence.QueryImpl.getResultList(QueryImpl.java:302)
at com.ibm.ws.persistence.QueryImpl.getResultList(QueryImpl.java:118)
.....

 

As I mentioned in OJ2609, I was not able to exactly recreate the issue.  I described some of the strategic break points I had to use, and the assumptions I had to make.  Alas, I was able to recreate this issue with a multi threaded test, and specific query string (among other things)!  This JIRA will take the reader on another journey through the laborious process I went through to recreate the issue, and finally track down the very, I mean very, narrow window where the CCEx or NPE can occur.  So, settle in and lets start our fun adventure!  

First, let me give an overview of the issue and look at the code to illustrate how the exceptions can occur.  After that I'll dive into the recreate.  
The exception can occur when an item (a query string mapped to a PQ in my case) in the CacheMap is moved from the  ""soft"" cache to the main cache.  Please view the CacheMap code to see what I mean by the main cache (see variable 'cacheMap') and what I mean by the soft cache (see variable 'softMap').  When an item exists in the soft cache, and a thread requests that item, the item is moved out of the soft cache and put in the main cache.  If the main cache is full, another item is kicked out of the main cache.  The item which is removed from the main cache is put into a soft cache.  As this move from soft cache to main cache occurs, there is a narrow window where the item appears to not be in the caches at all.  In other words, if a (reader) thread asks (CacheMap.get) for item X, where another (writer) thread is moving item X from the soft cache to the main cache, the reader thread will not see item X and think the item is not cached.
To see this better, lets look at CacheMap.get:    

 public Object get(Object key) {
        readLock();
        try {
            // Check the main map first
            Object  val = cacheMap.get(key);
            if (val == null) {
                // if we find the key in the soft map, move it back into
                // the primary map
                val = softMap.get(key);
                if (val != null){
                    put(key, val);
                }else{
                    val = pinnedMap.get(key);
                }
            }
           
            return val;
        } finally {
            readUnlock();
        }
    }


As you can see, we first look in the main cache for a given key (in my scenario the key is a query string).  If it is not found, we look in the soft map.  If it is in the soft map, we call the 'put' method.  The 'put' method is going to take the key out of the soft map and put it in the main cache map.  Let me paste the relevant parts of the put method (I'll leave it to the reader to view the method in its entirety):

public Object put(Object key, Object value) {
        writeLock();
        try {
........
            // otherwise, put the value into the map and clear it from the
            // soft map
            val = put(cacheMap, key, value);
            if (val == null) {
                val = remove(softMap, key);
........
        } finally {
            writeUnlock();
        }


As you can see here, this 'put' method calls to another 'put' method which simply puts the key/value into the specified map.  If the map didn't already contain a value for the given key (which I think should always be the case for the cacheMap, or at least for my scenario), null will be returned.  When null is returned, remove is called to remove the key/value from the soft map.  
Given this, lets look closer at the 'get' method with concurrency in mind.  Take the case where two threads enter the 'get' method at the same time.  Next, assume both threads are moving lock step and they both call 'cacheMap.get' with the same key, and assume the key is not in the main cache.  So at this time both threads will have a 'val' of null.  Next assume one thread gets focus (so the other thread suspends for a moment) and it calls the soft map with the key.  Assume the soft map contains the key.  In this case the thread will move (via the call to 'put') the key/value from the soft cache to the main cache.  This thread will then have a non-null 'val' and will return.  Next assume the suspended thread gets focus and continues.  Since its 'val' is null, it will ask the soft cache for the key.  However, we know that the other thread just moved the key/value from the soft to main cache!  As such, the thread will not find the key in the soft cache and will return a 'val' of null!!!  This is at the heart of the issue!  That is, one thread thinks there is nothing in the cache for their key!  
The observant reader may notice that the 'get' and 'put' have a 'readLock' and 'writeLock', respectively, which attempts to get a ReentrantLock.  So one would think that there is proper read/write access of the caches to avoid such situations.  However, one must look at the read/writeLock methods.  If you look at the readLock method, you can see that it locks using a '_readLock' variable.  This variable is null for the CacheMap instance created by the PreparedQueryCacheImpl.  Therefore, the readLock method is a no-op.  This means that a reader thread can do a read at any time without any locking concerns.  

Now that we know the heart of the issue (i.e. one thread received an incorrect cache miss), lets look at the implication of this incorrect cache miss.  What I haven't stated is where the threads are at when they call 'get' on the cache.  This is easier to see when looking at the attached test.  Basically though one thread is in PreparedQueryCacheImpl.register, specifically this line:

PreparedQuery cached = get(id);

Here is the stack from my test which I will describe:

PreparedQueryCacheImpl.get(String) line: 193	
PreparedQueryCacheImpl.register(String, Query, FetchConfiguration) line: 92	
QueryImpl<X>.preExecute(Map) line: 554	

If you look at the 'register' method, you can see that if the PreparedQuery is not found in the cache (i.e. 'get(id)' returns null), one will be created and an attempt made to put it into the cache.  If you look at  PreparedQueryCacheImpl.cache, you can see a request is made a second time to see if the value is in the cache.  More than likely this time the value will be found in the cache, in which case true is returned.  If not, false is returned.  Either way, it doesn't matter if true or false is returned.  To see why, look at org.apache.openjpa.persistence.QueryImpl.preExecute.  This is the code which has called PreparedQueryCacheImpl.register (see above stack).  Again, this might be more clear when looking at the provided test in the debugger.  You can see in 'org.apache.openjpa.persistence.QueryImpl.preExecute' that if anything other than null is returned from 'register', the code that calls 
PreparedQuery.reparametrize is skipped!  This is at the heart of the issue.  To understand why, you need to go back to JIRA OPENJPA-2609 and understand the part about PreparedSQLStoreQuery$PreparedSQLExecutor, or understand the fact that a PreparedSQLStoreQuery$PreparedSQLExecutor is the executor. That is, the threads involved here (again, easier to see in the provided test) are using a PreparedSQLStoreQuery$PreparedSQLExecutor.  Given this the parameter must be reparametrize, in other words the parameter needs to be converted to its parameter index (an int).  Because this is skipped, we see the CCEx when trying to convert a string parameter to an expected Integer.  That is, when you look at this line in org.apache.openjpa.kernel.QueryImpl.execute:

StoreQuery.Executor ex = (isInMemory(operation))

The next couple lines below this is where the CCEx occurs, because the parameters have not been converted.  Note that when we are dealing with a 'ExpressionStoreQuery$DataStoreExecutor' (i.e. the very first time a query is executed - not cached - or caching is disabled), the reparamaterization doesn't need to occur because an ''ExpressionStoreQuery$DataStoreExecutor' expects a string parameters, rather than a paramater (int) index.  If you run with the debug module I provide (see below) I add debug to print the 'executor' making is a little easier to see when each of these two executors are used.

Now, that describes the CCEx, but I've said nothing about the NPE.  Well, if you followed the above, as I'll explain, the NPE is very easy to see.  Again, just like the CCEx stack, the NPE stack is in the org.apache.openjpa.persistence.QueryImpl.preExecute method.  Just as was the case above for the CCEx, this method goes to PreparedQueryCacheImpl.register.  This time though, the 'register' returns null, meaning the PQ is already in the cache.  A few lines after the 'register' call, we see these lines:

PreparedQuery pq = _em.getPreparedQuery(_id);
    if (pq.isInitialized()) {

The code is going back to the cache for the actual PQ.  Using the same ""cache miss"" scenario as described above, a null PQ will be returned.....obviously when we call pq.isInitialized() on a null, an NPE will occur!
While this JIRA describes one way to cause the CCEx, I feel there are other holes that could cause the CCEx, or other exceptions.  For example, if you look at 'org.apache.openjpa.persistence.QueryImpl.ignorePreparedQuery()', you can see that it goes to the cache and if an entry is not found, it returns without doing the recompile.  I see a scenario where this is a problem.  That is, taking a look once again at 'QueryImpl.preExecute'.  Before the call to 'PreparedQueryCacheImpl.register' there is a test for null parameters.  If there is a null parameter, the 'ignorePreparedQuery()' method is called.  If you step into this method you can see that a call is made to the cache.  If we go through the same ""cache miss"" scenario, we will see that an ""ignore"" is not performed (by ""ignore"" it appears the Query is recompiled and in so doing the 'PreparedSQLStoreQuery$PreparedSQLExecutor' would be removed and instead a 'ExpressionStoreQuery$DataStoreExecutor' used).  When the ""cache miss"" occurs and the ""ignore"" not performed, we can see that yet again the call to PreparedQuery.reparametrize is skipped, thus leading to the same CCEx.  I think we need to fix the case where a ""cache miss"" could occur in CacheMap, or look at all the cases where the cache is called and account for the possibility of a ""cache miss"".  The former is likely the best options.

Finally, let me describe the test I've created and attached.  It is named PreparedQueryCacheTest.java and uses the provided entity (MyEntity.java).  This test can be ran as a stand alone JSE JUnit test.  To execute it simply point your classpath to the OpenJPA snapshot jar of your choice.  You can use a simple persistence.xml file (no properties are necessary).  To make it much easier for the test to recreate the issue, you will need to edit the PreparedQueryCacheImpl.java class.  Therefore this does assume the user can edit and recompile the OpenJPA code.  The user should change the CacheMap in PreparedQueryCacheImpl to:

_delegate = new CacheMap(false,2);

from:

_delegate = new CacheMap();

Again, doing this makes it far more likely the issue will occur and is a necessity when running the debug test.  If you look at the test there is a test method to run when running in a debugger, and a test method to run to automatically recreate the exception.  Each test method is commented with enough text to explain how to recreate the exception.  Especially the debug test, the comments in this method detail exactly where to add break points and the necessary flow to recreate the issue in a debugger.  With my test you'll see a CCEx like this:

Thread (Thread-32): Caught the following exception: <openjpa-2.2.3-SNAPSHOT-r422266:1737410 nonfatal user error> org.apache.openjpa.persistence.ArgumentException: Failed to execute query ""select o from MyEntity o where o.comments = :mrn and o.id = 1"". Check the query syntax for correctness. See nested exception for details.
  With cause: java.lang.ClassCastException: java.lang.String cannot be cast to java.lang.Integer


In some cases you may see the NPE reported in the beginning of the JIRA.  However, the CCEx occurs more often than the NPE.  

In addition to the test, I've attached a debug module which has system println's to help demonstrate the issue.  The debug module is named PreparedQueryTest.debug. 

Thanks,

Heath Thomann",,,,,,,,,,,,,21/Jun/16 18:35;jpaheath;MyEntity.java;https://issues.apache.org/jira/secure/attachment/12812262/MyEntity.java,04/May/18 20:15;dazeydev;OPENJPA-2646-2.2.x.patch;https://issues.apache.org/jira/secure/attachment/12922104/OPENJPA-2646-2.2.x.patch,14/Aug/18 14:31;dazeydev;Perf_Regression.patch;https://issues.apache.org/jira/secure/attachment/12935556/Perf_Regression.patch,21/Jun/16 18:35;jpaheath;PreparedQueryCacheTest.java;https://issues.apache.org/jira/secure/attachment/12812263/PreparedQueryCacheTest.java,21/Jun/16 18:35;jpaheath;PreparedQueryTest.debug;https://issues.apache.org/jira/secure/attachment/12812261/PreparedQueryTest.debug,,,5.0,,,,,,,,,,,,,,,,,,,2018-05-01 15:52:13.178,,,no_permission,,,,,,,,,,,9223372036854775807,,,Tue Aug 14 15:09:28 UTC 2018,,,,,,,0|i2ztnz:,9223372036854775807,,,,,,,,"21/Jun/16 18:35;jpaheath;Attaching a JSE JUnit test and necessary entity.  Also attaching a .debug file which can be applied as a patch.  When applied, it changes the cache size in PreparedQueryCacheImpl which allows the issue to occur more often.  In addition, the .debug file adds debug statements which help demonstrate how the issue occurs.

Thanks,

Heath Thomann ","01/May/18 15:52;dazeydev;Hello!

After further investigation into this issue that Heath provided extensive investigation (thanks for that by the way!), I have found another issue that needs to be addressed.This new issue revolves around the ""overflow"" strategy being employed by the CachMap. Let me see if I can explain the situation as well as Heath:   

The story starts with how the CacheMap is setup to strategically balance between a hard cache ('cacheMap') and a soft cache ('softMap'). When the hard cache reaches its maximum size, this strategy is there to shift a random value from the hard cache to the soft cache (and when the soft cache gets full, just evict something and provide a warning that it's happening). However, there is a bit of a problem with timing and locking that makes the events of 1) remove from the hard cache and 2) put into the soft cache leave a gap in time where the value is not in either Map! This leads to the same NullPointerException that Heath was describing as well.

To take a look at the issue in the code, here is the first part: The put() implementation for ConcurrentHashMap:

org.apache.openjpa.lib.util.concurrent.ConcurrentHashMap.put(Object key, Object value)

{code:java}
     public Object put(Object key, Object value) {
        Object k = maskNull(key);
        int hash = hash(k);
        synchronized (this) {
            int i = hash & (table.length - 1);

            for (Entry e = table[i]; e != null; e = e.next) {
                if (e.hash == hash && eq(k, e.key)) {
                    Object oldValue = e.value;
                    e.value = value;
                    return oldValue;
                }
            }

            if (maxSize != Integer.MAX_VALUE)
                removeOverflow(maxSize - 1);
            table[i] = createEntry(hash, k, value, table[i]);
            if (size++ >= threshold) resize(2 * table.length);
        }
        return null;
    }
{code}

The portion that is of interest here is the call to {code}removeOverflow(maxSize - 1){code}
This call is made when the object to be inserted into this map is completely new. This makes sense since this is a map. If the key already exists, the backing size of the map doesn't actually change and nothing needs to be evicted. However, when a new key is introduced and the maxSize is not set for an unlimited size (MAX_VALUE), then we remove the overflow. So lets take a look at that implementation:

org.apache.openjpa.lib.util.concurrent.ConcurrentHashMap.removeOverflow(int maxSize)
{code:java}
    private void removeOverflow(int maxSize) {
        while (size > maxSize) {
            Map.Entry entry = removeRandom();
            if (entry == null)
                break;
            overflowRemoved(entry.getKey(), entry.getValue());
        }
    }
{code}

Observe here how we first call the method removeRandom(), then as long as a value was actually removed, we call a method called overflowRemoved(). This sequencing is the key to the issue. The method removeRandom() is pretty straight forward in that it finds a random index in the backing array and removes it. One thing that is special about removeRandom is that it uses synchronization! This is good! While the value is being removed, other threads should be blocked from accessing the map (assuming they are also using synchronization which is doubtful). However, after calling removeRandom(), the synchronization is released and now we call the method overflowRemoved()...

This overflowRemoved() method is a bit more complex. The default implementation of this method actually does notthing; it's empty. However, in CacheMap, when creating our ConcurrentHashMap, we override this specific method, providing the following implementation:

org.apache.openjpa.lib.util.concurrent.ConcurrentHashMap.removeOverflow(int maxSize)
{code:java}

    public CacheMap(boolean lru, int max, int size, float load,
        int concurrencyLevel) {
        ...
        cacheMap = new ConcurrentHashMap(size, load) {
                public void overflowRemoved(Object key, Object value) {
                    cacheMapOverflowRemoved(key, value);
                }
            };
        ...
    }

    protected void cacheMapOverflowRemoved(Object key, Object value) {
        if (softMap.size() < softMap.getMaxSize())
            put(softMap, key, value);
        else
            entryRemoved(key, value, true);
    }
{code}

So, what this means is that when the overflow is removed from the hard cache, there is a brief period in time where the entry exists in neither the hard nor the soft cache. Since non-LRU maps do not seem to maintain readLocks (as described in Heath's analysis) then there is nothing preventing a thread from trying to read during this interval of overflow migration and finding that the value is null. This in fact is the root cause of the NullPointerException Heath analyzed above:

org.apache.openjpa.persistence.QueryImpl.preExecute(Map params)
{code:java}
    private boolean preExecute(Map params) {
        ...
        //cache read might find the value and return that the _id is registered/cached
        Boolean registered = cache.register(_id, _query, fetch);
        boolean alreadyCached = (registered == null);
        String lang = _query.getLanguage();
        QueryStatistics<String> stats = cache.getStatistics();
        if (alreadyCached && LANG_PREPARED_SQL.equals(lang)) {
            //Now the query is being randomly evicted by some other thread
            //This means we could read here, but the value is in between caches, causing a miss
            PreparedQuery pq = _em.getPreparedQuery(_id);
            if (pq.isInitialized()) {
        ...
    }
{code}

I believe there are two solutions to this issue. Either 1) rewrite the migration code to sequence hard -> soft cache migration so that there is no time when neither cache contains the query, or 2) implement proper synchronization where write locks block read locks since the root of the issue is allowing dirty reads while a write is occurring.

I am partial to #2 since this design, while possibly worse for performance, offers better synchronization for all reads/writes. It is possible that other issues are present in this implementation and I believe it is safer to default with an implementation that offers proper synchronization instead of having to code around the problem.",07/May/18 18:38;fyrewyld;Reviewed.  Change looks good to me.,"08/May/18 21:27;jira-bot;Commit 1831209 from [~dazeydev] in branch 'openjpa/branches/2.2.x'
[ https://svn.apache.org/r1831209 ]

OPENJPA-2646: Sporadic NullPointerException and ClassCastException caused by query cache misses in multithreaded environments.",09/May/18 06:38;ilgrosso;[~dazeydev] can the same fix be applied to 2.4.x?,"14/May/18 15:02;jira-bot;Commit 1831578 from [~dazeydev] in branch 'openjpa/branches/2.4.x'
[ https://svn.apache.org/r1831578 ]

OPENJPA-2646: Sporadic NullPointerException and ClassCastException caused by query cache misses in multithreaded environments.","14/May/18 20:58;dazeydev;There is a small test bug that I uncovered running on tests on trunk. It seems that since my test reuses the same EMF as another existing cache, I need to make sure the cache gets cleared for the other test since that test checks the query statistics. On 2.2.x, apparently the test execution order was different so it didn't show up as an issue.","14/May/18 22:11;jira-bot;Commit 1831594 from [~dazeydev] in branch 'openjpa/branches/2.2.x'
[ https://svn.apache.org/r1831594 ]

OPENJPA-2646: Fixing test bug to clear cache from other tests","14/May/18 22:20;jira-bot;Commit 1831595 from [~dazeydev] in branch 'openjpa/branches/2.4.x'
[ https://svn.apache.org/r1831595 ]

OPENJPA-2646: Fixing test bug to clear cache from other tests","14/May/18 22:25;jira-bot;Commit 1831596 from [~dazeydev] in branch 'openjpa/trunk'
[ https://svn.apache.org/r1831596 ]

OPENJPA-2646: Sporadic NullPointerException and ClassCastException caused by query cache misses in multithreaded environments.","15/May/18 05:58;ilgrosso; Thanks [~dazeydev], I have added 3.0.0 since you have also fixed the trunk.","06/Jun/18 16:40;cristof;[~dazeydev], checked the source of CacheMap.java and noticed that on trunk and 2.2.x, the implementation of readLock() calls _readLock.lock(), but on 2.4.x, it's calling _readLock.unlock(). It was intended or a typo?","06/Jun/18 16:44;cristof;[~dazeydev], checked again... The revision of the file I've checked was 1831578, but the current one (1831595) is ok. Sorry.","14/Aug/18 14:38;dazeydev;We were pulling in this change to WebSphere and uncovered a performance regression. I expected some kind of performance hit from this change now that we are removing dirty reads from the QueryCache, but this performance impact was too much. Taking a look at the original change again, there is a typo that is causing the regression. Due to the typo, we are currently writing to the hard cache whenever we read from the hard cache. The logic is supposed to be on the soft cache for propagation reasons. This leads to a write for almost all reads... which works, but is horribly bad for performance. The fix is pretty easy and I attached the change to the JIRA ","14/Aug/18 15:01;jira-bot;Commit 1838025 from dazeydev@apache.org in branch 'openjpa/branches/2.2.x'
[ https://svn.apache.org/r1838025 ]

OPENJPA-2646: Performance Regression fix","14/Aug/18 15:09;jira-bot;Commit 1838026 from dazeydev@apache.org in branch 'openjpa/branches/2.4.x'
[ https://svn.apache.org/r1838026 ]

OPENJPA-2646: Performance Regression Fix","14/Aug/18 15:09;jira-bot;Commit 1838027 from dazeydev@apache.org in branch 'openjpa/trunk'
[ https://svn.apache.org/r1838027 ]

OPENJPA-2646: Performance Regression Fix",
The openjpa.jdbc.Schema no longer overrides orm.xml default,OPENJPA-2704,13085509,Bug,Resolved,OPENJPA,OpenJPA,software,struberg,"Implementation of Java persistence, including the Java Persistence API JSR-220 (JPA 1.0) and JSR-317 (JPA 2.0).",http://openjpa.apache.org,Major,Fixed,dazeydev,dazeydev,dazeydev,07/Jul/17 13:20,03/Jul/18 07:40,13/Mar/19 23:09,02/Jul/18 21:09,2.2.2,,,,,,,,,,,,,,,,,,,2.2.3,2.4.4,3.0.1,,,,,jpa,,,,0,," When both the orm.xml default schema and the 'openjpa.jdbc.Schema' property are set, OpenJPA now prefers the orm.xml default over the property. In the past (2.1.x) the persistence property was preferred over the orm.xml configuration, but that seems to have changed with https://issues.apache.org/jira/browse/OPENJPA-2494. I believe that it makes more sense to have the persistence property overrule the orm.xml mapping file, not the other way around, so I am creating this JIRA to switch the behavior back.",,,,,,,,,,,,,14/Jul/17 16:35;dazeydev;OPENJPA-2704-2.2.x.patch;https://issues.apache.org/jira/secure/attachment/12877338/OPENJPA-2704-2.2.x.patch,20/Jul/17 21:35;dazeydev;OPENJPA-2704-trunk.patch;https://issues.apache.org/jira/secure/attachment/12878254/OPENJPA-2704-trunk.patch,,,,,,2.0,,,,,,,,,,,,,,,,,,,2017-07-14 17:27:20.723,,,no_permission,,,,,,,,,,,9223372036854775807,,,Tue Jul 03 07:40:46 UTC 2018,,,,,,,0|i3h8tj:,9223372036854775807,,,,,,,,14/Jul/17 17:27;fyrewyld;This patch looks good to me.  Nice job!,"20/Jul/17 21:14;jira-bot;Commit 1802534 from [~fyrewyld] in branch 'openjpa/branches/2.2.x'
[ https://svn.apache.org/r1802534 ]

OPENJPA-2704: The openjpa.jdbc.Schema no longer overrides orm.xml default (commit on wdazeys behalf)","02/Jul/18 21:07;jira-bot;Commit 1834900 from dazeydev@apache.org in branch 'openjpa/trunk'
[ https://svn.apache.org/r1834900 ]

OPENJPA-2704: The openjpa.jdbc.Schema no longer overrides orm.xml default","03/Jul/18 07:40;jira-bot;Commit 1834927 from ilgrosso@apache.org in branch 'openjpa/branches/2.4.x'
[ https://svn.apache.org/r1834927 ]

OPENJPA-2704: The openjpa.jdbc.Schema no longer overrides orm.xml default (backport from trunk - rev 1834900",,,,,,,,,,,,,,
OracleDictionary should use non Deprecated method of empty_lob,OPENJPA-2691,13049729,Bug,Resolved,OPENJPA,OpenJPA,software,struberg,"Implementation of Java persistence, including the Java Persistence API JSR-220 (JPA 1.0) and JSR-317 (JPA 2.0).",http://openjpa.apache.org,Major,Fixed,struberg,mattrpav,mattrpav,09/Mar/17 19:49,06/Jun/18 19:23,13/Mar/19 23:09,06/Jun/18 16:26,2.4.2,,,,,,,,,,,,,,,,,,,2.4.3,3.0.0,,,,,,,,,,0,,"Note:
oracle.sql.CLOB.empty_clob() method is deprecated. 

Should use:
oracle.sql.CLOB.getEmptyCLOB() instead

Reference: http://download.oracle.com/otn_hosted_doc/jdeveloper/905/jdbc-javadoc/oracle/sql/CLOB.html",,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-06-06 16:23:22.034,,,no_permission,,,,,,,,,,,9223372036854775807,,,Wed Jun 06 19:23:38 UTC 2018,,,,,,,0|i3b767:,9223372036854775807,,,,,,,,"06/Jun/18 16:23;jira-bot;Commit 1833055 from struberg@apache.org in branch 'openjpa/branches/2.4.x'
[ https://svn.apache.org/r1833055 ]

OPENJPA-2690 OPENJPA-2691 modern Oracle LOB handling

ported over the fix from cschneider from trunk.
Thanks to Matt Pavlovich (apacheId mattrpav) for the report!","06/Jun/18 16:26;struberg;[~cschneider] did already fix this afaict. I've now also ported it over to 2.4.3.

Thanks for the report!","06/Jun/18 19:23;jira-bot;Commit 1833076 from struberg@apache.org in branch 'openjpa/branches/2.4.x'
[ https://svn.apache.org/r1833076 ]

OPENJPA-2690 OPENJPA-2691 modern Oracle LOB handling

ported over the fix from cschneider from trunk.
Thanks to Matt Pavlovich (apacheId mattrpav) for the report!

apparently I picked up the wrong file in my previous commit",,,,,,,,,,,,,,,
Update OSGi Import-Package to support Oracle CLOB/BLOB,OPENJPA-2690,13049689,Bug,Resolved,OPENJPA,OpenJPA,software,struberg,"Implementation of Java persistence, including the Java Persistence API JSR-220 (JPA 1.0) and JSR-317 (JPA 2.0).",http://openjpa.apache.org,Major,Fixed,chris@die-schneider.net,mattrpav,mattrpav,09/Mar/17 18:02,06/Jun/18 19:23,13/Mar/19 23:09,06/Jun/18 16:18,2.4.2,,,,,,,,,,,,,,,,,,,2.4.3,3.0.0,,,,,,,,,,0,,"When openjpa is running in an OSGi environment (Karaf 2.4.0) and all packages not being imported properly may result in the oracleClob_empty_lob_Method being set to null, a NPE will occur when trying to persist an entity with a NULL CLOB column.

getEmptyClob() (and probably getEmtpyBlob as well) should detect for oracleClob_empty_lob_Method being set to NULL before attempting to invoke the method, or just return the EMPTY_CLOB constant.

{noformat}
 private Clob getEmptyClob()
        throws SQLException {
        if (EMPTY_CLOB != null)
            return EMPTY_CLOB;
        try {
            return EMPTY_CLOB = (Clob) oracleClob_empty_lob_Method.invoke(null, new Object[0]);
        } catch (Exception e) {
            throw new SQLException(e.getMessage());
        }
    }
{noformat}

Reference: 

During constructor of OracleDictionary.. this may return null:

{noformat}
private Method getMethodByReflection(String className, String methodName, Class<?>... paramTypes) {
        try {
            return Class.forName(className,true,
                    AccessController.doPrivileged(J2DoPrivHelper
                            .getContextClassLoaderAction())).
                    getMethod(methodName, paramTypes);
        }
        catch (Exception e) {
            // all fine
        }

        return null;
    }
{noformat}",,,,,,,,,,,OPENJPA-2691,,10/Mar/17 20:28;mattrpav;OPENJPA-2691.patch;https://issues.apache.org/jira/secure/attachment/12857388/OPENJPA-2691.patch,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2017-03-11 18:20:03.225,,,no_permission,,,,,,,,,,,9223372036854775807,,,Wed Jun 06 19:23:36 UTC 2018,,,,,,,0|i3b6xb:,9223372036854775807,,,,,,,,"09/Mar/17 19:44;mattrpav;Note: It appears that the reflection method is not using an OSGi-safe/aware classloader for loading classes. The bundle in question is properly importing oracle.sql and the oracle.sql.CLOB class is available.

The root exception is captured below.

(For both CLOB and BLOB)
{noformat}
java.lang.ClassNotFoundException: oracle.sql.CLOB
	at java.net.URLClassLoader.findClass(URLClassLoader.java:381)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
	at java.lang.Class.forName0(Native Method)
	at java.lang.Class.forName(Class.java:348)
	at org.apache.openjpa.jdbc.sql.OracleDictionary.getMethodByReflection(OracleDictionary.java:252)
	at org.apache.openjpa.jdbc.sql.OracleDictionary.<init>(OracleDictionary.java:244)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at java.lang.Class.newInstance(Class.java:442)
	at org.apache.openjpa.lib.util.J2DoPrivHelper$11.run(J2DoPrivHelper.java:373)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.apache.openjpa.jdbc.sql.DBDictionaryFactory.newDBDictionary(DBDictionaryFactory.java:161)
	at org.apache.openjpa.jdbc.sql.DBDictionaryFactory.newDBDictionary(DBDictionaryFactory.java:106)
	at org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl.getDBDictionaryInstance(JDBCConfigurationImpl.java:604)
	at org.apache.openjpa.jdbc.meta.MappingRepository.endConfiguration(MappingRepository.java:1520)
	at org.apache.openjpa.lib.conf.Configurations.configureInstance(Configurations.java:535)
	at org.apache.openjpa.lib.conf.Configurations.configureInstance(Configurations.java:460)
	at org.apache.openjpa.lib.conf.PluginValue.instantiate(PluginValue.java:121)
	at org.apache.openjpa.conf.MetaDataRepositoryValue.instantiate(MetaDataRepositoryValue.java:68)
	at org.apache.openjpa.lib.conf.ObjectValue.instantiate(ObjectValue.java:83)
	at org.apache.openjpa.conf.OpenJPAConfigurationImpl.newMetaDataRepositoryInstance(OpenJPAConfigurationImpl.java:973)
	at org.apache.openjpa.conf.OpenJPAConfigurationImpl.getMetaDataRepositoryInstance(OpenJPAConfigurationImpl.java:964)
	at org.apache.openjpa.kernel.AbstractBrokerFactory.makeReadOnly(AbstractBrokerFactory.java:642)
	at org.apache.openjpa.kernel.AbstractBrokerFactory.newBroker(AbstractBrokerFactory.java:202)
	at org.apache.openjpa.kernel.DelegatingBrokerFactory.newBroker(DelegatingBrokerFactory.java:154)
	at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:226)
	at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:153)
	at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:59)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.aries.jpa.container.quiesce.impl.QuiesceEMFHandler.invoke(QuiesceEMFHandler.java:58)
	at com.sun.proxy.$Proxy58.createEntityManager(Unknown Source)
	at Proxy26aafa07_2bfe_4388_a8a1_d85b501fff9b.createEntityManager(Unknown Source)
	at com.mediadriver.camel.tracing.store.CamelTracingStore.init(CamelTracingStore.java:42)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.aries.blueprint.utils.ReflectionUtils.invoke(ReflectionUtils.java:299)
	at org.apache.aries.blueprint.container.BeanRecipe.invoke(BeanRecipe.java:980)
	at org.apache.aries.blueprint.container.BeanRecipe.runBeanProcInit(BeanRecipe.java:736)
	at org.apache.aries.blueprint.container.BeanRecipe.internalCreate2(BeanRecipe.java:848)
	at org.apache.aries.blueprint.container.BeanRecipe.internalCreate(BeanRecipe.java:811)
	at org.apache.aries.blueprint.di.AbstractRecipe$1.call(AbstractRecipe.java:79)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:88)
	at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:247)
	at org.apache.aries.blueprint.container.BlueprintRepository.createAll(BlueprintRepository.java:183)
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.instantiateEagerComponents(BlueprintContainerImpl.java:688)
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:383)
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:270)
	at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:294)
	at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:263)
	at org.apache.aries.blueprint.container.BlueprintExtender.modifiedBundle(BlueprintExtender.java:253)
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:500)
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:433)
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$AbstractTracked.track(BundleHookBundleTracker.java:725)
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.bundleChanged(BundleHookBundleTracker.java:463)
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$BundleEventHook.event(BundleHookBundleTracker.java:422)
	at org.apache.felix.framework.util.SecureAction.invokeBundleEventHook(SecureAction.java:1127)
	at org.apache.felix.framework.util.EventDispatcher.createWhitelistFromHooks(EventDispatcher.java:696)
	at org.apache.felix.framework.util.EventDispatcher.fireBundleEvent(EventDispatcher.java:484)
	at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:4429)
	at org.apache.felix.framework.Felix.startBundle(Felix.java:2100)
	at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:976)
	at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:963)
	at org.apache.karaf.shell.osgi.StartBundle.doExecute(StartBundle.java:37)
	at org.apache.karaf.shell.osgi.BundlesCommand.doExecute(BundlesCommand.java:37)
	at org.apache.karaf.shell.console.OsgiCommandSupport.execute(OsgiCommandSupport.java:38)
	at org.apache.felix.gogo.commands.basic.AbstractCommand.execute(AbstractCommand.java:35)
	at sun.reflect.GeneratedMethodAccessor67.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.aries.proxy.impl.ProxyHandler$1.invoke(ProxyHandler.java:54)
	at org.apache.aries.proxy.impl.ProxyHandler.invoke(ProxyHandler.java:119)
	at org.apache.karaf.shell.console.commands.$BlueprintCommand807606810.execute(Unknown Source)
	at org.apache.felix.gogo.runtime.CommandProxy.execute(CommandProxy.java:78)
	at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:477)
	at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:403)
	at org.apache.felix.gogo.runtime.Pipe.run(Pipe.java:108)
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:183)
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:120)
	at org.apache.felix.gogo.runtime.CommandSessionImpl.execute(CommandSessionImpl.java:92)
	at org.apache.karaf.shell.console.jline.Console.run(Console.java:197)
	at org.apache.karaf.shell.console.jline.DelayedStarted.run(DelayedStarted.java:79)
java.lang.ClassNotFoundException: oracle.sql.BLOB
	at java.net.URLClassLoader.findClass(URLClassLoader.java:381)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
	at java.lang.Class.forName0(Native Method)
	at java.lang.Class.forName(Class.java:348)
	at org.apache.openjpa.jdbc.sql.OracleDictionary.getMethodByReflection(OracleDictionary.java:252)
	at org.apache.openjpa.jdbc.sql.OracleDictionary.<init>(OracleDictionary.java:245)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at java.lang.Class.newInstance(Class.java:442)
	at org.apache.openjpa.lib.util.J2DoPrivHelper$11.run(J2DoPrivHelper.java:373)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.apache.openjpa.jdbc.sql.DBDictionaryFactory.newDBDictionary(DBDictionaryFactory.java:161)
	at org.apache.openjpa.jdbc.sql.DBDictionaryFactory.newDBDictionary(DBDictionaryFactory.java:106)
	at org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl.getDBDictionaryInstance(JDBCConfigurationImpl.java:604)
	at org.apache.openjpa.jdbc.meta.MappingRepository.endConfiguration(MappingRepository.java:1520)
	at org.apache.openjpa.lib.conf.Configurations.configureInstance(Configurations.java:535)
	at org.apache.openjpa.lib.conf.Configurations.configureInstance(Configurations.java:460)
	at org.apache.openjpa.lib.conf.PluginValue.instantiate(PluginValue.java:121)
	at org.apache.openjpa.conf.MetaDataRepositoryValue.instantiate(MetaDataRepositoryValue.java:68)
	at org.apache.openjpa.lib.conf.ObjectValue.instantiate(ObjectValue.java:83)
	at org.apache.openjpa.conf.OpenJPAConfigurationImpl.newMetaDataRepositoryInstance(OpenJPAConfigurationImpl.java:973)
	at org.apache.openjpa.conf.OpenJPAConfigurationImpl.getMetaDataRepositoryInstance(OpenJPAConfigurationImpl.java:964)
	at org.apache.openjpa.kernel.AbstractBrokerFactory.makeReadOnly(AbstractBrokerFactory.java:642)
	at org.apache.openjpa.kernel.AbstractBrokerFactory.newBroker(AbstractBrokerFactory.java:202)
	at org.apache.openjpa.kernel.DelegatingBrokerFactory.newBroker(DelegatingBrokerFactory.java:154)
	at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:226)
	at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:153)
	at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:59)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.aries.jpa.container.quiesce.impl.QuiesceEMFHandler.invoke(QuiesceEMFHandler.java:58)
	at com.sun.proxy.$Proxy58.createEntityManager(Unknown Source)
	at Proxy26aafa07_2bfe_4388_a8a1_d85b501fff9b.createEntityManager(Unknown Source)
	at com.mediadriver.camel.tracing.store.CamelTracingStore.init(CamelTracingStore.java:42)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.aries.blueprint.utils.ReflectionUtils.invoke(ReflectionUtils.java:299)
	at org.apache.aries.blueprint.container.BeanRecipe.invoke(BeanRecipe.java:980)
	at org.apache.aries.blueprint.container.BeanRecipe.runBeanProcInit(BeanRecipe.java:736)
	at org.apache.aries.blueprint.container.BeanRecipe.internalCreate2(BeanRecipe.java:848)
	at org.apache.aries.blueprint.container.BeanRecipe.internalCreate(BeanRecipe.java:811)
	at org.apache.aries.blueprint.di.AbstractRecipe$1.call(AbstractRecipe.java:79)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:88)
	at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:247)
	at org.apache.aries.blueprint.container.BlueprintRepository.createAll(BlueprintRepository.java:183)
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.instantiateEagerComponents(BlueprintContainerImpl.java:688)
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:383)
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:270)
	at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:294)
	at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:263)
	at org.apache.aries.blueprint.container.BlueprintExtender.modifiedBundle(BlueprintExtender.java:253)
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:500)
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:433)
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$AbstractTracked.track(BundleHookBundleTracker.java:725)
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.bundleChanged(BundleHookBundleTracker.java:463)
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$BundleEventHook.event(BundleHookBundleTracker.java:422)
	at org.apache.felix.framework.util.SecureAction.invokeBundleEventHook(SecureAction.java:1127)
	at org.apache.felix.framework.util.EventDispatcher.createWhitelistFromHooks(EventDispatcher.java:696)
	at org.apache.felix.framework.util.EventDispatcher.fireBundleEvent(EventDispatcher.java:484)
	at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:4429)
	at org.apache.felix.framework.Felix.startBundle(Felix.java:2100)
	at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:976)
	at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:963)
	at org.apache.karaf.shell.osgi.StartBundle.doExecute(StartBundle.java:37)
	at org.apache.karaf.shell.osgi.BundlesCommand.doExecute(BundlesCommand.java:37)
	at org.apache.karaf.shell.console.OsgiCommandSupport.execute(OsgiCommandSupport.java:38)
	at org.apache.felix.gogo.commands.basic.AbstractCommand.execute(AbstractCommand.java:35)
	at sun.reflect.GeneratedMethodAccessor67.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.aries.proxy.impl.ProxyHandler$1.invoke(ProxyHandler.java:54)
	at org.apache.aries.proxy.impl.ProxyHandler.invoke(ProxyHandler.java:119)
	at org.apache.karaf.shell.console.commands.$BlueprintCommand807606810.execute(Unknown Source)
	at org.apache.felix.gogo.runtime.CommandProxy.execute(CommandProxy.java:78)
	at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:477)
	at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:403)
	at org.apache.felix.gogo.runtime.Pipe.run(Pipe.java:108)
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:183)
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:120)
	at org.apache.felix.gogo.runtime.CommandSessionImpl.execute(CommandSessionImpl.java:92)
	at org.apache.karaf.shell.console.jline.Console.run(Console.java:197)
	at org.apache.karaf.shell.console.jline.DelayedStarted.run(DelayedStarted.java:79)
{noformat}","10/Mar/17 18:10;mattrpav;Solved: Missing optional import for oracle packages:

oracle.jdbc.pool;resolution=optional,
oracle.jdbc;resolution=optional,
oracle.sql;resolution=optional,",10/Mar/17 20:28;mattrpav;Patch for 2690 and 2691,"11/Mar/17 18:20;jira-bot;Commit 1786518 from [~chris@die-schneider.net] in branch 'openjpa/trunk'
[ https://svn.apache.org/r1786518 ]

[OPENJPA-2690] Update OSGi Import-Package to support Oracle CLOB/BLOB","06/Jun/18 16:18;struberg;Christian, I think this can be closed, right?
Matt, thanks for the report!","06/Jun/18 16:23;jira-bot;Commit 1833055 from struberg@apache.org in branch 'openjpa/branches/2.4.x'
[ https://svn.apache.org/r1833055 ]

OPENJPA-2690 OPENJPA-2691 modern Oracle LOB handling

ported over the fix from cschneider from trunk.
Thanks to Matt Pavlovich (apacheId mattrpav) for the report!","06/Jun/18 19:23;jira-bot;Commit 1833076 from struberg@apache.org in branch 'openjpa/branches/2.4.x'
[ https://svn.apache.org/r1833076 ]

OPENJPA-2690 OPENJPA-2691 modern Oracle LOB handling

ported over the fix from cschneider from trunk.
Thanks to Matt Pavlovich (apacheId mattrpav) for the report!

apparently I picked up the wrong file in my previous commit",,,,,,,,,,,
ArrayOutOfBoundsException occurs with an @EmbeddedId,OPENJPA-2705,13087231,Bug,Resolved,OPENJPA,OpenJPA,software,struberg,"Implementation of Java persistence, including the Java Persistence API JSR-220 (JPA 1.0) and JSR-317 (JPA 2.0).",http://openjpa.apache.org,Major,Fixed,,dazeydev,dazeydev,14/Jul/17 15:41,20/Jul/17 20:15,13/Mar/19 23:09,20/Jul/17 20:15,2.1.1,,,,,,,,,,,,,,,,,,,2.1.2,2.2.3,,,,,,jpa,,,,0,,"Introduced with [OPENJPA-2631|https://issues.apache.org/jira/browse/OPENJPA-2631].

Exception:
Caused by: java.lang.ArrayIndexOutOfBoundsException
at org.apache.openjpa.jdbc.meta.ClassMapping.toDataStoreValue(ClassMapping.java:272)
at org.apache.openjpa.jdbc.kernel.exps.CollectionParam.calculateValue(CollectionParam.java:174)

Reproduce:

{code:java}
@Entity
public class IdentificationBO {
	@EmbeddedId private BoIdVersion boId;
}
{code}

{code:java}
@Embeddable
public class BoIdVersion {
	private Long id;
	private Long version;
}
{code}

{code:java}
@Test
public void queryTest() {
	EntityManager em = emf.createEntityManager();
	EntityTransaction et = em.getTransaction();
	et.begin();

	Query q = em.createQuery(""SELECT DISTINCT Ident FROM IdentificationBO Ident WHERE Ident.boId in :identificationList"");
	q.setParameter(""identificationList"", Arrays.asList(new BoIdVersion(new Long(1)), new BoIdVersion(new Long(2)), new BoIdVersion(new Long(3))));
        //Exception on execution of this line
	q.getResultList();

	if ((et != null) && (et.isActive())) {
		et.rollback();
	}
	em.close();
}
{code}

",,,,,,,,,,,,,19/Jul/17 14:56;dazeydev;OPENJPA-2705-2.1.x.patch;https://issues.apache.org/jira/secure/attachment/12878004/OPENJPA-2705-2.1.x.patch,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2017-07-19 15:10:43.764,,,no_permission,,,,,,,,,,,9223372036854775807,,,Thu Jul 20 20:15:06 UTC 2017,,,,,,,0|i3hje7:,9223372036854775807,,,,,,,,"14/Jul/17 16:28;dazeydev;This will need to be delivered to 2.1.x, 2.2.x, 2.2.1.x, and trunk",19/Jul/17 15:10;fyrewyld;Patch looks straightforward to me.  Nice job.,"19/Jul/17 18:12;jira-bot;Commit 1802420 from [~fyrewyld] in branch 'openjpa/branches/2.2.x'
[ https://svn.apache.org/r1802420 ]

OPENJPA-2705: ArrayOutOfBoundsException occurs with an @EmbeddedId (commit on wdazeys behalf)","19/Jul/17 18:18;jira-bot;Commit 1802421 from [~fyrewyld] in branch 'openjpa/branches/2.1.x'
[ https://svn.apache.org/r1802421 ]

OPENJPA-2705: ArrayOutOfBoundsException occurs with an @EmbeddedId (commit on wdazeys behalf)","20/Jul/17 20:11;jira-bot;Commit 1802529 from [~fyrewyld] in branch 'openjpa/trunk'
[ https://svn.apache.org/r1802529 ]

OPENJPA-2705: ArrayOutOfBoundsException occurs with an @EmbeddedId (commit on wdazeys behalf)","20/Jul/17 20:15;dazeydev;Committed to relevant branches, closing.",,,,,,,,,,,,
Calling setFixedCHAR on newer Oracle JDBC drivers fails with an IllegalAccessException,OPENJPA-2689,13046596,Bug,Resolved,OPENJPA,OpenJPA,software,struberg,"Implementation of Java persistence, including the Java Persistence API JSR-220 (JPA 1.0) and JSR-317 (JPA 2.0).",http://openjpa.apache.org,Major,Fixed,struberg,struberg,struberg,27/Feb/17 10:07,02/Mar/17 08:14,13/Mar/19 23:09,02/Mar/17 08:14,2.4.2,3.0.0,,,,,,,,,,,,,,,,,,2.4.3,3.0.0,,,,,,jdbc,,,,0,,"Newer Oracle JDBC drivers have the OraclePreparedStatementWrapper as package scoped class. 
That means that invoking any method via reflection will fail with an IllegalAccessException despite those methods (in my case setFixedCHAR) is public.",,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-02-27 14:14:40.537,,,no_permission,,,,,,,,,,,9223372036854775807,,,Mon Feb 27 15:00:24 UTC 2017,,,,,,,0|i3ao1r:,9223372036854775807,,,,,,,,"27/Feb/17 14:14;jira-bot;Commit 1784568 from [~struberg] in branch 'openjpa/branches/2.4.x'
[ https://svn.apache.org/r1784568 ]

OPENJPA-2689 prevent IllegalArgumentException with package scoped OraclePreparedStatementWrapper classes","27/Feb/17 15:00;jira-bot;Commit 1784577 from [~struberg] in branch 'openjpa/trunk'
[ https://svn.apache.org/r1784577 ]

OPENJPA-2689 prevent IllegalArgumentException with package scoped OraclePreparedStatementWrapper classes",,,,,,,,,,,,,,,,
"Merge of lazily fetched fields, and merge of managed entities deviates from spec",OPENJPA-1983,12504706,Bug,Resolved,OPENJPA,OpenJPA,software,struberg,"Implementation of Java persistence, including the Java Persistence API JSR-220 (JPA 1.0) and JSR-317 (JPA 2.0).",http://openjpa.apache.org,Major,Fixed,curtisr7,pradyumna_achar,pradyumna_achar,19/Apr/11 19:51,21/Sep/16 14:38,13/Mar/19 23:09,28/Oct/13 21:21,2.1.0,2.2.0,,,,,,,,,,,,,,,,,,2.0.2,2.1.2,2.2.0,,,,,jdbc,,,,0,,"Attached is a test case that illustrates this fail (You can place it into openjpa-persistence-jdbc/src/test/java/org.apache.openjpa.persistence.merge)

Problem 1: Section 3.2.7.1 (Merging Detached Entity State) of the specification says that ""The persistence provider must not merge fields marked LAZY that have not been fetched: it must ignore such fields when merging."". The attached test case illustrates that OpenJPA 2.1.0 does not ignore fields marked LAZY that have not been fetched.
Problem 2: In the same section, the specification says ""If X is a managed entity, it is ignored by the merge operation..."". But OpenJPA 2.1.0 doesn't seem to ignore them.
",,,,,,,,,,,,,19/Apr/11 19:53;pradyumna_achar;Inner.java;https://issues.apache.org/jira/secure/attachment/12476766/Inner.java,19/Apr/11 21:38;curtisr7;OPENJPA-1983.patch;https://issues.apache.org/jira/secure/attachment/12476784/OPENJPA-1983.patch,19/Apr/11 19:52;pradyumna_achar;Outer.java;https://issues.apache.org/jira/secure/attachment/12476765/Outer.java,19/Apr/11 19:52;pradyumna_achar;TestLazyFields.java;https://issues.apache.org/jira/secure/attachment/12476763/TestLazyFields.java,,,,4.0,,,,,,,,,,,,,,,,,,,2011-04-19 21:38:55.102,,,no_permission,,,,,,,,,,,2344,,,Thu Jul 18 19:34:29 UTC 2013,,,,,,,0|i1dufz:,289029,,,,,,,,19/Apr/11 21:38;curtisr7;Attaching a patch with the test case and code fix. I'm going to wait a couple days to commit this change till I can validate that I don't break some other tests.,"20/Apr/11 13:28;curtisr7;Committed revision 1095401 to trunk.

Thanks for the thorough test case Pradyumna!",02/Feb/12 17:08;allee8285;Close issue in preparation for 2.2.0 release.,"18/Jul/13 19:19;jira-bot;Commit 1504611 from [~jpaheath] in branch 'openjpa/branches/2'
[ https://svn.apache.org/r1504611 ]

OPENJPA-1983: Don't cascade to an unloaded field when merge is called on a managed Entity - back ported Rick Curtis' trunk changes to 2.0.x.","18/Jul/13 19:34;jira-bot;Commit 1504619 from [~jpaheath] in branch 'openjpa/branches/2'
[ https://svn.apache.org/r1504619 ]

OPENJPA-1983: Don't cascade to an unloaded field when merge is called on a managed Entity - back ported Rick Curtis' trunk changes to 2.1.x.",,,,,,,,,,,,,
TestQueryTimeout test is broken,OPENJPA-2658,12998751,Bug,Resolved,OPENJPA,OpenJPA,software,struberg,"Implementation of Java persistence, including the Java Persistence API JSR-220 (JPA 1.0) and JSR-317 (JPA 2.0).",http://openjpa.apache.org,Major,Fixed,struberg,struberg,struberg,21/Aug/16 13:06,22/Aug/16 13:51,13/Mar/19 23:09,22/Aug/16 13:51,2.4.1,,,,,,,,,,,,,,,,,,,3.0.0,,,,,,,jdbc,,,,0,,"TestQueryTimeout fails because it cannot create the stored procedure.

747  test  INFO   [main] openjpa.jdbc.JDBC - Connected to Apache Derby version 10.10 using JDBC driver Apache Derby Embedded JDBC Driver version 10.12.1.1 - (1704137). 
org.apache.openjpa.lib.jdbc.ReportingSQLException: Operation 'DROP ROUTINE' cannot be performed on object 'DELAY' because TRIGGER 'T1' is dependent on that object. {stmnt 1978732023 DROP FUNCTION DELAY} [code=30000, state=X0Y25]
...
	at org.apache.openjpa.jdbc.kernel.JDBCStoreManager$CancelStatement.execute(JDBCStoreManager.java:1711)
	at org.apache.openjpa.lib.jdbc.DelegatingStatement.execute(DelegatingStatement.java:122)
	at org.apache.openjpa.persistence.query.TestQueryTimeout.exec(TestQueryTimeout.java:1025)
	at org.apache.openjpa.persistence.query.TestQueryTimeout.setupCreateDBFunction(TestQueryTimeout.java:908)
",,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-08-21 13:16:30.017,,,no_permission,,,,,,,,,,,9223372036854775807,,,Sun Aug 21 13:19:54 UTC 2016,,,,,,,0|i32khr:,9223372036854775807,,,,,,,,"21/Aug/16 13:16;jira-bot;Commit 1757057 from [~struberg] in branch 'openjpa/trunk'
[ https://svn.apache.org/r1757057 ]

OPENJPA-2658 also drop trigger T1 which prevents dropping of the function","21/Aug/16 13:17;jira-bot;Commit 1757058 from [~struberg] in branch 'openjpa/branches/2.4.x'
[ https://svn.apache.org/r1757058 ]

OPENJPA-2658 also drop trigger T1 which prevents dropping of the function","21/Aug/16 13:19;struberg;I now simply also drop the trigger T1 before we drop the DELAY function.
Wonder how this used to work (jenkins for 2.3.x executes the test just fine).
Maybe the tests which create T1 are executed last in older junit versions.
Maybe it also has to do with the undefined method order since java7?",,,,,,,,,,,,,,,
Update Commons Collections to 3.2.2,OPENJPA-2616,12915363,Bug,Resolved,OPENJPA,OpenJPA,software,struberg,"Implementation of Java persistence, including the Java Persistence API JSR-220 (JPA 1.0) and JSR-317 (JPA 2.0).",http://openjpa.apache.org,Major,Fixed,fyrewyld,fyrewyld,fyrewyld,23/Nov/15 15:31,15/Feb/16 08:11,13/Mar/19 23:09,15/Feb/16 08:11,1.0.0,1.0.1,1.0.2,1.0.3,1.0.4,1.1.0,1.2.0,1.2.1,1.2.2,1.2.3,2.0.0,2.0.1,2.1.0,2.1.1,2.2.0,2.2.1,2.2.2,2.3.0,2.4.0,2.4.1,,,,,,,jpa,,,,0,,As documented by https://issues.apache.org/jira/browse/COLLECTIONS-580 Apache Commons Collections bears a significant exploit.  This has been corrected in Apache Commons Collections 3.2.2 and OpenJPA should be updated from 3.2.1 to use this new level of Collections immediately.,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-11-23 15:36:29.4,,,no_permission,,,,,,,,,,,9223372036854775807,,,Mon Feb 15 08:11:06 UTC 2016,,,,,,,0|i2osjr:,9223372036854775807,,,,,,,,"23/Nov/15 15:36;jira-bot;Commit 1715848 from [~fyrewyld] in branch 'openjpa/trunk'
[ https://svn.apache.org/r1715848 ]

OPENJPA-2616: Update to Commons Collections 3.2.2","23/Nov/15 15:37;jira-bot;Commit 1715851 from [~fyrewyld] in branch 'openjpa/branches/2.2.x'
[ https://svn.apache.org/r1715851 ]

OPENJPA-2616: Update to Commons Collections 3.2.2","23/Nov/15 16:56;jira-bot;Commit 1715883 from [~fyrewyld] in branch 'openjpa/branches/2.1.x'
[ https://svn.apache.org/r1715883 ]

OPENJPA-2616: Update to Commons Collections 3.2.2","23/Nov/15 17:29;jira-bot;Commit 1715899 from [~fyrewyld] in branch 'openjpa/branches/2.0.x'
[ https://svn.apache.org/r1715899 ]

OPENJPA-2616: Update to Commons Collections 3.2.2","23/Nov/15 17:49;jira-bot;Commit 1715903 from [~fyrewyld] in branch 'openjpa/branches/1.2.x'
[ https://svn.apache.org/r1715903 ]

OPENJPA-2616: Update commons collections to 3.2.2","23/Nov/15 18:21;jira-bot;Commit 1715910 from [~fyrewyld] in branch 'openjpa/branches/1.0.x'
[ https://svn.apache.org/r1715910 ]

OPENJPA-2616: Update commons collections to 3.2.2","23/Nov/15 22:07;jira-bot;Commit 1715977 from [~fyrewyld] in branch 'openjpa/branches/2.3.x'
[ https://svn.apache.org/r1715977 ]

OPENJPA-2616: Update commons collections to 3.2.2",15/Feb/16 08:11;struberg;resolved as far as I can tell from the pom.,,,,,,,,,,
isEnhanced doesn't support java 8 bytecode,OPENJPA-2626,12935076,Bug,Resolved,OPENJPA,OpenJPA,software,struberg,"Implementation of Java persistence, including the Java Persistence API JSR-220 (JPA 1.0) and JSR-317 (JPA 2.0).",http://openjpa.apache.org,Major,Fixed,,romain.manni-bucau,romain.manni-bucau,29/Jan/16 10:36,14/Feb/16 10:34,13/Mar/19 23:09,29/Jan/16 10:37,2.4.0,,,,,,,,,,,,,,,,,,,2.4.1,,,,,,,,,,,0,,"{code}
AVERTISSEMENT - An exception was thrown while attempting to perform class file transformation on ""com.github.rmannibucau.jwp.jpa.User"":
java.lang.ArrayIndexOutOfBoundsException: 28263
	at serp.bytecode.lowlevel.ConstantPoolTable.get(ConstantPoolTable.java:139)
	at org.apache.openjpa.enhance.PCClassFileTransformer.isEnhanced(PCClassFileTransformer.java:240)
	at org.apache.openjpa.enhance.PCClassFileTransformer.needsEnhance(PCClassFileTransformer.java:195)
	at org.apache.openjpa.enhance.PCClassFileTransformer.transform0(PCClassFileTransformer.java:140)
	at org.apache.openjpa.enhance.PCClassFileTransformer.transform(PCClassFileTransformer.java:127)
	at org.apache.openjpa.persistence.PersistenceProviderImpl$ClassTransformerImpl.transform(PersistenceProviderImpl.java:292)
	at org.apache.openejb.persistence.PersistenceUnitInfoImpl$PersistenceClassFileTransformer.transform(PersistenceUnitInfoImpl.java:370)
	at sun.instrument.TransformerManager.transform(TransformerManager.java:188)
	at sun.instrument.InstrumentationImpl.transform(InstrumentationImpl.java:428)
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:760)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)

{code}",,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-01-29 10:36:54.831,,,no_permission,,,,,,,,,,,9223372036854775807,,,Sun Feb 14 10:34:36 UTC 2016,,,,,,,0|i2s533:,9223372036854775807,,,,,,,,"29/Jan/16 10:36;jira-bot;Commit 1727520 from [~rmannibucau] in branch 'openjpa/trunk'
[ https://svn.apache.org/r1727520 ]

OPENJPA-2626 support of java 8 bytecode test for isEnhanced - avoid to have logs full of exception/warnings when it actually works cause it is already enahnced at build time","14/Feb/16 10:34;jira-bot;Commit 1730309 from [~struberg] in branch 'openjpa/trunk'
[ https://svn.apache.org/r1730309 ]

OPENJPA-2626 remove unused import (which is an ugly internal sun class and doesn't exist in java7)",,,,,,,,,,,,,,,,
"blacklist org.codehaus.groovy.runtime.,org.apache.commons.collections.functors.,org.apache.xalan in our custom ObjectInputStreams",OPENJPA-2617,12916621,Bug,Resolved,OPENJPA,OpenJPA,software,struberg,"Implementation of Java persistence, including the Java Persistence API JSR-220 (JPA 1.0) and JSR-317 (JPA 2.0).",http://openjpa.apache.org,Major,Fixed,,romain.manni-bucau,romain.manni-bucau,27/Nov/15 12:10,11/Dec/15 16:19,13/Mar/19 23:09,27/Nov/15 12:15,2.4.0,,,,,,,,,,,,,,,,,,,2.4.1,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-11-27 12:15:49.347,,,no_permission,,,,,,,,,,,9223372036854775807,,,Fri Dec 11 16:19:30 UTC 2015,,,,,,,0|i2p0bb:,9223372036854775807,,,,,,,,"27/Nov/15 12:15;jira-bot;Commit 1716859 from [~rmannibucau] in branch 'openjpa/trunk'
[ https://svn.apache.org/r1716859 ]

OPENJPA-2617 adding BlacklistClassResolver to support blacklisting of class loading in our ObjectInputStream","04/Dec/15 21:50;jpaheath;Hi Romain!  This commit causes the following build/checkstyle issue:

[INFO] Starting audit...
E:\jpa\openJPAcode\trunk\openjpa-kernel\src\main\java\org\apache\openjpa\util\BlacklistClassResolver.java:0: File does not end with a newline.
Audit done.

[INFO] ------------------------------------------------------------------------
[ERROR] BUILD ERROR
[INFO] ------------------------------------------------------------------------
[INFO] An error has occurred in Checkstyle report generation.

",04/Dec/15 21:59;romain.manni-bucau;[~jpaheath] how did you get this? I ran the normal profile without issues. That said fixed this one.,"10/Dec/15 23:13;dazeydev;I am getting the same failure with ""mvn clean install"" on the trunk. 

[INFO] Processed 1 grammar
[INFO]
[INFO] --- maven-checkstyle-plugin:2.6:checkstyle (default) @ openjpa-kernel ---

[INFO] Starting audit...
C:\JPA\OPENJPA\trunk\openjpa-kernel\src\main\java\org\apache\openjpa\util\Blackl
istClassResolver.java:0: File does not end with a newline.
Audit done.

[INFO] ------------------------------------------------------------------------
[INFO] Reactor Summary:
[INFO]
[INFO] OpenJPA Parent POM ................................ SUCCESS [24.766s]
[INFO] OpenJPA Utilities Library ......................... SUCCESS [13.426s]
[INFO] OpenJPA Kernel .................................... FAILURE [3.004s]","11/Dec/15 08:25;romain.manni-bucau;Just tested again, my local copy is clean and I don't get this issue:

{code}
[INFO] ------------------------------------------------------------------------
[INFO] Building OpenJPA Kernel 2.4.1-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO]
[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ openjpa-kernel ---
[INFO] Deleting /Users/rmannibu/dev/apache/openjpa-trunk/openjpa-kernel/target
[INFO]
[INFO] --- buildnumber-maven-plugin:1.0-beta-4:create (default) @ openjpa-kernel ---
[INFO]
[INFO] --- maven-enforcer-plugin:1.3.1:enforce (default) @ openjpa-kernel ---
[INFO]
[INFO] --- javacc-maven-plugin:2.4:jjtree-javacc (jjtree-javacc-jpql) @ openjpa-kernel ---
Java Compiler Compiler Version 4.0 (Tree Builder)
(type ""jjtree"" with no arguments for help)
Reading from file /Users/rmannibu/dev/apache/openjpa-trunk/openjpa-kernel/src/main/jjtree/org/apache/openjpa/kernel/jpql/JPQL.jjt . . .
File ""/Users/rmannibu/dev/apache/openjpa-trunk/openjpa-kernel/target/generated-sources/jjtree/org/apache/openjpa/kernel/jpql/Node.java"" does not exist.  Will create one.
Annotated grammar generated successfully in /Users/rmannibu/dev/apache/openjpa-trunk/openjpa-kernel/target/generated-sources/jjtree/org/apache/openjpa/kernel/jpql/JPQL.jj
Java Compiler Compiler Version 4.0 (Parser Generator)
(type ""javacc"" with no arguments for help)
Reading from file /Users/rmannibu/dev/apache/openjpa-trunk/openjpa-kernel/target/generated-sources/jjtree/org/apache/openjpa/kernel/jpql/JPQL.jj . . .
Warning: Choice conflict in (...)* construct at line 939, column 17.
         Expansion nested within construct and expansion following construct
         have common prefixes, one of which is: ""+""
         Consider using a lookahead of 2 or more for nested expansion.
Warning: Choice conflict in (...)* construct at line 948, column 17.
         Expansion nested within construct and expansion following construct
         have common prefixes, one of which is: ""*""
         Consider using a lookahead of 2 or more for nested expansion.
File ""TokenMgrError.java"" does not exist.  Will create one.
Warning: ParseException.java: File is obsolete.  Please rename or delete this file so that a new one can be generated for you.
File ""Token.java"" does not exist.  Will create one.
File ""JavaCharStream.java"" does not exist.  Will create one.
Parser generated with 0 errors and 3 warnings.
[INFO] Processed 1 grammar
[INFO]
[INFO] --- maven-checkstyle-plugin:2.6:checkstyle (default) @ openjpa-kernel ---
[INFO] Starting audit...
Audit done.

[WARNING] Unable to locate Source XRef to link to - DISABLED
[INFO]
[INFO] --- maven-remote-resources-plugin:1.5:process (default) @ openjpa-kernel ---
{code}

also checked manually last line was empty",11/Dec/15 16:19;dazeydev;The issue seems to be that you have created this new file and do not have your svn client configured for OS-nonspecific EOL characters. Check out this JIRA for details on a similar issue: https://issues.apache.org/jira/browse/OPENJPA-896,,,,,,,,,,,,
'hint' element in orm:xml is ignored,OPENJPA-2601,12846325,Bug,Resolved,OPENJPA,OpenJPA,software,struberg,"Implementation of Java persistence, including the Java Persistence API JSR-220 (JPA 1.0) and JSR-317 (JPA 2.0).",http://openjpa.apache.org,Major,Fixed,struberg,kariem,kariem,20/Jul/15 18:20,21/Jul/15 11:26,13/Mar/19 23:09,21/Jul/15 11:26,2.3.0,2.4.0,,,,,,,,,,,,,,,,,,2.4.1,,,,,,,criteria,,,,0,,"It should be possible to set query hints in Java code, or in orm.xml, but it seems the {{orm:hint}} element is ignored.

The following two options should result in the same query:
# Java only:
{code:java}
em.createQuery(""Select e from MyEntity e where e.type = 'literal'"")
  .setHint(QueryHints.HINT_USE_LITERAL_IN_SQL, true)
  .getResultList()
{code}
# Named query
#- Define the query and the hint in orm.xml
{code:xml}
<named-query name=""Query1"">
    <query>Select e from MyEntity e where e.type = 'literal'</query>   
    <hint name=""openjpa.hint.UseLiteralInSQL"" value=""true"" />
</named-query>
{code}
#- And then call the query without additional information
{code:java}
em.createNamedQuery(""Query1"")
  .getResultList()
{code}

However, (2) does not correctly take the query hint into account and thus literals are replaced with SQL positional parameters.",,,,,,,,,,,,,21/Jul/15 10:58;kariem;0001-OPENJPA-2601-Test-case-with-hint-in-orm.xml.patch;https://issues.apache.org/jira/secure/attachment/12746324/0001-OPENJPA-2601-Test-case-with-hint-in-orm.xml.patch,21/Jul/15 10:58;kariem;0002-OPENJPA-2601-Correct-element-name-for-query-hint.patch;https://issues.apache.org/jira/secure/attachment/12746325/0002-OPENJPA-2601-Correct-element-name-for-query-hint.patch,,,,,,2.0,,,,,,,,,,,,,,,,,,,2015-07-21 11:25:37.129,,,no_permission,,,,,,,,,,,9223372036854775807,,,Tue Jul 21 11:26:16 UTC 2015,,,,,,,0|i2hgkf:,9223372036854775807,,,,,,,,"20/Jul/15 18:42;kariem;Provided patch and test case in [PR2|https://github.com/apache/openjpa/pull/2]. I hope it can help you.

Is there anything I can do to have this in a bugfix release for 2.3?",21/Jul/15 10:58;kariem;I attached the two commits from the pull request.,"21/Jul/15 11:25;jira-bot;Commit 1692088 from [~struberg] in branch 'openjpa/trunk'
[ https://svn.apache.org/r1692088 ]

OPENJPA-2601 fix 'hint' element in orm.xml parsing

Txs to Kariem Hussein for the patch!","21/Jul/15 11:26;struberg;txs for the patch, Kariem!",,,,,,,,,,,,,,
finally remove NullSafeConcurrentHashMap and SizedConcurrentHashMap,OPENJPA-2600,12841422,Bug,Resolved,OPENJPA,OpenJPA,software,struberg,"Implementation of Java persistence, including the Java Persistence API JSR-220 (JPA 1.0) and JSR-317 (JPA 2.0).",http://openjpa.apache.org,Major,Fixed,struberg,struberg,struberg,29/Jun/15 19:29,08/Jul/15 19:54,13/Mar/19 23:09,30/Jun/15 12:06,2.4.0,,,,,,,,,,,,,,,,,,,2.4.1,,,,,,,,,,,0,,"The mentioned classes wont work with Jva8 and are not used anymore. So we should finally remove those classes.

See OPENJPA-2441 for more info.",,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-06-30 08:49:06.241,,,no_permission,,,,,,,,,,,9223372036854775807,,,Wed Jul 08 19:54:54 UTC 2015,,,,,,,0|i2gn2n:,9223372036854775807,,,,,,,,"30/Jun/15 08:49;jira-bot;Commit 1688402 from [~struberg] in branch 'openjpa/trunk'
[ https://svn.apache.org/r1688402 ]

OPENJPA-2600 remove Classes which break Java8 functionality.

They are not used since quite some time anyway and have been marked
as deprecated in the past already.",30/Jun/15 12:06;struberg;finally removed the 2 mentioned classes.,"08/Jul/15 19:54;jira-bot;Commit 1689951 from [~struberg] in branch 'openjpa/trunk'
[ https://svn.apache.org/r1689951 ]

OPENJPA-2600 add cast which is needed for Java8

Java8 fails do properly coerc the method calls if we don't 'hint'
it to the right ParameterizedType.",,,,,,,,,,,,,,,
HsqlDictionary considers NUMERIC/DECIMAL as a fixedSizeTypeNameSet,OPENJPA-2597,12841234,Bug,Resolved,OPENJPA,OpenJPA,software,struberg,"Implementation of Java persistence, including the Java Persistence API JSR-220 (JPA 1.0) and JSR-317 (JPA 2.0).",http://openjpa.apache.org,Major,Fixed,,romain.manni-bucau,romain.manni-bucau,29/Jun/15 04:09,29/Jun/15 04:25,13/Mar/19 23:09,29/Jun/15 04:25,,,,,,,,,,,,,,,,,,,,2.4.1,,,,,,,,,,,0,,"@Column(scale = 8, precision = 10) double val; mapping would need NUMERIC(10,8) type but since numeric is in fixedSizeTypeNameSet set then we just get NUMERIC and scale=0 which implies float/double/BigDecimal mappings are not working as expected.",,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-06-29 04:25:18.203,,,no_permission,,,,,,,,,,,9223372036854775807,,,Mon Jun 29 04:25:18 UTC 2015,,,,,,,0|i2glxj:,9223372036854775807,,,,,,,,"29/Jun/15 04:16;romain.manni-bucau;Just removing in HSQLDictionary ""NUMERIC"" from fixedSizeTypeNameSet is fine (tested against hsqldb 2.x). DECIMAL has the same issue since it is the same for hsqldb.
","29/Jun/15 04:25;jira-bot;Commit 1688082 from [~rmannibucau] in branch 'openjpa/trunk'
[ https://svn.apache.org/r1688082 ]

OPENJPA-2597 DECIMAL and NUMERIC needs scale configuration for hsqldb",,,,,,,,,,,,,,,,
schema-delta generation (sqlAction=refresh) drops columns if they have an alternative typeName,OPENJPA-2596,12835928,Bug,Resolved,OPENJPA,OpenJPA,software,struberg,"Implementation of Java persistence, including the Java Persistence API JSR-220 (JPA 1.0) and JSR-317 (JPA 2.0).",http://openjpa.apache.org,Major,Fixed,struberg,struberg,struberg,06/Jun/15 14:45,07/Jun/15 06:55,13/Mar/19 23:09,07/Jun/15 06:55,2.4.0,,,,,,,,,,,,,,,,,,,2.4.1,,,,,,,jdbc,,,,0,,"I use Oracle with the following in my persistence.xml:

{code}
<property name=""openjpa.jdbc.Dictionary"" value=""(BitTypeName=CHAR(1),BooleanTypeName=CHAR(1),BooleanRepresentation=STRING_10)""/>
{code}

It is all about the *TypeName. The BooleanRepresentation has no impact. I just added it to show the full use case.

The problem is that during the MappingTool retain there is a Column#equalsColumn which only looks at the Type integers but not on any typeName representation in the DBDictionary. 

What now happens is that during openjpa:sql with sqlAction=build it perfectly creates a CHAR(1) for every boolean and Boolean field in my entity.
But during a sqlAction=refresh it *wrongly* believes that the types it gets from the SchemaTool by parsing the real db (CHAR length1 java.sql.Types#CHAR=1) is not compatible to the type it sees in the MappingTool from parsing the Entity annotations + orm.xml (java.sql.Tpyes.BIT=-7).

The result is that generated delta script wrongly drops the column and later adds it again with exactly the same definitions. And this happens every time...
",,,,,,,,,,,,,06/Jun/15 20:59;struberg;OPENJPA-2596.patch;https://issues.apache.org/jira/secure/attachment/12738202/OPENJPA-2596.patch,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2015-06-07 06:50:59.627,,,no_permission,,,,,,,,,,,9223372036854775807,,,Sun Jun 07 06:50:59 UTC 2015,,,,,,,0|i2fpvz:,9223372036854775807,,,,,,,,06/Jun/15 14:50;struberg;A possible solution could be to add a 2nd Colum#equalsColumn which additionally takes the DBDictionary as parameter and if the default Types comparison doesn't return true then we take an additional look at the real db representation.,06/Jun/15 20:59;struberg;plz review,"07/Jun/15 06:50;jira-bot;Commit 1683992 from [~struberg] in branch 'openjpa/trunk'
[ https://svn.apache.org/r1683992 ]

OPENJPA-2596 schema-delta generation (sqlAction=refresh) drops columns if they have an alternative typeName

solved by additionally comparing the final column definition end to end",,,,,,,,,,,,,,,
openjpa bundle module leaks jest dependencies,OPENJPA-2582,12827195,Bug,Resolved,OPENJPA,OpenJPA,software,struberg,"Implementation of Java persistence, including the Java Persistence API JSR-220 (JPA 1.0) and JSR-317 (JPA 2.0).",http://openjpa.apache.org,Major,Fixed,struberg,struberg,struberg,05/May/15 09:00,05/May/15 09:43,13/Mar/19 23:09,05/May/15 09:43,2.4.0,,,,,,,,,,,,,,,,,,,2.4.1,,,,,,,build / infrastructure,,,,0,,"openjpa bundle module leaks jest dependencies

We removed JEST from the openjpa bundle. It's more a client than a part of the kernel. Still we leak jest from our 2.4.0 openjpa.jar bundle.",,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-05-05 09:42:36.026,,,no_permission,,,,,,,,,,,9223372036854775807,,,Tue May 05 09:42:36 UTC 2015,,,,,,,0|i2eahz:,9223372036854775807,,,,,,,,"05/May/15 09:42;jira-bot;Commit 1677762 from [~struberg] in branch 'openjpa/trunk'
[ https://svn.apache.org/r1677762 ]

OPENJPA-2582 remove jest dependency from openjpa bundle",,,,,,,,,,,,,,,,,
AnnotationProcess failed to generate metadata for List<String>[] attribute in entity,OPENJPA-2060,12527112,Bug,Resolved,OPENJPA,OpenJPA,software,struberg,"Implementation of Java persistence, including the Java Persistence API JSR-220 (JPA 1.0) and JSR-317 (JPA 2.0).",http://openjpa.apache.org,Major,Fixed,jpaheath,allee8285,allee8285,13/Oct/11 21:54,25/Sep/14 17:39,13/Mar/19 23:09,25/Sep/14 17:39,2.2.0,,,,,,,,,,,,,,,,,,,2.1.2,2.2.0,,,,,,criteria,,,,0,,"When an entity with List[] attribute feeds to Annotation processor, it failed with the following exception:

> javac -Aopenjpa.metamodel=true -proc:only -Aopenjpa.log=TRACE -cp openjpa.trunk\openjpa-all\target\openjpa-all-2.2.0-SNAPSHOT.jar EntityLob.java
Note: Starting OpenJPA Annotation Processor for Metamodel Generation
Note: Generating canonical metamodel source code ""file:/c:/temp/ap/suite/r80/base/common/datamodel/entities/EntityLob_.java""
error: Error while generating metamodel for ""suite.r80.base.common.datamodel.entities.EntityLob"". See exception stack trace for details.
java.lang.IllegalArgumentException: localized message key: src-invalid-type; substitutions: [java.util.List<java.lang.String>]
        at org.apache.openjpa.persistence.util.SourceCode$ClassName.<init>(SourceCode.java:782)
        at org.apache.openjpa.persistence.util.SourceCode.getOrCreateImport(SourceCode.java:135)
        at org.apache.openjpa.persistence.util.SourceCode$Element.addParameter(SourceCode.java:301)
        at org.apache.openjpa.persistence.meta.AnnotationProcessor6.process(AnnotationProcessor6.java:258)
        at org.apache.openjpa.persistence.meta.AnnotationProcessor6.process(AnnotationProcessor6.java:210)
        at com.sun.tools.javac.processing.JavacProcessingEnvironment.callProcessor(JavacProcessingEnvironment.java:637)
        at com.sun.tools.javac.processing.JavacProcessingEnvironment.discoverAndRunProcs(JavacProcessingEnvironment.java:566)
        at com.sun.tools.javac.processing.JavacProcessingEnvironment.doProcessing(JavacProcessingEnvironment.java:711)
        at com.sun.tools.javac.main.JavaCompiler.processAnnotations(JavaCompiler.java:993)
        at com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:739)
        at com.sun.tools.javac.main.Main.compile(Main.java:365)
        at com.sun.tools.javac.main.Main.compile(Main.java:291)
        at com.sun.tools.javac.main.Main.compile(Main.java:282)
        at com.sun.tools.javac.Main.compile(Main.java:81)
        at com.sun.tools.javac.Main.main(Main.java:66)
warning: Unclosed files for the types '[suite.r80.base.common.datamodel.entities.EntityLob_]'; these types will not undergo annotation proce
ssing
1 error
1 warning

Sample entity used to recreate the problem:

@Entity
public class EntityLob {

    ....
    private List<String>[]  entityLob_lob08;

    public EntityLob() {
    }

    public List<String>[] getEntityLob_lob08() {
        return entityLob_lob08;
    }
    public void setEntityLob_lob08(List<String>[] l) {
        this.entityLob_lob08 = l;
    }
}",,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-04-18 17:28:49.273,,,no_permission,,,,,,,,,,,85483,,,Thu Sep 25 17:39:21 UTC 2014,,,,,,,0|i1duvb:,289098,,,,,,,,"15/Oct/11 15:51;allee8285;There are 2 additional errors for array attribute generation:

1) import x.y.z.type[];  is generated

2) Incorrect generic type in generated metamodel java source if different packages of the same type name are used: E.g.

         java.util.Date date06[];
         java.sql.Date date07;

     generates

        // No import java.util.Date; is generated..
        public static volatile SingularAttribute<EntityTemporal,Date[]> entityTemporal_date06;   // <<<< that caused compilation error:
        public static volatile SingularAttribute<EntityTemporal,java.sql.Date> entityTemporal_date07;

",24/Oct/11 18:12;allee8285;This JIRA continues and fixes the missing scenarios addressed by these related issues.,"18/Apr/13 17:28;jira-bot;Commit 1469482 from hthomann
[ https://svn.apache.org/r1469482 ]

OPENJPA-2060: AnnotationProcess failed to generate metadata for List<String>[] attribute in entity.  Back-ported Albert Lee's trunk changes to 2.1.x.",25/Sep/14 17:39;kwsutter;Adding 2.1.x to the list of versions that was was resolved in.  Per the commit that Heath did a few months back.,,,,,,,,,,,,,,
cascade merge tries to insert null into id column in a 4 entity structure (no DetachedStateField),OPENJPA-1980,12504246,Bug,Resolved,OPENJPA,OpenJPA,software,struberg,"Implementation of Java persistence, including the Java Persistence API JSR-220 (JPA 1.0) and JSR-317 (JPA 2.0).",http://openjpa.apache.org,Major,Fixed,mikedd,slowstrider,slowstrider,14/Apr/11 09:47,23/Jan/14 10:14,13/Mar/19 23:09,27/Aug/13 02:28,2.1.0,,,,,,,,,,,,,,,,,,,2.2.0,,,,,,,kernel,,,,0,,"We use these settings in persistence.xml (useful when entities can be edited by remote clients):

<property name=""openjpa.DetachState"" value=""fetch-groups(DetachedStateField=false)"" />
<property name=""openjpa.AutoDetach"" value=""commit"" />

We have an object graph of four entities with autogenerated Id columns:

Event (OneToMany bidirectional) Activity (OneToMany) ProductOrderLine (OneToOne) StringI18N

All relations are FetchType.EAGER and Cascade.ALL.

When I add a new Activity (with one new ProductOrderLine with one new StringI18N) to an existing Event and then merge the Event, OpenJPA tries to insert a null value into the StringI18N Id column. This seems to be only detected on transaction commit:

<openjpa-2.1.0-r422266:1071316 fatal store error> org.apache.openjpa.persistence.RollbackException: The transaction has been rolled back.  See the nested exceptions for details on the errors that occurred.
FailedObject: entities.booking.StringI18N@2b1682
	at org.apache.openjpa.persistence.EntityManagerImpl.commit(EntityManagerImpl.java:585)
	at EventCascadeMergeTest.saveInTransaction(EventCascadeMergeTest.java:83)
	at EventCascadeMergeTest.cascadeMergeEventImpl(EventCascadeMergeTest.java:72)
	at EventCascadeMergeTest.testSaveExistingEventWithNewActivityWithNewProductOrderLine(EventCascadeMergeTest.java:35)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:73)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:46)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:180)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:41)
	at org.junit.runners.ParentRunner$1.evaluate(ParentRunner.java:173)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:220)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:46)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)
Caused by: <openjpa-2.1.0-r422266:1071316 fatal store error> org.apache.openjpa.persistence.EntityExistsException: The transaction has been rolled back.  See the nested exceptions for details on the errors that occurred.
FailedObject: entities.booking.StringI18N@2b1682
	at org.apache.openjpa.kernel.BrokerImpl.newFlushException(BrokerImpl.java:2316)
	at org.apache.openjpa.kernel.BrokerImpl.flush(BrokerImpl.java:2153)
	at org.apache.openjpa.kernel.BrokerImpl.flushSafe(BrokerImpl.java:2051)
	at org.apache.openjpa.kernel.BrokerImpl.beforeCompletion(BrokerImpl.java:1969)
	at org.apache.openjpa.kernel.LocalManagedRuntime.commit(LocalManagedRuntime.java:81)
	at org.apache.openjpa.kernel.BrokerImpl.commit(BrokerImpl.java:1493)
	at org.apache.openjpa.kernel.DelegatingBroker.commit(DelegatingBroker.java:925)
	at org.apache.openjpa.persistence.EntityManagerImpl.commit(EntityManagerImpl.java:561)
	... 27 more
Caused by: <openjpa-2.1.0-r422266:1071316 fatal store error> org.apache.openjpa.persistence.EntityExistsException: Cannot insert the value NULL into column 'id', table 'obliprototypeunittest.dbo.booking_StringI18N'; column does not allow nulls. INSERT fails. {prepstmnt 28007854 INSERT INTO booking_StringI18N (id, dutch, english) VALUES (?, ?, ?) [params=?, ?, ?]} [code=515, state=23000]
FailedObject: entities.booking.StringI18N@2b1682
	at org.apache.openjpa.jdbc.sql.DBDictionary.narrow(DBDictionary.java:4854)
	at org.apache.openjpa.jdbc.sql.DBDictionary.newStoreException(DBDictionary.java:4829)
	at org.apache.openjpa.jdbc.sql.SQLExceptions.getStore(SQLExceptions.java:136)
	at org.apache.openjpa.jdbc.sql.SQLExceptions.getStore(SQLExceptions.java:78)
	at org.apache.openjpa.jdbc.kernel.PreparedStatementManagerImpl.flushAndUpdate(PreparedStatementManagerImpl.java:143)
	at org.apache.openjpa.jdbc.kernel.BatchingPreparedStatementManagerImpl.flushAndUpdate(BatchingPreparedStatementManagerImpl.java:81)
	at org.apache.openjpa.jdbc.kernel.PreparedStatementManagerImpl.flushInternal(PreparedStatementManagerImpl.java:99)
	at org.apache.openjpa.jdbc.kernel.PreparedStatementManagerImpl.flush(PreparedStatementManagerImpl.java:87)
	at org.apache.openjpa.jdbc.kernel.ConstraintUpdateManager.flush(ConstraintUpdateManager.java:550)
	at org.apache.openjpa.jdbc.kernel.ConstraintUpdateManager.flush(ConstraintUpdateManager.java:106)
	at org.apache.openjpa.jdbc.kernel.BatchingConstraintUpdateManager.flush(BatchingConstraintUpdateManager.java:59)
	at org.apache.openjpa.jdbc.kernel.AbstractUpdateManager.flush(AbstractUpdateManager.java:103)
	at org.apache.openjpa.jdbc.kernel.AbstractUpdateManager.flush(AbstractUpdateManager.java:76)
	at org.apache.openjpa.jdbc.kernel.JDBCStoreManager.flush(JDBCStoreManager.java:742)
	at org.apache.openjpa.kernel.DelegatingStoreManager.flush(DelegatingStoreManager.java:131)
	... 34 more
Caused by: org.apache.openjpa.lib.jdbc.ReportingSQLException: Cannot insert the value NULL into column 'id', table 'obliprototypeunittest.dbo.booking_StringI18N'; column does not allow nulls. INSERT fails. {prepstmnt 28007854 INSERT INTO booking_StringI18N (id, dutch, english) VALUES (?, ?, ?) [params=?, ?, ?]} [code=515, state=23000]
	at org.apache.openjpa.lib.jdbc.LoggingConnectionDecorator.wrap(LoggingConnectionDecorator.java:281)
	at org.apache.openjpa.lib.jdbc.LoggingConnectionDecorator.wrap(LoggingConnectionDecorator.java:257)
	at org.apache.openjpa.lib.jdbc.LoggingConnectionDecorator.access$1000(LoggingConnectionDecorator.java:72)
	at org.apache.openjpa.lib.jdbc.LoggingConnectionDecorator$LoggingConnection$LoggingPreparedStatement.executeUpdate(LoggingConnectionDecorator.java:1199)
	at org.apache.openjpa.lib.jdbc.DelegatingPreparedStatement.executeUpdate(DelegatingPreparedStatement.java:291)
	at org.apache.openjpa.jdbc.kernel.JDBCStoreManager$CancelPreparedStatement.executeUpdate(JDBCStoreManager.java:1776)
	at org.apache.openjpa.jdbc.kernel.PreparedStatementManagerImpl.executeUpdate(PreparedStatementManagerImpl.java:267)
	at org.apache.openjpa.jdbc.kernel.PreparedStatementManagerImpl.flushAndUpdate(PreparedStatementManagerImpl.java:118)
	... 44 more

This problem does not occur when:
- I use a DetachedStateField (unfortunately I have issues with this such as getting stale data from related entities on detach)
- The Event is new as well.
- I don't use CascadeType.PERSIST on the Activity.event field. BUT: even though the merge succeeds, I get that 
     event != event.activities.get(0).event (!!)
- workaround: manually do the cascade merge between Event and Activities: merge the Event without the new Activities, merge the Activities, then link them to the Event.

I attached a unit test with the four entities and my persistence.xml (sorry they are not OpenJPA unit tests yet).
Note that I serialize the entities after detaching (using org.apache.commons.lang.SerializationUtils). If I don't do this I additionally get an IllegalStateException at BrokerImpl.assertOpen
when I add a new Activity to the List in a detached Event. This problem also does not occur when using a DetachedStateField.",sql server 2008 (express) on Windows 7,,,,,,,,,,,,14/Apr/11 09:52;slowstrider;openjpa-1980-unittest.zip;https://issues.apache.org/jira/secure/attachment/12476315/openjpa-1980-unittest.zip,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-08-27 02:28:55.717,,,no_permission,,,,,,,,,,,2347,,,Thu Jan 23 10:14:25 UTC 2014,,,,,,,0|i1dug7:,289030,,,,,,,,14/Apr/11 09:52;slowstrider;source code with unit test that shows the problem (uses JUnit 4 and org.apache.commons.lang.SerializationUtils) ,"27/Aug/13 02:28;mikedd;I can't reproduce with 2.2.0, I'm not sure which issue fixed it, but it should work for you now. ",23/Jan/14 10:14;slowstrider;I removed my workaround code and ran my tests again and indeed the issue is fixed.,,,,,,,,,,,,,,,
ArrayIndexOutOfBoundsException when querying on a version field that is in a MappedSuperclass,OPENJPA-1954,12500194,Bug,Resolved,OPENJPA,OpenJPA,software,struberg,"Implementation of Java persistence, including the Java Persistence API JSR-220 (JPA 1.0) and JSR-317 (JPA 2.0).",http://openjpa.apache.org,Major,Fixed,curtisr7,curtisr7,curtisr7,02/Mar/11 16:22,17/Oct/13 22:33,13/Mar/19 23:09,17/Oct/13 22:33,1.2.2,2.0.0,2.1.0,2.2.0,,,,,,,,,,,,,,,,2.1.2,2.2.0,,,,,,kernel,,,,0,,"This is a problem that was reported on the users mailing list[1].

[1] http://openjpa.markmail.org/thread/qvcducd52vgrhone

<openjpa-2.2.0-SNAPSHOT-r422266:1061583M nonfatal user error> org.apache.openjpa.persistence.ArgumentException: Failed to execute query ""SELECT s FROM TimestampedEntity s WHERE s.version < :endDate"". Check the query syntax for correctness. See nested exception for details.
	at org.apache.openjpa.kernel.QueryImpl.execute(QueryImpl.java:872)
	at org.apache.openjpa.kernel.QueryImpl.execute(QueryImpl.java:794)
	at org.apache.openjpa.kernel.DelegatingQuery.execute(DelegatingQuery.java:542)
	at org.apache.openjpa.persistence.QueryImpl.execute(QueryImpl.java:305)
	at org.apache.openjpa.persistence.QueryImpl.getResultList(QueryImpl.java:321)
	at org.apache.openjpa.persistence.jdbc.update.TestTimestampVersion.test(TestTimestampVersion.java:50)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:48)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:600)
	at junit.framework.TestCase.runTest(TestCase.java:154)
	at org.apache.openjpa.persistence.test.AbstractPersistenceTestCase.runTest(AbstractPersistenceTestCase.java:579)
	at junit.framework.TestCase.runBare(TestCase.java:127)
	at org.apache.openjpa.persistence.test.AbstractPersistenceTestCase.runBare(AbstractPersistenceTestCase.java:566)
	at org.apache.openjpa.persistence.test.AbstractPersistenceTestCase.runBare(AbstractPersistenceTestCase.java:542)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:118)
	at org.apache.openjpa.persistence.test.AbstractPersistenceTestCase.run(AbstractPersistenceTestCase.java:206)
	at junit.framework.TestSuite.runTest(TestSuite.java:208)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:130)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)
Caused by: java.lang.ArrayIndexOutOfBoundsException: Array index out of range: 0
	at org.apache.openjpa.jdbc.kernel.exps.PCPath.appendTo(PCPath.java:995)
	at org.apache.openjpa.jdbc.kernel.exps.FilterValueImpl.appendTo(FilterValueImpl.java:63)
	at org.apache.openjpa.jdbc.kernel.exps.FilterValueImpl.appendTo(FilterValueImpl.java:59)
	at org.apache.openjpa.jdbc.sql.DBDictionary.comparison(DBDictionary.java:2910)
	at org.apache.openjpa.jdbc.kernel.exps.CompareExpression.appendTo(CompareExpression.java:75)
	at org.apache.openjpa.jdbc.kernel.exps.SelectConstructor.buildWhere(SelectConstructor.java:312)
	at org.apache.openjpa.jdbc.kernel.exps.SelectConstructor.evaluate(SelectConstructor.java:94)
	at org.apache.openjpa.jdbc.kernel.JDBCStoreQuery.createWhereSelects(JDBCStoreQuery.java:361)
	at org.apache.openjpa.jdbc.kernel.JDBCStoreQuery.executeQuery(JDBCStoreQuery.java:193)
	at org.apache.openjpa.kernel.ExpressionStoreQuery$DataStoreExecutor.executeQuery(ExpressionStoreQuery.java:782)
	at org.apache.openjpa.kernel.QueryImpl.execute(QueryImpl.java:1005)
	at org.apache.openjpa.kernel.QueryImpl.execute(QueryImpl.java:863)
	... 27 more

",,,,,,,,,,,,,02/Mar/11 16:45;curtisr7;openjpa-1954.jar;https://issues.apache.org/jira/secure/attachment/12472434/openjpa-1954.jar,02/Mar/11 16:43;curtisr7;openjpa-1954.jar;https://issues.apache.org/jira/secure/attachment/12472433/openjpa-1954.jar,,,,,,2.0,,,,,,,,,,,,,,,,,,,2013-10-17 19:56:09.295,,,no_permission,,,,,,,,,,,2374,,,Thu Oct 17 19:56:09 UTC 2013,,,,,,,0|i0z0mf:,202403,,,,,,,,02/Mar/11 16:43;curtisr7;Uploading patch.,02/Mar/11 16:45;curtisr7;Attaching a jar with the required change.,02/Mar/11 20:58;curtisr7;Fixed FieldMapping and DBDictionary to use defining metadata rather than declared metadata to get the version.,02/Mar/11 20:59;curtisr7;Committed revision 1076370 to trunk.,13/Jul/11 16:11;curtisr7;Closing resolved issues.,"17/Oct/13 19:56;jira-bot;Commit 1533233 from [~jpaheath] in branch 'openjpa/branches/2.1.x'
[ https://svn.apache.org/r1533233 ]

OPENJPA-1954: ArrayIndexOutOfBoundsException when querying on a version field that is in a MappedSuperclass - back ported to 2.1.x Rick Curtis's commit to trunk.",,,,,,,,,,,,
Can not merge entity with nested embeddable,OPENJPA-1226,12432220,Bug,Resolved,OPENJPA,OpenJPA,software,struberg,"Implementation of Java persistence, including the Java Persistence API JSR-220 (JPA 1.0) and JSR-317 (JPA 2.0).",http://openjpa.apache.org,Major,Fixed,,faywang,faywang,05/Aug/09 00:12,10/Apr/13 19:57,13/Mar/19 23:09,10/Apr/13 19:57,,,,,,,,,,,,,,,,,,,,1.2.3,2.0.0-M3,,,,,,kernel,,,,0,,"When an entity has nested embeddables, the merge operation fails with the following exception:

org.apache.openjpa.persistence.ArgumentException:
Cannot manipulate identity of type ""com.ibm.wssvt.acme.annuity.common.bean.jpa.Address"": it's identity type is unknown.
        at org.apache.openjpa.kernel.StateManagerImpl.<init>(StateManagerImpl.java:173)
        at org.apache.openjpa.kernel.BrokerImpl.embed(BrokerImpl.java:2770)
        at org.apache.openjpa.kernel.DetachedStateManager.attach(DetachedStateManager.java:106)
        at org.apache.openjpa.kernel.AttachManager.attach(AttachManager.java:251)
        at org.apache.openjpa.kernel.DetachedStateManager.attach(DetachedStateManager.java:244)
        at org.apache.openjpa.kernel.AttachManager.attach(AttachManager.java:251)
        at org.apache.openjpa.kernel.AttachStrategy.attachMap(AttachStrategy.java:462)
        at org.apache.openjpa.kernel.DetachedStateManager.attach(DetachedStateManager.java:269)
        at org.apache.openjpa.kernel.AttachManager.attach(AttachManager.java:251)
        at org.apache.openjpa.kernel.AttachManager.attach(AttachManager.java:104)
        at org.apache.openjpa.kernel.BrokerImpl.attach(BrokerImpl.java:3346)
        at org.apache.openjpa.kernel.DelegatingBroker.attach(DelegatingBroker.java:1176)
        at org.apache.openjpa.persistence.EntityManagerImpl.merge(EntityManagerImpl.java:852)",,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-02-08 14:06:46.301,,,no_permission,,,,,,,,,,,161503,,,Mon Feb 08 14:06:46 UTC 2010,,,,,,,0|i0z92n:,203772,,,,,,,,"08/Feb/10 14:06;urbanq;In openJPA-1.2.1 version it still exist:
setters are omitted..

@Embeddable
public class Address
{
    private String street;

    private String homeNr;

    private String placeNr;

    private String city;

    private String zip;
    
    @Column(name = ""street"")
    public String getStreet()
    {
        return street;
    }

    @Column(name = ""home_nr"")
    public String getHomeNr()
    {
        return homeNr;
    }

    @Column(name = ""place_nr"")
    public String getPlaceNr()
    {
        return placeNr;
    }

    @Column(name = ""city"")
    public String getCity()
    {
        return city;
    }

    @Column(name = ""zip"")
    public String getZip()
    {
        return zip;
    }
}

@Embeddable
public class Invoice
{
    private String name;
    private Address address = new Address();
    private String nip;
    
    @Column(name = ""invoice_name"")
    public String getName()
    {
        return name;
    }
    
    @Embedded
    @AttributeOverrides({
      @AttributeOverride(name = ""street"",  column = @Column(name = ""invoice_address_street"")),
      @AttributeOverride(name = ""homeNr"",  column = @Column(name = ""invoice_address_home_nr"")),
      @AttributeOverride(name = ""placeNr"", column = @Column(name = ""invoice_address_place_nr"")),
      @AttributeOverride(name = ""city"",    column = @Column(name = ""invoice_address_city"")),
      @AttributeOverride(name = ""zip"",     column = @Column(name = ""invoice_address_zip""))
    })
    public Address getAddress()
    {
        return address;
    }
    
    @Column(name = ""invoice_nip"")
    public String getNip()
    {
        return nip;
    }
}

@Embeddable
public class Modification
{
    private Date createdAt;
    private Date updatedAt;
    
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = ""created_at"")
    public Date getCreatedAt()
    {
        return createdAt;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = ""updated_at"")
    public Date getUpdatedAt()
    {
        return updatedAt;
    }
    
    public static Modification currentDate()
    {
        Modification result = new Modification();
        Date date = new Date();
        result.setCreatedAt(date);
        result.setUpdatedAt(date);
        return result;
    }
}

@MappedSuperclass
public abstract class BaseID
{
    private Integer id;
    private Integer flag;
    private Modification modification;
    
    @Id
    @GeneratedValue(strategy=GenerationType.IDENTITY)
    @Column(name = ""id"")
    public Integer getId()
    {
        return id;
    }
    
    @Column(name = ""flag"")
    public Integer getFlag()
    {
        return flag;
    }
    
    @Embedded
    public Modification getModification()
    {
        return modification;
    }
}

@Entity
@Table(name = ""offline_app_users_payment"")
public class OfflineUserPayment extends BaseID
{
    private Date paymentDate;
    private Users user;
    private Payment payment;
    private Integer status;
    private String transaction;
    private Invoice invoice;
    
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = ""payment_date"")
    public Date getPaymentDate()
    {
        return paymentDate;
    }
    
    @ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name=""user_id"")
    public Users getUser()
    {
        return user;
    }
    
    @ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name=""payment_id"")
    public Payment getPayment()
    {
        return payment;
    }
    
    @Column(name = ""status"")
    public Integer getStatus()
    {
        return status;
    }
    
    @Column(name = ""transaction_id"")
    public String getTransaction()
    {
        return transaction;
    }
    
    @Embedded
    public Invoice getInvoice()
    {
        return invoice;
    }
}
Using merge on new object (should generate database insert):
OfflineUserPayment newUserPayment = new OfflineUserPayment();
        newUserPayment.setFlag(1);
        newUserPayment.setModification(Modification.currentDate());
        newUserPayment.setPayment(payment);
        newUserPayment.setPaymentDate(null);
        newUserPayment.setStatus(-1);
        newUserPayment.setUser(user);
            Invoice invoice = new Invoice();
            invoice.setName(remoteInvoice.getName());
            invoice.setNip(remoteInvoice.getNip());
            invoice.getAddress().setStreet(remoteInvoice.getStreet());
            invoice.getAddress().setHomeNr(remoteInvoice.getHomeNr());
            invoice.getAddress().setPlaceNr(remoteInvoice.getPlaceNr());
            invoice.getAddress().setCity(remoteInvoice.getCity());
            invoice.getAddress().setZip(remoteInvoice.getZip());
            newUserPayment.setInvoice(invoice);
     getEntityManager().merge(newUserPayment);

///Stacktrace:
<openjpa-1.2.1-r752877:753278 nonfatal user error> org.apache.openjpa.persistence.ArgumentException: Cannot manipulate identity of type ""com.net.recepty.webservice.server.domain.Address"": it's identity type is unknown.
	at org.apache.openjpa.kernel.StateManagerImpl.<init>(StateManagerImpl.java:162)
	at org.apache.openjpa.kernel.BrokerImpl.embed(BrokerImpl.java:2653)
	at org.apache.openjpa.kernel.VersionAttachStrategy.attach(VersionAttachStrategy.java:93)
	at org.apache.openjpa.kernel.AttachManager.attach(AttachManager.java:241)
	at org.apache.openjpa.kernel.AttachStrategy.attachField(AttachStrategy.java:202)
	at org.apache.openjpa.kernel.VersionAttachStrategy.attach(VersionAttachStrategy.java:153)
	at org.apache.openjpa.kernel.AttachManager.attach(AttachManager.java:241)
	at org.apache.openjpa.kernel.AttachStrategy.attachField(AttachStrategy.java:202)
	at org.apache.openjpa.kernel.VersionAttachStrategy.attach(VersionAttachStrategy.java:153)
	at org.apache.openjpa.kernel.AttachManager.attach(AttachManager.java:241)
	at org.apache.openjpa.kernel.AttachManager.attach(AttachManager.java:101)
	at org.apache.openjpa.kernel.BrokerImpl.attach(BrokerImpl.java:3212)
	at org.apache.openjpa.kernel.DelegatingBroker.attach(DelegatingBroker.java:1158)
	at org.apache.openjpa.persistence.EntityManagerImpl.merge(EntityManagerImpl.java:769)",,,,,,,,,,,,,,,,,
Failed transactions must generate more focussed (and accurate) message for the cause,OPENJPA-1160,12429621,Bug,Resolved,OPENJPA,OpenJPA,software,struberg,"Implementation of Java persistence, including the Java Persistence API JSR-220 (JPA 1.0) and JSR-317 (JPA 2.0).",http://openjpa.apache.org,Major,Fixed,ppoddar@apache.org,ppoddar@apache.org,ppoddar@apache.org,06/Jul/09 15:50,28/Mar/13 15:30,13/Mar/19 23:09,28/Mar/13 15:30,,,,,,,,,,,,,,,,,,,,2.0.0,,,,,,,kernel,,,,0,,"OptimisticException is overused as a generic cause of many kinds of failure during a commit or flush (which at times are not directly related to a optimistic concurrency violation per se).
Given that the error message is often the first handle to analyze a fault, we should 
a) analyze all places that raise OptimisticLockexception 
b) attempt to narrow the exception or at least provide a differentiated message for the cause to the user",,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,161442,,,2009-07-06 15:50:54.0,,,,,,,0|i1ds6f:,288662,,,,,,,,,,,,,,,,,,,,,,,,,
Unique colums automatically defined as non-nullable,OPENJPA-1387,12440619,Bug,Resolved,OPENJPA,OpenJPA,software,struberg,"Implementation of Java persistence, including the Java Persistence API JSR-220 (JPA 1.0) and JSR-317 (JPA 2.0).",http://openjpa.apache.org,Major,Fixed,jpaheath,dirichs,dirichs,13/Nov/09 14:50,23/Jan/13 23:41,13/Mar/19 23:09,23/Jan/13 23:41,1.2.3,2.0.0-M3,,,,,,,,,,,,,,,,,,1.2.3,2.0.0-beta,,,,,,sql,,,,0,,"Any unique constraint declared with OpenJPA implicitly sets the respective columns to be non-null. This is a problem if OpenJPA's mapping tool is used to create the database schema. Even if something like @Column(nullable=true) is explicitly stated, the columns will always be created by OpenJPA as not null.

Modifying the database schema manually to make the columns nullable is a possible workaround. It does not seem to cause any problems with either OpenJPA or the databases.

I would suggest to drop the marking of unique columns as not nullable. This is done by removing the corresponding code lines in org.apache.openjpa.jdbc.schema.Unique (trivial patch appended to this issue). If someone wants a unique column to be not nullable, this can be specified explicitly with @Column(nullable=false) as usual.

I can only speculate about the reason this strange coupling of unique and nullable had been introduced into OpenJPA. To my knowledge, it is perfectly legal use to have unique contraints on nullable columns. In effect this means that there may be multiple rows with null values, whilst all rows with non-null values have to be unique. ANSI SQL-92 also explicitly mentions nullable unique columns and states that this is a crucial difference between PRIMARY KEY columns and UNIQUE columns: the former are always not nullable, the latter may be nullable.

This issue also pops up again and again in the user discussions, without (to my knowledge) a single authorative answer to why this behaviour is as it is in OpenJPA. Two examples:
My question, which remained unanswered:
http://n2.nabble.com/Unique-colums-automatically-made-NOT-NULL-td2827809.html
Another users question, about a month later:
http://n2.nabble.com/Nullable-unique-constraints-td3161182.html

",Error happens in every environment.,,,,,,,,,,OPENJPA-1682,OPENJPA-1651,13/Nov/09 14:55;dirichs;OpenJPA-Trunk_OJ1387.patch;https://issues.apache.org/jira/secure/attachment/12424852/OpenJPA-Trunk_OJ1387.patch,05/May/10 10:41;struberg;openjpa-test.zip;https://issues.apache.org/jira/secure/attachment/12443704/openjpa-test.zip,,,,,,2.0,,,,,,,,,,,,,,,,,,,2010-05-05 10:41:01.761,,,no_permission,,,,,,,,,,,161654,,,Wed May 05 15:49:22 UTC 2010,,,Patch Available,,,,0|i0zbqv:,204205,,,,,,,,"16/Nov/09 10:26;dirichs;Just noticed that there exists an exceptional database not capable of unique contraints on nullable fields: Apache Derby, versions up to 10.4.1.3. In 10.4.1.3, this shortcoming was fixed, see here:
http://issues.apache.org/jira/browse/DERBY-3330
OpenJPA currently uses Derby 10.2.2.0 for its test cases. Thus, there are build failures after applying this patch. There are three possibilities of how to deal with this:
1. Eliminate the problem by updating to a more recent Derby version.
2. Modify the test cases so that @Column(nullable=false) is explicitly stated where necessary.
3. Continue to label columns implicitly as non-nullable as database-specific logic. Do it for Derby < 10.4.1.3 and maybe some other database out there I am not aware of, leave it for all others (default).","05/May/10 10:41;struberg;it seems that this bug is still not fixed (tested with latest from SVN).

This test project will show the problems.

There are 2 issues which are not yet resolved

* Unique columns doesn't need to be mandatory (currently they are _always_ generated as NOT NULL)
* NOT NULL columns of type String which are not filled will get stored as empty string (instead of throwing an Exception). See OPENJPA-525",05/May/10 15:24;ppoddar@apache.org;Reopening as per further discussion.,"05/May/10 15:33;struberg;A few tips on my sample project:
The NOT NULL can be checked by simply executing
$> mvn openjpa:sql
which generates the database creation SQL script in
./target/database.sql

to execute the project you need to create the database upfront in MySQL with 
create database TestDb;
user 'root' with no password is assumed (persistence.xml)

After
$> mvn clean install
you will see the myString column as empty string instead of NULL when doing a
mysql> select * from NullFieldTable;
+----+----------+
| PK | myString |
+----+----------+
|  1 |          |
+----+----------+
1 row in set (0.00 sec)
","05/May/10 15:49;mikedd;Once the issue has been marked as fixed in the release notes it's confusing to have it show up again. Rather than using the same issue I've created  a new JIRA (OPENJPA-1651) to discuss the new variation.. 

I'm re-closing this one. Sorry for the noise. ",,,,,,,,,,,,,
Use of XMLValueHandler results in a NullPointerException when classloader does not provide package support,OPENJPA-2124,12542018,Bug,Resolved,OPENJPA,OpenJPA,software,struberg,"Implementation of Java persistence, including the Java Persistence API JSR-220 (JPA 1.0) and JSR-317 (JPA 2.0).",http://openjpa.apache.org,Major,Fixed,helenxu,helenxu,helenxu,09/Feb/12 20:00,10/Feb/12 15:56,13/Mar/19 23:09,10/Feb/12 15:56,2.0.0,2.0.1,2.1.0,2.3.0,,,,,,,,,,,,,,,,2.2.0,,,,,,,jdbc,,,,0,,"XMLValueHandler is used to convert xml content from database to java object.  It threw NullPointerException from XMLValueHandler.toObjectValue() when class loader does not provide package support.

Basically getPackage() function call in XMLValueHandler.toObjectValue returns null.

The fix is to parse the entity class name directly to retrieve the package name.",JEE Environment,,14400,14400,,0%,14400,14400,,,,,09/Feb/12 20:08;helenxu;OPENJPA_2124.patch.txt;https://issues.apache.org/jira/secure/attachment/12513997/OPENJPA_2124.patch.txt,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-02-09 21:54:43.346,,,no_permission,,,,,,,,,,,227305,,,Fri Feb 10 15:56:26 UTC 2012,,,Patch Available,,,,0|i0ytzb:,201327,,,,,,,,09/Feb/12 21:54;techhusky;Committed patch for Helen (with minor cleanup) under revision 1242547.,10/Feb/12 15:56;helenxu;fix checked in by Jeramy under revision 1242547,,,,,,,,,,,,,,,,
Recent changes have caused problems building with IBM JDK,OPENJPA-429,12381666,Bug,Resolved,OPENJPA,OpenJPA,software,struberg,"Implementation of Java persistence, including the Java Persistence API JSR-220 (JPA 1.0) and JSR-317 (JPA 2.0).",http://openjpa.apache.org,Major,Fixed,kwsutter,kwsutter,kwsutter,02/Nov/07 00:47,12/Jan/12 21:58,13/Mar/19 23:09,12/Jan/12 21:58,1.1.0,,,,,,,,,,,,,,,,,,,1.1.0,,,,,,,build / infrastructure,,,,0,,"This started on the dev mailing list:  http://www.nabble.com/build-error-with-trunk-tf4733970.html

Trunk (1.1.0) is not building with the IBM JDK.  It is building okay with the Sun JDK.  It's not always consistent, but an example call stack is as follows:

2000  test  WARN   [main] openjpa.Enhance - Type ""class org.apache.openjpa.enhance.TestEnhancementConfiguration"" has no metadata; enhancing as persistence aware. If you intended for ""class org.apache.openjpa.enhance.TestEnhancementConfiguration"" to be persistence-capable, then this means that OpenJPA could not find any metadata for ""class org.apache.openjpa.enhance.TestEnhancementConfiguration"".
This can happen if the directory containing your metadata is not in your CLASSPATH, or if your metadata files are not named properly. See the documentation on metadata placement for more information.
java.lang.ClassFormatError
        at java.lang.ClassLoader.defineClassImpl(Native Method)
        at java.lang.ClassLoader.defineClass(ClassLoader.java:228)
        at java.lang.ClassLoader.defineClass(ClassLoader.java:163)
        at org.apache.openjpa.lib.util.TemporaryClassLoader.loadClass(TemporaryClassLoader.java:78)
        at org.apache.openjpa.lib.util.TemporaryClassLoader.loadClass(TemporaryClassLoader.java:44)
        at com.ibm.oti.reflect.AnnotationHelper.getReturnValueFromEntry(NativeMethod)
        at com.ibm.oti.reflect.AnnotationHelper.access$000(AnnotationHelper.java:14)
        at com.ibm.oti.reflect.AnnotationHelper$AnnotationInvocationHandler.invoke(AnnotationHelper.java:104)
        at $Proxy27.value(Unknown Source)
        at org.apache.openjpa.persistence.AnnotationPersistenceMetaDataParser.parseReadOnly(AnnotationPersistenceMetaDataParser.java:1145)
        at org.apache.openjpa.persistence.AnnotationPersistenceMetaDataParser.parseMemberAnnotations(AnnotationPersistenceMetaDataParser.java:1105)
        at org.apache.openjpa.persistence.AnnotationPersistenceMetaDataParser.parseClassAnnotations(AnnotationPersistenceMetaDataParser.java:606)
        at org.apache.openjpa.persistence.AnnotationPersistenceMetaDataParser.parse(AnnotationPersistenceMetaDataParser.java:351)
        at org.apache.openjpa.persistence.PersistenceMetaDataFactory.load(PersistenceMetaDataFactory.java:229)
        at org.apache.openjpa.meta.MetaDataRepository.getMetaDataInternal(MetaDataRepository.java:470)
        at org.apache.openjpa.meta.MetaDataRepository.getMetaData(MetaDataRepository.java:290)
        at org.apache.openjpa.enhance.PCEnhancer.<init>(PCEnhancer.java:240)
        at org.apache.openjpa.enhance.PCEnhancer.run(PCEnhancer.java:4344)
        at org.apache.openjpa.ant.PCEnhancerTask.executeOn(PCEnhancerTask.java:89)
        at org.apache.openjpa.lib.ant.AbstractTask.execute(AbstractTask.java:172)
        at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:275)
        at org.apache.tools.ant.Task.perform(Task.java:364)
        at org.apache.tools.ant.Target.execute(Target.java:341)
        at org.apache.maven.plugin.antrun.AbstractAntMojo.executeTasks(AbstractAntMojo.java:108)
        at org.apache.maven.plugin.antrun.AntRunMojo.execute(AntRunMojo.java:83)
        at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:443)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:539)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:480)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:459)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:311)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:278)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:143)
        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:334)
        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:125)
        at org.apache.maven.cli.MavenCli.main(MavenCli.java:272)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:615)
        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)
        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)
        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)
        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)
[INFO]
------------------------------------------------------------------------
[ERROR] BUILD ERROR
[INFO]
------------------------------------------------------------------------
[INFO] Error executing ant tasks

Embedded error: java.lang.ClassFormatError
",,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,160751,,,Thu Jan 12 21:58:39 UTC 2012,,,,,,,0|i0yu0v:,201334,,,,,,,,"13/Nov/07 14:47;kwsutter;I've narrowed the problem down to the @ReadOnly annotation processing.  Although we have had this annotation for quite some time in OpenJPA, some recent test additions just surfaced this problem.  Entity class org.apache.openjpa.persistence.jdbc.annotations.ExtensionsEntity uses the @ReadOnly annotation.  For some reason, the IBM JDK is having problems loading the UpdateAction class necessary for the ""value"" parameter.  I've tried experimenting with this annotation definition and usage to see if I could workaround the problem, but nothing yet.  I will follow up with the IBM JDK team to see how we can get this resolved.

I am currently running with SR5 of the IBM JDK:

java full version ""J2RE 1.5.0 IBM Windows 32 build pwi32dev-20070511 (SR5)""

According to the posts that Mike made on the dev mailing list, he also tried with a newer version of the JDK.  I will need to verify that before I can post a problem report to the IBM JDK anyway.

Kevin","13/Nov/07 16:41;kwsutter;From the mailing list:

There seems to be a problem with JIRA right now, so I will just post
here that this scenario also fails with the latest SR6b of the IBM JDK
version 5:

java full version ""J2RE 1.5.0 IBM Windows 32 build pwi32devifx-20071025 (SR6b)""

I have created the PMR with the IBM JDK for follow-up...

Kevin","27/Nov/07 23:28;kwsutter;Making some progress on this Issue, but still don't have it nailed.  I have determined that this problem only exists with the IBM JDK because the UpdateAction enum class is not loaded until it is used by the IBM JDK.  With the Sun JDK, the UpdateAction enum is loaded when the ReadOnly annotation is loaded.  Thus, we avoid this whole path.

When the UpdateAction enum is attempted to be loaded (using the IBM JDK), we are using the TemporaryClassLoader because that is set on the Parser.  The use of the TCL for this loading is causing a problem when attempting to defineClass via this code snippet:

        String resourceName = name.replace('.', '/') + "".class"";
        InputStream resource = getResourceAsStream(resourceName);
        if (resource == null)
            throw new ClassNotFoundException(name);

        ByteArrayOutputStream bout = new ByteArrayOutputStream();
        byte[] b = new byte[1024];
        try {
            for (int n = 0; (n = resource.read(b, 0, b.length)) != -1;
                bout.write(b, 0, n))
                ;
            byte[] classBytes = bout.toByteArray();
            if (isAnnotation(classBytes))
                return Class.forName(name, resolve, getClass().
                    getClassLoader());

            try {
                return defineClass(name, classBytes, 0, classBytes.length);
            } catch (SecurityException e) {
                // possible prohibited package: defer to the parent
                return super.loadClass(name, resolve);
            }
        } catch (IOException ioe) {
            // defer to the parent
            return super.loadClass(name, resolve);
        }

The call to defineClass ends up with the ClassFormatError.

I found the ""magic"" option on the PCEnhancer to turn off the use of the TCL (-tcl false) and the ClassFormatError goes away.  :-)

The TCL is set on the parser in the load() method of the PersistenceMetaDataFactory:

        AnnotationPersistenceMetaDataParser parser = getAnnotationParser();
        parser.setEnvClassLoader(envLoader);
        parser.setMode(mode);
        parser.parse(cls);

I've run out of time today, but if somebody could explain why this ""magic"" option of turning off the TCL exists, maybe it will help me with determining the source of our problem with the IBM JDK.  Normal usage of the TCL seems to work just fine, but using it to load this enum class seems to blow chunks.  Any ideas for further debugging would be appreciated.

Thanks,
Kevin","09/Feb/08 20:13;kwsutter;It took a while, but I think we are close to getting a resolution to this Issue.  I just tested a patch for the IBM JDK and we can now successfully process the @ReadOnly annotation.  As expected, there was confusion with the classloaders when loading the ReadOnly annotation and the associated UpdateAction type.  Hopefully, this problem will be part of the IBM JDK v5 SR7 release.  I'll post more when I find out definitely.","12/Jan/12 21:58;kwsutter;This issue has long since been resolved.  There was a glitch with an earlier version of the IBM JDK, but that was resolved many moons ago...",,,,,,,,,,,,,
openjpa-maven-plugin IT tests try to resolve unbuilt repository,OPENJPA-2088,12534172,Bug,Resolved,OPENJPA,OpenJPA,software,struberg,"Implementation of Java persistence, including the Java Persistence API JSR-220 (JPA 1.0) and JSR-317 (JPA 2.0).",http://openjpa.apache.org,Major,Fixed,,struberg,struberg,07/Dec/11 12:00,07/Dec/11 16:06,13/Mar/19 23:09,07/Dec/11 16:06,2.0.2,,,,,,,,,,,,,,,,,,,2.0.2,,,,,,,build / infrastructure,,,,0,,"When building openjpa on a clean checkout and _after_ cleaning the local maven repo via

$> rm -rf ~/.m2/repository/org/apache/openjpa/

I get the following Exception

{noformat}
[ERROR] Failed to execute goal on project enhance: Could not resolve dependencies for project org.apache.openjpa.tools.openjpa-maven-plugin.testing:enhance:jar:1.0-SNAPSHOT: Could not find artifact org.apache.openjpa:openjpa:jar:2.2.0-SNAPSHOT in local.central (file:////Users/struberg/.m2/repository) -> [Help 1]
org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal on project enhance: Could not resolve dependencies for project org.apache.openjpa.tools.openjpa-maven-plugin.testing:enhance:jar:1.0-SNAPSHOT: Could not find artifact org.apache.openjpa:openjpa:jar:2.2.0-SNAPSHOT in local.central (file:////Users/struberg/.m2/repository)
        at org.apache.maven.lifecycle.internal.LifecycleDependencyResolver.getDependencies(LifecycleDependencyResolver.java:210)
        at org.apache.maven.lifecycle.internal.LifecycleDependencyResolver.resolveProjectDependencies(LifecycleDependencyResolver.java:117)
        at org.apache.maven.lifecycle.internal.MojoExecutor.ensureDependenciesAreResolved(MojoExecutor.java:258)
{noformat}

This indicates a cycle in our build structure. 
The openjpa-maven-plugin and all it's ITs should only directly use openjpa-kernel and similar fundamental parts.

It seems that we already have the dependencies defined correctly, as maven perfectly unloops the needed parts already:
[INFO] OpenJPA Parent POM ................................ SUCCESS [7.846s]
[INFO] OpenJPA Utilities Library ......................... SUCCESS [12.714s]
[INFO] OpenJPA Kernel .................................... SUCCESS [9.250s]
[INFO] OpenJPA JDBC ...................................... SUCCESS [5.160s]
[INFO] OpenJPA Persistence ............................... SUCCESS [4.125s]
[INFO] OpenJPA Persistence JDBC .......................... SUCCESS [10:36.519s]
[INFO] OpenJPA Persistence Locking Tests ................. SUCCESS [23:39.345s]
[INFO] OpenJPA tools ..................................... SUCCESS [0.198s]
[INFO] OpenJPA Maven Plugin .............................. FAILURE [20.854s]
",,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-12-07 16:05:37.369,,,no_permission,,,,,,,,,,,219894,,,Wed Dec 07 16:06:51 UTC 2011,,,,,,,0|i0kpqn:,118987,,,,,,,,"07/Dec/11 12:39;struberg;please note that it's important to use the maven-offline mode for compiling!

$> mvn clean install -o

Otherwise the dependency openjpa:openjpa:jar will get resolved from the apache snapshots repository. But this would not work while creating a new release.","07/Dec/11 16:05;kwsutter;Perfect timing, Mark!  We just discovered this same issue.  Although it was discussed previously in our mailing list [1] -- we just didn't act on the result.  Since we are considering a 2.2.0 release, this JIRA is very pertinent.  Thanks.

[1]  http://openjpa.208410.n2.nabble.com/New-modules-for-OpenJPA-tools-tc5327294.html",07/Dec/11 16:06;struberg;openjpa builds now fine without any cyclic build dependencies,,,,,,,,,,,,,,,
NPE is thrown when an Embeddable object is set more than once to a managed entity,OPENJPA-1890,12480255,Bug,Resolved,OPENJPA,OpenJPA,software,struberg,"Implementation of Java persistence, including the Java Persistence API JSR-220 (JPA 1.0) and JSR-317 (JPA 2.0).",http://openjpa.apache.org,Major,Fixed,faywang,faywang,faywang,17/Nov/10 20:57,12/Jan/11 23:03,13/Mar/19 23:09,12/Jan/11 23:03,2.0.1,,,,,,,,,,,,,,,,,,,2.0.2,2.1.0,,,,,,,,,,0,,"java.lang.NullPointerException
	at org.apache.openjpa.kernel.SingleFieldManager.dereferenceEmbedDependent(SingleFieldManager.java:432)
	at org.apache.openjpa.kernel.SingleFieldManager.delete(SingleFieldManager.java:317)
	at org.apache.openjpa.kernel.SingleFieldManager.dereferenceDependent(SingleFieldManager.java:294)
	at org.apache.openjpa.kernel.StateManagerImpl.settingObjectField(StateManagerImpl.java:2031)
	at embeddable.Department.pcSetdepartmentEmbeddable(Department.java)
	at embeddable.Department.setDepartmentEmbeddable(Department.java:62)
	at embeddable.TestEmbeddable.testFind(TestEmbeddable.java:52)

where:

private DepartmentEmbeddable makeEmbeddable() {
 		 DepartmentEmbeddable d1 = new DepartmentEmbeddable();
 		 d1.setDeptname(""name"");
 		 d1.setMgrno(""qw"");
 		 return d1;
 }

 @Override
 public void test() {
 		 Department d = em.find(Department.class, ""1"");
 		 DepartmentEmbeddable d2 = new DepartmentEmbeddable();
 		 d.setDepartmentEmbeddable(makeEmbeddable());
 		 d.setDepartmentEmbeddable(makeEmbeddable()); <== NPE is thrown
 }",,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-11-30 19:42:33.631,,,no_permission,,,,,,,,,,,162119,,,Wed Jan 12 23:03:14 UTC 2011,,,,,,,0|i0ytfj:,201238,,,,,,,,30/Nov/10 19:42;mikedd;reopening to target for 2.0.2,"12/Jan/11 23:03;mikedd;If there's more work to be done for this issue please re-open, or open a sub task for the remaining work. ",,,,,,,,,,,,,,,,
NPE in MappingInfo.java line 1514,OPENJPA-1804,12474490,Bug,Resolved,OPENJPA,OpenJPA,software,struberg,"Implementation of Java persistence, including the Java Persistence API JSR-220 (JPA 1.0) and JSR-317 (JPA 2.0).",http://openjpa.apache.org,Major,Fixed,drwoods,wboyce@panix.com,wboyce@panix.com,18/Sep/10 19:54,12/Jan/11 23:03,13/Mar/19 23:09,12/Jan/11 23:03,2.0.1,,,,,,,,,,,,,,,,,,,2.1.0,,,,,,,Enhance,UnenhancedClasses,usability,,0,,"I am encountering a NPE at MappingInfo.java line 1514.  I'm sorry I don't have time to prepare a test case right now.  I'm not even 100% sure what is causing the problem, but it seems to be something like this:

I have classes Organization, Group, User, and AddressBook.

Group has a reference (many-to-one) to Organization.

I'm using field-level access and the Java 6 runtime enhancer.  (NOT the build-time enhancer or the agent.)

In ManagedClassSubclasser.prepareUnenhancedClasses, the code receives a list of Class objects--the ones in persistence.xml.  They are not in the same order as they are in persistence.xml, but I don't know if that's important.  The first one is Group.  During the processing of Group, the code invokes ClassMapping.setTable to set the table name, which is ""group_table.""  This comes from the @Table annotation of Group.  So far, so good.  Then the code does some additional processing on the relationship mappings of Group, which include the reference to Organization.  During the processing of that relationship, the code calls MappingInfo.mergeJoinColumn.  On line 1367, the method calls rel.getTable.  The ""rel"" variable points to the ClassMapping for Organization.  Remember that prepareUnenhancedClasses hasn't gotten to Organization yet--it's still working on Group--and so I assume that this Organization mapping was created on-demand.  However, rel.getTable returns null.  The Organization class has a @Table attribute, and I can see that the table name has been loaded in the ClassMappingInfo instance attached to the ClassMapping for Organization, however the table name has not yet been copied from ClassMappingInfo to ClassMapping.  Later, the mergeJoinColumn method attempts to dereference the null table name and generates the NPE.

Bottom line:  When using the Java 6, runtime enhancer, if class A has a reference to class B, and both classes have @Table annotations (at least), and class A is processed first, then it produces a NPE.
",,,,,,,,,,,,,22/Sep/10 11:10;wboyce@panix.com;openjpatest.tar.gz;https://issues.apache.org/jira/secure/attachment/12455249/openjpatest.tar.gz,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-09-20 12:30:10.254,,,no_permission,,,,,,,,,,,162044,,,Wed Jan 12 23:03:10 UTC 2011,,,,,,,0|i0ytef:,201233,,,,,,,,"18/Sep/10 20:09;wboyce@panix.com;Stack trace:

Internal error: Errors encountered while resolving metadata.  See nested exceptions for details.
<openjpa-2.0.1-r422266:989424 fatal user error> org.apache.openjpa.persistence.ArgumentException: Errors encountered while resolving metadata.  See nested exceptions for details.
	at org.apache.openjpa.meta.MetaDataRepository.resolve(MetaDataRepository.java:642)
	at org.apache.openjpa.meta.MetaDataRepository.getMetaDataInternal(MetaDataRepository.java:385)
	at org.apache.openjpa.meta.MetaDataRepository.getMetaData(MetaDataRepository.java:358)
	at org.apache.openjpa.enhance.PCEnhancer.<init>(PCEnhancer.java:256)
	at org.apache.openjpa.enhance.PCEnhancer.<init>(PCEnhancer.java:227)
	at org.apache.openjpa.enhance.PCEnhancer.<init>(PCEnhancer.java:195)
	at org.apache.openjpa.enhance.ManagedClassSubclasser.prepareUnenhancedClasses(ManagedClassSubclasser.java:134)
	at org.apache.openjpa.kernel.AbstractBrokerFactory.loadPersistentTypes(AbstractBrokerFactory.java:317)
	at org.apache.openjpa.kernel.AbstractBrokerFactory.initializeBroker(AbstractBrokerFactory.java:241)
	at org.apache.openjpa.kernel.AbstractBrokerFactory.newBroker(AbstractBrokerFactory.java:215)
	at org.apache.openjpa.kernel.DelegatingBrokerFactory.newBroker(DelegatingBrokerFactory.java:156)
	at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:227)
	at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:154)
	at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:60)
	at com.signetworks.signs.util.db.Database$.createEntityManager(Database.scala:75)
	at com.signetworks.signs.util.db.Database$.withEntityManager(Database.scala:72)
	at com.signetworks.signs.util.db.Database$.unique(Database.scala:40)
	at com.signetworks.v3.servlet.V3Servlet.dispatchRequestInSession(V3Servlet.scala:63)
	at com.signetworks.dance.http.RequestDispatcher$$anonfun$dispatchRequest$3$$anonfun$apply$1.apply(RequestDispatcher.scala:32)
	at com.signetworks.dance.http.RequestDispatcher$$anonfun$dispatchRequest$3$$anonfun$apply$1.apply(RequestDispatcher.scala:32)
	at com.signetworks.dance.http.SynchronizedSessionBinder$$anonfun$bindSession$1.apply(SynchronizedSessionBinder.scala:21)
	at com.signetworks.dance.http.SynchronizedSessionBinder$$anonfun$bindSession$1.apply(SynchronizedSessionBinder.scala:21)
	at com.signetworks.dance.util.ThreadBoundValue.withValue(ThreadBoundValue.scala:38)
	at com.signetworks.dance.http.SynchronizedSessionBinder$class.bindSession(SynchronizedSessionBinder.scala:21)
	at com.signetworks.v3.servlet.V3Servlet.bindSession(V3Servlet.scala:31)
	at com.signetworks.dance.http.RequestDispatcher$$anonfun$dispatchRequest$3.apply(RequestDispatcher.scala:31)
	at com.signetworks.dance.http.RequestDispatcher$$anonfun$dispatchRequest$3.apply(RequestDispatcher.scala:31)
	at scala.Option.getOrElse(Option.scala:59)
	at com.signetworks.dance.http.RequestDispatcher$class.dispatchRequest(RequestDispatcher.scala:30)
	at com.signetworks.v3.servlet.V3Servlet.dispatchRequest(V3Servlet.scala:31)
	at com.signetworks.dance.http.RequestDispatcher$class.handleRequest(RequestDispatcher.scala:22)
	at com.signetworks.v3.servlet.V3Servlet.handleRequest(V3Servlet.scala:31)
	at com.signetworks.dance.http.DanceServlet$$anonfun$service$1$$anonfun$apply$mcV$sp$1.apply(DanceServlet.scala:47)
	at com.signetworks.dance.http.DanceServlet$$anonfun$service$1$$anonfun$apply$mcV$sp$1.apply(DanceServlet.scala:46)
	at com.signetworks.dance.http.DanceServlet$$anonfun$bindRequest$1.apply$mcV$sp(DanceServlet.scala:63)
	at com.signetworks.dance.http.DanceServlet$$anonfun$bindRequest$1.apply(DanceServlet.scala:63)
	at com.signetworks.dance.http.DanceServlet$$anonfun$bindRequest$1.apply(DanceServlet.scala:63)
	at com.signetworks.dance.util.ThreadBoundValue.withValue(ThreadBoundValue.scala:38)
	at com.signetworks.dance.http.DanceServlet.bindRequest(DanceServlet.scala:63)
	at com.signetworks.dance.http.DanceServlet$$anonfun$service$1.apply$mcV$sp(DanceServlet.scala:45)
	at com.signetworks.dance.http.DanceServlet$$anonfun$service$1.apply(DanceServlet.scala:45)
	at com.signetworks.dance.http.DanceServlet$$anonfun$service$1.apply(DanceServlet.scala:45)
	at com.signetworks.dance.util.ThreadBoundValue.withValue(ThreadBoundValue.scala:38)
	at com.signetworks.dance.http.DanceServlet.service(DanceServlet.scala:42)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:847)
	at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1523)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:279)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:188)
	at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:641)
	at com.sun.enterprise.web.WebPipeline.invoke(WebPipeline.java:97)
	at com.sun.enterprise.web.PESessionLockingStandardPipeline.invoke(PESessionLockingStandardPipeline.java:85)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:185)
	at org.apache.catalina.connector.CoyoteAdapter.doService(CoyoteAdapter.java:332)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:233)
	at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:165)
	at com.sun.grizzly.http.ProcessorTask.invokeAdapter(ProcessorTask.java:791)
	at com.sun.grizzly.http.ProcessorTask.doProcess(ProcessorTask.java:693)
	at com.sun.grizzly.http.ProcessorTask.process(ProcessorTask.java:954)
	at com.sun.grizzly.http.DefaultProtocolFilter.execute(DefaultProtocolFilter.java:170)
	at com.sun.grizzly.DefaultProtocolChain.executeProtocolFilter(DefaultProtocolChain.java:135)
	at com.sun.grizzly.DefaultProtocolChain.execute(DefaultProtocolChain.java:102)
	at com.sun.grizzly.DefaultProtocolChain.execute(DefaultProtocolChain.java:88)
	at com.sun.grizzly.http.HttpProtocolChain.execute(HttpProtocolChain.java:76)
	at com.sun.grizzly.ProtocolChainContextTask.doCall(ProtocolChainContextTask.java:53)
	at com.sun.grizzly.SelectionKeyContextTask.call(SelectionKeyContextTask.java:57)
	at com.sun.grizzly.ContextTask.run(ContextTask.java:69)
	at com.sun.grizzly.util.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:330)
	at com.sun.grizzly.util.AbstractThreadPool$Worker.run(AbstractThreadPool.java:309)
	at java.lang.Thread.run(Thread.java:637)
Caused by: <openjpa-2.0.1-r422266:989424 nonfatal user error> org.apache.openjpa.persistence.ArgumentException: No metadata was found for type ""class java.lang.Object"". The class is not enhanced.
	at org.apache.openjpa.meta.MetaDataRepository.getMetaDataInternal(MetaDataRepository.java:377)
	at org.apache.openjpa.meta.MetaDataRepository.getMetaData(MetaDataRepository.java:358)
	at org.apache.openjpa.meta.ClassMetaData.resolveMeta(ClassMetaData.java:1821)
	at org.apache.openjpa.meta.ClassMetaData.resolve(ClassMetaData.java:1786)
	at org.apache.openjpa.meta.ValueMetaDataImpl.resolve(ValueMetaDataImpl.java:435)
	at org.apache.openjpa.jdbc.meta.ValueMappingImpl.resolve(ValueMappingImpl.java:494)
	at org.apache.openjpa.meta.FieldMetaData.resolve(FieldMetaData.java:1732)
	at org.apache.openjpa.jdbc.meta.FieldMapping.resolve(FieldMapping.java:458)
	at org.apache.openjpa.meta.ClassMetaData.resolveMeta(ClassMetaData.java:1852)
	at org.apache.openjpa.meta.ClassMetaData.resolve(ClassMetaData.java:1786)
	at org.apache.openjpa.meta.MetaDataRepository.processBuffer(MetaDataRepository.java:790)
	at org.apache.openjpa.meta.MetaDataRepository.resolveMeta(MetaDataRepository.java:693)
	at org.apache.openjpa.meta.MetaDataRepository.resolve(MetaDataRepository.java:617)
	... 68 more
NestedThrowables:
<openjpa-2.0.1-r422266:989424 fatal user error> org.apache.openjpa.persistence.ArgumentException: Unable to resolve type ""com.signetworks.signs.model.addressbook.AddressBook"" due to previous errors resolving related type ""com.signetworks.signs.model.security.Organization"".
	at org.apache.openjpa.meta.MetaDataRepository.processBuffer(MetaDataRepository.java:804)
	at org.apache.openjpa.meta.MetaDataRepository.resolveMeta(MetaDataRepository.java:693)
	at org.apache.openjpa.meta.MetaDataRepository.resolve(MetaDataRepository.java:617)
	at org.apache.openjpa.meta.MetaDataRepository.getMetaDataInternal(MetaDataRepository.java:385)
	at org.apache.openjpa.meta.MetaDataRepository.getMetaData(MetaDataRepository.java:358)
	at org.apache.openjpa.enhance.PCEnhancer.<init>(PCEnhancer.java:256)
	at org.apache.openjpa.enhance.PCEnhancer.<init>(PCEnhancer.java:227)
	at org.apache.openjpa.enhance.PCEnhancer.<init>(PCEnhancer.java:195)
	at org.apache.openjpa.enhance.ManagedClassSubclasser.prepareUnenhancedClasses(ManagedClassSubclasser.java:134)
	at org.apache.openjpa.kernel.AbstractBrokerFactory.loadPersistentTypes(AbstractBrokerFactory.java:317)
	at org.apache.openjpa.kernel.AbstractBrokerFactory.initializeBroker(AbstractBrokerFactory.java:241)
	at org.apache.openjpa.kernel.AbstractBrokerFactory.newBroker(AbstractBrokerFactory.java:215)
	at org.apache.openjpa.kernel.DelegatingBrokerFactory.newBroker(DelegatingBrokerFactory.java:156)
	at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:227)
	at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:154)
	at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:60)
	at com.signetworks.signs.util.db.Database$.createEntityManager(Database.scala:75)
	at com.signetworks.signs.util.db.Database$.withEntityManager(Database.scala:72)
	at com.signetworks.signs.util.db.Database$.unique(Database.scala:40)
	at com.signetworks.v3.servlet.V3Servlet.dispatchRequestInSession(V3Servlet.scala:63)
	at com.signetworks.dance.http.RequestDispatcher$$anonfun$dispatchRequest$3$$anonfun$apply$1.apply(RequestDispatcher.scala:32)
	at com.signetworks.dance.http.RequestDispatcher$$anonfun$dispatchRequest$3$$anonfun$apply$1.apply(RequestDispatcher.scala:32)
	at com.signetworks.dance.http.SynchronizedSessionBinder$$anonfun$bindSession$1.apply(SynchronizedSessionBinder.scala:21)
	at com.signetworks.dance.http.SynchronizedSessionBinder$$anonfun$bindSession$1.apply(SynchronizedSessionBinder.scala:21)
	at com.signetworks.dance.util.ThreadBoundValue.withValue(ThreadBoundValue.scala:38)
	at com.signetworks.dance.http.SynchronizedSessionBinder$class.bindSession(SynchronizedSessionBinder.scala:21)
	at com.signetworks.v3.servlet.V3Servlet.bindSession(V3Servlet.scala:31)
	at com.signetworks.dance.http.RequestDispatcher$$anonfun$dispatchRequest$3.apply(RequestDispatcher.scala:31)
	at com.signetworks.dance.http.RequestDispatcher$$anonfun$dispatchRequest$3.apply(RequestDispatcher.scala:31)
	at scala.Option.getOrElse(Option.scala:59)
	at com.signetworks.dance.http.RequestDispatcher$class.dispatchRequest(RequestDispatcher.scala:30)
	at com.signetworks.v3.servlet.V3Servlet.dispatchRequest(V3Servlet.scala:31)
	at com.signetworks.dance.http.RequestDispatcher$class.handleRequest(RequestDispatcher.scala:22)
	at com.signetworks.v3.servlet.V3Servlet.handleRequest(V3Servlet.scala:31)
	at com.signetworks.dance.http.DanceServlet$$anonfun$service$1$$anonfun$apply$mcV$sp$1.apply(DanceServlet.scala:47)
	at com.signetworks.dance.http.DanceServlet$$anonfun$service$1$$anonfun$apply$mcV$sp$1.apply(DanceServlet.scala:46)
	at com.signetworks.dance.http.DanceServlet$$anonfun$bindRequest$1.apply$mcV$sp(DanceServlet.scala:63)
	at com.signetworks.dance.http.DanceServlet$$anonfun$bindRequest$1.apply(DanceServlet.scala:63)
	at com.signetworks.dance.http.DanceServlet$$anonfun$bindRequest$1.apply(DanceServlet.scala:63)
	at com.signetworks.dance.util.ThreadBoundValue.withValue(ThreadBoundValue.scala:38)
	at com.signetworks.dance.http.DanceServlet.bindRequest(DanceServlet.scala:63)
	at com.signetworks.dance.http.DanceServlet$$anonfun$service$1.apply$mcV$sp(DanceServlet.scala:45)
	at com.signetworks.dance.http.DanceServlet$$anonfun$service$1.apply(DanceServlet.scala:45)
	at com.signetworks.dance.http.DanceServlet$$anonfun$service$1.apply(DanceServlet.scala:45)
	at com.signetworks.dance.util.ThreadBoundValue.withValue(ThreadBoundValue.scala:38)
	at com.signetworks.dance.http.DanceServlet.service(DanceServlet.scala:42)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:847)
	at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1523)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:279)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:188)
	at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:641)
	at com.sun.enterprise.web.WebPipeline.invoke(WebPipeline.java:97)
	at com.sun.enterprise.web.PESessionLockingStandardPipeline.invoke(PESessionLockingStandardPipeline.java:85)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:185)
	at org.apache.catalina.connector.CoyoteAdapter.doService(CoyoteAdapter.java:332)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:233)
	at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:165)
	at com.sun.grizzly.http.ProcessorTask.invokeAdapter(ProcessorTask.java:791)
	at com.sun.grizzly.http.ProcessorTask.doProcess(ProcessorTask.java:693)
	at com.sun.grizzly.http.ProcessorTask.process(ProcessorTask.java:954)
	at com.sun.grizzly.http.DefaultProtocolFilter.execute(DefaultProtocolFilter.java:170)
	at com.sun.grizzly.DefaultProtocolChain.executeProtocolFilter(DefaultProtocolChain.java:135)
	at com.sun.grizzly.DefaultProtocolChain.execute(DefaultProtocolChain.java:102)
	at com.sun.grizzly.DefaultProtocolChain.execute(DefaultProtocolChain.java:88)
	at com.sun.grizzly.http.HttpProtocolChain.execute(HttpProtocolChain.java:76)
	at com.sun.grizzly.ProtocolChainContextTask.doCall(ProtocolChainContextTask.java:53)
	at com.sun.grizzly.SelectionKeyContextTask.call(SelectionKeyContextTask.java:57)
	at com.sun.grizzly.ContextTask.run(ContextTask.java:69)
	at com.sun.grizzly.util.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:330)
	at com.sun.grizzly.util.AbstractThreadPool$Worker.run(AbstractThreadPool.java:309)
	at java.lang.Thread.run(Thread.java:637)
java.lang.NullPointerException
	at org.apache.openjpa.jdbc.meta.MappingInfo.mergeJoinColumn(MappingInfo.java:1514)
	at org.apache.openjpa.jdbc.meta.MappingInfo.createJoins(MappingInfo.java:1322)
	at org.apache.openjpa.jdbc.meta.MappingInfo.createForeignKey(MappingInfo.java:1084)
	at org.apache.openjpa.jdbc.meta.ValueMappingInfo.getTypeJoin(ValueMappingInfo.java:115)
	at org.apache.openjpa.jdbc.meta.ValueMappingInfo.getTypeJoin(ValueMappingInfo.java:92)
	at org.apache.openjpa.jdbc.meta.strats.RelationFieldStrategy.map(RelationFieldStrategy.java:167)
	at org.apache.openjpa.jdbc.meta.FieldMapping.setStrategy(FieldMapping.java:146)
	at org.apache.openjpa.jdbc.meta.RuntimeStrategyInstaller.installStrategy(RuntimeStrategyInstaller.java:82)
	at org.apache.openjpa.jdbc.meta.FieldMapping.resolveMapping(FieldMapping.java:496)
	at org.apache.openjpa.jdbc.meta.FieldMapping.resolve(FieldMapping.java:461)
	at org.apache.openjpa.jdbc.meta.ClassMapping.resolveMapping(ClassMapping.java:853)
	at org.apache.openjpa.meta.ClassMetaData.resolve(ClassMetaData.java:1791)
	at org.apache.openjpa.meta.MetaDataRepository.processBuffer(MetaDataRepository.java:790)
	at org.apache.openjpa.meta.MetaDataRepository.resolveMapping(MetaDataRepository.java:751)
	at org.apache.openjpa.meta.MetaDataRepository.resolve(MetaDataRepository.java:631)
	at org.apache.openjpa.meta.MetaDataRepository.getMetaDataInternal(MetaDataRepository.java:385)
	at org.apache.openjpa.meta.MetaDataRepository.getMetaData(MetaDataRepository.java:358)
	at org.apache.openjpa.enhance.PCEnhancer.<init>(PCEnhancer.java:256)
	at org.apache.openjpa.enhance.PCEnhancer.<init>(PCEnhancer.java:227)
	at org.apache.openjpa.enhance.PCEnhancer.<init>(PCEnhancer.java:195)
	at org.apache.openjpa.enhance.ManagedClassSubclasser.prepareUnenhancedClasses(ManagedClassSubclasser.java:134)
	at org.apache.openjpa.kernel.AbstractBrokerFactory.loadPersistentTypes(AbstractBrokerFactory.java:317)
	at org.apache.openjpa.kernel.AbstractBrokerFactory.initializeBroker(AbstractBrokerFactory.java:241)
	at org.apache.openjpa.kernel.AbstractBrokerFactory.newBroker(AbstractBrokerFactory.java:215)
	at org.apache.openjpa.kernel.DelegatingBrokerFactory.newBroker(DelegatingBrokerFactory.java:156)
	at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:227)
	at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:154)
	at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:60)
	at com.signetworks.signs.util.db.Database$.createEntityManager(Database.scala:75)
	at com.signetworks.signs.util.db.Database$.withEntityManager(Database.scala:72)
	at com.signetworks.signs.util.db.Database$.unique(Database.scala:40)
	at com.signetworks.v3.servlet.V3Servlet.dispatchRequestInSession(V3Servlet.scala:63)
	at com.signetworks.dance.http.RequestDispatcher$$anonfun$dispatchRequest$3$$anonfun$apply$1.apply(RequestDispatcher.scala:32)
	at com.signetworks.dance.http.RequestDispatcher$$anonfun$dispatchRequest$3$$anonfun$apply$1.apply(RequestDispatcher.scala:32)
	at com.signetworks.dance.http.SynchronizedSessionBinder$$anonfun$bindSession$1.apply(SynchronizedSessionBinder.scala:21)
	at com.signetworks.dance.http.SynchronizedSessionBinder$$anonfun$bindSession$1.apply(SynchronizedSessionBinder.scala:21)
	at com.signetworks.dance.util.ThreadBoundValue.withValue(ThreadBoundValue.scala:38)
	at com.signetworks.dance.http.SynchronizedSessionBinder$class.bindSession(SynchronizedSessionBinder.scala:21)
	at com.signetworks.v3.servlet.V3Servlet.bindSession(V3Servlet.scala:31)
	at com.signetworks.dance.http.RequestDispatcher$$anonfun$dispatchRequest$3.apply(RequestDispatcher.scala:31)
	at com.signetworks.dance.http.RequestDispatcher$$anonfun$dispatchRequest$3.apply(RequestDispatcher.scala:31)
	at scala.Option.getOrElse(Option.scala:59)
	at com.signetworks.dance.http.RequestDispatcher$class.dispatchRequest(RequestDispatcher.scala:30)
	at com.signetworks.v3.servlet.V3Servlet.dispatchRequest(V3Servlet.scala:31)
	at com.signetworks.dance.http.RequestDispatcher$class.handleRequest(RequestDispatcher.scala:22)
	at com.signetworks.v3.servlet.V3Servlet.handleRequest(V3Servlet.scala:31)
	at com.signetworks.dance.http.DanceServlet$$anonfun$service$1$$anonfun$apply$mcV$sp$1.apply(DanceServlet.scala:47)
	at com.signetworks.dance.http.DanceServlet$$anonfun$service$1$$anonfun$apply$mcV$sp$1.apply(DanceServlet.scala:46)
	at com.signetworks.dance.http.DanceServlet$$anonfun$bindRequest$1.apply$mcV$sp(DanceServlet.scala:63)
	at com.signetworks.dance.http.DanceServlet$$anonfun$bindRequest$1.apply(DanceServlet.scala:63)
	at com.signetworks.dance.http.DanceServlet$$anonfun$bindRequest$1.apply(DanceServlet.scala:63)
	at com.signetworks.dance.util.ThreadBoundValue.withValue(ThreadBoundValue.scala:38)
	at com.signetworks.dance.http.DanceServlet.bindRequest(DanceServlet.scala:63)
	at com.signetworks.dance.http.DanceServlet$$anonfun$service$1.apply$mcV$sp(DanceServlet.scala:45)
	at com.signetworks.dance.http.DanceServlet$$anonfun$service$1.apply(DanceServlet.scala:45)
	at com.signetworks.dance.http.DanceServlet$$anonfun$service$1.apply(DanceServlet.scala:45)
	at com.signetworks.dance.util.ThreadBoundValue.withValue(ThreadBoundValue.scala:38)
	at com.signetworks.dance.http.DanceServlet.service(DanceServlet.scala:42)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:847)
	at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1523)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:279)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:188)
	at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:641)
	at com.sun.enterprise.web.WebPipeline.invoke(WebPipeline.java:97)
	at com.sun.enterprise.web.PESessionLockingStandardPipeline.invoke(PESessionLockingStandardPipeline.java:85)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:185)
	at org.apache.catalina.connector.CoyoteAdapter.doService(CoyoteAdapter.java:332)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:233)
	at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:165)
	at com.sun.grizzly.http.ProcessorTask.invokeAdapter(ProcessorTask.java:791)
	at com.sun.grizzly.http.ProcessorTask.doProcess(ProcessorTask.java:693)
	at com.sun.grizzly.http.ProcessorTask.process(ProcessorTask.java:954)
	at com.sun.grizzly.http.DefaultProtocolFilter.execute(DefaultProtocolFilter.java:170)
	at com.sun.grizzly.DefaultProtocolChain.executeProtocolFilter(DefaultProtocolChain.java:135)
	at com.sun.grizzly.DefaultProtocolChain.execute(DefaultProtocolChain.java:102)
	at com.sun.grizzly.DefaultProtocolChain.execute(DefaultProtocolChain.java:88)
	at com.sun.grizzly.http.HttpProtocolChain.execute(HttpProtocolChain.java:76)
	at com.sun.grizzly.ProtocolChainContextTask.doCall(ProtocolChainContextTask.java:53)
	at com.sun.grizzly.SelectionKeyContextTask.call(SelectionKeyContextTask.java:57)
	at com.sun.grizzly.ContextTask.run(ContextTask.java:69)
	at com.sun.grizzly.util.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:330)
	at com.sun.grizzly.util.AbstractThreadPool$Worker.run(AbstractThreadPool.java:309)
	at java.lang.Thread.run(Thread.java:637)","20/Sep/10 12:30;drwoods;Can you post your persistence.xml or a least the <class> or <jar-file> list from it?
","20/Sep/10 14:51;wboyce@panix.com;The <class> section looks like:

com.signetworks.signs.model.addressbook.AddressBook
com.signetworks.signs.model.security.Group
com.signetworks.signs.model.security.Organization
com.signetworks.signs.model.security.User

I've discovered some more information that is relevant.  The Organization object contains a Set<HostName>.  HostName is an Embeddable.  However:

1.  HostName is obviously not in the list of persistent classes.

2.  When I looked in the class file for Organization, I discovered that the set of host names did not have any generic type information.  In other words it was Set<?> instead of Set<HostName>.  That's why OpenJPA complains (above) about ""No metadata was found for type 'class java.lang.Object.'""  (The reason that the generic type information is missing is that this project is in Scala, and the Set<HostName> is defined in a Scala trait that the Organization class inherits, and apparently Scala discards generic type information when compiling classes that inherit members from traits.)

I discovered these two issues by running the standalone enhancer on my classfiles.  The standalone enhancer doesn't produce NullPointerException, at least not in my tests, but does complain about Object not being a persistent classes.  Once I fixed the two issues, then the runtime enhancer started working as well.

I still think that this is a bug, as OpenJPA should not generate NPE even if the input mapping has errors.","20/Sep/10 15:30;curtisr7;Willis -

When you ran with the standalone enhancer was the error/exception that you encountered? Was it helpful to figure out what was wrong?

Just to warn you, I'd highly recommend staying away from the runtime enhancer... you'll find numerous documented(and undocumented) issues. I'd say the support is half baked at best.

Thanks,
Rick","20/Sep/10 16:00;wboyce@panix.com;Rick,

I just saw the error about there not being any metadata for java.lang.Object.  But I knew what was causing the problem because I was pursuing a strategy of starting off with running the enhancer on a single class with a single annotation (@Entity) and then gradually adding annotations and classes until it stopped working.  It gave me that message after I re-added the Set<HostName>, so I figured that it was unable to figure out what type was in the Set.  I subsequently discovered the issue with Scala, which I entered here:

http://lampsvn.epfl.ch/trac/scala/ticket/3857

It would have been helpful if OpenJPA had reported why it was looking for metadata for Object.  Like ""No metadata was found for type 'class java.lang.Object' referenced from Organization.hostNames.""  Also, it might be worth handling missing metadata for Object specially;  it's more likely that OpenJPA has encountered a raw collection type than that the developer really wants Object to be persistent but has neglected to provide the metadata.

About the runtime enhancer, why even have it if it's half-baked?  It would be better to simply remove it and make the code base that much simpler.  If it's there, then people will use it, and if it doesn't work, then they'll wind up with a bad impression of OpenJPA that may not be warranted.

","20/Sep/10 16:03;drwoods;Willis, when you say ""Java 6 runtime enhancer"", do you mean the Attach API loaded enhancer or that you manually enabled the subclassing enhancer?

The Attach API loaded enhancer is identical to using the Javaagent approach, which both have the limitation that when a <class> list is used, then all entities (including @Embeddable and @MappedSuperclass) must be listed.  Using the Javaagent or Attach API (aka. enhance when the JVM loads a class) are supported in production.
","20/Sep/10 16:19;curtisr7;Willis -

> It would have been helpful if OpenJPA had reported why it was looking for metadata for Object.  Like ""No metadata was found for type 'class java.lang.Object' referenced from Organization.hostNames.""  Also, it might be worth handling missing metadata for Object specially;  it's more likely that OpenJPA has encountered a raw collection type than that the developer really wants Object to be persistent but has neglected to provide the metadata.

Just to be clear, this problem only happens when openjpa.RuntimeUnenhancedClasses=supported is set?

> About the runtime enhancer, why even have it if it's half-baked? 

Great question. This feature was added, turned on as the default, but never fully completed. I think the intent was that if enough people were testing it(a la enabled by default), we'd get all of the problems fixed and it would be nice for out of the box usage. Unfortunately this hasn't been high enough priority for anyone to really tackle.... In the 2.0.x release we disabled this feature by default because of the numerous issues we've uncovered. 

Perhaps we need to have a stronger warning message when this feature is enabled? ... or disable it all together?

Thanks,
Rick","21/Sep/10 02:13;wboyce@panix.com;Donald,

Maybe I'm not using the right terminology.  I understand that I can use OpenJPA in one of four ways.  First, I can run the class enhancer during the build process.  Second, I can define a Java agent when I run the JVM that will enhance the classes as they're loaded.  Third, if I'm using Java 6, OpenJPA will install a classloader hook of some kind that will also enhance the classes as they're loaded.  And fourth, if I'm running Java 5, OpenJPA will dynamically build persistent subclasses of my entity classes.  In all cases we ultimately get classes that extend PersistenceCapable, but in the first three strategies, the PersistenceCapable classes are the application's own classes, while in the last case, they're subclasses of the application's classes.  I understand that the fourth method (dynamically-generated subclasses) has certain drawbacks, some by necessity (it not being possible to intercept field set operations for example), and some because it is still experimental.  I believe that I'm using the third method, Java 6 with the classloader hook.

That said, I did have to set openjpa.runtimeUnenhancedClasses=supported in order to get the program to run at all.  Am I in fact using the Java 5 dynamic subclassing strategy?","21/Sep/10 10:29;wboyce@panix.com;I think that I just made things more confusing!

Referring to the documentation, I believe that I am using the strategy in section 2.4, ""Enhancing Dynamically at Runtime.""  However as I mentioned, I did have to set openjpa.RuntimeUnenhancedClasses=supported, which is only covered in section 2.5, ""Omitting the JPA Enhancer.""  So maybe I'm not using the enhancer?  By the way I'm using the Java 6 that Apple supplies with OS X, if that matters.
","21/Sep/10 11:13;wboyce@panix.com;When I don't have RuntimeEnhancedClasses set, I get:

Internal error: This configuration disallows runtime optimization, but the following listed types were not enhanced at build time or at class load time with a javaagent: (all my classes)

When I set RuntimeEnhancedClasses=supported, the app works (now that I've gotten rid of all the mapping problems).  However I do NOT see the info message ""OpenJPA dynamically loaded the class enhancer"" mentioned in the documentation.  I'm logging at the debug level.

But there is this message:  ""Creating subclass for '[class com.signetworks.signs.model.security.Group, class com.signetworks.signs.model.addressbook.AddressBook, class com.signetworks.signs.model.addressbook.PhoneNumber, class com.signetworks.signs.model.addressbook.SnailAddress, class com.signetworks.signs.model.security.User, class com.signetworks.signs.model.addressbook.EmailAddress, class com.signetworks.signs.model.entities.HostName, class com.signetworks.signs.model.security.Organization]'. This means that your application will be less efficient and will consume more memory than it would if you ran the OpenJPA enhancer. Additionally, lazy loading will not be available for one-to-one and many-to-one persistent attributes in types using field access; they will be loaded eagerly instead.""

Oops!

I traced through the InstrumentationFactory class.  Looks like the Java 6 attach API enhancer is not being loaded because my application is not being loaded by the system class loader.  One for the documentation!

Also, I think that even if the system class loader check had passed, the agent installation would have failed because the OS X JVM doesn't have a tools.jar.  Instead the attach API classes are in ""classes.jar.""","21/Sep/10 13:54;wboyce@panix.com;Rick, you asked, ""Perhaps we need to have a stronger warning message when this feature is enabled? ... or disable it all together?""

I saw on the roadmap that OpenJPA 2.1 will require Java 6.  I think that if OpenJPA is not going to support Java 5, then there is no need to support working with unenhanced classes.  The strategy of using the attach API to install the agent will work for casual users, and the others can pass the agent on the command line, use the J2EE container hooks, or use the build-time enhancer.  The behavior of OpenJPA when using unenhanced classes is different from its behavior when using enhanced classes (no lazy loading, changes only detected at flush), so anything that users actually develop in that mode is not going to be production-ready.  At some point developers will have to figure out how to get the agent or the build-time enhancer working and test their code under that configuration.  Given how easy it is to use the attach API enhancer under Java 6, there's not a strong case for having a less-functional alternative.

Have I added enough comments to this issue yet?  I think I'm going for a personal record.","21/Sep/10 14:11;drwoods;Subclassing log msg changed to WARN in r999425.
Still need to look at adding more info for the original NPE and try to get the dynamic enhancer working on MacOSX.
","21/Sep/10 14:45;curtisr7;> ... or disable it all together?"" 
That gets my vote. This enhancement business has been a thorn in OpenJPA's side for as long as I've been working with the project. It would be great if subclassing worked properly and performed as well as the other method, but unfortunately it doesn't. Allowing a user to enable subclassing may get them past an immediate enhancement issue, but it's a matter of time before another is hit. 

One big stumbling block is that it is very difficult to remove a feature that exists in a release that is out in the wild. One can hypothesize that removing this support *could* cause a migration nightmare for someone that has relied on this support(however unlikely that may be). I don't think this JIRA is the place for this discussion though... 

> Have I added enough comments to this issue yet? I think I'm going for a personal record. 
I don't think we're through with this issue yet... :) As Donald said, we need to get the dynamic enhancer working on OSX... perhaps you would be able to donate a few mac cycles to help us with that?  (I'm running ubuntu/windows.)","21/Sep/10 16:10;wboyce@panix.com;Rick, I have a spare white MacBook that I'll lend to you or someone else if it will help OpenJPA work better on OS X.  Are any of the project's developers in New York City?  You can email me directly at wboyce at panix dot com.","22/Sep/10 11:10;wboyce@panix.com;Here's the NPE test case!

Took a while to reproduce it.  It only showed up when I added the @Column annotations to the primary key field and the many-to-one fields.

","22/Sep/10 11:10;wboyce@panix.com;Test case run:

/System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/bin/java -Dfile.encoding=MacRoman -classpath /System/Library/Frameworks/JavaVM.framework/Versions/A/Resources/Deploy.bundle/Contents/Resources/Java/deploy.jar:/System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/lib/dt.jar:/System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/lib/javaws.jar:/System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/lib/jce.jar:/System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/lib/management-agent.jar:/System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/lib/plugin.jar:/System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/lib/sa-jdi.jar:/System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Classes/alt-rt.jar:/System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Classes/charsets.jar:/System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Classes/classes.jar:/System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Classes/jconsole.jar:/System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Classes/jsse.jar:/System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Classes/ui.jar:/System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/lib/ext/apple_provider.jar:/System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/lib/ext/dnsns.jar:/System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/lib/ext/localedata.jar:/System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/lib/ext/sunjce_provider.jar:/System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/lib/ext/sunpkcs11.jar:/Users/wboyce/git/openjpatest/target/classes:/Users/wboyce/.m2/repository/org/apache/openjpa/openjpa/2.0.1/openjpa-2.0.1.jar:/Users/wboyce/.m2/repository/commons-lang/commons-lang/2.1/commons-lang-2.1.jar:/Users/wboyce/.m2/repository/commons-collections/commons-collections/3.2.1/commons-collections-3.2.1.jar:/Users/wboyce/.m2/repository/net/sourceforge/serp/serp/1.13.1/serp-1.13.1.jar:/Users/wboyce/.m2/repository/junit/junit/3.8.1/junit-3.8.1.jar:/Users/wboyce/.m2/repository/org/apache/geronimo/specs/geronimo-jms_1.1_spec/1.1.1/geronimo-jms_1.1_spec-1.1.1.jar:/Users/wboyce/.m2/repository/org/apache/geronimo/specs/geronimo-jta_1.1_spec/1.1.1/geronimo-jta_1.1_spec-1.1.1.jar:/Users/wboyce/.m2/repository/commons-pool/commons-pool/1.5.3/commons-pool-1.5.3.jar:/Users/wboyce/.m2/repository/org/apache/geronimo/specs/geronimo-jpa_2.0_spec/1.1/geronimo-jpa_2.0_spec-1.1.jar:/Users/wboyce/.m2/repository/com/h2database/h2/1.2.143/h2-1.2.143.jar openjpatest.Main
6  db  TRACE  [main] openjpa.Runtime - Setting the following properties from ""file:/Users/wboyce/git/openjpatest/target/classes/META-INF/persistence.xml"" into configuration: {openjpa.BrokerFactory=jdbc, openjpa.ConnectionDriverName=org.h2.Driver, openjpa.RuntimeUnenhancedClasses=supported, javax.persistence.provider=org.apache.openjpa.persistence.PersistenceProviderImpl, openjpa.MetaDataFactory=jpa(Types=openjpatest.AddressBook;openjpatest.Group;openjpatest.Organization), openjpa.Log=DefaultLevel=TRACE, PersistenceVersion=2.0, openjpa.ConnectionURL=jdbc:h2:mem:test, openjpa.Id=db}
44  db  TRACE  [main] openjpa.Runtime - org.apache.openjpa.enhance.InstrumentationFactory.findToolsJar() -- couldn't find /System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/lib/tools.jar
46  db  TRACE  [main] openjpa.Runtime - Trying to load javax.validation APIs based on the ValidationMode=AUTO
48  db  TRACE  [main] openjpa.Runtime - Could not create the optional validation provider. Reason returned: ""No available javax.validation APIs""
77  db  INFO   [main] openjpa.Runtime - Starting OpenJPA 2.0.1
78  db  TRACE  [main] openjpa.Runtime - Properties: javax.persistence.lock.timeout: 0
javax.persistence.query.timeout: 0
javax.persistence.sharedCache.mode: UNSPECIFIED
javax.persistence.validation.group.pre-persist: javax.validation.groups.Default
javax.persistence.validation.group.pre-update: javax.validation.groups.Default
openjpa.AutoClear: 0
openjpa.AutoDetach: [Ljava.lang.String;@2af081
openjpa.BrokerFactory: jdbc
openjpa.BrokerImpl: default
openjpa.CacheDistributionPolicy: default
openjpa.Callbacks: default
openjpa.ClassResolver: default
openjpa.Compatibility: default
openjpa.ConnectionDriverName: org.h2.Driver
openjpa.ConnectionFactoryMode: false
openjpa.ConnectionRetainMode: 0
openjpa.ConnectionURL: jdbc:h2:mem:test
openjpa.DataCache: false
openjpa.DataCacheManager: default
openjpa.DataCacheTimeout: -1
openjpa.DetachState: loaded
openjpa.DynamicDataStructs: false
openjpa.DynamicEnhancementAgent: true
openjpa.EntityManagerFactory: default
openjpa.FetchBatchSize: -1
openjpa.FetchGroups: [Ljava.lang.String;@313a53d
openjpa.FlushBeforeQueries: 0
openjpa.Id: db
openjpa.IgnoreChanges: false
openjpa.InitializeEagerly: false
openjpa.InverseManager: false
openjpa.LifecycleEventManager: default
openjpa.LockManager: mixed
openjpa.Log: true(DefaultLevel=TRACE)
openjpa.ManagedRuntime: auto
openjpa.MaxFetchDepth: -1
openjpa.MetaDataFactory: jpa(Types=openjpatest.AddressBook;openjpatest.Group;openjpatest.Organization)
openjpa.MetaDataRepository: default
openjpa.Multithreaded: false
openjpa.NontransactionalRead: true
openjpa.NontransactionalWrite: true
openjpa.Optimistic: true
openjpa.OrphanedKeyAction: log
openjpa.ProxyManager: default
openjpa.QueryCache: false
openjpa.QueryCompilationCache: true
openjpa.ReadLockLevel: 10
openjpa.RefreshFromDataCache: false
openjpa.RestoreState: 1
openjpa.RetainState: true
openjpa.RetryClassRegistration: false
openjpa.RuntimeUnenhancedClasses: 0
openjpa.SavepointManager: in-mem
openjpa.Sequence: table
openjpa.TransactionMode: false
openjpa.WriteLockLevel: 20
openjpa.jdbc.DriverDataSource: simple
openjpa.jdbc.EagerFetchMode: 2
openjpa.jdbc.FetchDirection: 1000
openjpa.jdbc.FinderCache: true
openjpa.jdbc.IdentifierUtil: default
openjpa.jdbc.LRSSize: 2
openjpa.jdbc.MappingDefaults: jpa
openjpa.jdbc.QuerySQLCache: true
openjpa.jdbc.ResultSetType: 1003
openjpa.jdbc.SQLFactory: default
openjpa.jdbc.SchemaFactory: dynamic
openjpa.jdbc.Schemas: [Ljava.lang.String;@2af081
openjpa.jdbc.SubclassFetchMode: 1
openjpa.jdbc.SynchronizeMappings: null
openjpa.jdbc.TransactionIsolation: -1
openjpa.jdbc.UpdateManager: default
89  db  TRACE  [main] openjpa.Runtime - No cache marshaller found for id org.apache.openjpa.conf.MetaDataCacheMaintenance.
140  db  TRACE  [main] openjpa.MetaData - Using metadata factory ""org.apache.openjpa.persistence.jdbc.PersistenceMappingFactory@4d3c7378"".
171  db  INFO   [main] openjpa.jdbc.JDBC - Using dictionary class ""org.apache.openjpa.jdbc.sql.H2Dictionary"".
271  db  TRACE  [main] openjpa.jdbc.JDBC - createConnectionFactory: DataSource=org.apache.openjpa.jdbc.schema.SimpleDriverDataSource_@50269997
310  db  TRACE  [main] openjpa.jdbc.JDBC - DataSource connection setAutoCommit to ""true""
524  db  TRACE  [main] openjpa.jdbc.JDBC - catalogSeparator: .
catalogTerm: catalog
databaseProductName: H2
databaseProductVersion: 1.2.143 (2010-09-18)
driverName: H2 JDBC Driver
driverVersion: 1.2.143 (2010-09-18)
extraNameCharacters: 
identifierQuoteString: ""
numericFunctions: ABS,ACOS,ASIN,ATAN,COS,COT,SIN,TAN,ATAN2,BITAND,BITOR,BITXOR,MOD,CEILING,DEGREES,EXP,FLOOR,LOG,LOG10,RADIANS,SQRT,PI,POWER,RAND,RANDOM_UUID,ROUND,ROUNDMAGIC,SECURE_RAND,SIGN,ENCRYPT,DECRYPT,HASH,TRUNCATE,COMPRESS,EXPAND,ZERO
procedureTerm: procedure
schemaTerm: schema
searchStringEscape: \
sqlKeywords: LIMIT,MINUS,ROWNUM,SYSDATE,SYSTIME,SYSTIMESTAMP,TODAY
stringFunctions: ASCII,BIT_LENGTH,LENGTH,OCTET_LENGTH,CHAR,CONCAT,DIFFERENCE,HEXTORAW,RAWTOHEX,INSTR,INSERT,LOWER,UPPER,LEFT,RIGHT,LOCATE,POSITION,LPAD,RPAD,LTRIM,RTRIM,TRIM,REGEXP_REPLACE,REPEAT,REPLACE,SOUNDEX,SPACE,STRINGDECODE,STRINGENCODE,STRINGTOUTF8,SUBSTRING,UTF8TOSTRING,XMLATTR,XMLNODE,XMLCOMMENT,XMLCDATA,XMLSTARTDOC,XMLTEXT
systemFunctions: ARRAY_GET,ARRAY_LENGTH,AUTOCOMMIT,CANCEL_SESSION,CASEWHEN,CAST,COALESCE,CONVERT,CURRVAL,CSVREAD,CSVWRITE,DATABASE,DATABASE_PATH,FILE_READ,GREATEST,IDENTITY,IFNULL,LEAST,LOCK_MODE,LOCK_TIMEOUT,LINK_SCHEMA,MEMORY_FREE,MEMORY_USED,NEXTVAL,NULLIF,READONLY,ROWNUM,SCHEMA,SCOPE_IDENTITY,SESSION_ID,SET,TABLE,TRANSACTION_ID,USER
timeDateFunctions: CURRENT_DATE,CURRENT_TIME,CURRENT_TIMESTAMP,DATEADD,DATEDIFF,DAYNAME,DAY_OF_MONTH,DAY_OF_WEEK,DAY_OF_YEAR,EXTRACT,FORMATDATETIME,HOUR,MINUTE,MONTH,MONTHNAME,PARSEDATETIME,QUARTER,SECOND,WEEK,YEAR
url: jdbc:h2:mem:test
userName: 
defaultTransactionIsolation: 2
driverMajorVersion: 1
driverMinorVersion: 2
maxBinaryLiteralLength: 0
maxCatalogNameLength: 0
maxCharLiteralLength: 0
maxColumnNameLength: 0
maxColumnsInGroupBy: 0
maxColumnsInIndex: 0
maxColumnsInOrderBy: 0
maxColumnsInSelect: 0
maxColumnsInTable: 0
maxConnections: 0
maxCursorNameLength: 0
maxIndexLength: 0
maxProcedureNameLength: 0
maxRowSize: 0
maxSchemaNameLength: 0
maxStatementLength: 0
maxStatements: 0
maxTableNameLength: 0
maxTablesInSelect: 0
maxUserNameLength: 0
isCatalogAtStart: true
isReadOnly: false
nullPlusNonNullIsNull: true
nullsAreSortedAtEnd: false
nullsAreSortedAtStart: false
nullsAreSortedHigh: false
nullsAreSortedLow: true
storesLowerCaseIdentifiers: false
storesLowerCaseQuotedIdentifiers: false
storesMixedCaseIdentifiers: false
storesMixedCaseQuotedIdentifiers: true
storesUpperCaseIdentifiers: true
storesUpperCaseQuotedIdentifiers: false
supportsAlterTableWithAddColumn: true
supportsAlterTableWithDropColumn: true
supportsANSI92EntryLevelSQL: true
supportsANSI92FullSQL: false
supportsANSI92IntermediateSQL: false
supportsCatalogsInDataManipulation: true
supportsCatalogsInIndexDefinitions: true
supportsCatalogsInPrivilegeDefinitions: true
supportsCatalogsInProcedureCalls: false
supportsCatalogsInTableDefinitions: true
supportsColumnAliasing: true
supportsConvert: true
supportsCoreSQLGrammar: true
supportsCorrelatedSubqueries: true
supportsDataDefinitionAndDataManipulationTransactions: false
supportsDataManipulationTransactionsOnly: true
supportsDifferentTableCorrelationNames: false
supportsExpressionsInOrderBy: true
supportsExtendedSQLGrammar: false
supportsFullOuterJoins: false
supportsGroupBy: true
supportsGroupByBeyondSelect: true
supportsGroupByUnrelated: true
supportsIntegrityEnhancementFacility: true
supportsLikeEscapeClause: true
supportsLimitedOuterJoins: true
supportsMinimumSQLGrammar: true
supportsMixedCaseIdentifiers: false
supportsMixedCaseQuotedIdentifiers: true
supportsMultipleResultSets: false
supportsMultipleTransactions: true
supportsNonNullableColumns: true
supportsOpenCursorsAcrossCommit: false
supportsOpenCursorsAcrossRollback: false
supportsOpenStatementsAcrossCommit: true
supportsOpenStatementsAcrossRollback: true
supportsOrderByUnrelated: true
supportsOuterJoins: true
supportsPositionedDelete: true
supportsPositionedUpdate: true
supportsSchemasInDataManipulation: true
supportsSchemasInIndexDefinitions: true
supportsSchemasInPrivilegeDefinitions: true
supportsSchemasInProcedureCalls: true
supportsSchemasInTableDefinitions: true
supportsSelectForUpdate: true
supportsStoredProcedures: false
supportsSubqueriesInComparisons: true
supportsSubqueriesInExists: true
supportsSubqueriesInIns: true
supportsSubqueriesInQuantifieds: true
supportsTableCorrelationNames: true
supportsTransactions: true
supportsUnion: true
supportsUnionAll: true
usesLocalFilePerTable: false
usesLocalFiles: true
allProceduresAreCallable: true
allTablesAreSelectable: true
dataDefinitionCausesTransactionCommit: true
dataDefinitionIgnoredInTransactions: false
doesMaxRowSizeIncludeBlobs: false
supportsBatchUpdates: true
526  db  TRACE  [main] openjpa.jdbc.JDBC - Initial connection autoCommit: true, holdability: 1, TransactionIsolation: 2
528  db  TRACE  [main] openjpa.jdbc.JDBC - <t 421134813, conn 2054185226> [0 ms] close
580  db  TRACE  [main] openjpa.Runtime - Found datasource1: datasource 1344706967 from configuration. StoreContext: org.apache.openjpa.kernel.FinalizingBrokerImpl@359ecd80
590  db  TRACE  [main] openjpa.MetaData - Scanning resource ""META-INF/orm.xml"" for persistent types.
591  db  TRACE  [main] openjpa.MetaData - The persistent unit root url is ""null""
591  db  TRACE  [main] openjpa.MetaData - parsePersistentTypeNames() found [openjpatest.Group, openjpatest.Organization, openjpatest.AddressBook].
591  db  TRACE  [main] openjpa.MetaData - Found 3 classes with metadata in 4 milliseconds.
619  db  TRACE  [main] openjpa.Enhance - org.apache.openjpa.enhance.InstrumentationFactory.findToolsJar() -- couldn't find /System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/lib/tools.jar
620  db  INFO   [main] openjpa.Enhance - Creating subclass for ""[class openjpatest.Group, class openjpatest.Organization, class openjpatest.AddressBook]"". This means that your application will be less efficient and will consume more memory than it would if you ran the OpenJPA enhancer. Additionally, lazy loading will not be available for one-to-one and many-to-one persistent attributes in types using field access; they will be loaded eagerly instead.
645  db  TRACE  [main] openjpa.Runtime - No cache marshaller found for id org.apache.openjpa.conf.MetaDataCacheMaintenance.
645  db  TRACE  [main] openjpa.MetaData - Using metadata factory ""org.apache.openjpa.persistence.jdbc.PersistenceMappingFactory@643cb075"".
645  db  TRACE  [main] openjpa.MetaData - Loading metadata for ""class openjpatest.Group"" under mode ""[META]"".
646  db  TRACE  [main] openjpa.MetaData - Scanning resource ""META-INF/orm.xml"" for persistent types.
646  db  TRACE  [main] openjpa.MetaData - The persistent unit root url is ""null""
646  db  TRACE  [main] openjpa.MetaData - parsePersistentTypeNames() found [openjpatest.Group, openjpatest.Organization, openjpatest.AddressBook].
646  db  TRACE  [main] openjpa.MetaData - Found 3 classes with metadata in 1 milliseconds.
696  db  TRACE  [main] openjpa.MetaData - Parsing class ""openjpatest.Group"".
697  db  TRACE  [main] openjpa.MetaData - Parsing package ""openjpatest.Group"".
711  db  TRACE  [main] openjpa.MetaData - Generating default metadata for type ""openjpatest.Group"".
711  db  TRACE  [main] openjpa.MetaData - Using reflection for metadata generation.
748  db  TRACE  [main] openjpa.MetaData - Set persistence-capable superclass of ""openjpatest.Group"" to ""null"".
750  db  TRACE  [main] openjpa.MetaData - Resolving metadata for ""openjpatest.Group@471860896"".
750  db  TRACE  [main] openjpa.MetaData - 	Resolving field ""openjpatest.Group@471860896.id"".
757  db  TRACE  [main] openjpa.MetaData - 	Resolving field ""openjpatest.Group@471860896.name"".
757  db  TRACE  [main] openjpa.MetaData - 	Resolving field ""openjpatest.Group@471860896.organization"".
757  db  TRACE  [main] openjpa.MetaData - Loading metadata for ""class openjpatest.Organization"" under mode ""[META]"".
757  db  TRACE  [main] openjpa.MetaData - Parsing class ""openjpatest.Organization"".
757  db  TRACE  [main] openjpa.MetaData - Generating default metadata for type ""openjpatest.Organization"".
757  db  TRACE  [main] openjpa.MetaData - Using reflection for metadata generation.
764  db  TRACE  [main] openjpa.MetaData - Set persistence-capable superclass of ""openjpatest.Organization"" to ""null"".
764  db  TRACE  [main] openjpa.MetaData - 	Resolving field ""openjpatest.Group@471860896.version"".
765  db  TRACE  [main] openjpa.MetaData - Resolving metadata for ""openjpatest.Organization@92700153"".
765  db  TRACE  [main] openjpa.MetaData - 	Resolving field ""openjpatest.Organization@92700153.addressBook"".
765  db  TRACE  [main] openjpa.MetaData - Loading metadata for ""class openjpatest.AddressBook"" under mode ""[META]"".
765  db  TRACE  [main] openjpa.MetaData - Parsing class ""openjpatest.AddressBook"".
766  db  TRACE  [main] openjpa.MetaData - Generating default metadata for type ""openjpatest.AddressBook"".
766  db  TRACE  [main] openjpa.MetaData - Using reflection for metadata generation.
773  db  TRACE  [main] openjpa.MetaData - Generating default metadata for type ""openjpatest.EmailAddress"".
773  db  TRACE  [main] openjpa.MetaData - Using reflection for metadata generation.
773  db  TRACE  [main] openjpa.MetaData - Set persistence-capable superclass of ""openjpatest.AddressBook"" to ""null"".
773  db  TRACE  [main] openjpa.MetaData - 	Resolving field ""openjpatest.Organization@92700153.hostNames"".
773  db  TRACE  [main] openjpa.MetaData - Resolving embedded metadata for ""java.lang.Object@259650411"".
775  db  TRACE  [main] openjpa.MetaData - Preparing mapping for ""openjpatest.Group"".
778  db  TRACE  [main] openjpa.MetaData - 	Resolving field ""openjpatest.Group@471860896.id"".
783  db  TRACE  [main] openjpa.MetaData - 	""id"" has mapping strategy ""org.apache.openjpa.jdbc.meta.strats.StringFieldStrategy"".
784  db  TRACE  [main] openjpa.MetaData - 	Resolving field ""openjpatest.Group@471860896.name"".
784  db  TRACE  [main] openjpa.MetaData - 	""name"" has mapping strategy ""org.apache.openjpa.jdbc.meta.strats.StringFieldStrategy"".
784  db  TRACE  [main] openjpa.MetaData - 	Resolving field ""openjpatest.Group@471860896.version"".
784  db  TRACE  [main] openjpa.MetaData - 	""version"" has mapping strategy ""none"".
787  db  TRACE  [main] openjpa.MetaData - ""openjpatest.Group<discriminator>"" has mapping strategy ""value-map"".
788  db  TRACE  [main] openjpa.MetaData - ""openjpatest.Group<version>"" has mapping strategy ""version-number"".
788  db  TRACE  [main] openjpa.MetaData - Resolving mapping for ""openjpatest.Group@471860896"".
788  db  TRACE  [main] openjpa.MetaData - ""openjpatest.Group"" has mapping strategy ""full"".
788  db  TRACE  [main] openjpa.MetaData - 	Resolving field ""openjpatest.Group@471860896.organization"".
Exception in thread ""main"" <openjpa-2.0.1-r422266:989424 fatal user error> org.apache.openjpa.persistence.ArgumentException: Errors encountered while resolving metadata.  See nested exceptions for details.
	at org.apache.openjpa.meta.MetaDataRepository.resolve(MetaDataRepository.java:642)
	at org.apache.openjpa.meta.MetaDataRepository.getMetaDataInternal(MetaDataRepository.java:385)
	at org.apache.openjpa.meta.MetaDataRepository.getMetaData(MetaDataRepository.java:358)
	at org.apache.openjpa.enhance.PCEnhancer.<init>(PCEnhancer.java:256)
	at org.apache.openjpa.enhance.PCEnhancer.<init>(PCEnhancer.java:227)
	at org.apache.openjpa.enhance.PCEnhancer.<init>(PCEnhancer.java:195)
	at org.apache.openjpa.enhance.ManagedClassSubclasser.prepareUnenhancedClasses(ManagedClassSubclasser.java:134)
	at org.apache.openjpa.kernel.AbstractBrokerFactory.loadPersistentTypes(AbstractBrokerFactory.java:317)
	at org.apache.openjpa.kernel.AbstractBrokerFactory.initializeBroker(AbstractBrokerFactory.java:241)
	at org.apache.openjpa.kernel.AbstractBrokerFactory.newBroker(AbstractBrokerFactory.java:215)
	at org.apache.openjpa.kernel.DelegatingBrokerFactory.newBroker(DelegatingBrokerFactory.java:156)
	at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:227)
	at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:154)
	at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:60)
	at openjpatest.Main.main(Main.java:17)
Caused by: <openjpa-2.0.1-r422266:989424 nonfatal user error> org.apache.openjpa.persistence.ArgumentException: No metadata was found for type ""class java.lang.Object"". The class is not enhanced.
	at org.apache.openjpa.meta.MetaDataRepository.getMetaDataInternal(MetaDataRepository.java:377)
	at org.apache.openjpa.meta.MetaDataRepository.getMetaData(MetaDataRepository.java:358)
	at org.apache.openjpa.meta.ClassMetaData.resolveMeta(ClassMetaData.java:1821)
	at org.apache.openjpa.meta.ClassMetaData.resolve(ClassMetaData.java:1786)
	at org.apache.openjpa.meta.ValueMetaDataImpl.resolve(ValueMetaDataImpl.java:435)
	at org.apache.openjpa.jdbc.meta.ValueMappingImpl.resolve(ValueMappingImpl.java:494)
	at org.apache.openjpa.meta.FieldMetaData.resolve(FieldMetaData.java:1732)
	at org.apache.openjpa.jdbc.meta.FieldMapping.resolve(FieldMapping.java:458)
	at org.apache.openjpa.meta.ClassMetaData.resolveMeta(ClassMetaData.java:1852)
	at org.apache.openjpa.meta.ClassMetaData.resolve(ClassMetaData.java:1786)
	at org.apache.openjpa.meta.MetaDataRepository.processBuffer(MetaDataRepository.java:790)
	at org.apache.openjpa.meta.MetaDataRepository.resolveMeta(MetaDataRepository.java:693)
	at org.apache.openjpa.meta.MetaDataRepository.resolve(MetaDataRepository.java:617)
	... 14 more
NestedThrowables:
<openjpa-2.0.1-r422266:989424 fatal user error> org.apache.openjpa.persistence.ArgumentException: Unable to resolve type ""openjpatest.AddressBook"" due to previous errors resolving related type ""openjpatest.Organization"".
	at org.apache.openjpa.meta.MetaDataRepository.processBuffer(MetaDataRepository.java:804)
	at org.apache.openjpa.meta.MetaDataRepository.resolveMeta(MetaDataRepository.java:693)
	at org.apache.openjpa.meta.MetaDataRepository.resolve(MetaDataRepository.java:617)
	at org.apache.openjpa.meta.MetaDataRepository.getMetaDataInternal(MetaDataRepository.java:385)
	at org.apache.openjpa.meta.MetaDataRepository.getMetaData(MetaDataRepository.java:358)
	at org.apache.openjpa.enhance.PCEnhancer.<init>(PCEnhancer.java:256)
	at org.apache.openjpa.enhance.PCEnhancer.<init>(PCEnhancer.java:227)
	at org.apache.openjpa.enhance.PCEnhancer.<init>(PCEnhancer.java:195)
	at org.apache.openjpa.enhance.ManagedClassSubclasser.prepareUnenhancedClasses(ManagedClassSubclasser.java:134)
	at org.apache.openjpa.kernel.AbstractBrokerFactory.loadPersistentTypes(AbstractBrokerFactory.java:317)
	at org.apache.openjpa.kernel.AbstractBrokerFactory.initializeBroker(AbstractBrokerFactory.java:241)
	at org.apache.openjpa.kernel.AbstractBrokerFactory.newBroker(AbstractBrokerFactory.java:215)
	at org.apache.openjpa.kernel.DelegatingBrokerFactory.newBroker(DelegatingBrokerFactory.java:156)
	at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:227)
	at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:154)
	at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:60)
	at openjpatest.Main.main(Main.java:17)
java.lang.NullPointerException
	at org.apache.openjpa.jdbc.meta.MappingInfo.mergeJoinColumn(MappingInfo.java:1514)
	at org.apache.openjpa.jdbc.meta.MappingInfo.createJoins(MappingInfo.java:1322)
	at org.apache.openjpa.jdbc.meta.MappingInfo.createForeignKey(MappingInfo.java:1084)
	at org.apache.openjpa.jdbc.meta.ValueMappingInfo.getTypeJoin(ValueMappingInfo.java:115)
	at org.apache.openjpa.jdbc.meta.ValueMappingInfo.getTypeJoin(ValueMappingInfo.java:92)
	at org.apache.openjpa.jdbc.meta.strats.RelationFieldStrategy.map(RelationFieldStrategy.java:167)
	at org.apache.openjpa.jdbc.meta.FieldMapping.setStrategy(FieldMapping.java:146)
	at org.apache.openjpa.jdbc.meta.RuntimeStrategyInstaller.installStrategy(RuntimeStrategyInstaller.java:82)
	at org.apache.openjpa.jdbc.meta.FieldMapping.resolveMapping(FieldMapping.java:496)
	at org.apache.openjpa.jdbc.meta.FieldMapping.resolve(FieldMapping.java:461)
	at org.apache.openjpa.jdbc.meta.ClassMapping.resolveMapping(ClassMapping.java:853)
	at org.apache.openjpa.meta.ClassMetaData.resolve(ClassMetaData.java:1791)
	at org.apache.openjpa.meta.MetaDataRepository.processBuffer(MetaDataRepository.java:790)
	at org.apache.openjpa.meta.MetaDataRepository.resolveMapping(MetaDataRepository.java:751)
	at org.apache.openjpa.meta.MetaDataRepository.resolve(MetaDataRepository.java:631)
	at org.apache.openjpa.meta.MetaDataRepository.getMetaDataInternal(MetaDataRepository.java:385)
	at org.apache.openjpa.meta.MetaDataRepository.getMetaData(MetaDataRepository.java:358)
	at org.apache.openjpa.enhance.PCEnhancer.<init>(PCEnhancer.java:256)
	at org.apache.openjpa.enhance.PCEnhancer.<init>(PCEnhancer.java:227)
	at org.apache.openjpa.enhance.PCEnhancer.<init>(PCEnhancer.java:195)
	at org.apache.openjpa.enhance.ManagedClassSubclasser.prepareUnenhancedClasses(ManagedClassSubclasser.java:134)
	at org.apache.openjpa.kernel.AbstractBrokerFactory.loadPersistentTypes(AbstractBrokerFactory.java:317)
	at org.apache.openjpa.kernel.AbstractBrokerFactory.initializeBroker(AbstractBrokerFactory.java:241)
	at org.apache.openjpa.kernel.AbstractBrokerFactory.newBroker(AbstractBrokerFactory.java:215)
	at org.apache.openjpa.kernel.DelegatingBrokerFactory.newBroker(DelegatingBrokerFactory.java:156)
	at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:227)
	at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:154)
	at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:60)
	at openjpatest.Main.main(Main.java:17)

Process finished with exit code 1
","22/Sep/10 20:48;drwoods;Updated output using trunk and OPENJPA-1811 (dynamic enhancer working on Mac) -

drwoods:target/$ java -cp ./openjpa-all-2.1.0-SNAPSHOT.jar:./h2-1.2.143.jar:./openjpatest-trunk.jar openjpatest.Main -Dopenjpa.Log=DefaultLevel=TRACE
4  db  TRACE  [main] openjpa.Runtime - Setting the following properties from ""jar:file:/private/tmp/openjpatest/target/openjpatest-trunk.jar!/META-INF/persistence.xml"" into configuration: {openjpa.BrokerFactory=jdbc, openjpa.ConnectionDriverName=org.h2.Driver, openjpa.RuntimeUnenhancedClasses=supported, javax.persistence.provider=org.apache.openjpa.persistence.PersistenceProviderImpl, openjpa.MetaDataFactory=jpa(Types=openjpatest.AddressBook;openjpatest.Group;openjpatest.Organization), openjpa.Log=DefaultLevel=TRACE, PersistenceVersion=2.0, openjpa.ConnectionURL=jdbc:h2:mem:test, openjpa.Id=db}
64  db  TRACE  [main] openjpa.Runtime - org.apache.openjpa.enhance.InstrumentationFactory.getInstrumentation() _inst:null _dynamicallyInstall:true
66  db  TRACE  [main] openjpa.Runtime - org.apache.openjpa.enhance.InstrumentationFactory.findToolsJar() -- couldn't find default /System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/lib/tools.jar
66  db  TRACE  [main] openjpa.Runtime - org.apache.openjpa.enhance.InstrumentationFactory.findToolsJar() -- found /System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Classes/classes.jar
1  db  TRACE  [main] openjpa.Runtime - Setting the following properties from ""jar:file:/private/tmp/openjpatest/target/openjpatest-trunk.jar!/META-INF/persistence.xml"" into configuration: {openjpa.ConnectionDriverName=org.h2.Driver, openjpa.RuntimeUnenhancedClasses=supported, javax.persistence.provider=org.apache.openjpa.persistence.PersistenceProviderImpl, openjpa.MetaDataFactory=jpa(Types=openjpatest.AddressBook;openjpatest.Group;openjpatest.Organization), openjpa.Log=DefaultLevel=TRACE, PersistenceVersion=2.0, openjpa.ConnectionURL=jdbc:h2:mem:test, openjpa.Id=db}
69  db  TRACE  [main] openjpa.Runtime - No cache marshaller found for id org.apache.openjpa.conf.MetaDataCacheMaintenance.
130  db  TRACE  [main] openjpa.Runtime - No cache marshaller found for id org.apache.openjpa.conf.MetaDataCacheMaintenance.
154  db  TRACE  [main] openjpa.MetaData - Scanning resource ""META-INF/orm.xml"" for persistent types.
156  db  TRACE  [main] openjpa.MetaData - The persistent unit root url is ""null""
156  db  TRACE  [main] openjpa.MetaData - parsePersistentTypeNames() found [openjpatest.Group, openjpatest.Organization, openjpatest.AddressBook].
156  db  TRACE  [main] openjpa.MetaData - Found 3 classes with metadata in 25 milliseconds.
160  db  TRACE  [main] openjpa.MetaData - Clearing metadata repository ""org.apache.openjpa.meta.MetaDataRepository@4e4ee70b"".
716  db  INFO   [main] openjpa.Runtime - OpenJPA dynamically loaded the class enhancer. Any classes that were not enhanced at build time will be enhanced when they are loaded by the JVM.
718  db  TRACE  [main] openjpa.Runtime - Trying to load javax.validation APIs based on the ValidationMode=AUTO
846  db  INFO   [main] openjpa.Runtime - OpenJPA dynamically loaded a validation provider.
874  db  TRACE  [main] openjpa.Runtime - org.apache.openjpa.persistence.PersistenceProviderImpl@7114460 creating org.apache.openjpa.persistence.EntityManagerFactoryImpl@7e9ffe3f for PU db.
877  db  INFO   [main] openjpa.Runtime - Starting OpenJPA 2.1.0-SNAPSHOT
879  db  TRACE  [main] openjpa.Runtime - Properties: javax.persistence.lock.timeout: 0
javax.persistence.query.timeout: 0
javax.persistence.sharedCache.mode: UNSPECIFIED
javax.persistence.validation.group.pre-persist: javax.validation.groups.Default
javax.persistence.validation.group.pre-update: javax.validation.groups.Default
openjpa.AutoClear: 0
openjpa.AutoDetach: [Ljava.lang.String;@30ff8c74
openjpa.BrokerFactory: jdbc
openjpa.BrokerImpl: default
openjpa.CacheDistributionPolicy: default
openjpa.Callbacks: default
openjpa.ClassResolver: default
openjpa.Compatibility: default
openjpa.ConnectionDriverName: org.h2.Driver
openjpa.ConnectionFactoryMode: false
openjpa.ConnectionRetainMode: 0
openjpa.ConnectionURL: jdbc:h2:mem:test
openjpa.DataCache: false
openjpa.DataCacheManager: default
openjpa.DataCacheTimeout: -1
openjpa.DetachState: loaded
openjpa.DynamicDataStructs: false
openjpa.DynamicEnhancementAgent: true
openjpa.EntityManagerFactory: default
openjpa.FetchBatchSize: -1
openjpa.FetchGroups: [Ljava.lang.String;@595e2ccd
openjpa.FlushBeforeQueries: 0
openjpa.Id: db
openjpa.IgnoreChanges: false
openjpa.InitializeEagerly: false
openjpa.InstrumentationManager: default
openjpa.InverseManager: false
openjpa.LifecycleEventManager: validating
openjpa.LockManager: mixed
openjpa.Log: true(DefaultLevel=TRACE)
openjpa.ManagedRuntime: auto
openjpa.MaxFetchDepth: -1
openjpa.MetaDataFactory: jpa(Types=openjpatest.AddressBook;openjpatest.Group;openjpatest.Organization)
openjpa.MetaDataRepository: default
openjpa.Multithreaded: false
openjpa.NontransactionalRead: true
openjpa.NontransactionalWrite: true
openjpa.Optimistic: true
openjpa.OrphanedKeyAction: log
openjpa.ProxyManager: default
openjpa.QueryCache: false
openjpa.QueryCompilationCache: true
openjpa.ReadLockLevel: 10
openjpa.RefreshFromDataCache: false
openjpa.RestoreState: 1
openjpa.RetainState: true
openjpa.RetryClassRegistration: false
openjpa.RuntimeUnenhancedClasses: 0
openjpa.SavepointManager: in-mem
openjpa.Sequence: table
openjpa.TransactionMode: false
openjpa.WriteLockLevel: 20
openjpa.jdbc.DriverDataSource: auto
openjpa.jdbc.EagerFetchMode: 2
openjpa.jdbc.FetchDirection: 1000
openjpa.jdbc.FinderCache: true
openjpa.jdbc.IdentifierUtil: default
openjpa.jdbc.LRSSize: 2
openjpa.jdbc.MappingDefaults: jpa
openjpa.jdbc.QuerySQLCache: true
openjpa.jdbc.ResultSetType: 1003
openjpa.jdbc.SQLFactory: default
openjpa.jdbc.SchemaFactory: dynamic
openjpa.jdbc.Schemas: [Ljava.lang.String;@30ff8c74
openjpa.jdbc.SubclassFetchMode: 1
openjpa.jdbc.SynchronizeMappings: null
openjpa.jdbc.TransactionIsolation: -1
openjpa.jdbc.UpdateManager: default
881  db  TRACE  [main] openjpa.Runtime - No cache marshaller found for id org.apache.openjpa.conf.MetaDataCacheMaintenance.
973  db  TRACE  [main] openjpa.MetaData - Using metadata factory ""org.apache.openjpa.persistence.jdbc.PersistenceMappingFactory@565bb966"".
1024  db  INFO   [main] openjpa.jdbc.JDBC - Using dictionary class ""org.apache.openjpa.jdbc.sql.H2Dictionary"".
1170  db  TRACE  [main] openjpa.jdbc.JDBC - createConnectionFactory: DataSource=org.apache.openjpa.jdbc.schema.AutoDriverDataSource_@5c6ed322
1260  db  TRACE  [main] openjpa.jdbc.JDBC - DataSource connection setAutoCommit to ""true""
CCCCC - using DBCPDriverDataSource
1817  db  TRACE  [main] openjpa.jdbc.JDBC - catalogSeparator: .
catalogTerm: catalog
databaseProductName: H2
databaseProductVersion: 1.2.143 (2010-09-18)
driverName: H2 JDBC Driver
driverVersion: 1.2.143 (2010-09-18)
extraNameCharacters: 
identifierQuoteString: ""
numericFunctions: ABS,ACOS,ASIN,ATAN,COS,COT,SIN,TAN,ATAN2,BITAND,BITOR,BITXOR,MOD,CEILING,DEGREES,EXP,FLOOR,LOG,LOG10,RADIANS,SQRT,PI,POWER,RAND,RANDOM_UUID,ROUND,ROUNDMAGIC,SECURE_RAND,SIGN,ENCRYPT,DECRYPT,HASH,TRUNCATE,COMPRESS,EXPAND,ZERO
procedureTerm: procedure
schemaTerm: schema
searchStringEscape: \
sqlKeywords: LIMIT,MINUS,ROWNUM,SYSDATE,SYSTIME,SYSTIMESTAMP,TODAY
stringFunctions: ASCII,BIT_LENGTH,LENGTH,OCTET_LENGTH,CHAR,CONCAT,DIFFERENCE,HEXTORAW,RAWTOHEX,INSTR,INSERT,LOWER,UPPER,LEFT,RIGHT,LOCATE,POSITION,LPAD,RPAD,LTRIM,RTRIM,TRIM,REGEXP_REPLACE,REPEAT,REPLACE,SOUNDEX,SPACE,STRINGDECODE,STRINGENCODE,STRINGTOUTF8,SUBSTRING,UTF8TOSTRING,XMLATTR,XMLNODE,XMLCOMMENT,XMLCDATA,XMLSTARTDOC,XMLTEXT
systemFunctions: ARRAY_GET,ARRAY_LENGTH,AUTOCOMMIT,CANCEL_SESSION,CASEWHEN,CAST,COALESCE,CONVERT,CURRVAL,CSVREAD,CSVWRITE,DATABASE,DATABASE_PATH,FILE_READ,GREATEST,IDENTITY,IFNULL,LEAST,LOCK_MODE,LOCK_TIMEOUT,LINK_SCHEMA,MEMORY_FREE,MEMORY_USED,NEXTVAL,NULLIF,READONLY,ROWNUM,SCHEMA,SCOPE_IDENTITY,SESSION_ID,SET,TABLE,TRANSACTION_ID,USER
timeDateFunctions: CURRENT_DATE,CURRENT_TIME,CURRENT_TIMESTAMP,DATEADD,DATEDIFF,DAYNAME,DAY_OF_MONTH,DAY_OF_WEEK,DAY_OF_YEAR,EXTRACT,FORMATDATETIME,HOUR,MINUTE,MONTH,MONTHNAME,PARSEDATETIME,QUARTER,SECOND,WEEK,YEAR
url: jdbc:h2:mem:test
userName: 
defaultTransactionIsolation: 2
driverMajorVersion: 1
driverMinorVersion: 2
maxBinaryLiteralLength: 0
maxCatalogNameLength: 0
maxCharLiteralLength: 0
maxColumnNameLength: 0
maxColumnsInGroupBy: 0
maxColumnsInIndex: 0
maxColumnsInOrderBy: 0
maxColumnsInSelect: 0
maxColumnsInTable: 0
maxConnections: 0
maxCursorNameLength: 0
maxIndexLength: 0
maxProcedureNameLength: 0
maxRowSize: 0
maxSchemaNameLength: 0
maxStatementLength: 0
maxStatements: 0
maxTableNameLength: 0
maxTablesInSelect: 0
maxUserNameLength: 0
isCatalogAtStart: true
isReadOnly: false
nullPlusNonNullIsNull: true
nullsAreSortedAtEnd: false
nullsAreSortedAtStart: false
nullsAreSortedHigh: false
nullsAreSortedLow: true
storesLowerCaseIdentifiers: false
storesLowerCaseQuotedIdentifiers: false
storesMixedCaseIdentifiers: false
storesMixedCaseQuotedIdentifiers: true
storesUpperCaseIdentifiers: true
storesUpperCaseQuotedIdentifiers: false
supportsAlterTableWithAddColumn: true
supportsAlterTableWithDropColumn: true
supportsANSI92EntryLevelSQL: true
supportsANSI92FullSQL: false
supportsANSI92IntermediateSQL: false
supportsCatalogsInDataManipulation: true
supportsCatalogsInIndexDefinitions: true
supportsCatalogsInPrivilegeDefinitions: true
supportsCatalogsInProcedureCalls: false
supportsCatalogsInTableDefinitions: true
supportsColumnAliasing: true
supportsConvert: true
supportsCoreSQLGrammar: true
supportsCorrelatedSubqueries: true
supportsDataDefinitionAndDataManipulationTransactions: false
supportsDataManipulationTransactionsOnly: true
supportsDifferentTableCorrelationNames: false
supportsExpressionsInOrderBy: true
supportsExtendedSQLGrammar: false
supportsFullOuterJoins: false
supportsGroupBy: true
supportsGroupByBeyondSelect: true
supportsGroupByUnrelated: true
supportsIntegrityEnhancementFacility: true
supportsLikeEscapeClause: true
supportsLimitedOuterJoins: true
supportsMinimumSQLGrammar: true
supportsMixedCaseIdentifiers: false
supportsMixedCaseQuotedIdentifiers: true
supportsMultipleResultSets: false
supportsMultipleTransactions: true
supportsNonNullableColumns: true
supportsOpenCursorsAcrossCommit: false
supportsOpenCursorsAcrossRollback: false
supportsOpenStatementsAcrossCommit: true
supportsOpenStatementsAcrossRollback: true
supportsOrderByUnrelated: true
supportsOuterJoins: true
supportsPositionedDelete: true
supportsPositionedUpdate: true
supportsSchemasInDataManipulation: true
supportsSchemasInIndexDefinitions: true
supportsSchemasInPrivilegeDefinitions: true
supportsSchemasInProcedureCalls: true
supportsSchemasInTableDefinitions: true
supportsSelectForUpdate: true
supportsStoredProcedures: false
supportsSubqueriesInComparisons: true
supportsSubqueriesInExists: true
supportsSubqueriesInIns: true
supportsSubqueriesInQuantifieds: true
supportsTableCorrelationNames: true
supportsTransactions: true
supportsUnion: true
supportsUnionAll: true
usesLocalFilePerTable: false
usesLocalFiles: true
allProceduresAreCallable: true
allTablesAreSelectable: true
dataDefinitionCausesTransactionCommit: true
dataDefinitionIgnoredInTransactions: false
doesMaxRowSizeIncludeBlobs: false
supportsBatchUpdates: true
1821  db  TRACE  [main] openjpa.jdbc.JDBC - Initial connection autoCommit: true, holdability: 1, TransactionIsolation: 2
1833  db  TRACE  [main] openjpa.jdbc.JDBC - <t 1205573714, conn 569201753> [3 ms] close
1928  db  TRACE  [main] openjpa.Runtime - Found datasource1: datasource 1550766882 from configuration. StoreContext: org.apache.openjpa.kernel.FinalizingBrokerImpl@345c98f3
1937  db  TRACE  [main] openjpa.MetaData - Scanning resource ""META-INF/orm.xml"" for persistent types.
1937  db  TRACE  [main] openjpa.MetaData - The persistent unit root url is ""null""
1938  db  TRACE  [main] openjpa.MetaData - parsePersistentTypeNames() found [openjpatest.Group, openjpatest.Organization, openjpatest.AddressBook].
1938  db  TRACE  [main] openjpa.MetaData - Found 3 classes with metadata in 1 milliseconds.
1385  db  TRACE  [main] openjpa.Enhance - ""openjpatest/Group"" requires runtime enhancement: true
1416  db  TRACE  [main] openjpa.MetaData - Loading metadata for ""class openjpatest.Group"" under mode ""[META][QUERY]"".
1433  db  TRACE  [main] openjpa.MetaData - Parsing class ""openjpatest.Group"".
1433  db  TRACE  [main] openjpa.MetaData - Parsing package ""openjpatest.Group"".
1469  db  TRACE  [main] openjpa.MetaData - Generating default metadata for type ""openjpatest.Group"".
1469  db  TRACE  [main] openjpa.MetaData - Using reflection for metadata generation.
1504  db  TRACE  [main] openjpa.MetaData - Set persistence-capable superclass of ""openjpatest.Group"" to ""null"".
1504  db  TRACE  [main] openjpa.MetaData - Resolving metadata for ""openjpatest.Group@1606871064"".
1504  db  TRACE  [main] openjpa.MetaData - 	Resolving field ""openjpatest.Group@1606871064.id"".
1511  db  TRACE  [main] openjpa.MetaData - 	Resolving field ""openjpatest.Group@1606871064.name"".
1511  db  TRACE  [main] openjpa.MetaData - 	Resolving field ""openjpatest.Group@1606871064.organization"".
1511  db  TRACE  [main] openjpa.MetaData - Loading metadata for ""class openjpatest.Organization"" under mode ""[META][QUERY]"".
1511  db  TRACE  [main] openjpa.MetaData - Parsing class ""openjpatest.Organization"".
1513  db  TRACE  [main] openjpa.MetaData - Generating default metadata for type ""openjpatest.Organization"".
1513  db  TRACE  [main] openjpa.MetaData - Using reflection for metadata generation.
1521  db  TRACE  [main] openjpa.MetaData - Set persistence-capable superclass of ""openjpatest.Organization"" to ""null"".
1521  db  TRACE  [main] openjpa.MetaData - 	Resolving field ""openjpatest.Group@1606871064.version"".
1522  db  TRACE  [main] openjpa.MetaData - Resolving metadata for ""openjpatest.Organization@570110481"".
1522  db  TRACE  [main] openjpa.MetaData - 	Resolving field ""openjpatest.Organization@570110481.addressBook"".
1522  db  TRACE  [main] openjpa.MetaData - Loading metadata for ""class openjpatest.AddressBook"" under mode ""[META][QUERY]"".
1522  db  TRACE  [main] openjpa.MetaData - Parsing class ""openjpatest.AddressBook"".
1523  db  TRACE  [main] openjpa.MetaData - Generating default metadata for type ""openjpatest.AddressBook"".
1523  db  TRACE  [main] openjpa.MetaData - Using reflection for metadata generation.
1527  db  TRACE  [main] openjpa.MetaData - Generating default metadata for type ""openjpatest.EmailAddress"".
1527  db  TRACE  [main] openjpa.MetaData - Using reflection for metadata generation.
1527  db  TRACE  [main] openjpa.MetaData - Set persistence-capable superclass of ""openjpatest.AddressBook"" to ""null"".
1527  db  TRACE  [main] openjpa.MetaData - 	Resolving field ""openjpatest.Organization@570110481.hostNames"".
1527  db  TRACE  [main] openjpa.MetaData - Resolving embedded metadata for ""java.lang.Object@1671818348"".
1528  db  TRACE  [main] openjpa.MetaData - Preparing mapping for ""openjpatest.Group"".
1528  db  TRACE  [main] openjpa.MetaData - Resolving mapping for ""openjpatest.Group@1606871064"".
1528  db  WARN   [main] openjpa.Enhance - An exception was thrown while attempting to perform class file transformation on ""openjpatest/Group"":
<openjpa-2.1.0-SNAPSHOT-r422266:999559M fatal user error> org.apache.openjpa.util.MetaDataException: Errors encountered while resolving metadata.  See nested exceptions for details.
	at org.apache.openjpa.meta.MetaDataRepository.resolve(MetaDataRepository.java:655)
	at org.apache.openjpa.meta.MetaDataRepository.getMetaDataInternal(MetaDataRepository.java:398)
	at org.apache.openjpa.meta.MetaDataRepository.getMetaData(MetaDataRepository.java:371)
	at org.apache.openjpa.enhance.PCEnhancer.<init>(PCEnhancer.java:283)
	at org.apache.openjpa.enhance.PCEnhancer.<init>(PCEnhancer.java:254)
	at org.apache.openjpa.enhance.PCClassFileTransformer.transform0(PCClassFileTransformer.java:143)
	at org.apache.openjpa.enhance.PCClassFileTransformer.transform(PCClassFileTransformer.java:124)
	at sun.instrument.TransformerManager.transform(TransformerManager.java:169)
	at sun.instrument.InstrumentationImpl.transform(InstrumentationImpl.java:365)
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClassCond(ClassLoader.java:632)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:616)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:141)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:283)
	at java.net.URLClassLoader.access$000(URLClassLoader.java:58)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:197)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:190)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:307)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:248)
	at java.lang.Class.forName0(Native Method)
	at java.lang.Class.forName(Class.java:247)
	at org.apache.openjpa.meta.MetaDataRepository.classForName(MetaDataRepository.java:1538)
	at org.apache.openjpa.meta.MetaDataRepository.loadPersistentTypesInternal(MetaDataRepository.java:1514)
	at org.apache.openjpa.meta.MetaDataRepository.loadPersistentTypes(MetaDataRepository.java:1492)
	at org.apache.openjpa.kernel.AbstractBrokerFactory.loadPersistentTypes(AbstractBrokerFactory.java:283)
	at org.apache.openjpa.kernel.AbstractBrokerFactory.initializeBroker(AbstractBrokerFactory.java:239)
	at org.apache.openjpa.kernel.AbstractBrokerFactory.newBroker(AbstractBrokerFactory.java:213)
	at org.apache.openjpa.kernel.DelegatingBrokerFactory.newBroker(DelegatingBrokerFactory.java:156)
	at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:227)
	at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:154)
	at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:60)
	at openjpatest.Main.main(Main.java:17)
Caused by: <openjpa-2.1.0-SNAPSHOT-r422266:999559M nonfatal user error> org.apache.openjpa.util.MetaDataException: No metadata was found for type ""class java.lang.Object"". The class is not enhanced.
	at org.apache.openjpa.meta.MetaDataRepository.getMetaDataInternal(MetaDataRepository.java:390)
	at org.apache.openjpa.meta.MetaDataRepository.getMetaData(MetaDataRepository.java:371)
	at org.apache.openjpa.meta.ClassMetaData.resolveMeta(ClassMetaData.java:1822)
	at org.apache.openjpa.meta.ClassMetaData.resolve(ClassMetaData.java:1787)
	at org.apache.openjpa.meta.ValueMetaDataImpl.resolve(ValueMetaDataImpl.java:435)
	at org.apache.openjpa.meta.FieldMetaData.resolve(FieldMetaData.java:1732)
	at org.apache.openjpa.meta.ClassMetaData.resolveMeta(ClassMetaData.java:1853)
	at org.apache.openjpa.meta.ClassMetaData.resolve(ClassMetaData.java:1787)
	at org.apache.openjpa.meta.MetaDataRepository.processBuffer(MetaDataRepository.java:809)
	at org.apache.openjpa.meta.MetaDataRepository.resolveMeta(MetaDataRepository.java:706)
	at org.apache.openjpa.meta.MetaDataRepository.resolve(MetaDataRepository.java:630)
	... 33 more
NestedThrowables:
<openjpa-2.1.0-SNAPSHOT-r422266:999559M fatal user error> org.apache.openjpa.util.MetaDataException: Unable to resolve type ""openjpatest.AddressBook"" due to previous errors resolving related type ""openjpatest.Organization"".
	at org.apache.openjpa.meta.MetaDataRepository.processBuffer(MetaDataRepository.java:822)
	at org.apache.openjpa.meta.MetaDataRepository.resolveMeta(MetaDataRepository.java:706)
	at org.apache.openjpa.meta.MetaDataRepository.resolve(MetaDataRepository.java:630)
	at org.apache.openjpa.meta.MetaDataRepository.getMetaDataInternal(MetaDataRepository.java:398)
	at org.apache.openjpa.meta.MetaDataRepository.getMetaData(MetaDataRepository.java:371)
	at org.apache.openjpa.enhance.PCEnhancer.<init>(PCEnhancer.java:283)
	at org.apache.openjpa.enhance.PCEnhancer.<init>(PCEnhancer.java:254)
	at org.apache.openjpa.enhance.PCClassFileTransformer.transform0(PCClassFileTransformer.java:143)
	at org.apache.openjpa.enhance.PCClassFileTransformer.transform(PCClassFileTransformer.java:124)
	at sun.instrument.TransformerManager.transform(TransformerManager.java:169)
	at sun.instrument.InstrumentationImpl.transform(InstrumentationImpl.java:365)
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClassCond(ClassLoader.java:632)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:616)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:141)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:283)
	at java.net.URLClassLoader.access$000(URLClassLoader.java:58)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:197)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:190)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:307)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:248)
	at java.lang.Class.forName0(Native Method)
	at java.lang.Class.forName(Class.java:247)
	at org.apache.openjpa.meta.MetaDataRepository.classForName(MetaDataRepository.java:1538)
	at org.apache.openjpa.meta.MetaDataRepository.loadPersistentTypesInternal(MetaDataRepository.java:1514)
	at org.apache.openjpa.meta.MetaDataRepository.loadPersistentTypes(MetaDataRepository.java:1492)
	at org.apache.openjpa.kernel.AbstractBrokerFactory.loadPersistentTypes(AbstractBrokerFactory.java:283)
	at org.apache.openjpa.kernel.AbstractBrokerFactory.initializeBroker(AbstractBrokerFactory.java:239)
	at org.apache.openjpa.kernel.AbstractBrokerFactory.newBroker(AbstractBrokerFactory.java:213)
	at org.apache.openjpa.kernel.DelegatingBrokerFactory.newBroker(DelegatingBrokerFactory.java:156)
	at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:227)
	at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:154)
	at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:60)
	at openjpatest.Main.main(Main.java:17)
1535  db  TRACE  [main] openjpa.Enhance - ""openjpatest/Organization"" requires runtime enhancement: true
1537  db  TRACE  [main] openjpa.MetaData - Loading metadata for ""class openjpatest.Organization"" under mode ""[META][QUERY]"".
1537  db  TRACE  [main] openjpa.MetaData - Parsing class ""openjpatest.Organization"".
1538  db  TRACE  [main] openjpa.MetaData - Generating default metadata for type ""openjpatest.Organization"".
1538  db  TRACE  [main] openjpa.MetaData - Using reflection for metadata generation.
1540  db  TRACE  [main] openjpa.MetaData - Set persistence-capable superclass of ""openjpatest.Organization"" to ""null"".
1540  db  TRACE  [main] openjpa.MetaData - Resolving metadata for ""openjpatest.Organization@1056794277"".
1540  db  TRACE  [main] openjpa.MetaData - 	Resolving field ""openjpatest.Organization@1056794277.addressBook"".
1541  db  TRACE  [main] openjpa.MetaData - Loading metadata for ""class openjpatest.AddressBook"" under mode ""[META][QUERY]"".
1541  db  TRACE  [main] openjpa.MetaData - Parsing class ""openjpatest.AddressBook"".
1541  db  TRACE  [main] openjpa.MetaData - Generating default metadata for type ""openjpatest.AddressBook"".
1541  db  TRACE  [main] openjpa.MetaData - Using reflection for metadata generation.
1542  db  TRACE  [main] openjpa.MetaData - Generating default metadata for type ""openjpatest.EmailAddress"".
1542  db  TRACE  [main] openjpa.MetaData - Using reflection for metadata generation.
1542  db  TRACE  [main] openjpa.MetaData - Set persistence-capable superclass of ""openjpatest.AddressBook"" to ""null"".
1543  db  TRACE  [main] openjpa.MetaData - 	Resolving field ""openjpatest.Organization@1056794277.hostNames"".
1543  db  TRACE  [main] openjpa.MetaData - Resolving embedded metadata for ""java.lang.Object@1851652849"".
1543  db  WARN   [main] openjpa.Enhance - An exception was thrown while attempting to perform class file transformation on ""openjpatest/Organization"":
<openjpa-2.1.0-SNAPSHOT-r422266:999559M fatal user error> org.apache.openjpa.util.MetaDataException: Errors encountered while resolving metadata.  See nested exceptions for details.
	at org.apache.openjpa.meta.MetaDataRepository.resolve(MetaDataRepository.java:655)
	at org.apache.openjpa.meta.MetaDataRepository.getMetaDataInternal(MetaDataRepository.java:398)
	at org.apache.openjpa.meta.MetaDataRepository.getMetaData(MetaDataRepository.java:371)
	at org.apache.openjpa.enhance.PCEnhancer.<init>(PCEnhancer.java:283)
	at org.apache.openjpa.enhance.PCEnhancer.<init>(PCEnhancer.java:254)
	at org.apache.openjpa.enhance.PCClassFileTransformer.transform0(PCClassFileTransformer.java:143)
	at org.apache.openjpa.enhance.PCClassFileTransformer.transform(PCClassFileTransformer.java:124)
	at sun.instrument.TransformerManager.transform(TransformerManager.java:169)
	at sun.instrument.InstrumentationImpl.transform(InstrumentationImpl.java:365)
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClassCond(ClassLoader.java:632)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:616)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:141)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:283)
	at java.net.URLClassLoader.access$000(URLClassLoader.java:58)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:197)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:190)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:307)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:248)
	at java.lang.Class.forName0(Native Method)
	at java.lang.Class.forName(Class.java:247)
	at org.apache.openjpa.meta.MetaDataRepository.classForName(MetaDataRepository.java:1538)
	at org.apache.openjpa.meta.MetaDataRepository.loadPersistentTypesInternal(MetaDataRepository.java:1514)
	at org.apache.openjpa.meta.MetaDataRepository.loadPersistentTypes(MetaDataRepository.java:1492)
	at org.apache.openjpa.kernel.AbstractBrokerFactory.loadPersistentTypes(AbstractBrokerFactory.java:283)
	at org.apache.openjpa.kernel.AbstractBrokerFactory.initializeBroker(AbstractBrokerFactory.java:239)
	at org.apache.openjpa.kernel.AbstractBrokerFactory.newBroker(AbstractBrokerFactory.java:213)
	at org.apache.openjpa.kernel.DelegatingBrokerFactory.newBroker(DelegatingBrokerFactory.java:156)
	at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:227)
	at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:154)
	at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:60)
	at openjpatest.Main.main(Main.java:17)
Caused by: <openjpa-2.1.0-SNAPSHOT-r422266:999559M nonfatal user error> org.apache.openjpa.util.MetaDataException: No metadata was found for type ""class java.lang.Object"". The class is not enhanced.
	at org.apache.openjpa.meta.MetaDataRepository.getMetaDataInternal(MetaDataRepository.java:390)
	at org.apache.openjpa.meta.MetaDataRepository.getMetaData(MetaDataRepository.java:371)
	at org.apache.openjpa.meta.ClassMetaData.resolveMeta(ClassMetaData.java:1822)
	at org.apache.openjpa.meta.ClassMetaData.resolve(ClassMetaData.java:1787)
	at org.apache.openjpa.meta.ValueMetaDataImpl.resolve(ValueMetaDataImpl.java:435)
	at org.apache.openjpa.meta.FieldMetaData.resolve(FieldMetaData.java:1732)
	at org.apache.openjpa.meta.ClassMetaData.resolveMeta(ClassMetaData.java:1853)
	at org.apache.openjpa.meta.ClassMetaData.resolve(ClassMetaData.java:1787)
	at org.apache.openjpa.meta.MetaDataRepository.processBuffer(MetaDataRepository.java:809)
	at org.apache.openjpa.meta.MetaDataRepository.resolveMeta(MetaDataRepository.java:706)
	at org.apache.openjpa.meta.MetaDataRepository.resolve(MetaDataRepository.java:630)
	... 33 more
NestedThrowables:
<openjpa-2.1.0-SNAPSHOT-r422266:999559M fatal user error> org.apache.openjpa.util.MetaDataException: Unable to resolve type ""openjpatest.AddressBook"" due to previous errors resolving related type ""openjpatest.Organization"".
	at org.apache.openjpa.meta.MetaDataRepository.processBuffer(MetaDataRepository.java:822)
	at org.apache.openjpa.meta.MetaDataRepository.resolveMeta(MetaDataRepository.java:706)
	at org.apache.openjpa.meta.MetaDataRepository.resolve(MetaDataRepository.java:630)
	at org.apache.openjpa.meta.MetaDataRepository.getMetaDataInternal(MetaDataRepository.java:398)
	at org.apache.openjpa.meta.MetaDataRepository.getMetaData(MetaDataRepository.java:371)
	at org.apache.openjpa.enhance.PCEnhancer.<init>(PCEnhancer.java:283)
	at org.apache.openjpa.enhance.PCEnhancer.<init>(PCEnhancer.java:254)
	at org.apache.openjpa.enhance.PCClassFileTransformer.transform0(PCClassFileTransformer.java:143)
	at org.apache.openjpa.enhance.PCClassFileTransformer.transform(PCClassFileTransformer.java:124)
	at sun.instrument.TransformerManager.transform(TransformerManager.java:169)
	at sun.instrument.InstrumentationImpl.transform(InstrumentationImpl.java:365)
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClassCond(ClassLoader.java:632)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:616)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:141)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:283)
	at java.net.URLClassLoader.access$000(URLClassLoader.java:58)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:197)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:190)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:307)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:248)
	at java.lang.Class.forName0(Native Method)
	at java.lang.Class.forName(Class.java:247)
	at org.apache.openjpa.meta.MetaDataRepository.classForName(MetaDataRepository.java:1538)
	at org.apache.openjpa.meta.MetaDataRepository.loadPersistentTypesInternal(MetaDataRepository.java:1514)
	at org.apache.openjpa.meta.MetaDataRepository.loadPersistentTypes(MetaDataRepository.java:1492)
	at org.apache.openjpa.kernel.AbstractBrokerFactory.loadPersistentTypes(AbstractBrokerFactory.java:283)
	at org.apache.openjpa.kernel.AbstractBrokerFactory.initializeBroker(AbstractBrokerFactory.java:239)
	at org.apache.openjpa.kernel.AbstractBrokerFactory.newBroker(AbstractBrokerFactory.java:213)
	at org.apache.openjpa.kernel.DelegatingBrokerFactory.newBroker(DelegatingBrokerFactory.java:156)
	at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:227)
	at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:154)
	at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:60)
	at openjpatest.Main.main(Main.java:17)
1547  db  TRACE  [main] openjpa.Enhance - ""openjpatest/AddressBook"" requires runtime enhancement: true
1549  db  TRACE  [main] openjpa.MetaData - Loading metadata for ""class openjpatest.AddressBook"" under mode ""[META][QUERY]"".
1549  db  TRACE  [main] openjpa.MetaData - Parsing class ""openjpatest.AddressBook"".
1549  db  TRACE  [main] openjpa.MetaData - Generating default metadata for type ""openjpatest.AddressBook"".
1550  db  TRACE  [main] openjpa.MetaData - Using reflection for metadata generation.
1551  db  TRACE  [main] openjpa.MetaData - Generating default metadata for type ""openjpatest.EmailAddress"".
1551  db  TRACE  [main] openjpa.MetaData - Using reflection for metadata generation.
1551  db  TRACE  [main] openjpa.MetaData - Set persistence-capable superclass of ""openjpatest.AddressBook"" to ""null"".
1551  db  TRACE  [main] openjpa.MetaData - Resolving metadata for ""openjpatest.AddressBook@1543904466"".
1551  db  TRACE  [main] openjpa.MetaData - 	Resolving field ""openjpatest.AddressBook@1543904466.id"".
1551  db  TRACE  [main] openjpa.MetaData - 	Resolving field ""openjpatest.AddressBook@1543904466.primaryEmailAddress"".
1551  db  TRACE  [main] openjpa.MetaData - Loading metadata for ""class openjpatest.EmailAddress"" under mode ""[META][QUERY]"".
1551  db  TRACE  [main] openjpa.MetaData - Parsing class ""openjpatest.EmailAddress"".
1551  db  TRACE  [main] openjpa.MetaData - Generating default metadata for type ""openjpatest.EmailAddress"".
1551  db  TRACE  [main] openjpa.MetaData - Using reflection for metadata generation.
1552  db  TRACE  [main] openjpa.MetaData - Set persistence-capable superclass of ""openjpatest.EmailAddress"" to ""null"".
1552  db  TRACE  [main] openjpa.MetaData - Resolving embedded metadata for ""openjpatest.EmailAddress@357453361"".
1552  db  TRACE  [main] openjpa.MetaData - Set persistence-capable superclass of ""openjpatest.EmailAddress"" to ""null"".
1552  db  TRACE  [main] openjpa.MetaData - Resolving metadata for ""openjpatest.EmailAddress@1206877668"".
1552  db  TRACE  [main] openjpa.MetaData - 	Resolving field ""openjpatest.EmailAddress@1206877668.email"".
1552  db  TRACE  [main] openjpa.MetaData - 	Resolving field ""openjpatest.EmailAddress@357453361.email"".
1552  db  TRACE  [main] openjpa.MetaData - Preparing mapping for ""openjpatest.AddressBook"".
1552  db  TRACE  [main] openjpa.MetaData - Preparing mapping for ""openjpatest.EmailAddress"".
1553  db  TRACE  [main] openjpa.MetaData - Resolving mapping for ""openjpatest.AddressBook@1543904466"".
1553  db  TRACE  [main] openjpa.MetaData - Resolving mapping for ""openjpatest.EmailAddress@1206877668"".
1553  db  TRACE  [main] openjpa.Enhance - Enhancing type ""class openjpatest.AddressBook"" loaded by org.apache.openjpa.lib.util.TemporaryClassLoader@38ffd135.
2358  db  TRACE  [main] openjpa.Enhance - org.apache.openjpa.enhance.InstrumentationFactory.getInstrumentation() _inst:sun.instrument.InstrumentationImpl@31d8d237 _dynamicallyInstall:true
2359  db  INFO   [main] openjpa.Enhance - Creating subclass and redefining methods for ""[class openjpatest.Group, class openjpatest.Organization]"". This means that your application will be less efficient than it would if you ran the OpenJPA enhancer.
2364  db  TRACE  [main] openjpa.Runtime - No cache marshaller found for id org.apache.openjpa.conf.MetaDataCacheMaintenance.
2364  db  TRACE  [main] openjpa.MetaData - Using metadata factory ""org.apache.openjpa.persistence.jdbc.PersistenceMappingFactory@109b2a51"".
2364  db  TRACE  [main] openjpa.MetaData - Loading metadata for ""class openjpatest.Group"" under mode ""[META]"".
2364  db  TRACE  [main] openjpa.MetaData - Scanning resource ""META-INF/orm.xml"" for persistent types.
2364  db  TRACE  [main] openjpa.MetaData - The persistent unit root url is ""null""
2364  db  TRACE  [main] openjpa.MetaData - parsePersistentTypeNames() found [openjpatest.Group, openjpatest.Organization, openjpatest.AddressBook].
2365  db  TRACE  [main] openjpa.MetaData - Found 3 classes with metadata in 0 milliseconds.
2394  db  TRACE  [main] openjpa.MetaData - Parsing class ""openjpatest.Group"".
2394  db  TRACE  [main] openjpa.MetaData - Parsing package ""openjpatest.Group"".
2405  db  TRACE  [main] openjpa.MetaData - Generating default metadata for type ""openjpatest.Group"".
2405  db  TRACE  [main] openjpa.MetaData - Using reflection for metadata generation.
2418  db  TRACE  [main] openjpa.MetaData - Set persistence-capable superclass of ""openjpatest.Group"" to ""null"".
2419  db  TRACE  [main] openjpa.MetaData - Resolving metadata for ""openjpatest.Group@778653458"".
2419  db  TRACE  [main] openjpa.MetaData - 	Resolving field ""openjpatest.Group@778653458.id"".
2419  db  TRACE  [main] openjpa.MetaData - 	Resolving field ""openjpatest.Group@778653458.name"".
2419  db  TRACE  [main] openjpa.MetaData - 	Resolving field ""openjpatest.Group@778653458.organization"".
2419  db  TRACE  [main] openjpa.MetaData - Loading metadata for ""class openjpatest.Organization"" under mode ""[META]"".
2419  db  TRACE  [main] openjpa.MetaData - Parsing class ""openjpatest.Organization"".
2420  db  TRACE  [main] openjpa.MetaData - Generating default metadata for type ""openjpatest.Organization"".
2420  db  TRACE  [main] openjpa.MetaData - Using reflection for metadata generation.
2424  db  TRACE  [main] openjpa.MetaData - Set persistence-capable superclass of ""openjpatest.Organization"" to ""null"".
2424  db  TRACE  [main] openjpa.MetaData - 	Resolving field ""openjpatest.Group@778653458.version"".
2424  db  TRACE  [main] openjpa.MetaData - Resolving metadata for ""openjpatest.Organization@1546386943"".
2424  db  TRACE  [main] openjpa.MetaData - 	Resolving field ""openjpatest.Organization@1546386943.addressBook"".
2424  db  TRACE  [main] openjpa.MetaData - Loading metadata for ""class openjpatest.AddressBook"" under mode ""[META]"".
2424  db  TRACE  [main] openjpa.MetaData - Parsing class ""openjpatest.AddressBook"".
2425  db  TRACE  [main] openjpa.MetaData - Generating default metadata for type ""openjpatest.AddressBook"".
2427  db  TRACE  [main] openjpa.MetaData - Generating default metadata for type ""openjpatest.EmailAddress"".
2427  db  TRACE  [main] openjpa.MetaData - Using reflection for metadata generation.
2427  db  TRACE  [main] openjpa.MetaData - Set persistence-capable superclass of ""openjpatest.AddressBook"" to ""null"".
2427  db  TRACE  [main] openjpa.MetaData - 	Resolving field ""openjpatest.Organization@1546386943.hostNames"".
2427  db  TRACE  [main] openjpa.MetaData - Resolving embedded metadata for ""java.lang.Object@1691493474"".
2428  db  TRACE  [main] openjpa.MetaData - Preparing mapping for ""openjpatest.Group"".
2432  db  TRACE  [main] openjpa.MetaData - 	Resolving field ""openjpatest.Group@778653458.id"".
2437  db  TRACE  [main] openjpa.MetaData - 	""id"" has mapping strategy ""org.apache.openjpa.jdbc.meta.strats.StringFieldStrategy"".
2439  db  TRACE  [main] openjpa.MetaData - 	Resolving field ""openjpatest.Group@778653458.name"".
2439  db  TRACE  [main] openjpa.MetaData - 	""name"" has mapping strategy ""org.apache.openjpa.jdbc.meta.strats.StringFieldStrategy"".
2440  db  TRACE  [main] openjpa.MetaData - 	Resolving field ""openjpatest.Group@778653458.version"".
2440  db  TRACE  [main] openjpa.MetaData - 	""version"" has mapping strategy ""none"".
2444  db  TRACE  [main] openjpa.MetaData - ""openjpatest.Group<discriminator>"" has mapping strategy ""value-map"".
2446  db  TRACE  [main] openjpa.MetaData - ""openjpatest.Group<version>"" has mapping strategy ""version-number"".
2446  db  TRACE  [main] openjpa.MetaData - Resolving mapping for ""openjpatest.Group@778653458"".
2447  db  TRACE  [main] openjpa.MetaData - ""openjpatest.Group"" has mapping strategy ""full"".
2447  db  TRACE  [main] openjpa.MetaData - 	Resolving field ""openjpatest.Group@778653458.organization"".
Exception in thread ""main"" <openjpa-2.1.0-SNAPSHOT-r422266:999559M fatal user error> org.apache.openjpa.persistence.ArgumentException: Errors encountered while resolving metadata.  See nested exceptions for details.
	at org.apache.openjpa.meta.MetaDataRepository.resolve(MetaDataRepository.java:655)
	at org.apache.openjpa.meta.MetaDataRepository.getMetaDataInternal(MetaDataRepository.java:398)
	at org.apache.openjpa.meta.MetaDataRepository.getMetaData(MetaDataRepository.java:371)
	at org.apache.openjpa.enhance.PCEnhancer.<init>(PCEnhancer.java:283)
	at org.apache.openjpa.enhance.PCEnhancer.<init>(PCEnhancer.java:254)
	at org.apache.openjpa.enhance.PCEnhancer.<init>(PCEnhancer.java:222)
	at org.apache.openjpa.enhance.ManagedClassSubclasser.prepareUnenhancedClasses(ManagedClassSubclasser.java:134)
	at org.apache.openjpa.kernel.AbstractBrokerFactory.loadPersistentTypes(AbstractBrokerFactory.java:315)
	at org.apache.openjpa.kernel.AbstractBrokerFactory.initializeBroker(AbstractBrokerFactory.java:239)
	at org.apache.openjpa.kernel.AbstractBrokerFactory.newBroker(AbstractBrokerFactory.java:213)
	at org.apache.openjpa.kernel.DelegatingBrokerFactory.newBroker(DelegatingBrokerFactory.java:156)
	at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:227)
	at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:154)
	at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:60)
	at openjpatest.Main.main(Main.java:17)
Caused by: <openjpa-2.1.0-SNAPSHOT-r422266:999559M nonfatal user error> org.apache.openjpa.persistence.ArgumentException: No metadata was found for type ""class java.lang.Object"". The class is not enhanced.
	at org.apache.openjpa.meta.MetaDataRepository.getMetaDataInternal(MetaDataRepository.java:390)
	at org.apache.openjpa.meta.MetaDataRepository.getMetaData(MetaDataRepository.java:371)
	at org.apache.openjpa.meta.ClassMetaData.resolveMeta(ClassMetaData.java:1822)
	at org.apache.openjpa.meta.ClassMetaData.resolve(ClassMetaData.java:1787)
	at org.apache.openjpa.meta.ValueMetaDataImpl.resolve(ValueMetaDataImpl.java:435)
	at org.apache.openjpa.jdbc.meta.ValueMappingImpl.resolve(ValueMappingImpl.java:494)
	at org.apache.openjpa.meta.FieldMetaData.resolve(FieldMetaData.java:1732)
	at org.apache.openjpa.jdbc.meta.FieldMapping.resolve(FieldMapping.java:458)
	at org.apache.openjpa.meta.ClassMetaData.resolveMeta(ClassMetaData.java:1853)
	at org.apache.openjpa.meta.ClassMetaData.resolve(ClassMetaData.java:1787)
	at org.apache.openjpa.meta.MetaDataRepository.processBuffer(MetaDataRepository.java:809)
	at org.apache.openjpa.meta.MetaDataRepository.resolveMeta(MetaDataRepository.java:706)
	at org.apache.openjpa.meta.MetaDataRepository.resolve(MetaDataRepository.java:630)
	... 14 more
NestedThrowables:
<openjpa-2.1.0-SNAPSHOT-r422266:999559M fatal user error> org.apache.openjpa.persistence.ArgumentException: Unable to resolve type ""openjpatest.AddressBook"" due to previous errors resolving related type ""openjpatest.Organization"".
	at org.apache.openjpa.meta.MetaDataRepository.processBuffer(MetaDataRepository.java:822)
	at org.apache.openjpa.meta.MetaDataRepository.resolveMeta(MetaDataRepository.java:706)
	at org.apache.openjpa.meta.MetaDataRepository.resolve(MetaDataRepository.java:630)
	at org.apache.openjpa.meta.MetaDataRepository.getMetaDataInternal(MetaDataRepository.java:398)
	at org.apache.openjpa.meta.MetaDataRepository.getMetaData(MetaDataRepository.java:371)
	at org.apache.openjpa.enhance.PCEnhancer.<init>(PCEnhancer.java:283)
	at org.apache.openjpa.enhance.PCEnhancer.<init>(PCEnhancer.java:254)
	at org.apache.openjpa.enhance.PCEnhancer.<init>(PCEnhancer.java:222)
	at org.apache.openjpa.enhance.ManagedClassSubclasser.prepareUnenhancedClasses(ManagedClassSubclasser.java:134)
	at org.apache.openjpa.kernel.AbstractBrokerFactory.loadPersistentTypes(AbstractBrokerFactory.java:315)
	at org.apache.openjpa.kernel.AbstractBrokerFactory.initializeBroker(AbstractBrokerFactory.java:239)
	at org.apache.openjpa.kernel.AbstractBrokerFactory.newBroker(AbstractBrokerFactory.java:213)
	at org.apache.openjpa.kernel.DelegatingBrokerFactory.newBroker(DelegatingBrokerFactory.java:156)
	at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:227)
	at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:154)
	at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:60)
	at openjpatest.Main.main(Main.java:17)
java.lang.NullPointerException
	at org.apache.openjpa.jdbc.meta.MappingInfo.mergeJoinColumn(MappingInfo.java:1513)
	at org.apache.openjpa.jdbc.meta.MappingInfo.createJoins(MappingInfo.java:1322)
	at org.apache.openjpa.jdbc.meta.MappingInfo.createForeignKey(MappingInfo.java:1084)
	at org.apache.openjpa.jdbc.meta.ValueMappingInfo.getTypeJoin(ValueMappingInfo.java:115)
	at org.apache.openjpa.jdbc.meta.ValueMappingInfo.getTypeJoin(ValueMappingInfo.java:92)
	at org.apache.openjpa.jdbc.meta.strats.RelationFieldStrategy.map(RelationFieldStrategy.java:167)
	at org.apache.openjpa.jdbc.meta.FieldMapping.setStrategy(FieldMapping.java:146)
	at org.apache.openjpa.jdbc.meta.RuntimeStrategyInstaller.installStrategy(RuntimeStrategyInstaller.java:82)
	at org.apache.openjpa.jdbc.meta.FieldMapping.resolveMapping(FieldMapping.java:496)
	at org.apache.openjpa.jdbc.meta.FieldMapping.resolve(FieldMapping.java:461)
	at org.apache.openjpa.jdbc.meta.ClassMapping.resolveMapping(ClassMapping.java:854)
	at org.apache.openjpa.meta.ClassMetaData.resolve(ClassMetaData.java:1792)
	at org.apache.openjpa.meta.MetaDataRepository.processBuffer(MetaDataRepository.java:809)
	at org.apache.openjpa.meta.MetaDataRepository.resolveMapping(MetaDataRepository.java:764)
	at org.apache.openjpa.meta.MetaDataRepository.resolve(MetaDataRepository.java:644)
	at org.apache.openjpa.meta.MetaDataRepository.getMetaDataInternal(MetaDataRepository.java:398)
	at org.apache.openjpa.meta.MetaDataRepository.getMetaData(MetaDataRepository.java:371)
	at org.apache.openjpa.enhance.PCEnhancer.<init>(PCEnhancer.java:283)
	at org.apache.openjpa.enhance.PCEnhancer.<init>(PCEnhancer.java:254)
	at org.apache.openjpa.enhance.PCEnhancer.<init>(PCEnhancer.java:222)
	at org.apache.openjpa.enhance.ManagedClassSubclasser.prepareUnenhancedClasses(ManagedClassSubclasser.java:134)
	at org.apache.openjpa.kernel.AbstractBrokerFactory.loadPersistentTypes(AbstractBrokerFactory.java:315)
	at org.apache.openjpa.kernel.AbstractBrokerFactory.initializeBroker(AbstractBrokerFactory.java:239)
	at org.apache.openjpa.kernel.AbstractBrokerFactory.newBroker(AbstractBrokerFactory.java:213)
	at org.apache.openjpa.kernel.DelegatingBrokerFactory.newBroker(DelegatingBrokerFactory.java:156)
	at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:227)
	at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:154)
	at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:60)
	at openjpatest.Main.main(Main.java:17)
","12/Jan/11 23:03;mikedd;If there's more work to be done for this issue please re-open, or open a sub task for the remaining work. "
SQL-Syntax errors with h2,OPENJPA-1818,12475398,Bug,Resolved,OPENJPA,OpenJPA,software,struberg,"Implementation of Java persistence, including the Java Persistence API JSR-220 (JPA 1.0) and JSR-317 (JPA 2.0).",http://openjpa.apache.org,Major,Fixed,drwoods,stefanwo,stefanwo,29/Sep/10 10:39,12/Jan/11 23:03,13/Mar/19 23:09,12/Jan/11 23:03,2.0.0,,,,,,,,,,,,,,,,,,,2.1.0,,,,,,,sql,,,,0,,"I have an Entity with an attribute named ""order"". While creating the table for the Entity there is thrown an error. Renaming the ""order""-attribute fixed this error.

Ill tested this with MySql and H2. With Mysql the ""order""-attribute was no problem, h2 thrown that error.

I dont know where the exact problem is, ill hope im right here :)

Workarround:
Rename the attribute.


Here the Stacktrace:

Caused by: <openjpa-2.0.0-r422266:935683 nonfatal general error> org.apache.openjpa.persistence.PersistenceException: Syntax Fehler in SQL Befehl ""CREATE TABLE TABBARITEMENTITY (ID INTEGER NOT NULL, ORDER[*] INTEGER, REF VARCHAR(255), TEXT VARCHAR(255), PRIMARY KEY (ID)) ""; erwartet ""identifier""
Syntax error in SQL statement ""CREATE TABLE TABBARITEMENTITY (ID INTEGER NOT NULL, ORDER[*] INTEGER, REF VARCHAR(255), TEXT VARCHAR(255), PRIMARY KEY (ID)) ""; expected ""identifier""; SQL statement:
CREATE TABLE TabbarItemEntity (id INTEGER NOT NULL, order INTEGER, ref VARCHAR(255), text VARCHAR(255), PRIMARY KEY (id)) [42001-124] {stmnt 20639876 
CREATE TABLE TabbarItemEntity (id INTEGER NOT NULL, order INTEGER, ref 
        VARCHAR(255), text VARCHAR(255), PRIMARY KEY (id)) } [code=42001, state=42001]
	at org.apache.openjpa.jdbc.meta.MappingTool.record(MappingTool.java:556)
	at org.apache.openjpa.jdbc.meta.MappingTool.record(MappingTool.java:456)
	at org.apache.openjpa.jdbc.kernel.JDBCBrokerFactory.synchronizeMappings(JDBCBrokerFactory.java:155)
	at org.apache.openjpa.jdbc.kernel.JDBCBrokerFactory.synchronizeMappings(JDBCBrokerFactory.java:159)
	at org.apache.openjpa.jdbc.kernel.JDBCBrokerFactory.newBrokerImpl(JDBCBrokerFactory.java:117)
	at org.apache.openjpa.kernel.AbstractBrokerFactory.newBroker(AbstractBrokerFactory.java:199)
	at org.apache.openjpa.kernel.DelegatingBrokerFactory.newBroker(DelegatingBrokerFactory.java:156)
	at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:213)
	at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:151)
	at org.apache.openjpa.persistence.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:57)
	at de.joe.core.server.config.ModulePersistenceApiOpenJPA.configure(ModulePersistenceApiOpenJPA.java:48)
	at com.google.inject.AbstractModule.configure(AbstractModule.java:59)
	at com.google.inject.spi.Elements$RecordingBinder.install(Elements.java:223)
	at com.google.inject.spi.Elements.getElements(Elements.java:101)
	at com.google.inject.internal.InjectorShell$Builder.build(InjectorShell.java:135)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:114)
	... 22 more
Caused by: org.apache.openjpa.lib.jdbc.ReportingSQLException: Syntax Fehler in SQL Befehl ""CREATE TABLE TABBARITEMENTITY (ID INTEGER NOT NULL, ORDER[*] INTEGER, REF VARCHAR(255), TEXT VARCHAR(255), PRIMARY KEY (ID)) ""; erwartet ""identifier""
Syntax error in SQL statement ""CREATE TABLE TABBARITEMENTITY (ID INTEGER NOT NULL, ORDER[*] INTEGER, REF VARCHAR(255), TEXT VARCHAR(255), PRIMARY KEY (ID)) ""; expected ""identifier""; SQL statement:
CREATE TABLE TabbarItemEntity (id INTEGER NOT NULL, order INTEGER, ref VARCHAR(255), text VARCHAR(255), PRIMARY KEY (id)) [42001-124] {stmnt 20639876 
CREATE TABLE TabbarItemEntity (id INTEGER NOT NULL, order INTEGER, ref 
        VARCHAR(255), text VARCHAR(255), PRIMARY KEY (id)) } [code=42001, state=42001]
	at org.apache.openjpa.lib.jdbc.LoggingConnectionDecorator.wrap(LoggingConnectionDecorator.java:257)
	at org.apache.openjpa.lib.jdbc.LoggingConnectionDecorator.wrap(LoggingConnectionDecorator.java:241)
	at org.apache.openjpa.lib.jdbc.LoggingConnectionDecorator.access$700(LoggingConnectionDecorator.java:70)
	at org.apache.openjpa.lib.jdbc.LoggingConnectionDecorator$LoggingConnection$LoggingStatement.executeUpdate(LoggingConnectionDecorator.java:951)
	at org.apache.openjpa.lib.jdbc.DelegatingStatement.executeUpdate(DelegatingStatement.java:136)
	at org.apache.openjpa.jdbc.schema.SchemaTool.executeSQL(SchemaTool.java:1200)
	at org.apache.openjpa.jdbc.schema.SchemaTool.createTable(SchemaTool.java:956)
	at org.apache.openjpa.jdbc.schema.SchemaTool.add(SchemaTool.java:533)
	at org.apache.openjpa.jdbc.schema.SchemaTool.add(SchemaTool.java:348)
	at org.apache.openjpa.jdbc.schema.SchemaTool.run(SchemaTool.java:325)
	at org.apache.openjpa.jdbc.meta.MappingTool.record(MappingTool.java:504)
	... 37 more
",h2 Version: 1.2.124,,,,,,,,,,,,12/Oct/10 18:30;drwoods;OPENJPA-1818.diff;https://issues.apache.org/jira/secure/attachment/12456990/OPENJPA-1818.diff,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-10-12 18:30:05.8,,,no_permission,,,,,,,,,,,38754,,,Wed Jan 12 23:03:10 UTC 2011,,,Patch Available,,,,0|i0ytpr:,201284,,,,,,,,"12/Oct/10 18:30;drwoods;Can you verify the attached patch fixes the problem for trunk and H2?
Or attach a junit testcase that we can pull into the builds?","12/Jan/11 23:03;mikedd;If there's more work to be done for this issue please re-open, or open a sub task for the remaining work. ",,,,,,,,,,,,,,,,
Type support has regressed in OpenJPA 2.0,OPENJPA-1662,12464287,Bug,Resolved,OPENJPA,OpenJPA,software,struberg,"Implementation of Java persistence, including the Java Persistence API JSR-220 (JPA 1.0) and JSR-317 (JPA 2.0).",http://openjpa.apache.org,Major,Fixed,ppoddar@apache.org,ppoddar@apache.org,ppoddar@apache.org,11/May/10 19:47,12/Jan/11 23:03,13/Mar/19 23:09,12/Jan/11 23:03,,,,,,,,,,,,,,,,,,,,2.0.2,2.1.0,,,,,,kernel,,,,0,,"Type support has weakened in OpenJPA 2.0 for untyped relations.
The problem is seemingly that
a) Entity.class is not translated to PersistenceCapble class as parsing at all places
b) the stringfication of OpenJPA identifier is not properly bi-directional",,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-01-12 23:03:07.493,,,no_permission,,,,,,,,,,,161919,,,Wed Jan 12 23:03:07 UTC 2011,,,,,,,0|i0ytnb:,201273,,,,,,,,"17/Aug/10 16:08;ppoddar@apache.org;I remember fixing this one on trunk. It is an important one.

My commits (952893) had messed up though to OPENJPA-1686. 

Regards --

Pinaki 








""Donald Woods (JIRA)"" <jira@apache.org> 
08/16/2010 04:20 PM

To
Pinaki Poddar/Dallas/IBM@IBMUS
cc

Subject
[jira] Updated: (OPENJPA-1662) Type support has regressed in OpenJPA 2.0







     [ 
https://issues.apache.org/jira/browse/OPENJPA-1662?page=com.atlassian.jira.plugin.system.issuetabpanels:all-tabpanel 
]

Donald Woods updated OPENJPA-1662:
----------------------------------

    Fix Version/s: 2.0.2
                       (was: 2.0.1)

at all places
bi-directional

-- 
This message is automatically generated by JIRA.
-
You can reply to this email to add a comment to the issue online.


","12/Jan/11 23:03;mikedd;If there's more work to be done for this issue please re-open, or open a sub task for the remaining work. ",,,,,,,,,,,,,,,,
Slice thread pool breaks down under high concurrency ,OPENJPA-1648,12463706,Bug,Resolved,OPENJPA,OpenJPA,software,struberg,"Implementation of Java persistence, including the Java Persistence API JSR-220 (JPA 1.0) and JSR-317 (JPA 2.0).",http://openjpa.apache.org,Major,Fixed,ppoddar@apache.org,ppoddar@apache.org,ppoddar@apache.org,04/May/10 21:19,12/Jan/11 23:03,13/Mar/19 23:09,12/Jan/11 23:03,,,,,,,,,,,,,,,,,,,,2.1.0,,,,,,,slice,,,,0,,"Slice thread pool breaks down under heavy usage [1].
This is due to poor choice of thread pool.

Also creation of thread pool for every flush() is inefficient.

Simple solution will be to use a cached thread pool -- which will be upper bounded by available system's capacity for concurrent native threads. ",,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-05-04 21:44:08.845,,,no_permission,,,,,,,,,,,161906,,,Wed Jan 12 23:03:06 UTC 2011,,,,,,,0|i0ytb3:,201218,,,,,,,,"04/May/10 21:44;sso;Hi Pinaki

I try and finally{} the block with threadPool.shutdown(). 

That seems to work.  100k transaction no problem now.

You nail it right on with the excessive pool creation in every flush().

I am not sure CachedThreadPool would have solved the problem.  You still have more flush() call coming along the way -- then we need to define RejectExecutionHandler.  We can't abort and we can't discard.

Since the pool is gonna go out of scope by the time flush() is done, we probably need to shut it down before going out of scope (so that expired thread no longer hang around).

I will keep on stressing the stack and see if there are more problems.

Cheers,
Simon

http://openjpa.208410.n2.nabble.com/Spring-3-0-2-OpenJPA-2-0-Slice-OutOfMemoryError-shortly-after-pounding-1000-threads-to-the-system-td5000822.html#a5000822
","12/Jan/11 23:03;mikedd;If there's more work to be done for this issue please re-open, or open a sub task for the remaining work. ",,,,,,,,,,,,,,,,
Exception thrown when enhancing a (property access) class that has an abstract @MappedSuperclass with no annotated properties,OPENJPA-1613,12461329,Bug,Resolved,OPENJPA,OpenJPA,software,struberg,"Implementation of Java persistence, including the Java Persistence API JSR-220 (JPA 1.0) and JSR-317 (JPA 2.0).",http://openjpa.apache.org,Major,Fixed,techhusky,sdroscher,sdroscher,06/Apr/10 23:28,12/Jan/11 22:38,13/Mar/19 23:09,12/Jan/11 22:38,2.0.0-beta2,2.0.0-beta3,,,,,,,,,,,,,,,,,,2.1.0,,,,,,,kernel,,,,0,,"If you have a class (using property access) that has an abstract @MappedSuperclass that happens to have no annotated methods, you get the following exception when enhancing:

org.apache.openjpa.util.MetaDataException: ""implicit property access"" for class ""org.apache.openjpa.persistence.simple.SubclassPerson"" is not consistent with ""implicit field access"" used by its persistent superclass ""org.apache.openjpa.persistence.simple.AbstractSuperclass"".  All persistent classes in an inheritance hierarchy must use a single implicit field or property based access style or explicitly declare an access style.

Presumably the enhancer is deciding incorrectly that the superclass is using field access. A workaround is to annotate the superclass with @Access(AccessType.PROPERTY)  so the enhancer doesn't make this assumption, but that is not JPA 1.0 backwards compatible.

This did not occur in any of the OpenJPA 1.* versions


",,,,,,,,,,,,,19/Apr/10 16:12;drwoods;OPENJPA-1613-failing-code-changes.diff;https://issues.apache.org/jira/secure/attachment/12442197/OPENJPA-1613-failing-code-changes.diff,19/Apr/10 16:11;drwoods;OPENJPA-1613-tests.diff;https://issues.apache.org/jira/secure/attachment/12442196/OPENJPA-1613-tests.diff,06/Apr/10 23:29;sdroscher;abstract-subclass.patch;https://issues.apache.org/jira/secure/attachment/12440971/abstract-subclass.patch,,,,,3.0,,,,,,,,,,,,,,,,,,,2010-04-12 17:57:37.908,,,no_permission,,,,,,,,,,,161872,,,Wed Jan 12 22:38:14 UTC 2011,,,,,,,0|i0yt7z:,201204,,,,,,,,06/Apr/10 23:29;sdroscher;Attached a test case that demonstrates the problem,"12/Apr/10 17:57;drwoods;For 1.0 (and 2.0) apps, you can use a orm.xml to specify the access-type as an attribute on the entity -
<xsd:simpleType name=""access-type""> <xsd:annotation>
<xsd:documentation>
This element determines how the persistence provider accesses the state of an entity or embedded object.
</xsd:documentation> </xsd:annotation> <xsd:restriction base=""xsd:token"">
<xsd:enumeration value=""PROPERTY""/>
<xsd:enumeration value=""FIELD""/> </xsd:restriction>
</xsd:simpleType>
","12/Apr/10 20:35;drwoods;Well, since you marked the methods with @Transient, the PersistenceMetaDataDeafults.determineImplicitAccessType() will return ACCESS_UNKNOWN, as those methods are removed from consideration, which causes PersistenceMetaDataDeafults.determineAccessType() to call getDeafultAccessType() which returns the default of ACCESS_FIELD.
","15/Apr/10 18:31;drwoods;From sect. 2.3.1 of the JPA 2.0 spec -
...
All such classes in the entity hierarchy whose access type is defaulted in this way must be consistent in their placement of annotations on either fields or properties, such that a single, consistent default access type applies within the hierarchy. Any embeddable classes used by such classes will have the same access type as the default access type of the hierarchy unless the Access annotation is specified as defined below.

It is an error if a default access type cannot be determined and an access type is not explicitly specified by means of annotations or the XML descriptor. The behavior of applications that mix the placement of annotations on fields and properties within an entity hierarchy without explicitly specifying the Access annotation is undefined.

So, in your case, the method is marked as Transient, so it is ignored.  The variable is private, which will not be persistance in the 2.0 spec, so it is ignored.  Therefore, the above ""It is an error if a default access type cannot be determined"" comes into play here, since the MappedSuperclass doesn't provide an explicit AccessType. 

One could argue though, if we should have thrown an exception, instead of defaulting to FIELD (which is the old OpenJPA 1.x behavior, as Private variables would be persisted.)
",19/Apr/10 16:11;drwoods;updated tests,"19/Apr/10 16:12;drwoods;Some code changes that I tried to make, which broke some existing junits, so DO NOT commit this AS-IS.","20/Apr/10 21:52;techhusky;I ran some comparisons between OpenJPA 1.2.2 and 2.0.x.  Version 1.2.2 is picking up the @javax.persistence.Transient annotation on the property in AbstractSuperclass and using this annotation to trigger property access by default.  Based on the JPA 1.0 spec (and carried forward to the 2.0 spec):

<jpa 1.0 - section 2.1.1>
When annotations are used, the placement of the mapping annotations on either the persistent fields or persistent properties of the entity class specifies the access type as being either field- or property-based access respectively.
</jpa 1.0>

As you can see the spec uses ""annotations"" freely in this context.  Can this be inferred to include all javax.persistence annotations, including Transient?  If so, it would follow that this mapped superclass definition would/should result in an ambiguous access type exception:  (which it does in OpenJPA 1.2.2 - not currently in OpenJPA 2.0.x - 2.0.x defaults to field access)

@MappedSuperclass
class MySuper {

 @Transient
  private String name;

  @Transient
  private Address getAddress() { ... }
  private void setAddress(Address a) { ... }
}

As Donald mentioned, OpenJPA 2.x.x currently ignores fields and methods tagged with the @Transient annotation when calculating the default access type.  Should OpenJPA take @Transient into account when deciding which access type to choose?  It is a very odd case where this annotation alone would be the deciding factor.  Regarding @Transient the 1.0 spec simply states:

<jpa 1.0 - section 2.1.1>
All non-transient instance variables that are not annotated with the Transient annotation are persistent.
and
All properties not annotated with the Transient annotation are persistent.
</jpa 1.0 -section 2.1.1>

As Donald also points out, the 2.0 spec adds:

<jpa 2.0 - section 2.3.1>
It is an error if a default access type cannot be determined and an access type is not explicitly specified by means of annotations or the XML descriptor. The behavior of applications that mix the placement of annotations on fields and properties within an entity hierarchy without explicitly specifying the Access annotation is undefined. 
</jpa 2.0 - section 2.3.1>

Looking at this specific case - it seems odd that @MappedSuperclass is used on an class with no persistent state.  If that is true, you could eliminate @MappedSuperclass from AbstractSuperclass.  Extending a non-persistent Java class is possible with OpenJPA.

Regardless, based on the verbiage in the spec and given the behavior of prior releases of OpenJPA, it would seem that using @Transient to detect the default access type is what OpenJPA should do.  Opinions, please!
","21/Apr/10 15:11;drwoods;Agree.  In this case where AbstractSuperclass.java only has the @Transient on a getter and no parent classes to examine, then we'd use the old behavior and set the access type as property.
If we do this, then I'd also like to see a WARN message logged, letting the user know we're setting the access type based on @Transient and they should really set an explicit type instead (as this behavior may not be portable and could change in future Specs.)  Also, we should add a WARN when getDefaultAcessType() is called and we end up defaulting to ACCESS_FIELD, with the same type of warning message.
","21/Apr/10 15:32;techhusky;Thanks, Donald.  I appreciate the feedback.  Adding warnings for these conditions is a great idea.","22/Apr/10 16:34;techhusky;Committed a fix under rev 936930 which included a slightly modified version of Simon's testcase.

As of this commit, OpenJPA will now take @javax.persistence.Transient fields and properties into consideration when making a default access determination.  This is consistent with the JPA specifications and OpenJPA 1.x behavior.  However, OpenJPA 2.x does not completely mimic 1.x behavior regarding persistent properties.  The provided test application exposed another inconsistency between OpenJPA 1.x and 2.x.  OpenJPA 2.x does more stringent verification on persistent properties.  Per spec,

<jpa 2.0 spec>
In this case, for every persistent property property of type T of the entity, there is a getter method, get-
Property, and setter method setProperty. For boolean properties, isProperty may be used as an alternative
name for the getter method.
For single-valued persistent properties, these method signatures are:
• T getProperty()
• void setProperty(T t)
</jpa 2.0 spec>

The supplied test application patch did not have a matching setter for the getter.  OpenJPA 1.x took the @Transient getter into account when making the default access determination - but dumped this message regarding the property:

<OpenJPA 1.x>
No setter was found for method someProperty in type test.AbstractSuperclass while searching for persistent properties. This method will be ignored. If you intended for this to be persistent, please add a corresponding setter, or switch to field access for this type hierarchy.
</OpenJPA 1.x>

This is an inconsistency in the 1.x code base.  I think a property should only be considered in the access calculation only if the property is/can be persistent.  As of this commit, OpenJPA 2.0 will only take the @Transient property into the default access calculation if the property is persistent (has a matching getter/setter).  Thus, I made a small change to the test code to ensure the @Transient property is in the format defined by the spec.","22/Apr/10 16:48;techhusky;Forgot to mention - I added code to log a trace level message when the access type cannot be determined and default access is used.  I had this as a warning, but due to the sheer quantity of entities in the jUnit bucket that use default access, the added logging was slowing down the test bucket and bloating the logs.",12/Jan/11 22:38;mikedd;Last code change was in April. If there's more to be done we'll open another issue. ,,,,,,
org.apache.openjpa.persistence.AnnotationPersistenceMetaDataSerializer missing break on Switch,OPENJPA-1866,12478835,Bug,Resolved,OPENJPA,OpenJPA,software,struberg,"Implementation of Java persistence, including the Java Persistence API JSR-220 (JPA 1.0) and JSR-317 (JPA 2.0).",http://openjpa.apache.org,Major,Fixed,curtisr7,gkorland,gkorland,01/Nov/10 20:04,19/Nov/10 20:22,13/Mar/19 23:09,19/Nov/10 20:22,2.0.1,2.1.0,,,,,,,,,,,,,,,,,,2.1.0,,,,,,,jdbc,,,,0,,org.apache.openjpa.persistence.AnnotationPersistenceMetaDataSerializer missing break on Switch,,,,,,,,,,,,,01/Nov/10 20:06;gkorland;patch.txt;https://issues.apache.org/jira/secure/attachment/12458576/patch.txt,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-11-19 20:22:32.393,,,no_permission,,,,,,,,,,,162099,,,Fri Nov 19 20:22:32 UTC 2010,,,Patch Available,,,,0|i0ytkn:,201261,,,,,,,,"19/Nov/10 20:22;curtisr7;Committed revision 1037006 to trunk.

Thanks Guy!",,,,,,,,,,,,,,,,,
NullPointerException thrown by the BrokerImpl.find() if requesting an entity which is marked by the @Cacheable(false) annotation,OPENJPA-1892,12480408,Bug,Resolved,OPENJPA,OpenJPA,software,struberg,"Implementation of Java persistence, including the Java Persistence API JSR-220 (JPA 1.0) and JSR-317 (JPA 2.0).",http://openjpa.apache.org,Major,Fixed,curtisr7,jwrap,jwrap,19/Nov/10 09:09,19/Nov/10 19:52,13/Mar/19 23:09,19/Nov/10 19:52,2.0.0,2.1.0,,,,,,,,,,,,,,,,,,2.1.0,,,,,,,datacache,,,,0,,"The configuration is as follows:
1. We have two entities which are in parent-child relationship (class Parent, class Child extends Parent)
2. The child entity is marked by the @Cacheable(false) annotation
3. The parent entity is not marked by the @Cacheable annotation
4. Shared cache configuration is set to DISABLE_SELECTIVE
5. Transaction type is RESOURCE_LOCAL

The test case is:
1. Create an instance of the Child entity and set some properties
2. Persist the entity by calling the EntityManager.persist() method
3. Request the entity using EntityManager.find() method and make sure the returned instance is the same which been persisted.
4. Clear L1 cache usign EntityManager.clear() mwthod
5. Repeat step 3. Here we get NPE in the BrokerImpl.find()

<openjpa-2.0.0-r422266:935683 nonfatal general error> org.apache.openjpa.persistence.PersistenceException: null
FailedObject: 2051 [org.apache.openjpa.util.StringId] [java.lang.String]
	at org.apache.openjpa.kernel.BrokerImpl.find(BrokerImpl.java:986)
	at org.apache.openjpa.kernel.BrokerImpl.find(BrokerImpl.java:880)
	at org.apache.openjpa.kernel.DelegatingBroker.find(DelegatingBroker.java:223)
	at org.apache.openjpa.persistence.EntityManagerImpl.find(EntityManagerImpl.java:476)
	at test.openjpa.caching.TestOpenJPACacheable.test(TestOpenJPACacheable.java:55)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
	at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:62)
	at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:140)
	at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:127)
	at org.apache.maven.surefire.Surefire.run(Surefire.java:177)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:345)
	at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:1009)
Caused by: java.lang.NullPointerException
	at org.apache.openjpa.datacache.DataCacheStoreManager.newPCData(DataCacheStoreManager.java:670)
	at org.apache.openjpa.datacache.DataCacheStoreManager.cacheStateManager(DataCacheStoreManager.java:374)
	at org.apache.openjpa.datacache.DataCacheStoreManager.initialize(DataCacheStoreManager.java:353)
	at org.apache.openjpa.kernel.DelegatingStoreManager.initialize(DelegatingStoreManager.java:112)
	at org.apache.openjpa.kernel.ROPStoreManager.initialize(ROPStoreManager.java:57)
	at org.apache.openjpa.kernel.BrokerImpl.initialize(BrokerImpl.java:1005)
	at org.apache.openjpa.kernel.BrokerImpl.find(BrokerImpl.java:963)
	... 32 more
","OpenJPA 2.0.0
PostgreSQL 8.4
Application managed env",,,,,,,,,,,,19/Nov/10 09:14;jwrap;jpa-cache.zip;https://issues.apache.org/jira/secure/attachment/12459988/jpa-cache.zip,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-11-19 19:52:18.976,,,no_permission,,,,,,,,,,,162121,,,Fri Nov 19 19:52:18 UTC 2010,,,,,,,0|i0ytgv:,201244,,,,,,,,"19/Nov/10 09:14;jwrap;The test case attached.
NOTE: In case if parent entity also marked as non-cacheable all works.","19/Nov/10 19:52;curtisr7;Committed a test and code change to trunk.

@see revision 1036988.

Rick",,,,,,,,,,,,,,,,
InstrumentationFactory crashes the tomcat WebappClassLoader by injecting org.apache.openjpa classes into the SystemClassLoader,OPENJPA-1454,12444812,Bug,Resolved,OPENJPA,OpenJPA,software,struberg,"Implementation of Java persistence, including the Java Persistence API JSR-220 (JPA 1.0) and JSR-317 (JPA 2.0).",http://openjpa.apache.org,Major,Fixed,drwoods,struberg,struberg,06/Jan/10 17:32,02/Nov/10 21:18,13/Mar/19 23:09,02/Nov/10 21:18,2.0.0-M3,,,,,,,,,,,,,,,,,,,2.1.0,,,,,,,UnenhancedClasses,,,,0,,"The InstrumentationFactory tries to find the jar containing the manifest with the pre-main and attaches this jar to the VM.

This has the side effect that all classes which get loaded via the Instrumentation are added to the 'classes' Vector of the SystemClassLoader. And this causes a problem when running OpenJPA in a WebApplication - because the SystemClassLoader only contains a few of those class definitions, and e.g. executing     

public void setBrokerFactory(BrokerFactory factory) {
        _factory = new DelegatingBrokerFactory(factory,
            PersistenceExceptions.TRANSLATOR);
    }

crashes the WebApp because org.apache.openjpa.util.Exceptions is available in the SystemClassLoader but the dependent J2DoPrivHelper is not.

This is even more problematic when using openjpa-lib, openjpa-kernel, etc as single jars (instead of openjpa-all), because in this case only openjpa-kernel gets injected into the VMs  system classpath - causing the agent to subsequently crash because all the classes from openjpa-lib obviously cannot be found. 

This might also be an explanation to a few other open JIRAs I've read through the last few days.
",,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-01-06 19:25:10.885,,,no_permission,,,,,,,,,,,161719,,,Tue Nov 02 21:18:56 UTC 2010,,,,,,,0|i0yt5b:,201192,,,,,,,,06/Jan/10 19:25;curtisr7;Does setting openjpa.DynamicEnhancementAgent=false in your p.xml fix the problem?,"06/Jan/10 19:52;struberg;yes, I disabled the whole agent for now (after 2 days of debugging).
Maybe we should switch instrumentation off by default?",06/Jan/10 19:57;curtisr7;Maybe this is a stupid question... but are you using an injected EM/EMF?,"06/Jan/10 20:15;struberg;yes and no ;)

I inject the EntityManager myself via OpenWebBeans, but use an extended EM (Persistence.createEntityManagerFactory())
The EntityManager gets created via a @Producer, thus lazy initialised in the WebappClassLoader realm.",06/Jan/10 20:33;curtisr7;Using buildtime enhancement I assume?,"06/Jan/10 20:39;struberg;yes, I use the openjpa-maven-plugin to do all the magic.",06/Jan/10 20:52;curtisr7;When this happens is there an exception or anything... ?,"06/Jan/10 21:02;mikedd;Maybe I'm missing it, but does the problem _only_ occur when using the individual jars, or can this occur when you use openjpa-all? ","06/Jan/10 22:13;struberg;Oki, the whole story:

I used openjpa-all-2.0.0-M3 on tomcat-6.0.20 (+Mojarra-2.0.1 + OpenWebBeans) and my application crashed (It worked on jetty-6 which surprises me a bit).
I cannot remember seeing any 'Agent failed' or something while using the openjpa-all. But I got funny ClassNotFoundException and NoClassDefFoundErrors. Since our production system is tomcat, I needed to evaluate what's going on.

So I jumped over and built OpenJPA-2 from trunk and used the single jars. With this setup, both tomcat and jetty crashed ;)
I then discovered the ClassLoading issue I posted to the list yesterday (ObjectValue#newInstance - will create a Jira). After fixing that part it runs on jetty again.

Today I digged deeper. Tomcats WebappClassLoader first tries to load the class from the SystemClassLoader to prevent applications from overwriting SE classes, and only if it gets a ClassNotFoundException it uses the war classpath. I then found out that the SystemClassLoader has a few classes of the openjpa-kernel registered (I remember the openjpa.util.Exceptions class). And caused by mechanism in the WebappClassLoader, it tries to use the SystemClassLoader to initialise the whole class tree. Here it epically fails while trying to load classes which are e.g. in openjpa-lib or any other dependency which is not available within the jar which got used to inject the Instrumentation. I remember the J2DoHelper and with openjpa-all I think it was parts of the validator-spec which crashed. 

Since the Instrumentation happens in parallel, it was a huge pita to find out, because the classes which have not been found changed from one server start to the other ;)

I suspect that the app works with jetty because it doesn't do the SE classes check...
","06/Jan/10 22:17;struberg;@Rick here is an example stacktrace:

Caused by: java.lang.ClassNotFoundException: org.apache.openjpa.lib.util.Closeable
        at java.net.URLClassLoader$1.run(URLClassLoader.java:200)
        at java.security.AccessController.doPrivileged(Native Method)
        at java.net.URLClassLoader.findClass(URLClassLoader.java:188)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:303)
        at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:248)
        at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:316)
        at java.lang.ClassLoader.defineClass1(Native Method)
        at java.lang.ClassLoader.defineClass(ClassLoader.java:616)
        at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:124)
        at java.net.URLClassLoader.defineClass(URLClassLoader.java:260)
        at java.net.URLClassLoader.access$000(URLClassLoader.java:56)
        at java.net.URLClassLoader$1.run(URLClassLoader.java:195)
        at java.security.AccessController.doPrivileged(Native Method)
        at java.net.URLClassLoader.findClass(URLClassLoader.java:188)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:303)
        at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:248)
        at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:316)
        at java.lang.ClassLoader.defineClass1(Native Method)
        at java.lang.ClassLoader.defineClass(ClassLoader.java:616)
        at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:124)
        at java.net.URLClassLoader.defineClass(URLClassLoader.java:260)
        at java.net.URLClassLoader.access$000(URLClassLoader.java:56)
        at java.net.URLClassLoader$1.run(URLClassLoader.java:195)
        at java.security.AccessController.doPrivileged(Native Method)
        at java.net.URLClassLoader.findClass(URLClassLoader.java:188)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:303)
        at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:248)
        at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1302)
        at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1233)
        at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:316)
        at org.apache.openjpa.persistence.EntityManagerFactoryImpl.setBrokerFactory(EntityManagerFactoryImpl.java:95)
        at org.apache.openjpa.persistence.EntityManagerFactoryValue.newFactory(EntityManagerFactoryValue.java:53)
        at org.apache.openjpa.persistence.JPAFacadeHelper.toEntityManagerFactory(JPAFacadeHelper.java:75)
        at org.apache.openjpa.persistence.PersistenceProviderImpl.createEntityManagerFactory(PersistenceProviderImpl.java:109)
        at org.apache.openjpa.persistence.PersistenceProviderImpl.createEntityManagerFactory(PersistenceProviderImpl.java:151)
        at org.apache.openjpa.persistence.PersistenceProviderImpl.createEntityManagerFactory(PersistenceProviderImpl.java:59)
        at javax.persistence.Persistence.createEntityManagerFactory(Persistence.java:150)
        at javax.persistence.Persistence.createEntityManagerFactory(Persistence.java:70)
        at org.apache.webbeans.resource.spi.se.ResourceServiceImpl.getPersistenceUnit(ResourceServiceImpl.java:111)
        at org.apache.webbeans.resource.spi.se.ResourceServiceImpl.getPersistenceContext(ResourceServiceImpl.java:125)
        at org.apache.webbeans.resource.spi.se.ResourceServiceImpl.getResource(ResourceServiceImpl.java:59)
        at org.apache.webbeans.resource.OpenWebBeansResourcePlugin.injectResources(OpenWebBeansResourcePlugin.java:61)
        at org.apache.webbeans.component.AbstractInjectionTargetBean.postConstructDefault(AbstractInjectionTargetBean.java:230)
        at org.apache.webbeans.component.AbstractInjectionTargetBean.postConstruct(AbstractInjectionTargetBean.java:213)
        at org.apache.webbeans.component.AbstractInjectionTargetBean.afterConstructor(AbstractInjectionTargetBean.java:199)
        at org.apache.webbeans.component.AbstractInjectionTargetBean.createDefaultInstance(AbstractInjectionTargetBean.java:136)


And this is the Instrumentation part. Please note that only openjpa-kernel gets injected into the root classpath as agent-jar, thus the lib.log.Log causes the clash.

Exception in thread ""Attach Listener"" java.lang.NoClassDefFoundError: org/apache/openjpa/lib/log/Log
        at java.lang.Class.getDeclaredMethods0(Native Method)
        at java.lang.Class.privateGetDeclaredMethods(Class.java:2427)
        at java.lang.Class.getMethod0(Class.java:2670)
        at java.lang.Class.getMethod(Class.java:1603)
        at sun.instrument.InstrumentationImpl.loadClassAndStartAgent(InstrumentationImpl.java:294)
        at sun.instrument.InstrumentationImpl.loadClassAndCallAgentmain(InstrumentationImpl.java:348)
Caused by: java.lang.ClassNotFoundException: org.apache.openjpa.lib.log.Log
        at java.net.URLClassLoader$1.run(URLClassLoader.java:200)
        at java.security.AccessController.doPrivileged(Native Method)
        at java.net.URLClassLoader.findClass(URLClassLoader.java:188)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:303)
        at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:248)
        at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:316)
        ... 6 more
Agent failed to start!


txs and LieGrue,
strub","11/Jan/10 20:11;curtisr7;@Mark

Do you see this same failure if you configure the -javaagent on tomcat/jetty ?","22/Feb/10 17:50;curtisr7;@Mark

Have you had a chance to try this out with the javaagent?","03/Mar/10 18:21;drwoods;My proposed solution is to:
1) add the validation spec into the openjpa-all jar, to resolve one issue you were seeing
2) update the user guide to state that the openjpa-all jar should be used with Tomcat when the instrumentation is used, to resolve the issue of missing classes from the system classloader
","22/Mar/10 20:42;drwoods;Mark, does the changes introduced by OPENJPA-1410 change the results any?  If you use the latest 2.0.0, what happens when you use openjpa-all?  Can you ping me offline and possibly provide me with a tarball of your test environment?
","12/Apr/10 17:46;drwoods;Mark, any updates on this?
","02/Nov/10 21:18;drwoods;no response since including the bval spec in openjpa-all, so closing.  please open a new JIRA if more work is needed.",,
fix ConcurrentModificationException during unrefed dependents cleanup,OPENJPA-2725,13128235,Bug,Resolved,OPENJPA,OpenJPA,software,struberg,"Implementation of Java persistence, including the Java Persistence API JSR-220 (JPA 1.0) and JSR-317 (JPA 2.0).",http://openjpa.apache.org,Minor,Fixed,ilgrosso,eran-levy,eran-levy,03/Jan/18 13:45,04/Jan/18 08:22,13/Mar/19 23:09,03/Jan/18 15:38,2.2.3,2.4.2,,,,,,,,,,,,,,,,,,2.4.3,3.0.0,,,,,,kernel,,,,0,,"Committed a fix - pull request #9: https://github.com/apache/openjpa/pull/9

In some situations there are state elements in _derefCache HashSet causing ConcurrentModificationException because set has been modified during iteration.
Copy all elements into another set and calling the same deleteDeref(StateManagerImpl sm) function.",,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-01-03 15:36:54.979,,,no_permission,,,,,,,,,,,9223372036854775807,,,Thu Jan 04 08:22:41 UTC 2018,,,,,,,0|i3ogqn:,9223372036854775807,,,,,,,,03/Jan/18 15:36;eran-levy;removed unnecessary if statement based on [~ilgrosso] code review,"03/Jan/18 15:36;jira-bot;Commit 1819981 from [~ilgrosso] in branch 'openjpa/branches/2.4.x'
[ https://svn.apache.org/r1819981 ]

OPENJPA-2725 - fix ConcurrentModificationException during unrefed dependents cleanup / thanks @eran-levy","03/Jan/18 15:37;jira-bot;Commit 1819982 from [~ilgrosso] in branch 'openjpa/trunk'
[ https://svn.apache.org/r1819982 ]

OPENJPA-2725 - fix ConcurrentModificationException during unrefed dependents cleanup / thanks @eran-levy - This closes #9","03/Jan/18 15:38;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/openjpa/pull/9
","04/Jan/18 08:22;jira-bot;Commit 1820041 from [~ilgrosso] in branch 'openjpa/branches/2.4.x'
[ https://svn.apache.org/r1820041 ]

OPENJPA-2725 - Fix build with java 6",,,,,,,,,,,,,
Query cache incorrectly handles parameters for BETWEEN expressions,OPENJPA-2698,13068265,Bug,Resolved,OPENJPA,OpenJPA,software,struberg,"Implementation of Java persistence, including the Java Persistence API JSR-220 (JPA 1.0) and JSR-317 (JPA 2.0).",http://openjpa.apache.org,Minor,Fixed,ilgrosso,dazeydev,dazeydev,01/May/17 22:41,09/Jun/17 15:50,13/Mar/19 23:09,03/May/17 06:46,2.2.2,,,,,,,,,,,,,,,,,,,2.4.3,3.0.0,,,,,,jdbc,jpa,sql,,0,,"When query cache is enabled: 
<property name=""openjpa.jdbc.QuerySQLCache"" value=""true""/>

If a query containing a BETWEEN expression is executed multiple times with different parameter values, the parameter values can persist across queries.

Example:
//Query1
String jpql2 = ""SELECT e FROM Employee e WHERE :baseDate between e.startDate AND e.endDate"";
TypedQuery<Employee> q1 = em.createQuery(jpql2, Employee.class);
q1.setParameter(""baseDate"", new GregorianCalendar(2016, Calendar.JUNE, 1).getTime());
q1.getResultList();

//Query2
TypedQuery<Employee> q2 = em.createQuery(jpql2, Employee.class);
q2.setParameter(""baseDate"", new GregorianCalendar(2017, Calendar.JUNE, 1).getTime());
q2.getResultList();

Produces the following queries:

Q1:
SELECT t0.id, t0.endDate, t0.hireStatus, t0.isManager, t0.name, t0.startDate, t0.status 
    FROM EMPLOYEE_PQC t0  
    WHERE (? >= t0.startDate AND ? <= t0.endDate) 
[params=(Timestamp) 2016-06-01 00:00:00.0, (Timestamp) 2016-06-01 00:00:00.0]

Q2:
SELECT t0.id, t0.endDate, t0.hireStatus, t0.isManager, t0.name, t0.startDate, t0.status 
    FROM EMPLOYEE_PQC t0
    WHERE (? >= t0.startDate AND ? <= t0.endDate) 
[params=(Timestamp) 2017-06-01 00:00:00.0, (Timestamp) 2016-06-01 00:00:00.0]

As you can see, the cached parameter for the endDate has persisted from the first query's parameters.",,,,,,,,,,,,,02/May/17 14:48;dazeydev;OPENJPA-2698-2.2.x.patch;https://issues.apache.org/jira/secure/attachment/12865993/OPENJPA-2698-2.2.x.patch,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2017-05-02 15:30:02.013,,,no_permission,,,,,,,,,,,9223372036854775807,,,Fri Jun 09 15:50:08 UTC 2017,,,Patch Available,,,,0|i3ec7j:,9223372036854775807,,,,,,,,02/May/17 14:48;dazeydev;This is a patch for 2.2.x,02/May/17 15:30;fyrewyld;Looks good to me.,"03/May/17 06:42;jira-bot;Commit 1793616 from [~ilgrosso] in branch 'openjpa/branches/2.4.x'
[ https://svn.apache.org/r1793616 ]

[OPENJPA-2698] Applying the provided patch","03/May/17 06:44;ilgrosso;The patch looks good to me too, thanks.
I have applied it to 2.4.x and trunk, which are the currently maintained branches.","03/May/17 06:45;jira-bot;Commit 1793617 from [~ilgrosso] in branch 'openjpa/trunk'
[ https://svn.apache.org/r1793617 ]

[OPENJPA-2698] Applying the provided patch","09/Jun/17 15:50;jira-bot;Commit 1798237 from [~fyrewyld] in branch 'openjpa/branches/2.2.x'
[ https://svn.apache.org/r1798237 ]

OPENJPA-2698: Query cache incorrectly handles parameters for BETWEEN expressions (commit on wdazeys behalf)",,,,,,,,,,,,
AnnotationProcessor shows warnings when executed on Java 7 sources,OPENJPA-2300,12617576,Bug,Resolved,OPENJPA,OpenJPA,software,struberg,"Implementation of Java persistence, including the Java Persistence API JSR-220 (JPA 1.0) and JSR-317 (JPA 2.0).",http://openjpa.apache.org,Minor,Fixed,ppoddar@apache.org,pkubowicz,pkubowicz,26/Nov/12 09:04,23/Aug/16 08:04,13/Mar/19 23:09,23/Aug/16 08:04,2.2.1,,,,,,,,,,,,,,,,,,,3.0.0,,,,,,,criteria,Enhance,,,8,java7,"When running {{openjpac}} Ant task on Java sources set to Java 7 compatibility, the following warning is shown:

    [javac] warning: Supported source version 'RELEASE_6' from annotation processor 'org.apache.openjpa.persistence.meta.AnnotationProcessor6' less than -source '1.7'

This is because AnnotationProcessor6.java contains:

@SupportedSourceVersion(RELEASE_6)

which according to JDK documentation means that this annotation processor is incompatible with Java 7.",OpenJPA 2.2.1,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-11-26 17:28:03.028,,,no_permission,,,,,,,,,,,292076,,,Tue Aug 23 07:57:41 UTC 2016,,,,,,,0|i0rrev:,160085,,,,,,,,"26/Nov/12 09:06;pkubowicz;Unless you know of any compatibility problems with OpenJPA 2.2.1 running on Java 7 (I haven't met any so far), please simply change this to RELEASE_7.","26/Nov/12 17:28;kwsutter;Just clarifying the Summary title to indicate that this issue is related to the AnnotationProcessing that kicks in when generating the MetaModel Entity classes.  These generated java source files are used to support the MetaModel and Criteria APIs, and are not related to the byte-code enhancement processing on the Entity classes.","27/Nov/12 04:18;ppoddar@apache.org;Does the annotation processor generate the meta classes in JDK7 or just fail after the warning? 
I am still at JDK 6, may be time to upgrade.","11/Mar/13 12:17;hwellmann;The annotation processor does generate the meta classes with JDK7 despite logging a warning, the warning is just rather confusing to end users.

Now that Java 6 is officially at end of life, OpenJPA should not complain about Java 7 sources, and as Piotr said, I suppose it's enough to simply upgrade the @SupportedSourceVersion.","11/Mar/13 14:02;kwsutter;Since it looks like Pinaki has already resolved this via another JIRA in Trunk, I'll assign the JIRA to him and let him properly resolve it as a duplicate.  Thanks.","21/Jun/13 19:21;allee8285;The changes in AnnotationProcess6 was removing the @SupportSourceVersion(RELEASE_6).  When run with JDK7, the reported warning is removed. However, when run with JDK with the annotation removed, one will get the following warning message:

""warning: No SupportedSourceVersion annotation found on org.apache.openjpa.persistence.meta.AnnotationProcessor6""

So one way or the other, a warning will be posted.

Since the current openjpa is built with JDK 6, it mean sense to leave the @SupportSourceVersion(6) in place such that the ""No SupportedSourceVersion..."" should not be observed, while with JDK 7, the warning is appropriate.

When OpenJPA moves up to build with JDK7, that should be the time to upgrade AnnotationProcessor* to support @SupportSourceVersion(7).

I propose to revert the change back to whatever it was before and resolve this issue when OpenJPA moves up to JDK 7 build.
","11/Jul/14 23:03;sjangra;Hi Pinaki,

  Is there any timeline when we can expect the Java 7 compatible version (free of warnings mentioned in this jira) ?

  We are compiling our code with Java 7 and also using -Werror flag, which is causing build failures. The warning that we get is ""warning: Supported source version 'RELEASE_6' from annotation processor 'org.apache.openjpa.persistence.meta.AnnotationProcessor6' less than -source '1.7""

Thanks",28/Nov/14 15:38;rockymm;Since Java 6 is EOL I really don't see why OpenJPA is still built with JDK6,14/Aug/15 13:21;slowstrider;Using OpenJPA 2.4.0 I'm still getting these warnings for Java 1.8 even though it works fine with Java 8.,"26/Nov/15 17:04;romain.manni-bucau;Should we just implement getSupportedSourceVersion like that:

{code}
    @Override
    public SourceVersion getSupportedSourceVersion() {
        return SourceVersion.latestSupported();
    }
{code}","23/Aug/16 07:57;jira-bot;Commit 1757320 from [~rmannibucau] in branch 'openjpa/trunk'
[ https://svn.apache.org/r1757320 ]

OPENJPA-2300 avoid warnings due to annotation processor",,,,,,,
UnsupportedOperationException caused in BrokerImpl during transaction commit processing.,OPENJPA-1702,12467292,Bug,Resolved,OPENJPA,OpenJPA,software,struberg,"Implementation of Java persistence, including the Java Persistence API JSR-220 (JPA 1.0) and JSR-317 (JPA 2.0).",http://openjpa.apache.org,Minor,Fixed,jpaheath,jpaheath,jpaheath,18/Jun/10 01:18,05/Feb/14 22:34,13/Mar/19 23:09,05/Feb/14 22:34,1.2.0,2.0.0,,,,,,,,,,,,,,,,,,2.1.0,,,,,,,kernel,,,,0,,"For a given scenario, which will be described in detail below, an UnsupportedOperationException occurs as follows:

[main] openjpa.Runtime - An exception occurred while ending the transaction.  This exception will be re-thrown.
<openjpa-1.2.3-SNAPSHOT-r422266:955388M nonfatal store error> org.apache.openjpa.util.StoreException: null
	at org.apache.openjpa.kernel.BrokerImpl.beforeCompletion(BrokerImpl.java:1853)
	at org.apache.openjpa.kernel.LocalManagedRuntime.commit(LocalManagedRuntime.java:81)
	at org.apache.openjpa.kernel.BrokerImpl.commit(BrokerImpl.java:1369)
	at org.apache.openjpa.kernel.DelegatingBroker.commit(DelegatingBroker.java:877)
	at org.apache.openjpa.persistence.EntityManagerImpl.commit(EntityManagerImpl.java:513)
	at hat.tests.TestUnsupportedOp.commitTx(TestUnsupportedOp.java:44)
	at hat.tests.TestUnsupportedOp.test(TestUnsupportedOp.java:90)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:592)
	at junit.framework.TestCase.runTest(TestCase.java:164)
	at junit.framework.TestCase.runBare(TestCase.java:130)
	at junit.framework.TestResult$1.protect(TestResult.java:110)
	at junit.framework.TestResult.runProtected(TestResult.java:128)
	at junit.framework.TestResult.run(TestResult.java:113)
	at junit.framework.TestCase.run(TestCase.java:120)
	at junit.framework.TestSuite.runTest(TestSuite.java:228)
	at junit.framework.TestSuite.run(TestSuite.java:223)
	at org.junit.internal.runners.OldTestClassRunner.run(OldTestClassRunner.java:35)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:46)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)
Caused by: java.lang.UnsupportedOperationException
	at java.util.AbstractCollection.add(AbstractCollection.java:216)
	at java.util.AbstractCollection.addAll(AbstractCollection.java:318)
	at org.apache.openjpa.kernel.BrokerImpl.flushTransAdditions(BrokerImpl.java:2103)
	at org.apache.openjpa.kernel.BrokerImpl.flushAdditions(BrokerImpl.java:2086)
	at org.apache.openjpa.kernel.BrokerImpl.flush(BrokerImpl.java:2000)
	at org.apache.openjpa.kernel.BrokerImpl.flushSafe(BrokerImpl.java:1927)
	at org.apache.openjpa.kernel.BrokerImpl.beforeCompletion(BrokerImpl.java:1845)
	... 25 more



Using the stack trace, and some particulars about the code path, I've been able to recreate the UnsupportedOperationException.  Let me first summarize what my test does, and then let me go into great details on how the issue occurs.  My test does the following:

1) My ""main"" code simply begins a tran, performs a query, and commits the tran.
2) I've created a 'tran listener' (i.e. an impl of org.apache.openjpa.event.TransactionListener) and in that 'listener', method 'beforeCommit', I dirty the entity queried/found in #1.
3) After my 'beforeCommit' method returns, the UnsupportedOperationException is thrown.


OK, that was the brief summary, for anyone else who cares to hear the gory details, lets dig in.....first, the exception stack shows the exception is hit here:


Caused by: java.lang.UnsupportedOperationException
   at java.util.AbstractCollection.add(AbstractCollection.java:68)
   at java.util.AbstractCollection.addAll(AbstractCollection.java:87)
   at
org.apache.openjpa.kernel.BrokerImpl.flushTransAdditions(BrokerImpl.java:2099) 
   at
org.apache.openjpa.kernel.BrokerImpl.flushAdditions(BrokerImpl.java:2086)
   at org.apache.openjpa.kernel.BrokerImpl.flush(BrokerImpl.java:2000) 


So, lets look at the code around 'flush(BrokerImpl.java:2000)'.  To follow is line 2000 (the last line) and a number of lines proceeding it:


               if ((_transEventManager.hasFlushListeners()
                    || _transEventManager.hasEndListeners())
                    && (flush || reason == FLUSH_COMMIT)) {
                    // fire events
                    mobjs = new ManagedObjectCollection(transactional);
                    if (reason == FLUSH_COMMIT
                        && _transEventManager.hasEndListeners()) {
                        fireTransactionEvent(new TransactionEvent(this, 
                            TransactionEvent.BEFORE_COMMIT, mobjs,
                            _persistedClss, _updatedClss, _deletedClss));

                        flushAdditions(transactional, reason);    <----- line 2000


So, in order to get to this 'flushAdditions', you must have a 'listener' (i.e. an impl of org.apache.openjpa.event.TransactionListener).  OK, with that said, keep this 'listener' idea in mind as we will come back to it.

Continue to dig into the stack and going up two levels, we see that 'flushTransAdditions(BrokerImpl.java:2099)' looks like this:

    private boolean flushTransAdditions(Collection transactional, int reason) {
        if (_transAdditions == null || _transAdditions.isEmpty())
            return false;

        // keep local transactional list copy up to date
        transactional.addAll(_transAdditions);   <----- line 2099

There are two important things to note here:
1) 'transactional' is a 'Collection'.
2) the addAll will only be called depending on the state of '_transAdditions'.

For #1, lets visit the javadoc for Collection.addAll and see why/when it throws the UnsupportedOperationException.....its states:

    * @throws UnsupportedOperationException if this collection does not
     *         support the <tt>addAll</tt> method.

So, we know that the 'Collection' is of a type which must not support addAll.  This offers a clue and we should look to see at which points 'transactional' could be defined as a 'Collection' which doesn't support 'addAll'.  'transactional' is set in BrokerImpl at line 1946 which is here:

        Collection transactional = getTransactionalStates();

If we look at 'getTransactionalStates()', we can see that the method could return a Collections.EMPTY_SET ('EmptySet'):

    protected Collection getTransactionalStates() {
        if (!hasTransactionalObjects())
            return Collections.EMPTY_SET;
        return _transCache.copy();
    }

An 'EmptySet.addAll' eventually calls 'AbstractCollection.add' which blatantly throws an UnsupportedOperationException (plus, and Collections.EMPTY_SET is immutable, so we should be adding to it anyway).  So, we know we must have a case where 'transactional' is an EmtpySet.  One way this may occur is to only query objects as I've done in step #1 of my test (i.e. I never dirty anything in step #1).

Next, #2 offers another clue in that we need to look at the case where '_transAdditions' is not null and not empty.  If we look in BorkerImpl at the places where '_transAdditions' is set, we can see things are added to it in the 'setDirty' method.  But, as we previously found, we are only querying objects, not making them dirty.  So, how can we have 'transactional' be an EmptySet, yet '_transAdditions' not null or empty?  One way is to go back to the 'listener' we discussed earlier and when the 'listener' is called, have it dirty an entity.  In so doing, the 'setDirty' method will be called which will add elements to '_transAdditions' such that conditions are met to cause 'transactional.addAll' to be called in 'flushTransAdditions'.  The ordering is basically like this:

1) 'transactional' is set to an EmptySet and the beginning of flush.
2) The 'listener' is called later on in flush which dirties an entity.  This causes '_transAdditions' to not be null or empty.
3) After the 'listener' is called, flushTransAdditions is called where at which time 'addAll', and then 'add', is called on an EmptySet/AbstractCollection which returns the exception.",,,,,,,,,,,,,18/Jun/10 22:54;jpaheath;OPENJPA-1702-TEST.patch.txt;https://issues.apache.org/jira/secure/attachment/12447503/OPENJPA-1702-TEST.patch.txt,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-07-09 17:08:20.159,,,no_permission,,,,,,,,,,,161953,,,Fri Jul 09 17:08:20 UTC 2010,,,,,,,0|i1dtov:,288907,,,,,,,,"18/Jun/10 22:54;jpaheath;I'm providing a test (in a 'patch' form), named OPENJPA-1702-TEST.patch.txt, which will recreate the UnsupportedOperationException (UOE).  

Looking at the comments within the 'test' method, you will see that I provided a suggested change to fix the UOE.  However, as the remained of the test shows, after fixing the UOE I've found that the updates made in 'beforeCommit' processing are not persisted to the DB.  For now, I'll provide the test for those interested and will continue to dig into a complete fix.  
Also note that after fixing the UOE, if you change the test case to dirty the entity before the commit, the changes made in 'beforeCommit' processing ARE persisted.  This may offer a clue.","09/Jul/10 17:08;mikedd;Hi Heath,

Interesting issue. I found that creating a LinkedHashSet in BrokerImpl.getTransactionalStates() instead of flushTransAdditions() allows the changes to be committed (this makes the 'main' set of dirty objects modifiable instead of the ones used for flushTransAdditions). Could you give this a try and see if it works for you? 


",,,,,,,,,,,,,,,,
IPv6 addresses not supported in UUIDGenerator,OPENJPA-2055,12525346,Bug,Resolved,OPENJPA,OpenJPA,software,struberg,"Implementation of Java persistence, including the Java Persistence API JSR-220 (JPA 1.0) and JSR-317 (JPA 2.0).",http://openjpa.apache.org,Minor,Fixed,jpaheath,jpaheath,jpaheath,30/Sep/11 18:26,05/Feb/14 22:28,13/Mar/19 23:09,05/Feb/14 22:28,2.1.0,,,,,,,,,,,,,,,,,,,2.1.1,2.2.0,,,,,,jdbc,,,,0,,"UUIDGenerator class uses an IPv4 address as part of its seed when generating a UUID.  That is, the UUIDGenerator makes a call to InteAddress 'getAddress' method to get the address and assumes it returns a byte array of size 4 (the size of an IPv4 address).  However, in an environment which uses IPv6, 'getAddress' can return a byte array of length 16.  UUIDGenerator needs to be updated to account for an IPv6 address.",,,,,,,,,,,,,30/Sep/11 18:31;jpaheath;OPENJPA-2055-2.1.x.patch;https://issues.apache.org/jira/secure/attachment/12497197/OPENJPA-2055-2.1.x.patch,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,41585,,,Fri Sep 30 18:31:39 UTC 2011,,,,,,,0|i1duw7:,289102,,,,,,,,30/Sep/11 18:31;jpaheath;Albert Lee and I have worked on a solution to account for the possibility of an IPv6 address.  I'm attaching a patch with our proposed solution.,,,,,,,,,,,,,,,,,
