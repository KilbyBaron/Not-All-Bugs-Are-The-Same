Summary,Issue key,Issue id,Issue Type,Status,Project key,Project name,Project type,Project lead,Project description,Project url,Priority,Resolution,Assignee,Reporter,Creator,Created,Updated,Last Viewed,Resolved,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Fix Version/s,Fix Version/s,Fix Version/s,Fix Version/s,Component/s,Component/s,Component/s,Component/s,Component/s,Due Date,Votes,Labels,Labels,Labels,Description,Environment,Original Estimate,Remaining Estimate,Time Spent,Work Ratio,Σ Original Estimate,Σ Remaining Estimate,Σ Time Spent,Security Level,Outward issue link (Blocker),Outward issue link (Cloners),Outward issue link (Duplicate),Outward issue link (Incorporates),Outward issue link (Incorporates),Outward issue link (Reference),Outward issue link (dependent),Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Custom field (Attachment count),Custom field (Blog - New Blog Administrators),Custom field (Blog - New Blog PMC),Custom field (Blog - Write access),Custom field (Blog Administrator?),Custom field (Blogs - Admin for blog),Custom field (Blogs - Email Address),Custom field (Blogs - Existing Blog Access Level),Custom field (Blogs - Existing Blog Name),Custom field (Blogs - New Blog Write Access),Custom field (Blogs - Username),Custom field (Bug Category),Custom field (Bugzilla - Email Notification Address),Custom field (Bugzilla - List of usernames),Custom field (Bugzilla - PMC Name),Custom field (Bugzilla - Project Name),Custom field (Bugzilla Id),Custom field (CXF Fields),Custom field (Change Category),Custom field (Complexity),Custom field (Date of First Response),Custom field (Discovered By),Custom field (Docs Text),Custom field (Enable Automatic Patch Review),Custom field (Epic Link),Custom field (Estimated Complexity),Custom field (Existing GitBox Approval),Custom field (External issue ID),Custom field (External issue URL),Custom field (Git Notification Mailing List),Custom field (Git Repository Import Path),Custom field (Git Repository Name),Custom field (Git Repository Type),Custom field (GitHub Options),Custom field (Github Integration),Custom field (Github Integrations - Other),Custom field (Global Rank),Custom field (INFRA - Subversion Repository Path),Custom field (Initial Confluence Contributors),Custom field (Last public comment date),Custom field (Machine Readable Info),Custom field (New-TLP-TLPName),Custom field (Priority),Custom field (Project),Custom field (Protected Branch),Custom field (Rank),Custom field (Rank (Obsolete)),Custom field (Severity),Custom field (Severity),Custom field (Space Description),Custom field (Space Key),Custom field (Space Name),Custom field (Test and Documentation Plan),Custom field (Testcase included),Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment
Concurrency issue with AsyncHandler,CXF-2711,12458954,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,sauthieg,sauthieg,12/Mar/10 16:02,15/Mar/10 13:38,14/Mar/19 02:28,12/Mar/10 17:41,2.2.6,,,,,,,,,,,,,,2.2.7,,,,,,,,,,0,concurrency,,,"The problem is on the access to the ClientCallback.done boolean

You can have a situation where the client uses the Future object he got from the dispatch.invokeAsync() method.
It performs an active wait using Future.isDone()

On another Thread, the WS response comes back, and the JaxwsClientCallback.handlerResponse() is called. The handler provided by the client is called, so far everything went well. After the AsyncHandler.handleResponse() invocation, the ClientCallback set the 'done' boolean to true.

But this value change is never seen by the Future.isDone() invocations!

Because the ClientCallback.done boolean is not 'volatile'.

I've made a try with a volatile 'done' and it works perfectly.

Could it be possible that this simple change makes it to the 2.2.7 ?",OW2 JOnAS 5.2,,,,,,,,,,,,,,,,12/Mar/10 16:08;sauthieg;CXF-2711.patch;https://issues.apache.org/jira/secure/attachment/12438620/CXF-2711.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,114104,,,Mon Mar 15 13:38:13 UTC 2010,,,,,,0|i0a5sn:,57212,,,,,,,,12/Mar/10 16:08;sauthieg;Set ClientCallback.done field as volatile.,15/Mar/10 13:38;sauthieg;Thanks,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DynamicClientFactory compilation wrong classpath Jboss5,CXF-2710,12458938,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,prasad.deshpande,prasad.deshpande,12/Mar/10 13:07,01/Nov/11 02:11,14/Mar/19 02:29,26/Oct/11 16:30,,,,,,,,,,,,,,,2.4.3,,,,JAXB Databinding,,,,,,0,,,,"Hi, I'm getting error when compiling dynamic client inside an .ear. when I debug through, I found that in method ""compileJavaSrc"" of DymanicClientFactory class, I get classPath as empty string because of which compilation is failing. However if I set classPath value to ""."" then it all works file.

I thought of debugging the reason for why classPath is coming as null & found that in ""setupClasspath"" method I get value of classLoader parameter as ""BaseClassLoader@828ebf{vfsfile:/C:/jboss-5.1.0.GA/server/eFp-40-Oracle/deploy/efp.ear/}""  which is not an instanceof URLClassLoader. also protocol now says that it's ""vfsfile:/"" not ""file:/"". I think we need some default value of classpath like ""."", Otherwise ""javac"" command would fail like below.

12:56:07,937 INFO  [STDOUT]  javac: invalid flag: C:/DOCUME~1/Prasad_D/LOCALS~1/Temp/org.apache.cxf.jaxws.endpoint.dynamic.JaxWsDynamicClientFactory@3c65c3-1268398562703-classes
 Usage: javac <options> <source files>
 use -help for a list of possible options
12:56:07,937 SEVERE [DynamicClientFactory] Could not compile java files for http://localhost:8080/webservice/services/WSFreeTextListAPI?wsdl.


If you have any suggestion to me, please let me know. I'll correct my code.

Here is my code snippet:
        JaxWsDynamicClientFactory factory = JaxWsDynamicClientFactory.newInstance();
        client = factory.createClient(wsdlUrl);
        ClientImpl clientImpl = (ClientImpl) client;
        Endpoint endpoint = clientImpl.getEndpoint();

I tried using ClassLoader version of the ""createClient"" method... still doesn't help.","Windows XP SP2, JBoss 5.1.0, JDK 1.6.0_07",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2010-03-12 15:35:25.223,,,no_permission,,,,,,,,,,,,,62993,,,Wed Oct 26 16:30:46 UTC 2011,,,,,,0|i14ezb:,233890,,,,,,,,"12/Mar/10 15:35;dkulp;
Any chance you could test this with 2.2.7-SNAPSHOT?   The compiler stuff was completely redone for 2.2.7-SNAPSHOT so this may already be fixed.   With 2.2.7, there could also be a difference between using Java6 and Java5 so if that could also be tested, that would be great.    On Java6, we try to use the built in javax.tools.JavaCompiler tool instead of forking javac.     Thus, flags and such are handled differently.","12/Mar/10 16:26;prasad.deshpande;Daniel,

I tested with 2.2.7-SNAPSHOT too... nothing different.  The ""cmdArray"" variable in ""internalCompile"" of Compiler class has following value. And I can see that classpath is still missing. Look at the index 2 of the array. I'm sure if I add ""."" (i.e. current working directory) it works fine... as it's working in 2.2.6.

[javac, -classpath, , -d, C:/DOCUME~1/Prasad_D/LOCALS~1/Temp/org.apache.cxf.jaxws.endpoint.dynamic.JaxWsDynamicClientFactory@1ca3b85-1268410876156-classes, -target, 1.5, @C:/DOCUME~1/Prasad_D/LOCALS~1/Temp/cxf-tmp-906868/cxf-compiler61456.tmp]

Any more guesses?","12/Mar/10 21:23;dkulp;
Just added some checks in Compiler for empty classpaths.  It WAS just checking for null, but thos checks should also check for an empty string which it wasn't doing previously.   Can you check with snapshots from tonight or checkout the code and build your own?",26/Oct/11 16:30;dkulp;Marking as resolved as verification was asked for over a month ago and no response,,,,,,,,,,,,,,,,,,,,,,,,,,,
endpoint validation fails if WSDL referenced schemas exist on classpath outside the jar the endpoint exists,CXF-2708,12458849,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,ctataryn,ctataryn,11/Mar/10 20:45,23/Mar/10 02:59,14/Mar/19 02:29,12/Mar/10 15:27,2.2.6,2.2.7,,,,,,,,,,,,,2.2.7,,,,,,,,,,0,,,,"Assuming you have split out XSDs into their own project, and you have an endpoint configured like so:

{code}
        <jaxws:properties>
            <entry key=""schema-validation-enabled""
                   value=""true""/>
        </jaxws:properties>
{code}

What happens is, if you send a request to your endpoint it can't find the referenced XSDs.

The error message I get differs on whether I use 2.2.6 or 2.2.7-SNAPSHOT.  I'm not sure if they both represent the same problem.  In 2.2.6, the problem states that the WSDL had a ""premature end of file"", but when I debugged I found it was simply the fact the schemas it references could not be found:   

{code:title=2.2.6 error}
Mar 11, 2010 2:05:06 PM org.apache.cxf.wsdl.EndpointReferenceUtils createSchema
WARNING: SAXException for newSchema() on 
Throwable occurred: org.xml.sax.SAXParseException: Premature end of file.
        at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.createSAXParseException(ErrorHandlerWrapper.java:231)
        at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.fatalError(ErrorHandlerWrapper.java:210)
        at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:424)
        at com.sun.org.apache.xerces.internal.impl.XMLScanner.reportFatalError(XMLScanner.java:1425)
        at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl$PrologDriver.next(XMLDocumentScannerImpl.java:1073)
        at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(XMLDocumentScannerImpl.java:662)
        at com.sun.org.apache.xerces.internal.impl.XMLNSDocumentScannerImpl.next(XMLNSDocumentScannerImpl.java:154)
        at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:525)
        at com.sun.org.apache.xerces.internal.impl.xs.opti.SchemaParsingConfig.parse(SchemaParsingConfig.java:471)
        at com.sun.org.apache.xerces.internal.impl.xs.opti.SchemaParsingConfig.parse(SchemaParsingConfig.java:527)
        at com.sun.org.apache.xerces.internal.impl.xs.opti.SchemaDOMParser.parse(SchemaDOMParser.java:546)
        at com.sun.org.apache.xerces.internal.impl.xs.traversers.XSDHandler.getSchemaDocument(XSDHandler.java:1838)
        at com.sun.org.apache.xerces.internal.impl.xs.traversers.XSDHandler.resolveSchema(XSDHandler.java:1793)
        at com.sun.org.apache.xerces.internal.impl.xs.traversers.XSDHandler.constructTrees(XSDHandler.java:1022)
        at com.sun.org.apache.xerces.internal.impl.xs.traversers.XSDHandler.parseSchema(XSDHandler.java:605)
        at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaLoader.loadSchema(XMLSchemaLoader.java:588)
        at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaLoader.loadGrammar(XMLSchemaLoader.java:555)
        at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaLoader.loadGrammar(XMLSchemaLoader.java:521)
        at com.sun.org.apache.xerces.internal.jaxp.validation.XMLSchemaFactory.newSchema(XMLSchemaFactory.java:246)
        at org.apache.cxf.wsdl.EndpointReferenceUtils.createSchema(EndpointReferenceUtils.java:666)
        at org.apache.cxf.wsdl.EndpointReferenceUtils.getSchema(EndpointReferenceUtils.java:690)
        at org.apache.cxf.interceptor.AbstractInDatabindingInterceptor.setSchemaInMessage(AbstractInDatabindingInterceptor.java:109)
        at org.apache.cxf.interceptor.AbstractInDatabindingInterceptor.getDataReader(AbstractInDatabindingInterceptor.java:94)
        at org.apache.cxf.interceptor.AbstractInDatabindingInterceptor.getDataReader(AbstractInDatabindingInterceptor.java:99)
        at org.apache.cxf.interceptor.DocLiteralInInterceptor.handleMessage(DocLiteralInInterceptor.java:66)
        at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:243)
        at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:109)
        at org.apache.cxf.transport.servlet.ServletDestination.invoke(ServletDestination.java:98)
        at org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:406)
        at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:178)
        at org.apache.cxf.transport.servlet.AbstractCXFServlet.invoke(AbstractCXFServlet.java:142)
        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.handleRequest(AbstractHTTPServlet.java:179)
        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.doPost(AbstractHTTPServlet.java:103)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:727)
        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.service(AbstractHTTPServlet.java:159)
        at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:502)
        at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:389)
        at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216)
        at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181)
        at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765)
        at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:417)
        at org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:230)
        at org.mortbay.jetty.handler.HandlerCollection.handle(HandlerCollection.java:114)
        at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)
        at org.mortbay.jetty.Server.handle(Server.java:326)
        at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:534)
        at org.mortbay.jetty.HttpConnection$RequestHandler.content(HttpConnection.java:879)
        at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:747)
        at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:218)
        at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404)
        at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:409)
        at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:520)
{code}

In 2.2.7-SNAPSHOT it *actually lists the schemas it could not resolve*, and gives another message stating ""this schema contains two occurrences of 'urn:hl7-org:v3,FICR_IN100204CA'."":

{code:title=2.2.7-SNAPSHOT error}
[INFO] Starting scanner at interval of 5 seconds.
Mar 11, 2010 2:16:34 PM org.apache.cxf.wsdl.EndpointReferenceUtils$SchemaLSResourceResolver resolveResource
WARNING: Could not resolve Schema for COCT_MT050207CA.xsd
Mar 11, 2010 2:16:34 PM org.apache.cxf.wsdl.EndpointReferenceUtils$SchemaLSResourceResolver resolveResource
WARNING: Could not resolve Schema for COCT_MT050201CA.xsd
Mar 11, 2010 2:16:34 PM org.apache.cxf.wsdl.EndpointReferenceUtils$SchemaLSResourceResolver resolveResource
WARNING: Could not resolve Schema for COCT_MT260022CA.xsd
Mar 11, 2010 2:16:34 PM org.apache.cxf.wsdl.EndpointReferenceUtils$SchemaLSResourceResolver resolveResource
WARNING: Could not resolve Schema for FICR_MT600601CA.xsd
Mar 11, 2010 2:16:34 PM org.apache.cxf.wsdl.EndpointReferenceUtils$SchemaLSResourceResolver resolveResource
WARNING: Could not resolve Schema for MCAI_MT700211CA.xsd
Mar 11, 2010 2:16:34 PM org.apache.cxf.wsdl.EndpointReferenceUtils$SchemaLSResourceResolver resolveResource
WARNING: Could not resolve Schema for FICR_MT600401CA.xsd
Mar 11, 2010 2:16:34 PM org.apache.cxf.wsdl.EndpointReferenceUtils$SchemaLSResourceResolver resolveResource
WARNING: Could not resolve Schema for FICR_MT510401CA.xsd
Mar 11, 2010 2:16:34 PM org.apache.cxf.wsdl.EndpointReferenceUtils$SchemaLSResourceResolver resolveResource
WARNING: Could not resolve Schema for COCT_MT290000CA.xsd
Mar 11, 2010 2:16:34 PM org.apache.cxf.wsdl.EndpointReferenceUtils$SchemaLSResourceResolver resolveResource
WARNING: Could not resolve Schema for COCT_MT490000CA.xsd
Mar 11, 2010 2:16:34 PM org.apache.cxf.wsdl.EndpointReferenceUtils$SchemaLSResourceResolver resolveResource
WARNING: Could not resolve Schema for COCT_MT600000CA.xsd
Mar 11, 2010 2:16:34 PM org.apache.cxf.wsdl.EndpointReferenceUtils$SchemaLSResourceResolver resolveResource
WARNING: Could not resolve Schema for COCT_MT280002CA.xsd
Mar 11, 2010 2:16:34 PM org.apache.cxf.wsdl.EndpointReferenceUtils$SchemaLSResourceResolver resolveResource
WARNING: Could not resolve Schema for COCT_MT290000CA.xsd
Mar 11, 2010 2:16:34 PM org.apache.cxf.wsdl.EndpointReferenceUtils$SchemaLSResourceResolver resolveResource
WARNING: Could not resolve Schema for COCT_MT490000CA.xsd
Mar 11, 2010 2:16:34 PM org.apache.cxf.wsdl.EndpointReferenceUtils$SchemaLSResourceResolver resolveResource
WARNING: Could not resolve Schema for COCT_MT680000CA.xsd
WARNING: SAXException for newSchema() on 
Throwable occurred: org.xml.sax.SAXParseException: sch-props-correct.2: A schema cannot contain two global components with the same name; this schema contains two occurrences of 'urn:hl7-org:v3,FICR_IN100204CA'.
        at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.createSAXParseException(ErrorHandlerWrapper.java:231)
        at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.error(ErrorHandlerWrapper.java:167)
        at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:420)
        at com.sun.org.apache.xerces.internal.impl.xs.traversers.XSDHandler.reportSchemaErr(XSDHandler.java:2573)
        at com.sun.org.apache.xerces.internal.impl.xs.traversers.XSDHandler.reportSchemaError(XSDHandler.java:2564)
        at com.sun.org.apache.xerces.internal.impl.xs.traversers.XSDHandler.checkForDuplicateNames(XSDHandler.java:2238)
        at com.sun.org.apache.xerces.internal.impl.xs.traversers.XSDHandler.buildGlobalNameRegistries(XSDHandler.java:1191)
        at com.sun.org.apache.xerces.internal.impl.xs.traversers.XSDHandler.parseSchema(XSDHandler.java:611)
        at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaLoader.loadSchema(XMLSchemaLoader.java:588)
        at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaLoader.loadGrammar(XMLSchemaLoader.java:555)
        at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaLoader.loadGrammar(XMLSchemaLoader.java:521)
        at com.sun.org.apache.xerces.internal.jaxp.validation.XMLSchemaFactory.newSchema(XMLSchemaFactory.java:246)
        at org.apache.cxf.wsdl.EndpointReferenceUtils.createSchema(EndpointReferenceUtils.java:669)
        at org.apache.cxf.wsdl.EndpointReferenceUtils.getSchema(EndpointReferenceUtils.java:693)
        at org.apache.cxf.interceptor.AbstractInDatabindingInterceptor.setSchemaInMessage(AbstractInDatabindingInterceptor.java:109)
        at org.apache.cxf.interceptor.AbstractInDatabindingInterceptor.getDataReader(AbstractInDatabindingInterceptor.java:94)
        at org.apache.cxf.interceptor.AbstractInDatabindingInterceptor.getDataReader(AbstractInDatabindingInterceptor.java:99)
        at org.apache.cxf.interceptor.DocLiteralInInterceptor.handleMessage(DocLiteralInInterceptor.java:66)
        at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:243)
        at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:110)
        at org.apache.cxf.transport.servlet.ServletDestination.invoke(ServletDestination.java:98)
        at org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:423)
        at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:178)
        at org.apache.cxf.transport.servlet.AbstractCXFServlet.invoke(AbstractCXFServlet.java:142)
        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.handleRequest(AbstractHTTPServlet.java:179)
        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.doPost(AbstractHTTPServlet.java:103)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:727)
        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.service(AbstractHTTPServlet.java:159)
        at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:502)
        at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:389)
        at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216)
        at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181)
        at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765)
        at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:417)
        at org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:230)
        at org.mortbay.jetty.handler.HandlerCollection.handle(HandlerCollection.java:114)
        at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)
        at org.mortbay.jetty.Server.handle(Server.java:326)
        at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:534)
        at org.mortbay.jetty.HttpConnection$RequestHandler.content(HttpConnection.java:879)
        at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:747)
        at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:218)
        at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404)
        at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:409)
        at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:520)

{code}

I've tried several things, including catalog files, but I can't resolve this.  It seems to be the underlying schema parsers themselves that have the issue.  Spent a few days trying to debug far enough into the issue to formulate that opinion, so unfortunately I have no patch to contribute.

To replicate:
1. Unzip the attached project
2. Change directory to CXFSchemaRefProblemPom
3. edit pom.xml to switch to the appropriate version of cxf and cxf-codegen (2.2.6 or 2.2.7-SNAPSHOT (which is the one the project is currently set for))
4. switch to CXFSchemaRefProblemWar and execute mvn jetty:run
5. switch to the parent directory where sample-req.xml exists and send a request to the endpoint: {{curl -d @sample-req.xml -H ""Content-Type: text/xml;charset=UTF-8"" http://localhost:8080/ProcessClaim}}
","$ mvn --version
Apache Maven 2.2.1 (r801777; 2009-08-06 14:16:01-0500)
Java version: 1.6.0
Java home: D:\Program Files\IBM\RAD75\jdk\jre
Default locale: en_US, platform encoding: Cp1252
OS name: ""windows xp"" version: ""5.1 build 2600 service pack 3"" arch: ""x86"" Family: ""windows""
",,,,,,,,,,,,,,,,11/Mar/10 20:53;ctataryn;CXFSchemaRefProblem-ProcessClaimRequest.zip;https://issues.apache.org/jira/secure/attachment/12438538/CXFSchemaRefProblem-ProcessClaimRequest.zip,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2010-03-12 15:27:33.79,,,no_permission,,,,,,,,,,,,,114102,,,Fri Mar 12 15:27:33 UTC 2010,,,,,,0|i0a5sv:,57213,,,,,,,,"12/Mar/10 15:27;dkulp;
i've added more code the ERU class to search with a few more methods to find the schema.

it now works IF I modify your wsdl slightly.   Your wsdl has two schemas in it that have the same targetNamespace.   That is probably not allowed.   If I move the single element in the first schema into the second, then the test now all passes.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CXF-XJC-DV doesn not respect Abstract schema types,CXF-2707,12458827,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,dkulp,jajansen,jajansen,11/Mar/10 16:54,23/Mar/10 02:59,14/Mar/19 02:29,12/Mar/10 01:45,2.2.1,,,,,,,,,,,,,,2.2.7,,,,,,,,,,0,,,,"The cxf-xjc-dv plugin creates default values for complex types that have default simpl typed elements as fixed in CXF-1206.
{code:xml}
<xs:complexType name=""pageColor"">
  <xs:sequence>
     <xs:element name=""background"" type=""xs:string"" default=""red""/>
     <xs:element name=""foreground"" type=""xs:string"" default=""blue""/>
   </xs:sequence>
</xs:complexType>

<xs:element name=""pageColor"" type=""tns:pageColor"" minOccurs=""0""></xs:element>
{code}

results in 

{code}
protected PageColor pageColor = new PageColor();
{code}

This fails if PageColor is defined as abstract=""true"" in the schema (used as polymorphic type in element pageColor). In that case the line above will create a compilation error. 

It can be fixed by simply skipping the generation of the default 'new PageColor();' in those cases.  
Line 81 in DefaultValuePlugin.java would become
{code}
            if (classOutline.implClass == field.getRawType() && !classOutline.implClass.isAbstract()) {
{code}",,,,,,,,,,,,,,,,,11/Mar/10 16:58;jajansen;DefaultValuePlugin.java;https://issues.apache.org/jira/secure/attachment/12438522/DefaultValuePlugin.java,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,114101,,,2010-03-11 16:54:43.0,,,,,,0|i0a5t3:,57214,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AttachmentDeserializer/LazyLoading Attachment Collection enters into continuous while loop for input with missing boundary,CXF-2706,12458761,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,msezgin,msezgin,11/Mar/10 00:49,23/Mar/10 02:59,14/Mar/19 02:29,11/Mar/10 17:16,2.2.2,2.2.3,2.2.4,2.2.5,2.2.6,,,,,,,,,,2.2.7,,,,Core,,,,,,0,,,,"We recently came across an issue in our production environments where we detected http processor threads that had been alive for over a week chewing up CPU. By inspecting thread dumps we found that our external API's (JAX-RS) were the problem with CXF being the culprit. All processor threads had the same stack trace and were all related to POST requests which were multipart based. 

Upon further investigation the cause was identified to be an incorrectly sent multipart input with a missing end boundary. The result of this was the LazyAttachmentCollection entering into a continuous loop 'waiting' for more data even though there was none with the client end point having long gone.

I have put together a test case demonstrating this. I have tried to imitate the CXF code path as much as possible (AttachmentInInterceptor).  

I consider this to be a fairly serious issue as mistakes like this will likely happen frequently by developers and it would only take 8 of these requests to consume an 8 core cpu and its 'game over man'...

I aim to have a patch implemented for this as soon as possible when i have some free time but im hoping you guys might be able get onto it sooner than me as a fix for this would greatly appreciated...

A sample stack trace from Tomcat is below 

{noformat}
                at java.lang.System.arraycopy(Native Method)
                at java.io.PushbackInputStream.unread(PushbackInputStream.java:218)
                at org.apache.cxf.attachment.MimeBodyPartInputStream.hasData(MimeBodyPartInputStream.java:98)
                at org.apache.cxf.attachment.MimeBodyPartInputStream.processBuffer(MimeBodyPartInputStream.java:134)
                at org.apache.cxf.attachment.MimeBodyPartInputStream.read(MimeBodyPartInputStream.java:76)
                at java.io.InputStream.read(InputStream.java:85)
                at org.apache.cxf.attachment.DelegatingInputStream.read(DelegatingInputStream.java:77)
                at org.apache.cxf.helpers.IOUtils.copy(IOUtils.java:112)
                at org.apache.cxf.helpers.IOUtils.copy(IOUtils.java:75)
                at org.apache.cxf.attachment.AttachmentDataSource.<init>(AttachmentDataSource.java:39)
                at org.apache.cxf.attachment.AttachmentUtil.createAttachment(AttachmentUtil.java:168)
                at org.apache.cxf.attachment.AttachmentDeserializer.createAttachment(AttachmentDeserializer.java:283)
                at org.apache.cxf.attachment.AttachmentDeserializer.readNext(AttachmentDeserializer.java:194)
                at org.apache.cxf.attachment.LazyAttachmentCollection.loadAll(LazyAttachmentCollection.java:52)
                at org.apache.cxf.attachment.LazyAttachmentCollection.size(LazyAttachmentCollection.java:99)
                at org.apache.cxf.jaxrs.ext.MessageContextImpl.createAttachments(MessageContextImpl.java:147)
                at org.apache.cxf.jaxrs.ext.MessageContextImpl.get(MessageContextImpl.java:58)
                at org.apache.cxf.jaxrs.impl.tl.ThreadLocalMessageContext.get(ThreadLocalMessageContext.java:38)
                at org.apache.cxf.jaxrs.utils.multipart.AttachmentUtils.getMultipartBody(AttachmentUtils.java:81)
                at org.apache.cxf.jaxrs.utils.multipart.AttachmentUtils.getAttachments(AttachmentUtils.java:86)
                at org.apache.cxf.jaxrs.provider.MultipartProvider.readFrom(MultipartProvider.java:76)
                at org.apache.cxf.jaxrs.utils.JAXRSUtils.readFromMessageBody(JAXRSUtils.java:827)
                at org.apache.cxf.jaxrs.utils.JAXRSUtils.processParameter(JAXRSUtils.java:470)
                at org.apache.cxf.jaxrs.utils.JAXRSUtils.processParameters(JAXRSUtils.java:435)
                at org.apache.cxf.jaxrs.interceptor.JAXRSInInterceptor.processRequest(JAXRSInInterceptor.java:194)
                at org.apache.cxf.jaxrs.interceptor.JAXRSInInterceptor.handleMessage(JAXRSInInterceptor.java:65)
                at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
                - locked <0x00002aaae3f66ac8> (a org.apache.cxf.phase.PhaseInterceptorChain)
                at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:89)
                at org.apache.cxf.transport.servlet.ServletDestination.invoke(ServletDestination.java:99)
                at org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:368)
                at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:146)
                at org.apache.cxf.transport.servlet.AbstractCXFServlet.invoke(AbstractCXFServlet.java:163)
                at org.apache.cxf.transport.servlet.AbstractCXFServlet.doPost(AbstractCXFServlet.java:141)
                at javax.servlet.http.HttpServlet.service(HttpServlet.java:710)
                at javax.servlet.http.HttpServlet.service(HttpServlet.java:803)

{noformat}",All known platforms to mankind,,,,,,,,,,,,,,,,11/Mar/10 00:52;msezgin;MultipartTest.java;https://issues.apache.org/jira/secure/attachment/12438465/MultipartTest.java,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,114100,,,2010-03-11 00:49:52.0,,,,,,0|i0a5tb:,57215,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CXFAuthenticator does not correctly retrieve authentication from Authenticator class; NoSuchMethodException is thrown,CXF-2705,12458746,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,piepera,piepera,10/Mar/10 22:53,23/Mar/10 02:59,14/Mar/19 02:29,11/Mar/10 17:14,2.2.6,,,,,,,,,,,,,,2.2.7,,,,Transports,,,,,,0,,,,"In my JDK (JDK 1.6.0_12), Authenticator.class.getMethod(""getPasswordAuthentication"") throws a NoSuchMethodException. This looks like correct behavior, since the method is protected. The result is that the CXFAuthenticator.getPasswordAuthentication() method fails to retrieve the PasswordAuthentication, and always drops through.

I was able to work around this by changing CXFAuthenticator to call the ""getDeclaredMethod"", instead of ""getMethod"".","windows xp, jdk 1.6.0_12",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,Novice,,,,,,,,,,,114099,,,2010-03-10 22:53:57.0,,,,,,0|i0a5tj:,57216,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"CXF JAX-RS  ""Content-Disposition"" is lost for second multipart ",CXF-2704,12458701,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Critical,Fixed,,georgegao_cxf,georgegao_cxf,10/Mar/10 19:14,11/Oct/10 14:45,14/Mar/19 02:29,09/Jul/10 20:37,2.2.6,,,,,,,,,,,,,,2.2.10,2.3,,,JAX-RS,,,,,,0,Content-disposition,,,"I create a RestFul service for dealing with multiparts:

Part 1: application/xml(form data)  Bean in server side
Part2: application/octet-stream   upload file,

But the ""Content-disposition"" of the part2 is translated into: key=""ontent-disposition"", so the information about
        Content-disposition can not be retrieve in server side.

      I want to find out the filename in the part2, but exception happen for:



Server side code:
      Attachment att = atts.get(1);
      String filename = att.getContentDisposition().getParameter(""filename"");

Client side code:
-----------------------------------------------------------------------
import httplib2

http = httplib2.Http()
url='http://ib11b02.lsf.platform.com:9000/webservice/upload'

body = """"""
--bqJky99mlBWa-ZuqjC53mG6EzbmlxB
Content-Disposition: form-data; name='data'
Content-Type: application/xml; charset=US-ASCII
Content-Transfer-Encoding: 8bit

<?xml version='1.0' encoding='UTF-8' standalone='yes'?> <Customer>  <name>Sharon Gao3</name> </Customer>
--bqJky99mlBWa-ZuqjC53mG6EzbmlxB
Content-Disposition: form-data; name='file1'; filename='genome.jpeg';
Content-Type: application/octet-stream
Content-Transfer-Encoding: UTF-8
Content-ID: <file1>

PGh0bWw+CiAgPGhlYWQ+CiAgPC9oZWFkPgogIDxib2R5PgogICAgPHA+VGhpcyBpcyB0aGUg
Ym9keSBvZiB0aGUgbWVzc2FnZS48L3A+CiAgPC9ib2R5Pgo8L2h0bWw+Cg==

--bqJky99mlBWa-ZuqjC53mG6EzbmlxB--
""""""

headers = {'Content-Type': 'multipart/mixed; boundary=bqJky99mlBWa-ZuqjC53mG6EzbmlxB',
            'Content-Length': str(len(body))}
response, content = http.request(url, 'POST', body=body, headers=headers)
","deploy Restful service enhanced based on the sample: ""jaxrs basic"" in tomcat, 
client: python 2.6 + httplib2",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2010-03-12 13:56:49.476,,,no_permission,,Novice,,,,,,,,,,,114098,,,Wed Mar 17 14:50:32 UTC 2010,,,,,,0|i0uy6f:,178678,,,,,,,,"12/Mar/10 13:56;sergey_beryozkin;Hi, I've had a chance to look into this issue, here is what goes on the wire :

POST /bookstore/books/formbody2 HTTP/1.1
Content-Type: multipart/form-data; type=""text/xml""; start=""rootPart""; boundary=""bqJky99mlBWa-ZuqjC53mG6EzbmlxB""
User-Agent: Jakarta Commons-HttpClient/3.1
Host: localhost:9086
Content-Length: 644


--bqJky99mlBWa-ZuqjC53mG6EzbmlxB
Content-Disposition: form-data; name='data'
Content-Type: application/xml; charset=US-ASCII
Content-Transfer-Encoding: 8bit

<?xml version='1.0' encoding='UTF-8' standalone='yes'?> <Customer> <name>Sharon Gao3</name> </Customer>
--bqJky99mlBWa-ZuqjC53mG6EzbmlxB
Content-Disposition: form-data; name='file1'; filename='genome.jpeg';
Content-Type: application/octet-stream
Content-Transfer-Encoding: UTF-8
Content-ID: <file1>

PGh0bWw+CiAgPGhlYWQ+CiAgPC9oZWFkPgogIDxib2R5PgogICAgPHA+VGhpcyBpcyB0aGUg
Ym9keSBvZiB0aGUgbWVzc2FnZS48L3A+CiAgPC9ib2R5Pgo8L2h0bWw+Cg==
--bqJky99mlBWa-ZuqjC53mG6EzbmlxB--

And I have no problems with displaying the Content-Disposition values from the 2nd part.


Can you please give me a favor and capture what client sends on the wire by using one of the TCP trace utilities and *attach* it to this JIRA ? 
I'm wondering, may be you have some symbol like \n missing between the 2nd boundary and its content (that is you have \r) only ?

thanks, Sergey ","17/Mar/10 14:27;sergey_beryozkin;George, can I close this issue ?","17/Mar/10 14:50;georgegao_cxf;Sergey,

Thanks for your reply. The issue is in my client side.

I have resolved the issue by adding ""\n"".  you can close it now,

--George

",,,,,,,,,,,,,,,,,,,,,,,,,,,,
cxf-codegen-plugin problem resolving schemas in jars that have spaces in the path (patch attached),CXF-2703,12458678,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,ctataryn,ctataryn,10/Mar/10 16:10,23/Mar/10 02:59,14/Mar/19 02:29,11/Mar/10 17:13,2.2.6,,,,,,,,,,,,,,2.2.7,,,,Tooling,,,,,,0,,,,"Here is the scenario: Dan did a patch for an issue I logged [1]
involving the proper resolution of XSDs held in a separate maven
module (or any jar on the classpath for that matter) instead of the
XSDs existing directly in the module where cxf-codegen-plugin is being
invoked.  It worked great for me, but oddly enough only when I invoked
an ""mvn clean install"" from the parent project.  If I went down into
the actual module that was setup for cxf-codegen-plugin and try to
clean install, it would bomb with:

{code}
---------------------------------------------------------------------------------------------
org.apache.maven.lifecycle.LifecycleExecutionException: Thrown by JAXB
: unknown protocol: classpath
.
.
Caused by: java.net.MalformedURLException: unknown protocol: classpath
       at java.net.URL.<init>(URL.java:574)
       at java.net.URL.<init>(URL.java:464)
       at java.net.URL.<init>(URL.java:413)
       at org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown
Source)
       at org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown
Source)
       at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
       at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
       at org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
       at org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
       at org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown
Source)
       at com.sun.tools.xjc.reader.internalizer.DOMForest.parse(DOMForest.java:394)

------------------------------------------------------------------------------------------------
{code}

I debugged like crazy, found where things were going wrong.  I found a
bug [2] which kind of described the problem, i.e. a jar on the
classpath you are trying to get a resource URL for has a space in it's
path.  So what I did was I changed my Maven repo from D:\Documents and
Settings\.... to D:\m2repo, a path without spaces.  Lo and behold,
everything worked peachy after that.

So, attached is an attempt at a patch to URIResolver in order to fix
the problem.  That being said, I have no way to test this patch in
order to see if it works.  Why?  Because if I make the fix myself to
the 2.2.6 code on my system, then mvn clean install a new version into
my local repo, then run a debug session when it gets to
AbstractWrapperWSDLLocator.getImportInputSource, the parentLocation
parameter doesn't include a classpath:/ prefix, instead it just
contains the relative path found within the XSD, and I get a
""FileNotFound"" type error.  No clue why.

People on Windows (because of the m2 repo being under ""Documents and
Settings"" by default; a path containing spaces) would definitely face
the problem I'm trying to solve.  I'm not completely sure if it's JDK
vendor related, but on my project I'm using IBM jvm, here's my
environment:

-----------------------------------------
$ mvn --version
Apache Maven 2.2.1 (r801777; 2009-08-06 14:16:01-0500)
Java version: 1.6.0
Java home: D:\Program Files\IBM\RAD75\jdk\jre
Default locale: en_US, platform encoding: Cp1252
OS name: ""windows xp"" version: ""5.1 build 2600 service pack 3"" arch:
""x86"" Family: ""windows""
-----------------------------------------

So, if anyone would be so kind as to try to replicate the problem,
then apply the patch and see if the problem is resolved, that would be
great.

Steps to reproduce:
1) download the sample project from the JIRA issue [1]
2) crack open the pom.xml file from CXFSchemaRefProblemPom, update the
cxf versions to 2.2.6
3) crack open the pom.xml from CXFSchemaRefProblemWar and comment out
all the extraargs except for -verbose
4) ""mvn clean install"" from CXFSchemaRefProblemPom, should build cleanly
5) ""mvn clean install -e"" from CXFSchemaRefProblemWar, you should get
the classpath protocol error
6) apply my patch, install the change locally, try step 5 again.

Thanks,

Craig

[1] - https://issues.apache.org/jira/browse/CXF-2599
[2] - http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6506304","$ mvn --version
Apache Maven 2.2.1 (r801777; 2009-08-06 14:16:01-0500)
Java version: 1.6.0
Java home: D:\Program Files\IBM\RAD75\jdk\jre
Default locale: en_US, platform encoding: Cp1252
OS name: ""windows xp"" version: ""5.1 build 2600 service pack 3"" arch:
""x86"" Family: ""windows""",,,,,,,,,,,,,,,,10/Mar/10 16:11;ctataryn;URIResolver.java-jar-space-fix.patch;https://issues.apache.org/jira/secure/attachment/12438414/URIResolver.java-jar-space-fix.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,114097,,,2010-03-10 16:10:39.0,,,,,,0|i0a5tr:,57217,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException in CxfAuthenticator,CXF-2702,12458543,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,alitokmen,alitokmen,09/Mar/10 14:29,10/Mar/10 06:12,14/Mar/19 02:29,10/Mar/10 04:01,2.2.6,,,,,,,,,,,,,,2.2.7,,,,Core,,,,,,0,,,,"Steps to reproduce:

1) Use CXF. CXF will then set the java.net.Authenticator on the JVM to CXFAuthenticator
2) Try to access a password protected page without giving out any credentials

Expected: an error 401 or 403
Actual: CXF throws an exception because there's no message in the PhaseInterceptorChain. That's normal, we did not start any CXF exchange!",,,,,,,,,,,,,,,,,09/Mar/10 14:31;alitokmen;CXF-2702.patch;https://issues.apache.org/jira/secure/attachment/12438285/CXF-2702.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2010-03-10 04:01:35.045,,,no_permission,,Moderate,,,,,,,,,,,114096,,,Wed Mar 10 06:12:10 UTC 2010,,,,,,0|i0a5tz:,57218,,,,,,,,09/Mar/10 14:31;alitokmen;Added patch generated from CXF 2.2.6,"09/Mar/10 14:31;alitokmen;Example stack trace:

testSecuredWarWithoutCredentials(org.ow2.jonas.itests.cargo.jrmp.VersioningTest)  Time elapsed: 0.016 sec  <<< FAILURE!
java.lang.RuntimeException: java.lang.NullPointerException
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:904)
	at sun.net.www.protocol.http.HttpURLConnection.getHeaderField(HttpURLConnection.java:1961)
	at java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:376)
	at org.ow2.jonas.itests.cargo.jrmp.VersioningTest.getURL(VersioningTest.java:433)
	at org.ow2.jonas.itests.cargo.jrmp.VersioningTest.testSecuredWarWithoutCredentials(VersioningTest.java:244)
Caused by: java.lang.NullPointerException
	at org.apache.cxf.transport.http.CXFAuthenticator.getPasswordAuthentication(CXFAuthenticator.java:84)
	at java.net.Authenticator.requestPasswordAuthentication(Authenticator.java:300)
	at sun.net.www.protocol.http.HttpURLConnection$1.run(HttpURLConnection.java:272)
	at java.security.AccessController.doPrivileged(Native Method)
	at sun.net.www.protocol.http.HttpURLConnection.privilegedRequestPasswordAuthentication(HttpURLConnection.java:268)
	at sun.net.www.protocol.http.HttpURLConnection.getServerAuthentication(HttpURLConnection.java:1559)
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1035)
	at java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:367)
	... 26 more

",10/Mar/10 04:01;dkulp;Patch applied.  Thanks!,"10/Mar/10 06:12;alitokmen;Confirmed fix in CXF trunk as of rev. r921225

Thanks :)

S. Ali Tokmen
http://ali.tokmen.com/",,,,,,,,,,,,,,,,,,,,,,,,,,,
Make slf4j-jdk14 optional dependency in http-jetty,CXF-2701,12458512,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Trivial,Fixed,,romkal,romkal,09/Mar/10 10:02,21/Jan/11 18:18,14/Mar/19 02:29,08/Jan/11 02:25,2.2.5,2.3,,,,,,,,,,,,,2.3,,,,,,,,,,0,,,,"slf4j refuses to work properly if two bidings are present, but when I use cxf-rt-transports-http-jetty artifact in maven it pulls also slf4j-jdk14 (as it is transitive dependency).

I would like this dependency to be optional, as it really is one of many jars that someone can choose to use in his own tests (I choose to use slf4j-log4j12) and such person is forced to exclude slf4j-jdk14.

Another thing is I believe the scope should be 'runtime' as you don't use it for main/test compilation, but only at runtime.",,,,,,,,,,,,CXF-2583,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2010-03-18 15:50:36.168,,,no_permission,,,,,,,,,,,,,114095,,,Sat Jan 08 02:25:37 UTC 2011,,,,,,0|i14p1z:,235524,,,,,,,,"18/Mar/10 15:50;gcc;This appears already fixed by 2.2.6, please upgrade.","08/Jan/11 02:25;dkulp;
Been resolved for a while.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Invalid method is used to get the value of the xml:lang attribute in the SOAP1.2 Text Element,CXF-2700,12458460,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,dkulp,solum13,solum13,08/Mar/10 17:08,23/Mar/10 02:59,14/Mar/19 02:29,09/Mar/10 02:14,2.2.6,,,,,,,,,,,,,,2.2.7,,,,Soap Binding,,,,,,0,,,,"The class org.apache.cxf.binding.soap.interceptor.Soap12FaultOutInterceptor.Soap12FaultOutInterceptorInternal uses java.util.Locale#getDisplayLanguage() for determining the value of the xml:lang attribute of the SOAP Text Element. To get a language code, the proper method should be java.util.Locale#getLanguage().

If this is fixed, you can set your default locale language to the xml:lang attribute by creating a non-empty resource 'org/apache/cxf/binding/soap/interceptor/Messages_<language code>.properties' in the classpath. Currently there is no way to set the value other than 'en' (default value).
",,,,,,,,,,,,,,,,,08/Mar/10 17:10;solum13;soap12_getlangcode.patch;https://issues.apache.org/jira/secure/attachment/12438207/soap12_getlangcode.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,114094,,,Mon Mar 08 17:10:12 UTC 2010,,,,,,0|i0a5u7:,57219,,,,,,,,08/Mar/10 17:10;solum13;Attached a patch.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MapType does not output XML that matches the generated schema,CXF-2699,12458446,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,alistairmclean,alistairmclean,08/Mar/10 15:14,23/Mar/10 02:59,14/Mar/19 02:29,18/Mar/10 17:20,2.2.6,,,,,,,,,,,,,,2.2.7,,,,Aegis Databinding,,,,,,0,,,,"The MapType class (in org.apache.cxf.aegis.type.collection) creates the schema element for maps. It does not set nillable for the value in the entry.

It is legal to have 

HashMap<String, Object> myMap containing {myKey->null} and to return such a map from a call to a web method. 

The following wsdl is generated : 

...
<xsd:element name=""myMap"" nillable=""true"" type=""string2anyTypeMap"" /> 
...

<xsd:complexType name=""string2anyTypeMap""> 
<xsd:sequence> 
<xsd:element maxOccurs=""unbounded"" minOccurs=""0"" name=""entry""> 
<xsd:complexType> 
<xsd:sequence> 
<xsd:element minOccurs=""0"" name=""key"" type=""xsd:string"" /> 
<xsd:element minOccurs=""0"" name=""value"" type=""xsd:anyType"" /> 
</xsd:sequence> 
</xsd:complexType> 

On a query that retrieves myMap I can get 

...
   <entry>
                           <key>myKey</key>
                           <value ns6:nil=""true"" xmlns:ns6=""http://www.w3.org/2001/XMLSchema-instance""/>
   </ns1:entry>

which does not conform to the generated schema.

In type MapType createElement should probably be renamed to createKeyElement and a new createValueElement method that sets nillable to the result of type.isNillable().

Current method:
  /**
     * Creates a element in a sequence for the key type and the value type.
     */
    private void createElement(XmlSchemaSequence seq, QName name, Type type) {
        XmlSchemaElement element = new XmlSchemaElement();
        seq.getItems().add(element);
        element.setName(name.getLocalPart());
        element.setSchemaTypeName(type.getSchemaType());
        element.setMinOccurs(0);
        element.setMaxOccurs(1);
    }","windows xp, java 5",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2010-03-14 02:55:51.973,,,no_permission,,,,,,,,,,,,,114093,,,Thu Mar 18 17:20:24 UTC 2010,,,,,,0|i0a5uf:,57220,,,,,,,,"14/Mar/10 02:55;dkulp;
Well, I would argue that the schema is correct (it shouldn't be nillable), but the output XMl is wrong as the <value> element should not have been written at all.   It's minOccurs=0 so it doesn't need to be written out.","15/Mar/10 15:31;alistairmclean;For a map, I'd have a slight preference to say that both a key and a value must exist and that the value can be nil. This is simply to be consistent with say Lists and Arrays where you would need to specify nillable=true rather than minOccurs=0 to represent nulls in the list/array : ie {AnElement, null, AnElement, null}","18/Mar/10 17:20;dkulp;
I've updated the writing to not output the value element if null to match the existing schema.   (minOccurs is faster than nillable due to less data transferred and less parsing and such).   In the future, we could add an option or something to make it nillable.    (I also took off the minOccurs=0 for the key as keys are required.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
"REST type conversion to Byte, Integer, ... (non primitives) not working",CXF-2698,12458445,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,dfreis,dfreis,08/Mar/10 14:49,23/Mar/10 02:59,14/Mar/19 02:29,09/Mar/10 03:19,2.2.5,,,,,,,,,,,,,,2.2.7,,,,JAX-WS Runtime,,,,,,0,,,,"methods like 
public String sayHi(@WebParam(name=""number"") Byte number)
taking java.lang.Number can not be called via REST HTTP GET methods since there is not type conversion from String to Byte.
This works using primitive types like byte!

The root cause can be found at the end of URIMappingInterceptor.getParameters(...) method:
           
if (type != null && type.isPrimitive() && queries.get(key) != null) {
  param = PrimitiveUtils.read(queries.get(key), type);
} else {
  param = queries.get(key);
}

either PrimitiveUtils.read(..) should also work for Integer, Byte,.. types or there should be an extra method like:
         public Object readNullableTypes(String value, Class type) {
            Object ret = value;
            if (Integer.class == type) {
                ret = Integer.valueOf(value);
            }
            if (Byte.class == type) {
                ret = Byte.valueOf(value);
            }
            if (Short.class == type) {
                ret = Short.valueOf(value);
            }
            if (Long.class == type) {
                ret = Long.valueOf(value);
            }
            if (Float.class == type) {
                ret = Float.valueOf(value);
            }
            if (Double.class == type) {
                ret = Double.valueOf(value);
            }
            if (Boolean.class == type) {
                ret = Boolean.valueOf(value);
            }
            if (Character.class == type) {
                ret = value.charAt(0);
            }
            return ret;
        }
","using JAXD Databinding, JAX-WS with REST ",3600,3600,,0%,3600,3600,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,Moderate,,,,,,,,,,,114092,,,2010-03-08 14:49:17.0,,,,,,0|i0a5un:,57221,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
REST and web methods taking arguments called without argument leads to IllegalArgumentException: wrong number of arguments exception,CXF-2697,12458425,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,dfreis,dfreis,08/Mar/10 10:36,21/Jan/11 18:14,14/Mar/19 02:29,04/Jan/11 03:42,2.2.5,,,,,,,,,,,,,,2.3.2,,,,JAX-WS Runtime,JAXB Databinding,,,,,0,,,,"if an @WebMethod taking an @WebParam argument is called without the argument via REST the IllegalArgumentException is thrown.
WebMethod:
 public String sayHi(@WebParam(name=""text"") String text, @WebParam(name=""text2"") String text2);

this works if only one (text or text2) parameter is given within the HTTP GET Rest call and the second parameter is missing.
Does not work if both parameters are missing!

The Reason can be found within URIMappingInterceptor.keepInOrder method' s first line:
if (params == null || params.size() == 0) {
  return params;
}

should be replaced by:
if (params == null) {
  return params;
}

this change will add all required 'null' values for all missing parameters given within wsdl.","using JAXD Databinding, JAX-WS with REST",3600,3600,,0%,3600,3600,,,,,,,,,,11/Dec/10 12:38;dfreis;dfreis.patch;https://issues.apache.org/jira/secure/attachment/12466046/dfreis.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2011-01-04 03:42:34.024,,,no_permission,,Novice,,,,,,,,,,,114091,,,Tue Jan 04 03:42:34 UTC 2011,,,,,,0|i13ynj:,231244,,,,,,,,"11/Dec/10 12:36;dfreis;well there either seems to be a merge failure or one did not get the report right.

Now the code looks like:

       if (params == null) {
           return params;
       }
       
       if (order == null || order.size() == 0) {
           return params;
       }

what I meant was to *replace* the second part with the first one.

I will attach a patch file","11/Dec/10 12:38;dfreis;to be patched within cxf root directory with:
patch -i path_to/dfreis.patch
",04/Jan/11 03:42;dkulp;Patch applied.  thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The dynamic imports of the bundles are invalid,CXF-2696,12458345,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,alitokmen,alitokmen,06/Mar/10 07:09,09/Mar/10 09:43,14/Mar/19 02:29,09/Mar/10 00:27,2.2.6,,,,,,,,,,,,,,2.2.7,,,,OSGi,,,,,,0,,,,"Hello

I've run into another issue with the dynamic imports in the CXF bundles. These
currently are:

     DynamicImport-Package com.sun.xml.bind.api.*, \
                       com.sun.xml.internal.bind.api.*

The trouble is that an import on package.* does actually NOT include
package itself. The declaration should therefore be:

DynamicImport-Package com.sun.xml.bind.api, \
                   com.sun.xml.bind.api.*, \
                   com.sun.xml.internal.bind.api, \
                   com.sun.xml.internal.bind.api.* 

Cheers

S. Ali Tokmen
http://ali.tokmen.com/",,600,600,,0%,600,600,,,,,,,,,,06/Mar/10 09:05;alitokmen;CXF-2696.patch;https://issues.apache.org/jira/secure/attachment/12438087/CXF-2696.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,Novice,,,,,,,,,,,114090,,,Tue Mar 09 09:43:33 UTC 2010,,,,,,0|i0a5uv:,57222,,,,,,,,06/Mar/10 09:05;alitokmen;Added patch generated against the CXF 2.2.6 tag,09/Mar/10 09:43;alitokmen;Verified Revision: 920587 on trunk,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException when reading a soap encoded struct with a nested element that's nil,CXF-2695,12458237,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,marino_jonsson@hotmail.com,marino_jonsson@hotmail.com,05/Mar/10 12:16,10/May/10 18:05,14/Mar/19 02:29,08/Apr/10 03:29,2.2.6,,,,,,,,,,,,,,2.2.8,,,,Aegis Databinding,,,,,,0,,,,"When reading a simple struct that has a nested (unqualified) element set to nil a NullPointerException is thrown:
{code}
java.lang.NullPointerException
	at org.apache.cxf.aegis.type.basic.BeanTypeInfo.isNillable(BeanTypeInfo.java:384)
	at org.apache.cxf.aegis.type.basic.BeanType.readObject(BeanType.java:165)
{code}

This should be easily replicated by using the following xml for the StructTypeTest.testSimpleStruct() test:

{code}
<b:shipping xmlns:b=""urn:Bean"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">
    <street>1234 Riverside Drive</street>
    <city>Gainesville</city>
    <state>FL</state>
    <zip xsi:nil=""true""/>
</b:shipping>
{code}

Apparently the problem stems from the fact that when the element is nil it's handled without involving the StructType (which takes care of ""qualifying"" the element name in other cases) - the unqualified name of the element is sent to the BeanTypeInfo.isNillable() method, which fails to find a Type for the name as a result.

I'm not sure how to solve this in a ""clean"" way - maybe extracting the ""else"" block that handles nil elements in BeanType.readObject to a seperate overridable method thereby giving StructType a chance to qualify the name before it's sent to the BeanTypeInfo.isNillable() method?
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2010-04-08 03:06:40.372,,,no_permission,,,,,,,,,,,,,114089,,,Thu Apr 08 03:06:40 UTC 2010,,,,,,0|i0v22v:,179310,,,,,,,,"08/Apr/10 03:06;dkulp;Soap-encoding pretty much always allows xsi:nil on pretty much any element.   The schema is kind of just a hint.   Thus, in this case, it's easiest to just do something like:

BeanType:
{code}
 if (!alwaysAllowNillables() && !propertyTypeInfo.isNillable(name)) {
....
    protected boolean alwaysAllowNillables() {
        return false;
    }
{code}

and in StructType, override it to return true.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The CXF bundle has a required import on org.apache.xml.security,CXF-2694,12458219,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,alitokmen,alitokmen,05/Mar/10 09:18,09/Mar/10 09:43,14/Mar/19 02:29,09/Mar/10 00:23,2.0.12,2.1.8,2.2.6,,,,,,,,,,,,2.2.7,,,,OSGi,,,,,,0,,,,"see the thrread on: http://old.nabble.com/Issue-with-CXF-bundle%27s-imports-ts27778720.html

Hello

In its version 2.2.6, the CXF bundles have a certain number of imports; some of them are optional and some other mandatory.

One that's mandatory is org.apache.xml.security, but I have the impression that it actually is not: I've modified the bundle so this dependency is optional, and it still is working very well in my use cases.

More interestingly, org.apache.ws.security* is already marked as resolution:=optional (see https://svn.apache.org/repos/asf/cxf/tags/cxf-2.2.6/distribution/bundle/minimal/pom.xml where it's clearly visible)

Would it be possible to also mark the import of org.apache.xml.security* as optional as well?

--

This request exists because there are many Web Services that don't actually require any security policy (stock ticker, weather, ...) and it's a pity to require to have it if not needed. Mostly that the org.apache.xml.security itself needs many, many more dependencies.",,600,600,,0%,600,600,,,,,,,,,,05/Mar/10 09:22;alitokmen;CXF-2694.patch;https://issues.apache.org/jira/secure/attachment/12437986/CXF-2694.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,Novice,,,,,,,,,,,114088,,,Tue Mar 09 09:43:16 UTC 2010,,,,,,0|i0a5v3:,57223,,,,,,,,"05/Mar/10 09:22;alitokmen;Added patch based on the CXF 2.2.6 tag

Note that in both patched files, the import of org.apache.ws.security was already marked as optional. I therefore expect that marking org.apache.xml.security will not create any issues.",09/Mar/10 09:43;alitokmen;Verified Revision: 920567 on trunk,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE when calling a web service with header,CXF-2692,12458140,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,greglebonniec,greglebonniec,04/Mar/10 15:56,23/Mar/10 02:59,14/Mar/19 02:29,09/Mar/10 00:24,2.2.5,2.2.6,,,,,,,,,,,,,2.2.7,,,,JAX-WS Runtime,,,,,,0,header,,,"When Web Service which has a simple input header parameter is called from a Java consumer, a NullPointerException is thrown.
When It is called from an external SOAP Client, there is no problem

SEI : 
{quote}
@WebService
public interface BugService {

	@WebResult(name = ""return"")
	public String print(
			@WebParam(name = ""name"", header = true) String name);

}
{quote}

Consumer : 
{quote}
Service service = Service.create(wsdlURL, serviceName);
BugService client = service.getPort(BugService.class);
System.out.println(client.print(""header""));
{quote}

Exception : 
{quote}
java.lang.NullPointerException
	at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.initializeClassInfo(ReflectionServiceFactoryBean.java:754)
	at org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean.initializeWSDLOperation(JaxWsServiceFactoryBean.java:222)
	at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.initializeWSDLOperations(ReflectionServiceFactoryBean.java:674)
	at org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean.initializeWSDLOperations(JaxWsServiceFactoryBean.java:258)
	at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.buildServiceFromWSDL(ReflectionServiceFactoryBean.java:424)
	at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.initializeServiceModel(ReflectionServiceFactoryBean.java:528)
	at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.create(ReflectionServiceFactoryBean.java:278)
	at org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean.create(JaxWsServiceFactoryBean.java:178)
	at org.apache.cxf.jaxws.ServiceImpl.createPort(ServiceImpl.java:411)
	at org.apache.cxf.jaxws.ServiceImpl.getPort(ServiceImpl.java:296)
	at org.apache.cxf.jaxws.ServiceImpl.getPort(ServiceImpl.java:291)
	at javax.xml.ws.Service.getPort(Service.java:161)
	at com.header.ws.ConsumerBug.main(ConsumerBug.java:17)
{quote}


",,,,,,,,,,,,,,,,,04/Mar/10 15:57;greglebonniec;Bug_Header.zip;https://issues.apache.org/jira/secure/attachment/12437894/Bug_Header.zip,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,114087,,,2010-03-04 15:56:12.0,,,,,,0|i0a5vj:,57225,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Classloader not GC'ed after undeploying the applications. Reference from SingleElementLeafProperty,CXF-2689,12457983,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,,dannyblazej,dannyblazej,03/Mar/10 13:39,21/Jan/11 18:18,14/Mar/19 02:29,12/Oct/10 17:47,2.2.6,,,,,,,,,,,,,,2.2.11,2.3,,,JAX-WS Runtime,,,,,,0,classloader,jaxb,memory_leak,"I found that after undeploying my applications from JBoss 5.1.0.GA the classloaders remain hanging and are never garbage collected. These are the items I have tried so far:
- JVM options : -XX:+UseConcMarkSweepGC -XX:+CMSPermGenSweepingEnabled -XX:+CMSClassUnloadingEnabled  
  These make that the permgen gets collected periodically.
- I have verified that after several redeployments there is indeed the PermGen OOM error.

The applications consist of a war package, containing the JSP frontend. and an EAR containing all the backend services (it includes CXF 2.2.6 and JAXB 2.1.12 within the EAR). I use CXF as a jaxws:client:

Analyzing a memory dump several minutes after undeployment, and after manually triggering GC, I extracted this with Eclipse MAT. 
It contains the ""Path to GC (Excluding all weak, soft and phantom references)"":

Class Name                                                                                              | Shallow Heap | Retained Heap 
---------------------------------------------------------------------------------------------------------------------------------------
org.jboss.classloader.spi.base.BaseClassLoader @ 0xdf9e538                                              |           96 |    10,484,208 
'- <classloader> class com.sun.xml.bind.v2.runtime.property.SingleElementLeafProperty @ 0x2711fde0      |            8 |             8 
   |- <class> com.sun.xml.bind.v2.runtime.property.SingleElementLeafProperty @ 0xeeb0140                |           40 |         1,336 
   |  |- value java.lang.ThreadLocal$ThreadLocalMap$Entry @ 0x10173b88                                  |           32 |            32 
   |  |  '- [39] java.lang.ThreadLocal$ThreadLocalMap$Entry[128] @ 0xf7ca2f8                            |          528 |        23,240 
   |  |     '- table java.lang.ThreadLocal$ThreadLocalMap @ 0xf6647a8                                   |           24 |        23,264 
   |  |        '- threadLocals java.lang.Thread @ 0xf4856c0  http-127.0.0.1-8080-14 Native Stack, Thread|          104 |        23,928 
   |  |- value java.lang.ThreadLocal$ThreadLocalMap$Entry @ 0x101d8f98                                  |           32 |            32 
   |  |- value java.lang.ThreadLocal$ThreadLocalMap$Entry @ 0x101d9240                                  |           32 |            32 
   |  |- value java.lang.ThreadLocal$ThreadLocalMap$Entry @ 0x101e8df0                                  |           32 |            32 
   |  |- value java.lang.ThreadLocal$ThreadLocalMap$Entry @ 0x103c01f8                                  |           32 |            32 
   |  |- value java.lang.ThreadLocal$ThreadLocalMap$Entry @ 0x104c1b20                                  |           32 |            32 
   |  |- value java.lang.ThreadLocal$ThreadLocalMap$Entry @ 0x10567780                                  |           32 |            32 
   |  '- Total: 7 entries                                                                               |              |               
   |- <class> com.sun.xml.bind.v2.runtime.property.SingleElementLeafProperty @ 0xed70788                |           40 |         1,280 
   |  |- value java.lang.ThreadLocal$ThreadLocalMap$Entry @ 0xf8dcc78                                   |           32 |            32 
   |  |  '- [9] java.lang.ThreadLocal$ThreadLocalMap$Entry[128] @ 0xf7bca90                             |          528 |        22,520 
   |  |     '- table java.lang.ThreadLocal$ThreadLocalMap @ 0xf515ca8                                   |           24 |        22,544 
   |  |        '- threadLocals java.lang.Thread @ 0xf35e078  http-127.0.0.1-8080-8 Native Stack, Thread |          104 |        23,208 
   |  |- value java.lang.ThreadLocal$ThreadLocalMap$Entry @ 0xf8dcd18                                   |           32 |            32 
   |  |- value java.lang.ThreadLocal$ThreadLocalMap$Entry @ 0xf8e7628                                   |           32 |            32 
   |  |- value java.lang.ThreadLocal$ThreadLocalMap$Entry @ 0xfd624d0                                   |           32 |            32 
   |  |- value java.lang.ThreadLocal$ThreadLocalMap$Entry @ 0xfd6d480                                   |           32 |            32 
   |  |- value java.lang.ThreadLocal$ThreadLocalMap$Entry @ 0xfd77710                                   |           32 |            32 
   |  |- value java.lang.ThreadLocal$ThreadLocalMap$Entry @ 0xfd96740                                   |           32 |            32 
   |  |- value java.lang.ThreadLocal$ThreadLocalMap$Entry @ 0xfd9d5c0                                   |           32 |            32 
   |  |- value java.lang.ThreadLocal$ThreadLocalMap$Entry @ 0xff51780                                   |           32 |            32 
   |  |- value java.lang.ThreadLocal$ThreadLocalMap$Entry @ 0x10145a28                                  |           32 |            32 
   |  |- value java.lang.ThreadLocal$ThreadLocalMap$Entry @ 0x106537c8                                  |           32 |            32 
   |  '- Total: 11 entries                                                                              |              |               
   '- Total: 2 entries                                                                                  |              |               
---------------------------------------------------------------------------------------------------------------------------------------

It shows the SingleElementLeafProperty from JAXBImpl holding references to the classloader (of the EAR packaged application). the instance SingleElementLeafProperty  contains a fieldName which holds one of the parameter names of the invoked operation.

When I open a JPDA debug session to JBoss and suspend the Threads, I found indeed they included hard references to the SingleElementLeafProperty. This is a dump of the variables in the suspended Thread threadLocals:
[25]	ThreadLocal$ThreadLocalMap$Entry  (id=229)	
	discovered	null	
	next	ThreadLocal$ThreadLocalMap$Entry  (id=229)	
	queue	ReferenceQueue$Null  (id=215)	
	referent	null	
	value	SingleElementLeafProperty<BeanT>  (id=239)	
		acc	AdaptedAccessor<BeanT,InMemValueT,OnWireValueT>  (id=240)	
		defaultValue	null	
		fieldName	""msisdn"" (id=244)	
		nillable	false	
		propertyInfo	null	
		tagName	Name  (id=245)	
		xacc	TransducedAccessor$CompositeTransducedAccessorImpl<BeanT,ValueT>  (id=247)	
			acc	AdaptedAccessor<BeanT,InMemValueT,OnWireValueT>  (id=240)	
				adapter	Class<T> (javax.xml.bind.annotation.adapters.NormalizedStringAdapter) (id=253)	
					annotations	null	
					annotationType	null	
					cachedConstructor	null	
					classRedefinedCount	0	
					declaredAnnotations	null	
					declaredConstructors	SoftReference<T>  (id=349)	
					declaredFields	null	
					declaredMethods	null	
					declaredPublicFields	null	
					declaredPublicMethods	null	
					enumConstantDirectory	null	
					enumConstants	null	
					genericInfo	ClassRepository  (id=279)	
					lastRedefinedCount	0	
					name	""javax.xml.bind.annotation.adapters.NormalizedStringAdapter"" (id=283)	
					newInstanceCallerCache	null	
					publicConstructors	null	
					publicFields	null	
					publicMethods	null	
				core	Accessor$FieldReflection<BeanT,ValueT>  (id=254)	
					f	Field  (id=294)	
						annotations	byte[20]  (id=298)	
						clazz	Class<T> (com.al.apc.generated.services.customeraccount.BaseAccountRequest) (id=300)	
						declaredAnnotations	LinkedHashMap<K,V>  (id=301)	
						fieldAccessor	null	
						genericInfo	null	
						modifiers	4	
						name	""msisdn"" (id=244)	
						override	true	
						overrideFieldAccessor	UnsafeObjectFieldAccessorImpl  (id=303)	
						root	Field  (id=305)	
						securityCheckCache	null	
						securityCheckTargetClassCache	null	
						signature	null	
						slot	7	
						type	Class<T> (java.lang.String) (id=209)	
					valueType	Class<T> (java.lang.String) (id=209)	
				staticAdapter	null	
				valueType	Class<T> (java.lang.String) (id=209)	
			xducer	RuntimeBuiltinLeafInfoImpl$1  (id=260)	

I have seen an old bug reference CXF-457 which clears the threadlocal at the end of invoke() method in JaxWsMethodInvoker.  The proxy used in my case is JaxWsClientProxy. I found that after the method invocation the response is cleared from the threadlocals, but several parameter names remain there.

I think my setup is OK. We passed a lot of tests, including 3M successful generated (test)load transactions.

Any suggestions?

Kind Regards,
Danny","Windows XP / Solaris 10
JBoss 5.1.0.GA",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,Blocked on External,,,2010-03-09 01:24:19.424,,,no_permission,,,,,,,,,,,,,114084,,,Tue Oct 12 17:47:43 UTC 2010,,,,,,0|i0v27b:,179330,,,,,,,,"09/Mar/10 01:24;dkulp;
This is a bug in JAXB.   I've logged an issue with them:


https://jaxb.dev.java.net/issues/show_bug.cgi?id=742","12/Oct/10 17:47;dkulp;
This was apparently resolved in JAXB 2.1.13 as they made the saving of that property in the thread local require a property to be set and it's not on by default.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CLONE -WSDL Schema Imports - include schema location doesnt have full path,CXF-2687,12457643,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Blocker,Fixed,dkulp,yogeshj,yogeshj,27/Feb/10 16:26,21/Jan/11 18:14,14/Mar/19 02:29,07/Jan/11 22:23,2.2.5,,,,,,,,,,,,,,2.3.2,,,,,,,,,,0,SchemaGeneration,SchemaValidation,,"Hi I have configured one webservice using following xml configuration

<jaxws:endpoint address=""/PersonService"" implementor=""#personServiceBean"" id=""personService"">
	<jaxws:schemaLocations >
		<jaxws:schemaLocation>WEB-INF/classes/app/valueobjects/RequestResponse.xsd</jaxws:schemaLocation>
	</jaxws:schemaLocations>
	<jaxws:properties>
		<entry key=""schema-validation-enabled"" value=""true""/>
	</jaxws:properties>
</jaxws:endpoint>

CXF generates WSDL at runtime but generateds WSDL looks like

<?xml version='1.0' encoding='UTF-8'?><wsdl:definitions name=""PersonService"" targetNamespace=""http://www.webservice.com/ws"" xmlns:ns1=""http://cxf.apache.org/bindings/xformat"" xmlns:soap=""http://schemas.xmlsoap.org/wsdl/soap/"" xmlns:tns=""http://www.webservice.com/ws"" xmlns:wsdl=""http://schemas.xmlsoap.org/wsdl/"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">
  <wsdl:types>
<schema attributeFormDefault=""unqualified"" elementFormDefault=""qualified"" targetNamespace=""http://www.webservice.com/ws"" xmlns=""http://www.w3.org/2001/XMLSchema"" xmlns:tns=""http://www.webservice.com/ws"">
<include schemaLocation=""valueobjects.xsd"" />
<complexType name=""GetPersonDetails"">
<sequence>
<element minOccurs=""0"" ref=""tns:Person"" />
</sequence>
</complexType>
<complexType name=""GetPersonDetailsResponse"">
<sequence>
<element minOccurs=""0"" ref=""tns:Person"" />
</sequence>
</complexType>
<element name=""GetPersonDetails"" nillable=""true"" type=""tns:GetPersonDetails"" />
<element name=""GetPersonDetailsResponse"" nillable=""true"" type=""tns:GetPersonDetailsResponse"" />
</schema>
  </wsdl:types>
...........


The include element in schema doesn't contain entire path and hence the clients are not able to retrieve related elements.",,,,,,,,,,,CXF-1822,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,Moderate,,,,,,,,,,,114082,,,2010-02-27 16:26:06.0,,,,,,0|i0uxof:,178597,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
client fails under java2 security policy in spi.Provider.provider using FactoryFinder,CXF-2683,12457170,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,bord,bord,23/Feb/10 15:46,01/Nov/11 02:11,14/Mar/19 02:29,14/Sep/11 01:48,2.2.6,,,,,,,,,,,,,,2.5,,,,Core,,,,,,0,,,,"i run the jaxws_async sample just fine out of the box.
but i get various unhelpful errors below when I make adjustment to the ant cxfrun to add a java2 security setup.   The errors dont help me with what permissions i need in the security policy.
First i change the build.xml to:

        <!--<cxfrun classname=""demo.hw.client.Client"" param1=""${basedir}/wsdl/he
llo_world_async.wsdl"" param2=""${op}"" param3=""${param}""/>-->
        <cxfrun classname=""demo.hw.client.Client"" jvmarg1=""-Djava.security.manag
er"" jvmarg2=""-Djava.security.policy==my.policy"" param1=""${basedir}/wsdl/hello_wo
rld_async.wsdl"" param2=""${op}"" param3=""${param}""/>

and then if the my.policy file in the directory with build.xml has just
grant {
    permission java.security.AllPermission;
}
I again have no problem running the ""ant client"" (while the ""ant server"" is running)
I again have no problem if i have this policy (note the /common/bord/java/cxf/apache-cxf-2.2.6 is my $CXF_HOME)
grant codeBase ""file:/common/bord/java/cxf/apache-cxf-2.2.6/samples/jaxws_async/
-"" {
  permission java.security.AllPermission;
}
grant codeBase ""file:/common/bord/java/cxf/apache-cxf-2.2.6/lib/-"" {
    permission java.security.AllPermission;
};

Now, i cannot grant all permissions like this in my production container, so I need to determine the fine-grain permissions that will allow me to use CXF, so
I comment out the first permission...AllPermission that i had under the file:...jaxws_async and when i run the ant client i get this unhelpful issue:

client:
     [java] Exception in thread ""main"" java.lang.NullPointerException
     [java]     at org.apache.cxf.wsdl11.WSDLServiceFactory.<init>(WSDLServiceFa
ctory.java:91)
     [java]     at org.apache.cxf.jaxws.ServiceImpl.initializePorts(ServiceImpl.
java:205)
     [java]     at org.apache.cxf.jaxws.ServiceImpl.<init>(ServiceImpl.java:148)

     [java]     at org.apache.cxf.jaxws.spi.ProviderImpl.createServiceDelegate(P
roviderImpl.java:65)
     [java]     at javax.xml.ws.Service.<init>(Service.java:36)
     [java]     at org.apache.hello_world_async_soap_http.SOAPService.<init>(SOA
PService.java:48)
     [java]     at demo.hw.client.Client.main(Client.java:53)
     [java] Java Result: 1


Next, i put back the AllPermission for the jaxws_async and then comment out the permission ...AllPermission for the file:.../lib (the CXF_HOME/lib) and when i run the ant client i get this unhelpful issue


client:
     [java] Exception in thread ""main"" javax.xml.ws.spi.FactoryFinder$Configurat
ionError: Provider org.apache.axis2.jaxws.spi.Provider not found
     [java]     at javax.xml.ws.spi.FactoryFinder$2.run(FactoryFinder.java:135)
     [java]     at java.security.AccessController.doPrivileged(AccessController.
java:193)
     [java]     at javax.xml.ws.spi.FactoryFinder.doPrivileged(FactoryFinder.jav
a:266)
     [java]     at javax.xml.ws.spi.FactoryFinder.newInstance(FactoryFinder.java
:122)
     [java]     at javax.xml.ws.spi.FactoryFinder.access$200(FactoryFinder.java:
42)
     [java]     at javax.xml.ws.spi.FactoryFinder$3.run(FactoryFinder.java:255)
     [java]     at java.security.AccessController.doPrivileged(AccessController.
java:193)
     [java]     at javax.xml.ws.spi.FactoryFinder.doPrivileged(FactoryFinder.jav
a:266)
     [java]     at javax.xml.ws.spi.FactoryFinder.find(FactoryFinder.java:165)
     [java]     at javax.xml.ws.spi.Provider.provider(Provider.java:39)
     [java]     at javax.xml.ws.Service.<init>(Service.java:36)
     [java]     at org.apache.hello_world_async_soap_http.SOAPService.<init>(SOA
PService.java:48)
     [java]     at demo.hw.client.Client.main(Client.java:53)
     [java] Java Result: 1

So, I am really lost as to how to set up the java2 security permissions to grant just what i need to use CXF.... and there obviously seem to be bugs in the code as normally when a permission is missing one gets a clear Permission exception explaining the missing permission.
","AIX JDK > java -fullversion
java full version ""J2RE 1.5.0 IBM AIX build pap32dev-20070201 (SR4)""
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2011-09-14 01:48:12.735,,,no_permission,,,,,,,,,,,,,43984,,,Wed Sep 14 01:48:12 UTC 2011,,,,,,0|i0sxzj:,166983,,,,,,,,"14/Sep/11 01:48;dkulp;
I cannot reproduce the NPE with current , but there are definitely improvements needed.   I've updated trunk  (2.5) to use the AccessController for more areas.   With that, I can run the wsdl_first example (both client and server) using a security policy of:

{code}
grant { 
    //needed to read the cxf-rt-frontend-jaxws jar to get the correct JAX-WS implementation
    //as well as the jaxb implementation and likely things like SAAJ and Stax parsers
    permission java.io.FilePermission  ""/home/dkulp/.m2/repository/-"", ""read""; 

    //needed to be able to get the WSDL
    permission java.io.FilePermission  ""/home/dkulp/working/cxf/distribution/src/main/release/samples/-"", ""read""; 

    //required to publish
    permission javax.xml.ws.WebServicePermission ""publishEndpoint"";

    //general
    permission java.util.PropertyPermission ""line.separator"", ""read"";

    //XmlSchema fix needed (will bin in XmlSchema 2.0.1)
    permission java.util.PropertyPermission ""org.apache.ws.commons.*"", ""read"";

    //jetty - needed to open the server sockets and accept connections
    permission java.util.PropertyPermission ""org.eclipse.jetty.*"", ""read"";
    permission java.net.SocketPermission ""*"", ""resolve"";
    permission java.net.SocketPermission ""*"", ""listen"";
    permission java.net.SocketPermission ""*"", ""accept"";

    //HTTPUrlConnection for clients
    permission java.net.SocketPermission ""*"", ""connect"";
};

// stuff for JAXB
grant codeBase ""file:/home/dkulp/.m2/repository/com/sun/xml/bind/-"" {
    permission java.util.PropertyPermission ""mapAnyUriToUri"", ""read"";
    permission java.lang.RuntimePermission ""accessDeclaredMembers"";
    permission java.lang.reflect.ReflectPermission ""suppressAccessChecks"";
};

//Spring related things
grant codeBase ""file:/home/dkulp/.m2/repository/org/springframework/-"" {
    permission java.util.PropertyPermission ""user.*"", ""read"";
    permission java.lang.reflect.ReflectPermission ""suppressAccessChecks"";
};

grant codeBase ""file:/home/dkulp/.m2/repository/org/apache/cxf/-"" {
    //various properties that we'll look for
    permission java.util.PropertyPermission ""org.apache.cxf.*"", ""read""; 
    permission java.util.PropertyPermission ""cxf.*"", ""read""; 
    permission java.util.PropertyPermission ""OASISCatalogManager.catalog.*"", ""read"";
    permission java.util.PropertyPermission ""spring.validation.mode"", ""read"";
    permission java.util.PropertyPermission ""user.dir"", ""read"";

    //permissions we need at runtime
    permission java.lang.RuntimePermission ""accessDeclaredMembers"";
    permission java.lang.RuntimePermission ""setContextClassLoader"";
    permission java.lang.reflect.ReflectPermission ""suppressAccessChecks"";

    permission java.util.PropertyPermission ""http.proxyHost"", ""read""; 

    //JAXB - doesn't do this one in a AccessController so we need to set it
    permission java.util.PropertyPermission ""mapAnyUriToUri"", ""read"";

};     
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
UriInfoImpl.getRequestUri() fails on URLs that require escaping,CXF-2677,12456426,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,sergey_beryozkin,thecoolace,thecoolace,16/Feb/10 13:00,23/Mar/10 02:59,14/Mar/19 02:29,16/Feb/10 15:33,2.2.5,2.2.6,,,,,,,,,,,,,2.2.7,,,,JAX-RS,,,,,,0,,,,"current implementation from UriInfoImpl:
{code}
    public URI getRequestUri() {
        String path = getAbsolutePathAsString();
        String queries = (String)message.get(Message.QUERY_STRING);
        if (queries != null) {
            path += ""?"" + queries;
        }
        return URI.create(path);
    }
{code}
This fails for URIs that have characters that have to be escaped as of rfc2396. 

Examples: http://localhost:13080/services/rest/crypto/hash;algorithm=S{A/text/foo or http://localhost:13080/services/rest/crypto/hash;algorithm=S^A/text/foo
fail with Exception during getRequestUri() due to { or ^ as part of the uri
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2010-02-16 13:15:19.762,,,no_permission,,,,,,,,,,,,,114074,,,Tue Feb 16 15:59:36 UTC 2010,,,,,,0|i0a5vz:,57227,,,,,,,,"16/Feb/10 13:02;thecoolace;My Links got f*ck up due to the link parser of jira. Here they are again:
{noformat}
http://localhost:13080/services/rest/crypto/hash;algorithm=S{A/text/foo 
{noformat}
and 
{noformat}
http://localhost:13080/services/rest/crypto/hash;algorithm=S^A/text/foo
{noformat}","16/Feb/10 13:15;sergey_beryozkin;This has been fixed in 2.2.7-SNAPSHOT, can you please try the SNAPSHOT to confirm ?

thanks, Sergey","16/Feb/10 14:43;thecoolace;Confirmed. Works for me now. 

Thanks for fixing bugs before I reported them. :-)","16/Feb/10 15:59;sergey_beryozkin;> Confirmed. Works for me now. 

thanks

> Thanks for fixing bugs before I reported them. :-)

Another user created a similar issue few weeks ago :-)

cheers, Sergey",,,,,,,,,,,,,,,,,,,,,,,,,,,
JMX InstanceAlreadyExistsException under high load initialization,CXF-2676,12456363,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,cleclerc,cleclerc,cleclerc,15/Feb/10 21:27,23/Mar/10 02:59,14/Mar/19 02:29,16/Feb/10 07:20,2.2.6,,,,,,,,,,,,,,2.2.7,2.3,,,Core,,,,,,0,,,,"Under high load / burst startups with ResponseTimeFeature enabled , CXF clients and endpoints can cause {{InstanceAlreadyExistsException}}.

{noformat:title=Sample of InstanceAlreadyExistsException}
2010/02/15 22:12:08,632  WARN [http-8080-20] org.apache.cxf.management.counters.CounterRepository - 
   Can't register counter with object name org.apache.cxf:bus.id=my-bus,type=Performance.Counter.Server,service=""{http://ws.example.com/}myService"",port=""myServiceSOAP"". 
   javax.management.InstanceAlreadyExistsException: org.apache.cxf:bus.id=my-bus,type=Performance.Counter.Server,service=""{http://ws.example.com/}myService"",port=""myServiceSOAP""
{noformat}

Before CXF-2675 , the message was 
{noformat}
2010/02/15 22:12:08,632  WARN [http-8080-20] org.apache.cxf.management.counters.CounterRepository - Can't register counter with object name {0}. {1}
{noformat}",,,,,,,,,,,,,,,,,15/Feb/10 21:51;cleclerc;CXF-2676.patch;https://issues.apache.org/jira/secure/attachment/12435909/CXF-2676.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,114073,,,Tue Feb 16 07:20:39 UTC 2010,,,,,,0|i0a5w7:,57228,,,,,,,,"15/Feb/10 21:51;cleclerc;Patch proposal : use an instance scope {{counterCreationLock}} ({{java.util.concurrent.locks.ReentrantLock}}).

Pros : simple code
Cons : slightly pessimistic. Simultaneous initialization of many clients and/or endpoints is not very efficient, 

Other solutions : 
* use a {{synchronized}} block on {{ObjectName.toString().intern()}} : 
** understanding {{intern()}} is tricky :-(
* register counters at startup : 
** requires a lot of changes in the code :-(
** does not deal with hot activation of the {{ResponsetimeFeature}} :-(",16/Feb/10 07:20;cleclerc;Patch applied. I opened a question on the dev mailing list to get feedbacks if someone finds the scope of the counter-creation-lock is too pessimistic.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Single quotes must be doubled in message formats (ie in Message.properties resource bundles),CXF-2675,12456351,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,cleclerc,cleclerc,cleclerc,15/Feb/10 18:38,23/Mar/10 02:59,14/Mar/19 02:29,15/Feb/10 19:19,2.2.6,,,,,,,,,,,,,,2.2.7,2.3,,,Core,,,,,,0,,,,"[MessageFormat|http://java.sun.com/javase/6/docs/api/java/text/MessageFormat.html] javadocs states that single quotes must be doubled :
{quote}
Within a _String_, ""''"" represents a single quote. A _QuotedString_ can contain arbitrary characters except single quotes; the surrounding single quotes are removed. An _UnquotedString_ can contain arbitrary characters except single quotes and left curly brackets. Thus, a string that should result in the formatted message ""'\{0\}'"" can be written as ""'''\{'0\}''"" or ""'''\{0\}'''"".
{quote}

Currently, most many messages in {{Messages.properties}} resource bundles contain non doubled single quotes like :
{noformat}
INSTRUMENTATION_REGISTER_FAULT_MSG=Can't register counter with object name {0}. {1}
{noformat}
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,114072,,,2010-02-15 18:38:37.0,,,,,,0|i0a5wf:,57229,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JaxWsProxyFactoryBean and JaxWsServerFactoryBean communication broken in some cases after upgrade to 2.2.7,CXF-2673,12456326,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Blocker,Fixed,dkulp,cesnek,cesnek,15/Feb/10 14:39,21/Jan/11 18:18,14/Mar/19 02:29,09/Dec/10 13:26,2.2.7,,,,,,,,,,,,,,2.2.12,2.3.1,,,Aegis Databinding,JAX-WS Runtime,,,,,0,,,,"When using JaxWsProxyFactoryBean and JaxWsServerFactoryBean with AegisDataBinding some interfaces is broken and all methods call result in NULL.

When contract interface contains method with parameters of type List<Integer> *AND NOT CONTAIN* method with return type ""List<Integer>"" then all methods call return NULL.


Server code:
{code}
        JaxWsServerFactoryBean serverFactoryBean = new JaxWsServerFactoryBean();
        serverFactoryBean.setServiceClass(AopUtils.getTargetClass(implementor)); //WSImpl.class
        serverFactoryBean.setServiceBean(implementor);             //WSImpl.class
        serverFactoryBean.setDataBinding(new AegisDatabinding());
        serverFactoryBean.setAddress(url);
        serverFactoryBean.setBus(cxfServlet.getBus());
        serverFactoryBean.create();
{code}

Client code:
{code}
            JaxWsProxyFactoryBean factory = new JaxWsProxyFactoryBean();
            factory.setServiceClass(resultInterfaceClass);                 //WS.class
            factory.setAddress(asURL);
            factory.setDataBinding(new AegisDatabinding());
            Object remoteInterfaceImpl = factory.create();
{code}

Interface:
{code}
@WebService(name=""cesnek"", targetNamespace=""http://ns1"")
public interface WS {
   
    Integer zalozNovyDokument(@WebParam(name = ""idTypDokument"") Integer idTypDokument);

    void vratDmsDokumenty(@WebParam(name = ""idDmsDokumentList"") List<Integer> idDmsDokumentList);

    //When next line is un-commented - bug disappears and all working fine!
    //List<Integer> vratDmsDokumenty();
}
{code}",,,,,,,,,,,CXF-2668,,,,,,15/Feb/10 14:50;cesnek;cxf-2673-cxf-jaxws-aegis-testcase.zip;https://issues.apache.org/jira/secure/attachment/12435868/cxf-2673-cxf-jaxws-aegis-testcase.zip,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2010-02-16 16:52:52.942,,,no_permission,,,,,,,,,,,,,114070,,,Thu Dec 09 13:26:40 UTC 2010,,,,,,0|i0klan:,118267,,,,,,,,15/Feb/10 14:50;cesnek;TestCase included.,"16/Feb/10 12:26;cesnek;When I replace plain creating of JaxWsServerFactoryBean 

{code}
            JaxWsServerFactoryBean serverFactoryBean = new JaxWsServerFactoryBean(customizedServicefactoryBean);
{code}

with this 

{code}
            JaxWsImplementorInfo implInfo = new JaxWsImplementorInfo(AopUtils.getTargetClass(implementor));
            JaxWsServiceFactoryBean customizedServicefactoryBean = new JaxWsServiceFactoryBean(implInfo);
            JaxWsServerFactoryBean serverFactoryBean = new JaxWsServerFactoryBean(customizedServicefactoryBean);
{code}

then 
- I get one file WSDL
- this bug with null values disappears.

I get little lost .. :-(","16/Feb/10 16:52;dkulp;
I'll look into the test a bit more, but FYI:  
With JAX-WS, if you define a targetNamespace on the interface, it is definitely best to define the same targetNamespace on the impl.    Per spec, the namespace on the impl is used for the namespace for the binding and service parts of the wsdl and the namespace on the interface is used for the portType and wrapper messages.    If they are different, then you get the ""split wsdl"" things.   That is per spec.

I highly recommend making sure the two use the same namespace.




","17/Feb/10 08:52;cesnek;OK, I can made both namepsace same. No problem.

But I have about 100 SEI interfaces and I need to automate this - not write every namespace twice.
I tryied modify AegisDatabinding class like this (switch reading impl namespace to SEI interface)

{code}
            JaxWsImplementorInfo implInfo = new JaxWsImplementorInfo(AopUtils.getTargetClass(implementor)) {

                @Override
                public QName getServiceName() {

                    QName endpointName = super.getServiceName();
                    return new QName( getInterfaceName().getNamespaceURI(), endpointName.getLocalPart(), endpointName.getPrefix() );
                }

                @Override
                public QName getEndpointName() {

                    QName endpointName = super.getEndpointName();
                    return new QName( getInterfaceName().getNamespaceURI(), endpointName.getLocalPart(), endpointName.getPrefix() );
                }
            };
            JaxWsServiceFactoryBean customizedServicefactoryBean = new JaxWsServiceFactoryBean(implInfo);
            JaxWsServerFactoryBean serverFactoryBean = new JaxWsServerFactoryBean(customizedServicefactoryBean);
{code}

but I find-out that same job I can do with this

{code}
            JaxWsImplementorInfo implInfo = new JaxWsImplementorInfo(AopUtils.getTargetClass(implementor));
            JaxWsServiceFactoryBean customizedServicefactoryBean = new JaxWsServiceFactoryBean(implInfo);
            JaxWsServerFactoryBean serverFactoryBean = new JaxWsServerFactoryBean(customizedServicefactoryBean);
{code}

I am happy with this. But I hope this is stable solution. I feel little magic.","17/Feb/10 15:26;cesnek;My solution above doesnt work. So I going to change all ours implementation namepsace.

If you provide some switch to ignore impl namespace and use only SEI namespace I will be happy. Client has client SEI interface anyway. But I cant say if this is reasonable request.","17/Feb/10 15:56;dkulp;

I think you can do this via something like:

serverFactoryBean.getServiceFactory().getServiceConfigurations().get(0).getServiceNamespace(....);

Not completely sure though.   You could always create a subclass of AbstractServiceConfiguration and stick that at the 0 position in the ServiceConfigurations list above that overrides anything you need to override.    That's pretty much how everything gets determined.   The first config in the list to return something ""wins"".   

","17/Feb/10 18:23;cesnek;*Even if I set both namespace to same value .. the bug is still here.*

In the TestCase you can in ""AegisJaxWsImpl"" add targetNamespace=""""http://v1_1_2.rtf2pdf.doc.ws.daisy.marbes.cz"" (same value as in SEI).

The TestCase still failing.



Test runs agains 2.2.7 with latest AegisDatabinding with

{code}
aegisContext.setMappingNamespaceURI(s.getServiceInfos().get(0) 
                .getInterface().getName().getNamespaceURI());
{code}","24/Feb/10 07:57;cesnek;{code}
serverFactoryBean.getServiceFactory().getServiceConfigurations().get(0).getServiceNamespace(....);
{code}

Code above doesnt work, because in 
{code}
serverFactoryBean.create();
{code}
you always set  JaxWsServiceConfiguration to index 0 in ""ServiceConfigurations"". So I never get my serviceConfiguration before JaxWsServiceConfiguration().",09/Dec/10 13:26;cesnek;Checked after some time and it is fixed in 2.3.1 and 2.2.12.,,,,,,,,,,,,,,,,,,,,,,
Can't execute an operation with more than 128 arguments,CXF-2671,12456226,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,cbonte,cbonte,13/Feb/10 14:57,23/Mar/10 02:59,14/Mar/19 02:29,16/Feb/10 16:47,2.2.6,,,,,,,,,,,,,,2.2.7,,,,JAXB Databinding,,,,,,0,,,,"When a WSDL provides more than 128 arguments, the client request fails on a ArrayIndexOutOfBoundsException.
",,,,,,,,,,,,,,,,,13/Feb/10 15:01;cbonte;bug.wsdl;https://issues.apache.org/jira/secure/attachment/12435772/bug.wsdl,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2010-02-16 16:47:00.338,,,no_permission,,,,,,,,,,,,,114068,,,Tue Feb 16 16:47:00 UTC 2010,,,,,,0|i0a5wv:,57231,,,,,,,,"13/Feb/10 15:01;cbonte;In attachment, an WSDL file based on the hello_world example.

This file provides 129 parameters.

Step to reproduce :
1. wsdl2java -all bug.wsdl
2. ant GreeterServer
3. in another console : ant GreeterClient

Which gives :
     [java] Invoking sayHi...
     [java] 13 févr. 2010 16:03:16 org.apache.cxf.phase.PhaseInterceptorChain doDefaultLogging
     [java] ATTENTION: Interceptor for {http://apache.org/hello_world_soap_http}SOAPService#{http://apache.org/hello_world_soap_http}sayHi has thrown exception, unwinding now
     [java] org.apache.cxf.interceptor.Fault: -128
     [java]     at org.apache.cxf.jaxws.interceptors.WrapperClassOutInterceptor.handleMessage(WrapperClassOutInterceptor.java:119)
     [java]     at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:243)
     [java]     at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:484)
     [java]     at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:310)
     [java]     at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:262)
     [java]     at org.apache.cxf.frontend.ClientProxy.invokeSync(ClientProxy.java:73)
     [java]     at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:124)
     [java]     at $Proxy39.sayHi(Unknown Source)
     [java]     at org.apache.hello_world_soap_http.Greeter_SoapPort_Client.main(Greeter_SoapPort_Client.java:184)
     [java] Caused by: java.lang.ArrayIndexOutOfBoundsException: -128
     [java]     at java.util.ArrayList.elementData(ArrayList.java:338)
     [java]     at java.util.ArrayList.get(ArrayList.java:351)
     [java]     at org.apache.hello_world_soap_http.types.SayHi_WrapperTypeHelper1.createWrapperObject(Unknown Source)
     [java]     at org.apache.cxf.jaxws.interceptors.WrapperClassOutInterceptor.handleMessage(WrapperClassOutInterceptor.java:103)
     [java]     ... 8 more
     [java] Exception in thread ""main"" javax.xml.ws.soap.SOAPFaultException: -128
     [java]     at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:146)
     [java]     at $Proxy39.sayHi(Unknown Source)
     [java]     at org.apache.hello_world_soap_http.Greeter_SoapPort_Client.main(Greeter_SoapPort_Client.java:184)
     [java] Caused by: java.lang.ArrayIndexOutOfBoundsException: -128
     [java]     at java.util.ArrayList.elementData(ArrayList.java:338)
     [java]     at java.util.ArrayList.get(ArrayList.java:351)
     [java]     at org.apache.hello_world_soap_http.types.SayHi_WrapperTypeHelper1.createWrapperObject(Unknown Source)
     [java]     at org.apache.cxf.jaxws.interceptors.WrapperClassOutInterceptor.handleMessage(WrapperClassOutInterceptor.java:103)
     [java]     at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:243)
     [java]     at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:484)
     [java]     at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:310)
     [java]     at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:262)
     [java]     at org.apache.cxf.frontend.ClientProxy.invokeSync(ClientProxy.java:73)
     [java]     at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:124)
     [java]     ... 2 more
     [java] Java Result: 1

Removing only one parameter will work.

",13/Feb/10 21:16;cbonte;It works if org.apache.cxf.jaxb.WrapperHelperCompiler is modified to always fallback to reflection mode.,"16/Feb/10 16:47;dkulp;

Used the ""push short "" instead of ""push byte"" to increase limit to 32K.    ",,,,,,,,,,,,,,,,,,,,,,,,,,,,
JaxWsProxyFactoryBean and JaxWsServerFactoryBean communication broken,CXF-2668,12455918,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Blocker,Fixed,dkulp,cesnek,cesnek,10/Feb/10 16:24,09/Dec/10 16:18,14/Mar/19 02:29,11/Feb/10 19:20,2.1.9,2.2.6,,,,,,,,,,,,,2.2.12,2.3.1,,,Aegis Databinding,JAX-WS Runtime,,,,,0,,,,"When using JaxWsProxyFactoryBean and JaxWsServerFactoryBean with AegisDataBinding some interfaces is broken and all methods call result in NULL.

When contract interface contains method with return type ""List<String>"" then client assume wrong namespace and all method call is broken.

When I change ""List<String>"" to ""List<MyVOWithOneString>"" all working fine.

Server code:
{code}
        JaxWsServerFactoryBean serverFactoryBean = new JaxWsServerFactoryBean();
        serverFactoryBean.setServiceClass(AopUtils.getTargetClass(implementor)); //WSImpl.class
        serverFactoryBean.setServiceBean(implementor);             //WSImpl.class
        serverFactoryBean.setDataBinding(new AegisDatabinding());
        serverFactoryBean.setAddress(url);
        serverFactoryBean.setBus(cxfServlet.getBus());
        serverFactoryBean.create();
{code}

Client code:
{code}
            JaxWsProxyFactoryBean factory = new JaxWsProxyFactoryBean();
            factory.setServiceClass(resultInterfaceClass);                 //WS.class
            factory.setAddress(asURL);
            factory.setDataBinding(new AegisDatabinding());
            Object remoteInterfaceImpl = factory.create();
{code}

Interface:
{code}
@WebService(name=""datove_zdroje"", targetNamespace=""http://ns1"")
public interface WS {
           List<String> getCodes(@WebParam(name = ""baseCode"") String baseCode);
}
{code}

Implementation:
{code}
@WebService(serviceName = ""datove_zdroje"", endpointInterface = ""cz.marbes.daisy.modules.doc.ws.v1_0_0.WS"")
public class WSImpl implements WS {

    @Override
    public List<String> getCodes(final String baseCode) {
        return new ArrayList<String>();
    }
}
{code}


This is a general error in CXF client that assume wrong namespaces.",,,,,,,,,,,,,,,,,11/Feb/10 01:53;cesnek;cxf-jaxws-aegis-testcase.zip;https://issues.apache.org/jira/secure/attachment/12435538/cxf-jaxws-aegis-testcase.zip,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2010-02-10 16:54:11.019,,,no_permission,,,,,,,,,,,,,114065,,,Thu Dec 09 13:28:24 UTC 2010,,,,,,0|i0klav:,118268,,,,,,,,"10/Feb/10 16:38;cesnek;Issue above can be fixed in some strange way.

When you add targetNamespace to implementation (same targetNamespace as in interface)

{code}
@WebService(serviceName = ""datove_zdroje"", 
endpointInterface = ""cz.marbes.daisy.modules.doc.ws.v1_0_0.WS"",

targetNamespace=""http://ns1"" //!!

)
public class WSImpl implements WS {
{code}

then this particular interface START working.

*But interfaces without return type List<String> STOP working after you add @WebService.targetNamespace*

So this is not general fix!

Please help .. this realy magic.","10/Feb/10 16:54;dkulp;

Can you create a full test case and attach it?","10/Feb/10 21:48;cesnek;Can you give me hint or link how exactly should ""test case"" look like?
JUnit ? Plain main() method ?","10/Feb/10 22:08;dkulp;
Yea,  a main method thing is fine.   A JUnit test is fine.   Basically, something I can pull into eclipse very quick and easy and debug.

",11/Feb/10 01:53;cesnek;Failing TestCase. I borrow AegisJaxWsTest from CXF sources.,"14/Feb/10 14:41;cesnek;Hello Daniel !
Is it fix done? Can I test it on 2.2.7 thrunk now?

Is it correct to have fill-out targetNamespace on interface and leave targetNamespace on imlementation ?
Is it ok or I am wrong?

Is it ok if imlementation targetNamespace leaks to WSDL?

Many thanks for the quick fix!!",14/Feb/10 14:47;cesnek;And one more question/remark after looking on changes in SVN:  Migration from 2.2.6 to 2.2.7 will broke existing services. Is it true? Or Endpoint namespace is mainly meaningless information?,15/Feb/10 14:30;cesnek;Verified. Working fine.,"09/Dec/10 13:28;cesnek;In reality this is fixed in 2.3.1 and 2.2.12. 
",,,,,,,,,,,,,,,,,,,,,,
bus configure should provides bus attribute to set the bus,CXF-2667,12455873,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,njiang,njiang,njiang,10/Feb/10 08:01,23/Mar/10 02:59,14/Mar/19 02:29,11/Feb/10 06:01,,,,,,,,,,,,,,,2.2.7,,,,Configuration,,,,,,0,,,,"current [core.xsd|https://svn.apache.org/repos/asf/cxf/trunk/rt/core/src/main/resources/schemas/core.xsd] doesn't have the attribute of bus , but in the [BusDefinitionParser.java|https://svn.apache.org/repos/asf/cxf/trunk/rt/core/src/main/java/org/apache/cxf/bus/spring/BusDefinitionParser.java], you can see it supports setting the bus attribute.
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,114064,,,Thu Feb 11 06:01:42 UTC 2010,,,,,,0|i0a5xb:,57233,,,,,,,,"11/Feb/10 06:01;njiang;Now CXF support to configure the bus like this
{code}
<bean id=""cxf1"" class=""org.apache.cxf.bus.CXFBusImpl""/>
   
  <bean id=""cxf2"" class=""org.apache.cxf.bus.CXFBusImpl""/>

   <cxf:bus bus=""cxf1"">
        <cxf:outInterceptors>
        <bean id=""logOutbound"" class=""org.apache.cxf.interceptor.LoggingOutInterceptor""/>
        </cxf:outInterceptors>
    </cxf:bus>

    <cxf:bus bus=""cxf2"">
        <cxf:inInterceptors>
        <bean id=""logInbound"" class=""org.apache.cxf.interceptor.LoggingInInterceptor""/>
        </cxf:inInterceptors>
    </cxf:bus>
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"""Remote procedure call"" by couple JaxWsProxyFactoryBean and JaxWsServerFactoryBean doesnt work.",CXF-2665,12455741,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Critical,Fixed,dkulp,cesnek,cesnek,09/Feb/10 09:34,15/Feb/10 14:35,14/Mar/19 02:29,11/Feb/10 19:21,2.2.6,,,,,,,,,,,,,,2.2.7,,,,JAX-WS Runtime,,,,,,0,,,,"Problem is that ""remote procedure call"" by couple JaxWsProxyFactoryBean and JaxWsServerFactoryBean doesnt work.
Methods from client (remote) interface return null values.

Reason: server leaks namespace from service implementation (not only interface) .. so client can read data and return null

Server code:
{code}
        JaxWsServerFactoryBean serverFactoryBean = new JaxWsServerFactoryBean();
        serverFactoryBean.setServiceClass(AopUtils.getTargetClass(implementor)); //WSImpl.class
        serverFactoryBean.setServiceBean(implementor);                                                  //WSImpl.class
        serverFactoryBean.setDataBinding(new AegisDatabinding());
        serverFactoryBean.setAddress(url);
        serverFactoryBean.setBus(cxfServlet.getBus());
        serverFactoryBean.create();
{code}

Client code:
{code}
            JaxWsProxyFactoryBean factory = new JaxWsProxyFactoryBean();
            factory.setServiceClass(resultInterfaceClass);                                 //WS.class
            factory.setAddress(asURL);
            factory.setDataBinding(new AegisDatabinding());
            Object remoteInterfaceImpl = factory.create();
{code}

Interface:
{code}
@WebService(name=""datove_zdroje"", targetNamespace=""http://v1_0_0.ws.doc.daisy.marbes.cz"")
public interface WS {
           List<String> getCodes(@WebParam(name = ""baseCode"") String baseCode);
}
{code}

Implementation:
{code}
@WebService(serviceName = ""datove_zdroje"", endpointInterface = ""cz.marbes.daisy.modules.doc.ws.v1_0_0.WS"")
public class WSImpl implements WS {

    @Override
    public List<String> getCodes(final String baseCode) {
        return new ArrayList<String>();
    }
}
{code}

*In this configuration client always receive ""NULL"" from method call !*

Problem is that server include in WSDL(and XML communication) namespace from service implementation (WSImpl.java) - not only from (client) interface (WS.java).
In this particular case servers ""targetNamespace"" is empty. So server made it up from class and package name. But client has only information from interface.

Client anticipate that ""ServiceNamespace"" is equals with ""targetNamespace"" from interface (WS.java) WebService annotation.  

*Working WSImpl.java:*
{code}
@WebService(serviceName = ""datove_zdroje"", endpointInterface = ""cz.marbes.daisy.modules.doc.ws.v1_0_0.WS"", 
*targetNamespace=""http://v1_0_0.ws.doc.daisy.marbes.cz""* //must be same as WS.java targetNamespace
)
public class WSImpl implements WS {
{code}

*NON-Working WSImpl.java:*
{code}
@WebService(serviceName = ""datove_zdroje"", endpointInterface = ""cz.marbes.daisy.modules.doc.ws.v1_0_0.WS"", 
*targetNamespace=""""* //empty or other than WS.java targetNamespace
)
public class WSImpl implements WS {
{code}


We need clarify real meaning of @WebService(targetNamespace="""") on service implementation.",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2010-02-09 15:39:37.643,,,no_permission,,,,,,,,,,,,,114062,,,Mon Feb 15 14:35:39 UTC 2010,,,,,,0|i0a5xj:,57234,,,,,,,,"09/Feb/10 15:33;cesnek;Additional info : This happens only when result type from any method is List<simple-type> like ""List<String>"".","09/Feb/10 15:39;dkulp;

Two questions:

1) Can you package this into a small testcase and attach?

2) Can you try removing the line:
{code}
serverFactoryBean.setServiceClass(AopUtils.getTargetClass(implementor));
{code}
or changing it to:
{code}
serverFactoryBean.setServiceClass(WS.class);
{code}

","09/Feb/10 16:17;cesnek;Removing serverFactoryBean.setServiceClass(...) not helping. 

(Are you sure that interface should be set to this method? 
I think there should be implementation class. 

serverFactoryBean.setServiceClass(WS *Impl*.class);
)


Anyway in WSDL is still *java package* of implementation! So client cant be aware of this namespace. Client has of course only interface.

<xsd:schema attributeFormDefault=""qualified"" elementFormDefault=""qualified"" 
targetNamespace="" *http ://v1_1_2.rtf2pdf.pdf.doc.modules.daisy.marbes.cz/""*               //this namespace is NOT in interface annotation
xmlns:tns="" *http ://v1_1_2.rtf2pdf.pdf.doc.modules.daisy.marbes.cz/""*                              //this namespace is NOT in interface annotation
 xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">
<xsd:complexType name=""ArrayOfString"">
<xsd:sequence>
  <xsd:element maxOccurs=""unbounded"" minOccurs=""0"" name=""string"" nillable=""true"" type=""xsd:string"" /> 
  </xsd:sequence>
  </xsd:complexType>
  </xsd:schema>


Strangest thing is that single method with List<String> broke all methods in interface. When I remove single method with List<String> other methods start working.


","15/Feb/10 14:35;cesnek;Verified. Working fine.

Still wondering why implementation namespace is present in WSDL.
Is endpoint namespace is mainly meaningless information? ",,,,,,,,,,,,,,,,,,,,,,,,,,,
JAXBUtils.scanPackages - iterator returns null class,CXF-2663,12455498,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,ctataryn,ctataryn,05/Feb/10 21:30,23/Mar/10 02:59,14/Mar/19 02:29,09/Feb/10 23:34,2.2.6,,,,,,,,,,,,,,2.2.7,,,,Tooling,,,,,,0,,,,"When starting up my endpoint such that the JAXB classes referenced from the endpoints do not exist in the War project, but rather in a separate project on the classpath a strange issue occurs.  Essentially the loop within JAXBUtils.scanPackages that loops over the ""classes"" Set will get a ""null"" Class from the set.

Attached is: 
1) sample project
2) screen shot of the missing class element during a debug session
3) dump of a conditional breakpoint which logs the class name of the class within the loop until the class is null.
4) a possible patch to workaround the problem

To run the project and reproduce the problem:
1) unzip the attached project file
2) change directories to the Pom project, execute mvn clean install
3) change directories to the War project, execute mvn jetty:run
4) you should see a stacktrace similar to this:

{code}
2010-02-05 15:01:35.781::WARN:  Nested in org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'cspsEndpoint': Invocation of init method failed; nested exception is javax.xml.ws.WebServiceException: java.lang.NullPointerException:
java.lang.NullPointerException
        at org.apache.cxf.common.util.PackageUtils.getPackageName(PackageUtils.java:56)
        at org.apache.cxf.jaxb.JAXBUtils.scanPackages(JAXBUtils.java:742)
        at org.apache.cxf.jaxb.JAXBDataBinding.createJAXBContextAndSchemas(JAXBDataBinding.java:467)
        at org.apache.cxf.jaxb.JAXBDataBinding.initialize(JAXBDataBinding.java:320)
        at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.buildServiceFromWSDL(ReflectionServiceFactoryBean.java:432)
        at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.initializeServiceModel(ReflectionServiceFactoryBean.java:528)
        at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.create(ReflectionServiceFactoryBean.java:278)
        at org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean.create(JaxWsServiceFactoryBean.java:178)
        at org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory.createEndpoint(AbstractWSDLBasedEndpointFactory.java:100)
        at org.apache.cxf.frontend.ServerFactoryBean.create(ServerFactoryBean.java:105)
        at org.apache.cxf.jaxws.JaxWsServerFactoryBean.create(JaxWsServerFactoryBean.java:167)
        at org.apache.cxf.jaxws.EndpointImpl.getServer(EndpointImpl.java:346)
        at org.apache.cxf.jaxws.EndpointImpl.doPublish(EndpointImpl.java:259)
        at org.apache.cxf.jaxws.EndpointImpl.publish(EndpointImpl.java:209)
        at org.apache.cxf.jaxws.EndpointImpl.publish(EndpointImpl.java:404)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:45)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)
        at java.lang.reflect.Method.invoke(Method.java:599)
{code}

The patch which is attached might just mask the real underlying problem.  I'm not sure if the problem is because the Set is being modified as its being iterated over.  I certainly couldn't find a place where that was happening, but who knows.
","$ mvn --version
Apache Maven 2.2.1 (r801777; 2009-08-06 14:16:01-0500)
Java version: 1.6.0
Java home: D:\Program Files\IBM\RAD75\jdk\jre
Default locale: en_US, platform encoding: Cp1252
OS name: ""windows xp"" version: ""5.1 build 2600 service pack 3"" arch: ""x86"" Family: ""windows""",,,,,,,,,,,,,,,,05/Feb/10 21:32;ctataryn;CXF Linked Hashset Problem Breakpoint Dump.txt;https://issues.apache.org/jira/secure/attachment/12435012/CXF+Linked+Hashset+Problem+Breakpoint+Dump.txt,05/Feb/10 21:32;ctataryn;CXF LinkedHashset problem.png;https://issues.apache.org/jira/secure/attachment/12435013/CXF+LinkedHashset+problem.png,05/Feb/10 21:32;ctataryn;CXFSchemaRefProblem.zip;https://issues.apache.org/jira/secure/attachment/12435011/CXFSchemaRefProblem.zip,08/Feb/10 19:04;ctataryn;JaxWsServiceFactoryBean.java.nullxmlseealso.patch;https://issues.apache.org/jira/secure/attachment/12435195/JaxWsServiceFactoryBean.java.nullxmlseealso.patch,,,4.0,,,,,,,,,,,,,,,,,,,,2010-02-09 23:34:51.866,,,no_permission,,,,,,,,,,,,,114060,,,Wed Feb 10 01:13:56 UTC 2010,,,,,,0|i0a5xr:,57235,,,,,,,,"06/Feb/10 05:49;ctataryn;I should mention as well, the WSDLJar module purposely excludes some of the generated packages that cxf-codegen-plugin produces from the resulting jar file because they are duplicates of what's in the XSDJar module that were created via the cxf-common-xsd plugin.  If they are kept, what ends up happening is other areas of our system which need to use certain classes from XSDs not imported via the WSDLs (and thus not generated by cxf-codegen-plugin) can't find the classes at runtime because they find the packages in the WSDLJar first.","08/Feb/10 19:03;ctataryn;Did more digging, the null class is being added to the Set here:
http://fisheye6.atlassian.com/browse/cxf/tags/cxf-2.2.6/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/support/JaxWsServiceFactoryBean.java?r=890613#l531

Essentially the last class listed in the XmlSeeAlso annotation at runtime is null.

I found a workaround: in the WSDLJar project I'm purposely excluding the classes from the org/ and generated/ packages which were generated by the cxf-codegen-plugin module (WSDLJar module) because these classes are already generated by cxf-common-xsd in the XSDJar.

I don't understand why cxf-codgegen-plugin generates this  package named ""generated"", all of the files under that package are already contained in the org.hl7.v3 package.  But, when the Service Interface is created it wants to list that ObjectFactory from ""generated"" packagewithin the XmlSeeAlso annotation.  At runtime it can't find that ObjectFactory so it is replaced with null, and hence the Set winds up with a null entry.

Anyone have any clue why that package named generated is created?

I've attached a new patch which logs a warning and doesn't add the null class to the Set.


","08/Feb/10 19:04;ctataryn;Patch which logs a message about class not being found in the XmlSeeAlso annotation, and doesn't add the null class to the xmlschemas Set to avoid errors starting up the endpoint","09/Feb/10 23:34;dkulp;
Patch applied, although I moved the log string out to the Message.properties","10/Feb/10 01:13;ctataryn;Any clue what that mysterious ""generated"" package is all about?",,,,,,,,,,,,,,,,,,,,,,,,,,
Customized JAXWS bindings with Codegen plug-in ignored with abstract WSDLs,CXF-2661,12455453,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,davaleri,davaleri,05/Feb/10 15:54,23/Mar/10 02:59,14/Mar/19 02:29,10/Feb/10 17:58,2.2.7,,,,,,,,,,,,,,2.2.7,,,,Tooling,,,,,,0,,,,The CXF Maven codgen plug-in does not honor JAX-WS customization files when an abstract WSDL is used.  Specifically the <enableWrapperStyle>false</enableWrapperStyle> customization.,,,,,,,,,,,,,,,,,05/Feb/10 15:54;davaleri;cxf-codegen-example.zip;https://issues.apache.org/jira/secure/attachment/12434972/cxf-codegen-example.zip,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,114058,,,Fri Feb 05 15:54:44 UTC 2010,,,,,,0|i0a5y7:,57237,,,,,,,,05/Feb/10 15:54;davaleri;Attached sample Maven project demonstrating the issue.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cannot load WSDL from HTTPS URL if HTTPConduit configuration has AutoRedirect set to true,CXF-2660,12455448,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,davaleri,davaleri,05/Feb/10 15:22,23/Mar/10 02:59,14/Mar/19 02:29,10/Feb/10 19:20,2.3,,,,,,,,,,,,,,2.2.7,,,,Transports,,,,,,0,,,,"When loading a WSDL over HTTPS, if the HTTPConduit configuration has AutoRedirect enabled, HTTPConduit#prepare sets cacheReq to true, but HTTPConduit$WrappedOutputStream#handleHeadersTrustCaching returns before setting cachedStream for GET requests so HTTPConduit$WrappedOutputStream#close throws an NPE as cachedStream is null and is not expected to be.",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,Moderate,,,,,,,,,,,114057,,,2010-02-05 15:22:07.0,,,,,,0|i0a5yf:,57238,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BindingType for SOAP 1.2 cannot be used for servlet transport,CXF-2658,12455441,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,rrodewald,rrodewald,05/Feb/10 14:46,23/Mar/10 02:59,14/Mar/19 02:29,16/Feb/10 18:31,2.2.6,,,,,,,,,,,,,,2.2.7,,,,Transports,,,,,,0,,,,"The use of the BindingType annotation leads to an error when using the CXFNonSpringServlet as servlet transport.

Here is the code:
\\
{code:title=TestServlet.java}
package test;

import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.xml.ws.Endpoint;

import org.apache.cxf.transport.servlet.CXFNonSpringServlet;

public class TestServlet extends CXFNonSpringServlet {

	@Override
	public void loadBus(ServletConfig servletConfig) throws ServletException {
		super.loadBus(servletConfig);
		
		Endpoint.publish(""/test"", new TestService());
	}
}
{code}

{code:title=TestService.java}
package test;

import javax.jws.WebService;
import javax.xml.ws.BindingType;
import javax.xml.ws.soap.SOAPBinding;

@BindingType(
		value=SOAPBinding.SOAP12HTTP_BINDING)
@WebService(
		name=""TestServiceType"",
		serviceName=""TestService"",
		portName=""TestPort"",
		targetNamespace=""http://www.invalid.com/schema"")
public class TestService {
}
{code}

And here is the error:
{noformat}
java.net.MalformedURLException: no protocol: /test
	at java.net.URL.<init>(URL.java:567)
	at java.net.URL.<init>(URL.java:464)
	at java.net.URL.<init>(URL.java:413)
	at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.<init>(JettyHTTPDestination.java:96)
	at org.apache.cxf.transport.http_jetty.JettyHTTPTransportFactory.createDestination(JettyHTTPTransportFactory.java:116)
	at org.apache.cxf.transport.http_jetty.JettyHTTPTransportFactory.getDestination(JettyHTTPTransportFactory.java:103)
	at org.apache.cxf.endpoint.ServerImpl.initDestination(ServerImpl.java:90)
	at org.apache.cxf.endpoint.ServerImpl.<init>(ServerImpl.java:69)
	at org.apache.cxf.frontend.ServerFactoryBean.create(ServerFactoryBean.java:106)
	at org.apache.cxf.jaxws.JaxWsServerFactoryBean.create(JaxWsServerFactoryBean.java:167)
	at org.apache.cxf.jaxws.EndpointImpl.getServer(EndpointImpl.java:346)
	at org.apache.cxf.jaxws.EndpointImpl.doPublish(EndpointImpl.java:259)
	at org.apache.cxf.jaxws.EndpointImpl.publish(EndpointImpl.java:209)
	at org.apache.cxf.jaxws.spi.ProviderImpl.createAndPublishEndpoint(ProviderImpl.java:84)
	at javax.xml.ws.Endpoint.publish(Endpoint.java:170)
	at test.TestServlet.loadBus(TestServlet.java:16)
	at org.apache.cxf.transport.servlet.AbstractCXFServlet.init(AbstractCXFServlet.java:78)
	at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1139)
	at org.apache.catalina.core.StandardWrapper.allocate(StandardWrapper.java:791)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:127)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:174)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:117)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:108)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:174)
	at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:874)
	at org.apache.coyote.http11.Http11BaseProtocol$Http11ConnectionHandler.processConnection(Http11BaseProtocol.java:665)
	at org.apache.tomcat.util.net.PoolTcpEndpoint.processSocket(PoolTcpEndpoint.java:528)
	at org.apache.tomcat.util.net.LeaderFollowerWorkerThread.runIt(LeaderFollowerWorkerThread.java:81)
	at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:689)
	at java.lang.Thread.run(Thread.java:619)
{noformat}","Tomcat 5.5.26, Java 1.6.0_18",,,,,,,,,,,,,,,,11/Feb/10 22:43;dkulp;test.tar.gz;https://issues.apache.org/jira/secure/attachment/12435622/test.tar.gz,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2010-02-11 22:43:37.131,,,no_permission,,Unknown,,,,,,,,,,,114055,,,Mon Feb 15 09:58:52 UTC 2010,,,,,,0|i0a5yn:,57239,,,,,,,,"11/Feb/10 22:43;dkulp;

I wasn't able to reproduce this at all.   I've attached a sample project that I used as a test.   A ""mvn jetty:run"" started up fine and the service was available as expected.

Is there anything different with my project than with yours?  Can you update my project to show the issue?","15/Feb/10 09:58;rrodewald;I tried your with your project and the error is the same. I get the mentioned exception while loading the servlet. The error disappears when I delete the @BindingType annotation of the service. Here are the ONLY libraries I use (appart from Java 1.6 system libs):
- XmlSchema-1.4.5.jar
- commons-logging-1.1.1.jar
- cxf-2.2.6.jar
- neethi-2.0.4.jar
- wsdl4j-1.6.2.jar

Why does CXF even try to do something with Jetty here?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WS-SP token protection security binding property not correctly applied to X509 token in outbound interceptors,CXF-2655,12455437,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,davaleri,davaleri,05/Feb/10 14:17,23/Mar/10 02:59,14/Mar/19 02:29,09/Mar/10 02:32,2.3,,,,,,,,,,,,,,2.2.7,,,,WS-* Components,,,,,,0,,,,"When a ProtectTokens assertion is used in an asymetric binding with X509 token, CXF does not sign the BST included in the message.  It is likely that CXF also does not sign the proper parts if an issuer serial or key identifier is used instead.

The direct reference case is triggered by an issue in AsymetricBindingHandler lines 386-392.  One cannot prepend the BST and then get its ID because WSS4J removes this info after the BST is prepended.

Changing the order of operations is one approach while working with the WSS4J signature builder's capabilities to sign the ""Token"" based on the mechanism by which the token is referenced may be a better approach.

Test case is pending.
",,,,,,,,,,,,,,,,,08/Feb/10 19:03;davaleri;cxf-2655-test.patch;https://issues.apache.org/jira/secure/attachment/12435194/cxf-2655-test.patch,09/Mar/10 01:41;davaleri;cxf-2655.patch;https://issues.apache.org/jira/secure/attachment/12438245/cxf-2655.patch,,,,,2.0,,,,,,,,,,,,,,,,,,,,2010-03-09 02:32:42.728,,,no_permission,,Moderate,,,,,,,,,,,114052,,,Tue Mar 09 02:32:42 UTC 2010,,,,,,0|i0a5yv:,57240,,,,,,,,"08/Feb/10 19:03;davaleri;Attaching test case.  As this test case update depends on changes to the test case that were also made to support CXF-2654, only tests in ""testProtectTokenAssertion"" should be considered relevant for this issue.",09/Mar/10 01:41;davaleri;Attaching patch.,"09/Mar/10 02:32;dkulp;
Patch applied.  Thanks!
",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Outbound handling of WS-SP Signed/Encrypted/ContentEncrypted Parts and Elements policies incorrect,CXF-2654,12455434,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,davaleri,davaleri,05/Feb/10 13:49,23/Mar/10 02:59,14/Mar/19 02:29,15/Mar/10 11:58,2.3,,,,,,,,,,,,,,2.2.7,,,,WS-* Components,,,,,,0,,,,"If using policy assertions dictating signed/enc parts, and you specify a namespace and name attribute, only the first instance of that part is signed.

If using policy assertions dictating signed elements, only the first instance of a matching element is signed.

If using policy assertions dictating signed/enc parts with only a namespace and no name attribute, AbstractBindingBuilder causes an infinite loop.",,,,,,,,,,,,,,,,,05/Feb/10 14:04;davaleri;CXF-2654-test.patch;https://issues.apache.org/jira/secure/attachment/12434960/CXF-2654-test.patch,12/Feb/10 01:01;davaleri;cxf-2654.patch;https://issues.apache.org/jira/secure/attachment/12435642/cxf-2654.patch,23/Feb/10 14:59;davaleri;signed_x509_issuer_serial_missing_signed_body.xml;https://issues.apache.org/jira/secure/attachment/12436717/signed_x509_issuer_serial_missing_signed_body.xml,23/Feb/10 14:59;davaleri;signed_x509_issuer_serial_missing_signed_header.xml;https://issues.apache.org/jira/secure/attachment/12436718/signed_x509_issuer_serial_missing_signed_header.xml,,,4.0,,,,,,,,,,,,,,,,,,,,2010-02-12 16:20:11.26,,,no_permission,,Moderate,,,,,,,,,,,114051,,,Tue Feb 23 14:59:38 UTC 2010,,,,,,0|i0a5z3:,57241,,,,,,,,05/Feb/10 14:04;davaleri;Attaching test case.  Note that some of the tests will trigger the infinite loop behavior and never complete.,"12/Feb/10 01:01;davaleri;Attaching patch along with updated test case.

After digging through the code a bit more, it would seem that the running list of found elements for encryption/signature should likely be inspected at any time that additional elements are added to the list to be signed or encrypted.  There are a number of scenarios such as those involving supporting tokens or token protection where the CXF code adds additional elements to these lists but the signed/enc parts logic does not provide a means to check if the element was already added and vice versa.  While not an immediate issue, issues such as CXF-2656 have the potential of moving the order in which the signed/enc parts assertions are applied and subsequently introducing a need to perform this comprehensive checking.  For this reason, the patch incorporates new methods that are amenable to the introduction of such checking.","12/Feb/10 16:20;dkulp;

I'm going to apply this patch, but I had to @Ignore 2 tests:

testSignedPartsPolicyWithIncompleteCoverage
testSignedElementsPolicyWithIncompleteCoverage

as the test XML files are not included in the patch.  If you could attach just those missing files, that would be great!","23/Feb/10 14:59;davaleri;Attaching missing files.  Tortoise indicates that they were added, but they don't make it into the patch.  In the future, I'll test my patches against a clean checkout before submitting.  Sorry for the delay.",,,,,,,,,,,,,,,,,,,,,,,,,,,
"UriInfo.getAbsolutePath throws ""java.net.URISyntaxException: Illegal character in path"" when there is an encoded space in the request URI",CXF-2652,12455314,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,sergey_beryozkin,flashfr,flashfr,04/Feb/10 14:32,23/Mar/10 02:59,14/Mar/19 02:29,05/Feb/10 12:04,2.2.6,,,,,,,,,,,,,,2.2.7,2.3,,,JAX-RS,,,,,,0,,,,"I tried this simple code :

{code}
package mypackage;

import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.UriInfo;

@Path(""uri"")
public class UriService {
    @GET
    @Path(""something/{id}"")
    public void addSomething(String string, @Context UriInfo uriInfo, @PathParam(""id"") String id) {
    	System.out.println(""getPath -> "" + uriInfo.getPath());
    	System.out.println(""getBasePath -> "" + uriInfo.getBaseUri());
    	System.out.println(""getAbsolutePath -> "" + uriInfo.getBaseUri().resolve(uriInfo.getPath(false)));
    	System.out.println(""getAbsolutePath -> "" + uriInfo.getAbsolutePath());
    }
}
{code}

With a Spring-based setup and default beans.xml taken from the user guide.

Then we can use a normal browser .

With ""http://localhost:9080/Uritest/rest/uri/something/3"", we get in stdout :
{panel}
getPath -> /uri/something/3
getBasePath -> http://localhost:9080/Uritest/rest
getAbsolutePath -> http://localhost:9080/uri/something/3
getAbsolutePath -> http://localhost:9080/Uritest/rest/uri/something/3
{panel}

But with ""http://localhost:9080/Uritest/rest/uri/something/3 4"", we get an exception :
{noformat}
java.net.URISyntaxException: Illegal character in path at index 50: http://localhost:9080/Uritest/rest/uri/something/3 4
{noformat}

And in stdout :

{panel}
getPath -> /uri/something/3 4
getBasePath -> http://localhost:9080/Uritest/rest
getAbsolutePath -> http://localhost:9080/uri/something/3%204
{panel}

NB : in JAX-RS javadoc, it's said that ""getAbsolutePath()"" is a shortcut to uriInfo.getBase().resolve(uriInfo.getPath())"", which is plain wrong, because :
# getBase doesn't exist, that's getBaseUri
# getPath as returned by CXF begins with a slash (""/"") so ""resolve"" doesn't do what we want here. (maybe another bug ? tell me and I'll create another issue)
",Used with Spring,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2010-02-04 15:17:55.88,,,no_permission,,,,,,,,,,,,,114049,,,Fri Feb 05 12:04:44 UTC 2010,,,,,,0|i0a5zb:,57242,,,,,,,,"04/Feb/10 14:47;flashfr;(sorry for spamming)

A code which gives the correct value is :
{code}
private URI getAbsolutePathUri(UriInfo uriInfo) {
	String path = uriInfo.getPath(false);
	if (path.startsWith(""/"")) {
		path = path.replaceFirst(""\\/+"", """");
	}
	URI baseUri = uriInfo.getBaseUri();
	String base = baseUri.toString();
	if (! base.endsWith(""/"")) {
		base += ""/"";
		baseUri = URI.create(base);
	}
	URI location = baseUri.resolve(path);
	return location;
}
{code}","04/Feb/10 15:17;sergey_beryozkin;thanks, after looking at the code I can see UriInfo.getRequestURI will fail too if encoded chars are included....Will fix it shortly.

","04/Feb/10 17:10;flashfr;Plese note that if getPath doesn't start with ""/"" and if getBaseUri ends with ""/"", we just need to do a ""resolve"". I'm not sure of what the spec says.

Though the easiest way could be to just use good old string concatenation ?","05/Feb/10 12:04;sergey_beryozkin;It has been fixed. There's a couple of things to note :

- UriInfo.getPath() will return ""/"" only if the actual path value (the one to be returned from getPath()) is empty, no leading slash will be there otherwise. This is consistent with what is returned for the list of PathSegments. I remember asking a question on the jaxrs list  about the value of PathSegment.getPath() for a value '/' and the answer was '/'.

- UriInfo has getBaseUriBuilder() - please use this builder one instead of Uri.resolve(). The reason UriBuilder was introduced was to let users not to worry about ensuring the concatenation works well and to hide some of limitations of URI. There's really nothing we can do if baseUri ends with '/' for URI.resolve to work... So you can do 

URI uri = uriInfo.getBaseUriBuilder().path(uriInfo.getPath()).build()

and this will work irrespectively of various variations with leading/trailing slashes

thanks, Sergey",,,,,,,,,,,,,,,,,,,,,,,,,,,
LogUtils does not recognize SLF4J due to invallid Class.forName()  ,CXF-2651,12455295,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,dkulp,bpasson,bpasson,04/Feb/10 10:41,23/Mar/10 02:59,14/Mar/19 02:29,04/Feb/10 16:20,2.2.6,,,,,,,,,,,,,,2.2.7,,,,Core,,,,,,0,logging,slf4j,,"LogUtils uses Class.forName(""org/slf4j/impl/StaticLoggerBinder"") to determine if SLF4J is present. This will always throw a ClassNotFound exception which is ignored in the catch and JUL gets used. The correct statement should be Class.forName(""org.slf4j.impl.StaticLoggerBinder""); Which then will initialize logging correctly.
",Any environement.,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,Novice,,,,,,,,,,,114048,,,2010-02-04 10:41:51.0,,,,,,0|i0a5zj:,57243,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Long schema truncated prior to validation,CXF-2650,12455291,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,eglynn,eglynn,eglynn,04/Feb/10 09:43,23/Mar/10 02:59,14/Mar/19 02:29,04/Feb/10 10:03,2.2.6,,,,,,,,,,,,,,2.2.7,2.3,,,Core,,,,,,0,,,,"
Long schema truncated prior to validation due to failure to flush XMLStreamWriter, causing:

{code}
SAXException for newSchema() on 
org.xml.sax.SAXParseException: XML document structures must start and end within the same entity.
	at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.createSAXParseException(ErrorHandlerWrapper.java:195)
	at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.fatalError(ErrorHandlerWrapper.java:174)
	at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:388)
	at com.sun.org.apache.xerces.internal.impl.XMLScanner.reportFatalError(XMLScanner.java:1414)
	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.endEntity(XMLDocumentFragmentScannerImpl.java:902)
	at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.endEntity(XMLDocumentScannerImpl.java:605)
	at com.sun.org.apache.xerces.internal.impl.XMLEntityManager.endEntity(XMLEntityManager.java:1393)
	at com.sun.org.apache.xerces.internal.impl.XMLEntityScanner.load(XMLEntityScanner.java:1763)
	at com.sun.org.apache.xerces.internal.impl.XMLEntityScanner.scanLiteral(XMLEntityScanner.java:1064)
	at com.sun.org.apache.xerces.internal.impl.XMLScanner.scanAttributeValue(XMLScanner.java:974)
	at com.sun.org.apache.xerces.internal.impl.XMLNSDocumentScannerImpl.scanAttribute(XMLNSDocumentScannerImpl.java:460)
	at com.sun.org.apache.xerces.internal.impl.XMLNSDocumentScannerImpl.scanStartElement(XMLNSDocumentScannerImpl.java:277)
	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl$FragmentContentDriver.next(XMLDocumentFragmentScannerImpl.java:2747)
	at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(XMLDocumentScannerImpl.java:648)
	at com.sun.org.apache.xerces.internal.impl.XMLNSDocumentScannerImpl.next(XMLNSDocumentScannerImpl.java:140)
	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:510)
	at com.sun.org.apache.xerces.internal.impl.xs.opti.SchemaParsingConfig.parse(SchemaParsingConfig.java:435)
	at com.sun.org.apache.xerces.internal.impl.xs.opti.SchemaParsingConfig.parse(SchemaParsingConfig.java:491)
	at com.sun.org.apache.xerces.internal.impl.xs.opti.SchemaDOMParser.parse(SchemaDOMParser.java:510)
	at com.sun.org.apache.xerces.internal.impl.xs.traversers.XSDHandler.getSchemaDocument(XSDHandler.java:1802)
	at com.sun.org.apache.xerces.internal.impl.xs.traversers.XSDHandler.resolveSchema(XSDHandler.java:1757)
	at com.sun.org.apache.xerces.internal.impl.xs.traversers.XSDHandler.constructTrees(XSDHandler.java:909)
	at com.sun.org.apache.xerces.internal.impl.xs.traversers.XSDHandler.parseSchema(XSDHandler.java:569)
	at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaLoader.loadSchema(XMLSchemaLoader.java:552)
	at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaLoader.loadGrammar(XMLSchemaLoader.java:519)
	at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaLoader.loadGrammar(XMLSchemaLoader.java:485)
	at com.sun.org.apache.xerces.internal.jaxp.validation.XMLSchemaFactory.newSchema(XMLSchemaFactory.java:210)
	at org.apache.cxf.wsdl.EndpointReferenceUtils.createSchema(EndpointReferenceUtils.java:667)
	at org.apache.cxf.wsdl.EndpointReferenceUtils.getSchema(EndpointReferenceUtils.java:691)
	at org.apache.cxf.interceptor.AbstractInDatabindingInterceptor.setSchemaInMessage(AbstractInDatabindingInterceptor.java:109)
	at org.apache.cxf.interceptor.AbstractInDatabindingInterceptor.getDataReader(AbstractInDatabindingInterceptor.java:94)
	at org.apache.cxf.interceptor.AbstractInDatabindingInterceptor.getDataReader(AbstractInDatabindingInterceptor.java:99)
	at org.apache.cxf.interceptor.DocLiteralInInterceptor.handleMessage(DocLiteralInInterceptor.java:66)
{code}
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,114047,,,Thu Feb 04 10:03:16 UTC 2010,,,,,,0|i0a5zr:,57244,,,,,,,,04/Feb/10 10:03;eglynn;Fix commited [to trunk|http://svn.apache.org/viewvc?rev=906420&view=rev] and [to 2.2.x-fixes branch|http://svn.apache.org/viewvc?rev=906430&view=rev].,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JaxWSClient Fail on legal interface - XmlSchemaException: Schema for namespace 'nn' already contains type 'tt',CXF-2648,12455182,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,,cesnek,cesnek,03/Feb/10 16:17,08/Feb/10 18:15,14/Mar/19 02:29,04/Feb/10 12:19,2.1.9,,,,,,,,,,,,,,2.2.6,,,,Aegis Databinding,,,,,,0,,,,"Have interface with two methods. Each has parameter with *same name but other type!*


{code}
@WebService(name=""documents"", targetNamespace=""http://v1_0_0.ws.doc.daisy.marbes.cz"")
public interface Documents {

   void getDocumentByFilter( @WebParam(name=""filter"") VOFilter);

   void getDocumentByExtendedFilter( @WebParam(name=""filter"") VOExtendedFilter);

}
{code}

{code}
@XmlType(name = ""SimpleFilter"", namespace = NamespaceInfo.NAMESPACE_V1)
public class VOFilter {
...
}

@XmlType(name = ""ExtendedFilter"", namespace = NamespaceInfo.NAMESPACE_V1)
public class VOExtendedFilter {
...
}

{code}

On the server side all working. WSDL seems OK and method call by SOAPUI working too.

But on the client side (when try to call by CXF client) exception is thrown :

{code}
org.apache.ws.commons.schema.XmlSchemaException:  Schema for namespace 'http://wo.v1.ws.doc.modules.daisy.marbes.cz' already contains type 'filter'
	at org.apache.ws.commons.schema.XmlSchema.addType(XmlSchema.java:558)
	at org.apache.ws.commons.schema.SchemaBuilder.handleXmlSchemaElement(SchemaBuilder.java:206)
	at org.apache.ws.commons.schema.SchemaBuilder.build(SchemaBuilder.java:121)
	at org.apache.ws.commons.schema.XmlSchemaCollection.read(XmlSchemaCollection.java:509)
	at org.apache.ws.commons.schema.XmlSchemaCollection.read(XmlSchemaCollection.java:493)
	at org.apache.cxf.common.xmlschema.SchemaCollection.read(SchemaCollection.java:158)
	at org.apache.cxf.databinding.AbstractDataBinding.addSchemaDocument(AbstractDataBinding.java:136)
	at org.apache.cxf.aegis.databinding.AegisDatabinding.createSchemas(AegisDatabinding.java:532)
	at org.apache.cxf.aegis.databinding.AegisDatabinding.initialize(AegisDatabinding.java:323)
	at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.buildServiceFromClass(ReflectionServiceFactoryBean.java:378)
	at org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean.buildServiceFromClass(JaxWsServiceFactoryBean.java:530)
	at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.initializeServiceModel(ReflectionServiceFactoryBean.java:437)
	at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.create(ReflectionServiceFactoryBean.java:192)
	at org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean.create(JaxWsServiceFactoryBean.java:165)
	at org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory.createEndpoint(AbstractWSDLBasedEndpointFactory.java:100)
	at org.apache.cxf.frontend.ClientFactoryBean.create(ClientFactoryBean.java:52)
	at org.apache.cxf.frontend.ClientProxyFactoryBean.create(ClientProxyFactoryBean.java:102)
	at org.apache.cxf.jaxws.JaxWsProxyFactoryBean.create(JaxWsProxyFactoryBean.java:115)
{code}


Client code:
{code}
            JaxWsProxyFactoryBean factory = new JaxWsProxyFactoryBean();
            factory.setServiceClass( Documents.class );
            factory.setAddress(publishURL);
            factory.setDataBinding(new AegisDatabinding());

            Object remoteInterfaceImpl = factory.create();
{code}

Server code:
{code}
        JaxWsServerFactoryBean serverFactoryBean = new JaxWsServerFactoryBean();
        serverFactoryBean.setServiceClass(AopUtils.getTargetClass(implementor)); // Documents.class
        serverFactoryBean.setServiceBean(implementor);                          //DocumentsImpl
        serverFactoryBean.setDataBinding(new AegisDatabinding());
        serverFactoryBean.setAddress(url);

       serverFactoryBean.create();
{code}
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,114045,,,Thu Feb 04 09:08:04 UTC 2010,,,,,,0|i0v107:,179136,,,,,,,,"04/Feb/10 09:08;cesnek;Fixed in cxf-2.2.6.jar.

You can close this issue.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Fail to Create Top Down  Web Service from WSDL, if WSDL path has spaces in between",CXF-2647,12455161,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,achandna,achandna,03/Feb/10 11:15,23/Mar/10 02:59,14/Mar/19 02:29,04/Feb/10 16:20,2.2.6,,,,,,,,,,,,,,2.2.7,,,,,,,,,,0,,,," Dynamic Web Project is created with following inputs (Make sure that the workspace where project is created has spaces in between),
for me project location is :C:/Documents and Settings/achandna/Desktop/Extra-Jars/TestNewCXF

Target runtime :Apache Tomcat v6.0
Dynamic web module version:2.5
Configuration :CXF Web Services Project  v2.5 
CXF Home is set to Apache CXF  v2.2.6 

I copied a wsdl into the project and tried to create a Bottom Up web Service by navigating through the wizard, but I am getting the following Exception

////////////////////////Exception Trace///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
WSDLToJava Error: org.apache.cxf.tools.common.ToolException: java.net.URISyntaxException: Illegal character in path at index 18: file:/C:/Documents and Settings/achandna/Desktop/Extra-Jars/TestNewCXF/WebContent/wsdl/addimpl.wsdl

org.apache.cxf.tools.common.ToolException: org.apache.cxf.tools.common.ToolException: java.net.URISyntaxException: Illegal character in path at index 18: file:/C:/Documents and Settings/achandna/Desktop/Extra-Jars/TestNewCXF/WebContent/wsdl/addimpl.wsdl
	at org.apache.cxf.tools.validator.internal.WSDL11Validator.getWSDLDoc(WSDL11Validator.java:96)
	at org.apache.cxf.tools.validator.internal.WSDL11Validator.isValid(WSDL11Validator.java:111)
	at org.apache.cxf.tools.wsdlto.frontend.jaxws.wsdl11.JAXWSDefinitionBuilder.validate(JAXWSDefinitionBuilder.java:201)
	at org.apache.cxf.tools.wsdlto.frontend.jaxws.wsdl11.JAXWSDefinitionBuilder.validate(JAXWSDefinitionBuilder.java:61)
	at org.apache.cxf.tools.wsdlto.WSDLToJavaContainer.processWsdl(WSDLToJavaContainer.java:167)
	at org.apache.cxf.tools.wsdlto.WSDLToJavaContainer.execute(WSDLToJavaContainer.java:128)
	at org.apache.cxf.tools.wsdlto.WSDLToJavaContainer.execute(WSDLToJavaContainer.java:271)
	at org.apache.cxf.tools.common.toolspec.ToolRunner.runTool(ToolRunner.java:103)
	at org.apache.cxf.tools.wsdlto.WSDLToJava.run(WSDLToJava.java:113)
	at org.apache.cxf.tools.wsdlto.WSDLToJava.run(WSDLToJava.java:86)
	at org.apache.cxf.tools.wsdlto.WSDLToJava.main(WSDLToJava.java:184)
Caused by: org.apache.cxf.tools.common.ToolException: java.net.URISyntaxException: Illegal character in path at index 18: file:/C:/Documents and Settings/achandna/Desktop/Extra-Jars/TestNewCXF/WebContent/wsdl/addimpl.wsdl
	at org.apache.cxf.tools.validator.internal.Stax2DOM.getDocument(Stax2DOM.java:51)
	at org.apache.cxf.tools.validator.internal.WSDL11Validator.getWSDLDoc(WSDL11Validator.java:91)
	... 10 more
Caused by: java.net.URISyntaxException: Illegal character in path at index 18: file:/C:/Documents and Settings/achandna/Desktop/Extra-Jars/TestNewCXF/WebContent/wsdl/addimpl.wsdl
	at java.net.URI$Parser.fail(URI.java:2816)
	at java.net.URI$Parser.checkChars(URI.java:2989)
	at java.net.URI$Parser.parseHierarchical(URI.java:3073)
	at java.net.URI$Parser.parse(URI.java:3021)
	at java.net.URI.<init>(URI.java:578)
	at org.apache.cxf.tools.validator.internal.Stax2DOM.getDocument(Stax2DOM.java:43)
	... 11 more
////////////////////////Exception Trace///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
","Windows XP, Eclipse Platform Version: 3.5.0,Apache CXF  v2.2.6 ",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,114044,,,2010-02-03 11:15:12.0,,,,,,0|i0a5zz:,57245,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"CXF codegen plugin does not properly expose ""disableDependencyScan"" config parameter",CXF-2645,12455061,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,joeluo,joeluo,02/Feb/10 14:36,23/Mar/10 02:59,14/Mar/19 02:29,02/Feb/10 14:56,2.2.6,,,,,,,,,,,,,,2.2.7,,,,,,,,,,0,,,,"CXF-2275 introduced a new feature to allow reading WSDLs from maven repository by cxf-codegen-plugin. By default all dependencies with type ""wsdl"" will be processed. And this behaviour can be switched off by setting ""disableDependencyScan"" config parameter to ""true"".

However, it does not expose this config parameter properly. 

Here is source code snippet from 
http://svn.apache.org/repos/asf/cxf/trunk/maven-plugins/codegen-plugin/src/main/java/org/apache/cxf/maven_plugin/WSDL2JavaMojo.java
{code}
/**
     * By default all maven dependencies of type ""wsdl"" are added to the effective wsdlOptions. Setting this
     * parameter to true disables this functionality
     * 
     */
    boolean disableDependencyScan;
{code}

It should use @parameter annotation to define it as a mojo parameter like:
{code}
/**
     * By default all maven dependencies of type ""wsdl"" are added to the effective wsdlOptions. Setting this
     * parameter to true disables this functionality
     * 
     * @parameter expression=""${cxf.disableDependencyScan}"" default-value=""false""
     */
    boolean disableDependencyScan;
{code} 
in order to expose it as a config variable.",,,,,,,,,,,,,,,,,02/Feb/10 14:37;joeluo;disableDependencyScan.patch;https://issues.apache.org/jira/secure/attachment/12434526/disableDependencyScan.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,114042,,,2010-02-02 14:36:36.0,,,,,,0|i0a607:,57246,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BUG: unale to create jaxws:client with new 2.2.6,CXF-2642,12454944,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,,keo,keo,01/Feb/10 16:36,01/Feb/10 17:38,14/Mar/19 02:29,01/Feb/10 17:38,2.2.6,,,,,,,,,,,,,,2.2.6,,,,JAX-WS Runtime,,,,,,0,,,,"with the last release of cxf 2.2.4, 
jax-ws client creation works fine, 

when i upgrade cxf version to 2.2.6, I find this bug.

*****************************
FactoryBean threw exception on object creation; nested exception is java.lang.NoSuchMethodError: org.apache.cxf.service.factory.ReflectionServiceFactoryBean.setServiceType(Ljava/lang/reflect/ParameterizedType;)V
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:275)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:104)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1245)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1010)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:472)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:409)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:380)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:264)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:261)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:429)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:728)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:380)
	at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:255)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:199)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:45)
	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:3910)
	at org.apache.catalina.core.StandardContext.start(StandardContext.java:4393)
	at org.jboss.web.tomcat.service.deployers.TomcatDeployment.performDeployInternal(TomcatDeployment.java:310)
	at org.jboss.web.tomcat.service.deployers.TomcatDeployment.performDeploy(TomcatDeployment.java:142)
	at org.jboss.web.deployers.AbstractWarDeployment.start(AbstractWarDeployment.java:461)
	at org.jboss.web.deployers.WebModule.startModule(WebModule.java:118)
	at org.jboss.web.deployers.WebModule.start(WebModule.java:97)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.jboss.mx.interceptor.ReflectedDispatcher.invoke(ReflectedDispatcher.java:157)
	at org.jboss.mx.server.Invocation.dispatch(Invocation.java:96)
	at org.jboss.mx.server.Invocation.invoke(Invocation.java:88)
	at org.jboss.mx.server.AbstractMBeanInvoker.invoke(AbstractMBeanInvoker.java:264)
	at org.jboss.mx.server.MBeanServerImpl.invoke(MBeanServerImpl.java:668)
	at org.jboss.system.microcontainer.ServiceProxy.invoke(ServiceProxy.java:206)
	at $Proxy38.start(Unknown Source)
	at org.jboss.system.microcontainer.StartStopLifecycleAction.installAction(StartStopLifecycleAction.java:42)
	at org.jboss.system.microcontainer.StartStopLifecycleAction.installAction(StartStopLifecycleAction.java:37)
	at org.jboss.dependency.plugins.action.SimpleControllerContextAction.simpleInstallAction(SimpleControllerContextAction.java:62)
	at org.jboss.dependency.plugins.action.AccessControllerContextAction.install(AccessControllerContextAction.java:71)
	at org.jboss.dependency.plugins.AbstractControllerContextActions.install(AbstractControllerContextActions.java:51)
	at org.jboss.dependency.plugins.AbstractControllerContext.install(AbstractControllerContext.java:348)
	at org.jboss.system.microcontainer.ServiceControllerContext.install(ServiceControllerContext.java:286)
	at org.jboss.dependency.plugins.AbstractController.install(AbstractController.java:1631)
	at org.jboss.dependency.plugins.AbstractController.incrementState(AbstractController.java:934)
	at org.jboss.dependency.plugins.AbstractController.resolveContexts(AbstractController.java:1082)
	at org.jboss.dependency.plugins.AbstractController.resolveContexts(AbstractController.java:984)
	at org.jboss.dependency.plugins.AbstractController.change(AbstractController.java:822)
	at org.jboss.dependency.plugins.AbstractController.change(AbstractController.java:553)
	at org.jboss.system.ServiceController.doChange(ServiceController.java:688)
	at org.jboss.system.ServiceController.start(ServiceController.java:460)
	at org.jboss.system.deployers.ServiceDeployer.start(ServiceDeployer.java:163)
	at org.jboss.system.deployers.ServiceDeployer.deploy(ServiceDeployer.java:99)
	at org.jboss.system.deployers.ServiceDeployer.deploy(ServiceDeployer.java:46)
	at org.jboss.deployers.spi.deployer.helpers.AbstractSimpleRealDeployer.internalDeploy(AbstractSimpleRealDeployer.java:62)
	at org.jboss.deployers.spi.deployer.helpers.AbstractRealDeployer.deploy(AbstractRealDeployer.java:50)
	at org.jboss.deployers.plugins.deployers.DeployerWrapper.deploy(DeployerWrapper.java:171)
	at org.jboss.deployers.plugins.deployers.DeployersImpl.doDeploy(DeployersImpl.java:1439)
	at org.jboss.deployers.plugins.deployers.DeployersImpl.doInstallParentFirst(DeployersImpl.java:1157)
	at org.jboss.deployers.plugins.deployers.DeployersImpl.doInstallParentFirst(DeployersImpl.java:1178)
	at org.jboss.deployers.plugins.deployers.DeployersImpl.install(DeployersImpl.java:1098)
	at org.jboss.dependency.plugins.AbstractControllerContext.install(AbstractControllerContext.java:348)
	at org.jboss.dependency.plugins.AbstractController.install(AbstractController.java:1631)
	at org.jboss.dependency.plugins.AbstractController.incrementState(AbstractController.java:934)
	at org.jboss.dependency.plugins.AbstractController.resolveContexts(AbstractController.java:1082)
	at org.jboss.dependency.plugins.AbstractController.resolveContexts(AbstractController.java:984)
	at org.jboss.dependency.plugins.AbstractController.change(AbstractController.java:822)
	at org.jboss.dependency.plugins.AbstractController.change(AbstractController.java:553)
	at org.jboss.deployers.plugins.deployers.DeployersImpl.process(DeployersImpl.java:781)
	at org.jboss.deployers.plugins.main.MainDeployerImpl.process(MainDeployerImpl.java:702)
	at org.jboss.system.server.profileservice.repository.MainDeployerAdapter.process(MainDeployerAdapter.java:117)
	at org.jboss.system.server.profileservice.hotdeploy.HDScanner.scan(HDScanner.java:362)
	at org.jboss.system.server.profileservice.hotdeploy.HDScanner.run(HDScanner.java:255)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:181)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:205)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:637)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'clientDUA': FactoryBean threw exception on object creation; nested exception is java.lang.NoSuchMethodError: org.apache.cxf.service.factory.ReflectionServiceFactoryBean.setServiceType(Ljava/lang/reflect/ParameterizedType;)V
	at org.springframework.beans.factory.support.FactoryBeanRegistrySupport$1.run(FactoryBeanRegistrySupport.java:127)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.doGetObjectFromFactoryBean(FactoryBeanRegistrySupport.java:116)
	at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.getObjectFromFactoryBean(FactoryBeanRegistrySupport.java:91)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getObjectForBeanInstance(AbstractBeanFactory.java:1288)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:275)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:269)
	... 82 more
Caused by: java.lang.NoSuchMethodError: org.apache.cxf.service.factory.ReflectionServiceFactoryBean.setServiceType(Ljava/lang/reflect/ParameterizedType;)V
	at org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean.setServiceClass(JaxWsServiceFactoryBean.java:194)
	at org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory.initializeServiceFactory(AbstractWSDLBasedEndpointFactory.java:227)
	at org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory.createEndpoint(AbstractWSDLBasedEndpointFactory.java:99)
	at org.apache.cxf.frontend.ClientFactoryBean.create(ClientFactoryBean.java:52)
	at org.apache.cxf.frontend.ClientProxyFactoryBean.create(ClientProxyFactoryBean.java:102)
	at org.apache.cxf.jaxws.JaxWsProxyFactoryBean.create(JaxWsProxyFactoryBean.java:115)
	at org.apache.cxf.jaxws.spring.JaxWsProxyFactoryBeanDefinitionParser$JAXWSSpringClientProxyFactoryBean.getObject(JaxWsProxyFactoryBeanDefinitionParser.java:77)
	at org.springframework.beans.factory.support.FactoryBeanRegistrySupport$1.run(FactoryBeanRegistrySupport.java:121)
	... 90 more

*****************************
 ","jboss 5.1.0 GA
spring 2.5.6 SE01
cxf 2.2.6
java 6",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2010-02-01 17:14:17.015,,,no_permission,,Moderate,,,,,,,,,,,114040,,,Mon Feb 01 17:38:44 UTC 2010,,,,,,0|i0v1yn:,179291,,,,,,,,"01/Feb/10 17:14;dkulp;

This sounds like you have a mix of jars someplace, likely some mix of 2.2.6 and 2.2.4 jars or similar.   Possibly picking up 2.2.4 jars from jboss itself?   Not really sure.   That method (setServiceType(Ljava/lang/reflect/ParameterizedType;)V) definitely exists in 2.2.6.

","01/Feb/10 17:38;keo;OK, i just try it with a big clean of my maven build, 
it sounds solved ;-)
i agree with you Daniel

sorry for this fake issue",01/Feb/10 17:38;keo;cf. previous comment,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WSDLToJavaContainer ignores CFG_SUPPRESS_GEN for outputdir creation,CXF-2640,12447093,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Trivial,Fixed,dkulp,cdolan,cdolan,30/Jan/10 22:02,23/Mar/10 02:59,14/Mar/19 02:29,02/Feb/10 17:33,2.2.6,,,,,,,,,,,,,,2.2.7,,,,Tooling,,,,,,0,,,,"First, let me say that I realize that WSDLToJava doesn't support ""-suppress"" as a command-line option.  So this defect is quite obscure.

Consider this code:

		WSDLToJava w2j = new WSDLToJava(new String[] {
				""-d"", ""generatedcode"", ""http://localhost:9090/CustomerServicePort?wsdl"",
		});
		ToolContext context = new ToolContext();
		context.put(ToolConstants.CFG_SUPPRESS_GEN, true);
		w2j.run(context);

This code works in the sense that it does not build any .java files, however it still creates the ""generatedcode"" directory.  An easy and low-risk fix would be to change WSDLToJavaContainer.validate() to wrap an ""if (isSuppressCodeGen()) {...}"" around the ""if(!dir.exists()) {dir.mkdirs()}"" block.",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,Novice,,,,,,,,,,,114038,,,2010-01-30 22:02:25.0,,,,,,0|i0a60f:,57247,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"WS-SecurityPolicy SignedElements, SignedParts, EncryptedParts, EncryptedElements, and ContentEncryptedElements assertions incorrectly verified",CXF-2638,12447018,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,davaleri,davaleri,29/Jan/10 16:00,23/Mar/10 02:59,14/Mar/19 02:29,02/Feb/10 17:50,2.3,,,,,,,,,,,,,,2.2.7,,,,WS-* Components,,,,,,0,,,,"When security configuration is provided via WS-SecurityPolicy, the PolicyBasedWSS4JInInterceptor enforces the SignedElements assertion incorrectly. If there is more than one match to the assertion XPath, the validation code does not correctly detect the unsigned matches so long as any one of the matches is signed. This logic does not accurately reflect the case in which multiple matches for the signature coverage XPath exist in the message and may provide a false sense of integrity in the message.

Per section 1.2 of the WS-Security spec:
The XPath expression ""identifies the nodes to be integrity protected.""

Based on this language, it seems as if all nodes matching the XPath expression must be integrity constrained.

Similar issues exist with the SignedParts, EncryptedParts, EncryptedElements, and ContentEncryptedElements assertions as well.",,,,,,,,,,CXF-2639,,,,,,,02/Feb/10 16:50;davaleri;cxf-2638-fixed.patch;https://issues.apache.org/jira/secure/attachment/12434540/cxf-2638-fixed.patch,29/Jan/10 16:02;davaleri;cxf-2638.patch;https://issues.apache.org/jira/secure/attachment/12431781/cxf-2638.patch,,,,,2.0,,,,,,,,,,,,,,,,,,,,2010-02-02 16:42:02.623,,,no_permission,,Unknown,,,,,,,,,,,114036,,,Tue Feb 02 17:50:02 UTC 2010,,,,,,0|i0a60n:,57248,,,,,,,,29/Jan/10 16:02;davaleri;Attaching patch and test case.  The coverage checking code is split into a utility class for use by an enhancement request I intend to submit in the near future.,"02/Feb/10 16:42;dkulp;
There are a bunch of missing files in this patch which is causing the new tests to fail. 

org/apache/cxf/ws/security/wss4j/PolicyBasedWss4JInOutTest_bus_context.xml
signed_missing_signed_body.xml
encrypted_missing_enc_header.xml
encrypted_body_element.xml
encrypted_missing_enc_body.xml
encrypted_body_content.xml
et.c.....

Can you recreate the patch making sure all the files are ""added"" first?

Thanks!",02/Feb/10 16:50;davaleri;Attached patch with missing test files.,"02/Feb/10 17:50;dkulp;
Patch applied.   Major thanks.   This adds some much needed unit testing into the ws/security module.

",,,,,,,,,,,,,,,,,,,,,,,,,,,
JAXBUtils#getValidClass ignores classes with private default constructors,CXF-2635,12446729,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,valdis.rigdon,valdis.rigdon,26/Jan/10 20:44,23/Mar/10 02:59,14/Mar/19 02:29,27/Jan/10 18:00,2.2.5,,,,,,,,,,,,,,2.2.7,,,,JAXB Databinding,,,,,,0,,,,JAXBUtils#getValidClass attempts to see if there is a default constructor on the given Class object.  JAXB can handle private default constructors and this check only looks for public ones.,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,Novice,,,,,,,,,,,114033,,,2010-01-26 20:44:30.0,,,,,,0|i0a60v:,57249,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
wrong cipher suites reported for webservice-server with https,CXF-2633,12446477,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,dkulp,mabmayer,mabmayer,24/Jan/10 19:26,23/Mar/10 02:59,14/Mar/19 02:29,27/Jan/10 18:00,2.2.5,2.2.6,,,,,,,,,,,,,2.2.7,,,,Transports,,,,,,0,,,,"The ciphers suites which are reported to be set on a webservice-server seem to be those which are disselected. Intended behavior would be to report the selected cipher suites.

For a webservice-client everything seems ok.

How to reproduce:
In the wsdl_first_https-Sample-Application is the file /src/demo/hw_https/server/CherryServer.xml
The ciphers are configured as follows:

        <sec:include>.*_EXPORT_.*</sec:include>
        <sec:include>.*_EXPORT1024_.*</sec:include>
        <sec:include>.*_WITH_DES_.*</sec:include>
        <sec:include>.*_WITH_NULL_.*</sec:include>
        <sec:exclude>.*_DH_anon_.*</sec:exclude>

if you call  {{mvn  -Pserver}}  this results in the following output:
[INFO] INFO: The cipher suites have been set to SSL_RSA_WITH_RC4_128_MD5, SSL_RSA_WITH_RC4_128_SHA, TLS_RSA_WITH_AES_128_CBC_SHA, TLS_DHE_RSA_WITH_AES_128_CBC_SHA, TLS_DHE_DSS_WITH_AES_128_CBC_SHA, SSL_RSA_WITH_3DES_EDE_CBC_SHA, SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA, SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA, SSL_DH_anon_WITH_RC4_128_MD5, TLS_DH_anon_WITH_AES_128_CBC_SHA, SSL_DH_anon_WITH_3DES_EDE_CBC_SHA, SSL_DH_anon_WITH_DES_CBC_SHA, SSL_DH_anon_EXPORT_WITH_RC4_40_MD5, SSL_DH_anon_EXPORT_WITH_DES40_CBC_SHA, TLS_KRB5_WITH_RC4_128_SHA, TLS_KRB5_WITH_RC4_128_MD5, TLS_KRB5_WITH_3DES_EDE_CBC_SHA, TLS_KRB5_WITH_3DES_EDE_CBC_MD5

Although DH_anon-ciphers are excluded, they show up in the list.

When I try to exclude some more Ciphersuites:

        <sec:include>.*_EXPORT_.*</sec:include>
        <sec:include>.*_EXPORT1024_.*</sec:include>
        <sec:exclude>.*_WITH_DES_.*</sec:exclude>
        <sec:exclude>.*_WITH_NULL_.*</sec:exclude>
        <sec:exclude>.*_DH_anon_.*</sec:exclude>
[INFO] INFO: The cipher suites have been set to SSL_RSA_WITH_RC4_128_MD5, SSL_RSA_WITH_RC4_128_SHA, TLS_RSA_WITH_AES_128_CBC_SHA, TLS_DHE_RSA_WITH_AES_128_CBC_SHA, TLS_DHE_DSS_WITH_AES_128_CBC_SHA, SSL_RSA_WITH_3DES_EDE_CBC_SHA, SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA, SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA, SSL_RSA_WITH_DES_CBC_SHA, SSL_DHE_RSA_WITH_DES_CBC_SHA, SSL_DHE_DSS_WITH_DES_CBC_SHA, SSL_RSA_WITH_NULL_MD5, SSL_RSA_WITH_NULL_SHA, SSL_DH_anon_WITH_RC4_128_MD5, TLS_DH_anon_WITH_AES_128_CBC_SHA, SSL_DH_anon_WITH_3DES_EDE_CBC_SHA, SSL_DH_anon_WITH_DES_CBC_SHA, SSL_DH_anon_EXPORT_WITH_RC4_40_MD5, SSL_DH_anon_EXPORT_WITH_DES40_CBC_SHA, TLS_KRB5_WITH_RC4_128_SHA, TLS_KRB5_WITH_RC4_128_MD5, TLS_KRB5_WITH_3DES_EDE_CBC_SHA, TLS_KRB5_WITH_3DES_EDE_CBC_MD5, TLS_KRB5_WITH_DES_CBC_SHA, TLS_KRB5_WITH_DES_CBC_MD5, TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA, TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5

The list gets longer!

When I exclude all (although this makes not really sense):
        <sec:exclude>.*_EXPORT_.*</sec:exclude>
        <sec:exclude>.*_EXPORT1024_.*</sec:exclude>
        <sec:exclude>.*_WITH_DES_.*</sec:exclude>
        <sec:exclude>.*_WITH_NULL_.*</sec:exclude>
        <sec:exclude>.*_DH_anon_.*</sec:exclude>
[INFO] INFO: The cipher suites have been set to SSL_RSA_WITH_RC4_128_MD5, SSL_RSA_WITH_RC4_128_SHA, TLS_RSA_WITH_AES_128_CBC_SHA, TLS_DHE_RSA_WITH_AES_128_CBC_SHA, TLS_DHE_DSS_WITH_AES_128_CBC_SHA, SSL_RSA_WITH_3DES_EDE_CBC_SHA, SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA, SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA, SSL_RSA_WITH_DES_CBC_SHA, SSL_DHE_RSA_WITH_DES_CBC_SHA, SSL_DHE_DSS_WITH_DES_CBC_SHA, SSL_RSA_EXPORT_WITH_RC4_40_MD5, SSL_RSA_EXPORT_WITH_DES40_CBC_SHA, SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA, SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA, SSL_RSA_WITH_NULL_MD5, SSL_RSA_WITH_NULL_SHA, SSL_DH_anon_WITH_RC4_128_MD5, TLS_DH_anon_WITH_AES_128_CBC_SHA, SSL_DH_anon_WITH_3DES_EDE_CBC_SHA, SSL_DH_anon_WITH_DES_CBC_SHA, SSL_DH_anon_EXPORT_WITH_RC4_40_MD5, SSL_DH_anon_EXPORT_WITH_DES40_CBC_SHA, TLS_KRB5_WITH_RC4_128_SHA, TLS_KRB5_WITH_RC4_128_MD5, TLS_KRB5_WITH_3DES_EDE_CBC_SHA, TLS_KRB5_WITH_3DES_EDE_CBC_MD5, TLS_KRB5_WITH_DES_CBC_SHA, TLS_KRB5_WITH_DES_CBC_MD5, TLS_KRB5_EXPORT_WITH_RC4_40_SHA, TLS_KRB5_EXPORT_WITH_RC4_40_MD5, TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA, TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5.  
[INFO] 2010-01-24 19:19:40.440::WARN:  EXCEPTION 
[INFO] javax.net.ssl.SSLException: No available certificate or key corresponds to the SSL cipher suites which are enabled.
[INFO]  at com.sun.net.ssl.internal.ssl.SSLServerSocketImpl.checkEnabledSuites(SSLServerSocketImpl.java:303)
[INFO]  at com.sun.net.ssl.internal.ssl.SSLServerSocketImpl.accept(SSLServerSocketImpl.java:253)
[INFO]  at org.mortbay.jetty.security.SslSocketConnector.accept(SslSocketConnector.java:172)
[INFO]  at org.mortbay.jetty.AbstractConnector$Acceptor.run(AbstractConnector.java:707)
[INFO]  at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:582)

The list is even longer! But now there is no suitable Cipher?!

If you compare the first and the last cipherlist, the ciphers which are additional to the last example are exactly those which should be instead reported in the first example.","Debian Linux 2.6.26-2-686, java version ""1.5.0_17""",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,114031,,,2010-01-24 19:26:47.0,,,,,,0|i0a613:,57250,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Misleading error message in cxf-codegen-plugin URISyntaxException: Illegal character when path contains \,CXF-2632,12446393,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,chris@die-schneider.net,chris@die-schneider.net,23/Jan/10 00:00,23/Mar/10 02:59,14/Mar/19 02:29,04/Feb/10 16:21,2.2.5,,,,,,,,,,,,,,2.2.7,,,,Tooling,,,,,,0,,,,"When using the cxf-cogegen-plugin you can use \ in path to wsdls. As long as the file is found it works well. But when the file is not found you do not get an error message like file not found but something like
""java.net.URISyntaxException: Illegal character in path at index 4: wsdl\HelloWorld.wsdl"".

I think this is because WsdlOption.getWsdlURI first tries to find a ffile with the given name. When it does not find a file it tries to resolve a url with the name. As long as the url is valid you get a reasonable exception. If it contains characters like \ you get the exception above. I think we should improve this. For example we could catch the IllegalArgumentException and throw a new exception like:
File <path> not found and path is also no valid url. 
Together with the Illegalargumentexception this would be clearer to end users.

Any opinions how to handle this?

java.lang.IllegalArgumentException
	at java.net.URI.create(URI.java:842)
	at java.net.URI.resolve(URI.java:1028)
	at org.apache.cxf.maven_plugin.WsdlOption.getWsdlURI(WsdlOption.java:86)
	at org.apache.cxf.maven_plugin.WSDL2JavaMojo.callWsdl2Java(WSDL2JavaMojo.java:391)
	at org.apache.cxf.maven_plugin.WSDL2JavaMojo.execute(WSDL2JavaMojo.java:359)
	at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:579)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:498)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegmentForProject(DefaultLifecycleExecutor.java:265)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:191)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:149)
	at org.apache.maven.DefaultMaven.execute_aroundBody0(DefaultMaven.java:223)
	at org.apache.maven.DefaultMaven.execute_aroundBody1$advice(DefaultMaven.java:304)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:1)
	at org.apache.maven.embedder.MavenEmbedder.execute_aroundBody2(MavenEmbedder.java:904)
	at org.apache.maven.embedder.MavenEmbedder.execute_aroundBody3$advice(MavenEmbedder.java:304)
	at org.apache.maven.embedder.MavenEmbedder.execute(MavenEmbedder.java:1)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:176)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:63)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:408)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:351)
	at org.codehaus.classworlds.Launcher.main(Launcher.java:31)
Caused by: java.net.URISyntaxException: Illegal character in path at index 4: fsrc\mHelloWor
	at java.net.URI$Parser.fail(URI.java:2809)
	at java.net.URI$Parser.checkChars(URI.java:2982)
	at java.net.URI$Parser.parseHierarchical(URI.java:3066)
	at java.net.URI$Parser.parse(URI.java:3024)
	at java.net.URI.<init>(URI.java:578)
	at java.net.URI.create(URI.java:840)
	... 26 more",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2010-02-04 16:21:26.342,,,no_permission,,,,,,,,,,,,,114030,,,Thu Feb 04 16:21:26 UTC 2010,,,,,,0|i0a61b:,57251,,,,,,,,"04/Feb/10 16:21;dkulp;
I think this is now fixed by properly escaping the URI's.    Thus, the ""uri.resolve"" will now ""work"" and you would get the normal ""not found"" type error.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JmsConfiguration with custom TaskExecutor with Spring 3.0 => NoSuchMethodError ,CXF-2630,12446295,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,miland,miland,22/Jan/10 09:29,10/May/10 18:05,14/Mar/19 02:29,02/Apr/10 02:01,2.2.5,,,,,,,,,,,,,,2.2.8,,,,Transports,,,,,,0,,,,"When configuring Jms Transport with a custom ThreadPoolTaskExecutor (using JmsConfiguration), I get a NoSuchMethodError in
JmsFactory.createJmsListener (tested with cxf 2.2.5 and 2.2.6-SNAPSHOT, 21/01/2010) .

This is caused by a change in Spring 3.0:

DefaultMessageListenerContainer.setTaskExecutor(TaskExecutor) -> DefaultMessageListenerContainer.setTaskExecutor(Executor).

(TaskExecutor extends Executor in Spring 3.0 but not in Spring 2.5.x)

I tested to rebuilt cxf-rt-transports-jms with spring.version=3.0.0.RELEASE and it was OK when executed with Spring 3.0 classes.

To support both spring versions 3.*.* and 2.5.* a reflexion call to setTaskExecutor(...) should be made.

-------------------------------------
the exception: 

java.lang.NoSuchMethodError:
org/springframework/jms/listener/DefaultMessageListenerContainer.setTaskExecutor(Lorg/springframework/core/task/TaskExecutor;)V
    at org.apache.cxf.transport.jms.JMSFactory.createJmsListener(JMSFactory.java:237)
    at org.apache.cxf.transport.jms.JMSFactory.createJmsListener(JMSFactory.java:150)
    at org.apache.cxf.transport.jms.JMSDestination.activate(JMSDestination.java:116)
    at org.apache.cxf.transport.AbstractObservable.setMessageObserver(AbstractObservable.java:48)
    at org.apache.cxf.binding.AbstractBindingFactory.addListener(AbstractBindingFactory.java:164)
    at org.apache.cxf.binding.soap.SoapBindingFactory.addListener(SoapBindingFactory.java:805)
    at org.apache.cxf.endpoint.ServerImpl.start(ServerImpl.java:122)
    at org.apache.cxf.jaxws.EndpointImpl.doPublish(EndpointImpl.java:271)
    at org.apache.cxf.jaxws.EndpointImpl.publish(EndpointImpl.java:209)
    at org.apache.cxf.jaxws.EndpointImpl.publish(EndpointImpl.java:404)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:79)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:618)
    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:1529)
    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1468)
    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1398)
    ... 37 more",All ,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2010-04-02 02:01:26.45,,,no_permission,,Novice,,,,,,,,,,,114028,,,Fri Apr 02 02:01:26 UTC 2010,,,,,,0|i0v0un:,179111,,,,,,,,"22/Mar/10 16:04;miland;I'm affraid that this does not work (CXF 2.2.7, Spring 3.0.1.RELEASE). Always getting a java.lang.NoSuchMethodError exception.

I think, Daniel, that you forgot to delete the line 251, after having fixed the problem (with line 250)

....
org.apache.cxf.transport.jms.JMSFactory:

{code:java} 
249:   if (jmsConfig.getTaskExecutor() != null) {
250:            setTaskExecutor(jmsListener, jmsConfig.getTaskExecutor());
251:            jmsListener.setTaskExecutor(jmsConfig.getTaskExecutor());
252: } 
{code} 

-----

java.lang.NoSuchMethodError: org/springframework/jms/listener/DefaultMessageListenerContainer.setTaskExecutor(Lorg/springframework/core/task/TaskExecutor;)V
	at org.apache.cxf.transport.jms.JMSFactory.createJmsListener(JMSFactory.java:251)
	at org.apache.cxf.transport.jms.JMSFactory.createJmsListener(JMSFactory.java:163)
	at org.apache.cxf.transport.jms.JMSDestination.activate(JMSDestination.java:115)
	at org.apache.cxf.transport.AbstractObservable.setMessageObserver(AbstractObservable.java:48)
	at org.apache.cxf.binding.AbstractBindingFactory.addListener(AbstractBindingFactory.java:164)
	at org.apache.cxf.binding.soap.SoapBindingFactory.addListener(SoapBindingFactory.java:807)
	at org.apache.cxf.endpoint.ServerImpl.start(ServerImpl.java:122)
	at org.apache.cxf.jaxws.EndpointImpl.doPublish(EndpointImpl.java:274)
	at org.apache.cxf.jaxws.EndpointImpl.publish(EndpointImpl.java:212)
	at org.apache.cxf.jaxws.EndpointImpl.publish(EndpointImpl.java:407)
	...","02/Apr/10 02:01;dkulp;
DOH!!!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WS-Addressing Action on response is not being returned as specified in the WSDL,CXF-2629,12446264,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,rduhard,rduhard,21/Jan/10 21:21,23/Mar/10 02:59,14/Mar/19 02:29,27/Jan/10 15:49,2.2.5,,,,,,,,,,,,,,2.2.7,,,,WS-* Components,,,,,,0,,,,"When WS-Addressing is specified for a particular endpoint, and the operation defined in the WSDL has indicated a specific wsaw:Action on the output response (see below), CXF uses the soapAction  value defined for the binding operation (see below).

{code}
         <wsdl:portType name=""IN620104CA_I"">
                <wsdl:operation name=""IN620104CA_I"">
			<wsdl:input message=""hl7:IN620104CA""
				wsaw:Action=""IN620104CA.LE20090316"" />
			<wsdl:output message=""IN620104CA-Response""
				wsaw:Action=""IN620104CA-Response.LE20090316"" />
		</wsdl:operation>
	</wsdl:portType>

	<wsdl:binding ... >
		...
		<wsdl:operation name=""IN620104CA_I"">
			<soap:operation soapAction=""IN620104CA.LE20090316"" />
           	...
		</wsdl:operation>
	</wsdl:binding>
{code}

The soapAction value should be ignored for the response message and it should only look for an explicit value or create one according to the [WS-Addressing spec|http://www.w3.org/TR/ws-addr-wsdl/#defactionwsdl11] for default wsa:Action values.

See [Nabble post|http://old.nabble.com/WSDL-wsaw%3AAction-vs-soapAction-in-MAPs-on-the-response-message-p26545030.html] for more on this discussion.  

The code which configures the outgoing wsa:Action value is in org.apache.cxf.ws.addressing.ContextUtils.getActionFromServiceModel(...). 
","Apache Maven 2.2.1 (r801777; 2009-08-06 14:16:01-0500)
Java version: 1.6.0
OS name: ""windows xp"" version: ""5.1 build 2600 service pack 3"" arch: ""x86"" Family: ""windows""
",,,,,,,,,,,,,,,,21/Jan/10 21:28;rduhard;MAPAction.patch;https://issues.apache.org/jira/secure/attachment/12431066/MAPAction.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,114027,,,Thu Jan 21 21:28:15 UTC 2010,,,,,,0|i0a61j:,57252,,,,,,,,21/Jan/10 21:28;rduhard;Attaching potential patch to fix this issue.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"StaxUtils.writeStartElement(XMLStreamReader reader, XMLStreamWriter writer) does not write namespace for header elements that have a namespace URI and an empty prefix",CXF-2628,12446229,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,orbang,orbang,21/Jan/10 14:59,23/Mar/10 02:59,14/Mar/19 02:29,27/Jan/10 15:50,2.2.6,,,,,,,,,,,,,,2.2.7,,,,,,,,,,0,,,,"Please see attached patch. The patch changes the order of these two codeblocks:

//codeblock1:

        if (uri != null) {
            writeElementNS = true;
            Iterator<String> it = CastUtils.cast(writer.getNamespaceContext().getPrefixes(uri));
            while (it != null && it.hasNext()) {
                String s = it.next();
                if (s == null) {
                    s = """";
                }
                if (s.equals(prefix)) {
                    writeElementNS = false;
                }
            }
        }

//codeblock2:

        if (uri != null) {
            if (prefix.length() == 0 && StringUtils.isEmpty(uri)) {
                writer.writeStartElement(local);
            } else {
                writer.writeStartElement(prefix, local, uri);
            }
        } else {
            writer.writeStartElement(local);
        }



The issue happens because:

1) writer.writeStartElement(prefix, local, uri);  gets executed

2) because of 1),  writer.getNamespaceContext().getPrefixes(uri) returns an iterator with the """" prefix for the namespace uri

3) writeElementNS is set to false because of 2)

4) W3CDOMStreamReader.getNamespaceCount() always returns 0

5) because of 3) and 4), writer.writeDefaultNamespace(uri) never gets executed

",apache-cxf-2.2.6-SNAPSHOT 20100119 and STAX RI (the one included in JDK 1.6.0_16),,,,,,,,,,,,,,,,21/Jan/10 14:59;orbang;StaxUtils.patch;https://issues.apache.org/jira/secure/attachment/12431028/StaxUtils.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,114026,,,2010-01-21 14:59:27.0,,,,,,0|i0a61r:,57253,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Return Type List gets null on client if an empty list is returned,CXF-2627,12446001,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Critical,Fixed,dkulp,mabaumga,mabaumga,20/Jan/10 07:04,07/Sep/10 13:30,14/Mar/19 02:29,20/Jan/10 19:15,2.1.8,,,,,,,,,,,,,,2.2.7,,,,JAXB Databinding,,,,,,0,,,,"If you have a function that returns an empty list  the result will be null on client. Even If add a Responsewrapper to the interface it doesn't work. If have attached a little test project / program:

Interface:
@WebService(targetNamespace = ""http://cxf.apache.org/demo/CustomerService/1/"", name = ""CustomerService"")
@SOAPBinding(style = SOAPBinding.Style.DOCUMENT, use = SOAPBinding.Use.LITERAL)
public interface CustomerService {

	@WebMethod(action = ""findCustomer"", operationName = ""findCustomer"")
	public @WebResult(name = ""customerList"")
	List<Customer> findCustomer();
	
	
	@WebMethod(action = ""findCustomer2"", operationName = ""findCustomer2"")
	@ResponseWrapper(className=""demo.service.CustomerListResponse"")
	public @WebResult(name = ""customerList"")
	List<Customer> findCustomer2();

}

The Implementation:

@WebService(name = ""CustomerService"", serviceName = ""CustomerService"", targetNamespace = ""http://cxf.apache.org/demo/CustomerService/1/"", endpointInterface = ""demo.service.CustomerService"")
public class CustomerServiceImpl implements CustomerService {

	public List<Customer> findCustomer() {
		// very stupid method
		return new ArrayList<Customer>();
	}

	public List<Customer> findCustomer2() {
		// another very stupid method
		return new ArrayList<Customer>();
	}

}

And this is the main programm:
public static void main(String args[]) throws Exception {
		new Server();
		System.out.println(""Server ready..."");

		// Now Call the Service
		JaxWsProxyFactoryBean factory = new JaxWsProxyFactoryBean();
		factory.getInInterceptors().add(new LoggingInInterceptor());

		factory.getOutInterceptors().add(new LoggingOutInterceptor());

		factory.setServiceClass(CustomerService.class);

		factory.setAddress(""http://localhost:9000/CustomerService"");

		CustomerService client = (CustomerService) factory.create();

		System.out.println(""call findCustomer()"");

		List<Customer> result = client.findCustomer();


		if (result != null)
			System.out.println(""Listsize: "" + result.size());
		else
			System.out.println(""List is null: "" + result);

		System.out.println(""call findCustomer2()"");

		result = client.findCustomer2();

		if (result != null) 
                         System.out.println(""Listsize: "" + result.size());
		else
			System.out.println(""List is null: "" + result);

		System.out.println(""Server exiting"");
                System.exit(0);
	}

This will print the following output:

Server ready...
call findCustomer()
20.01.2010 07:49:45 org.apache.cxf.interceptor.LoggingOutInterceptor$LoggingCallback onClose
INFO: Outbound Message
---------------------------
ID: 1
Address: http://localhost:9000/CustomerService
Encoding: UTF-8
Content-Type: text/xml
Headers: {SOAPAction=[""findCustomer""], Accept=[*/*]}
Payload: <soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/""><soap:Body><ns2:findCustomer xmlns:ns2=""http://cxf.apache.org/demo/CustomerService/1/""/></soap:Body></soap:Envelope>
--------------------------------------
20.01.2010 07:49:45 org.apache.cxf.interceptor.LoggingInInterceptor logging
INFO: Inbound Message
----------------------------
ID: 1
Encoding: UTF-8
Content-Type: text/xml; charset=utf-8
Headers: {Content-Length=[194], Server=[Jetty(6.1.21)], content-type=[text/xml; charset=utf-8]}
Payload: <soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/""><soap:Body><ns2:findCustomerResponse xmlns:ns2=""http://cxf.apache.org/demo/CustomerService/1/""/></soap:Body></soap:Envelope>
--------------------------------------
List is null: null
call findCustomer2()
20.01.2010 07:49:45 org.apache.cxf.interceptor.LoggingOutInterceptor$LoggingCallback onClose
INFO: Outbound Message
---------------------------
ID: 2
Address: http://localhost:9000/CustomerService
Encoding: UTF-8
Content-Type: text/xml
Headers: {SOAPAction=[""findCustomer2""], Accept=[*/*]}
Payload: <soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/""><soap:Body><ns2:findCustomer2 xmlns:ns2=""http://cxf.apache.org/demo/CustomerService/1/""/></soap:Body></soap:Envelope>
--------------------------------------
20.01.2010 07:49:45 org.apache.cxf.interceptor.LoggingInInterceptor logging
INFO: Inbound Message
----------------------------
ID: 2
Encoding: UTF-8
Content-Type: text/xml; charset=utf-8
Headers: {Content-Length=[300], Server=[Jetty(6.1.21)], content-type=[text/xml; charset=utf-8]}
Payload: <soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/""><soap:Body><ns2:findCustomer2Response xmlns:ns2=""http://cxf.apache.org/demo/CustomerService/1/""><return xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:nil=""true""/></ns2:findCustomer2Response></soap:Body></soap:Envelope>
--------------------------------------
List is null: null
Server exiting
",JSE 1.5 on Win XP,,,,,,,,,,,,,,,,16/Jul/10 22:29;conficio;EmptyListExample-2.2.9.log;https://issues.apache.org/jira/secure/attachment/12449722/EmptyListExample-2.2.9.log,16/Jul/10 22:25;conficio;EmptyListExample-2.2.9.zip;https://issues.apache.org/jira/secure/attachment/12449721/EmptyListExample-2.2.9.zip,20/Jan/10 07:05;mabaumga;EmptyListExample.zip;https://issues.apache.org/jira/secure/attachment/12430852/EmptyListExample.zip,,,,3.0,,,,,,,,,,,,,,,,,,,,2010-01-20 18:10:32.126,,,no_permission,,,,,,,,,,,,,114025,,,Fri Jul 16 22:25:49 UTC 2010,,,,,,0|i0a61z:,57254,,,,,,,,20/Jan/10 07:05;mabaumga;Eclipse/Maven Project to reproduce the behavior.,"20/Jan/10 18:10;dkulp;
If you change the wrapper bean to:

{code:java}
@XmlType(name = ""CustomerListResponse"")
public class CustomerListResponse {

    private List<Customer> customerList;

    public void setCustomerList(List<Customer> l) {
        customerList = l;
    }

    @XmlElementWrapper(nillable = true, name = ""return"")
    @XmlElement(name = ""CustomerList"")
    public List<Customer> getCustomerList() {
        return customerList;
    }

}
{code}

it seems to work fine.   It only seems to be an issue if the annotations are on a public field.   That's at least a workaround for you.
","20/Jan/10 19:15;dkulp;
Using the getter/setter things above is the only workaround for 2.2.6.    Fix will be in place for 2.2.7.

","16/Jul/10 22:25;conficio;Sorry to say, but this issue is not working yet it 2.2.9. 

I attach this modified Example to show that only the workaround does work but the actual case of the public bean member in the wrapper class still does not work.",,,,,,,,,,,,,,,,,,,,,,,,,,,
xmlbean databinding nullpointer,CXF-2626,12445940,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,sergey_beryozkin,danielberg,danielberg,19/Jan/10 15:51,21/Jan/11 18:14,14/Mar/19 02:29,27/Dec/10 17:48,2.2.5,,,,,,,,,,,,,,2.3.2,2.4,,,JAX-RS,OtherDatabindings,,,,,0,,,,"I ran into this little code in the xmlbeans data binding, that always seems to end up in a NullpointerException. 

I have a simple webservice(as simple as they get) using previously generated xmlbean from a schema. 
The write method gets called with my xmlbean and a valid writer, calls write with MessagePartInfo as null , and a nullpointer exception occurs.

{code:title=org.apache.cxf.xmlbeans.DataWriterImpl.java}
    public void write(Object obj, XMLStreamWriter output) {
        write(obj, null, output);
    }
    
    public void write(Object obj, MessagePartInfo part, XMLStreamWriter output) {
        try {
            Class<?> typeClass = part.getTypeClass();
.. snip
{code}
{code:title=stack}
	DataWriterImpl.write(Object, Object) line: 56	
	DataBindingProvider.writeToWriter(XMLStreamWriter, Object) line: 106	
	DataBindingProvider.writeTo(Object, Class<?>, Type, Annotation[], MediaType, MultivaluedMap<String,Object>, OutputStream) line: 98	
	JAXRSOutInterceptor.serializeMessage(Message, Response, OperationResourceInfo, boolean) line: 232	
	JAXRSOutInterceptor.processResponse(Message) line: 137	
	JAXRSOutInterceptor.handleMessage(Message) line: 77	
	PhaseInterceptorChain.doIntercept(Message) line: 236	
	OutgoingChainInterceptor.handleMessage(Message) line: 76	
	PhaseInterceptorChain.doIntercept(Message) line: 236	
	ChainInitiationObserver.onMessage(Message) line: 109	
	ServletDestination.invoke(ServletConfig, ServletContext, HttpServletRequest, HttpServletResponse) line: 98	
	ServletController.invokeDestination(HttpServletRequest, HttpServletResponse, ServletDestination) line: 394	
	ServletController.invoke(HttpServletRequest, HttpServletResponse) line: 133	
	CXFServlet(AbstractCXFServlet).invoke(HttpServletRequest, HttpServletResponse) line: 142	
	CXFServlet(AbstractHTTPServlet).handleRequest(HttpServletRequest, HttpServletResponse) line: 179	
	CXFServlet(AbstractHTTPServlet).doGet(HttpServletRequest, HttpServletResponse) line: 108	
	CXFServlet(HttpServlet).service(HttpServletRequest, HttpServletResponse) line: 707	
	CXFServlet(AbstractHTTPServlet).service(ServletRequest, ServletResponse) line: 159	
	StubSecurityHelper$ServletServiceAction.run() line: 227	
...snip
{code}
{code:title=jaxrs configuration}

<jaxrs:server id=""flightplanRest"" address=""/flightplanRest"">

	<jaxrs:serviceBeans>
		<ref bean=""flightplanRestServiceBean""/>
	</jaxrs:serviceBeans>
	
	<jaxrs:schemaLocations>
		<jaxrs:schemaLocation>classpath:/domainmodel/Flightplan.xsd</jaxrs:schemaLocation>
	</jaxrs:schemaLocations>
	<jaxrs:dataBinding>
		<bean class=""org.apache.cxf.xmlbeans.XmlBeansDataBinding""/>
	</jaxrs:dataBinding>
</jaxrs:server>
{code}",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2010-01-19 16:48:30.28,,,no_permission,,Moderate,,,,,,,,,,,114024,,,Mon Dec 27 17:48:05 UTC 2010,,,,,,0|i13ypz:,231255,,,,,,,,"19/Jan/10 16:48;sergey_beryozkin;Can you please try to register 

org.apache.cxf.jaxrs.provider.XMLBeansElementProvider as a jaxrs:provider, instead of using jaxrs:dataBinding ?

and I will look into this issue... If you could post a sample service I can test then it can help...

cheers, Sergey","19/Jan/10 17:21;danielberg;Using org.apache.cxf.jaxrs.provider.XMLBeansElementProvider as a jaxrs:provider works like a charm, thanks :)

I'll try to make a test case/simpler service reproducing the bug above, but that will not be for a week or two.","19/Jan/10 17:24;sergey_beryozkin;I tried to quickly check what might be happening here but I have to admit that without a simplified test case I won't be able to fix it before 2.2.6 gets released.

Can you please simply post : 

Service class with a single method only, the response type of this method is an important detail I need to know to do a basic test. If this response type has been generated from a schema then please also attach a sample schema (with the actual schema types/namespaces changed if needed)

thanks, Sergey","19/Jan/10 17:28;sergey_beryozkin;> Using org.apache.cxf.jaxrs.provider.XMLBeansElementProvider as a jaxrs:provider works like a charm, thanks 

Excellent, thanks for confirming it. Please test XMLBeansElementProvider, it was contributed awhile back, we can add some more properties to it if needed. Example, the schema you register above will be ignored by XMLBeansElementProvider, so may be we can update it to do the XMLBeans schema validation. Can XMLBeans validate the data ? If you know how then I can update the provider. 

> I'll try to make a test case/simpler service reproducing the bug above, but that will not be for a week or two.

ok, no probs, given that XMLBeansElementProvider works, it is not that critical then...

cheers, Sergey","04/Feb/10 15:48;sergey_beryozkin;Hi Daniel : can you please post a very simple example which will help me to reproduce the issue. I just need a JAXRS resource with a single method which returns/accepts an XMLBeans bean (simplified as needed)

thanks, Sergey",27/Dec/10 17:48;sergey_beryozkin;XmlBeans any type support might not work well when wrapping XmlBeansDataBinding - we will address when needed ,,,,,,,,,,,,,,,,,,,,,,,,,
Class-loader leakage in org.apache.cxf.jaxb.JAXBDataBinding.JAXBCONTEXT_CACHE ,CXF-2625,12445817,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,dfeist,dfeist,18/Jan/10 13:14,01/Feb/10 19:02,14/Mar/19 02:29,19/Jan/10 16:52,2.1.5,,,,,,,,,,,,,,2.1.9,2.2.6,,,JAXB Databinding,,,,,,0,,,,"See: http://old.nabble.com/Classloader-leakage-when-using-JAXB-binding-in-appServer-td26101445.html

Here is appears we have another map the maintains references to the generated classes and in turn to the webappClassloader that is no more expect this one doesn't even try to be weak.  I notice there is a clearCaches() method but i'm unsure about using that at anytime in runtime because even though i'm taking down one cxf Service there may be user services alive using jaxb at the same time. 

I don't have a patch for this one currently.",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2010-01-19 16:52:22.46,,,no_permission,,Advanced,,,,,,,,,,,114023,,,Tue Jan 19 16:52:22 UTC 2010,,,,,,0|i0v1yv:,179292,,,,,,,,"19/Jan/10 16:52;dkulp;
Fixed for 2.2.6 as we changed the CachedContextAndSchemas to hold onto the JAXBContext using a weak reference.   That was holding onto the Class objects which prevented it from being cleaned out.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Classloader leakage in org.apache.cxf.common.util.ASMHelper.LOADER_MAP,CXF-2624,12445816,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,dfeist,dfeist,18/Jan/10 13:07,01/Feb/10 19:02,14/Mar/19 02:29,19/Jan/10 16:50,2.1.5,,,,,,,,,,,,,,2.1.9,2.2.6,,,JAXB Databinding,,,,,,0,,,,"See: http://old.nabble.com/Classloader-leakage-when-using-JAXB-binding-in-appServer-td26101445.html

This map continues to have reference to classes generated and used by the now undeployed webapp meaning the webapp classloader never goes  away. 
The implementation of this map although weak is not weak enough,  because if a entry references a key (it seems to) then the key although it is a WeakReference never goes away and therefore neither does the entry (the classloader). 

See the ""implementation note"" 2/3 of the way through the javadoc here: http://java.sun.com/j2se/1.5.0/docs/api/java/util/WeakHashMap.html",,,,,,,,,,,,,,,,,18/Jan/10 13:11;dfeist;WeakIdentityHashMap.java.patch;https://issues.apache.org/jira/secure/attachment/12430627/WeakIdentityHashMap.java.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2010-01-19 16:49:58.704,,,no_permission,,Moderate,,,,,,,,,,,114022,,,Tue Jan 19 16:49:58 UTC 2010,,,,,,0|i14047:,231481,,,,,,,,"18/Jan/10 13:11;dfeist;Patch for WeakIdentityHashMap.java that resolve the problem described in the user list thread by taking into account the ""implementation note"" 2/3 of the way through the javadoc here: http://java.sun.com/j2se/1.5.0/docs/api/java/util/WeakHashMap.html ","19/Jan/10 16:49;dkulp;
Changing the WeakIdentityHashMap is not really what we want to do as it's used (indirectly) in a bunch of places where we may not want the value held by a weak reference.   

In anycase, this is now fixed for 2.2.6 as I've changed the ASMHelper to use:
new WeakIdentityHashMap<Class<?>, WeakReference<TypeHelperClassLoader>>()

So both key and value are held weakly.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AttachmentDeserializer doesn't work when no boundary message in content type,CXF-2623,12445793,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Blocker,Fixed,dkulp,rjhazelwood,rjhazelwood,18/Jan/10 03:32,01/Feb/10 19:02,14/Mar/19 02:29,19/Jan/10 18:35,2.2.1,2.2.2,2.2.3,2.2.4,2.2.5,,,,,,,,,,2.1.9,2.2.6,,,Core,,,,,,0,,,,"Changes done to AttachmentDeserializer.INPUT_STREAM_BOUNDARY_PATTERN (in http://svn.apache.org/viewvc?view=revision&revision=766101) has caused the message without boundary descriptor in content type to fail. The regex is missing the MULTILINE flag.

Here is a quick test :
{code:java}
        String message = ""Address: /inbox\n"" +
                         ""Encoding: ISO-8859-1\n"" +
                         ""Content-Type: multipart/related\n"" +
                         ""Headers: {content-type=[multipart/related], connection=[Keep-Alive], Authorization=[Basic dmVyb0FkbWluOmNoYW5nZW1l], "" +
                         ""host=[203.0.194.58:443], Content-Length=[16569], SOAPAction=[http://www.ACORD.org/Standards/AcordMsgSvc/Inbox#PostRq], "" +
                         ""keep-alive=[timeout=5, max=10000], Content-Type=[multipart/related]}\n"" +
                         ""Payload:\n"" +
                         ""------=_Part_34950_1098328613.1263781527359\n"" +
                         ""Content-Type: text/xml; charset=UTF-8\n"" +
                         ""Content-Transfer-Encoding: binary\n"" +
                         ""Content-Id: <318731183421.1263781527359.IBM.WEBSERVICES@auhpap02>\n"" +
                         ""\n"" +
                         ""<envelope/>\n"" +
                         ""------=_Part_34950_1098328613.1263781527359\n"" +
                         ""Content-Type: text/xml\n"" +
                         ""Content-Transfer-Encoding: binary\n"" +
                         ""Content-Id: <b86a5f2d-e7af-4e5e-b71a-9f6f2307cab0>\n"" +
                         ""Content-Length: 13129\n"" +
                         ""\n"" +
                         ""<message>\n"" +
                         ""------=_Part_34950_1098328613.1263781527359--"";
        Matcher m = Pattern.compile(""^--(\\S*)"").matcher(message);
        Assert.assertFalse(m.find());
        m = Pattern.compile(""^--(\\S*)"", Pattern.MULTILINE).matcher(message);
        Assert.assertTrue(m.find());
{code}
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2010-01-19 18:35:28.665,,,no_permission,,,,,,,,,,,,,114021,,,Tue Jan 19 21:33:06 UTC 2010,,,,,,0|i0sxzz:,166985,,,,,,,,"19/Jan/10 18:35;dkulp;
Note:  under NORMAL conditions, the stream fed into the Attachment deserializer would have the headers parsed off already and the boundary would be the first characters on the stream.       However, applied the fix anyway.","19/Jan/10 21:33;rjhazelwood;That is true, sadly one of our clients uses IBM product to send soap messages into our web service and it put carriage return before the first boundary.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ThreadLocal variables may not be cleared in case of exception,CXF-2622,12445781,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,cleclerc,cleclerc,cleclerc,17/Jan/10 22:33,01/Feb/10 19:02,14/Mar/19 02:29,17/Jan/10 23:59,2.2.5,,,,,,,,,,,,,,2.2.6,2.3,,,JAX-RS,,,,,,0,,,,"@Context ThreadLocal variables ( UriInfo, Request, HttpHeaders and SecurityContext) are not cleared on a RequestHandler or on the Resource Object if the JAXRSOutInterceptor.handleMessage() is not called.

This occurs if :
* an Error is throwned during the invocation of the Resource Object
* a Throwable (Exception or Error) is throwned during the invocation of RequestHandler.handleRequest()
* an exception occurs invoking the various interceptors that are parts of the invocation chain
* the out interceptor chain is aborted before reaching the JAXRSOutInterceptor ",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,114020,,,Sun Jan 17 23:59:53 UTC 2010,,,,,,0|i1403r:,231479,,,,,,,,"17/Jan/10 23:59;cleclerc;As suggested by Sergey Beryozkin in ""RE: Questions regarding JAX-RS exception handling"" (1), thread local variables are cleared in JAXRSInInterceptor.handleFault().

(1) http://mail-archives.apache.org/mod_mbox/cxf-dev/201001.mbox/%3CD9D39D1E52C5514C94DE9B5E928C72DB032BC703@MAIL02.bedford.progress.com%3E",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CXFServlet fails to init with NPE at line 125 (updateContext) when run with embedded Jetty and Spring3 - works with Spring 2.5.6,CXF-2620,12445675,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,wjblackburn@me.com,wjblackburn@me.com,15/Jan/10 20:49,01/Feb/10 19:02,14/Mar/19 02:29,19/Jan/10 18:36,2.2.5,,,,,,,,,,,,,,2.1.9,2.2.6,,,Transports,,,,,,0,,,,"I have been using CXF 2.2.3 (also tested with 2.2.5) with Spring 2.5.6 and an embedded Jetty instance successfully for several months. After the release of Spring 3.0, I have tried migrating to the new Spring version. Now the CXF Servlet is failing with a nullpointerexception on the 'updateContext' method:

Caused by: java.lang.NullPointerException
	at org.apache.cxf.transport.servlet.CXFServlet.updateContext(CXFServlet.java:125)
	at org.apache.cxf.transport.servlet.CXFServlet.onApplicationEvent(CXFServlet.java:182)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:97)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:294)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:296)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:858)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:419)

The line that is failing is:

   resourceManager.addResourceResolver(new ServletContextResourceResolver(servletConfig.getServletContext()));

I can only reproduce this issue using an 'embedded' jetty instance, I have attached a test case. By switching between spring 2.5.6 and spring 3.0, you can see from the log output that the servlet successfully initialized under 2.5.6, but fails under 3.0.

I understand this may be a very narrow case involving only this method of loading the servlet, so if no fix is required in CXF, some advice as to a workaround would be very welcome. Thank you.",Spring 3.0.0.RELEASE / Jetty 6.1.8 (embedded),,,,,,,,,,,,,,,,15/Jan/10 20:50;wjblackburn@me.com;embedded-jetty-tests.zip;https://issues.apache.org/jira/secure/attachment/12430435/embedded-jetty-tests.zip,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2010-01-19 18:36:01.077,,,no_permission,,,,,,,,,,,,,114019,,,Tue Jan 19 18:36:01 UTC 2010,,,,,,0|i14e5b:,233755,,,,,,,,15/Jan/10 20:50;wjblackburn@me.com;switch between spring 3.0 and 2.5.6 and note output,"18/Jan/10 20:25;wjblackburn@me.com;I've been working on this more - and it now appears to me to have more to do with some mysterious change in Spring between 2.5.6 and 3.0 - I do not think CXF is involved and this issue can probably be closed (although any additional info anyone has is appreciated).

The code that fails in CXFServlet under Spring 3.0 is at line 125:

    resourceManager.addResourceResolver(new ServletContextResourceResolver(
                                               servletConfig.getServletContext()));

specifically 'servletConfig' is null when the sample code is run under Spring 3.0 and is valid when run with 2.5.6. I have been unable to determine what Spring would even have to do with the servlet config.","18/Jan/10 21:03;wjblackburn@me.com;Please forgive this piecemeal narrative. It now appears that something could be done in CXFServlet to insulate against this issue. I have discovered that the problem is with the implementation of 'onApplicationEvent' in CXFServlet. 

I added some tracing to this code. Under Spring 2.5.6 - I saw no evidence that this method was ever called at all. When running under Spring 3.0 this method was called multiple times - the first call happening BEFORE  servletConfig was actually available, and subsequently two more times, resulting in unnecessary context updates that resulted in this information log entry:

    INFO: Servlet transport factory already registered

It seems that at minimum, the execution of updateContext should only happen if the ServletConfig is non-null. It also appears that the use of the 'inRefresh' flag is insufficient to guard against rapid fire repeat events as seem to be raised in Spring 3.0.","19/Jan/10 18:36;dkulp;
Added some NPE guards and ""inRefresh"" guards to guard against this.",,,,,,,,,,,,,,,,,,,,,,,,,,,
Deadlock when echoing MTOM attachments back to client,CXF-2619,12445662,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,dkulp,piepera,piepera,15/Jan/10 19:24,01/Feb/10 19:02,14/Mar/19 02:29,19/Jan/10 18:40,2.2.3,2.2.4,2.2.5,2.2.6,,,,,,,,,,,2.1.9,2.2.6,,,Core,,,,,,0,,,,"I've written a simple ""echo"" web service, which receives an attachment and echoes it back. In CXF 2.2.2 and earlier, this works OK. Starting with CXF 2.2.3, however, there is a somewhat unpredictable deadlock situation which occurs with MTOM attachments, which causes the web server to deadlock, so that it never responds to the request.

This situation often occurs when the attachment is around 85 kilobytes or greater in size. However, this boundary is not 100% consistent. Sometimes I can successfully echo attachments up to 88 kilobytes in size, and sometimes smaller attachments trigger the bug.

The behavior only occurs if the same input stream is reused. Copying the input into a new input stream circumvents the error. I've verified this behavior began with CXF 2.2.3, and is still present in the latest 2.2.6-SNAPSHOT.",Windows XP,,,,,,,,,,,,,,,,15/Jan/10 19:27;piepera;frt.zip;https://issues.apache.org/jira/secure/attachment/12430428/frt.zip,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2010-01-15 19:39:37.826,,,no_permission,,Advanced,,,,,,,,,,,114018,,,Fri Jan 15 19:50:08 UTC 2010,,,,,,0|i0sy07:,166986,,,,,,,,"15/Jan/10 19:27;piepera;A maven module demonstrating the issue. This uses CXF v2.2.3, and relies on several aspects of CXF. It generates Java stubs using CXF, and uses the CXF jetty transport for its test case.

I see the following results after executing an mvn clean install:

Running frt.impl.LargeFileTest
Tests run: 8, Failures: 0, Errors: 2, Skipped: 0, Time elapsed: 32.062 sec <<< FAILURE!

Results :

Tests in error:
  testCanHandle100KilobyteMtomUpload(frt.impl.LargeFileTest)
  testCanHandle500KilobyteMtomUpload(frt.impl.LargeFileTest)

Tests run: 8, Failures: 0, Errors: 2, Skipped: 0","15/Jan/10 19:39;dkulp;

This is really ""working as designed"".   Prior to 2.2.3, attachments were all buffered (onto disk for >64K, memory otherwise) when read in. 
No real ""steaming"" was done on the incoming side.    Thus, by the time the method on your server impl was invoked, the client was done sending things and had started attempting to read from the input stream.

With 2.2.3, we introduced pure streaming of incoming attachments which is what is ideal for MOST use cases as it gets into the real logic earlier and performs much better as nothing is buffered anywhere.  However, that runs into a problem in your usecase.    Basically, in your case, the client is still trying to write the attachment to it's OutputStream.   It hasn't yet started trying to read from the InputStream.  However, your server has started writing.   The outgoing buffers fill and it deadlocks waiting for the client to read.

We COULD add a configuration parameter to turn off the incoming streaming, although you would achieve the same result by buffering it yourself as you mentioned.

Another option is to just configure in the SAAJInInterceptor or schema-validation.   I believe both of them require the attachments to be pulled in and buffered as well. 


","15/Jan/10 19:41;dkulp;
Another option MIGHT be to detect the first write to the output stream on the server side and have that trigger a buffering of everything on the incoming side.   Something for me to ponder...............","15/Jan/10 19:50;piepera;Hmm okay that sounds like a good change, I can see how that would improve performance for most use cases. This is kind of a peculiar edge case, this kind of a servlet isn't very practical in production - we merely use it for our unit tests to make sure we handle incoming/outgoing attachments properly.

Both of your suggested solutions seem OK (a configuration step, or detecting the first write) - although it seems like no matter what, you'd want to detect the potential for deadlock, and either prebuffer the attachment or just throw some kind of a human-readable error with some text describing the issue.",,,,,,,,,,,,,,,,,,,,,,,,,,,
secureSocketProtocol in TLSClientParams and TLSServerParams is not pushed into the SSLSocketFactory,CXF-2618,12445649,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,dkulp,dkulp,15/Jan/10 18:08,01/Feb/10 19:02,14/Mar/19 02:29,15/Jan/10 19:30,,,,,,,,,,,,,,,2.1.9,2.2.6,,,,,,,,,0,,,,The secureSocketProtocol setting of http:tlsClientParameters and http:tlsServerParameters is completely ignored by the runtime.,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,114017,,,2010-01-15 18:08:23.0,,,,,,0|i14067:,231490,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
wsdl2java script doesn't put #!/bin/sh on the first line of the script,CXF-2616,12445365,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,jon,jon,13/Jan/10 01:22,01/Feb/10 19:02,14/Mar/19 02:29,13/Jan/10 14:17,2.2.5,,,,,,,,,,,,,,2.1.9,2.2.6,,,Tooling,,,,,,0,,,,"the top of the wsdl2java script has the license, not #!/bin/sh

this causes tcsh to fail to execute the file properly.

move #!/bin/sh to the top of the file fixes things.",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,Needs James Gosling,,,,,,,,,,,114016,,,2010-01-13 01:22:30.0,,,,,,0|i1405r:,231488,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WSSecurity11 tests failing with IBM jdk 1.6 and restricted jars,CXF-2613,12445186,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,eamonndwyer,eamonndwyer,11/Jan/10 14:52,01/Feb/10 19:02,14/Mar/19 02:29,11/Jan/10 17:27,,,,,,,,,,,,,,,2.2.6,,,,WS-* Components,,,,,,0,,,,"The WSSecurity111 and WSSecurity112 tests are failing with the IBM 1.6 JDK when the restricted policy jars are installed. It's failing both on AIX and Linux. The tests pass with jdk 1.5 on both of these platforms.
I plan to attach a patch asap to turn off the test when IBM 1.6 JDK is used with restricted policy jars",,,,,,,,,,,,,,,,,11/Jan/10 14:53;eamonndwyer;TurnOffWSecurity11TestWithIbmJDKRestrictedJars.diff;https://issues.apache.org/jira/secure/attachment/12429898/TurnOffWSecurity11TestWithIbmJDKRestrictedJars.diff,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2010-01-11 17:27:41.227,,,no_permission,,,,,,,,,,,,,114014,,,Mon Jan 11 17:27:41 UTC 2010,,,,,,0|i1405z:,231489,,,,,,,,11/Jan/10 17:27;dkulp;Patch applied.  Thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Schema validation failure when null system ID passed to LSResourceResolver.resolveResource(),CXF-2609,12445043,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,eglynn,eglynn,eglynn,08/Jan/10 14:39,01/Feb/10 19:02,14/Mar/19 02:29,08/Jan/10 14:41,2.2.5,,,,,,,,,,,,,,2.1.9,2.2.6,,,,,,,,,0,,,,"The re-working of the EndpointReferenceUtils schema caching logic in 2.2.5 can cause schema validation failures. This is triggered by a null system ID being passed to LSResourceResolver.resolveResource(), so that a direct key lookup in the schemas map fails. In order to locate the schema, a scan though the map searching for an endsWith match is required.

The problem manifests on the first schema resolution as:

{code}
SAXException for newSchema() on
org.xml.sax.SAXParseException: src-resolve: Cannot resolve the name 'ns1:IllustrationSet' to a(n) 'type definition' component.
{code}

and thereafter as:

{code}
org.apache.cxf.interceptor.Fault: Unmarshalling Error: cvc-elt.1: Cannot find the declaration of element 'generateIllustration'.
{code}","$ java -version
java version ""1.6.0_16""
Java(TM) SE Runtime Environment (build 1.6.0_16-b01)
Java HotSpot(TM) Server VM (build 14.2-b01, mixed mode)
$ uname -a
Linux geodesic 2.6.28-16-generic #55-Ubuntu SMP Tue Oct 20 19:48:24 UTC 2009 i686 GNU/Linux",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,114010,,,Fri Jan 08 14:41:24 UTC 2010,,,,,,0|i1406f:,231491,,,,,,,,08/Jan/10 14:41;eglynn;Fix [committed|http://svn.apache.org/viewvc?rev=897217&view=rev] on trunk. ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Object argument is passed as null,CXF-2605,12444929,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,ravi.sukheja,ravi.sukheja,07/Jan/10 15:51,01/Feb/10 19:02,14/Mar/19 02:29,15/Jan/10 16:30,2.2.4,,,,,,,,,,,,,,2.1.9,2.2.6,,,,,,,,,0,,,,"Hi,

We are using CXF-2.1.1 for our webservices and rest services, recently I upgraded it to 2.2.4 as there was bug 2ith 2.1.1 when you go to /services to view the list of all webservices and rest services. Upgrading to 2.2.4 seems to fix that problem, but one of our webservice has stopped working, client is passing the right object argument, but the service is getting null. I don't know what the problem is. Any help would be appreciated.",,,,,,,,,,,,,,,,,08/Jan/10 10:12;ravi.sukheja;StatusService.xml;https://issues.apache.org/jira/secure/attachment/12429736/StatusService.xml,11/Jan/10 12:57;ravi.sukheja;StatusService_211.xml;https://issues.apache.org/jira/secure/attachment/12429884/StatusService_211.xml,25/Jan/10 15:18;ravi.sukheja;StatusService_2_2_6.xml;https://issues.apache.org/jira/secure/attachment/12431314/StatusService_2_2_6.xml,13/Jan/10 15:57;ravi.sukheja;package-info.java;https://issues.apache.org/jira/secure/attachment/12430143/package-info.java,,,4.0,,,,,,,,,,,,,,,,,,,,2010-01-07 18:39:02.408,,,no_permission,,,,,,,,,,,,,114006,,,Wed Jan 27 18:03:29 UTC 2010,,,,,,0|i1405j:,231487,,,,,,,,"07/Jan/10 18:39;dkulp;

We'd definitely need to have more information provided.   Preferably a testcase.

At a minimum, I'd need to see the wsdl/schema and the soap message to make sure the message that is being received/generated is proper compared to the schema.    The updated version of JAXB as part of the latest 2.2.x versions is a bit more strict about matching the schema.

","08/Jan/10 10:10;ravi.sukheja;I have attached the wsdl of our service, and here is the input and output message. As I mentioned earlier, the object that reaches the service is null.

---------------------------------------------
2010-01-08 10:08:18 [btpool0-7] - Inbound Message
----------------------------
ID: 1
Address: /services/StatusService
Encoding: UTF-8
Content-Type: text/xml; charset=utf-8
Headers: {content-type=[text/xml; charset=utf-8], Host=[localhost:8099], Content-Length=[523], SOAPAction=[""""], User-Agent=[Axis/1.1], Content-Type=[text/xml; charset=utf-8], Accept=[application/soap+xml, application/dime, multipart/related, text/*], Pragma=[no-cache], Cache-Control=[no-cache]}
Payload: <?xml version=""1.0"" encoding=""UTF-8""?>
<soapenv:Envelope xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">
 <soapenv:Body>
  <getStatus xmlns=""http://status.service.corymbus.db.com"">
   <in0 xmlns="""">
    <ns1:corymbusJobIds xmlns:ns1=""http://filter.corymbus.db.com"">2453263,</ns1:corymbusJobIds>
    <help>false</help>
    <newPriority xsi:nil=""true""/>
   </in0>
  </getStatus>
 </soapenv:Body>
</soapenv:Envelope>
--------------------------------------

2010-01-08 10:08:19 [btpool0-7] - Outbound Message
---------------------------
ID: 1
Encoding: UTF-8
Content-Type: text/xml
Headers: {}
Payload: <soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/""><soap:Body><soap:Fault><faultcode>soap:Server</faultcode><faultstring>Fault occurred while processing.</faultstring></soap:Fault></soap:Body></soap:Envelope>
--------------------------------------

",08/Jan/10 10:12;ravi.sukheja;WSDL for the services,"08/Jan/10 10:15;ravi.sukheja;Another point to mention, when I updated the cxf jar (cxf-2.2.4.jar), I had to update jsr311-api-1.0.jar and XmlSchema-1.4.5.jar, previously we were using jsr311-api-0.6.jar and XmlSchema-1.4.2.jar. I did not update any other jar file. We are using jaxb-api-2.1.jar and jaxb-impl-2.1.6.jar","08/Jan/10 17:43;dkulp;
Couple thoughts:

1)  Definitely try with the newer jaxb-impl.    That may throw a new error message/exception.   

2)  Make sure you have an asm jar on the classpath.  

3) It looks like you are doing java first on the server.  Is that wsdl from the 2.1.1  service or from the 2.2.4 service?     I'd like to see if there is a difference in the generated wsdls.

4) Do you have a package-info.java or similar thing in the package of the service that would have an jaxb annotations?


",11/Jan/10 12:57;ravi.sukheja;WSDL from CXF - 2.1.1,"11/Jan/10 12:59;ravi.sukheja;Hi Daniel,

I tried updaing the jaxb-impl jar, but still the same error, we do have asm jar in our classpath (asm-2.2.3.jar & asm-commons-2.2.3.jar), please confirm these version are good. I have attached the wsdl from the 211 version as well here. We do not have package-info.java.","12/Jan/10 17:39;dkulp;
I'm really not seeing anything obvious.   Everything looks OK from that perspective.   Any chance you can whip up a small example?   (take all the business logic out of the beans and such) and attach so I can really debug?

","13/Jan/10 15:57;ravi.sukheja;Hi Daniel,

Just now I realize that we do have package-info.java, but I don't think it is used for the call which I sent you, but not sure. As I mentioned earlier, I am new to webservice thing, so please forgive me if I sound stupid.","13/Jan/10 16:16;dkulp;
I would actually try removing that file and see if that helps at all.



","14/Jan/10 15:22;ravi.sukheja;Hi Daniel,

I have the code, which I tried to attach, but it wouldn't work, the zip file size is around 30MB. Can you please suggest some other location, where I can upload these files?

Thanks & Regards,
Ravi.","14/Jan/10 15:27;dkulp;

Can you pull out the jars and other libs and just put a list of the required jars in there?   That should make it smaller.

Other than that, you can try emailing it as an attachment to me directly at dan at dankulp dot com.","14/Jan/10 16:27;ravi.sukheja;Hi Dan,

I have sent you the code on your email address, I hope you received it.

Thanks & Regards,
Ravi.","14/Jan/10 18:21;dkulp;
Thanks for the testcase.

There are two issues:

1) In your interface, you are using WebParam annotations like:
{code}
@WebParam(name= ""in0"", targetNamespace = ""http://filter.corymbus.db.com"")
{code}
The targetNamespace is telling the runtime to look for a qualified element there.   However, the client is sending it unqualified.   There definitely was a bug in early versions of CXF that more or less ignored that targetNamespace which is probably why it worked OK with 2.1.1.    If you remove that targetNamespace attribute, everything works perfect.   Likewise for the @WebResult.

2) This test case DID identify a bug though.   In this case, the element in the schema SHOULD have had a
{code}
form=""qualified""
{code}
attribute on it to mark that it was supposed to be qualified.   I just fixed that and am testing the fix now.



","15/Jan/10 10:49;ravi.sukheja;Hi Daniel,

Yes, it definetely worked. Thanks a lot in fixing the problem.

When you say ""The element in the schema SHULD have had a 'form=""qualified""', does it not have it, look at the below schema from the WSDL.

{code}
<xsd:schema attributeFormDefault=""qualified"" elementFormDefault=""qualified"" targetNamespace=""http://filter.corymbus.db.com"">
{code}

Also, we have @ResponseWrapper as below, will targetNamespace be considered or not. Was their bug in earlier version with this parameter?

{code}
@ResponseWrapper(localName = ""loginXMLResponse"", targetNamespace = ""http://www.dbquant.com/"", className = ""com.db.corymbus.service.ids.cxf.LoginXMLResponse"")
{code}

Regards,
Ravi.","15/Jan/10 16:30;dkulp;
The ""status"" schema is defined as:
{code:xml}
<xsd:schema attributeFormDefault=""unqualified"" elementFormDefault=""unqualified"" targetNamespace=""http://status.service.corymbus.db.com"" xmlns:ns0=""http://filter.corymbus.db.com"" xmlns:ns1=""http://datasynapse.corymbus.db.com"" xmlns:ns2=""http://exception.corymbus.db.com"" xmlns:tns=""http://status.service.corymbus.db.com"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">
{code}
with the unqualified elements.   In that schema, with the targetNamespace defined on the WebParam, in the ""getRequest"" type needed to have its ""in0"" element set to:
{code:xml}
<xsd:element minOccurs=""0"" name=""in0"" form=""qualified"" type=""ns0:FilterArguments"" />
{code}
or similar to mark it qualified since that is what the runtime was expecting.

The namespace on the ResponseWrapper is different.   That defines what namespace the top level element is put into.   The top level elements are always qualified so it's mostly just a ""which schema to stick it in"" thing.




",15/Jan/10 17:52;ravi.sukheja;Thanks for the clarification. When will 2.2.6 release be available?,"15/Jan/10 18:16;dkulp;
2.2.6 build should be done early next week with official release likely next friday or the following monday.
","25/Jan/10 15:17;ravi.sukheja;Hi Daniel,

Today, I downloaded 2.2.6 version and ran the application, but the generated WDSL still has 'unqualified' for the status. I have attached the WSDL for your reference. I even tried running the application, but still the same problem, it still gets the Null object.

Thanks & Regards,
Ravi.","26/Jan/10 12:00;ravi.sukheja;Hi Daniel,

I closely examined the WSDL and it seems that it has the 'qualified' element, but still it doesn't seems to work.

{code}
<xsd:element form=""qualified"" minOccurs=""0"" name=""in0"" type=""ns0:FilterArguments""/>
{code}

Can you please help?

Regards,
Ravi.","26/Jan/10 20:13;dkulp;
Did you remove the targetNamespace attributes as described earlier?   It sounds like no in which case the new wsdl is correct for the service, but the original soap message is now not correct.  It would need to qualify those elements.","27/Jan/10 18:03;ravi.sukheja;Hi Daniel,

Yes, you are right, it does work. I didn't realise that I will have to change the client as well, I generated the client source from wsdl again and everything started working. I tried coparing the request in both cases, didn't find much difference other than

Unqualified
{code}
<in0 xmlns="""">
{code}

Qualified
{code}
<in0>
{code}

In case of qualified, it doesn't give the qualified string, but 'xmlsns' is missing. Is this the right understand?",,,,,,,,,
Faults generated with XMLBeans binding are not wrapped correctly,CXF-2601,12444686,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,martinmurphy,martinmurphy,05/Jan/10 10:58,01/Feb/10 19:02,14/Mar/19 02:29,05/Jan/10 22:46,2.2.5,,,,,,,,,,,,,,2.1.9,2.2.6,,,,,,,,,0,,,,"When Fault in WSDL is defined as simple String and XMLBeans binding is used, then the fault is marshaled in a way, that doesn't allow proper unmarshalling of the Exception on the client side. Example fault looks like

{code:xml}
<soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/"">
  <soap:Body>
    <soap:Fault>
      <faultcode>soap:Server</faultcode>
      <faultstring>message</faultstring>
      <detail>detail</detail>
    </soap:Fault>
  </soap:Body>
</soap:Envelope>
{code}

As you can see detail doesn't have any information about fault type. This means that the exception cannot be mapped to the appropriate type",Tested on windows with JDK jdk1.5.0_18,,,,,,,,,,,,,,,,05/Jan/10 10:59;martinmurphy;exceptiontest.zip;https://issues.apache.org/jira/secure/attachment/12429439/exceptiontest.zip,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,114003,,,Tue Jan 05 10:59:08 UTC 2010,,,,,,0|i14e07:,233732,,,,,,,,"05/Jan/10 10:59;martinmurphy;Here is a simple example that has two projects to highlight the problem. The XMLBeans project has a test that fails due to the exception being of an unexpected type. The JAXB test is the same, except it uses the JAXB binding, this test passes thus highlighting the problem is only in the XMLBeans mapping.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
cxf-codgen-plugin cannot resolve xs:group element referenced in an XSD,CXF-2599,12444391,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Critical,Fixed,dkulp,ctataryn,ctataryn,30/Dec/09 18:29,01/Feb/10 19:02,14/Mar/19 02:29,05/Jan/10 15:51,2.2.5,,,,,,,,,,,,,,2.2.6,,,,Tooling,,,,,,0,,,,"In an attempt to isolate XSDs from WSDLs such that we have one and only one Maven module containing XSDs I have run into the following problem when running cxf-codegen-plugin from a module separated from the XSD module:

{code:title=stack trace}
[INFO] Schema Error : src-resolve: Cannot resolve the name 'InfrastructureRootElements' to a(n) 'group' component.

[INFO] ------------------------------------------------------------------------
[INFO] Trace
org.apache.maven.lifecycle.LifecycleExecutionException: Schema Error : src-resolve: Cannot resolve the name 'InfrastructureRootElements' to a(n) 'group' component.
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:719)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:556)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:535)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:387)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:348)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:180)
        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:328)
        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:138)
        at org.apache.maven.cli.MavenCli.main(MavenCli.java:362)
        at org.apache.maven.cli.compat.CompatibleMain.main(CompatibleMain.java:60)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:45)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)
        at java.lang.reflect.Method.invoke(Method.java:599)
        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)
        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)
        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)
        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)
Caused by: org.apache.maven.plugin.MojoExecutionException: Schema Error : src-resolve: Cannot resolve the name 'InfrastructureRootElements' to a(n) 'group' component.
        at org.apache.cxf.maven_plugin.WSDL2JavaMojo.processWsdl(WSDL2JavaMojo.java:482)
        at org.apache.cxf.maven_plugin.WSDL2JavaMojo.execute(WSDL2JavaMojo.java:387)
        at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:490)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:694)
        ... 17 more
Caused by: org.apache.cxf.tools.common.ToolException: Schema Error : src-resolve: Cannot resolve the name 'InfrastructureRootElements' to a(n) 'group' component.
        at org.apache.cxf.tools.wsdlto.databinding.jaxb.JAXBDataBinding.validateSchema(JAXBDataBinding.java:667)
        at org.apache.cxf.tools.wsdlto.databinding.jaxb.JAXBDataBinding.addSchemas(JAXBDataBinding.java:399)
        at org.apache.cxf.tools.wsdlto.databinding.jaxb.JAXBDataBinding.initialize(JAXBDataBinding.java:313)
        at org.apache.cxf.tools.wsdlto.WSDLToJavaContainer.generateTypes(WSDLToJavaContainer.java:576)
        at org.apache.cxf.tools.wsdlto.WSDLToJavaContainer.processWsdl(WSDLToJavaContainer.java:228)
        at org.apache.cxf.tools.wsdlto.WSDLToJavaContainer.execute(WSDLToJavaContainer.java:128)
        at org.apache.cxf.tools.wsdlto.WSDLToJavaContainer.execute(WSDLToJavaContainer.java:271)
        at org.apache.cxf.tools.common.toolspec.ToolRunner.runTool(ToolRunner.java:103)
        at org.apache.cxf.tools.wsdlto.WSDLToJava.run(WSDLToJava.java:113)
        at org.apache.cxf.tools.wsdlto.WSDLToJava.run(WSDLToJava.java:86)
        at org.apache.cxf.maven_plugin.WSDL2JavaMojo.processWsdl(WSDL2JavaMojo.java:479)
        ... 20 more
Caused by: org.xml.sax.SAXParseException: src-resolve: Cannot resolve the name 'InfrastructureRootElements' to a(n) 'group' component.
        at org.apache.xerces.util.ErrorHandlerWrapper.createSAXParseException(Unknown Source)
        at org.apache.xerces.util.ErrorHandlerWrapper.error(Unknown Source)
        at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)
        at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)
        at org.apache.xerces.impl.xs.traversers.XSDHandler.reportSchemaError(Unknown Source)
        at org.apache.xerces.impl.xs.traversers.XSDHandler.getGlobalDecl(Unknown Source)
        at org.apache.xerces.impl.xs.traversers.XSDGroupTraverser.traverseLocal(Unknown Source)
        at org.apache.xerces.impl.xs.traversers.XSDAbstractParticleTraverser.traverseSeqChoice(Unknown Source)
        at org.apache.xerces.impl.xs.traversers.XSDAbstractParticleTraverser.traverseSequence(Unknown Source)
        at org.apache.xerces.impl.xs.traversers.XSDComplexTypeTraverser.processComplexContent(Unknown Source)
        at org.apache.xerces.impl.xs.traversers.XSDComplexTypeTraverser.traverseComplexTypeDecl(Unknown Source)
        at org.apache.xerces.impl.xs.traversers.XSDComplexTypeTraverser.traverseGlobal(Unknown Source)
        at org.apache.xerces.impl.xs.traversers.XSDHandler.traverseSchemas(Unknown Source)
        at org.apache.xerces.impl.xs.traversers.XSDHandler.parseSchema(Unknown Source)
        at org.apache.xerces.impl.xs.XMLSchemaLoader.loadSchema(Unknown Source)
        at org.apache.xerces.impl.xs.XMLSchemaLoader.loadGrammar(Unknown Source)
        at org.apache.xerces.impl.xs.XMLSchemaLoader.loadGrammar(Unknown Source)
        at org.apache.xerces.jaxp.validation.XMLSchemaFactory.newSchema(Unknown Source)
        at javax.xml.validation.SchemaFactory.newSchema(Unknown Source)
        at org.apache.cxf.tools.wsdlto.databinding.jaxb.JAXBDataBinding.validateSchema(JAXBDataBinding.java:662)
        ... 30 more
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 8 minutes 35 seconds
[INFO] Finished at: Wed Dec 30 12:11:35 CST 2009
[INFO] Final Memory: 31M/156M
[INFO] ------------------------------------------------------------------------
{code}

If the XSDs are located within the *same* project that is running cxf-codegen-plugin, everything works fine.  It's only when the XSDs are being referenced from the classpath that this problem occures.

The error above originates when parsing FICR_IN110304CA.xsd, it references a schema named FICR_MT510401.xsd and within that schema (on line 105) there is an xs:group element like so:
{{<xs:group ref=""InfrastructureRootElements""/>}}

InfrastructureRootElements is supposed to be imported via the statement on line 86 of that same schema:
{{<xs:include schemaLocation=""../coreschemas/infrastructureRoot.xsd""/>}}

I've attached a sample project which replicates the problem.  unzip the project and execute a {{mvn clean install}} within the CXFSchemaRefProblemPom directory.

I've also attached a variables view of the schema references loaded at runtime from my IDE when this error occures.  The reference to infrastructureRoot.xsd looks to be proper to me.

","$ mvn --version
Apache Maven 2.2.1 (r801777; 2009-08-06 14:16:01-0500)
Java version: 1.6.0
Java home: D:\Program Files\IBM\RAD75\jdk\jre
Default locale: en_US, platform encoding: Cp1252
OS name: ""windows xp"" version: ""5.1 build 2600 service pack 3"" arch: ""x86"" Family: ""windows""
",,,,,,,,,,,,,,,,30/Dec/09 18:32;ctataryn;CXFSchemaRefProblem.zip;https://issues.apache.org/jira/secure/attachment/12429151/CXFSchemaRefProblem.zip,30/Dec/09 18:31;ctataryn;runtime schemas.jpg;https://issues.apache.org/jira/secure/attachment/12429150/runtime+schemas.jpg,,,,,2.0,,,,,,,,,,,,,,,,,,,,2010-01-05 03:47:54.481,,,no_permission,,,,,,,,,,,,,114001,,,Tue Jan 05 15:51:13 UTC 2010,,,,,,0|i0uyvb:,178790,,,,,,,,30/Dec/09 18:31;ctataryn;A view of the schemas loaded at runtime a few frames above where the error occured,30/Dec/09 18:32;ctataryn;Sample project where the error can be reproduced,"05/Jan/10 03:47;dkulp;

I actually wasn't able to reproduce this error.   However, when I ran it, I got a completely different error not able to resolve voc.xsd.   More issues with the ""jar"" URL with jaxb.    I've logged that issue with them at:

https://jaxb.dev.java.net/issues/show_bug.cgi?id=728

However, I used some reflection magic to workaround it a bit and was able to get past that and now it builds fine.   I DID see a potential issue resolving imports in the validation code that I also fixed.   Thus, your problem MAY be fixed with tomorrows snaps.

","05/Jan/10 15:51;dkulp;
Confirmed this is now resolved with the latest fixes.",,,,,,,,,,,,,,,,,,,,,,,,,,,
"Can/t set minOccurs=""1"" with annotations",CXF-2598,12444385,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,dkulp,dbf,dbf,30/Dec/09 15:33,01/Feb/10 19:02,14/Mar/19 02:29,08/Jan/10 21:31,2.2.5,,,,,,,,,,,,,,2.2.6,,,,Aegis Databinding,,,,,,0,,,,"Hi, I use CXF & aegis binding for webservices.
For such java method: 
public Calendar getSysdate()
I tried this annotations:
@org.apache.cxf.aegis.type.java5.XmlElement(nillable=false, minOccurs=""1"")
and
@javax.xml.bind.annotation.XmlElement(required=true)
but there is still 

<xsd:complexType name=""getSysdateResponse"">
<xsd:sequence>
<xsd:element minOccurs=""0"" name=""return"" type=""xsd:dateTime""/>
</xsd:sequence>
</xsd:complexType>

is generated WSDL file.
When we build .NET code based on this WSDL this function becomes void (because of minOccurs=""0"").
Is it possible to set minOccurs=""1"". Thanks.


",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,114000,,,2009-12-30 15:33:05.0,,,,,,0|i14etb:,233863,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
No SOAP fault XML elements when a Fault is thrown in the output chain after SAAJOutInterceptor,CXF-2594,12444229,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,garydgregory,,28/Dec/09 00:03,10/Mar/11 23:16,14/Mar/19 02:29,07/Jan/10 18:48,2.2.4,2.2.6,,,,,,,,,,,,,2.1.9,2.2.6,,,,,,,,,0,,,,"The attached unit test runs on top of the 2.2.x SVN branch updated from SVN as of now.

This ticket originated with this thread:

http://old.nabble.com/Inflexible-fault-interceptor-chain--td26840876.html

Which I replicate here with comments used for each step:

Hi All:

I need to apply an XSL transformation to messages coming out of CXF (our users configure what the XSL looks like.) For a normal (successful) message, I have an interceptor (during Phase.PRE_MARSHAL) that uses the DOM aspect of a message. That works great. BTW, I get to the DOM like this:

Node node = (Node) message.getContent(List.class).get(0);

That seems brittle, is there a safer way to get to an aspect of the message I can feed to javax.xml.transform?

The real issue comes with fault messages because the fault chain uses an XMLStreamWriter<http://java.sun.com/javase/6/docs/api/javax/xml/stream/XMLStreamWriter.html>. The fault chain looks like this:

Chain org.apache.cxf.phase.PhaseInterceptorChain@3015b303. Current flow:
  setup [ServerPolicyOutFaultInterceptor]
  prepare-send [MessageSenderInterceptor, Soap11FaultOutInterceptor]
  pre-stream [LoggingOutInterceptor, XmlDeclOutInterceptor*, StaxOutInterceptor]
  pre-protocol [WebFaultOutInterceptor, SOAPHandlerFaultOutInterceptor]
  write [SoapOutInterceptor]
  pre-marshal [LogicalHandlerFaultOutInterceptor]
  marshal [Soap11FaultOutInterceptorInternal]
  pre-stream-ending [StaxOutEndingInterceptor, TransformOutFaultInterceptor*]
  prepare-send-ending [MessageSenderEndingInterceptor]

FYI, the interceptors marked with * are our own:

*         XmlDeclOutInterceptor forces an XML declaration to be written.

*         TransformOutFaultInterceptor is where I thought I could transform the fault XML message.

The XMLStreamWriter<http://java.sun.com/javase/6/docs/api/javax/xml/stream/XMLStreamWriter.html> looks like this:

[StreamWriter: class com.ctc.wstx.sw.SimpleNsStreamWriter, underlying outputter: com.ctc.wstx.sw.ISOLatin1XmlWriter@1125cf44<mailto:com.ctc.wstx.sw.ISOLatin1XmlWriter@1125cf44>

The com.ctc.wstx.sw.ISOLatin1XmlWriter wraps a org.apache.cxf.io.CachedOutputStream, which in turns wraps:

*         currentStream - LoadingByteArrayOutputStream

*         flowThroughStream - AbstractHTTPDestination$WrappedOutputStream

All of this to say that when the chain's interceptors are working with the message's XMLStreamWriter<http://java.sun.com/javase/6/docs/api/javax/xml/stream/XMLStreamWriter.html>, the bytes are cached and written to the wire. It is not possible to catch the fault XML message and change it.

The only thing I've come up with but not implemented yet would be to insert an interceptor before the XML declaration is written and put the XMLStreamWriter<http://java.sun.com/javase/6/docs/api/javax/xml/stream/XMLStreamWriter.html> into a temp spot in the message content map, then put a new XMLStreamWriter<http://java.sun.com/javase/6/docs/api/javax/xml/stream/XMLStreamWriter.html> on a byte array in its place. A pre-stream-ending interceptor can take those bytes, apply XSL to them and then write them to the original XMLStreamWriter<http://java.sun.com/javase/6/docs/api/javax/xml/stream/XMLStreamWriter.html>, before putting the original XMLStreamWriter<http://java.sun.com/javase/6/docs/api/javax/xml/stream/XMLStreamWriter.html> back in it original slot in the message content map.

That seems like big old hack.

Any ideas on a cleaner solution?

Thank you,
Gary Gregory
Seagull Software
ggregory@seagullsoftware.com
www.seagullsoftware.com

","java version ""1.6.0_16""
Java(TM) SE Runtime Environment (build 1.6.0_16-b01)
Java HotSpot(TM) 64-Bit Server VM (build 14.2-b01, mixed mode)

Microsoft Windows [Version 6.0.6002]

Apache Maven 2.2.1 (r801777; 2009-08-06 12:16:01-0700)
Java version: 1.6.0_16
Java home: C:\Program Files\Java\jdk1.6.0_16\jre
Default locale: en_US, platform encoding: Cp1252
OS name: ""windows vista"" version: ""6.0"" arch: ""amd64"" Family: ""windows""

Eclipse 3.6M4:
Version: 3.6.0
Build id: I20091210-1301",,,,,,,,,,,,,,,,28/Dec/09 00:11;patch.txt;https://issues.apache.org/jira/secure/attachment/12429001/patch.txt,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2009-12-28 00:04:57.866,,,no_permission,,,,,,,,,,,,,113996,,,Thu Jan 07 18:48:00 UTC 2010,,,,,,0|i1404v:,231484,,,,,,,,"28/Dec/09 00:04;ggregory@seagullsw.com;-----Original Message-----
From: Sergey Beryozkin [mailto:sberyozk@progress.com] 
Sent: Friday, December 18, 2009 02:32
To: users@cxf.apache.org
Cc: Lee Breisacher; Nikolay Glazyrin
Subject: Re: Inflexible fault interceptor chain?

Hi,

I'm presuming you use JAXWS.
Please see a couple of comments inline prefixed with S.B, perhaps they migth help

cheers, Sergey

Hi All:

I need to apply an XSL transformation to messages coming out of CXF (our users configure what the XSL looks like.) For a normal 
(successful) message, I have an interceptor (during Phase.PRE_MARSHAL) that uses the DOM aspect of a message. That works great. BTW, 
I get to the DOM like this:

Node node = (Node) message.getContent(List.class).get(0);

That seems brittle, is there a safer way to get to an aspect of the message I can feed to javax.xml.transform?

>S.B. Perhaps you can inject an out interceptor before the response object (which is a JAXB Bean) is wrapped into DOM ? And then
use JAXBContext to marshal into an XSLT engine handler and then abort the chain ? JAXBDatabinding keeps the map of existing 
JAXBContexts but I'm not sure how exactly they can be retrieved...

The real issue comes with fault messages because the fault chain uses an 
XMLStreamWriter<http://java.sun.com/javase/6/docs/api/javax/xml/stream/XMLStreamWriter.html>. The fault chain looks like this:

> S.B : is it possible to catch a Fault before early, and use JAXB to XSLT path again, perhaps by wrapping a Fault in a JAXBContext 
> ?


Chain org.apache.cxf.phase.PhaseInterceptorChain@3015b303. Current flow:
  setup [ServerPolicyOutFaultInterceptor]
  prepare-send [MessageSenderInterceptor, Soap11FaultOutInterceptor]
  pre-stream [LoggingOutInterceptor, XmlDeclOutInterceptor*, StaxOutInterceptor]
  pre-protocol [WebFaultOutInterceptor, SOAPHandlerFaultOutInterceptor]
  write [SoapOutInterceptor]
  pre-marshal [LogicalHandlerFaultOutInterceptor]
  marshal [Soap11FaultOutInterceptorInternal]
  pre-stream-ending [StaxOutEndingInterceptor, TransformOutFaultInterceptor*]
  prepare-send-ending [MessageSenderEndingInterceptor]

FYI, the interceptors marked with * are our own:

*         XmlDeclOutInterceptor forces an XML declaration to be written.

*         TransformOutFaultInterceptor is where I thought I could transform the fault XML message.

The XMLStreamWriter<http://java.sun.com/javase/6/docs/api/javax/xml/stream/XMLStreamWriter.html> looks like this:

[StreamWriter: class com.ctc.wstx.sw.SimpleNsStreamWriter, underlying outputter: 
com.ctc.wstx.sw.ISOLatin1XmlWriter@1125cf44<mailto:com.ctc.wstx.sw.ISOLatin1XmlWriter@1125cf44>

The com.ctc.wstx.sw.ISOLatin1XmlWriter wraps a org.apache.cxf.io.CachedOutputStream, which in turns wraps:

*         currentStream - LoadingByteArrayOutputStream

*         flowThroughStream - AbstractHTTPDestination$WrappedOutputStream

All of this to say that when the chain's interceptors are working with the message's 
XMLStreamWriter<http://java.sun.com/javase/6/docs/api/javax/xml/stream/XMLStreamWriter.html>, the bytes are cached and written to 
the wire. It is not possible to catch the fault XML message and change it.

The only thing I've come up with but not implemented yet would be to insert an interceptor before the XML declaration is written and 
put the XMLStreamWriter<http://java.sun.com/javase/6/docs/api/javax/xml/stream/XMLStreamWriter.html> into a temp spot in the message 
content map, then put a new XMLStreamWriter<http://java.sun.com/javase/6/docs/api/javax/xml/stream/XMLStreamWriter.html> on a byte 
array in its place. A pre-stream-ending interceptor can take those bytes, apply XSL to them and then write them to the original 
XMLStreamWriter<http://java.sun.com/javase/6/docs/api/javax/xml/stream/XMLStreamWriter.html>, before putting the original 
XMLStreamWriter<http://java.sun.com/javase/6/docs/api/javax/xml/stream/XMLStreamWriter.html> back in it original slot in the message 
content map.

That seems like big old hack.

Any ideas on a cleaner solution?

Thank you,
Gary Gregory
Seagull Software
ggregory@seagullsoftware.com
www.seagullsoftware.com
","28/Dec/09 00:05;ggregory@seagullsw.com;-----Original Message-----
From: Daniel Kulp [mailto:dkulp@apache.org] 
Sent: Friday, December 18, 2009 07:33
To: users@cxf.apache.org
Cc: Gary Gregory; Lee Breisacher; Nikolay Glazyrin
Subject: Re: Inflexible fault interceptor chain?


Honestly, the EASIEST way to accomplish this, since you are using soap, is to 
add the SAAJOutInterceptor to the fault chain.  Then, your interceptor would 
live right before it's ""ending"" interceptor and do:

message.getContext(SOAPMessage.class)

to get the SAAJ model out.   Since the SAAJ model implements the DOM 
interfaces, you can then feed that into an XSLT processor or similar to 
transform it and then set a new version back with the setContent call.


Dan
","28/Dec/09 00:05;ggregory@seagullsw.com;-----Original Message-----
From: Gary Gregory [mailto:GGregory@seagullsoftware.com] 
Sent: Monday, December 21, 2009 17:13
To: Daniel Kulp; users@cxf.apache.org
Subject: RE: Inflexible fault interceptor chain?

Hello Dan and all,

Ok, the SAAJOutInterceptor solution almost worked. The behavior I describe below is the same in CXF 2.2.4 and 2.2.6-SNAPSHOT (as of Saturday's build). I am not on 2.2.5 due to some bugs that are fixed in 2.2.6. The debugging information I gathered for this message is with 2.2.4.

I have two scenarios, one works and one does not with the SAAJOutInterceptor solution. 

If a Fault is thrown by a custom interceptor at a certain point in the output chain, the wrong SOAP XML is generated, specifically no SOAP fault XML elements are generated. Let me start by showing what works and why before showing what does not and why.

In the first scenario, which works, a SoapFault is thrown by our provider's invoke(SOAPMessage) method under certain conditions, basically if our server detects certain errors. Our provider looks like this:

@WebServiceProvider
@ServiceMode(value = Service.Mode.MESSAGE)
public static class LdeWebServiceProvider implements Provider<SOAPMessage> {
   @Override
   public SOAPMessage invoke(SOAPMessage soapRequest) {
      ...
      throw new SoapFault(""Our message"", Soap11.getInstance().getReceiver());
   }
}

In SAAJOutInterceptor.handleMessage, the local variable saaj is null, so the code path taken builds a SOAP message from scratch and plugs in a W3CDOMStreamWriter. All of the interceptors then write to W3CDOMStreamWriter instead of the default XMLStreamWriter which normally caches and writes to the HTTP wire. The W3CDOMStreamWriter allows me to transform the DOM before it gets on the wire. Great stuff, it works.

In the second scenario, I test our output feature where in addition to an optional transformation, we have custom interceptors to do optional XML validation before and after the XML transformation. After our provider successfully processed a message, the output chain processing kicks in and looks like this:

Chain org.apache.cxf.phase.PhaseInterceptorChain@c375934. Current flow:
  setup [PolicyOutInterceptor]
  pre-logical [SwAOutInterceptor, SoapHeaderOutFilterInterceptor]
  post-logical [SoapPreProtocolOutInterceptor]
  prepare-send [MessageSenderInterceptor, MessageModeOutInterceptor]
  pre-stream [LoggingOutInterceptor, XmlDeclOutInterceptor*, AttachmentOutInterceptor, StaxOutInterceptor]
  pre-protocol [MessageModeOutInterceptorInternal, SAAJOutInterceptor, SOAPHandlerInterceptor, OurWSS4JOutInterceptor]
  write [SoapOutInterceptor]
  pre-marshal [LogicalHandlerOutInterceptor, ValidatingOutInterceptor*, TransformOutInterceptor*, ValidatingOutInterceptor*]
  marshal [BareOutInterceptor]
  write-ending [SoapOutEndingInterceptor]
  pre-protocol-ending [SAAJOutEndingInterceptor]
  pre-stream-ending [StaxOutEndingInterceptor]
  prepare-send-ending [MessageSenderEndingInterceptor]

The interceptors marked with * are mine:
- XmlDeclOutInterceptor forces the XML declaration to be written.
- ValidatingOutInterceptor validates XML
- TransformOutInterceptor transforms XML
- ValidatingOutInterceptor validates XML

The problem occurs if XML validation fails (the first validation in this test).

When the XML validation fails, an exception thrown, caught, and re-thrown as a fault.
  
At the start of fault processing, the chain when SAAJOutInterceptor is called looks like this:
  
  Chain org.apache.cxf.phase.PhaseInterceptorChain@77c16c5f. Current flow:
  setup [ServerPolicyOutFaultInterceptor]
  prepare-send [MessageSenderInterceptor, Soap11FaultOutInterceptor]
  pre-stream [LoggingOutInterceptor, XmlDeclOutInterceptor*, StaxOutInterceptor]
  pre-protocol [WebFaultOutInterceptor, SAAJOutInterceptor, SOAPHandlerFaultOutInterceptor]
  write [SoapOutInterceptor]
  pre-marshal [LogicalHandlerFaultOutInterceptor]
  marshal [Soap11FaultOutInterceptorInternal]
  pre-protocol-ending [TransformOutFaultInterceptor*]
  prepare-send-ending [MessageSenderEndingInterceptor]

The interceptors marked with * are mine:
- XmlDeclOutInterceptor forces the XML declaration to be written.
- TransformOutFaultInterceptor validates XML

When I step through this SAAJOutInterceptor invocation, the saaj variable is NOT null, so the code path taken is different from what I described above. Instead of a W3CDOMStreamWriter, a dummy XMLStreamWriter is created that throws away whatever is written to it:

            //as the SOAPMessage already has everything in place, we do not need XMLStreamWriter to write
            //anything for us, so we just set XMLStreamWriter's output to a dummy output stream.         
            XMLStreamWriter origWriter = message.getContent(XMLStreamWriter.class);
            message.put(ORIGINAL_XML_WRITER, origWriter);
            
            XMLStreamWriter dummyWriter = StaxUtils.createXMLStreamWriter(new OutputStream() {
                    public void write(int b) throws IOException {
                    }
                    public void write(byte b[], int off, int len) throws IOException {
                    }                        
                });
            message.setContent(XMLStreamWriter.class, dummyWriter);

No wonder I get no SOAP fault information back, I get:

<?xml version='1.0' encoding='ISO-8859-1'?>
<SOAP-ENV:Envelope xmlns:SOAP-ENV=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/"">
	<SOAP-ENV:Header xmlns:SOAP-ENV=""http://schemas.xmlsoap.org/soap/envelope/"">
		<ais:requestID xmlns:ais=""http://com.seagullsw.appinterface/AppInterfaceServer"">{c0a80102-00ce16ad0000010e75da25398002}</ais:requestID>
	</SOAP-ENV:Header>
	<SOAP-ENV:Body xmlns:SOAP-ENV=""http://schemas.xmlsoap.org/soap/envelope/"" />
</SOAP-ENV:Envelope>

Is this a bug? Why would there be a dummy writer put in place? Is there another CXF way to do this?

Thank you,
Gary

","28/Dec/09 00:06;ggregory@seagullsw.com;-----Original Message-----
From: Daniel Kulp [mailto:dkulp@apache.org] 
Sent: Tuesday, December 22, 2009 10:06
To: users@cxf.apache.org
Cc: Gary Gregory
Subject: Re: Inflexible fault interceptor chain?


Can you create a small test case and attach to a jira?

This definitely sounds like bug of some sort.   When I redid the Provider 
based services, I noticed that strange code in the StaxOutInterceptor as well 
and tried to remove it.   However, that broke some of the JAX-WS tck tests.   
I don't remember the exact reason.   I think it has something to do with 
faults thrown from the logical or soap handlers on the outgoing chain needed 
some strange and wacky processing.     Don't really remember.   

If we can get your test case, we may be able to get it to work better.   

That said, you could probably write your own interceptor (you seem to be good 
at that :-)  that would run on the fault chain prior to the SAAJOut and have 
it remove the SAAJ model from the message.   You may need to trace through a 
couple other interceptors (like SoapOutInterceptor) to see if other properties 
need to be removed/reset.

Dan

","28/Dec/09 00:06;ggregory@seagullsw.com;-----Original Message-----
From: Gary Gregory [mailto:GGregory@seagullsoftware.com] 
Sent: Tuesday, December 22, 2009 13:31
To: Daniel Kulp; users@cxf.apache.org
Subject: RE: Inflexible fault interceptor chain?

Hi All:

I am trying to build SVN 2.2.x (I just updated from SVN) to test a patch (I do not have a test yet) just to see what happens if SAAJOutInterceptor uses a W3CDOMStreamWriter even if the local variable is null. Since that caused a test to hang I thought I'd try to build an unchanged 2.2.6 as a baseline. I get the errors below when I run:

mvn clean install -Peverything

Does 2.2.x build ok for anyone out there?

Results :

Failed tests:
  testExcludeNSWithPackageName(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)
  testBug305924ForNestedBinding(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)
  testParameterOrderNoOutputMessage(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)
  testParameterOrderDifferentNS(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)

Tests in error:
  testHelloWorldExternalBindingFile(org.apache.cxf.tools.wsdlto.jaxws.CodeGenOptionTest)
  testFlagForGenStandAlone(org.apache.cxf.tools.wsdlto.jaxws.CodeGenOptionTest)
  testFlagForGenAdditional(org.apache.cxf.tools.wsdlto.jaxws.CodeGenOptionTest)
  testHeaderFromAnotherMessage1(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)
  testHeaderFromAnotherMessage2(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)
  testHeaderFromAnotherMessage3(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)
  testHeaderFromAnotherMessage4(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)
  testHeaderFromAnotherMessage5(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)
  testRPCLit(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)
  testAsyncMethod(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)
  testAsyncMethodNoService(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)
  testHelloWorldSoap12(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)
  testHelloWorld(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)
  testHelloWorldWithDummyPlugin(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)
  testDocLitHolder(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)
  testSchemaImport(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)
  testExceptionNameCollision(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)
  testAllNameCollision(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)
  testImportNameCollision(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)
  testSoapHeader(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)
  testHolderHeader(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)
  testWSAddress(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)
  testVoidInOutMethod(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)
  testWsdlImport(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)
  testWebFault(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)
  testMultiSchemaParsing(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)
  testDefaultParameterOrder(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)
  testSupportXMLBindingBare(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)
  testSupportXMLBindingWrapped(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)
  testRouterWSDL(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)
  testWSDLContainsJavaKeywords(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)
  testWSDLWithEnumType(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)
  testSWAMime(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)
  testRPCHeader(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)
  testRefTNS(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)
  testWebFaultAnnotaion(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)
  testGlobalBinding(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)
  testXmlSeeAlso(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)
  testWSAction(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)
  testHandlerAnnotation(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)
  testGenerateXmlListAnno(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)
  testWrapperWithWildcard(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)
  testCXF1950(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)
  testLogicalOnlyWSDL(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)
  testBug305729(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)
  testBug305773(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)
  testBug305700(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)
  testNamespacePackageMapping1(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)
  testNamespacePackageMapping2(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)
  testNamespacePackageMapping3(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)
  testBug305772(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)
  testCommandLine(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)
  testLocatorWithJaxbBinding(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)
  testWsdlNoService(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)
  testNoServiceImport(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)
  testServiceNS(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)
  testNoServiceNOPortType(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)
  testDefatultNsMap(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)
  testDefatultNsMapExclude(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)
  testHelloWorldExternalBindingFile(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)
  testWebResult(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)
  testCXF627(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)
  testRecursiveImport(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)
  testCXF804(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)
  testDefinieServiceName(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)
  testAntFile(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)
  testAsyncImplAndClient(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)
  testZeroInputOutOfBandHeader(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)
  testBindingForImportWSDL(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)
  testReuseJaxwsBindingFile(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)
  testBindingXPath(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)
  testJaxbCatalog(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)
  testCatalog2(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)
  testCatalog3(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)
  testServer(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)
  testTwoJaxwsBindingFile(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)
  testJaxwsBindingJavaDoc(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)
  testWSAActionAnno(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)
  testCXF964(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)
  testCXF1620(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)
  testCXF1048(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)
  testJaxbNpa(org.apache.cxf.tools.wsdlto.jaxb.JAXBCodeGenOptionTest)

Tests run: 124, Failures: 4, Errors: 82, Skipped: 1
","28/Dec/09 00:06;ggregory@seagullsw.com;-----Original Message-----
From: Daniel Kulp [mailto:dkulp@apache.org] 
Sent: Tuesday, December 22, 2009 19:51
To: users@cxf.apache.org
Cc: Gary Gregory
Subject: Re: Inflexible fault interceptor chain?

On Tue December 22 2009 4:30:30 pm Gary Gregory wrote:
> Hi All:
> 
> I am trying to build SVN 2.2.x (I just updated from SVN) to test a patch (I
>  do not have a test yet) just to see what happens if SAAJOutInterceptor
>  uses a W3CDOMStreamWriter even if the local variable is null. Since that
>  caused a test to hang I thought I'd try to build an unchanged 2.2.6 as a
>  baseline. I get the errors below when I run:
> 
> mvn clean install -Peverything
> 
> Does 2.2.x build ok for anyone out there?

The automatic builds we have running in Hudson seem to be fine:

http://hudson.zones.apache.org/hudson/view/CXF/

They also just worked for me.   Not sure what to suggest.   :-(



Dan

","28/Dec/09 00:11;ggregory@seagullsw.com;The patch contains:

- 1 unit test class
- 1 servlet mimicking our runtime code
- 1 input test fixture
- 1 output test fixture

The @Test method {{testSAAJOutInterceptorBroken}} fails and demonstrates the bug.

The @Test method {{testSAAJOutInterceptorIncompleteHackBreaksOtherTests}} passes and shows a workaround hack that works in this instance but breaks tests in the CXF build.
","30/Dec/09 22:05;ggregory@seagullsw.com;I tested again today with the lasted from SVN to make sure the test behaved the same, it does.","06/Jan/10 19:45;ggregory@seagullsw.com;I tested again today with the lasted from SVN to make sure the test behaved the same, it does. ","07/Jan/10 18:48;dkulp;
Needed some extra cleanup in the SAAJOut handleFault method.",,,,,,,,,,,,,,,,,,,,,
Get XML parse error when return type is Collection<double[]>,CXF-2593,12441594,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,bmargulies,mikkelbk,mikkelbk,24/Nov/09 18:45,01/Feb/10 19:02,14/Mar/19 02:29,27/Dec/09 16:19,,,,,,,,,,,,,,,2.2.6,,,,Aegis Databinding,,,,,,0,,,,"I have used dosgi succesfully between two machines. But when I implemented a method with Collection<double[]> as return type I get the error below. It is unclear from the answers in http://coderthoughts.blogspot.com/2009/05/questions-from-rfc-119-webinar.html if Collection<double[]> should work or not.

24-11-2009 19:19:49 org.apache.cxf.phase.PhaseInterceptorChain doIntercept
WARNING: Interceptor has thrown exception, unwinding now
org.apache.cxf.interceptor.Fault: Could not parse xml.. Nested exception is javax.xml.stream.XMLStreamException: ParseError at [row,col]:[1,345]
Message: expected start or end tag
	at org.apache.cxf.aegis.databinding.XMLStreamDataReader.read(XMLStreamDataReader.java:63)
	at org.apache.cxf.aegis.databinding.XMLStreamDataReader.read(XMLStreamDataReader.java:38)
	at org.apache.cxf.interceptor.DocLiteralInInterceptor.getPara(DocLiteralInInterceptor.java:238)
	at org.apache.cxf.interceptor.DocLiteralInInterceptor.handleMessage(DocLiteralInInterceptor.java:117)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
	at org.apache.cxf.endpoint.ClientImpl.onMessage(ClientImpl.java:664)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleResponseInternal(HTTPConduit.java:2160)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleResponse(HTTPConduit.java:2040)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.close(HTTPConduit.java:1965)
	at org.apache.cxf.transport.AbstractConduit.close(AbstractConduit.java:66)
	at org.apache.cxf.transport.http.HTTPConduit.close(HTTPConduit.java:627)
	at org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor.handleMessage(MessageSenderInterceptor.java:62)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:478)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:308)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:260)
	at org.apache.cxf.frontend.ClientProxy.invokeSync(ClientProxy.java:73)
	at org.apache.cxf.frontend.ClientProxy.invoke(ClientProxy.java:68)
	at $Proxy34.getBoundary(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.cxf.dosgi.dsw.handlers.ServiceInvocationHandler.invoke(ServiceInvocationHandler.java:59)
	at $Proxy34.getBoundary(Unknown Source)
	at service.example.Example.activate(Example.java:46)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.eclipse.equinox.internal.ds.model.ServiceComponent.activate(ServiceComponent.java:230)
	at org.eclipse.equinox.internal.ds.model.ServiceComponentProp.activate(ServiceComponentProp.java:140)
	at org.eclipse.equinox.internal.ds.model.ServiceComponentProp.build(ServiceComponentProp.java:330)
	at org.eclipse.equinox.internal.ds.InstanceProcess.buildComponent(InstanceProcess.java:560)
	at org.eclipse.equinox.internal.ds.InstanceProcess.buildComponents(InstanceProcess.java:182)
	at org.eclipse.equinox.internal.ds.Resolver.getEligible(Resolver.java:292)
	at org.eclipse.equinox.internal.ds.SCRManager.serviceChanged(SCRManager.java:226)
	at org.eclipse.osgi.internal.serviceregistry.FilteredServiceListener.serviceChanged(FilteredServiceListener.java:104)
	at org.eclipse.osgi.framework.internal.core.BundleContextImpl.dispatchEvent(BundleContextImpl.java:933)
	at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:227)
	at org.eclipse.osgi.framework.eventmgr.ListenerQueue.dispatchEventSynchronous(ListenerQueue.java:149)
	at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.publishServiceEventPrivileged(ServiceRegistry.java:755)
	at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.publishServiceEvent(ServiceRegistry.java:710)
	at org.eclipse.osgi.internal.serviceregistry.ServiceRegistrationImpl.register(ServiceRegistrationImpl.java:129)
	at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.registerService(ServiceRegistry.java:206)
	at org.eclipse.osgi.framework.internal.core.BundleContextImpl.registerService(BundleContextImpl.java:507)
	at org.eclipse.osgi.framework.internal.core.BundleContextImpl.registerService(BundleContextImpl.java:525)
	at org.apache.cxf.dosgi.dsw.hooks.AbstractClientHook.proxifyMatchingInterface(AbstractClientHook.java:118)
	at org.apache.cxf.dosgi.dsw.hooks.AbstractClientHook.processNotification(AbstractClientHook.java:91)
	at org.apache.cxf.dosgi.dsw.hooks.AbstractClientHook$DiscoveryCallback.serviceChanged(AbstractClientHook.java:297)
	at org.apache.cxf.dosgi.discovery.local.LocalDiscoveryService.triggerCallbacks(LocalDiscoveryService.java:340)
	at org.apache.cxf.dosgi.discovery.local.LocalDiscoveryService.triggerCallbacks(LocalDiscoveryService.java:305)
	at org.apache.cxf.dosgi.discovery.local.LocalDiscoveryService.updateTracker(LocalDiscoveryService.java:208)
	at org.apache.cxf.dosgi.discovery.local.LocalDiscoveryService.access$100(LocalDiscoveryService.java:53)
	at org.apache.cxf.dosgi.discovery.local.LocalDiscoveryService$1.modifiedService(LocalDiscoveryService.java:90)
	at org.osgi.util.tracker.ServiceTracker$Tracked.customizerModified(ServiceTracker.java:909)
	at org.osgi.util.tracker.AbstractTracked.track(AbstractTracked.java:237)
	at org.osgi.util.tracker.ServiceTracker$Tracked.serviceChanged(ServiceTracker.java:840)
	at org.eclipse.osgi.internal.serviceregistry.FilteredServiceListener.serviceChanged(FilteredServiceListener.java:104)
	at org.eclipse.osgi.framework.internal.core.BundleContextImpl.dispatchEvent(BundleContextImpl.java:933)
	at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:227)
	at org.eclipse.osgi.framework.eventmgr.ListenerQueue.dispatchEventSynchronous(ListenerQueue.java:149)
	at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.publishServiceEventPrivileged(ServiceRegistry.java:755)
	at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.publishServiceEvent(ServiceRegistry.java:710)
	at org.eclipse.osgi.internal.serviceregistry.ServiceRegistrationImpl.setProperties(ServiceRegistrationImpl.java:168)
	at org.apache.cxf.dosgi.dsw.hooks.AbstractClientHook.lookupDiscoveryService(AbstractClientHook.java:218)
	at org.apache.cxf.dosgi.dsw.hooks.CxfFindListenerHook.find(CxfFindListenerHook.java:95)
	at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.notifyFindHooksPrivileged(ServiceRegistry.java:1037)
	at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.notifyFindHooks(ServiceRegistry.java:1004)
	at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.getServiceReferences(ServiceRegistry.java:305)
	at org.eclipse.osgi.framework.internal.core.BundleContextImpl.getServiceReferences(BundleContextImpl.java:573)
	at org.eclipse.equinox.internal.ds.Reference.hasProviders(Reference.java:126)
	at org.eclipse.equinox.internal.ds.Resolver.resolveEligible(Resolver.java:432)
	at org.eclipse.equinox.internal.ds.Resolver.getComponentsToBuild(Resolver.java:398)
	at org.eclipse.equinox.internal.ds.Resolver.getEligible(Resolver.java:282)
	at org.eclipse.equinox.internal.ds.SCRManager.serviceChanged(SCRManager.java:226)
	at org.eclipse.osgi.internal.serviceregistry.FilteredServiceListener.serviceChanged(FilteredServiceListener.java:104)
	at org.eclipse.osgi.framework.internal.core.BundleContextImpl.dispatchEvent(BundleContextImpl.java:933)
	at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:227)
	at org.eclipse.osgi.framework.eventmgr.ListenerQueue.dispatchEventSynchronous(ListenerQueue.java:149)
	at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.publishServiceEventPrivileged(ServiceRegistry.java:755)
	at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.publishServiceEvent(ServiceRegistry.java:710)
	at org.eclipse.osgi.internal.serviceregistry.ServiceRegistrationImpl.register(ServiceRegistrationImpl.java:129)
	at org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.registerService(ServiceRegistry.java:206)
	at org.eclipse.osgi.framework.internal.core.BundleContextImpl.registerService(BundleContextImpl.java:507)
	at org.apache.cxf.dosgi.dsw.Activator.start(Activator.java:78)
	at org.apache.cxf.dosgi.singlebundle.AggregatedActivator.startEmbeddedActivators(AggregatedActivator.java:115)
	at org.apache.cxf.dosgi.singlebundle.AggregatedActivator.start(AggregatedActivator.java:46)
	at org.eclipse.osgi.framework.internal.core.BundleContextImpl$1.run(BundleContextImpl.java:783)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.eclipse.osgi.framework.internal.core.BundleContextImpl.startActivator(BundleContextImpl.java:774)
	at org.eclipse.osgi.framework.internal.core.BundleContextImpl.start(BundleContextImpl.java:755)
	at org.eclipse.osgi.framework.internal.core.BundleHost.startWorker(BundleHost.java:352)
	at org.eclipse.osgi.framework.internal.core.AbstractBundle.resume(AbstractBundle.java:370)
	at org.eclipse.osgi.framework.internal.core.Framework.resumeBundle(Framework.java:1068)
	at org.eclipse.osgi.framework.internal.core.StartLevelManager.resumeBundles(StartLevelManager.java:557)
	at org.eclipse.osgi.framework.internal.core.StartLevelManager.incFWSL(StartLevelManager.java:464)
	at org.eclipse.osgi.framework.internal.core.StartLevelManager.doSetStartLevel(StartLevelManager.java:248)
	at org.eclipse.osgi.framework.internal.core.StartLevelManager.dispatchEvent(StartLevelManager.java:445)
	at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:227)
	at org.eclipse.osgi.framework.eventmgr.EventManager$EventThread.run(EventManager.java:337)
Caused by: org.apache.cxf.aegis.DatabindingException: Could not parse xml.. Nested exception is javax.xml.stream.XMLStreamException: ParseError at [row,col]:[1,345]
Message: expected start or end tag
	at org.apache.cxf.aegis.type.xml.DocumentType.readObject(DocumentType.java:74)
	at org.apache.cxf.aegis.type.basic.ObjectType.readObject(ObjectType.java:141)
	at org.apache.cxf.aegis.type.basic.ArrayType.readCollection(ArrayType.java:86)
	at org.apache.cxf.aegis.type.collection.CollectionType.readObject(CollectionType.java:52)
	at org.apache.cxf.aegis.AegisXMLStreamDataReader.read(AegisXMLStreamDataReader.java:82)
	at org.apache.cxf.aegis.databinding.XMLStreamDataReader.read(XMLStreamDataReader.java:61)
	... 100 more
Caused by: javax.xml.stream.XMLStreamException: ParseError at [row,col]:[1,345]
Message: expected start or end tag
	at org.apache.cxf.staxutils.DepthXMLStreamReader.nextTag(DepthXMLStreamReader.java:242)
	at org.apache.cxf.aegis.type.xml.DocumentType.readObject(DocumentType.java:69)
	... 105 more",Eclipse Equinox + Red hat linux,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-11-25 01:06:04.46,,,no_permission,,,,,,,,,,,,,113995,,,Sun Dec 27 16:19:52 UTC 2009,,,,,,0|i13zl3:,231395,,,,,,,,25/Nov/09 01:06;bmargulies;Could you possibly repro this WITHOUT dOSGI? I don't have a good way to set up and debug this possible Aegis issue in there.,25/Nov/09 06:43;mikkelbk;Sorry I have only worked with dOSGI so I do not have this option.,"27/Dec/09 15:33;bmargulies;Oh, yuck. An autoboxed collection. Does it work better with Double[]?
","27/Dec/09 15:50;bmargulies;This is a fine mess. I've reproduced it without dOSGI. The XML response from the server is well-formed, so the error has be a result of the reading code getting confused. However, the use of 'anyType' is not a good sign.

{noformat}
<?xml version=""1.0""?>
<soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/"">
    <soap:Body>
        <ns1:returnCollectionOfPrimitiveArraysResponse xmlns:ns1=""http://java5.type.aegis.cxf.apache.org"">
            <ns1:return>
                <ns2:anyType xmlns:ns2=""http://cxf.apache.org/arrays"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:type=""ns1:ArrayOfDouble"">
                    <ns1:double>3.14</ns1:double>
                    <ns1:double>2.0</ns1:double>
                    <ns1:double>-666.6</ns1:double>
                </ns2:anyType>
                <ns2:anyType xmlns:ns2=""http://cxf.apache.org/arrays"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:type=""ns1:ArrayOfDouble"">
                    <ns1:double>-666.6</ns1:double>
                    <ns1:double>3.14</ns1:double>
                    <ns1:double>2.0</ns1:double>
                    <ns1:double>0.0</ns1:double>
                </ns2:anyType>
            </ns1:return>
        </ns1:returnCollectionOfPrimitiveArraysResponse>
    </soap:Body>
</soap:Envelope>
{noformat}","27/Dec/09 16:19;bmargulies;Fixed in r894074. All uses of primitive arrays as generic parameters were busted.
",,,,,,,,,,,,,,,,,,,,,,,,,,
evaluatePreconditions() in RequestImpl should also check the If-None-Match header,CXF-2592,12444203,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,,freemant,freemant,26/Dec/09 05:18,01/Feb/10 19:02,14/Mar/19 02:29,29/Dec/09 15:23,2.2.5,,,,,,,,,,,,,,2.2.6,,,,JAX-RS,,,,,,0,,,,"Currently  the code is:

    public ResponseBuilder evaluatePreconditions(Date lastModified, EntityTag eTag) {
        ResponseBuilder rb = evaluatePreconditions(eTag);
        if (rb != null) {
            return rb;
        }
        return evaluatePreconditions(lastModified);
    }
    public ResponseBuilder evaluatePreconditions(EntityTag eTag) {
        String ifMatch = getHeaderValue(HttpHeaders.IF_MATCH);
        ...
    }

which is checking the If-Match header. While it is fine to check the If-Match header, it should also check the 
If-None-Match header which is more often used for GET requests, along with the If-Modified-Since header. 
This is what the two-argument version of evaluatePreconditions() is supposed to do.
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-12-29 13:20:47.858,,,no_permission,,,,,,,,,,,,,113994,,,Tue Dec 29 15:23:38 UTC 2009,,,,,,0|i0v0wf:,179119,,,,,,,,"29/Dec/09 13:20;sergey_beryozkin;here is the code for evaluatePreconditions(EntitiTag tag) :

public ResponseBuilder evaluatePreconditions(EntityTag eTag) {
        ResponseBuilder rb = evaluateIfMatch(eTag);
        if (rb == null) {
            rb = evaluateIfNonMatch(eTag);
        }
        return rb;
    }

evaluateIfNonMatch(EntityTag eTag) should be evaluating If-None-match. 

Does it not work for you ? If yes then can you post some more details please ?
","29/Dec/09 14:21;freemant;I think we aren't looking at the same version. In 2.2.5 the code is shown below:

    public ResponseBuilder evaluatePreconditions(EntityTag eTag) {
        String ifMatch = getHeaderValue(HttpHeaders.IF_MATCH);
        
        if (ifMatch == null || ifMatch.equals(""*"")) {
            return null;
        }
        
        try {
            EntityTag requestTag = EntityTag.valueOf(ifMatch);
            if (requestTag.equals(eTag) && !requestTag.isWeak()) {
                return null;
            }
        } catch (IllegalArgumentException ex) {
            // ignore
        }
        
        return Response.status(Response.Status.PRECONDITION_FAILED).tag(eTag);
    }
",29/Dec/09 15:23;sergey_beryozkin;http://svn.apache.org/viewvc?rev=894421&view=rev,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"MAPCodec : memory leak with an async client with network issues (connection timeout, read timeout etc)",CXF-2591,12444164,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Critical,Fixed,dkulp,tsauzedde,tsauzedde,24/Dec/09 13:23,01/Feb/10 19:02,14/Mar/19 02:29,08/Jan/10 14:48,2.2.5,,,,,,,,,,,,,,2.1.9,2.2.6,,,WS-* Components,,,,,,0,,,,"Context :
 a JAX-WS asynchronous client, with WS-Adressing enabled
 when there are network issues like connection timeout, read timeout etc,

Observed facts :
MAPCodec::uncorrelatedExchanges is not cleaned when the client is trying to request the server and there is a network issue.

In such a case, the InterceptorChain is by-passed, so MAPCodec::handleFault() is NOT called and so the MAPCodec::uncorrelatedExchanges grows and grows until OOM :-(

Don't have any patch (yet) to provide because this is something more architectural than technical :-(

When a network issue occurs, this throws an ExecutionException in JaxwsClientCallback::handleResponse(), the ""normal"" InterceptorChain is then by-passed there IMHO ...

",CXF 2.2.2 & 2.2.5 / JDK 1.6 / Linux (Ubuntu 9.10),,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113993,,,2009-12-24 13:23:30.0,,,,,,0|i0uzf3:,178879,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add directories to svn:ignore created by build,CXF-2588,12443885,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,dkulp,garydgregory,,21/Dec/09 05:13,10/Mar/11 23:16,14/Mar/19 02:29,21/Dec/09 18:36,,,,,,,,,,,,,,,2.2.6,,,,Build system,,,,,,0,,,,"A local build creates directories that show up as dirty to SVN, they should be added to svn:ignore. They are:

- common/xjc/boolean/target
- common/xjc/boolean-test/target","Apache Maven 2.2.1 (r801777; 2009-08-06 12:16:01-0700)
Java version: 1.6.0_16
Java home: C:\Program Files\Java\jdk1.6.0_16\jre
Default locale: en_US, platform encoding: Cp1252
OS name: ""windows vista"" version: ""6.0"" arch: ""amd64"" Family: ""windows""

java version ""1.6.0_16""
Java(TM) SE Runtime Environment (build 1.6.0_16-b01)
Java HotSpot(TM) 64-Bit Server VM (build 14.2-b01, mixed mode)

Apache Ant version 1.7.1 compiled on June 27 2008

Microsoft Windows [Version 6.0.6002]",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-12-21 18:36:20.869,,,no_permission,,Novice,,,,,,,,,,,113991,,,Mon Dec 21 18:36:20 UTC 2009,,,,,,0|i1aenb:,268839,,,,,,,,"21/Dec/09 18:36;dkulp;
Thanks.  I had target in my ignore list in my ~/.subversion/config so didn't notice it.  ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
wsdl2java error when there are several nested wsdl:import ,CXF-2587,12443870,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,bsorrentino,bsorrentino,20/Dec/09 20:17,01/Feb/10 19:02,14/Mar/19 02:29,21/Dec/09 20:09,2.2.5,,,,,,,,,,,,,,2.1.9,2.2.6,,,Tooling,,,,,,0,,,,"I have used CXF 2.2.5 to generate java class from a complex wsdl generated from .NET environment and composed by the following files:

ContactCenter.Services.IVR.Accettazione.svc.WSDL
ContactCenter.Services.IVR.Accettazione.svc.wsdl.wsdl0
ContactCenter.Services.IVR.Accettazione.svc.wsdl.wsdl1
ContactCenter.Services.IVR.Accettazione.svc.xsd.xsd0
ContactCenter.Services.IVR.Accettazione.svc.xsd.xsd1
ContactCenter.Services.IVR.Accettazione.svc.xsd.xsd2
ContactCenter.Services.IVR.Accettazione.svc.xsd.xsd3
ContactCenter.Services.IVR.Accettazione.svc.xsd.xsd4

I have used maven to perform the wsdl2java generation but i have got the following error:

------------------------------------------------------------------------
[ERROR]BUILD ERROR
------------------------------------------------------------------------
java.lang.RuntimeException: Problem with WSDL: soap:header element is referring to an undefined wsdl:message element.



",,,,,,,,,,,,,,,,,20/Dec/09 20:28;bsorrentino;WSDL.zip;https://issues.apache.org/jira/secure/attachment/12428582/WSDL.zip,20/Dec/09 20:27;bsorrentino;pom.xml;https://issues.apache.org/jira/secure/attachment/12428581/pom.xml,,,,,2.0,,,,,,,,,,,,,,,,,,,,2009-12-21 20:09:24.983,,,no_permission,,,,,,,,,,,,,113990,,,Tue Dec 22 20:36:20 UTC 2009,,,,,,0|i14ex3:,233880,,,,,,,,20/Dec/09 20:27;bsorrentino;PROJECT POM,20/Dec/09 20:28;bsorrentino;WSDL FILES,"21/Dec/09 20:09;dkulp;

This is kind of a bug in wsdl4j.   The wsdl4j docs say the call to getMessage(QName) searches all the imports, but it really just searches the DIRECT imports, not the imports of imports.      Easily worked around in CXF code though.   Change committed.

To get it to work with 2.2.5, you can add an import into ContactCenter.Services.IVR.Accettazione.svc.WSDL for the wsdl0 import.   That way, both the imports will be available from the ""root"" wsdl4j definition and the message can be found.
","22/Dec/09 20:36;bsorrentino;Thanks for feedback
 
So ... If i would  apply the suggested workaround,  .. i've  download  the wsdl(s) and make the change by hand  


",,,,,,,,,,,,,,,,,,,,,,,,,,,
SOAP over JMS 1.0 support is broken,CXF-2586,12443838,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,freemant,freemant,19/Dec/09 15:09,11/Oct/10 14:45,14/Mar/19 02:29,07/Jan/10 21:50,2.2.5,,,,,,,,,,,,,,2.3,,,,Transports,,,,,,0,,,,"1) Run WSDLToJava on the WSDL example at http://cwiki.apache.org/CXF20DOC/soap-over-jms-10-support.html
2) Run the JMSGreeterPortType_GreeterPort_Server class generated.
3) It will throw an exception (see below).

Starting Server
Dec 19, 2009 10:50:57 PM org.springframework.context.support.AbstractApplicationContext prepareRefresh
INFO: Refreshing org.apache.cxf.bus.spring.BusApplicationContext@d6c16c: display name [org.apache.cxf.bus.spring.BusApplicationContext@d6c16c]; startup date [Sat Dec 19 22:50:57 HKT 2009]; root of context hierarchy
Dec 19, 2009 10:50:58 PM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions
INFO: Loading XML bean definitions from class path resource [META-INF/cxf/cxf.xml]
Dec 19, 2009 10:50:58 PM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions
INFO: Loading XML bean definitions from class path resource [META-INF/cxf/cxf-extension-corba.xml]
Dec 19, 2009 10:50:58 PM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions
INFO: Loading XML bean definitions from class path resource [META-INF/cxf/cxf-extension-jaxws.xml]
Dec 19, 2009 10:50:58 PM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions
INFO: Loading XML bean definitions from class path resource [META-INF/cxf/cxf-extension-soap.xml]
Dec 19, 2009 10:50:58 PM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions
INFO: Loading XML bean definitions from class path resource [META-INF/cxf/cxf-extension-xml.xml]
Dec 19, 2009 10:50:58 PM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions
INFO: Loading XML bean definitions from class path resource [META-INF/cxf/cxf-extension-addr.xml]
Dec 19, 2009 10:50:58 PM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions
INFO: Loading XML bean definitions from class path resource [META-INF/cxf/cxf-extension-javascript-client.xml]
Dec 19, 2009 10:50:58 PM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions
INFO: Loading XML bean definitions from class path resource [META-INF/cxf/cxf-extension-local.xml]
Dec 19, 2009 10:50:58 PM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions
INFO: Loading XML bean definitions from class path resource [META-INF/cxf/cxf-extension-http.xml]
Dec 19, 2009 10:50:58 PM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions
INFO: Loading XML bean definitions from class path resource [META-INF/cxf/cxf-extension-management.xml]
Dec 19, 2009 10:50:58 PM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions
INFO: Loading XML bean definitions from class path resource [META-INF/cxf/cxf-extension-http-jetty.xml]
Dec 19, 2009 10:50:58 PM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions
INFO: Loading XML bean definitions from class path resource [META-INF/cxf/cxf-extension-http.xml]
Dec 19, 2009 10:50:58 PM org.springframework.beans.factory.support.DefaultListableBeanFactory registerBeanDefinition
INFO: Overriding bean definition for bean 'org.apache.cxf.transport.http.policy.HTTPClientAssertionBuilder': replacing [Generic bean: class [org.apache.cxf.transport.http.policy.HTTPClientAssertionBuilder]; scope=singleton; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in class path resource [META-INF/cxf/cxf-extension-http.xml]] with [Generic bean: class [org.apache.cxf.transport.http.policy.HTTPClientAssertionBuilder]; scope=singleton; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in class path resource [META-INF/cxf/cxf-extension-http.xml]]
Dec 19, 2009 10:50:58 PM org.springframework.beans.factory.support.DefaultListableBeanFactory registerBeanDefinition
INFO: Overriding bean definition for bean 'org.apache.cxf.transport.http.policy.HTTPServerAssertionBuilder': replacing [Generic bean: class [org.apache.cxf.transport.http.policy.HTTPServerAssertionBuilder]; scope=singleton; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in class path resource [META-INF/cxf/cxf-extension-http.xml]] with [Generic bean: class [org.apache.cxf.transport.http.policy.HTTPServerAssertionBuilder]; scope=singleton; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in class path resource [META-INF/cxf/cxf-extension-http.xml]]
Dec 19, 2009 10:50:58 PM org.springframework.beans.factory.support.DefaultListableBeanFactory registerBeanDefinition
INFO: Overriding bean definition for bean 'org.apache.cxf.transport.http.policy.NoOpPolicyInterceptorProvider': replacing [Generic bean: class [org.apache.cxf.transport.http.policy.NoOpPolicyInterceptorProvider]; scope=singleton; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in class path resource [META-INF/cxf/cxf-extension-http.xml]] with [Generic bean: class [org.apache.cxf.transport.http.policy.NoOpPolicyInterceptorProvider]; scope=singleton; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in class path resource [META-INF/cxf/cxf-extension-http.xml]]
Dec 19, 2009 10:50:58 PM org.springframework.beans.factory.support.DefaultListableBeanFactory registerBeanDefinition
INFO: Overriding bean definition for bean 'org.apache.cxf.transport.http.ClientOnlyHTTPTransportFactory': replacing [Generic bean: class [org.apache.cxf.transport.http.ClientOnlyHTTPTransportFactory]; scope=singleton; abstract=false; lazyInit=true; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in class path resource [META-INF/cxf/cxf-extension-http.xml]] with [Generic bean: class [org.apache.cxf.transport.http.ClientOnlyHTTPTransportFactory]; scope=singleton; abstract=false; lazyInit=true; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in class path resource [META-INF/cxf/cxf-extension-http.xml]]
Dec 19, 2009 10:50:58 PM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions
INFO: Loading XML bean definitions from class path resource [META-INF/cxf/cxf-extension-jms.xml]
Dec 19, 2009 10:50:58 PM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions
INFO: Loading XML bean definitions from class path resource [META-INF/cxf/cxf-extension-object-binding.xml]
Dec 19, 2009 10:50:58 PM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions
INFO: Loading XML bean definitions from class path resource [META-INF/cxf/cxf-extension-http-binding.xml]
Dec 19, 2009 10:50:58 PM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions
INFO: Loading XML bean definitions from class path resource [META-INF/cxf/cxf-extension-jaxrs-binding.xml]
Dec 19, 2009 10:50:58 PM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions
INFO: Loading XML bean definitions from class path resource [META-INF/cxf/cxf-extension-ws-security.xml]
Dec 19, 2009 10:50:58 PM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions
INFO: Loading XML bean definitions from class path resource [META-INF/cxf/cxf-extension-policy.xml]
Dec 19, 2009 10:50:58 PM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions
INFO: Loading XML bean definitions from class path resource [META-INF/cxf/cxf-extension-rm.xml]
Dec 19, 2009 10:50:58 PM org.springframework.context.support.AbstractApplicationContext obtainFreshBeanFactory
INFO: Bean factory for application context [org.apache.cxf.bus.spring.BusApplicationContext@d6c16c]: org.springframework.beans.factory.support.DefaultListableBeanFactory@6c585a
Dec 19, 2009 10:50:58 PM org.springframework.beans.factory.support.DefaultListableBeanFactory preInstantiateSingletons
INFO: Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@6c585a: defining beans [cxf,org.apache.cxf.bus.spring.BusApplicationListener,org.apache.cxf.bus.spring.BusWiringBeanFactoryPostProcessor,org.apache.cxf.bus.spring.Jsr250BeanPostProcessor,org.apache.cxf.bus.spring.BusExtensionPostProcessor,org.apache.cxf.resource.ResourceManager,org.apache.cxf.configuration.Configurer,org.apache.cxf.binding.BindingFactoryManager,org.apache.cxf.transport.DestinationFactoryManager,org.apache.cxf.transport.ConduitInitiatorManager,org.apache.cxf.wsdl.WSDLManager,org.apache.cxf.phase.PhaseManager,org.apache.cxf.workqueue.WorkQueueManager,org.apache.cxf.buslifecycle.BusLifeCycleManager,org.apache.cxf.endpoint.ServerRegistry,org.apache.cxf.endpoint.ServerLifeCycleManager,org.apache.cxf.endpoint.ClientLifeCycleManager,org.apache.cxf.transports.http.QueryHandlerRegistry,org.apache.cxf.endpoint.EndpointResolverRegistry,org.apache.cxf.headers.HeaderManager,org.apache.cxf.catalog.OASISCatalogManager,org.apache.cxf.endpoint.ServiceContractResolverRegistry,org.apache.cxf.binding.corba.CorbaBindingFactory,org.apache.cxf.binding.corba.wsdl.WSDLExtensionRegister#0,org.apache.cxf.jaxws.context.WebServiceContextResourceResolver,org.apache.cxf.jaxws.context.WebServiceContextImpl,org.apache.cxf.binding.soap.SoapBindingFactory,org.apache.cxf.binding.soap.SoapTransportFactory,org.apache.cxf.binding.soap.customEditorConfigurer,org.apache.cxf.binding.xml.XMLBindingFactory,org.apache.cxf.ws.addressing.policy.AddressingAssertionBuilder,org.apache.cxf.ws.addressing.policy.AddressingPolicyInterceptorProvider,org.apache.cxf.ws.addressing.policy.UsingAddressingAssertionBuilder,org.apache.cxf.javascript.JavascriptQueryHandlerRegistry,org.apache.cxf.transport.local.LocalTransportFactory,org.apache.cxf.transport.http.policy.HTTPClientAssertionBuilder,org.apache.cxf.transport.http.policy.HTTPServerAssertionBuilder,org.apache.cxf.transport.http.policy.NoOpPolicyInterceptorProvider,org.apache.cxf.transport.http.ClientOnlyHTTPTransportFactory,org.apache.cxf.management.InstrumentationManager,org.apache.cxf.transport.http_jetty.JettyHTTPTransportFactory,org.apache.cxf.transport.jms.JMSTransportFactory,org.apache.cxf.binding.object.ObjectBindingFactory,org.apache.cxf.binding.http.HttpBindingFactory,org.apache.cxf.jaxrs.JAXRSBindingFactory,org.apache.cxf.ws.security.policy.WSSecurityPolicyLoader,org.apache.cxf.ws.policy.AssertionBuilderRegistry,org.apache.cxf.ws.policy.PolicyInterceptorProviderRegistry,org.apache.cxf.ws.policy.attachment.external.DomainExpressionBuilderRegistry,org.apache.cxf.ws.policy.attachment.external.EndpointReferenceDomainExpressionBuilder,org.apache.cxf.ws.policy.PolicyBuilder,org.apache.cxf.ws.policy.PolicyEngine,org.apache.cxf.ws.policy.attachment.wsdl11.Wsdl11AttachmentPolicyProvider,org.apache.cxf.ws.policy.attachment.ServiceModelPolicyProvider,org.apache.cxf.ws.policy.mtom.MTOMAssertionBuilder,org.apache.cxf.ws.policy.mtom.MTOMPolicyInterceptorProvider,org.apache.cxf.ws.rm.RMManager,org.apache.cxf.ws.rm.policy.RMPolicyInterceptorProvider,org.apache.cxf.ws.rm.RMAssertionBuilder]; root of factory hierarchy
Dec 19, 2009 10:50:59 PM org.apache.cxf.service.factory.ReflectionServiceFactoryBean buildServiceFromClass
INFO: Creating Service {http://ss.ttdev.com/}JMSGreeterPortTypeImplService from class com.ttdev.ss.JMSGreeterPortType
Exception in thread ""main"" javax.xml.ws.WebServiceException: org.apache.cxf.service.factory.ServiceConstructionException
	at org.apache.cxf.jaxws.EndpointImpl.doPublish(EndpointImpl.java:275)
	at org.apache.cxf.jaxws.EndpointImpl.publish(EndpointImpl.java:209)
	at org.apache.cxf.jaxws.spi.ProviderImpl.createAndPublishEndpoint(ProviderImpl.java:84)
	at javax.xml.ws.Endpoint.publish(Endpoint.java:170)
	at com.ttdev.ss.JMSGreeterPortType_GreeterPort_Server.<init>(JMSGreeterPortType_GreeterPort_Server.java:19)
	at com.ttdev.ss.JMSGreeterPortType_GreeterPort_Server.main(JMSGreeterPortType_GreeterPort_Server.java:23)
Caused by: org.apache.cxf.service.factory.ServiceConstructionException
	at org.apache.cxf.frontend.ServerFactoryBean.create(ServerFactoryBean.java:127)
	at org.apache.cxf.jaxws.JaxWsServerFactoryBean.create(JaxWsServerFactoryBean.java:167)
	at org.apache.cxf.jaxws.EndpointImpl.getServer(EndpointImpl.java:346)
	at org.apache.cxf.jaxws.EndpointImpl.doPublish(EndpointImpl.java:259)
	... 5 more
Caused by: java.net.MalformedURLException: unknown protocol: jms
	at java.net.URL.<init>(URL.java:574)
	at java.net.URL.<init>(URL.java:464)
	at java.net.URL.<init>(URL.java:413)
	at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.<init>(JettyHTTPDestination.java:96)
	at org.apache.cxf.transport.http_jetty.JettyHTTPTransportFactory.createDestination(JettyHTTPTransportFactory.java:116)
	at org.apache.cxf.transport.http_jetty.JettyHTTPTransportFactory.getDestination(JettyHTTPTransportFactory.java:103)
	at org.apache.cxf.binding.soap.SoapTransportFactory.getDestination(SoapTransportFactory.java:74)
	at org.apache.cxf.endpoint.ServerImpl.initDestination(ServerImpl.java:90)
	at org.apache.cxf.endpoint.ServerImpl.<init>(ServerImpl.java:69)
	at org.apache.cxf.frontend.ServerFactoryBean.create(ServerFactoryBean.java:106)
	... 8 more
",Ubuntu 9.10,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-12-21 18:41:40.995,,,no_permission,,,,,,,,,,,,,113989,,,Mon Dec 21 18:41:40 UTC 2009,,,,,,0|i0v26n:,179327,,,,,,,,"21/Dec/09 18:41;dkulp;
Technically, this is a documentation issue.   The SOAP over JMS spec support is a new feature for 2.3 which has not been released yet.   I've updated the docs to add a note about that to the page.   

Thus, this should NOT be working with 2.2.x as 2.2.x does not support the soap/jms spec.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Already connected exception when using a proxy created with JAXRSClientFactory,CXF-2585,12443552,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,sergey_beryozkin,sallegro,sallegro,16/Dec/09 17:06,01/Feb/10 19:02,14/Mar/19 02:29,17/Dec/09 18:33,2.2.5,,,,,,,,,,,,,,2.2.6,2.3,,,JAX-RS,,,,,,0,,,,"I'm trying to get a very simple Rest client working, but I always got this exception:

java.lang.IllegalStateException: Already connected
	at java.net.HttpURLConnection.setFixedLengthStreamingMode(HttpURLConnection.java:100)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.thresholdNotReached(HTTPConduit.java:1885)
	at org.apache.cxf.io.AbstractThresholdOutputStream.close(AbstractThresholdOutputStream.java:99)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.close(HTTPConduit.java:1976)
	at org.apache.cxf.transport.AbstractConduit.close(AbstractConduit.java:66)
	at org.apache.cxf.transport.http.HTTPConduit.close(HTTPConduit.java:637)
	at org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor.handleMessage(MessageSenderInterceptor.java:62)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
	at org.apache.cxf.jaxrs.client.ClientProxyImpl.doChainedInvocation(ClientProxyImpl.java:429)
	at org.apache.cxf.jaxrs.client.ClientProxyImpl.invoke(ClientProxyImpl.java:166)
	at $Proxy16.doSomething(Unknown Source)
	at com.francetelecom.resttest.RestTest.main(RestTest.java:27)

Here is my jax-rs interface:

@Path(""/"")
public interface RestWS {
    @POST
    @Path(""/test"")
    public String doSomething( @QueryParam(""param"") String paramName);
}

And here the way my client uses it:

RestWS proxy = JAXRSClientFactory.create(""http://localhost:8080/RestWSMock"",RestWS.class);
proxy.doSomething(""bob"");

I can not get it simpler. Any idea what's wrong ?
regards","JDK 1.5.0.18
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-12-16 20:48:51.179,,,no_permission,,Novice,,,,,,,,,,,113988,,,Tue Dec 22 10:33:04 UTC 2009,,,,,,0|i14e8n:,233770,,,,,,,,"16/Dec/09 20:48;sergey_beryozkin;it is a bug affecting a proxy based flavor only. 
The problem is that a proxy does not indicate to the transport-level HttpConduit that an empty POST (with no request body) is coming which is something that never occurs with SOAP proxies.

It will be fixed for soon to be released 2.2.6

Couple of workarounds.
1. Use WebClient :

Response r = WebClient.create(endpointAddress).query(""param"", ""bob"").post(null);
String s = (String)r.getEntity();

2. If you do prefer to use a proxy then for the empty POST be processed correctly, you can temporarily register a CXF out interceptor
with a proxy and set a ""org.apache.cxf.post.empty"" property on a message - let me know please if you'd like to try this option and I will post a code for the interceptor

thanks","17/Dec/09 13:28;sallegro;Thank's for your quick answer
I prefer the 2nd workaround, and I will enjoy some code for the interceptor.
(PS: in fact, I setup my proxy using Spring, not JAXRSClientFactory directly)
","17/Dec/09 16:33;sergey_beryozkin;Hi,

here is the code for a custom interceptor :

public class EmptyPostOutInterceptor extends AbstractPhaseInterceptor<Message> {
                
        public EmptyPostOutInterceptor() {
             super(Phase.PRE_MARSHAL);
            
        } 

        public void handleMessage(Message message) throws Fault {
            if (""POST"".equals(message.get(Message.HTTP_REQUEST_METHOD))) {
                message.put(""org.apache.cxf.post.empty"", true);
            }
        }
    }

you can register it from Spring like this, assuming you use jaxrs:client :

<jaxrs:client>
<jaxrs:outInterceptors>
   <bean class=""org.custom.EmptyPostOutInterceptor""/>
</jaxrs:outInterceptors>
</jaxrs:client>


Here is a Java code :

@Test
    public void testEmptyPostProxy() throws Exception {
        JAXRSClientFactoryBean bean = new JAXRSClientFactoryBean(); 
        bean.setAddress(""http://localhost:9080"");
        bean.setResourceClass(BookStore.class);
        bean.getOutInterceptors().add(new EmptyPostOutInterceptor());
        BookStore store = bean.create(BookStore.class);
        store.emptypost();
        assertEquals(204, WebClient.client(store).getResponse().getStatus());
    }

give it a try please and let me know how it goes. 
It is really a temp measure, the fix will be in 2.2.6 (to be released possibly in Jan)","18/Dec/09 13:12;sallegro;Hello, 

Using your Interceptor code, I got now this exception:

18 déc. 2009 18:05:25 org.apache.cxf.phase.PhaseInterceptorChain doIntercept
ATTENTION: Interceptor has thrown exception, unwinding now
org.apache.cxf.interceptor.Fault: Could not send Message.
at org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor.handleMessage(MessageSenderInterceptor.java:64)
at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
at org.apache.cxf.jaxrs.client.ClientProxyImpl.doChainedInvocation(ClientProxyImpl.java:429)
at org.apache.cxf.jaxrs.client.ClientProxyImpl.invoke(ClientProxyImpl.java:166)
at $Proxy74.createCustomer(Unknown Source)
...

Caused by: java.io.IOException: Introuvable
at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleResponseInternal(HTTPConduit.java:2109)
at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleResponse(HTTPConduit.java:2057)
at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.close(HTTPConduit.java:1982)
at org.apache.cxf.transport.AbstractConduit.close(AbstractConduit.java:66)
at org.apache.cxf.transport.http.HTTPConduit.close(HTTPConduit.java:637)
at org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor.handleMessageMessageSenderInterceptor.java:62)

... 45 more

 

Any Idea ?
Thanks for your help.

","18/Dec/09 13:26;sergey_beryozkin;Perhaps the remote endpoint is now returns an error or not responding ?

Can you capture please what happens on the wire ?

Suppose an enpoint is listening on somehost:8080, you can use a tool like http://www.pocketsoap.com/tcptrace/ (Windows) or similar, tell it to listen on localhost:8081 and redirect to somehost:8080 and then create a client using a 8081 port...

cheers, Sergey
","21/Dec/09 16:56;sallegro;Hello,
Sorry, you're completly right.
I was using this annotation
@Path(""/webform.html?cmd=execute&workflow=createAccount"") for a method.
And CXF did escape ""?"" and ""&"" characters and that's why my endpoint was
not responding.
BTW, is there a way to force a queryparam (that always has the same
value, like the ""cmd=execute"" above) for a method, such as it is not a
customizable parameter of this method ?
Thanks
 
","21/Dec/09 18:12;sergey_beryozkin;Hi,

do you mean making it such that a proxy adds this 

'cmd=execute' pair by default ?

It is not really possible with the proxy based api ? Or may be I've misunderstood the question ? What exactly you'd like to see happening ?

Perhaps the interface can be updated such that this Query param is not even in the signature ?

cheers, Sergey","22/Dec/09 09:00;sallegro;Hi,
Yes, that's what I meant: Having ""cmd=execute"" by default, without having to put it in the signature.
I tried something like this:
@Path(""/"")
@Produces(""application/xml"")
public interface FlexibleHostingService {
    @POST
    @Path(""/webform.html?cmd=execute"")
    public String createCustomer(@QueryParam(""workflow"") String workflow);
}

But this proxy escaped '?' and '=', thus posting to a non-existing endpoint.
 
Regards,
Stéphane

","22/Dec/09 10:33;sergey_beryozkin;Hi,

@Path(""/webform.html?cmd=execute"")

identifies the value for the uri path component, so '?' and '=' have to be encoded. JAXRS does not provide for embedding query values inside a @Path annotation

How is the service endpoint written ? Is it a 3rd-party endpoint or is it yourself who wrote it ? If yes then may be that service endpoint can be updated to default to ""execute"" if no ""cmd"" query is provided ?

Another option to try is to change your method signature like this :

String createCustomer(@QueryParam("""") QueryBean bean);

public class QueryBean {
    private String cmd = ""execute"";
    private String workflow;

    public QueryBean() {
         this(""defaultWorkflowValue"")
    }
    public QueryBean(String workflow) { 
         this.workflow = workflow;
    }

    public void setCmd(String value) {
        cmd = value;
    }
    public String getCmd() {
        return cmd;
    }

    public void setWorkflow(String value) {
        workflow = value;
    }
    public String getWorkflow() {
        return workflow;
    }
}

and then

proxy.createCustomer(new QueryBean(""SomeWorkflowValue""));

This option is good in that you can add a support for new queries by updating the query bean and the service implementation but without changing the signature

Finally, you can try to do

@Path(""/webform.html"")
public String createCustomer(@QueryParam(""workflow"") String workflow);

But then update Message.REQUEST_URI value on the current message in the CXF out interceptor, by appending ""&cmd=execute"" to it

hope it helps, Sergey

 ",,,,,,,,,,,,,,,,,,,,,,
NullPointerException in CXFAuthenticator.getPasswordAuthentication() if password is null,CXF-2584,12443518,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,cleclerc,cleclerc,16/Dec/09 10:15,01/Feb/10 19:02,14/Mar/19 02:29,16/Dec/09 16:42,2.2.6,,,,,,,,,,,,,,2.2.6,,,,Transports,,,,,,0,,,,"{{NullPointerException}} in {{CXFAuthenticator.getPasswordAuthentication()}} if password is {{null}}.

Cause of the NPE :

{code:title=extract from org.apache.cxf.transport.http.CXFAuthenticator}

    protected PasswordAuthentication getPasswordAuthentication() { 
        ...
                    auth = new PasswordAuthentication(httpConduit.getAuthorization().getUserName(),
                                                      httpConduit.getAuthorization()
                                                          .getPassword().toCharArray());
       ...
{code}

Stack trace :

{noformat}
java.lang.RuntimeException: RuntimeException invoking http://localhost:8080/... : java.lang.NullPointerException
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:513)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.mapException(HTTPConduit.java:2010)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.close(HTTPConduit.java:1996)
	at org.apache.cxf.io.CacheAndWriteOutputStream.postClose(CacheAndWriteOutputStream.java:47)
	at org.apache.cxf.io.CachedOutputStream.close(CachedOutputStream.java:188)
	at org.apache.cxf.transport.AbstractConduit.close(AbstractConduit.java:66)
	at org.apache.cxf.transport.http.HTTPConduit.close(HTTPConduit.java:639)
	at org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor.handleMessage(MessageSenderInterceptor.java:62)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:239)
	at org.apache.cxf.jaxrs.client.ClientProxyImpl.doChainedInvocation(ClientProxyImpl.java:429)
	at org.apache.cxf.jaxrs.client.ClientProxyImpl.invoke(ClientProxyImpl.java:166)
	at $Proxy69.sayHello(Unknown Source)
	...
Caused by: java.lang.RuntimeException: java.lang.NullPointerException
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1014)
	at sun.net.www.protocol.http.HttpURLConnection.getHeaderField(HttpURLConnection.java:2211)
	at java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:382)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleResponseInternal(HTTPConduit.java:2110)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleResponse(HTTPConduit.java:2086)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.close(HTTPConduit.java:1984)
	... 70 more
Caused by: java.lang.NullPointerException
	at org.apache.cxf.transport.http.CXFAuthenticator.getPasswordAuthentication(CXFAuthenticator.java:96)
	at java.net.Authenticator.requestPasswordAuthentication(Authenticator.java:300)
	at sun.net.www.protocol.http.HttpURLConnection$1.run(HttpURLConnection.java:297)
	at java.security.AccessController.doPrivileged(Native Method)
	at sun.net.www.protocol.http.HttpURLConnection.privilegedRequestPasswordAuthentication(HttpURLConnection.java:293)
	at sun.net.www.protocol.http.HttpURLConnection.getServerAuthentication(HttpURLConnection.java:1795)
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1159)
	at java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:373)
	... 73 more
{noformat}",,,,,,,,,,,,,,,,,16/Dec/09 10:24;cleclerc;CXF-2584.patch;https://issues.apache.org/jira/secure/attachment/12428155/CXF-2584.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113987,,,Wed Dec 16 10:24:01 UTC 2009,,,,,,0|i0v0cf:,179029,,,,,,,,16/Dec/09 10:24;cleclerc;Proposed patch : check for non null authorization.username and username.password .,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Please remove Maven dependency on slf4j-jdk14,CXF-2583,12443515,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,gcc,gcc,16/Dec/09 09:27,18/Mar/10 15:50,14/Mar/19 02:29,16/Dec/09 19:24,2.2.4,,,,,,,,,,,,,,2.2.6,,,,Build system,,,,,,0,,,,"The Maven POM for CXF 2.2.4 contains the following lines:

            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-jdk14</artifactId>
                <version>1.5.8</version>
            </dependency>

This forces the SLF4J JDK14 binding  to be downloaded and included in any project using this POM. Even if we want to use Log4J instead, we have no choice about the JDK14 binding being included in our project.

We're using the Maven-Eclipse plugin to generate our Eclipse configuration. This results in slf4j-jdk14 being added to the classpath. Again this appears to be unavoidable.

SLF4J picks the first binding in the classpath. This appears to be unavoidable. There is no documented way to avoid it. Because J comes before L, it always picks the JDK binding over the Log4J binding. This makes it impossible to use Log4J instead.

I don't think any project should force users to choose a particular logging binding, as this defeats the whole point of SLF4J. Please just depend on the API, and let the developer or user install whatever actual binding they wish.",,900,900,,0%,900,900,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,Moderate,,,,,,,,,,,43159,,,2009-12-16 09:27:04.0,,,,,,0|i14f0v:,233897,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
wrapper InOuts not being generated per spec for single response part,CXF-2582,12443282,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,dkulp,dkulp,14/Dec/09 17:53,02/May/13 02:29,14/Mar/19 02:29,15/Dec/09 03:15,,,,,,,,,,,,,,,2.1.9,2.2.6,,,Tooling,,,,,,0,,,,"If a operation has schema like:
{code:xml}
            <element name=""testInOut"">
                <complexType>
                    <sequence>
                        <element minOccurs='0' name='val' type='xsd:int'/>
                        <element name='num' type='xsd:int'/>
                    </sequence>
                </complexType>
            </element>
            <element name=""testInOutResponse"">
                <complexType>
                    <sequence>
                        <element minOccurs='0' name='val' type='xsd:int'/>
                    </sequence>
                </complexType>
            </element>
{code}

we are generating:
Integer testInOut(java.lang.Integer, int)
instead of:
void testInOut(Holder<Integer>, int)
which is what the spec calls for and what the RI generates.",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113986,,,2009-12-14 17:53:06.0,,,,,,0|i14dzb:,233728,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Improper toString of Arrays during logging,CXF-2581,12443197,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,bharathganesh,bharathganesh,bharathganesh,13/Dec/09 11:51,01/Feb/10 19:02,14/Mar/19 02:29,08/Jan/10 17:22,,,,,,,,,,,,,,,2.1.9,2.2.6,,,,,,,,,0,,,,"During logging, we invoke toString on an array, which will generate junk result. This is happening at a number of places in the codebase.
A possible fix could be invoking Arrays.toString to convert the array into a readable String that gives the contents of the array.

Some places identified are:
org.apache.cxf.endpoint.ClientImpl Line 445
org.apache.cxf.tools.corba.idlepreprocessor.DefaultIncludeResolver line 67
org.apache.cxf.transport.http.HTTPConduit Line 410,411, 1381,1382
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2010-01-07 22:42:45.951,,,no_permission,,Moderate,,,,,,,,,,,113985,,,Fri Jan 08 17:22:34 UTC 2010,,,,,,0|i14a8n:,233122,,,,,,,,"07/Jan/10 22:42;dkulp;Bharath,  is with your commits and such, is this now considered resolved?

",08/Jan/10 17:22;bharathganesh;Identified and fixed all such occurrences on the trunk. ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Aegis reports duplicate tags for some complex types,CXF-2579,12443013,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,sergey_beryozkin,sergey_beryozkin,10/Dec/09 18:45,11/Oct/10 14:45,14/Mar/19 02:29,16/Dec/09 21:54,,,,,,,,,,,,,,,2.3,,,,Aegis Databinding,,,,,,0,,,,"See JAXRS AegisJSONProvider.testManyTags tests
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-12-16 21:25:57.643,,,no_permission,,,,,,,,,,,,,113984,,,Thu Dec 17 09:38:07 UTC 2009,,,,,,0|i0v26f:,179326,,,,,,,,"16/Dec/09 21:25;dkulp;
This is actually working ""as designed"" due to the way Aegis doesn't flatten collections down like JAXB does.   It creates a wrapper type which then results in a wrapper element. 

However, Benson recently added support for flattened arrays through the aegis xml config.   I'm updating that to also allow for flattened Collections as well as added a @XmlFlattenedArray annotation to aegis.    Thus, with the new annotation added to the Tags class, I can get the json to look a bit better.

Testing the fixes now.","16/Dec/09 21:54;dkulp;
Marking this resolved for 2.3.   The flattened array stuff is only on trunk and not on 2.2.x.   Thus, on 2.2.x, you would get the wrapper tag.
","17/Dec/09 09:38;sergey_beryozkin;This is awesome, thanks",,,,,,,,,,,,,,,,,,,,,,,,,,,,
JMS IlegalStateException when attempting to use Spring SingleConnectionFactory retrieved from JNDI,CXF-2577,12442846,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,rgavlin,rgavlin,09/Dec/09 11:18,01/Feb/10 19:02,14/Mar/19 02:29,10/Dec/09 03:35,2.3,,,,,,,,,,,,,,2.1.9,2.2.6,,,Transports,,,,,,0,,,,"A JMS IllegalStateException is thrown when I attempt to use a Spring SingleConnectionFactory retrieved directly from a local JNDI environment. A unit test and patch will be attached shortly. The stack trace generated by the unit test is listed below:

org.springframework.jms.IllegalStateException: setExceptionListener call not supported on proxy for shared Connection. Set the 'exceptionListener' property on the SingleConnectionFactory instead. Alternatively, activate SingleConnectionFactory's 'reconnectOnException' feature, which will allow for registering further ExceptionListeners to the recovery chain.; nested exception is javax.jms.IllegalStateException: setExceptionListener call not supported on proxy for shared Connection. Set the 'exceptionListener' property on the SingleConnectionFactory instead. Alternatively, activate SingleConnectionFactory's 'reconnectOnException' feature, which will allow for registering further ExceptionListeners to the recovery chain.
	at org.springframework.jms.support.JmsUtils.convertJmsAccessException(JmsUtils.java:271)
	at org.springframework.jms.support.JmsAccessor.convertJmsAccessException(JmsAccessor.java:168)
	at org.springframework.jms.core.JmsTemplate.execute(JmsTemplate.java:474)
	at org.springframework.jms.core.JmsTemplate.execute(JmsTemplate.java:436)
	at org.apache.cxf.transport.jms.JMSFactory.resolveOrCreateDestination(JMSFactory.java:236)
	at org.apache.cxf.transport.jms.JMSFactory.createJmsListener(JMSFactory.java:216)
	at org.apache.cxf.transport.jms.JMSFactory.createJmsListener(JMSFactory.java:156)
	at org.apache.cxf.transport.jms.JMSDestination.activate(JMSDestination.java:107)
	at org.apache.cxf.transport.AbstractObservable.setMessageObserver(AbstractObservable.java:48)
	at org.apache.cxf.transport.jms.JMSDestinationTest.setupJMSDestination(JMSDestinationTest.java:102)
	at org.apache.cxf.transport.jms.JMSDestinationTest.testGetSpringSingleConnectionFactoryFromWSDL(JMSDestinationTest.java:550)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.junit.internal.runners.TestMethod.invoke(TestMethod.java:59)
	at org.junit.internal.runners.MethodRoadie.runTestMethod(MethodRoadie.java:98)
	at org.junit.internal.runners.MethodRoadie$2.run(MethodRoadie.java:79)
	at org.junit.internal.runners.MethodRoadie.runBeforesThenTestThenAfters(MethodRoadie.java:87)
	at org.junit.internal.runners.MethodRoadie.runTest(MethodRoadie.java:77)
	at org.junit.internal.runners.MethodRoadie.run(MethodRoadie.java:42)
	at org.junit.internal.runners.JUnit4ClassRunner.invokeTestMethod(JUnit4ClassRunner.java:88)
	at org.junit.internal.runners.JUnit4ClassRunner.runMethods(JUnit4ClassRunner.java:51)
	at org.junit.internal.runners.JUnit4ClassRunner$1.run(JUnit4ClassRunner.java:44)
	at org.junit.internal.runners.ClassRoadie.runUnprotected(ClassRoadie.java:27)
	at org.junit.internal.runners.ClassRoadie.runProtected(ClassRoadie.java:37)
	at org.junit.internal.runners.JUnit4ClassRunner.run(JUnit4ClassRunner.java:42)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:45)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)
Caused by: javax.jms.IllegalStateException: setExceptionListener call not supported on proxy for shared Connection. Set the 'exceptionListener' property on the SingleConnectionFactory instead. Alternatively, activate SingleConnectionFactory's 'reconnectOnException' feature, which will allow for registering further ExceptionListeners to the recovery chain.
	at org.springframework.jms.connection.SingleConnectionFactory$SharedConnectionInvocationHandler.invoke(SingleConnectionFactory.java:505)
	at $Proxy36.setExceptionListener(Unknown Source)
	at org.springframework.jms.connection.SingleConnectionFactory.prepareConnection(SingleConnectionFactory.java:365)
	at org.springframework.jms.connection.SingleConnectionFactory.initConnection(SingleConnectionFactory.java:291)
	at org.springframework.jms.connection.SingleConnectionFactory.createConnection(SingleConnectionFactory.java:227)
	at org.springframework.jms.support.JmsAccessor.createConnection(JmsAccessor.java:184)
	at org.springframework.jms.core.JmsTemplate.execute(JmsTemplate.java:461)
	... 30 more


","Windows, JDK 1.6",,,,,,,,,,,,,,,,09/Dec/09 11:38;rgavlin;cxf-2577.patch;https://issues.apache.org/jira/secure/attachment/12427463/cxf-2577.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2009-12-10 03:35:29.179,,,no_permission,,,,,,,,,,,,,113983,,,Thu Dec 10 03:35:29 UTC 2009,,,,,,0|i1405b:,231486,,,,,,,,10/Dec/09 03:35;dkulp;Modified patch applied.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Download page does not have link to KEYS file,CXF-2576,12442779,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,,sebb@apache.org,sebb@apache.org,08/Dec/09 22:43,11/Oct/10 14:57,14/Mar/19 02:29,09/Dec/09 17:18,,,,,,,,,,,,,,,Invalid,,,,,,,,,,0,,,,"The download page http://cxf.apache.org/download.html should have a link to the KEYS file http://www.apache.org/dist/cxf/KEYS.

It would also be useful if there was a description of how to check sigs and hashes.

For example, as is done by CouchDB: http://couchdb.apache.org/downloads.html - see the end of the page.",http://cxf.apache.org/download.html,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-12-09 17:18:36.504,,,no_permission,,,,,,,,,,,,,113982,,,Wed Dec 09 17:18:36 UTC 2009,,,,,,0|i140bj:,231514,,,,,,,,"09/Dec/09 17:18;dkulp;Done.   Should sync in a couple hours.   Meanwhile, it's at:

http://cwiki.apache.org/CXF/download.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WS-Addressing interceptors throw NPE when processing JAX-WS @WebServiceProvider requests in MESSAGE mode,CXF-2572,12442432,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,akarypid,akarypid,04/Dec/09 10:10,01/Feb/10 19:02,14/Mar/19 02:29,04/Dec/09 21:06,2.2.4,2.2.5,2.3,,,,,,,,,,,,2.2.6,,,,JAX-WS Runtime,WS-* Components,,,,,0,,,,"When publishing a service using JAX-WS and the @WebServiceProvider using the MESSAGE mode (i.e. access to full SOAP envelope), the WS-Addressing interceptors throw an NPE.

Problem was first-reported here:
http://thread.gmane.org/gmane.comp.apache.cxf.user/4153
","WinXP32, Sun JDK 1.6.0_16",,,,,,,,,,,,,,,,04/Dec/09 10:14;akarypid;cxf-systests-ws-specs_Addressing-MMode-JAX-WS.patch;https://issues.apache.org/jira/secure/attachment/12426888/cxf-systests-ws-specs_Addressing-MMode-JAX-WS.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113979,,,2009-12-04 10:10:51.0,,,,,,0|i1aenj:,268840,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
wsdl2java and jax-ws-catalog: failing to resolve schemas included with xsd:include in jar-file,CXF-2571,12442325,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,hdahl,hdahl,03/Dec/09 09:40,05/Feb/10 09:18,14/Mar/19 02:29,10/Dec/09 18:04,2.1.8,2.2.5,,,,,,,,,,,,,2.1.9,2.2.6,,,,,,,,,0,,,,"cxf-codegen-plugin/wsdl2java (2.1.8, 2.2.5)

Refer user-list thread:
http://old.nabble.com/jax-ws-catalog-and-resolving-schemas-in-jars-that-do-xsd%3Ainclude-td26590812.html

Schema resolution from a jar-file (using jax-ws-catalog as per 4.4 Catalog Facility in the JAX-WS 2.1 spec) fails when:

* The referenced schema in a jar makes xsd:include on another schema in the
jar (all schemas in a jar share the same namespace).

Stacktrace below for CXF 2.1.8 below. CXF 2.2.5 also fails but with a NullPointerException.

Note: xsd:import works but requires imported schema to be in another
namespace.


Projects look like:

common-types-domain1
   META-INF/jax-ws-catalog.xml
   schemas/domain1/domain1-schema1.xsd
   schemas/domain1/domain1-schema2.xsd

wsdl-project-1
   src\main\resources\schemas\GetX.xsd
   src\main\resources\schemas\GetXService.wsdl

where the GetXService.wsdl imports GetX.xsd which imports
domain1-schema2.xsd like this:


GetX.xsd:

   <xsd:import namespace=""http://www.example.org/schemas/domain1""
       schemaLocation=""
http://www.example.org/schemas/domain1/domain1-schema2.xsd""/>

domain1-schema2.xsd:

   <xsd:include schemaLocation=""domain1-schema1.xsd""/>

common-types-domain1/META-INF/jax-ws-catalog.xml:

   <catalog xmlns=""urn:oasis:names:tc:entity:xmlns:xml:catalog""
prefer=""system"">
     <system systemId=""
http://www.example.org/schemas/domain1/domain1-schema1.xsd""
         uri=""classpath:schemas/domain1/domain1-schema1.xsd""/>
     <system systemId=""
http://www.example.org/schemas/domain1/domain1-schema2.xsd""
         uri=""classpath:schemas/domain1/domain1-schema2.xsd""/>
   </catalog>

results in:

Caused by: org.apache.cxf.tools.common.ToolException: Thrown by JAXB :
http://www.example.org/schemas/domain1/domain1-schema1.xsd
   at
org.apache.cxf.tools.wsdlto.databinding.jaxb.JAXBBindErrorListener.error(JAXBBindErrorListener.java:34)
   at
com.sun.tools.xjc.api.impl.s2j.SchemaCompilerImpl.error(SchemaCompilerImpl.java:285)
   at com.sun.tools.xjc.ErrorReceiver.error(ErrorReceiver.java:90)
   at
com.sun.tools.xjc.reader.internalizer.DOMForest.parse(DOMForest.java:402)
   at
com.sun.tools.xjc.reader.internalizer.DOMForest.parse(DOMForest.java:301)
   at
com.sun.tools.xjc.reader.internalizer.AbstractReferenceFinderImpl.startElement(AbstractReferenceFinderImpl.java:95)
   at
org.xml.sax.helpers.XMLFilterImpl.startElement(XMLFilterImpl.java:527)
   at com.sun.xml.bind.unmarshaller.DOMScanner.visit(DOMScanner.java:240)
   at com.sun.xml.bind.unmarshaller.DOMScanner.visit(DOMScanner.java:277)
   at com.sun.xml.bind.unmarshaller.DOMScanner.visit(DOMScanner.java:246)
   at com.sun.xml.bind.unmarshaller.DOMScanner.scan(DOMScanner.java:123)
   at
com.sun.tools.xjc.api.impl.s2j.SchemaCompilerImpl.parseSchema(SchemaCompilerImpl.java:135)
   at
org.apache.cxf.tools.wsdlto.databinding.jaxb.JAXBDataBinding.addSchemas(JAXBDataBinding.java:253)
   at
org.apache.cxf.tools.wsdlto.databinding.jaxb.JAXBDataBinding.initialize(JAXBDataBinding.java:196)
   at
org.apache.cxf.tools.wsdlto.WSDLToJavaContainer.generateTypes(WSDLToJavaContainer.java:588)
   at
org.apache.cxf.tools.wsdlto.WSDLToJavaContainer.processWsdl(WSDLToJavaContainer.java:239)
   at
org.apache.cxf.tools.wsdlto.WSDLToJavaContainer.execute(WSDLToJavaContainer.java:130)
   at
org.apache.cxf.tools.wsdlto.WSDLToJavaContainer.execute(WSDLToJavaContainer.java:283)
   at
org.apache.cxf.tools.common.toolspec.ToolRunner.runTool(ToolRunner.java:83)
   at org.apache.cxf.tools.wsdlto.WSDLToJava.run(WSDLToJava.java:103)
   at
org.apache.cxf.maven_plugin.WSDL2JavaMojo.processWsdl(WSDL2JavaMojo.java:337)
   ... 20 more
Caused by: java.io.FileNotFoundException:
http://www.example.org/schemas/domain1/domain1-schema1.xsd
   ... 39 more","Apache Maven 2.2.1
Java version: 1.5.0_21
OS name: ""windows xp""",,,,,,,,,,,,,,,,03/Dec/09 09:44;hdahl;jax-ws-catalog-test-20091203.zip;https://issues.apache.org/jira/secure/attachment/12426767/jax-ws-catalog-test-20091203.zip,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2009-12-07 21:42:14.924,,,no_permission,,,,,,,,,,,,,113978,,,Fri Feb 05 09:18:35 UTC 2010,,,,,,0|i0v21b:,179303,,,,,,,,"03/Dec/09 09:44;hdahl;Attached test-projects.

To reproduce problem, run the following in the root-project:

mvn -e clean install
","07/Dec/09 21:42;dkulp;
I got past the NPE in 2.2.5 (we were not setting the systemId), but ran into a bug in XJC.   They are doing:

new URI(locator.getSystemId()).resolve(new URI(schemaLocation))

to resolve the include.   However, that doesn't work with a ""jar"" url as the systemId of the original schema.   The URI in that case is considered opaque and thus resolve just returns the child value as is.       I THINK I can work around this by kind of DOM loading the schemas and preprocessing the includes and such, but yuck.   

I'm going to doubt I'll be able to fix this on 2.1.x as the databinding/schema code there is very  different.
","07/Dec/09 22:25;dkulp;
Workaround/hack committed to 2.2 branch.   Tomorrows snapshots should have the fix.   It would be great if you could rerun your tests and such with the snapshot.
","08/Dec/09 03:24;dkulp;
The NPE is gone and it looks like it's working, but not all the types are being generated.","09/Dec/09 13:18;hdahl;Verified:
- 2.2.6-SNAPSHOT: works OK!
- 2.1.9-SNAPSHOT: still broken. Getting error below:

---
Caused by: org.apache.maven.plugin.MojoExecutionException: Thrown by JAXB : unknown protocol: classpath
	at org.apache.cxf.maven_plugin.WSDL2JavaMojo.processWsdl(WSDL2JavaMojo.java:340)
	at org.apache.cxf.maven_plugin.WSDL2JavaMojo.execute(WSDL2JavaMojo.java:245)
	at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:490)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:694)
	... 17 more
Caused by: org.apache.cxf.tools.common.ToolException: Thrown by JAXB : unknown protocol: classpath
	at org.apache.cxf.tools.wsdlto.databinding.jaxb.JAXBBindErrorListener.error(JAXBBindErrorListener.java:34)
	at com.sun.tools.xjc.api.impl.s2j.SchemaCompilerImpl.error(SchemaCompilerImpl.java:285)
	at com.sun.tools.xjc.ErrorReceiver.error(ErrorReceiver.java:90)
	at com.sun.tools.xjc.reader.internalizer.DOMForest.parse(DOMForest.java:402)
	at com.sun.tools.xjc.reader.internalizer.DOMForest.parse(DOMForest.java:301)
	at com.sun.tools.xjc.reader.internalizer.AbstractReferenceFinderImpl.startElement(AbstractReferenceFinderImpl.java:95)
	at org.xml.sax.helpers.XMLFilterImpl.startElement(XMLFilterImpl.java:527)
	at com.sun.xml.bind.unmarshaller.DOMScanner.visit(DOMScanner.java:240)
	at com.sun.xml.bind.unmarshaller.DOMScanner.visit(DOMScanner.java:277)
	at com.sun.xml.bind.unmarshaller.DOMScanner.visit(DOMScanner.java:246)
	at com.sun.xml.bind.unmarshaller.DOMScanner.scan(DOMScanner.java:123)
	at com.sun.tools.xjc.api.impl.s2j.SchemaCompilerImpl.parseSchema(SchemaCompilerImpl.java:135)
	at org.apache.cxf.tools.wsdlto.databinding.jaxb.JAXBDataBinding.addSchemas(JAXBDataBinding.java:257)
	at org.apache.cxf.tools.wsdlto.databinding.jaxb.JAXBDataBinding.initialize(JAXBDataBinding.java:198)
	at org.apache.cxf.tools.wsdlto.WSDLToJavaContainer.generateTypes(WSDLToJavaContainer.java:588)
	at org.apache.cxf.tools.wsdlto.WSDLToJavaContainer.processWsdl(WSDLToJavaContainer.java:239)
	at org.apache.cxf.tools.wsdlto.WSDLToJavaContainer.execute(WSDLToJavaContainer.java:130)
	at org.apache.cxf.tools.wsdlto.WSDLToJavaContainer.execute(WSDLToJavaContainer.java:283)
	at org.apache.cxf.tools.common.toolspec.ToolRunner.runTool(ToolRunner.java:83)
	at org.apache.cxf.tools.wsdlto.WSDLToJava.run(WSDLToJava.java:103)
	at org.apache.cxf.maven_plugin.WSDL2JavaMojo.processWsdl(WSDL2JavaMojo.java:337)
	... 20 more


","05/Feb/10 09:18;hdahl;Verified:

2.1.9 is fixed.",,,,,,,,,,,,,,,,,,,,,,,,,
Consuming a wsdl file which is having a nested complex types in xsd,CXF-2569,12442181,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Blocker,Fixed,dkulp,vvvijayvaleti,vvvijayvaleti,02/Dec/09 05:05,01/Feb/10 19:02,14/Mar/19 02:29,09/Dec/09 03:53,2.2.3,2.2.4,2.2.5,,,,,,,,,,,,2.1.9,2.2.6,,,JAX-WS Runtime,,,,,,0,,,,"When we are trying to consume a wsdl file which is having a nested complex type xsd element we are getting an exception

IllegalArgumentException:Wrong Number of Arguments provided

when ever you have a nested complex type in xsd,in the ObjectFactory.java class will be having two create methods for the nested element.i feel cxf is not implemented properly to handle this kind of situation . i believe that cxf developers/community assuemd that there wont be any overloaded create methods in the OBjectFactory.java class

sample XSD
<xsd:complexType>
<xsd:sequence>
<xsd:element>
<xsd:complexType name=""testList"">
<xsd:sequence>
<xsd:element name=""test"" type=""xsd:string"" maxOccurs=""unbounded""/>
</xsd:sequence>
</xsd:element>
<xsd:element  name=""name""  type=""xsd:string""/>
</xsd:sequence>
</xsd:complexType>","jdk 1.5 ,windows xp,IBM websphere server",120,120,,0%,120,120,,,,,,,,,,08/Dec/09 12:49;vvvijayvaleti;Stack trace.txt;https://issues.apache.org/jira/secure/attachment/12427331/Stack+trace.txt,08/Dec/09 12:49;vvvijayvaleti;org.zip;https://issues.apache.org/jira/secure/attachment/12427330/org.zip,,,,,2.0,,,,,,,,,,,,,,,,,,,,2009-12-07 22:31:51.401,,,no_permission,,Moderate,,,,,,,,,,,113976,,,Tue Dec 08 12:49:11 UTC 2009,,,,,,0|i0uxj3:,178573,,,,,,,,"07/Dec/09 22:31;dkulp;
Can you create a testcase for this?    CXF never uses the ObjectFactory things.    All of that stuff is delegated down to JAXB.   Thus, I'd like to see a testcase to see what is happening.",08/Dec/09 12:49;vvvijayvaleti;Added attachments...you can find the stack trace and the source for replicating the issue,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
default values don't get quoted properly in generated Javascript,CXF-2568,12442091,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,,bmargulies,bmargulies,01/Dec/09 13:28,01/Feb/10 19:02,14/Mar/19 02:29,01/Dec/09 13:33,2.1.8,2.2.4,2.2.5,,,,,,,,,,,,2.1.9,2.2.6,,,JavaScript Client,,,,,,0,,,,"The schema stored all default values as strings. If they are really string values, they need to be quoted in Javascript. They are not.
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113975,,,Tue Dec 01 13:33:39 UTC 2009,,,,,,0|i0v0rr:,179098,,,,,,,,01/Dec/09 13:33;bmargulies;Fix checked in. Fix could be more comprehensively tested.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Missing translation for INSTRUMENTATION_REGISTER_FAULT_MSG,CXF-2566,12442010,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,dkulp,cleclerc,cleclerc,01/Dec/09 00:23,01/Feb/10 19:02,14/Mar/19 02:29,08/Dec/09 03:28,2.2.5,,,,,,,,,,,,,,2.1.9,2.2.6,,,Core,,,,,,0,,,,Translation is missing for INSTRUMENTATION_REGISTER_FAULT_MSG in rt/management/src/main/java/org/apache/cxf/management/counters/Messages.properties .,,,,,,,,,,,,,,,,,01/Dec/09 00:28;cleclerc;CXF-2566.patch;https://issues.apache.org/jira/secure/attachment/12426474/CXF-2566.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113974,,,Tue Dec 01 00:28:09 UTC 2009,,,,,,0|i0sy1j:,166992,,,,,,,,"01/Dec/09 00:28;cleclerc;Patch description :
* o.a.c.management.counters.CounterRepository : Add objectName vairable in the logger call to enhance log message
* o.a.c.management.counters.CounterRepository : Add translation ""INSTRUMENTATION_REGISTER_FAULT_MSG=Can't register counter with object name {0}. {1}""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
cxf-codegen-plugin throws NullPointerException when defaultOptions defined without packagenames,CXF-2561,12441870,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,chris@die-schneider.net,francisdb,francisdb,28/Nov/09 22:31,01/Feb/10 19:02,14/Mar/19 02:29,08/Dec/09 18:34,2.2.5,,,,,,,,,,,,,,2.2.6,,,,Tooling,,,,,,0,,,,"If the cxf-codegen-plugin is defined with this section in its configuration you will get a NullPointerException

<defaultOptions>
  <validateWsdl>true</validateWsdl> 
  <bindingFiles>
    <bindingFile>${basedir}/src/jaxws/fixmsprops.xml</bindingFile>
  </bindingFiles>
  <!--<packagenames/>-->
</defaultOptions>

java.lang.NullPointerException
	at java.util.ArrayList.addAll(ArrayList.java:472)
	at org.apache.cxf.maven_plugin.Option.merge(Option.java:424)
	at org.apache.cxf.maven_plugin.WSDL2JavaMojo.mergeOptions(WSDL2JavaMojo.java:260)

A temporary fix is to add the an empty packagenames element.

This issue can be fixed in Options.java on line 429 by putting that line inside a if(defaultOptions.namespaceExcludes != null){...}
",maven,180,180,,0%,180,180,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-12-08 18:34:12.743,,,no_permission,,Novice,,,,,,,,,,,113969,,,Tue Dec 08 18:34:12 UTC 2009,,,,,,0|i1aeon:,268845,,,,,,,,"08/Dec/09 18:34;dkulp;
Christian fixed this as part of the work he did by making sure the lists are not null.   ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WebClient doesns't read response body if status code means some error,CXF-2560,12441783,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,sergey_beryozkin,romkal,romkal,26/Nov/09 15:37,11/Oct/10 14:45,14/Mar/19 02:29,04/Dec/09 21:07,2.2.5,,,,,,,,,,,,,,2.3,,,,JAX-RS,,,,,,0,,,,"In {{org.apache.cxf.jaxrs.client.AbstractClient.readBody(Response, HttpURLConnection, Message, Class<?>, Type, Annotation[])}} there is a conddition that causes {{WebClient}} not to read the content of the response if status code describes some kind of error.

I believe that if some response is sent by the server I should be able to read it even if the status is for example 404.",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-11-26 16:29:08.729,,,no_permission,,,,,,,,,,,,,113968,,,Thu Nov 26 16:44:59 UTC 2009,,,,,,0|i0v1zj:,179295,,,,,,,,"26/Nov/09 16:29;sergey_beryozkin;HI,

how do you use WebClient ?

If you do something like 

Response r = webClient.get();

then

r.getEntity() will point to the underlying connection's error input stream

but if you do 

Book b = webClient.get(Book.class);

then the only option for the runtime is to actually throw the WebApplicationException

can you give more details please ?


","26/Nov/09 16:40;romkal;I have such code:

Response response = WebClient.create(""http://localhost:1235/"")
			.accept(""*/*"")
			.path(""/path/not-exist"")
			.get();
Assert.assertEquals(Status.NOT_FOUND.getStatusCode(), response.getStatus());

// Due to the bug in WebClient response.getEntity() returns null, and it is impossible
// to retrieve message.
// Assert.assertThat(response.getEntity().toString(), JUnitMatchers.containsString(""not found""));

BTW I see, that the payload is sent via HTTP protocol back to the client.","26/Nov/09 16:44;sergey_beryozkin;ok... Will add another test... By the way, at the moment, if NOT_FOUND then a lot of extra logging is done at the client side's HttpConduit - will be fixed too.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
ClientProxyFactoryBeanDefinitionParser is called multiple times,CXF-2558,12441680,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Critical,Fixed,dkulp,deki,deki,25/Nov/09 16:13,01/Feb/10 19:02,14/Mar/19 02:29,09/Dec/09 03:52,2.2.5,,,,,,,,,,,,,,2.2.6,,,,Simple Frontend,,,,,,0,,,,"In some cases we're using the ContextSingletonBeanFactoryLocator to obtain a cxf client from a non spring bean (cp. Spring's section about ""Glue code and the evil singleton""). For example:
BeanFactory bf = ContextSingletonBeanFactoryLocator.getInstance().useBeanFactory(""cssBeanFactory"").getFactory();
final AccountService accountService = (AccountService) bf.getBean(""accountService"", AccountService.class);

With 2.2.3 this was no problem...the proxies were only created once at startup (no further call, when bf.getBean is called):
	ReflectionServiceFactoryBean.buildServiceFromClass() line: 351	
	ReflectionServiceFactoryBean.initializeServiceModel() line: 444	
	ReflectionServiceFactoryBean.create() line: 195	
	ClientFactoryBean(AbstractWSDLBasedEndpointFactory).createEndpoint() line: 100	
	ClientFactoryBean.create() line: 52	
	ClientProxyFactoryBeanDefinitionParser$SpringClientProxyFactoryBean(ClientProxyFactoryBean).create() line: 102	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 39	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 25	
	Method.invoke(Object, Object...) line: 597	
	CglibSubclassingInstantiationStrategy(SimpleInstantiationStrategy).instantiate(RootBeanDefinition, String, BeanFactory, Object, Method, Object[]) line: 115	
	ConstructorResolver.instantiateUsingFactoryMethod(String, RootBeanDefinition, Object[]) line: 435	
	DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).instantiateUsingFactoryMethod(String, RootBeanDefinition, Object[]) line: 903	
	DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).createBeanInstance(String, RootBeanDefinition, Object[]) line: 817	
	DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).doCreateBean(String, RootBeanDefinition, Object[]) line: 440	
	AbstractAutowireCapableBeanFactory$1.run() line: 409	
	AccessController.doPrivileged(PrivilegedAction<T>, AccessControlContext) line: not available [native method]	
	DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).createBean(String, RootBeanDefinition, Object[]) line: 380	
	AbstractBeanFactory$1.getObject() line: 264	
	DefaultListableBeanFactory(DefaultSingletonBeanRegistry).getSingleton(String, ObjectFactory) line: 222	
	DefaultListableBeanFactory(AbstractBeanFactory).doGetBean(String, Class, Object[], boolean) line: 261	
	DefaultListableBeanFactory(AbstractBeanFactory).getBean(String, Class, Object[]) line: 185	
	DefaultListableBeanFactory(AbstractBeanFactory).getBean(String) line: 164	
	DefaultListableBeanFactory.preInstantiateSingletons() line: 429	
	ClassPathXmlApplicationContext(AbstractApplicationContext).finishBeanFactoryInitialization(ConfigurableListableBeanFactory) line: 728	
	ClassPathXmlApplicationContext(AbstractApplicationContext).refresh() line: 380	
	ClassPathXmlApplicationContext.<init>(String[], boolean, ApplicationContext) line: 139	
	ClassPathXmlApplicationContext.<init>(String[]) line: 93	
	NativeConstructorAccessorImpl.newInstance0(Constructor, Object[]) line: not available [native method]	
	NativeConstructorAccessorImpl.newInstance(Object[]) line: 39	
	DelegatingConstructorAccessorImpl.newInstance(Object[]) line: 27	
	Constructor<T>.newInstance(Object...) line: 513	
	BeanUtils.instantiateClass(Constructor, Object[]) line: 100	
	CglibSubclassingInstantiationStrategy(SimpleInstantiationStrategy).instantiate(RootBeanDefinition, String, BeanFactory, Constructor, Object[]) line: 87	
	ConstructorResolver.autowireConstructor(String, RootBeanDefinition, Constructor[], Object[]) line: 248	
	DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).autowireConstructor(String, RootBeanDefinition, Constructor[], Object[]) line: 925	
	DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).createBeanInstance(String, RootBeanDefinition, Object[]) line: 835	
	DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).doCreateBean(String, RootBeanDefinition, Object[]) line: 440	
	AbstractAutowireCapableBeanFactory$1.run() line: 409	
	AccessController.doPrivileged(PrivilegedAction<T>, AccessControlContext) line: not available [native method]	
	DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).createBean(String, RootBeanDefinition, Object[]) line: 380	
	AbstractBeanFactory$1.getObject() line: 264	
	DefaultListableBeanFactory(DefaultSingletonBeanRegistry).getSingleton(String, ObjectFactory) line: 222	
	DefaultListableBeanFactory(AbstractBeanFactory).doGetBean(String, Class, Object[], boolean) line: 261	
	DefaultListableBeanFactory(AbstractBeanFactory).getBean(String, Class, Object[]) line: 185	
	DefaultListableBeanFactory(AbstractBeanFactory).getBean(String, Class) line: 168	
	ClassPathXmlApplicationContext(AbstractApplicationContext).getBean(String, Class) line: 884	
	ContextSingletonBeanFactoryLocator(SingletonBeanFactoryLocator).useBeanFactory(String) line: 397	
	ContextLoader.loadParentContext(ServletContext) line: 341	
	ContextLoader.initWebApplicationContext(ServletContext) line: 195	
	ContextLoaderListener.contextInitialized(ServletContextEvent) line: 45	

With 2.2.5 there is no call at startup time, but each time bf.getBean is called 
	ReflectionServiceFactoryBean.buildServiceFromClass() line: 432	
	ReflectionServiceFactoryBean.initializeServiceModel() line: 523	
	ReflectionServiceFactoryBean.create() line: 271	
	ClientFactoryBean(AbstractWSDLBasedEndpointFactory).createEndpoint() line: 100	
	ClientFactoryBean.create() line: 51	
	ClientProxyFactoryBeanDefinitionParser$SpringClientProxyFactoryBean(ClientProxyFactoryBean).create() line: 102	
	ClientProxyFactoryBeanDefinitionParser$SpringClientProxyFactoryBean.getObject() line: 111	
	FactoryBeanRegistrySupport$1.run() line: 121	
	AccessController.doPrivileged(PrivilegedAction<T>, AccessControlContext) line: not available [native method]	
	DefaultListableBeanFactory(FactoryBeanRegistrySupport).doGetObjectFromFactoryBean(FactoryBean, String, boolean) line: 116	
	DefaultListableBeanFactory(FactoryBeanRegistrySupport).getObjectFromFactoryBean(FactoryBean, String, boolean) line: 98	
	DefaultListableBeanFactory(AbstractBeanFactory).getObjectForBeanInstance(Object, String, String, RootBeanDefinition) line: 1288	
	DefaultListableBeanFactory(AbstractBeanFactory).doGetBean(String, Class, Object[], boolean) line: 217	
	DefaultListableBeanFactory(AbstractBeanFactory).getBean(String, Class, Object[]) line: 185	
	DefaultListableBeanFactory(AbstractBeanFactory).getBean(String, Class) line: 168	
	ClassPathXmlApplicationContext(AbstractApplicationContext).getBean(String, Class) line: 884	

After some time this leads to a OutOfMemoryError:
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'accountService': FactoryBean threw exception on
 object creation; nested exception is java.lang.OutOfMemoryError: Java heap space
",Spring 2.5.6,,,,,,,,,,,,,,CXF-2449,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113966,,,Tue Dec 08 07:37:15 UTC 2009,,,,,,0|i0uy3r:,178666,,,,,,,,25/Nov/09 16:15;deki;We're using the simple frontend but this maybe related because the SpringClientProxyFactoryBean now implements FactoryBean.,25/Nov/09 19:51;deki;Reduced priority.,08/Dec/09 07:37;deki;The problem also occurs when injecting a client with the JSF DelegatingVariableResolver.,,,,,,,,,,,,,,,,,,,,,,,,,,,,
UnsupportedOperationException in WadlGenerator,CXF-2556,12441441,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,sergey_beryozkin,cleclerc,cleclerc,23/Nov/09 11:08,01/Feb/10 19:02,14/Mar/19 02:29,25/Nov/09 17:59,2.2.5,,,,,,,,,,,,,,2.2.6,2.3,,,JAX-RS,,,,,,0,,,,"UnsupportedOperationException when displaying the WADL.
STACKTRACE
===========
java.lang.UnsupportedOperationException
	java.util.AbstractCollection.add(AbstractCollection.java:221)
	java.util.AbstractCollection.addAll(AbstractCollection.java:305)
	org.apache.cxf.jaxb.JAXBUtils.scanPackages(JAXBUtils.java:811)
	org.apache.cxf.jaxrs.model.wadl.WadlGenerator.createJaxbContext(WadlGenerator.java:498)
	org.apache.cxf.jaxrs.model.wadl.WadlGenerator.handleRequest(WadlGenerator.java:123)
	org.apache.cxf.jaxrs.impl.RequestPreprocessor.checkMetadataRequest(RequestPreprocessor.java:164)
	org.apache.cxf.jaxrs.impl.RequestPreprocessor.preprocess(RequestPreprocessor.java:74)
	org.apache.cxf.jaxrs.interceptor.JAXRSInInterceptor.processRequest(JAXRSInInterceptor.java:87)
	org.apache.cxf.jaxrs.interceptor.JAXRSInInterceptor.handleMessage(JAXRSInInterceptor.java:63)
	org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
	org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:109)
	org.apache.cxf.transport.servlet.ServletDestination.invoke(ServletDestination.java:98)
	org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:394)
	org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:170)
	org.apache.cxf.transport.servlet.AbstractCXFServlet.invoke(AbstractCXFServlet.java:142)
	org.apache.cxf.transport.servlet.AbstractHTTPServlet.handleRequest(AbstractHTTPServlet.java:179)
	org.apache.cxf.transport.servlet.AbstractHTTPServlet.doGet(AbstractHTTPServlet.java:108)


CAUSE
======

public class WadlGenerator implements RequestHandler {
    
    public Response handleRequest(Message m, ClassResourceInfo resource) {
         ...
        Set<Class<?>> jaxbTypes = ResourceUtils.getAllRequestResponseTypes(cris, true).keySet(); <=== RETURNED SET IS READ ONLY !
        JAXBContext context = createJaxbContext(jaxbTypes);   <=== createJaxbContext() WIIL TRY TO ADD ENTRIES IN THE GIVEN SET
    }

PROPOSED FIX
=============
* in createJaxbContext(), create a HashSet() initialized with the initial jaxbTypes
* add javadoc on JAXBUtils.scanPackages(classes, objectFactoryCache) to explain the given classes Set will be modified

",,,,,,,,,,,,,,,,,23/Nov/09 12:00;cleclerc;CXF-2556.patch;https://issues.apache.org/jira/secure/attachment/12425832/CXF-2556.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113965,,,Mon Nov 23 12:00:55 UTC 2009,,,,,,0|i1406n:,231492,,,,,,,,"23/Nov/09 12:00;cleclerc;Proposed patch : instantiate a HashSet named ""classesToBeBound"" in WadlGenerator.createJaxbContext() ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JaxWsDynamicClientFactory unable to handle custom exceptions,CXF-2555,12441360,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,thinkpavan,thinkpavan,21/Nov/09 06:31,15/Feb/12 18:19,14/Mar/19 02:29,09/Dec/09 03:51,2.2.3,,,,,,,,,,,,,,2.2.6,,,,JAX-WS Runtime,,,,,,2,,,,"When server throws a custom exception client is showing a NULLPointerException and returning a SoapFault with the error message thrown by the server. But the expected output should be the custom exception.
Below is the full stack trace.

Nov 21, 2009 11:25:01 AM org.apache.cxf.bus.spring.BusApplicationContext getConfigResources
INFO: No cxf.xml configuration file detected, relying on defaults.
Nov 21, 2009 11:25:03 AM org.apache.cxf.endpoint.dynamic.DynamicClientFactory outputDebug
INFO: Created classes: contactus.CxCSWebserviceExcpetion123, contactus.ObjectFactory, contactus.PostMessage, contactus.PostMessageResponse
Nov 21, 2009 11:25:05 AM org.apache.cxf.interceptor.ClientFaultConverter processFaultDetail
INFO: Exception occurred while creating exception: null
java.lang.NullPointerException
	at org.apache.cxf.interceptor.ClientFaultConverter.getConstructor(ClientFaultConverter.java:182)
	at org.apache.cxf.interceptor.ClientFaultConverter.processFaultDetail(ClientFaultConverter.java:154)
	at org.apache.cxf.interceptor.ClientFaultConverter.handleMessage(ClientFaultConverter.java:74)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
	at org.apache.cxf.interceptor.AbstractFaultChainInitiatorObserver.onMessage(AbstractFaultChainInitiatorObserver.java:96)
	at org.apache.cxf.binding.soap.interceptor.CheckFaultInterceptor.handleMessage(CheckFaultInterceptor.java:69)
	at org.apache.cxf.binding.soap.interceptor.CheckFaultInterceptor.handleMessage(CheckFaultInterceptor.java:34)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
	at org.apache.cxf.endpoint.ClientImpl.onMessage(ClientImpl.java:658)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleResponseInternal(HTTPConduit.java:2139)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleResponse(HTTPConduit.java:2022)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.close(HTTPConduit.java:1947)
	at org.apache.cxf.transport.AbstractConduit.close(AbstractConduit.java:66)
	at org.apache.cxf.transport.http.HTTPConduit.close(HTTPConduit.java:632)
	at org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor.handleMessage(MessageSenderInterceptor.java:62)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:472)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:302)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:254)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:274)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:260)
	at com.chordiant.cs.scheduler.client.CXFDynamicContactClient.main(CXFDynamicContactClient.java:23)
org.apache.cxf.binding.soap.SoapFault: Exception from postMessages



Here is the client Code.

		try
		{
			JaxWsDynamicClientFactory dcf = JaxWsDynamicClientFactory.newInstance();
			Client client = dcf.createClient(""http://localhost:8080/contactUs/contactus?wsdl"", Thread.currentThread().getContextClassLoader());
			client.invoke(""postMessage"", ""test"");
		}
		catch(Exception e){
			System.out.println(e);
		}
			
",Windows OS with tomcat server,,,,,,,,,,,,,,,,21/Nov/09 06:36;thinkpavan;test.war;https://issues.apache.org/jira/secure/attachment/12425706/test.war,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2010-03-12 17:16:30.806,,,no_permission,,,,,,,,,,,,,63691,,,Wed Feb 15 18:19:11 UTC 2012,,,,,,0|i13zev:,231367,,,,,,,,21/Nov/09 06:36;thinkpavan;attached is the war file along with the client code,"12/Mar/10 17:16;prasad.deshpande;I'm still getting this error with 2.2.6

Here is the debug soap message & exception.

16:51:12,250 INFO  [LoggingInInterceptor] Inbound Message
----------------------------
ID: 1
Response-Code: 500
Encoding: UTF-8
Content-Type: text/xml;charset=UTF-8
Headers: {content-type=[text/xml;charset=UTF-8], connection=[close], Date=[Fri, 12 Mar 2010 16:51:12 GMT], transfer-encoding=[chunked], X-Powered-By=[Servlet 2.5; JBoss-5.0/JBossWeb-2.1], Server=[Apache-Coyote/1.1]}
Payload: <soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/""><soap:Body><soap:Fault><faultcode>soap:Server</faultcode><faultstring>The user could not be authenticated - efpadmin. Attempted login with WSAPI from internal. </faultstring><detail><ns1:CaseWareException xmlns:ns1=""http://wsapi.api.client.caseware.banctec.com/""><errorMessage>The user could not be authenticated - efpadmin. Attempted login with WSAPI from internal. </errorMessage></ns1:CaseWareException></detail></soap:Fault></soap:Body></soap:Envelope>
--------------------------------------


16:51:12,265 INFO  [ClientFaultConverter] Exception occurred while creating exception: null
java.lang.NullPointerException
	at org.apache.cxf.interceptor.ClientFaultConverter.getConstructor(ClientFaultConverter.java:204)
	at org.apache.cxf.interceptor.ClientFaultConverter.processFaultDetail(ClientFaultConverter.java:176)
	at org.apache.cxf.interceptor.ClientFaultConverter.handleMessage(ClientFaultConverter.java:80)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:243)
	at org.apache.cxf.interceptor.AbstractFaultChainInitiatorObserver.onMessage(AbstractFaultChainInitiatorObserver.java:96)
	at org.apache.cxf.binding.soap.interceptor.CheckFaultInterceptor.handleMessage(CheckFaultInterceptor.java:69)
	at org.apache.cxf.binding.soap.interceptor.CheckFaultInterceptor.handleMessage(CheckFaultInterceptor.java:34)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:243)
	at org.apache.cxf.endpoint.ClientImpl.onMessage(ClientImpl.java:672)","16/Mar/10 14:30;prasad.deshpande;I tried with attached test.war file & I'm still getting error reported by Pavan Kumar.

Pavan, Have you tested this with 2.2.6 release?","19/May/10 05:54;schaban;I think I have the same issuer with 2.2.8 version.
I generated the client library for the services. Tried to call one of the methods which should have returned custom error object, but got this message:

INFO: Exception occurred while creating exception: null
java.lang.NullPointerException
	at org.apache.cxf.interceptor.ClientFaultConverter.getConstructor(ClientFaultConverter.java:204)
	at org.apache.cxf.interceptor.ClientFaultConverter.processFaultDetail(ClientFaultConverter.java:176)
	at org.apache.cxf.interceptor.ClientFaultConverter.handleMessage(ClientFaultConverter.java:80)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:243)
	at org.apache.cxf.interceptor.AbstractFaultChainInitiatorObserver.onMessage(AbstractFaultChainInitiatorObserver.java:99)
	at org.apache.cxf.binding.soap.interceptor.CheckFaultInterceptor.handleMessage(CheckFaultInterceptor.java:69)
	at org.apache.cxf.binding.soap.interceptor.CheckFaultInterceptor.handleMessage(CheckFaultInterceptor.java:34)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:243)
	at org.apache.cxf.endpoint.ClientImpl.onMessage(ClientImpl.java:700)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleResponseInternal(HTTPConduit.java:2261)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleResponse(HTTPConduit.java:2134)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.close(HTTPConduit.java:1988)
	at org.apache.cxf.transport.AbstractConduit.close(AbstractConduit.java:66)
	at org.apache.cxf.transport.http.HTTPConduit.close(HTTPConduit.java:639)
	at org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor.handleMessage(MessageSenderInterceptor.java:62)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:243)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:487)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:313)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:265)
	at org.apache.cxf.frontend.ClientProxy.invokeSync(ClientProxy.java:73)
	at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:124)
	at $Proxy39.cCardTripsHistory(Unknown Source)
	at ru.cft.trcard.controller.services.ServicePort_ServicePort_Client.main(ServicePort_ServicePort_Client.java:52)
Exception in thread ""main"" javax.xml.ws.soap.SOAPFaultException: Internal error of Application Module
	at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:146)
	at $Proxy39.cCardTripsHistory(Unknown Source)
	at ru.cft.trcard.controller.services.ServicePort_ServicePort_Client.main(ServicePort_ServicePort_Client.java:52)
Caused by: org.apache.cxf.binding.soap.SoapFault: Internal error of Application Module
	at org.apache.cxf.binding.soap.interceptor.Soap11FaultInInterceptor.unmarshalFault(Soap11FaultInInterceptor.java:75)
	at org.apache.cxf.binding.soap.interceptor.Soap11FaultInInterceptor.handleMessage(Soap11FaultInInterceptor.java:46)
	at org.apache.cxf.binding.soap.interceptor.Soap11FaultInInterceptor.handleMessage(Soap11FaultInInterceptor.java:35)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:243)
	at org.apache.cxf.interceptor.AbstractFaultChainInitiatorObserver.onMessage(AbstractFaultChainInitiatorObserver.java:99)
	at org.apache.cxf.binding.soap.interceptor.CheckFaultInterceptor.handleMessage(CheckFaultInterceptor.java:69)
	at org.apache.cxf.binding.soap.interceptor.CheckFaultInterceptor.handleMessage(CheckFaultInterceptor.java:34)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:243)
	at org.apache.cxf.endpoint.ClientImpl.onMessage(ClientImpl.java:700)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleResponseInternal(HTTPConduit.java:2261)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleResponse(HTTPConduit.java:2134)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.close(HTTPConduit.java:1988)
	at org.apache.cxf.transport.AbstractConduit.close(AbstractConduit.java:66)
	at org.apache.cxf.transport.http.HTTPConduit.close(HTTPConduit.java:639)
	at org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor.handleMessage(MessageSenderInterceptor.java:62)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:243)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:487)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:313)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:265)
	at org.apache.cxf.frontend.ClientProxy.invokeSync(ClientProxy.java:73)
	at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:124)
	... 2 more","15/Feb/12 18:19;rptsang;Did you figure out what that issue was about Sergey? I am getting something similar:

[12:05:28.895] org.apache.cxf.binding.soap.SoapFault: Internal Error
[12:05:28.895]  at org.apache.cxf.binding.soap.interceptor.Soap11FaultInInterceptor.unmarshalFault(Soap11FaultInInterceptor.java:75)
[12:05:28.895]  at org.apache.cxf.binding.soap.interceptor.Soap11FaultInInterceptor.handleMessage(Soap11FaultInInterceptor.java:46)
[12:05:28.895]  at org.apache.cxf.binding.soap.interceptor.Soap11FaultInInterceptor.handleMessage(Soap11FaultInInterceptor.java:35)
[12:05:28.895]  at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:243)
[12:05:28.895]  at org.apache.cxf.interceptor.AbstractFaultChainInitiatorObserver.onMessage(AbstractFaultChainInitiatorObserver.java:99)
[12:05:28.895]  at org.apache.cxf.binding.soap.interceptor.CheckFaultInterceptor.handleMessage(CheckFaultInterceptor.java:69)
[12:05:28.895]  at org.apache.cxf.binding.soap.interceptor.CheckFaultInterceptor.handleMessage(CheckFaultInterceptor.java:34)
[12:05:28.895]  at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:243)
[12:05:28.895]  at org.apache.cxf.endpoint.ClientImpl.onMessage(ClientImpl.java:700)
[12:05:28.895]  at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleResponseInternal(HTTPConduit.java:2261)
[12:05:28.895]  at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleResponse(HTTPConduit.java:2134)
[12:05:28.895]  at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.close(HTTPConduit.java:1988)
[12:05:28.895]  at org.apache.cxf.transport.AbstractConduit.close(AbstractConduit.java:66)
[12:05:28.895]  at org.apache.cxf.transport.http.HTTPConduit.close(HTTPConduit.java:639)
[12:05:28.895]  at org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor.handleMessage(MessageSenderInterceptor.java:62)
[12:05:28.895]  at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:243)
[12:05:28.895]  at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:487)
[12:05:28.895]  at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:313)
[12:05:28.895]  at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:265)
[12:05:28.895]  at org.apache.cxf.frontend.ClientProxy.invokeSync(ClientProxy.java:73)
[12:05:28.895]  at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:124)
[12:05:28.895]  at $Proxy163.submitApplication(Unknown Source)

with source generated by cxf 2.2.8.",,,,,,,,,,,,,,,,,,,,,,,,,,
"JaxWsDynamicClientFactory.createClient(URL) and o.a.cxf.endpoint.Client.invoke(String operationName, Object... params) generates illegal XML, WstxParsingException on server.",CXF-2554,12441325,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,garydgregory,,20/Nov/09 19:52,10/Mar/11 23:16,14/Mar/19 02:29,14/Dec/09 22:38,2.2.5,2.2.6,,,,,,,,,,,,,2.2.6,,,,,,,,,,0,,,,"Creating a client with:

JaxWsDynamicClientFactory.newInstance().createClient(URL) 

and calling it with:

org.apache.cxf.endpoint.Client.invoke(String operationName, Object... params) 

throws the Exception 

com.ctc.wstx.exc.WstxParsingException: Duplicate declaration for namespace prefix 'wsu'.

on in server built with CXF

Attaching WSDL.

Logging output:

Nov 20, 2009 11:31:12 AM org.apache.cxf.endpoint.dynamic.DynamicClientFactory outputDebug
INFO: Created classes: appinterface.seagullsw.com.appinterfaceserver.ObjectFactory, appinterface.seagullsw.com.appinterfaceserver.TestOneStringArgWssAll, appinterface.seagullsw.com.appinterfaceserver.TestOneStringArgWssAllInResponse, appinterface.seagullsw.com.appinterfaceserver.TestOneStringArgWssAllInResponseResponse, appinterface.seagullsw.com.appinterfaceserver.TestOneStringArgWssAllResponse, appinterface.seagullsw.com.appinterfaceserver.TestOneStringArgWssEncrypt, appinterface.seagullsw.com.appinterfaceserver.TestOneStringArgWssEncryptResponse, appinterface.seagullsw.com.appinterfaceserver.TestOneStringArgWssSignature, appinterface.seagullsw.com.appinterfaceserver.TestOneStringArgWssSignatureResponse, appinterface.seagullsw.com.appinterfaceserver.TestOneStringArgWssTimestamp, appinterface.seagullsw.com.appinterfaceserver.TestOneStringArgWssTimestampResponse, appinterface.seagullsw.com.appinterfaceserver.TestOneStringArgWssUsernameToken, appinterface.seagullsw.com.appinterfaceserver.TestOneStringArgWssUsernameTokenResponse
Nov 20, 2009 11:31:18 AM org.apache.cxf.interceptor.LoggingInInterceptor logging
INFO: Inbound Message
----------------------------
ID: 15
Address: /AppInterfaceServer
Encoding: UTF-8
Content-Type: text/xml; charset=UTF-8
Headers: {content-type=[text/xml; charset=UTF-8], connection=[keep-alive], transfer-encoding=[chunked], Host=[localhost:8070], SOAPAction=[""test.oneStringArgWssAll""], User-Agent=[Apache CXF 2.2.5], Content-Type=[text/xml; charset=UTF-8], Accept=[*/*], Pragma=[no-cache], Cache-Control=[no-cache]}
Payload: <soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:xenc=""http://www.w3.org/2001/04/xmlenc#""><soap:Header><wsse:Security xmlns:wsse=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"" soap:mustUnderstand=""1""><wsu:Timestamp xmlns:wsu=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"" wsu:Id=""Timestamp-5""><wsu:Created>2009-11-20T19:31:18.544Z</wsu:Created><wsu:Expires>2009-11-20T19:31:28.544Z</wsu:Expires></wsu:Timestamp><xenc:EncryptedKey xmlns:xenc=""http://www.w3.org/2001/04/xmlenc#"" Id=""EncKeyId-07EB048258FAA1C61812587454784635""><xenc:EncryptionMethod Algorithm=""http://www.w3.org/2001/04/xmlenc#rsa-1_5"" /><ds:KeyInfo xmlns:ds=""http://www.w3.org/2000/09/xmldsig#"">
<wsse:SecurityTokenReference xmlns:wsse=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd""><ds:X509Data>
<ds:X509IssuerSerial>
<ds:X509IssuerName>CN=serverKeys</ds:X509IssuerName>
<ds:X509SerialNumber>1205178067</ds:X509SerialNumber>
</ds:X509IssuerSerial>
</ds:X509Data></wsse:SecurityTokenReference>
</ds:KeyInfo><xenc:CipherData><xenc:CipherValue>RL7Dc35cwFOyIjqrPbFrbTuQUjRrn4l4Xr5KGBhZlbyFCAnI/CO6oNdgk10kKajImSpFa+zw0LmrCZYhYE2k0VYs3fexwdmM6UpeIWqdEOVmpMiruqgY+39pd8AKJOqT9IQCnG9zQ3IP4TJKrdugBcYgLhsSnUvmh//mXEV96mE=</xenc:CipherValue></xenc:CipherData><xenc:ReferenceList><xenc:DataReference URI=""#EncDataId-4"" /></xenc:ReferenceList></xenc:EncryptedKey><ds:Signature xmlns:ds=""http://www.w3.org/2000/09/xmldsig#"" Id=""Signature-2"">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm=""http://www.w3.org/2001/10/xml-exc-c14n#"" />
<ds:SignatureMethod Algorithm=""http://www.w3.org/2000/09/xmldsig#rsa-sha1"" />
<ds:Reference URI=""#id-3"">
<ds:Transforms>
<ds:Transform Algorithm=""http://www.w3.org/2001/10/xml-exc-c14n#"" />
</ds:Transforms>
<ds:DigestMethod Algorithm=""http://www.w3.org/2000/09/xmldsig#sha1"" />
<ds:DigestValue>yVtODoPiC9+aUxFYj19IRxHI5fo=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
RDIY/X+KWeofWR0aN5ErYSxs0AOJF9DE+8K+xFZb8VPMSRFO6UBZW/x59KtzvBeUR7nlLk+QGI3G
6O/tz7AAKG9m7Jwkxr/dWZBWXuZNaxid9+Lh7Vx+BOes/KziskHZQyXl60zPouUpyqf1u3EMB3iC
B76Wdy4CfppmhZFyAnA=
</ds:SignatureValue>
<ds:KeyInfo Id=""KeyId-07EB048258FAA1C61812587454772262"">
<wsse:SecurityTokenReference xmlns:wsse=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"" xmlns:wsu=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"" xmlns:wsu=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"" wsu:Id=""STRId-07EB048258FAA1C61812587454772283""><ds:X509Data>
<ds:X509IssuerSerial>
<ds:X509IssuerName>CN=clientKeys</ds:X509IssuerName>
<ds:X509SerialNumber>1205178070</ds:X509SerialNumber>
</ds:X509IssuerSerial>
</ds:X509Data></wsse:SecurityTokenReference>
</ds:KeyInfo>
</ds:Signature><wsse:UsernameToken xmlns:wsse=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"" xmlns:wsu=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"" xmlns:wsu=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"" wsu:Id=""UsernameToken-1""><wsse:Username>clientKeys</wsse:Username><wsse:Password Type=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText"">clientKeysPassword</wsse:Password></wsse:UsernameToken></wsse:Security></soap:Header><soap:Body xmlns:wsu=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"" xmlns:wsu=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"" wsu:Id=""id-3""><xenc:EncryptedData xmlns:xenc=""http://www.w3.org/2001/04/xmlenc#"" Id=""EncDataId-4"" Type=""http://www.w3.org/2001/04/xmlenc#Content""><xenc:EncryptionMethod Algorithm=""http://www.w3.org/2001/04/xmlenc#aes128-cbc"" /><ds:KeyInfo xmlns:ds=""http://www.w3.org/2000/09/xmldsig#"">
<wsse:SecurityTokenReference xmlns:wsse=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd""><wsse:Reference xmlns:wsse=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"" URI=""#EncKeyId-07EB048258FAA1C61812587454784635"" /></wsse:SecurityTokenReference>
</ds:KeyInfo><xenc:CipherData><xenc:CipherValue>ds6OLheJbTyDK/oxqto7mEzxdb44E3OD+HKxxI2Z44bSNccEZ02Uuw9q2SipHb313BiTXp4V6Dr9
WAvRjMFLaqDLfvGIV7fEH9Fyx59A1qI0p/ByNX3q8KtHgxXhQBCTICk56Ja+TVO1jScEFjSm32FZ
tNWoT1jz3qfpDnz+hs2EciXsOVA/I6/cSCpkcy0K4BU/wFKVFH486JtJq9dMQHSy6TJHYbGpVaaB
04mff4YlauNg2q9HXA9Cwk2iOOJMvGoA43higsinfeM/9cGZaBV+tDXikBNehKaShggsTAN/TH5N
z9uoZq2B1J8c+aitj0TX5Y68SdZnGyIz5uIMhWSKdd7Y7yLzheU1L/ZMyMiQ4l2JQkFRUnfEFWY0
HHy9hxEvNz61+9fzzsQLEYcZxTSZoKJ1Q1Nvzwn4R+roDRwKMPLcsWEO1EVOmDhWzHzDsP+KbmcG
DyCxurs4xdLik0Uklo6P313g9KXeYrkR47hPGvuxnIhucLfu5oNgAX3z</xenc:CipherValue></xenc:CipherData></xenc:EncryptedData></soap:Body></soap:Envelope>
--------------------------------------
Nov 20, 2009 11:31:18 AM org.apache.cxf.phase.PhaseInterceptorChain doIntercept
WARNING: Interceptor has thrown exception, unwinding now
org.apache.cxf.binding.soap.SoapFault: Error reading XMLStreamReader.
	at org.apache.cxf.binding.soap.interceptor.ReadHeadersInterceptor.handleMessage(ReadHeadersInterceptor.java:230)
	at org.apache.cxf.binding.soap.interceptor.ReadHeadersInterceptor.handleMessage(ReadHeadersInterceptor.java:60)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
	at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:109)
	at org.apache.cxf.transport.servlet.ServletDestination.invoke(ServletDestination.java:98)
	at org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:394)
	at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:170)
	at org.apache.cxf.transport.servlet.AbstractCXFServlet.invoke(AbstractCXFServlet.java:142)
	at org.apache.cxf.transport.servlet.AbstractHTTPServlet.handleRequest(AbstractHTTPServlet.java:179)
	at org.apache.cxf.transport.servlet.AbstractHTTPServlet.doPost(AbstractHTTPServlet.java:103)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:727)
	at org.apache.cxf.transport.servlet.AbstractHTTPServlet.service(AbstractHTTPServlet.java:159)
	at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:511)
	at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:390)
	at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216)
	at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:182)
	at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765)
	at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:418)
	at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)
	at org.mortbay.jetty.Server.handle(Server.java:326)
	at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:542)
	at org.mortbay.jetty.HttpConnection$RequestHandler.content(HttpConnection.java:938)
	at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:842)
	at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:218)
	at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404)
	at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:409)
	at org.mortbay.thread.BoundedThreadPool$PoolThread.run(BoundedThreadPool.java:451)
Caused by: com.ctc.wstx.exc.WstxParsingException: Duplicate declaration for namespace prefix 'wsu'.
 at [row,col {unknown-source}]: [26,230]
	at com.ctc.wstx.sr.StreamScanner.constructWfcException(StreamScanner.java:605)
	at com.ctc.wstx.sr.StreamScanner.throwParseError(StreamScanner.java:461)
	at com.ctc.wstx.sr.BasicStreamReader.handleNsAttrs(BasicStreamReader.java:3020)
	at com.ctc.wstx.sr.BasicStreamReader.handleStartElem(BasicStreamReader.java:2934)
	at com.ctc.wstx.sr.BasicStreamReader.nextFromTree(BasicStreamReader.java:2846)
	at com.ctc.wstx.sr.BasicStreamReader.next(BasicStreamReader.java:1019)
	at org.apache.cxf.staxutils.DepthXMLStreamReader.next(DepthXMLStreamReader.java:220)
	at org.apache.cxf.staxutils.PartialXMLStreamReader.next(PartialXMLStreamReader.java:41)
	at org.apache.cxf.staxutils.StaxUtils.readDocElements(StaxUtils.java:908)
	at org.apache.cxf.staxutils.StaxUtils.startElement(StaxUtils.java:826)
	at org.apache.cxf.staxutils.StaxUtils.readDocElements(StaxUtils.java:868)
	at org.apache.cxf.staxutils.StaxUtils.startElement(StaxUtils.java:826)
	at org.apache.cxf.staxutils.StaxUtils.readDocElements(StaxUtils.java:868)
	at org.apache.cxf.staxutils.StaxUtils.startElement(StaxUtils.java:826)
	at org.apache.cxf.staxutils.StaxUtils.readDocElements(StaxUtils.java:868)
	at org.apache.cxf.staxutils.StaxUtils.startElement(StaxUtils.java:826)
	at org.apache.cxf.staxutils.StaxUtils.readDocElements(StaxUtils.java:868)
	at org.apache.cxf.staxutils.StaxUtils.startElement(StaxUtils.java:826)
	at org.apache.cxf.staxutils.StaxUtils.readDocElements(StaxUtils.java:868)
	at org.apache.cxf.staxutils.StaxUtils.read(StaxUtils.java:755)
	at org.apache.cxf.staxutils.StaxUtils.read(StaxUtils.java:744)
	at org.apache.cxf.binding.soap.interceptor.ReadHeadersInterceptor.handleMessage(ReadHeadersInterceptor.java:144)
	... 26 more
Nov 20, 2009 11:31:18 AM org.apache.cxf.interceptor.LoggingOutInterceptor$LoggingCallback onClose

","Microsoft Windows [Version 6.0.6002] (Vista Buisiness N 64 bits)

java version ""1.6.0_16""
Java(TM) SE Runtime Environment (build 1.6.0_16-b01)
Java HotSpot(TM) 64-Bit Server VM (build 14.2-b01, mixed mode)",,,,,,,,,,,,,,,,12/Dec/09 03:38;Apache CXF-2554.zip;https://issues.apache.org/jira/secure/attachment/12427811/Apache+CXF-2554.zip,11/Dec/09 21:15;Jre16_xml-Capture.JPG;https://issues.apache.org/jira/secure/attachment/12427773/Jre16_xml-Capture.JPG,20/Nov/09 19:54;TestBackEndWss.wsdl;https://issues.apache.org/jira/secure/attachment/12425655/TestBackEndWss.wsdl,,,,3.0,,,,,,,,,,,,,,,,,,,,2009-11-20 19:53:05.447,,,no_permission,,,,,,,,,,,,,113964,,,Thu Jan 07 18:42:58 UTC 2010,,,,,,0|i14etj:,233864,,,,,,,,"20/Nov/09 19:53;ggregory@seagullsw.com;Client code:

    /**
     * Test all WS-Security options at once.
     * 
     * @throws Exception
     */
    @Test
    public void testWssAll() throws Exception {
        URL wsdl = ClassLoader.getSystemResource(RESOURCES + ""/functions/TestBackEndWss.wsdl"");
        Client client = JaxWsDynamicClientFactory.newInstance().createClient(wsdl.toExternalForm());
        Map<String, Object> outProps = new HashMap<String, Object>();
        outProps.put(WSHandlerConstants.ACTION, WSHandlerConstants.USERNAME_TOKEN
            + "" ""
            + WSHandlerConstants.SIGNATURE
            + "" ""
            + WSHandlerConstants.ENCRYPT
            + "" ""
            + WSHandlerConstants.TIMESTAMP);
        outProps.put(WSHandlerConstants.TTL_TIMESTAMP, ""10"");
        outProps.put(WSHandlerConstants.PASSWORD_TYPE, WSConstants.PW_TEXT);
        outProps.put(WSHandlerConstants.SIG_PROP_FILE, _RESOURCES_ROOT + ""/client-security/client_security.properties"");
        outProps.put(WSHandlerConstants.ENC_PROP_FILE, _RESOURCES_ROOT + ""/client-security/client_security.properties"");
        outProps.put(WSHandlerConstants.USER, ""clientKeys""); // client private key
        outProps.put(WSHandlerConstants.ENCRYPTION_USER, ""serverKeys"");
        outProps.put(WSHandlerConstants.PW_CALLBACK_REF, new CallbackHandler() {
            public void handle(Callback[] callbacks) {
                WSPasswordCallback callback = (WSPasswordCallback) callbacks[0];
                if (callback.getIdentifer().equalsIgnoreCase(""clientKeys"")) {
                    callback.setPassword(""clientKeysPassword""); // client private key password
                } else {
                    throw new RuntimeException(""unexpected user id?"");
                }
            }
        });
        client.getOutInterceptors().add(new WSS4JOutInterceptor(outProps));
        String ARG_VALUE = ""string arg value"";
        Object[] results = client.invoke(AisTestBackEnd.ONESTRINGARGWSS_ALL_FUNCTION_NAME, new Object[]{ARG_VALUE});
        Assert.assertNotNull(results);
        Assert.assertNotNull(results[0]);
        Assert.assertTrue(((String) results[0]).indexOf(ARG_VALUE) > 0);
    }","20/Nov/09 21:13;ggregory@seagullsw.com;BTW, this worked fine in version 2.1.3 and 2.2.4. It is broken in 2.2.5 and 2.2.6-SNAPSHOT I built out of SVN yesterday.","21/Nov/09 03:25;dkulp;
This looks like it might be a bug in wss4j as that element is created in there.   I'll work with the wss4j folks in early  December to figure out what is going on.",22/Nov/09 23:36;ggregory@seagullsw.com;You think the problem is in WSS4J even though the version has not changed from 2.2.4 to 2.2.5? So something change someplace else that causes a different usage code path?,"09/Dec/09 22:08;dkulp;
I'm not able to reproduce this.   I used your code (just replaced the wsdl with our hello_world wsdl and used our alice/bob properties/certs and the message is fine:
{code}
<wsse:SecurityTokenReference xmlns:wsse=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"" 
                        xmlns:wsu=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"" 
                        wsu:Id=""STRId-BD0861CF2E2E15D46312603962257363"">
                        <ds:X509Data>
                            <ds:X509IssuerSerial>
                                <ds:X509IssuerName>CN=alice,OU=NOT FOR PRODUCTION USE,O=apache.org</ds:X509IssuerName>
                                <ds:X509SerialNumber>1185847274</ds:X509SerialNumber>
                            </ds:X509IssuerSerial>
                        </ds:X509Data>
                    </wsse:SecurityTokenReference>
{code}

A single wsu namespace defined.   Any chance of creating a small sample project that fully demonstrates this?","09/Dec/09 22:12;dkulp;
For the record, to our system test in  systests/ws-specs/src/test/java/org/apache/cxf/systest/ws/security/WSSecurityClientTest.java, I just added:

{code}
    @Test
    public void testWssAll() throws Exception {
        Client client = JaxWsDynamicClientFactory.newInstance().createClient(WSDL_LOC);
        Map<String, Object> outProps = new HashMap<String, Object>();
        outProps.put(WSHandlerConstants.ACTION, WSHandlerConstants.USERNAME_TOKEN
                     + "" ""
                     + WSHandlerConstants.SIGNATURE
                     + "" ""
                     + WSHandlerConstants.ENCRYPT
                     + "" ""
                     + WSHandlerConstants.TIMESTAMP);
        outProps.put(WSHandlerConstants.TTL_TIMESTAMP, ""10"");
        outProps.put(WSHandlerConstants.PASSWORD_TYPE, WSConstants.PW_TEXT);
        outProps.put(WSHandlerConstants.SIG_PROP_FILE, 
                     ""org/apache/cxf/systest/ws/security/alice.properties"");
        outProps.put(WSHandlerConstants.ENC_PROP_FILE, 
                     ""org/apache/cxf/systest/ws/security/bob.properties"");
        outProps.put(WSHandlerConstants.USER, ""alice""); // client private key
        outProps.put(WSHandlerConstants.ENCRYPTION_USER, ""bob"");
        outProps.put(WSHandlerConstants.PW_CALLBACK_REF, new CallbackHandler() {
            public void handle(Callback[] callbacks) { 
                WSPasswordCallback callback = (WSPasswordCallback) callbacks[0];
                if (callback.getIdentifier().equalsIgnoreCase(""alice"")) { 
                    callback.setPassword(""password""); 
                    // client private key password 
                } else {
                    throw new RuntimeException(""unexpected user id?""); 
                } 
            } 
        });
        client.getOutInterceptors().add(new WSS4JOutInterceptor(outProps));
        Object[] results = client.invoke(""sayHi"", 
                                         ""Dan"");
        assertNotNull(results);
        assertNotNull(results[0]);
        assertTrue(((String) results[0]).indexOf(""Dan"") > 0);
    }
{code}

The test failed, but that's cause the server isn't setup for these properties.   I just looked at the generated soap messages to see what is being sent.","11/Dec/09 05:51;ggregory@seagullsw.com;An Eclipse project to reproduce the issue. Sample test output is in the doc directory. Tested with 2.2.6 SNAPSHOT from Thu Dec 10 10:20:58 GMT+00:00 2009.

To see the XML in question in action is rather ugly: run the unit test, the HTTP message with XML is written to the console, then the test times out.","11/Dec/09 21:07;dkulp;

I still cannot reproduce this.    I took your test case above, unpacked it and modified the .classpath as follows:

1) C:/Users/ggregory/b/test/apache-cxf-2.2.6-SNAPSHOT  ->   My location of a freshly unpacked 2.2.6 snapshot build
2) jettison-1.1.jar -> jettison-1.2-20091202.151238-1.jar   ( the current snapshots are using a snapshot of this)
3) /ThirdParty/JUnit/junit4.7/junit-4.7.jar   ->   a location of a junit 4.5 jar I have on my machine

I then imported it into eclipse.   I had to change the ""JRE System Library"" to my default of sun-jdk-1.6.0.17 which is a straight up 1.6.0-17 jdk from Sun with nothing special

I ran the test and i'm not seeing any duplicated namespaces or anything.

Thus, my concern is your ""Sun 1.6.0 + Apache XML"" runtime.   Do you have anything funky in the endorsed dir or something there?   Can you try a fresh download/install of the jdk?
","11/Dec/09 21:13;ggregory@seagullsw.com;Ah, yes, my ""funkyness"" is as follows for our ""Sun 1.6.0 + Apache XML"":

JRE home: {{C:\Program Files\Java\jdk1.6.0_16}}

Default VM arguments: {{-Djava.endorsed.dirs=C:\Users\ggregory\b\Java\endorsed\latest+jaxb -Dorg.apache.cxf.Logger=org.apache.cxf.common.logging.Log4jLogger}}

Where {{C:\Users\ggregory\b\Java\endorsed\latest+jaxb}} contains the latest Xalan (2.7.1), Xerces (2.9.1) and JAXB (2.1.12).

My classpath contains the jars from {{C:\Users\ggregory\b\Java\endorsed\latest+jaxb}} before the JRE jars. See attached screen shot.",11/Dec/09 21:15;ggregory@seagullsw.com;Screen shot.,"11/Dec/09 21:20;ggregory@seagullsw.com;When I change my JRE for the project to a ""plain"" Sun Java 1.6.0_16, the duplicate namespace declaration is still there.","11/Dec/09 22:07;dkulp;

Ick.  Then I really have no idea how to reproduce this so I can debug this.   :-(


If you have the ability to debug in, the place to look would be:

StaxUtils.writeStartElement(XMLStreamReader reader, XMLStreamWriter writer)

and the namespace and attribute handling in there.
","11/Dec/09 23:36;ggregory@seagullsw.com;Sure I can debug... I am now on a plain Sun Java 1.6.0_16 JDK.

The output XML has 4 * xmlns:wsu and 6 * xmlns:wsse

In the debugger, in {{StaxUtils.writeStartElement(XMLStreamReader reader, XMLStreamWriter writer)}}
I break at {{writer.writeNamespace(nsPrefix, nsURI);}} in:

{code:java}
            if (nsPrefix.length() == 0) {
                writer.writeDefaultNamespace(nsURI);
            } else {
                writer.writeNamespace(nsPrefix, nsURI);
            }
{code}

In the debugger I see the {{nsPrefix}} variable with the value {{""wsse""}} 6 times and {{""wsu""}} 4 times. I have a breakpoint condition of {{""wsu"".equals(nsPrefix) || ""wsse"".equals(nsPrefix)}}.

It sounds like the DOM model is off. Does that make sense?
","12/Dec/09 02:28;dkulp;

If you debug a bit furthur down in the method, there is a block commented ""// Write out attributes"".  In there is another writeNamespace call.   Is that one called?


If so, can you also give me the full class name of the writer.","12/Dec/09 03:36;ggregory@seagullsw.com;A breakpoint at:
{code:java}
                if (writeNs) {
                    writer.writeNamespace(nsPrefix, ns);
                }
{code}
is never hit.
I am attaching a new version (12/Dec/09 03:38 AM) of the project which looks specifically for multiple {{xmlns:wsu}} and  {{xmlns:wsse}} in the XML as logged by CXF.

Can you give it a try please?","12/Dec/09 03:58;dkulp;
4 wsu and 6 wsse which seems like it is correct.   The XML with that looks correct.
","12/Dec/09 04:08;ggregory@seagullsw.com;Well, it is not correct for the CXF server side, according to the exception I show in the description for this ticket:

{quote}
Caused by: com.ctc.wstx.exc.WstxParsingException: Duplicate declaration for namespace prefix 'wsu'.
{quote}

Either the client or the server needs a fix. The XML is well-formed according to Eclipse, so this sounds like a bug on the server side. Yes, no?",12/Dec/09 04:15;dkulp;4 and 6 is correct.    Your message in the original comment has   7 wsu and 6 wsse.      4 wsu is correct.   7 is not.,"12/Dec/09 04:18;ggregory@seagullsw.com;I was looking at the wrong variable in the debugger in my original message, I edited it with the correct numbers.

No matter, since I think now that the server side is in error for not accepting this XML.","12/Dec/09 04:30;dkulp;
the soap message in the log in the description of this bug is DEFINITELY wrong.    It DOES have duplicate wsu prefixes.   The question is how was that message created.   It LOOKS like your test case is not producing the same message as shown in the above log.   That's what I'm trying to figure out is how was that message created and what could possibly be going wrong to end up with a message like that.   My gut feeling is that the XMLStreamWriter that is being used is different than the one I'm using.  (maybe the sun version built into the JDK or a bea version or something compared to the woodstox version I'm using) and the StaxUtils stuff isn't behaving correctly with that writer.

In anycase, I just committed some changes to StaxUtils that may make it work better with a different XMLStreamWriter.   Tomorrows snapshots might behave a little different.","12/Dec/09 05:08;ggregory@seagullsw.com;When the prefix is {{wsu}} or {{wsse}}, the writer is a {{SimpleNsStreamWriter}}:

{quote}
[StreamWriter: class com.ctc.wstx.sw.SimpleNsStreamWriter, underlying outputter: com.ctc.wstx.sw.BufferingXmlWriter@77eec5fe
{quote}","12/Dec/09 06:16;ggregory@seagullsw.com;Just for grins, I downloaded the SVN sources, did a build and ran the test. Same deal, wsu is defined 4 times:
{code:xml}
<soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:xenc=""http://www.w3.org/2001/04/xmlenc#""><soap:Header><wsse:Security xmlns:wsse=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"" soap:mustUnderstand=""1""><wsu:Timestamp xmlns:wsu=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"" wsu:Id=""Timestamp-5""><wsu:Created>2009-12-12T06:14:14.395Z</wsu:Created><wsu:Expires>2009-12-12T06:14:24.395Z</wsu:Expires></wsu:Timestamp><xenc:EncryptedKey xmlns:xenc=""http://www.w3.org/2001/04/xmlenc#"" Id=""EncKeyId-0586CC31CF282E94B312605984543355""><xenc:EncryptionMethod Algorithm=""http://www.w3.org/2001/04/xmlenc#rsa-1_5"" /><ds:KeyInfo xmlns:ds=""http://www.w3.org/2000/09/xmldsig#"">
<wsse:SecurityTokenReference xmlns:wsse=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd""><ds:X509Data>
<ds:X509IssuerSerial>
<ds:X509IssuerName>CN=serverKeys</ds:X509IssuerName>
<ds:X509SerialNumber>1205178067</ds:X509SerialNumber>
</ds:X509IssuerSerial>
</ds:X509Data></wsse:SecurityTokenReference>
</ds:KeyInfo><xenc:CipherData><xenc:CipherValue>HZ/uzp3RNlJSzhlOahdOYMTai7uGFwJudiUD3aMbVQsC6T4H+KvEXmD//7ByHYSjrg3tba/JWmUyRpgLWEqDMJB9mprHsVs/i4zVOe2Uw+MESVkmpT35Kq05PVenQrqM7zdTWuSWvuDxDml1rBcH/XQ82JCE3muy9PzeHhCYxPg=</xenc:CipherValue></xenc:CipherData><xenc:ReferenceList><xenc:DataReference URI=""#EncDataId-4"" /></xenc:ReferenceList></xenc:EncryptedKey><ds:Signature xmlns:ds=""http://www.w3.org/2000/09/xmldsig#"" Id=""Signature-2"">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm=""http://www.w3.org/2001/10/xml-exc-c14n#"" />
<ds:SignatureMethod Algorithm=""http://www.w3.org/2000/09/xmldsig#rsa-sha1"" />
<ds:Reference URI=""#id-3"">
<ds:Transforms>
<ds:Transform Algorithm=""http://www.w3.org/2001/10/xml-exc-c14n#"" />
</ds:Transforms>
<ds:DigestMethod Algorithm=""http://www.w3.org/2000/09/xmldsig#sha1"" />
<ds:DigestValue>yVtODoPiC9+aUxFYj19IRxHI5fo=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
RDIY/X+KWeofWR0aN5ErYSxs0AOJF9DE+8K+xFZb8VPMSRFO6UBZW/x59KtzvBeUR7nlLk+QGI3G
6O/tz7AAKG9m7Jwkxr/dWZBWXuZNaxid9+Lh7Vx+BOes/KziskHZQyXl60zPouUpyqf1u3EMB3iC
B76Wdy4CfppmhZFyAnA=
</ds:SignatureValue>
<ds:KeyInfo Id=""KeyId-0586CC31CF282E94B312605984535682"">
<wsse:SecurityTokenReference xmlns:wsse=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"" xmlns:wsu=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"" wsu:Id=""STRId-0586CC31CF282E94B312605984535703""><ds:X509Data>
<ds:X509IssuerSerial>
<ds:X509IssuerName>CN=clientKeys</ds:X509IssuerName>
<ds:X509SerialNumber>1205178070</ds:X509SerialNumber>
</ds:X509IssuerSerial>
</ds:X509Data></wsse:SecurityTokenReference>
</ds:KeyInfo>
</ds:Signature><wsse:UsernameToken xmlns:wsse=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"" xmlns:wsu=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"" wsu:Id=""UsernameToken-1""><wsse:Username>clientKeys</wsse:Username><wsse:Password Type=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText"">clientKeysPassword</wsse:Password></wsse:UsernameToken></wsse:Security></soap:Header><soap:Body xmlns:wsu=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"" wsu:Id=""id-3""><xenc:EncryptedData xmlns:xenc=""http://www.w3.org/2001/04/xmlenc#"" Id=""EncDataId-4"" Type=""http://www.w3.org/2001/04/xmlenc#Content""><xenc:EncryptionMethod Algorithm=""http://www.w3.org/2001/04/xmlenc#aes128-cbc"" /><ds:KeyInfo xmlns:ds=""http://www.w3.org/2000/09/xmldsig#"">
<wsse:SecurityTokenReference xmlns:wsse=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd""><wsse:Reference xmlns:wsse=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"" URI=""#EncKeyId-0586CC31CF282E94B312605984543355"" /></wsse:SecurityTokenReference>
</ds:KeyInfo><xenc:CipherData><xenc:CipherValue>kc38Jom3dRiZfqkm1Ua9fRtlLESjLu/+aNiwNgmSo1azMY0oKvXZKaRHZfXxJf/K6RsppFxQkhET
elTpjCJMgpsVxrgPz3dWu8C/d7xBjZUkCARK+NP4JLpVEae78mYn7h+9VyqHyqlyDzV/xhVA9Qkq
lDAX47EQjHCBr7sIkLje41jzXfbGtrjbghvYTKAtVYpr/pcbkvbeBcAJPpt7Gqs2Y1e4MN7k1Yq1
McO3gSij/Qp9ZF+Esld/Vakl3MXIFiQxEk58RJTP9USMMcCRZ98FLjboO2XiXPvBX3/PW7FsUwJx
vM/rAav7yoU/kWurWNLpn+TxsT5kAriscUCeXd+0PVn4J9/AEfAKlyjkW+E59+M82Lixp216hvTW
xHGZ7p+bMA/8RBIxNdY2+rjsqF8rwzirtHuraoiNv5su8q6UIMLI/2rwTGJrKGEKPrFseI9T8V3Z
swzKmhgCeqwh08DrwA9BLv5m+A8djfi8KjRL6bs3p+d6wGaz65fPmKd8</xenc:CipherValue></xenc:CipherData></xenc:EncryptedData></soap:Body></soap:Envelope>
{code}","12/Dec/09 06:37;ggregory@seagullsw.com;BTW, do you get a green or red bar when you run the test in the new version of the project I attached?","14/Dec/09 18:31;dkulp;
I want to be clear about what the problem really is.   In XML, you can have multiple declarations of the same namespace within the same document.  That's perfectly fine.  The last soap message you posted is valid with the 4 wsse and 6 wsu declarations.

The problem in the first soap message is that the wsu namespace is declared twice on the SAME element.   That is NOT allowed.  For example, look at the soap:Body:
{code:xml}
<soap:Body xmlns:wsu=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"" 
                       xmlns:wsu=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"" wsu:Id=""id-3"">
{code}
The wsu namespace is defined twice on the same element.   That is bad.  THAT is what I'm trying to figure out how to reproduce.   Your testcase you attached isn't reproducing that for me (or for you apparently as the last soap message you attached doesn't have that problem).

Thus, what we need to figure out is how to create a test case that produces that invalid element.   ","14/Dec/09 19:48;ggregory@seagullsw.com;Ah, right, you are correct. The version of the 2.2.6 snapshot I built works. I tested with the project and with our unit test in our product. So far so good. This seems to have been fixed since I filed the ticket. 

Next I will test the latest snapshot with a full build of our server.

Is there a release schedule for 2.2.6?",14/Dec/09 19:53;dkulp;Current plan is mid January for 2.2.6.,"14/Dec/09 22:38;ggregory@seagullsw.com;Closing, should be fixed when 2.2.6 comes out.","23/Dec/09 23:29;mark.brewer@sungardps.com;I have client code generated with v2.2.4 and on one of the endpoints I'm getting a similar error: Caused by: com.ctc.wstx.exc.WstxParsingException: Duplicate declaration for namespace prefix 'tns'.
 at [row,col {unknown-source}]: [1,517]. Would I be correct in assuming this fix will solve my issue as well?","24/Dec/09 05:36;ggregory@seagullsw.com;It sure sounds like it. I am using a custom build of 2.2.4 and I have not seen the issue in 2.2.4. I've only seen it in 2.2.5 and 2.2.6-SNAPSHOT before Dan's patch. 

IMO, the issue surfaces depending on the WSDL used by the client code. What it is about the WSDL that makes this happen, I do not know.",24/Dec/09 14:27;mark.brewer@sungardps.com;Tried creating a client using apache-cxf-2.3.0-SNAPSHOT and am getting the same error. Looks like the 2.2.6 fix hasn't been applied into 2.3.0 or it doesn't address the problem I'm having.,"07/Jan/10 18:42;dkulp;Mark, for you, do you have schema validation turned on?  I found a similar duplicate namespace issue on Monday when schema validation was turned on.   That is now fixed on trunk/2.2.x.   Turning off schema validation may fix it for you if that is the case."
CXF should use Spring's BeanFactory.isSingleton(name) instead of BeanDefinition.isSingleton() because any such checks break when using bean definition inheritance or bean definition post-processing,CXF-2552,12441280,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,orbang,orbang,20/Nov/09 10:52,01/Feb/10 19:02,14/Mar/19 02:29,10/Dec/09 03:48,2.2.6,2.3,,,,,,,,,,,,,2.1.9,2.2.6,,,Configuration,,,,,,0,,,,"Also, the default value of BeanDefinition.isSingleton() is likely to change to false in Spring 3, which breaks present CXF logic (in fact, they have already changed it to false in Spring 3 RC2, but backed off the change to our request). 

Please see the reply from Juergen Hoeller of SpringSource:

>2009/11/19 Juergen Hoeller <Juergen.Hoeller@springsource.com>

>This is a half-intended effect, actually: We do not set a default scope name anymore in order to be able to inherit the scope name from a parent bean >definition... The default scope is still singleton but it won't be actually set before activating the bean definition in the factory now. That had the somewhat >unintended effect of BeanDefinition.isSingleton() now returning false by default.
 
>So as of tonight, BeanDefinitions return isSingleton()=true by default again. The scope name is still not set but BeanDefinitions assume that they are >singleton by default again now. Please give the next snapshot a try with CXF and let us know whether it works...
 
>Note that the proper way to check the singleton status of a bean is BeanFactory.isSingleton(name) on the activated factory. Any checks on the raw >BeanDefinition itself break when using bean definition inheritance or bean definition post-processing. From that perspective, CXF should get rid of those >calls eventually... I'm deprecating those BeanDefiniton methods now to make that clear.
 
>Juergen


",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113962,,,2009-11-20 10:52:59.0,,,,,,0|i0v20n:,179300,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException  at org.apache.cxf.transport.servlet.ServletController.updateDests(ServletController.java:92),CXF-2551,12441249,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,garydgregory,,20/Nov/09 01:33,10/Mar/11 23:16,14/Mar/19 02:29,10/Dec/09 03:51,2.2.4,,,,,,,,,,,,,,2.1.9,2.2.6,,,,,,,,,0,,,,"I am getting the following NPE when submitting a request to our server implemented using CXF 2.2.4.

java.lang.NullPointerException
	at org.apache.cxf.transport.servlet.ServletController.updateDests(ServletController.java:92)
	at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:132)
	at org.apache.cxf.transport.servlet.AbstractCXFServlet.invoke(AbstractCXFServlet.java:142)
	at org.apache.cxf.transport.servlet.AbstractHTTPServlet.doPost(AbstractHTTPServlet.java:45)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:727)
	at org.apache.cxf.transport.servlet.AbstractHTTPServlet.service(AbstractHTTPServlet.java:101)
	at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:511)
	at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:390)
	at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765)
	at org.mortbay.jetty.handler.HandlerCollection.handle(HandlerCollection.java:114)
	at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)
	at org.mortbay.jetty.Server.handle(Server.java:326)
	at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:542)
	at org.mortbay.jetty.HttpConnection$RequestHandler.content(HttpConnection.java:938)
	at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:755)
	at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:218)
	at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404)
	at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:409)
	at org.mortbay.thread.BoundedThreadPool$PoolThread.run(BoundedThreadPool.java:451)

Here is the sample request sent with soapUI 3.0.1:
{code:xml}
<soapenv:Envelope xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:app=""http://com.seagullsw.appinterface/AppInterfaceServer"">
   <soapenv:Header/>
   <soapenv:Body>
      <app:SignOn>
         <!--Optional:-->
         <Password>Gary</Password>
         <!--Optional:-->
         <UserName>MyPwd</UserName>
      </app:SignOn>
   </soapenv:Body>
</soapenv:Envelope>
{code}
I'll attach the WSDL.","java version ""1.6.0_16""
Java(TM) SE Runtime Environment (build 1.6.0_16-b01)
Java HotSpot(TM) 64-Bit Server VM (build 14.2-b01, mixed mode)

Microsoft Windows [Version 6.0.6002]",,,,,,,,,,,,,,,,20/Nov/09 01:35;SignOn-doclit.wsdl;https://issues.apache.org/jira/secure/attachment/12425552/SignOn-doclit.wsdl,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2009-11-20 01:49:38.34,,,no_permission,,,,,,,,,,,,,113961,,,Sat Nov 21 05:49:33 UTC 2009,,,,,,0|i14eun:,233869,,,,,,,,"20/Nov/09 01:49;ggregory@seagullsw.com;I forgot to say above that it would be nice if the code could be bullet proofed. The NPE is in this method:

    protected synchronized void updateDests(HttpServletRequest request) {
        if (disableAddressUpdates) {
            return;
        }
        String base = forcedBaseAddress == null ? getBaseURL(request) : forcedBaseAddress;
                
        if (base.equals(lastBase)) {
            return;
        }
        Set<String> paths = transport.getDestinationsPaths();
        for (String path : paths) {
            ServletDestination d2 = transport.getDestinationForPath(path);
            String ad = d2.getEndpointInfo().getAddress();
            if (ad.equals(path)
                || ad.equals(lastBase + path)) {
                d2.getEndpointInfo().setAddress(base + path);
                if (d2.getEndpointInfo().getExtensor(AddressType.class) != null) {
                    d2.getEndpointInfo().getExtensor(AddressType.class).setLocation(base + path);
                }
            }
        }
        lastBase = base;
    }

At this line:

            if (ad.equals(path)

In a debugger I can see that ad is set to null with:

String ad = d2.getEndpointInfo().getAddress();

The address value is null in the object org.apache.cxf.ws.addressing.AttributedURIType@5d535057.","20/Nov/09 02:14;ggregory@seagullsw.com;Also, can I workaround the NPE by ""fixing"" the WSDL?","21/Nov/09 05:48;ggregory@seagullsw.com;Here is an example of fixing the method updateDests based on 2.2.4.

    protected synchronized void updateDests(HttpServletRequest request) {
        if (disableAddressUpdates) {
            return;
        }
        String base = forcedBaseAddress == null ? getBaseURL(request) : forcedBaseAddress;
                
        if (base.equals(lastBase)) {
            return;
        }
        Set<String> paths = transport.getDestinationsPaths();
        for (String path : paths) {
            ServletDestination d2 = transport.getDestinationForPath(path);
            String ad = d2.getEndpointInfo().getAddress();
			if (ad != null) {
				if (ad.equals(path) 
					|| ad.equals(lastBase + path)) {
					d2.getEndpointInfo().setAddress(base + path);
					if (d2.getEndpointInfo().getExtensor(AddressType.class) != null) {
						d2.getEndpointInfo().getExtensor(AddressType.class).setLocation(base + path);
					}
				}
			} 
        }
        lastBase = base;
    }

This works for my test case after rebuilding 2.2.4 with Maven.","21/Nov/09 05:49;ggregory@seagullsw.com;Oh, I'd still like to know if I can workaround the NPE by ""fixing"" the WSDL...",,,,,,,,,,,,,,,,,,,,,,,,,,,
Wrong classpath for dynamic client compilation in Weblogic,CXF-2549,12441072,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Critical,Fixed,dkulp,deki,deki,18/Nov/09 17:32,01/Feb/10 19:02,14/Mar/19 02:29,09/Dec/09 03:55,2.2.5,,,,,,,,,,,,,,2.1.9,2.2.6,,,JAXB Databinding,,,,,,0,,,,"Running in Weblogic 9.2 DynamicClientFactory.setupClasspath returns only the jars of the domain home and not the jars from the lib dir in the ear. Therefore the compilation fails:

 C:/Users/DeKiesel/AppData/Local/Temp/org.apache.cxf.jaxws.endpoint.dynamic.JaxWsDynamicClientFactory@1999620-1258564353941-src/de/testtest/testwebservice/GetRegistrationNumber.java:4: package javax.xml.bind.annotation does not exist
 import javax.xml.bind.annotation.XmlAccessType;
                                  ^
[...]
 Note: C:/Users/DeKiesel/AppData/Local/Temp/org.apache.cxf.jaxws.endpoint.dynamic.JaxWsDynamicClientFactory@1999620-1258564353941-src/de/testtest/testwebservice/ObjectFactory.java uses or overrides a deprecated API.
 Note: Recompile with -Xlint:deprecation for details.
 65 errors
1118 18:12:35 ERROR org.apache.cxf.endpoint.dynamic.DynamicClientFactory Could not compile java files for https://testtest.de/spartner/Service1.asmx?WSDL.

It seems the relevant classloader is skipped because it's not an instance of URLClassLoader (weblogic.utils.classloaders.ChangeAwareClassLoader extends weblogic.utils.classloaders.GenericClassLoader extends java.security.SecureClassLoader).

Any ideas?","Weblogic 9.2, JDK 1.5",,,,,,,,,,,,,,,,08/Dec/09 13:12;deki;cxf-2549.patch;https://issues.apache.org/jira/secure/attachment/12427333/cxf-2549.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113959,,,Tue Dec 08 13:12:20 UTC 2009,,,,,,0|i0uzdj:,178872,,,,,,,,08/Dec/09 13:12;deki;Patch created.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AsymmetricBindingHandler doesn't add value(s) for SignatureConfirmation check (Client Side Problem),CXF-2547,12441050,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,mellowsnow,mellowsnow,18/Nov/09 15:15,01/Feb/10 19:02,14/Mar/19 02:29,18/Nov/09 21:18,,,,,,,,,,,,,,,2.2.6,,,,WS-* Components,,,,,,0,,,,"If a WS-Security-Policy contains an AsymmetricBinding which requires a <sp:RequireSignatureConfirmation/> the AsymmetricBindingHandler doesn't add the byte value of the signatures to the  protected Vector<byte[]> signatures of the AbstractBindingBuilder. Thus when parsing the response the WSHanlder throws an exception:

org.apache.cxf.binding.soap.SoapFault: WSHandler: Check Signature confirmation: got a SC element, but no stored SV
	at org.apache.cxf.ws.security.wss4j.WSS4JInInterceptor.createSoapFault(WSS4JInInterceptor.java:547)
	at org.apache.cxf.ws.security.wss4j.WSS4JInInterceptor.handleMessage(WSS4JInInterceptor.java:308)
	at org.apache.cxf.ws.security.wss4j.WSS4JInInterceptor.handleMessage(WSS4JInInterceptor.java:77)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
	at org.apache.servicemix.cxfbc.CxfBcProviderMessageObserver.onMessage(CxfBcProviderMessageObserver.java:129)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleResponseInternal(HTTPConduit.java:2139)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleResponse(HTTPConduit.java:2022)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.close(HTTPConduit.java:1947)
	at org.apache.servicemix.cxfbc.CxfBcProvider.process(CxfBcProvider.java:235)
	at org.apache.servicemix.common.AsyncBaseLifeCycle.doProcess(AsyncBaseLifeCycle.java:627)
	at org.apache.servicemix.common.AsyncBaseLifeCycle.processExchange(AsyncBaseLifeCycle.java:581)
	at org.apache.servicemix.common.AsyncBaseLifeCycle.onMessageExchange(AsyncBaseLifeCycle.java:535)
	at org.apache.servicemix.common.SyncLifeCycleWrapper.onMessageExchange(SyncLifeCycleWrapper.java:60)
	at org.apache.servicemix.jbi.messaging.DeliveryChannelImpl.processInBound(DeliveryChannelImpl.java:623)
	at org.apache.servicemix.jbi.nmr.flow.AbstractFlow.doRouting(AbstractFlow.java:172)
	at org.apache.servicemix.jbi.nmr.flow.seda.SedaFlow.doRouting(SedaFlow.java:168)
	at org.apache.servicemix.jbi.nmr.flow.seda.SedaQueue$1.run(SedaQueue.java:134)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	... 1 more
Caused by: org.apache.ws.security.WSSecurityException: WSHandler: Check Signature confirmation: got a SC element, but no stored SV
	at org.apache.ws.security.handler.WSHandler.checkSignatureConfirmation(WSHandler.java:375)
	at org.apache.cxf.ws.security.wss4j.WSS4JInInterceptor.handleMessage(WSS4JInInterceptor.java:223)
	... 18 more

","System:
2.6.28-15-generic #52-Ubuntu SMP Wed Sep 9 10:48:52 UTC 2009 x86_64 GNU/Linux

Java:
java version ""1.6.0_16""
Java(TM) SE Runtime Environment (build 1.6.0_16-b01)
Java HotSpot(TM) 64-Bit Server VM (build 14.2-b01, mixed mode)

Apache CXF 2.2.3 (not in version list) ",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113957,,,2009-11-18 15:15:52.0,,,,,,0|i1404n:,231483,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException when trying to find WS-Addressing Action,CXF-2546,12440977,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,dkulp,jhite,jhite,17/Nov/09 21:36,01/Feb/10 19:02,14/Mar/19 02:29,15/Dec/09 22:31,2.2.4,,,,,,,,,,,,,,2.1.9,2.2.6,,,WS-* Components,,,,,,0,,,,"I have wsdl operations that look like this

<wsdl:operation name=""Ping"">
      <wsdl:input wsam:Action=""Test.Services/IProxyService/Ping"" message=""tns:IProxyService_Ping_InputMessage"" />
      <wsdl:output wsam:Action=""Test.Services/IProxyService/PingResponse"" message=""tns:IProxyService_Ping_OutputMessage"" />
  </wsdl:operation>

wsam=http://www.w3.org/2007/05/addressing/metadata

If I try to run the client with this wsdl, I get a NullPointerException

IProxyServiceClient:
     [java] Invoking ping...
     [java] Nov 17, 2009 4:15:58 PM org.apache.cxf.phase.PhaseInterceptorChain doIntercept
     [java] WARNING: Interceptor has thrown exception, unwinding now
     [java] java.lang.NullPointerException
     [java]     at org.apache.cxf.ws.addressing.ContextUtils.getAction(ContextUtils.java:803)
     [java]     at org.apache.cxf.ws.addressing.MAPAggregator.getActionFromInputMessage(MAPAggregator.java:438)
     [java]     at org.apache.cxf.ws.addressing.MAPAggregator.getActionUri(MAPAggregator.java:521)
     [java]     at org.apache.cxf.ws.addressing.MAPAggregator.assembleGeneric(MAPAggregator.java:427)
     [java]     at org.apache.cxf.ws.addressing.MAPAggregator.aggregate(MAPAggregator.java:396)
     [java]     at org.apache.cxf.ws.addressing.MAPAggregator.mediate(MAPAggregator.java:342)
     [java]     at org.apache.cxf.ws.addressing.MAPAggregator.handleMessage(MAPAggregator.java:158)
     [java]     at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
     [java]     at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:478)
     [java]     at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:308)
     [java]     at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:260)
     [java]     at org.apache.cxf.frontend.ClientProxy.invokeSync(ClientProxy.java:73)
     [java]     at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:124)
     [java]     at $Proxy39.ping(Unknown Source)
     [java]     at services.test.IProxyService_CustomBindingIProxyService_Client.main(IProxyService_CustomBindingIProxyService_Client.java:56)
     [java] Exception in thread ""main"" javax.xml.ws.soap.SOAPFaultException: Fault string, and possibly fault code, not set
     [java]     at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:146)
     [java]     at $Proxy39.ping(Unknown Source)
     [java]     at services.test.IProxyService_CustomBindingIProxyService_Client.main(IProxyService_CustomBindingIProxyService_Client.java:56)
     [java] Caused by: java.lang.NullPointerException
     [java]     at org.apache.cxf.ws.addressing.ContextUtils.getAction(ContextUtils.java:803)
     [java]     at org.apache.cxf.ws.addressing.MAPAggregator.getActionFromInputMessage(MAPAggregator.java:438)
     [java]     at org.apache.cxf.ws.addressing.MAPAggregator.getActionUri(MAPAggregator.java:521)
     [java]     at org.apache.cxf.ws.addressing.MAPAggregator.assembleGeneric(MAPAggregator.java:427)
     [java]     at org.apache.cxf.ws.addressing.MAPAggregator.aggregate(MAPAggregator.java:396)
     [java]     at org.apache.cxf.ws.addressing.MAPAggregator.mediate(MAPAggregator.java:342)
     [java]     at org.apache.cxf.ws.addressing.MAPAggregator.handleMessage(MAPAggregator.java:158)
     [java]     at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
     [java]     at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:478)
     [java]     at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:308)
     [java]     at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:260)
     [java]     at org.apache.cxf.frontend.ClientProxy.invokeSync(ClientProxy.java:73)
     [java]     at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:124)
     [java]     ... 2 more
     [java] Java Result: 1

if I switch the namespace prefix of the actions to wsaw, where wsaw=http://www.w3.org/2006/05/addressing/wsdl, everything works.

I'll upload a sample wsdl and ant build file. It will generate a client, server and ant file.

",,,,,,,,,,,,,,,,,17/Nov/09 21:39;jhite;WSAddressingSample.zip;https://issues.apache.org/jira/secure/attachment/12425261/WSAddressingSample.zip,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113956,,,Tue Nov 17 21:39:46 UTC 2009,,,,,,0|i14ep3:,233844,,,,,,,,"17/Nov/09 21:39;jhite;Run ant and it will generate the client, server and another ant file in the src folder. You can compile and run the server and the client using the generated ant file. 

When you run the client and server, you'll see the NullPointerException. If you change the WSDL so that the namespace prefix of the Action attribute is ""wsaw"" instead of ""wsam"", everything will work.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WS Addressing asynchronous transport and NullPointerException with Apache tomcat (threading problem ?) ,CXF-2545,12440905,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,mellowsnow,mellowsnow,17/Nov/09 07:44,01/Feb/10 19:02,14/Mar/19 02:29,08/Jan/10 14:48,,,,,,,,,,,,,,,2.1.9,2.2.6,,,WS-* Components,,,,,,0,,,,"Hi,


I've the problem, that for one of my services the following
java.lang.NullPointerException occurs:

WARNUNG: Interceptor has thrown exception, unwinding now
java.lang.NullPointerException
	at org.apache.coyote.http11.InternalInputBuffer.fill(InternalInputBuffer.java:735)
	at org.apache.coyote.http11.InternalInputBuffer$InputStreamInputBuffer.doRead(InternalInputBuffer.java:781)
	at org.apache.coyote.http11.InternalInputBuffer.doRead(InternalInputBuffer.java:708)
	at org.apache.coyote.Request.doRead(Request.java:428)
	at org.apache.catalina.connector.InputBuffer.realReadBytes(InputBuffer.java:304)
	at org.apache.tomcat.util.buf.ByteChunk.substract(ByteChunk.java:405)
	at org.apache.catalina.connector.InputBuffer.read(InputBuffer.java:327)
	at org.apache.catalina.connector.CoyoteInputStream.read(CoyoteInputStream.java:162)
	at com.ctc.wstx.io.UTF8Reader.loadMore(UTF8Reader.java:365)
	at com.ctc.wstx.io.UTF8Reader.read(UTF8Reader.java:110)
	at com.ctc.wstx.io.MergedReader.read(MergedReader.java:101)
	at com.ctc.wstx.io.ReaderSource.readInto(ReaderSource.java:84)
	at com.ctc.wstx.io.BranchingReaderSource.readInto(BranchingReaderSource.java:57)
	at com.ctc.wstx.sr.StreamScanner.loadMore(StreamScanner.java:992)
	at com.ctc.wstx.sr.BasicStreamReader.readTextSecondary(BasicStreamReader.java:4626)
	at com.ctc.wstx.sr.BasicStreamReader.readCoalescedText(BasicStreamReader.java:4124)
	at com.ctc.wstx.sr.BasicStreamReader.finishToken(BasicStreamReader.java:3699)
	at com.ctc.wstx.sr.BasicStreamReader.safeFinishToken(BasicStreamReader.java:3647)
	at com.ctc.wstx.sr.BasicStreamReader.getText(BasicStreamReader.java:809)
	at org.apache.cxf.staxutils.DepthXMLStreamReader.getText(DepthXMLStreamReader.java:160)
	at org.apache.cxf.staxutils.StaxUtils.readDocElements(StaxUtils.java:818)
	at org.apache.cxf.staxutils.StaxUtils.startElement(StaxUtils.java:767)
	at org.apache.cxf.staxutils.StaxUtils.readDocElements(StaxUtils.java:804)
	at org.apache.cxf.staxutils.StaxUtils.startElement(StaxUtils.java:767)
	at org.apache.cxf.staxutils.StaxUtils.readDocElements(StaxUtils.java:804)
	at org.apache.cxf.staxutils.StaxUtils.startElement(StaxUtils.java:767)
	at org.apache.cxf.staxutils.StaxUtils.readDocElements(StaxUtils.java:804)
	at org.apache.cxf.staxutils.StaxUtils.startElement(StaxUtils.java:767)
	at org.apache.cxf.staxutils.StaxUtils.readDocElements(StaxUtils.java:804)
	at org.apache.servicemix.cxfbc.interceptors.JbiInWsdl1Interceptor.getBodyElement(JbiInWsdl1Interceptor.java:351)
	at org.apache.servicemix.cxfbc.interceptors.JbiInWsdl1Interceptor.handleMessage(JbiInWsdl1Interceptor.java:96)
	at org.apache.servicemix.cxfbc.interceptors.JbiInWsdl1Interceptor.handleMessage(JbiInWsdl1Interceptor.java:59)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
	at org.apache.cxf.phase.PhaseInterceptorChain.resume(PhaseInterceptorChain.java:210)
	at org.apache.cxf.ws.addressing.ContextUtils$1.run(ContextUtils.java:414)
	at org.apache.cxf.workqueue.AutomaticWorkQueueImpl$2.run(AutomaticWorkQueueImpl.java:243)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:619)

It seems that Apache Tomcat recycles the InputStream of the request and thus closes the underlying InputStream.
I tested it with Tomcat 6.0.20 and 6.0.14 and have the same problem.

The strange thing is that it only occurs with one of my services and even there not constantly. Thus I'm not sure if it's a problem with CXF or with Tomcat 6.
Adding an extra interceptor (before the StaxInInterceptor), which copies the data of the InputStream to a ByteArrayInputStream solves the problem.

Could it be, that if WS Addressing with async. transport is used that the servlet container closes the resources before the InterceptorChain is resumed (line 414 ContextUtils)?

Greetings

Christian

","System:
2.6.28-15-generic #52-Ubuntu SMP Wed Sep 9 10:48:52 UTC 2009 x86_64 GNU/Linux

Java:
java version ""1.6.0_16""
Java(TM) SE Runtime Environment (build 1.6.0_16-b01)
Java HotSpot(TM) 64-Bit Server VM (build 14.2-b01, mixed mode)

Apache CXF 2.2.3 (not in version list) 
ServiceMix 3.3.1 with pachted CXF-BC component

Apache Tomcat 6.0.20 and 6.0.14",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113955,,,2009-11-17 07:44:04.0,,,,,,0|i14053:,231485,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Performance degradation in attachment logic in CXF 2.2.4,CXF-2544,12440879,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,piepera,piepera,16/Nov/09 23:24,04/Dec/09 22:34,14/Mar/19 02:29,18/Nov/09 21:19,2.2.4,,,,,,,,,,,,,,2.2.5,,,,,,,,,,0,,,,"AttachmentDeserializer attaches a DelegatingInputStream to the message, which contains the attachment body. The performance of this InputStream has been significantly degraded from CXF 2.2.2 to CXF 2.2.4. For example, a 55 megabyte file used to take around three seconds to parse - now it takes over one minute.

I've attached a performance test which demonstrates the issue, using an 8 megabyte file. In CXF v2.2.2, this test takes a fraction of a second to run. In CXF v2.2.4, this test takes about 10 seconds on my machine.

I tried to track down the cause of the degradation. AttachmentDeserializer  line 206 calls ""new InternetHeaders(stream)"" which takes a long time to complete. Since CXF v2.2.2 and CXF v2.2.4 use the same version of this InternetHeaders class, I believe it must be a change in the way the stream is being put together.",,,,,,,,,,,,,,,,,16/Nov/09 23:29;piepera;CxfBug1.java;https://issues.apache.org/jira/secure/attachment/12425169/CxfBug1.java,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2009-11-17 02:19:28.619,,,no_permission,,Moderate,,,,,,,,,,,113954,,,Tue Nov 17 02:19:28 UTC 2009,,,,,,0|i0v1vb:,179276,,,,,,,,"16/Nov/09 23:29;piepera;This is a test case which demonstrates the performance degradation. It needs apache commons-io.jar on the classpath, for IOUtils.copy().

CXF v2.2.4 produces the following output:
8,193.82 kb file created: C:\DOCUME~1\piepera\LOCALS~1\Temp\cxf.CxfBug18256
9.75 seconds
Done.

CXF 2.2.2 produces the following output:
8,193.82 kb file created: C:\DOCUME~1\piepera\LOCALS~1\Temp\cxf.CxfBug19656
1.078 seconds
Done.","17/Nov/09 02:19;dkulp;
This seems to have already been fixed in the 2.2.5 version currently being voted on:

dkulp@dilbert ~/tmp $ java -cp .:/tmp/apache-cxf-2.2.4/lib/cxf-manifest.jar CxfBug1
51,201.63 kb file created: /tmp/tesfile4006530662772200197
24.267 seconds
done
dkulp@dilbert ~/tmp $ java -cp .:/tmp/apache-cxf-2.2.5/lib/cxf-manifest.jar CxfBug1
51,201.63 kb file created: /tmp/tesfile6561428890710062154
0.202 seconds
done",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CXF client processes bar() response message when making foo() request,CXF-2543,12440839,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,seumassoltysik,seumassoltysik,16/Nov/09 18:20,01/Feb/10 19:02,14/Mar/19 02:29,17/Nov/09 01:16,2.1.3,,,,,,,,,,,,,,2.1.9,2.2.6,,,Soap Binding,,,,,,0,,,,"A client makes a String greetMe(String) invocation against a backend server. Because of a problem in the server, it resonds with a SOAP message corresponding to a String sayHi() response. The client processes the response without an error. Here is the schema for the response elements for the two invocations:
           <element name=""sayHi"">
                <complexType/>
            </element>
            <element name=""sayHiResponse"">
                <complexType>
                    <sequence>
                        <element name=""responseType"" type=""string""/>
                    </sequence>
                </complexType>
            </element>
            <element name=""greetMe"">
                <complexType>
                    <sequence>
                        <element name=""requestType"" type=""tns:MyStringType""/>
                    </sequence>
                </complexType>
            </element>
            <element name=""greetMeResponse"">
                <complexType>
                    <sequence>
                        <element name=""responseType"" type=""string""/>
                    </sequence>
                </complexType>
            </element>

In discussions with Dan, he suggested that because the child elements of both the sayHiResponse and the greetMeResonse are the same, then it is quite possible that sayHiResponse would be accepted in place of a greetMeResponse.",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113953,,,2009-11-16 18:20:26.0,,,,,,0|i0v20f:,179299,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DelegatingInputStream.close() causes MessageImpl.getContextualProperty throw NullPointerException,CXF-2542,12440832,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,piepera,piepera,16/Nov/09 17:47,01/Feb/10 19:02,14/Mar/19 02:29,17/Nov/09 01:22,2.2.4,,,,,,,,,,,,,,2.1.9,2.2.6,,,Core,,,,,,0,,,,"Parsing AttachmentDeserializer's attachments causes an NPE in MessageImpl.getContextualProperty sometimes. This can be fixed by adding a null check in MessageImpl's getContextualProperty method.

This problem exists in 2.2.4, it did not exist in 2.2.2. It was caused by a change in DelegatingInputStream's close behavior.",,,,,,,,,,,,,,,,,16/Nov/09 19:23;piepera;CxfBug0.java;https://issues.apache.org/jira/secure/attachment/12425116/CxfBug0.java,16/Nov/09 17:49;piepera;stack-trace.txt;https://issues.apache.org/jira/secure/attachment/12425102/stack-trace.txt,,,,,2.0,,,,,,,,,,,,,,,,,,,,2009-11-16 18:00:21.106,,,no_permission,,Novice,,,,,,,,,,,113952,,,Tue Nov 17 01:22:05 UTC 2009,,,,,,0|i0sy1r:,166993,,,,,,,,"16/Nov/09 17:49;piepera;A small program demonstrating the bug, and its associated stack trace. The error does not occur in CXF 2.2.2.","16/Nov/09 18:00;dkulp;
Is there a stack trace for when this occurs in a ""real life"" scenario.   In theory, when this is called as part of the  AttachmentDeserializer stuff, the Exchange would always be set in the message.    Thus, the null check wouldn't be needed.     

I have no problem adding the null checks, but I'm curious as to why it really is needed in a normal case.   :-)

","16/Nov/09 18:05;dkulp;
One more note: can you re-attach the CxfBug0.java thing with the ""grant to apache"" checkbox checked.   I can then use that code for a unit test.",16/Nov/09 19:23;piepera;A java program demonstrating the bug.,"16/Nov/09 19:38;piepera;Daniel,

Thanks for your speedy response! As far as why this comes up for us ""in the real world"". We need to look at an incoming message and determine which web service it's calling. This logic takes place before we pass the message to CXF. We've chosen to implement this with the following pseudocode:

public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {
  InputStream is = request.getInputStream();
  InputStream newIs = AttachmentDeserializer.removeAttachmentHeaders();
  String requestName = determineRequestName(newIs);
  if (isAppleRequest(requestName)) {
    redirectToAppleEndpoint();
  } else {
    redirectToBananaEndpoint();
  }
}

This logic uses AttachmentDeserializer's logic for carving the attachments out of messages. It's possible that if this logic were refactored into its own class, which took an InputStream/ContentType combination instead of a message, that we could use that class instead. That way we wouldn't need to impose any artificial ""null pointer padding"" on AttachmentDeserializer itself. With the current CXF implementation, we just create our own message from scratch, and pass that message into AttachmentDeserializer.","17/Nov/09 01:22;dkulp;
Added some NPE guards.

However, you can work around it with 2.2.4/2.2.5 by calling:
message.put(""attachment-directory"", ""/tmp"");
message.put(""attachment-memory-threshold"",  new Long(1024000l));

or similar.  Those are the properties it's trying to find.

",,,,,,,,,,,,,,,,,,,,,,,,,
JMX Per Operation ResponseTime not collected for JAX-RS services,CXF-2541,12440830,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,,cleclerc,cleclerc,16/Nov/09 17:30,01/Feb/10 19:02,14/Mar/19 02:29,17/Dec/09 18:33,2.2.3,,,,,,,,,,,,,,2.2.6,2.3,,,JAX-RS,,,,,,0,,,,"The JMX ResponseTimeFeature does not work on a per operation basis for JAXRS calls but works on a per Service basis.

My understanding is that it works on a per service basis because both o.a.c.jaxrs.JAXRSServiceImpl and o.a.c.service.ServiceImpl implement the same o.a.c.service.Service interface and are indexed in the Exchange map at the o.a.c.service.Service entry.

On the other hand, it does not work on the per operation basis because o.a.c.jaxrs.model.OperationResourceInfo and o.a.c.service.model.OperationInfo do not implement a shared interface. Thus, the ResponseTimeFeature is specific to SOAP operations and can not handle JAXRS 'operations'.

A fix could be to introduce a shared Operation interface, to make both OperationResourceInfo and OperationInfo implement this interface and to us the interface as the key for the Exchange map instead of the current OperationResourceInfo.class and OperationInfo.class.
There are 30 ""put()"" & ""get()"" calls on OperationInfo.class. and 8 ""put()"" & ""get()"" calls on OperationResourceInfo.class.

I would be very pleased to propose a patch if the project is interested.",,,,,,,,,,,,,,,,,16/Dec/09 15:04;cleclerc;CXF-2541-jaxrs-client.patch;https://issues.apache.org/jira/secure/attachment/12428172/CXF-2541-jaxrs-client.patch,11/Dec/09 12:54;sergey_beryozkin;cxf-2541.patch;https://issues.apache.org/jira/secure/attachment/12427717/cxf-2541.patch,16/Nov/09 22:52;cleclerc;usage-of-OperationInfo-and-OperationResourceInfo.log;https://issues.apache.org/jira/secure/attachment/12425163/usage-of-OperationInfo-and-OperationResourceInfo.log,,,,3.0,,,,,,,,,,,,,,,,,,,,2009-11-16 17:55:42.551,,,no_permission,,,,,,,,,,,,,113951,,,Tue Dec 22 10:41:32 UTC 2009,,,,,,0|i13zz3:,231458,,,,,,,,"16/Nov/09 17:55;sergey_beryozkin;Hi

Introducing a shared interface is an interesting idea. I think some of the JAXRS user code (custom filters, cxf interceptors, invokers) does expect OperationResourceInfo.class. Would it make sense (at least initially) to simply add another Exchange entry in addition to (rather than instead of) OperationInfo & OperationResourceInfo ? It will be just another entry in a map, with a minimum of overhead and with no impact on the existing users.

so for JAXWS we'll have :

exchange.put(OperationInfo.class, opInfo);
exchange.put(Operation.class, opInfo);

for JAXRS :

exchange.put(OperationResourceInfo.class, opInfo);
exchange.put(Operation.class, opInfo);



Another possibility is to introduce a management specific (JAXWS/JAXRS neutral) bean which will be keyed by a key like org.apache.cxf.management.operation or similar... So at the start of the exchange a management bean will be initialized and set on the exchange. The management code will check this bean/update it as needed

thoughts ?


thanks, Sergey ","16/Nov/09 22:52;cleclerc;Here is the listing of the 30 ""put()"" & ""get()"" calls on OperationInfo.class. and 9 ""put()"" & ""get()"" calls on OperationResourceInfo.class.
","17/Nov/09 12:24;sergey_beryozkin;Thanks for attaching this list. However, as I said in the previous comment, there could be (and I'm more or less sure there's some) user code out there which explicitly deals with getting say JAXRS OperationResourceInfo out of the exchange and doing some custom work with it. Perhaps there could be some similar custom JAXWS code too.

What is your opinion about the proposed alternatives, with the first one being similar to what you suggested but which avoids changing the existing gets and puts. The only interceptor which will have to be updated is AbstractMessageResponseTimeInterceptor as it will rely on the shared interface.

I'd also like to explore the possibility of introducing management beans instead

thanks, Sergey

","22/Nov/09 17:24;cleclerc;Hello Sergey,

Sorry for the late answer, I wanted to taked time to better understand this point.

I see great opportunities to share a common Service&Operation model in CXF (frontends, bindings, transports, etc). Of course, these services and operations should be extended for each frontend. I see quick wins for monitoring, logging, debugging and security.

Unfortunately, the Service and Operation declared in org.apache.cxf.service.model (cxf-api project) seem to be too much JAX-WS specific and not to fit well for JAX-RS needs. I imagine this is the reason why o.a.c.jaxrs.model.OperationResourceInfo doesn't extend o.a.c.service.model.OperationInfo .Moreover, I have the feeling the Exchange and Message maps have reached their limits : indexing properties by the class is tricky witch inheritance and we are never really sure an entry may be null or not. due to this, this seem to cause the introduction of ""not null defensive code"".

In an ideal world or for a long term goal, I would see :
* refactoring of  o.a.c.service.model ServiceInfo and OperationInfo to push the JAX-WS specific attributes in dedicated sub classes,
* refactoring of o.a.c.jaxrs.model.OperationResourceInfo to extend the common o.a.c.service.model OperationInfo,
* addition of Service and Operation attribute to the Exchange object next to the already existing Destination attribute.

A short term scenario with limited impacts could be to introduce a shared Operation interface in cxf-api project with limited attributes to prevent the dependencies issues (cxf-rt-management has no reason to depend on cxf-frontend-jaxrs). Finding a name to this interface could be challenging because o.a.c.service.model.OperationInfo is already used and the naming  convention is to suffix by ""Info"" (ServiceInfo, OperationInfo, etc).
A solution would be to introduce an interface o.a.c.service.Operation next to the already existing o.a.c.service.Service.

Cyrille","11/Dec/09 12:54;sergey_beryozkin;Hi Cyrille

Please see the attached patch, it shows the code I applied to the trunk/2.2.6

Can you give me a favor please and verify on your end that with this code you can see the counters for JAXRS operations ?

At the moment I feel this minor update is the least intrusive way to go forward. I'd like to get back to this issue later on and see if we can introduce ManagedOperation beans which frontend-specific interceptors which will be installed as part of frontend-specific features will populate.
Ex, it would make  sense to introduce a JAXRS feature which will add some additional counters, to do with subresources, with individual root resources, etc

thanks","16/Dec/09 09:40;cleclerc;Hi Sergey,

JAX-RS end point per operation monitoring works as expected with your patch. However, there is a problem for JAX-RS cleints (NPE because Service attribute is missing) ; I am working on it.

{noformat}
2009/12/16 10:35:19,028  WARN [http-8080-1] org.apache.cxf.phase.PhaseInterceptorChain - Exception in handleFault on interceptor org.apache.cxf.management.interceptor.ResponseTimeMessageOutInterceptor@1e19bba3
java.lang.NullPointerException
	at org.apache.cxf.management.interceptor.AbstractMessageResponseTimeInterceptor.increaseCounter(AbstractMessageResponseTimeInterceptor.java:108)
	at org.apache.cxf.management.interceptor.AbstractMessageResponseTimeInterceptor.endHandlingMessage(AbstractMessageResponseTimeInterceptor.java:74)
	at org.apache.cxf.management.interceptor.ResponseTimeMessageOutInterceptor.handleFault(ResponseTimeMessageOutInterceptor.java:62)
	at org.apache.cxf.phase.PhaseInterceptorChain.unwind(PhaseInterceptorChain.java:384)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:305)
	at org.apache.cxf.jaxrs.client.ClientProxyImpl.doChainedInvocation(ClientProxyImpl.java:429)
	at org.apache.cxf.jaxrs.client.ClientProxyImpl.invoke(ClientProxyImpl.java:166)
	at $Proxy69.sayHello(Unknown Source)
        ...
{noformat}","16/Dec/09 10:19;sergey_beryozkin;Hi Cyrille

thanks for the confirmation.
Perhaps AbstractMessageResponseTimeInterceptor can be updated to get Service out of Endpoint, endpoint.getService() ?

Or may be it would make sense to update AbstractClient.prepareMessage with something like

exchange.setContent(Service.class, cfg.getConduitSelector().getEndpoint().getService()) ?

Actually, ClientProxyImpl.doChainedInvocation should probably be updated to have 

""org.apache.cxf.management.operation.name"" set on the exchange as well, so that proxy-based clients can also have 
the operations checked...

thanks, Sergey","16/Dec/09 11:25;cleclerc;Hi Sergey,

For homogeneity with jaxws, I feel more like following the AbstractClient.prepareMessage() way.

Unfortunately, when I step-by-step debug the jax-rs client call, cfg.getConduitSelector().getEndpoint().getService() is null and I am digging to find where it could be elegantly initialized:-(

The next step would be to pass the OperationResourceInfo to this AbstractClient.prepareMessage() to set the Operation name. 

Does it make sense ?

Cyrille","16/Dec/09 11:46;sergey_beryozkin;Hi Cyrille

AbstractJAXRSFactoryBean.createEndpoint() initializes an endpoint with a service.

Adding exchange.setContent(Service.class, cfg.getConduitSelector().getEndpoint().getService()) ?
in AbstractClient.prepareMessage, after prepareConduitSelector() call, should work...

> The next step would be to pass the OperationResourceInfo to this AbstractClient.prepareMessage() to set the Operation name

AbstractClient.prepareMessage()  is also used by WebClient which has no notion of OperationResourceInfo, so doing it in

ClientProxyImpl.doChainedInvocation, immediately after prepareMessage(), on message.getExchange(), should do the trick

cheers, Sergey","16/Dec/09 15:04;cleclerc;Here is the patch for JAX-RS client monitoring :
* define exchange.service in o.a.c.jaxrs.client.AbstractClient.createMessage()
* define exchange.operationname in o.a.c.jaxrs.client.ClientProxyImpl.doChainedInvocation()","16/Dec/09 15:15;sergey_beryozkin;Hi Cyrille, thanks a lot, it looks fine. Would you like to do your first CXF commit :-) ?","16/Dec/09 15:22;cleclerc;Thanks Sergey but I didn't receive my credentials yet.
I may do my first commit on JAX-RS endpoints & clients' exception monitoring ; my project will need it very very soon :-) .
","16/Dec/09 16:53;sergey_beryozkin;Sure, no probs :-) I'll apply tomorrow, need to complete some Atom logging work

cheers, Sergey","17/Dec/09 18:33;sergey_beryozkin;Hi Cyrille, the patch has been applied with minor changes.
I'm closing this JIRA now, please create a new one to deal with the exceptions monitoring :-)
Note that I've changed ""org.apache.cxf.management.operation.name""  to ""org.apache.cxf.resource.operation.name""

and I also updated WebClient such that http-centric requests can be monitored, 
ex, webClient.post() should result in a counter for

post:http://someuri  

updated on the client side

please verify.

thanks, Sergey","21/Dec/09 23:52;cleclerc;I am not sure but I think the ""org.apache.cxf.resource.operation.name"" property should be set on the exchange rather than on the message in o.a.c.jaxrs.client.AbstractClient.setPlainOperationNameProperty() because o.a.c.management.interceptor.AbstractMessageResponseTimeInterceptor.increaseCounter() is looking on the exchange (see below).

Shall I commit the change ?

Cyrille


{code:title=AbstractClient.java : proposed version working on the exchange}
public class AbstractClient implements Client {
    ...
    protected void setPlainOperationNameProperty(Message outMessage, String name) {
        outMessage.getExchange().put(""org.apache.cxf.resource.operation.name"", name);
    }
}
{code}


{code:title=AbstractClient.java : current version working on the outMessage}
public class AbstractClient implements Client {
    ...
    protected void setPlainOperationNameProperty(Message outMessage, String name) {
        outMessage.put(""org.apache.cxf.resource.operation.name"", name);
    }
}
{code}


{code:title=AbstractMessageResponseTimeInterceptor.java : current version working on the exchange}
public abstract class AbstractMessageResponseTimeInterceptor extends AbstractPhaseInterceptor<Message> {
    ...
    private void increaseCounter(Exchange ex, MessageHandlingTimeRecorder mhtr) {
        ...
            if (operationName == null) {
                Object nameProperty = ex.get(""org.apache.cxf.resource.operation.name"");
                if (nameProperty != null) {
                    operationName = ""\"""" + nameProperty.toString() + ""\"""";
                }
            }
        ...
    }
{code}","22/Dec/09 10:41;sergey_beryozkin;Hi Cyrille, yes please go ahead with this update, 

sorry, it was my mistake.
Sergey

",,,,,,,,,,,,,,,
JMX ResponseTimeFeature does not count client side exceptions,CXF-2540,12440813,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,cleclerc,cleclerc,cleclerc,16/Nov/09 16:02,01/Feb/10 19:02,14/Mar/19 02:29,23/Dec/09 14:21,2.2.3,,,,,,,,,,,,,,2.2.6,2.3,,,Core,,,,,,0,,,,"JMX ResponseTimeFeature does not count client side exceptions like 404, Timeouts, interceptors exceptions, etc.

Due to this ResponseTimeCounter.runtimeFaults and ResponseTimeCounter.logicalRuntimeFaults are not incremented.",,,,,,,,,,,,,,,,,16/Nov/09 16:12;cleclerc;CXF-2540.patch;https://issues.apache.org/jira/secure/attachment/12425079/CXF-2540.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113950,,,Mon Nov 16 16:12:49 UTC 2009,,,,,,0|i0sy1z:,166994,,,,,,,,"16/Nov/09 16:12;cleclerc;Proposed patch :
* ClientFaultConverter.handleMessage() : if an exception was raised, set the ""FaultMode"" entry in the ""Exchange"" object

* ResponseTimeFeature.initializeProvider() : declare the ResponseTimeMessageInInterceptor as a InFaultInterceptor

* ResponseTimeMessageInInterceptor : register as a POST_LOGICAL phase rather than a RECEIVE to be invoked in case of failures before receiving the answer of the remote server (network communication error, 404, timeout, etc)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WSDLManagerImpl.loadDefinition(String url) fails on WebLogic because optional StaX method XMLInputFactory.createXMLStreamReader(Source source) used returns null,CXF-2536,12440696,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Critical,Fixed,dkulp,vanti,vanti,14/Nov/09 09:50,04/Dec/09 22:34,14/Mar/19 02:29,14/Nov/09 13:28,2.2.5,,,,,,,,,,,,,,2.2.5,,,,Core,,,,,,0,,,,"Reading WSDL does not work on WebLogic 10.3 since commit 835577 because
the StaxUtils.createXMLStreamReader(InputSource src) call depends on
StaxUtils.createXMLStreamReader(Source source) which uses
XMLInputFactory.createXMLStreamReader(Source source) which is a method marked as optional and it returns null in WebLogic StaX implementation
weblogic.xml.stax.XMLStreamInputFactory.","WebLogic 10.3, JRockit 1.6.0",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-11-14 13:28:19.466,,,no_permission,,,,,,,,,,,,,113946,,,Sat Nov 14 13:28:19 UTC 2009,,,,,,0|i0sy2f:,166996,,,,,,,,14/Nov/09 13:28;dkulp;Thanks for testing the snapshot,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
OverlayW3CDOMStreamWriter is not allowing multiple elements of the same name to be written out,CXF-2535,12440670,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,dkulp,dkulp,13/Nov/09 22:07,04/Dec/09 22:34,14/Mar/19 02:29,13/Nov/09 22:21,2.2.4,,,,,,,,,,,,,,2.2.5,,,,,,,,,,0,,,,"When using a Provider<SOAPMessage>, and schema validation is turned on, the body contents are written to the OverlayW3CDOMStreamWriter.  If the contents have two elements at the same level (maxOccurs != 1 type thing), they end up merged together.   

There is a ""side"" optimization in that with Provider<SOAPMessage>, we shouldn't need to buffer the out since it's a DOM already.",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113945,,,2009-11-13 22:07:40.0,,,,,,0|i14elz:,233830,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Content disposition values don't have their quotes stripped,CXF-2533,12440576,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,,bmargulies,bmargulies,13/Nov/09 02:32,04/Dec/09 22:34,14/Mar/19 02:29,13/Nov/09 09:28,2.2.4,,,,,,,,,,,,,,2.2.5,2.3,,,JAX-RS,,,,,,0,,,,"Given multipart/form-data.

Given a content-disposition of 

form-data; name=""comment""

Accessing the attachment list from the injected context, and then getting a ContentDisposition object for the attachment.


Calling ContentDisposition.getParameter(""name"") returns a string with the quotes still in place!

This can't be intended, but changing it is incompatible and people might have written code to work around the current behavior. I'm about to.
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-11-13 09:28:11.746,,,no_permission,,,,,,,,,,,,,113943,,,Fri Nov 13 09:28:11 UTC 2009,,,,,,0|i1403b:,231477,,,,,,,,13/Nov/09 09:28;sergey_beryozkin;That has been fixed on the trunk. Unfortunately it might brake other people's code but without this fix it was not possible to handle recursive multiparts (as in multipart/form-data with multiple files),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Wrong ""transport"" attribute in soap12:binding",CXF-2531,12440427,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,asoldano,asoldano,11/Nov/09 17:18,23/Mar/10 02:59,14/Mar/19 02:29,16/Feb/10 18:31,2.2.4,,,,,,,,,,,,,,2.2.7,,,,Soap Binding,Tooling,,,,,0,,,,"When deploying an endpoint having @BindingType(SOAP12HTTP_BINDING), in the generated wsdl we get a wsdl like this:

<wsdl:binding name=""SOAPEndpointServiceSoapBinding"" type=""tns:SOAPEndpoint"">
  <soap12:binding style=""rpc"" transport=""http://www.w3.org/2003/05/soap/bindings/HTTP/""/>
  <wsdl:operation name=""namespace"">
    <soap12:operation soapAction="""" style=""rpc""/>
    <wsdl:input name=""namespace"">
      <soap12:body namespace=""http://org.jboss.ws/jaxws/binding"" use=""literal""/>
    </wsdl:input>
    <wsdl:output name=""namespaceResponse"">
      <soap12:body namespace=""http://org.jboss.ws/jaxws/binding"" use=""literal""/>
    </wsdl:output>
  </wsdl:operation>
</wsdl:binding>

The problem is that transport=""http://www.w3.org/2003/05/soap/bindings/HTTP/"" while it should be trasport=""http://schemas.xmlsoap.org/soap/http"" as specified in 
http://www.w3.org/Submission/2006/SUBM-wsdl11soap12-20060405/#binding-element
http://www.ws-i.org/Profiles/BasicProfile-2_0(WGD).html#HTTP_Transport",,,,,,,,,,,,,,,CXF-2658,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113941,,,2009-11-11 17:18:11.0,,,,,,0|i0a62f:,57256,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FastInfoset Thread blocked,CXF-2530,12440306,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Blocker,Fixed,,keo,keo,10/Nov/09 18:04,13/Nov/09 17:27,14/Mar/19 02:29,12/Nov/09 10:54,2.2.3,,,,,,,,,,,,,,2.2.4,,,,OtherDatabindings,Transports,,,,,0,,,,"For a normal webservice all is fine 

but when we use Fastinfoset into cxf:bus
        <bean id=""fastinfoset"" class=""org.apache.cxf.feature.FastInfosetFeature""/> 
	<cxf:bus>
		<cxf:features>
			<cxf:logging />
			<ref bean=""fastinfoset""/> 
		</cxf:features>
	</cxf:bus>

we have got thread blocked and the java application didn't respond any more

just see the dump stacktrace

""http-0.0.0.0-8080-1"" daemon prio=10 tid=0x094c3400 nid=0x18f4 waiting for monitor entry [0x82e8d000]
   java.lang.Thread.State: BLOCKED (on object monitor)
	at java.lang.String.intern(Native Method)
	at com.sun.xml.fastinfoset.util.NamespaceContextImplementation.getNamespaceURI(NamespaceContextImplementation.java:75)
	at org.apache.cxf.interceptor.WrappedOutInterceptor.handleMessage(WrappedOutInterceptor.java:74)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
	- locked <0x8c615120> (a org.apache.cxf.phase.PhaseInterceptorChain)
	at org.apache.cxf.interceptor.OutgoingChainInterceptor.handleMessage(OutgoingChainInterceptor.java:74)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
	- locked <0x8c62af20> (a org.apache.cxf.phase.PhaseInterceptorChain)
	at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:104)
	at org.apache.cxf.transport.servlet.ServletDestination.invoke(ServletDestination.java:99)
	at org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:452)
	at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:196)
	at org.apache.cxf.transport.servlet.AbstractCXFServlet.invoke(AbstractCXFServlet.java:220)
	at org.apache.cxf.transport.servlet.AbstractCXFServlet.doPost(AbstractCXFServlet.java:153)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:637)
	at org.apache.cxf.transport.servlet.AbstractCXFServlet.service(AbstractCXFServlet.java:211)","Linux x86
java version ""1.6.0_16""
Java(TM) SE Runtime Environment (build 1.6.0_16-b01)
Java HotSpot(TM) Client VM (build 14.2-b01, mixed mode, sharing)
Jboss 5.1.0.GA",,,,,,,,,,,,,,,,10/Nov/09 18:11;keo;FullStackTrace.log;https://issues.apache.org/jira/secure/attachment/12424481/FullStackTrace.log,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2009-11-10 18:08:57.572,,,no_permission,,Moderate,,,,,,,,,,,113940,,,Thu Nov 12 10:54:20 UTC 2009,,,,,,0|i0ux9z:,178532,,,,,,,,"10/Nov/09 18:06;keo;for your information

when we throw an Exception, the webservice call works fine

","10/Nov/09 18:08;dkulp;
Are there any other related threads?     Having it blocked in   java.lang.String.intern(Native Method) is really scary.   That's a native method in the JDK.   No idea how that would occur.","10/Nov/09 18:11;keo;Just see
the full stacktrace","10/Nov/09 19:37;dkulp;
I logged a bug with the FastInfo set project:
https://fi.dev.java.net/issues/show_bug.cgi?id=28

I'm not sure what else we can do about it.   :-(","10/Nov/09 20:04;dkulp;
Looking in deeper, while the code ""should work"" as is (and thus the FI bug), there are a couple workarounds:

1) Is this a normal ""jaxws + jaxb"" service?  If so, make sure you have asm 2.x or 3.x on the classpath.   That should create the wrapper objects and avoid this code entirely.

2) You can configure the databinding in the spring config to have a ""DeclaredNamespaceMappings"" property which is a Map<String,String> of ns -> prefix.   If there is a prefix defined for the namespace already, we don't need to try and calculate one.

3) I'm modifying the code slightly to pre-intern the prefixes we're trying to test.   Thus, maybe (not really sure), it may work better in this case as the strings would already be interned.   May perform slightly better as well (no stringbuilders created).
","11/Nov/09 14:33;dkulp;
Any chance you can try any of the above solutions?   I also committed changes to CXF to hopefully help a little bit.   

That said, the FastInfoset folks found some issues and have a new jar for testing.   Can you look at:
https://fi.dev.java.net/issues/show_bug.cgi?id=28

Their new jar may also help.","12/Nov/09 09:31;keo;I will try it, just today","12/Nov/09 10:15;keo;Hi 

It seems it's works why new 2.2.4 cxf and 1.2.8 FIS",12/Nov/09 10:54;keo;it is works with 2.2.4 cxf and FIS 1.2.7,,,,,,,,,,,,,,,,,,,,,,
processCookieParam only returns last cookie,CXF-2529,12440218,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,sergey_beryozkin,jonathan.graf,jonathan.graf,09/Nov/09 22:52,04/Dec/09 22:34,14/Mar/19 02:29,10/Nov/09 17:04,2.2.2,,,,,,,,,,,,,,2.2.5,2.3,,,JAX-RS,,,,,,0,,,,"Problem class: org.apache.cxf.jaxrs.utils.JAXRSUtils

In JAXRSUtils.processCookieParam(), if there are multiple cookies in the header, only the last cookie will be returned when Cookie.valueOf() is called.

This is because the list of all cookies is returned from values.get(0).  When Cookie.valueOf() is called, it delegates to CookieHeaderProvider which simply loops through all of the tokenized cookie values and returns the last cookie.",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-11-10 17:04:18.724,,,no_permission,,,,,,,,,,,,,113939,,,Tue Nov 10 17:04:18 UTC 2009,,,,,,0|i0v1xz:,179288,,,,,,,,"10/Nov/09 17:04;sergey_beryozkin;trunk : http://svn.apache.org/viewvc?rev=834507&view=rev
2.2.x :  http://svn.apache.org/viewvc?rev=834542&view=rev",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SymmetricBindingHandler wrongly uses relative references to wsc:Identifiers,CXF-2527,12440042,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,coheigea,coheigea,06/Nov/09 17:02,11/Oct/10 14:45,14/Mar/19 02:29,05/Oct/10 15:35,2.1.7,2.2.4,,,,,,,,,,,,,2.2.11,,,,WS-* Components,,,,,,0,,,,"The SymmetricBindingHandler wrongly uses relative references to wsc:Identifiers, whereas the WS-SecureConversation spec states that they must be absolute URI's. ",,,,,,,,,,,,,,,,,06/Nov/09 17:18;coheigea;cxf-2527.patch;https://issues.apache.org/jira/secure/attachment/12424210/cxf-2527.patch,,,,,,1.0,,,,,,,,,,,,,,,,,Blocked on External,,,2009-11-11 20:16:36.378,,,no_permission,,,,,,,,,,,,,113937,,,Wed Nov 11 20:16:36 UTC 2009,,,,,,0|i13yfb:,231207,,,,,,,,"06/Nov/09 17:18;coheigea;
A patch for this issue. Note that this patch depends on WSS4J 1.5.9 which is not released yet:

https://issues.apache.org/jira/browse/WSS-217
","11/Nov/09 20:16;dkulp;
Moving to 2.2.6/2.1.9 as the required wss4j version won't be released before 2.2.6/2.1.8.   When wss4j 1.5.9 is released, we can apply this.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bug in TokenStoreCallbackHandler,CXF-2525,12440040,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,dkulp,coheigea,coheigea,06/Nov/09 15:46,04/Dec/09 22:34,14/Mar/19 02:29,10/Nov/09 16:22,2.1.7,2.2.4,,,,,,,,,,,,,2.1.8,2.2.5,2.3,,WS-* Components,,,,,,0,,,,"
There's a bug in WSS4JInInterceptor.TokenStoreCallbackHandler which manifests itself in Secure Conversation under certain circumstances. 

When CXF issues a SecurityContextToken it includes a wst:RequestedAttachedReference, however other stacks only return a SecurityContextToken. When trying to retrieve the SecurityContextToken in SecurityTokenReference in WSS4J it calls the TokenStoreCallbackHandler, which sets:

pc.setCustomToken(tok.getAttachedReference());

If there is no attached reference as in this scenario, the custom token is set to null and ends up causing an error in WSS4J. The correct fix is to call:

pc.setCustomToken(tok.getToken());",,,,,,,,,,,,,,,,,06/Nov/09 15:54;coheigea;cxf-2525.patch;https://issues.apache.org/jira/secure/attachment/12424208/cxf-2525.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113936,,,Fri Nov 06 15:54:58 UTC 2009,,,,,,0|i14ey7:,233885,,,,,,,,"06/Nov/09 15:54;coheigea;
A patch against 2.2.x-fixes.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
STSClient requires Lifetime element in RSTR,CXF-2524,12439965,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,owulff,owulff,05/Nov/09 19:31,04/Dec/09 22:34,14/Mar/19 02:29,05/Nov/09 23:14,2.2.4,,,,,,,,,,,,,,2.2.5,,,,,,,,,,0,,,,"The STSClient in CXF requires that an STS returns the Lifetime element which is optional as per WS-Trust 1.3 spec:
[http://docs.oasis-open.org/ws-sx/ws-trust/200512/ws-trust-1.3-os.html]
>>>
4.4 Returning a Security Token
...
wst:RequestSecurityTokenResponse/wst:Lifetime
This optional element specifies the lifetime of the issued security token.  If omitted the lifetime is unspecified (not necessarily unlimited).  It is RECOMMENDED that if a lifetime exists for a token that this element be included in the response.
>>>

STSClient.java:
...
        while (el != null) {
            String ln = el.getLocalName();
            if (namespace.equals(el.getNamespaceURI())) {
                if (""Lifetime"".equals(ln)) {
                    lte = el;
...
        SecurityToken token = new SecurityToken(id, rstDec, lte);
...

SecurityToken.java:
...
    public SecurityToken(String id,
                 Element tokenElem,
                 Element lifetimeElem) {
        this.id = id;
        this.token = cloneElement(tokenElem);
        this.processLifeTime(lifetimeElem);
...
    /**
     * @param lifetimeElem
     * @throws TrustException 
     */
    private void processLifeTime(Element lifetimeElem) {
        try {
            DatatypeFactory factory = DatatypeFactory.newInstance();
            
            Element createdElem = 
                DOMUtils.getFirstChildWithName(lifetimeElem,
                                                WSConstants.WSU_NS,
                                                WSConstants.CREATED_LN);
            this.created = factory.newXMLGregorianCalendar(DOMUtils.getContent(createdElem))
                .toGregorianCalendar();

            Element expiresElem = 
                DOMUtils.getFirstChildWithName(lifetimeElem,
                                                WSConstants.WSU_NS,
                                                WSConstants.EXPIRES_LN);
            this.expires = factory.newXMLGregorianCalendar(DOMUtils.getContent(expiresElem))
                .toGregorianCalendar();
        } catch (DatatypeConfigurationException e) {
            //shouldn't happen

If ""null"" is passed to processLifeTime a NPE occurs. If the CXF internals don't depend on the lifetime the following might fix it already:
...
    public SecurityToken(String id,
                 Element tokenElem,
                 Element lifetimeElem) {
        this.id = id;
        this.token = cloneElement(tokenElem);
        if (lifetimeElem !=null) this.processLifeTime(lifetimeElem);
...
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113935,,,Thu Nov 05 20:42:25 UTC 2009,,,,,,0|i14e7b:,233764,,,,,,,,"05/Nov/09 19:35;owulff;Here the NPE:

java.lang.NullPointerException
        at org.apache.cxf.helpers.DOMUtils.getFirstChildWithName(DOMUtils.java:307)
        at org.apache.cxf.ws.security.tokenstore.SecurityToken.processLifeTime(SecurityToken.java:181)
        at org.apache.cxf.ws.security.tokenstore.SecurityToken.<init>(SecurityToken.java:160)
        at org.apache.cxf.ws.security.trust.STSClient.createSecurityToken(STSClient.java:726)
        at org.apache.cxf.ws.security.trust.STSClient.requestSecurityToken(STSClient.java:447)
        at org.apache.cxf.ws.security.trust.STSClient.requestSecurityToken(STSClient.java:345)
        at org.apache.cxf.ws.security.trust.STSClient.requestSecurityToken(STSClent.java:337) ","05/Nov/09 20:42;owulff;I went through the CXF code and found only one location where SecurityToken.getExpires is called:

MemoryTokenStore.java:
>>>
    protected void processTokenExpiry() {
        long time = System.currentTimeMillis();
        for (SecurityToken token : tokens.values()) {
            if (token.getState() == State.EXPIRED
                || token.getState() == State.CANCELLED) {
                if (autoRemove) {
                    remove(token);
                }
            } else if (token.getExpires() != null 
                && token.getExpires().getTimeInMillis() < time) {
                token.setState(SecurityToken.State.EXPIRED);
                if (autoRemove) {
                    remove(token);
                }
            }            
        }
    }
>>>

This code can handle a null value for expires and therefore it should be safe to implement the proposed fix.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
wsdl2java not honoring jaxws:parameter extension for wrapped elements,CXF-2522,12439914,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,dkulp,dkulp,05/Nov/09 06:26,04/Dec/09 22:34,14/Mar/19 02:29,05/Nov/09 18:08,,,,,,,,,,,,,,,2.2.5,,,,Tooling,,,,,,0,,,,"
As per:
http://old.nabble.com/wsdl2java-%3AJava-Parameter-Name-Customization-tp26194021p26194021.html",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113934,,,2009-11-05 06:26:56.0,,,,,,0|i13zhj:,231379,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
wrong handling in setNamespaceMap for AbstractDataBinding,CXF-2520,12439847,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,,alos,alos,04/Nov/09 12:48,04/Dec/09 22:34,14/Mar/19 02:29,09/Nov/09 01:47,2.2.4,,,,,,,,,,,,,,2.2.5,,,,Core,,,,,,0,,,,"The Class org.apache.cxf.databinding.AbstractDataBinding has a Bug in the checking of duplicate NamespacePrefixes during the setting of the namespaceMap.

Extraction of class:
    public void setNamespaceMap(Map<String, String> namespaceMap) {
        // make some checks. This is a map from namespace to prefix, but we want unique prefixes.
        if (namespaceMap != null) {
            Set<String> prefixesSoFar = new HashSet<String>();
            for (Map.Entry<String, String> mapping : namespaceMap.entrySet()) {
                if (prefixesSoFar.contains(mapping.getValue())) {
                    throw new IllegalArgumentException(""Duplicate prefix "" + mapping.getValue());
                }
            }
        }
        this.namespaceMap = namespaceMap;
    }

There is no adding method for prefixesSoFar-Set.

My solving idea is:
  /**
   * @param namespaceMap The namespaceMap to set.
   */
  public void setNamespaceMap(Map<String, String> namespaceMap) {
    // make some checks. This is a map from namespace to prefix, but we want unique prefixes.
    if ((namespaceMap == null) || namespaceMap.isEmpty()) {
      throw new IllegalArgumentException(""adding a null or empty namespaceMap is not allowed"");
    } else {
      Set<String> prefixesSoFar = new HashSet<String>();
      for (Map.Entry<String, String> mapping : namespaceMap.entrySet()) {
        if (prefixesSoFar.contains(mapping.getValue())) {
          throw new IllegalArgumentException(""Duplicate prefix "" + mapping.getValue());
        }
        prefixesSoFar.add(mapping.getValue());
      }
      mapper = new NamespaceMapper(namespaceMap);
    }
  }

This solution is more strict, because it does not allow to add a null or an empty Map.

The same Bug goes for checkNameSpaceMap. 
The both method are smelling, because it is copy paste. It can be solved in a smater way :).

",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-11-04 12:59:52.929,,,no_permission,,Novice,,,,,,,,,,,113932,,,Mon Nov 09 01:47:18 UTC 2009,,,,,,0|i0sy2n:,166997,,,,,,,,"04/Nov/09 12:59;bmargulies;Would you be willing to post a formal patch with a cleanup?
","09/Nov/09 01:47;bmargulies;I did this in r833963. I did not reject null, rejecting null was never intended.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Exception shouldn't be considered as JBI ERROR,should use JBI FAULT instead",CXF-2517,12439733,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,ffang,ffang,ffang,03/Nov/09 08:10,04/Dec/09 22:34,14/Mar/19 02:29,05/Nov/09 02:18,,,,,,,,,,,,,,,2.1.8,2.2.5,2.3,,Integration,,,,,,0,,,,this is a problem when use code first way in cxf se and also use faultlistener in wiretap,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113929,,,Thu Nov 05 02:18:18 UTC 2009,,,,,,0|i0v1wn:,179282,,,,,,,,"05/Nov/09 02:18;ffang;commit fix

http://svn.apache.org/viewvc?rev=832355&view=rev for trunk
http://svn.apache.org/viewvc?rev=832352&view=rev for 2.2 branch
http://svn.apache.org/viewvc?rev=832833&view=rev for 2.1.x branch",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Schema resolution when Schemas in Jar separate from endpoint implementation,CXF-2516,12439680,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,ctataryn,ctataryn,02/Nov/09 17:20,04/Dec/09 22:34,14/Mar/19 02:29,02/Nov/09 22:03,2.2.3,,,,,,,,,,,,,,2.1.8,2.2.5,,,JAX-WS Runtime,,,,,,0,,,,"I'm going to attach a project which will demonstrate the problem.  

Essentially I have a Web Service Implementation in a WebService module.  I have separated out the schemas and wsdls into a module called  WebServiceSchemasAndWSDL.  The SchemasAndWSDL project is a dependency of the WebService project.  If I turn on  xsd-validation for my endpoint, when validation runs it will complain that it can't find certain schemas, for example:

<pre>
org.apache.cxf.wsdl.EndpointReferenceUtils$SchemaLSResourceResolver
resolveResource
WARNING: Could not resolve Schema for COCT_MT090102CA.xsd
</pre>

COCT_MT090102CA.xsd is not referenced *directly* from the WSDL, it's actually referenced from one of the schemas the WSDL references.

STRUCTURE OF THE PROJECTS:
*WebService Project:*
src/main/java/my/pack/WebServiceImpl.java
/src/main/resources/config/spring/endpointBeans.xml

*WSDLandSchemas Project:*
src/main/generated/... <-- all the JAXB generated resources from the Schemas/WSDL including the service interface being implemented in the WebService project
src/main/resources/wsdl/WebService.wsdl
src/main/resources/telus/Schemas
src/main/resources/telus/schemas/coreschemas

So COCT_MT090102CA.xsd exists in the 3rdParty directory (i.e. telus/Schemas) within the WSDLandSchemas project (which is on the classpath for the WebService project). The WSDL references a schema in that same directory and it's that schema which has an <xsd:include schemaLocation=""COCT_MT090102CA.xsd""/>

I'll attach the schema validation errors which occure, as well as the sample project.

My original problem centered around the fact that if I separated out the wsdl from the schemas (i.e. put the wsdl directly into the WebService project, and ran cxf-codegen-plugin from there) it could never figure out the refereces that the schemas in telus/Schemas had to xsds in  telus/schemas/coreschemas.  But one problem at a time I suppose.","Windows XP, Spring 2.5.6
java version ""1.6.0""
Java(TM) SE Runtime Environment (build pwi3260sr3-20081106_07(SR3))
IBM J9 VM (build 2.4, J2RE 1.6.0 IBM J9 2.4 Windows XP x86-32 jvmwi3260-20081105_25433 (JIT enabled, AOT enabled)
J9VM - 20081105_025433_lHdSMr
JIT  - r9_20081031_1330
GC   - 20081027_AB)
JCL  - 20081106_01
",,,,,,,,,,,,,,,,02/Nov/09 17:23;ctataryn;CXFSchemaProblem.zip;https://issues.apache.org/jira/secure/attachment/12423830/CXFSchemaProblem.zip,02/Nov/09 17:23;ctataryn;out.txt;https://issues.apache.org/jira/secure/attachment/12423831/out.txt,,,,,2.0,,,,,,,,,,,,,,,,,,,,2009-11-02 22:05:57.973,,,no_permission,,,,,,,,,,,,,113928,,,Mon Nov 02 22:05:57 UTC 2009,,,,,,0|i0v1zb:,179294,,,,,,,,"02/Nov/09 17:23;ctataryn;Attaching the sample project.  There is a sample request you can use within the WebService directory (sampleRequest.xml).  Also, out.txt contains stderr messages from the schema validation.","02/Nov/09 22:05;dkulp;
Just a clarification....

I managed to get your usecase working, but required some changes to the wsdl.  There may be a bug in the Schema factory things in the JDK.  It  seems that it's only doing the first ""xsd:import"" of a given namespace.  If I change the wsdl to have a second schema with that targetNamespace which then includes everything instead of importing, then just does as import in the original schema, it seems to work now work fine.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
catalog.cat in some modules is incorrect,CXF-2515,12439652,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,ffang,ffang,ffang,02/Nov/09 09:03,04/Dec/09 22:34,14/Mar/19 02:29,04/Nov/09 18:11,2.1.7,2.2.4,,,,,,,,,,,,,2.1.8,2.2.5,2.3,,,,,,,,0,,,,"should add
SYSTEM ""http://schemas.xmlsoap.org/wsdl/2003-02-11.xsd"" ""../../../../../../common/schemas/src/main/resources/schemas/wsdl/wsdl.xsd""
to make  reference http://schemas.xmlsoap.org/wsdl/2003-02-11.xsd to point to actual local schema file ",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113927,,,2009-11-02 09:03:28.0,,,,,,0|i1aecn:,268791,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Custom ContextResolver is not picked up for marshal/unmarshal calls for application/json and application/xml media types.,CXF-2514,12439646,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,sergey_beryozkin,chaitanyak,chaitanyak,02/Nov/09 07:33,04/Dec/09 22:34,14/Mar/19 02:29,09/Nov/09 20:59,2.2.4,,,,,,,,,,,,,,2.2.5,2.3,,,JAX-RS,,,,,,0,,,,"In the method org.apache.cxf.jaxrs.provider.AbstractJAXBProvider.getJAXBContext(Class<?> type, Type genericType) 

            ContextResolver<JAXBContext> resolver = mc.getResolver(ContextResolver.class, JAXBContext.class);

getResolver(...) always returns null.
			
			This happens because in org.apache.cxf.jaxrs.utils.JAXRSUtils.createContextResolver(Type genericType, Message m) method there is a check (genericType instanceof ParameterizedType) in this case genericType is JAXBContext.class which is not an instance of ParameterizedType so the check fails and a null value is returned.
			
Suggested Fix : Inject the context resolver directly in to AbstractJAXBProvider as it was done in an earlier version.","Windows, jdk1.5.0_06",,,,,,,,,,,,,,,,02/Nov/09 07:41;chaitanyak;json_test.war;https://issues.apache.org/jira/secure/attachment/12423799/json_test.war,02/Nov/09 07:41;chaitanyak;sources.zip;https://issues.apache.org/jira/secure/attachment/12423800/sources.zip,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113926,,,Mon Nov 02 07:41:41 UTC 2009,,,,,,0|i1402n:,231474,,,,,,,,02/Nov/09 07:41;chaitanyak;The sources and the war application are attached.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
env:Header's confuse generate Javascript,CXF-2513,12439627,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,,bmargulies,bmargulies,01/Nov/09 15:06,04/Dec/09 22:34,14/Mar/19 02:29,01/Nov/09 15:44,2.2.4,,,,,,,,,,,,,,2.2.5,,,,JavaScript Client,,,,,,0,,,,"If a message from a server to a Javascript client contains a Header, even an empty one, the Javascript code fails.
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113925,,,Sun Nov 01 15:44:11 UTC 2009,,,,,,0|i14emn:,233833,,,,,,,,01/Nov/09 15:44;bmargulies;r831688. Fixed to skip the Header and any other annoying interposed items before the Body.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The Soap11FaultOutInterceptor does not include the stacktrace even if FAULT_STACKTRACE_ENABLED is set,CXF-2511,12439567,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,dkulp,chrisdail,chrisdail,30/Oct/09 19:30,04/Dec/09 22:34,14/Mar/19 02:29,31/Oct/09 01:05,2.2.3,2.2.4,,,,,,,,,,,,,2.1.8,2.2.5,,,Soap Binding,,,,,,0,,,,"The stacktrace is not included in the SoapFault that is passed back to the client even if the FAULT_STACKTRACE_ENABLED is set to true. In a sample service I have the following property configured.

      <jaxws:properties>
          <entry key=""faultStackTraceEnabled"" value=""true""/>
      </jaxws:properties>

I debugged the issue and found the property was indeed set when it reached the Soap11FaultOutInterceptor. I did get to the root of the problem and will submit a patch for the fix.","Windows, Java 6",,,,,,,,,,,,,,,,30/Oct/09 19:32;chrisdail;Soap11FaultOutInterceptor.patch;https://issues.apache.org/jira/secure/attachment/12423712/Soap11FaultOutInterceptor.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2009-10-31 01:05:54.481,,,no_permission,,Novice,,,,,,,,,,,113923,,,Sat Oct 31 01:05:54 UTC 2009,,,,,,0|i14dsv:,233699,,,,,,,,"30/Oct/09 19:32;chrisdail;One branch handled this correctly if the 'detail' element was null. The other else condition was attempting to create the stackTrace element but was not including the actual stacktrace. The result was that the stacktrace element was present but with no content.

                            Element stackTrace = detail.getOwnerDocument().createElementNS(
                                    Soap11.SOAP_NAMESPACE, Fault.STACKTRACE);
                            detail.appendChild(stackTrace);

The fix was to add the line:
                            stackTrace.setTextContent(sb.toString());

Patch is attached that fixes this issue.",31/Oct/09 01:05;dkulp;Patch applied. Thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
XMLBEANS_NAMESPACE_HACK alternative is missing in case of XmlBeans data binding,CXF-2510,12439554,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Critical,Fixed,dkulp,mklimiuk,mklimiuk,30/Oct/09 17:14,04/Dec/09 22:34,14/Mar/19 02:29,02/Nov/09 17:33,,,,,,,,,,,,,,,2.1.8,2.2.5,,,OtherDatabindings,,,,,,0,,,,"MAIN DESCRIPTION

Is there a chance to port the XMLBEANS_NAMESPACE_HACK feature from XFire to CXF?

Here is a reference: http://xfire.codehaus.org/XMLBeans+Integration



PROBLEM

CXF always use XMLBeans XMLStreamReader to write to the outgoing xml stream.

There is a number of issues related to namespaces when this reader is used, e.g.:

1. It either fails to read info or fails to write info in some cases.

2. Namespaces are duplicated for each element even with
   the fix http://issues.apache.org/jira/browse/CXF-2468

If there was an opportunity to switch CXF to use XMLBeans DOM as a source object
instead of XMLStreamReader then I suppose these issues would be resolved.



BACKGROUND - SOME XFIRE SOURCES

xfire-1.2.4\xfire-xmlbeans\src\main\org\codehaus\xfire\xmlbeans\XmlBeansType.java

Here is an excerpt from the XmlBeansType.writeObject(..) method:

            if (Boolean.valueOf((String) context.getContextualProperty(XMLBEANS_NAMESPACE_HACK)).booleanValue())
            {
                Object o = obj.newDomNode();
                if (o instanceof Document)
                {
                    org.w3c.dom.Element e = ((Document) o).getDocumentElement();
                    STAXUtils.writeElement(e, xsw, false);
                }
                else if (o instanceof DocumentFragment)
                {
                    DocumentFragment frag = (DocumentFragment) o;
                    
                    NodeList nodes = frag.getChildNodes();
                    Node node = nodes.item(0);
                    nodes = node.getChildNodes();
                    for (int i = 0; i < nodes.getLength(); i++)
                    {
                        STAXUtils.writeNode(nodes.item(i), xsw, false);
                    }
                }
                else
                {
                    throw new XFireRuntimeException(""Invalid document type returned: "" + o);
                }
            }
            else
            {
                XmlCursor cursor = obj.newCursor();
                
                STAXUtils.copy(cursor.newXMLStreamReader(), 
                                ((ElementWriter) writer).getXMLStreamWriter());
            }",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-11-02 17:33:35.876,,,no_permission,,,,,,,,,,,,,113922,,,Mon Nov 02 17:33:35 UTC 2009,,,,,,0|i0uyuf:,178786,,,,,,,,"02/Nov/09 15:45;mklimiuk;Hi Daniel,

It seems one conditional statement is missed in the fix.

The logic after this condition:

    if (message != null 
        && MessageUtils.getContextualBoolean(message, 
            XmlBeansDataBinding.XMLBEANS_NAMESPACE_HACK, 
                false)) {

should be in ELSE block:

137    } else {
               XMLStreamReader reader;
               if (obj instanceof XmlObjectBase) {
                   XmlObjectBase source = (XmlObjectBase)obj;
                   reader = source.newCursorForce().newXMLStreamReader(options);
               ...
               } else {
                   StaxUtils.copy(reader, output, true);
               }
169    }

I.e. this ELSE block statement is missed.

Please check.",02/Nov/09 17:33;dkulp;Added a missing return at the end of the block for the hack.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java.lang.reflect.GenericSignatureFormatError within JAXBContextInitializer,CXF-2509,12439495,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,grzegorz_oledzki,grzegorz_oledzki,30/Oct/09 10:02,04/Dec/09 22:34,14/Mar/19 02:29,30/Oct/09 16:28,2.2.4,,,,,,,,,,,,,,2.2.5,,,,JAXB Databinding,,,,,,0,,,,"We have a bunch of web services started programmatically using:
{code}
JaxWsServerFactoryBean factory = new JaxWsServerFactoryBean();
factory.setServiceClass(serviceInterface);
factory.setServiceBean(serviceBean);
factory.setAddress(url);
...
factory.create();
{code}

Some of the services include a method which return type is generics:
{code}
public interface Service<DTO extends Entity<? extends Serializable>, QS extends QuerySummary> extends ... {
QueryResult<DTO, QS> read(Query query, UserId uc);
...
}
{code}

After upgrading CXF to version 2.2.4 they no longer start. The exception thrown is:
{code}
java.lang.reflect.GenericSignatureFormatError
	at sun.reflect.generics.parser.SignatureParser.error(SignatureParser.java:103)
	at sun.reflect.generics.parser.SignatureParser.parseFieldTypeSignature(SignatureParser.java:233)
	at sun.reflect.generics.parser.SignatureParser.parseTypeArgument(SignatureParser.java:319)
	at sun.reflect.generics.parser.SignatureParser.parseTypeArguments(SignatureParser.java:284)
	at sun.reflect.generics.parser.SignatureParser.parseSimpleClassTypeSignature(SignatureParser.java:260)
	at sun.reflect.generics.parser.SignatureParser.parseClassTypeSignatureSuffix(SignatureParser.java:270)
	at sun.reflect.generics.parser.SignatureParser.parseClassTypeSignature(SignatureParser.java:244)
	at sun.reflect.generics.parser.SignatureParser.parseFieldTypeSignature(SignatureParser.java:228)
	at sun.reflect.generics.parser.SignatureParser.parseTypeArgument(SignatureParser.java:319)
	at sun.reflect.generics.parser.SignatureParser.parseTypeArguments(SignatureParser.java:284)
	at sun.reflect.generics.parser.SignatureParser.parseSimpleClassTypeSignature(SignatureParser.java:260)
	at sun.reflect.generics.parser.SignatureParser.parseClassTypeSignatureSuffix(SignatureParser.java:270)
	at sun.reflect.generics.parser.SignatureParser.parseClassTypeSignature(SignatureParser.java:244)
	at sun.reflect.generics.parser.SignatureParser.parseFieldTypeSignature(SignatureParser.java:228)
	at sun.reflect.generics.parser.SignatureParser.parseTypeSignature(SignatureParser.java:359)
	at sun.reflect.generics.parser.SignatureParser.parseTypeSig(SignatureParser.java:157)
	at sun.reflect.generics.repository.FieldRepository.parse(FieldRepository.java:34)
	at sun.reflect.generics.repository.FieldRepository.parse(FieldRepository.java:24)
	at sun.reflect.generics.repository.AbstractRepository.<init>(AbstractRepository.java:56)
	at sun.reflect.generics.repository.FieldRepository.<init>(FieldRepository.java:30)
	at sun.reflect.generics.repository.FieldRepository.make(FieldRepository.java:48)
	at java.lang.reflect.Field.getGenericInfo(Field.java:85)
	at java.lang.reflect.Field.getGenericType(Field.java:223)
	at org.apache.cxf.jaxb.JAXBContextInitializer.walkReferences(JAXBContextInitializer.java:288)
	at org.apache.cxf.jaxb.JAXBContextInitializer.addClass(JAXBContextInitializer.java:244)
	at org.apache.cxf.jaxb.JAXBContextInitializer.begin(JAXBContextInitializer.java:151)
	at org.apache.cxf.service.ServiceModelVisitor.visitOperation(ServiceModelVisitor.java:109)
	at org.apache.cxf.service.ServiceModelVisitor.walk(ServiceModelVisitor.java:74)
	at org.apache.cxf.jaxb.JAXBDataBinding.initialize(JAXBDataBinding.java:322)
	at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.buildServiceFromClass(ReflectionServiceFactoryBean.java:398)
	at org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean.buildServiceFromClass(JaxWsServiceFactoryBean.java:525)
	at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.initializeServiceModel(ReflectionServiceFactoryBean.java:461)
	at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.create(ReflectionServiceFactoryBean.java:212)
	at org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean.create(JaxWsServiceFactoryBean.java:163)
	at org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory.createEndpoint(AbstractWSDLBasedEndpointFactory.java:100)
	at org.apache.cxf.frontend.ServerFactoryBean.create(ServerFactoryBean.java:117)
	at org.apache.cxf.jaxws.JaxWsServerFactoryBean.create(JaxWsServerFactoryBean.java:167)
	at com.xxx.ServiceServerFactory.create(ServiceServerFactory.java:53)
{code}

After some debugging (namely setting a breakpoint in JAXBContextInitializer.walkReferences) I could only observe that:
- under 2.2.3, the breakpoint was at JAXBContextInitializer.walkReferences:271, the f (Field) value is:
{code}
private com.xxx.queryresult.QueryResult com.xxx.jaxws_asm.ReadResponse.queryResult
{code}
and its f.signature is NULL
- under 2.2.4, the breakpoint was at JAXBContextInitializer.walkReferences:288, the f (Field) value is:
{code}
private com.xxx.queryresult.QueryResult com.xxx.jaxws_asm.ReadResponse.queryResult
{code}
which is the same, but its f.signature is very different:
{code}
Lcom/xxx/queryresult/QueryResult<Lcom/xxx/DTOEntity<null>;Lcom/xxx/QuerySummary;>;
{code}


","jaxb-api-2.1.jar, jaxb-impl-2.1.11.jar",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113921,,,2009-10-30 10:02:13.0,,,,,,0|i14dz3:,233727,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
generation of absolute path in WSDL2Java,CXF-2508,12439431,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,has,has,29/Oct/09 17:13,04/Dec/09 22:34,14/Mar/19 02:29,11/Nov/09 01:47,2.2.4,,,,,,,,,,,,,,2.2.5,,,,Tooling,,,,,,0,,,,"When generating classes from WSDL the path of wsdlLocation etc. in the service-class is always generated absolute e.g. wsdlLocation = ""file:/C:/Projekte/Intern/...

the configuration in the pom.xml is like this:

<configuration>
							<sourceRoot>./target/generated-sources/jaxws
							</sourceRoot>
							<wsdlOptions>
								<wsdlOption>
									<wsdl>
										./src/main/resources/wsdl/My.wsdl
									</wsdl>
									<extraargs>
										<extraarg>-wsdlLocation</extraarg>
										<extraarg>./src/main/resources/wsdl/My.wsdl</extraarg>
										<extraarg>-verbose</extraarg>
									</extraargs>
								</wsdlOption>
							</wsdlOptions>
						</configuration>
",Windows XP,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-10-29 17:47:38.038,,,no_permission,,Moderate,,,,,,,,,,,113920,,,Wed Nov 11 01:47:10 UTC 2009,,,,,,0|i0v1jr:,179224,,,,,,,,"29/Oct/09 17:47;dkulp;

Can you try by setting the wsdlLocation config:

<wsdlOption> 
 <wsdl>./src/main/resources/wsdl/My.wsdl</wsdl> 
 <wsdlLocation>./src/main/resources/wsdl/My.wsdl</wsdlLocation</wsdl>
 </wsdlOption> 

","30/Oct/09 09:29;has;Hello Daniel.

I also tried this:

<wsdlLocation>./src/main/resources/wsdl/My.wsdl</wsdlLocation>

but it has no effect.

in -verbose-mode you can see the generated command (with tag <wsdlLocation>):

wsdl2java -d C:\Projekte\Intern\xyz\gen -verbose -wsdlLocation ./src/main/resources/wsdl/My.wsdl file:/C:/Projekte/Intern/xyz/shared ./src/main/resources/wsdl/My.wsdl

When I do this command manually,  the wsdlLocation is set correctly. I think it's the combination of maven and cxf which causes the problem?!

Thanks for your effort,

Hans","30/Oct/09 15:21;dkulp;
I wasn't able to reproduce this.   If I modify the wsdl_first sample pom to look like:
                            <wsdlOptions>
                                <wsdlOption>
                                    <wsdl>./wsdl/CustomerService.wsdl</wsdl>
                                    <bindingFiles>
                                        <bindingFile>${basedir}/wsdl/binding.xml</bindingFile>
                                    </bindingFiles>
                                    <wsdlLocation>./wsdl/CustomerService.wsdl</wsdlLocation>
                                </wsdlOption>
                            </wsdlOptions>

and run ""mvn install"" (ignore the resulting compile failure) but look at target/generated-sources/cxf/com/example/customerservice/CustomerServiceService.java, I see:
wsdlLocation = ""./wsdl/CustomerService.wsdl"",
and:
url = new URL(""./wsdl/CustomerService.wsdl"");


","02/Nov/09 10:33;has;Due to your answer I could localize the problem myself.:
It seems that it leads back to 2 WSDL files in the same ressource folder. Both WSDLs are taken also I referenced only  one in pom.xml.

Simple solution: Put the WSDL files in several folders - only one WSDL per folder.

Nevertheless it's a strange behavour which should be changed if possible.","11/Nov/09 01:47;dkulp;
I've done two things:

1) Added a disableDirectoryScan config that can be used to turn off the directory scanning.

2) Moved the configured wsdls to be processed AFTER any detected wsdls.   Thus, they would overwrite anything from the scanned wsdl's.   Thus, stuff specifically configured ""wins"".",,,,,,,,,,,,,,,,,,,,,,,,,,
LoggingInInterceptor called twice if message is larger than 64 kb (when CachedOutStream writes to tempfile),CXF-2506,12439284,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,,deepikavadapalli,deepikavadapalli,28/Oct/09 14:19,18/Mar/11 21:43,14/Mar/19 02:29,11/Nov/09 20:36,2.1.5,,,,,,,,,,,,,,,,,,,,,,,,0,,,,"I have my own SELoggingInterceptor. But it is same as LoggingInInterceptor code with no difference.

I see that when message is larger than 64kb i.e. when CachedOutputStream write to temp file, this interceptor is called twice.
First time, I process the message and second time I get Stream is closed Exception when I try to copy Message,content (InputStream) to CachedOutputStream.

I tried printing the interceptor chain and I see my interceptor only once.
It happens only with larger messages with CXF 2.1.5.",Windows,,,,,,,,,,,,,,,,18/Mar/11 14:51;ignacio.salgado@hp.com;ASF.LICENSE.NOT.GRANTED--image001.gif;https://issues.apache.org/jira/secure/attachment/12474002/ASF.LICENSE.NOT.GRANTED--image001.gif,28/Oct/09 16:23;dkulp;java_first_jaxws.tar.gz;https://issues.apache.org/jira/secure/attachment/12423463/java_first_jaxws.tar.gz,,,,,2.0,,,,,,,,,,,,,,,,,,,,2009-10-28 14:37:59.631,,,no_permission,,,,,,,,,,,,,113918,,,Fri Mar 18 21:43:29 UTC 2011,,,,,,0|i1aedb:,268794,,,,,,,,"28/Oct/09 14:37;dkulp;
Can you try with 2.1.7, this may already be fixed as the callbacks for the CachedOutputStream stuff was adjusted quite a bit.  Also, the LoggingInInterceptor itself has undergone a bunch of changes since 2.1.5.
","28/Oct/09 16:23;dkulp;
I cannot reproduce this with 2.1.5 or any other version.

I've attached a modified version of the java_first_jaxws demo that adds the logging interceptors on the server side and creates a 75K string on the client side and echos it.    The message is logged once on the server on the way in and once on the way out.

Thus, at this point, this bug is non-reproducible.   I'll need a full testcase.","28/Oct/09 19:08;deepikavadapalli;Daniel,

I tried with CXF version 2.1.7 also.
It did not solve my problem. But this time its not coming into my interceptor code twice.
But after processing my interceptor and all other CXF interceptors, I see Null Pointer Exception.
Pleas let me know how can I provide full test case to you.
Heres the stack trace:
WARNING: Interceptor has thrown exception, unwinding now
java.lang.NullPointerException
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.close(HTTPConduit.java:1935)
	at org.apache.cxf.io.CacheAndWriteOutputStream.postClose(CacheAndWriteOutputStream.java:47)
	at org.apache.cxf.io.CachedOutputStream.close(CachedOutputStream.java:188)
	at org.apache.cxf.transport.AbstractConduit.close(AbstractConduit.java:66)
	at org.apache.cxf.transport.http.HTTPConduit.close(HTTPConduit.java:627)
	at org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor.handleMessage(MessageSenderInterceptor.java:62)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:478)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:308)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:260)
	at org.apache.cxf.frontend.ClientProxy.invokeSync(ClientProxy.java:73)
	at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:127)
	at $Proxy129.book(Unknown Source)
	at com.wdw.se.reservation.service.SEShowDiningService.book(SEShowDiningService.java:118)
	at com.wdw.se.reservation.controller.ReservationController.bookReservation(ReservationController.java:905)
	at com.wdw.se.utility.BookUtility.book(BookUtility.java:658)
	at com.wdw.se.shop.viewobject.ShoppingCart.book(ShoppingCart.java:669)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.apache.el.parser.AstValue.invoke(AstValue.java:131)
	at org.apache.el.MethodExpressionImpl.invoke(MethodExpressionImpl.java:276)
	at com.sun.facelets.el.TagMethodExpression.invoke(TagMethodExpression.java:68)
	at com.sun.facelets.el.LegacyMethodBinding.invoke(LegacyMethodBinding.java:69)
	at com.sun.faces.application.ActionListenerImpl.processAction(ActionListenerImpl.java:91)
	at javax.faces.component.UICommand.broadcast(UICommand.java:383)
	at org.ajax4jsf.component.AjaxActionComponent.broadcast(AjaxActionComponent.java:55)
	at org.ajax4jsf.component.AjaxViewRoot.processEvents(AjaxViewRoot.java:316)
	at org.ajax4jsf.component.AjaxViewRoot.broadcastEvents(AjaxViewRoot.java:291)
	at org.ajax4jsf.component.AjaxViewRoot.processPhase(AjaxViewRoot.java:248)
	at org.ajax4jsf.component.AjaxViewRoot.processApplication(AjaxViewRoot.java:461)
	at com.sun.faces.lifecycle.InvokeApplicationPhase.execute(InvokeApplicationPhase.java:97)
	at com.sun.faces.lifecycle.LifecycleImpl.phase(LifecycleImpl.java:251)
	at com.sun.faces.lifecycle.LifecycleImpl.execute(LifecycleImpl.java:117)
	at javax.faces.webapp.FacesServlet.service(FacesServlet.java:244)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
	at com.disney.corp.keystone.web.filter.LoginFilter.doFilter(Unknown Source)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
	at com.disney.corp.keystone.web.filter.SiteMinderLoginFilter.doFilter(Unknown Source)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
	at org.ajax4jsf.webapp.BaseXMLFilter.doXmlFilter(BaseXMLFilter.java:147)
	at org.ajax4jsf.webapp.BaseFilter.handleRequest(BaseFilter.java:256)
	at org.ajax4jsf.webapp.BaseFilter.processUploadsAndHandleRequest(BaseFilter.java:362)
	at org.ajax4jsf.webapp.BaseFilter.doFilter(BaseFilter.java:488)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
	at org.jboss.web.tomcat.filters.ReplyHeaderFilter.doFilter(ReplyHeaderFilter.java:96)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:230)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:175)
	at org.jboss.web.tomcat.security.SecurityAssociationValve.invoke(SecurityAssociationValve.java:179)
	at org.jboss.web.tomcat.security.JaccContextValve.invoke(JaccContextValve.java:84)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)
	at org.jboss.web.tomcat.service.jca.CachedConnectionValve.invoke(CachedConnectionValve.java:157)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:262)
	at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:844)
	at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583)
	at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:446)
	at java.lang.Thread.run(Unknown Source)","29/Oct/09 13:37;deepikavadapalli;I tried with my production version CXF 2.0.4 and it works fine.

I want to upgrade to CXF 2.1.7 , latest version to avoid other problems since CXF 2.0.4 is very old version.

Please let me know if I can resolv ethis issue with CXF latest version.

THis time, my interceptor code is called only once but after proceesing it fails with Null pointer Exception in CXF code.
Here is the error.

java.lang.NullPointerException
at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.close(
HTTPConduit.java:1935) 
at org.apache.cxf.io.CacheAndWriteOutputStream.postClose(
CacheAndWriteOutputStream.java:47) 
at org.apache.cxf.io.CachedOutputStream.close(
CachedOutputStream.java:188) 
at org.apache.cxf.transport.AbstractConduit.close(
AbstractConduit.java:66) 
at org.apache.cxf.transport.http.HTTPConduit.close(
HTTPConduit.java:627
) 
at org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor.handleMessage(
MessageSenderInterceptor.java:62) 
at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(
PhaseInterceptorChain.java:236) 
at org.apache.cxf.endpoint.ClientImpl.invoke(
ClientImpl.java:478) 
at org.apache.cxf.endpoint.ClientImpl.invoke(
ClientImpl.java:308) 
at org.apache.cxf.endpoint.ClientImpl.invoke(
ClientImpl.java:260) 
at org.apache.cxf.frontend.ClientProxy.invokeSync(
ClientProxy.java:73) 
at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(
JaxWsClientProxy.java:127)",11/Nov/09 20:36;deepikavadapalli;Our custom interceptor code was also updated accordingly with CXF Logging In Interceptor and it worked fine.,"18/Mar/11 14:51;ignacio.salgado@hp.com;Hi,

We are having the same issue in our code but we don't know how to avoid this:

- When the request data is larger than 64K the handleMessage method from SoapInInterceptor is executed twice. In the second execution of the method it throws the stream closed exception.
- If the request data is smaller than 64K the handleMessage method from SoapInInterceptor is executed only once (for incoming data).
- We can avoid this by setting a large threshold  but we don't like the idea, since it won't attack the root cause.

Caused by: java.io.IOException: Stream closed
    at java.io.BufferedInputStream.getInIfOpen(BufferedInputStream.java:145)
    at java.io.BufferedInputStream.available(BufferedInputStream.java:386)
    at java.io.FilterInputStream.available(FilterInputStream.java:169)
    at org.apache.cxf.helpers.IOUtils.copy(IOUtils.java:98)
    at org.apache.cxf.helpers.IOUtils.copy(IOUtils.java:75)
    at com.aa.cs.ws.interceptors.SoapInInterceptor.handleMessage(SoapInInterceptor.java:126)
    at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)

Can you give us more information about this.

Thanks in advance,


Ignacio Salgado
Technical Leader, Best Shore Application Services
Hewlett-Packard Company

+54 351 554 0528 / Tel
+54 9351 317 8121 / Mobile
ignacio.salgado@hp.com<mailto:ignacio.salgado@hp.com> / Email
7050 Av. La Voz del Interior
Córdoba, X5008HLF
Argentina

[cid:image001.gif@01CBE562.597D9830]<http://www.hp.com/>

Please consider the environment before printing this email.

","18/Mar/11 21:43;deepikavadapalli;In our case wht happened was we were having our own LoggingInterceptor
extending cxf LoggingInInterceptor .
Initially we had some other cxf version. When we upgraded to cxf 2.1.5,
LoggingInInterceptor  was changed. So, we had to change our own
LoggingInterceptor  to match the one from CXF. Then it worked.



Thanks,
Deepika

On Fri, Mar 18, 2011 at 10:53 AM, Salgado, Ignacio (JIRA)

",,,,,,,,,,,,,,,,,,,,,,,,
Decoupled WS-A and PerformanceCounters result in double counting of invokations,CXF-2505,12439278,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,dkulp,dkulp,28/Oct/09 13:06,04/Dec/09 22:34,14/Mar/19 02:29,28/Oct/09 13:37,2.2.4,,,,,,,,,,,,,,2.2.5,,,,WS-* Components,,,,,,0,,,,"
The partial response sent back to the client is increasing the invoke count as is the real response.   Thus, the number of invokations is off.",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113917,,,2009-10-28 13:06:54.0,,,,,,0|i14dtr:,233703,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ConcurrentModificationException thrown by AttachmentDeserializer,CXF-2503,12439228,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,wtam,wtam,27/Oct/09 22:48,04/Dec/09 22:34,14/Mar/19 02:29,28/Oct/09 16:03,,,,,,,,,,,,,,,2.1.8,2.2.5,2.3,,Core,,,,,,0,,,,"The follow stack (based on 2.2.x source) shows AttachmentDeserializer.cacheStreamedAttachments (1) is looping on the LazyAttachmentCollection.attachments List.

for (Attachment a : attachments.getLoadedAttachments()) {
 ...
}

And, DelegatingInputStream.close() (2) triggers LazyAttachmentCollection.hasNext() (3) to insert new item to LazyAttachmentCollection.attachments List which causes ConcurrentModificationException

Thread [main] (Suspended)	
(3)	LazyAttachmentCollection.hasNext() line: 64	
	AttachmentDeserializer.markClosed(DelegatingInputStream) line: 319	
(2)	DelegatingInputStream.close() line: 47	
	AttachmentDataSource.cache() line: 51	
(1)	AttachmentDeserializer.cacheStreamedAttachments() line: 227	
	AttachmentDeserializer.readNext() line: 192	
	LazyAttachmentCollection.loadAll() line: 52	
	LazyAttachmentCollection.size() line: 108	
",,,,,,,,,,,,,,,,,28/Oct/09 14:41;wtam;CXF-2503.patch;https://issues.apache.org/jira/secure/attachment/12423453/CXF-2503.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113915,,,Wed Oct 28 14:41:37 UTC 2009,,,,,,0|i0sy2v:,166998,,,,,,,,28/Oct/09 14:41;wtam;Patch created based on trunk.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
decoupled WS-A and WS-Sec does not result in faults back to clients,CXF-2502,12439220,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,dkulp,dkulp,27/Oct/09 21:06,04/Dec/09 22:34,14/Mar/19 02:29,28/Oct/09 13:37,2.2.4,,,,,,,,,,,,,,2.2.5,,,,WS-* Components,,,,,,0,,,,"
The example in:
https://issues.apache.org/jira/browse/CXF-2489
shows this.

Basically, if an interceptor that lives between MAPCodec and MAPAggregator throws an exception, the fault is sent like a normal response.  However, the client is looking for a partial response and then the fault on the decoupled channel.   Thus, the client never sees the fault and just gets an IOException and/or hangs.

",,,,,,,,,,,,,,,CXF-2489,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113914,,,2009-10-27 21:06:02.0,,,,,,0|i14033:,231476,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
(EffectivePolicyImpl/PolicyEngineImpl) Policy engine for ws security policy (based on wsdl attachment) fails to apply message level policies,CXF-2499,12439144,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,mellowsnow,mellowsnow,27/Oct/09 08:33,04/Dec/09 22:34,14/Mar/19 02:29,30/Oct/09 14:06,,,,,,,,,,,,,,,2.2.5,,,,WS-* Components,,,,,,0,,,,"The problem is caused by the initialisePolicy method in the EffectivePolicyImpl.

The original method decided which BindingMessageInfo is used based on the boolean requestor, which results in always using the OutputBindingMessage on server-side respective Input.- on the client side. To fix this I introduced a new parameter (boolean request) which is used for this decisions. The parameter has to be passed from different methods in the PolicyEngineImpl. Thus I also slightly changed the PolicyEngineImpl.  

Since I don't want to rebuild the jar I extended both classed, reimplemented the necessary methods and registered them as policy engine in my cxf.xml.

Thus I can't attach a patch, but I append the extended implementations.

Greetings

Christian","System:
2.6.28-15-generic #52-Ubuntu SMP Wed Sep 9 10:48:52 UTC 2009 x86_64 GNU/Linux

Java:
java version ""1.6.0_16""
Java(TM) SE Runtime Environment (build 1.6.0_16-b01)
Java HotSpot(TM) 64-Bit Server VM (build 14.2-b01, mixed mode)

Apache CXF 2.2.3 (not in version list)",,,,,,,,,,,,,,,,27/Oct/09 08:33;mellowsnow;EffectivePolicyImpl.java;https://issues.apache.org/jira/secure/attachment/12423293/EffectivePolicyImpl.java,27/Oct/09 08:33;mellowsnow;Messages.properties;https://issues.apache.org/jira/secure/attachment/12423295/Messages.properties,27/Oct/09 08:33;mellowsnow;PolicyEngineImpl.java;https://issues.apache.org/jira/secure/attachment/12423294/PolicyEngineImpl.java,,,,3.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113912,,,Thu Oct 29 18:33:01 UTC 2009,,,,,,0|i0v1y7:,179289,,,,,,,,"29/Oct/09 18:33;mellowsnow;Sorry but I found out that I had a one little bug in my fix:

public EffectivePolicy getEffectiveClientResponsePolicy(EndpointInfo ei, BindingOperationInfo boi) {
        EffectivePolicy effectivePolicy = (EffectivePolicy)boi.getProperty(POLICY_INFO_RESPONSE_CLIENT);
        if (null == effectivePolicy) {
            EffectivePolicyImpl epi = createOutPolicyInfo();
            epi.initialise(ei, boi, this, true, false);                                              //  previously epi.initialise(ei, boi, this, true, true);        
            boi.setProperty(POLICY_INFO_RESPONSE_CLIENT, epi);
            effectivePolicy = epi;
        }
        return effectivePolicy;
  }

Christian",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wrong parameter number exception with explicit soap headers,CXF-2498,12439116,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,asoldano,asoldano,asoldano,26/Oct/09 22:04,04/Dec/09 22:34,14/Mar/19 02:29,27/Oct/09 14:16,2.2.4,,,,,,,,,,,,,,2.1.8,2.2.5,2.3,,JAX-WS Runtime,,,,,,0,,,,The fix for CXF-2451 suffers from a bug when explicit soap:headers are used with no-arg methods.,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113911,,,2009-10-26 22:04:00.0,,,,,,0|i0v19z:,179180,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
No timeouts are set for HTTP wsdl retrieval,CXF-2497,12439092,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,dkulp,dkulp,26/Oct/09 17:27,02/May/13 02:29,14/Mar/19 02:29,26/Oct/09 19:54,2.2.4,,,,,,,,,,,,,,2.2.5,,,,,,,,,,0,,,,"
In URIResolver, no timeout is set on the HttpURLConnection.   Thus, if the connection used to retrieve wsdls/schemas ""hangs"", the application is frozen for ever.

Two fixes should be done:
1) Use the http conduit for all stuff if at all possible.   We currently use the conduit for https only, but these should be applicable to http as well.   

2) In the rare case an http conduit is not avail, set some default timeout on the stuff in URIResolver to prevent the hang.
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113910,,,2009-10-26 17:27:48.0,,,,,,0|i14dvb:,233710,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WS-Addressing schema for the addressing feature missing the addressingRequired attribute,CXF-2496,12439080,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,dkulp,dkulp,26/Oct/09 16:09,04/Dec/09 22:34,14/Mar/19 02:29,26/Oct/09 16:54,,,,,,,,,,,,,,,2.1.8,2.2.5,,,,,,,,,0,,,," 
The feature source code for the addressing feature allows a addressingRequired property, but the schema doesn't allow it and the schema validation fails.
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113909,,,2009-10-26 16:09:28.0,,,,,,0|i0v2dz:,179360,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
mvn clean does not work on trunk with an empty local maven repository,CXF-2495,12439030,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,chris@die-schneider.net,chris@die-schneider.net,chris@die-schneider.net,25/Oct/09 10:49,25/Oct/09 11:29,14/Mar/19 02:29,25/Oct/09 10:50,2.2.4,,,,,,,,,,,,,,2.3,,,,Build system,,,,,,0,,,,"mvn clean needs some maven plugins defined by cxf projects. The problem is that when you start with an empty  local repository these plugins do not exist. 
So it is often not possible to clean the cxf tree when a build fails.
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113908,,,Sun Oct 25 10:50:25 UTC 2009,,,,,,0|i0v44n:,179642,,,,,,,,"25/Oct/09 10:50;chris@die-schneider.net;Added a clean profile to the parent pom that contains the apache snapshot repository. 
So you can issue mvn -Pclean clean and the plugins are loaded from the snapshot repository.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE in DatatypeConverter after updating to 2.2.4,CXF-2492,12438897,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Critical,Fixed,dkulp,deki,deki,23/Oct/09 09:02,11/Oct/10 14:52,14/Mar/19 02:29,25/May/10 19:08,2.2.4,,,,,,,,,,,,,,2.2.9,,,,JAXB Databinding,,,,,,0,,,,"Updated from 2.2.3 to 2.2.4. Now a NullPointer occurs if a nil date is in the soap response:
	<java:DeactivationDate xsi:nil=""true"" xmlns:java=""java:de.testing""/>

Caused by: org.apache.cxf.interceptor.Fault: Unmarshalling Error: java.lang.NullPointerException
        at org.apache.cxf.jaxb.JAXBEncoderDecoder.unmarshall(JAXBEncoderDecoder.java:661)
        at org.apache.cxf.jaxb.JAXBEncoderDecoder.unmarshall(JAXBEncoderDecoder.java:533)
        at org.apache.cxf.jaxb.io.DataReaderImpl.read(DataReaderImpl.java:128)
        at org.apache.cxf.interceptor.DocLiteralInInterceptor.handleMessage(DocLiteralInInterceptor.java:99)
        at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
        at org.apache.cxf.endpoint.ClientImpl.onMessage(ClientImpl.java:664)
        at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleResponseInternal(HTTPConduit.java:2160)
        at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleResponse(HTTPConduit.java:2040)
        at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.close(HTTPConduit.java:1965)
        at org.apache.cxf.transport.AbstractConduit.close(AbstractConduit.java:66)
        at org.apache.cxf.transport.http.HTTPConduit.close(HTTPConduit.java:627)
        at org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor.handleMessage(MessageSenderInterceptor.java:62)
        at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
        at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:478)
        at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:308)
        at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:260)
        at org.apache.cxf.frontend.ClientProxy.invokeSync(ClientProxy.java:73)
        at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:124)
        ... 79 more
Caused by: javax.xml.bind.UnmarshalException
 - with linked exception:
[javax.xml.bind.UnmarshalException: java.lang.NullPointerException
 - with linked exception:
[com.sun.xml.bind.api.AccessorException: java.lang.NullPointerException]]
        at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl.handleStreamException(UnmarshallerImpl.java:425)
        at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl.unmarshal0(UnmarshallerImpl.java:362)
        at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl.unmarshal(UnmarshallerImpl.java:339)
        at org.apache.cxf.jaxb.JAXBEncoderDecoder.unmarshall(JAXBEncoderDecoder.java:646)
        ... 96 more
Caused by: javax.xml.bind.UnmarshalException: java.lang.NullPointerException
 - with linked exception:
[com.sun.xml.bind.api.AccessorException: java.lang.NullPointerException]
        at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.handleEvent(UnmarshallingContext.java:642)
        at com.sun.xml.bind.v2.runtime.unmarshaller.Loader.reportError(Loader.java:254)
        at com.sun.xml.bind.v2.runtime.unmarshaller.Loader.handleGenericException(Loader.java:241)
        at com.sun.xml.bind.v2.runtime.unmarshaller.XsiNilLoader$Single.onNil(XsiNilLoader.java:111)
        at com.sun.xml.bind.v2.runtime.unmarshaller.XsiNilLoader.selectLoader(XsiNilLoader.java:69)
        at com.sun.xml.bind.v2.runtime.unmarshaller.ProxyLoader.startElement(ProxyLoader.java:53)
        at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext._startElement(UnmarshallingContext.java:481)
        at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.startElement(UnmarshallingContext.java:459)
        at com.sun.xml.bind.v2.runtime.unmarshaller.StAXStreamConnector.handleStartElement(StAXStreamConnector.java:242)
        at com.sun.xml.bind.v2.runtime.unmarshaller.StAXStreamConnector.bridge(StAXStreamConnector.java:176)
        at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl.unmarshal0(UnmarshallerImpl.java:360)
        ... 98 more
Caused by: javax.xml.bind.UnmarshalException: java.lang.NullPointerException
 - with linked exception:
[com.sun.xml.bind.api.AccessorException: java.lang.NullPointerException]
        ... 109 more
Caused by: com.sun.xml.bind.api.AccessorException: java.lang.NullPointerException
        at com.sun.xml.bind.v2.runtime.reflect.AdaptedAccessor.set(AdaptedAccessor.java:83)
        at com.sun.xml.bind.v2.runtime.unmarshaller.XsiNilLoader$Single.onNil(XsiNilLoader.java:108)
        ... 105 more
Caused by: java.lang.NullPointerException
        at javax.xml.bind.WhiteSpaceProcessor.trim(WhiteSpaceProcessor.java:63)
        at javax.xml.bind.DatatypeConverterImpl._parseDateTime(DatatypeConverterImpl.java:310)
        at javax.xml.bind.DatatypeConverterImpl.parseDateTime(DatatypeConverterImpl.java:306)
        at javax.xml.bind.DatatypeConverter.parseDateTime(DatatypeConverter.java:282)
        at de.ewetel.easynet.core.dao.easytel.soap.stub.manageaccountlink.Adapter1.unmarshal(Adapter1.java:13)
        at de.ewetel.easynet.core.dao.easytel.soap.stub.manageaccountlink.Adapter1.unmarshal(Adapter1.java:7)
        at com.sun.xml.bind.v2.runtime.reflect.AdaptedAccessor.set(AdaptedAccessor.java:81)
        ... 106 more

Binding config:
<jxb:javaType name=""java.util.Calendar""
	xmlType=""xs:dateTime""
	parseMethod=""javax.xml.bind.DatatypeConverter.parseDateTime""
	printMethod=""javax.xml.bind.DatatypeConverter.printDateTime"" />

Since the jaxb dependencies didn't change, I assume that this is a cxf issue.",Java 1.5,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,Blocked on External,,,2009-10-26 15:37:08.296,,,no_permission,,,,,,,,,,,,,113470,,,Tue May 25 19:08:46 UTC 2010,,,,,,0|i0den3:,76301,,,,,,,,"26/Oct/09 15:37;dkulp;
Actually, this is probably a JAXB issue, but a change in CXF is exposing it.  

Previously, whenever JAXB encountered any parsing issues, it normally would just set the field to ""null"" and continue.     We then would get all kinds of ""why is my parameter null?"" type support questions.   With 2.2.4, we now set an even handler with JAXB to tell it to not ignore parsing errors.    

Most likely, the above was occurring in JAXB with CXF 2.2.3 as well, but JAXB was ignoring it and just setting the field to null.   Mostly just coincidence that that is exactly what it was SUPPOSED to do in that case.     Anyway, you can restore the 2.2.3 behavior by setting a property on the endpoint of:
""set-jaxb-validation-event-handler"", ""false""

That said, can you create a small reproducible test case?  I can then distill it down into something I can log with JAXB and hopefully get it fixed in a future version of JAXB.
","28/Oct/09 18:50;dkulp;

I've logged a JAXB bug:
https://jaxb.dev.java.net/issues/show_bug.cgi?id=707
please feel free to vote for it.

Meanwhile, as another workaround, you could write your own object that has a parseDateTime method that checks if null and returns null, if not, calls to ""javax.xml.bind.DatatypeConverter.parseDateTime"" yourself.   Configure that in the binding file instead.


","29/Oct/09 10:04;deki;Thanks I voted for the issue yesterday. It has been marked as fixed today.

It's hard for me to create a small test case as I need code generation from the wsdl with a custom binding and then unmarshal a soap message with the generated code. I will use the latest jaxb snapshot and verify if the problem is resolved.","05/Nov/09 18:42;dkulp;
Slightly reducing priority since it's a jaxb bug and workarounds do exist.","25/May/10 19:08;dkulp;
Upgraded to JAXB 2.1.13.",,,,,,,,,,,,,,,,,,,,,,,,,,
Wrong content type for JAX-RS errors,CXF-2490,12438739,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,sergey_beryozkin,bmargulies,bmargulies,21/Oct/09 19:43,04/Dec/09 22:34,14/Mar/19 02:29,09/Nov/09 20:58,2.3,,,,,,,,,,,,,,2.2.5,2.3,,,JAX-RS,,,,,,0,,,,"When my JAX-RS service suffers from:

"".No message body writer found for response class : ArrayList""

The content type of the error message is text/xml, and should be text/plain.


Server: Apache-Coyote/1.1
Date: Wed, 21 Oct 2009 19:42:33 GMT
Content-Type: text/xml
Content-Length: 61
Connection: close

500 Internal Server Error",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113904,,,2009-10-21 19:43:53.0,,,,,,0|i0v1yf:,179290,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Exceptions are not properly handled by Performance.Counter MBean,CXF-2489,12438738,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,owulff,owulff,21/Oct/09 19:42,04/Dec/09 22:34,14/Mar/19 02:29,28/Oct/09 13:38,2.2.4,,,,,,,,,,,,,,2.2.5,,,,,,,,,,0,,,,"I've updated the ws-security\ut sample and added the management dependency in the pom and updated the wssec.xml for the server:

<bean id=""org.apache.cxf.management.InstrumentationManager""
class=""org.apache.cxf.management.jmx.InstrumentationManagerImpl"">
<property name=""bus"" ref=""cxf"" />
<property name=""enabled"" value=""true"" />
<property name=""threaded"" value=""false"" />
<property name=""daemon"" value=""false"" />
<property name=""JMXServiceURL"" value=""service:jmx:rmi:///jndi/rmi://localhost:9914/jmxrmi"" />
</bean>

<!-- Wiring the counter repository --> 
<bean id=""CounterRepository"" class=""org.apache.cxf.management.counters.CounterRepository"">
<property name=""bus"" ref=""cxf"" />        
</bean>

Run the server with: mvn -Pserver
Run the client with: mvn -Pclient
8 invocations will occur.

Now, change the UTPasswordCallback.java of the client (done already in attachment)

    public UTPasswordCallback() {
        passwords.put(""Alice"", ""ecilACHANGED"");
        passwords.put(""abcd"", ""dcbaCHANGED"");
    }

and run the client again. There is no update in the Performance.Counter MBean.

I also noticed that the Performance.Counter MBean is not visible in the JConsole till the first request is processed.

When my first run is with invalid passwords, the Performance.Counter MBean is not added in the JConsole. ",,,,,,,,,,,,,,,,,21/Oct/09 19:43;owulff;ut.zip;https://issues.apache.org/jira/secure/attachment/12422840/ut.zip,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2009-10-28 13:38:26.967,,,no_permission,,,,,,,,,,,,,113903,,,Wed Oct 28 13:38:26 UTC 2009,,,,,,0|i14dtz:,233704,,,,,,,,"28/Oct/09 13:38;dkulp;
Thanks for the test case.   Debugging this test case revealed several other bugs as well related to decoupled ws-addressing and faults with security and management.   ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Mangled error message for JAX-RS missing writer,CXF-2488,12438737,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,sergey_beryozkin,bmargulies,bmargulies,21/Oct/09 19:42,04/Dec/09 22:34,14/Mar/19 02:29,09/Nov/09 20:58,2.3,,,,,,,,,,,,,,2.2.5,2.3,,,JAX-RS,,,,,,0,,,,"109452 [http-8080-1] WARN  org.apache.cxf.jaxrs.interceptor.JAXRSOutInterceptor  - .No message body writer found for response class : ArrayList.
109534 [http-8080-1] WARN  org.apache.cxf.jaxrs.interceptor.JAXRSOutInterceptor  - .No message body writer found for response class : ArrayList.
186175 [http-8080-1] WARN  org.apache.cxf.jaxrs.interceptor.JAXRSOutInterceptor  - .No message body writer found for response class : ArrayList.
186213 [http-8080-1] WARN  org.apache.cxf.jaxrs.interceptor.JAXRSOutInterceptor  - .No message body writer found for response class : ArrayList.
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-11-09 20:58:26.974,,,no_permission,,,,,,,,,,,,,113902,,,Mon Nov 09 20:58:26 UTC 2009,,,,,,0|i1aeef:,268799,,,,,,,,09/Nov/09 20:58;sergey_beryozkin;Changed to 'No message body writer has been found for ...',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SecureConversationTokenFinderInterceptor stores the wrong token identifier,CXF-2487,12438714,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,coheigea,coheigea,21/Oct/09 15:11,04/Dec/09 22:34,14/Mar/19 02:29,21/Oct/09 15:29,2.2.4,,,,,,,,,,,,,,2.2.5,2.3,,,WS-* Components,,,,,,0,,,,"
The SecureConversationTokenFinderInterceptor in CXF has this line: 

message.getExchange().put(SecurityConstants.TOKEN_ID, tok.getID());

but it also stores the token like so:  

SecurityToken token = new SecurityToken(sct.getIdentifier(), created, expires);

Then in AbstractBindingBuilder.getSecurityToken() it tries to find the token in the token store using SecurityConstants.TOKEN_ID, and an error of ""No signature token id"" is thrown. The SecureConversationTokenFinderInterceptor should store the Identifier of the SCT instead (getIdentifier, not getIDI()).",,,,,,,,,,,,,,,,,21/Oct/09 15:12;coheigea;cxf-2487.patch;https://issues.apache.org/jira/secure/attachment/12422810/cxf-2487.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2009-10-21 15:29:36.872,,,no_permission,,,,,,,,,,,,,113901,,,Wed Oct 21 15:29:36 UTC 2009,,,,,,0|i14e8f:,233769,,,,,,,,"21/Oct/09 15:12;coheigea;
A patch for this issue.

Colm.","21/Oct/09 15:29;dkulp;
Patch applied.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
STSClient should look for operations from wsdl based on element name if action isn't found,CXF-2483,12438581,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,dkulp,dkulp,20/Oct/09 15:16,04/Dec/09 22:34,14/Mar/19 02:29,20/Oct/09 15:16,,,,,,,,,,,,,,,2.2.5,,,,,,,,,,0,,,,"
If the wsdl for the STS does not define soapActions that would match addressing actions, the STSClient doesn't find the operation in the wsdl and then sends empty messages.  ",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113898,,,2009-10-20 15:16:08.0,,,,,,0|i1aef3:,268802,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Provider/Dispatch<SOAPMessage> adding ""soap"" prefix",CXF-2481,12438480,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,dkulp,dkulp,19/Oct/09 19:01,04/Dec/09 22:34,14/Mar/19 02:29,19/Oct/09 19:07,,,,,,,,,,,,,,,2.1.8,2.2.5,,,JAX-WS Runtime,,,,,,0,,,,"
If I have a Provider<SOAPMessage> that uses ""SOAP-ENV"" for the prefix, when the returned soapmessage is written out, there is an additional namespace prefix of ""soap"" defined for the envelope namespace.   That isn't needed or wanted.",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113896,,,2009-10-19 19:01:58.0,,,,,,0|i0v1lb:,179231,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TransportBinding with UsernameToken client not validating response,CXF-2480,12438463,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,dkulp,dkulp,19/Oct/09 16:17,04/Dec/09 22:34,14/Mar/19 02:29,19/Oct/09 18:52,2.2.4,,,,,,,,,,,,,,2.2.5,,,,WS-* Components,,,,,,0,,,,"
WIth a transportBinding, https, and usernametoken supporting token, the response message may not contain a security header.   This is causing those tokens to not be asserted causing policy verification exceptions.

",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113895,,,2009-10-19 16:17:00.0,,,,,,0|i0v1k7:,179226,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Ommitting IncludeToken attribute results in exception,CXF-2479,12438462,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,dkulp,dkulp,19/Oct/09 16:15,04/Dec/09 22:34,14/Mar/19 02:29,19/Oct/09 18:52,2.2.4,,,,,,,,,,,,,,2.2.5,,,,WS-* Components,,,,,,0,,,,"
If a UsernameToken ommits the sp:IncludeToken attribute, an exception is raised instead of defaulting to ""Always"".

",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113894,,,2009-10-19 16:15:25.0,,,,,,0|i07wrr:,44076,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrectly removing a parameter from the Message,CXF-2478,12438388,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Critical,Fixed,dkulp,glamdring,glamdring,18/Oct/09 13:47,04/Dec/09 22:34,14/Mar/19 02:29,19/Oct/09 21:10,2.1.7,2.2.3,2.2.4,,,,,,,,,,,,2.1.8,2.2.5,,,Core,JAX-WS Runtime,Service Model,Soap Binding,,,0,,,,"I've been having the following issue for a whole day already, and I'm debugging it: http://www.coderanch.com/t/466933/Web-Services/java/CXF-fails-serve-WebService

I've got further ahead:

in WrapperClassInInterceptor there is this code:

(line 135 onwards)

newParams = new MessageContentsList(helper.getWrapperParts(wrappedObject));

                List<Integer> removes = null;
                int count = 0;
                for (MessagePartInfo part : messageInfo.getMessageParts()) {
                    if (Boolean.TRUE.equals(part.getProperty(""messagepart.isheader""))) {
                        MessagePartInfo mpi = wrappedMessageInfo.getMessagePart(part
                                .getName());
                        if (lst.hasValue(mpi)) {
                            newParams.put(part, lst.get(mpi));
                        } else if (mpi.getTypeClass() == null) {
                            if (removes == null) {
                                removes = new ArrayList();
                            }
                            removes.add(Integer.valueOf(mpi.getIndex()));
                        }
                    } else {
                        ++count;
                    }
                }


The parameters in ""newParams"" before the removes are removed are the correct params + one null at the end.
Then index ""1"" is removed. BUT the param at Index 1 is correct. So perhaps the index is wrongly calculated. I don't have any more time to dig further into the generation of the index, so I'm just patching my version by commenting-out the removal part. I hope you can give me an update no this. Thanks","Tomcat 6.0.18, Windows Server 2003. CXF 2.2.4.",,,,,,,,,,,,,,,,19/Oct/09 07:45;glamdring;SOAPMessage.txt;https://issues.apache.org/jira/secure/attachment/12422531/SOAPMessage.txt,19/Oct/09 07:45;glamdring;roc_remedy_service.wsdl;https://issues.apache.org/jira/secure/attachment/12422532/roc_remedy_service.wsdl,,,,,2.0,,,,,,,,,,,,,,,,,,,,2009-10-19 02:38:44.393,,,no_permission,,,,,,,,,,,,,113893,,,Mon Oct 19 20:30:04 UTC 2009,,,,,,0|i0sy3b:,167000,,,,,,,,"18/Oct/09 13:53;glamdring;I commented out all removal and the exception is ""wrong number of arguments"" This means that the last argument, which has a value of null is to be removed, instead the one with index 0.

I now have an idea - can this be because:
1. The null argument is for something cxf-internal usage
2. It is added when the Wrapper object is constructed (in DocLiteralInInterceptor)
3. As the wrapper parameter has index or 0, the null parameter becomes index 1.
4. But when the wrapped object is 'exploded', the index of the null param should be updated, but instead stays 1. ","19/Oct/09 02:38;dkulp;

Any chance we could get the WSDL/schemas and the soap message that is being sent.   That may be critical for figuring out what is happening here.

","19/Oct/09 07:46;glamdring;Attached. Have in mind, that the wsdl has been generated by an unintelligent software, hence the ugly, stupid names.","19/Oct/09 20:30;dkulp;
The problem is that the wrong index is being used.

-                            removes.add(mpi.getIndex());
+                            removes.add(part.getIndex());

fixes it.

Basically, in wrapped mode, the header has index of 1 (index 0 is the index of the OpSendCertificate object).   When unwrapped, the contents of  OpSendCertificate become 0-15 and the header should be put in slot 16.  Since you didn't generate the code with ""-exsh true"" flag on wsdl2java, the header isn't mapped to a param and thus should be removed.   It's removing the wrong one.

In anycase, until I check in the above fix after running tests, you can work around this by generating code with the -exsh true flag to wsdl2java.  That will generate a param for the header and thus the remove wouldn't trigger.


",,,,,,,,,,,,,,,,,,,,,,,,,,,
WSD2JS Not Creating Schema Objects,CXF-2477,12438244,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,bmargulies,teleplayer,teleplayer,15/Oct/09 20:41,11/Oct/10 14:45,14/Mar/19 02:29,31/Oct/09 22:32,2.2.2,,,,,,,,,,,,,,2.3,,,,JavaScript Client,,,,,,0,,,,"The WSDL2JS tool generates the service proxy objects, but never generates the associated schema objects.",,,,,,,,,,,,,,,,,16/Oct/09 12:46;teleplayer;Issue_2477.zip;https://issues.apache.org/jira/secure/attachment/12422348/Issue_2477.zip,15/Oct/09 20:43;teleplayer;chat-ws-api.wsdl;https://issues.apache.org/jira/secure/attachment/12422275/chat-ws-api.wsdl,,,,,2.0,,,,,,,,,,,,,,,,,,,,2009-10-16 00:25:02.712,,,no_permission,,,,,,,,,,,,,113892,,,Sat Oct 31 22:32:42 UTC 2009,,,,,,0|i1408v:,231502,,,,,,,,"16/Oct/09 00:25;bmargulies;You also need to provide the included xsd files that the wsdl references.

There are three of them.
",16/Oct/09 12:46;teleplayer;Sorry about not including the xsd files.  Here's a zip file aof everything.  Thanks,"17/Oct/09 19:58;bmargulies;I'm about to commit the first fix. I have a feeling you will hit other problems. Please download and experiment with a trunk snapshot.
","31/Oct/09 22:32;bmargulies;Well, the immediate problem (entire missing schemata) is fixed. Until I have a repro for other problems I'm calling this done.",,,,,,,,,,,,,,,,,,,,,,,,,,,
NullpointerException when ServiceClass is not set on client,CXF-2476,12438238,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,chris@die-schneider.net,chris@die-schneider.net,chris@die-schneider.net,15/Oct/09 20:06,04/Dec/09 22:34,14/Mar/19 02:29,17/Oct/09 06:26,2.2.4,,,,,,,,,,,,,,2.1.8,2.2.5,,,JAX-WS Runtime,,,,,,0,,,,"When the serviceClass property is set to an empty string or not defined in a client definition a NullpointerException is thrown:
	<jaxws:client id=""customerService"" 
		serviceName=""customer:CustomerServiceService"" 
		endpointName=""customer:CustomerServiceEndpoint""
		address=""http://localhost:9090/CustomerServicePort"" 
		serviceClass="""">
	</jaxws:client>

The issue can be easily reproduced by deleting the setting the serviceClass like above in the WSDL first example and starting the CustomerServiceSpringClient. 

I think we should throw a meaningfull Exception that says that serviceClass has to be set to the fully qualified name of the service interface. The question is only: Where is the right place to put this?

The exception is attached below:
--------------------------------------------------------
Exception in thread ""main"" org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'tester' defined in class path resource [client-applicationContext.xml]: Cannot resolve reference to bean 'customerService' while setting bean property 'customerService'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'customerService': FactoryBean threw exception on object creation; nested exception is java.lang.NullPointerException
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:275)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:104)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1245)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1010)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:472)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:409)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:380)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:264)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:221)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:261)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:429)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:729)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:381)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:139)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:93)
	at com.example.customerservice.client.CustomerServiceSpringClient.main(CustomerServiceSpringClient.java:33)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'customerService': FactoryBean threw exception on object creation; nested exception is java.lang.NullPointerException
	at org.springframework.beans.factory.support.FactoryBeanRegistrySupport$1.run(FactoryBeanRegistrySupport.java:127)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.doGetObjectFromFactoryBean(FactoryBeanRegistrySupport.java:116)
	at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.getObjectFromFactoryBean(FactoryBeanRegistrySupport.java:98)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getObjectForBeanInstance(AbstractBeanFactory.java:1285)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:217)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:269)
	... 18 more
Caused by: java.lang.NullPointerException
	at org.apache.cxf.jaxws.support.JaxWsImplementorInfo.getWSInterfaceName(JaxWsImplementorInfo.java:231)
	at org.apache.cxf.jaxws.support.JaxWsImplementorInfo.initialize(JaxWsImplementorInfo.java:270)
	at org.apache.cxf.jaxws.support.JaxWsImplementorInfo.<init>(JaxWsImplementorInfo.java:57)
	at org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean.setServiceClass(JaxWsServiceFactoryBean.java:173)
	at org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory.initializeServiceFactory(AbstractWSDLBasedEndpointFactory.java:227)
	at org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory.createEndpoint(AbstractWSDLBasedEndpointFactory.java:99)
	at org.apache.cxf.frontend.ClientFactoryBean.create(ClientFactoryBean.java:52)
	at org.apache.cxf.frontend.ClientProxyFactoryBean.create(ClientProxyFactoryBean.java:102)
	at org.apache.cxf.jaxws.JaxWsProxyFactoryBean.create(JaxWsProxyFactoryBean.java:115)
	at org.apache.cxf.jaxws.spring.JaxWsProxyFactoryBeanDefinitionParser$JAXWSSpringClientProxyFactoryBean.getObject(JaxWsProxyFactoryBeanDefinitionParser.java:74)
	at org.springframework.beans.factory.support.FactoryBeanRegistrySupport$1.run(FactoryBeanRegistrySupport.java:121)
	... 26 more",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-10-15 20:42:33.249,,,no_permission,,,,,,,,,,,,,113891,,,Fri Oct 16 22:18:27 UTC 2009,,,,,,0|i14ew7:,233876,,,,,,,,"15/Oct/09 20:42;dkulp; 

I would say:

t org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean.setServiceClass(JaxWsServiceFactoryBean.java:173) 

would be a good start.   If someone is calling JaxWsServiceFactoryBean.setServiceClass (or the super class one as well) with a null for the class, that's a problem. 

","16/Oct/09 06:27;chris@die-schneider.net;Thanks for the pointer. I have added a check to the setter but this helps only when the property is set to """". If it is left out completely the setter is not called at all. So in this case the NullpointerException still appears. Is there any method that is or can be called after all properties are set?","16/Oct/09 20:50;dkulp;
Is there a new stack trace that we can look at?   
","16/Oct/09 22:03;chris@die-schneider.net;No, the stack trace is exactly the same. It still happens at getWSInterfaceName.","16/Oct/09 22:18;chris@die-schneider.net;Hmm .. I just tested it again and it worked .. the Exception I had added was thrown as expected when the property is """" or not present. I don´t know what I had seen before ;-)",,,,,,,,,,,,,,,,,,,,,,,,,,
DocLiteralInInterceptor.handleMessage(Message) does not handle use case where message part is an XMLStreamReader,CXF-2474,12438178,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,msa@allman.ms,msa@allman.ms,15/Oct/09 08:42,04/Dec/09 22:34,14/Mar/19 02:29,15/Oct/09 16:20,2.2.4,2.2.5,,,,,,,,,,,,,2.2.5,,,,Core,,,,,,0,,,,"The DocLiteralInInterceptor.handleMessage(Message) method breaks on the use case where the message part is an XMLStreamReader.

The code seems to assume that line 188:

                    o = dr.read(p, xmlReader);

actually ""reads"" the message XML from xmlReader and advances to the next message part.  Not so when dr is an XMLStreamDataReader.  In that case, o is in fact xmlReader itself.

We need to check in the while condition at line 195 that o != xmlReader (or come up with a more elegant solution).  I'm attaching a patch that does that.",,,,,,,,,,,,,,,,,15/Oct/09 08:42;msa@allman.ms;DocLiteralInInterceptor.patch;https://issues.apache.org/jira/secure/attachment/12422197/DocLiteralInInterceptor.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2009-10-15 16:20:02.412,,,no_permission,,,,,,,,,,,,,113889,,,Tue Oct 20 01:07:30 UTC 2009,,,,,,0|i0sy3j:,167001,,,,,,,,15/Oct/09 08:42;msa@allman.ms;Proposed fix,"15/Oct/09 16:20;dkulp;
I did provide the suggested fix, but one major note is that the StaxDatabinding specifically states in it's javadoc that it doesn't work with the standard interceptors.   You should be using the StaxDatabinding feature thing that removes those interceptors.

Either that or (preferrably for 2.2.5) change to the SourceDatabinding which does work with better with them and provides some extra flexibility as well as better testing (due to the JAX-WS providers using it).   Additional features and stuff will be added to the SourceDatabinding and probably not the StaxDatabinding.

","16/Oct/09 08:27;msa@allman.ms;Daniel,

I can't use the SourceDataBinding.  Its DataWriter does not handle the case where the object to write is an instance of XMLStreamWriterCallback.  My invoke method returns an object of that type.  That's one reason I'm not using JAX-WS in the first place, but that's a different story...

Can you elaborate on the ""StaxDatabinding feature thing that removes those interceptors"" as I don't know what that is?

Cheers.","16/Oct/09 20:41;dkulp;
With 2.2.5, the SourceDatabinding properly supports either the Java6  javax.xml.transform.stax.StAXSource object or our own org.apache.cxf.staxutils.StaxSource (subclass of SAXSource) which can hold onto the XMLStreamReader.

In anycase, if you configure in a feature of class org.apache.cxf.databinding.stax.StaxDataBindingFeature  (see http://cxf.apache.org/docs/features.html), it should remove the interceptors it has problems with and put in a new one.","17/Oct/09 20:23;msa@allman.ms;WRT SourceDatabinding, yes, I see that it supports javax.xml.transform.stax.StAXSource.  However, it does not support return values of type XMLStreamWriterCallback.  Are there plans to support this?  Writing the response using an XMLStreamWriter is *much* easier than using an XMLStreamReader.  If you want, I can work on a patch.

As far as the StaxDataBindingFeature goes, I've written the code but have been unable to test it yet.  I will write again when I've confirmed it's working.

Thanks.","20/Oct/09 01:07;msa@allman.ms;I have verified that the StaxDataBindingFeature works for me. This eliminates my need to use the patch.

Thank you.",,,,,,,,,,,,,,,,,,,,,,,,,
"StaxDataBinding.write(Object, XMLStreamWriter) does not close an XMLStreamReader",CXF-2473,12438177,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,msa@allman.ms,msa@allman.ms,15/Oct/09 08:35,04/Dec/09 22:34,14/Mar/19 02:29,15/Oct/09 16:21,2.2.4,2.2.5,,,,,,,,,,,,,2.1.8,2.2.5,,,Core,,,,,,0,,,,"The StaxDataBinding.write(Object, XMLStreamWriter) method does not close a provided XMLStreamReader.  Shouldn't it?  Or perhaps StaxUtils.copy(XMLStreamReader, XMLStreamWriter) should.

Not closing the stream reader does present a bug for my use case.",,,,,,,,,,,,,,,,,15/Oct/09 08:35;msa@allman.ms;StaxDataBinding.patch;https://issues.apache.org/jira/secure/attachment/12422196/StaxDataBinding.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113888,,,Thu Oct 15 08:35:52 UTC 2009,,,,,,0|i0sy3r:,167002,,,,,,,,15/Oct/09 08:35;msa@allman.ms;Proposed fix,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The HttpServletResponse statuses is lost after is set in a service implementation (where the response is injected through @Context).,CXF-2471,12438069,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,sergey_beryozkin,vincenzo.vitale,vincenzo.vitale,14/Oct/09 10:09,01/Feb/10 19:02,14/Mar/19 02:29,08/Jan/10 16:38,2.2.4,2.2.5,,,,,,,,,,,,,2.2.6,,,,JAX-RS,,,,,,0,,,,"After injecting the the HttpServletResponse with the @Context annotation:

    @POST
    @Path(""/login"")
    public Feed login(@FormParam(""username"") String username,
            @FormParam(""password"") String password,
            @Context HttpServletResponse httpServletResponse) 

and than setting a status code (for example 401 if the user is not authorized), the status code get lost.

See here for workarounds and more detials:
http://www.nabble.com/Setting-the-status-code-in-the-injected-(via-the-jax-rs-@context)--HttpServletResponse-td25883621.html",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-11-23 17:15:51.077,,,no_permission,,,,,,,,,,,,,113886,,,Fri Jan 08 16:33:01 UTC 2010,,,,,,0|i1aefr:,268805,,,,,,,,"23/Nov/09 13:38;vincenzo.vitale;I tried 2.2.5 doing something like this:

    @GET
    @Path(""/{username}"")
    public Feed getContact(@PathParam(""username"") String username,
            @Context HttpServletResponse httpServletResponse) {

            ....
            ....
            httpServletResponse.setStatus(Status.NOT_FOUND.getStatusCode());
            return feed;
}

but the status code returned is always 200.


It works fine only adding this:
                     
                     throw new WebApplicationException(Response.status(Status.NOT_FOUND)
                    .entity(feed).build());


Cheers,
V.","23/Nov/09 17:15;sergey_beryozkin;JAXRSClientServerBookTest has a test which checks that one of the BookStore methods sets a 333 status on the HttpServletResponse, but the signature is different, something like

public Response getContact(@PathParam(""username"") String username,
            @Context HttpServletResponse httpServletResponse) {

            httpServletResponse.setStatus(333);
            return null;
} 

One more fix is needed to the JAXRSOutInterceptor...
thanks",08/Dec/09 10:02;vincenzo.vitale;Shouldn't the issue be open again?,"08/Dec/09 10:11;sergey_beryozkin;Can you confirm please it's been now fixed with the latest snapshot ?

http://repository.apache.org/snapshots/org/apache/cxf/apache-cxf/2.2.6-SNAPSHOT/","08/Dec/09 11:07;vincenzo.vitale;The response problem is fixed but now the Atom feed is not anymore rendered properly.

I'm using a custom provider extending the org.apache.cxf.jaxrs.provider.AtomFeedProvider. This was done since the xml directive was not included in the final xml.

The custom provider is essentially this:

    @Override
    public void writeTo(Feed feed, Class<?> clazz, Type type, Annotation[] a,
                        MediaType mt, MultivaluedMap<String, Object> headers,
                        OutputStream os) throws IOException {

        // System.out.println(""requested media type: "" + mt.toString());

        if (!JSON_TYPE.equals(mt.toString())) {

            os.write(XML_DIRECTIVE);
        }

        // System.out.println(""going normal (atom)"");

        super.writeTo(feed, clazz, type, a, mt, headers, os);
    }

and than configured in spring in the jax-rs section:

    <jaxrs:server id=""atomProductRestWebService"" address=""/product"">
        <jaxrs:serviceBeans>
            <ref bean=""atomProductWebService"" />
        </jaxrs:serviceBeans>
        <jaxrs:providers>
            <bean class=""com.tomtom.csl.atom.AtomFeedProviderWithXMLDirective"" />
        </jaxrs:providers>
    </jaxrs:server>

I guess is not related to this issue but just  a regression (since I guess 2.2.6 is going to be backward compatible).


Thanks,
V.","08/Dec/09 11:28;sergey_beryozkin;> but now the Atom feed is not anymore rendered properly. 

do you mean XML_DIRECTIVE is not available in the output ? Even if you don't use HttpServletContext ?

cheers, Sergey
","08/Dec/09 11:51;sergey_beryozkin;Actually, if you set say 403 and also return a feed then the browser won't show the feed given that it is 403...Let ne know please what exactly is happening","08/Dec/09 12:01;vincenzo.vitale;Well, our requirements (and what was happening until 2.2.4) is that we want at the same time set whatever status code in the http response and also return a proper atom feed.

But now I don't get anymore the feed serialized correctly, the only output is the XML_DIRECTIVE we are printing in the custom provider. 
BTW, the feed is neither serialized when the request is valid, maybe is some problem integrating the abdera library (we are using abdera 0.4.0-incubating).
","08/Dec/09 14:01;sergey_beryozkin;See http://svn.apache.org/repos/asf/cxf/trunk/systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/CustomAtomFeedProvider.java

and the output which is produced :

HTTP/1.1 200 OK
Content-Type: application/atom+xml
Date: Tue, 08 Dec 2009 13:50:13 GMT
Content-Length: 508
Server: Jetty(6.1.21)

<?xml version=""1.0"" encoding=""ISO-8859-1""?><feed xmlns=""http://www.w3.org/2005/Atom"" xmlns:xml=""http://www.w3.org/XML/1998/namespace"" xml:base=""http://localhost:9081/bookstore/bookstore4/books/feed""><title type=""text"">Collection of Books</title><id>http://www.books.com</id><author><name>BookStore Management Company</name></author><entry><title type=""text"">CXF in Action</title><id>123</id><content type=""application/xml""><Book xmlns=""""><id>123</id><name>CXF in Action</name></Book></content></entry></feed>

Note that if you set a formattedOutput property to true then Abdera will itself add an xml directive.

See also an atomservice4 endpoint in

http://svn.apache.org/repos/asf/cxf/trunk/systests/jaxrs/src/test/resources/jaxrs_atom/WEB-INF/beans.xml

and http://svn.apache.org/repos/asf/cxf/trunk/systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/AtomBookStore.java (private Feed doGetBookAsFeed(@Context UriInfo uParam))

what is different in your case ?","08/Jan/10 10:48;sergey_beryozkin;Hi, I was just about to close this JIRA :-)
Can you reply to my last comment please ?

cheers, Sergey","08/Jan/10 16:13;vincenzo.vitale;Just tried the last snapshot and indeed is fixed! Do you know the date for releasing 2.2.6?


Thanks a lot,
V.","08/Jan/10 16:33;sergey_beryozkin;great, thanks for the confirmation...
around 18 Jan",,,,,,,,,,,,,,,,,,,
Invoke operation is incorrectly listed in Services List for JAX-WS Provider,CXF-2470,12438068,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,rrusin,rrusin,14/Oct/09 09:58,04/Dec/09 22:34,14/Mar/19 02:29,14/Oct/09 21:10,2.2.4,,,,,,,,,,,,,,2.2.5,,,,,,,,,,0,,,,"For WSDL based endpoints and JAX-WS Provider implementor, an additional method ""invoke"" appears in services list for given porttype. 

Related discussion was here:
http://markmail.org/message/w6vxeyyzg6h5db4k

",tomcat WAR,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113885,,,2009-10-14 09:58:36.0,,,,,,0|i0v1h3:,179212,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
attribute namespace is missed in out message in  case of XmlBeans data binding,CXF-2468,12437972,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Blocker,Fixed,dkulp,mklimiuk,mklimiuk,13/Oct/09 13:00,04/Dec/09 22:34,14/Mar/19 02:29,21/Oct/09 00:49,,,,,,,,,,,,,,,2.1.8,2.2.5,,,OtherDatabindings,,,,,,0,,,,"SCENARIO:

The XmlBeans databinding is used.

Trying to send a message with an input data like:

<myOperation
        xmlns=""http://sandbox.org/services/MyService/myOperation""
        xmlns:s1=""http://sandbox.org/datatypes/one""
        xmlns:s2=""http://sandbox.org/datatypes/two""
        xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">
    <data>
        <s1:oneElement>
            <s2:twoElement xsi:nil=""true""/>
        </s1:oneElement>
    </data>
</myOperation>


ACTUAL RESULT:

The out message is generated as follows:

<soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/"">
<soap:Body>
    <myOperation xmlns=""http://sandbox.org/services/MyService/myOperation"">
        <data>
            <oneElement xmlns=""http://sandbox.org/datatypes/one"">
                <twoElement xmlns=""http://sandbox.org/datatypes/two"" xsi:nil=""true""/>
            </oneElement>
        </data>
    </myOperation>
</soap:Body>
</soap:Envelope>

Namespace definition for ""xsi"" prefix is missed. And the receiver fails to process the message because of validation.


EXPECTED RESULT:

<soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/"">
<soap:Body>
    <myOperation xmlns=""http://sandbox.org/services/MyService/myOperation"">
        <data>
            <oneElement xmlns=""http://sandbox.org/datatypes/one"">
                <twoElement xmlns=""http://sandbox.org/datatypes/two"" 
                            xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" 
                            xsi:nil=""true""/>
            </oneElement>
        </data>
    </myOperation>
</soap:Body>
</soap:Envelope>

I.e. the namespace for ""xsi"" prefix is present.


ANALYSIS:

Analysis is based on the CXF 2.2.3.

Please have a look at the sources:

   Class: org.apache.cxf.staxutils.StaxUtils
   Method: writeStartElement(XMLStreamReader reader, XMLStreamWriter writer)
   The code under his comment -> // Write out attributes

My guess is:

   If we have both ""ns"" and ""nsPrefix"" that are not empty then the namespace definition should be written.

   506            } else {
   507                writer.writeNamespace(nsPrefix, ns); // <-- THIS IS A NEW EXAMPLE LINE OF WHAT IS DESIRED
   508                writer.writeAttribute(reader.getAttributePrefix(i), reader.getAttributeNamespace(i), reader
   509                    .getAttributeLocalName(i), reader.getAttributeValue(i));
   510            }
",,,,,,,,,,,,,,,,,14/Oct/09 15:20;mklimiuk;CXF2468.zip;https://issues.apache.org/jira/secure/attachment/12422108/CXF2468.zip,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2009-10-13 16:52:37.384,,,no_permission,,,,,,,,,,,,,113883,,,Wed Oct 21 00:49:19 UTC 2009,,,,,,0|i0uxan:,178535,,,,,,,,"13/Oct/09 16:52;dkulp;

Is there any way you could create a small testcase and attach?  This actually looks like a bug in xmlbeans.   We pretty much copy the events that xmlbeans gives us to the output.   If it's not providing the xsi namespace when it needs it, that's possibly a bug in xmlbeans.   However, we may be able to provide a better workaround if I can get a good testcase that would allow me to dig in better.     Maybe call the XmlOptions.setSaveNamespacesFirst() option or something to put them at the top level.   Hard to tell without a testcase.
","14/Oct/09 05:48;mklimiuk;Thanks for a quick response, Daniel. Will try to provide the testcase today.","14/Oct/09 15:20;mklimiuk;Please the test project attached.

README.txt

1. Make sure ""cxf.dir"" property in ""build.properties"" file points
   to the CXF-2.2.3 directory with libs.

2. Run ant.

3. The error will occur but in the logs we can see the outgoing message:

   <soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/"">
     <soap:Body>
       <myOperationRequest xmlns=""http://sandbox.org/services/myService/myDataTypes"">
         <info>
           <firstName>Mike</firstName>
           <lastName xsi:nil=""true"" />
         </info>
       </myOperationRequest>
     </soap:Body>
   </soap:Envelope>

   I.e. no defnition for ""xsi"" prefix.

","14/Oct/09 17:35;dkulp;
Thanks for the test case.   It's definitely an xmlbeans bug as the XMLStreamReader they provide never defines a namespace for xsi.   I've updated the StaxUtils to do some checking of the namespaces/prefixes to catch this now.   We already do this for the element qnames to catch broken prefixes and stuff on the element level.  I just updated it to also catch them for attributes.  Running tests now.","19/Oct/09 07:11;mklimiuk;Hi Daniel, I've reopened the issue just to make sure that the situation is clear.

As stated above the xml reader does not provide the namespace for xsi, but the same test (that attached) shows that it does provide it.

We can see it if we include the output of the xml bean object in the test before the service invocation, like:

    System.out.println(""Document = "" + doc);

this will show us:

    Document = <myOperationRequest xmlns=""http://sandbox.org/services/myService/myDataTypes"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""><info><firstName>Mike</firstName><lastName xsi:nil=""true""/></info></myOperationRequest>

In the output message this information is missed, but if we do the following fix in the StaxUtils class(as I mentioned earlier):

>    506            } else {
>    507                writer.writeNamespace(nsPrefix, ns); // <-- FIX: NEW LINE ADDED
>    508                writer.writeAttribute(reader.getAttributePrefix(i), reader.getAttributeNamespace(i), reader
>    509                    .getAttributeLocalName(i), reader.getAttributeValue(i));
>    510            }

Than the namespace for xsi will be caught and used.

This fix works in our project, so please review it and tell whether this is the right way or not.","21/Oct/09 00:49;dkulp;> As stated above the xml reader does not provide the namespace for xsi, but the same test (that attached) shows that it does provide it. 

The XMLStreamReader does not, but the toString method that is used when doing println(doc) does.    As mentioned, bug in XMLBeans XMLStreamReader thing.



> writer.writeNamespace(nsPrefix, ns); // <-- FIX: NEW LINE ADDED 

You don't want to do that as ALL attributes that are namespace prefixed would end up with new namespace declarations outputted.   The fix I implemented checks if the namespace is already declared properly and on writes out the namespace decl if it really need to.

See:
http://svn.apache.org/viewvc/cxf/trunk/common/common/src/main/java/org/apache/cxf/staxutils/StaxUtils.java?p2=/cxf/trunk/common/common/src/main/java/org/apache/cxf/staxutils/StaxUtils.java&p1=/cxf/trunk/common/common/src/main/java/org/apache/cxf/staxutils/StaxUtils.java&r1=825221&r2=825220&view=diff&pathrev=825221
",,,,,,,,,,,,,,,,,,,,,,,,,
CXF WS-RM impl displays exceptions,CXF-2466,12437956,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,opalka,opalka,13/Oct/09 10:07,01/Feb/10 19:02,14/Mar/19 02:29,12/Jan/10 21:11,2.2.3,,,,,,,,,,,,,,2.1.9,2.2.6,,,WS-* Components,,,,,,0,,,,"CXF WS-RM impl doesn't detect anonymous addressing URIs and tries to create connection with this fake URI on server side.
This is the stack trace:
---
/SEVERE [RetransmissionQueueImpl] WS-RM retransmission failed.
java.net.HttpRetryException: cannot retry due to server authentication,
in streaming mode
at
sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1111)

at java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:373)
at
org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleResponseInternal(HTTPConduit.java:2046)

at
org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleResponse(HTTPConduit.java:2022)

at
org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.close(HTTPConduit.java:1947)

at
org.apache.cxf.ws.rm.soap.RetransmissionQueueImpl.resend(RetransmissionQueueImpl.java:350)

at
org.apache.cxf.ws.rm.soap.RetransmissionQueueImpl.serverResend(RetransmissionQueueImpl.java:303)

at
org.apache.cxf.ws.rm.soap.RetransmissionQueueImpl.access$500(RetransmissionQueueImpl.java:71)

at
org.apache.cxf.ws.rm.soap.RetransmissionQueueImpl$3.resend(RetransmissionQueueImpl.java:546)

at
org.apache.cxf.ws.rm.soap.RetransmissionQueueImpl$ResendCandidate.run(RetransmissionQueueImpl.java:417)

at
org.apache.cxf.workqueue.SynchronousExecutor.execute(SynchronousExecutor.java:37)

at
org.apache.cxf.ws.rm.soap.RetransmissionQueueImpl$ResendCandidate.initiate(RetransmissionQueueImpl.java:406)

at
org.apache.cxf.ws.rm.soap.RetransmissionQueueImpl$ResendCandidate$1ResendTask.run(RetransmissionQueueImpl.java:500)

at java.util.TimerThread.mainLoop(Timer.java:512)
at java.util.TimerThread.run(Timer.java:462)
---

The workaround was defined here: http://www.nabble.com/Reliable-messaging-resending-causing-a-stack-trace-td22601956.html
It is to make CXF WS-RM client addressable.

The correct fix should be to detect anonymous addressing URIs and don't try to create connection with it.
Also warning in server log could be created about fact WS-RM client is addressable and thus WS-RM resending  won't work.","Fedora 11, Java 1.6",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113882,,,Tue Oct 13 10:11:33 UTC 2009,,,,,,0|i0v1zz:,179297,,,,,,,,"13/Oct/09 10:11;opalka;After implementing workaround (i.e. making WS-RM client addressable):

---
  <http:conduit name=""{http://cxf.redhat.com}BackendCxfTestPort.http-conduit"">
    <http:client DecoupledEndpoint=""http://localhost:9990/decoupled_endpoint""/>
  </http:conduit>
---

We're getting another exception. Server WS-RM impl. tries to create connection
with not existing addressable client. But instead of eating ""Connection refused"" exception
it is displayed on server console :(

Here's the stack trace:
---
11:37:46,179 SEVERE [RetransmissionQueueImpl] WS-RM retransmission failed.
java.net.ConnectException: Connection refused
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.PlainSocketImpl.doConnect(PlainSocketImpl.java:333)
	at java.net.PlainSocketImpl.connectToAddress(PlainSocketImpl.java:195)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:182)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:366)
	at java.net.Socket.connect(Socket.java:519)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:158)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:394)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:529)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:233)
	at sun.net.www.http.HttpClient.New(HttpClient.java:306)
	at sun.net.www.http.HttpClient.New(HttpClient.java:323)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:852)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:793)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:718)
	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:896)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleHeadersTrustCaching(HTTPConduit.java:1916)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.onFirstWrite(HTTPConduit.java:1871)
	at org.apache.cxf.io.AbstractWrappedOutputStream.write(AbstractWrappedOutputStream.java:42)
	at org.apache.cxf.io.AbstractThresholdOutputStream.write(AbstractThresholdOutputStream.java:69)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.close(HTTPConduit.java:1934)
	at org.apache.cxf.ws.rm.soap.RetransmissionQueueImpl.resend(RetransmissionQueueImpl.java:350)
	at org.apache.cxf.ws.rm.soap.RetransmissionQueueImpl.serverResend(RetransmissionQueueImpl.java:303)
	at org.apache.cxf.ws.rm.soap.RetransmissionQueueImpl.access$500(RetransmissionQueueImpl.java:71)
	at org.apache.cxf.ws.rm.soap.RetransmissionQueueImpl$3.resend(RetransmissionQueueImpl.java:546)
	at org.apache.cxf.ws.rm.soap.RetransmissionQueueImpl$ResendCandidate.run(RetransmissionQueueImpl.java:417)
	at org.apache.cxf.workqueue.SynchronousExecutor.execute(SynchronousExecutor.java:37)
	at org.apache.cxf.ws.rm.soap.RetransmissionQueueImpl$ResendCandidate.initiate(RetransmissionQueueImpl.java:406)
	at org.apache.cxf.ws.rm.soap.RetransmissionQueueImpl$ResendCandidate$1ResendTask.run(RetransmissionQueueImpl.java:500)
	at java.util.TimerThread.mainLoop(Timer.java:512)
	at java.util.TimerThread.run(Timer.java:462)

---","13/Oct/09 10:11;opalka;Cross reference issue: https://jira.jboss.org/jira/browse/JBWS-2778
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ClassCastException in JAXRSOutInterceptor.serializeMessage,CXF-2464,12437739,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,,tommy.odom,tommy.odom,09/Oct/09 19:32,13/Nov/09 17:27,14/Mar/19 02:29,11/Oct/09 18:38,2.2.2,,,,,,,,,,,,,,2.2.3,,,,JAX-RS,,,,,,0,,,,"The following line in JAXRSOutInterceptor.serializeMessage causes a ClassCastException if the headers are not of type MultivaluedMap.

        MultivaluedMap<String, Object> responseHeaders = 
            (MultivaluedMap)message.get(Message.PROTOCOL_HEADERS);

We have an existing CXF out interceptor that we configure on the CXF bus which works with both SOAP and REST calls so when we add the protocol headers we use a standard HashMap.  This worked fine in CXF 2.2 but when we tried upgrading to CXF 2.2.2 our REST services started failing.  A few lines above that the code retrieves the headers and refers to them as a standard Map interface.  ",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-10-09 20:11:47.685,,,no_permission,,,,,,,,,,,,,113881,,,Sun Oct 11 18:38:39 UTC 2009,,,,,,0|i0v1hz:,179216,,,,,,,,"09/Oct/09 20:11;sergey_beryozkin;it's unfortunate...please use new MetadataMap<String, Object> as a workaround, it implements Map<String, List<Object>> so will work in JAXWS only case","11/Oct/09 18:38;sergey_beryozkin;Please try 2.2.3, it has the proper code in. If you have to stay with 2.2.2 then please you new MetadataMap<String, String> in your custom interceptor",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SOAP 1.2 service return SOAP 1.2 Fault message in response to SOAP 1.1 request when exception is thrown,CXF-2463,12437667,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,mbrennanvegas,mbrennanvegas,09/Oct/09 01:18,11/Dec/09 09:52,14/Mar/19 02:29,15/Oct/09 16:15,2.2.3,,,,,,,,,,,,,,2.1.8,2.2.5,,,Soap Binding,,,,,,0,,,,"I've created a JAX-WS web service using JAXB databinding that I would like to support both SOAP 1.1 and SOAP 1.2. Based on info I saw referenced elsewhere, I configured it as a SOAP 1.2 endpoint expecting that CXF (as of version 2.2.3, anyway) would properly return a SOAP 1.1 response to a SOAP 1.1 request.

This works fine for successful responses, but when my service throws an exception, CXF is returning a SOAP 1.2 fault message. I tried changing my code to throw a SOAPFaultException and used SOAPFactory to explicity create a SOAPFault for SOAP 1.1. protocol. In this case, the fault code ends up scoped to the SOAP 1.1 namespace, but it's returned in a SOAP 1.2 envelope (and SOAP 1.2 format Reason).
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-12-11 09:52:59.782,,,no_permission,,,,,,,,,,,,,113880,,,Fri Dec 11 09:52:59 UTC 2009,,,,,,0|i1402f:,231473,,,,,,,,"11/Dec/09 09:52;susanna@tmsoftware.com;I am desperate, I only have this error if I am using cxf version 2.1.9 or 2.2.5.

If I use less version like 2.1.3 we get the build error:
urls[39] = file:/C:/Users/susanna/.m2/repository/org/codehaus/plexus/plexus-utils/1.1/plexus-utils-1.1.jar
[FATAL ERROR] Container realm = plexus.core
urls[0] = file:/C:/apache-maven-2.0.10/lib/maven-2.0.10-uber.jar
[INFO] ------------------------------------------------------------------------
[ERROR] FATAL ERROR
[INFO] ------------------------------------------------------------------------
[INFO] org/apache/log4j/Appender
org.apache.log4j.Appender
[INFO] ------------------------------------------------------------------------
[INFO] Trace
java.lang.NoClassDefFoundError: org/apache/log4j/Appender
	at java.lang.Class.forName0(Native Method)
	at java.lang.Class.forName(Class.java:247)
	at org.apache.cxf.common.logging.LogUtils.<clinit>(LogUtils.java:80)
	at org.apache.cxf.BusFactory.<clinit>(BusFactory.java:40)
	at org.apache.cxf.maven_plugin.WSDL2JavaMojo.execute(WSDL2JavaMojo.java:260)

We are working with a big project that have 1 parent pom and 5 children. 
The above error makes me need to clean and package all 5 children if I change the code, and that takes 5 min. just because I change one file.
This project has 20-30 wsdl from different vendors. Where there are conflict with user

I have quite a few of settings like these:
 <wsdlOption>
     <wsdl>${basedir}/src/main/resources/wsdl/xx.wsdl</wsdl>
           <extraargs>
                <extraarg>-p</extraarg>
                <extraarg>is.xx.yy</extraarg>
            </extraargs>
</wsdlOption>

I have tested maven 2.2.1 and 2.0.10, cxf 2.1.3 up to 2.1.8 and 2.2.5 down to 2.2.3, I am using Intell. 9 and 9beta.

Nothing has helped, and I haven't found any information about this on the web.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CXF REST is not parsing the header value correctly if a comma is specified in a parameter value.,CXF-2462,12437616,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,sergey_beryozkin,jchabot,jchabot,08/Oct/09 16:52,23/Mar/10 02:59,14/Mar/19 02:29,10/Mar/10 17:47,2.2.3,,,,,,,,,,,,,,2.2.7,2.3,,,JAX-RS,,,,,,0,,,,"The RFC2616 and RFC822 states that a header is comprised of the following:

  header  = [ header-value ] *( "","" [ header-value ] )
  header-value = name [ ""="" [ value ] ] *( "";"" [ param ] )
  param = name [ ""="" [ value ] ]
  name = token
  value = token | quoted-string
  token          = 1*<any CHAR except CTLs or separators>
  separators     = ""("" | "")"" | ""<"" | "">"" | ""@""
                      | "","" | "";"" | "":"" | ""\"" | <"">
                      | ""/"" | ""["" | ""]"" | ""?"" | ""=""
                      | ""{"" | ""}"" | SP | HT
 quoted-string  = ( <""> *(qdtext | quoted-pair ) <""> )
 qdtext         = <any TEXT except <"">>

  The backslash character (""\"") MAY be used as a single-character
  quoting mechanism only within quoted-string and comment constructs.

  quoted-pair    = ""\"" CHAR

Based on the above, this header should be valid

    xm-my-header : foo,bar,dogs=""snoopy,bowzer"";cat=garfield

My REST service defines the method parameter this in its interface as 

 @HeaderParam(""xm-my-header"") List<String> args

I expected CXF to pass 3 elements into the service:

[0] foo
[1] bar
[2] dogs=""snoopy,bowzer""; cat=garfield

But, this is what CXF passes into the service:

[0] foo
[1] bar
[2] dogs=""snoopy
[3] bowzer"";cat=garfield

CFX is parsing the header value using the comma as a delimiter. But, it is ignoring the fact that the value may be within a quoted-string. 
","Ubuntu 9.04, Compaq 6910p, 4GB memory",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-10-09 09:44:58.096,,,no_permission,,,,,,,,,,,,,113879,,,Wed Mar 10 17:47:07 UTC 2010,,,,,,0|i0a62n:,57257,,,,,,,,"09/Oct/09 09:44;sergey_beryozkin;Will try to fix it these weekends, thanks.
The workaround is to use a CXF specific MessageContext, then context.get(Message.REQUEST_HEADERS) and cast a returned Object to Map<String, List<String>> and then manually parse map.get(""xm-my-header"").get(0), at the moment the underlying HTTP Request impl will return the whole sequence as a single value


","09/Oct/09 10:00;sergey_beryozkin;Actually, ignore it please, you can probably just do (as a workaround) 

@HeaderParam(""xm-my-header"") String arg

and then parse it manually

or  

@HeaderParam(""xm-my-header"") XmlMyHeaderBean

which will have 

XmlMyHeaderBean(String) constructor and a method

List<String> getValues()


but it will be fixed at the runtime level soon
",23/Feb/10 15:53;alucas;The issue is now marked as fixed in 2.2.5. Can you tell me what the fix is and what code was changed to fix the bug? I am seeing some unexpected behavior with header values now.,"23/Feb/10 16:07;sergey_beryozkin;There were a couple of fixes going in...
Are you using 2.2.5 ?
Can you post a sample header value and explain what is unexpected in the way the value is retrieved ?

cheers, Sergey","24/Feb/10 22:34;alucas;Hi Sergey,

We are now using CXF 2.2.6. 

The client provides some custom HTTP headers like 
 x-im-my-header: ""My API""
(notice the double quotes around My API_

However, the web service POJO is getting injected for @HeaderParam(""x-im-my-header"") with the value My instead of My API or instead of ""My API"" like it used to.

I see in HttpHeadersImpl.getHeaderValues(...) that if a value has quotes, it gets parsed using the complex header expression. I am not sure that the value should be parsed at all when quoted at least for custom headers. It may be better if CXF just removes the quotes around the value and unescape any quote characters within the value at least for custom headers.

Feel free to contact me by email to get more information: arnaud.lucas@ironmountain.com","10/Mar/10 17:47;sergey_beryozkin;Hope it is the final fix to the whole header processing story, if a header has a value starting and ending with ""\"""" then the single value inside the quotes will be returned with quotes being stripped",,,,,,,,,,,,,,,,,,,,,,,,,
MTOM byte arrays problem,CXF-2457,12437128,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Critical,Fixed,dkulp,vitaly_litvak,vitaly_litvak,02/Oct/09 16:03,12/Oct/09 20:45,14/Mar/19 02:29,02/Oct/09 21:29,2.2.4,,,,,,,,,,,,,,2.2.4,,,,Aegis Databinding,,,,,,0,,,,"There is a web service created using cxf-2.2.4-snapshot. It provides a method, which returns a byte array. Simple frontend is used. In such case it should be threated as an attachment. When calling this method following exception is thrown:

java.lang.NullPointerException
	at org.apache.cxf.aegis.type.mtom.AbstractXOPType.writeObject(AbstractXOPType.java:164)
	at org.apache.cxf.aegis.type.basic.Base64Type.writeObject(Base64Type.java:114)
	at org.apache.cxf.aegis.databinding.XMLStreamDataWriter.write(XMLStreamDataWriter.java:112)
	at org.apache.cxf.aegis.databinding.XMLStreamDataWriter.write(XMLStreamDataWriter.java:48)
	at org.apache.cxf.interceptor.AbstractOutDatabindingInterceptor.writeParts(AbstractOutDatabindingInterceptor.java:114)
	at org.apache.cxf.interceptor.BareOutInterceptor.handleMessage(BareOutInterceptor.java:68)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:478)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:308)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:260)
	at org.apache.cxf.frontend.ClientProxy.invokeSync(ClientProxy.java:73)
	at org.apache.cxf.frontend.ClientProxy.invoke(ClientProxy.java:68)
	at $Proxy35.setExcelTemplate(Unknown Source)
	at com.fundcount.fcoffice.client.api.CClientAPI.setExcelTemplate(CClientAPI.java:2314)
	at com.fundcount.fcoffice.gui.export.CExportFrame$CDataExporter.run(CExportFrame.java:626)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
	at java.util.concurrent.FutureTask.run(FutureTask.java:138)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:619)

Source code for this test case is attached.",,,,,,,,,,,,,,,,,02/Oct/09 16:03;vitaly_litvak;cxf_test2.jar;https://issues.apache.org/jira/secure/attachment/12421120/cxf_test2.jar,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113875,,,2009-10-02 16:03:29.0,,,,,,0|i0uzcf:,178867,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unable to disable schema validation in 2.2.4-SNAPSHOT,CXF-2455,12436958,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,agorelik,agorelik,30/Sep/09 21:48,12/Oct/09 20:45,14/Mar/19 02:29,02/Oct/09 02:57,2.2.4,,,,,,,,,,,,,,2.2.4,,,,,,,,,,0,,,,"Hello,

It seems I am unable to disable schema validation CXF 2.2.4-SNAPSHOT as it is enabled by default?      

<jaxws:endpoint
            id=""testService""
            implementor=""testServiceImpl""
            wsdlLocation=""wsdl/v29/testService.wsdl""
            address=""/v29/testService"">
            <jaxws:properties>
                <entry key=""schema-validation-enabled"" value=""false"" />
            </jaxws:properties>
            <jaxws:inInterceptors>
                <ref bean=""testInterceptor"" />
            </jaxws:inInterceptors>
    </jaxws:endpoint>

This works in 2.2.3 as I am able to disable schema validation to perform custom checks myself. However, in the latest 2.2.4-SNAPSHOT, I am not longer able to disable the schema validation. Is there another way to do this without touching the Endpoint Service Interface/Class? I am using a WSDL first approach to develop my services.

Best Regards,
Arik.",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-10-02 02:57:01.93,,,no_permission,,,,,,,,,,,,,113873,,,Sun Oct 04 16:51:56 UTC 2009,,,,,,0|i0v3sv:,179589,,,,,,,,"30/Sep/09 22:24;agorelik;Now I am thinking that it could be something inside the DocLiteralInInterceptor that causes my custom schema validation to fail. 

Basically prior to the DocLiteralInInterceptor interceptor, I inspect certain SOAP message elements and do message.setContent(Exception.class, Fault); in case I find a problem.  

In CXF 2.2.3, I used to be able to throw this fault from UNMARSHAL phase AFTER DocLiteralInInterceptor, but now, I cannot as I am getting a generic error for schema validation problems. ","30/Sep/09 23:13;agorelik;Sorry for the spam, but more info on this...

I am trying to avoid having my message be processed by the DocLiteralInInterceptor so I wrote my custom intercetor to handle the Fault which I want to throw; however, my custom interceptor does not fire after URIMappingIntercetor and before DocLiteralInInterceptor after I add it to the chain. I've been debugging the code, but not sure why it does not fire.  

This is how I am adding it:

	public TestFaultThrowingInterceptor() {
		super(Phase.UNMARSHAL);
		addBefore(DocLiteralInInterceptor.class.getName());
	}

                     	public void handleMessage(SoapMessage message) throws Fault {
		// Obtain the fault from the previous phases 
		Fault fault = (Fault) message.getContent(Exception.class);
		if (fault != null) {
			throw fault;
		}
	}

<jaxws:endpoint 
            id=""testService"" 
            implementor=""testServiceImpl"" 
            wsdlLocation=""wsdl/v29/testService.wsdl"" 
            address=""/v29/testService""> 
            <jaxws:properties> 
                <entry key=""schema-validation-enabled"" value=""false"" /> 
            </jaxws:properties> 
            <jaxws:inInterceptors> 
                <ref bean=""testInterceptor"" /> 
                <ref bean=""testFaultThrowingInterceptor"" /> 
            </jaxws:inInterceptors> 
    </jaxws:endpoint> 

","01/Oct/09 03:52;agorelik;Looks like after experimenting more with this, in 2.2.4-SNAPSHOT, the schema validation setting is ignored?

I just sending a simple integer type in an <id> element like this:

<id>12345a</id>

but getting a validation error which I would like to turn off and able to do so in 2.2.3. Moreover, in 2.2.3 in the UNMARSHAL phase, the value is being set to ""null"" in case of invalid values for the elements based on the schema types.

Here is the stack trace:

DefaultValidationEventHandler: [ERROR]: For input string: ""12345a"" 
     Location: line 11
Sep 30, 2009 8:47:21 PM org.apache.cxf.phase.PhaseInterceptorChain doIntercept
WARNING: Interceptor has thrown exception, unwinding now
org.apache.cxf.interceptor.Fault: Unmarshalling Error: For input string: ""12345a"" 
	at org.apache.cxf.jaxb.JAXBEncoderDecoder.unmarshall(JAXBEncoderDecoder.java:661)
	at org.apache.cxf.jaxb.JAXBEncoderDecoder.unmarshall(JAXBEncoderDecoder.java:533)
	at org.apache.cxf.jaxb.io.DataReaderImpl.read(DataReaderImpl.java:119)
	at org.apache.cxf.interceptor.DocLiteralInInterceptor.handleMessage(DocLiteralInInterceptor.java:99)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
	at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:104)","02/Oct/09 02:57;dkulp;
Added two properties:

""set-jaxb-validation-event-handler"" -> Boolean
which can be set to false to completely NOT set any sort of event handler.  

""jaxb-validation-event-handler"" -> ValidationEventHandler object
if you want to set your own custom handler.

Note:  both properties are contextual off the message.  Thus, an interceptor prior to the DocLitIn... could set the properties.  It doesn't need to be a configuration thing or similar.","04/Oct/09 16:51;agorelik;Thank you very much. I got the latest snapshot and was able to turn off the
default jaxb validation event handler for now.

            // Fix in CXF 2.2.4 to disable jaxb default validation
            message.put(""set-jaxb-validation-event-handler"", false);
            message.put(""jaxb-validation-event-handler"", null);

I'll see if I can find a way to use the default validation and also use my
validation together. Ideally, that would be great for me, but that's a
challenge as the default jaxb validation does not allow me to get past
DocLiteralInInterceptor and only past that interceptor I can return custom
exception types (from the schema) which are filled in with the
bindings/values that I want.

Best Regards,
Arik.


",,,,,,,,,,,,,,,,,,,,,,,,,,
<jaxws:client> does not support anonymous bean declaration,CXF-2454,12436911,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,dkulp,feerbach,feerbach,30/Sep/09 11:48,04/Dec/09 22:34,14/Mar/19 02:29,15/Oct/09 17:38,2.2.3,,,,,,,,,,,,,,2.2.5,,,,Configuration,JAX-WS Runtime,,,,,0,,,,"I would like to declare <jaxws:client> inside a bean property:

    <bean id=""myBean"" class=""..."">
        <property name=""someService"">
            <jaxws:client serviceClass=""...SomeServiceInterface"" />
        </property>
        <property name=""anotherService"">
            <jaxws:client serviceClass=""...AnotherServiceInterface"" />
        </property>
    </bean>

In this case Spring documentation recommends to keep nested beans anonymous (i.e. no 'id' or 'name' attribute): nested beans cannot be referenced elsewhere so there is no reason to give name. In this case CXF bean definition parsers (like JaxWsProxyFactoryBeanDefinitionParser, ClientProxyFactoryBeanDefinitionParser) work incorrectly. The parsers assume what a name is provided, this cause problem with factory bean names which are constructed by appending factoryIdSuffix to the provided name: if name is not provided all factory beans will use same name "".proxyFactory"" (i.e. Spring context will contain only single proxy factory bean of the last initialized anonymous CXF client bean).

CXF AbstractFactoryBeanDefinitionParser#doParse() method should generate unique IDs if the id is not provided by 'id' or 'name' attribute. Take a look at the org.springframework.beans.factory.xml.BeanDefinitionParserDelegate#parseBeanDefinitionElement(Element ele, BeanDefinition containingBean) which provides an example how unique names can be generated.
",spring-2.5.*,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-10-15 17:38:04.528,,,no_permission,,,,,,,,,,,,,113872,,,Thu Oct 15 17:38:04 UTC 2009,,,,,,0|i14ez3:,233889,,,,,,,,"15/Oct/09 17:38;dkulp;
I've resolved this issue by generating unique id's.

HOWEVER, it's probably also not an issue for 2.2.4.     For 2.2.4, the <jaxws:client> things don't actually use the globally registered .proxyFactory thing for anything.  (they are left there, but marked abstract, for compatibility sake if something is using them for configuration of some sort)      The actual bean definition for the jaxws:client is an instanceof  ""FactoryBean"" that returns the correct type (so autowire by type works) and as a result, the global .proxyFactory thing is unused.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Provider<DataSource>.invoke returning non-XML data causes error.,CXF-2453,12436905,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,angelini,angelini,30/Sep/09 10:29,12/Oct/09 20:45,14/Mar/19 02:29,02/Oct/09 19:55,2.2.2,2.2.3,,,,,,,,,,,,,2.2.4,,,,,,,,,,1,,,,"Provider<DataSource>.invoke returning non-XML data causes error.

This seems the same problem of issue CXF-752 but with a slightly different stack trace.

All it's working until cxf version 2.2.1.

From version 2.2.2 to the current snapshots i get this problem:

30-set-2009 12.28.15 org.apache.cxf.phase.PhaseInterceptorChain doIntercept
INFO: Interceptor has thrown exception, unwinding now
org.apache.cxf.interceptor.Fault: Could not parse the XML stream.
	at org.apache.cxf.databinding.source.XMLStreamDataWriter.write(XMLStreamDataWriter.java:85)
	at org.apache.cxf.databinding.source.XMLStreamDataWriter.write(XMLStreamDataWriter.java:49)
	at org.apache.cxf.databinding.source.XMLStreamDataWriter.write(XMLStreamDataWriter.java:45)
	at org.apache.cxf.interceptor.AbstractOutDatabindingInterceptor.writeParts(AbstractOutDatabindingInterceptor.java:114)
	at org.apache.cxf.interceptor.BareOutInterceptor.handleMessage(BareOutInterceptor.java:68)
	at org.apache.cxf.binding.xml.interceptor.XMLMessageOutInterceptor.handleMessage(XMLMessageOutInterceptor.java:74)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
	at org.apache.cxf.interceptor.OutgoingChainInterceptor.handleMessage(OutgoingChainInterceptor.java:74)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
	at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:89)
	at org.apache.cxf.transport.servlet.ServletDestination.invoke(ServletDestination.java:99)
	at org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:368)
	at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:183)
	at org.apache.cxf.transport.servlet.AbstractCXFServlet.invoke(AbstractCXFServlet.java:163)
	at org.apache.cxf.transport.servlet.AbstractCXFServlet.doGet(AbstractCXFServlet.java:145)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:707)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:820)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:530)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:426)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:118)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:495)
	at org.eclipse.jetty.server.session.SessionHandler.handle(SessionHandler.java:179)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:930)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:361)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:864)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:116)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:243)
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:126)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:112)
	at org.eclipse.jetty.server.Server.handle(Server.java:337)
	at org.eclipse.jetty.server.HttpConnection.handleRequest(HttpConnection.java:546)
	at org.eclipse.jetty.server.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:973)
	at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:530)
	at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:203)
	at org.eclipse.jetty.server.HttpConnection.handle(HttpConnection.java:399)
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:437)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:435)
	at java.lang.Thread.run(Thread.java:637)
Caused by: com.ctc.wstx.exc.WstxUnexpectedCharException: Unexpected character 'R' (code 82) in prolog; expected '<'
 at [row,col {unknown-source}]: [1,1]
	at com.ctc.wstx.sr.StreamScanner.throwUnexpectedChar(StreamScanner.java:648)
	at com.ctc.wstx.sr.BasicStreamReader.nextFromProlog(BasicStreamReader.java:2047)
	at com.ctc.wstx.sr.BasicStreamReader.next(BasicStreamReader.java:1069)
	at org.apache.cxf.staxutils.StaxUtils.copy(StaxUtils.java:417)
	at org.apache.cxf.staxutils.StaxUtils.copy(StaxUtils.java:379)
	at org.apache.cxf.databinding.source.XMLStreamDataWriter.write(XMLStreamDataWriter.java:58)
	... 37 more",,,,,,,,,,,,,,,CXF-2457,,30/Sep/09 10:32;angelini;cxf-test.zip;https://issues.apache.org/jira/secure/attachment/12420895/cxf-test.zip,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113871,,,Wed Sep 30 10:32:27 UTC 2009,,,,,,0|i16vrz:,248280,,,,,,,,"30/Sep/09 10:32;angelini;Here is a test case.

To reproduce the error just issue a ""mvn jetty:run"" and execute the simple test. The test runs with CXF 2.2.1 but does not run with versions greater than 2.2.1.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unable to call no-arg methods when using implicit headers - getting params [null],CXF-2451,12436769,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,agorelik,agorelik,28/Sep/09 17:58,08/Aug/12 20:49,14/Mar/19 02:29,29/Sep/09 02:56,2.2.3,,,,,,,,,,,,,,2.1.7,2.2.4,,,,,,,,,0,,,,"Hello,

I am a developer using CXF 2.2.3. I am currently running into an issue when trying to call a NO-ARG method getFoo() 
while using implicit headers defined ONLY at the wsdl:binding section. 
Each header has a SEPARATE wsdl:message defined and headers elements are NOT part of the getFooRequest wsdl:message. 
The generated code looks correct (using wsdl2java); however, invoking the method results in the error message in the following soap fault message:

         <faultstring>wrong number of arguments while invoking public com.test.services.v29.FooResponse com.test.services.v29.TestServiceImpl.getFoo() throws com.test.services.v29.TestException with params [null].</faultstring>

Here is the stack trace:

WARNING: Application has thrown exception, unwinding now
org.apache.cxf.interceptor.Fault: wrong number of arguments while invoking public com.test.services.v29.FooResponse com.test.services.v29.TestServiceImpl.getFoo() throws com.test.services.v29.TestException with params [null].
	at org.apache.cxf.service.invoker.AbstractInvoker.createFault(AbstractInvoker.java:152)
	at org.apache.cxf.jaxws.AbstractJAXWSMethodInvoker.createFault(AbstractJAXWSMethodInvoker.java:83)
	at org.apache.cxf.service.invoker.AbstractInvoker.invoke(AbstractInvoker.java:126)
	at org.apache.cxf.jaxws.JAXWSMethodInvoker.invoke(JAXWSMethodInvoker.java:55)
	at org.apache.cxf.service.invoker.AbstractInvoker.invoke(AbstractInvoker.java:68)
	at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:58)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
	at java.util.concurrent.FutureTask.run(FutureTask.java:138)
	at org.apache.cxf.workqueue.SynchronousExecutor.execute(SynchronousExecutor.java:37)
	at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:98)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
	at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:104)
	at org.apache.cxf.transport.servlet.ServletDestination.invoke(ServletDestination.java:99)
	at org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:452)
	at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:196)
	at org.apache.cxf.transport.servlet.AbstractCXFServlet.invoke(AbstractCXFServlet.java:220)
	at org.apache.cxf.transport.servlet.AbstractCXFServlet.doPost(AbstractCXFServlet.java:153)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:637)
....
Caused by: java.lang.IllegalArgumentException: wrong number of arguments
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.cxf.service.invoker.AbstractInvoker.performInvocation(AbstractInvoker.java:166)
	at org.apache.cxf.service.invoker.AbstractInvoker.invoke(AbstractInvoker.java:82)
	... 33 more


Request is:

<soapenv:Envelope xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:v29=""http://test.com/services/v29"">
   <soapenv:Header>
      <v29:testHeader1>1234</v29:testHeader1>
      <v29:testHeader2>abcd</v29:testHeader2>
   </soapenv:Header>
   <soapenv:Body>
      <v29:getFoo/>
   </soapenv:Body>
</soapenv:Envelope>


Generated code is:

    @WebResult(name = ""response"", targetNamespace = ""http://test/services/v29"")
    @RequestWrapper(localName = ""getFoo"", targetNamespace = ""http://test.com/services/v29"", className = ""com.test.services.v29.GetFoo"")
    @ResponseWrapper(localName = ""getFooResponse"", targetNamespace = ""http://test.com/services/v29"", className = ""com.test.services.v29.GetFooResponse"")
    @WebMethod(action = ""http://test.com/services/v29/messages/getFoo"")
    public com.test.services.v29.FooResponse getFo() throws TestException;


Here is there wsdl:binding for the operation

		<wsdl:operation name=""getFoo"">
			<soap:operation soapAction="""" />
			<wsdl:input name=""getFooRequest"">
				<soap:header part=""testHeader1"" message=""tns:testHeader1"" use=""literal"" />
				<soap:header part=""testHeader2"" message=""tns:testHeader2"" use=""literal"" />
				<soap:body use=""literal"" parts=""parameters"" />
			</wsdl:input>
			<wsdl:output name=""getFooResponse"">
				<soap:body use=""literal"" />
			</wsdl:output>
			<wsdl:fault name=""TestException"">
				<soap:fault name=""TestException"" use=""literal"" />
			</wsdl:fault>
		</wsdl:operation>

Here are the wsdl:message for the operation from above:

	<wsdl:message name=""testHeader1"">
		<wsdl:part element=""impl:testHeader1"" name=""testHeader1"" />
	</wsdl:message>

	<wsdl:message name=""testHeader2"">
		<wsdl:part element=""impl:testHeader2"" name=""testHeader2"" />
	</wsdl:message>


	...

	<wsdl:message name=""getFooRequest"">
		<wsdl:part element=""impl:getFoo"" name=""parameters"" />
	</wsdl:message>

	<wsdl:message name=""getFooResponse"">
		<wsdl:part element=""impl:getFooResponse"" name=""parameters"" />
	</wsdl:message>



If I remove the implicit headers, the generated code is the same and I am able to invoke the method with the same request. Please help. I hope I provided all the required information.
",ALL,,,,,,,,,,,,,,CXF-2498,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-09-28 20:16:10.952,,,no_permission,,,,,,,,,,,,,113870,,,Wed Aug 08 20:49:35 UTC 2012,,,,,,0|i0cuwv:,72952,,,,,,,,"28/Sep/09 20:16;dkulp;
Can you try generating the code with -exsh true flags sent to wsdl2java (the generated code should be different) and seeing if that works as a possible workaround?   may also help me figure out what is going on.

","28/Sep/09 23:38;agorelik;Hi Daniel,

Here is the generated code:

    @WebResult(name = ""response"", targetNamespace = ""http://test.com/services/v29"")
    @RequestWrapper(localName = ""getFoo"", targetNamespace = ""http://test.com/services/v29"", className = ""com.test.services.v29.FooRequest"")
    @ResponseWrapper(localName = ""getFooResponse"", targetNamespace = ""http://test.com/services/v29"", className = ""com.test.services.v29.GetFooResponse"")
    @WebMethod
    public com.test.services.v29.FooResponse getFoo(
        @WebParam(name = ""testHeader1"", targetNamespace = ""http://test.com/services/v29"", header = true)
        java.lang.String testHeader1,
        @WebParam(name = ""testHeader2"", targetNamespace = ""http://test.com/services/v29"", header = true)
        java.lang.String testHeader2
    ) throws TestException;


This works, but my goal is different. I'd like to have a no-arg method on the server side and I am doing a WSDL first approarch, so my implementation is implementing a no-arg service endpoint method. As far as on the client side, this would work and allow the clients to pass the header information to the server. 

Another experiment I've tried is I've left the implicit headers as before and made a dummy empty element request that I've stuck to the getFooRequest message (currently FooRequest is NO element, but I've tried with a dummy <request/> element - being the only argument to my method getFoo) so that my request is

<getFoo><request/></getFoo>.. - that works just fine with 1 argument [getFoo(FooRequest request)], however <getFoo/> without any arguments does not. 

I've treid to debug based on the stack:

at org.apache.cxf.service.invoker.AbstractInvoker.createFault(AbstractInvoker.java:152) 
at org.apache.cxf.jaxws.AbstractJAXWSMethodInvoker.createFault(AbstractJAXWSMethodInvoker.java:83) 
at org.apache.cxf.service.invoker.AbstractInvoker.invoke(AbstractInvoker.java:126) 
at org.apache.cxf.jaxws.JAXWSMethodInvoker.invoke(JAXWSMethodInvoker.java:55) 
at org.apache.cxf.service.invoker.AbstractInvoker.invoke(AbstractInvoker.java:68) 


but no luck.

It seems CXF does not support having no-arg methods and implicit headers?

","29/Sep/09 16:15;agorelik;Hi Daniel, Do you know when CXF 2.2.4 is officially going to be released? I was hoping to start using the fixes today. Thank you.",08/Aug/12 20:49;robbo;I believe I am running into this issue (or one that very closely matches the description) using CXF 2.6.1.  Has this not been addressed yet in that version?  I am using -exsh true to include the header as a parameter for my no-arg methods but it is still being omitted from the SOAP payload.  If I step into the WrapperClassOutIntercepter.handleMessage() (client-side) and force MessageContentList.hasValue() to return true for the header param it is correctly included in the SOAP payload.  My guess is that this has something to do with the MessagePartInfo.getIndex() (it is returning 1 even though it is the first item in the message parts list) but I'm not yet familiar enough with CXF to know if I'm barking up the wrong tree.,,,,,,,,,,,,,,,,,,,,,,,,,,,
WSDL2java uses system encoding when generating java classes,CXF-2450,12436741,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,hamulka,hamulka,28/Sep/09 08:13,17/Jul/12 13:42,14/Mar/19 02:29,03/May/12 16:51,2.1.3,,,,,,,,,,,,,,2.5.4,2.6.1,,,Tooling,,,,,,5,,,,"When using wsdl2java java classes are created in default encoding(for instance MacRoman). But when we afterwards try to compile these classes in UTF-8 special chars in java comments resolves in compliations error

[INFO] Compilation failure

/url/to/file/SomeFile.java:[31,18] unmappable character for encoding UTF-8


We would like somehow to specify which encoding wsdl2java should use when generating java classes. We can't seem to find this property.",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,Blocked on External,,,2009-10-13 08:10:32.492,,,no_permission,,,,,,,,,,,,,113869,,,Tue Jul 17 13:42:51 UTC 2012,,,,,,0|i089iv:,46142,,,,,,,,"13/Oct/09 08:10;ndeloof;This issue is related to JAXB xjc :

com.sun.codemodel.writer.CodeWriter#openSource  uses the OutputStreamWriter encoding to set the CharsetEncoder to use :

{{{
OutputStreamWriter bw = new OutputStreamWriter(openBinary(pkg,fileName));
(...)
CharsetEncoder encoder = EncoderFactory.createEncoder(bw.getEncoding());
}}}

It SHOULD instead build a CharsetEncoder based on the user-requested encoding (may fallback to default platform encoding) and THEN create the OutputStreamWriter with this encoder...

{{{
CharsetEncoder encoder = EncoderFactory.createEncoder( getUserDefinedEncoding() );
OutputStreamWriter bw = new OutputStreamWriter(openBinary(pkg,fileName), encoder);
}}}


I just can't report this suggestion to JAXB as dev.java.net is unreachable for some days :'(","13/Oct/09 13:45;dkulp;
Nicolas - thanks for the analysis of the JAXB stuff.   dev.java.net is a pain recently.   :-(

Mads and Nicolas: do you know if the stuff that CXF generates (the SEI interface, service object, Exceptions and such) are also affected or is it just the JAXB things?

",17/Oct/09 13:04;ndeloof;@see https://jaxb.dev.java.net/issues/show_bug.cgi?id=701,"21/Oct/09 13:42;ndeloof;This also affect CXF generated classes as they can derive method / parameter names from the WSDL (operation and message), potentialy including some non ASCII characters

The maven convention is to set encoding to ${project.build.sourceEncoding}, most plugins (including compiler) allready follow this best practice

","05/Mar/10 08:50;ndeloof;A workaround is to isolate wsdl2java code generation in a dedicated maven module and to configure the compiler plugin to use OS dependant encoding (that is not recommended in other cases) :

{code}
<plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <encoding>${file.encoding}</encoding>
        </configuration>
</plugin>
{code}","02/May/12 10:27;maxvar;So that http://java.net/jira/browse/JAXB-499 was resolved adding ""encoding"" option what's the future of this issue?","02/May/12 21:10;dkulp;
Just committed a fix for this to trunk.   I'd definitely appreciate some folks testing out tonights 2.6.1-SNAPSHOT builds (or checkout trunk and build yourself) and seeing if it will work for you.   

Note that this REQUIRES JAXB 2.2.5 or newer.   ","15/May/12 08:07;pbaye;An other possible workaroud is to configure *cxf-codegen-plugin* with the fork option in order to specify the ""english"" language. So that, the javadoc is generated in english (ie without accented characters).

{code:xml}
<plugin>
  <groupId>org.apache.cxf</groupId>
  <artifactId>cxf-codegen-plugin</artifactId>
  <version>2.6.0</version>
  <executions>
    <execution>
      <id>io</id>
      <phase>generate-sources</phase>
      <configuration>
        <fork>always</fork>
        <additionalJvmArgs>-Duser.language=en</additionalJvmArgs>
        <sourceRoot>${project.build.directory}/generated-sources/cxf/interface/yyyy/file</sourceRoot>
        <wsdlOptions>
          <wsdlOption>
            <wsdl>${basedir}/src/main/resources/wsdl/interface/yyyy/file/my.wsdl</wsdl>
            <extraargs>
              <extraarg>-p</extraarg>
              <extraarg>com.xxxx.io.yyyy.file</extraarg>
            </extraargs>
          </wsdlOption>
          ...
        </wsdlOptions>
      </configuration>
      <goals>
        <goal>wsdl2java</goal>
      </goals>
    </execution>
  </executions>
</plugin>
{code} ","17/Jul/12 13:42;dashorst;Another way to solve this issue (at least for us):

export MAVEN_OPTS=-Dfile.encoding=UTF8

",,,,,,,,,,,,,,,,,,,,,,
IllegalArgumentException wrong number of arguments using CXF 2.2.3 in runtime test,CXF-2448,12436593,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,stefgasp,stefgasp,25/Sep/09 12:38,12/Oct/09 20:45,14/Mar/19 02:29,28/Sep/09 15:58,2.2.3,,,,,,,,,,,,,,2.2.4,,,,JAX-WS Runtime,,,,,,0,,,,"Using ""soap_header.wsdl"" of 2.2.3 release sample (apache-cxf-2.2.3\samples\soap_header\), i''ve generate java code using WSDLToJava tool.

*****************************
* * *  This is my Client * * *
*****************************

public final class HeaderTester_SoapPort_Client {

    private static final QName SERVICE_NAME = new QName(""http://apache.org/headers"", ""HeaderService"");

    private HeaderTester_SoapPort_Client() {
    }

    public static void main(String args[]) throws Exception {
        URL wsdlURL = HeaderService.WSDL_LOCATION;
        if (args.length > 0) { 
            File wsdlFile = new File(args[0]);
            try {
                if (wsdlFile.exists()) {
                    wsdlURL = wsdlFile.toURI().toURL();
                } else {
                    wsdlURL = new URL(args[0]);
                }
            } catch (MalformedURLException e) {
                e.printStackTrace();
            }
        }
      
        HeaderService ss = new HeaderService(wsdlURL, SERVICE_NAME);
        HeaderTester port = ss.getSoapPort();  
        
        {
        System.out.println(""Invoking inoutHeader..."");
        com.test.soapHeader.jaxb20.InoutHeader _inoutHeader_me = new InoutHeader();
        _inoutHeader_me.setRequestType(""inoutheader request type"");
        
        com.test.soapHeader.jaxb20.SOAPHeaderData _inoutHeader_headerInfoVal = new SOAPHeaderData();
        _inoutHeader_headerInfoVal.setMessage(""inoutHeader headerInfoVal message"");
        _inoutHeader_headerInfoVal.setOriginator(""inoutHeader headerInfoVal originator"");
        
        javax.xml.ws.Holder<com.test.soapHeader.jaxb20.SOAPHeaderData> _inoutHeader_headerInfo = new javax.xml.ws.Holder<com.test.soapHeader.jaxb20.SOAPHeaderData>(_inoutHeader_headerInfoVal);
        
        
        com.test.soapHeader.jaxb20.InoutHeaderResponse _inoutHeader__return = 
port.inoutHeader(_inoutHeader_me, _inoutHeader_headerInfo);
        
        
        System.out.println("" InoutHeader result = "" + _inoutHeader__return.getResponseType());
        System.out.println("" InoutHeader inoutHeader_headerInfo = "" + _inoutHeader_headerInfo.value.getMessage() +
        		"" - "" + _inoutHeader_headerInfo.value.getOriginator());

        }
}

*****************************
* * *  This is my Server * * *
*****************************

public class HeaderTester_SoapPort_Server{

    protected HeaderTester_SoapPort_Server() throws Exception {
        System.out.println(""Starting Server"");
        Object implementor = new HeaderTesterProvider();  // generated implementor  -->  Object implementor = new HeaderTesterImpl();
        String address = ""http://localhost:9000/headers"";
        Endpoint.publish(address, implementor);
    }
    
    public static void main(String args[]) throws Exception { 
        new HeaderTester_SoapPort_Server();
        System.out.println(""Server ready...""); 
        
        Thread.sleep(10 * 5 * 60 * 1000); 
        System.out.println(""Server exiting"");
        System.exit(0);
    }
}

As you can see i use an inmplementor different from the generated one:

*******************************
* * *  This is my Provider * * *
*******************************

@WebServiceProvider(
	serviceName = ""HeaderService"",
        portName = ""SoapPort"",
        targetNamespace = ""http://apache.org/headers"",
        wsdlLocation = ""file:/D:/data/runtime_wks_4.6_2/IAExcTest/cxfWsdl/soap_header.wsdl""
		)
@ServiceMode(value = Mode.MESSAGE)
@InInterceptors(interceptors = {""org.apache.cxf.interceptor.LoggingInInterceptor""})
@OutInterceptors(interceptors = {""org.apache.cxf.interceptor.LoggingOutInterceptor""})

public class HeaderTesterProvider implements Provider<SOAPMessage> {

	public SOAPMessage invoke(SOAPMessage arg0) {
		try {
			arg0.writeTo(System.out);
		} catch (SOAPException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null; 
	}
}

When i run client and server main i get these exceptions:

***********************
* * *  Server LOG * * *
***********************

Starting Server
25-set-2009 12.18.16 org.springframework.context.support.AbstractApplicationContext prepareRefresh
INFO: Refreshing org.apache.cxf.bus.spring.BusApplicationContext@1d95492: display name [org.apache.cxf.bus.spring.BusApplicationContext@1d95492]; startup date [Fri Sep 25 12:18:16 CEST 2009]; root of context hierarchy
25-set-2009 12.18.17 org.apache.cxf.bus.spring.BusApplicationContext getConfigResources
INFO: No cxf.xml configuration file detected, relying on defaults.
25-set-2009 12.18.17 org.springframework.beans.factory.support.DefaultListableBeanFactory registerBeanDefinition
INFO: Overriding bean definition for bean 'org.apache.cxf.transport.http.policy.HTTPClientAssertionBuilder': replacing [Generic bean: class [org.apache.cxf.transport.http.policy.HTTPClientAssertionBuilder]; scope=singleton; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in URL [jar:file:/D:/libraries/cxf/2.2.3/apache-cxf-2.2.3/lib/cxf-2.2.3.jar!/META-INF/cxf/cxf-extension-http.fixml]] with [Generic bean: class [org.apache.cxf.transport.http.policy.HTTPClientAssertionBuilder]; scope=singleton; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in URL [jar:file:/D:/libraries/cxf/2.2.3/apache-cxf-2.2.3/lib/cxf-2.2.3.jar!/META-INF/cxf/cxf-extension-http.fixml]]
25-set-2009 12.18.17 org.springframework.beans.factory.support.DefaultListableBeanFactory registerBeanDefinition
INFO: Overriding bean definition for bean 'org.apache.cxf.transport.http.policy.HTTPServerAssertionBuilder': replacing [Generic bean: class [org.apache.cxf.transport.http.policy.HTTPServerAssertionBuilder]; scope=singleton; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in URL [jar:file:/D:/libraries/cxf/2.2.3/apache-cxf-2.2.3/lib/cxf-2.2.3.jar!/META-INF/cxf/cxf-extension-http.fixml]] with [Generic bean: class [org.apache.cxf.transport.http.policy.HTTPServerAssertionBuilder]; scope=singleton; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in URL [jar:file:/D:/libraries/cxf/2.2.3/apache-cxf-2.2.3/lib/cxf-2.2.3.jar!/META-INF/cxf/cxf-extension-http.fixml]]
25-set-2009 12.18.17 org.springframework.beans.factory.support.DefaultListableBeanFactory registerBeanDefinition
INFO: Overriding bean definition for bean 'org.apache.cxf.transport.http.policy.NoOpPolicyInterceptorProvider': replacing [Generic bean: class [org.apache.cxf.transport.http.policy.NoOpPolicyInterceptorProvider]; scope=singleton; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in URL [jar:file:/D:/libraries/cxf/2.2.3/apache-cxf-2.2.3/lib/cxf-2.2.3.jar!/META-INF/cxf/cxf-extension-http.fixml]] with [Generic bean: class [org.apache.cxf.transport.http.policy.NoOpPolicyInterceptorProvider]; scope=singleton; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in URL [jar:file:/D:/libraries/cxf/2.2.3/apache-cxf-2.2.3/lib/cxf-2.2.3.jar!/META-INF/cxf/cxf-extension-http.fixml]]
25-set-2009 12.18.17 org.springframework.beans.factory.support.DefaultListableBeanFactory registerBeanDefinition
INFO: Overriding bean definition for bean 'org.apache.cxf.transport.http.ClientOnlyHTTPTransportFactory': replacing [Generic bean: class [org.apache.cxf.transport.http.ClientOnlyHTTPTransportFactory]; scope=singleton; abstract=false; lazyInit=true; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in URL [jar:file:/D:/libraries/cxf/2.2.3/apache-cxf-2.2.3/lib/cxf-2.2.3.jar!/META-INF/cxf/cxf-extension-http.fixml]] with [Generic bean: class [org.apache.cxf.transport.http.ClientOnlyHTTPTransportFactory]; scope=singleton; abstract=false; lazyInit=true; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in URL [jar:file:/D:/libraries/cxf/2.2.3/apache-cxf-2.2.3/lib/cxf-2.2.3.jar!/META-INF/cxf/cxf-extension-http.fixml]]
25-set-2009 12.18.17 org.springframework.context.support.AbstractApplicationContext obtainFreshBeanFactory
INFO: Bean factory for application context [org.apache.cxf.bus.spring.BusApplicationContext@1d95492]: org.springframework.beans.factory.support.DefaultListableBeanFactory@366573
25-set-2009 12.18.17 org.springframework.beans.factory.support.DefaultListableBeanFactory preInstantiateSingletons
INFO: Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@366573: defining beans [cxf,org.apache.cxf.bus.spring.BusApplicationListener,org.apache.cxf.bus.spring.BusWiringBeanFactoryPostProcessor,org.apache.cxf.bus.spring.Jsr250BeanPostProcessor,org.apache.cxf.bus.spring.BusExtensionPostProcessor,org.apache.cxf.resource.ResourceManager,org.apache.cxf.configuration.Configurer,org.apache.cxf.binding.BindingFactoryManager,org.apache.cxf.transport.DestinationFactoryManager,org.apache.cxf.transport.ConduitInitiatorManager,org.apache.cxf.wsdl.WSDLManager,org.apache.cxf.phase.PhaseManager,org.apache.cxf.workqueue.WorkQueueManager,org.apache.cxf.buslifecycle.BusLifeCycleManager,org.apache.cxf.endpoint.ServerRegistry,org.apache.cxf.endpoint.ServerLifeCycleManager,org.apache.cxf.endpoint.ClientLifeCycleManager,org.apache.cxf.transports.http.QueryHandlerRegistry,org.apache.cxf.endpoint.EndpointResolverRegistry,org.apache.cxf.headers.HeaderManager,org.apache.cxf.catalog.OASISCatalogManager,org.apache.cxf.endpoint.ServiceContractResolverRegistry,org.apache.cxf.binding.corba.CorbaBindingFactory,org.apache.cxf.binding.corba.wsdl.WSDLExtensionRegister#0,org.apache.cxf.jaxws.context.WebServiceContextResourceResolver,org.apache.cxf.jaxws.context.WebServiceContextImpl,org.apache.cxf.binding.soap.SoapBindingFactory,org.apache.cxf.binding.soap.SoapTransportFactory,org.apache.cxf.binding.soap.customEditorConfigurer,org.apache.cxf.binding.xml.XMLBindingFactory,org.apache.cxf.ws.addressing.policy.AddressingAssertionBuilder,org.apache.cxf.ws.addressing.policy.AddressingPolicyInterceptorProvider,org.apache.cxf.ws.addressing.policy.UsingAddressingAssertionBuilder,org.apache.cxf.javascript.JavascriptQueryHandlerRegistry,org.apache.cxf.transport.local.LocalTransportFactory,org.apache.cxf.transport.http.policy.HTTPClientAssertionBuilder,org.apache.cxf.transport.http.policy.HTTPServerAssertionBuilder,org.apache.cxf.transport.http.policy.NoOpPolicyInterceptorProvider,org.apache.cxf.transport.http.ClientOnlyHTTPTransportFactory,org.apache.cxf.management.InstrumentationManager,org.apache.cxf.transport.http_jetty.JettyHTTPTransportFactory,org.apache.cxf.transport.jms.JMSTransportFactory,org.apache.cxf.binding.object.ObjectBindingFactory,org.apache.cxf.binding.http.HttpBindingFactory,org.apache.cxf.jaxrs.JAXRSBindingFactory,org.apache.cxf.ws.security.policy.WSSecurityPolicyLoader,org.apache.cxf.ws.policy.AssertionBuilderRegistry,org.apache.cxf.ws.policy.PolicyInterceptorProviderRegistry,org.apache.cxf.ws.policy.attachment.external.DomainExpressionBuilderRegistry,org.apache.cxf.ws.policy.attachment.external.EndpointReferenceDomainExpressionBuilder,org.apache.cxf.ws.policy.PolicyBuilder,org.apache.cxf.ws.policy.PolicyEngine,org.apache.cxf.ws.policy.attachment.wsdl11.Wsdl11AttachmentPolicyProvider,org.apache.cxf.ws.policy.attachment.ServiceModelPolicyProvider,org.apache.cxf.ws.policy.mtom.MTOMAssertionBuilder,org.apache.cxf.ws.policy.mtom.MTOMPolicyInterceptorProvider,org.apache.cxf.ws.rm.RMManager,org.apache.cxf.ws.rm.policy.RMPolicyInterceptorProvider,org.apache.cxf.ws.rm.RMAssertionBuilder]; root of factory hierarchy
25-set-2009 12.18.19 org.apache.cxf.service.factory.ReflectionServiceFactoryBean buildServiceFromWSDL
INFO: Creating Service {http://apache.org/headers}HeaderService from WSDL: file:/D:/data/runtime_wks_4.6_2/IAExcTest/cxfWsdl/soap_header.wsdl
25-set-2009 12.18.19 org.apache.cxf.endpoint.ServerImpl initDestination
INFO: Setting the server's publish address to be http://localhost:9000/headers
25-set-2009 12.18.19 org.mortbay.log.Slf4jLog info
INFO: Logging to org.slf4j.impl.JDK14LoggerAdapter(org.mortbay.log) via org.mortbay.log.Slf4jLog
25-set-2009 12.18.20 org.mortbay.log.Slf4jLog info
INFO: jetty-6.1.19
25-set-2009 12.18.20 org.mortbay.log.Slf4jLog info
INFO: Started SelectChannelConnector@0.0.0.0:9000
Server ready...
25-set-2009 12.18.29 org.apache.cxf.interceptor.LoggingInInterceptor logging
INFO: Inbound Message
----------------------------
ID: 1
Address: /headers
Encoding: UTF-8
Content-Type: text/xml; charset=UTF-8
Headers: {Content-Length=[452], Host=[localhost:9000], User-Agent=[Apache CXF 2.2.3], connection=[keep-alive], SOAPAction=[""""], Pragma=[no-cache], Content-Type=[text/xml; charset=UTF-8], content-type=[text/xml; charset=UTF-8], Cache-Control=[no-cache], Accept=[*/*]}
Payload: <soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/""><soap:Header><ns2:SOAPHeaderInfo xmlns:ns2=""http://apache.org/headers""><originator>inoutHeader headerInfoVal originator</originator><message>inoutHeader headerInfoVal message</message></ns2:SOAPHeaderInfo></soap:Header><soap:Body><ns2:inoutHeader xmlns:ns2=""http://apache.org/headers""><requestType>inoutheader request type</requestType></ns2:inoutHeader></soap:Body></soap:Envelope>
--------------------------------------
25-set-2009 12.18.30 org.apache.cxf.phase.PhaseInterceptorChain doIntercept
AVVERTENZA: Application has thrown exception, unwinding now
org.apache.cxf.interceptor.Fault: wrong number of arguments while invoking public abstract java.lang.Object javax.xml.ws.Provider.invoke(java.lang.Object) with params [com.sun.xml.messaging.saaj.soap.ver1_1.Message1_1Impl@1b0620c, javax.xml.transform.dom.DOMSource@f507d2].
	at org.apache.cxf.service.invoker.AbstractInvoker.createFault(AbstractInvoker.java:152)
	at org.apache.cxf.jaxws.AbstractJAXWSMethodInvoker.createFault(AbstractJAXWSMethodInvoker.java:83)
	at org.apache.cxf.service.invoker.AbstractInvoker.invoke(AbstractInvoker.java:126)
	at org.apache.cxf.jaxws.JAXWSMethodInvoker.invoke(JAXWSMethodInvoker.java:55)
	at org.apache.cxf.service.invoker.AbstractInvoker.invoke(AbstractInvoker.java:68)
	at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:58)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:417)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:269)
	at java.util.concurrent.FutureTask.run(FutureTask.java:123)
	at org.apache.cxf.workqueue.SynchronousExecutor.execute(SynchronousExecutor.java:37)
	at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:98)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
	at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:104)
	at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.serviceRequest(JettyHTTPDestination.java:302)
	at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.doService(JettyHTTPDestination.java:266)
	at org.apache.cxf.transport.http_jetty.JettyHTTPHandler.handle(JettyHTTPHandler.java:70)
	at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765)
	at org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:230)
	at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)
	at org.mortbay.jetty.Server.handle(Server.java:326)
	at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:534)
	at org.mortbay.jetty.HttpConnection$RequestHandler.content(HttpConnection.java:879)
	at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:747)
	at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:218)
	at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404)
	at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:409)
	at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:520)
Caused by: java.lang.IllegalArgumentException: wrong number of arguments
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at org.apache.cxf.service.invoker.AbstractInvoker.performInvocation(AbstractInvoker.java:166)
	at org.apache.cxf.service.invoker.AbstractInvoker.invoke(AbstractInvoker.java:82)
	... 24 more

**********************
* * * Client LOG * * *
**********************

25-set-2009 12.18.25 org.springframework.context.support.AbstractApplicationContext prepareRefresh
INFO: Refreshing org.apache.cxf.bus.spring.BusApplicationContext@18f1d7e: display name [org.apache.cxf.bus.spring.BusApplicationContext@18f1d7e]; startup date [Fri Sep 25 12:18:25 CEST 2009]; root of context hierarchy
25-set-2009 12.18.26 org.apache.cxf.bus.spring.BusApplicationContext getConfigResources
INFO: No cxf.xml configuration file detected, relying on defaults.
25-set-2009 12.18.26 org.springframework.beans.factory.support.DefaultListableBeanFactory registerBeanDefinition
INFO: Overriding bean definition for bean 'org.apache.cxf.transport.http.policy.HTTPClientAssertionBuilder': replacing [Generic bean: class [org.apache.cxf.transport.http.policy.HTTPClientAssertionBuilder]; scope=singleton; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in URL [jar:file:/D:/libraries/cxf/2.2.3/apache-cxf-2.2.3/lib/cxf-2.2.3.jar!/META-INF/cxf/cxf-extension-http.fixml]] with [Generic bean: class [org.apache.cxf.transport.http.policy.HTTPClientAssertionBuilder]; scope=singleton; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in URL [jar:file:/D:/libraries/cxf/2.2.3/apache-cxf-2.2.3/lib/cxf-2.2.3.jar!/META-INF/cxf/cxf-extension-http.fixml]]
25-set-2009 12.18.26 org.springframework.beans.factory.support.DefaultListableBeanFactory registerBeanDefinition
INFO: Overriding bean definition for bean 'org.apache.cxf.transport.http.policy.HTTPServerAssertionBuilder': replacing [Generic bean: class [org.apache.cxf.transport.http.policy.HTTPServerAssertionBuilder]; scope=singleton; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in URL [jar:file:/D:/libraries/cxf/2.2.3/apache-cxf-2.2.3/lib/cxf-2.2.3.jar!/META-INF/cxf/cxf-extension-http.fixml]] with [Generic bean: class [org.apache.cxf.transport.http.policy.HTTPServerAssertionBuilder]; scope=singleton; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in URL [jar:file:/D:/libraries/cxf/2.2.3/apache-cxf-2.2.3/lib/cxf-2.2.3.jar!/META-INF/cxf/cxf-extension-http.fixml]]
25-set-2009 12.18.26 org.springframework.beans.factory.support.DefaultListableBeanFactory registerBeanDefinition
INFO: Overriding bean definition for bean 'org.apache.cxf.transport.http.policy.NoOpPolicyInterceptorProvider': replacing [Generic bean: class [org.apache.cxf.transport.http.policy.NoOpPolicyInterceptorProvider]; scope=singleton; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in URL [jar:file:/D:/libraries/cxf/2.2.3/apache-cxf-2.2.3/lib/cxf-2.2.3.jar!/META-INF/cxf/cxf-extension-http.fixml]] with [Generic bean: class [org.apache.cxf.transport.http.policy.NoOpPolicyInterceptorProvider]; scope=singleton; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in URL [jar:file:/D:/libraries/cxf/2.2.3/apache-cxf-2.2.3/lib/cxf-2.2.3.jar!/META-INF/cxf/cxf-extension-http.fixml]]
25-set-2009 12.18.26 org.springframework.beans.factory.support.DefaultListableBeanFactory registerBeanDefinition
INFO: Overriding bean definition for bean 'org.apache.cxf.transport.http.ClientOnlyHTTPTransportFactory': replacing [Generic bean: class [org.apache.cxf.transport.http.ClientOnlyHTTPTransportFactory]; scope=singleton; abstract=false; lazyInit=true; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in URL [jar:file:/D:/libraries/cxf/2.2.3/apache-cxf-2.2.3/lib/cxf-2.2.3.jar!/META-INF/cxf/cxf-extension-http.fixml]] with [Generic bean: class [org.apache.cxf.transport.http.ClientOnlyHTTPTransportFactory]; scope=singleton; abstract=false; lazyInit=true; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in URL [jar:file:/D:/libraries/cxf/2.2.3/apache-cxf-2.2.3/lib/cxf-2.2.3.jar!/META-INF/cxf/cxf-extension-http.fixml]]
25-set-2009 12.18.26 org.springframework.context.support.AbstractApplicationContext obtainFreshBeanFactory
INFO: Bean factory for application context [org.apache.cxf.bus.spring.BusApplicationContext@18f1d7e]: org.springframework.beans.factory.support.DefaultListableBeanFactory@4cd580
25-set-2009 12.18.26 org.springframework.beans.factory.support.DefaultListableBeanFactory preInstantiateSingletons
INFO: Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@4cd580: defining beans [cxf,org.apache.cxf.bus.spring.BusApplicationListener,org.apache.cxf.bus.spring.BusWiringBeanFactoryPostProcessor,org.apache.cxf.bus.spring.Jsr250BeanPostProcessor,org.apache.cxf.bus.spring.BusExtensionPostProcessor,org.apache.cxf.resource.ResourceManager,org.apache.cxf.configuration.Configurer,org.apache.cxf.binding.BindingFactoryManager,org.apache.cxf.transport.DestinationFactoryManager,org.apache.cxf.transport.ConduitInitiatorManager,org.apache.cxf.wsdl.WSDLManager,org.apache.cxf.phase.PhaseManager,org.apache.cxf.workqueue.WorkQueueManager,org.apache.cxf.buslifecycle.BusLifeCycleManager,org.apache.cxf.endpoint.ServerRegistry,org.apache.cxf.endpoint.ServerLifeCycleManager,org.apache.cxf.endpoint.ClientLifeCycleManager,org.apache.cxf.transports.http.QueryHandlerRegistry,org.apache.cxf.endpoint.EndpointResolverRegistry,org.apache.cxf.headers.HeaderManager,org.apache.cxf.catalog.OASISCatalogManager,org.apache.cxf.endpoint.ServiceContractResolverRegistry,org.apache.cxf.binding.corba.CorbaBindingFactory,org.apache.cxf.binding.corba.wsdl.WSDLExtensionRegister#0,org.apache.cxf.jaxws.context.WebServiceContextResourceResolver,org.apache.cxf.jaxws.context.WebServiceContextImpl,org.apache.cxf.binding.soap.SoapBindingFactory,org.apache.cxf.binding.soap.SoapTransportFactory,org.apache.cxf.binding.soap.customEditorConfigurer,org.apache.cxf.binding.xml.XMLBindingFactory,org.apache.cxf.ws.addressing.policy.AddressingAssertionBuilder,org.apache.cxf.ws.addressing.policy.AddressingPolicyInterceptorProvider,org.apache.cxf.ws.addressing.policy.UsingAddressingAssertionBuilder,org.apache.cxf.javascript.JavascriptQueryHandlerRegistry,org.apache.cxf.transport.local.LocalTransportFactory,org.apache.cxf.transport.http.policy.HTTPClientAssertionBuilder,org.apache.cxf.transport.http.policy.HTTPServerAssertionBuilder,org.apache.cxf.transport.http.policy.NoOpPolicyInterceptorProvider,org.apache.cxf.transport.http.ClientOnlyHTTPTransportFactory,org.apache.cxf.management.InstrumentationManager,org.apache.cxf.transport.http_jetty.JettyHTTPTransportFactory,org.apache.cxf.transport.jms.JMSTransportFactory,org.apache.cxf.binding.object.ObjectBindingFactory,org.apache.cxf.binding.http.HttpBindingFactory,org.apache.cxf.jaxrs.JAXRSBindingFactory,org.apache.cxf.ws.security.policy.WSSecurityPolicyLoader,org.apache.cxf.ws.policy.AssertionBuilderRegistry,org.apache.cxf.ws.policy.PolicyInterceptorProviderRegistry,org.apache.cxf.ws.policy.attachment.external.DomainExpressionBuilderRegistry,org.apache.cxf.ws.policy.attachment.external.EndpointReferenceDomainExpressionBuilder,org.apache.cxf.ws.policy.PolicyBuilder,org.apache.cxf.ws.policy.PolicyEngine,org.apache.cxf.ws.policy.attachment.wsdl11.Wsdl11AttachmentPolicyProvider,org.apache.cxf.ws.policy.attachment.ServiceModelPolicyProvider,org.apache.cxf.ws.policy.mtom.MTOMAssertionBuilder,org.apache.cxf.ws.policy.mtom.MTOMPolicyInterceptorProvider,org.apache.cxf.ws.rm.RMManager,org.apache.cxf.ws.rm.policy.RMPolicyInterceptorProvider,org.apache.cxf.ws.rm.RMAssertionBuilder]; root of factory hierarchy
25-set-2009 12.18.28 org.apache.cxf.service.factory.ReflectionServiceFactoryBean buildServiceFromWSDL
INFO: Creating Service {http://apache.org/headers}HeaderService from WSDL: file:/D:/data/runtime_wks_4.6_2/IAExcTest/cxfWsdl/soap_header.wsdl
Invoking inoutHeader...
Exception in thread ""main"" javax.xml.ws.soap.SOAPFaultException: wrong number of arguments while invoking public abstract java.lang.Object javax.xml.ws.Provider.invoke(java.lang.Object) with params [com.sun.xml.messaging.saaj.soap.ver1_1.Message1_1Impl@1b0620c, javax.xml.transform.dom.DOMSource@f507d2].
	at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:143)
	at $Proxy39.inoutHeader(Unknown Source)
	at com.test.soapHeader.jaxb20.HeaderTester_SoapPort_Client.main(HeaderTester_SoapPort_Client.java:66)
Caused by: org.apache.cxf.binding.soap.SoapFault: wrong number of arguments while invoking public abstract java.lang.Object javax.xml.ws.Provider.invoke(java.lang.Object) with params [com.sun.xml.messaging.saaj.soap.ver1_1.Message1_1Impl@1b0620c, javax.xml.transform.dom.DOMSource@f507d2].
	at org.apache.cxf.binding.soap.interceptor.Soap11FaultInInterceptor.unmarshalFault(Soap11FaultInInterceptor.java:75)
	at org.apache.cxf.binding.soap.interceptor.Soap11FaultInInterceptor.handleMessage(Soap11FaultInInterceptor.java:46)
	at org.apache.cxf.binding.soap.interceptor.Soap11FaultInInterceptor.handleMessage(Soap11FaultInInterceptor.java:35)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
	at org.apache.cxf.interceptor.AbstractFaultChainInitiatorObserver.onMessage(AbstractFaultChainInitiatorObserver.java:96)
	at org.apache.cxf.binding.soap.interceptor.CheckFaultInterceptor.handleMessage(CheckFaultInterceptor.java:69)
	at org.apache.cxf.binding.soap.interceptor.CheckFaultInterceptor.handleMessage(CheckFaultInterceptor.java:34)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
	at org.apache.cxf.endpoint.ClientImpl.onMessage(ClientImpl.java:658)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleResponseInternal(HTTPConduit.java:2139)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleResponse(HTTPConduit.java:2022)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.close(HTTPConduit.java:1947)
	at org.apache.cxf.transport.AbstractConduit.close(AbstractConduit.java:66)
	at org.apache.cxf.transport.http.HTTPConduit.close(HTTPConduit.java:632)
	at org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor.handleMessage(MessageSenderInterceptor.java:62)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:472)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:302)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:254)
	at org.apache.cxf.frontend.ClientProxy.invokeSync(ClientProxy.java:73)
	at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:123)
	... 2 more

I'm sure that this example works using CXF 2.2.1 libraries, maybe some missing libraries???
Thanks,

  Stefano",Eclipse Java project with  Apache CXF 2.2.3 libraries,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113867,,,2009-09-25 12:38:13.0,,,,,,0|i143jb:,232036,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Invalid paths used in CXF for the xml files results in failures in java 6,CXF-2447,12436576,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Critical,Fixed,dkulp,azeckoski,azeckoski,25/Sep/09 10:03,29/Sep/09 08:59,14/Mar/19 02:29,26/Sep/09 00:43,2.3,,,,,,,,,,,,,,2.1.7,2.2.4,,,Configuration,Core,,,,,0,,,,"CXF 2.3.0-SNAPSHOT is failing to parse xml files in java 6. Things work fine for java 5. The error we see on startup of any bundles which use CXF is:

[FelixStartLevel] WARN org.apache.cxf.bus.spring.SpringBusFactory - Initial attempt to crate application context was unsuccessful.
org.springframework.beans.factory.BeanDefinitionStoreException: Unexpected exception parsing XML document from class path resource [META-INF/cxf/cxf.xml]; nested exception is java.lang.RuntimeException: Couldn't parse stream.
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:420)
	at org.apache.cxf.bus.spring.ControlledValidationXmlBeanDefinitionReader.doLoadBeanDefinitions(ControlledValidationXmlBeanDefinitionReader.java:109)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:342)
	at org.apache.cxf.bus.spring.ControlledValidationXmlBeanDefinitionReader.loadBeanDefinitions(ControlledValidationXmlBeanDefinitionReader.java:131)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:310)
	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:143)
	at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:109)
	at org.apache.cxf.bus.spring.BusApplicationContext.loadBeanDefinitions(BusApplicationContext.java:263)
	at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:123)
	at org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:422)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:352)
	at org.apache.cxf.bus.spring.BusApplicationContext.<init>(BusApplicationContext.java:91)
	at org.apache.cxf.bus.spring.SpringBusFactory.createApplicationContext(SpringBusFactory.java:102)
	at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:93)
	at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:86)
	at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:64)
	at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:53)
	at org.apache.cxf.BusFactory.getDefaultBus(BusFactory.java:69)
	at org.apache.cxf.BusFactory.getThreadDefaultBus(BusFactory.java:106)
	at org.apache.cxf.BusFactory.getThreadDefaultBus(BusFactory.java:97)
	at org.apache.cxf.endpoint.AbstractEndpointFactory.getBus(AbstractEndpointFactory.java:73)
	at org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory.initializeServiceFactory(AbstractWSDLBasedEndpointFactory.java:231)
	at org.apache.cxf.frontend.ServerFactoryBean.initializeServiceFactory(ServerFactoryBean.java:164)
	at org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory.createEndpoint(AbstractWSDLBasedEndpointFactory.java:100)
	at org.apache.cxf.frontend.ServerFactoryBean.create(ServerFactoryBean.java:118)
	at org.apache.cxf.dosgi.dsw.handlers.HttpServiceConfigurationTypeHandler.createServer(HttpServiceConfigurationTypeHandler.java:124)
	at org.apache.cxf.dosgi.dsw.hooks.ServiceHookUtils.createServer(ServiceHookUtils.java:86)
	at org.apache.cxf.dosgi.dsw.hooks.CxfPublishHook.createServer(CxfPublishHook.java:106)
	at org.apache.cxf.dosgi.dsw.hooks.CxfPublishHook.publishEndpoint(CxfPublishHook.java:80)
	at org.apache.cxf.dosgi.dsw.Activator.checkExistingServices(Activator.java:151)
	at org.apache.cxf.dosgi.dsw.Activator.start(Activator.java:81)
	at org.apache.felix.framework.util.SecureAction.startActivator(SecureAction.java:667)
	at org.apache.felix.framework.Felix.activateBundle(Felix.java:1699)
	at org.apache.felix.framework.Felix.startBundle(Felix.java:1621)
	at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1076)
	at org.apache.felix.framework.StartLevelImpl.run(StartLevelImpl.java:264)
	at java.lang.Thread.run(Thread.java:637)
Caused by: java.lang.RuntimeException: Couldn't parse stream.
	at org.apache.cxf.staxutils.StaxUtils.createXMLStreamReader(StaxUtils.java:945)
	at org.apache.cxf.staxutils.StaxUtils.copy(StaxUtils.java:357)
	at org.apache.cxf.bus.spring.TunedDocumentLoader.loadDocument(TunedDocumentLoader.java:113)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:396)
	... 36 more
Caused by: javax.xml.stream.XMLStreamException: java.net.MalformedURLException
	at com.sun.org.apache.xerces.internal.impl.XMLStreamReaderImpl.setInputSource(XMLStreamReaderImpl.java:217)
	at com.sun.org.apache.xerces.internal.impl.XMLStreamReaderImpl.<init>(XMLStreamReaderImpl.java:189)
	at com.sun.xml.internal.stream.XMLInputFactoryImpl.createXMLStreamReader(XMLInputFactoryImpl.java:145)
	at org.apache.cxf.staxutils.StaxUtils.createXMLStreamReader(StaxUtils.java:940)
	... 39 more
Caused by: java.net.MalformedURLException
	at java.net.URL.<init>(URL.java:601)
	at java.net.URL.<init>(URL.java:464)
	at java.net.URL.<init>(URL.java:413)
	at com.sun.org.apache.xerces.internal.impl.XMLEntityManager.setupCurrentEntity(XMLEntityManager.java:650)
	at com.sun.org.apache.xerces.internal.impl.XMLEntityManager.startEntity(XMLEntityManager.java:1315)
	at com.sun.org.apache.xerces.internal.impl.XMLEntityManager.startDocumentEntity(XMLEntityManager.java:1267)
	at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.setInputSource(XMLDocumentScannerImpl.java:281)
	at com.sun.org.apache.xerces.internal.impl.XMLStreamReaderImpl.setInputSource(XMLStreamReaderImpl.java:204)
	... 42 more
","docking-hg-48-121-dhcp:felix azeckoski$ uname -a
Darwin docking-hg-48-121-dhcp.ethz.ch 9.8.0 Darwin Kernel Version 9.8.0: Wed Jul 15 16:55:01 PDT 2009; root:xnu-1228.15.4~1/RELEASE_I386 i386
docking-hg-48-121-dhcp:felix azeckoski$ java -version
java version ""1.6.0_15""
Java(TM) SE Runtime Environment (build 1.6.0_15-b03-226)
Java HotSpot(TM) 64-Bit Server VM (build 14.1-b02-92, mixed mode)
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-09-25 19:36:52.418,,,no_permission,,Moderate,,,,,,,,,,,113866,,,Tue Sep 29 08:59:45 UTC 2009,,,,,,0|i0cux3:,72953,,,,,,,,"25/Sep/09 10:06;azeckoski;According to the debugger this fails because the path is not a valid URL: META-INF/cxf/cxf.xml has no protocol
","25/Sep/09 19:36;dkulp;
I'm not even sure how to go about trying to reproduce this as it seems to work OK for the simple things I've tried.    It may be sue to my osgi stuff (servicemix) using the SMX stax-api bundle and woodstox.  Not really sure.    Basically, we just pass the InputSource object that Spring gives us along to the parsers.   Thus, it's spring that is setting up the URL in the InputSource, not us, so I'm not sure what can be done.   

In anycase, is there any way you could debug into BusApplicationContext.getConfigResources()?    There is a block that starts with  
""if (includeDefaults) {"" 
that is interesting.   At the end of that block, the resources list should have a list of resources.  I'd be interested in knowing what the classes are for those Resources (ClassPathResource, UrlResource, InputStreamResource, etc....) as well as what the values of those fields are.

","25/Sep/09 21:10;dkulp;
OK.   Managed to reproduce this and came up with a workaround.   Running tests now.
","28/Sep/09 12:22;azeckoski;Is this updated in the 2.3.0 snapshot? I am still getting the failures after downloading fresh copies this morning.
I am trying a source build to see if things start working.","28/Sep/09 13:55;azeckoski;OK, I rebuilt cxf from source but it does not build the bundle which is what we are using. Is there a way to build the bundle from the cxf trunk source?
I am still getting the failure with the 2.3.0-SNAPSHOT from the snapshots server.
","28/Sep/09 13:59;dkulp;
The SNAPSHOT SHOULD be OK as Hudson does have it marked as deployed.  Bizzarre.  

In anycase, if you run:

mvn -Peverything,fastinstall

top level, it will end up building everything, including the bundles.    
 
","29/Sep/09 08:59;azeckoski;Confirmed that things are working with the SNAPSHOT I built myself from trunk.

When I downloaded a new copy this morning via maven it looks like the jars are the same and things are working now so I think it is updated on the SNAPSHOT server as well.
",29/Sep/09 08:59;azeckoski;Everything looks good to me. Thanks for fixing this so quickly!,,,,,,,,,,,,,,,,,,,,,,,
can't pass mulitple -xjc wsdlOption in cxf-codegen-plugin,CXF-2445,12436504,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,dkulp,warrenc9,warrenc9,24/Sep/09 10:56,04/Dec/09 22:34,14/Mar/19 02:29,29/Oct/09 17:29,2.2.3,,,,,,,,,,,,,,2.2.5,,,,Tooling,,,,,,0,,,,"you have to specify multiple options to avoid getting a duplicate option error message

<wsdlOptions>
 <wsdlOption>
<wsdl>${basedir}/src/main/resources/ShipmentService.wsdl</wsdl>
<bindingFiles>
<bindingFile>${basedir}/src/main/resources/bindings-global.xml</bindingFile>
</bindingFiles>
<extraargs>
<arg>-xjc-Xxew</arg>
</extraargs>
</wsdlOption>
<wsdlOption>
<extraargs>
<arg>-xjc-mark-generated</arg>
</extraargs>
</wsdlOption>
</wsdlOptions>
",,,,,,,,,,,,,,,,,29/Oct/09 05:36;warrenc9;xjcargs.diff;https://issues.apache.org/jira/secure/attachment/12423543/xjcargs.diff,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2009-09-25 01:19:50.805,,,no_permission,,,,,,,,,,,,,113864,,,Thu Oct 29 17:29:08 UTC 2009,,,,,,0|i14em7:,233831,,,,,,,,"25/Sep/09 01:19;dkulp;
This SHOULD be via a comma separated list to -xjc param.   As in:

-xjc-mark-generated,-Xxew

Can you verify if that works?
","28/Sep/09 11:04;warrenc9;Yes I tested this and confirm that it works.  However its highly non intuitive, as even before grokking the plugin code I was trying hacks like -xjc""-mark-generated -Xxew"".  

Maybe this needs to be clarify in the source/docs. 

Now I can test episode files and you can close this issue off. 

thx","28/Sep/09 14:04;dkulp;
The docs (http://cxf.apache.org/docs/wsdl-to-java.html) say   ""Specifies a comma separated list of arguments that are passed directly to the XJC processor when using the JAXB databinding. A list of available XJC plugins can be obtained using -xjc-X.""

Anyway, since it works, I'll resolve this.",29/Oct/09 05:38;warrenc9;Existing handling of this is lame. please have look at this patch.,"29/Oct/09 17:29;dkulp;
I update the command line tool to actually allow:

-xjc-Xts  -xjc-Xblah .....

and changed your patch to use that.",,,,,,,,,,,,,,,,,,,,,,,,,,
org.apache.cxf.service.model.InterfaceInfo attributes are not passed to the WSDL PortType during WSDL generation.,CXF-2444,12436245,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,bmargulies,andrewharrison,andrewharrison,21/Sep/09 19:37,12/Oct/09 20:45,14/Mar/19 02:29,22/Sep/09 23:12,,,,,,,,,,,,,,,2.1.7,2.2.4,,,Core,,,,,,0,,,,"When adding an attribute to an org.apache.cxf.service.model.InterfaceInfo, this should be reflected in the WSDL PortType when the WSDL is generated from the ServiceInfo object. The problem lies in org.apache.cxf.wsdl11.ServiceWSDLBuilder.buildPortType(InterfaceInfo intf, final Definition def);

This method should call:

addExtensibilityAttributes(portType, intf.getExtensionAttributes());

which would add the attributes.

The same is issue is not apparent when going from WSDL to a ServiceInfo object.",,,,,,,,,,,,,,,,,21/Sep/09 22:16;andrewharrison;patch.txt;https://issues.apache.org/jira/secure/attachment/12420233/patch.txt,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2009-09-21 21:58:46.151,,,no_permission,,,,,,,,,,,,,113863,,,Tue Sep 22 23:12:27 UTC 2009,,,,,,0|i0cuxb:,72954,,,,,,,,21/Sep/09 21:58;bmargulies;Care to make a patch?,22/Sep/09 23:12;bmargulies;Thank you very much for the patch. r817895.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Dynamic client cannot be used if WSDL requires basic authentication,CXF-2443,12436208,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,deki,deki,21/Sep/09 15:43,02/May/13 02:29,14/Mar/19 02:29,26/Oct/09 19:56,2.2.3,2.2.4,,,,,,,,,,,,,2.2.11,2.3,,,JAX-WS Runtime,,,,,,0,,,,"The following snippet fails, if wsdlUri requires basic authentication:

JaxWsDynamicClientFactory dcf = JaxWsDynamicClientFactory.newInstance();
Client client = dcf.createClient(wsdlUri);

org.apache.cxf.service.factory.ServiceConstructionException: Could not resolve URL ""XXXX"".
	at org.apache.cxf.endpoint.dynamic.DynamicClientFactory.composeUrl(DynamicClientFactory.java:606)
	at org.apache.cxf.endpoint.dynamic.DynamicClientFactory.createClient(DynamicClientFactory.java:251)
	at org.apache.cxf.endpoint.dynamic.DynamicClientFactory.createClient(DynamicClientFactory.java:196)
	at org.apache.cxf.endpoint.dynamic.DynamicClientFactory.createClient(DynamicClientFactory.java:189)
	at org.apache.cxf.endpoint.dynamic.DynamicClientFactory.createClient(DynamicClientFactory.java:144)
	at com.atanion.activation.target.executor.CxfSoapExecutor.execute(CxfSoapExecutor.java:63)
	at com.atanion.activation.target.executor.CxfSoapExecutor.main(CxfSoapExecutor.java:279)
Caused by: java.io.IOException: Server returned HTTP response code: 401 for URL: XXXX
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1313)
	at org.apache.cxf.resource.URIResolver.tryFileSystem(URIResolver.java:161)
	at org.apache.cxf.resource.URIResolver.<init>(URIResolver.java:90)
	at org.apache.cxf.endpoint.dynamic.DynamicClientFactory.composeUrl(DynamicClientFactory.java:598)
	... 6 more",,,,,,,,,,,,CXF-1480,,,,CXF-2497,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-09-29 03:06:09.278,,,no_permission,,,,,,,,,,,,,113862,,,Mon Oct 26 19:56:53 UTC 2009,,,,,,0|i0v07b:,179006,,,,,,,,"27/Sep/09 11:36;deki;org.apache.axis.wsdl.gen.Parser supports username/ password so this issue blocks a migration of one of our projects that is currently using Axis 1.4.

Even if I create another createClient method with username and password in DynamicClientFactory and pass them to new constructors in ClientImpl und WSDLServiceFactory, I end up in javax.wsdl.xml.WSDLReader.

It seems the only way to solve this is to use implementation specific methods: http://rreddy.blogspot.com/2008/03/how-to-use-wsdlreader-for-getting-wsdl.html

Any other ideas?","29/Sep/09 03:06;dkulp;
We pretty much just use the HTTPUrlConnection for wsdl retrieval stuff.   Thus, you MAY be able to try a URL lke:

http://username:password@blah.com/test?wsdl
or similar.

Alternatively, you would need to create a Spring config file with an ""http:conduit element with an id of the URL and set properties in there for the username/password and such.  Then create a bus with that config file.  ","29/Sep/09 14:34;deki;username:password@url also results in 401.

Created a cxf.xml with:
<http:conduit name=""{targetNamespace}Portname.http-conduit"">
	<http:authorization>
		<sec:UserName>username</sec:UserName>
		<sec:Password>password</sec:Password>
	</http:authorization>
</http:conduit>

Doesn't work either. What do you mean with id? If I set the bean id to the URL, I get a xml error:
cvc-attribute.3: The value 'http://myurl' of attribute 'id' on element 'http:conduit' is not valid with respect to its type, 'ID'.",05/Oct/09 17:08;deki;I will try to set the id using a PropertyPlaceholder...,"22/Oct/09 10:17;deki;Exception changed with CXF 2.2.4:

<beans xmlns=""http://www.springframework.org/schema/beans""
      xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xmlns:cxf=""http://cxf.apache.org/core""
      xmlns:http=""http://cxf.apache.org/transports/http/configuration""
      xmlns:sec=""http://cxf.apache.org/configuration/security""
      xsi:schemaLocation=""http://cxf.apache.org/core http://cxf.apache.org/schemas/core.xsd
  http://cxf.apache.org/transports/http/configuration http://cxf.apache.org/schemas/configuration/http-conf.xsd
  http://cxf.apache.org/configuration/security http://cxf.apache.org/schemas/configuration/security.xsd
  http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"">

	<http:conduit id=""http://url/.*"">
		<http:authorization>
			<sec:UserName>user</sec:UserName>
			<sec:Password>pass</sec:Password>
		</http:authorization>
	</http:conduit>
</beans>

org.apache.cxf.bus.spring.SpringBusFactory createApplicationContext
WARNUNG: Initial attempt to crate application context was unsuccessful.
org.springframework.beans.factory.xml.XmlBeanDefinitionStoreException: Line 11 in XML document from class path resource [cxf.xml] is invalid; nested exception is org.xml.sax.SAXParseException: cvc-datatype-valid.1.2.1: 'http://url/.*' is not a valid value for 'NCName'.
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:404)
	at org.apache.cxf.bus.spring.ControlledValidationXmlBeanDefinitionReader.doLoadBeanDefinitions(ControlledValidationXmlBeanDefinitionReader.java:109)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:342)
	at org.apache.cxf.bus.spring.ControlledValidationXmlBeanDefinitionReader.loadBeanDefinitions(ControlledValidationXmlBeanDefinitionReader.java:131)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:310)
	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:143)
	at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:109)
	at org.apache.cxf.bus.spring.BusApplicationContext.loadBeanDefinitions(BusApplicationContext.java:263)
	at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:123)
	at org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:422)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:352)
	at org.apache.cxf.bus.spring.BusApplicationContext.<init>(BusApplicationContext.java:91)
	at org.apache.cxf.bus.spring.SpringBusFactory.createApplicationContext(SpringBusFactory.java:102)
	at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:93)
	at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:86)
	at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:64)
	at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:53)
	at org.apache.cxf.BusFactory.getDefaultBus(BusFactory.java:69)
	at org.apache.cxf.BusFactory.getThreadDefaultBus(BusFactory.java:106)
	at org.apache.cxf.BusFactory.getThreadDefaultBus(BusFactory.java:97)
	at org.apache.cxf.jaxws.endpoint.dynamic.JaxWsDynamicClientFactory.newInstance(JaxWsDynamicClientFactory.java:71)
	at com.atanion.activation.target.executor.CxfSoapExecutor.execute(CxfSoapExecutor.java:53)
	at com.atanion.activation.target.executor.CxfSoapExecutor.main(CxfSoapExecutor.java:110)
Caused by: org.xml.sax.SAXParseException: cvc-datatype-valid.1.2.1: 'http://url/.*' is not a valid value for 'NCName'.
	at org.apache.xerces.util.ErrorHandlerWrapper.createSAXParseException(Unknown Source)
	at org.apache.xerces.util.ErrorHandlerWrapper.error(Unknown Source)
	at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)
	at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)
	at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)
	at org.apache.xerces.impl.xs.XMLSchemaValidator$XSIErrorReporter.reportError(Unknown Source)
	at org.apache.xerces.impl.xs.XMLSchemaValidator.reportSchemaError(Unknown Source)
	at org.apache.xerces.impl.xs.XMLSchemaValidator.processOneAttribute(Unknown Source)
	at org.apache.xerces.impl.xs.XMLSchemaValidator.processAttributes(Unknown Source)
	at org.apache.xerces.impl.xs.XMLSchemaValidator.handleStartElement(Unknown Source)
	at org.apache.xerces.impl.xs.XMLSchemaValidator.startElement(Unknown Source)
	at org.apache.xerces.impl.XMLNSDocumentScannerImpl.scanStartElement(Unknown Source)
	at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl$FragmentContentDispatcher.dispatch(Unknown Source)
	at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl.scanDocument(Unknown Source)
	at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
	at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
	at org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
	at org.apache.xerces.parsers.DOMParser.parse(Unknown Source)
	at org.apache.xerces.jaxp.DocumentBuilderImpl.parse(Unknown Source)
	at org.springframework.beans.factory.xml.DefaultDocumentLoader.loadDocument(DefaultDocumentLoader.java:75)
	at org.apache.cxf.bus.spring.TunedDocumentLoader.loadDocument(TunedDocumentLoader.java:116)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:396)
	... 22 more

A PropertyPlaceholder doesn't help.","22/Oct/09 11:34;dkulp;

Use <http:conduit name=""http://url/.*""> 

not id=
","23/Oct/09 10:02;deki;Ok then the example in your comment in CXF-1480 is wrong.

Anyhow it doesn't work:
Caused by: java.io.IOException: Server returned HTTP response code: 401 for URL: http://.......
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1196)
	at org.apache.cxf.resource.URIResolver.tryFileSystem(URIResolver.java:161)
	at org.apache.cxf.resource.URIResolver.<init>(URIResolver.java:90)
	at org.apache.cxf.endpoint.dynamic.DynamicClientFactory.composeUrl(DynamicClientFactory.java:603)
	... 22 more","26/Oct/09 19:56;dkulp;With CXF-2497 resolved, this should now be resolved.   WSDL retrieval is now through the conduits for http as well as https so the configs should be picked up for the http cases as well.
",,,,,,,,,,,,,,,,,,,,,,,
"fail to create a service model from class when: BARE parameter style, XmlBeans data binding, XmlBeans' source is WSDL file",CXF-2442,12436073,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Blocker,Fixed,dkulp,mklimiuk,mklimiuk,18/Sep/09 15:57,12/Oct/09 20:45,14/Mar/19 02:29,06/Oct/09 17:56,2.2.3,,,,,,,,,,,,,,2.1.7,2.2.4,,,OtherDatabindings,,,,,,0,,,,"SCENARIO:

1. Given WSDL with data types defined inside (imports are not used).
2. Generate service interface and xml beans.
3. Create a client proxy using ClientProxyFactoryBean:
       - use BARE parameter style;
       - use XmlBeans data binding;
       - do not specify WSDL location.


ACTUAL RESULT:

Exception in thread ""main"" org.apache.cxf.service.factory.ServiceConstructionException: Service class org.example.MyService method queryMethod part {http://example.org/services/myservice}arg0 cannot be mapped to schema. Check for use of a JAX-WS-specific type without the JAX-WS service factory bean.
    at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.createBareMessage(ReflectionServiceFactoryBean.java:1090)
    at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.buildServiceFromClass(ReflectionServiceFactoryBean.java:392)
    at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.initializeServiceModel(ReflectionServiceFactoryBean.java:444)
    at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.create(ReflectionServiceFactoryBean.java:195)
    at org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory.createEndpoint(AbstractWSDLBasedEndpointFactory.java:100)
    at org.apache.cxf.frontend.ClientFactoryBean.create(ClientFactoryBean.java:52)
    at org.apache.cxf.frontend.ClientProxyFactoryBean.create(ClientProxyFactoryBean.java:102)
    at org.example.services.MyServiceClient.main(MyServiceClient.java:52)


EXPECTED RESULT:

Successful creation of a client proxy.


ANALYSIS:

When the service model is build from the class the XmlBeansSchemaInitializer.mapClass() method is executed for web service data types.

The method contains the following condition:

            if (sourceName.endsWith(""wsdl"")) {
                return;
            }

Our source is WSDL with data types defined inside (imports are not used), so the MessagePartInfo attributes are not fully populated due to this condition. These attributes are missed and ReflectionServiceFactoryBean.createBareMessage() throws the exception.

I assume the condition should be removed and the logic should be updated to take into account definitions of data types contained in WSDL.",,,,,,,,,,,,,,,,,06/Oct/09 11:27;mklimiuk;XmlBeansSchemaInitializer.java;https://issues.apache.org/jira/secure/attachment/12421418/XmlBeansSchemaInitializer.java,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,113861,,,Tue Oct 06 11:27:19 UTC 2009,,,,,,0|i0cuxj:,72955,,,,,,,,"06/Oct/09 11:27;mklimiuk;Please find the fixed XmlBeansSchemaInitializer.java attached.

Not sure that this is a correct solution of the problem, but it worked for us.

That will be great if someone have a look and comment.

The original source was taken from the CXF 2.2.3 sources:

rt\databinding\xmlbeans\src\main\java\org\apache\cxf\xmlbeans\XmlBeansSchemaInitializer.java ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
http-conf.xsd causes validation error in cxf.xml,CXF-2441,12435991,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,yan.yonghe@gmail.com,yan.yonghe@gmail.com,17/Sep/09 20:41,12/Oct/09 20:45,14/Mar/19 02:29,30/Sep/09 18:40,2.2.3,,,,,,,,,,,,,,2.2.4,,,,Resources,,,,,,0,,,,"Eclipse reports the following cxf.xml is not valid:

<beans xmlns=""http://www.springframework.org/schema/beans""
	xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:jaxws=""http://cxf.apache.org/jaxws""
	xmlns:http=""http://cxf.apache.org/transports/http/configuration""
	xsi:schemaLocation=""
		http://www.springframework.org/schema/beans	http://www.springframework.org/schema/beans/spring-beans.xsd
 		http://cxf.apache.org/jaxws	http://cxf.apache.org/schemas/jaxws.xsd
 		http://cxf.apache.org/transports/http/configuration http://cxf.apache.org/schemas/configuration/http-conf.xsd"">

	<import resource=""classpath:META-INF/cxf/cxf.xml"" />
	<import resource=""classpath:META-INF/cxf/cxf-extension-soap.xml"" />
	<import resource=""classpath:META-INF/cxf/cxf-servlet.xml"" />
	
	<http:conduit></http:conduit>

</beans>

The error is caused by the http-conf.xsd since it imports spring-beans-2.0.xsd. If http-conf.xsd just import spring-bean.xsd, the bug can be fixed and the cxf.xml becomes valid.","Spring-2.5.6, cxf-2.2.3",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,Novice,,,,,,,,,,,113860,,,2009-09-17 20:41:39.0,,,,,,0|i0v1ov:,179247,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
GZIP and MTOM attachments does not work on client,CXF-2440,12435924,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,vitaly_litvak,vitaly_litvak,17/Sep/09 09:19,21/Sep/09 15:52,14/Mar/19 02:29,19/Sep/09 12:07,2.1.6,2.2.3,,,,,,,,,,,,,2.1.7,2.2.4,,,Transports,,,,,,0,,,,"Service is set up to use GZIP compression by adding GZIPFeature to ClientProxyFactoryBean (or JaxWsProxyFactoryBean) and ServerFactoryBean (or JaxWsServerFactoryBean). It provides possibility to download MTOM attachments. On client side files can not be read and following exception is thrown:

java.io.IOException: stream is closed
	at sun.net.www.http.ChunkedInputStream.ensureOpen(ChunkedInputStream.java:151)
	at sun.net.www.http.ChunkedInputStream.read(ChunkedInputStream.java:646)
	at java.io.FilterInputStream.read(FilterInputStream.java:116)
	at sun.net.www.protocol.http.HttpURLConnection$HttpInputStream.read(HttpURLConnection.java:2446)
	at java.util.zip.InflaterInputStream.fill(InflaterInputStream.java:221)
	at java.util.zip.InflaterInputStream.read(InflaterInputStream.java:141)
	at java.util.zip.GZIPInputStream.read(GZIPInputStream.java:92)
	at java.io.FilterInputStream.read(FilterInputStream.java:116)
	at java.io.PushbackInputStream.read(PushbackInputStream.java:169)
	at org.apache.cxf.attachment.MimeBodyPartInputStream.read(MimeBodyPartInputStream.java:74)
	at java.io.InputStream.read(InputStream.java:85)
	at org.apache.cxf.attachment.DelegatingInputStream.read(DelegatingInputStream.java:82)
	at Main.runTests(Main.java:107)
	at Main.main(Main.java:120)

On the server side everything is fine. It reproduces for both 2.2.3 and 2.1.6 versions of CXF. Please see attached test case.",,,,,,,,,,,,,,,,,17/Sep/09 09:20;vitaly_litvak;cxf-test.zip;https://issues.apache.org/jira/secure/attachment/12419860/cxf-test.zip,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2009-09-21 15:52:32.797,,,no_permission,,Unknown,,,,,,,,,,,113859,,,Mon Sep 21 15:52:32 UTC 2009,,,,,,0|i0cuxr:,72956,,,,,,,,17/Sep/09 09:20;vitaly_litvak;That's the source code and attachment file for reproducing this issue.,21/Sep/09 15:45;vitaly_litvak;It seems like everything is fine in 2.2.4-snapshot version. Should I close this issue?,"21/Sep/09 15:52;dkulp;
Thanks for verifying that it works (and major thanks for the testcase)!",,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE creating dynamic client,CXF-2438,12435724,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Blocker,Fixed,,walterim,walterim,15/Sep/09 16:09,11/Oct/10 14:44,14/Mar/19 02:29,18/Sep/09 20:50,2.3,,,,,,,,,,,,,,2.3,,,,,,,,,,0,,,,"The following code generates the NPE:

            DynamicClientFactory dcf = DynamicClientFactory.newInstance();
            Client client = dcf.createClient(new URL(""http://hidroweb.ana.gov.br/fcthservices/FCTH.asmx?WSDL""),new QName(""http://www.ana.gov.br"",""FCTHService""), new QName(""http://www.ana.gov.br"",""FCTHServiceSoap""));","Ubuntu Linux 9.04 
java version ""1.6.0_16""
Java(TM) SE Runtime Environment (build 1.6.0_16-b01)
Java HotSpot(TM) 64-Bit Server VM (build 14.2-b01, mixed mode)
",,,,,,,,,,,,,,,,15/Sep/09 16:11;walterim;wsdl.xml;https://issues.apache.org/jira/secure/attachment/12419646/wsdl.xml,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2009-09-18 20:31:31.155,,,no_permission,,,,,,,,,,,,,113857,,,Mon Jun 21 07:58:11 UTC 2010,,,,,,0|i0uxnr:,178594,,,,,,,,15/Sep/09 16:11;walterim;The wsdl that generates the NPE.,"18/Sep/09 20:31;bmargulies;The WSDL has a part named Body that has neither an element nor a type.

The first fix is to emit the following:

org.apache.cxf.wsdl11.WSDLRuntimeException: Part Body defined with no element and no type.

","18/Sep/09 20:49;bmargulies;The wsdl validator says:

/Users/benson/asf/cxf  /opt/apache-cxf-2.1.3/bin/wsdlvalidator cxf2438.wsdl 
WSDLValidator Error : 
 Summary:  Failures: 2, Warnings: 0

 <<< ERROR! 
The part does not have a type defined. Every part must specify a type from some type system. The type can be specified using the built in element or type attributes or may be specified using an extension attribute.
The part does not have a type defined. Every part must specify a type from some type system. The type can be specified using the built in element or type attributes or may be specified using an extension attribute.





","18/Sep/09 20:50;bmargulies;The wsdl was invalid, but the diagnoses was lame. Diagnosis repaired.
","19/Sep/09 00:12;walterim;I'm not an expert, but I took a look at http://schemas.xmlsoap.org/wsdl/ and it looks like the ""part"" element does not require the ""type"":
...
<xs:complexType name=""tMessage"">
<xs:complexContent>
<xs:extension base=""wsdl:tExtensibleDocumented"">
<xs:sequence>
<xs:element name=""part"" type=""wsdl:tPart"" minOccurs=""0"" maxOccurs=""unbounded""/>
</xs:sequence>
<xs:attribute name=""name"" type=""xs:NCName"" use=""required""/>
</xs:extension>
</xs:complexContent>
</xs:complexType>
<xs:complexType name=""tPart"">
<xs:complexContent>
<xs:extension base=""wsdl:tExtensibleAttributesDocumented"">
<xs:attribute name=""name"" type=""xs:NCName"" use=""required""/>
<xs:attribute name=""element"" type=""xs:QName"" use=""optional""/>
<xs:attribute name=""type"" type=""xs:QName"" use=""optional""/>
</xs:extension>
</xs:complexContent>
</xs:complexType>
...
did I miss something ?
Thanks in advance,","19/Sep/09 01:24;bmargulies;According to Dan Kulp:

I would say that it invalid, at least for soap.   The WSI-BP specifically
says:

R2204  A document-literal binding in a DESCRIPTION MUST refer, in each of its
soapbind:body element(s), only to wsdl:part element(s) that have been defined
using the element attribute.

and

R2203  An rpc-literal binding in a DESCRIPTION MUST refer, in its
soapbind:body element(s), only to wsdl:part element(s) that have been defined
using the type attribute.

In your case, it's not defined by type or element, and thus is not valid for
rpc/lit or doc/lit.

Thus, I would say throwing an exception saying this is invalid is an
appropriate thing to do.

Dan","21/Jun/10 07:58;bchen;hello all,

R2204 and R2203 only for rpc/lit or doc/lit.
but in this case,  the part named Body doesn't belong to rpc/lit or doc/lit,  it belongs to HTTP-GET binding I think.
Thus, I think this is valid.
...
<wsdl:message name=""EstacoesHttpGetIn"">
    <wsdl:part name=""strDataInicial"" type=""s:string"" />
    <wsdl:part name=""strDataFinal"" type=""s:string"" />
  </wsdl:message>
  <wsdl:message name=""EstacoesHttpGetOut"">
    <wsdl:part name=""Body"" />
  </wsdl:message>

 <wsdl:portType name=""FCTHServiceHttpGet"">
    <wsdl:operation name=""Estacoes"">
      ..
      <wsdl:input message=""tns:EstacoesHttpGetIn"" />
      <wsdl:output message=""tns:EstacoesHttpGetOut"" />
    </wsdl:operation>
  </wsdl:portType>

<wsdl:binding name=""FCTHServiceHttpGet"" type=""tns:FCTHServiceHttpGet"">
    <http:binding verb=""GET"" />
    <wsdl:operation name=""Estacoes"">
      <http:operation location=""/Estacoes"" />
      <wsdl:input>
        <http:urlEncoded />
      </wsdl:input>
      <wsdl:output>
        <mime:content part=""Body"" type=""text/xml"" />
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
...
did I miss something?
Thanks in advance,",,,,,,,,,,,,,,,,,,,,,,,,
Host not set CXFJettySslSocketConnector,CXF-2437,12435622,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,dgsoft,dgsoft,14/Sep/09 15:43,04/Dec/09 22:34,14/Mar/19 02:29,15/Oct/09 17:42,2.2.2,,,,,,,,,,,,,,2.1.8,2.2.5,,,Configuration,,,,,,0,,,,"Host is not set on org.apache.cxf.transport.https_jetty.JettySslConnectorFactory so org.mortbay.jetty.bio.SocketConnector tries to use all available ip addresses. This causes problems on multi-homed systems. In our environment ip2:8443 is used by our JBoss server. We want to run a CXF-Endpoint within activemq 5.2 (camel-cxf-2.0-M3) on ip1:8443. The result is:  ""java.net.BindException: Address already in use"".

Config sample:

	<cxf:cxfEndpoint id=""cxfEndpoint""
		serviceClass=""xxxxx""
		wsdlURL=""abc.wsdl""
		serviceName=""abc:ABC""
		endpointName=""abc:ABC_Port""
		address=""https://server:8443/abc/service"">
	</cxf:cxfEndpoint>
","Suse Linux, ActiveMQ 5.2, Camel 2.0-M3",,,,,,,,,,,,,,,,15/Oct/09 01:43;brent@rcfile.org;cxf-jetty-host-support.diff;https://issues.apache.org/jira/secure/attachment/12422171/cxf-jetty-host-support.diff,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2009-10-15 01:51:08.976,,,no_permission,,,,,,,,,,,,,113856,,,Thu Oct 15 17:42:46 UTC 2009,,,,,,0|i14e0f:,233733,,,,,,,,"21/Sep/09 09:36;dgsoft;I missed to attach cxf.xml contents:

<beans 
	xmlns=""http://www.springframework.org/schema/beans""
	xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
	xmlns:http=""http://cxf.apache.org/transports/http/configuration""
	xmlns:httpj=""http://cxf.apache.org/transports/http-jetty/configuration""
	xmlns:sec=""http://cxf.apache.org/configuration/security""
	xsi:schemaLocation=""
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
		http://cxf.apache.org/transports/http/configuration http://cxf.apache.org/schemas/configuration/http-conf.xsd
		http://cxf.apache.org/transports/http-jetty/configuration http://cxf.apache.org/schemas/configuration/http-jetty.xsd
		http://cxf.apache.org/configuration/security http://cxf.apache.org/schemas/configuration/security.xsd"">
		
	<http:destination name=""{http://www.server.com/abc}ABC_Port.http-destination"" />
	
	<httpj:engine-factory bus=""cxf"">
		<httpj:engine port=""8443"">
			<httpj:tlsServerParameters>
				<sec:keyManagers keyPassword=""pwd"">
					<sec:keyStore file=""${activemq-home}/conf/server-keystore.jks"" password=""pwd"" type=""JKS"" />
				</sec:keyManagers>
				<sec:trustManagers>
					<sec:keyStore file=""${activemq-home}/conf/trust-keystore.jks"" password=""pwd"" type=""JKS""/>
				</sec:trustManagers>
				<sec:clientAuthentication required=""true"" want=""true""/>
			</httpj:tlsServerParameters>
		</httpj:engine>
	</httpj:engine-factory>
</beans>","15/Oct/09 01:51;dbv;
Patch to add support for host attribute on jetty engine....If host is not supplied, the previous behaviour is retained (listen on all local addresses).

                <httpj:engine host=""10.0.20.10"" port=""19001"">
                        <httpj:tlsServerParametersRef id=""secure"" />
                        <httpj:sessionSupport>true</httpj:sessionSupport>
                </httpj:engine>

This patch is against 2.2.3, but it applies cleanly to 2.2.4. I've only tested in the context of my very limited use of cxf... ","15/Oct/09 17:42;dkulp;
Applied patch with modifications.   Thanks!

Basically, I left the method on the interface that just takes the port for compatibility sake.   For the impls, just forwarded that into the new method with ""null"" for host.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,
SEI should be able to implements java.rmi.Remote,CXF-2436,12435397,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,raffaelespazzoli,raffaelespazzoli,11/Sep/09 07:21,12/Oct/09 20:45,14/Mar/19 02:29,02/Oct/09 20:13,2.2.3,,,,,,,,,,,,,,2.1.7,2.2.4,,,Tooling,,,,,,0,,,,"If a SEI implementation class implements java.rmi.Remote the java2wsdl tool complain with the following error: ""JAXWS SEI can not implement
java.rmi.Remote interface."" The error is raised by JaxwsServiceBuilder class. 
Apparently there is no reason for this check, the jsr181 specification says:
""The service endpoint interface MAY extend java.rmi.Remote either directly or indirectly, but is not REQUIRED to do so.""
This check is active only for the WSDL generation phase, ie a service implementation class implementing java.rmi.Remote can be successfully activated as a cxf service.
If confirmed to be a bug the check should be removed.
",any,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113855,,,2009-09-11 07:21:13.0,,,,,,0|i0cuxz:,72957,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
subscriptionDurable is commented in JMSFactory,CXF-2432,12435257,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,dkulp,javier,javier,09/Sep/09 22:11,12/Oct/09 20:45,14/Mar/19 02:29,11/Sep/09 17:22,2.1.6,2.2.3,,,,,,,,,,,,,2.1.7,2.2.4,,,,,,,,,0,,,,"I can't create durable subscription and i see that in createJmsListener in JMSFactory is commented the next line:

  //jmsListener.setSubscriptionDurable(jmsConfig.isSubscriptionDurable());

is there any reason for  this? how can i set it?



",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-09-11 17:22:37.705,,,no_permission,,,,,,,,,,,,,113852,,,Fri Sep 11 17:22:37 UTC 2009,,,,,,0|i0cuyf:,72959,,,,,,,,"11/Sep/09 17:22;dkulp;
This was an semi-oversight on our part that was fixed a couple weeks ago.   The reason it was commented out was enabling it caused a couple of tests we had to fail and we didn't have time to dig in to figure out why at the time and it was kind of forgotten about.   A couple weeks ago, I came across this and uncommented it and then we spent several days trying to figure out what the test problems were.  (turned out to be a timing issue with ActiveMQ)

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException from wsdl2java with no explanation,CXF-2431,12435243,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,jmrobins,jmrobins,09/Sep/09 18:38,12/Oct/09 20:45,14/Mar/19 02:29,03/Oct/09 02:10,2.2.3,,,,,,,,,,,,,,2.1.7,2.2.4,,,,,,,,,0,,,,"I had asked about this on the cxf-users mailing list, and was told to enter it into JIRA:

-------

I am trying to generate Java code using CXF to work with a third-party tool which they provide as a web service.  I have attached the WSDL for their service to this message.  When I try to run the wsdl2java tool on it (using either CXF 2.0.5, which we've used before, and currently use for one other project, or with 2.2.3, which I downloaded when I started having problems), I get a NullPointerException with no useful error message:
 
jrobins@yggdrasil,11:10am,[~/tmp/newcxf/apache-cxf-2.2.3/bin]% ./wsdl2java -d /tmp/harcourt -client -verbose /tmp/harcourt/HarcourtWS.wsdl
Loading FrontEnd jaxws ...
Loading DataBinding jaxb ...
wsdl2java -d /tmp/harcourt -client -verbose /tmp/harcourt/HarcourtWS.wsdl
wsdl2java - Apache CXF 2.2.3
 
 
WSDLToJava Error: java.lang.NullPointerException
 
org.apache.cxf.tools.common.ToolException: java.lang.NullPointerException
        at org.apache.cxf.tools.wsdlto.WSDLToJavaContainer.execute(WSDLToJavaContainer.java:271)
        at org.apache.cxf.tools.common.toolspec.ToolRunner.runTool(ToolRunner.java:103)
        at org.apache.cxf.tools.wsdlto.WSDLToJava.run(WSDLToJava.java:113)
        at org.apache.cxf.tools.wsdlto.WSDLToJava.run(WSDLToJava.java:86)
        at org.apache.cxf.tools.wsdlto.WSDLToJava.main(WSDLToJava.java:184)
Caused by: java.lang.NullPointerException
        at org.apache.cxf.tools.wsdlto.frontend.jaxws.processor.internal.FaultProcessor.processFault(FaultProcessor.java:96)
        at org.apache.cxf.tools.wsdlto.frontend.jaxws.processor.internal.FaultProcessor.process(FaultProcessor.java:54)
        at org.apache.cxf.tools.wsdlto.frontend.jaxws.processor.internal.OperationProcessor.process(OperationProcessor.java:66)
        at org.apache.cxf.tools.wsdlto.frontend.jaxws.processor.internal.PortTypeProcessor.process(PortTypeProcessor.java:143)
        at org.apache.cxf.tools.wsdlto.frontend.jaxws.processor.WSDLToJavaProcessor.wsdlDefinitionToJavaModel(WSDLToJavaProcessor.java:88)
        at org.apache.cxf.tools.wsdlto.frontend.jaxws.processor.WSDLToJavaProcessor.process(WSDLToJavaProcessor.java:60)
        at org.apache.cxf.tools.wsdlto.WSDLToJavaContainer.processWsdl(WSDLToJavaContainer.java:229)
        at org.apache.cxf.tools.wsdlto.WSDLToJavaContainer.execute(WSDLToJavaContainer.java:127)
        at org.apache.cxf.tools.wsdlto.WSDLToJavaContainer.execute(WSDLToJavaContainer.java:263)
        ... 4 more
 
 
There is no indication here as to what the problem is, and searching the web and the users@cxf archives, I don't find anything that seems related to this error.
 
When I try running with -validate to see if the WSDL is valid, it gives me the following error:
 
jrobins@yggdrasil,11:17am,[~/tmp/newcxf/apache-cxf-2.2.3/bin]% ./wsdl2java -d /tmp/harcourt -validate -verbose /tmp/harcourt/HarcourtWS.wsdl
Loading FrontEnd jaxws ...
Loading DataBinding jaxb ...
wsdl2java -d /tmp/harcourt -validate -verbose /tmp/harcourt/HarcourtWS.wsdl
wsdl2java - Apache CXF 2.2.3
 
 
WSDLToJava Error: WSI-BP-1.0 R2205 violation: In Message SubmitRequestFault, part ExceptionId must specify a 'element' attribute
 
 
 
org.apache.cxf.tools.common.ToolException: WSI-BP-1.0 R2205 violation: In Message SubmitRequestFault, part ExceptionId must specify a 'element' attribute
 
 
        at org.apache.cxf.tools.validator.internal.WSDL11Validator.isValid(WSDL11Validator.java:140)
        at org.apache.cxf.tools.wsdlto.frontend.jaxws.wsdl11.JAXWSDefinitionBuilder.validate(JAXWSDefinitionBuilder.java:201)
        at org.apache.cxf.tools.wsdlto.frontend.jaxws.wsdl11.JAXWSDefinitionBuilder.validate(JAXWSDefinitionBuilder.java:61)
        at org.apache.cxf.tools.wsdlto.WSDLToJavaContainer.processWsdl(WSDLToJavaContainer.java:166)
        at org.apache.cxf.tools.wsdlto.WSDLToJavaContainer.execute(WSDLToJavaContainer.java:127)
        at org.apache.cxf.tools.wsdlto.WSDLToJavaContainer.execute(WSDLToJavaContainer.java:263)
        at org.apache.cxf.tools.common.toolspec.ToolRunner.runTool(ToolRunner.java:103)
        at org.apache.cxf.tools.wsdlto.WSDLToJava.run(WSDLToJava.java:113)
        at org.apache.cxf.tools.wsdlto.WSDLToJava.run(WSDLToJava.java:86)
        at org.apache.cxf.tools.wsdlto.WSDLToJava.main(WSDLToJava.java:184)
 
 
So it seems like there is an issue with conforming to the WS-I Basic Profile.  However, I was under the impression that conforming to the BP was optional, and that a WSDL can still be valid even if it does not conform.  I am sort of assuming that CXF is providing this message as informational, rather than as a requirement, but I don't know.  Is it possible that this violation is what's causing the NullPointerException?  And since this WSDL seems to be valid WSDL, even if it doesn't conform to the Basic Profile (it passes the validation at http://www.validwsdl.com/, for example), is there a way to get CXF not to require that it conform, and still generate Java client code?  Since this is a third-party tool, we don't have the option of changing the WSDL or the service, so I'm hoping I can find a way to make this work.

-------

I will attach a copy of the WSDL file we're using.

",,,,,,,,,,,,,,,,,09/Sep/09 18:38;jmrobins;HarcourtWS.wsdl;https://issues.apache.org/jira/secure/attachment/12419078/HarcourtWS.wsdl,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113851,,,2009-09-09 18:38:22.0,,,,,,0|i0cuyn:,72960,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
wsdl2java tool generates client stub which always uses default (JAXB) databinding while another one style is specified in the command line (-db argument),CXF-2429,12435218,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,mklimiuk,mklimiuk,09/Sep/09 14:17,12/Oct/09 20:45,14/Mar/19 02:29,02/Oct/09 02:47,2.1.6,2.2.3,,,,,,,,,,,,,2.2.4,,,,Tooling,,,,,,0,,,,"SCENARIO:

The following ant task is executed to generate client artifacts:

        <java classname=""org.apache.cxf.tools.wsdlto.WSDLToJava"" fork=""true"">
            <arg value=""-client"" />
            <arg value=""-db"" />
            <arg value=""xmlbeans"" />
            <arg value=""-d"" />
            <arg value=""${gen.dir}"" />
            <arg value=""${wsdl.file}"" />
            <classpath>
                <path refid=""ws.classpath"" />
            </classpath>
        </java>


ACTUAL RESULT:

Generated class XXXService.java uses default databinding style (JAXB) for creation of a service client while the XmlBeans style is specified. Furthermore, the databinding style cannot even be changed programmatically using available interfaces.


EXPECTED RESULT:

Generated class XXXService.java must use the specified databinding style for creation of a service client.",the issue is not environment related,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-09-11 17:31:33.205,,,no_permission,,,,,,,,,,,,,113849,,,Fri Oct 02 02:47:59 UTC 2009,,,,,,0|i0v0hb:,179051,,,,,,,,"11/Sep/09 17:31;dkulp;
As a point of note: this is fixed on trunk, but it's not something that can be backported to 2.2/2.1 due to it using new annotation infrastructure available only on trunk.

For 2.1/2.2, it would need to either:

1) Generate a spring config file (cxf.xml) that would configure the databinding for the ports.

2) Not generate the Service.java at all and require you to use the JaxWsServiceFactoryBean API's and such.

3) Embed some other code in the generated Service to set the databinding, but that might have JAX-WS spec compliance issues.   

","18/Sep/09 14:32;mklimiuk;Thanks for the reply, Daniel

My workaround solution is something like your 2nd and 3rd points.

In our case:
- XmlBeans databinding is used;
- and WSDL location is not specified, so the service will be ""built from the class"".

The following patch is applied on generated artifacts:
- the most important change in XXXService class is:

    public MyPortInterface createPort(String address) {
        JaxWsProxyFactoryBean factory = new JaxWsProxyFactoryBean();
        factory.setServiceClass(MyPortInterface.class);
        factory.setDataBinding(new XmlBeansDataBinding());
        factory.setBindingId(BINDING_ID);
        factory.setEndpointName(PORT_NAME);
        factory.setServiceName(SERVICE);
        factory.setAddress(address);
        return (MyPortInterface) factory.create();
    }

After that the XXXClass is actually not an extension of javax.xml.ws.Service, because we need only generated SERVICE and PORT_NAME Qname values in the inserted method.",02/Oct/09 02:47;dkulp;Ported the @Databinding annotation to 2.2.4,,,,,,,,,,,,,,,,,,,,,,,,,,,,
OSGi metadata does not handle well multiple versions of CXF bundle,CXF-2425,12435023,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,gnt,gnt,gnt,07/Sep/09 16:16,12/Oct/09 20:45,14/Mar/19 02:29,11/Sep/09 17:33,2.1.6,2.2.3,,,,,,,,,,,,,2.1.7,2.2.4,2.3,,OSGi,,,,,,0,,,,"In order for OSGi versioning mechanism to be leveraged, CXF bundles should not import cxf packages, but only export those.
Using version ranges would be good too for other dependencies.",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-09-11 17:33:58.753,,,no_permission,,,,,,,,,,,,,113847,,,Fri Sep 11 17:33:58 UTC 2009,,,,,,0|i0cuyv:,72961,,,,,,,,"07/Sep/09 16:20;gnt;http://svn.apache.org/viewvc?view=rev&revision=812216
should solve the issue in trunk, but it needs to be backported to all branches I think.","11/Sep/09 17:33;dkulp;
Fixed merged to 2.2 and 2.1",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DataBindingProvider should be <T>,CXF-2422,12434918,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,bmargulies,bmargulies,05/Sep/09 16:49,01/Feb/10 19:02,14/Mar/19 02:29,21/Dec/09 21:36,2.3,,,,,,,,,,,,,,2.2.6,,,,JAX-RS,,,,,,0,,,,"Defining DataBindingProvider to be ungeneric and implementing the <Object> forms of the interfaces is just wrong and defeats the generic nature of the underlying interfaces. It should be DataBindingProvider<T>, reading and writing T's.

I've fixed this for Aegis and I'm going to commit that soon, but I leave this for someone else.
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113844,,,2009-09-05 16:49:13.0,,,,,,0|i1403z:,231480,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Get the UnsupportedOperationException when reinstalling a cxf related bundle in OSGi platform,CXF-2421,12434736,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,njiang,njiang,njiang,03/Sep/09 13:08,12/Oct/09 20:45,14/Mar/19 02:29,03/Sep/09 14:44,2.0.10,2.0.11,2.0.12,2.1.3,2.1.4,2.1.5,2.1.6,2.2,2.2.1,2.2.2,2.2.3,,,,2.1.7,2.2.4,2.3,,Configuration,,,,,,0,,,,"Here is the stack trace. It looks like the COWIterator do not support the remove operation.
 
 Caused by: java.lang.UnsupportedOperationException
	at java.util.concurrent.CopyOnWriteArrayList$COWIterator.remove(CopyOnWriteArrayList.java:937)
	at org.apache.cxf.configuration.spring.ConfigurerImpl.addApplicationContext(ConfigurerImpl.java:232)
	at org.apache.cxf.bus.spring.BusWiringBeanFactoryPostProcessor.updateBusReferencesInContext(BusWiringBeanFactoryPostProcessor.java:118)
	at org.apache.camel.component.cxf.spring.CxfEndpointBeanDefinitionParser$CxfSpringEndpointBean.setApplicationContext(CxfEndpointBeanDefinitionParser.java:115)
	at org.springframework.context.support.ApplicationContextAwareProcessor.postProcessBeforeInitialization(ApplicationContextAwareProcessor.java:70)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:350)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1331)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:473)
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113843,,,Thu Sep 03 14:44:10 UTC 2009,,,,,,0|i0cuz3:,72962,,,,,,,,"03/Sep/09 14:44;njiang;Applied the patch into trunk, 2.2.x, and 2.1.x.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WSDL2Java -allowElementReferences causes fatal errors in operation dispatching,CXF-2419,12434639,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Critical,Fixed,dkulp,ostersc,ostersc,02/Sep/09 15:10,12/Oct/09 20:45,14/Mar/19 02:29,04/Sep/09 01:25,2.2.3,2.3,,,,,,,,,,,,,2.1.7,2.2.4,,,,,,,,,0,,,,"If I make use of local element references in WSDL, and run WSDL2Java passing the -allowElementReferences flag, the code all gets properly generated with appropriate unwrapping, however, the service does not work as the exchange is unable to locate the appropriate method in the implementation.  The following error is generated whenever a method using element references is invokved:

Sep 2, 2009 11:04:57 AM org.apache.cxf.phase.PhaseInterceptorChain doIntercept
WARNING: Application has thrown exception, unwinding now
org.apache.cxf.interceptor.Fault: null while invoking <null> with params [oster].
	at org.apache.cxf.service.invoker.AbstractInvoker.createFault(AbstractInvoker.java:152)
	at org.apache.cxf.jaxws.AbstractJAXWSMethodInvoker.createFault(AbstractJAXWSMethodInvoker.java:83)
	at org.apache.cxf.service.invoker.AbstractInvoker.invoke(AbstractInvoker.java:126)
	at org.apache.cxf.jaxws.JAXWSMethodInvoker.invoke(JAXWSMethodInvoker.java:55)
	at org.apache.cxf.service.invoker.AbstractInvoker.invoke(AbstractInvoker.java:68)
	at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:58)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:417)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:269)
	at java.util.concurrent.FutureTask.run(FutureTask.java:123)
	at org.apache.cxf.workqueue.SynchronousExecutor.execute(SynchronousExecutor.java:37)
	at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:98)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
	at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:104)
	at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.serviceRequest(JettyHTTPDestination.java:302)
	at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.doService(JettyHTTPDestination.java:266)
	at org.apache.cxf.transport.http_jetty.JettyHTTPHandler.handle(JettyHTTPHandler.java:70)
	at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765)
	at org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:230)
	at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)
	at org.mortbay.jetty.Server.handle(Server.java:326)
	at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:534)
	at org.mortbay.jetty.HttpConnection$RequestHandler.content(HttpConnection.java:879)
	at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:747)
	at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:218)
	at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404)
	at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:409)
	at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:520)
Caused by: java.lang.NullPointerException
	at org.apache.cxf.service.invoker.AbstractInvoker.insertExchange(AbstractInvoker.java:171)
	at org.apache.cxf.service.invoker.AbstractInvoker.performInvocation(AbstractInvoker.java:160)
	at org.apache.cxf.service.invoker.AbstractInvoker.invoke(AbstractInvoker.java:82)
	... 24 more
",,,,,,,,,,,,,,,,,02/Sep/09 15:21;ostersc;common_build.xml;https://issues.apache.org/jira/secure/attachment/12418392/common_build.xml,02/Sep/09 15:17;ostersc;wsdl_first_element_ref_noflag.zip;https://issues.apache.org/jira/secure/attachment/12418390/wsdl_first_element_ref_noflag.zip,02/Sep/09 15:17;ostersc;wsdl_first_element_ref_withflag.zip;https://issues.apache.org/jira/secure/attachment/12418391/wsdl_first_element_ref_withflag.zip,,,,3.0,,,,,,,,,,,,,,,,,,,,2009-09-02 15:16:32.406,,,no_permission,,Advanced,,,,,,,,,,,113842,,,Fri Sep 04 01:29:31 UTC 2009,,,,,,0|i0cuzb:,72963,,,,,,,,02/Sep/09 15:11;ostersc;see details on debugging information here http://www.nabble.com/Issue-with-wsdl2java-%22-allowElementReferences%22-td25245853.html,"02/Sep/09 15:16;dkulp;Any chance you could attache a small test case?  That would definitely make it easier to debug.


","02/Sep/09 15:17;ostersc;The wsdl_first_element_ref_noflag.zip is the wsdl_first sample modified from the 2.2.3 release to have the WSDL make use of an element reference, which (without passing the -allowElementReferences flag) will cause the greetMe operation to be BARE style.  This zip file is a working project with this modification (server and client updated to BARE methods).

The wsdl_first_element_ref_withflag.zip is the same project, but WSDL2Java was run passing the -allowElementReferences flag (by modifying the common_build.xml call to wsdl2java [not included]), which will cause the greetMe operation to be WRAPPED style.  Running this project causes the reported exception to be raised when the greetMe operation is invoked.","02/Sep/09 15:21;ostersc;Here is the modified common_build.xml, which just turns on the -allowElementReferences flag in the wsdl2java macro","04/Sep/09 01:29;ostersc;I've confirmed trunk is working with my ""real"" service as well.",,,,,,,,,,,,,,,,,,,,,,,,,,
SchemaCollection throws StackOverflowError when schema contains circular reference,CXF-2418,12434621,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,fhoeben,fhoeben,02/Sep/09 12:10,12/Oct/09 20:45,14/Mar/19 02:29,04/Sep/09 01:26,2.2.3,,,,,,,,,,,,,,2.2.4,,,,Aegis Databinding,,,,,,0,,,,"When a schema contains a reference to an element inside itself, or there is another circular reference between schemas,  SchemaCollection.addCrossImports() goes into infinite recursion ending with a StackOverflowError.

Sample stack (before the error):
	SchemaCollection.addCrossImportsSequence(XmlSchema, XmlSchemaSequence) line: 376	
	SchemaCollection.addCrossImportsType(XmlSchema, XmlSchemaType) line: 366	
	SchemaCollection.addElementCrossImportsElement(XmlSchema, XmlSchemaObject) line: 353	
	SchemaCollection.addCrossImportsSequence(XmlSchema, XmlSchemaSequence) line: 376	
	SchemaCollection.addCrossImportsType(XmlSchema, XmlSchemaType) line: 366	
	SchemaCollection.addElementCrossImportsElement(XmlSchema, XmlSchemaObject) line: 353	
	SchemaCollection.addCrossImportsSequence(XmlSchema, XmlSchemaSequence) line: 376	
	SchemaCollection.addCrossImportsType(XmlSchema, XmlSchemaType) line: 366	
	SchemaCollection.addElementCrossImportsElement(XmlSchema, XmlSchemaObject) line: 353	
	SchemaCollection.addCrossImportsSequence(XmlSchema, XmlSchemaSequence) line: 376	
	SchemaCollection.addCrossImportsType(XmlSchema, XmlSchemaType) line: 366	
	SchemaCollection.addElementCrossImportsElement(XmlSchema, XmlSchemaObject) line: 353	
	SchemaCollection.addCrossImportsSequence(XmlSchema, XmlSchemaSequence) line: 376	
	SchemaCollection.addCrossImportsType(XmlSchema, XmlSchemaType) line: 366	
	SchemaCollection.addElementCrossImportsElement(XmlSchema, XmlSchemaObject) line: 353	
	SchemaCollection.addCrossImportsSequence(XmlSchema, XmlSchemaSequence) line: 376	
	SchemaCollection.addCrossImportsType(XmlSchema, XmlSchemaType) line: 366	
	SchemaCollection.addElementCrossImportsElement(XmlSchema, XmlSchemaObject) line: 353	
	SchemaCollection.addCrossImportsSequence(XmlSchema, XmlSchemaSequence) line: 376	
	SchemaCollection.addCrossImportsType(XmlSchema, XmlSchemaType) line: 366	
	SchemaCollection.addElementCrossImportsElement(XmlSchema, XmlSchemaObject) line: 353	
	SchemaCollection.addCrossImportsSequence(XmlSchema, XmlSchemaSequence) line: 376	
	SchemaCollection.addCrossImportsType(XmlSchema, XmlSchemaType) line: 366	
	SchemaCollection.addElementCrossImportsElement(XmlSchema, XmlSchemaObject) line: 353	
	SchemaCollection.addCrossImportsSequence(XmlSchema, XmlSchemaSequence) line: 376	
	SchemaCollection.addCrossImportsType(XmlSchema, XmlSchemaType) line: 366	
	SchemaCollection.addElementCrossImportsElement(XmlSchema, XmlSchemaObject) line: 353	
	SchemaCollection.addCrossImportsSequence(XmlSchema, XmlSchemaSequence) line: 376	
	SchemaCollection.addCrossImportsType(XmlSchema, XmlSchemaType) line: 366	
	SchemaCollection.addElementCrossImportsElement(XmlSchema, XmlSchemaObject) line: 353	
	SchemaCollection.addCrossImportsSequence(XmlSchema, XmlSchemaSequence) line: 376	
	SchemaCollection.addCrossImportsType(XmlSchema, XmlSchemaType) line: 366	
	SchemaCollection.addElementCrossImportsElement(XmlSchema, XmlSchemaObject) line: 353	
	SchemaCollection.addCrossImportsSequence(XmlSchema, XmlSchemaSequence) line: 376	
	SchemaCollection.addCrossImportsType(XmlSchema, XmlSchemaType) line: 366	
	SchemaCollection.addOneSchemaCrossImports(XmlSchema) line: 342	
	SchemaCollection.addCrossImports() line: 321	
	Databinding(AegisDatabinding).createSchemas(Service, Set<Type>) line: 504	
	Databinding(AegisDatabinding).initialize(Service) line: 285	
	JaxWsServiceFactoryBean(ReflectionServiceFactoryBean).buildServiceFromWSDL(String) line: 346	
	JaxWsServiceFactoryBean(ReflectionServiceFactoryBean).initializeServiceModel() line: 442	
	JaxWsServiceFactoryBean(ReflectionServiceFactoryBean).create() line: 195	
	JaxWsServiceFactoryBean.create() line: 163	
	JaxWsClientFactoryBean(AbstractWSDLBasedEndpointFactory).createEndpoint() line: 100	
	JaxWsClientFactoryBean(ClientFactoryBean).create() line: 52	
	JaxWsProxyFactoryBean(ClientProxyFactoryBean).create() line: 102	
	JaxWsProxyFactoryBean.create() line: 115	
...
",,,,,,,,,,,,,,,,,02/Sep/09 12:12;fhoeben;cxf-schemaCollection.patch;https://issues.apache.org/jira/secure/attachment/12418375/cxf-schemaCollection.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113841,,,Wed Sep 02 12:12:41 UTC 2009,,,,,,0|i0v15b:,179159,,,,,,,,"02/Sep/09 12:12;fhoeben;Patch file that prevents the StackOverflowError, by ensuring that for each xmlSchema we only check each schemaElement once for cross imports, i.e. if it is encountered again it will be ignored.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BeanTypeInfo does not ignore synthetic (bridge) methods to determine property types,CXF-2417,12434605,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,bmargulies,fhoeben,fhoeben,02/Sep/09 09:41,12/Oct/09 20:45,14/Mar/19 02:29,08/Sep/09 18:37,2.2.3,,,,,,,,,,,,,,2.2.4,,,,Aegis Databinding,,,,,,0,,,,"I have a bean that implements a generic interface that defines a property that uses the generic type, in the bean the generic type is bound to String.
When BeanTypeInfo determines the property descriptor of that property it (sometimes) does not detect that the type of the property is String, but instead it thinks it is object.
This is because of the use of the Introspector class in BeanTypeInfo. This class has a bug (http://bugs.sun.com/view_bug.do?bug_id=6528714) that means that sometimes property descriptors are returned that use information of synthetic bridge methods instead of the actual methods defined in the beans code.

The Spring framework has some code (GenericTypeAwarePropertyDescriptor) that works around this problem so their BeanUtils does return the correct property descriptors. Furthermore the comments in their implementation suggests that Introspector is also a source of memory leaks.
",,,,,,,,,,,,,,,,,02/Sep/09 09:46;fhoeben;cxf-aegis-BeanTypeInfo.patch;https://issues.apache.org/jira/secure/attachment/12418363/cxf-aegis-BeanTypeInfo.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2009-09-02 10:14:41.147,,,no_permission,,,,,,,,,,,,,113840,,,Tue Sep 08 18:37:26 UTC 2009,,,,,,0|i0v0jz:,179063,,,,,,,,"02/Sep/09 09:46;fhoeben;Attached a patch for BeanTypeInfo that uses the spring framework to get the correct property descriptors.

I assume that Aegis can not depend on spring in this way, but this code was OK in my environment and maybe it allows you to drill into spring's implementation and build your own code to work around this bug in the JVMs...","02/Sep/09 09:48;fhoeben;Link to Spring's bug that prevented me from using their BeanUtils.getPropertyDescriptors(beanClass); http://jira.springframework.org/browse/SPR-6063
",02/Sep/09 10:14;bmargulies;I'll look into this.,"08/Sep/09 18:37;bmargulies;cl r812615. Added code to use Spring if Spring is available.
",,,,,,,,,,,,,,,,,,,,,,,,,,,
Dynamic client returns a T when it should return a List<T>,CXF-2415,12434525,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,benjamin coiffe,benjamin coiffe,01/Sep/09 16:30,14/Jan/11 15:27,14/Mar/19 02:29,11/Sep/09 20:23,2.1.4,,,,,,,,,,,,,,2.1.7,2.2.4,,,Service Model,Simple Frontend,,,,,0,,,,"This only affects unwrappable operation (op.isUnwrappedCapable() && !op.isUnwrapped() is true) that returns a sequence of objects.
I only tested on version 2.1.4 but it may affect other versions as well given that the codebase has not changed.

This issue can be reproduced with the public ws: http://www.wikipathways.org/wpi/webservice/webservice.php?wsdl. The operation listOrganisms returns a String instead of a List<String>.

Fyi, the default implementation of the jaxrpc spec returns String[].
",,,,,,,,,,,,,,,,,04/Sep/09 09:38;benjamin coiffe;Test.java;https://issues.apache.org/jira/secure/attachment/12418608/Test.java,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2009-09-03 20:59:27.003,,,no_permission,,Moderate,,,,,,,,,,,113838,,,Fri Jan 14 15:27:50 UTC 2011,,,,,,0|i0cuzr:,72965,,,,,,,,"03/Sep/09 20:59;dkulp;
I don't see a ""listOrganisms""operation in that wsdl.  

Can you attach the code used to make the call?","04/Sep/09 09:38;benjamin coiffe;my bad, wrong web service","08/Sep/09 13:36;duke;Any news on a fix for this bug?

We're in urgent need of a fix as well.","14/Jan/11 15:27;kbhatt;Does it only work with build in java classes or it also works with custom classes

I have a custom class FeedMetaData which is a kind of bean. I am returning list of objects of this class from a web service method. When I try to invoke this method from client, I get ClassCastException. Below is my client code:

JaxWsDynamicClientFactory dcf = JaxWsDynamicClientFactory.newInstance(bus);
Client client = dcf.createClient(""http://64.68.163.33:8080/socialkast-web/skservice/skservice?wsdl"");
Object[] results = client.invoke(""getCommecialFeeds"");
List<FeedMetaData> result = (List<FeedMetaData>)results[0];

Please let me know whether this fix takes care of return type list of custom objects. ",,,,,,,,,,,,,,,,,,,,,,,,,,,
Aegis ObjectType throws NullPointerException when reading value for an xs:any without xsi:type information,CXF-2413,12434432,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,bmargulies,fhoeben,fhoeben,31/Aug/09 15:16,12/Oct/09 20:45,14/Mar/19 02:29,08/Sep/09 18:43,2.2.3,,,,,,,,,,,,,,2.2.4,,,,Aegis Databinding,,,,,,0,,,,"Aegis databinding throws a NullPointerException instead of reporting that it can not read the XML it receives.
I believe the correct, intended, behavior is that it would throw a DatabindingException stating the typeQName it could not unmarshall, or maybe it should even store the content of the element it could not parse to a Java bean in an XML document.

Caused by: java.lang.NullPointerException
	at org.apache.cxf.aegis.type.basic.ObjectType.readObject(ObjectType.java:104)
	at org.apache.cxf.aegis.type.basic.BeanType.readObject(BeanType.java:161)
	at org.apache.cxf.aegis.type.basic.ArrayType.readCollection(ArrayType.java:86)
	at org.apache.cxf.aegis.type.basic.ArrayType.readObject(ArrayType.java:62)
	at org.apache.cxf.aegis.type.basic.BeanType.readObject(BeanType.java:161)
	at org.apache.cxf.aegis.type.basic.BeanType.readObject(BeanType.java:161)
	at org.apache.cxf.aegis.type.basic.ArrayType.readCollection(ArrayType.java:86)
	at org.apache.cxf.aegis.type.basic.ArrayType.readObject(ArrayType.java:62)
	at org.apache.cxf.aegis.type.basic.BeanType.readObject(BeanType.java:161)
	at org.apache.cxf.aegis.AegisXMLStreamDataReader.read(AegisXMLStreamDataReader.java:82)
	at org.apache.cxf.aegis.databinding.XMLStreamDataReader.read(XMLStreamDataReader.java:61)
	... 57 more
",,,,,,,,,,,,,,,,,31/Aug/09 15:17;fhoeben;cxf-aegis-ObjectType.patch;https://issues.apache.org/jira/secure/attachment/12418152/cxf-aegis-ObjectType.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2009-09-08 18:43:35.768,,,no_permission,,,,,,,,,,,,,113836,,,Tue Sep 08 18:43:35 UTC 2009,,,,,,0|i0v0kn:,179066,,,,,,,,"31/Aug/09 15:17;fhoeben;I believe this patch fixes the issue, at least it ensure a DatabindingException is raised, instead of the NullPointerException....","08/Sep/09 18:43;bmargulies;r812621. Patch adapted and applied.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Aegis roots cannot be generics,CXF-2412,12434428,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,bmargulies,bmargulies,bmargulies,31/Aug/09 14:52,11/Oct/10 14:44,14/Mar/19 02:29,08/Sep/09 17:45,2.2.3,,,,,,,,,,,,,,2.3,,,,Aegis Databinding,,,,,,0,,,,"The root class set is Class, not Type, so it can't take full generics, which is a problem for things like JAX-RS that want to start with a generic collection. The proposed fix is to just change it to Type, and take the minor compatibility pain.
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113835,,,Tue Sep 08 17:45:42 UTC 2009,,,,,,0|i1408f:,231500,,,,,,,,08/Sep/09 17:45;bmargulies;Done.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ClassCastException when initializing JAXB Databinding based on WSDL,CXF-2411,12434413,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,fhoeben,fhoeben,31/Aug/09 10:11,12/Oct/09 20:45,14/Mar/19 02:29,03/Sep/09 21:01,2.2.3,,,,,,,,,,,,,,2.2.4,,,,JAXB Databinding,,,,,,0,,,,"I have a service interface that returns an object of a class with a (bounded) type parameter. One of the properties of this class is an array of of objects of this type parameter's type. 

E.g. 
public interface Service {
Result<A> do();
}

public class Result<T extends B> {
private T[] content;
public T[] getContent() {
return content;
}
public void setContent(T[] content) {
this.content = content;
}
}

public class B {}

public class A extends B {}

I get the following exception:

java.lang.ClassCastException: sun.reflect.generics.reflectiveObjects.TypeVariableImpl
	at org.apache.cxf.jaxb.JAXBContextInitializer.addType(JAXBContextInitializer.java:185)
	at org.apache.cxf.jaxb.JAXBContextInitializer.addType(JAXBContextInitializer.java:170)
	at org.apache.cxf.jaxb.JAXBContextInitializer.walkReferences(JAXBContextInitializer.java:281)
	at org.apache.cxf.jaxb.JAXBContextInitializer.addClass(JAXBContextInitializer.java:227)
	at org.apache.cxf.jaxb.JAXBContextInitializer.begin(JAXBContextInitializer.java:150)
	at org.apache.cxf.service.ServiceModelVisitor.visitOperation(ServiceModelVisitor.java:109)
	at org.apache.cxf.service.ServiceModelVisitor.visitOperation(ServiceModelVisitor.java:130)
	at org.apache.cxf.service.ServiceModelVisitor.walk(ServiceModelVisitor.java:74)
	at org.apache.cxf.jaxb.JAXBDataBinding.initialize(JAXBDataBinding.java:322)
	at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.buildServiceFromWSDL(ReflectionServiceFactoryBean.java:346)
	at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.initializeServiceModel(ReflectionServiceFactoryBean.java:442)
	at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.create(ReflectionServiceFactoryBean.java:195)
	at org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean.create(JaxWsServiceFactoryBean.java:163)
	at org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory.createEndpoint(AbstractWSDLBasedEndpointFactory.java:100)
	at org.apache.cxf.frontend.ClientFactoryBean.create(ClientFactoryBean.java:52)
	at org.apache.cxf.frontend.ClientProxyFactoryBean.create(ClientProxyFactoryBean.java:102)
	at org.apache.cxf.jaxws.JaxWsProxyFactoryBean.create(JaxWsProxyFactoryBean.java:115)
        ...

I believe the problem is that the JAXBContextInitializer performs a cast without checking whether the array's elements are a class or a type variable. In case of a type variable the bound of the type variable should (of course) be used.
",,,,,,,,,,,,,,,,,31/Aug/09 10:18;fhoeben;cxf-jaxb.patch;https://issues.apache.org/jira/secure/attachment/12418134/cxf-jaxb.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2009-09-03 21:01:36.549,,,no_permission,,,,,,,,,,,,,113834,,,Thu Sep 03 21:01:36 UTC 2009,,,,,,0|i0v0gn:,179048,,,,,,,,31/Aug/09 10:18;fhoeben;I believe this patch addresses this issue...,"03/Sep/09 21:01;dkulp;
Definitely more work was needed to get it working in all cases (asm or no asm, wsdl or no wsdl), but I think it's OK now.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ClientOutFaultObserver in ClientImpl not initialized (no callback on client code),CXF-2409,12434350,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,wiswedel,wiswedel,29/Aug/09 11:54,12/Oct/09 20:44,14/Mar/19 02:29,01/Sep/09 13:30,2.2.2,,,,,,,,,,,,,,2.1.7,2.2.4,,,Core,,,,,,0,,,,"
The field ClientOutFaultObserver in class org.apache.cxf.endpoint.ClientImpl is not initialized (null) when the client is created via the DynamicClientFactory. As a consequence the client code never gets a callback in case of errors when using asynchronous invocation.

A lengthy problem report is here:
http://www.nabble.com/ClientOutFaultObserver-in-ClientImpl-not-initialized-td24993002.html",,300,300,,0%,300,300,,,,,,,,,,29/Aug/09 11:57;wiswedel;cxf-2409.patch;https://issues.apache.org/jira/secure/attachment/12418057/cxf-2409.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,Novice,,,,,,,,,,,113832,,,Sat Aug 29 11:57:23 UTC 2009,,,,,,0|i0cuzz:,72966,,,,,,,,"29/Aug/09 11:57;wiswedel;
Proposed patch. It adds a single line to the constructor, properly initializing the field.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JAX-RS ClientProxy does not properly test consume types when setting request headers,CXF-2408,12434331,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,sergey_beryozkin,lwlu98,lwlu98,28/Aug/09 22:58,12/Oct/09 20:45,14/Mar/19 02:29,29/Aug/09 18:35,2.2.3,,,,,,,,,,,,,,2.2.4,2.3,,,JAX-RS,,,,,,0,,,,"On line 247 of org.apache.cxf.jaxrs.client.ClientProxyImpl in method setRequestHeaders() there is a test

 ori.getConsumeTypes().get(0).equals(MediaType.WILDCARD) 

which always fails since OperationResourceInfo.getConsumeTypes() returns a list of MediaType, but MediaType.WILDCARD is a String.

Much further along in client code, this results in the JSONProvider rather than the JAXBElementProvider being used as the MessageWriter for content type */*",,,,,,,,,,,,,,,,,28/Aug/09 23:28;lwlu98;patch.diff;https://issues.apache.org/jira/secure/attachment/12418035/patch.diff,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113831,,,Fri Aug 28 23:28:32 UTC 2009,,,,,,0|i14e8v:,233771,,,,,,,,28/Aug/09 23:28;lwlu98;Diff file showing minor change,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HttpsToken RequireClientCertificate not working ,CXF-2406,12434180,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,dkulp,dkulp,27/Aug/09 15:07,12/Oct/09 20:45,14/Mar/19 02:29,27/Aug/09 19:56,2.2.3,,,,,,,,,,,,,,2.2.4,,,,WS-* Components,,,,,,0,,,,"HttpsToken RequireClientCertificate=true has several issues:

1) On Java 5 - it's not processed at all.  The runtime is always assume RequireClientCertificate=false

2) On Java 6 - it's trying to check if the Peer certs are available before the connection is made and an exception is being raised. 


",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,43871,,,2009-08-27 15:07:52.0,,,,,,0|i0v1if:,179218,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
remove reference to the <list> node when defining an interceptor,CXF-2404,12433979,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Trivial,Fixed,dkulp,vbossica,vbossica,25/Aug/09 20:39,12/Oct/09 20:45,14/Mar/19 02:29,25/Aug/09 20:44,,,,,,,,,,,,,,,2.2.4,,,,Documentation,,,,,,0,,,,"according to [1], the <list> node must be omitted when defining an Interceptor but the node is still referenced in the documentation [2]

[1] http://mail-archives.apache.org/mod_mbox/cxf-users/200906.mbox/%3C61b5d9410906111005v11511b92kae587d0b9dc020d@mail.gmail.com%3E
[2] http://cwiki.apache.org/CXF20DOC/interceptors.html",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113828,,,2009-08-25 20:39:33.0,,,,,,0|i16vsn:,248283,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Aegis ignores mapping file attributes for services.,CXF-2402,12433746,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,bmargulies,sck,sck,21/Aug/09 22:49,12/Oct/09 20:45,14/Mar/19 02:29,23/Aug/09 14:52,2.0.10,,,,,,,,,,,,,,2.2.4,,,,,,,,,,0,,,,"Aegis seems to ignoring ""nillable"" and minOccurs"" attributes.

There's an open bug logged in XFire back in 06.

Logging it in CXF as it still exhibits the same behavior.",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-08-22 02:41:03.916,,,no_permission,,,,,,,,,,,,,113826,,,Mon Aug 24 22:04:43 UTC 2009,,,,,,0|i14erz:,233857,,,,,,,,22/Aug/09 02:41;curcuru;I presume this is a CXF bug that was mis-filed in the PRC tracker - please reassign as necessary.  (Note: the PRC project does not do any code - it's for public relations issues!),"22/Aug/09 15:02;sck;Thanks for moving it to the right place Shane.

Here's the link for the bug logged in XFire.

http://jira.codehaus.org/browse/XFIRE-764

","22/Aug/09 18:13;bmargulies;If you are using JAX-WS as a front end, Aegis has no control or influence over these values, and, in fact, you can't set them.

If you are using the simple front end, then I suppose that this might be expected to work.

What's your situation?
","22/Aug/09 18:18;bmargulies;I've verified this bug by adding a test case for it.
",23/Aug/09 14:52;bmargulies;as of r806982 in the trunk. Not necessarily an easy patch to backport.,"24/Aug/09 15:01;sck;Benson, just looking for some clarifications.

We're currently using JAX-WS, are you saying that even with the fix it won't ever work for that front end?  

And even if we switch to simple front end it's still broken in 2.0.10 right?","24/Aug/09 22:04;bmargulies;Sam,

What I can tell you for sure it that:

1: it now works with the simple front end in 2.3-SNAPSHOT.
2: it is very unlikely to be backported to the 2.0.x branch. I more or less rewrote the relevant area after 2.0.

I honestly don't know if it works with JAX-WS in 2.3-SNAPSHOT, I don't suppose you could try?

a backport to 2.2 is fairly likely.

--benson


",,,,,,,,,,,,,,,,,,,,,,,,
JAX-RS code doesn't have enough visibility into parameterized types to work ,CXF-2401,12433720,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,sergey_beryozkin,bmargulies,bmargulies,21/Aug/09 19:28,12/Oct/09 20:45,14/Mar/19 02:29,22/Aug/09 18:11,2.3,,,,,,,,,,,,,,2.2.4,,,,JAX-RS,,,,,,0,,,,"org.apache.cxf.jaxrs.provider.AegisJSONProviderTest.testWriteCollection() will explode if you un-ignore it. Why?

org.apache.cxf.jaxrs.provider.AegisElementProvider.createStreamWriter(Class<?>, OutputStream) is called with a Class, but it needs a full java.lang.reflect.Type to work right. org.apache.cxf.jaxrs.provider.AegisJSONProvider.createStreamWriter(Class<?>, OutputStream) wants to map the type to a QName, and that won't work for generic types and collections from a plain class.

",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-08-21 20:28:17.085,,,no_permission,,,,,,,,,,,,,113825,,,Sat Aug 22 18:11:31 UTC 2009,,,,,,0|i0v167:,179163,,,,,,,,"21/Aug/09 19:37;bmargulies;Sergey,

I'm stumped for now. JAXRSUtils.getClassQName won't produce the same thing as the Aegis mapping. Somehow, the mapping for the T in List<T> has to get into the json namespace map, and I don't see how you intended to accomplish anything like this. I'm willing to help some more, but I'm afraid to cause more problems than I solve without more understanding of your intentions here.

--benson
","21/Aug/09 20:28;sergey_beryozkin;Hi Benson

Can you give me some example and I try to fix it.

For example, if we have List<Book>to deal with then should a namespace map contain :

xsiNamespace : ""xsi""
BookNamespace : somePrefix

is it all that is needed for List<Book> to be serialized by Aegis ?

Sergey

","22/Aug/09 14:43;bmargulies;Yes, and then json goes boom for lack of namespaces. Un-ignore the test case and see for yourself.","22/Aug/09 17:08;bmargulies;Sergey,

Let me try to lay this out in more detail.

The jettison code has to have prefix mappings provided for all the namespace uri's that will be encountered in the course of serialization. The top-level element is something of an exception, apparently, since you have the special case at org.apache.cxf.jaxrs.provider.AegisJSONProvider.createStreamWriter and createStreamReader.

The code in here looks wrong to me in a number of ways.

1) Class<?> isn't enough to get the right mapping. When a generic is involved, that only contains the erased type.
2) How can you assume that ns1 is available? On the read side, how can you assume that ns1 will be bound to the incoming URI?
3) Why is all of this stuff needed in the first place? Normally, aegis pushes prefixes into the writer as needed. If the json thing is failing to find a prefix, then there's some other boostrapping issue with the the top element which should be fixed in aegis.

I'll probably have some more time for this today.

","22/Aug/09 18:11;bmargulies;I fixed this by passing the correct QName instead of the Class<?>.
",,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException with wsdl2js,CXF-2400,12433699,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Blocker,Fixed,bmargulies,ergouser,ergouser,21/Aug/09 15:41,12/Oct/09 20:45,14/Mar/19 02:29,21/Aug/09 16:49,2.2.3,,,,,,,,,,,,,,2.2.4,,,,,,,,,,0,,,,"http://www.advosol.us/xmldademo/xml_sim/OpcXmlDaServer.asmx?WSDL

wsdl2java works fine, wsdl2js gives the following:

WSDLToJS Error : java.lang.NullPointerException

org.apache.cxf.tools.common.ToolException: java.lang.NullPointerException
	at org.apache.cxf.tools.wsdlto.WSDLToJavaContainer.execute(WSDLToJavaContainer.java:272)
	at org.apache.cxf.tools.wsdlto.javascript.JavaScriptContainer.execute(JavaScriptContainer.java:150)
	at org.apache.cxf.tools.common.toolspec.ToolRunner.runTool(ToolRunner.java:103)
	at org.apache.cxf.tools.common.toolspec.ToolRunner.runTool(ToolRunner.java:67)
	at org.apache.cxf.tools.wsdlto.javascript.WSDLToJavaScript.run(WSDLToJavaScript.java:60)
	at org.apache.cxf.tools.wsdlto.javascript.WSDLToJavaScript.main(WSDLToJavaScript.java:97)
Caused by: java.lang.NullPointerException
	at org.apache.cxf.javascript.ParticleInfo.factorySetupType(ParticleInfo.java:208)
	at org.apache.cxf.javascript.ParticleInfo.factoryCommon(ParticleInfo.java:193)
	at org.apache.cxf.javascript.ParticleInfo.forLocalItem(ParticleInfo.java:157)
	at org.apache.cxf.javascript.types.SchemaJavascriptBuilder.complexTypeConstructorAndAccessors(SchemaJavascriptBuilder.java:196)
	at org.apache.cxf.javascript.types.SchemaJavascriptBuilder.generateCodeForSchema(SchemaJavascriptBuilder.java:101)
	at org.apache.cxf.tools.wsdlto.javascript.WSDLToJavaScriptProcessor.process(WSDLToJavaScriptProcessor.java:85)
	at org.apache.cxf.tools.wsdlto.javascript.JavaScriptContainer.execute(JavaScriptContainer.java:143)
	at org.apache.cxf.tools.wsdlto.WSDLToJavaContainer.execute(WSDLToJavaContainer.java:263)
	... 5 more
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-08-21 16:07:35.332,,,no_permission,,,,,,,,,,,,,113824,,,Mon Aug 24 17:23:55 UTC 2009,,,,,,0|i0uxn3:,178591,,,,,,,,"21/Aug/09 16:07;bmargulies;The code doesn't know what to do with:

<s:element minOccurs=""0"" maxOccurs=""1"" name=""Value"" />

which has no type.

I'll make it complain more politely.
","21/Aug/09 16:13;bmargulies;I won't resolve this until you comment further, in case you can offer some idea of what we can do with an element with no type other than to complain.
","21/Aug/09 16:29;ergouser;Umm, complain and not generate code?  Or is there a solution to the problem?  

Since the WSDL is part of a published specification, I don't get to change that, so if the code isn't generated I'm stuck.

wsdl2java does this:

* &lt;complexType name=""ItemProperty"">
 *   &lt;complexContent>
 *     &lt;restriction base=""{http://www.w3.org/2001/XMLSchema}anyType"">
 *       &lt;sequence>
 *         &lt;element name=""Value"" type=""{http://www.w3.org/2001/XMLSchema}anyType"" minOccurs=""0""/>
 *       &lt;/sequence>


So is has the concept of ""anyType"".  Is this available in JavaScript?
","21/Aug/09 16:33;bmargulies;What code would you like? That's my question.

If it meant anyType, it should have said so: type=""xsd:anyType""

I will look into the possibility that the type element of an element defaults to anyType.

I will look into whether I have the substrate in place to handle anyType.
","21/Aug/09 16:40;ergouser; In this case the assumption of ""anyType"" seems valid, for example:

     <s:complexType name=""ArrayOfAnyType"">
        <s:sequence>
          <s:element minOccurs=""0"" maxOccurs=""unbounded"" name=""anyType"" nillable=""true""/>
        </s:sequence>
      </s:complexType>

Doesn't have a type, but seems to hint pretty strongly that the type should be ""anyType"".

Since the Java generation generates ""anyType"" then JavaScript would also be consistent with that code generation.  So I would say that, if possible, defaulting to ""anyType"" is the best behavior.
","21/Aug/09 16:45;bmargulies;I found this:

The default when no simple type definition is referenced or provided is the - simple ur-type definition- , which imposes no constraints at all.
","21/Aug/09 16:49;bmargulies;r806638 treats no type specification as 'anyType'.
",24/Aug/09 17:23;ergouser;Thanks for the quick response.  I confirm that the fix resolves the problem of no code being generated.,,,,,,,,,,,,,,,,,,,,,,,
JMS Connections are not closed when JCA recycles CXF proxy,CXF-2398,12433364,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,seumassoltysik,seumassoltysik,18/Aug/09 18:50,15/Jun/16 19:39,14/Mar/19 02:29,28/Sep/09 20:49,2.1,,,,,,,,,,,,,,2.1.7,2.2.4,,,Integration,,,,,,0,,,,"When close() is called on JCA ConnectionHandler, there is no cleanup of the underlying client proxy and its transport. Specfically when the JCA outbound use case is using JMS, JMS connections are not being closed. ",,,,,,,,,,,,,,,,,18/Aug/09 18:53;seumassoltysik;CXF-2398.patch;https://issues.apache.org/jira/secure/attachment/12416904/CXF-2398.patch,21/Aug/09 04:00;seumassoltysik;CXF-2398.patch2;https://issues.apache.org/jira/secure/attachment/12417213/CXF-2398.patch2,,,,,2.0,,,,,,,,,,,,,,,,,,,,2009-08-21 16:46:57.87,,,no_permission,,,,,,,,,,,,,113822,,,Fri Aug 21 20:43:16 UTC 2009,,,,,,0|i0cv0f:,72968,,,,,,,,18/Aug/09 18:53;seumassoltysik;Patch allows JCA to call Client.destroy() which in turn will close the underlying conduit. JMSConduit.close() is modified to ensure that connection is destroyed in the case where SingleConnectionFactory is being used.,"21/Aug/09 03:57;seumassoltysik;Further testing and reading of the JCA spec indicate that destroying the client proxy when close is called on the ManagedConnection handle returned by ManagedConnection.getConnection() is not appropriate. Doing so causes the proxy to be destroyed more often than necessary. According to the spec, close() is called on the handle proxy created by ManagedConnection.getConnection() before the ManagedConnection is recycled for pooling. Destroying the client proxy at this point is premature. The client proxy itself should be considered the underlying resource and should only be destroyed when the ManagedConnection is itself destroyed. In addition, there is no need to create a client proxy each time getConnection() is called. Each ManagedConnection only requires a single client proxy which in turn can be wrapped by a Connection proxy each time getConnection() is called.",21/Aug/09 04:00;seumassoltysik;Patch to fix modify how client proxy is destroyed in ManagedConnection.,"21/Aug/09 16:46;wtam;While the new patch CXF-2398.patch2 addresses the problem (of prematurely destroying clients) introduced CXF-2398.patch, the new patch also raises new issues/questions.

* Creating more than one client proxy per ManagedConnectionImpl.getConnection(subject, spec) method call is needed if we are going to support Jee credential mapping.  Currently, the subject is only saved in the handles map for reporting the subject of the associated handle in metadata (the new patch will break this, btw)  but the subject could be used as credential to create a client proxy connection handle in the future.   FYI, If you look at ManagedConnectionFactoryImpl.matchManagedConnections(), it intentionally skips the subject as a matching criteria (so the application server would call ManagedConnectionImpl.getConnection(subject, spec) with different subjects).   I'd  recommend not to change it.

* I think what prompted the change was the observation of too many proxies getting created.  It is a problem in the  ManagedConnectionImpl.getConnection(subject, spec) method that does not check the subject.  We should not create new proxy if there is one already created for a given subject.  We could so something like this in getConnection() to fix it.

{code}

        Object handle = null;
        for (Map.Entry<Object, Subject> entry : handles.entrySet()) {
            if (subject == null) {
                if (entry.getValue() == null) {
                    handle = entry.getKey();
                    break;
                }
            } else {
                if (subject.equals(entry.getValue())) {
                    handle = entry.getKey();
                    break;
                }
            }
        }
 
        // only create a new handle, if hande is null
{code}

* I think it is fine to have the ManagedConnectionImpl.destroy() to destroy client proxies.  What about the cleanup() method? The JCA spec 6.5.4.4 says we should invalidate all handles but at the same time it says cleanup() should not close physical pipe.  It does not fit well in our model because we invalidate handle by destroying client (thus, closing connection).    Right now, we are not invalidating handles.  

* So, if you take my advice in the first bullet, we would move the closed handle from handles map to another collection (say, closedHandles) in handleCloseMethod().

{code}

handles.remove(proxy);
closedHandles.add(proxy);

{code}

When destroying the proxies, we just need to make sure we destroy the closedHandles as well.


  ","21/Aug/09 17:58;seumassoltysik;I understand your comments regarding a proxy per subject. I would say leave it as is for now and open up a jira for the requirement to support the security issues you mentioned. However, I disagree with your statement regarding cleaning up the proxies in ManagedConnection.cleanup(). Per section 6.5.4.4 of the spec:
""It invokes ManagedConnection.cleanup when it has to invalidate all
connection handles associated with this ManagedConnection instance and put the
ManagedConnection instance back in to the pool.""
This means that if cleanup() were to destroy the proxies then they would be destroyed each time a ManagedConnection was recycled to the pool. Not very efficient. The spec talks about the need to hold onto underlying connection resources when a ManagedConnection is recycled. In our case, these resources are not so clear, but I would contend that the ClientProxy is essentially the closest thing to the kind of resources that the spec is talking about. Thus it makes sense to hold onto the proxy/proxies until the ManagedConnection is no longer needed and destroy() is called.","21/Aug/09 18:19;wtam;My point regarding the cleanup() is either way (destroy client or not). we are not 100% compliant with the spec because we either leave the handle as ""validate"" or we close the connection.  I agree with you that destroying the client in cleanup is not efficient (I have retrieved my opinion to invoke cleanup before your comment).  However, the current cleanup method needs update if we intent to preserve the clients.    (i.e. it should not clear the handles map).    That said, we can revisit the handles map when we look at the ""proxy per subject"" issue.","21/Aug/09 18:35;wtam;Regarding to proxy per subject issue.  Sounds like you are confident with the patch,   We can certainly revisit the proxy per subject issue.","21/Aug/09 18:53;seumassoltysik;Keep in mind that the following structure:
Handle proxy wraps Client proxy wraps Client

As you stated from the spec: ""6.5.4.4 says we should invalidate all handles but at the same time it says cleanup() should not close physical pipe""

For our connector, i chose to treat the Client/ClientProxy as the pipe and the Handle proxy as the handle. The pipe(Client)  is not destroyed on cleanup() but the handles are released from the map and thus made invalid. So when cleanup is called, the client remains valid, but the handles are invalid. New handles are created when the ManagedConnection is re-used and getConnection() is called again.","21/Aug/09 19:20;wtam;OK.  I view it differently.  The problem with treating handle as you have described is:  if my application calls connection.close(), the application can still invoke target service without getting an exception until suddenly the application server calls destroy() on the ManagedConnection.   That's not good.

In fact, the handle (i.e. the connection returned by CXFConnectionFactory) is not being invalidated after cleanup() is called, the application can still call connection.getService() AND invoke the service without problem.  That certainly does not comply to 6.5.4.4.  I guess it is a pre-existed issue.


","21/Aug/09 19:32;seumassoltysik;6.5.4.4
""The container always drives the cleanup of a ManagedConnection instance. The
container keeps track of created connection handles in an implementation specific
mechanism. It invokes ManagedConnection.cleanup when it has to invalidate all
connection handles associated with this ManagedConnection instance and put the
ManagedConnection instance back in to the pool. This may be called after the end
of a connection sharing scope or when the last associated connection handle is closed
for a ManagedConnection instance.""

My reading of this is that it is up to the container to make sure that after close() is called, the handles will not longer be used. However, to be sure, when close() is called on the handle we could set a member variable to indicate that the handle has been closed and any further calls to invoke() on the proxy handler could throw an exception.","21/Aug/09 20:43;wtam;I don't think we are reading it any differently but It says this right in your quote:

""It (the container) invokes ManagedConnection.cleanup when it has to invalidate all
connection handles associated with this ManagedConnection instance ...""

It clearly mandates that it is JCA connector's responsibility to invalidate all the handles when ManagedConnection.cleanup().  You could invalidate individual handle in handleCloseMethod() upon connection.close() which is driven by the application but we are still required to invalidate all the handles in cleanup() which is driven by container/application server.

The only question is what constitutes a ""handle"" and thus what should be invalidated.

Your view: 

the target service proxy should NOT be invalidated when the associated handle is closed.

My view: 

the target service proxy should be invalidated when the associated handle is closed.  

When the application closes a connection, we should not allow the application to access any resource associated with the closed connection.  I think it makes the contract much more clear and intuitive.  Otherwise, how would you document how long the target service (client proxy) can remain usable after a connection has been closed?   

I think the intention for your quotation is to point out that there is a window between the application calls connection.close() and the container calls ManagedConnection.cleanup().  True, but the window is tiny comparing with the window when ManagedConnection.destroy() is called.  We could add a member in the handle similar to your suggestion but it also blocks invocation made to the target service if the associated handle has been closed.  Then, there would be no window.
",,,,,,,,,,,,,,,,,,,,
wsdl2java generates incorrect code when same element in request and reply,CXF-2394,12433220,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,,vvvanlerb,vvvanlerb,17/Aug/09 09:21,05/Oct/09 19:37,14/Mar/19 02:29,19/Aug/09 15:29,2.1.4,,,,,,,,,,,,,,2.1.6,,,,Tooling,,,,,,0,,,,"I am working on a WSDL and related xsd files provided by a third party.

In this WSDL,  the root element of the message matches with the name of the operation.
So the Web service is recognized as ""wrapper"" web services style by Cxf (the @SOAPBinding annotation
is not present so the ""wrapper"" default is taken)

I have created a simple wsdl/xsd to reproduce the problem I am facing.
In fact, the request and the response have both a <xs:element> with the same name (""options"" in my sample)
The problem is that the ""options"" sub-tree is different in the request and in the response.
The generated code is as follows:
(extract)
    public void addOptionRequest(
        @WebParam(mode = WebParam.Mode.INOUT, name = ""options"", targetNamespace = ""http://xml.testvv.com/AddOptionReply_1_0"")
        javax.xml.ws.Holder<com.testvv.xml.addoptionreply_1_0.AddOptionReply.Options> options,
		...
		
Where addOptionRequest is my ""operation"".

The problem is that the ""options"" generated is the one from the reply. So I am not able to create my request
""options"" to call my webservice.

Is this a bug or should I use a special option to have the webservices recognized as ""non-wrapper""
(if such an option exist, I haven't found it)
Is the bug fix in a newer version of Cxf?

Note: I have tried to rename the operation in the wsdl (in order to have a different operation name than
the root element of the schema) and in this case, the following annotation appears @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
and everything goes well.

The problem is that as the WSDL/XSD are provided by a third party, I should not change them.

Any help would be great

Valerie
","Maven version: 2.0.8
Java version: 1.5.0_17
Maven plugin ""cxf-codegen-plugin"" (version 2.1.4) with goal ""wsdl2java"".
",,,,,,,,,,,,,,,,17/Aug/09 09:33;vvvanlerb;wsdlToBePosted.zip;https://issues.apache.org/jira/secure/attachment/12416760/wsdlToBePosted.zip,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2009-08-19 15:29:34.474,,,no_permission,,Unknown,,,,,,,,,,,113818,,,Wed Aug 19 15:29:34 UTC 2009,,,,,,0|i0v0lj:,179070,,,,,,,,17/Aug/09 09:33;vvvanlerb;To reproduce the problem: mvn install in the unzipped folder,"19/Aug/09 15:29;dkulp;
This was resolved in 2.1.6 (maybe 2.1.5) although with your wsdl, you would need to add either a jaxb binding file or add:

<autoNameResolution>true</autoNameResolution>

to the wsdlOptions in the pom.xml.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
wsdl2java generates the wrong package name from the namespace,CXF-2392,12433021,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,dkulp,abarto,abarto,13/Aug/09 19:43,11/Oct/10 14:44,14/Mar/19 02:29,14/Aug/09 20:52,2.2.3,,,,,,,,,,,,,,2.3,,,,,,,,,,0,,,,"I'm trying to generate a service from a WSDL (and related Schemas) that contains a namespace that ends with ""v1.0"". When the tool generates the Java packages, those end in ""v1"" instead of ""v1_0"".","Windows XP Professional SP2, J2SE 1.6.0_16",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-08-14 20:52:30.839,,,no_permission,,,,,,,,,,,,,113816,,,Fri Aug 14 20:52:30 UTC 2009,,,,,,0|i1aej3:,268820,,,,,,,,"14/Aug/09 20:52;dkulp;
Not backporting to 2.2.x and earlier as it would completely change the generated code which is a definite incompatibility. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Enums using fromString() but jaxb creates fromValue(),CXF-2390,12432813,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,sergey_beryozkin,iec290,iec290,11/Aug/09 18:28,12/Oct/09 20:45,14/Mar/19 02:29,12/Aug/09 13:23,2.2.2,,,,,,,,,,,,,,2.2.4,2.3,,,JAX-RS,,,,,,0,,,,"Let's say you have an xsd file that defines an enum.

  <xs:simpleType name=""timezone"">
    <xs:restriction base=""xs:string"">
      <xs:enumeration value=""Europe/London"" />
      <xs:enumeration value=""America/New_York"" />
    </xs:restriction>
  </xs:simpleType>

When xjc (jaxb) runs and creates a Java enum for this, it gives the Enum instances slightly different names, but makes the underlying value available.

@XmlType(name = ""timezone"")
@XmlEnum
public enum Timezone {

    @XmlEnumValue(""Europe/London"")
    EUROPE_LONDON(""Europe/London""),
    @XmlEnumValue(""America/New_York"")
    AMERICA_NEW_YORK(""America/New_York""),


It also creates a ""fromValue()"" method to retrieve an enum instance given the value.


Now say that you want to create a REST web service that has a Timezone as a QueryParam

@GET
@Path(""/test"")
public Result theTest(@QueryParam(""timezone"") Timezone timezone)

If you attempt to call this REST method with a timezone of ""Europe%2FLondon"", you'll get an exception 

javax.ws.rs.WebApplicationException: java.lang.IllegalArgumentException: No enum const class beans.Timezone.Europe/London
        at org.apache.cxf.jaxrs.utils.InjectionUtils.evaluateFactoryMethod(InjectionUtils.java:332)
        at org.apache.cxf.jaxrs.utils.InjectionUtils.handleParameter(InjectionUtils.java:284)
        at org.apache.cxf.jaxrs.utils.InjectionUtils.createParameterObject(InjectionUtils.java:649)
        at org.apache.cxf.jaxrs.utils.JAXRSUtils.readQueryString(JAXRSUtils.java:763)

The InjectionUtils class has this logic:

// check for valueOf(String) static methods
        String[] methodNames = pClass.isEnum() 
            ? new String[] {""fromString"", ""valueOf""} 
            : new String[] {""valueOf"", ""fromString""};
        Object result = evaluateFactoryMethod(value, pClass, pType, methodNames[0]);
        if (result == null) {
            result = evaluateFactoryMethod(value, pClass, pType, methodNames[1]);
        }

Note that in the case of an Enum, it is trying to call ""fromString()"" (which doesn't exist), and failing that, it tries to call ""valueOf()"", which would work if the client had passed EUROPE_LONDON as the value.

Perhaps different versions of xjc/jaxb create fromValue and some create fromString().  I'm not sure.  But clearly some versions of jaxb create a method called fromValue().

The net result is that the service doesn't actually work if you pass it the value as defined in the restriction.  Can injection utils be changed to include an attempt to use fromValue() as well?","CXF version 2.2.2
Jaxb version 2.1.9 ? Not positive on this",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-08-12 13:23:03.462,,,no_permission,,,,,,,,,,,,,113814,,,Wed Aug 12 13:23:03 UTC 2009,,,,,,0|i0v0mv:,179076,,,,,,,,"12/Aug/09 13:23;sergey_beryozkin;Will merge to 2.2.4-SNAPSHOT a bit later
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
patches for the client part of the jaxrs frontend,CXF-2389,12432807,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Trivial,Fixed,,philippe.merle,philippe.merle,11/Aug/09 17:30,05/Oct/09 19:37,14/Mar/19 02:29,12/Aug/09 11:52,2.2.3,,,,,,,,,,,,,,2.2.3,2.3,,,JAX-RS,,,,,,0,,,,"Hi,

I am integrating the Apache CXF 2.2.3 jaxrs frontend into the FraSCAti platform (an SCA implementation).
During this work, I found some issues in the ClientProxyImpl class. See the attached patched ClientProxyImpl class and a diff file.

The patch in method setRequestHeaders() around line 255 is for the case a method is annotated with @Produces. I think that produce types if defined must be put in request headers else text/plain or application/xml must be put.

I am not sure but perhaps the loop in line 268 must be moved outside the if statement.

The patch in method handleForm() at line 354 deals with the case where the type of parameters is not String, e.g. an Integer, a Char, etc.

The last patch in method doChainedInvocation() at line 398 calls the handleForm() method when required.

I hope these patches are adequate and could be integrated into a future release of Apache CXF.

Best regards and A+
Philippe Merle
",,86400,86400,,0%,86400,86400,,,,,,,,,,11/Aug/09 17:31;philippe.merle;ClientProxyImpl.diff;https://issues.apache.org/jira/secure/attachment/12416223/ClientProxyImpl.diff,11/Aug/09 17:31;philippe.merle;ClientProxyImpl.java;https://issues.apache.org/jira/secure/attachment/12416222/ClientProxyImpl.java,,,,,2.0,,,,,,,,,,,,,,,,,,,,2009-08-12 11:52:15.816,,,no_permission,,,,,,,,,,,,,113813,,,Wed Aug 12 11:52:15 UTC 2009,,,,,,0|i14dxj:,233720,,,,,,,,"12/Aug/09 11:52;sergey_beryozkin;Hi Philippe

Thanks for your patch, it's been applied, I added a couple of tests as well. 

I haven't applied your first update as is but instead fixed a typo in the existing code (getConsumeTypes was checked by mistake), due to the fact that oper.getProducesTypes() always returns non-empty list, with */* if no annotations have been applied.
I also refactored the code slightly to make it clearer why accept headers were set inside an if loop

The last update seemed equivalent to what was there (in doChainedInvocations()) but I thought your code was cleaner so I applied it too. 

thanks, Sergey",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
code formatting errors on JAX-RS documentation page,CXF-2388,12432734,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,byarger,byarger,11/Aug/09 02:41,28/Sep/09 20:59,14/Mar/19 02:29,12/Aug/09 20:19,,,,,,,,,,,,,,,Invalid,,,,Documentation,,,,,,0,,,,The JAX-RS documentation page (http://cwiki.apache.org/CXF20DOC/jax-rs.html) has messed up code formatting.  Everything is formatting to like 15 characters for some reason.  This page appears to have last been edited on Aug 5th by Sergey Beryozkin,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-08-11 03:15:21.157,,,no_permission,,,,,,,,,,,,,113812,,,Wed Aug 12 20:19:51 UTC 2009,,,,,,0|i0v1sn:,179264,,,,,,,,"11/Aug/09 03:15;dkulp;This is caused by the broken ""Auto Export"" plugin in the latest confluence upgrade.   It tends to do this to code boxes.   The only way to ""fix"" (that I know of) it is to login as Admin and force a re-export of the entire space (which I've done).

I'm going to leave this open, although I may change the desription/title.   Longer term, I think we need to get a ""real"" look and feel with out own style sheets and such to no rely on this broken behavior.    Looking at the auto-export stuff in the camel space (http://camel.apache.org/cxf.html), I'm not seeing the scroll bars and such so that is probably the way to go.","12/Aug/09 20:19;dkulp;
Completely updated the look and feel and auto-export stuff which should keep this fixed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
abdera-extensions-main and abdera-i18n are required by cxf-bundle-minimal but not present in any repository,CXF-2386,12432675,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,deki,deki,10/Aug/09 11:20,01/Feb/10 19:02,14/Mar/19 02:29,16/Dec/09 22:21,2.2.3,,,,,,,,,,,,,,2.1.9,2.2.6,,,JAX-RS,,,,,,0,,,,"I have updated an application with cxf-bundle-minimal from 2.2 to 2.2.3. Build fails with:

Missing:
----------
1) org.apache.abdera:abdera-i18n:jar:0.4.0-incubating

  Try downloading the file manually from the project website.

  Then, install it using the command:
      mvn install:install-file -DgroupId=org.apache.abdera -DartifactId=abdera-i18n -Dversion=0.4.0-incubating -Dpackaging=jar -Dfile=/path/to/file

  Alternatively, if you host your own repository you can deploy the file there:
      mvn deploy:deploy-file -DgroupId=org.apache.abdera -DartifactId=abdera-i18n -Dversion=0.4.0-incubating -Dpackaging=jar -Dfile=/path/to/file -Durl=[url] -DrepositoryId=[id]

  Path to dependency:
        1) ...
        2) org.apache.cxf:cxf-bundle-minimal:jar:2.2.3
        3) org.apache.abdera:abdera-i18n:jar:0.4.0-incubating

2) org.apache.abdera:abdera-extensions-main:jar:0.4.0-incubating

  Try downloading the file manually from the project website.

  Then, install it using the command:
      mvn install:install-file -DgroupId=org.apache.abdera -DartifactId=abdera-extensions-main -Dversion=0.4.0-incubating -Dpackaging=jar -Dfile=/path/to/file

  Alternatively, if you host your own repository you can deploy the file there:
      mvn deploy:deploy-file -DgroupId=org.apache.abdera -DartifactId=abdera-extensions-main -Dversion=0.4.0-incubating -Dpackaging=jar -Dfile=/path/to/file -Durl=[url] -DrepositoryId=[id]

  Path to dependency:
        1) ...
        2) org.apache.cxf:cxf-bundle-minimal:jar:2.2.3
        3) org.apache.abdera:abdera-extensions-main:jar:0.4.0-incubating

Regarding to this malinglist thread http://www.nabble.com/Abdera-dependencies-td24264687.html scope should be provided. 

I have to exclude the abdera dependencies to get it build.

<exclusions>
	<exclusion>
		<groupId>org.apache.abdera</groupId>
		<artifactId>abdera-extensions-main</artifactId>
	</exclusion>
	<exclusion>
		<groupId>org.apache.abdera</groupId>
		<artifactId>abdera-i18n</artifactId>
	</exclusion>
</exclusions>",Maven 2.2.0,,,,,,,,,,,,,,CXF-1561,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-08-11 07:56:05.173,,,no_permission,,,,,,,,,,,,,113810,,,Wed Dec 16 22:21:43 UTC 2009,,,,,,0|i0v0mf:,179074,,,,,,,,"11/Aug/09 07:56;sergey_beryozkin;Alternatively you can add this repository info :

<repositories>
        <repository>
            <id>apache.incubating</id>
            <name>Apache Incubating Repository</name>
            <url>http://people.apache.org/repo/m2-incubating-repository</url>
        </repository>
</repositories>

","16/Dec/09 22:21;dkulp;
Abdera is now in central.   Thus, it should resolve without excludes or any repository entry now.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SOAPFaultExcption thrown instead of a WebServiceException,CXF-2384,12432663,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,niekos,niekos,10/Aug/09 08:49,11/Oct/10 14:52,14/Mar/19 02:29,05/Oct/10 17:21,2.2.2,,,,,,,,,,,,,,2.2.7,,,,,,,,,,0,,,,"When the connection of the webservice is lost we get a SoapFaultException instead of of a WebServiceException. We use the dispachter in the following way:
		

	Service service = Service.create(SERVICE_NAME);
	service.addPort(PORT_NAME, SOAPBinding.SOAP11HTTP_BINDING, url.toString());
	Dispatch<SOAPMessage> dispatch = service.createDispatch(PORT_NAME, SOAPMessage.class, Service.Mode.MESSAGE);
	SOAPMessage response = dispatch.invoke(request);

Looking in the API  (http://java.sun.com/javase/6/docs/api/javax/xml/ws/Dispatch.html#invoke(T)), there is specified that any communication problem will cause in a WebServiceException. To our point of view this is a bug in cxf.","jdk1.6, ubuntu 9.10",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-09-14 14:13:12.387,,,no_permission,,,,,,,,,,,,,113809,,,Tue Oct 05 17:21:27 UTC 2010,,,,,,0|i0a62v:,57258,,,,,,,,14/Sep/09 14:13;a3.aan;We are still facing this problem. Will there be any response?,"17/Feb/10 12:23;niekos;We have upgraded to cxf 2.2.6 but still get a SOAPFaultExcpetion instead of a WebServiceException when the service is not running. 



","17/Feb/10 18:36;dkulp;
OK.   Better testcase written and bug fixed.","11/Aug/10 12:40;niekos;I test the solution against 2.2.7 and 2.2.9, it seems still not fixed.

I test the the solution by calling a not running service. We still get a SOAPFaultException which means that there is a SOAPFault. Since the service cannot be called there is no SOAPFault. The correct solution should be throw an exception that is a instance of WebServiceException based on a ConnectionException in stead of throwing an SOAPFaultException based on a ConnectionException.


So here a CXF code snippet.

class: org.apache.cxf.jaxws.DispatchImpl

...
    private RuntimeException mapException(Exception ex) {
        if (ex instanceof Fault && ex.getCause() instanceof IOException) {
            throw new WebServiceException(ex.getMessage(), ex.getCause());
        }

should be changed to some like:
...
    private RuntimeException mapException(Exception ex) {
        if (ex instanceof Fault && (ex.getCause() instanceof IOException || ex.getCause() instanceof ConnectionException)) {
            throw new WebServiceException(ex.getMessage(), ex.getCause());
        }

Maybe there is no need (anymore to check against an IOExcption","11/Aug/10 18:13;dkulp;

You'll probably need to provide a full test case.  If you see the test that was added for this:

http://svn.apache.org/viewvc/cxf/trunk/systests/jaxws/src/test/java/org/apache/cxf/systest/dispatch/DispatchClientServerTest.java?view=markup

(line 128) you can see it specifically asserts that it's not a SOAPFaultException.

","12/Aug/10 07:01;niekos;The problem is that the test does not test the scenario when no server is running. You are testing against a webservice against a running service and an invallid port.

Using the same test without running the service should will result in the point mentioned above. 

Since I am not succeed to run the cxf test cases using maven it is not so easy to provide the testcase.","12/Aug/10 16:12;dkulp;
If I comment out the line that starts the server, the test also passes.  

I've also added a test in the same class that tests the case where it's using a correct port, but a path to where a service isn't running. (aka: gets a 404 return code back)    That is also passing with a WebServiceException wrappering an IOException.

Thus, everything looks like it's  working correctly from my point of view.   To do much of anything else, we'll really need a  complete test case.","02/Sep/10 12:23;janstey;Hi Dan,

I don't want to make this any more confusing but there seems to be a mismatch between the spec and the javadoc... the spec says the following about a failed dispatch:

{quote}
4.3.1 Configuration
...
Conformance (Failed Dispatch.invoke): When an operation is invoked using an invoke method, an
implementation MUST throw a WebServiceException if there is any error in the configuration of the
Dispatch instance or a ProtocolException if an error occurs during the remote operation invocation.
{quote}

whereas the javadoc, as was pointed out in an earlier comment, says:

{quote}
Throws:
WebServiceException - If a fault occurs during communication with the service
WebServiceException - If there is any error in the configuration of the Dispatch instance
{quote}

Technically, a ProtocolException IS a WebServiceException but you would have thought that the javadoc would have said that

{quote}
Throws:
ProtocolException - If a fault occurs during communication with the service
WebServiceException - If there is any error in the configuration of the Dispatch instance
{quote}

Wondering if this is a ""bug"" in the javadoc or if they just loosened the requirement a bit.

Any thoughts?

Cheers,
Jon","02/Sep/10 15:11;dkulp;

My gut feeling says it's a bug in the javadoc.  Normally, you wouldn't list the same exception twice in the javadoc throws.","05/Oct/10 17:21;dkulp;
Re-marking this as resolved as the tests pass.

HOWEVER, this may also be a ""won't fix"" as I think I know the issue.  CXF delays connecting until a buffer (defaults to 4K fills) or the message finishes writing so that we can flip to non-chunked mode for small messages.   If the connection is made during the writing of larger requests, we may get the exceptions wrapped in a variety of different exceptions (like JAXB exceptions or Stax exceptions and such) and thus may be difficult or impossible to detect.  The workaround is to configure in a larger buffer size.   See ChunkingThreshold info at:
https://cwiki.apache.org/confluence/display/CXF20DOC/Client+HTTP+Transport+(including+SSL+support)",,,,,,,,,,,,,,,,,,,,,
Attachments gone when in Multi-Threaded client,CXF-2381,12432249,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,jriemsch,jriemsch,05/Aug/09 07:26,12/Oct/09 20:44,14/Mar/19 02:29,05/Aug/09 19:46,,,,,,,,,,,,,,,2.1.7,2.2.4,,,Transports,,,,,,0,,,,"Multi-Threaded client using a web-services that returns one or multiple attachments (MTOM). Client stubs are not shared between threads. HTTP-Binding and WS-Addressing is used.
From time to time attachments are missing is the response. After playing around with this for some time I found that data that is read from the PushbackInputStream often gets unread shortly afterwards. When the problem occurred this did not happen, causing the AttachmentDeserializer to ""think"" that there are fewer attachments. After more digging, I found this member in HTTPConduit:

    private static final byte BUFFER[] = new byte[1024];

This is only used in the HTTPConduit.close(). However, it is shared between all instances of HTTPConduit and it seems to be possible that close() gets called by multiple threads. Ensuring that the buffer is created within close() seems to solve the problem, however, there are most likely better solutions to this.",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113807,,,Wed Aug 05 14:06:07 UTC 2009,,,,,,0|i0cv13:,72971,,,,,,,,"05/Aug/09 14:06;jriemsch;I should add that I have reproduced this problem with CXF 2.1.4, 2.1.6 and 2.2.2.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Cannot use custom client TLS settings when creating javax.xml.ws.Service from ""https://...?wsdl"" URL when WSDL contains https imports",CXF-2380,12432184,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,fdushin,fdushin,04/Aug/09 18:21,12/Oct/09 20:44,14/Mar/19 02:29,05/Aug/09 19:47,2.2.3,,,,,,,,,,,,,,2.1.7,2.2.4,,,JAX-WS Runtime,,,,,,0,,,,"(See enclosed test case, based on WSDL-first HTTPS sample)

I have a CXF client and server.  The server listens on https and publishes its WSDL at ""https://...?wsdl"".

The scenario is also such that the WSDL published at this address has a wsdl:import, also with an https:// address, as in:

<?xml version='1.0' encoding='UTF-8'?><wsdl:definitions ...>
  <wsdl:import location=""https://localhost:9001/demo/secure?wsdl=Greeter.wsdl"" namespace=""http://apache.org/hello_world_soap_http"">
    </wsdl:import>
  ...
</wsdl:definitions>



The client is designed so that:

1. It bootstraps the client proxy using the live ""https://...?wsdl"" URL at the service endpoint
2. The bus is programatically configured to use a custom resource resolver (see client source code in enclosed test case), so that custom key material (trusted certificates, in this case) is used when resolving the resource.  I.e., we are NOT relying on the JVM's trust-store to establish trust with the server (or so is our desire).


The client will fail to download all of the WSDL during the call to Service.create.  The stacktrace is:

javax.xml.ws.WebServiceException: org.apache.cxf.service.factory.ServiceConstructionException: Failed to create service.
	at org.apache.cxf.jaxws.ServiceImpl.<init>(ServiceImpl.java:149)
	at org.apache.cxf.jaxws.spi.ProviderImpl.createServiceDelegate(ProviderImpl.java:65)
	at javax.xml.ws.Service.<init>(Service.java:36)
	at javax.xml.ws.Service.create(Service.java:116)
	at demo.hw_https.client.Client.call(Client.java:84)
	at demo.hw_https.client.Client.main(Client.java:76)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:592)
	at org.codehaus.mojo.exec.ExecJavaMojo$1.run(ExecJavaMojo.java:283)
	at java.lang.Thread.run(Thread.java:613)
Caused by: org.apache.cxf.service.factory.ServiceConstructionException: Failed to create service.
	at org.apache.cxf.wsdl11.WSDLServiceFactory.<init>(WSDLServiceFactory.java:93)
	at org.apache.cxf.jaxws.ServiceImpl.initializePorts(ServiceImpl.java:204)
	at org.apache.cxf.jaxws.ServiceImpl.<init>(ServiceImpl.java:147)
	... 11 more
Caused by: javax.wsdl.WSDLException: WSDLException (at /wsdl:definitions/wsdl:import): faultCode=PARSER_ERROR: Problem parsing 'https://localhost:9001/demo/secure?wsdl=Greeter.wsdl'.: javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
	at com.ibm.wsdl.xml.WSDLReaderImpl.getDocument(Unknown Source)
	at com.ibm.wsdl.xml.WSDLReaderImpl.parseImport(Unknown Source)
	at com.ibm.wsdl.xml.WSDLReaderImpl.parseDefinitions(Unknown Source)
	at com.ibm.wsdl.xml.WSDLReaderImpl.readWSDL(Unknown Source)
	at com.ibm.wsdl.xml.WSDLReaderImpl.readWSDL(Unknown Source)
	at com.ibm.wsdl.xml.WSDLReaderImpl.readWSDL(Unknown Source)
	at com.ibm.wsdl.xml.WSDLReaderImpl.readWSDL(Unknown Source)
	at com.ibm.wsdl.xml.WSDLReaderImpl.readWSDL(Unknown Source)
	at org.apache.cxf.wsdl11.WSDLManagerImpl.loadDefinition(WSDLManagerImpl.java:210)
	at org.apache.cxf.wsdl11.WSDLManagerImpl.getDefinition(WSDLManagerImpl.java:175)
	at org.apache.cxf.wsdl11.WSDLServiceFactory.<init>(WSDLServiceFactory.java:91)
	... 13 more
Caused by: javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
	at com.sun.net.ssl.internal.ssl.Alerts.getSSLException(Alerts.java:150)
	at com.sun.net.ssl.internal.ssl.SSLSocketImpl.fatal(SSLSocketImpl.java:1584)
	at com.sun.net.ssl.internal.ssl.Handshaker.fatalSE(Handshaker.java:174)
	at com.sun.net.ssl.internal.ssl.Handshaker.fatalSE(Handshaker.java:168)
	at com.sun.net.ssl.internal.ssl.ClientHandshaker.serverCertificate(ClientHandshaker.java:848)
	at com.sun.net.ssl.internal.ssl.ClientHandshaker.processMessage(ClientHandshaker.java:106)
	at com.sun.net.ssl.internal.ssl.Handshaker.processLoop(Handshaker.java:495)
	at com.sun.net.ssl.internal.ssl.Handshaker.process_record(Handshaker.java:433)
	at com.sun.net.ssl.internal.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:877)
	at com.sun.net.ssl.internal.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1089)
	at com.sun.net.ssl.internal.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1116)
	at com.sun.net.ssl.internal.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1100)
	at sun.net.www.protocol.https.HttpsClient.afterConnect(HttpsClient.java:402)
	at sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect(AbstractDelegateHttpsURLConnection.java:166)
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:960)
	at sun.net.www.protocol.https.HttpsURLConnectionImpl.getInputStream(HttpsURLConnectionImpl.java:234)
	at com.sun.org.apache.xerces.internal.impl.XMLEntityManager.setupCurrentEntity(XMLEntityManager.java:973)
	at com.sun.org.apache.xerces.internal.impl.XMLVersionDetector.determineDocVersion(XMLVersionDetector.java:184)
	at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:798)
	at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:764)
	at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:148)
	at com.sun.org.apache.xerces.internal.parsers.DOMParser.parse(DOMParser.java:250)
	at com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderImpl.parse(DocumentBuilderImpl.java:292)
	... 24 more
Caused by: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
	at sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:221)
	at sun.security.validator.PKIXValidator.engineValidate(PKIXValidator.java:145)
	at sun.security.validator.Validator.validate(Validator.java:203)
	at com.sun.net.ssl.internal.ssl.X509TrustManagerImpl.checkServerTrusted(X509TrustManagerImpl.java:172)
	at com.sun.net.ssl.internal.ssl.JsseX509TrustManager.checkServerTrusted(SSLContextImpl.java:320)
	at com.sun.net.ssl.internal.ssl.ClientHandshaker.serverCertificate(ClientHandshaker.java:841)
	... 42 more
Caused by: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
	at sun.security.provider.certpath.SunCertPathBuilder.engineBuild(SunCertPathBuilder.java:236)
	at java.security.cert.CertPathBuilder.build(CertPathBuilder.java:194)
	at sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:216)
	... 47 more


Discussion:

I believe what is happening here is that the com.ibm.wsdl.xml.WSDLReaderImpl.readWSDL operation is not respecting the resource resolver that's been configured in CXF, when loading imported WSDLs, but that's just a guess.  The reason I suspect this is that I have inserted printlns/breakpoints in the custom resource resolver, and we appear never to be calling resolve for the imported WSDL.


Test Case:

I'm submitting a test-case based on the wsdl-first https sample.

To reproduce, use maven as per the usual instructions:

mvn -Pserver
mvn -Pclient

Note that the client has been modified extensively in this sample.  It will first make a plain http call to the service, to ensure that the server is at least running and nominally configured correctly.  It will then attempt to connect over https, bootstrapping with the WSDL at the HTTPS service URL.  It also has some code for adding a custom resource resolver, which is needed to set the TLS parameters on the client connection to the ""https://...?wsdl"" URL.  (CXF is calling toString() the URL that's passed in to the Service.create operation, so that URL cannot carry the URLStreamHandler used to connect to the HTTPs URL.",,,,,,,,,,,,,,,,,04/Aug/09 18:24;fdushin;CXF-2380.tar.gz;https://issues.apache.org/jira/secure/attachment/12415507/CXF-2380.tar.gz,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2009-08-05 17:40:27.115,,,no_permission,,Advanced,,,,,,,,,,,113806,,,Wed Aug 05 17:40:27 UTC 2009,,,,,,0|i0cv1b:,72972,,,,,,,,"04/Aug/09 18:24;fdushin;Test case for CXF-2380.

Instructions:

1. Unpack, cd in CXF-2380
2. mvn -Pserver &
3. mvn -Pclient

","05/Aug/09 17:40;dkulp;
Fred,

I can reproduce it here and am testing a fix.  

That said, you can probably work around it by changing your config.   If you change:

<http:conduit name=""{http://apache.org/demos}SecureGreeterPort.http-conduit"">

to:

<http:conduit name=""https://localhost:9000/demo/secure.*"">

It will probably work.   With recent versions of CXF, we allow the conduits to be configured via URL wildcards and also have the wsdl loading and such use the conduits for https if possible.

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
mustUnderstand headers should be processed before endpoint dispatch,CXF-2379,12432176,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,dkulp,dkulp,04/Aug/09 16:15,11/Oct/10 14:44,14/Mar/19 02:29,04/Aug/09 17:33,,,,,,,,,,,,,,,2.3,,,,,,,,,,0,,,,"
Per soap spec:

The SOAP specification Part 1, section 2.4 (http://www.w3.org/TR/soap12-part1/#muprocessing) says:

Mandatory SOAP header blocks are presumed to somehow modify the semantics of other SOAP header blocks or SOAP body elements. Therefore, for every mandatory SOAP header block targeted to a node, that node MUST either process the header block or not process the SOAP message at all, and instead generate a fault.

Section 2.6 #3 (http://www.w3.org/TR/soap12-part1/#procsoapmsgs) says:

If one or more of the SOAP header blocks identified in the preceding step are not understood by the node then generate a single SOAP fault with the Value of Code set to ""env:MustUnderstand"" (see 5.4.8 SOAP mustUnderstand Faults). If such a fault is generated, any further processing MUST NOT be done. Faults relating to the contents of the SOAP body MUST NOT be generated in this step.


Thus, they should be faulted prior to endpoint being called.   However, there needs to be a way for an endpoint to say ""I'll handle this header"" for compatibility and easy migration from prior versions of CXF.   ",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113805,,,2009-08-04 16:15:09.0,,,,,,0|i14093:,231503,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CXF Maven Plugin fails to read WSDL file from classpath or jar file,CXF-2376,12432068,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,shsebast,shsebast,03/Aug/09 17:57,01/Feb/10 19:02,14/Mar/19 02:29,10/Dec/09 20:02,2.2.2,,,,,,,,,,,,,,2.1.9,2.2.6,,,Tooling,,,,,,1,,,,"The CXF maven plugin ""cxf-codegen-plugin""  fails to read WSDL files from a jar file deployed  on a maven repository whic was declared as a dependency by the webservice client project 

While setting the following for wsdlOption
                <wsdlOption>
                  <wsdl>classpath:/myfolder/myown.wsdl</wsdl>
                 ---
                 ----
                 </wsdlOption>

 the  build fails with the following error
      org.apache.cxf.wsdl11.WSDLRuntimeException: Fail to create wsdl definition from : file:/classpath:   /myfolder/myown.wsdl

",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113802,,,2009-08-03 17:57:18.0,,,,,,0|i14e3j:,233747,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Handle possible number format exception when reading primitive param,CXF-2374,12431937,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,dkulp,jorgew,jorgew,31/Jul/09 21:07,12/Oct/09 20:45,14/Mar/19 02:29,03/Aug/09 20:01,,,,,,,,,,,,,,,2.2.4,,,,JAX-RS,,,,,,0,,,,"We ran into this issue in JAX-RS:   A request to something like /path/
to/{id} where {id} is expected to be an integer would throw a
NumberFormatException in the case where we send something other than
an integer (/path/to/bla, for example).  The NumberFormatException
didn't find its way to our ExceptionMapper and resulted in an XMLFault
being serialized which is wrong.

The attached patch fixes things for us.  We simply capture the NFE and
resend it as a WebApplicationException -- we send a  404 when we're
dealing with path params and 400 otherwise.  The patch is against the
current trunk but honestly we've really only tested against 2.2.2 --
since that's what we're using :-)",,,,,,,,,,,,,,,,,31/Jul/09 21:08;jorgew;0001-Handle-possible-number-format-exception-when-reading.patch;https://issues.apache.org/jira/secure/attachment/12415180/0001-Handle-possible-number-format-exception-when-reading.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113800,,,2009-07-31 21:07:04.0,,,,,,0|i14e47:,233750,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Couple of issues with fault handling in JaxRS/REST,CXF-2373,12431895,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,eamonndwyer,eamonndwyer,31/Jul/09 13:40,12/Oct/09 20:45,14/Mar/19 02:29,31/Jul/09 20:26,2.2.3,,,,,,,,,,,,,,2.2.4,,,,JAX-RS,,,,,,0,,,,"1) The in fault interceptor chain is not being called on the clients
2) If a client throws an exception on the outbound interceptor chain the chain stops but later the client still invokes on the server.

I'll be submitting a potential patch fix soon.",,,,,,,,,,,,,,,,,31/Jul/09 13:40;eamonndwyer;JaxRSFaultHandling.Patch;https://issues.apache.org/jira/secure/attachment/12415123/JaxRSFaultHandling.Patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113799,,,2009-07-31 13:40:07.0,,,,,,0|i0v1jz:,179225,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WSSCTest fails with OutOfMemoryError with 64 bit jdk 5 on aix,CXF-2371,12431730,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,dkulp,peterjones,peterjones,29/Jul/09 19:15,31/Mar/10 14:09,14/Mar/19 02:29,30/Jul/09 17:52,,,,,,,,,,,,,,,2.2.4,,,,,,,,,,0,,,,"The WSSCTest seems to hit an OutOfMemoryError with the 64 bit jdk it creating the service for the 4th or 5th last of the IPingServices which are tested (usually at the _X_IPingService).   Looks like it's trying to parse the service wsdl at the point of running out of memory. 

Can work around the issue by splitting the number of tests to be run into two groups and running half the tests in one test method and half in another test method rather than testing all the services in a single loop in the one test.",64 bit jdk 5 aix,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-07-29 21:01:40.312,,,no_permission,,,,,,,,,,,,,113797,,,Wed Mar 31 14:09:22 UTC 2010,,,,,,0|i16vsv:,248284,,,,,,,,"29/Jul/09 21:01;dkulp;
Since they all use the same wsdl, this STRONGLY implies that the wsdl caching mechanism in WSDLManagerImpl isn't working on the IBM JDK.   Rather than fixing the symptom, is it possible for you to debug in and see if the caching is actually working?","29/Jul/09 23:03;peterjones;Hi Dan,

Looks like for this test, the WSDLManagerImpl cached the definition (and schemas) for each service the test calls... that is, the wsdl is cached under the following keys:

http://localhost:9001/SecureConversation_MutualCertificate10SignEncrypt_IPingService?wsdl
http://localhost:9001/AC_IPingService?wsdl
http://localhost:9001/ADC-ES_IPingService?wsdl
http://localhost:9001/_A_IPingService?wsdl
http://localhost:9001/_AD_IPingService?wsdl
... etc. etc.

So, it's caching it... repeatedly. :)
","30/Jul/09 13:53;dkulp;
Peter, 

I just committed a change to trunk that SHOULD fix this.   Can you test it?    Basically, it uses the wsdl that was used at code gen time and just overrides the endpoint address.   Thus, a single wsdl should be used and not-reparsed every time.

It would probably be good to get the other ws-* tests to do the same.   Would speed them up a bit.
","30/Jul/09 15:46;peterjones;Hi Dan,

This change works great for the aix box where I was seeing the problem.... no OutOfMemoryErrors running the test!  Thanks!","31/Mar/10 09:11;grexe;Dan,

We are facing the same problem (however independent of the JVM, both Sun and IBM show OutOfMemoryErrors eventually).
Could you please point me to the patch you committed?
I need a backport for JBossWS 3.1.1, as this is the last version supported under JBoss 4.2.3.
Do you have any info on this? Your help is greatly appreciated, thanks.","31/Mar/10 14:09;dkulp;
Gregor, 

Click on the ""Subversion Commits"" link just above the comments.   All the details are there.",,,,,,,,,,,,,,,,,,,,,,,,,
Error while parsing authorization header in DigestAuthSupplier,CXF-2370,12431701,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,jrvk,jrvk,29/Jul/09 15:08,04/Dec/09 22:34,14/Mar/19 02:29,02/Nov/09 18:08,2.1.4,,,,,,,,,,,,,,2.1.8,2.2.5,,,Transports,,,,,,0,,,,"If getAuthorizationForRealm() method in DigestAuthSupplier.java class  receives this authorization header it fails to parse it. Problem is ""=="" in the nonce.

Digest realm=""MyCompany realm."", qop=""auth"", nonce=""MTI0ODg3OTc5NzE2OTplZGUyYTg0Yzk2NTFkY2YyNjc1Y2JjZjU2MTUzZmQyYw==""",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113796,,,2009-07-29 15:08:56.0,,,,,,0|i13zfz:,231372,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Examples on wiki page for the cxf-codegen-plugin are wrong ,CXF-2369,12431628,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,,jmcginn,jmcginn,28/Jul/09 20:39,30/Jul/09 17:59,14/Mar/19 02:29,29/Jul/09 20:53,2.2.2,,,,,,,,,,,,,,Invalid,,,,Tooling,,,,,,0,,,,"Wiki page lists examples where defaulOptions are contained inside of wsdlOptions.  Apparently this is not correct.

http://cwiki.apache.org/CXF20DOC/maven-integration-and-plugin.html",N/A,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113795,,,2009-07-28 20:39:12.0,,,,,,0|i1ae3z:,268752,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
defaultOptions in cxf-codegen-plugin only works with wsdlRoot scanning,CXF-2368,12431626,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,dkulp,jmcginn,jmcginn,28/Jul/09 20:04,04/Dec/09 22:34,14/Mar/19 02:29,11/Nov/09 01:47,2.2.2,,,,,,,,,,,,,,2.2.5,,,,Tooling,,,,,,0,,,,"I setup the plug-in with defaultOptions + a wsdlOption and get the following stack trace:

java.lang.NullPointerException
        at java.io.File.<init>(File.java:222)
        at org.apache.cxf.maven_plugin.WSDL2JavaMojo.mergeOptions(WSDL2JavaMojo.
java:143)
        at org.apache.cxf.maven_plugin.WSDL2JavaMojo.execute(WSDL2JavaMojo.java:
195)

This appears to be happening at this line of code:
private void mergeOptions(List<WsdlOption> options) {
        File outputDirFile = testSourceRoot == null ? sourceRoot : testSourceRoot;
        for (WsdlOption o : wsdlOptions) {
            if (o.getOutputDir() == null) {
                o.setOutputDir(outputDirFile);
            }
            
            File file = new File(o.getWsdl()); <!------------------

I believe this method is merging default options with wsdl options, but the default options doesn't have a wsdl file those the File constructor fails.

I put a wsdl option in my default options and the exception went away and the code was generated.

My plugin config:

			<plugin>
				<groupId>org.apache.cxf</groupId>
				<artifactId>cxf-codegen-plugin</artifactId>
				<version>2.2.2</version>
				<executions>
					<execution>
						<id>generate-sources</id>
						<phase>generate-sources</phase>
						<configuration>
							<wsdlOptions>
								<defaultOptions>
									<validateWsdl>true</validateWsdl>
									<wsdl>src/main/wsdl/EquipmentService.wsdl</wsdl>
								</defaultOptions>
								<wsdlOption>
								 <bindingFiles> 
					              <bindingFile>src/main/wsdl/bindings/bindings.xjb</bindingFile> 
					          </bindingFiles>
									<wsdl>src/main/wsdl/EquipmentService.wsdl</wsdl>
								</wsdlOption>
							</wsdlOptions>
						</configuration>
						<goals>
							<goal>wsdl2java</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
","Windows XP, Eclipse 3.3.2 + m2eclipse plug-in ",,,,,,,,,,,,,,,,28/Jul/09 20:05;jmcginn;Equipment.xsd;https://issues.apache.org/jira/secure/attachment/12414791/Equipment.xsd,28/Jul/09 20:05;jmcginn;EquipmentService.wsdl;https://issues.apache.org/jira/secure/attachment/12414790/EquipmentService.wsdl,28/Jul/09 20:06;jmcginn;bindingMapping.xsd;https://issues.apache.org/jira/secure/attachment/12414792/bindingMapping.xsd,28/Jul/09 20:06;jmcginn;bindings.xjb;https://issues.apache.org/jira/secure/attachment/12414793/bindings.xjb,28/Jul/09 20:05;jmcginn;pom.xml;https://issues.apache.org/jira/secure/attachment/12414789/pom.xml,28/Jul/09 20:08;jmcginn;stacktrace.txt;https://issues.apache.org/jira/secure/attachment/12414794/stacktrace.txt,6.0,,,,,,,,,,,,,,,,,,,,2009-07-28 20:29:20.53,,,no_permission,,,,,,,,,,,,,113794,,,Wed Nov 11 01:47:48 UTC 2009,,,,,,0|i14eov:,233843,,,,,,,,28/Jul/09 20:05;jmcginn;pom + wsdl & xsd,28/Jul/09 20:06;jmcginn;binding files,28/Jul/09 20:08;jmcginn;full stacktrace,"28/Jul/09 20:29;dkulp;

This is a bug in the pom/plugin configuration.  (I wish Maven would report this error, but that's a Maven issue)

The ""defaultOptions"" element goes outside the wsdlOptions element.   Like:
                        <configuration>
                            <defaultOptions>
                                <validateWsdl>true</validateWsdl>
                            </defaultOptions>
                            <wsdlOptions>
                                <wsdlOption>
                                    <bindingFiles>
                                        <bindingFile>src/main/wsdl/bindings/bindings.xjb</bindingFile>
                                    </bindingFiles>
                                    <wsdl>src/main/wsdl/EquipmentService.wsdl</wsdl>
                                </wsdlOption>
                            </wsdlOptions>
                        </configuration>

That should resolve this for you.","28/Jul/09 20:41;jmcginn;Hey Daniel, thanks for the update,

Should I or someone update the wiki page then?

http://cwiki.apache.org/CXF20DOC/maven-integration-and-plugin.html
I was using these examples that led me down the bad config path.

Thanks

John

","28/Jul/09 20:42;jmcginn;Thanks Daniel, 

I put another ticket out there to fix the user guide on the wiki
http://cwiki.apache.org/CXF20DOC/maven-integration-and-plugin.html

This is where I got the bad syntax from.

John","28/Jul/09 20:49;jmcginn;I tried this and now my defaultOptions is being ignored,

My updated pom is this:

			<plugin>
				<groupId>org.apache.cxf</groupId>
				<artifactId>cxf-codegen-plugin</artifactId>
				<version>2.2.2</version>
				<executions>
					<execution>
						<id>generate-sources</id>
						<phase>generate-sources</phase>
						<configuration>
							<defaultOptions>
								<validateWsdl>true</validateWsdl>
								<bindingFiles> 
					              <bindingFile>src/main/wsdl/bindings/bindings.xjb</bindingFile> 
					          	</bindingFiles>
					          	<extraargs>
					          		<extraarg>-server</extraarg>
					          	</extraargs>
							</defaultOptions>
							<wsdlOptions>
								<wsdlOption>
									<wsdl>src/main/wsdl/EquipmentService.wsdl</wsdl>
								</wsdlOption>
							</wsdlOptions>
						</configuration>
						<goals>
							<goal>wsdl2java</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

It is ignoring all 3 default values I specified, -server, the jaxb bindings, and the validate wsdl.","29/Jul/09 20:57;dkulp;
The wiki page at:
http://cwiki.apache.org/CXF20DOC/maven-integration-and-plugin.html
 says the defaultOptions should work with the ""wsdlOptions"" specified wsdl, but it doesn't.   It only applies to wsdlOptions obtained by the directory scan using wsdlRoot with includes/excludes.    Not sure if this is a doc error or code error.   My gut feeling says it was MEANT to be a doc error, but it's definitely a good feature and thus is a code error.

In anycase, you can use the wsdlRoot form:

                            <wsdlRoot>src/main/wsdl</wsdlRoot>
                            <defaultOptions>
                                <validateWsdl>true</validateWsdl>
                                <bindingFiles>
                                    <bindingFile>src/main/wsdl/bindings/bindings.xjb</bindingFile>
                                </bindingFiles>
                                <extraargs>
                                    <extraarg>-server</extraarg>
                                </extraargs>
                            </defaultOptions>

","30/Jul/09 13:29;jmcginn;Thanks again Daniel, this is correct and works fine with the wsdlRoot.

John

","11/Nov/09 01:47;dkulp;
The default options are now merged into the configured options more or less as documented.",,,,,,,,,,,,,,,,,,,,,
ReplyDestinationName settings not used in JMSDestination,CXF-2363,12431556,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,dkulp,dkulp,28/Jul/09 00:41,03/Aug/09 20:07,14/Mar/19 02:29,28/Jul/09 01:32,2.1.5,2.2.1,2.2.2,,,,,,,,,,,,2.0.12,2.1.6,2.2.3,,Transports,,,,,,0,,,,"
The JMSDestination.getReplyToDestination only looks at the incoming message for a ""rebased"" reply to location or the actual JMS ReplyTo destination.   It doesn't use the configuration for the jndiReplyDestinationName or jmsReplyDestinationName settings from the config.   It should check the Message first for the settings, and if not found, use the config settings.
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113790,,,2009-07-28 00:41:09.0,,,,,,0|i13zof:,231410,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AegisJSONProviderTest.testManyTags fails with the ibm jdk,CXF-2362,12431543,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,sergey_beryozkin,peterjones,peterjones,27/Jul/09 22:09,03/Aug/09 20:07,14/Mar/19 02:29,28/Jul/09 09:42,,,,,,,,,,,,,,,2.2.3,2.3,,,,,,,,,0,,,,"The AegisJSONProviderTest.testManyTags () fails when run with the ibm jdk.  It attempts to do a straight string comparison of the response, however, the order of the elements in the reponse is different on the ibm jdk than it is on the sun jdk.

Expected:
<...,{""ns1.TagVO"":{""ns1.[group"":""b"",""ns1.name"":""a]""}}]}]}>
Was:
<...,{""ns1.TagVO"":{""ns1.[name"":""a"",""ns1.group"":""b]""}}]}]}>

Specifying a propOrder in the XmlType annotation doesn't seem to work for this case (using aegis), so probably the best solution is to check for a different string when running with the ibm jdk.",ibm jdk on linux or aix,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-07-28 01:00:58.03,,,no_permission,,,,,,,,,,,,,113789,,,Tue Jul 28 09:42:14 UTC 2009,,,,,,0|i0v1kf:,179227,,,,,,,,"28/Jul/09 01:00;dkulp;
Actually, I think in the aegis BeanType.Info.initializeProperties method, the resulting list of PropertyDescriptors should be sorted into a predictable and reproducable order (alpha by name would work).   Currently, the XSD produced by aegis will be completely different depending on what JVM is used to compile and run the application which is probably not a good thing.  

ALTERNATIVELY (or in addition to), update the aegis.type.java5 @XmlType annotation to have the propOrder thing that the JAXB thing has as well.","28/Jul/09 09:42;sergey_beryozkin;I've created https://issues.apache.org/jira/browse/CXF-2365, as I won't have time to fix the issue properly before 2.2.3 gets released

thanks, Sergey",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
soap.xsd in the soapbinding has the wrong elements,CXF-2360,12431450,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,njiang,njiang,njiang,26/Jul/09 09:20,03/Aug/09 20:07,14/Mar/19 02:29,26/Jul/09 10:32,,,,,,,,,,,,,,,2.0.12,2.1.6,2.2.3,2.3,Soap Binding,,,,,,0,,,,"The soap.xsd includes these useless elements

{code}
        <xsd:sequence>
            <xsd:element name=""implementor"" type=""xsd:anyType"" minOccurs=""0""/>
            <xsd:element name=""invoker"" type=""xsd:anyType"" minOccurs=""0""/>
            <xsd:element name=""binding"" type=""xsd:anyType"" minOccurs=""0""/>
            <xsd:element name=""serviceFactory"" type=""xsd:anyType"" minOccurs=""0""/>
          </xsd:sequence>
{code}",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113787,,,2009-07-26 09:20:37.0,,,,,,0|i0v1en:,179201,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
wss4jin stuff is only verifying the first signature and first timestamp,CXF-2359,12431405,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,dkulp,dkulp,24/Jul/09 20:15,03/Aug/09 20:07,14/Mar/19 02:29,24/Jul/09 20:50,2.2.2,,,,,,,,,,,,,,2.0.12,2.1.6,2.2.3,,WS-* Components,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113786,,,2009-07-24 20:15:06.0,,,,,,0|i0v267:,179325,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
autoNameResolution doesn't catch classes that differ only by case,CXF-2358,12431378,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,dkulp,dkulp,24/Jul/09 16:17,03/Aug/09 20:07,14/Mar/19 02:29,24/Jul/09 18:16,2.2.1,2.2.2,,,,,,,,,,,,,2.1.6,2.2.3,,,JAXB Databinding,,,,,,0,,,,"
If you have a schema with two types that differ only by case (FooSnarf and Foosnarf), the autoNameResolution doesn't pick up that they need to be remapped on windows.   ",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113785,,,2009-07-24 16:17:53.0,,,,,,0|i0v1ef:,179200,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The equals() method of JCA connection handle always return false.  ,CXF-2357,12431370,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,,wtam,wtam,24/Jul/09 14:09,03/Aug/09 20:07,14/Mar/19 02:29,24/Jul/09 15:26,,,,,,,,,,,,,,,2.0.12,2.1.6,2.2.3,,Integration,,,,,,0,,,,"The symptom of this problem is that JCA outbound requests fail on every other call when the JCA connection is invoked inside an EJB running in WebSphere 6.1.0.23.   But, invoking JCA connection inside a serlvet is not a problem.  The error reported by WebSphere is as follow.

[7/16/09 18:01:26:852 EDT] 00000024 MCWrapper     E   J2CA0079E: Method getNoTransactionWrapper has detected an internal illegal state and is throwing an IllegalStateException. The exception is: java.lang.IllegalStateException: getNoTransactionWrapper: illegal state exception. State = STATE_ACTIVE_FREE
	at com.ibm.ejs.j2c.MCWrapper.getNoTransactionWrapper(MCWrapper.java:1060)
	at com.ibm.ejs.j2c.ConnectionManager.initializeForUOW(ConnectionManager.java:1146)
	at com.ibm.ejs.j2c.ConnectionManager.reAssociate(ConnectionManager.java:1421)
	at com.ibm.ejs.j2c.HandleList.reAssociate(HandleList.java:361)
	at com.ibm.ejs.j2c.HandleCollaborator.preInvoke(HandleCollaborator.java:76)
	at com.ibm.ejs.container.StatelessBeanO.preInvoke(StatelessBeanO.java:382)
	at com.ibm.ejs.container.EJSContainer.preInvokeActivate(EJSContainer.java:3465)
	at com.ibm.ejs.container.EJSContainer.preInvoke(EJSContainer.java:2839)
	at demo.ejb.EJSRemoteStatelessTestEJB_b3bd2fe8.getResponseFromWebService(Unknown Source)
	at demo.ejb._TestEJB_Stub.getResponseFromWebService(_TestEJB_Stub.java:307)
	at demo.servlet.HelloWorldServlet.callEJB(HelloWorldServlet.java:82)
	at demo.servlet.HelloWorldServlet.writeMainBody(HelloWorldServlet.java:95)
	at demo.servlet.DemoServletBase.writeBody(Unknown Source)
	at demo.servlet.DemoServletBase.doGet(Unknown Source)
	at demo.servlet.HelloWorldServlet.doGet(HelloWorldServlet.java:52)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)
	at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:966)
	at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:478)
	at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:463)
	at com.ibm.ws.webcontainer.servlet.CacheServletWrapper.handleRequest(CacheServletWrapper.java:92)
	at com.ibm.ws.webcontainer.WebContainer.handleRequest(WebContainer.java:744)
	at com.ibm.ws.wswebcontainer.WebContainer.handleRequest(WebContainer.java:1425)
	at com.ibm.ws.webcontainer.channel.WCChannelLink.ready(WCChannelLink.java:92)
	at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.handleDiscrimination(HttpInboundLink.java:465)
	at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.handleNewInformation(HttpInboundLink.java:394)
	at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.ready(HttpInboundLink.java:274)
	at com.ibm.ws.tcp.channel.impl.NewConnectionInitialReadCallback.sendToDiscriminators(NewConnectionInitialReadCallback.java:214)
	at com.ibm.ws.tcp.channel.impl.NewConnectionInitialReadCallback.complete(NewConnectionInitialReadCallback.java:113)
	at com.ibm.ws.tcp.channel.impl.WorkQueueManager.requestComplete(WorkQueueManager.java:556)
	at com.ibm.ws.tcp.channel.impl.WorkQueueManager.attemptIO(WorkQueueManager.java:606)
	at com.ibm.ws.tcp.channel.impl.WorkQueueManager.workerRun(WorkQueueManager.java:979)
	at com.ibm.ws.tcp.channel.impl.WorkQueueManager$Worker.run(WorkQueueManager.java:1064)
	at com.ibm.ws.util.ThreadPool$Worker.run(ThreadPool.java:1498)

[7/16/09 18:01:26:953 EDT] 00000024 HandleList    W   PARK_OR_REASSOCIATE_FAILED_W_J2CA0083
[7/16/09 18:01:27:005 EDT] 00000024 ExceptionUtil E   CNTR0020E: EJB threw an unexpected (non-declared) exception during invocation of method ""getResponseFromWebService"" on bean ""BeanId(HelloWorldEAR#helloworld-ejb.jar#TestEJB, null)"". Exception data: java.rmi.RemoteException: ; nested exception is: 
	javax.resource.ResourceException: Reassociate call Failed
	at com.ibm.ejs.container.StatelessBeanO.preInvoke(StatelessBeanO.java:385)
	at com.ibm.ejs.container.EJSContainer.preInvokeActivate(EJSContainer.java:3465)
	at com.ibm.ejs.container.EJSContainer.preInvoke(EJSContainer.java:2839)
	at demo.ejb.EJSRemoteStatelessTestEJB_b3bd2fe8.getResponseFromWebService(Unknown Source)
	at demo.ejb._TestEJB_Stub.getResponseFromWebService(_TestEJB_Stub.java:307)
	at demo.servlet.HelloWorldServlet.callEJB(HelloWorldServlet.java:82)
	at demo.servlet.HelloWorldServlet.writeMainBody(HelloWorldServlet.java:95)
	at demo.servlet.DemoServletBase.writeBody(Unknown Source)
	at demo.servlet.DemoServletBase.doGet(Unknown Source)
	at demo.servlet.HelloWorldServlet.doGet(HelloWorldServlet.java:52)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)
	at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:966)
	at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:478)
	at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:463)
	at com.ibm.ws.webcontainer.servlet.CacheServletWrapper.handleRequest(CacheServletWrapper.java:92)
	at com.ibm.ws.webcontainer.WebContainer.handleRequest(WebContainer.java:744)
	at com.ibm.ws.wswebcontainer.WebContainer.handleRequest(WebContainer.java:1425)
	at com.ibm.ws.webcontainer.channel.WCChannelLink.ready(WCChannelLink.java:92)
	at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.handleDiscrimination(HttpInboundLink.java:465)
	at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.handleNewInformation(HttpInboundLink.java:394)
	at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.ready(HttpInboundLink.java:274)
	at com.ibm.ws.tcp.channel.impl.NewConnectionInitialReadCallback.sendToDiscriminators(NewConnectionInitialReadCallback.java:214)
	at com.ibm.ws.tcp.channel.impl.NewConnectionInitialReadCallback.complete(NewConnectionInitialReadCallback.java:113)
	at com.ibm.ws.tcp.channel.impl.WorkQueueManager.requestComplete(WorkQueueManager.java:556)
	at com.ibm.ws.tcp.channel.impl.WorkQueueManager.attemptIO(WorkQueueManager.java:606)
	at com.ibm.ws.tcp.channel.impl.WorkQueueManager.workerRun(WorkQueueManager.java:979)
	at com.ibm.ws.tcp.channel.impl.WorkQueueManager$Worker.run(WorkQueueManager.java:1064)
	at com.ibm.ws.util.ThreadPool$Worker.run(ThreadPool.java:1498)
Caused by: javax.resource.ResourceException: Reassociate call Failed
	at com.ibm.ejs.j2c.HandleList.reAssociate(HandleList.java:395)
	at com.ibm.ejs.j2c.HandleCollaborator.preInvoke(HandleCollaborator.java:76)
	at com.ibm.ejs.container.StatelessBeanO.preInvoke(StatelessBeanO.java:382)
	... 28 more

",Websphere 6.1.0.23.  ,,,,,,,,,,,,,,,,24/Jul/09 14:39;wtam;CXF-2357.patch;https://issues.apache.org/jira/secure/attachment/12414450/CXF-2357.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113784,,,Fri Jul 24 14:22:53 UTC 2009,,,,,,0|i0v0lz:,179072,,,,,,,,"24/Jul/09 14:19;wtam;The issue has to do with closing the connection handle.  When the JCA connector fires a ConnectionEvent.CONNECTION_CLOSED event, Websphere connection pool tries to match a handle from connection pool to perform close().  As a result, the equals() method on the handle will get called.  There is a bug in the connection handle's proxy invocation handler that causes the close() to always return false.",24/Jul/09 14:22;wtam;The attached patch fixes the issue and includes a unit test.   It also fixes another issue that ConnectionEvent.CONNECTION_CLOSED was not fired every time a handle is closed.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WS-SecurityPolicy and faults,CXF-2356,12431367,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,lipkap,lipkap,24/Jul/09 13:25,03/Aug/09 20:07,14/Mar/19 02:29,24/Jul/09 18:02,2.2.2,,,,,,,,,,,,,,2.2.3,,,,WS-* Components,,,,,,0,,,,"I have a secure WS that is described by a WS-Policy document that's
pasted below.
Policy A is attached to the wsdl:binding while policy B is attached to
the wsdl:input,wsdl:output and wsdl:fault

When my WS throws a soap fault there's a couple of problems:
1) the soap:Body element is not encrypted
2) the soap:Body element is not signed
3) the WS client fails to validate the WS-Security header with the
that's also pasted below.

The problem seems to be in the way CXF handles WS-Security header using
the PolicyBasedWSS4JInterceptor.
When the response arrives it passes through the in interceptor chain and
the encrypted parts are decrypted. The way wss4j handles decryption is
that it replaces the xmlenc:EncryptedData element in the SOAP document
with the decrypted content but it does not remove the corresponding
xmlenc:ReferenceData/xmlenc:DataReference element from the Security
header. After decryption is done some other interceptor detects that the
message is actually a fault and triggers the inFault interceptor chain.

The inFault interceptor chain again contains the
PolicyBasedWSS4JInterceptor and it should contain it since not all the
policy assertions have been asserted by the 'in' chain. (e.g.
UsingAddressing  assertion).
The PolicyBasedWSS4JInterceptor runs wss4j again on a document that has
already been decrypted and fails with the error below because the
xmlenc:ReferenceData/xmlenc:DataReference elements point to nothing.

Has anyone ever hit a problem like that? Is there any workaround for
that  (other than chainging the WS-Policy document)?

thanks in advance,

7038 [main] WARN org.apache.cxf.ws.security.wss4j.WSS4JInInterceptor  - 
org.apache.ws.security.WSSecurityException: An error was discovered
processing the <wsse:Security> header (WSSecurityEngine: DataReference -
referenced data not found)
        at
org.apache.ws.security.processor.ReferenceListProcessor.decryptDataRefEmbedded(ReferenceListProcessor.java:141)
        at
org.apache.ws.security.processor.ReferenceListProcessor.handleReferenceList(ReferenceListProcessor.java:113)
        at
org.apache.ws.security.processor.ReferenceListProcessor.handleToken(ReferenceListProcessor.java:76)
        at
org.apache.ws.security.WSSecurityEngine.processSecurityHeader(WSSecurityEngine.java:326)
        at
org.apache.ws.security.WSSecurityEngine.processSecurityHeader(WSSecurityEngine.java:243)
        at
org.apache.cxf.ws.security.wss4j.WSS4JInInterceptor.handleMessage(WSS4JInInterceptor.java:179)
        at
org.apache.cxf.ws.security.wss4j.WSS4JInInterceptor.handleMessage(WSS4JInInterceptor.java:77)
        at
org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
        at
org.apache.cxf.interceptor.AbstractFaultChainInitiatorObserver.onMessage(AbstractFaultChainInitiatorObserver.java:96)
        at
org.apache.cxf.binding.soap.interceptor.CheckFaultInterceptor.handleMessage(CheckFaultInterceptor.java:69)
        at
org.apache.cxf.binding.soap.interceptor.CheckFaultInterceptor.handleMessage(CheckFaultInterceptor.java:34)
        at
org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
        at org.apache.cxf.endpoint.ClientImpl.onMessage(ClientImpl.java:645)
        at org.apache.cxf.transport.http.HTTPConduit
$WrappedOutputStream.handleResponseInternal(HTTPConduit.java:2132)
        at org.apache.cxf.transport.http.HTTPConduit
$WrappedOutputStream.handleResponse(HTTPConduit.java:2015)
        at org.apache.cxf.transport.http.HTTPConduit
$WrappedOutputStream.close(HTTPConduit.java:1940)
        at
org.apache.cxf.io.CacheAndWriteOutputStream.postClose(CacheAndWriteOutputStream.java:47)
        at
org.apache.cxf.io.CachedOutputStream.close(CachedOutputStream.java:180)
        at
org.apache.cxf.transport.AbstractConduit.close(AbstractConduit.java:66)
        at
org.apache.cxf.transport.http.HTTPConduit.close(HTTPConduit.java:627)
        at org.apache.cxf.interceptor.MessageSenderInterceptor
$MessageSenderEndingInterceptor.handleMessage(MessageSenderInterceptor.java:62)
        at
org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
        at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:471)
        at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:301)
        at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:253)
        at org.apache.cxf.frontend.ClientProxy.invokeSync(ClientProxy.java:73)
        at
org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:121)
        at $Proxy38.sendMessage(Unknown Source)

<wsp:Policy wsu:Id=""A"">
                <wsp:ExactlyOne>
                        <wsp:All>
                                <sp:SymmetricBinding
xmlns:sp=""http://schemas.xmlsoap.org/ws/2005/07/securitypolicy"">
                                        <wsp:Policy>
                                                <sp:ProtectionToken>
                                                        <wsp:Policy>
                                                                <sp:X509Token
sp:IncludeToken=""http://schemas.xmlsoap.org/ws/2005/07/securitypolicy/IncludeToken/Never"">
                                                                        <wsp:Policy>
                                                                                <sp:RequireDerivedKeys />
                                                                                <sp:RequireThumbprintReference />
                                                                                <sp:WssX509V3Token10 />
                                                                        </wsp:Policy>
                                                                </sp:X509Token>
                                                        </wsp:Policy>
                                                </sp:ProtectionToken>
                                                <sp:AlgorithmSuite>
                                                        <wsp:Policy>
                                                                <sp:Basic128 />
                                                        </wsp:Policy>
                                                </sp:AlgorithmSuite>
                                                <sp:Layout>
                                                        <wsp:Policy>
                                                                <sp:Strict />
                                                        </wsp:Policy>
                                                </sp:Layout>
                                                <sp:IncludeTimestamp />
                                                <sp:EncryptSignature />
                                                <sp:OnlySignEntireHeadersAndBody />
                                        </wsp:Policy>
                                </sp:SymmetricBinding>
                                <sp:EndorsingSupportingTokens
xmlns:sp=""http://schemas.xmlsoap.org/ws/2005/07/securitypolicy"">
                                        <wsp:Policy>
                                                <sp:X509Token
sp:IncludeToken=""http://schemas.xmlsoap.org/ws/2005/07/securitypolicy/IncludeToken/AlwaysToRecipient"">
                                                        <wsp:Policy>
                                                                <sp:RequireThumbprintReference />
                                                                <sp:WssX509V3Token10 />
                                                        </wsp:Policy>
                                                </sp:X509Token>
                                        </wsp:Policy>
                                </sp:EndorsingSupportingTokens>
                                <sp:Wss11
xmlns:sp=""http://schemas.xmlsoap.org/ws/2005/07/securitypolicy"">
                                        <wsp:Policy>
                                                <sp:MustSupportRefKeyIdentifier />
                                                <sp:MustSupportRefIssuerSerial />
                                                <sp:MustSupportRefThumbprint />
                                                <sp:MustSupportRefEncryptedKey />
                                                <sp:RequireSignatureConfirmation />
                                        </wsp:Policy>
                                </sp:Wss11>
                                <sp:Trust10
xmlns:sp=""http://schemas.xmlsoap.org/ws/2005/07/securitypolicy"">
                                        <wsp:Policy>
                                                <sp:MustSupportIssuedTokens />
                                                <sp:RequireClientEntropy />
                                                <sp:RequireServerEntropy />
                                        </wsp:Policy>
                                </sp:Trust10>
                                <wsaw:UsingAddressing />
                        </wsp:All>
                </wsp:ExactlyOne>
        </wsp:Policy>
        <wsp:Policy wsu:Id=""B"">
                <wsp:ExactlyOne>
                        <wsp:All>
                                <sp:SignedParts
xmlns:sp=""http://schemas.xmlsoap.org/ws/2005/07/securitypolicy"">
                                        <sp:Body />
                                        <sp:Header Name=""To""
Namespace=""http://www.w3.org/2005/08/addressing"" />
                                        <sp:Header Name=""From""
Namespace=""http://www.w3.org/2005/08/addressing"" />
                                        <sp:Header Name=""FaultTo""
Namespace=""http://www.w3.org/2005/08/addressing"" />
                                        <sp:Header Name=""ReplyTo""
Namespace=""http://www.w3.org/2005/08/addressing"" />
                                        <sp:Header Name=""MessageID""
Namespace=""http://www.w3.org/2005/08/addressing"" />
                                        <sp:Header Name=""RelatesTo""
Namespace=""http://www.w3.org/2005/08/addressing"" />
                                        <sp:Header Name=""Action""
Namespace=""http://www.w3.org/2005/08/addressing"" />
                                </sp:SignedParts>
                                <sp:EncryptedParts
xmlns:sp=""http://schemas.xmlsoap.org/ws/2005/07/securitypolicy"">
                                        <sp:Body />
                                </sp:EncryptedParts>
                        </wsp:All>
                </wsp:ExactlyOne>
        </wsp:Policy>","cxf-2.2.2, wss4j-1.5.7, xmlsec-1.4.2",,,,,,,,,,,,,,,,24/Jul/09 13:26;lipkap;wssecuritypolicy-tests.zip;https://issues.apache.org/jira/secure/attachment/12414438/wssecuritypolicy-tests.zip,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,Advanced,,,,,,,,,,,113783,,,Fri Jul 24 13:27:02 UTC 2009,,,,,,0|i14eyf:,233886,,,,,,,,24/Jul/09 13:26;lipkap;A maven project with a test that shows the bug,24/Jul/09 13:27;lipkap;Unzip the attachment and run mvn test.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Request URIs containing multiple matrix parameters in the last segment are not always matched,CXF-2355,12431272,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,sergey_beryozkin,sergey_beryozkin,sergey_beryozkin,23/Jul/09 17:28,03/Aug/09 20:07,14/Mar/19 02:29,23/Jul/09 17:34,2.2.2,,,,,,,,,,,,,,2.2.3,2.3,,,JAX-RS,Transports,,,,,0,,,,"Original request from Gabriel : 

I'm having a problem where matrix parameters are not recognized past the
first parameter.  When I have one matrix parameter, the method below is
invoked and the PathSegment.getMatrixParameters() returns the single
result.

However, if I append a second matrix parameter (or more), the service
method is not invoked at all and I receive the following error message:

""No operation matching request"".

Service interface:

@GET
@Path(""/renderwidget/id/{widgetID}/type/{widgetType}/size/{size}/locale/{locale}/{properties}"")
    WSWidget renderWidget(@PathParam(""widgetID"") Long widgetID,
            @PathParam(""widgetType"") Integer widgetType,
            @PathParam(""size"") Long containerSize,
            @PathParam(""locale"") String locale,
            @PathParam(""properties"") PathSegment props)
            throws RemoteBridgeException;

Working
URL: /renderwidget/id/1007/type/1/size/1/locale/en_US/properties;numResults=1

Broken:
URL: /renderwidget/id/1007/type/1/size/1/locale/en_US/properties;numResults=1;foo=bar ",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113782,,,2009-07-23 17:28:02.0,,,,,,0|i0v1nz:,179243,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JAXRSClientServerSpringBookTest systest failure with ibm jdk,CXF-2353,12431158,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,,peterjones,peterjones,22/Jul/09 16:48,03/Aug/09 20:07,14/Mar/19 02:29,23/Jul/09 20:21,,,,,,,,,,,,,,,2.2.3,,,,,,,,,,0,,,,"Four of the tests in JAXRSClientServerSpringBookTest check for a specific string contained in expected_add_book_aegis.txt:

<ns1:Book xmlns:ns1=""http://jaxrs.systest.cxf.apache.org"" xmlns:ns2=""http://www.w3.org/2001/XMLSchema-instance"" ns2:type=""ns1:Book""><ns1:id>124</ns1:id><ns1:name>CXF in Action - 2</ns1:name></ns1:Book>

however, with the ibm jdk 5, the order of the id and name elements are switched in the actual result.  I'll update the test to check for a different expected result when using the ibm jdk, unless of course someone suggests that the ordering should be of any significance here.",ibm jdk 5,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-07-22 17:08:08.426,,,no_permission,,,,,,,,,,,,,113780,,,Fri Jul 24 08:27:16 UTC 2009,,,,,,0|i0v093:,179014,,,,,,,,"22/Jul/09 17:08;dkulp;Probably should just put:

@XmlType(name = """", propOrder = {
    ""id"",
    ""name""
})

annotation on the Book class to force an order.","23/Jul/09 14:29;peterjones;Thanks Dan, that's a much better suggestion!

The only thing is, the propOrder doesn't seem to take effect for the test cases which are failing.

So, with no change testGetBookAegis, testGetBookUserResource, and testGetBookUserResource2 fail.

With the propOrder specified, the same tests still fail.

I know the propOrder does have an effect overall, since if I specify a propOrder of ""name"", ""id"", then those tests plus a whole bunch of additional tests fail.

I'll have to dig into this a bit more to see if I can work out what's up.","23/Jul/09 14:56;sergey_beryozkin;Hi Peter

the problem with some of those tests is that they do the string comparison, ideally they'd need to be converted to use restful client api.

Can you please just update 3 specific tests to this one  :

WebClient client = WebClient.create(endpointAddress, Collections.singletonList(new AegisElementProvider()));
Book book = client.accept(""application/xml"").get(Book.class);
// check book fields

the 4th test reads directly from the socket, just update it to check for the oocurence of some string, that test is more about checking that an arbitrary HTTP method can be supported

thanks, Sergey",23/Jul/09 18:29;peterjones;That works!  Thanks Sergey!,24/Jul/09 08:27;sergey_beryozkin;hi Peter - thanks for taking care of this issue...,,,,,,,,,,,,,,,,,,,,,,,,,,
Space in namespace localName causes org.w3c.dom.DOMException: INVALID_CHARACTER_ERR,CXF-2349,12431073,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,zack,zack,21/Jul/09 21:08,03/Aug/09 20:07,14/Mar/19 02:29,22/Jul/09 01:25,2.2.2,,,,,,,,,,,,,,2.0.12,2.1.6,2.2.3,,,,,,,,0,,,,"On line 97 of the Soap12FaultOutInterceptor, an attempt is made to write an attribute using the following code:

writer.writeAttribute(""xml"", ""http://www.w3.org/XML/1998/namespace"", ""lang "", getLangCode());

The 3rd parameter has a trailing space and fails with the following exception:

org.w3c.dom.DOMException: INVALID_CHARACTER_ERR: An invalid or illegal XML character is specified.

I was able to copy this class into my source code and remove the space, which solved the issue",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113777,,,2009-07-21 21:08:12.0,,,,,,0|i0v1iv:,179220,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MessageContext properties (HTTP_REQUEST_HEADERS & HTTP_RESPONSE_HEADERS) should not be available during all the phases of the invocation,CXF-2348,12430921,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,sauthieg,sauthieg,20/Jul/09 12:21,22/Jul/09 12:14,14/Mar/19 02:29,20/Jul/09 21:26,2.0.11,,,,,,,,,,,,,,2.0.12,,,,JAX-WS Runtime,,,,,,0,,,,"The MessageContext.HTTP_REQUEST_HEADERS & MessageContext.HTTP_RESPONSE_HEADERS properties are currently available for all the phases/steps of a webservice invocation (requestor and endpoint side, inbound and outbound direction).

They should only have a value at some well defined time:
* HTTP_REQUEST_HEADERS should only have a value on the endpoint side with the inbound direction
* HTTP_RESPONSE_HEADERS should only have a value on the requestor side with the outbound direction

I'm not sure if the specification mandates that behavior, but some tests are failing because of the WrappedMessageContext heavy lifting that happened between CXF 2.0.9 and 2.0.10",JOnAS 5.1.0,,,,,,,,,,,,,,,,20/Jul/09 16:00;sauthieg;cxf-tck-MessageContextProperties.patch;https://issues.apache.org/jira/secure/attachment/12414016/cxf-tck-MessageContextProperties.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113776,,,Mon Jul 20 16:00:00 UTC 2009,,,,,,0|i0v05j:,178998,,,,,,,,20/Jul/09 16:00;sauthieg;Only return a value for theses properties at the right time.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
systests which use port 9090 fail on aix,CXF-2347,12430802,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,peterjones,peterjones,peterjones,17/Jul/09 18:55,03/Aug/09 20:07,14/Mar/19 02:29,23/Jul/09 20:21,,,,,,,,,,,,,,,2.2.3,,,,,,,,,,0,,,,"The following system tests all fail when run on aix due to a port conflict:

ClientServerRPCLitDefatulAnnoTest 
MTOMBindingTypeTest
MtomFeatureClientServerTest

Each test attempts to use port 9090, but on aix this port is used by the WebSM service.
I'll update these tests to use port 9091 instead to avoid this conflict.",aix,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113775,,,2009-07-17 18:55:10.0,,,,,,0|i14e4v:,233753,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CXF with Spring AOP-based Auth makes JAX-RS POST urlencode gives @FormParam=null ,CXF-2346,12430799,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,sergey_beryozkin,ceefour,ceefour,17/Jul/09 18:17,03/Aug/09 20:07,14/Mar/19 02:29,19/Jul/09 18:27,2.2.2,,,,,,,,,,,,,,2.2.3,2.3,,,JAX-RS,,,,,,0,,,,"It's much accurate to illustrate this with a real project sample, since it takes quite an effort to setup the integrated environment to reproduce this bug. (yet I have to say, this integration setup is a good 'standard setup' for my general JAX-RS purposes)

The sample project is at: http://scm.ops4j.org/repos/ops4j/laboratory/users/ceefour/cxfbug-urlencode-basicauth

Given a project with the setup of CXF, JAX-RS, Servlet, Spring Security, Spring AOP, CGLIB, and JSR-250 annotation, doing a POST with urlencode on JAX-RS resource with @FormParam is not working.

Here's the script used to test:

    #!/bin/sh
    # Environment: CXF 2.2.2, JAX-RS, Servlet Edition running under Tomcat 6.0, in combination with Spring and Spring AOP 2.5.6SEC01, Spring Security 2.0, JSR-250 @RolesAllowed, and CGLIB 2.2
    # Description: CXF with Spring AOP-based Auth makes JAX-RS POST urlencode gives @FormParam=null 

    echo 'Test if CXF just works'
    curl -D - -v http://localhost:8080/cxfbug-urlencode-basicauth/

    echo
    echo 'Test if CXF POST works'
    curl -D - -v -X POST http://localhost:8080/cxfbug-urlencode-basicauth/guestquery?name=Apache

    echo
    echo 'Test if CXF POST urlencode works'
    curl -D - -v -X POST --data-urlencode name=Apache http://localhost:8080/cxfbug-urlencode-basicauth/guestform

    echo
    echo 'Test if CXF Auth with Spring AOP + Spring Security + JSR-250 works'
    curl -D - -v -u apache:apache http://localhost:8080/cxfbug-urlencode-basicauth/loginget

    echo
    echo 'Test if CXF POST works'
    curl -D - -v -u apache:apache -X POST http://localhost:8080/cxfbug-urlencode-basicauth/loginquery?name=Apache

    echo
    echo 'Test if CXF POST urlencode works with Auth'
    curl -D - -v -u apache:apache -X POST --data-urlencode name=Apache http://localhost:8080/cxfbug-urlencode-basicauth/loginform

Only the last one is failing, here's the result of the last two tests in my setup:

Test if CXF POST works
* About to connect() to localhost port 8080 (#0)
*   Trying ::1... connected
* Connected to localhost (::1) port 8080 (#0)
* Server auth using Basic with user 'apache'
> POST /cxfbug-urlencode-basicauth/loginquery?name=Apache HTTP/1.1
> Authorization: Basic YXBhY2hlOmFwYWNoZQ==
> User-Agent: curl/7.18.2 (i486-pc-linux-gnu) libcurl/7.18.2 OpenSSL/0.9.8g zlib/1.2.3.3 libidn/1.10
> Host: localhost:8080
> Accept: */*
> 
< HTTP/1.1 200 OK
HTTP/1.1 200 OK
< Server: Apache-Coyote/1.1
Server: Apache-Coyote/1.1
< Date: Fri, 17 Jul 2009 18:16:35 GMT
Date: Fri, 17 Jul 2009 18:16:35 GMT
< Content-Type: text/plain
Content-Type: text/plain
< Content-Length: 12
Content-Length: 12

< 
* Connection #0 to host localhost left intact
Hello Apache* Closing connection #0

Test if CXF POST urlencode works with Auth
* About to connect() to localhost port 8080 (#0)
*   Trying ::1... connected
* Connected to localhost (::1) port 8080 (#0)
* Server auth using Basic with user 'apache'
> POST /cxfbug-urlencode-basicauth/loginform HTTP/1.1
> Authorization: Basic YXBhY2hlOmFwYWNoZQ==
> User-Agent: curl/7.18.2 (i486-pc-linux-gnu) libcurl/7.18.2 OpenSSL/0.9.8g zlib/1.2.3.3 libidn/1.10
> Host: localhost:8080
> Accept: */*
> Content-Length: 11
> Content-Type: application/x-www-form-urlencoded
> 
< HTTP/1.1 200 OK
HTTP/1.1 200 OK
< Server: Apache-Coyote/1.1
Server: Apache-Coyote/1.1
< Date: Fri, 17 Jul 2009 18:16:35 GMT
Date: Fri, 17 Jul 2009 18:16:35 GMT
< Content-Type: text/plain
Content-Type: text/plain
< Content-Length: 10
Content-Length: 10

< 
* Connection #0 to host localhost left intact
Hello null* Closing connection #0

@FormParam is giving null instead of provided ""Apache"".","CXF 2.2.2, JAX-RS, Servlet Edition running under Tomcat 6.0, in combination with Spring and Spring AOP 2.5.6SEC01, Spring Security 2.0, JSR-250 @RolesAllowed, and CGLIB 2.2",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-07-17 19:45:35.098,,,no_permission,,,,,,,,,,,,,113774,,,Mon Jul 20 17:01:30 UTC 2009,,,,,,0|i14dq7:,233687,,,,,,,,"17/Jul/09 18:21;ceefour;Although this and CXF-2345 seem related to Spring AOP, but is a different issue.","17/Jul/09 19:45;sergey_beryozkin;Hi, is it a subresource method that is being invoked upon in this case ? Is it a CGLIB-proxified subresource bean ?

And it works without Spring security ?

thanks ","17/Jul/09 19:52;ceefour;Hi again Sergey :D

It's not a subresource method, there's only one RootResource with several test-methods

Yes I would say Spring AOP proxified it using CGLIB.

It works without Spring Security. i.e. running 

    curl -D - -v -u apache:apache -X POST --data-urlencode name=Apache http://localhost:8080/cxfbug-urlencode-basicauth/loginform 

on a REST Service uses no Spring Security (i.e. the passed username & password is ignored) works without problems.

Note that even with Spring Security configured as per the sample project, all CXF operations seem to be fine including @FormParam IF using multipart. Only POST, @FormParam, and urlencode combination is troublesome (for me).

I guess I should include this test-case: (multipart POST)

    curl -D - -v -u apache:apache -X POST -F name=Apache http://localhost:8080/cxfbug-urlencode-basicauth/loginform 

that is working both with or without Spring Security.","17/Jul/09 19:57;ceefour;I just discovered that @RolesAllowed, i.e. the security rule itself is not needed to trigger this bug.

Example failing test:

curl -u apache:apache -D - -v -X POST --data-urlencode name=Apache http://localhost:8080/cxfbug-urlencode-basicauth/guestform

I think it's a general problem with AOP proxied Resource and CXF handling of @FormParam, urlencode, and Basic Auth. i.e. not so much Spring Security specific

I also have to add that if the client provides the credentials by way of cookies (not basic auth), no problem as well.","17/Jul/09 20:04;ceefour;I've updated the sample project in SVN to make it simpler and less external factors

It turns out @RolesAllowed / JSR-250 nor Spring Security's global-method-security is not required to reproduce the problem, so I remove the tests requiring JSR-250.

The following is enough to reproduce the bug:

curl -D - -v -u apache:apache -X POST --data-urlencode name=Apache http://localhost:8080/cxfbug-urlencode-basicauth/guestform 

Note that the RootResource class now has no security annotations. Simply that Spring Security is loaded ""in the background"" is enough.","18/Jul/09 17:56;sergey_beryozkin;thanks a million for simplifying the scenario. Actually a couple of users reported seeing empty FormParams but I could not reproduce it - so it appears that external factors like loading Spring Security. etc, might've contributed to it. I'll look into it now...","19/Jul/09 18:26;sergey_beryozkin;It was a tricky issue to sort out, mainly because it was tricky to reproduce. As it happens in some cases servlet filters may consume the form request body, Spring security filters in this case, and when they do they make name/value pairs available as HttpServletRequest parameters.

thanks for helping me to get to the bottom of it - I think you deserve a solid patch point.
cheers, Sergey","20/Jul/09 08:38;sergey_beryozkin;By the way, here's a workaround, untill 2.2.3 gets released.

Register a JAX-RS request filter and in there :

if (""POST"".equals(m.get(Message.HTTP_REQUEST_METHOD))
     && ""application/x-www-form-urlencoded"".equals(m.get(Message.CONTENT_TYPE))) {

HttpServletRequest request = (HttpServletRequest)m.get(AbstractHTTPDestination.HTTP_REQUEST);

StringBuilder sb = new StringBuilder();
for (Enumeration en = request.getParameterNames(); en.hasMoreElements();) {
          String paramName = en.nextElement().toString();
          String[] paramValues = request.getParameterValues(paramName);
           for (int i = 0; i < paramValues.length; i++) {
                  sb.append(paramName).append('=').append(paramValues[i]);
                  if (i + 1 < paramValues.length) {
                       sb.append('&');
                  }
           }
           if (en.hasMoreElements()) {
                sb.append('&');
           }
}

m.putContent(InputStream.class, new ByteArrayInputStream(sb.getBytes(""UTF-8"")));
}
","20/Jul/09 17:01;ceefour;Thank you very much Sergey for the prompt fix. :-)

Always glad to help in any way. ",,,,,,,,,,,,,,,,,,,,,,
"Returning AOP/CGLIB proxy as Subresource throws Fault ""object is not an instance of declaring class""",CXF-2345,12430733,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,sergey_beryozkin,ceefour,ceefour,17/Jul/09 01:17,03/Aug/09 20:07,14/Mar/19 02:29,17/Jul/09 11:23,2.2.2,,,,,,,,,,,,,,2.2.3,2.3,,,JAX-RS,,,,,,0,,,,"Test case:

RootResource.java :

public class RootResource {

  @Path(""subresource"")
  public abstract SubResource getSubResource();

}

In spring-beans.xml:

<bean class=""RootResource"">
  <lookup-method name=""getSubResource"" bean=""subResource"" />
</bean>
<bean id=""subResource"" class=""SubResource"" />

Then the AOP proxied SubResource:

@RolesAllowed({""ROLE_USER""}) // activate Spring Security global method annotations
public class SubResource {
}

Getting the /subresource will throw exception:

org.apache.cxf.interceptor.Fault: object is not an instance of declaring class while invoking

Tried this workaround but not working: Make SubResource implement an interface then on RootResource.getSubResource() use interface as the return type, not the class",,,,,,,,,,,,,,,CXF-2346,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-07-17 11:19:10.193,,,no_permission,,,,,,,,,,,,,113773,,,Fri Jul 17 19:42:35 UTC 2009,,,,,,0|i14e27:,233741,,,,,,,,"17/Jul/09 01:20;ceefour;Bug CXF-1494 is similar to this one, it was a more general issue that did not fix the particular issue of CXF-2345.

PS: Wow, this bug number is ""beautiful"" .. 2345 :D","17/Jul/09 11:19;sergey_beryozkin;Hi,

turns out it's a bug in SpringAopClassHelper which actually prevents the subresource locator method ""getSubResources"" from being invoked. <lookupMethod/> causes a double Cglib proxy being created, with the top one being recognized as AopProxy and the next one being not. So the fix will go in now.

In meantine you may want to try :

1. ensure 'getSubResources' is actually an interface method so your resource class just implements it
2. given that in your case you just want to apply global permissions, you might want just to add @RolesAllowed on the subresource method itself

thanks for stressing CXF JAX-RS so well...","17/Jul/09 16:02;ceefour;Thank you so much Sergey for the confirmed fix.

I'll try if the following workaround will work for now:

public SubResource getSub() {
  return (SubResource)appCtx.getBean(""subResource"");
}

Since it's on topic, I'd like to ask:
1. what's the CXF recommended best practice of subresource with Spring+CXF? Java new with manual setters; Spring AOP lookup-method, Spring appCtx.getBean(), or Spring AOP with @Configurable ? or another technique?
2. what's really the difference between  @RolesAllowed in JAX-RS class and in JAX-RS method? Isn't annotating the class means the whole resource is ""secured""? (i.e. I don't see a point in annotating all methods of a class with the same annotation)","17/Jul/09 16:59;sergey_beryozkin;Hi

You probably don't need to deal with the application context.
With the fix being in (you can try 2.2.3-snapshot may be on Monday or tomorrow) you won't need to change anything at all.

Without the fix, you can do :

1. interface ResourceInterface {
         SubResource getSubResource();
    }

   public ResourceImpl implements ResourceInterface {
   }

and it will work, I've confirmed it in the Spring security system test. In this case you can still have @RolesAllowed on SubResource  

2. public ResourceImpl {

         @RolesAllowed(...)
         @Path(""sub"")
         public SubResource getSubResource() {...}
    }

in your case it would be equivalent to putting it on the SubResource class, because users would need to be authorized to start working with this subresource, so I didn't recommend putting RolesAllowed on every SubResource method

Does it clarify things a bit ?
cheers, Sergey
 
","17/Jul/09 17:07;sergey_beryozkin;Actually, I meant 2.3-SNAPSHOT as 2.2.3-SNAPSHOT is not being built regularly.

You might also want to inject a SubResource from Spring, as a root resource property, rather than using <lookupMethod/>. I have atest for it too, but the injected resource implements the JAX-RS annotated interface, haven't tried injecting a CGLIB proxy - but given that I can see a test working now with <lookupMethod/> I'm pretty sure it will work too","17/Jul/09 17:19;ceefour;Thank you Sergey for your excellent explanation. That definitely clears up everything.

I mistook your #2 point above as putting annotations on all methods on the subresource class, as opposed to what you suggested putting the annotation on the rootresource method.

In fact, my use case is that the rootresource class itself is secured, so I guess that means in my specific use case, there's actually no need to protect any of its methods and its subresources, is my assumption is correct?

Your explanation is so excellent it begs inclusion in : http://cwiki.apache.org/CXF20DOC/jax-rs.html
There is very little discussion (or more accurately: example) on security there.

I'm new with JSR-250 security annotations but currently I'm thinking that for me, it's a best practice approach to use CXF with Spring, Spring AOP, Spring Security Tiger, and JSR-250, for all security/authn/authz needs.

Regarding injecting a SubResource to a property, I couldn't do it because the subresource bean is a prototype one. It's still possible to,  say, inject a factory of SubResource to the RootResource property, and then invoke that factory upon RootResource.getSubResource() call, but I guess that's too much jumping hoops. ;-)","17/Jul/09 19:42;sergey_beryozkin;Hi,

> In fact, my use case is that the rootresource class itself is secured, so I guess that means in my specific use case, there's actually no need to protect any of its methods and its subresources, is my assumption is correct? 

If your global root resource security rules apply to all 'leafs'/subresources, then yes, no need to secure the subresources or individual methods. One may want to do apply more fine-grained authorization rules in other cases.

I'll update the docs, there's so much that has to be added...
thanks, Sergey  ",,,,,,,,,,,,,,,,,,,,,,,,
attachment headers not copied into SAAJ message,CXF-2344,12430690,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,dkulp,dkulp,16/Jul/09 17:42,03/Aug/09 20:07,14/Mar/19 02:29,16/Jul/09 19:52,2.2.1,2.2.2,,,,,,,,,,,,,2.0.12,2.1.6,2.2.3,,Soap Binding,,,,,,0,,,,"
When setting up the SAAJ message, the attachment mime headers and content-id and such are not copied over into the SAAJ attachment parts",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113772,,,2009-07-16 17:42:45.0,,,,,,0|i0v1in:,179219,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
common/common test failures with ibm jdk due to excluded jaxp-api dependency ,CXF-2341,12430509,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,peterjones,peterjones,peterjones,15/Jul/09 15:39,03/Aug/09 20:07,14/Mar/19 02:29,17/Jul/09 16:08,,,,,,,,,,,,,,,2.2.3,,,,,,,,,,0,,,,"
Getting class not found exceptions for class javax.xml.transform.stax.StAXResult when running StaxUtilsTest, W3CDOMStreamReaderTest and XMLUtilsTest with the ibm jdk.  Stack traces look something like this:

{code}
java.lang.NoClassDefFoundError: javax.xml.transform.stax.StAXResult
at com.sun.org.apache.xalan.internal.xsltc.trax.TransformerImpl.getOutputHandler(TransformerImpl.java:416)
at com.sun.org.apache.xalan.internal.xsltc.trax.TransformerImpl.transform(TransformerImpl.java:334)
at org.apache.cxf.helpers.XMLUtils.writeTo(XMLUtils.java:191)
at org.apache.cxf.helpers.XMLUtils.writeTo(XMLUtils.java:169)
at org.apache.cxf.helpers.XMLUtils.writeTo(XMLUtils.java:161)
at org.apache.cxf.helpers.XMLUtils.writeTo(XMLUtils.java:155)
at org.apache.cxf.helpers.XMLUtils.toString(XMLUtils.java:222)
at org.apache.cxf.staxutils.StaxUtilsTest.cycleString(StaxUtilsTest.java:207)
at org.apache.cxf.staxutils.StaxUtilsTest.testEmptyNamespace(StaxUtilsTest.java:186)
{code}

We add a jaxp-ri dependency specifically for the ibm jdk, in a couple of places where it's needed but it seems in the parent/pom.xml we exclude jaxp-api:

{code}
            <dependency>
                <groupId>com.sun.xml.parsers</groupId>
                <artifactId>jaxp-ri</artifactId>
                <version>1.4.2</version>
                <exclusions>
                    <exclusion>
                        <groupId>javax.xml.parsers</groupId>
                        <artifactId>jaxp-api</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>
{code}

Is there a reason we still need to exclude jaxp-api?  If it's not excluded, the failing tests will pass.",ibm jdk 5 on linux and aix,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113769,,,2009-07-15 15:39:25.0,,,,,,0|i0v09z:,179018,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unmarshalling Error: UndeclaredPrefix: Cannot resolve 'ns0:Xxx' as a QName: the prefix 'ns0' is not declared ,CXF-2340,12430414,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,john.pfeifer@billmelater.com,john.pfeifer@billmelater.com,14/Jul/09 19:47,11/Oct/10 14:52,14/Mar/19 02:29,01/Oct/10 21:12,2.2.2,,,,,,,,,,,,,,2.2.10,,,,JAXB Databinding,,,,,,3,,,,"Please see the following thread from Nabble outlining the issue.  I have sample code that can be used to test the scenario.

http://www.nabble.com/Unmarshalling-Error%3A-UndeclaredPrefix%3A-Cannot-resolve-%27ns0%3AXxx%27-as-a-QName%3A-the-prefix-%27ns0%27-is-not-declared-to17918441.html#a24462568

Basically, when specifying an xsi:type for an element that extends and Complex Type, CXF throws the following error

[org.xml.sax.SAXParseException: UndeclaredPrefix: Cannot resolve 'ser:getSedans' as a QName: the prefix 'ser' is not declared.]
	at com.sun.xml.internal.bind.v2.runtime.unmarshaller.UnmarshallerImpl.handleStreamException(UnmarshallerImpl.java:396)
	at com.sun.xml.internal.bind.v2.runtime.unmarshaller.UnmarshallerImpl.unmarshal0(UnmarshallerImpl.java:335)
	at com.sun.xml.internal.bind.v2.runtime.unmarshaller.UnmarshallerImpl.unmarshal(UnmarshallerImpl.java:312)
	at org.apache.cxf.jaxb.JAXBEncoderDecoder.unmarshall(JAXBEncoderDecoder.java:607)
	... 29 more
Caused by: org.xml.sax.SAXParseException: UndeclaredPrefix: Cannot resolve 'ser:getSedans' as a QName: the prefix 'ser' is not declared.
	at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.createSAXParseException(ErrorHandlerWrapper.java:195)
	at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.error(ErrorHandlerWrapper.java:131)
	at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:384)
	at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:318)
	at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator$XSIErrorReporter.reportError(XMLSchemaValidator.java:410)
	at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.reportSchemaError(XMLSchemaValidator.java:3165)
	at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.getAndCheckXsiType(XMLSchemaValidator.java:2435)
	at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.handleStartElement(XMLSchemaValidator.java:1922)
",,,,,,,,,,,,,,,CXF-3047,,21/Jul/09 13:22;ylangisc;StreamReaderProblem.zip;https://issues.apache.org/jira/secure/attachment/12414102/StreamReaderProblem.zip,14/Jul/09 19:49;john.pfeifer@billmelater.com;cxf-test.tar;https://issues.apache.org/jira/secure/attachment/12413474/cxf-test.tar,,,,,2.0,,,,,,,,,,,,,,,,,Blocked on External,,,2009-07-15 16:55:30.335,,,no_permission,,,,,,,,,,,,,113768,,,Tue Oct 05 10:08:17 UTC 2010,,,,,,0|i1ae4n:,268755,,,,,,,,"14/Jul/09 19:49;john.pfeifer@billmelater.com;Run mvn clean install jetty:run

Then using SOAPUI or another client, take the request from README.txt and send it to the service at URL

http://localhost:8080/cxf-test/SedansService","15/Jul/09 16:55;dkulp;
Ok.   This is definitely a bug in JAXB's validation stuff, not CXF.   :-(

When looking up xsi:types, it's not using the NamespaceContext of the original StAX stream.    It's only using the namespace prefixes that it has processed.   Thus, only prefixes defined on the getSedans element would be looked at. 

I'm going to log a bug with JAXB folks.    I'm not really sure what we can do about it.   
","15/Jul/09 17:23;dkulp;
Logged a bug with the JAXB folks:

https://jaxb.dev.java.net/issues/show_bug.cgi?id=665

Feel free to vote for it.
","21/Jul/09 13:21;ylangisc;imho it's not a JAXB bug. Based on your testcase you logged with the JAXB folks I wrote a modified one without any JAXB dependencies. I'm just validating the XML with a W3CDOMStreamReader as source and I get the same behaviour. But it's even worse: The issue persists when using the standard XMLStreamReader implementation from my JDK 1.6.

I'm going to upload my test class with the appropriate xsd's (cars.xsd sligthly modified).

Please comment...","21/Jul/09 13:48;dkulp;
Interesting.   This sound like it might be a bug in the Xerces validator then.   You MAY want to try grabbing whatever the latest  version of Xerces is and trying to reproduce it with that.   Log a bug with them and attach your test case if it does.    (much of the parser/validation stuff in the JDK is repackaged Xerces stuff)

In either case, it's not something we can work around.   JAXB MIGHT be able to work around it (since they know when they are reading a qname and might be able to munge things a bit when doing so), but it does sound like a validator issue. 
","22/Jul/09 15:52;ylangisc;I've dug a little bit more into these issues. 

Your test case is a different configuration (as you have JAXB in-between). JAXB doesn't construct the NamespaceContext correctly. That's what I've found out too...With my test case I hit a different issue in the JDK-repacked Xerces validator. After switching to the trunk version (stable version 2.9.1 doesn't work because of https://issues.apache.org/jira/browse/XERCESJ-1314) everything is fine. So we have two different issues. The Xerces bug seems to be fixed in the trunk. So let's wait for the JAXB fix...  
","07/Oct/09 14:33;john.pfeifer@billmelater.com;Looks like this was fixed in JAXB, do you have a CXF target release number?","07/Oct/09 14:41;dkulp;
It's fixed in the JAXB sources, but there hasn't yet been a release of it.   Thus, we cannot pick it up yet.

","22/Apr/10 08:25;gigerstyle;This bug still occurs when using latest JAXB SNAPHSOT (tryied 20091103, which should be fixed) and xerces 2.9.1
I've double checked that the correct JAXB and xerces version are used.

The following workaround/fix was developped by Yves and me to show the problem:

--- common/src/main/java/org/apache/cxf/staxutils/W3CDOMStreamReader.java.orig  2010-01-19 21:48:27.000000000 +0100
+++ common/src/main/java/org/apache/cxf/staxutils/W3CDOMStreamReader.java       2010-02-10 09:09:23.000000000 +0100
@@ -106,6 +106,9 @@
         }
 
         if (nodes != null) {
+            // flag if namespace declarations from Envelope and Body should be added to this frame
+            boolean addEnvBodyNS = false;
+
             for (int i = 0; i < nodes.getLength(); i++) {
                 Node node = nodes.item(i);
                 String prefix = node.getPrefix();
@@ -127,10 +130,44 @@
                     prefix = name.substring(6);
                     frame.uris.add(value);
                     frame.prefixes.add(prefix);
+                } else if (prefix.length() > 0 
+                    && ""http://www.w3.org/2001/XMLSchema-instance""
+                       .equals(element.lookupNamespaceURI(prefix))) {
+                    addEnvBodyNS = true;
+                    frame.attributes.add(node);
                 } else {
                     frame.attributes.add(node);
                 }
             }
+            if (addEnvBodyNS) {
+                Document doc = frame.getElement().getOwnerDocument();
+                Element envelope = 
+                    (Element) doc.getElementsByTagNameNS(
+                        ""http://schemas.xmlsoap.org/soap/envelope/"", ""Envelope"").item(0);
+                Element body = 
+                    (Element) doc.getElementsByTagNameNS(
+                        ""http://schemas.xmlsoap.org/soap/envelope/"", ""Body"").item(0);
+
+                populateCurrentFrameWithNS(envelope);
+                populateCurrentFrameWithNS(body);
+            }
+        }
+    }
+
+    private void populateCurrentFrameWithNS(Element element) {
+        // Examine namespace declarations and add them to the current frame
+        NamedNodeMap nodes = element.getAttributes();
+        if (nodes != null) {
+            for (int i = 0; i < nodes.getLength(); i++) {
+                Node node = nodes.item(i);
+                String prefix = node.getPrefix();
+                String localName = node.getLocalName();
+                String value = node.getNodeValue();
+                if (""xmlns"".equals(prefix)) {
+                    getCurrentFrame().prefixes.add(localName);
+                    getCurrentFrame().uris.add(value);
+                }
+            }
         }
     }","01/Oct/10 21:12;dkulp; 

This was fixed in 2.2.10 (verified after fixing the src/main/resources/cxf-context.xml file).","05/Oct/10 10:08;gigerstyle;I don't think so:

org.apache.cxf.interceptor.Fault: Unmarshalling Error: UndeclaredPrefix: Cannot resolve 's:string' as a QName: the prefix 's' is not declared. 
        at org.apache.cxf.jaxb.JAXBEncoderDecoder.unmarshall(JAXBEncoderDecoder.java:773)
        at org.apache.cxf.jaxb.JAXBEncoderDecoder.unmarshall(JAXBEncoderDecoder.java:624)
        at org.apache.cxf.jaxb.io.DataReaderImpl.read(DataReaderImpl.java:150)
        at org.apache.cxf.interceptor.DocLiteralInInterceptor.handleMessage(DocLiteralInInterceptor.java:198)
        at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:244)
        at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:110)
        at org.apache.cxf.transport.servlet.ServletDestination.invoke(ServletDestination.java:98)
        at org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:423)
        at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:178)
        at org.apache.cxf.transport.servlet.AbstractCXFServlet.invoke(AbstractCXFServlet.java:142)
        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.handleRequest(AbstractHTTPServlet.java:179)
        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.doPost(AbstractHTTPServlet.java:103)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:727)
        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.service(AbstractHTTPServlet.java:159)
        at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:511)
        at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:390)
        at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216)
        at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:182)
        at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765)
        at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:418)
        at org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:230)
        at org.mortbay.jetty.handler.HandlerCollection.handle(HandlerCollection.java:114)
        at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)
        at org.mortbay.jetty.Server.handle(Server.java:326)
        at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:536)
        at org.mortbay.jetty.HttpConnection$RequestHandler.content(HttpConnection.java:930)
        at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:834)
        at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:212)
        at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:405)
        at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:409)
        at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:582)
Caused by: javax.xml.bind.UnmarshalException
 - with linked exception:
[org.xml.sax.SAXParseException: UndeclaredPrefix: Cannot resolve 's:string' as a QName: the prefix 's' is not declared.]
        at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl.handleStreamException(UnmarshallerImpl.java:425)
        at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl.unmarshal0(UnmarshallerImpl.java:362)
        at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl.unmarshal(UnmarshallerImpl.java:339)
        at org.apache.cxf.jaxb.JAXBEncoderDecoder.unmarshall(JAXBEncoderDecoder.java:755)
        ... 30 more
Caused by: org.xml.sax.SAXParseException: UndeclaredPrefix: Cannot resolve 's:string' as a QName: the prefix 's' is not declared.
        at org.apache.xerces.util.ErrorHandlerWrapper.createSAXParseException(Unknown Source)
        at org.apache.xerces.util.ErrorHandlerWrapper.error(Unknown Source)
        at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)
        at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)
        at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)
        at org.apache.xerces.impl.xs.XMLSchemaValidator$XSIErrorReporter.reportError(Unknown Source)
        at org.apache.xerces.impl.xs.XMLSchemaValidator.reportSchemaError(Unknown Source)
        at org.apache.xerces.impl.xs.XMLSchemaValidator.getAndCheckXsiType(Unknown Source)
        at org.apache.xerces.impl.xs.XMLSchemaValidator.handleStartElement(Unknown Source)
        at org.apache.xerces.impl.xs.XMLSchemaValidator.startElement(Unknown Source)
        at org.apache.xerces.jaxp.validation.ValidatorHandlerImpl.startElement(Unknown Source)
        at com.sun.xml.bind.v2.runtime.unmarshaller.ValidatingUnmarshaller.startElement(ValidatingUnmarshaller.java:96)
        at com.sun.xml.bind.v2.runtime.unmarshaller.InterningXmlVisitor.startElement(InterningXmlVisitor.java:71)
        at com.sun.xml.bind.v2.runtime.unmarshaller.StAXStreamConnector.handleStartElement(StAXStreamConnector.java:242)
        at com.sun.xml.bind.v2.runtime.unmarshaller.StAXStreamConnector.bridge(StAXStreamConnector.java:176)
        at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl.unmarshal0(UnmarshallerImpl.java:360)
        ... 32 more

Example request:

<?xml version=""1.0"" encoding=""utf-8""?>
<soap:Envelope xmlns:wsa=""http://schemas.xmlsoap.org/ws/2004/08/addressing""
               xmlns:wsse=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd""
               xmlns:wsu=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd""
               xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/""
               xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
               xmlns:s=""http://www.w3.org/2001/XMLSchema"">
    <soap:Header>
        <wsa:MessageID wsu:Id=""Id-1e6c3a80-c355-4461-9138-e506dd1d8ab9"">urn:uuid:9b1d9900-43e1-4648-a60f-ba57c7a88ae7
        </wsa:MessageID>
    </soap:Header>
    <soap:Body wsu:Id=""Id-008557f0-0f89-4c2f-8e82-34647a611040"">
        <Ping xmlns=""http://www.swissdec.ch/schema/sd/20090803/SalaryDeclarationServiceTypes"">
            <Echo xsi:type=""s:string"">This is an echo string</Echo>
        </Ping>
    </soap:Body>
</soap:Envelope>

lsof -p 13292 | grep xerces
java    13292 giger  mem    REG               9,12  1363159  1561794 /home/giger/.m2/repository/xerces/xercesImpl/2.10.0/xercesImpl-2.10.0.jar
java    13292 giger  101r   REG               9,12  1363159  1561794 /home/giger/.m2/repository/xerces/xercesImpl/2.10.0/xercesImpl-2.10.0.jar

lsof -p 13292 | grep jaxb
java    13292 giger  mem    REG               9,12    91790  1441809 /home/giger/.m2/repository/org/apache/cxf/cxf-rt-databinding-jaxb/2.2.10/cxf-rt-databinding-jaxb-2.2.10.jar
java    13292 giger  mem    REG               9,12   876610   143004 /home/giger/.m2/repository/com/sun/xml/bind/jaxb-impl/2.1.13/jaxb-impl-2.1.13.jar
java    13292 giger  mem    REG               9,12    89967  1007474 /home/giger/.m2/repository/javax/xml/bind/jaxb-api/2.1/jaxb-api-2.1.jar
java    13292 giger  130r   REG               9,12    89967  1007474 /home/giger/.m2/repository/javax/xml/bind/jaxb-api/2.1/jaxb-api-2.1.jar
java    13292 giger  139r   REG               9,12   876610   143004 /home/giger/.m2/repository/com/sun/xml/bind/jaxb-impl/2.1.13/jaxb-impl-2.1.13.jar
java    13292 giger  142r   REG               9,12    91790  1441809 /home/giger/.m2/repository/org/apache/cxf/cxf-rt-databinding-jaxb/2.2.10/cxf-rt-databinding-jaxb-2.2.10.jar

Endorsed JAXP to force pickup of *Factories from xerces-2.10.0:
java    13649 giger  DEL    REG               9,12            134849 /home/giger/projects/itserve/lohnstandard/distributor/production/trunk/distributor-core/target/endorsed/jaxp-api-1.4.3.jar
java    13649 giger    3r   REG               9,12   218774   134849 /home/giger/projects/itserve/lohnstandard/distributor/production/trunk/distributor-core/target/endorsed/jaxp-api-1.4.3.jar
",,,,,,,,,,,,,,,,,,,,
wsdl_first_dynamic_client example doesn't work for complex wsdl,CXF-2339,12430322,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Blocker,Fixed,dkulp,sriasarch,sriasarch,14/Jul/09 06:57,04/Dec/09 22:34,14/Mar/19 02:29,16/Oct/09 17:12,2.2,,,,,,,,,,,,,,2.1.8,2.2.5,,,JAX-WS Runtime,,,,,,0,,,,"I am using CXF 2.2 version from samples , I am trying to execute wsdl_first_dynamic_client by using the complex wsdl not helloworld.

I changed the servlet.xml from helloworld to complex

<jaxws:endpoint
        id=""hello_world""
        implementor=""org.apache.cxf.demo.complex.ComplexImpl""
        wsdlLocation=""WEB-INF/wsdl/complex.wsdl""
        address=""/hello_world"">
    </jaxws:endpoint>

and build.xml pointing to complex.wsdl.

Exception I am getting:
12:25:23,578 ERROR [[/helloworld]] StandardWrapper.Throwable
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'hello_world': Invocation of init method failed; nested exception is javax.xml.ws.WebServiceException: org.apache.cxf.service.factory.ServiceConstructionException: Could not find definition for service {http://complex.demo.cxf.apache.org/}ComplexImplService.
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1337)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:473)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:409)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:380)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:264)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:221)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:261)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:429)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:729)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:381)
	at org.apache.cxf.transport.servlet.CXFServlet.loadAdditionalConfig(CXFServlet.java:166)
	at org.apache.cxf.transport.servlet.CXFServlet.updateContext(CXFServlet.java:134)
	at org.apache.cxf.transport.servlet.CXFServlet.loadSpringBus(CXFServlet.java:101)
	at org.apache.cxf.transport.servlet.CXFServlet.loadBus(CXFServlet.java:70)
	at org.apache.cxf.transport.servlet.AbstractCXFServlet.init(AbstractCXFServlet.java:79)
	at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1161)
	at org.apache.catalina.core.StandardWrapper.load(StandardWrapper.java:981)
	at org.apache.catalina.core.StandardContext.loadOnStartup(StandardContext.java:4071)
	at org.apache.catalina.core.StandardContext.start(StandardContext.java:4375)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:790)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:770)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:553)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at org.apache.tomcat.util.modeler.BaseModelMBean.invoke(BaseModelMBean.java:296)
	at org.jboss.mx.server.RawDynamicInvoker.invoke(RawDynamicInvoker.java:164)
	at org.jboss.mx.server.MBeanServerImpl.invoke(MBeanServerImpl.java:659)
	at org.apache.catalina.core.StandardContext.init(StandardContext.java:5312)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at org.apache.tomcat.util.modeler.BaseModelMBean.invoke(BaseModelMBean.java:296)
	at org.jboss.mx.server.RawDynamicInvoker.invoke(RawDynamicInvoker.java:164)
	at org.jboss.mx.server.MBeanServerImpl.invoke(MBeanServerImpl.java:659)
	at org.jboss.web.tomcat.service.TomcatDeployer.performDeployInternal(TomcatDeployer.java:301)
	at org.jboss.web.tomcat.service.TomcatDeployer.performDeploy(TomcatDeployer.java:104)
	at org.jboss.web.AbstractWebDeployer.start(AbstractWebDeployer.java:375)
	at org.jboss.web.WebModule.startModule(WebModule.java:83)
	at org.jboss.web.WebModule.startService(WebModule.java:61)
	at org.jboss.system.ServiceMBeanSupport.jbossInternalStart(ServiceMBeanSupport.java:289)
	at org.jboss.system.ServiceMBeanSupport.jbossInternalLifecycle(ServiceMBeanSupport.java:245)
	at sun.reflect.GeneratedMethodAccessor3.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at org.jboss.mx.interceptor.ReflectedDispatcher.invoke(ReflectedDispatcher.java:155)
	at org.jboss.mx.server.Invocation.dispatch(Invocation.java:94)
	at org.jboss.mx.server.Invocation.invoke(Invocation.java:86)
	at org.jboss.mx.server.AbstractMBeanInvoker.invoke(AbstractMBeanInvoker.java:264)
	at org.jboss.mx.server.MBeanServerImpl.invoke(MBeanServerImpl.java:659)
	at org.jboss.system.ServiceController$ServiceProxy.invoke(ServiceController.java:978)
	at $Proxy0.start(Unknown Source)
	at org.jboss.system.ServiceController.start(ServiceController.java:417)
	at sun.reflect.GeneratedMethodAccessor9.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at org.jboss.mx.interceptor.ReflectedDispatcher.invoke(ReflectedDispatcher.java:155)
	at org.jboss.mx.server.Invocation.dispatch(Invocation.java:94)
	at org.jboss.mx.server.Invocation.invoke(Invocation.java:86)
	at org.jboss.mx.server.AbstractMBeanInvoker.invoke(AbstractMBeanInvoker.java:264)
	at org.jboss.mx.server.MBeanServerImpl.invoke(MBeanServerImpl.java:659)
	at org.jboss.mx.util.MBeanProxyExt.invoke(MBeanProxyExt.java:210)
	at $Proxy44.start(Unknown Source)
	at org.jboss.web.AbstractWebContainer.start(AbstractWebContainer.java:466)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at org.jboss.mx.interceptor.ReflectedDispatcher.invoke(ReflectedDispatcher.java:155)
	at org.jboss.mx.server.Invocation.dispatch(Invocation.java:94)
	at org.jboss.mx.interceptor.AbstractInterceptor.invoke(AbstractInterceptor.java:133)
	at org.jboss.mx.server.Invocation.invoke(Invocation.java:88)
	at org.jboss.mx.interceptor.ModelMBeanOperationInterceptor.invoke(ModelMBeanOperationInterceptor.java:142)
	at org.jboss.mx.interceptor.DynamicInterceptor.invoke(DynamicInterceptor.java:97)
	at org.jboss.system.InterceptorServiceMBeanSupport.invokeNext(InterceptorServiceMBeanSupport.java:238)
	at org.jboss.wsf.container.jboss42.DeployerInterceptor.start(DeployerInterceptor.java:87)
	at org.jboss.deployment.SubDeployerInterceptorSupport$XMBeanInterceptor.start(SubDeployerInterceptorSupport.java:188)
	at org.jboss.deployment.SubDeployerInterceptor.invoke(SubDeployerInterceptor.java:95)
	at org.jboss.mx.server.Invocation.invoke(Invocation.java:88)
	at org.jboss.mx.server.AbstractMBeanInvoker.invoke(AbstractMBeanInvoker.java:264)
	at org.jboss.mx.server.MBeanServerImpl.invoke(MBeanServerImpl.java:659)
	at org.jboss.mx.util.MBeanProxyExt.invoke(MBeanProxyExt.java:21


","Windows, Spring , Jdk1.5",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,Blocked on External,,,2009-07-15 14:54:07.565,,,no_permission,,Unknown,,,,,,,,,,,113767,,,Fri Oct 16 17:12:00 UTC 2009,,,,,,0|i0uxmn:,178589,,,,,,,,"15/Jul/09 14:54;dkulp;

You would need to do one of:

1) Add a @WebService annotation onto ComplexImpl to specify the serviceName and portName

2) Add the serviceName and endpointName attributes onto the jaxws:endpoint element to specify the values in the wsdl to look for.

Either of those should fix it.","17/Aug/09 22:50;dkarr;I'm only just examining CXF for possible usage, and I think I'm getting this same exception in this sample, without making any customizations, as appears to be done in this bug report.

I unpacked the distribution (2.2.3), then set up an environment setting script.  I tested it with ""wsdl_first"", and it appeared to work fine. I then tried the ""wsdl_first_dynamic_client"".  I built it, ran ""ant server"" in one window, and when I ran ""ant client"" in the other window (first running the environment setting script first), I got this:

--------------------
% ant client
Buildfile: build.xml

maybe.generate.code:

compile:

copy.maven.resources:

build:

client:
     [java] file:/C:/frameworks/apache-cxf-2.2.3/samples/wsdl_first_dynamic_client/wsdl/complex.wsdl
     [java] Exception in thread ""main"" org.apache.cxf.service.factory.ServiceConstructionException: Could not find definition for service {http://complex.demo.cxf.apache.org/}ComplexImplService.
     [java]     at org.apache.cxf.wsdl11.WSDLServiceFactory.create(WSDLServiceFactory.java:126)
     [java]     at org.apache.cxf.endpoint.ClientImpl.<init>(ClientImpl.java:148)
     [java]     at org.apache.cxf.endpoint.dynamic.DynamicClientFactory.createClient(DynamicClientFactory.java:253)
     [java]     at org.apache.cxf.endpoint.dynamic.DynamicClientFactory.createClient(DynamicClientFactory.java:196)
     [java]     at org.apache.cxf.endpoint.dynamic.DynamicClientFactory.createClient(DynamicClientFactory.java:189)
     [java]     at org.apache.cxf.endpoint.dynamic.DynamicClientFactory.createClient(DynamicClientFactory.java:182)
     [java]     at demo.hw.client.ComplexClient.main(ComplexClient.java:70)
     [java] Java Result: 1

BUILD SUCCESSFUL
Total time: 2 seconds
","19/Aug/09 00:30;bmargulies;I tried this with the trunk and got a different problem from mvn -Pclient:

[ERROR] BUILD ERROR
[INFO] ------------------------------------------------------------------------
[INFO] An exception occured while executing the Java class. null

com.sun.tools.internal.xjc.api.XJC
[INFO] ------------------------------------------------------------------------
[INFO] Trace
org.apache.maven.lifecycle.LifecycleExecutionException: An exception occured while executing the Java class. null
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:703)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:540)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:519)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:371)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:332)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:181)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:356)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:137)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:356)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)
	at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)
	at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)
	at org.codehaus.classworlds.Launcher.main(Launcher.java:375)
Caused by: org.apache.maven.plugin.MojoExecutionException: An exception occured while executing the Java class. null
	at org.codehaus.mojo.exec.ExecJavaMojo.execute(ExecJavaMojo.java:338)
	at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:483)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:678)
	... 16 more
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at org.codehaus.mojo.exec.ExecJavaMojo$1.run(ExecJavaMojo.java:283)
	at java.lang.Thread.run(Thread.java:613)
Caused by: java.lang.IllegalStateException: Unable to create schema compiler
	at org.apache.cxf.endpoint.dynamic.DynamicClientFactory.createClient(DynamicClientFactory.java:264)
	at org.apache.cxf.endpoint.dynamic.DynamicClientFactory.createClient(DynamicClientFactory.java:196)
	at org.apache.cxf.endpoint.dynamic.DynamicClientFactory.createClient(DynamicClientFactory.java:189)
	at org.apache.cxf.endpoint.dynamic.DynamicClientFactory.createClient(DynamicClientFactory.java:182)
	at demo.hw.client.ComplexClient.main(ComplexClient.java:70)
	... 6 more
Caused by: javax.xml.bind.JAXBException
 - with linked exception:
[java.lang.ClassNotFoundException: com.sun.tools.internal.xjc.api.XJC]
	at org.apache.cxf.jaxb.JAXBUtils.createSchemaCompiler(JAXBUtils.java:624)
	at org.apache.cxf.endpoint.dynamic.DynamicClientFactory.createClient(DynamicClientFactory.java:262)
	... 10 more
Caused by: java.lang.ClassNotFoundException: com.sun.tools.internal.xjc.api.XJC
	at java.net.URLClassLoader$1.run(URLClassLoader.java:200)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:188)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:316)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:251)
	at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:374)
	at java.lang.Class.forName0(Native Method)
	at java.lang.Class.forName(Class.java:164)
	at org.apache.cxf.jaxb.JAXBUtils.createSchemaCompiler(JAXBUtils.java:617)
	... 11 more
","19/Aug/09 00:55;bmargulies;In current trunk the sample is busted, as described, out of the box.

To repro I had to run the full distribution build process; trying to run it from a devo tree ran into the strange lack of xjc that I posted earlier.
","18/Sep/09 17:46;jacktang;Hi,

I managed to get this example working with the following changes
1) At the ComplexImpl, I haved added the following annotation
@javax.jws.WebService(
		portName = ""Company_ESB_Application_Biztalk_AgentDetails_4405_AgentDetails_PrtSoap"", 
		serviceName = ""Company_ESB_Application_Biztalk_AgentDetails_4405_AgentDetails_Prt"", 
        targetNamespace = ""http://Company.com/Application"", 
        endpointInterface = ""com.company.application.CompanyESBApplicationBiztalkAgentDetails4405AgentDetailsPrtSoap"")

2) complex.wsdl, I have made the following changes for wsdl:definitions/wsdl:service
		<wsdl:port
			name=""Company_ESB_Application_Biztalk_AgentDetails_4405_AgentDetails_PrtSoap""
			binding=""tns:Company_ESB_Application_Biztalk_AgentDetails_4405_AgentDetails_PrtSoap"">
			<soap:address
				location=""http://localhost:9000/Complex"" />
		</wsdl:port>

3) At the ComplexClient, I have make the following changes
QName bindingName = new QName(""http://Company.com/Application"", ""Company_ESB_Application_Biztalk_AgentDetails_4405_AgentDetails_PrtSoap"");

I am using the java commands to run the example.

However, I have another question. 
Is this wsdl_first_dynamic_client suppose to demonstrate the use of JaxWsDynamicClientFactory?

Thanks
Jack","21/Sep/09 16:00;deki;I've also hit 

java.lang.IllegalStateException: Unable to create schema compiler
	at org.apache.cxf.endpoint.dynamic.DynamicClientFactory.createClient(DynamicClientFactory.java:264)
	at org.apache.cxf.endpoint.dynamic.DynamicClientFactory.createClient(DynamicClientFactory.java:196)
	at org.apache.cxf.endpoint.dynamic.DynamicClientFactory.createClient(DynamicClientFactory.java:189)
	at org.apache.cxf.endpoint.dynamic.DynamicClientFactory.createClient(DynamicClientFactory.java:144)
	at com.atanion.activation.target.executor.CxfSoapExecutor.execute(CxfSoapExecutor.java:64)
	at com.atanion.activation.target.executor.CxfSoapExecutor.main(CxfSoapExecutor.java:280)
Caused by: javax.xml.bind.JAXBException
 - with linked exception:
[java.lang.ClassNotFoundException: com.sun.tools.internal.xjc.api.XJC]
	at org.apache.cxf.jaxb.JAXBUtils.createSchemaCompiler(JAXBUtils.java:622)
	at org.apache.cxf.endpoint.dynamic.DynamicClientFactory.createClient(DynamicClientFactory.java:262)
	... 5 more
Caused by: java.lang.ClassNotFoundException: com.sun.tools.internal.xjc.api.XJC
	at java.net.URLClassLoader$1.run(URLClassLoader.java:200)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:188)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:306)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:268)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:251)
	at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:319)
	at java.lang.Class.forName0(Native Method)
	at java.lang.Class.forName(Class.java:164)
	at org.apache.cxf.jaxb.JAXBUtils.createSchemaCompiler(JAXBUtils.java:615)
	... 6 more

and fixed it by adding jaxb-xjc to the dependency list.","16/Oct/09 17:12;dkulp;Fixed the dynamic_client pom to include xjc, but also updated the JAXBUtils to look for the tools jar so xjc isn't needed on java6.

",,,,,,,,,,,,,,,,,,,,,,,,
WS-SecurityPolicy RequiredElements and RequiredParts assertions are not supported,CXF-2334,12429836,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,dkulp,dkulp,08/Jul/09 18:18,03/Aug/09 20:07,14/Mar/19 02:29,08/Jul/09 20:28,2.2.2,,,,,,,,,,,,,,2.2.3,,,,WS-* Components,,,,,,0,,,,"
The RequiredParts/Element assertions are not wired into anything other than the builder.   Thus, they cannot be properly asserted.",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113763,,,2009-07-08 18:18:54.0,,,,,,0|i13zjz:,231390,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
EncryptedElements/SignedElements WS-SecurityPolicy assertions not supported,CXF-2333,12429828,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,dkulp,dkulp,08/Jul/09 17:10,03/Aug/09 20:07,14/Mar/19 02:29,08/Jul/09 20:28,2.2.2,,,,,,,,,,,,,,2.2.3,,,,WS-* Components,,,,,,0,,,,"
No interceptor provider is registered for the EncryptedElements/SignedElements assertions so you get a ""no alternative supported"" type error.",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113762,,,2009-07-08 17:10:30.0,,,,,,0|i0v3xr:,179611,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
can't publish endpoint with XmlBeans databinding when build servicemodel from class,CXF-2332,12429686,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,ffang,ffang,ffang,07/Jul/09 07:42,03/Aug/09 20:07,14/Mar/19 02:29,08/Jul/09 03:09,2.1.5,2.2.2,,,,,,,,,,,,,2.1.6,2.2.3,2.3,,,,,,,,0,,,,"How to reproduce:
if we remove wsdlLocation=""wsdl_systest/xmlbeans/hello_world.wsdl"" from src/test/java/org/apache/cxf/systest/xmlbeans/cxf.xml and make it to  generate servicemodel from class when publish endpoint with xmlbeans databinding,
then we get exception like
Running org.apache.cxf.systest.xmlbeans.ClientServerXmlBeansTest
javax.xml.ws.WebServiceException: java.lang.RuntimeException: Failed to find schema for: URI_SHA_1_5949B7699D1A51AD1D8D1F0B9CDADF4C529B982D/hello_world.wsdl
	at org.apache.cxf.jaxws.EndpointImpl.doPublish(EndpointImpl.java:275)
	at org.apache.cxf.jaxws.EndpointImpl.publish(EndpointImpl.java:209)
	at org.apache.cxf.jaxws.spi.ProviderImpl.createAndPublishEndpoint(ProviderImpl.java:84)
	at javax.xml.ws.Endpoint.publish(Endpoint.java:47)
	at org.apache.cxf.systest.xmlbeans.Server.run(Server.java:40)
	at org.apache.cxf.testutil.common.AbstractTestServerBase.startInProcess(AbstractTestServerBase.java:47)
	at org.apache.cxf.testutil.common.ServerLauncher.launchServer(ServerLauncher.java:175)
	at org.apache.cxf.testutil.common.AbstractClientServerTestBase.launchServer(AbstractClientServerTestBase.java:75)
	at org.apache.cxf.systest.xmlbeans.ClientServerXmlBeansTest.startServers(ClientServerXmlBeansTest.java:50)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at org.junit.internal.runners.ClassRoadie.runBefores(ClassRoadie.java:49)
	at org.junit.internal.runners.ClassRoadie.runProtected(ClassRoadie.java:36)
	at org.junit.internal.runners.JUnit4ClassRunner.run(JUnit4ClassRunner.java:42)
	at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:62)
	at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:140)
	at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:165)
	at org.apache.maven.surefire.Surefire.run(Surefire.java:107)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:289)
	at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:1005)
Caused by: java.lang.RuntimeException: Failed to find schema for: URI_SHA_1_5949B7699D1A51AD1D8D1F0B9CDADF4C529B982D/hello_world.wsdl
	at org.apache.cxf.xmlbeans.XmlBeansSchemaInitializer.getSchema(XmlBeansSchemaInitializer.java:148)
	at org.apache.cxf.xmlbeans.XmlBeansSchemaInitializer.mapClass(XmlBeansSchemaInitializer.java:200)
	at org.apache.cxf.xmlbeans.XmlBeansSchemaInitializer.checkForExistence(XmlBeansSchemaInitializer.java:239)
	at org.apache.cxf.xmlbeans.XmlBeansSchemaInitializer.begin(XmlBeansSchemaInitializer.java:157)
	at org.apache.cxf.service.ServiceModelVisitor.visitOperation(ServiceModelVisitor.java:97)
	at org.apache.cxf.service.ServiceModelVisitor.walk(ServiceModelVisitor.java:74)
	at org.apache.cxf.xmlbeans.XmlBeansDataBinding.initialize(XmlBeansDataBinding.java:111)
	at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.buildServiceFromClass(ReflectionServiceFactoryBean.java:376)
	at org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean.buildServiceFromClass(JaxWsServiceFactoryBean.java:523)
	at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.initializeServiceModel(ReflectionServiceFactoryBean.java:439)
	at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.create(ReflectionServiceFactoryBean.java:195)
	at org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean.create(JaxWsServiceFactoryBean.java:163)
	at org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory.createEndpoint(AbstractWSDLBasedEndpointFactory.java:100)
	at org.apache.cxf.frontend.ServerFactoryBean.create(ServerFactoryBean.java:117)
	at org.apache.cxf.jaxws.JaxWsServerFactoryBean.create(JaxWsServerFactoryBean.java:167)
	at org.apache.cxf.jaxws.EndpointImpl.getServer(EndpointImpl.java:346)
	at org.apache.cxf.jaxws.EndpointImpl.doPublish(EndpointImpl.java:259)
	... 25 more
Caused by: java.lang.IllegalArgumentException: InputStream cannot be null
	at javax.xml.parsers.DocumentBuilder.parse(DocumentBuilder.java:94)
	at org.apache.cxf.helpers.XMLUtils.parse(XMLUtils.java:136)
	at org.apache.cxf.xmlbeans.XmlBeansSchemaInitializer.getSchema(XmlBeansSchemaInitializer.java:129)
	... 41 more
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-07-07 08:40:31.805,,,no_permission,,,,,,,,,,,,,113761,,,Wed Jul 08 03:09:40 UTC 2009,,,,,,0|i0v053:,178996,,,,,,,,"07/Jul/09 08:40;njiang;@Freeman
that is because you didn't include the schema files into your class path.
If you take a look at the pom.xml of the example , you will see it includes the some resources files which are generated by wsdl2java

{code}
          <resources>
                  <resource>
                    <targetPath>schemaorg_apache_xmlbeans</targetPath>
                    <directory>target/generated-sources/cxf/schemaorg_apache_xmlbeans</directory>
                    <includes>
                       <include> **/*.xsb </include>
                       <include> **/*.class </include>
                    </includes>
                 </resource>
          </resources>
{code} ","07/Jul/09 08:55;ffang;Hi Willem,

No, I don't think so. Actually those resource copy already in the pom.xml
IMHO the error comes from try to retrieve xsd schema file using wsdl file as the key, which shouldn't happen at all.
And both our system test and example  add wsdlLocation to publish the endpoint, which means will use buildFromWsdl, but not buildFromClass, so can't expose the problem.

Freeman ","08/Jul/09 03:09;ffang;commit fix
http://svn.apache.org/viewvc?rev=791753&view=rev for trunk
http://svn.apache.org/viewvc?rev=791952&view=rev for 2.2 branch
http://svn.apache.org/viewvc?rev=792016&view=rev for 2.1 branch",,,,,,,,,,,,,,,,,,,,,,,,,,,,
AbstractDataBinding makes invalid DOM mods with Java 1.6,CXF-2331,12429573,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,bmargulies,bmargulies,bmargulies,06/Jul/09 00:16,03/Aug/09 20:07,14/Mar/19 02:29,06/Jul/09 01:07,2.2.3,,,,,,,,,,,,,,2.1.6,2.2.3,,,Simple Frontend,,,,,,0,,,,"See in unit tests for Javascript, of all places.

Caused by: org.w3c.dom.DOMException: NO_MODIFICATION_ALLOWED_ERR: An attempt is made to modify an object where modifications are not allowed.
	at com.sun.org.apache.xerces.internal.dom.ElementImpl.removeAttribute(ElementImpl.java:406)
	at org.apache.cxf.databinding.AbstractDataBinding.addSchemaDocument(AbstractDataBinding.java:121)
	at org.apache.cxf.jaxb.JAXBDataBinding.initialize(JAXBDataBinding.java:417)
	at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.buildServiceFromClass(ReflectionServiceFactoryBean.java:376)
	at org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean.buildServiceFromClass(JaxWsServiceFactoryBean.java:523)
	at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.initializeServiceModel(ReflectionServiceFactoryBean.java:439)
	at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.create(ReflectionServiceFactoryBean.java:195)
	at org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean.create(JaxWsServiceFactoryBean.java:163)
	at org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory.createEndpoint(AbstractWSDLBasedEndpointFactory.java:100)
	at org.apache.cxf.frontend.ServerFactoryBean.create(ServerFactoryBean.java:117)
	at org.apache.cxf.jaxws.JaxWsServerFactoryBean.create(JaxWsServerFactoryBean.java:167)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:1413)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1374)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1334)
	... 37 more

Running org.apache.cxf.javascript.types.SerializationTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.174 sec
Running org.apache.cxf.javascript.JsHttpRequestTest
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-07-07 16:34:54.43,,,no_permission,,,,,,,,,,,,,113760,,,Tue Jul 07 16:34:54 UTC 2009,,,,,,0|i0v04n:,178994,,,,,,,,"06/Jul/09 01:07;bmargulies;I've fixed the immediate problem, but there are still build test failures on JDK 1.6.
","07/Jul/09 16:34;hudson;Integrated in CXF-Trunk-JDK16 #97 (See [http://hudson.zones.apache.org/hudson/job/CXF-Trunk-JDK16/97/])
    ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException thrown in HTTPHeadersImpl.getListValues(),CXF-2330,12429540,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,sergey_beryozkin,andrew.young,andrew.young,05/Jul/09 01:40,03/Aug/09 20:07,14/Mar/19 02:29,05/Jul/09 19:11,2.2.2,,,,,,,,,,,,,,2.2.3,2.3,,,JAX-RS,,,,,,0,,,,"Line 132 in HttpHeadersImpl.java throws a NullPointerException if the given header exists, but it's value is null.

The offending line looks like this:

String[] ls =  values.get(0).split("","");

The problem can be averted by changing line 126 from this:

if (values == null || values.isEmpty()) {

To this:

if (values == null || values.isEmpty() || values.get(0) == null) {

",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-07-05 19:11:59.408,,,no_permission,,,,,,,,,,,,,113759,,,Sun Jul 05 19:11:59 UTC 2009,,,,,,0|i0v087:,179010,,,,,,,,"05/Jul/09 19:11;sergey_beryozkin;It was reported last week by Kynan and was fixed on the trunk and 2.2.3 SNAPSHOT

thanks !",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException in JAXBEncoderDecoder when marshalling a null Array,CXF-2329,12429309,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,,kalebwalton,kalebwalton,01/Jul/09 17:39,03/Aug/09 20:07,14/Mar/19 02:29,02/Jul/09 16:45,2.2.2,,,,,,,,,,,,,,2.1.6,2.2.3,,,JAXB Databinding,,,,,,0,,,,"I have an Exception object that includes an array that is initialized to null. When the JAXBEncoderDecoder is going to encode it, it encounters an NPE as follows:

WARNING: Exception occurred while writing fault.
org.apache.cxf.interceptor.Fault: Marshalling Error: null
	at org.apache.cxf.jaxb.JAXBEncoderDecoder.marshallException(JAXBEncoderDecoder.java:294)
	at org.apache.cxf.jaxb.io.DataWriterImpl.write(DataWriterImpl.java:162)
	at org.apache.cxf.interceptor.FaultOutInterceptor.handleMessage(FaultOutInterceptor.java:78)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
	at org.apache.cxf.interceptor.AbstractFaultChainInitiatorObserver.onMessage(AbstractFaultChainInitiatorObserver.java:96)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:284)
	at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:89)
	at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.serviceRequest(JettyHTTPDestination.java:302)
	at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.doService(JettyHTTPDestination.java:265)
	at org.apache.cxf.transport.http_jetty.JettyHTTPHandler.handle(JettyHTTPHandler.java:70)
	at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:722)
	at org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:206)
	at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:139)
	at org.mortbay.jetty.Server.handle(Server.java:324)
	at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:505)
	at org.mortbay.jetty.HttpConnection$RequestHandler.content(HttpConnection.java:842)
	at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:648)
	at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:211)
	at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:380)
	at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:395)
	at org.mortbay.thread.BoundedThreadPool$PoolThread.run(BoundedThreadPool.java:450)
Caused by: java.lang.NullPointerException
	at org.apache.cxf.jaxb.JAXBEncoderDecoder.writeArrayObject(JAXBEncoderDecoder.java:313)
	at org.apache.cxf.jaxb.JAXBEncoderDecoder.marshallException(JAXBEncoderDecoder.java:283)
	... 20 more


It seems like a simple null check could fix this one...",,1800,1800,,0%,1800,1800,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,Novice,,,,,,,,,,,113758,,,2009-07-01 17:39:10.0,,,,,,0|i0v1uf:,179272,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Corba Exceptions not being mapped correctly,CXF-2328,12429300,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,eamonndwyer,eamonndwyer,01/Jul/09 15:26,03/Aug/09 20:07,14/Mar/19 02:29,01/Jul/09 18:22,2.2.2,,,,,,,,,,,,,,2.1.6,2.2.3,,,JAX-WS Runtime,,,,,,0,,,,"Corba exceptions used to be mapped correctly in version 2.2.0.0 of cxf. In the latest code the underlying corba exception is not being reported back to the client.

It seems this change to ClientImpl.java has affected the corba binding

http://pastebin.com/m10019bf5

Previously the client was relying on 
chain.doIntercept(message);
being called. 

This would call
CorbaStreamInInterceptor.handleMessage which in turn would invoke

ep.getInFaultObserver().onMessage(message);

which would invoke CorbaStreamFaultInInterceptor.handleMessage

CorbaStreamFaultInInterceptor is the class that does the mapping, it needs to be called

",,,,,,,,,,,,,,,,,01/Jul/09 15:28;eamonndwyer;CorbaExceptionProblem.diff;https://issues.apache.org/jira/secure/attachment/12412287/CorbaExceptionProblem.diff,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113757,,,Wed Jul 01 15:28:39 UTC 2009,,,,,,0|i0v1u7:,179271,,,,,,,,"01/Jul/09 15:28;eamonndwyer;Test case that works with 
http://svn.apache.org/repos/asf/cxf/tags/cxf-2.2
but not with 
http://svn.apache.org/repos/asf/cxf/branches/2.2.x-fixes",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"@PathParam cannot be used by subresource if @Path(""{...}"") is declared by parent resource",CXF-2326,12429251,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,sergey_beryozkin,ceefour,ceefour,01/Jul/09 01:45,03/Aug/09 20:07,14/Mar/19 02:29,01/Jul/09 12:17,2.2.2,,,,,,,,,,,,,,2.2.3,2.3,,,JAX-RS,,,,,,0,,,,"The parent resource:

class SessionsResource {

    @Path(""{id}"")
    public SessionResource getSessionResource() {
       return new SessionResource();
    }

}

The subresource:

class SessionResource {

    @GET
    public int get(@PathParam(""id"") String id) {
       return id;
    }

}

Problem is: SessionResource.get() gets a null 'id' parameter even if we fill it.

The use case above works in JAX-RS RI (Jersey), and is the default resource layout generated by NetBeans 6.7.","Tomcat 6, Spring, Ubuntu 9.04",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113755,,,2009-07-01 01:45:52.0,,,,,,0|i14eqn:,233851,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Provider services don't work with Spring AOP JDK proxies,CXF-2325,12429198,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,dkulp,dkulp,30/Jun/09 15:23,03/Aug/09 20:07,14/Mar/19 02:29,30/Jun/09 15:23,2.1.5,2.2.2,,,,,,,,,,,,,2.1.6,2.2.3,,,JAX-WS Runtime,,,,,,0,,,,"
The method that CXF binds into the invoker for Provider services is the method object for the actual Impl class, not the Provider interface.   If the Provider instance is proxies (for example, if @Transactional), the invoke fails.    The Provider interface method should be bound instead.
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113754,,,2009-06-30 15:23:13.0,,,,,,0|i0v1n3:,179239,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HTTP Client ProxyServerPort shouldn't be an xs:int in the http-conf.xsd,CXF-2324,12429068,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,nwinkler,nwinkler,29/Jun/09 08:09,04/Dec/09 22:34,14/Mar/19 02:29,09/Nov/09 21:13,2.1.4,,,,,,,,,,,,,,2.2.5,,,,Transports,,,,,,0,,,,"In the {{cxf-rt-transports-http}} jar, the {{schemas/wsdl/http-conf.xsd}} file contains the following definition for the HTTP Client's {{ProxyServerPort}} element:

{code:xml}
<xs:attribute name=""ProxyServerPort"" type=""xs:int"" use=""optional"">
	<xs:annotation>
		<xs:documentation>
		Specifies the port number used by the proxy server.
		</xs:documentation>
	</xs:annotation>      
</xs:attribute>
{code}

The use of {{xs:int}} makes it impossible to define the {{ProxyServerPort}} value through one of Spring's {{PropertyPlaceholderConfigurer}}, e.g. like this:

{code:xml}
<http:conduit name=""{http://xyz.com/abc/service}AbcInterfacePort.http-conduit"">
	<http:client ProxyServer=""$(proxy.name)"" ProxyServerPort=""$(proxy.port)""/>

	<http:tlsClientParameters secureSocketProtocol=""SSL"" />
</http:conduit>
{code}

This fails on startup, since the XML validation of the context fails, complaining that {{$(proxy.port)}} is not a valid int value.

I know that one can disable schema validation through a CXF environment parameter, but this doesn't work when using a custom Spring context in the web application. I had to resort to subclassing Spring's {{XmlWebApplicationContext}} class with the following code to successfully start the application:

{code}
package com.sungard.banking.spring.web;

import org.springframework.beans.factory.xml.XmlBeanDefinitionReader;
import org.springframework.web.context.support.XmlWebApplicationContext;

public class NonValidatingXmlWebApplicationContext extends
		XmlWebApplicationContext {
	protected void initBeanDefinitionReader(
			XmlBeanDefinitionReader beanDefinitionReader) {
		super.initBeanDefinitionReader(beanDefinitionReader);
		beanDefinitionReader.setValidationMode(XmlBeanDefinitionReader.VALIDATION_NONE);
		beanDefinitionReader.setNamespaceAware(true);
	}
}
{code}

The same issue is reported in the Spring core project
* http://jira.springframework.org/browse/SPR-3180
* http://jira.springframework.org/browse/SPR-4847

With the mentioned Spring tx bean, it's at least possible to use standard bean definitions instead of the XSD-based ones. For HTTP Client, I didn't find any examples that would allow me to do that.
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113753,,,2009-06-29 08:09:04.0,,,,,,0|i0v0bz:,179027,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jax RS clients don't support features,CXF-2323,12428978,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,sergey_beryozkin,eamonndwyer,eamonndwyer,26/Jun/09 18:45,03/Aug/09 20:07,14/Mar/19 02:29,02/Jul/09 11:43,2.2.2,,,,,,,,,,,,,,2.2.3,2.3,,,JAX-RS,,,,,,0,,,,"It would make life easier if we could have features configureable for Jaxrs clients.

A proposed patch will follow shortly",,,,,,,,,,,,,,,,,26/Jun/09 18:49;eamonndwyer;CXF-2323.patch;https://issues.apache.org/jira/secure/attachment/12411949/CXF-2323.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2009-07-02 11:43:24.699,,,no_permission,,,,,,,,,,,,,113752,,,Thu Jul 02 14:07:38 UTC 2009,,,,,,0|i0v44f:,179641,,,,,,,,"02/Jul/09 11:43;sergey_beryozkin;Hi Eamonn - I applied the patch. I introduced ClientConfiguration holder which keeps all non-HTTP related artifacts (bus, conduit, interceptors of all sorts and will keep contexts, etc) - it just lets to keep WebClient very http-centric.
I will also provide the public access to this ClientConfiguration instance...

thanks, Sergey","02/Jul/09 13:38;eamonndwyer;Thanks Sergey
Can you just give me a bit of clarification on the ClientConfiguration object - I see that AbstractClient.getConfiguration() is marked as protected. So are you simply just saying that users shouldn't try to configure interceptors on a WebClient object in their client code using the API? 

For example with the old code (and after I had exposed the InIntercptors from AbstractClient) I was doing the following
String baseAddress = ""http://localhost:9000/"";
WebClient client = WebClient.create(baseAddress);
client.getInInterceptors().add(new MyInInterceptor());

If the getConfiguration() method in your applied patch was public I could do the same, but you have marked it as protected. Are you just saying that a JaxRS client shouldn't really have any knowledge of how to add interceptors using the api, and really they can just go use the new features capability to do that? In other words a JaxRS developer shouldn't be polluting their code with more JaxWS specific API? If that is the case I'm fine with that, but would just like to know my understanding is correct.  I'm perfectly happy just to live with features and have no real desire to programatically add interceptors.

","02/Jul/09 14:03;sergey_beryozkin;You can do the same by doing 

JAXRSClientFactoryBean bean = new JAXRSClientFactoryBean();
bean.setAddress(""http://foo"");
bean.addInInterceptors(inInterceptors);
WebClient client = bean.createWebClient();

So you set all the interceptors/etc you need and then you only deal with/see  WebClient HTTP methods

I'd just like to make WebClient api about HTTP only.

ClientConfiguration is a holder for all the nonHTTP artifacts - it actually made the code dealing with copying clients simpler.

As I said, I'd also like to make ClientConfiguration publicly available - but I'd rather introduce some helper method like 

WebClient.getConfiguration(Client)

which will work for proxies/web cliens alike. Would you like this helper method be available right now ?

cheers, Sergey",02/Jul/09 14:07;eamonndwyer;Oh I'm fine with the way things are at the moment. I just wanted to make sure I understood the current API. NO more work required in this area from you Sergey :),,,,,,,,,,,,,,,,,,,,,,,,,,,
Interceptors cannot make a copy of the returned input stream in JaxRS clients,CXF-2322,12428957,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,sergey_beryozkin,eamonndwyer,eamonndwyer,26/Jun/09 13:55,03/Aug/09 20:07,14/Mar/19 02:29,27/Jun/09 21:30,2.2.2,,,,,,,,,,,,,,2.2.3,2.3,,,JAX-RS,,,,,,0,,,,"The JaxWS clients use the stream object stored as inMessage.setContent(InputStream.class, is) which allows other interceptors to make copies of the returned stream. The JaxRS client however always goes back to the HttpInputStream stored in the HTTPURLConnection object. If you try to make a copy of the stream data you drain the HttpInputStream data and eventually the respose call will fail because the HttpInputStream is empty. 

I'ld like to propose a change to get the JaxRS client to always first check to see if a call to inMessage.getContent(InputStream) returns a stream and if not then default back to the HttpURLConnection's HttpInputStream. This will allow other intercpetors to make copies of the stream data.

Patch to follow very soon",,,,,,,,,,,,,,,,,26/Jun/09 13:59;eamonndwyer;CXF-2322.patch;https://issues.apache.org/jira/secure/attachment/12411925/CXF-2322.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2009-06-26 18:12:49.877,,,no_permission,,,,,,,,,,,,,113751,,,Tue Jul 07 16:34:53 UTC 2009,,,,,,0|i140cf:,231518,,,,,,,,26/Jun/09 13:59;eamonndwyer;I also made the getter and setter methods  for the InInterceptors and OutInterceptors on the AbstractClient class public so that a client can add interceptors to the list.,"26/Jun/09 18:12;sergey_beryozkin;Hi Eamonn - thanks for the patch.
There's one thing which I'd like to think more about. I was quite keen on making sure the WebClient and Client could expose only the methods to do with the http. So I might want to introduce another interface/class which can be used to customize things like in/out cxf interceptors, contexts, etc...
I'll see if it can be dome or not and then get back to you
thanks, Sergey","26/Jun/09 19:32;dkulp;
Well, we already have an InterceptorProvider interface for the interceptors.   :-)","27/Jun/09 21:30;sergey_beryozkin;Hi Eamonn - I applied the pacth, though I did a minor modification to the system test, I added interceptors before WebClient is created. I'll look at the way interceptors/etc can be retrieved from WebClient as part of working on  - I'd like to see if I can introduce some configuration holder

https://issues.apache.org/jira/browse/CXF-2323

thanks, Sergey","07/Jul/09 16:34;hudson;Integrated in CXF-Trunk-JDK16 #97 (See [http://hudson.zones.apache.org/hudson/job/CXF-Trunk-JDK16/97/])
    [] can't publish endpoint with XmlBeans databinding when build servicemodel from class
",,,,,,,,,,,,,,,,,,,,,,,,,,
Problems using restful client api in ServiceMix JBI component,CXF-2320,12428954,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,sergey_beryozkin,sergey_beryozkin,sergey_beryozkin,26/Jun/09 13:09,04/Dec/09 22:34,14/Mar/19 02:29,09/Oct/09 08:55,2.2.2,,,,,,,,,,,,,,2.2.5,2.3,,,Integration,JAX-RS,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113750,,,Fri Oct 09 08:55:36 UTC 2009,,,,,,0|i14ezj:,233891,,,,,,,,"26/Jun/09 13:24;sergey_beryozkin;Corresponding SMX4 issue

https://issues.apache.org/activemq/browse/SMX4-311
","07/Oct/09 16:43;sergey_beryozkin;I can not reproduce it at the moment.

here's the client code for the test project with no spring dependencies :

       JAXRSClientFactoryBean sf = new JAXRSClientFactoryBean();
        sf.setBindingId(JAXRSBindingFactory.JAXRS_BINDING_ID); 
        sf.setResourceClass(Catalog.class);
        sf.setAddress(""http://localhost:8080/rest/catalog/items"");
        BindingFactoryManager manager =
            sf.getBus().getExtension(BindingFactoryManager.class);
        JAXRSBindingFactory factory = new JAXRSBindingFactory();
        factory.setBus(sf.getBus());
        manager.registerBindingFactory(JAXRSBindingFactory.JAXRS_BINDING_ID, 
                                       factory);
        
        WebClient catalog = sf.createWebClient();
        Collection<? extends Catalog.Item> list = catalog.getCollection(Catalog.Item.class);
        System.out.println(list.iterator().next().getDescription());


please reopen the JIRA if the issue still exists, ideally with some sample client bundle (possibly being a JBI su) attached which I can run say against a jaxrs endpoint created after installing an examples-cxf-jaxrs service mix feature
",07/Oct/09 17:11;sergey_beryozkin;Will have to look at it a bit more carefully,"09/Oct/09 08:55;sergey_beryozkin;The issue has been fixed in CXF, workaround :

JAXRSClientFactoryBean sf = new JAXRSClientFactoryBean();
sf.setAddress(url);
JAXRSBindingFactory factory = new JAXRSBindingFactory();
factory.setBus(sf.getBus());
/*********** 1 - this code will become eventually hidden from the user  ***********/
BindingFactoryManager manager = sf.getBus().getExtension(BindingFactoryManager.class);
manager.registerBindingFactory(JAXRSBindingFactory.JAXRS_BINDING_ID,  factory);  
/*********** 2 - just a workaround, the client runtime has been fixed to do it if no ConduitInitiator has been found ***********/
ConduitInitiatorManager cim  = sf.getBus().getExtension(ConduitInitiatorManager.class);
sim.registerConduitInitiator(""http://schemas.xmlsoap.org/wsdl/soap/http"",  new ClientOnlyHTTPTransportFactory());
",,,,,,,,,,,,,,,,,,,,,,,,,,,
Invalid message created when using MTOM and WS-RM,CXF-2318,12428946,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,porcherg,porcherg,26/Jun/09 10:12,03/Aug/09 20:07,14/Mar/19 02:29,30/Jun/09 15:28,2.2.2,,,,,,,,,,,,,,2.0.12,2.1.6,2.2.3,,WS-* Components,,,,,,1,,,,"When using WS-RM and MTOM, the generated message content is:

POST /services/SayHello HTTP/1.1

Content-Type: multipart/related; type=""application/xop+xml""; boundary=""uuid:d861ffd6-2559-491d-b995-4420ac2e99e0""; start=""<root.message@cxf.apache.org>""; start-info=""application/soap+xml""

Accept: */*

User-Agent: Apache CXF 2.2.2

Cache-Control: no-cache

Pragma: no-cache

Host: localhost:12345

Connection: keep-alive

Content-Length: 1619





--uuid:d861ffd6-2559-491d-b995-4420ac2e99e0

Content-Type: application/xop+xml; charset=UTF-8; type=""application/soap+xml"";

Content-Transfer-Encoding: binary

Content-ID: <root.message@cxf.apache.org>





--uuid:d861ffd6-2559-491d-b995-4420ac2e99e0

Content-Type: application/octet-stream

Content-Transfer-Encoding: binary

Content-ID: <d027f743-11a2-45e8-b95e-592f8b751bb4-1@http://cxf.apache.org/>



attachment content

--uuid:d861ffd6-2559-491d-b995-4420ac2e99e0--<soap:Envelope xmlns:soap=""http://www.w3.org/2003/05/soap-envelope""><soap:Header><Action xmlns=""http://schemas.xmlsoap.org/ws/2004/08/addressing"">http://example.com/sayHello/ISayHello/hello</Action><MessageID xmlns=""http://schemas.xmlsoap.org/ws/2004/08/addressing"">urn:uuid:a2a9917b-4579-4945-aa38-e0da657dbbb4</MessageID><To xmlns=""http://schemas.xmlsoap.org/ws/2004/08/addressing"">http://localhost:12345/services/SayHello</To><ReplyTo xmlns=""http://schemas.xmlsoap.org/ws/2004/08/addressing""><Address>http://schemas.xmlsoap.org/ws/2004/08/addressing/role/anonymous</Address></ReplyTo><wsrm:Sequence xmlns:ns2=""http://schemas.xmlsoap.org/ws/2004/08/addressing"" xmlns:wsrm=""http://schemas.xmlsoap.org/ws/2005/02/rm""><wsrm:Identifier>urn:uuid:b5383bf0-2444-4af8-b923-146d02610ab5</wsrm:Identifier><wsrm:MessageNumber>1</wsrm:MessageNumber></wsrm:Sequence></soap:Header><soap:Body><ns1:hello xmlns:ns1=""http://example.com/sayHello""><arg0>john</arg0><arg1><xop:Include xmlns:xop=""http://www.w3.org/2004/08/xop/include"" href=""cid:d027f743-11a2-45e8-b95e-592f8b751bb4-1@http%3A%2F%2Fcxf.apache.org%2F""/></arg1></ns1:hello></soap:Body></soap:Envelope>



The soap envelope is sent after the last attachment instead of being in the <root.message@cxf.apache.org> part.

This bug seems to be caused by :
1- the AttachmentOutInterceptor writes the prolog by using the current message outputstream (OS1)
2- the RetransmissionInterceptor wraps the message outputstream in a WriteOnCloseOutputStream (OS2)
3- the soap envelope is written in the current message outputsream OS2.
4- the attachments are written in the outputstream OS1 used to write the prolog.
5- the WriteOnCloseOutputstream OS2 is closed, and the soap envelope is appended in the wrapped outputstream OS1.


Setting the RetransmissionInterceptor to be before AttachmentOutInterceptor in the interceptor chain seems to solve this issue.

",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113749,,,2009-06-26 10:12:34.0,,,,,,0|i0v0fb:,179042,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE in WS-RM RetransmissionQueueImpl,CXF-2317,12428939,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,porcherg,porcherg,26/Jun/09 09:39,03/Aug/09 20:07,14/Mar/19 02:29,30/Jun/09 15:33,2.2.2,,,,,,,,,,,,,,2.0.12,2.1.6,2.2.3,,WS-* Components,,,,,,1,,,,"When using WS-RM with anonymous acks, this exception occurs after the LastMessage has been acknowledged:
java.lang.NullPointerException
	at org.apache.cxf.ws.rm.soap.RetransmissionQueueImpl.purgeAcknowledged(RetransmissionQueueImpl.java:135)
	at org.apache.cxf.ws.rm.SourceSequence.setAcknowledged(SourceSequence.java:141)
	at org.apache.cxf.ws.rm.RMInInterceptor.processAcknowledgments(RMInInterceptor.java:125)
	at org.apache.cxf.ws.rm.RMInInterceptor.handle(RMInInterceptor.java:101)
	at org.apache.cxf.ws.rm.AbstractRMInterceptor.handleMessage(AbstractRMInterceptor.java:78)

The TerminateSequence message is never sent.",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113748,,,Fri Jun 26 09:40:43 UTC 2009,,,,,,0|i0v1nb:,179240,,,,,,,,"26/Jun/09 09:40;porcherg;In the purgeAcknowledged method:
List<ResendCandidate> sequenceCandidates = getSequenceCandidates(seq);
if (null != sequenceCandidates) {
[... do some stuff ...]
}
if (sequenceCandidates.isEmpty()) {
   candidates.remove(seq.getIdentifier().getValue());
}

Nesting the second if inside the first one fixes the exception.
if (null != sequenceCandidates) {
   [... do some stuff ...]
   if (sequenceCandidates.isEmpty()) {
      candidates.remove(seq.getIdentifier().getValue());
   }
}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
client can't be used with different ws security users,CXF-2311,12428673,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Blocker,Fixed,dkulp,sven-reinhardt,sven-reinhardt,23/Jun/09 14:26,04/Dec/09 22:34,14/Mar/19 02:29,16/Oct/09 20:00,2.2.1,2.2.2,,,,,,,,,,,,,2.2.5,,,,WS-* Components,,,,,,0,,,,"- in a managed environment such as an application server it is impossible to use a generated webservice client with ws-security authentication with different users 
- the client seems to be a singleton and the WSS4JOutInterceptor is attached to the client, so it can't be changed for a single request without changing it for other callers
- so the current implementation adds a kind of state to the client which the webservice dosn't have
- there is no real request context for a single request to submit the ws-security credentials to a potential context sensitive security interceptor
-creating a client for everey request, after removing the client from the factory
  <code>
  jaxWsProxyFactoryBean.getClientFactoryBean().setClient(null);
  jaxWsProxyFactoryBean.create();
  </code>
results in a heavy memory loss
-possible solution: create a by request context and add to generated clients, create a context sensitive ws-security interceptor 
","webservice client
ws-security authentication
stateless session bean in an application server (JBoss)",864000,864000,,0%,864000,864000,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-06-29 20:17:31.318,,,no_permission,,Guru,,,,,,,,,,,113743,,,Mon Jul 06 09:31:25 UTC 2009,,,,,,0|i0ux7z:,178523,,,,,,,,"29/Jun/09 20:17;dkulp;
Are you sure this doesn't already work?  At least with 2.2.2?

Looking at that code, for everything OTHER than the Action and Actor, it seems to check the msg context for any properties.    Thus, just doing something like:

((BindingProvider)client).getRequestContext().put(WSHandlerConstants.USER, ""joe"");

 and similar should work.

","06/Jul/09 09:31;sven-reinhardt;It can't  work because the client on 
jaxWsProxyFactoryBean.getClientFactoryBean().getClient(); 
is a singleton.
code like this:
MyService client1 = (MyService) jaxWsProxyFactoryBean.create();
MyService client2 = (MyService) jaxWsProxyFactoryBean.create();
((BindingProvider)client1).getRequestContext().put(WSHandlerConstants.USER, ""jack""); 
((BindingProvider)client2).getRequestContext().put(WSHandlerConstants.USER, ""joe""); 
LOG.info(((BindingProvider)client1).getRequestContext().get(WSHandlerConstants.USER));

produces:
joe
instead of jack
So it is not a per request context not even per service. 

I'm using 2.2.2.
Is jaxWsProxyFactoryBean the right way to create the client in this situation?
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
client gets extra <return> tags with org.w3c.dom.Document result,CXF-2309,12428524,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,bmargulies,yuriy,yuriy,22/Jun/09 01:22,03/Aug/09 20:07,14/Mar/19 02:29,16/Jul/09 18:10,2.2.2,,,,,,,,,,,,,,2.2.3,,,,Aegis Databinding,,,,,,0,,,,"web service client de-serializes   org.w3c.dom.Document  with extra <return> tags. 
i.e. result of getExampleDocument() should be <node>test</node> but the client gets  <return><node>test</node><return>

The message that server sends is 

<soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/"">
<soap:Body>
<ns1:getExampleDocumentResponse xmlns:ns1=""http://cxftest.org/"">
<return><node>test</node></return></ns1:getExampleDocumentResponse>
</soap:Body></soap:Envelope>","tried on both Ubuntu  9.04 and CentOS 5.3,
java 6
",,,,,,,,,,,,,,,,22/Jun/09 21:20;yuriy;test_cxf.tar.gz;https://issues.apache.org/jira/secure/attachment/12411457/test_cxf.tar.gz,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2009-06-22 20:51:40.914,,,no_permission,,,,,,,,,,,,,113741,,,Thu Jul 16 18:10:53 UTC 2009,,,,,,0|i14e33:,233745,,,,,,,,"22/Jun/09 01:23;yuriy;maven project with server that publishes TestInterface interface and client.

The client can be run as 

java org.cxftest.Main <endpoint>","22/Jun/09 20:51;robertegglestone;You need to add this annotation to TestInterface so that it's non-wrapped:
@SOAPBinding(parameterStyle = ParameterStyle.BARE)

More info is available from:
http://cwiki.apache.org/CXF20DOC/developing-a-service.html#DevelopingaService-DefiningtheBindingPropertieswithAnnotations


import javax.jws.soap.SOAPBinding.*;

@WebService
@SOAPBinding(parameterStyle = ParameterStyle.BARE)
public interface TestInterface {

	@WebMethod
	Document getExampleDocument();
}","22/Jun/09 20:57;dkulp;
What makes you think it shouldn't have the <return> tags?  According to the jax-ws rules, the return from the method should be held in an element by the name ""return"".   Thus, I think it's working exactly as it's supposed to be working.

","22/Jun/09 21:25;yuriy;Yes, it should, but I expect those tags to be removed when the user of web service gets the result. I updated the attachment to demonstrate the point:

extra method getExampleString() returns a string; but the client is not getting <return>string</return> or anything like that, it is getting what was sent. (Even though the message contains <return>, those get removed).  So when I use

System.out.println(result_converted_to_string), the result of that should be

<node>test</node>

not

<return><node>test</node></return>

Using bare mode works, but it does not let me send multiple arguments (method add does not work when SOAPBinding annotation is used). 

The same problem when I send xml to server. Server gets <arg0>...</arg0> result. 

Hope the description is clear now.","25/Jun/09 20:53;yuriy;any comment on this?
","26/Jun/09 19:47;dkulp;
Understood now.   It's probably a bug.   The sending/receiving side should behave similarly.   If the sending is adding <return> the receiving should remove it.

","15/Jul/09 14:23;bmargulies;How the heck do we fix this from a compatibility standpoint? Just make the change and stand back, or what?","15/Jul/09 14:33;dkulp;
Probably yes.    It's clearly not working as designed.   Probably  just merge back into 2.2.x and no furthur. ","16/Jul/09 18:10;bmargulies;r794771

This is an 'incompatible' bugfix.",,,,,,,,,,,,,,,,,,,,,,
Invalid signature of cxf.apache.org/javadoc/latest/org/apache/cxf/ws/addressing/AddressingProperties.html#setTo,CXF-2308,12428490,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,johaneltes,johaneltes,20/Jun/09 20:56,12/Oct/09 20:44,14/Mar/19 02:29,06/Oct/09 21:27,2.0.11,2.1.1,2.1.2,2.1.3,2.1.4,2.1.5,2.2,2.2.1,2.2.2,,,,,,2.1.7,2.2.4,,,,,,,,,0,,,,"Current signature:
http://cxf.apache.org/javadoc/latest/org/apache/cxf/ws/addressing/AddressingProperties.html#setTo(org.apache.cxf.ws.addressing.EndpointReferenceType)

Should be:
http://cxf.apache.org/javadoc/latest/org/apache/cxf/ws/addressing/AddressingProperties.html#setTo(org.apache.cxf.ws.addressing.AttributedURIType)

Without this change, it is not possible to set was:To to a value that is permitted by AttributedURIType but nit permitted by he more restrictive EndpointReferenceType.",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113740,,,2009-06-20 20:56:26.0,,,,,,0|i0cv1z:,72975,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
PerformanceCounter.Client reports incorrect response times for oneway invocations,CXF-2305,12428372,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,eglynn,eglynn,eglynn,19/Jun/09 15:21,04/Dec/09 22:34,14/Mar/19 02:29,20/Oct/09 12:31,2.2.2,,,,,,,,,,,,,,2.1.8,2.2.5,2.3,,Core,,,,,,0,,,,"The response times reported by the PerformanceCounter.Client MBean for oneway invocations are completely outlandish.

This is caused by the start time being unset (and hence zero) when its subtracted from the end time in order to compute an elapsed time for the request.

Also the end time seems to be set in advance of the oneway request even being sent, so the entire computation is bogus.",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113738,,,Tue Oct 20 12:31:25 UTC 2009,,,,,,0|i0sy4n:,167006,,,,,,,,20/Oct/09 12:31;eglynn;Fixed in: http://svn.apache.org/viewvc?view=revision&revision=827050,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"In Spring AOP, some aspect failed to apply",CXF-2304,12428326,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,,adrianshum,adrianshum,19/Jun/09 07:36,13/Nov/09 17:27,14/Mar/19 02:29,15/Oct/09 21:30,2.0.11,2.0.9,,,,,,,,,,,,,2.2.3,,,,Integration,,,,,,0,,,,"This is a very strange issue, I am not sure if I can provide enough useful information.

In my application, I have used spring AOP.  I am using an interceptor, and defining aspect in spring application context.
Everything is fine when I am using CXF 2.0.6.  
However, after I upgraded to CXF 2.0.9 (and tried 2.0.11 too) Spring AOP failed to apply aspects on some object (not all) that matches with the pointcut.

Things I put in spring app ctx for the AOP looks like this:
    <bean id=""queryInterceptor"" class=""com.foo.FinderIntroductionInterceptor"" />
    <aop:config>
        <aop:aspect ref=""queryInterceptor"">
            <aop:pointcut id=""findQuery""  expression=""execution(* com.foo..*Dao.find*(..)) and this(com.foo.FinderExecutor)"" />
            <aop:pointcut id=""listQuery"" expression=""execution(* com.foo..*Dao.list*(..,int,int)) and this(com.foo.FinderExecutor)"" />
            <aop:around pointcut-ref=""findQuery"" method=""invokeFind"" />
            <aop:around pointcut-ref=""listQuery"" method=""invokeFind"" />
        </aop:aspect>
    </aop:config>


When I am using CXF 2.0.6, in debug mode, I can see the injected bean is of type of a proxy.
After upgrading to 2.0.9 (and 2.0.11 too), the injected bean is of the type of the original bean, which means, the injected bean is the unproxied raw bean.

It looks really strange for CXF affecting totally irrelevant Spring AOP.  However, once I fallback to CXF2.0.6, everything become normal again.
","Spring 2.5.3, JDK 1.5.0_12",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-06-19 19:13:05.589,,,no_permission,,,,,,,,,,,,,113737,,,Tue Oct 06 14:29:21 UTC 2009,,,,,,0|i1ae5z:,268761,,,,,,,,"19/Jun/09 19:13;dkulp;
Any chance of testing with CXF 2.2.2?   If it's still a problem there, any chance of getting a small test project that shows the issue?

CXF 2.0.x really isn't tested at all with Spring 2.5.  

Thanks!


","23/Jun/09 09:45;adrianshum;Have just tried 2.2.2, result is the same.  Some beans are not proxied, while everything is fine when using CXF 2.0.6","29/Jun/09 20:19;dkulp;
Would need a test case for this.   I have no idea what may cause it.
","10/Aug/09 22:07;jacorob;Don't have a test case, but I ran into this as well. 

It appears to be due to the interceptors being instantiated prior to the AOP BeanPostProcessor (eg. DefaultAdvisorAutoProxyCreator) being run. If I inject a bean in my interceptor, when the application context loads it spits out the following:

INFO [main] XmlWebApplicationContext.postProcessAfterInitialization(1198) | Bean 'xxx' is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)

The bean is then never wrapped with the AOP Proxy. As soon as I remove the bean from the interceptor, the bean is wrapped correctly (and the error is no longer displayed).

Not sure how CXF/Spring integration uses BeanPostProcessors to instantiate interceptors, but perhaps it's a starting point...","06/Oct/09 14:17;jacorob;I just tried with CXF 2.2.3 and this issue seems to be resolved.

After looking through the change log of 2.2.3 I'm believe this issue was related to CXF-2210 where the Jsr250BeanPostProcessor used a @Resource annotation to load the cxf bean. On instantiation the cxf bean would instantiate the various interceptors, which (in my case) included a slew of managers that I need to be auto-proxied. I believe that since the @Resource was removed in the fix for 2210, the interceptor (and hence my managers) was no longer being created too early for auto-proxying.

My test case:
Before upgrading, my managers were unable to be autoproxied due to inclusion in a CXF interceptor (see previous comment). Once I upgraded to 2.2.3 (without changing anything else), my managers were proxied.",06/Oct/09 14:29;jacorob;I should note that I'm using Spring 3.0 RC1. ,,,,,,,,,,,,,,,,,,,,,,,,,
InjectionUtils contains unreachable code,CXF-2303,12428273,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,sergey_beryozkin,thecoolace,thecoolace,18/Jun/09 16:52,03/Aug/09 20:07,14/Mar/19 02:29,22/Jun/09 11:18,,,,,,,,,,,,,,,2.2.3,,,,JAX-RS,,,,,,0,,,,"During a recent debug session I noticed some IMHO strange code in org/apache/cxf/jaxrs/utils/InjectionUtils.java. While I was debugging an outdated version, the current code in trunk seems to have the same errors. Referring to this version http://svn.apache.org/viewvc/cxf/trunk/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/InjectionUtils.java?revision=777126

Here you can find:

    public static boolean isSupportedCollectionOrArray(Class<?> type) {
        return List.class.isAssignableFrom(type)
            || Set.class.isAssignableFrom(type)
            || SortedSet.class.isAssignableFrom(type)
            || type.isArray();
    }

and

private static Object injectIntoCollectionOrArray(Class<?> rawType, Type genericType,
                                        MultivaluedMap<String, String> values,
                                        boolean isbean, boolean decoded,
                                        ParameterType pathParam, Message message) {
        Class<?> type = null;
        if (List.class.isAssignableFrom(rawType)) {
            type = ArrayList.class;
        } else if (Set.class.isAssignableFrom(rawType)) {
            type = HashSet.class;
        } else if (SortedSet.class.isAssignableFrom(rawType)) {
            type = TreeSet.class;
        }
       [...]

Because Set is a SuperInterface of SortedSet, the boolean of the first example can be simplified and in the second example the proper clause for SortedSet is never reached, because the Set clause is always true for Sets and SortedSets. 

At least that's what I think. I have no concrete bug though, just wanted to report. :-)",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-06-22 11:18:47.553,,,no_permission,,,,,,,,,,,,,113736,,,Mon Jun 22 11:18:47 UTC 2009,,,,,,0|i14e4f:,233751,,,,,,,,"22/Jun/09 11:18;sergey_beryozkin;Thanks for spotting it, it was actually not possible to inject a SortedSet with this bug. Fixed now. 
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HTTP continuations are not working correctly if keep-alives are on,CXF-2302,12428264,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,dkulp,dkulp,18/Jun/09 15:30,03/Aug/09 20:07,14/Mar/19 02:29,18/Jun/09 17:03,2.0.11,2.1.5,2.2.1,,,,,,,,,,,,2.0.12,2.1.6,2.2.3,,Transports,,,,,,0,,,,"
The HTTP continuations are using the jetty continuation isNew method to see if it's ""new"".  However, that method is really not named correctly as it's ""new per connection"" not ""per request"".  Thus, with keep alives, the continuation is reused and CXF state gets confused.",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113735,,,2009-06-18 15:30:13.0,,,,,,0|i140h3:,231539,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"If a service is published with escaped address, it cannot be accessed from the service location in the WSDL.",CXF-2301,12428224,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,twang,twang,18/Jun/09 08:52,12/Oct/09 20:44,14/Mar/19 02:29,06/Oct/09 21:30,2.1.3,,,,,,,,,,,,,,2.1.7,2.2.4,,,Transports,,,,,,0,,,,"I publish web services to Tomcat following the guide at
http://cwiki.apache.org/CXF20DOC/servlet-transport.html.
There is an example,

Endpoint.publish(""/Greeter"", new GreeterImpl());

If the address contains invalid characters, it need to be escaped.

For example,
Endpoint.publish(""/Greet%20er"", new GreeterImpl());

And in the WSDL, the service location should be
<soap:address location=""http://localhost:9090/context/Greet%20er"" />

I test it with CXF 2.1.3 and the result is as follows.

1. When we publish a service, a destination (org.apache.cxf.transport.servlet.ServletDestination) is registered with the address as a key.
For example, Endpoint.publish(""/Greet%20er"", new GreeterImpl());
The key will be ""/Greet%20er"".

2. The service location in the WSDL is the same as the address when we publish the service.
For example, Endpoint.publish(""/Greet%20er"", new GreeterImpl());
The service location in the WSDL will be <soap:address location=""http://localhost:9090/context/Greet%20er"" />

3. When we invoke the service, we will get the destination by the key, which is request.getPathInfo().
For example, if we open url ""http://localhost:9090/context/Greet%20er""
The key will be ""/Greet er"". So we cannot get the correct destination which was registered with key ""/Greet%20er"".

1 and 2 are correct and 3 is the problem.


","Windows XP SP3, JDK 1.5.0_06",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113734,,,2009-06-18 08:52:47.0,,,,,,0|i0cv27:,72976,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Generics not supported in response wrapper generation,CXF-2300,12428223,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,asoldano,asoldano,asoldano,18/Jun/09 08:39,03/Aug/09 20:07,14/Mar/19 02:29,30/Jun/09 17:41,,,,,,,,,,,,,,,2.1.6,2.2.3,2.3,,Tooling,,,,,,0,,,,"When dealing with a SEI containing methods using generics both in parameters and return type, the request wrapper only is generated with generics.
This is related to https://jira.jboss.org/jira/browse/JBWS-2507 .",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113733,,,Tue Jun 30 17:41:46 UTC 2009,,,,,,0|i14drz:,233695,,,,,,,,"30/Jun/09 17:41;asoldano;Done, thanks Dan for merging to the other branches.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
encryptionUser=useReqSigCert fails to find request certificate,CXF-2298,12428177,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,jimhansen,jimhansen,17/Jun/09 21:30,03/Aug/09 20:07,14/Mar/19 02:29,02/Jul/09 17:04,2.2.2,,,,,,,,,,,,,,2.1.6,2.2.3,,,WS-* Components,,,,,,0,,,,"When setting encryptionUser=useReqSigCert, CXF should locate the request certificate and use it to encrypt the response. The logic is to retrieve the RECV_RESULTS from the msgContext, and then retrieve the request certificate from the RECV_RESULTS. The WSS4JOutInterceptor attempts to retrieve the RECV_RESULTS by calling WSS4JOutInterceptor.getProperty(msgContext, WSHandlerConstants.RECV_RESULTS), but getProperty() fails to find the RECV_RESULTS. The underlying implementation of getProperty() looks in various places for the RECV_RESULTS, but fails to look in ((Message) msgContext).getExchange().getInMessage(), where the RECV_RESULTS are actually located. So the incoming message is located in the Exchange, and it is this extra level of indirection that seems to be missing from the search for RECV_RESULTS. I'm not familiar enough with the code to identify the root cause, but it seems to be an incompatibility between CXF and the underlying WSS4J implementation (just a guess).

I am attaching three files:
1) Exception.txt shows the text of the exception that is thrown
2) application-context.xml is the CXF configuration for the WSS4JOutInterceptor
3) FixedWSS4JOutInterceptor.java is a fixed version of the WSS4JOutInterceptor that retrieves the RCV_RESULTS from the correct location. This is provided for illustrative purposes only, and is not intended as a fix - my guess is that the correct fix to this problem is at a lower level in the code, and I would appreciate it if someone would take this further and determine the root cause of this problem, and a more appropriate fix.",,36000,36000,,0%,36000,36000,,,,,,,,,,17/Jun/09 21:34;jimhansen;Exception.txt;https://issues.apache.org/jira/secure/attachment/12410986/Exception.txt,17/Jun/09 21:34;jimhansen;FixedWSS4JOutInterceptor.java;https://issues.apache.org/jira/secure/attachment/12410988/FixedWSS4JOutInterceptor.java,17/Jun/09 21:34;jimhansen;application-context.xml;https://issues.apache.org/jira/secure/attachment/12410987/application-context.xml,,,,3.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,Moderate,,,,,,,,,,,113731,,,Wed Jun 17 21:34:40 UTC 2009,,,,,,0|i0v0dr:,179035,,,,,,,,"17/Jun/09 21:34;jimhansen;I am attaching three files:
1) Exception.txt shows the text of the exception that is thrown
2) application-context.xml is the CXF configuration for the WSS4JOutInterceptor
3) FixedWSS4JOutInterceptor.java is a fixed version of the WSS4JOutInterceptor that retrieves the RCV_RESULTS from the correct location. This is provided for illustrative purposes only, and is not intended as a fix.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Aegis can not handle complex Maps when used in JAX-RS,CXF-2297,12428123,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,sergey_beryozkin,sergey_beryozkin,sergey_beryozkin,17/Jun/09 14:24,11/Oct/10 14:52,14/Mar/19 02:29,21/Dec/09 21:25,2.2.3,2.3,,,,,,,,,,,,,2.2.5,,,,Aegis Databinding,JAX-RS,,,,,0,,,,"Please see 

org.apache.cxf.jaxrs.provider.AegisElementProvider#testReadWriteComplexMap",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-06-18 00:32:39.142,,,no_permission,,,,,,,,,,,,,113730,,,Mon Dec 21 21:24:40 UTC 2009,,,,,,0|i1409b:,231504,,,,,,,,"17/Jun/09 15:57;sergey_beryozkin;Benson, you asked to assign it to you, I  forgot initially :-)","18/Jun/09 00:32;bmargulies;r785866 fixes the underlying problem, but the test is wrong. It is trying to read a single bean as a map of strings and beans. (stringbeans)? So I'm assigning back to Sergey.
","18/Jun/09 00:33;bmargulies;Assigning to Sergey to make the test actually have a map message in it.

That may cause further problems to pass back to me.",28/Jul/09 22:45;bmargulies;Sergey?,"21/Dec/09 20:48;dkulp;Sergey,   is this fixed?  The test doesn't have an @Ignore or anything so it looks like it's passing.  

","21/Dec/09 21:24;sergey_beryozkin;Hi Dan - I was probably planning to see how Aegis was doing in DOSGI, I believe I originally reported the issue after seeing it failing in DOSGI. But at a time it was not working on the mainline too. So Benson fixed it and thus it should work on in DOSGI too.
So I'll close it now
",,,,,,,,,,,,,,,,,,,,,,,,,
Aegis XMLTypeCreator causes a warning stack trace when used by JAXRS runtime,CXF-2296,12428121,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,dkulp,sergey_beryozkin,sergey_beryozkin,17/Jun/09 14:19,01/Feb/10 19:02,14/Mar/19 02:29,17/Dec/09 19:47,2.2.3,2.3,,,,,,,,,,,,,2.2.6,,,,Aegis Databinding,,,,,,0,,,,"17-Jun-2009 14:56:13 org.apache.cxf.aegis.type.XMLTypeCreator <clinit>
INFO: Parser doesn't support setSchema.  Not validating.
java.lang.UnsupportedOperationException: This parser does not support specificat
ion ""null"" version ""null""
        at javax.xml.parsers.DocumentBuilderFactory.setSchema(DocumentBuilderFac
tory.java:489)
        at org.apache.cxf.aegis.type.XMLTypeCreator.<clinit>(XMLTypeCreator.java
:125)
        at org.apache.cxf.aegis.AegisContext.createRootTypeCreator(AegisContext.
java:119)
        at org.apache.cxf.aegis.AegisContext.createTypeCreator(AegisContext.java
:108)
        at org.apache.cxf.aegis.AegisContext.initialize(AegisContext.java:150)
        at org.apache.cxf.jaxrs.provider.AbstractAegisProvider.getClassContext(A
bstractAegisProvider.java:79)
        at org.apache.cxf.jaxrs.provider.AbstractAegisProvider.getAegisContext(A
bstractAegisProvider.java:66)
        at org.apache.cxf.jaxrs.provider.AegisElementProvider.writeTo(AegisEleme
ntProvider.java:69)",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-06-18 00:05:07.994,,,no_permission,,,,,,,,,,,,,113729,,,Thu Dec 17 19:47:52 UTC 2009,,,,,,0|i14err:,233856,,,,,,,,"18/Jun/09 00:05;bmargulies;Sergey, could you please supply a repro for this?","18/Jun/09 00:33;bmargulies;Sergey, please send back with instructions on how to reproduce this.","22/Jun/09 20:12;sergey_beryozkin;Hi Benson

it appears it can only be reproduced in DOSGi though I think I saw this message even when running jaxrs tests

If you get a chance, try please dosgi/greeter_rest, can be run the same way as described in

http://cxf.apache.org/distributed-osgi-greeter-demo-walkthrough.html

if you decide to do it then I can post more info in how to debug","23/Jun/09 00:35;bmargulies;This situation means that, for some reason, the XML parser installed as the JAXP parser inside the OSGi environment refuses to set up schema validation. Does something less with the SPI for JAXP in the OSGi bundle?","17/Dec/09 19:47;dkulp;
This is definitely a parser bundle issue in the osgi container.   I added a couple checks and moved some of the exception handling around so if document builder creation fails, it fails right away but the schema creation stuff will just log an INFO and continue.   Nothing major.",,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException creating service proxy,CXF-2295,12428102,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,,diefenba,diefenba,17/Jun/09 10:53,03/Aug/09 20:07,14/Mar/19 02:29,19/Jun/09 19:47,2.1.3,2.2,,,,,,,,,,,,,2.1.6,2.2.3,,,,,,,,,0,,,,"Upon service proxy creation, at

       org.oasis_open.docs.wsn.brw_2.NotificationBroker port = ss.getCxfBinding();

I receive the following exception:

org.apache.cxf.service.factory.ReflectionServiceFactoryBean buildServiceFromWSDL 
INFO: Creating Service {http://servicemix.org/wsnotification}NotificationBroker from WSDL: file:resources/broker.wsdl 
Exception in thread ""main"" java.lang.NullPointerException 
        at org.apache.cxf.wsdl11.WSDLServiceBuilder.buildInterfaceOperation(WSDLServiceBuilder.java:573) 
        at org.apache.cxf.wsdl11.WSDLServiceBuilder.buildInterface(WSDLServiceBuilder.java:557) 
        at org.apache.cxf.wsdl11.WSDLServiceBuilder.buildServices(WSDLServiceBuilder.java:328) 
        at org.apache.cxf.wsdl11.WSDLServiceBuilder.buildServices(WSDLServiceBuilder.java:184) 
        at org.apache.cxf.wsdl11.WSDLServiceFactory.create(WSDLServiceFactory.java:129) 
        at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.buildServiceFromWSDL(ReflectionServiceFactoryBean.java:328) 
        at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.initializeServiceModel(ReflectionServiceFactoryBean.java:436) 
        at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.create(ReflectionServiceFactoryBean.java:194) 
        at org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean.create(JaxWsServiceFactoryBean.java:164) 
        at org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory.createEndpoint(AbstractWSDLBasedEndpointFactory.java:100) 
        at org.apache.cxf.frontend.ClientFactoryBean.create(ClientFactoryBean.java:52) 
        at org.apache.cxf.frontend.ClientProxyFactoryBean.create(ClientProxyFactoryBean.java:102) 
        at org.apache.cxf.jaxws.JaxWsProxyFactoryBean.create(JaxWsProxyFactoryBean.java:115) 
        at org.apache.cxf.jaxws.ServiceImpl.createPort(ServiceImpl.java:434) 
        at org.apache.cxf.jaxws.ServiceImpl.getPort(ServiceImpl.java:312) 
        at org.apache.cxf.jaxws.ServiceImpl.getPort(ServiceImpl.java:299) 
        at javax.xml.ws.Service.getPort(Service.java:40) 
        at org.servicemix.wsnotification.NotificationBroker.getCxfBinding(NotificationBroker.java:63) 
        at org.oasis_open.docs.wsn.bw_2.NotificationConsumer_NotificationConsumerPort_Server.main(NotificationConsumer_NotificationConsumerPort_Server.java:135) 

The issue appears to be caused because the WSDL relies on an imported WSDL to define the input messages.",,,,,,,,,,,,,,,,,17/Jun/09 11:52;diefenba;TestCase.zip;https://issues.apache.org/jira/secure/attachment/12410925/TestCase.zip,17/Jun/09 10:59;diefenba;broker.wsdl;https://issues.apache.org/jira/secure/attachment/12410921/broker.wsdl,17/Jun/09 10:59;diefenba;wsnbroker.wsdl;https://issues.apache.org/jira/secure/attachment/12410922/wsnbroker.wsdl,,,,3.0,,,,,,,,,,,,,,,,,,,,2009-06-17 17:35:00.075,,,no_permission,,,,,,,,,,,,,113728,,,Fri Jun 19 19:47:43 UTC 2009,,,,,,0|i0v0bj:,179025,,,,,,,,"17/Jun/09 10:59;diefenba;broker.wsdl is the WSDL with which this error occurs. wsnbroker.wsdl is the WSDL exposed if the broker service is deployed in ServiceMix. Using this WSDL, the error disappears.","17/Jun/09 11:52;diefenba;And here's a test case. Main class is org.oasis_open.docs.wsn.bw_2.NotificationConsumer_NotificationConsumerPort_Server. In case it's needed, the broker is the one from the wsn-cxf-binding example from https://repository.apache.org/content/repositories/servicemix-staging-016/org/apache/servicemix/apache-servicemix/3.3.1/.","17/Jun/09 17:35;dkulp;
The broker.wsdl is invalid.   Its also not the version that Servicemix ships.   Have you done some search/replace things on it?

 The imports do not specify the correct namespace. They should be:
 <wsdl:import location=""brw-2.wsdl"" namespace=""http://docs.oasis-open.org/wsn/brw-2""/>
 <wsdl:import location=""bw-2.wsdl"" namespace=""http://docs.oasis-open.org/wsn/bw-2""/>

","18/Jun/09 07:21;diefenba;


... I meant to replace the location. Apparently I changed the namespace instead. -_-;

But it would still be good to get a more specific exception than a NullPointerException, if that's possible. One just does not think of the WSDL upon receiving something like this.

Regards,

Anne


","19/Jun/09 19:47;dkulp;
Added better error message",,,,,,,,,,,,,,,,,,,,,,,,,,
HTTP-binding miss URL parameters for GET requests,CXF-2294,12428049,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,gguardin,gguardin,16/Jun/09 21:37,03/Aug/09 20:07,14/Mar/19 02:29,17/Jun/09 15:26,2.1.5,2.2.2,,,,,,,,,,,,,2.1.6,2.2.3,,,JAX-RS,,,,,,0,,,,"The problem occurs with HTTP-binding implementation. When a client makes a GET request and the URL has some parameters, all the parameters that the java implementation of that services are null.

There is a jar attached with sample code to reproduce the problem. That code works with CXF 2.0.11, but doesn't work with 2.1.5 or 2.2.2.

The server class is ""demo.resful.server.Server"", run it first. Then run the client that is ""demo.resful.client.Client"". The .jar does NOT contain the libraries to run.

The client writes the response to system out and it should be:

<ns1:sayHiResponse xmlns:ns1=""http://jivesoftware.com/clearspace/webservices""><return>Hello Daniel</return></ns1:sayHiResponse>

But with version 2.1.5 or 2.2.2 you get

<ns2:sayHiResponse xmlns:ns2=""http://jivesoftware.com/clearspace/webservices""><return>Hello null</return></ns2:sayHiResponse>
",,,,,,,,,,,,,,,,,16/Jun/09 21:38;gguardin;HTTP-binding_Test.jar;https://issues.apache.org/jira/secure/attachment/12410855/HTTP-binding_Test.jar,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2009-06-17 01:55:47.059,,,no_permission,,,,,,,,,,,,,113727,,,Wed Jun 17 15:17:00 UTC 2009,,,,,,0|i0v1mn:,179237,,,,,,,,"17/Jun/09 01:55;dkulp;
Turns out, this is a bug in the http binding that somehow 2.0.x wasn't exposing.   I'm honestly not sure how it works at all with 2.0.x.   The Document that is being generate in the IriDecoderHelper is not valid.   The namespaces on the elements are not correct.   I've fixed this and am running the tests.  Will probably commit in the morning.

You can workaround the bug by adding a targetNamespace attribute to the webParam:
String sayHi(@WebParam(name = ""name"", targetNamespace = ""http://jivesoftware.com/clearspace/webservices"")String name);

That will work with my fix as well.   My fix won't require it though.
",17/Jun/09 15:17;gguardin;Awesome! thank you for the fast fix!!!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Java first one-way operations generating faults,CXF-2292,12428016,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,dkulp,dkulp,16/Jun/09 16:14,03/Aug/09 20:07,14/Mar/19 02:29,30/Jun/09 20:13,,,,,,,,,,,,,,,2.0.12,2.1.6,2.2.3,,,,,,,,0,,,,"Oneway operation should not generate faults into the wsdl.

See:
http://www.nabble.com/exception-on-web-service-operations=-ISO-8859-1-Q-=20-=-p24053783.html",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113725,,,2009-06-16 16:14:24.0,,,,,,0|i0v1mv:,179238,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JAXRS Frontend Client API fails to handle javax.ws.rs.Response entities,CXF-2291,12428008,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,sergey_beryozkin,sergey_beryozkin,sergey_beryozkin,16/Jun/09 14:12,03/Aug/09 20:07,14/Mar/19 02:29,22/Jun/09 19:39,2.2.2,,,,,,,,,,,,,,2.2.3,2.3,,,JAX-RS,,,,,,0,,,,"Response r = proxy.getSomeResponse

mishandles the entity.

If Response provider is registered then it should be used, otherwise Response instance should contain InputStream
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113724,,,2009-06-16 14:12:39.0,,,,,,0|i14e93:,233772,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"org.apache.cxf.BusException: No binding factory for namespace http://schemas.xmlsoap.org/wsdl/soap/ registered."" ",CXF-2284,12427718,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Blocker,Fixed,,anandraiin3,anandraiin3,12/Jun/09 08:26,01/Jun/12 13:25,14/Mar/19 02:29,21/Oct/09 00:50,2.1.5,,,,,,,,,,,,,,2.2.11,2.3,,,Soap Binding,,,,,,0,,,,"I am writing a Component using CXF to consume an AXIS webservice  hosted on Tomcat.The component works absolutely fine as a standalone application on eclipse , but things get worst when i integrate it with rest of project which has another component exposing CXF Webservice . I am using CXF 2.1.5  accross my application (for consuming and producing) .
Following spring configuration was used to create  stub .

<bean id=""accountService"" class=""org.springframework.remoting.jaxws.JaxWsPortProxyFactoryBean"">
       <property name=""serviceInterface"" value=""x.y.AccountManagerPortType"" />
       <property name=""wsdlDocumentUrl"" value=""http://xyz:8084/someName/services/AccountManager?wsdl"" />
       <property name=""namespaceUri"" value=""http://x.y"" />
       <property name=""serviceName"" value=""AccountManager"" />
       <property name=""portName"" value=""AccountManagerSOAP11port_http"" />
</bean>  

Spring logs show that spring is not able to create  AccountManagerSOAP11port_http.jaxws-client.proxy .
CXF logging was enable by following configuration
<cxf:bus>
	<cxf:features>
		<cxf:logging />
	</cxf:features>
</cxf:bus>
to notice that CXF is able to send and recieve message ,but its returning back a null object.Initially it appeared to me as if it is some issue with SOAPHandler or jaxb .After some debugging i noticed that spring is getting an exception while creating above service the exception was 
""org.apache.cxf.BusException: No binding factory for namespace http://schemas.xmlsoap.org/wsdl/soap/ registered "".
I wasn't able to get a stack trace, because spring was eating up the exception and rather giving a friendly message which didn't make much sense to me except that it failed to create ""AccountManagerSOAP11port_http.jaxws-client.proxy "" .

Below is a snapshot of eclipse in debug persepective

this     DefaultListableBeanFactory  (id=257)     
ex       WebServiceException  (id=485)    
   cause  ServiceConstructionException  (id=629)   
       cause  BusException  (id=633)      
           cause  BusException  (id=633)      
           detailMessage         null    
           message       Message  (id=638)  
	           bundle          PropertyResourceBundle  (id=641)         
                   code   ""NO_BINDING_FACTORY_EXC"" (id=644)         
                   parameters   Object[1]  (id=645) 
                   stackTrace     null    
           detailMessage         ""org.apache.cxf.BusException: No binding factory for namespace 				 http://schemas.xmlsoap.org/wsdl/soap/ registered."" (id=636)             message       null    
        stackTrace     null    
   detailMessage         ""org.apache.cxf.service.factory.ServiceConstructionException"" (id=632)     stackTrace     null    
beanName    ""subscriberService"" (id=488)        
bean   JaxWsPortProxyFactoryBean  (id=440)    
mbd   RootBeanDefinition  (id=490)       
wrappedBean          JaxWsPortProxyFactoryBean  (id=440)    

I googled this exception and found that many people  have reported same problem and for most of queries the cause is suggested to be missing CXF-extension-soap.xml or cxf-rt-bindings-soap-2.1.3.jar missing in classpath .But in my case i have both of them 

I have following spring imports in spring configuration

 <import resource=""classpath:META-INF/cxf/cxf.xml"" />
 <import resource=""classpath:META-INF/cxf/cxf-extension-soap.xml"" />
 <import resource=""classpath:META-INF/cxf/cxf-servlet.xml"" />      

and cxf-rt-bindings-soap-2.1.3.jar is present in web-inf/lib of the war file .
I added some more imports ,but didn't prooved to be any help . 

<import resource=""classpath:META-INF/cxf/cxf.xml""/>
<import resource=""classpath:META-INF/cxf/cxf-extension-jaxws.xml""/>
<import resource=""classpath:META-INF/cxf/cxf-extension-soap.xml""/>
<import resource=""classpath:META-INF/cxf/cxf-extension-management.xml""/>
<import resource=""classpath:META-INF/cxf/cxf-servlet.xml""/>
<import resource=""classpath:META-INF/cxf/cxf-extension-addr.xml""/>
   
I tried another approach to consume webservice .
<beans default-init-method=""beanInit"" default-destroy-method=""beanDestroy""
xmlns=""http://www.springframework.org/schema/beans"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
xmlns:jaxws=""http://cxf.apache.org/jaxws""
xmlns:hlapi=""http://x.y""
xmlns:context=""http://www.springframework.org/schema/context""
xsi:schemaLocation=""http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd
http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd"">

<jaxws:client id=""accountService""
serviceClass=""x.y.AccountManagerPortType""
address=""http://xyz:8084/someName/services/AccountManager""
serviceName=""hlapi:AccountManager""
endpointName=""hlapi:AccountManagerSOAP11port_http""/>

I wasn't able to get any exception while debugging , but i am facing the same issue as with previous approach , CXF logs inbound and outbound messages , but its returning me a null object .

This has become a blocking issue for me and my team ,i am stuck on this issue since past week .
Please advise any possible solution .  ",Win XP,,,,,,,,,,,CXF-1651,,,,,13/Jun/09 09:04;anandraiin3;screenshot-1.jpg;https://issues.apache.org/jira/secure/attachment/12410537/screenshot-1.jpg,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2009-06-15 19:22:07.947,,,no_permission,,Unknown,,,,,,,,,,,113719,,,Fri Jun 01 13:06:50 UTC 2012,,,,,,0|i0uxb3:,178537,,,,,,,,13/Jun/09 08:56;anandraiin3;Added a more detailed exception .,13/Jun/09 09:04;anandraiin3;The snapshot shows all jars in WEB-INF/lib,"15/Jun/09 19:22;dkulp;
That all looks OK.   I'm not seeing anything obvious.   Any chance you can strip things down a bit into a project that can be attached here for debugging?","15/Sep/09 21:29;rflitcroft;I have this issue when using Maven to build a jar file -with-dependencies, since I just wanted a single jar file with which to deploy my web services application.
If I deploy my application with all dependencies in their original jars, the problem goes away.

So it must be a packaging/deployment issue.

I strongly suspect this is to do with the META-INF/cxf/cfx.extension files which are present in many of the cxf jars, but only of which makes it into the fat jar file of course.

That should help....","16/Oct/09 17:17;dkulp;
Is this still an issue?   I would need a debuggable test case or something to see what is going on.   ","21/Oct/09 00:50;dkulp;
Marking as resolved as not reproducible test case was provided and no updates in a couple months.

","21/Sep/10 02:40;vkatam;I faced a similar issue, as Richard Flitcroft pointed out it is an issue when using maven assembly plugin to build an uber executable war. There is a workaround using maven shady plugin which constructs an uber war which  does not override the META-INF/cxf/*.* files . 

Using resource transformers in maven shady plugin these files can be combined.","01/Jun/12 13:06;pussinboots666@googlemail.com;I had a similar problem and i could fixed with the maven shady plugin by merge the content of each bus-extension.txt file.

Here the Maven snippet code to merge the bus-extension.txt file.

<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-shade-plugin</artifactId>
				<version>1.6</version>
				<configuration>
					<!-- put your configurations here -->
				</configuration>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>shade</goal>
						</goals>
						<configuration>
							<transformers>
								<transformer implementation=""org.apache.maven.plugins.shade.resource.AppendingTransformer"">
									<resource>META-INF/cxf/bus-extensions.txt</resource>
								</transformer>
							</transformers>
						</configuration>
					</execution>
				</executions>
			</plugin>

Have a nice day",,,,,,,,,,,,,,,,,,,,,,,
Exposed Webservice disappear after a child spring app context closed,CXF-2283,12427715,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Critical,Fixed,dkulp,adrianshum,adrianshum,12/Jun/09 07:24,04/Dec/09 22:34,14/Mar/19 02:29,16/Oct/09 21:56,2.0.11,,,,,,,,,,,,,,2.1.8,2.2.5,,,,,,,,,0,,,,"My application will spawn a child spring application context to do some processing.

However, once the child application context is closed, the CXF services exposed in the parent app context disappeared (I try to see the WSDL using web browser but I can't after the above mentioned action)

Previously I used CXF 2.0.6 and it do not have such problem.","WebLogic10, Spring 2.5.3, JDK 1.5.0_12",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-07-09 18:34:13.445,,,no_permission,,,,,,,,,,,,,113718,,,Fri Oct 16 21:12:37 UTC 2009,,,,,,0|i0uyav:,178698,,,,,,,,09/Jul/09 18:34;dkulp;Any chance of getting a small testcase attached that shows this?,"10/Jul/09 02:21;adrianshum;Ok, I'll try to produce one  :)",05/Oct/09 17:11;dkulp;Any updates trying to get a testcase?,"16/Oct/09 21:12;dkulp;Was able to reproduce.   Working on a fix now.
",,,,,,,,,,,,,,,,,,,,,,,,,,,
WSS11 Assertion Wrong namespace,CXF-2282,12427664,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,creme-fresh,creme-fresh,11/Jun/09 16:21,03/Aug/09 20:07,14/Mar/19 02:29,30/Jun/09 20:30,,,,,,,,,,,,,,,2.2.3,,,,,,,,,,0,,,,"WSS11.java :

 String pPrefix = writer.getPrefix(SPConstants.POLICY.getNamespaceURI());
        if (pPrefix == null) {
            writer.setPrefix(SPConstants.POLICY.getPrefix(), SPConstants.POLICY.getNamespaceURI());
        }

        // <wsp:Policy>
        writer.writeStartElement(prefix, SPConstants.POLICY.getLocalPart(), SPConstants.POLICY
            .getNamespaceURI());

results in:

<sp:Wss11 xmlns:sp=""http://schemas.xmlsoap.org/ws/2005/07/securitypolicy"">
  <sp:Policy /> 
  </sp:Wss11>

... :-(
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-06-30 20:30:25.014,,,no_permission,,,,,,,,,,,,,113717,,,Tue Jun 30 20:30:25 UTC 2009,,,,,,0|i0v1mf:,179236,,,,,,,,30/Jun/09 20:30;dkulp;Wss11 wasn't the only one affected by this either.   Fixed several of them.  :-(,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Current ConfigureImpl is not application refresh friendly,CXF-2279,12427642,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,njiang,njiang,njiang,11/Jun/09 12:55,03/Aug/09 20:06,14/Mar/19 02:29,30/Jun/09 20:18,2.1.4,2.1.5,2.2.1,2.2.2,,,,,,,,,,,2.0.12,2.1.6,2.2.3,,,,,,,,0,,,,"When call the  ConfigurerImpl.addApplicationContext(ctx)  to add a new application context, we need to check if the ConfigureImpl's ApplicationContext is closed.
Since if we closed the application context which the ConfigureImpl has and add a new application context to it, we will  got the exception of ""BeanFactory not initialized or already closed"".

And this is a common use case in OSGi world, such as  refresh a OSGi Bundle with a camel-cxf route.

I workaround this issue by clean up  the BusFactory default factory[1] when the application context is closed, but we still need to fix this issue in CXF.

[1] https://issues.apache.org/activemq/browse/CAMEL-1696",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113714,,,2009-06-11 12:55:01.0,,,,,,0|i0v1rj:,179259,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Error stopping Tomcat after executing a one-way Web Service,CXF-2277,12427554,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,,albegarcia,albegarcia,10/Jun/09 13:26,13/Nov/09 17:27,14/Mar/19 02:29,19/Oct/09 21:14,2.2.1,2.2.2,,,,,,,,,,,,,2.2.2,,,,JAX-WS Runtime,,,,,,0,,,,"I have a Web application using Apache CXF that implements several Web Service. This application is deployed in a Tomcat 6.0.14. When I try to stop the Tomcat the server doesn't stop correctly. I have done a lot of tests and my conclussions are the following:

- If a Web Service deployed like One-Way service is invoked (I mean, the web service implementation run in my application) then the Tomcat Server doesn't stop.
- If no One-Way Web Services are invoked then the server stop right.

I think there is some problem with the implementation of One-Way services. I think some thread or pool doesn't stop and, consequently, Tomcat neither stop. Do you think this is an error of CXF or the Sun JVM?

Thanks in advance.",Apache Tomcat 6.0.14 and Sun Java 1.6.0_10,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-10-03 03:12:16.606,,,no_permission,,Unknown,,,,,,,,,,,113712,,,Mon Oct 19 21:14:42 UTC 2009,,,,,,0|i0v0an:,179021,,,,,,,,"15/Jun/09 13:00;albegarcia;I have been debugging the sources of CXF and I think the problem is that the queues for executing the One-Way Web Services (class AutomaticWorkQueueImpl) aren't stopped (invoking the shutdown method of ThreadExecutorPool, its superclass) when Tomcat stop. I have done a test and if you create a ThreadExecutorPool and don't stop it invoking the shutdown method, then Tomcat doesn't stop right.",03/Oct/09 03:12;dkulp;Is this still an issue with 2.2.3?    We changed the workqueues we use to use daemon threads which may help.,"19/Oct/09 21:14;dkulp;
Marking resolved as it should now be fixed and no response/confirmation after two weeks.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
HTTP transport assumes UTF-8 instead of ISO-8859-1 if charset not specified,CXF-2274,12427485,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,dkulp,dkulp,09/Jun/09 18:51,03/Aug/09 20:06,14/Mar/19 02:29,17/Jun/09 15:53,,,,,,,,,,,,,,,2.0.12,2.1.6,2.2.3,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113709,,,2009-06-09 18:51:11.0,,,,,,0|i13zrz:,231426,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Only mime-type (not content-type) should be set on the message.,CXF-2272,12427453,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,,chaitanyak,chaitanyak,09/Jun/09 13:43,09/Jun/09 15:03,14/Mar/19 02:29,09/Jun/09 15:03,2.2.3,2.3,,,,,,,,,,,,,2.2.3,2.3,,,JAX-RS,,,,,,0,,,,"In org.apache.cxf.transport.http.AbstractHttpDestination.setupMessage() method only mime-type should be set on the message.
For example:
If the content-type header on a request is :

application/xml;charset=utf-8

an IllegalArgumentException is thrown in org.apache.cxf.jaxrs.utils.JAXRSUtils.findTargetMethod() as it expects only mime type.

",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-06-09 13:55:45.731,,,no_permission,,,,,,,,,,,,,113707,,,Tue Jun 09 14:22:25 UTC 2009,,,,,,0|i13zx3:,231449,,,,,,,,09/Jun/09 13:55;sergey_beryozkin;I think it the issue with JAXRSUtils,"09/Jun/09 14:22;sergey_beryozkin;Actually, I'm not sure I understand
Here's a sample post :

POST /bookstore/books HTTP/1.1
Content-Type: application/xml;charset=utf-8
User-Agent: Jakarta Commons-HttpClient/3.1
Host: localhost:9081
Content-Length: 98

<?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?><Book><name>CXF in Action - 2</name></Book>

and I see no problem in JAXRSUtils.findTargetMethod().

Do you MediaType.fromString() throwing this exception ?

Can you please attach a sample ?
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
autoNameResolution not working for wrapper elements,CXF-2271,12427382,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,dkulp,dkulp,08/Jun/09 17:27,03/Aug/09 20:06,14/Mar/19 02:29,08/Jun/09 19:57,2.2.2,,,,,,,,,,,,,,2.0.12,2.1.6,2.2.3,,Tooling,,,,,,0,,,,"
When an operation can otherwise be unwrapped, -autoNameResolution flag is not working to rename parts with different types.     

Two issues:
1) The validator is not checking the flag so validation always fails.

2) If 1 is fixed, the part is marked INOUT, not OUT.",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113706,,,2009-06-08 17:27:25.0,,,,,,0|i140dz:,231525,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AssymetricBindingHandler swallows a PolicyException,CXF-2251,12427223,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,eamonndwyer,eamonndwyer,05/Jun/09 15:38,03/Aug/09 20:06,14/Mar/19 02:29,05/Jun/09 18:29,2.2.2,,,,,,,,,,,,,,2.2.3,,,,WS-* Components,,,,,,0,,,,"In the doSignBeforeEncrypt method there is 

catch (Exception e) {
   e.printStackTrace();
  //REVISIT
}

 I reckon something like this would be more appropriate.
catch (Exception e) {
            String reason = e.getMessage();
            LOG.log(Level.WARNING, ""Sign before encryption failed due to : "" + reason);
            throw new Fault(e);
}

I'll be submitting a patch for this soon
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-06-05 18:29:31.449,,,no_permission,,,,,,,,,,,,,113689,,,Fri Jun 05 18:29:31 UTC 2009,,,,,,0|i13zif:,231383,,,,,,,,"05/Jun/09 15:49;eamonndwyer;A fix for this in included in the patch for https://issues.apache.org/jira/browse/CXF-2194
",05/Jun/09 18:29;dkulp;Patch applied.  Thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MessageContext.INBOUND_MESSAGE_ATTACHMENTS not working on client side,CXF-2250,12426844,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,dkulp,dkulp,01/Jun/09 18:53,03/Aug/09 20:06,14/Mar/19 02:29,02/Jun/09 02:58,2.1.5,2.2.2,,,,,,,,,,,,,2.1.6,2.2.3,,,JAX-WS Runtime,,,,,,0,,,,MessageContext.INBOUND_MESSAGE_ATTACHMENTS is not retrieving the attachments.  You must delegate down into CXF proprietary code.,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113688,,,2009-06-01 18:53:58.0,,,,,,0|i14f07:,233894,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Aegis sample parameter name setting isn't working,CXF-2249,12426791,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,bmargulies,bmargulies,bmargulies,01/Jun/09 00:49,03/Aug/09 20:06,14/Mar/19 02:29,01/Jun/09 01:19,2.1.2,2.1.3,2.1.4,2.1.5,2.2,2.2.1,2.2.2,,,,,,,,2.2.3,,,,Aegis Databinding,,,,,,0,,,,"The wsdl that comes out of the 'aegis' sample calls the parameter 'arg0' instead of 'greeting'. 
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113687,,,Mon Jun 01 01:19:17 UTC 2009,,,,,,0|i0v1vz:,179279,,,,,,,,01/Jun/09 01:19;bmargulies;Repaired.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
<jaxrs:server> should support set the serviceClass ,CXF-2247,12426728,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,njiang,njiang,njiang,30/May/09 09:15,03/Aug/09 20:06,14/Mar/19 02:29,02/Jun/09 00:00,2.2.1,2.2.2,,,,,,,,,,,,,2.2.3,,,,JAX-RS,,,,,,0,,,,"Current CXF <jaxrs:server> doesn't support set the serviceClass from the @serviceClass, since there is no setServiceClass() method in the JAXRSServerFactoryBean.",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-06-01 18:31:29.82,,,no_permission,,,,,,,,,,,,,113685,,,Tue Jun 02 00:00:49 UTC 2009,,,,,,0|i14ewf:,233877,,,,,,,,01/Jun/09 18:31;sergey_beryozkin;Hi Willem - JAXRSServerFactoryBean has setServiceClass method so I believe this JIRA can be closed now ?,02/Jun/09 00:00;njiang;Done :),,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Can't set orb properties in CorbaBindinfgFactory,CXF-2245,12426678,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,eamonndwyer,eamonndwyer,29/May/09 14:20,03/Aug/09 20:06,14/Mar/19 02:29,08/Jun/09 20:01,2.2.1,,,,,,,,,,,,,,2.1.6,2.2.3,,,CORBA Binding,,,,,,0,,,,"Initially my problem was that there was no way for specifying the orb properties in the CorbaBindingFactory. One could only set the org args and only the ORBClass and ORBSingletonClass properties. This resulted in some CORBA features not being available, welll at least the portable interceptor features.

I was going to simple expand the CorbaBindingFactory bean to also allow properties to be set but then I started to think that it would be nicer to add the idea of a BinfingFactoryConfigurer to the API. The idea then would be that each BindingFactory could have the option of having a configurer property of type org.apache.cxf.binding.BindingFactoryConfigurer. A BindingFactoryConfigurer contains a reference to its BindingFactory. It would be possible to write a sublclass of the BindingFactoryConfigurer for whatever BindingFactory requires it and expose this configurer as part of the API module. I've done an example for the CorbaBindingFactory, called org.apache.cxf.bindings.corba.CorbaBindingFactoryConfigurer. This class holds the data specific to this particular binding, namely the orb properties and org args.

Later the associated Destination and Conduit classes can look at the BindingFactoryConfigurer to glean any binding specific data it requires.

I'm attaching a patch to this to illustrate what I think can be done for the CorbaBindingFactory.

In this patch the old org.apache.cxf.binding.corba.utils.OrbConfig has been broken up and split into the new OrbConfigurer class and the other (non config related) methods have been placed into the CorbaUtils class

In future the ORBClass and ORBSingletonClass should be set as regular orb properties rather treating them separtely as special orb properties.",,,,,,,,,,,,,,,,,08/Jun/09 17:06;eamonndwyer;NewOrbConfigurer.diff;https://issues.apache.org/jira/secure/attachment/12410149/NewOrbConfigurer.diff,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113683,,,Mon Jun 08 17:06:45 UTC 2009,,,,,,0|i0v0tj:,179106,,,,,,,,"08/Jun/09 17:06;eamonndwyer;I've slimmed down the patch  - and it should now be backward compatible as all new stuff is extra and nothing has been taken away. 
The patch still contains the idea of an OrbConfigurer class which is basically a place to setup the OrbConfig object that will be used by the CorbaBindingFactory.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Server accepts an unsigned message when the policy requires a signed message.,CXF-2244,12426649,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,mrthompson@lbl.gov,mrthompson@lbl.gov,29/May/09 06:32,04/Dec/09 22:34,14/Mar/19 02:29,13/Nov/09 16:49,2.2.1,,,,,,,,,,,,,,2.2.5,,,,WS-* Components,,,,,,0,,,,"A policy is attached to the request message that requires the message body to be signed and timestamped.
Due to an error on the client side, a message is sent with a security header and time stamp but is not signed.
The server accepts the message anyway.

The inbound message is:
INFO: Inbound Message
----------------------------
ID: 1
Address: /AuthN
Encoding: UTF-8
Content-Type: application/soap+xml; action=""http://oscars.es.net/OSCARS/AuthN/verifyUser""; charset=UTF-8
Headers: {Content-Length=[908], Host=[localhost:9090], User-Agent=[Apache CXF 2.2.2-SNAPSHOT], connection=[keep-alive], Pragma=[no-cache], Content-Type=[application/soap+xml; action=""http://oscars.es.net/OSCARS/AuthN/verifyUser""; charset=UTF-8], content-type=[application/soap+xml; action=""http://oscars.es.net/OSCARS/AuthN/verifyUser""; charset=UTF-8], Cache-Control=[no-cache], Accept=[*/*]}
Payload: <soap:Envelope xmlns:soap=""http://www.w3.org/2003/05/soap-envelope""><soap:Header><wsse:Security xmlns:wsse=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"" soap:mustUnderstand=""true""><wsu:Timestamp xmlns:wsu=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"" wsu:Id=""Timestamp-1""><wsu:Created>2009-05-29T06:09:44.894Z</wsu:Created><wsu:Expires>2009-05-29T06:14:44.894Z</wsu:Expires></wsu:Timestamp></wsse:Security></soap:Header><soap:Body xmlns:wsu=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"" wsu:Id=""Id-1692283""><verifyUserReq xmlns=""http://oscars.es.net/OSCARS/AuthN""><login><LoginName>mrthompson</LoginName><Password>foobar</Password></login><DN><SubjectDN>CN=Mary Thompson, DC=net, DC=es</SubjectDN><IssuerDN>CN=esnetCA, DC=net, DC=es</IssuerDN></DN></verifyUserReq></soap:Body></soap:Envelope>
","java 1.5, MacOS 10.5.7 CXF 2.2.2-SNAPSHOT",,,,,,,,,,,,,,,,10/Jun/09 07:01;mrthompson@lbl.gov;AuthNTest.wsdl;https://issues.apache.org/jira/secure/attachment/12410279/AuthNTest.wsdl,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2009-06-04 18:33:23.593,,,no_permission,,,,,,,,,,,,,113682,,,Wed Jun 10 07:01:56 UTC 2009,,,,,,0|i14e5r:,233757,,,,,,,,"04/Jun/09 18:33;dkulp;
Could you attach/include the policy fragment?   That would allow me to test with the actual policy to debug what/where the issue is occuring.","10/Jun/09 07:01;mrthompson@lbl.gov;Dan, I just got back from vacation and saw your request. I have attached the wsdl I am using. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JMSFactory.createJmsListener does not use property from JMSConfiguration to set the receiveTimeout on the constructed Spring DMLC,CXF-2243,12426619,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,njiang,rgavlin,rgavlin,28/May/09 19:38,03/Aug/09 20:06,14/Mar/19 02:29,02/Jun/09 08:22,2.0.11,,,,,,,,,,,,,,2.0.12,2.1.6,2.2.3,,,,,,,,0,,,,"JMSFactory.createJmsListener does not use the property value from the JMSConfiguration to set the receiveTimeout on the constructed Spring DMLC. As a result, the constructed DMLC always has the default receiveTimeout value of 1000 milliseconds (which can be quite inefficient). 
",,,,,,,,,,,,,,,,,01/Jun/09 11:12;rgavlin;cxf-2243.patch;https://issues.apache.org/jira/secure/attachment/12409556/cxf-2243.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2009-06-02 08:22:33.599,,,no_permission,,Novice,,,,,,,,,,,113681,,,Tue Jun 02 08:22:33 UTC 2009,,,,,,0|i14dxb:,233719,,,,,,,,"01/Jun/09 11:12;rgavlin;This patch allows the JMSConfiguration.receiveTimeout to be used to configure both the conduit/JMSTemplate and the destination/JMSListener. Currently, only the conduit/JMSTemplate is possible.","02/Jun/09 08:22;njiang;Applied patch with thanks to Ron.

BTW, 
I did a quick fix[1]for working with the spring 2.0.x by setting the template with default timeout value 0 if the JMSConfigurer hasn't that value.

[1] http://svn.apache.org/viewvc?rev=780960&view=rev",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FormEncodingProvider writes the application/x-www-form-urlencoded params incorrectly when multiple params with the same name are present,CXF-2242,12426576,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,sergey_beryozkin,ignaciogmd,ignaciogmd,28/May/09 13:09,03/Aug/09 20:06,14/Mar/19 02:29,01/Jun/09 17:42,2.2.1,,,,,,,,,,,,,,2.2.3,,,,JAX-RS,,,,,,0,,,,"Hi, there is a problem with FormEncodingProvider when writing the url-encoded string. It is checking an incorrect iterator.

    public void writeTo(MultivaluedMap<String, String> map, Class<?> c, Type t, Annotation[] anns, 
                        MediaType mt, MultivaluedMap<String, Object> headers, OutputStream os) 
        throws IOException, WebApplicationException {
        boolean encoded = AnnotationUtils.getAnnotation(anns, Encoded.class) != null;
        for (Iterator<Map.Entry<String, List<String>>> it = map.entrySet().iterator(); it.hasNext();) {
            Map.Entry<String, List<String>> entry = it.next();
            for (String value : entry.getValue()) {
                os.write(entry.getKey().getBytes(""UTF-8""));
                os.write('=');
                String data = encoded ? value : HttpUtils.urlEncode(value); 
                os.write(data.getBytes(""UTF-8""));
                if (it.hasNext()) {
                    os.write('&');
                }
            }
        }
    }

it.hasNext() should be checking the entry iterator and not the map iterator. The consequence is that & is never appended if, for example, there is only one parameter


Fixed version would be:

    public void writeTo(MultivaluedMap<String, String> map, Class<?> c, Type t, Annotation[] anns, 
                        MediaType mt, MultivaluedMap<String, Object> headers, OutputStream os) 
        throws IOException, WebApplicationException {
        boolean encoded = AnnotationUtils.getAnnotation(anns, Encoded.class) != null;
        for (Iterator<Map.Entry<String, List<String>>> it = map.entrySet().iterator(); it.hasNext();) {
            Map.Entry<String, List<String>> entry = it.next();
            for (Iterator<String> entryIterator = entry.getValue().iterator(); entryIterator.hasNext();) {
            	String value = entryIterator.next();
				os.write(entry.getKey().getBytes(""UTF-8""));
                os.write('=');
                String data = encoded ? value : HttpUtils.urlEncode(value); 
                os.write(data.getBytes(""UTF-8""));
                if (entryIterator.hasNext()) {
                    os.write('&');
                }
            }
        }
    }

I don't have time just now to provide test cases but a careful look should do.

best regards
",,,,,,,,,,,,,,,,,28/May/09 13:10;ignaciogmd;FormEncodingProvider.patch;https://issues.apache.org/jira/secure/attachment/12409262/FormEncodingProvider.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2009-05-29 17:36:53.494,,,no_permission,,Novice,,,,,,,,,,,113680,,,Mon Jun 01 17:42:55 UTC 2009,,,,,,0|i0v0tb:,179105,,,,,,,,28/May/09 13:10;ignaciogmd;Patch solving this issue,"28/May/09 13:13;ignaciogmd;Workaround: (Since it will probably take some time to include this patch in a release, I am including the implemented workaround)

When invoking a application/x-www-form-urlencoded service register the following provider and everything will be fine:

public class FixedFormEncodingProvider extends FormEncodingProvider {

    public void writeTo(MultivaluedMap<String, String> map, Class<?> c, Type t, Annotation[] anns, 
                        MediaType mt, MultivaluedMap<String, Object> headers, OutputStream os) 
        throws IOException, WebApplicationException {
        boolean encoded = AnnotationUtils.getAnnotation(anns, Encoded.class) != null;
        for (Iterator<Map.Entry<String, List<String>>> it = map.entrySet().iterator(); it.hasNext();) {
            Map.Entry<String, List<String>> entry = it.next();
            for (Iterator<String> entryIterator = entry.getValue().iterator(); entryIterator.hasNext();) {
				String value = entryIterator.next();
				os.write(entry.getKey().getBytes(""UTF-8""));
                os.write('=');
                String data = encoded ? value : HttpUtils.urlEncode(value); 
                os.write(data.getBytes(""UTF-8""));
                if (entryIterator.hasNext()) {
                    os.write('&');
                }
			}
        }
    }
}","29/May/09 17:36;sergey_beryozkin;Hi

I've added this unit test and it passes :

MultivaluedMap<String, String> mvMap = new MetadataMap<String, String>();
        mvMap.add(""a"", ""a1"");
        mvMap.add(""a"", ""a2"");
        mvMap.add(""b"", ""b1"");
        ByteArrayOutputStream bos = new ByteArrayOutputStream(); 
        ferp.writeTo(mvMap, MultivaluedMap.class, MultivaluedMap.class, 
                     new Annotation[0], MediaType.APPLICATION_FORM_URLENCODED_TYPE, 
                     new MetadataMap<String, Object>(), bos);
        String result = bos.toString();
        assertEquals(""Wrong value"", ""a=a1&a=a2&b=b1"", result.toString());

> The consequence is that & is never appended if, for example, there is only one parameter 
Can you please just post here a sample combination of name/value pairs and their serialized sequence, such that I can update the test


thanks, Sergey  ","30/May/09 13:21;ignaciogmd;Oops... I forgot to include the other it.hasNext()...

Currently this test fails:

	MultivaluedMap<String, String> mvMap = new MetadataMap<String, String>();
        mvMap.add(""a"", ""a1"");
        mvMap.add(""a"", ""a2"");
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        ferp.writeTo(mvMap, MultivaluedMap.class, MultivaluedMap.class,
                     new Annotation[0], MediaType.APPLICATION_FORM_URLENCODED_TYPE,
                     new MetadataMap<String, Object>(), bos);
        String result = bos.toString();
        assertEquals(""Wrong value"", ""a=a1&a=a2"", result.toString());

The result is a=a1a=a2

So, it should be....:

        for (Iterator<Map.Entry<String, List<String>>> it = map.entrySet().iterator(); it.hasNext();) {
            Map.Entry<String, List<String>> entry = it.next();
            for (Iterator<String> entryIterator = entry.getValue().iterator(); entryIterator.hasNext();) {
				String value = entryIterator.next();
				os.write(entry.getKey().getBytes(""UTF-8""));
                os.write('=');
                String data = encoded ? value : HttpUtils.urlEncode(value);
                os.write(data.getBytes(""UTF-8""));
                if (entryIterator.hasNext() || it.hasNext()) {
                    os.write('&');
                }
	}
}
 
Like this, your test, the prev test and the following will pass:

	MultivaluedMap<String, String> mvMap = new MetadataMap<String, String>();
        mvMap.add(""a"", ""a1"");
        mvMap.add(""b"", ""b1"");
        mvMap.add(""b"", ""b2"");
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        ferp.writeTo(mvMap, MultivaluedMap.class, MultivaluedMap.class,
                     new Annotation[0], MediaType.APPLICATION_FORM_URLENCODED_TYPE,
                     new MetadataMap<String, Object>(), bos);
        String result = bos.toString();
        assertEquals(""Wrong value"", ""a=a1&a=a2"", result.toString());

Best regards,
n","01/Jun/09 17:42;sergey_beryozkin;I applied your proposed fix as is and it worked really well, thanks ! I'd like to view it as a patch point. ",,,,,,,,,,,,,,,,,,,,,,,,,,
"wsdl2java produces code with compile error, trying to instantiate abstract class",CXF-2241,12426357,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,cbmamherst,cbmamherst,26/May/09 15:02,03/Aug/09 20:06,14/Mar/19 02:29,04/Jun/09 19:50,2.2.1,,,,,,,,,,,,,,2.1.6,2.2.3,,,,,,,,,0,,,,"For wsdl that includes abstract complex types as:

      <complexType name=""ReportJob"" abstract=""true"">
        <sequence>
          <element name=""clientEmails"" minOccurs=""0"" maxOccurs=""unbounded"" type=""xsd:string""/>
          <element name=""crossClient"" minOccurs=""0"" type=""xsd:boolean""/>
          <element name=""endDay"" type=""xsd:date""/>
          <element name=""id"" minOccurs=""0"" type=""xsd:long""/>
          <element name=""name"" minOccurs=""0"" type=""xsd:string""/>
          <element name=""startDay"" type=""xsd:date""/>
          <element name=""status"" minOccurs=""0"" type=""impl:ReportJobStatus""/>
        </sequence>
      </complexType>

an abstract class will be generated and the sample client will include code that tries to instantiate this class which of course causes a complile error.

The sample above is from the Google AdWords API and the full WSDL can be downloaded from:

https://adwords.google.com/api/adwords/v13/ReportService?wsdl

Chris Marshall","Linux, Eclipse 3.5RC1",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113679,,,2009-05-26 15:02:59.0,,,,,,0|i0v1lz:,179234,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WSDL2JAVA fail to create the good java method  - missing one argument,CXF-2235,12426104,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,radamanth,radamanth,22/May/09 11:29,05/Jun/09 09:25,14/Mar/19 02:29,04/Jun/09 20:13,2.2.1,,,,,,,,,,,,,,2.2.2,,,,Tooling,,,,,,0,,,,"Hi.

When I try to generate the java client with wsdl2java.

I have a missing parameter.

here are excerpt for my wsdl :

I have this operation in the portType section

<operation name=""JobSubmit"">
            <input message=""xoa:JobSubmitRequest""/>
            <output message=""xoa:JobSubmitResult""/>
</operation>

And here is the 2 message :

<message name=""JobSubmitRequest"">
        <part element=""xoa:JobSubmitRequest"" name=""parameter""/>
        <part element=""xoa:Request"" name=""request_header""/>
    </message>
    <message name=""JobSubmitResult"">
        <part element=""xoa:JobSubmitResult"" name=""parameter""/>
        <part element=""xoa:Response"" name=""response_header""/>
    </message>

As you can see both message have a 'part' named 'parameter'

I think that it's the source of the problem.
But I have no option for modifying the wsdl.
I think jaxb binding could be a solution but I can't get jaxb binding to work properly (see https://issues.apache.org/jira/browse/CXF-2225 )

by the way  I think that it's still a bug for CXF plugin didn't give me an error or something.

Regards.

Tony
","ECLIPSE 3.4
CXF 2.2.1
MAVEN PLUGIN :  cxf-codegen-plugin 2.1.4
JAVA 5
Windows operating system",,,,,,,,,,,,,,,,25/May/09 08:24;radamanth;binding.zip;https://issues.apache.org/jira/secure/attachment/12408927/binding.zip,22/May/09 14:10;radamanth;syncTest.wsdl;https://issues.apache.org/jira/secure/attachment/12408804/syncTest.wsdl,,,,,2.0,,,,,,,,,,,,,,,,,,,,2009-05-22 14:03:16.789,,,no_permission,,Moderate,,,,,,,,,,,113673,,,Fri Jun 05 09:25:28 UTC 2009,,,,,,0|i1ae9r:,268778,,,,,,,,"22/May/09 14:03;dkulp;
We would need to see the wsdl along with the full command line you are using to call wsdl2java.","22/May/09 14:11;radamanth;And I'm using the apache cxf maven plugin to generate my Client.

Here are the excerpt :

<plugin>
				<groupId>org.apache.cxf</groupId>
				<artifactId>cxf-codegen-plugin</artifactId>
				<version>2.1.4</version>
				<executions>
					<execution>
						<id>generate-sources</id>
						<phase>generate-sources</phase>
						<configuration>
							<sourceRoot>${basedir}/src/main/java/</sourceRoot>
							<wsdlOptions>
								<wsdlOption>
									<wsdl>${basedir}/src/main/resources/wsdl/syncTest.wsdl</wsdl>
									<bindingFiles>
										<bindingFile>${basedir}/src/main/resources/jaxb/bindings.xml</bindingFile>
										<bindingFile>${basedir}/src/main/resources/jaxws/bindings.xml</bindingFile>
									</bindingFiles>
									<extraargs>
										<extraarg>-exsh</extraarg>
										<extraarg>true</extraarg>
										<extraarg>-client</extraarg>
									</extraargs>
								</wsdlOption>
							</wsdlOptions>
						</configuration>
						<goals>
							<goal>wsdl2java</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

The bindings contain only package renaming information.
","22/May/09 14:50;dkulp;
I would need the bindings files as well.    wsdl2java won't work without those binding files due to parameter name conflicts.","28/May/09 14:49;radamanth;Hi Daniel.

A small message to up my problem.

Did you take a look at my curious case  ?

Hope it doesn't bother you too much.

By the way thanks in advance.

Regards.

Tony

","04/Jun/09 20:13;dkulp;
This was fixed in 2.2.2.   You can use -autoNameResolution flag to wsdl2java to resolve all the param name conflicts or spend a lot of time with customizations.
","05/Jun/09 09:25;radamanth;Thanks a lot.

It works like a charm.

Regards! 

Tony

",,,,,,,,,,,,,,,,,,,,,,,,,
Unmarshalling with JAXB of a method that is defined in an inherited interface results in an NPE exception,CXF-2234,12426097,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,,tbee,tbee,22/May/09 09:42,16/Jun/09 12:52,14/Mar/19 02:29,16/Jun/09 12:52,2.2.2,,,,,,,,,,,,,,2.2.2,,,,JAXB Databinding,Soap Binding,,,,,0,,,,"The UserService:

@javax.jws.WebService
public interface UserService extends AbstractService<User, Users>
{
}

The AbstractService:

@javax.jws.WebService
public interface AbstractService<T, Ts>
{
	public Ts list();
}



The UserServiceImpl:

@javax.jws.WebService(endpointInterface = ""nl.knowledgeplaza.profiler.services.UserService"", serviceName = ""users"") // the ""ws"" prefix is handled by the container
public class UserServiceImpl 
implements UserService
{
	public Users list()
	{
		try
		{
			if (slf4j.isDebugEnabled()) slf4j.debug(""list User"");
			
			// find all
			List<User> lList = User.findAll();
			if (slf4j.isDebugEnabled()) slf4j.debug(""list User size={}"", lList.size());
			
			// create a collection so JAXB knows what to do
			Users lUsers= new Users(lList);
			
			// done
			return lUsers;
		}
		catch (RuntimeException e)
		{
			slf4j.error(ExceptionUtil.describe(e), e);
			throw e;
		}
	}
}


UnitTests start the SOAP end point as follows:

        javax.xml.ws.Endpoint.publish(cWSUserAddress, new UserServiceImpl());


The unittest:

	@org.junit.Test
	public void listUsersSOAP()
	{
		// create a proxy to the service
		JaxWsProxyFactoryBean factory = new JaxWsProxyFactoryBean();
		factory.getInInterceptors().add(new LoggingInInterceptor());
		factory.getOutInterceptors().add(new LoggingOutInterceptor());
		factory.setServiceClass(UserService.class);
		factory.setAddress(cWSUserAddress);
		UserService lUserService = (UserService)factory.create();
		
		// make the call
		Users lUsers = lUserService.list();
		
		// check it
		org.fest.assertions.Assertions.assertThat( lUsers.getUser().size() ).isGreaterThan(0);
	}	


The call arrives serverside, the code is correctly executed and 4 User entities have been fetched from the database. The JAXB marshalling then runs into problems, resulting in a value of null being returned on the clients side, and failing the unittest on a NPE.

The trace:

May 22, 2009 11:29:00 AM org.apache.cxf.interceptor.LoggingOutInterceptor$LoggingCallback onClose
INFO: Outbound Message
---------------------------
ID: 2
Address: http://localhost:9000/ws/user
Encoding: UTF-8
Content-Type: text/xml
Headers: {SOAPAction=[""""], Accept=[*/*]}
Payload: <soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/""><soap:Body><ns1:list xmlns:ns1=""http://services.profiler.knowledgeplaza.nl/"" /></soap:Body></soap:Envelope>
--------------------------------------
[33299971@qtp-22864463-1] 2009-05-22 11:29:06,296 DEBUG nl.knowledgeplaza.profiler.services.UserServiceImpl.list(UserServiceImpl.java:48) list User
[EL Fine]: 2009-05-22 11:29:07.093--ServerSession(15545028)--Connection(13749345)--Thread(Thread[33299971@qtp-22864463-1,5,main])--SELECT id, username, middlename, email, lastname, callname, firstname, version FROM KP_USER
[33299971@qtp-22864463-1] 2009-05-22 11:29:08,750 DEBUG nl.knowledgeplaza.profiler.services.UserServiceImpl.list(UserServiceImpl.java:52) list User size=4
May 22, 2009 11:29:11 AM org.apache.cxf.phase.PhaseInterceptorChain doIntercept
INFO: Interceptor has thrown exception, unwinding now
org.apache.cxf.interceptor.Fault: Marshalling Error: class nl.knowledgeplaza.profiler.services.support.Users nor any of its super class is known to this context.
	at org.apache.cxf.jaxb.JAXBEncoderDecoder.marshall(JAXBEncoderDecoder.java:159)
	at org.apache.cxf.jaxb.io.DataWriterImpl.write(DataWriterImpl.java:169)
	at org.apache.cxf.interceptor.AbstractOutDatabindingInterceptor.writeParts(AbstractOutDatabindingInterceptor.java:105)
	at org.apache.cxf.interceptor.BareOutInterceptor.handleMessage(BareOutInterceptor.java:68)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
	at org.apache.cxf.interceptor.OutgoingChainInterceptor.handleMessage(OutgoingChainInterceptor.java:74)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
	at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:89)
	at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.serviceRequest(JettyHTTPDestination.java:302)
	at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.doService(JettyHTTPDestination.java:265)
	at org.apache.cxf.transport.http_jetty.JettyHTTPHandler.handle(JettyHTTPHandler.java:70)
	at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765)
	at org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:230)
	at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)
	at org.mortbay.jetty.Server.handle(Server.java:324)
	at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:535)
	at org.mortbay.jetty.HttpConnection$RequestHandler.content(HttpConnection.java:880)
	at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:747)
	at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:212)
	at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404)
	at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:409)
	at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:520)
Caused by: javax.xml.bind.MarshalException
 - with linked exception:
[javax.xml.bind.JAXBException: class nl.knowledgeplaza.profiler.services.support.Users nor any of its super class is known to this context.]
	at com.sun.xml.bind.v2.runtime.MarshallerImpl.write(MarshallerImpl.java:328)
	at com.sun.xml.bind.v2.runtime.MarshallerImpl.marshal(MarshallerImpl.java:254)
	at javax.xml.bind.helpers.AbstractMarshallerImpl.marshal(AbstractMarshallerImpl.java:75)
	at org.apache.cxf.jaxb.JAXBEncoderDecoder.writeObject(JAXBEncoderDecoder.java:441)
	at org.apache.cxf.jaxb.JAXBEncoderDecoder.marshall(JAXBEncoderDecoder.java:138)
	... 21 more
Caused by: javax.xml.bind.JAXBException: class nl.knowledgeplaza.profiler.services.support.Users nor any of its super class is known to this context.
	at com.sun.xml.bind.v2.runtime.XMLSerializer.reportError(XMLSerializer.java:242)
	at com.sun.xml.bind.v2.runtime.XMLSerializer.reportError(XMLSerializer.java:257)
	at com.sun.xml.bind.v2.runtime.XMLSerializer.childAsXsiType(XMLSerializer.java:649)
	at com.sun.xml.bind.v2.runtime.ElementBeanInfoImpl$1.serializeBody(ElementBeanInfoImpl.java:151)
	at com.sun.xml.bind.v2.runtime.ElementBeanInfoImpl$1.serializeBody(ElementBeanInfoImpl.java:185)
	at com.sun.xml.bind.v2.runtime.ElementBeanInfoImpl.serializeBody(ElementBeanInfoImpl.java:305)
	at com.sun.xml.bind.v2.runtime.ElementBeanInfoImpl.serializeRoot(ElementBeanInfoImpl.java:312)
	at com.sun.xml.bind.v2.runtime.ElementBeanInfoImpl.serializeRoot(ElementBeanInfoImpl.java:71)
	at com.sun.xml.bind.v2.runtime.XMLSerializer.childAsRoot(XMLSerializer.java:490)
	at com.sun.xml.bind.v2.runtime.MarshallerImpl.write(MarshallerImpl.java:325)
	... 25 more
Caused by: javax.xml.bind.JAXBException: class nl.knowledgeplaza.profiler.services.support.Users nor any of its super class is known to this context.
	at com.sun.xml.bind.v2.runtime.JAXBContextImpl.getBeanInfo(JAXBContextImpl.java:566)
	at com.sun.xml.bind.v2.runtime.XMLSerializer.childAsXsiType(XMLSerializer.java:644)
	... 32 more
May 22, 2009 11:29:12 AM org.apache.cxf.interceptor.LoggingInInterceptor logging
INFO: Inbound Message
----------------------------
ID: 2
Encoding: UTF-8
Content-Type: text/xml; charset=utf-8
Headers: {content-type=[text/xml; charset=utf-8], Content-Length=[415], Server=[Jetty(6.1.15)]}
Payload: <soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/""><soap:Body><ns1:listResponse xmlns:ns1=""http://services.profiler.knowledgeplaza.nl/""><soap:Fault><faultcode>soap:Server</faultcode><faultstring>Marshalling Error: class nl.knowledgeplaza.profiler.services.support.Users nor any of its super class is known to this context.</faultstring></soap:Fault></ns1:listResponse></soap:Body></soap:Envelope>
--------------------------------------



The Users class is just a collection workaround as suggested in CXF's documentation:

@XmlRootElement(name = ""users"")
public class Users 
implements Serializable
{
	public Users() { setUser(new ArrayList<User>()); } // upon JAXB unmarshalling of an empty collection, the setUser is NOT called and the collection would be null instead of empty
	public Users(Collection<User> c) { setUser(c); }
	
	private Collection<User> iCollection;
	public Collection<User> getUser() { return iCollection; }
	public void setUser(Collection<User> c) { iCollection = c; }
    
	public List<User> asList() { return new ArrayList<User>(iCollection); }
}","WindowsXP-SP3, Eclipse 3.4",,,,,,,,,,,,,,,,22/May/09 14:18;tbee;services.rar;https://issues.apache.org/jira/secure/attachment/12408807/services.rar,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2009-05-22 14:04:05.193,,,no_permission,,,,,,,,,,,,,113672,,,Tue Jun 16 12:52:55 UTC 2009,,,,,,0|i0v1tz:,179270,,,,,,,,"22/May/09 09:47;tbee;Oh, the same method is also called through REST (but I removed the corresponding annotations from the sniplets) and there it works ok. 
If the list method is placed in the UserService interface instead of the inherited interface, the unittest also runs correctly.

Both point above suggest to me that the problem is infact not a JAXB problem, but a SOAP-using-JAXB problem.
","22/May/09 14:04;dkulp;

Any chance you could package this up into an example project and attach it?","22/May/09 14:18;tbee;The source classes. But they are mixed in with all kinds of other libraries, like FEST reflection.","22/May/09 14:21;tbee;I attached the source, but it's a ""what's the most efficient approach"" thingy. My classes are relating to all kind of other things like FEST reflection. I believe it would be much more efficient to take an existing ""list"" alike method using JAXB, and simply move that into a inherited interface. If you then get the same exception, you won't have to work through my sources, nor do I need to shop out a working example. If not, then we can see if I should sharpen my axe.

The sniplets wee there to explain the setup, but you should mimick it in an existing unit test.
","05/Jun/09 18:42;dkulp;
You can PROBABLY get around this by adding an @XmlSeeAlso annotation pointing at the Users class to the service interfaces.   JAXB SHOULD then be able to pick it up.

","16/Jun/09 12:01;tbee;I just upgraded to 2.2.2 and the exception is gone. So. Ehm. Ok, close it?",16/Jun/09 12:52;dkulp;User reports it's fixed or no longer occuring.  ,,,,,,,,,,,,,,,,,,,,,,,,
thread safe issue caused by XMLOutputFactoryImpl,CXF-2229,12426000,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,leonw,leonw,21/May/09 09:03,04/Jun/09 21:32,14/Mar/19 02:29,21/May/09 18:39,2.1.3,,,,,,,,,,,,,,2.1.6,2.2.2,,,WS-* Components,,,,,,0,,,,"Currently CXF calls StaxUtils.getXMLOutputFactory() to get the cached instance of XMLOutputFactoryImpl. But XMLOutputFactoryImpl.createXMLStreamWriter is not thread-safe. See below.

javax.xml.stream.XMLStreamWriter createXMLStreamWriter(javax.xml.transform.stream.StreamResult sr, String encoding) throws javax.xml.stream.XMLStreamException {
         try{
           if(fReuseInstance && fStreamWriter != null && fStreamWriter.canReuse() && !fPropertyChanged){
               fStreamWriter.reset();
               fStreamWriter.setOutput(sr, encoding);
               if(DEBUG)System.out.println(""reusing instance, object id : "" + fStreamWriter);
               return fStreamWriter;
           }
           return fStreamWriter = new XMLStreamWriterImpl(sr, encoding, new PropertyManager(fPropertyManager));   -- this is not thread safe, since the new instance is assigned to the field fStreamWriter first, then it is possible that different threads get the same XMLStreamWriterImpl when they call this method at the same time.
         }catch(java.io.IOException io){
           throw new XMLStreamException(io);
       }
   }

The solution might be, StaxUtils.getXMLOutputFactory() method creates a new instance of XMLOutputFactory every time, don't cache it.",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-05-21 16:45:08.986,,,no_permission,,,,,,,,,,,,,113667,,,Thu May 21 16:45:08 UTC 2009,,,,,,0|i0v0s7:,179100,,,,,,,,"21/May/09 16:45;dkulp;Hmmm....   definitiely a good reason to use woodstox instead of the sun parser.    Woodstox is thread safe in this instance.   I'll add a sync block or similar.

Creating a new factory is VERY expensive and not something you want to do for each call.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WSDL2XML generated binding not passing correct method arguments in service implementation,CXF-2228,12425971,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,vinodd2009,vinodd2009,20/May/09 23:00,04/Jun/09 21:32,14/Mar/19 02:29,21/May/09 19:20,2.1.3,2.1.5,,,,,,,,,,,,,2.1.6,2.2.2,,,,,,,,,0,,,,"http://www.nabble.com/wsdl2xml-and-XML-Binding-td23608106.html

Hello 

I am running into an isse with XML Binding. Here is what I am doing 

- Using CXF 2.1.3 and deploying it in tomcat 6.x 
- Define a simple wsdl (wsdl first approach) with one method (sayHi) which takes two string params and returns a cat-ed string. 
- Works fine using SOAP Binding (first two log entried below). 
- Used wsdl2xml tool to create a XML Port and XML Binding and invoke the sayHi method. 
- I see in XML message logging on tomcat call (sayHi) coming with two string param , however to the service method impl I see both the strings 
are passed as null (last two log-entry below). 

Are there any issues re. using wsdl2xml in this manner or something I am missing. 

regards 
-Vinod 

---------------------------------- 
INFO: Inbound Message 
---------------------------- 
Payload: <soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/"">< 
soap:Body><ns2:sayHi xmlns:ns2=""http://acme.com/test/""><arg1>argument1</arg1><ar 
g2>argument2</arg2></ns2:sayHi></soap:Body></soap:Envelope> 
-------------------------------------- 
TestPortTypeImpl::sayHi() is called arg1=argument1, arg2=argument2 
May 18, 2009 4:42:25 PM org.apache.cxf.interceptor.LoggingOutInterceptor$Logging 
Callback onClose 
INFO: Outbound Message 
--------------------------- 
Payload: <soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/"">< 
soap:Body><ns2:sayHiResponse xmlns:ns2=""http://acme.com/test/""><out>sayHi to : a 
rgument1 and argument2</out></ns2:sayHiResponse></soap:Body></soap:Envelope> 
-------------------------------------- 
INFO: Inbound Message 
---------------------------- 
Payload: <ns2:sayHi xmlns:ns2=""http://acme.com/test/""><arg1>argument1</arg1><arg 
2>argument2</arg2></ns2:sayHi> 
-------------------------------------- 
TestPortTypeXMLImpl::sayHi() is called arg1=null, arg2=null 
May 18, 2009 4:47:55 PM org.apache.cxf.interceptor.LoggingOutInterceptor$Logging 
Callback onClose 
INFO: Outbound Message 
--------------------------- 
Encoding: UTF-8 
Headers: {} 
Messages: 
Payload: <ns2:sayHiResponse xmlns:ns2=""http://acme.com/test/""><out>sayHi to : nu 
ll and null</out></ns2:sayHiResponse> 
-------------------------------------- 

Some more obervation: 

If I comment out the <xformat:body ...rootNode=""sayHi""> element from the XML binding generated by wsdl2xml as shown below, I see the parameters passed correctly to the service implementation and works as expected. 

<wsdl:bindingname=""testXMLBinding""type=""tns:testPortType""><xformat:binding/><wsdl:operationname=""sayHi""><wsdl:input><!-- xformat:body xmlns=""http://acme.com/test/"" rootNode=""sayHi"" / --></wsdl:input><wsdl:output><!-- xformat:body xmlns=""http://acme.com/test/"" rootNode=""sayHi"" / --></wsdl:output></wsdl:operation></wsdl:binding> 

Not sure what is right approach here .. 

-Vinod  

Re: wsdl2xml and XML Binding  by dkulp May 19, 2009; 01:24pm :: Rate this Message:    - Use ratings to moderate (?)

Reply | Reply to Author | Print | View Threaded | Show Only this Message 

That SHOULD be fine.   Can you : 

1) try with CXF 2.1.5 or 2.2.1.   This MAY be fixed already. 

2) If not, can you package up your sample and attach it to a JIRA bug report? 

Thanks! 
Dan 
 
- I tried using 2.1.5 and still observed the same issue. Test  Wsdl which has xml binding generated from WSDL2XML and client/server are pasted below.

WSDL 
_____
<?xml version=""1.0"" encoding=""UTF-8""?>
<wsdl:definitions name=""test"" targetNamespace=""http://acme.com/test/"" xmlns:http=""http://schemas.xmlsoap.org/wsdl/http/"" xmlns:wsdl=""http://schemas.xmlsoap.org/wsdl/"" xmlns:tns=""http://acme.com/test/"" xmlns:xformat=""http://cxf.apache.org/bindings/xformat"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns:soap=""http://schemas.xmlsoap.org/wsdl/soap/"">
  <wsdl:types>
<xsd:schema xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" targetNamespace=""http://acme.com/test/"">
            <xsd:element name=""sayHi"">
            	<xsd:complexType>
            		<xsd:sequence>

            			<xsd:element name=""arg1"" type=""xsd:string""/>
            			<xsd:element name=""arg2"" type=""xsd:string"">
            			</xsd:element>
            		</xsd:sequence>
            	</xsd:complexType>
            </xsd:element>
            <xsd:element name=""sayHiResponse"">
            	<xsd:complexType>
            		<xsd:sequence>

            			<xsd:element name=""out"" type=""xsd:string""/>
            		</xsd:sequence>
            	</xsd:complexType>
            </xsd:element>
        </xsd:schema>
  </wsdl:types>
  <wsdl:message name=""sayHiRequest"">
    <wsdl:part name=""in"" element=""tns:sayHi"">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name=""sayHiResponse"">
    <wsdl:part name=""out"" element=""tns:sayHiResponse"">
    </wsdl:part>
  </wsdl:message>
  <wsdl:portType name=""testPortType"">
    <wsdl:operation name=""sayHi"">
      <wsdl:input message=""tns:sayHiRequest"">
    </wsdl:input>
      <wsdl:output message=""tns:sayHiResponse"">
    </wsdl:output>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name=""testSOAP"" type=""tns:testPortType"">
    <soap:binding style=""document"" transport=""http://schemas.xmlsoap.org/soap/http""/>
    <wsdl:operation name=""sayHi"">
      <soap:operation soapAction=""http://acme.com/test/sayHi""/>
      <wsdl:input>
        <soap:body use=""literal""/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use=""literal""/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:binding name=""testXMLBinding"" type=""tns:testPortType"">
    <xformat:binding />
    <wsdl:operation name=""sayHi"">
      <wsdl:input>
      <xformat:body xmlns=""http://acme.com/test/"" rootNode=""sayHi"" />
      </wsdl:input>
      <wsdl:output>
      <xformat:body xmlns=""http://acme.com/test/"" rootNode=""sayHi"" />
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name=""test"">
    <wsdl:port name=""testXMLPort"" binding=""tns:testXMLBinding"">
      <http:address location=""http://localhost:8080/test/services/testxml"" />
    </wsdl:port>
    <wsdl:port name=""testSOAP"" binding=""tns:testSOAP"">
      <soap:address location=""http://localhost:8080/test/services/test""/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>

Service 
______
TestPortTypeImpl.java and TestPortTypeXMLImpl.java are below

package com.acme.server;

import javax.jws.WebService;

import com.acme.test.TestPortType;

/**
 *
 */
@WebService(targetNamespace = ""http://acme.com/test/"",
	    portName=""testXMLPort"",
	    serviceName=""test"",
	    endpointInterface=""com.acme.test.TestPortType"")

public class TestPortTypeXMLImpl implements TestPortType {

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.acme.test.TestPortType#sayHi(java.lang.String, java.lang.String)
	 */
	public String sayHi(String arg1, String arg2) {
		System.out.println(""TestPortTypeXMLImpl::sayHi() is called arg1=""
				+ arg1 + "", arg2="" + arg2);
		return ""sayHi to : "" + arg1 + "" and "" + arg2;
	}
}

package com.acme.server;

import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;

import com.acme.test.ObjectFactory;
import com.acme.test.TestPortType;

/**
 * Some test program
 */
@WebService(targetNamespace = ""http://acme.com/test/"",
		    portName=""testSOAP"",
		    serviceName=""test"",
		    endpointInterface=""com.acme.test.TestPortType"")
@XmlSeeAlso({ObjectFactory.class})

public class TestPortTypeImpl implements TestPortType {

	/* (non-Javadoc)
	 * @see com.acme.test.TestPortType#sayHi(java.lang.String, java.lang.String)
	 */
	public String sayHi(String arg1, String arg2) {
		System.out.println(""TestPortTypeImpl::sayHi() is called arg1="" + arg1 + 
				           "", arg2="" + arg2 );
		return ""sayHi to : "" + arg1 + "" and ""  + arg2;
	}
}


Client Test Program
________________
package com.acme.client;

import java.net.MalformedURLException;
import java.net.URL;

import javax.xml.namespace.QName;

import com.acme.test.Test;
import com.acme.test.TestPortType;

/**
 *
 */
public class TestClient {

    public final static URL WSDL_LOCATION;
    public final static QName SERVICE = new QName(""http://acme.com/test/"", ""test"");
    public final static QName TestSoapPort = new QName(""http://acme.com/test/"", ""TestSOAP"");
    public final static QName TestXMLPort = new QName(""http://acme.com/test/"", ""TestXMLPort"");
	
	Test m_testService = null;	
	TestPortType m_portType = null;
    
    static {
        URL url = null;
        try {
            url = new URL(""http://localhost:8080/acws/services/test?wsdl"");
        } catch (MalformedURLException e) {
            System.err.println(""Can not initialize the default wsdl from file:/C:/acme/nbi/cpsm/build/../nbi/wsdl/acws.wsdl"");
            // e.printStackTrace();
        }
        WSDL_LOCATION = url;
    }
	
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		TestClient client = new TestClient();
		client.initializeService(args);
		client.testHi(args);
	}
	
	private void testHi(String[] args) {
		try {
		   String result = m_portType.sayHi(""argument1"", ""argument2"");
		   System.out.println(""Called sayHi() and got ="" + result);
		}catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void initializeService(String [] args) {
		
		try {
			m_testService = new Test(WSDL_LOCATION, SERVICE);
			m_portType = m_testService.getTestXMLPort();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}

Please refer to the thread on this -> http://www.nabble.com/wsdl2xml-and-XML-Binding-td23608106.html",Test Service is deployed in Tomcat (6.0.14) Using Java build (1.6.0_06-b020) ,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-05-21 18:27:27.075,,,no_permission,,,,,,,,,,,,,113666,,,Thu May 21 18:27:27 UTC 2009,,,,,,0|i0v1dz:,179198,,,,,,,,"21/May/09 18:27;dkulp;
It's due to a mismatch in the writing and reading algorithms in the XML binding.

The writing side ignores the rootNode attibute if there is a single part in the message.   The reading side, however, consumes the first element if rootNode attribute is set.   Thus, JAXB does't get the right data.     I've updated the reading side to match what the writing side does.   ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect libraries listed on the User's Guide in section detailing how to setup a simple JAX-WS service,CXF-2226,12425854,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,dkulp,juldebtkm,juldebtkm,19/May/09 19:26,12/Oct/09 20:45,14/Mar/19 02:29,03/Oct/09 03:04,2.2.1,,,,,,,,,,,,,,2.2.4,,,,Documentation,,,,,,0,,,,"This page lists the following libraries that you must have:

commons-logging-1.1.jar
geronimo-activation_1.1_spec-1.0-M1.jar (or Sun's Activation jar)
geronimo-annotation_1.0_spec-1.1.jar (JSR 250)
geronimo-javamail_1.4_spec-1.0-M1.jar (or Sun's JavaMail jar)
geronimo-servlet_2.5_spec-1.1-M1.jar (or Sun's Servlet jar)
geronimo-ws-metadata_2.0_spec-1.1.1.jar (JSR 181)
jaxb-api-2.1.jar
jaxb-impl-2.1.6.jar
jaxws-api-2.1.jar
jetty-6.1.5.jar
jetty-util-6.1.5.jar
neethi-2.0.jar
saaj-api-1.3.jar
saaj-impl-1.3.jar
stax-api-1.0.1.jar
wsdl4j-1.6.1.jar
wstx-asl-3.2.1.jar
XmlSchema-1.2.jar
xml-resolver-1.2.jar

Some of these libraries are not in the lib directory for version 2.2.1.  I believe the documentation just needs to be updated.



",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113664,,,2009-05-19 19:26:06.0,,,,,,0|i16vt3:,248285,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Parameter mapping by schema type fails to come up with an appropriate Aegis type and throws,CXF-2224,12425768,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,bmargulies,bmargulies,bmargulies,18/May/09 23:02,04/Jun/09 21:32,14/Mar/19 02:29,18/May/09 23:06,2.0.11,2.1.5,2.2,2.2.1,,,,,,,,,,,2.2.2,,,,Aegis Databinding,,,,,,0,,,,"If you make a <parameter/> mapping for a method, and specify the typeName, and don't specify the type itself, Aegis fails. The parallel case for properties is handled inside of BeanType, but BeanType is not in the act for parameters. A tiny bit of duplication in AbstractTypeCreator is called for.
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113662,,,Mon May 18 23:06:51 UTC 2009,,,,,,0|i0v1uv:,179274,,,,,,,,18/May/09 23:06;bmargulies;Repair submitted to 2.2.2.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Proxy authentication failure with SSL tunneling,CXF-2223,12425728,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,mchauvin,mchauvin,18/May/09 14:30,29/Oct/13 09:55,14/Mar/19 02:29,15/Dec/09 03:16,2.1.2,,,,,,,,,,,,,,2.1.9,2.2.6,,,Transports,,,,,,1,,,,"We are facing the very same issue as the one described at the following URL:

http://www.mail-archive.com/users@cxf.apache.org/msg06422.html

Https transport appears not to send proxy-authorization within the CONNECT operation as it should.

Olivier Billard's workaround works just fine but requires java programming, and makes it impossible to configure proxy related properties in a simple manner.",,,,,,,,,,,,,,,,,26/May/09 14:01;mchauvin;cxf.xml;https://issues.apache.org/jira/secure/attachment/12409039/cxf.xml,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2009-05-18 20:06:52.809,,,no_permission,,Unknown,,,,,,,,,,,113661,,,Tue Oct 29 09:55:21 UTC 2013,,,,,,0|i14e9z:,233776,,,,,,,,"18/May/09 20:06;dkulp;
Could someone post a sample (maybe modify the wsdl_first_https demo or something) that shows this.   Also, is this still a problem with CXF 2.1.5?  Many changes have gone in between 2.1.2 and 2.1.5.

","26/May/09 13:55;mchauvin;The problem is still there with the 2.1.5 release.

I started from the very simple wsdl_first sample to show this issue. You will find attached the cxf.xml configuration that I updated to get the following exception:
     [java] Invoking sayHi...
     [java] Exception in thread ""Main Thread"" javax.xml.ws.soap.SOAPFaultException: Could not send Message.
     [java] 	at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:145)
     [java] 	at $Proxy41.sayHi(Unknown Source)
     [java] 	at demo.hw.client.Client.main(Client.java:61)
     [java] Caused by: org.apache.cxf.interceptor.Fault: Could not send Message.
     [java] 	at org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor.handleMessage(MessageSenderInterceptor.java:64)
     [java] 	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:226)
     [java] 	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:469)
     [java] 	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:299)
     [java] 	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:251)
     [java] 	at org.apache.cxf.frontend.ClientProxy.invokeSync(ClientProxy.java:73)
     [java] 	at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:124)
     [java] 	... 2 more
     [java] Caused by: java.io.IOException: Unable to tunnel through proxy. Proxy returns ""HTTP/1.0 407 Proxy Authentication Required""
     [java] 	at sun.net.www.protocol.http.HttpURLConnection.doTunneling(HttpURLConnection.java:1350)
     [java] 	at sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect(AbstractDelegateHttpsURLConnection.java:164)
     [java] 	at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:857)
     [java] 	at sun.net.www.protocol.https.HttpsURLConnectionImpl.getOutputStream(HttpsURLConnectionImpl.java:230)
     [java] 	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleHeadersTrustCaching(HTTPConduit.java:1904)
     [java] 	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.onFirstWrite(HTTPConduit.java:1859)
     [java] 	at org.apache.cxf.io.AbstractWrappedOutputStream.write(AbstractWrappedOutputStream.java:42)
     [java] 	at org.apache.cxf.io.AbstractThresholdOutputStream.write(AbstractThresholdOutputStream.java:69)
     [java] 	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.close(HTTPConduit.java:1922)
     [java] 	at org.apache.cxf.transport.AbstractConduit.close(AbstractConduit.java:66)
     [java] 	at org.apache.cxf.transport.http.HTTPConduit.close(HTTPConduit.java:626)
     [java] 	at org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor.handleMessage(MessageSenderInterceptor.java:62)
     [java] 	... 8 more
     [java] Java Result: 1

As the proxy fails client authentication, it is not even necessary to deploy the target server with an SSL listener. That's the reason why I started from the basic sample instead of the https one.
The wsdl_first client works fine with this configuration (assuming the proxy configuration is correct of course) using http, but setting the protocol to 'https' within the wsdl leads to this issue.

Let me know if any additional information is required.

Mathieu.",26/May/09 14:01;mchauvin;Configuration file taken from the wsdl_first sample to illustrate how to reproduce this issue (in conjunction with the https protocol with the wsdl's endpoint).,"15/Dec/09 03:16;dkulp;
I believe this is now resolved by setting a default Authenticator for the VM.   It definitely sucks though.   I also have to real way to test this so if someone could verify, that would be great.","29/Oct/13 09:55;mcpromatis;I think this issue isn't really resolved because I‘m trying to use the cxf proxy authentication. Hereby I’ve the following
problem: The proxy authentication over HTTP works fine, but the proxy authentication over HTTPS doesn’t work.

I already described my problem here: http://mail-archives.apache.org/mod_mbox/cxf-users/201310.mbox/%3CCAPHrdg7-nH0p%3D3mHn_gk0O9Fe%3DZxDq7SSnUv%3DTAX_qOcipFiXA%40mail.gmail.com%3E
",,,,,,,,,,,,,,,,,,,,,,,,,,
Policy attached to an input operation in a WSDL does not get copied to the Stub operation by WSDL2Java,CXF-2222,12425665,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,mrthompson@lbl.gov,mrthompson@lbl.gov,17/May/09 00:30,04/Jun/09 21:32,14/Mar/19 02:29,18/May/09 15:23,2.2.1,,,,,,,,,,,,,,2.2.2,,,,WS-* Components,,,,,,0,,,,"   I'm new to cxf and trying to get a signed message passed between a
> client and server. I started from an existing ws-policy which works with
> axis2/rampart, used the cxf version of wsdl2java to generate all the
> code. Then merged a few things from
> apache-cxf-2.2.1/samples/ws_security/interopfest/wssec10.
> The message appears to be formatted and signed correctly by the client,
> but the server gets a null pointer exception in
> org.apache.ws.security.message.token.X509Security.getX509Certificate
> (X509Security.java:92) when processing the incoming message. I looked at
> the code and it has found the certificate and is faulting because crypt
> is null.","Maven, cxf 2.2.1, JDK 1.5, MacOS 10.5.6",,,,,,,,,,,,,,,,18/May/09 00:42;mrthompson@lbl.gov;authN.tar.gz;https://issues.apache.org/jira/secure/attachment/12408347/authN.tar.gz,17/May/09 00:32;mrthompson@lbl.gov;authn.error.html;https://issues.apache.org/jira/secure/attachment/12408330/authn.error.html,,,,,2.0,,,,,,,,,,,,,,,,,,,,2009-05-19 00:54:36.067,,,no_permission,,,,,,,,,,,,,113660,,,Tue May 19 00:54:36 UTC 2009,,,,,,0|i0v1sv:,179265,,,,,,,,17/May/09 00:32;mrthompson@lbl.gov;WSDL and stack trace for the error,"18/May/09 00:42;mrthompson@lbl.gov;Here's the code for the test server/client. It was generated by wsdl2java and the client, server and impl parts based on the wssec10 sample.","18/May/09 22:11;mrthompson@lbl.gov;Hi Dan,
    thanks for the quick response. It looks like the latest snapshot was 
Sunday morning and thus missing your fix. How frequently are the 
snapshots generated? If its going to be more than a few days, I will try 
to do a checkout from the repository to use for my project. Otherwise I 
will wait for the next snapshot.

Mary



","19/May/09 00:54;dkulp;
SNAPSHOTS are supposedly auto deployed every night providing there was a change committed since the previous builds.",,,,,,,,,,,,,,,,,,,,,,,,,,,
Missing Soap Headers,CXF-2221,12425617,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,a.reiter,a.reiter,15/May/09 19:47,04/Jun/09 21:32,14/Mar/19 02:29,18/May/09 13:53,2.1.2,2.1.3,2.1.4,2.1.5,2.2,2.2.1,,,,,,,,,2.1.6,2.2.2,,,Tooling,,,,,,0,,,,"Hello everybody,

I have a bit trouble with the Soap Headers, they are just not generated...

this is my WSDL: https://api.webtrends.com/Services/AnalyticsDataService.asmx?WSDL
I generate the client code with ""wsdl2java ... -exsh true ...""

my client code:


######################################################################################
import javax.xml.ws.Holder;

import org.apache.cxf.interceptor.LoggingInInterceptor;
import org.apache.cxf.interceptor.LoggingOutInterceptor;
import org.apache.cxf.jaxws.JaxWsProxyFactoryBean;

import com.webtrends.ws._1.AnalyticsDataService;
import com.webtrends.ws._1.WTCredentialsHeader;
import com.webtrends.ws._1.WTSessionHeader;

public class Main {

    /**
     * @param args
     */
    public static void main(String[] args) {
        JaxWsProxyFactoryBean factory = new JaxWsProxyFactoryBean();
        factory.getInInterceptors().add(new LoggingInInterceptor());
        factory.getOutInterceptors().add(new LoggingOutInterceptor());
        factory.setServiceClass(AnalyticsDataService.class);
        factory.setAddress(""https://api.webtrends.com/Services/AnalyticsDataService.asmx"");
        AnalyticsDataService ads = (AnalyticsDataService) factory.create();

        WTCredentialsHeader credentials = new WTCredentialsHeader();
        credentials.setAccountName(""foo"");
        credentials.setUsername(""bar"");
        credentials.setPassword(""baz"");
        Holder<WTCredentialsHeader> credentialsHolder = new Holder<WTCredentialsHeader>(credentials);
        Holder<WTSessionHeader> sessionHolder = new Holder<WTSessionHeader>(new WTSessionHeader());

        ads.checkAvailability(credentialsHolder, sessionHolder);

    }

}
######################################################################################





15.05.2009 08:01:43 org.apache.cxf.interceptor.LoggingOutInterceptor$LoggingCallback onClose
INFO: Outbound Message
---------------------------
Encoding: UTF-8
Headers: {SOAPAction=[""http://www.webtrends.com/WS/1.0/CheckAvailability""], Accept=[*]}
Messages: 
Payload: <soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/""><soap:Body><CheckAvailability xmlns=""http://www.webtrends.com/WS/1.0""/></soap:Body></soap:Envelope>
--------------------------------------
15.05.2009 08:01:45 org.apache.cxf.interceptor.LoggingInInterceptor logging
INFO: Inbound Message
----------------------------
Encoding: UTF-8
Headers: {content-type=[text/xml; charset=utf-8], X-AspNet-Version=[2.0.50727], Date=[Fri, 15 May 2009 06:01:45 GMT], Content-Length=[590], X-Powered-By=[ASP.NET], Server=[Microsoft-IIS/6.0], Cache-Control=[private]}
Messages: 
Message:

Payload: ﻿<?xml version=""1.0"" encoding=""utf-8""?><soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema""><soap:Body><soap:Fault><faultcode>soap:Client</faultcode><faultstring>Authentication failed.</faultstring><faultactor>http://api.webtrends.com/Services/AnalyticsDataService.asmx</faultactor><detail><Reason xmlns=""http://www.webtrends.com/schemas/2006/01"">Missing WTCredentialsHeader and WTSessionHeader in SOAP message.</Reason></detail></soap:Fault></soap:Body></soap:Envelope>

--------------------------------------

Exception in thread ""main"" javax.xml.ws.soap.SOAPFaultException: Authentication failed.
	at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:199)
	at $Proxy59.checkAvailability(Unknown Source)
	at rbmh.webplayer.actions.Main.main(Main.java:33)
Caused by: org.apache.cxf.binding.soap.SoapFault: Authentication failed.
	at org.apache.cxf.binding.soap.interceptor.Soap11FaultInInterceptor.handleMessage(Soap11FaultInInterceptor.java:70)
	at org.apache.cxf.binding.soap.interceptor.Soap11FaultInInterceptor.handleMessage(Soap11FaultInInterceptor.java:35)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:220)
	at org.apache.cxf.interceptor.AbstractFaultChainInitiatorObserver.onMessage(AbstractFaultChainInitiatorObserver.java:96)
	at org.apache.cxf.binding.soap.interceptor.CheckFaultInterceptor.handleMessage(CheckFaultInterceptor.java:69)
	at org.apache.cxf.binding.soap.interceptor.CheckFaultInterceptor.handleMessage(CheckFaultInterceptor.java:34)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:220)
	at org.apache.cxf.endpoint.ClientImpl.onMessage(ClientImpl.java:449)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleResponse(HTTPConduit.java:2029)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.close(HTTPConduit.java:1865)
	at org.apache.cxf.io.CacheAndWriteOutputStream.postClose(CacheAndWriteOutputStream.java:47)
	at org.apache.cxf.io.CachedOutputStream.close(CachedOutputStream.java:170)
	at org.apache.cxf.transport.AbstractConduit.close(AbstractConduit.java:66)
	at org.apache.cxf.transport.http.HTTPConduit.close(HTTPConduit.java:593)
	at org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor.handleMessage(MessageSenderInterceptor.java:62)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:220)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:296)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:242)
	at org.apache.cxf.frontend.ClientProxy.invokeSync(ClientProxy.java:73)
	at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:178)
	... 2 more       

######################################################################################

like u can see. there is no Soap Header in the Outbound Message...
and now the very funny thing, i'm using maven, so it's very simple to switch to another version of CXF
the stuff is working perfectly with the older cxf versions: 2.1, 2.1.1
but if i use the newer versions: 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.2, 2.2.1, i get the error above

how can that be? what is wrong

thanks in dvance

regards
andre","java -version
java version ""1.6.0_12""
Java(TM) SE Runtime Environment (build 1.6.0_12-b04)
Java HotSpot(TM) 64-Bit Server VM (build 11.2-b01, mixed mode)

apache-tomcat 6.0.18",,,,,,,,,,,,,,,,15/May/09 19:55;a.reiter;cxf_issue2221.tar.gz;https://issues.apache.org/jira/secure/attachment/12408273/cxf_issue2221.tar.gz,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2009-05-15 20:20:36.21,,,no_permission,,,,,,,,,,,,,113659,,,Fri May 15 20:37:14 UTC 2009,,,,,,0|i0v1a7:,179181,,,,,,,,"15/May/09 19:55;a.reiter;Here is the client code Main class and created client side stubs with ""wsdl2java ... -exsh true ..."" ","15/May/09 20:20;dkulp;

This is actually a wsdl2java tooling issue.   The method sig has the headers marked as ""OUT"" and not ""INOUT"".

If you modify the generated code to change them to INOUT, the headers do appear in the outgoing soap message.     I'm digging into the code generator now, but thought I'd post that information.


","15/May/09 20:37;a.reiter;Hi Daniel,

absolutely correct!
after modifying generated code and set the   @WebParam(mode = WebParam.Mode.INOUT...
it works perfectly

thanks a lot! waiting for fix for wsdl2java

BTW: like I wrote above, the versions 2.1 and 2.1.1 do work properly, INOUT mode is generated, but since the version 2.1.2 there is a bug
just FYI, may be it helps to find the reason...",,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Heavily reused ""default"" Work Queue Problem",CXF-2220,12425473,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,opalka,opalka,14/May/09 15:36,04/Jun/09 21:32,14/Mar/19 02:29,18/May/09 13:37,2.2.1,,,,,,,,,,,,,,2.1.6,2.2.2,,,,,,,,,0,,,,"Hi CXF Team,

  We're fighting with threading+classloading related issues when testing JBossWS-CXF integration.
The problematic part is WorkQueueManagerImpl.getAutomaticWorkQueue() method that
is reused in the following three places in CXF code base.

[/home/opalka][/home/opalka/THIRDPARTY/CXF/SVN/tags/cxf-2.2.1]>grep -r getAutomaticWorkQueue * | grep -v ""\.svn"" | grep -v Test | grep -v workqueue
rt/core/src/main/java/org/apache/cxf/interceptor/OneWayProcessorInterceptor.java:                .getAutomaticWorkQueue().execute(new Runnable() {
rt/transports/http/src/main/java/org/apache/cxf/transport/http/HTTPConduit.java:                    queue = mgr.getAutomaticWorkQueue();
rt/ws/addr/src/main/java/org/apache/cxf/ws/addressing/ContextUtils.java:                           :  workQueueManager.getAutomaticWorkQueue();

This method constructs ""default"" worker threads pool on first request and this thread pool is 
heavily reused by CXF for other applications. We see the following problem on our server side:

When this ""default"" worker threads pool gets constructed all its worker threads have associated
classloader of the calling thread (in our case calling thread has associated web application classloader).
This is how Java threads are constructed (they inherit the parent thread classloader).
This thread pool is heavily reused by CXF for other applications.
The problem will appear when we undeploy the web application (the one that worker threads have associated
classloader with). After undeployment of that archive all worker threads will throw ClassNotFoundException when passed
jobs will try to do something with the classloader. Here's the sample stack trace:

2009-05-12 09:30:14,923 INFO  [org.apache.cxf.phase.PhaseInterceptorChain:70] (pool-13-thread-2) Interceptor has thrown exception, unwinding now
org.apache.cxf.binding.soap.SoapFault: Problems creating SAAJ object model
	at org.apache.cxf.binding.soap.saaj.SAAJInInterceptor.handleMessage(SAAJInInterceptor.java:165)
	at org.apache.cxf.binding.soap.saaj.SAAJInInterceptor.handleMessage(SAAJInInterceptor.java:67)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
	at org.apache.cxf.endpoint.ClientImpl.onMessage(ClientImpl.java:641)
	at org.apache.cxf.endpoint.ClientImpl$1$1.run(ClientImpl.java:722)
	at org.apache.cxf.workqueue.SynchronousExecutor.execute(SynchronousExecutor.java:37)
	at org.apache.cxf.endpoint.ClientImpl$1.onMessage(ClientImpl.java:720)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleResponseInternal(HTTPConduit.java:2134)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream$1.run(HTTPConduit.java:2018)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675)
	at java.lang.Thread.run(Thread.java:595)
Caused by: javax.xml.soap.SOAPException: Unable to create message factory for SOAP: Unable to create SAAJ meta-factoryProvider com.sun.xml.messaging.saaj.soap.SAAJMetaFactoryImpl could not be instantiated: java.lang.IllegalStateException: BaseClassLoader@298b744f{vfszip:/opt/svn/jbossas/tags/JBoss_5_0_1_GA/build/output/jboss-5.0.1.GA/server/cts/tmp/jsr88/WSAsyncHandler_wsservlet_vehicle.ear/WSAsyncHandler_wsservlet_vehicle_web.war/} classLoader is not connected to a domain (probably undeployed?) for class com.sun.xml.messaging.saaj.soap.SAAJMetaFactoryImpl
	at javax.xml.soap.MessageFactory.newInstance(Unknown Source)
	at org.apache.cxf.binding.soap.saaj.SAAJInInterceptor.getFactory(SAAJInInterceptor.java:84)
	at org.apache.cxf.binding.soap.saaj.SAAJInInterceptor.handleMessage(SAAJInInterceptor.java:96)
	... 11 more

To prevent these kinds of problems I had to implement the patches to don't reuse ""default"" worker threads pool.
See attached HttpConduit.java patch how to achieve that.

Could you apply the patch for all three CXF souce files where ""default"" worker threads pool is reused?

The solution is to use e.g. Executors.newSingleThreadExecutor() instead of WorkQueueManagerImpl.getAutomaticWorkQueue() method.

Thanks,

JBossWS Team

PS: BTW, it took many hours of heavy debugging to identify this issue :(",,,,,,,,,,,,,,,,,14/May/09 15:40;opalka;HTTPConduit.diff;https://issues.apache.org/jira/secure/attachment/12408143/HTTPConduit.diff,14/May/09 17:18;dkulp;cxf-2220.patch;https://issues.apache.org/jira/secure/attachment/12408148/cxf-2220.patch,,,,,2.0,,,,,,,,,,,,,,,,,,,,2009-05-14 17:18:57.986,,,no_permission,,Moderate,,,,,,,,,,,113658,,,Mon May 18 12:47:18 UTC 2009,,,,,,0|i143iv:,232034,,,,,,,,"14/May/09 17:18;dkulp;
I really don't think that switching to the Executors.newSingleThreadExecutor() is a good idea.   It completely defeats the purpose of having the work queue.    I really think we SHOULD be able to fix this in the AutomaticWorkQueueImpl.  

I've attached a patch (I'll probably commit to 2.2.x if tests pass with it) that does a bunch of modifications to the AWQI:

1) Made it create it's own ThreadGroup - it tries to traverse up the parents of the current thread group to find the highest parent that it can use.   Thus, the resulting threads should be as close to ""system"" threads instead of application threads as possible.

2) Creates a ThreadFactory around that group.   It will set the contextClassLoader for each thread it creates to the classloader of the AWQI, not any application context classloaders.   

3) For each ""Runnable"" submitted to Execute, it wrappers it with a new Runnable that will make sure the contextClassLoader on the thread used to run the runnable is the same as the calling thread.    That should allow us to avoid modifying every place that something is submitted to the AWQI to have it do the classloader copy.

I hope the combination of the three will fix the issue for you.   Could you give it a run through with your tests and let me know how it goes?

Thanks!
","18/May/09 12:47;opalka;I successfully verified the cxf2220.patch locally ;)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
org.apache.cxf.service.model.OperationInformation should overwrite hash(),CXF-2219,12425432,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,pd72,pd72,14/May/09 08:38,04/Jun/09 21:32,14/Mar/19 02:29,18/May/09 18:21,,,,,,,,,,,,,,,2.1.6,2.2.2,,,,,,,,,0,,,,org.apache.cxf.frontend.SimpleMethodDispatcher uses HashMaps for mapping OperationInfomation. Therefore the service hash() should be overwritten (and also equals()) that cxf has the control for finding the OperationInformation instead of Object.hash().,Found while using it with mule.,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,Moderate,,,,,,,,,,,113657,,,2009-05-14 08:38:00.0,,,,,,0|i14dwn:,233716,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CXF Import-Package version specifiers causes 'uses' conflict,CXF-2216,12425411,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,ceefour,ceefour,14/May/09 05:11,01/Feb/10 19:02,14/Mar/19 02:29,17/Dec/09 22:22,2.2.1,,,,,,,,,,,,,,2.2.6,,,,OSGi,,,,,,0,,,,"Equinox exports system packages as version=0.0.0. CXF bundle (and CXF bundle jaxrs) imports some of these packages as specific versions. This causes problems because:

   * Application Developer has to provide bundles for these packages instead of letting CXF use the packages that Equinox exports
   * When another bundle uses a system package specifying version=0.0.0, for example javax.mail;version=1.4.0 uses javax.activation;version=0.0.0, this causes ""uses"" conflict because CXF uses javax.mail;version=1.4.0 and javax.activation;version=1.0
   * My workaround was to patch the CXF jar manifest.mf to remove version specifiers in some packages it imports

I've identified 5 packages that need to have its version specifier left out in CXF's Import-Package in order for my app to work:

    * javax.activation
    * javax.annotation
    * javax.xml.stream
    * javax.xml.stream.events
    * javax.xml.stream.util

I'd vote for these import-packages to have no version specifier as well:

   * javax.resource
   * javax.resource.spi

Thanks.",Equinox,,,,,,,,,,,,,,,,07/Jul/09 13:34;gpinkham;config.ini;https://issues.apache.org/jira/secure/attachment/12412741/config.ini,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2009-07-07 13:34:00.424,,,no_permission,,,,,,,,,,,,,113654,,,Thu Dec 17 22:22:19 UTC 2009,,,,,,0|i1aebb:,268785,,,,,,,,07/Jul/09 13:34;gpinkham;Attached is my equinox configuration that allowed the CXF multi bundle to resolve (and work) under Equinox and the Servlet Bridge (running inside JBoss),"17/Dec/09 22:22;dkulp;
Stuck version ranges of [0.0,#) on the javax* stuff.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"can't use  non-English character parameter, soap encoding are not consistent",CXF-2215,12425198,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Critical,Fixed,,dingweilong,dingweilong,12/May/09 10:11,04/Jun/09 21:34,14/Mar/19 02:29,15/May/09 05:29,2.2,,,,,,,,,,,,,,Invalid,,,,,,,,,,0,,,,"I have use cxf 2.2 to publish a web service in tomcat 6, the only operation in which is 

public java.lang.String greetMe( String name);

when invoke with a parameter in Chinese value, i couldn't get my result. 
I use log interceptor to get the log below, you see the encoding and the charset is not consistent
I track the source code, and see the error when unmarshall invoked.
you can see the inbound message is parsed allright, but the outbound message is not, error  occurs.

I have test there're no problem when i use English parameter.

who can tell me the reason and fix the problem, thanks!


Inbound Message 
---------------------------- 
Encoding: GB2312 
Content-Type: text/xml; charset=UTF-8 
Headers: {cache-control=[no-cache], content-type=[text/xml; 
charset=UTF-8], connection=[keep-alive], host=[10.61.0.90:8080], 
content-length=[182], SOAPAction=[""""], user-agent=[Apache CXF 2.2], 
Accept=[*/*], pragma=[no-cache]} 
Payload: <soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/ 
envelope/""> <soap:Body> <ns2:greetMe xmlns:ns2=""http://cxf/""> <arg0>测试 </ 
arg0> </ns2:greetMe> </soap:Body> </soap:Envelope> 


Outbound Message 
--------------------------- 
Encoding: GB2312 
Content-Type: text/xml 
Headers: {} 
Payload: <soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/ 
envelope/""> <soap:Body> <soap:Fault> <faultcode>soap:Client </ 
faultcode> <faultstring>Unmarshalling Error: Unexpected close tag &lt;/ 
ns2:greetMe>; expected &lt;/arg0>.&#xd; 
at [row,col {unknown-source}]: [1,148] </faultstring> </soap:Fault> </ 
soap:Body> </soap:Envelope> 


and the exception is below:
Interceptor has thrown exception, unwinding now 
org.apache.cxf.interceptor.Fault: Unmarshalling Error: Unexpected 
close tag </ns2:greetMe>; expected </arg0>. 
at [row,col {unknown-source}]: [1,148] 
        at org.apache.cxf.jaxb.JAXBEncoderDecoder.unmarshall 
(JAXBEncoderDecoder.java:622) 
        at org.apache.cxf.jaxb.JAXBEncoderDecoder.unmarshall 
(JAXBEncoderDecoder.java:527) 
        at org.apache.cxf.jaxb.io.DataReaderImpl.read(DataReaderImpl.java: 
108) 
        at org.apache.cxf.interceptor.DocLiteralInInterceptor.handleMessage 
(DocLiteralInInterceptor.java:102) 
        at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept 
(PhaseInterceptorChain.java:236) 
        at org.apache.cxf.transport.ChainInitiationObserver.onMessage 
(ChainInitiationObserver.java:89) 
        at org.apache.cxf.transport.servlet.ServletDestination.invoke 
(ServletDestination.java:99) 
        at 
org.apache.cxf.transport.servlet.ServletController.invokeDestination 
(ServletController.java:337) 
        at org.apache.cxf.transport.servlet.ServletController.invoke 
(ServletController.java:182) 
        at org.apache.cxf.transport.servlet.AbstractCXFServlet.invoke 
(AbstractCXFServlet.java:163) 
        at org.apache.cxf.transport.servlet.AbstractCXFServlet.doPost 
(AbstractCXFServlet.java:141) 
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:710) 
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:803) 
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter 
(ApplicationFilterChain.java:269) 
        at org.apache.catalina.core.ApplicationFilterChain.doFilter 
(ApplicationFilterChain.java:188) 
        at org.apache.struts2.dispatcher.FilterDispatcher.doFilter 
(FilterDispatcher.java:413) 
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter 
(ApplicationFilterChain.java:215) 
        at org.apache.catalina.core.ApplicationFilterChain.doFilter 
(ApplicationFilterChain.java:188) 
        at org.apache.catalina.core.StandardWrapperValve.invoke 
(StandardWrapperValve.java:210) 
        at org.apache.catalina.core.StandardContextValve.invoke 
(StandardContextValve.java:174) 
        at org.apache.catalina.core.StandardHostValve.invoke 
(StandardHostValve.java:127) 
        at org.apache.catalina.valves.ErrorReportValve.invoke 
(ErrorReportValve.java:117) 
        at org.apache.catalina.core.StandardEngineValve.invoke 
(StandardEngineValve.java:108) 
        at org.apache.catalina.connector.CoyoteAdapter.service 
(CoyoteAdapter.java:151) 
        at org.apache.coyote.http11.Http11Processor.process 
(Http11Processor.java:870) 
        at org.apache.coyote.http11.Http11BaseProtocol 
$Http11ConnectionHandler.processConnection(Http11BaseProtocol.java: 
665) 
        at org.apache.tomcat.util.net.PoolTcpEndpoint.processSocket 
(PoolTcpEndpoint.java:528) 
        at org.apache.tomcat.util.net.LeaderFollowerWorkerThread.runIt 
(LeaderFollowerWorkerThread.java:81) 
        at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run 
(ThreadPool.java:685) 
        at java.lang.Thread.run(Thread.java:619) 
Caused by: javax.xml.bind.UnmarshalException 
- with linked exception: 
[com.ctc.wstx.exc.WstxParsingException: Unexpected close tag </ 
ns2:greetMe>; expected </arg0>. 
at [row,col {unknown-source}]: [1,148]] 
        at 
com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl.handleStreamExcep­tion 
(UnmarshallerImpl.java:426) 
        at 
com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl.unmarshal0 
(UnmarshallerImpl.java:362) 
        at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl.unmarshal 
(UnmarshallerImpl.java:339) 
        at org.apache.cxf.jaxb.JAXBEncoderDecoder.unmarshall 
(JAXBEncoderDecoder.java:607) 
        ... 29 more 
Caused by: com.ctc.wstx.exc.WstxParsingException: Unexpected close tag 
</ns2:greetMe>; expected </arg0>. 
at [row,col {unknown-source}]: [1,148] 
        at com.ctc.wstx.sr.StreamScanner.constructWfcException 
(StreamScanner.java:630) 
        at com.ctc.wstx.sr.StreamScanner.throwParseError(StreamScanner.java: 
461) 
        at com.ctc.wstx.sr.BasicStreamReader.reportWrongEndElem 
(BasicStreamReader.java:3256) 
        at com.ctc.wstx.sr.BasicStreamReader.readEndElem 
(BasicStreamReader.java:3198) 
        at com.ctc.wstx.sr.BasicStreamReader.nextFromTree 
(BasicStreamReader.java:2830) 
        at com.ctc.wstx.sr.BasicStreamReader.next(BasicStreamReader.java: 
1019) 
        at org.apache.cxf.staxutils.DepthXMLStreamReader.next 
(DepthXMLStreamReader.java:220) 
        at com.sun.xml.bind.v2.runtime.unmarshaller.StAXStreamConnector.bridge 
(StAXStreamConnector.java:225) 
        at 
com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl.unmarshal0 
(UnmarshallerImpl.java:360) 
        ... 31 more 

","windows xp, tomcat 6.0.18",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-05-12 13:05:39.655,,,no_permission,,Unknown,,,,,,,,,,,113653,,,Fri May 15 05:29:27 UTC 2009,,,,,,0|i0uyfr:,178720,,,,,,,,"12/May/09 13:05;bmargulies;CXF generally is tested with messages in UTF-8. How did you persuade the code to use GB2312? Are you running the entire JVM with the encoding set that way?

Can you post a runnable test case that will use GB2312 even when run on a default system configuration?
","12/May/09 20:20;dkulp;
Any chance you could use wireshark or similar to get the raw bytes off the socket?   

Like Benson, I'm very curious how this could occur.   The ""Content-Type""  is ""text/xml; charset=UTF-8"" and thus the encoding SHOULD be UTF-8.   I have no idea how it could be GB2312.   That may require you to dig in and debug the CXFServlet and figure out where that GB2312 is coming from.    
","13/May/09 01:56;dingweilong;I have track the source code, i haven't got why the ENCODING was changed.
I find when the MessageSenderEndingInterceptor ( a inner class in org.apache.cxf.transport.Conduit.MessageSenderInterceptor)is called the encoding is changed, who can tell me the rationale.

my test case is simple:
@Test
public void testGreetMe() throws Exception
{
	String name=""测试"";
	String r=greeter.greetMe(name);
	log.info(r);
}

server side is also simple:
public String greetMe(String user)
    {
    	return ""Hello ""+user;
    }

Where and how is the chance that encoding is changed?
thanks.
","13/May/09 02:10;bmargulies;I think you need to tell us about the larger context in which your code is launched. Is it a standalone? Inside an app server?

Add a line of code to inspect the system property 'file.encoding' and see if it's GB2312.

Again, what we need here is a complete test case that we can compile and run.
","13/May/09 02:38;dingweilong;The service is published by Tomcat 6 container

the web.xml is shown below:

<?xml version=""1.0"" encoding=""UTF-8""?>
<web-app version=""2.4"" xmlns=""http://java.sun.com/xml/ns/j2ee""
	xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
	xsi:schemaLocation=""http://java.sun.com/xml/ns/j2ee 
	http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"">

	<listener>
		<listener-class>
			org.springframework.web.context.ContextLoaderListener
		</listener-class>
	</listener>

	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			bean.xml,WEB-INF/classes/services.xml</param-value>
	</context-param>


	<servlet>
		<servlet-name>CXFServlet</servlet-name>
		<servlet-class>
			org.apache.cxf.transport.servlet.CXFServlet
		</servlet-class>
	</servlet>

	<servlet-mapping>
		<servlet-name>CXFServlet</servlet-name>
		<url-pattern>/services/*</url-pattern>
	</servlet-mapping>


</web-app>

the cxf config file service.xml in Spring is shown below:

<?xml version=""1.0"" encoding=""UTF-8""?>
<beans xmlns=""http://www.springframework.org/schema/beans""
	xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
	xmlns:jaxws=""http://cxf.apache.org/jaxws""
	xsi:schemaLocation=""
	http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://cxf.apache.org/jaxws 
	http://cxf.apache.org/schemas/jaxws.xsd"">

	<import resource=""classpath:META-INF/cxf/cxf.xml"" />
	<import resource=""classpath:META-INF/cxf/cxf-extension-soap.xml"" />
	<import resource=""classpath:META-INF/cxf/cxf-servlet.xml"" />
	<import resource=""classpath:META-INF/cxf/cxf-extension-http-binding.xml""/>
	

	<bean id=""CXFGreeter"" class=""cxf.CXFGreeter""></bean>

	<bean id=""LoggingInInterceptor""
		class=""org.apache.cxf.interceptor.LoggingInInterceptor"" />

	<bean id=""LoggingOutInterceptor""
		class=""org.apache.cxf.interceptor.LoggingOutInterceptor"" />

	<jaxws:endpoint id=""CXFGreeterService"" implementor=""#CXFGreeter""
		address=""/Greeter"">

		<jaxws:features>
			<bean class=""org.apache.cxf.feature.LoggingFeature"" />
		</jaxws:features>
	</jaxws:endpoint>

</beans>


by the way, i find the properties in Java environment , there're 2 properties related the encoding:
sun.jnu.encoding=GBK
file.encoding=GBK

but none of them is GB2312, I was so CONFUSED!
","13/May/09 10:39;bmargulies;Just to confirm: Are these settings live:

sun.jnu.encoding=GBK
file.encoding=GBK

?

We can set up a test case and see what happens≥
","14/May/09 02:31;dingweilong;Thanks for your reply.
I don't think the jvm encoding setting is working. Because of messages'  encoding is GB2312.
Where can the encoding be set? 
","14/May/09 11:07;bmargulies;Generally, it cannot be set. We don't know yet why it is GB2312 for you and not UTF-8. I've tried some experiments.

Again, I think a full test case is needed here. I need to know your full classpath and I need to be able to reproduce the problem.
","14/May/09 20:53;dkulp;

Any chance you could write a simple servlet that does:

System.out.println(httpReq.getCharacterEncoding());
System.out.println(httpReq.getContentType());

I'd like to know if the two match or not.   If not, that's the first thing we need to tackle/figure out.  ","14/May/09 21:01;bmargulies;In my view, you shouldn't be able to get CXF to use an encoding other than UTF-8 without some explicit configuration -- NOT file.encoding. I suppose the http content type of a request might be respected for the response, but I'm not entirely sold.
","15/May/09 02:02;dkulp;
I THINK I may have fixed this.   My ""gut feeling"" is that the version of tomcat you are using is returning the wrong value from request.getCharacterEncoding().    I've flipped the code over to using the charset found in the Content-Type header (which is what getCharacterEncoding should do, but in your case obviously isn't).   That SHOULD fix this as your initial logs shows that the charset=UTF-8 which is what should work for this case.","15/May/09 02:06;dkulp;
I just forced a new deploy of snapshots.   Thus, in an hour or so, a new snapshot should be deployed.   It would be great if you could try it and let me know if it works out for you.","15/May/09 05:29;dingweilong;I've resovled my problem.
In my Web project, there is Struts2 configuration in web.xml as a filter

<?xml version=""1.0"" encoding=""UTF-8""?>
<web-app version=""2.4"" xmlns=""http://java.sun.com/xml/ns/j2ee""
	xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
	xsi:schemaLocation=""http://java.sun.com/xml/ns/j2ee 
	http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"">

	<listener>
		<listener-class>
			org.springframework.web.context.ContextLoaderListener
		</listener-class>
	</listener>

	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			bean.xml,WEB-INF/classes/Struts2_context.xml,WEB-INF/classes/dwr_context.xml,WEB-INF/classes/services.xml</param-value>
	</context-param>


	
	<!-- Strurts2 配置 -->
	<filter>
		<filter-name>struts2</filter-name>
		<filter-class>
			org.apache.struts2.dispatcher.FilterDispatcher
		</filter-class>
	</filter>

	<filter-mapping>
		<filter-name>struts2</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>


	<!-- DWR 配置 -->
	<servlet>
		<servlet-name>dwr</servlet-name>
		<servlet-class>
			org.directwebremoting.spring.DwrSpringServlet
		</servlet-class>
		<init-param>
			<param-name>debug</param-name>
			<param-value>true</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>dwr</servlet-name>
		<url-pattern>/dwr/*</url-pattern>
	</servlet-mapping>
	
	
	<!-- CXF 配置 -->
	<servlet>
		<servlet-name>CXFServlet</servlet-name>
		<servlet-class>
			org.apache.cxf.transport.servlet.CXFServlet
		</servlet-class>
	</servlet>

	<servlet-mapping>
		<servlet-name>CXFServlet</servlet-name>
		<url-pattern>/services/*</url-pattern>
	</servlet-mapping>


</web-app>

and there is a struts.properties config file, where I write in one line as follow:
struts.i18n.encoding=GB2312
I refer some articles about about struts.i18n.encoding, 
find that this property set the CharacterEncoding of request AND response.

So my the problem is clear now. I should do some modifications about my struts config file. And I did, so it works!

By the way, if the struts.i18n.encoding property is not set in the struts.xml, the default encoding will be the JVM encoding( for example , GBK in my environement ), but only UTF-8 can work well in unmarshall process by CXF. I think we should be attentive when we use non-English character in parameters of CXF Web Service.


In addition, THANK you ALL for your paient answers in time. I appreciate so much all the work in this active community!

",,,,,,,,,,,,,,,,,,
Currently CXF always produces true/false value for for mustUnderstand attribute irrespective of the SOAP version on the wire,CXF-2213,12424976,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,marat,marat,08/May/09 22:28,04/Jun/09 21:32,14/Mar/19 02:29,09/May/09 01:06,2.1.5,,,,,,,,,,,,,,2.0.12,2.1.6,2.2.2,,Soap Binding,,,,,,0,,,,"Currently CXF will always produce true/false value for for mustUnderstand attribute irrespective of the SOAP version 

1. For SOAP 1.1 spec for mustUnderstand attribute the values should be 0/1 according to http://schemas.xmlsoap.org/soap/envelope/ and http://www.w3.org/TR/2000/NOTE-SOAP-20000508/#_Toc478383500

2. For SOAP 1.2 spec for mustUnderstand attribute the values should be true/false according to http://www.w3.org/2003/05/soap-envelope/ and http://www.w3.org/TR/2003/REC-soap12-part1-20030624/#soapmu ",,,,,,,,,,,,,,,,,08/May/09 22:39;marat;CXF-2213.patch.txt;https://issues.apache.org/jira/secure/attachment/12407673/CXF-2213.patch.txt,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2009-05-09 01:06:36.95,,,no_permission,,,,,,,,,,,,,113652,,,Sat May 09 01:06:36 UTC 2009,,,,,,0|i0v1tb:,179267,,,,,,,,08/May/09 22:39;marat;Patch is created against the root of http://svn.apache.org/repos/asf/cxf/branches/2.1.x-fixes,"09/May/09 01:06;dkulp;Patch applied
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"SAAJInInterceptor creates a SAAJ SOAPFault with only one ""Detail"" child",CXF-2212,12424938,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,coheigea,coheigea,08/May/09 14:51,04/Jun/09 21:32,14/Mar/19 02:29,08/May/09 17:11,2.1.5,2.2.1,,,,,,,,,,,,,2.0.12,2.1.6,2.2.2,,Soap Binding,,,,,,0,,,,"
The SAAJInInterceptor creates a SAAJ SOAPFault with only one ""Detail"" child. For example, if a SOAP Fault is received with:

<detail><errorcode>3</errorcode><errorstring>This is a fault detail error string</errorstring></detail>

The following code in SAAJInInterceptor will only add a detail element with a single child element to the SOAPFault object that is created:

soapFault.addDetail().appendChild(
    soapMessage.getSOAPPart().importNode(
        fault.getDetail().getFirstChild(), true));

And so the output will be:

<detail><errorcode>3</errorcode></detail>

This is clearly a bug, as the SOAP specs allow for multiple detail child elements. Even worse, it doesn't take into account the fact that fault.getDetail() could be of type e.g Node.TEXT, and it could just end up adding a newline character. ",,,,,,,,,,,,,,,,,08/May/09 14:52;coheigea;cxf_2212.patch;https://issues.apache.org/jira/secure/attachment/12407625/cxf_2212.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2009-05-08 17:11:49.453,,,no_permission,,,,,,,,,,,,,113651,,,Fri May 08 17:11:49 UTC 2009,,,,,,0|i0v1t3:,179266,,,,,,,,"08/May/09 14:52;coheigea;
Please apply the attached patch + test for this problem.","08/May/09 17:11;dkulp;
Patch semi-applied.   I changed it to not use the NodeList (NodeLists are not thread safe and have a huge performance penalty in most cases), but the test remained the same.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Investigate possible OOM exception caused by Continuations,CXF-2211,12424936,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,,sergey_beryozkin,sergey_beryozkin,08/May/09 14:28,04/Jun/09 21:32,14/Mar/19 02:29,12/May/09 11:23,2.0.11,2.1.5,2.2.1,,,,,,,,,,,,2.0.12,2.1.6,2.2.2,,Transports,,,,,,0,,,,"Apparently JMS and HTTP continuations leak, here is a comment from Freeman (see CXF 2002) :

But another issue I've found is the message leak problem with jms continuation, let's say the server side recieved 1001 message
then I saw the class instance like (get it by ""jmap -histo:live"" with jdk6)
           instance_count size
  51: 2002 128128 org.apache.cxf.message.MessageImpl
  66: 2004 96192 org.apache.cxf.phase.PhaseInterceptorChain
  67: 2002 96096 org.apache.cxf.transport.jms.JMSMessageHeadersType
  77: 1001 72072 org.apache.cxf.message.ExchangeImpl
  88: 1001 56056 org.apache.cxf.transport.jms.JMSOutputStream
  99: 1001 48048 org.apache.cxf.ws.addressing.AddressingPropertiesImpl
 100: 1001 48048 org.apache.cxf.transport.jms.continuations.JMSContinuation
 101: 2002 48048 org.apache.cxf.phase.PhaseInterceptorChain$PhaseInterceptorIterator
 113: 2088 33408 org.apache.cxf.common.util.SortedArraySet
 116: 1003 32096 org.apache.cxf.ws.addressing.EndpointReferenceType
 120: 1001 32032 org.apache.cxf.transport.jms.continuations.JMSContinuationProvider
 121: 2002 32032 org.apache.cxf.binding.soap.SoapMessage
 122: 1001 32032 org.apache.cxf.transport.jms.JMSDestination$BackChannelConduit
 124: 1001 32032 org.apache.cxf.binding.soap.interceptor.SoapOutInterceptor$SoapOutEndingInterceptor
 161: 1003 16048 org.apache.cxf.ws.addressing.AttributedURIType
 162: 1001 16016 org.apache.cxf.staxutils.DepthXMLStreamReader
 163: 1001 16016 org.apache.cxf.helpers.LoadingByteArrayOutputStream
 164: 1001 16016 org.apache.cxf.endpoint.PreexistingConduitSelector
never get released, so if sever run after long term, we will encouter the OOM exception.
I guess this might be another issue, so please create a new ticket if you feel it's necessary.
Btw, I also see same memory leak problem with cxf http continuation. ",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-05-12 03:09:38.381,,,no_permission,,,,,,,,,,,,,113650,,,Tue May 12 11:23:18 UTC 2009,,,,,,0|i1ads7:,268699,,,,,,,,"08/May/09 14:38;sergey_beryozkin;Hi Freeman

Please try the JMS continuations. I kind of reproduced the fact that a MessageImpl which is created in JMSDestination was not released, but with the minor chnages I applied to the trunk _ can see JMSContinuation, JMSContinuationProvider and MessageImpl being released

http://svn.apache.org/viewvc?rev=773009&view=rev
this one just fixes a typo in the previous one
http://svn.apache.org/viewvc?rev=773010&view=rev

Can you try it as well please ?

I suspect it's actually Jetty which leaks if a timeout is specified in suspend() - I'll have a look

","08/May/09 15:05;sergey_beryozkin;Freeman, please post the actual statistics you observed for HTTP continuations : I can't observe the leaks at the moment in HTTP case, thanks","12/May/09 03:09;ffang;Hi Segery,

The memory leak problem of JMSContinuation is still there with your change, same behavior by my test.

And for the HTTP continuations, below is the statistics, given server side received 10000 messages through http
jmap -histo:live 7595|grep cxf
  12:        220019        5280456  org.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder
  16:         40004        4160416  [Lorg.apache.cxf.phase.PhaseInterceptorChain$InterceptorHolder;
  32:         20000        1280000  org.apache.cxf.message.MessageImpl
  40:         20002         960096  org.apache.cxf.phase.PhaseInterceptorChain
  48:         10000         720000  org.apache.cxf.message.ExchangeImpl
  56:         10000         480000  org.apache.cxf.ws.addressing.AddressingPropertiesImpl
  57:         20000         480000  org.apache.cxf.phase.PhaseInterceptorChain$PhaseInterceptorIterator
  63:         20086         321376  org.apache.cxf.common.util.SortedArraySet
  64:         10002         320064  org.apache.cxf.ws.addressing.EndpointReferenceType
  66:         10000         320000  org.apache.cxf.transport.http.AbstractHTTPDestination$BackChannelConduit
  67:         10000         320000  org.apache.cxf.transport.http.AbstractHTTPDestination$WrappedOutputStream
  70:         10000         320000  org.apache.cxf.binding.soap.interceptor.SoapOutInterceptor$SoapOutEndingInterceptor
  72:         20000         320000  org.apache.cxf.binding.soap.SoapMessage
  84:         10002         160032  org.apache.cxf.ws.addressing.AttributedURIType
  85:         10000         160000  org.apache.cxf.endpoint.PreexistingConduitSelector
  86:         10000         160000  org.apache.cxf.transport.http_jetty.continuations.JettyContinuationProvider
  87:         10000         160000  org.apache.cxf.transport.http.AbstractHTTPDestination$1
  88:         10000         160000  org.apache.cxf.staxutils.DepthXMLStreamReader
  89:         10000         160000  org.apache.cxf.transport.http.HTTPSession


Thanks
Freeman","12/May/09 10:28;ffang;Hi Sergey,

I just found that there's also memory leak issue in smx-cxf code,  create [1] to track it.
By my test, your fix for CXF-2211 plus the fix for SMXCOMP-536 resolve the memory leak.

Thanks so much for your help!

[1]https://issues.apache.org/activemq/browse/SMXCOMP-536

Freeman",12/May/09 11:23;sergey_beryozkin;Resolved by Freeman & Sergey,,,,,,,,,,,,,,,,,,,,,,,,,,
Change Jsr250BeanPostProcessor bean defination in cxf.xml,CXF-2210,12424892,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Trivial,Fixed,dkulp,rjhazelwood,rjhazelwood,08/May/09 06:48,03/Aug/09 20:06,14/Mar/19 02:29,30/Jun/09 16:14,2.2.1,,,,,,,,,,,,,,2.0.12,2.1.6,2.2.3,,Configuration,,,,,,0,,,,"Can the Jsr250BeanPostProcessor def please be changed to :
<bean id=""org.apache.cxf.bus.spring.Jsr250BeanPostProcessor"" class=""org.apache.cxf.bus.spring.Jsr250BeanPostProcessor"">
     <property name=""bus"" ref=""cxf""/>
</bean>

Using @Resource with a PostBeanProcessor causes FactoryBeans to create their bean before all PostProcessorBeans are created.
E.g. JndiObjectFactoryBean, a lookup is forced because spring wants to find all the beans that match the Bus interface. ",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-05-08 17:50:44.854,,,no_permission,,,,,,,,,,,,,113649,,,Fri May 08 23:04:05 UTC 2009,,,,,,0|i14enr:,233838,,,,,,,,"08/May/09 17:50;dkulp;
Doing that kind of defeats the purpose of why it's using an @Resource to inject it.   Basically, the Jsr250BeanPostProcessor doesn't need the bus at all.   It just has it injected into itself to see if Spring is handling the JSR250 injection or if we need to.   If the bus is injected, the Jsr250BeanPostProcessor doesn't do anything as it knows Spring will handle it.   If it ISN'T injected, then it know Spring isn't handling it and we need to do it.    If we don't do this check, then both spring and the Jsr250BeanPostProcessor can end up processing them and resources get injected twice, @PostContruct stuff is called twice, etc....

Thus, what is needed is a way to detect if spring will do the processing.   If you have a way to detect that, then the Bus can be eliminated and your issue will go away.    Is there a way from the ApplicationContextAware to know if spring's handlers are registered?



","08/May/09 23:04;rjhazelwood;You can check if beanFactory.getBeanNamesForType(CommonAnnotationBeanPostProcessor.class, true, false) returns none empty array.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JMS Transport send MTOM message as a TextMessage. The attachment becomes wrong.,CXF-2207,12424746,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,njiang,liucong,liucong,06/May/09 19:53,04/Jun/09 21:32,14/Mar/19 02:29,30/May/09 09:24,2.0.11,2.1.5,2.2,2.2.1,2.2.2,,,,,,,,,,2.0.12,2.1.6,2.2.2,,Transports,,,,,,0,,,,"MTOM over SOAP/JMS doesn't work.
Thought the client send attachement information and the server get the attachment information, the attachment which is got by the server is not the same with the attachment information which is sent by the client.
I have compared the two messages. And I have used several kinds of attatchment for it.
    1) Text File. The result is right.
    2) WinRaR File. The file that is received by the server is larger than the file that is sent by the client.
    3) BitMap file. The size of attachment that is sent by the client is 163166, but the size of attachment that is received is 485947, which is 167% more than the original binary data.  (http://www.w3.org/TR/2008/WD-soapjms-20081121/#binding-message-body)
According to the analysis above, reason may be as follows:
    1) In the client, the attachment is encoded as base64 encoding, and transfer as TextMessage in JMS.
    2) The server doesn't know the encoding, and just get the text message.

The current implementation send all the messages as TextMessage because jmsConfig variable in JMSConduit is not initialized according to the MessageType of SOAPMessage.  jmsConfig is just configed in wsdl. If the wsdl doesn't have messagetype information, it goes wrong.","Windowns XP2, JDK1.6.0_11",,,,,,,,,,,CXF-1760,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-05-07 14:10:48.625,,,no_permission,,Unknown,,,,,,,,,,,113647,,,Tue May 19 07:20:36 UTC 2009,,,,,,0|i0v0tz:,179108,,,,,,,,"06/May/09 20:15;liucong;patches.rar is a serial of patches(git) for this bug.
The source code is the current cxf trunk.

How to fix:
1) If the MTOM is enabled, the JMS message type is ByteMessage.
2) In the client, if the MTOM is enabled, but the client config is not
configed to ""byte"", an configuration exception will be raised.
3) If the MTOM is not enabled, the JMS message type is the client
config's messageType.","07/May/09 14:10;njiang;
We can add a check point in the JMSConduit.sendExchange() to show some
warning or throw the exception if the user forget to add the messageType 
configuration or set the wrong messageType.

Add the link of the mail thread[1] which discusses this issue.

[1] http://www.nabble.com/How-to-determine-whether-a-soap-message-have-an-attachment-tt23381010.html

","19/May/09 07:20;njiang;LiuCong submitted a patch for it in CXF-1760. 
Please check my comments there.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Mapping jaxb types to ""default"" package causes exception",CXF-2206,12424740,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,dkulp,dkulp,06/May/09 18:40,04/Jun/09 21:32,14/Mar/19 02:29,18/May/09 18:21,2.2.1,,,,,,,,,,,,,,2.1.6,2.2.2,,,Tooling,,,,,,0,,,,"
If you use a JAXB customization like:
<jaxws:bindings wsdlLocation=""./proactive.wsdl""
    xmlns:xs=""http://www.w3.org/2001/XMLSchema""
xmlns:wsdl=""http://schemas.xmlsoap.org/wsdl/""
    xmlns:jaxws=""http://java.sun.com/xml/ns/jaxws""
xmlns:jaxb=""http://java.sun.com/xml/ns/jaxb"">
    <jaxws:package></jaxws:package>
</jaxws:bindings

To try and map to a default package, wsdl2java yields:
Caused by: java.lang.StringIndexOutOfBoundsException: String index out
of range: -1
        at java.lang.String.substring(String.java:1768)
        at org.apache.cxf.tools.wsdlto.databinding.jaxb.JAXBDataBinding.addedToClassCollector(JAXBDataBinding.java:488)
        at org.apache.cxf.tools.wsdlto.databinding.jaxb.JAXBDataBinding.addedEnumClassToCollector(JAXBDataBinding.java:477)
        at org.apache.cxf.tools.wsdlto.databinding.jaxb.JAXBDataBinding.initialize(JAXBDataBinding.java:333)
        at org.apache.cxf.tools.wsdlto.WSDLToJavaContainer.generateTypes(WSDLToJavaContainer.java:557)
        at org.apache.cxf.tools.wsdlto.WSDLToJavaContainer.processWsdl(WSDLToJavaContainer.java:208)
        at org.apache.cxf.tools.wsdlto.WSDLToJavaContainer.execute(WSDLToJavaContainer.java:127)
        at org.apache.cxf.tools.wsdlto.WSDLToJavaContainer.execute(WSDLToJavaContainer.java:252)
        ... 22 more",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113646,,,2009-05-06 18:40:44.0,,,,,,0|i0v0tr:,179107,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Aegis databinding always trims strings,CXF-2205,12424736,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,dkulp,dkulp,06/May/09 18:15,04/Jun/09 21:32,14/Mar/19 02:29,07/May/09 16:50,2.2.1,,,,,,,,,,,,,,2.0.12,2.1.6,2.2.2,,Aegis Databinding,,,,,,0,,,,"
A call to something like:
String s port.echoString(""   hello   "");
results in just the string ""hello"" being returned.    The Aegis databinding seems to be trimming everything.
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113645,,,2009-05-06 18:15:37.0,,,,,,0|i0v1of:,179245,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AttachmentSerializer content id incorrect,CXF-2203,12424656,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,cnelson,cnelson,05/May/09 23:37,04/Jun/09 21:32,14/Mar/19 02:29,07/May/09 16:54,2.2.1,,,,,,,,,,,,,,2.0.12,2.1.6,2.2.2,,Core,,,,,,0,,,,"In the writeHeaders method of AttachmentSerializer the attachment id is being incorrectly set. When the attachment id is substring'd it is removing the last 2 characters when it should only be removing the last character. This generates an attachment id that does not deserialize properly.

I have attached a patch that fixes this issue.",,,,,,,,,,,,,,,,,05/May/09 23:40;cnelson;AttachmentSerializer.java.patch;https://issues.apache.org/jira/secure/attachment/12407299/AttachmentSerializer.java.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113644,,,Tue May 05 23:40:28 UTC 2009,,,,,,0|i0sy5j:,167010,,,,,,,,05/May/09 23:40;cnelson;Patch to fix defect.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Deploying REST service on CXF Transport for OSGi,CXF-2202,12424601,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,sergey_beryozkin,jsbournival,jsbournival,05/May/09 13:16,12/Oct/09 20:45,14/Mar/19 02:29,06/Oct/09 19:36,2.2,,,,,,,,,,,,,,2.2.4,2.3,,,OSGi,,,,,,0,,,," have a serious issue that I want to discuss.   

I am developing rest services osgi bundles on fuse4/smx4 using the cxf-osgi transport.  JAX-RS impl is obviously CXF, which is fine.  But as I learned recently, I have to specify ""/cxf"" as part of my implementation @Path annotation, like this: 

<code> 
@Path(""/cxf/top10"") 
public class TopTenRestService { 
  // methods 
} 
</code> 

I find this somewhat strange because it exposes (shall I say binds) the underlying JAX-RS implementation to my service class, which is the complete opposite of what the JAX-RS spec should provide. 

Again, maybe I just don't get it.  Using it this way actually works, but there's something not right about how to specifiy the @Path. 

As a complement, here is my service configuration in my bundle' spring bean file:

<code> 
<import resource=""classpath:META-INF/cxf/cxf.xml"" /> 
<import resource=""classpath:META-INF/cxf/cxf-extension-http.xml"" /> 
<import resource=""classpath:META-INF/cxf/cxf-extension-jaxrs-binding.xml""/> 
<import resource=""classpath:META-INF/cxf/osgi/cxf-extension-osgi.xml"" /> 

<jaxrs:server address=""/top10""> 
        <jaxrs:serviceBeans> 
                <ref bean=""topTenRestService"" /> 
        </jaxrs:serviceBeans> 
</jaxrs:server> 

<bean id=""topTenRestService"" class=""com.company.project.topten.TopTenRestService""></bean> 
</code> ","ServiceMix
  ServiceMix home             /opt/servers/fuse-esb/fuse-esb-4.1.0.0
  ServiceMix base             /opt/servers/fuse-esb/fuse-esb-4.1.0.0
  ServiceMix Kernel version   1.1.0.0-fuse
  ServiceMix version          4.1.0.0-fuse

JVM
  Java Virtual Machine        Java HotSpot(TM) 64-Bit Server VM version 1.6.0_07-b06-57
  Vendor                      Apple Inc.
  Uptime                      4 days 45 hours
  Total compile time          22.997 seconds
Threads
  Live threads                79
  Daemon threads              37
  Peak                        223
  Total started               14328
Memory
  Current heap size           54,440 kbytes
  Maximum heap size           502,464 kbytes
  Committed heap size         125,952 kbytes
  Pending objects             0
  Garbage collector           Name = 'Copy', Collections = 475, Time = 1.654 seconds
  Garbage collector           Name = 'MarkSweepCompact', Collections = 34, Time = 51.343 seconds
Classes
  Current classes loaded      7,442
  Total classes loaded        7,598
  Total classes unloaded      156
Operating system
  Name                        Mac OS X version 10.5.6
  Architecture                x86_64
  Processors                  2
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-10-06 19:36:44.191,,,no_permission,,Unknown,,,,,,,,,,,113643,,,Tue Oct 06 19:36:44 UTC 2009,,,,,,0|i0v16n:,179165,,,,,,,,"06/Oct/09 19:36;sergey_beryozkin;'/cxf' is still a default alias but can be overridden by adding

org.apache.cxf.osgi.cfg properties into /etc directory

and setting 

org.apache.cxf.servlet.context property to some custom value:

org.apache.cxf.servlet.context=/bar

If this org.apache.cxf.osgi.cfg is not available then ConfigAdmin service can be used to configure 'cxfOsgiProps' 


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException by XMLFormatValidator,CXF-2201,12424587,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Blocker,Fixed,dkulp,vschiavoni,vschiavoni,05/May/09 09:09,04/Jun/09 21:32,14/Mar/19 02:29,07/May/09 17:20,2.2.1,,,,,,,,,,,,,,2.1.6,2.2.2,,,,,,,,,0,,,,"Using the cxf-codegen-plugin, the following is thrown:

org.apache.maven.lifecycle.LifecycleExecutionException: java.lang.NullPointerException
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:584)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:500)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:479)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:331)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:292)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:142)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:336)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:129)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:301)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)
	at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)
	at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)
	at org.codehaus.classworlds.Launcher.main(Launcher.java:375)
Caused by: org.apache.maven.plugin.MojoExecutionException: java.lang.NullPointerException
	at org.apache.cxf.maven_plugin.WSDL2JavaMojo.processWsdl(WSDL2JavaMojo.java:363)
	at org.apache.cxf.maven_plugin.WSDL2JavaMojo.execute(WSDL2JavaMojo.java:257)
	at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:453)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:559)
	... 16 more
Caused by: org.apache.cxf.tools.common.ToolException: java.lang.NullPointerException
	at org.apache.cxf.tools.wsdlto.WSDLToJavaContainer.execute(WSDLToJavaContainer.java:260)
	at org.apache.cxf.tools.common.toolspec.ToolRunner.runTool(ToolRunner.java:83)
	at org.apache.cxf.tools.wsdlto.WSDLToJava.run(WSDLToJava.java:103)
	at org.apache.cxf.maven_plugin.WSDL2JavaMojo.processWsdl(WSDL2JavaMojo.java:360)
	... 19 more
Caused by: java.lang.NullPointerException
	at org.apache.cxf.binding.xml.XMLFormatValidator.checkXMLFormat(XMLFormatValidator.java:88)
	at org.apache.cxf.binding.xml.XMLFormatValidator.checkXMLBindingFormat(XMLFormatValidator.java:56)
	at org.apache.cxf.binding.xml.XMLFormatValidator.isValid(XMLFormatValidator.java:49)
	at org.apache.cxf.tools.wsdlto.WSDLToJavaContainer.validate(WSDLToJavaContainer.java:568)
	at org.apache.cxf.tools.wsdlto.WSDLToJavaContainer.processWsdl(WSDLToJavaContainer.java:214)
	at org.apache.cxf.tools.wsdlto.WSDLToJavaContainer.execute(WSDLToJavaContainer.java:127)
	at org.apache.cxf.tools.wsdlto.WSDLToJavaContainer.execute(WSDLToJavaContainer.java:252)
	... 22 more


in attachment, the pom.xml and the wsdl that is causing the error.","Maven version: 2.0.10
Java version: 1.5.0_16
OS name: ""mac os x"" version: ""10.5.6"" arch: ""i386"" Family: ""unix""
",,,,,,,,,,,,,,,,05/May/09 09:11;vschiavoni;pom.xml;https://issues.apache.org/jira/secure/attachment/12407228/pom.xml,05/May/09 09:11;vschiavoni;proactive.wsdl;https://issues.apache.org/jira/secure/attachment/12407227/proactive.wsdl,,,,,2.0,,,,,,,,,,,,,,,,,,,,2009-05-14 17:48:33.788,,,no_permission,,,,,,,,,,,,,113642,,,Thu May 14 17:48:33 UTC 2009,,,,,,0|i0uxlr:,178585,,,,,,,,05/May/09 09:11;vschiavoni;the WSDL file and the POM.xml to reproduce the error.,"14/May/09 15:26;vschiavoni;I suppose this hasn't made its way into the 2.2.2-SNAPSHOT (dated 20090514062329 )

wsdl2java - Apache CXF 2.2.2-SNAPSHOT
.....
same NPE as before. Is this expected?","14/May/09 17:48;dkulp;
I did a search/replace for 2.2.1 with 2.2.2-SNAPSHOT in the attached pom.xml and ran it and it ran to completion without any NPE error.   Are you sure it grabbed the right version?

",,,,,,,,,,,,,,,,,,,,,,,,,,,,
cxf-codegen plugin does not accept files with (upper-case) .WSDL extension,CXF-2191,12423889,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Trivial,Fixed,dkulp,ndeloof,ndeloof,27/Apr/09 14:07,03/Aug/09 20:06,14/Mar/19 02:29,10/Jul/09 16:03,2.2.1,,,,,,,,,,,,,,2.1.6,2.2.3,,,,,,,,,0,,,,"The plugin hardcodes the WSDL file extension "".wsdl"". Using upper-case filenames breaks with :

[INFO] String index out of range: -1[INFO] ------------------------------------------------------------------------[INFO] Tracejava.lang.StringIndexOutOfBoundsException: String index out of range: -1at java.lang.String.substring(String.java:1768)at org.apache.cxf.maven_plugin.WsdlOptionLoader.findJobs(WsdlOptionLoader.java:121)

           String wsdlName = wsdl.getName();
           wsdlName = wsdlName.substring(0, wsdlName.indexOf("".wsdl""));

using the last dot in filename to remove extension would solver this :

            String wsdlName = wsdl.getName();
            int lastDot = wsdlName.lastIndexOf( '.' );
            wsdlName = wsdlName.substring(0, lastDot);



",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113634,,,2009-04-27 14:07:46.0,,,,,,0|i14eyv:,233888,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Invalid message sent using Dispatch,CXF-2190,12423879,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,asoldano,asoldano,27/Apr/09 11:56,04/Jun/09 21:32,14/Mar/19 02:29,07/May/09 19:04,2.2.1,,,,,,,,,,,,,,2.2.2,,,,JAX-WS Runtime,,,,,,0,,,,"We're running this Dispatch client using CXF 2.2.1:

      URL wsdlURL = new URL(""http://"" + getServerHost() + "":8080/jaxws-jbws1611?wsdl"");
      QName serviceName = new QName(targetNS, ""PingEndpointService"");
      QName portName = new QName(targetNS, ""PingEndpointPort"");
      Service service = Service.create(wsdlURL, serviceName);
      Dispatch dispatch = service.createDispatch(portName, Source.class, Mode.PAYLOAD);
      dispatch.getRequestContext().put(BindingProvider.SOAPACTION_USE_PROPERTY, true);
      dispatch.getRequestContext().put(BindingProvider.SOAPACTION_URI_PROPERTY, ""uri:placeBuyOrder"");
      String payload = ""<ns1:ping xmlns:ns1='"" + targetNS + ""'/>"";
      Source retObj = (Source)dispatch.invoke(new StreamSource(new StringReader(payload)));

and we get this exception on server side:

org.apache.cxf.interceptor.Fault: Message part {http://cxf.apache.org/jaxws/dispatch}Invoke was not recognized.  (Does it exist in service WSDL?)
	at org.apache.cxf.interceptor.BareInInterceptor.handleMessage(BareInInterceptor.java:133)
	at org.apache.cxf.binding.soap.interceptor.RPCInInterceptor.handleMessage(RPCInInterceptor.java:111)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
	at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:89)
	at org.apache.cxf.transport.servlet.ServletDestination.invoke(ServletDestination.java:99)
	at org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:357)
	at org.jboss.wsf.stack.cxf.ServletControllerExt.invoke(ServletControllerExt.java:160)
	at org.jboss.wsf.stack.cxf.RequestHandlerImpl.handleHttpRequest(RequestHandlerImpl.java:61)
	at org.jboss.wsf.stack.cxf.CXFServletExt.service(CXFServletExt.java:134)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:717)
[...]

Capturing the message on the wire reveals the following message being sent:

<soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/""><soap:Body><ns1:Invoke xmlns:ns1=""http://cxf.apache.org/jaxws/dispatch""><ns1:ping xmlns:ns1=""http://jbws1611.jaxws.ws.test.jboss.org/"" /></ns1:Invoke></soap:Body></soap:Envelope>

which contains the ns1:Invoke element causing the issue on server side.

The WSDL of the service is:

<?xml version='1.0' encoding='UTF-8'?><wsdl:definitions name=""PingEndpointService"" targetNamespace=""http://jbws1611.jaxws.ws.test.jboss.org/"" xmlns:ns1=""http://schemas.xmlsoap.org/wsdl/soap/http"" xmlns:soap=""http://schemas.xmlsoap.org/wsdl/soap/"" xmlns:tns=""http://jbws1611.jaxws.ws.test.jboss.org/"" xmlns:wsdl=""http://schemas.xmlsoap.org/wsdl/"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">
  <wsdl:message name=""ping"">
  </wsdl:message>
  <wsdl:message name=""pingResponse"">
    <wsdl:part name=""return"" type=""xsd:string"">
    </wsdl:part>
  </wsdl:message>
  <wsdl:portType name=""PingEndpoint"">
    <wsdl:operation name=""ping"">

      <wsdl:input message=""tns:ping"" name=""ping"">
    </wsdl:input>
      <wsdl:output message=""tns:pingResponse"" name=""pingResponse"">
    </wsdl:output>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name=""PingEndpointServiceSoapBinding"" type=""tns:PingEndpoint"">
    <soap:binding style=""rpc"" transport=""http://schemas.xmlsoap.org/soap/http"" />
    <wsdl:operation name=""ping"">

      <soap:operation soapAction="""" style=""rpc"" />
      <wsdl:input name=""ping"">
        <soap:body namespace=""http://jbws1611.jaxws.ws.test.jboss.org/"" use=""literal"" />
      </wsdl:input>
      <wsdl:output name=""pingResponse"">
        <soap:body namespace=""http://jbws1611.jaxws.ws.test.jboss.org/"" use=""literal"" />
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>

  <wsdl:service name=""PingEndpointService"">
    <wsdl:port binding=""tns:PingEndpointServiceSoapBinding"" name=""PingEndpointPort"">
      <soap:address location=""http://127.0.0.1:8080/jaxws-jbws1611"" />
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>

Please note this is happening starting from CXF 2.2.1 (no issue with 2.2) and the wsdl is RPC/Lit while all tests with Dispatch in the systests seem to be with DOC/Lit contract services.",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113633,,,Thu Apr 30 10:53:32 UTC 2009,,,,,,0|i0v1w7:,179280,,,,,,,,"27/Apr/09 11:58;asoldano;I think this is related to CXF-1907 which, despite being still open, includes changes that went to 2.2.1 (at least that's what seems to me).","30/Apr/09 10:53;asoldano;Trying to workaround this, I think I've found another issue.
To workaround this issue, I added a handler on client side that simply removes the {http://cxf.apache.org/jaxws/dispatch}Invoke element from the payoad. This way correct messages go on the wire (both in & out). However, when processing the response message,  I get the following NPE:
java.lang.NullPointerException
        at org.apache.cxf.binding.soap.interceptor.RPCInInterceptor.handleMessage(RPCInInterceptor.java:166)
        at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
        at org.apache.cxf.endpoint.ClientImpl.onMessage(ClientImpl.java:641)
        at org.apache.cxf.endpoint.ClientImpl$1$1.run(ClientImpl.java:722)
        at org.apache.cxf.workqueue.SynchronousExecutor.execute(SynchronousExecutor.java:37)
        at org.apache.cxf.endpoint.ClientImpl$1.onMessage(ClientImpl.java:720)
        at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleResponseInternal(HTTPConduit.java:2134)
        at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream$1.run(HTTPConduit.java:2018)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675)
        at java.lang.Thread.run(Thread.java:595)

Debbuging shows that's because part.getConcreteName() is null.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
XSD import statements do not apply given confguration,CXF-2184,12423450,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,nigel_garner,nigel_garner,22/Apr/09 09:43,04/Jun/09 21:32,14/Mar/19 02:29,07/May/09 16:54,2.2.1,,,,,,,,,,,,,,2.0.12,2.1.6,2.2.2,,Core,,,,,,0,,,,"CXF-1279 led to a change in the code to allow for the inclusion of a publishedEndpointUrl configuration parameter in the cxf-servlet.xml. This parameter is then used by the WSDLQueryHandler class when building the WSDL file to serve.

We are currently developing a number of services using WSDL first development with the added complexity that the web services are deployed behind a proxy server that rewrites the incoming URL. The environment has no DNS so all configuration has to be IP based. The publishedEndpointURI property allows me to adjust the endpoint address in the published wsdl file at deployment time. 

However there is one other locations where IP address is used that I need to update, which is in the XSD imports inside the WSDL. These are showing as the internal network IP and port of the JBoss server instance as opposed to the external facing URL. As such no consumers of the service can use the published WSDL to generate a client because the XSD's can not be retrieved.    

I have attached a patch to the WSDLQueryHandler class that applies the same logic to the building of the base address of the schema imports as is applied to the endpoint address. 

Cheers",,,,,,,,,,,,,,,,,22/Apr/09 09:46;nigel_garner;publisedEndpointUrl.diff;https://issues.apache.org/jira/secure/attachment/12406116/publisedEndpointUrl.diff,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113629,,,Wed Apr 22 09:46:09 UTC 2009,,,,,,0|i0sy5z:,167012,,,,,,,,22/Apr/09 09:46;nigel_garner;Patch file for proposed resolutin,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ProxyHelper requires cglib even if interface is used as client service class,CXF-2180,12423205,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,hdelfs,hdelfs,18/Apr/09 16:51,24/Apr/09 21:17,14/Mar/19 02:29,21/Apr/09 15:43,2.2,,,,,,,,,,,,,,2.1.5,2.2.1,,,Core,JAX-RS,,,,,0,,,,"When using a JAX-RS proxy client with the spring bean

  <jaxrs:client id=""subscriberService"" serviceClass=""sample.SubscriberService""
    address=""http://localhost:8080/services/"">
  </jaxrs:client>

where sample.SubscriberService is an interface, I would expect, that I don't need cglib in my classpath. Instead I get org.springframework.beans.factory.BeanCreationException with the following root cause:

Caused by: java.lang.NoClassDefFoundError: net/sf/cglib/proxy/Callback
	at org.apache.cxf.common.util.ProxyHelper.<clinit>(ProxyHelper.java:33)
	at org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean.createWithValues(JAXRSClientFactoryBean.java:134)
	at org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean.create(JAXRSClientFactoryBean.java:119)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:115)
	... 18 more
Caused by: java.lang.ClassNotFoundException: net.sf.cglib.proxy.Callback
	at java.net.URLClassLoader$1.run(URLClassLoader.java:200)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:188)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:307)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:252)
	at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:320)
	... 26 more

which I can only fix by including cglib in my Maven dependencies.

The catch block in the static initializer of ProxyHelper lets me assume, that the usage of cglib features was intended to be optional. But if cglib.jar is not available, the class loading of CglibProxyHelper causes the error above.

I suggest to either catch Throwable when calling CglibProxyHelper, or to avoid the class loading dependency on cglib classes within CglibProxyHelper.",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113626,,,2009-04-18 16:51:09.0,,,,,,0|i0sy67:,167013,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HTTP headers (and thus cookies) are not settable from client request context,CXF-2178,12423134,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,dkulp,dkulp,17/Apr/09 15:20,24/Apr/09 21:17,14/Mar/19 02:29,17/Apr/09 19:36,2.2,,,,,,,,,,,,,,2.2.1,,,,,,,,,,0,,,,"Code that attempts to set http headers for the client, such as:

            Map<String, List<String>> headers 
                = CastUtils.cast((Map)bp.getRequestContext().get(""javax.xml.ws.http.request.headers""));

            if (headers == null) {
                headers = new HashMap<String, List<String>>();
                bp.getRequestContext().put(""javax.xml.ws.http.request.headers"", headers);
            }

            List<String> cookies = Arrays.asList(new String[] {""a=a"", ""b=b""});
            headers.put(""Cookie"", cookies);

is not working with 2.2.   Worked fine with 2.1.3.
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113624,,,2009-04-17 15:20:32.0,,,,,,0|i0v1on:,179246,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DynamicClientFactory.setupClasspath throws a null pointer exception if URI contains undefined path.,CXF-2175,12423073,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,yosimasu,yosimasu,17/Apr/09 02:37,24/Apr/09 21:17,14/Mar/19 02:29,20/Apr/09 18:28,2.1.4,,,,,,,,,,,,,,2.1.5,2.2.1,,,JAXB Databinding,,,,,,0,,,,"On Glassfish, DynamicClientFactory.setupClasspath sometimes throws NullPointerExcpetion.
I catch the exception happened position at line 566:

565:    try { 
566:        file = new File(url.toURI().getPath()); 
567:    } catch (URISyntaxException urise) { 
568:        file = new File(url.getPath()); 
569:    }

The url.toURI().getPath() returns null when the path is undefined.

The url with NPE will appear TWICE, one throws NPE, the other passes.
Because the reason aboved, I modify code as belowed:

565:    try { 
566:        file = new File(url.toURI().getPath()); 
567:    } catch (URISyntaxException urise) { 
568:        file = new File(url.getPath()); 
569:    } catch (NullPointerException npe) {
570:        continue; // undefined path.
571:    }

Sincerely,
Masu
2009/04/17
","Glassfish v2.1/v2ur2, Windows Vista x64, Windows Server 2003, JDK 1.6.0_11",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,Novice,,,,,,,,,,,113622,,,2009-04-17 02:37:32.0,,,,,,0|i0v1lj:,179232,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"RPC/Lit types with both XmlType and XmlRootElement are ending up as element parts, not type parts",CXF-2172,12422809,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,dkulp,dkulp,14/Apr/09 16:42,24/Apr/09 21:17,14/Mar/19 02:29,14/Apr/09 17:48,2.0.10,2.1.4,2.2,,,,,,,,,,,,2.0.11,2.1.5,2.2.1,,JAXB Databinding,,,,,,0,,,,"
If a type has an XmlRootElement annotation on it and it's used for a method param/return value, with RPC/Lit, the parts in the generated wsdl are ending up as element parts intstead of type parts.  That is not correct according to ws-bp rules.


",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113620,,,2009-04-14 16:42:18.0,,,,,,0|i140cn:,231519,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Aegis logging inconsistent....,CXF-2170,12422731,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,dkulp,dkulp,13/Apr/09 21:07,24/Apr/09 21:17,14/Mar/19 02:29,13/Apr/09 21:24,,,,,,,,,,,,,,,2.1.5,2.2.1,,,,,,,,,0,,,,"
In the aegis databinding, some logging is done via commons-logging, others via j.u.l.  Should all use j.u.l.

",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113618,,,2009-04-13 21:07:35.0,,,,,,0|i14e1j:,233738,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SecurityPolicy-Assertion fails for only signing ,CXF-2165,12422442,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,beerde,beerde,09/Apr/09 06:54,24/Apr/09 21:17,14/Mar/19 02:29,09/Apr/09 14:53,2.2,,,,,,,,,,,,,,2.2.1,,,,WS-* Components,,,,,,0,,,,"Policy-Assertion fails when a policy only asserts that the body is signed, but not encrypted. Sending signed messages is no problem, but when receiving a signed message the following error appears:

  Caused by: org.apache.cxf.ws.policy.PolicyException: These policy alternatives can not be satisfied:
  {http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702}AsymmetricBinding: Not signed before encrypted

There should not be any encryption at all, only signing. I debugged into the code and found the following Method in the PolicyBasedWSS4JInInterceptor.java:

 private boolean assertAsymetricBinding(AssertionInfoMap aim,
                                           SoapMessage message,
                                           SOAPMessage doc,
                                           Protections prots,
                                           boolean derived) {
        Collection<AssertionInfo> ais = aim.get(SP12Constants.ASYMMETRIC_BINDING);
        if (ais == null) {
            return true;
        }
        for (AssertionInfo ai : ais) {
            AsymmetricBinding abinding = (AsymmetricBinding)ai.getAssertion();
            ai.setAsserted(true);
            if (abinding.getProtectionOrder() == SPConstants.ProtectionOrder.EncryptBeforeSigning) {
                if (abinding.isSignatureProtection()) {
                    if (prots != Protections.ENCRYPT_SIGN_PROTECT) {
                        ai.setNotAsserted(""Not encrypted before signed and then protected"");
                    }
                } else if (prots != Protections.ENCRYPT_SIGN) {
                    ai.setNotAsserted(""Not encrypted before signed"");                   
                }
            } else if (prots != Protections.SIGN_ENCRYPT) {
                ai.setNotAsserted(""Not signed before encrypted"");                                   
            }
            assertPolicy(aim, abinding.getInitiatorToken());
            assertPolicy(aim, abinding.getRecipientToken());
            assertPolicy(aim, abinding.getInitiatorToken().getToken(), derived);
            assertPolicy(aim, abinding.getRecipientToken().getToken(), derived);
        }
        return true;
    }

In this method the value of prots is =""SIGN"" which is correct. But the if-statement only checks if prots is not SIGN_ENCRYPT and then sets it to notasserted. It might be because SPConstants.ProtectionOrder only knows EncryptBeforeSigning and SigningBeforeEncrypt. There is nothing about only signing, or only encrypting.

The policy is attached.",,,,,,,,,,,,,,,,,09/Apr/09 06:56;beerde;policy.xml;https://issues.apache.org/jira/secure/attachment/12405047/policy.xml,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113613,,,Thu Apr 09 06:56:18 UTC 2009,,,,,,0|i14e5z:,233758,,,,,,,,09/Apr/09 06:56;beerde;the policy for which the assertion fails,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"CXFBusImpl never removed from ThreadLocal, generates permgen out of memory error after some redeployments",CXF-2164,12422340,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,bharathganesh,mably,mably,08/Apr/09 08:56,09/Sep/10 12:20,14/Mar/19 02:29,22/May/09 14:00,2.1.4,,,,,,,,,,,,,,2.2.2,,,,Bus,,,,,,0,,,,"I've found this message on a mailing list recently, and it doesn't seem to have been resolved as we have the same problem with version 2.1.4 of CXF on one of our webapp :

Hello CXF users,

I've been  working on figuring out why our JBoss servers keep going down with permgen out
of memory exceptions when we redeploy our war files. To do this I had been using a profiler
to inspect the WebAppClassloader to find out what was keeping it from being garbage collected.
One such culprit was the class org.apache.cxf.BusFactory

The BusFactory has a ThreadLocal in which it stores a copy of CXFBusImpl. However, this isn't
getting cleaned up properly when the war is undeployed. I noticed that CXFBusImpl has a shutdown
method that calls BusFactory.setDefaultBus(null) which in turn sets the value stored in the
ThreadLocal to null. However, this doesn't seem to be getting called.

The way we are using CXF from spring is with the following WEB-INF/services.xml file in our
war:
  <beans xmlns=""http://www.springframework.org/schema/beans"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
    xmlns:amq=""http://activemq.org/config/1.0"" xmlns:jaxws=""http://cxf.apache.org/jaxws""
    xmlns:http-conf=""http://cxf.apache.org/transports/http/configuration""
    xsi:schemaLocation=""
      http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
      http://cxf.apache.org/transports/http/configuration http://cxf.apache.org/schemas/configuration/http-conf.xsd
      http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd
      http://activemq.org/config/1.0 http://activemq.apache.org/schema/core/activemq-core-5.0.0.xsd""
    default-autowire=""byType"">

    <import resource=""classpath:META-INF/cxf/cxf.xml"" />
    <import resource=""classpath:META-INF/cxf/cxf-extension-soap.xml"" />
    <import resource=""classpath:META-INF/cxf/cxf-servlet.xml"" />

    <jaxws:endpoint id=""helloService"" implementor=""#helloSvc"" address=""/HelloService"" />
  </beans>

I'm not really sure why this Bus.shutdown() isn't getting called or even who is responsible
for calling it. I tried doing something along the lines of:
  WebApplicationContext webContext = WebApplicationContextUtils.getRequiredWebApplicationContext(context);
  if (webContext.containsBean(""cxf"")) {
    CXFBusImpl cxfBus = (CXFBusImpl) webContext.getBean(""cxf"");
    cxfBus.shutdown(true);
  }

But that didn't work. What I eventually ended up doing was to have the following hack in the
shutdown sequence of our webapp:
  Field field = org.apache.cxf.BussFactory.class.getDeclaredField(""localBus"");
  field.setAccessible(true);
  ThreadLocal<?> localBus = (ThreadLocal<?>) field.get(null);
  localBus.remove();

This did work but obviously it is a bit of an ugly hack. Is there something that needs to
be included in our service.xml file to tell spring how to cleanup CXF? Is this maybe a bug
in CXF that the CXFBusImpl.shutdown(Boolean) just isn't getting called at all or maybe that
in BusFactory.setThreadDefaultBus(Bus) that there should be some check such as:
  if (bus == null) {
    localBus.remove();
  } else {
    localBus.set(bus);
  }

Or maybe some combination of all of these. I'm reasonably new to CXF, Spring, and all this
stuff so I apologize ahead of time if there is some obvious solution that I just didn't come
across but I've been trying to scour the CXF and Spring documentation for some idea of the
correct way to do this and why BusFactory is keeping its ThreadLocal but I can't figure it
out.

Thanks!

Ben Dean
Software Engineer
Ontario Systems, LLC
",,,,,,,,,,,,,,,,,22/Apr/09 07:25;mably;Heap_Walker_Incoming_References.zip;https://issues.apache.org/jira/secure/attachment/12406104/Heap_Walker_Incoming_References.zip,22/Apr/09 07:25;mably;cxf_threadlocal.jpg;https://issues.apache.org/jira/secure/attachment/12406103/cxf_threadlocal.jpg,17/Apr/09 11:58;mably;threadlocal.patch;https://issues.apache.org/jira/secure/attachment/12405756/threadlocal.patch,,,,3.0,,,,,,,,,,,,,,,,,,,,2009-04-13 21:33:57.188,,,no_permission,,,,,,,,,,,,,113612,,,Thu Sep 09 12:20:58 UTC 2010,,,,,,0|i14erb:,233854,,,,,,,,"13/Apr/09 21:33;dkulp;
The CXF servlet definitely has a destroy method that calls shutdown:

   public void destroy() {
        String s = bus.getId();
        BUS_MAP.remove(s);
        bus.shutdown(true);
    }

Thus, it LOOKS like the JBoss server isn't calling destroy on the the redeploy if destroy isn't being called.    If you can show that is the case, I would definitely   log a bug with them.

","13/Apr/09 22:07;mably;In fact the thread local variables should be set and removed for each request in a try/finally block (like db connections).  It doesn't seem to be the case.

I've identified a few other classes setting ThreadLocal variables and not removing them properly.

I've temporarily resolved this problem by using WeakReferences.  Dont know if it has any significant impact on performance, but at least all objects are garbage collected after a redeploy.","14/Apr/09 15:35;mably;An interesting article (and comments) about ThreadLocal usage and thread pools :
http://www.devwebsphere.com/devwebsphere/2005/06/dont_use_thread.html","16/Apr/09 15:09;bharathganesh;@Ben Dean

>>But that didn't work. What I eventually ended up doing was to have the following hack in the
>>shutdown sequence of our webapp:
  >>Field field = org.apache.cxf.BussFactory.class.getDeclaredField(""localBus"");
  >>field.setAccessible(true);
  >>ThreadLocal<?> localBus = (ThreadLocal<?>) field.get(null);
  >>localBus.remove();

If you have done the above in the shutdown sequence of your web app, I assume this code would be executed in the undeployment thread (main thread or some RMI thread in case of remote un-deployment) thread of JBoss. The localbus threadlocal would not be initialized for this thread. As far as I understand, there wont be any effect of doing the localBus.remove() in that thread. So there is something else that is fixing your issue.

>>localBus.remove();
Yes, The advantage of using this (added in Java SE 5) would be that the complete entry would be removed from the ThreadLocalMap, not just the value. But this will not result in a very significant improvement in memory, as the value is anyways GC'ed even when you do cxfBus.shutdown().

@Francois
>>In fact the thread local variables should be set and removed for each request in a try/finally block (like db connections). It doesn't seem to be the case.
Yes, I am looking at those places and seeing what can be done, to make sure we don't keep anything in the web-worker thread beyond the scope of the request .","16/Apr/09 21:04;dkulp;

>In fact the thread local variables should be set and removed for each request in a try/finally block (like db connections). It doesn't seem to be the case. 
>I've identified a few other classes setting ThreadLocal variables and not removing them properly. 

If you find issues like that, PLEASE log a bug here or, preferrably , provide a patch so we can get them fixed.

Thanks!","16/Apr/09 22:05;mably;Thanx again for taking my issue in consideration.

I sadly dont know much about CXF internals to really understand why these threadlocal variables aren't removed, just made a few investigations using JProfiler heap walker tool.

I'm on holidays at the moment, will try to send more information as soon as I'm back to work.

",17/Apr/09 11:58;mably;My patch against 2.1.4 version which circumvent thread local variables from not being garbage collected on application redeploy.  Hoping it can help tracing down the problem.,"21/Apr/09 16:02;dkulp;
Unfortunately, nothing in the patch will really work per spec.

The changes to the WebServiceContextImpl should not be needed.   I checked an every single place we call setMessageContext in the code, we have a finally block that calls  clear.    Thus, that thread local should always be properly cleared.   (except on of the test cases, but that's not relevant)


The changes to BindingProviderImpl and ClientImpl woudl not work.    If I do:

((BindingProvider)port).getRequestContext().put(......);
foo = port.echoFoo(foo);
((BindingProvider)port).getRequestContext().get(...)

If a garbage collection triggeres between any of the lines above, the contexts would get cleared out and the expected behavior would not occur.
","22/Apr/09 07:25;mably;Hi Daniel,

I've put back the original (non modified) jars of CXF 2.1.4 and did a few redeploys on our Spring-CXF web app.  Threadlocal issues are back.

Attachments contains what I get from JProfiler (latest version 5.2.1).

Configuration : Tomcat 6.0.18, Sun JDK 1.5.0_17-b04, Windows XP, Spring 2.0.8
","24/Apr/09 08:19;mably;Willing to help, I've tried to dig a bit deeper in the code.

There is no try/finally around WebServiceContextImpl.setMessageContext and WebServiceContextImpl.clear in org.apache.cxf.jaxws.JAXWSMethodInvoker invoke method.  But as long no exception is throw in between it should'nt be a problem.

In org.apache.cxf.jaxws.BindingProviderImpl, requestContext and responseContext threadlocal variables don't seem to be cleared anywhere, there is a strange protected clearContext method which doesn't seem to be called from anywhere.

Same for org.apache.cxf.endpoint.ClientImpl.  No call to set(null) method in the code for these threadlocal variables.

This might be the cause of our problems.

Some kind of clear() method needs to be implemented for these two classes.

Is there any architectural constraints for these methods not being implemented and used ?","24/Apr/09 15:54;dkulp;
From a IM chat I had with Bharath:   (posted here so all can benefit)

(11:00:12) rbharathganesh: What Francois Masurel is saying about the ThreadLocal leak seems to be correct
(11:00:39) rbharathganesh: If you look at ClientImpl we never unset the req and resp contexts
(11:00:39) jdkulp: Yea, I'm just not sure how to go about fixing it.  :-(
(11:00:49) rbharathganesh: I have something in mind
(11:00:59) rbharathganesh: Just wanted to confirm with you before doing it
(11:01:27) jdkulp: The part in the WebServiceContext server side should already be fixed.
(11:01:35) rbharathganesh: If you look at his latest comment on the bug: 
(11:01:35) jdkulp: I think he's looking at 2.1.4 code.
(11:01:36) rbharathganesh: //There is no try/finally around WebServiceContextImpl.setMessageContext and WebServiceContextImpl.clear in org.apache.cxf.jaxws.JAXWSMethodInvoker invoke method. But as long no exception is throw in between it should'nt be a problem. 
(11:01:41) rbharathganesh: This is incorrect
(11:01:48) rbharathganesh: We have already fixed this
(11:01:49) rbharathganesh: Oh yes
(11:01:56) jdkulp: Yea.   It WAS broken in 2.1.4.
(11:01:58) rbharathganesh: Sorry did not rread what you typed :-(
(11:02:39) rbharathganesh: But yes the second part seems to be right
(11:03:07) jdkulp: Yea.   If you have a good idea to fix it, I'm all ears.  :-)
(11:03:31) jdkulp: Maybe a weak ref in the thread local and a strong ref in the ClientImpl?
(11:04:22) rbharathganesh: hmmm.. But how about explicitly  clearing it in JaxWsClientProxy?
(11:04:45) jdkulp: The issue is ""when to clear it"".
(11:05:41) rbharathganesh: In JaxWsClientProxy#invoke(), Before retuning the result to the user? 
(11:06:40) jdkulp: You cannot clear the response context then.
(11:06:53) jdkulp: Or they obviously couldn't get the response stuff.
(11:07:23) jdkulp: Plus, if you make 3 invokes, the original stuff in the context needs to still be used.
(11:09:15) rbharathganesh: Dan I guess I am missing something
(11:09:21) rbharathganesh: // if you make 3 invokes, the original stuff in the context needs to still be used.
(11:09:23) jdkulp: or I am...  :-)
(11:10:04) rbharathganesh: Is there any state to be maintained beyond the scope of the invoke method?
(11:10:22) jdkulp: The state of the request context is for ALL invokes on that thread.
(11:10:24) jdkulp: So yes.
(11:10:39) jdkulp: If I set the ENDPOINT_URL in the request context, then call invoke 10 times, all 10 should go to that URL.
(11:10:54) rbharathganesh: Oh Yes!
(11:16:41) jdkulp: One option could be to use a WeakHashMap<Thread, Map<...>> in client impl instead of thread locals.
(11:17:03) jdkulp: Thus, when clientImpl is garbage collected, so would that map and everything it points to.
(11:17:30) rbharathganesh: Yeah....
(11:17:33) jdkulp: If a thread goes away, it's map would be gc'd
(11:18:47) rbharathganesh: In his case, the clientImpl goes away right?
(11:18:54) jdkulp: I assume so.  :-)
(11:19:09) jdkulp: I think when the war/app is undeployed, it should go away.
(11:19:11) rbharathganesh: The thread going away would mostly never happen right?
(11:19:33) jdkulp: Maybe, maybe not.    It could be a workqueue that grows/shrinks on demand.
(11:19:38) rbharathganesh: The web server would anyway pool these threads
(11:19:40) rbharathganesh: yeah right
(11:19:40) jdkulp: In which case it COULD go away.
(11:19:46) rbharathganesh: Yeah","24/Apr/09 18:35;mably;Sounds good to me :-)

Just keep in mind that the CXF jars can be shared across several webapps (ex : Tomcat common/lib), so classes might not be gc'd on redeploys, only instances, so beware of static fields (it's not the case for ClientImpl and BindingProviderImpl).",22/May/09 14:00;bharathganesh;We now maintain the request and response context in a WeakHashMap. This will would enable them eligible for garbage collection when the ClientImpl itself gets GC'd (during application undeployment). ,30/May/09 15:44;mably;We did some profiling tests with the recently released 2.2.2  version of CXF and it seems like we dont have memory leaks anymore as we had with version 2.1.4 after a few webapp redeployments.  Thanx for all !,30/May/09 16:08;bharathganesh;Francois Masurel has verified that the fix has solved the issue. ,"08/Sep/10 15:42;mauromol;I don't know if it's better to reopen this bug or to file a new one.
I still have problems with ThreadLocals not being released.

The problem is that cxf.xml declares the following bean:

<bean id=""cxf"" class=""org.apache.cxf.bus.CXFBusImpl""/>

Here, the destroy-method is not declared. This means that when Sping shuts down the context, it does not call any shutdown method on the CXFBusImpl.

This has nothing to do with the init and destroy methods of the CXFServlet, which might occur in different threads. Moreover, I see the problem even if I don't start the CXFServlet at all (no load-on-startup).

The net result is the following:
- Tomcat starts
- Tomcat starts my web application
- this declares a Spring web application context that gets parsed
- at some point cxf.xml is parsed, so the bean named cxf is created and an org.apache.cxf.bus.CXFBusImpl instance is created using the constructor org.apache.cxf.bus.CXFBusImpl.CXFBusImpl(Map<Class, Object>), which causes the org.apache.cxf.BusFactory.localBus ThreadLocal to be assigned a value of this type, through a call to org.apache.cxf.BusFactory.possiblySetDefaultBus(Bus); I see that this happens in a thread called ""main""
- if I stop the web application, Spring closes down the context; however, as I said before, this does not cause any shutdown method of the cxf bean to be called
- so there's no null-setting or removing operation of the org.apache.cxf.BusFactory.localBus ThreadLocal for the thread ""main""

I think the easiest fix is to modify the cxf bean definition in this way:
<bean id=""cxf"" class=""org.apache.cxf.bus.CXFBusImpl"" destroy-method=""shutdown""/>
However, org.apache.cxf.bus.CXFBusImpl.shutdown(boolean) should be refactored so that it does not take the boolean parameter (it's not used actually), otherwise an overloading of this method without parameters should be provided.

However, this will work with the assumption that the Spring context load and shutdown operations are both executed in the same thread. I don't know if this is guaranteed by the servlet specifications or not (I'm using the org.springframework.web.context.ContextLoaderListener servlet listener to handle the lifecycle of the webapp application context). A better fix could be to avoid to hold state information for the CXFBusImpl in this way (i.e.: why does a constructor set a ThreadLocal and leave it there???).

Please note I'm working with CXF 2.2.10.","08/Sep/10 16:21;mauromol;I must correct myself. As the original reporter said, the call to shutdown does not resolve the problem, because I just saw that it does not unset the ThreadLocal, but simply sets to null an internal property (defaultBus).

The bad news is that I just realized that the shutdown sequence can actually be made on a different thread: that is, the context may be created in thread ""main"", but destroyed in thread htttp-8080-1 (the one that serves my request to stop the web application in the Tomcat Manager application).

So, I don't see any straight way to fix this problem without thinking about the reason of that ThreadLocal. Maybe the method org.apache.cxf.BusFactory.setDefaultBus(Bus) should at least let the user specify whether the TheadLocal localBus property should also be set together with the defaultBus property. After that, maybe the constructor of CXFBusImpl should set only the default bus property, not the localBus one. Or at least this should happen just for the CXFBusImpl instance created by cxf.xml Spring application context....

Mauro.","08/Sep/10 18:12;dkulp;
Definitely log a new bug for this.

I'm thinking we MAY need to do the same thing we did for the request/response objects in the ClientImpl of using  something like:

protected Map<Thread, Bus> threadBusses 
        = Collections.synchronizedMap(new WeakHashMap<Thread, Bus>());

The destroy method could walk the map and remove any keys that are associated with that Bus.   

Anyway, please log a new bug.   A patch would be great as well. :-)

","09/Sep/10 12:20;mauromol;Thank you Daniel, I opened bug CXF-2985.",,,,,,,,,,,,
"org.apache.cxf.resource.URIResolver on Websphere 6.1 doesn't resolve from ""wsjar:"" base URI's",CXF-2163,12422333,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,dutchieman,dutchieman,08/Apr/09 06:45,24/Apr/09 21:17,14/Mar/19 02:29,10/Apr/09 20:23,2.0.10,2.1.4,,,,,,,,,,,,,2.0.11,2.1.5,2.2.1,,Core,,,,,,0,,,,"Steps to reproduce:
1) Put wsdl4j-1.6.2 in AppServer\java\jre\lib\endorsed, as is described on the CXF Wiki.
2) Deploy a standard CXF webservice server setup, using jaxws:endpoint, but with the WSDL and referred XSD's deployed INSIDE a jar file. The WSDL is referring to the XSD using <xsd:import schemaLocation=""mySchema.xsd""/>.
3) When starting the application, exception FileNotFoundException is thrown on the referred XSD.

CXF is looking for the XSD in the app server's root directory, instead of in the JAR file. This is caused by Websphere reporting the WSDL's URI in the format ""wsjar:/path/to/archive.jar!/package/with/file.wsdl"", instead of the normal Java way which would be ""jar:/path/to/archive.jar!/package/with/file.wsdl"" (note the different prefix). This confuses CXF's org.apache.cxf.resource.URIResolver class.

The issue can be fixed by including checks on the ""wsjar:"" prefix around lines 79, 105, and 282. Those lines already check on ""jar:"" and ""zip:"".","Websphere 6.1, fixpack 21, with wsdl4j-1.6.2 in the JRE's ""endorsed"" folder",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,Novice,,,,,,,,,,,113611,,,2009-04-08 06:45:25.0,,,,,,0|i0sy6v:,167016,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WSA handler class MAPCodec is not decoding From header,CXF-2161,12422262,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,eglynn,adinn,adinn,07/Apr/09 16:36,24/Apr/09 21:17,14/Mar/19 02:29,08/Apr/09 15:15,2.1.4,,,,,,,,,,,,,,2.0.11,2.1.5,2.2.1,,,,,,,,0,,,,"Class MAPCodec includes code to encode the WSA From address contained in the client addressing properties into an outgoing SOAP header. However, it does not include any code to decode this field from the incoming SOAP headers at the receiving end.

The relevant patch is as follows:

[adinn@toby cxf-2.1.4]$ svn diff rt/ws/addr/src/main/java/org/apache/cxf/ws/addressing/soap/MAPCodec.java
Index: rt/ws/addr/src/main/java/org/apache/cxf/ws/addressing/soap/MAPCodec.java
===================================================================
--- rt/ws/addr/src/main/java/org/apache/cxf/ws/addressing/soap/MAPCodec.java	(revision 761707)
+++ rt/ws/addr/src/main/java/org/apache/cxf/ws/addressing/soap/MAPCodec.java	(working copy)
@@ -463,6 +463,12 @@
                                                        AttributedURIType.class,
                                                        headerElement, 
                                                        unmarshaller));
+                            } else if (Names.WSA_FROM_NAME.equals(localName)) {
+                                maps.setFrom(decodeAsNative(
+                                                       headerURI,
+                                                       EndpointReferenceType.class,
+                                                       headerElement,
+                                                       unmarshaller));
                             } else if (Names.WSA_TO_NAME.equals(localName)) {
                                 AttributedURIType addr = decodeAsNative(
                                                        headerURI,
",CXF 2.1.4 embedded in JBossWS 3.1.0 running on JBossAS 5.1.0.Beta1,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-04-08 15:14:43.715,,,no_permission,,,,,,,,,,,,,113609,,,Wed Apr 08 15:14:43 UTC 2009,,,,,,0|i1473r:,232614,,,,,,,,"08/Apr/09 15:14;eglynn;Fix committed along with unit test coverage.

http://svn.apache.org/viewvc?view=rev&revision=763272",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
LoggingOutInterceptor logs message twice,CXF-2160,12422137,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,dkulp,psavage,psavage,06/Apr/09 16:54,24/Apr/09 21:17,14/Mar/19 02:29,06/Apr/09 17:02,2.1.3,2.1.4,2.2,,,,,,,,,,,,2.1.5,2.2.1,,,Core,,,,,,0,,,,"The LoggingOutInterceptor logs every outbound message twice. This was caused by CXF-1778 which added the following code to the onClose() method of the LoggingCallback class in LoggingOutInterceptor.java:

            try {                                        
                //empty out the cache              
                cos.lockOutputStream();            
                cos.resetOut(null, false);         
            } catch (Exception ex) {               
                //ignore                           
            }                                      
            message.setContent(OutputStream.class, 
                               origStream);        

When CachedOutputStream.lockOutputStream() is called, it calls onClose() on each of the callbacks registered on the CachedOutputStream. This causes LoggingCallback.onClose to get called again because the CachedOutputStream that is being locked is the same one that is being closed.",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-04-06 17:02:30.795,,,no_permission,,,,,,,,,,,,,113608,,,Mon Apr 06 17:02:30 UTC 2009,,,,,,0|i0sy73:,167017,,,,,,,,06/Apr/09 17:02;dkulp;Already encountered and fixed on trunk,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Mix up of ID and ID reference of security token in signature causes WCF service to throw Cannot resolve KeyInfo for verifying signature,CXF-2158,12422133,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,ian.homer,ian.homer,06/Apr/09 16:02,24/Apr/09 21:17,14/Mar/19 02:29,08/Apr/09 18:15,2.2,,,,,,,,,,,,,,2.2.1,,,,WS-* Components,,,,,,0,,,,"Issue

CXF client causes WCF to throw the error Cannot resolve KeyInfo for verifying signature: KeyInfo 'SecurityKeyIdentifier when connecting to a secured WCF service set up following the tutorial ""WCF Getting Started Sample Tutorial with Message Security User Name"" @ http://msdn.microsoft.com/en-us/library/ms752233.aspx. (WSDL attached on CXF ticket)

See analysis below for summary of the issue and indication of resolution.
[edit] CXF Client Test Case

$ java -version
java version ""1.6.0_07""
Java(TM) SE Runtime Environment (build 1.6.0_07-b06-153)
Java HotSpot(TM) 64-Bit Server VM (build 1.6.0_07-b06-57, mixed mode)
 
MacOS 10.5 and Windows Vista
CXF Version 2.2

import static org.junit.Assert.assertEquals;
import groovyx.net.ws.cxf.SSLHelper;
 
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
 
import javax.security.auth.callback.Callback;
import javax.security.auth.callback.CallbackHandler;
import javax.xml.namespace.QName;
 
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.cxf.Bus;
import org.apache.cxf.binding.soap.SoapMessage;
import org.apache.cxf.endpoint.Client;
import org.apache.cxf.endpoint.Endpoint;
import org.apache.cxf.endpoint.EndpointImpl;
import org.apache.cxf.endpoint.dynamic.DynamicClientFactory;
import org.apache.cxf.interceptor.Fault;
import org.apache.cxf.interceptor.LoggingInInterceptor;
import org.apache.cxf.interceptor.LoggingOutInterceptor;
import org.apache.cxf.message.Exchange;
import org.apache.cxf.message.Message;
import org.apache.cxf.message.MessageUtils;
import org.apache.cxf.phase.Phase;
import org.apache.cxf.service.model.BindingOperationInfo;
import org.apache.cxf.service.model.EndpointInfo;
import org.apache.cxf.ws.policy.AbstractPolicyInterceptor;
import org.apache.cxf.ws.policy.EffectivePolicy;
import org.apache.cxf.ws.policy.PolicyEngine;
import org.apache.cxf.ws.policy.PolicyException;
import org.apache.cxf.ws.security.policy.model.SignedEncryptedParts;
import org.apache.cxf.ws.security.wss4j.WSS4JOutInterceptor;
import org.apache.neethi.AbstractPolicyOperator;
import org.apache.ws.security.WSConstants;
import org.apache.ws.security.WSPasswordCallback;
import org.apache.ws.security.handler.WSHandlerConstants;
import org.junit.Test;
 
public class SSLAWSWCFCalculatorIssueTestCase {
	protected static Log log = LogFactory.getLog(SSLAWSWCFCalculatorIssueTestCase.class);
 
	public static final String WCF_HOST = ""host"";
	private static final String WSDL_URI_REMOTE = ""http://"" + WCF_HOST
			+ ""/ServiceModelSamples/service.svc?wsdl"";
	/**
	 * Filters for a default WCF_SSLA integration
	 */
	public static final Class<?>[] WCF_SSLA = new Class<?>[] { SignedEncryptedParts.class };
 
	@Test
	public void testOperationsOfSSLClientWithSoapAuthentication() throws Exception {
		QName service = new QName(""http://tempuri.org/"", ""CalculatorService"");
		QName port = new QName(""http://tempuri.org/"", ""SSLCalculatorA"");
 
		Client client = DynamicClientFactory.newInstance().createClient(WSDL_URI_REMOTE, service,
				SSLAWSWCFCalculatorIssueTestCase.class.getClassLoader(), port);
 
		SSLHelper sslHelper = new SSLHelper();
		sslHelper.initialize();
		sslHelper.enable(client);
 
		Bus bus = ((EndpointImpl) client.getEndpoint()).getBus();
		/*
		 * Apply default policy filter in interceptor to filter out the
		 * mandatory signing of body parts. Otherwise CXF policy validation
		 * fails since the response from WCF is not compliant with this
		 */
		bus.getInInterceptors().add(new PolicyFilterOutInterceptor(WCF_SSLA));
		Map<String, Object> outProps = new HashMap<String, Object>();
 
		outProps.put(WSHandlerConstants.ACTION, WSHandlerConstants.USERNAME_TOKEN);
		outProps.put(WSHandlerConstants.USER, ""bart\\myname"");
		outProps.put(WSHandlerConstants.PASSWORD_TYPE, WSConstants.PW_TEXT);
		outProps.put(WSHandlerConstants.MUST_UNDERSTAND, ""true"");
		outProps.put(WSHandlerConstants.PW_CALLBACK_REF, new PasswordHandler(""password""));
 
		bus.getOutInterceptors().add(new JustOnceWSS4JOutInterceptor(outProps));
 
		/*
		 * Add logging interceptors
		 */
		bus.getInInterceptors().add(new LoggingInInterceptor());
		bus.getOutInterceptors().add(new LoggingOutInterceptor());
 
		BindingOperationInfo add = client.getEndpoint().getEndpointInfo().getBinding()
				.getOperation(new QName(""http://Microsoft.ServiceModel.Samples"", ""Add""))
				.getUnwrappedOperation();
		/**
		 * Now call some operations
		 */
		if (log.isDebugEnabled()) {
			log.debug(""Invoking method add"");
		}
		Object[] answer = client.invoke(add, new Object[] { ""1"", ""2"" });
		if (log.isDebugEnabled()) {
			log.debug(""1 + 2 = "" + answer[0]);
		}
		assertEquals(""Add method not correct"", new Double(3.0), answer[0]);
 
		if (log.isDebugEnabled()) {
			log.debug(""Invoking method multiply"");
		}
		BindingOperationInfo multiply = client.getEndpoint().getEndpointInfo().getBinding()
				.getOperation(new QName(""http://Microsoft.ServiceModel.Samples"", ""Multiply""))
				.getUnwrappedOperation();
 
		answer = client.invoke(multiply, new Object[] { ""3"", ""2"" });
		assertEquals(""Multiply method not correct"", new Double(6.0), answer);
		if (log.isDebugEnabled()) {
			log.debug(""3 x 2 = "" + answer);
		}
	}
 
	/**
	 * Handler to get the password
	 */
	public class PasswordHandler implements CallbackHandler {
		private static final String DEFAULT_PASSWORD = ""password"";
		String password;
 
		public PasswordHandler() {
			this.password = DEFAULT_PASSWORD;
		}
 
		public PasswordHandler(String password) {
			this.password = password;
		}
 
		public void handle(Callback[] callbacks) {
			WSPasswordCallback pc = (WSPasswordCallback) callbacks[0];
			pc.setPassword(password);
		}
	}
 
	/**
	 * An WSS4J Interceptor that only includes the security header once, without
	 * this WCF service throws a security exception when username and password
	 * sent along with the SecurityContextToken in the second request
	 */
 
	public class JustOnceWSS4JOutInterceptor extends WSS4JOutInterceptor {
		int count = 0;
 
		/**
		 * @param outProps
		 */
		public JustOnceWSS4JOutInterceptor(Map<String, Object> outProps) {
			super(outProps);
		}
 
		@Override
		public void handleMessage(SoapMessage mc) throws Fault {
			if (count == 0) {
				if (log.isDebugEnabled()) {
					log.debug(""Calling WSS4J interceptor : count = "" + count);
				}
				super.handleMessage(mc);
			} else {
				if (log.isDebugEnabled()) {
					log.debug(""Skipping WSS4J interceptor : count = "" + count);
				}
			}
			count++;
		}
	}
 
	public class PolicyFilterOutInterceptor extends AbstractPolicyInterceptor {
 
		private Class<?>[] filters;
 
		public PolicyFilterOutInterceptor(Class<?>[] filters) {
			super(Phase.PRE_STREAM);
			this.filters = filters;
		}
 
		@Override
		protected void handle(Message message) throws PolicyException {
			if (log.isDebugEnabled()) {
				log.debug(""Filtering policies for "" + this.getClass().getName());
			}
 
			Exchange exchange = message.getExchange();
			BindingOperationInfo boi = exchange.get(BindingOperationInfo.class);
			if (null == boi) {
				if (log.isDebugEnabled()) {
					log.debug(""No binding operation info."");
				}
				return;
			}
 
			Endpoint e = exchange.get(Endpoint.class);
			if (null == e) {
				if (log.isDebugEnabled()) {
					log.debug(""No endpoint."");
				}
				return;
			}
			EndpointInfo ei = e.getEndpointInfo();
 
			Bus bus = exchange.get(Bus.class);
			PolicyEngine pe = bus.getExtension(PolicyEngine.class);
			if (null == pe) {
				return;
			}
 
			if (MessageUtils.isPartialResponse(message)) {
				if (log.isDebugEnabled()) {
					log.debug(""Not verifying policies on inbound partial response."");
				}
				return;
			}
 
			getTransportAssertions(message);
 
			EffectivePolicy effectivePolicy = message.get(EffectivePolicy.class);
			if (effectivePolicy == null) {
				if (MessageUtils.isRequestor(message)) {
					effectivePolicy = pe.getEffectiveClientResponsePolicy(ei, boi);
				} else {
					effectivePolicy = pe.getEffectiveServerRequestPolicy(ei, boi);
				}
			}
 
			removePolicies(effectivePolicy.getPolicy(), filters);
		}
 
		public void removePolicy(AbstractPolicyOperator operator, Class<?> clazz) {
			removePolicies(operator, new Class<?>[] { clazz });
		}
 
		@SuppressWarnings(""unchecked"")
		public void removePolicies(AbstractPolicyOperator operator, Class<?>[] classes) {
			List<Object> childrenForRemoval = new ArrayList<Object>();
 
			for (Object child : operator.getPolicyComponents()) {
				if (child instanceof AbstractPolicyOperator) {
					removePolicies((AbstractPolicyOperator) child, classes);
				} else {
					for (int i = 0; i < classes.length; i++) {
						if (child.getClass() == classes[i]) {
							childrenForRemoval.add(child);
							if (log.isDebugEnabled()) {
								log.debug(""Removing policy : "" + child);
							}
						}
					}
				}
			}
 
			/*
			 * Remove all the children that have been marked for removal
			 */
			operator.getPolicyComponents().removeAll(childrenForRemoval);
		}
	}
}

[edit] WCF Exception

<Exception>
<ExceptionType>System.ServiceModel.Security.MessageSecurityException, System.ServiceModel, Version=3.0.0.0, Culture=neutral, 
PublicKeyToken=b77a5c561934e089</ExceptionType>
<Message>Cannot resolve KeyInfo for verifying signature: KeyInfo 'SecurityKeyIdentifier
   (
   IsReadOnly = False,
   Count = 1,
   Clause[0] = LocalIdKeyIdentifierClause(LocalId = 'urn:uuid:67422cf9-69c5-4e15-802d-4c6d39cdc57d', Owner = 'System.ServiceModel.Security.Tokens.SecurityContextSecurityToken')
   )
', available tokens 'SecurityTokenResolver
   (
   TokenCount = 1,
   TokenEntry[0] = (AllowedReferenceStyle=Internal, Token=System.ServiceModel.Security.Tokens.SecurityContextSecurityToken, 
Parameters=System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenParameters:
InclusionMode: AlwaysToRecipient
ReferenceStyle: Internal
RequireDerivedKeys: False
RequireCancellation: True
BootstrapSecurityBindingElement:
 System.ServiceModel.Channels.TransportSecurityBindingElement:
 DefaultAlgorithmSuite: Basic256
 IncludeTimestamp: True
 KeyEntropyMode: CombinedEntropy
 MessageSecurityVersion: WSSecurity11WSTrustFebruary2005WSSecureConversationFebruary2005WSSecurityPolicy11BasicSecurityProfile10
 SecurityHeaderLayout: Strict
 EndpointSupportingTokenParameters:
   No endorsing tokens.
   No signed tokens.
   SignedEncrypted[0]
     System.ServiceModel.Security.Tokens.UserNameSecurityTokenParameters:
     InclusionMode: AlwaysToRecipient
     ReferenceStyle: Internal
     RequireDerivedKeys: False
   No signed endorsing tokens.
 OptionalEndpointSupportingTokenParameters:
   No endorsing tokens.
   No signed tokens.
   No signed encrypted tokens.
   No signed endorsing tokens.
 OperationSupportingTokenParameters: none
 OptionalOperationSupportingTokenParameters: none)
   )
'.</Message>
<StackTrace>
at System.ServiceModel.Security.WSSecurityOneDotZeroReceiveSecurityHeader.ResolveSignatureToken(SecurityKeyIdentifier 
keyIdentifier, SecurityTokenResolver resolver, Boolean isPrimarySignature)
at System.ServiceModel.Security.WSSecurityOneDotZeroReceiveSecurityHeader.VerifySignature(SignedXml signedXml, Boolean isPrimarySignature, SecurityHeaderTokenResolver resolver, Object signatureTarget, String id)
at System.ServiceModel.Security.ReceiveSecurityHeader.ProcessSupportingSignature(SignedXml signedXml, Boolean isFromDecryptedSource)
at System.ServiceModel.Security.ReceiveSecurityHeader.ExecuteFullPass(XmlDictionaryReader reader)
at System.ServiceModel.Security.ReceiveSecurityHeader.Process(TimeSpan timeout)
at System.ServiceModel.Security.AcceptorSessionSymmetricTransportSecurityProtocol.VerifyIncomingMessageCore(Message&amp; message, TimeSpan timeout)
at System.ServiceModel.Security.TransportSecurityProtocol.VerifyIncomingMessage(Message&amp; message, TimeSpan timeout)
at System.ServiceModel.Security.SecurityProtocol.VerifyIncomingMessage(Message&amp; message, TimeSpan timeout, SecurityProtocolCorrelationState[] correlationStates)
at System.ServiceModel.Security.SecuritySessionServerSettings.ServerSecuritySessionChannel.ProcessRequestContext(RequestContext requestContext, TimeSpan timeout, SecurityProtocolCorrelationState&amp; correlationState, Boolean&amp; isSecurityProcessingFailure)
at System.ServiceModel.Security.SecuritySessionServerSettings.ServerSecuritySessionChannel.ReceiveRequestAsyncResult.WaitComplete()
at System.ServiceModel.Security.SecuritySessionServerSettings.ServerSecuritySessionChannel.ReceiveRequestAsyncResult..ctor(ServerSecuritySessionChannel channel, TimeSpan timeout, AsyncCallback callback, Object state)
at System.ServiceModel.Security.SecuritySessionServerSettings.ServerSecuritySessionChannel.BeginTryReceiveRequest(TimeSpan timeout, AsyncCallback callback, Object state)
at System.ServiceModel.Dispatcher.ReplyChannelBinder.BeginTryReceive(TimeSpan timeout, AsyncCallback callback, Object state)
at System.ServiceModel.Dispatcher.ErrorHandlingReceiver.BeginTryReceive(TimeSpan timeout, AsyncCallback callback, Object state)
at System.ServiceModel.Dispatcher.ChannelHandler.EnsurePump()
at System.ServiceModel.Dispatcher.ChannelHandler.OpenAndEnsurePump()
at System.ServiceModel.Channels.IOThreadScheduler.CriticalHelper.WorkItem.Invoke2()
at System.Security.SecurityContext.Run(SecurityContext securityContext, ContextCallback callback, Object state)
at System.ServiceModel.Channels.IOThreadScheduler.CriticalHelper.WorkItem.Invoke()
at System.ServiceModel.Channels.IOThreadScheduler.CriticalHelper.ProcessCallbacks()
at System.ServiceModel.Channels.IOThreadScheduler.CriticalHelper.CompletionCallback(Object state)
at System.ServiceModel.Channels.IOThreadScheduler.CriticalHelper.ScheduledOverlapped.IOCallback(UInt32 errorCode, UInt32 numBytes, NativeOverlapped* nativeOverlapped)
at System.ServiceModel.Diagnostics.Utility.IOCompletionThunk.UnhandledExceptionFrame(UInt32 error, UInt32 bytesRead, NativeOverlapped* nativeOverlapped)
at System.Threading._IOCompletionCallback.PerformIOCompletionCallback(UInt32 errorCode, UInt32 numBytes, NativeOverlapped* pOVERLAP)
</StackTrace>
<ExceptionString>System.ServiceModel.Security.MessageSecurityException: Cannot resolve KeyInfo for verifying signature: KeyInfo 'SecurityKeyIdentifier
   (
   IsReadOnly = False,
   Count = 1,
   Clause[0] = LocalIdKeyIdentifierClause(LocalId = 'urn:uuid:67422cf9-69c5-4e15-802d-4c6d39cdc57d', Owner = 'System.ServiceModel.Security.Tokens.SecurityContextSecurityToken')
   )
', available tokens 'SecurityTokenResolver
   (
   TokenCount = 1,
   TokenEntry[0] = (AllowedReferenceStyle=Internal, Token=System.ServiceModel.Security.Tokens.SecurityContextSecurityToken, Parameters=System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenParameters:
InclusionMode: AlwaysToRecipient
ReferenceStyle: Internal
RequireDerivedKeys: False
RequireCancellation: True
BootstrapSecurityBindingElement:
 System.ServiceModel.Channels.TransportSecurityBindingElement:
 DefaultAlgorithmSuite: Basic256
 IncludeTimestamp: True
 KeyEntropyMode: CombinedEntropy
 MessageSecurityVersion: WSSecurity11WSTrustFebruary2005WSSecureConversationFebruary2005WSSecurityPolicy11BasicSecurityProfile10
 SecurityHeaderLayout: Strict
 EndpointSupportingTokenParameters:
   No endorsing tokens.
   No signed tokens.
   SignedEncrypted[0]
     System.ServiceModel.Security.Tokens.UserNameSecurityTokenParameters:
     InclusionMode: AlwaysToRecipient
     ReferenceStyle: Internal
     RequireDerivedKeys: False
   No signed endorsing tokens.
 OptionalEndpointSupportingTokenParameters:
   No endorsing tokens.
   No signed tokens.
   No signed encrypted tokens.
   No signed endorsing tokens.
 OperationSupportingTokenParameters: none
 OptionalOperationSupportingTokenParameters: none)
   )
'.</ExceptionString>
</Exception>

[edit] WCF Client with WCF Server
[edit] WCF Client Request 1

<s:Envelope xmlns:s=""http://www.w3.org/2003/05/soap-envelope"" xmlns:a=""http://www.w3.org/2005/08/addressing"" 
        xmlns:u=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"">
    <s:Header>
        <a:Action s:mustUnderstand=""1"">http://schemas.xmlsoap.org/ws/2005/02/trust/RST/SCT</a:Action>
        <a:MessageID>urn:uuid:8151f398-b043-485e-a443-681fb698d334</a:MessageID>
        <a:ReplyTo>
            <a:Address>http://www.w3.org/2005/08/addressing/anonymous</a:Address>
        </a:ReplyTo>
        <a:To s:mustUnderstand=""1"">https://host/servicemodelsamples/service.svc/SSLA</a:To>
        <o:Security s:mustUnderstand=""1"" xmlns:o=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"">
            <u:Timestamp u:Id=""_0"">
                <u:Created>2009-04-06T08:25:00.988Z</u:Created>
                <u:Expires>2009-04-06T08:30:00.988Z</u:Expires>
            </u:Timestamp>
            <o:UsernameToken u:Id=""uuid-0403819d-3bc9-4fc8-be6f-0c1b01da7397-1"">
                <o:Username>
                    <!-- Removed-->
                </o:Username>
                <o:Password>
                    <!-- Removed-->
                </o:Password>
            </o:UsernameToken>
        </o:Security>
    </s:Header>
    <s:Body>
        <t:RequestSecurityToken xmlns:t=""http://schemas.xmlsoap.org/ws/2005/02/trust"">
            <t:TokenType>http://schemas.xmlsoap.org/ws/2005/02/sc/sct</t:TokenType>
            <t:RequestType>http://schemas.xmlsoap.org/ws/2005/02/trust/Issue</t:RequestType>
            <t:Entropy>
                <!-- Removed-->
            </t:Entropy>
            <t:KeySize>256</t:KeySize>
        </t:RequestSecurityToken>
    </s:Body>
</s:Envelope>

[edit] WCF Client Response from Server 1

<s:Envelope xmlns:s=""http://www.w3.org/2003/05/soap-envelope"" xmlns:a=""http://www.w3.org/2005/08/addressing"" 
xmlns:u=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"">
    <s:Header>
        <a:Action s:mustUnderstand=""1"">http://schemas.xmlsoap.org/ws/2005/02/trust/RSTR/SCT</a:Action>
        <a:RelatesTo>urn:uuid:4f4996b9-4d71-47d8-91b8-ba75df9b3de6</a:RelatesTo>
        <o:Security s:mustUnderstand=""1"" xmlns:o=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"">
            <u:Timestamp u:Id=""_0"">
                <u:Created>2009-04-06T08:59:01.713Z</u:Created>
                <u:Expires>2009-04-06T09:04:01.713Z</u:Expires>
            </u:Timestamp>
        </o:Security>
    </s:Header>
    <s:Body>
        <t:RequestSecurityTokenResponse xmlns:t=""http://schemas.xmlsoap.org/ws/2005/02/trust"">
            <t:TokenType>http://schemas.xmlsoap.org/ws/2005/02/sc/sct</t:TokenType>
            <t:RequestedSecurityToken>
                <c:SecurityContextToken u:Id=""uuid-75ea67a3-c521-4a6c-8fff-f23ff9e793bc-1"" xmlns:c=""http://schemas.xmlsoap.org/ws/2005/02/sc"">
                    <c:Identifier>urn:uuid:33b535ab-9f44-431a-87c9-0d1cf8c71d8e</c:Identifier>
                </c:SecurityContextToken>
            </t:RequestedSecurityToken>
            <t:RequestedAttachedReference>
                <o:SecurityTokenReference xmlns:o=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"">
                    <o:Reference ValueType=""http://schemas.xmlsoap.org/ws/2005/02/sc/sct"" URI=""#uuid-75ea67a3-c521-4a6c-8fff-f23ff9e793bc-1""></o:Reference>
                </o:SecurityTokenReference>
            </t:RequestedAttachedReference>
            <t:RequestedUnattachedReference>
                <o:SecurityTokenReference xmlns:o=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"">
                    <o:Reference URI=""urn:uuid:33b535ab-9f44-431a-87c9-0d1cf8c71d8e"" ValueType=""http://schemas.xmlsoap.org/ws/2005/02/sc/sct""></o:Reference>
                </o:SecurityTokenReference>
            </t:RequestedUnattachedReference>
            <t:RequestedProofToken>
                <t:ComputedKey>http://schemas.xmlsoap.org/ws/2005/02/trust/CK/PSHA1</t:ComputedKey>
            </t:RequestedProofToken>
            <t:Entropy>
                <!-- Removed-->
            </t:Entropy>
            <t:Lifetime>
                <u:Created>2009-04-06T08:59:01.701Z</u:Created>
                <u:Expires>2009-04-06T23:59:01.701Z</u:Expires>
            </t:Lifetime>
            <t:KeySize>256</t:KeySize>
        </t:RequestSecurityTokenResponse>
    </s:Body>
</s:Envelope>

[edit] WCF Client Request 2

<s:Envelope xmlns:s=""http://www.w3.org/2003/05/soap-envelope"" xmlns:a=""http://www.w3.org/2005/08/addressing"" 
xmlns:u=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"">
    <s:Header>
        <a:Action s:mustUnderstand=""1"">http://Microsoft.ServiceModel.Samples/ICalculator/Add</a:Action>
        <a:MessageID>urn:uuid:3363fc9e-17e1-4e15-a0dc-ef56d63fa541</a:MessageID>
        <a:ReplyTo>
            <a:Address>http://www.w3.org/2005/08/addressing/anonymous</a:Address>
        </a:ReplyTo>
        <a:To s:mustUnderstand=""1"">https://host/servicemodelsamples/service.svc/SSLA</a:To>
        <o:Security s:mustUnderstand=""1"" xmlns:o=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"">
            <u:Timestamp u:Id=""_0"">
                <u:Created>2009-04-06T08:59:01.737Z</u:Created>
                <u:Expires>2009-04-06T09:04:01.737Z</u:Expires>
            </u:Timestamp>
            <c:SecurityContextToken u:Id=""uuid-75ea67a3-c521-4a6c-8fff-f23ff9e793bc-1"" xmlns:c=""http://schemas.xmlsoap.org/ws/2005/02/sc"">
                <c:Identifier>urn:uuid:33b535ab-9f44-431a-87c9-0d1cf8c71d8e</c:Identifier>
            </c:SecurityContextToken>
            <Signature xmlns=""http://www.w3.org/2000/09/xmldsig#"">
                <SignedInfo>
                    <CanonicalizationMethod Algorithm=""http://www.w3.org/2001/10/xml-exc-c14n#""></CanonicalizationMethod>
                    <SignatureMethod Algorithm=""http://www.w3.org/2000/09/xmldsig#hmac-sha1""></SignatureMethod>
                    <Reference URI=""#_0"">
                        <Transforms>
                            <Transform Algorithm=""http://www.w3.org/2001/10/xml-exc-c14n#""></Transform>
                        </Transforms>
                        <DigestMethod Algorithm=""http://www.w3.org/2000/09/xmldsig#sha1""></DigestMethod>
                        <DigestValue>2VuDOwhOC2mm4YhQJEAzutsXuiU=</DigestValue>
                    </Reference>
                </SignedInfo>
                <SignatureValue>AZzmujJH/wkgEzq9jopInPW3exQ=</SignatureValue>
                <KeyInfo>
                    <o:SecurityTokenReference>
                        <o:Reference ValueType=""http://schemas.xmlsoap.org/ws/2005/02/sc/sct"" URI=""#uuid-75ea67a3-c521-4a6c-8fff-f23ff9e793bc-1""></o:Reference>
                    </o:SecurityTokenReference>
                </KeyInfo>
            </Signature>
        </o:Security>
    </s:Header>
    <s:Body>
        <Add xmlns=""http://Microsoft.ServiceModel.Samples"">
            <n1>100</n1>
            <n2>15.99</n2>
        </Add>
    </s:Body>
</s:Envelope>

[edit] WCF Client Response from Server 2

<s:Envelope xmlns:s=""http://www.w3.org/2003/05/soap-envelope"" xmlns:a=""http://www.w3.org/2005/08/addressing"" 
xmlns:u=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"">
    <s:Header>
        <a:Action s:mustUnderstand=""1"">http://Microsoft.ServiceModel.Samples/ICalculator/AddResponse</a:Action>
        <a:RelatesTo>urn:uuid:3363fc9e-17e1-4e15-a0dc-ef56d63fa541</a:RelatesTo>
        <o:Security s:mustUnderstand=""1"" xmlns:o=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"">
            <u:Timestamp u:Id=""_0"">
                <u:Created>2009-04-06T08:59:01.773Z</u:Created>
                <u:Expires>2009-04-06T09:04:01.773Z</u:Expires>
            </u:Timestamp>
        </o:Security>
    </s:Header>
    <s:Body>
        <AddResponse xmlns=""http://Microsoft.ServiceModel.Samples"">
            <AddResult>115.99</AddResult>
        </AddResponse>
    </s:Body>
</s:Envelope>

[edit] CXF Client with WCF Server
[edit] CXF Client Request 1

<soap:Envelope xmlns:soap=""http://www.w3.org/2003/05/soap-envelope"">
	<soap:Header>
		<Action xmlns=""http://www.w3.org/2005/08/addressing"">
			http://schemas.xmlsoap.org/ws/2005/02/trust/RST/SCT</Action>
		<MessageID xmlns=""http://www.w3.org/2005/08/addressing"">
			urn:uuid:ee3fd188-2a43-4d0e-b202-aac81f803bc5</MessageID>
		<To xmlns=""http://www.w3.org/2005/08/addressing"">
			https://host/ServiceModelSamples/service.svc/SSLA</To>
		<ReplyTo xmlns=""http://www.w3.org/2005/08/addressing"">
			<Address>http://www.w3.org/2005/08/addressing/anonymous
			</Address>
		</ReplyTo>
		<wsse:Security
			xmlns:wsse=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd""
			soap:mustUnderstand=""true"">
			<wsu:Timestamp
				xmlns:wsu=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd""
				wsu:Id=""Timestamp-1763636894"">
				<wsu:Created>2009-04-06T10:00:47.466Z
				</wsu:Created>
				<wsu:Expires>2009-04-06T10:05:47.466Z
				</wsu:Expires>
			</wsu:Timestamp>
			<wsse:UsernameToken
				xmlns:wsse=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd""
				xmlns:wsu=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd""
				wsu:Id=""UsernameToken-2095036283"">
				<wsse:Username>bart\myuser</wsse:Username>
				<wsse:Password
					Type=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText"">password</wsse:Password>
			</wsse:UsernameToken>
		</wsse:Security>
	</soap:Header>
	<soap:Body>
		<wst:RequestSecurityToken
			xmlns:wst=""http://schemas.xmlsoap.org/ws/2005/02/trust"">
			<wst:RequestType>http://schemas.xmlsoap.org/ws/2005/02/trust/Issue
			</wst:RequestType>
			<wsp:AppliesTo xmlns:wsp=""http://schemas.xmlsoap.org/ws/2004/09/policy"">
				<wsa:EndpointReference xmlns:wsa=""http://www.w3.org/2005/08/addressing"">
					<wsa:Address>
						https://host/ServiceModelSamples/service.svc/SSLA
					</wsa:Address>
				</wsa:EndpointReference>
			</wsp:AppliesTo>
			<wst:Lifetime>
				<wsu:Created
					xmlns:wsu=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"">2009-04-06T10:00:46.692Z
				</wsu:Created>
				<wsu:Expires
					xmlns:wsu=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"">2009-04-06T10:05:46.692Z
				</wsu:Expires>
			</wst:Lifetime>
			<wst:TokenType>http://schemas.xmlsoap.org/ws/2005/02/sc/sct
			</wst:TokenType>
			<wst:Entropy>
				<wst:BinarySecret
					Type=""http://schemas.xmlsoap.org/ws/2005/02/trust/Nonce"">7pPJRu/vrIfSeAzoq48kAd+55khFFbU/sLw0PeYkIKA=
				</wst:BinarySecret>
			</wst:Entropy>
			<wst:ComputedKeyAlgorithm>
				http://schemas.xmlsoap.org/ws/2005/02/trust/CK/PSHA1
			</wst:ComputedKeyAlgorithm>
		</wst:RequestSecurityToken>
	</soap:Body>
</soap:Envelope>

[edit] CXF Client Response from Server 1

<s:Envelope xmlns:s=""http://www.w3.org/2003/05/soap-envelope""
	xmlns:a=""http://www.w3.org/2005/08/addressing""
	xmlns:u=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"">
	<s:Header>
		<a:Action s:mustUnderstand=""1"">
			http://schemas.xmlsoap.org/ws/2005/02/trust/RSTR/SCT</a:Action>
		<a:RelatesTo>urn:uuid:ee3fd188-2a43-4d0e-b202-aac81f803bc5
		</a:RelatesTo>
		<o:Security s:mustUnderstand=""1""
			xmlns:o=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"">
			<u:Timestamp u:Id=""_0"">
				<u:Created>2009-04-06T10:00:28.212Z
				</u:Created>
				<u:Expires>2009-04-06T10:05:28.212Z
				</u:Expires>
			</u:Timestamp>
		</o:Security>
	</s:Header>
	<s:Body>
		<t:RequestSecurityTokenResponse
			xmlns:t=""http://schemas.xmlsoap.org/ws/2005/02/trust"">
			<t:TokenType>http://schemas.xmlsoap.org/ws/2005/02/sc/sct
			</t:TokenType>
			<t:RequestedSecurityToken>
				<c:SecurityContextToken
					u:Id=""uuid-e19e1759-7ef7-452b-9055-17ed4b15114c-3"" xmlns:c=""http://schemas.xmlsoap.org/ws/2005/02/sc"">
					<c:Identifier>urn:uuid:cc05aea2-c53b-417e-9527-5d81102d6b20
					</c:Identifier>
				</c:SecurityContextToken>
			</t:RequestedSecurityToken>
			<wsp:AppliesTo xmlns:wsp=""http://schemas.xmlsoap.org/ws/2004/09/policy"">
				<EndpointReference xmlns=""http://www.w3.org/2005/08/addressing"">
					<Address>
						https://host/ServiceModelSamples/service.svc/SSLA
					</Address>
				</EndpointReference>
			</wsp:AppliesTo>
			<t:RequestedAttachedReference>
				<o:SecurityTokenReference
					xmlns:o=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"">
					<o:Reference ValueType=""http://schemas.xmlsoap.org/ws/2005/02/sc/sct""
						URI=""#uuid-e19e1759-7ef7-452b-9055-17ed4b15114c-3""></o:Reference>
				</o:SecurityTokenReference>
			</t:RequestedAttachedReference>
			<t:RequestedUnattachedReference>
				<o:SecurityTokenReference
					xmlns:o=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"">
					<o:Reference URI=""urn:uuid:cc05aea2-c53b-417e-9527-5d81102d6b20""
						ValueType=""http://schemas.xmlsoap.org/ws/2005/02/sc/sct""></o:Reference>
				</o:SecurityTokenReference>
			</t:RequestedUnattachedReference>
			<t:RequestedProofToken>
				<t:ComputedKey>http://schemas.xmlsoap.org/ws/2005/02/trust/CK/PSHA1
				</t:ComputedKey>
			</t:RequestedProofToken>
			<t:Entropy>
				<t:BinarySecret u:Id=""uuid-e19e1759-7ef7-452b-9055-17ed4b15114c-4""
					Type=""http://schemas.xmlsoap.org/ws/2005/02/trust/Nonce"">f6m4wEJy9gPMttOxzM+7yf1i5biWxbNaBfbx1sWvVPw=
				</t:BinarySecret>
			</t:Entropy>
			<t:Lifetime>
				<u:Created>2009-04-06T10:00:28.208Z
				</u:Created>
				<u:Expires>2009-04-07T01:00:28.208Z
				</u:Expires>
			</t:Lifetime>
			<t:KeySize>256</t:KeySize>
		</t:RequestSecurityTokenResponse>
	</s:Body>
</s:Envelope>

[edit] CXF Client Request 2

<soap:Envelope xmlns:soap=""http://www.w3.org/2003/05/soap-envelope"">
	<soap:Header>
		<Action xmlns=""http://www.w3.org/2005/08/addressing"">
			http://Microsoft.ServiceModel.Samples/ICalculator/Add</Action>
		<MessageID xmlns=""http://www.w3.org/2005/08/addressing"">
			urn:uuid:b879526c-68c1-4713-8912-6ee23264715f</MessageID>
		<To xmlns=""http://www.w3.org/2005/08/addressing"">
			https://host/ServiceModelSamples/service.svc/SSLA</To>
		<ReplyTo xmlns=""http://www.w3.org/2005/08/addressing"">
			<Address>http://www.w3.org/2005/08/addressing/anonymous
			</Address>
		</ReplyTo>
		<wsse:Security
			xmlns:wsse=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd""
			soap:mustUnderstand=""true"">
			<wsu:Timestamp
				xmlns:wsu=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd""
				wsu:Id=""Timestamp-937741416"">
				<wsu:Created>2009-04-06T10:00:48.903Z
				</wsu:Created>
				<wsu:Expires>2009-04-06T10:05:48.903Z
				</wsu:Expires>
			</wsu:Timestamp>
			<c:SecurityContextToken xmlns:c=""http://schemas.xmlsoap.org/ws/2005/02/sc""
				xmlns:u=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd""
				u:Id=""uuid-e19e1759-7ef7-452b-9055-17ed4b15114c-3"">
				<c:Identifier>urn:uuid:cc05aea2-c53b-417e-9527-5d81102d6b20
				</c:Identifier>
			</c:SecurityContextToken>
			<ds:Signature xmlns:ds=""http://www.w3.org/2000/09/xmldsig#""
				Id=""Signature-1670444352"">
				<ds:SignedInfo>
					<ds:CanonicalizationMethod
						Algorithm=""http://www.w3.org/2001/10/xml-exc-c14n#"" />
					<ds:SignatureMethod Algorithm=""http://www.w3.org/2000/09/xmldsig#hmac-sha1"" />
					<ds:Reference URI=""#Timestamp-937741416"">
						<ds:Transforms>
							<ds:Transform Algorithm=""http://www.w3.org/2001/10/xml-exc-c14n#"" />
						</ds:Transforms>
						<ds:DigestMethod Algorithm=""http://www.w3.org/2000/09/xmldsig#sha1"" />
						<ds:DigestValue>/gRfeAVaxWCey/0KWfXh4VDIdGA=
						</ds:DigestValue>
					</ds:Reference>
				</ds:SignedInfo>
				<ds:SignatureValue>rhEDDQNJHxAKgsBz5ZVPma1TkeY=
				</ds:SignatureValue>
				<ds:KeyInfo Id=""KeyId-451036744"">
					<wsse:SecurityTokenReference
						xmlns:wsse=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd""
						xmlns:wsu=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd""
						wsu:Id=""STRId-187592160"">
						<wsse:Reference
							xmlns:wsse=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd""
							URI=""#urn:uuid:cc05aea2-c53b-417e-9527-5d81102d6b20"" ValueType=""http://schemas.xmlsoap.org/ws/2005/02/sc/sct"" />
					</wsse:SecurityTokenReference>
				</ds:KeyInfo>
			</ds:Signature>
		</wsse:Security>
	</soap:Header>
	<soap:Body>
		<ns1:Add xmlns:ns1=""http://Microsoft.ServiceModel.Samples"">
			<ns1:n1 xmlns:ns2=""http://schemas.microsoft.com/2003/10/Serialization/""
				xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
				xsi:type=""xs:string"">1</ns1:n1>
			<ns1:n2 xmlns:ns2=""http://schemas.microsoft.com/2003/10/Serialization/""
				xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
				xsi:type=""xs:string"">2</ns1:n2>
		</ns1:Add>
	</soap:Body>
</soap:Envelope>

[edit] CXF Client Response from Server 2

<s:Envelope xmlns:s=""http://www.w3.org/2003/05/soap-envelope""
	xmlns:a=""http://www.w3.org/2005/08/addressing"">
	<s:Header>
		<a:Action s:mustUnderstand=""1"">
			http://www.w3.org/2005/08/addressing/soap/fault</a:Action>
		<a:RelatesTo>urn:uuid:c20c8ac5-3e6d-4189-8db8-97dda22f7cdc
		</a:RelatesTo>
	</s:Header>
	<s:Body>
		<s:Fault>
			<s:Code>
				<s:Value>s:Sender</s:Value>
				<s:Subcode>
					<s:Value
						xmlns:a=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"">a:InvalidSecurity</s:Value>
				</s:Subcode>
			</s:Code>
			<s:Reason>
				<s:Text xml:lang=""en-GB"">An error occurred when verifying security
					for the message.</s:Text>
			</s:Reason>
		</s:Fault>
	</s:Body>
</s:Envelope>

[edit] Analysis

CXF client sends the following on request 2 with the URI attribute of the Reference element equal to the element content of the Identifier element.

<c:SecurityContextToken u:Id=""uuid-e19e1759-7ef7-452b-9055-17ed4b15114c-3"">
	<c:Identifier>urn:uuid:cc05aea2-c53b-417e-9527-5d81102d6b20</c:Identifier>
</c:SecurityContextToken>
...
<ds:KeyInfo Id=""KeyId-451036744"">
	<wsse:SecurityTokenReference>
		<wsse:Reference
			URI=""#urn:uuid:cc05aea2-c53b-417e-9527-5d81102d6b20"" 
			ValueType=""http://schemas.xmlsoap.org/ws/2005/02/sc/sct"" />
	</wsse:SecurityTokenReference>
</ds:KeyInfo>

however, the WCF client sends the following for its second request with the URI element of the Reference element equal to the Id attribute of the SecurityContextToken element

<c:SecurityContextToken u:Id=""uuid-75ea67a3-c521-4a6c-8fff-f23ff9e793bc-1"" xmlns:c=""http://schemas.xmlsoap.org/ws/2005/02/sc"">
    <c:Identifier>urn:uuid:33b535ab-9f44-431a-87c9-0d1cf8c71d8e</c:Identifier>
</c:SecurityContextToken>
...
<KeyInfo>
    <o:SecurityTokenReference>
        <o:Reference 
                ValueType=""http://schemas.xmlsoap.org/ws/2005/02/sc/sct"" 
                URI=""#uuid-75ea67a3-c521-4a6c-8fff-f23ff9e793bc-1""></o:Reference>
    </o:SecurityTokenReference>
</KeyInfo>

If the following change is made in the org.apache.cxf.ws.security.wss4j.policyhandler.TransportBindingHandler:

CXF trunk 2.2 version

sig.setCustomTokenId(secTok.getId());

changed to

Node firstChild = securityToken.getAttachedReference().getFirstChild();
Attr referenceUriAttribute = (Attr) firstChild.getAttributes().getNamedItem(""URI"");
String referenceUri = referenceUriAttribute.getValue().substring(1);
sig.setCustomTokenId(referenceUri)

then the CXF client communicates with the WCF server successfully. It is not expected that this is the correct place for the fix, since there are other places in the CXF source which set the custom token id on the signature. It is more likely that a correction is required earlier in the logic such that security token allows the id reference (i.e. the Reference URI) to be set correctly and made available for configuring in the signature. ",Java(TM) SE Runtime Environment (build 1.6.0_07-b06-153) - MacOS 10.5 and Windows Vista,,,,,,,,,,,,,,,,06/Apr/09 16:05;ian.homer;CalculatorService1339.wsdl;https://issues.apache.org/jira/secure/attachment/12404741/CalculatorService1339.wsdl,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113607,,,Mon Apr 06 16:42:46 UTC 2009,,,,,,0|i13zmn:,231402,,,,,,,,06/Apr/09 16:05;ian.homer;WSDL for WCF service,"06/Apr/09 16:29;ian.homer;Raised question on CXF user group on how best to send the username token once @ http://www.nabble.com/WCF-Service-not-accepting-UsernameToken-in-security-header-along-with-SecurityContextToken-sent-by-CXF-client-td22912335.html - this is to discuss the work around applied in the test case with

  bus.getOutInterceptors().add(new JustOnceWSS4JOutInterceptor(outProps)); ","06/Apr/09 16:42;ian.homer;Raised question on CXF user group on the failure with service response not having the body signed @ http://www.nabble.com/SignedParts-policy-alternatives-can-not-be-satisfied-in-response-from-WCF-server-to-CXF-client-td22912577.html - this is discuss the work around in the test case above with ...

  bus.getInInterceptors().add(new PolicyFilterOutInterceptor(WCF_SSLA)); 
",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Certain Spring AOP proxies cannot be used any more as service bean since CXF 2.1.4 because the real (non-proxy) target class is not found correctly by SpringAopClassHelper,CXF-2152,12421977,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,orbang,orbang,03/Apr/09 14:45,24/Apr/09 21:17,14/Mar/19 02:29,03/Apr/09 21:02,2.1.4,,,,,,,,,,,,,,2.0.11,2.1.5,2.2.1,,JAX-WS Runtime,,,,,,0,,,,"This issue has come up because of a change in SpringAopClassHelper. There are two ways of creating a proxy with org.springframework.aop.framework.ProxyFactory: either by setting the target instance using the setTarget method, or using the setTargetClass method. If the latter is used, Advised.getTargetSource().getTarget() will return null, because no target instance exists. The former implementation of SpringAopClassHelper used AopUtils.getTargetClass, which handled the latter case correctly. Although the current implementation still uses AopUtils.getTargetClass, it never gets executed. Please find the patch attached that handles both types of aop proxies for us.",,,,,,,,,,,,,,,,,03/Apr/09 14:45;orbang;SpringAopClassHelper.patch;https://issues.apache.org/jira/secure/attachment/12404551/SpringAopClassHelper.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113603,,,2009-04-03 14:45:28.0,,,,,,0|i0v1rz:,179261,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Policy interceptors not added if they only apply to BindingOperationInfo,CXF-2151,12421973,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,dph,dph,03/Apr/09 13:26,24/Apr/09 21:17,14/Mar/19 02:29,03/Apr/09 19:02,2.2,,,,,,,,,,,,,,2.2.1,,,,WS-* Components,,,,,,0,,,,"When a policy interceptor is is needed for a policy that only applies to operations (not to the endpoint OR faults), it is not added to the interceptor chain.",,,,,,,,,,,,,,,,,03/Apr/09 13:29;dph;ws_policy.patch;https://issues.apache.org/jira/secure/attachment/12404542/ws_policy.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113602,,,Fri Apr 03 13:29:27 UTC 2009,,,,,,0|i13zjr:,231389,,,,,,,,"03/Apr/09 13:29;dph;This patch builds on one supplied by dkulp.

Please include ""from University of Southampton IT Innovation Centre"" in the change log.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Web service provider using UsernameToken profile should throw an exception if SOAP client's password type <> web service provider's.,CXF-2150,12421935,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,gmazza,gmazza,03/Apr/09 00:36,29/Nov/10 17:21,14/Mar/19 02:29,10/Dec/09 21:32,2.1.4,,,,,,,,,,,,,,2.1.9,2.2.6,,,WS-* Components,,,,,,1,,,,"For WS-Security w/UsernameToken profile (standard method[1], have not tested the WS-SecurityPolicy version with CXF 2.2), the web service provider is not checking whether the password type being supplied by the client (PW_DIGEST or PW_TEXT) matches the type that the web service provider is defined to handle in the cxf-servlet.xml file (""PasswordDigest"" or ""PasswordText"").  This creates a security problem because PW_TEXT and PW_DIGEST are handled  very differently[2] on the service side:  for the former, the ServiceCallbackHandler validates the password, for the latter, the WSS4J/CXF runtime does, all the ServiceCallbackHandler does is supply the correct password to validate the client's value against.

Security hole:  If the web service provider is programmed to accept DIGEST, that means its service-side callback handler will be supplying the correct password and will not do any validation or throw any exceptions.  If the SOAP client sends a PW_TEXT value with *any* password, the DIGEST-designed ServiceCallbackHandler will still be called but it won't throw any exceptions--i.e., the SOAP call will wrongfully complete and return an answer to the client.

CXF needs to throw an exception if the SOAP client's password type <> the web service providers.

Client side (see [1] for source code):
        outProps.put(WSHandlerConstants.PASSWORD_TYPE, WSConstants.PW_TEXT);

Service's cxf-servlet.xml:
                  <entry key=""passwordType"" value=""PasswordDigest""/>
                  <!--entry key=""passwordType"" value=""PasswordText""/-->

[1] http://www.jroller.com/gmazza/entry/using_cxf_and_wss4j_to
[2] http://cwiki.apache.org/CXF20DOC/ws-security.html#WS-Security-UsernameTokenAuthentication 
",Windows XP,,,,,,,,,,,,,,WSS-255,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-12-10 21:32:56.866,,,no_permission,,Moderate,,,,,,,,,,,113601,,,Mon Nov 29 17:21:27 UTC 2010,,,,,,0|i14e5j:,233756,,,,,,,,"10/Dec/09 21:32;dkulp;
Added some checks in CXF, but this really needs to be fixed in wss4j.","29/Nov/10 17:21;coheigea;
FYI this will be fixed in WSS4J by WSS-255:

https://issues.apache.org/jira/browse/WSS-255

Colm.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java.lang.ArrayStoreException getting headers in handler,CXF-2149,12421888,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,getaceres,getaceres,02/Apr/09 15:25,24/Apr/09 21:17,14/Mar/19 02:29,03/Apr/09 21:02,,,,,,,,,,,,,,,2.0.11,2.1.5,2.2.1,,,,,,,,0,,,,"When calling 

Object[] getHeaders(QName name, JAXBContext context, boolean allRoles)

In a header, I get an ArrayStoreException. Looking at the code, I've found this at org.apache.cxf.jaxws.handler.soap.SOAPMessageContextImpl.getHeaders(SOAPMessageContextImpl.java:106):

public Object[] getHeaders(QName name, JAXBContext context, boolean allRoles) {
        SOAPMessage msg = getMessage();
        SOAPHeader header;
        try {
            header = msg.getSOAPPart().getEnvelope().getHeader();
            if (header == null || !header.hasChildNodes()) {
                return new Object[0];
            }
            List<Object> ret = new ArrayList<Object>();
            Iterator<SOAPHeaderElement> it = CastUtils.cast(header.examineAllHeaderElements());
            while (it.hasNext()) {
                SOAPHeaderElement she = it.next();
                if ((allRoles
                    || roles.contains(she.getActor())) 
                    && name.equals(she.getElementQName())) {
                    
                    ret.add(context.createUnmarshaller().unmarshal(she));
                    
                }
            }
            return ret.toArray(new SOAPHeaderElement[ret.size()]);
        } catch (SOAPException e) {
            throw new WebServiceException(e);
        } catch (JAXBException e) {
            throw new WebServiceException(e);
        } 
    }

ret is a list of objects that gets populated with unmarshalled elements. In the return statement it tries to cast it to an array of SOAPHeaderElement, but the elements inside are not SOAPHeaderElement so it throws the aforementioned exception.

","JDK 1.6, Ubuntu Linux 8.10",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113600,,,2009-04-02 15:25:15.0,,,,,,0|i0v0iv:,179058,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Proxy in JCA connector throws exception due to concurrency issues,CXF-2145,12421691,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,seumassoltysik,seumassoltysik,31/Mar/09 18:03,24/Apr/09 21:17,14/Mar/19 02:29,03/Apr/09 19:05,2.0.6,2.1,2.2,,,,,,,,,,,,2.0.11,2.1.5,2.2.1,,Integration,,,,,,0,,,,"A customer is having a problem with concurrent access to a JCA endpoint that is deployed in WebSphere. The stacktrace is below.
They are running a 2.0.x version of CXF with WebSphere 6.1.0.19, HP/UX version B.11.23, Java 1.5.0.13 .

The problem is that the JCA connector uses a single MDB/EJB proxy for all threads which is causing the exception to be thrown. The solution is to create a pool of proxies which can be accessed so that the proxy is used by no more than 1 thread at a time.

[3/10/09 15:55:19:685 EDT] 0000042f DispatchMDBIn E Failed to obtain service object java:comp/env/GreeterWithWsdlLocalHome 
                                 java.lang.IllegalStateException: Multiple threads can not use same MessageEndpoint proxy instance concurrently 
            at com.ibm.ejs.container.MessageEndpointHandler.throwIllegalStateException(MessageEndpointHandler.java:599) 
            at com.ibm.ejs.container.MessageEndpointHandler.checkState(MessageEndpointHandler.java:433) 
            at com.ibm.ejs.container.MessageEndpointHandler.invokeMdbMethod(MessageEndpointHandler.java:889) 
            at com.ibm.ejs.container.MessageEndpointHandler.invoke(MessageEndpointHandler.java:747) 
            at $Proxy50.lookupTargetObject(Unknown Source) 
            at org.apache.cxf.jca.inbound.DispatchMDBInvoker.getServiceObject(DispatchMDBInvoker.java:57) 
            at org.apache.cxf.service.invoker.AbstractInvoker.invoke(AbstractInvoker.java:51) 
            at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:56) 
            at org.apache.cxf.workqueue.SynchronousExecutor.execute(SynchronousExecutor.java:37) 
            at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:92) 
            at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:221) 
            at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:77) 
            at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.serviceRequest(JettyHTTPDestination.java:280) 
            at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.doService(JettyHTTPDestination.java:254) 
            at org.apache.cxf.transport.http_jetty.JettyHTTPHandler.handle(JettyHTTPHandler.java:70) 
            at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:726) 
            at org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:206) 
            at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152) 
            at org.mortbay.jetty.Server.handle(Server.java:324) 
            at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:505) 
            at org.mortbay.jetty.HttpConnection$RequestHandler.content(HttpConnection.java:842) 
            at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:648) 
            at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:211) 
            at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:380) 
            at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:395) 
            at org.mortbay.thread.BoundedThreadPool$PoolThread.run(BoundedThreadPool.java:450) ",,,,,,,,,,,,,,,,,31/Mar/09 19:32;seumassoltysik;patch.txt;https://issues.apache.org/jira/secure/attachment/12404260/patch.txt,03/Apr/09 14:19;seumassoltysik;patch2.txt;https://issues.apache.org/jira/secure/attachment/12404547/patch2.txt,03/Apr/09 15:07;seumassoltysik;patch3.txt;https://issues.apache.org/jira/secure/attachment/12404556/patch3.txt,,,,3.0,,,,,,,,,,,,,,,,,,,,2009-04-01 01:00:27.859,,,no_permission,,,,,,,,,,,,,113597,,,Fri Apr 03 15:07:06 UTC 2009,,,,,,0|i143in:,232033,,,,,,,,31/Mar/09 19:32;seumassoltysik;This is patch for 2.0.x but undoubted needs to also be applied to 2.1.x and trunk. The patch adds  a pool for EJB/MDB proxies to avoid thread concurrency issues.,"01/Apr/09 01:00;wtam;I was wondering whether recycling MessageEndpoint instance is a good idea or not. I went back to the JCA spec. Then, I came to the conclusion that it is NOT a good thing. 

First, Chapter 12.5 Message Delivery in the JCA spec confirms the root problem. ""The same endpoint instance may be used again to deliver subsequent messages serially, but it must not use the
same endpoint instance concurrently.""

However, it is unnecessary for the resource adapter to pool endpoint instances. It says in the same chapter, ""The resource adapter may call the release method on the proxy endpoint instance to indicate that it no longer needs the proxy instance. This hint may be used by the application server for proxy endpoint pooling decisions. This method call frees the state of the proxy instance. The released proxy instance may be reused for further proxy endpoint requests from the same resource adapter."" That means, the application server may already maintain a pool of endpoint instances per resource adapter. We should just call the release() method on the endpoint instance and call createEndpoint() when it is needed again. I guess the biggest issue of our pooling is XA transaction support (in the future). Each endpoint could be attached to a different XAResource at creation time.

I think a fix would be to have the MDBInvoker() holding on to a MessageEndpointFactory instead of a MessageEndpoint instance. In the getServiceObject(), it calls createEndpoint() and release() when it is done.

(BTW, it looks like a bug in the patch that the DispatchMDBInvoker.releaseServiceObject() method should've been overridden to do nothing.) ","03/Apr/09 14:19;seumassoltysik;This second patch simplifies the process of retreiving a new endpoint for each invocation. Instead of maintaining a pool of endpoint, the patch relies on the pooling of endpoint by the app server according to spec. After each invocation the endpoint is released and recycled by the application server.","03/Apr/09 14:33;wtam;Looks good.  Just a quick/minor comment in restoring the saved classloader (in MDBActivationWork.run() method).

         try {
+            savedClassLoader = Thread.currentThread().getContextClassLoader();
+            ClassLoader classLoader = mep.getClass().getClassLoader();
             Thread.currentThread().setContextClassLoader(classLoader);
-            activate(endpoint, classLoader);
+            activate(invoker, classLoader);
         } finally {
+            invoker.releaseEndpoint(mep);
             Thread.currentThread().setContextClassLoader(savedClassLoader);
         }

You may want to check for null savedClassLoader before restoring to be safe.",03/Apr/09 15:07;seumassoltysik;One more time.,,,,,,,,,,,,,,,,,,,,,,,,,,
wsdl2java -p compile error message should be updated,CXF-2144,12421570,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,,eamonndwyer,eamonndwyer,30/Mar/09 17:03,24/Apr/09 21:17,14/Mar/19 02:29,31/Mar/09 21:18,2.2,,,,,,,,,,,,,,2.2.1,,,,Tooling,,,,,,0,,,,"If a wsdl file imports an xsd and you try to specify a package name using -p, then the following error is given.
""-p option cannot be used when wsdl contains mutiple schemas""

While this is correct, it would be more useful to say
""-p option cannot be used when wsdl contains mutiple schemas, unless a namespace to package mapping is specified, 
 for example -p http://blah.com=com.blah  -p http://foo.com=com.foo""",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-03-31 21:18:26.749,,,no_permission,,,,,,,,,,,,,113596,,,Tue Mar 31 21:18:26 UTC 2009,,,,,,0|i0v1hb:,179213,,,,,,,,"31/Mar/09 21:18;dkulp;
The error was removed as the issue is fixed in the latest JAXB implementations.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Timezone problems with special dates (e.g. birthdays),CXF-2143,12421560,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,bmargulies,deki,deki,30/Mar/09 15:35,24/Apr/09 21:17,14/Mar/19 02:29,02/Apr/09 00:29,2.1.3,2.1.4,2.2,,,,,,,,,,,,2.1.5,2.2.1,,,Aegis Databinding,,,,,,0,,,,"Similar to the issue here: http://jira.codehaus.org/browse/XFIRE-975

My problem: The birthday 04.04.1978 on server side (Solaris, TZ MET) becomes 03.04.1978 23:00h on client side (Linux, TZ Europe/Berlin). This is caused by different daylight saving times for the years 1977, 1978 and 1979.

To avoid the problem the timezone +01:00/ +02:00 should be omitted (optional as per spec http://www.w3.org/TR/xmlschema-2/#date). I created a TimezoneLessDateType for it.",,,,,,,,,,,,,,,,,30/Mar/09 15:36;deki;timezoneLessDateType.patch;https://issues.apache.org/jira/secure/attachment/12404148/timezoneLessDateType.patch,06/Apr/09 12:28;deki;timezoneLessDateType2.patch;https://issues.apache.org/jira/secure/attachment/12404715/timezoneLessDateType2.patch,,,,,2.0,,,,,,,,,,,,,,,,,,,,2009-04-02 00:29:40.489,,,no_permission,,,,,,,,,,,,,113595,,,Mon Apr 06 12:28:03 UTC 2009,,,,,,0|i14e1z:,233740,,,,,,,,30/Mar/09 15:36;deki;Patch,"02/Apr/09 00:29;bmargulies;I applied your patch, but could you please also post up a unit test?",06/Apr/09 12:28;deki;another patch with a simple testcase,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Deserializer for complex types is not created inside the generated JavaScript client code,CXF-2139,12421497,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,bmargulies,juergenk,juergenk,29/Mar/09 15:29,24/Apr/09 21:17,14/Mar/19 02:29,02/Apr/09 00:05,2.1.4,2.2,,,,,,,,,,,,,2.1.5,2.2.1,,,JavaScript Client,,,,,,0,,,,"The JavaScript client code generator successfully creates serializers and deserializers for first level soap requests and response objects. Serializing code is also created for complex types but the deserializer code is not created.

Digging down the code it seems that the problem is in the class ""org.apache.cxf.javascript.types.SchemaJavascriptBuilder"" the following HACK made the JS client work correctly:
----
    public void domDeserializerFunction(QName name, XmlSchemaComplexType type) {
        utils = new JavascriptUtils(code);
        XmlSchemaSequence sequence = null;

        sequence = XmlSchemaUtils.getSequence(type);

        // HACK, use alternate way to get sequence
        if (sequence.getItems().getCount() == 0) {
                XmlSchemaSequence s = XmlSchemaUtils.getContentSequence(type);
                if (s != null) {
                        System.err.println(""HACK-applied, generating deserializer for "" + name);
                        sequence = s;
                }
        }
        // HACK-END, use alternate way to get sequence

        String typeObjectName = nameManager.getJavascriptName(name);
---","Java 1.6, ANT based build script",,,,,,,,,,,,,,,,30/Mar/09 11:49;juergenk;SchemaJavascriptBuilder.diff;https://issues.apache.org/jira/secure/attachment/12404122/SchemaJavascriptBuilder.diff,29/Mar/09 15:50;juergenk;js-patch-2.1.4.jar;https://issues.apache.org/jira/secure/attachment/12404085/js-patch-2.1.4.jar,,,,,2.0,,,,,,,,,,,,,,,,,,,,2009-03-29 23:02:19.359,,,no_permission,,Moderate,,,,,,,,,,,113591,,,Thu Apr 02 00:05:48 UTC 2009,,,,,,0|i0v1jb:,179222,,,,,,,,"29/Mar/09 15:45;juergenk;.. was a bit to fast with the given HACK, simply using the method from the serializer code seems the fix the problem better, the solution I used before doesn't cover inheritance. However I'm still not sure if this causes any other side effects, it's just a quick HACK that does the trick for me.

public void domDeserializerFunction(QName name, XmlSchemaComplexType type) {
       utils = new JavascriptUtils(code);
       List<XmlSchemaObject> items = XmlSchemaUtils.getContentElements(type, xmlSchemaCollection);

       String typeObjectName = nameManager.getJavascriptName(name);
       code.append(""function "" + typeObjectName + ""_deserialize (cxfjsutils, element) {\n"");
       // create the object we are deserializing into.
       utils.appendLine(""var newobject = new "" + typeObjectName + ""();"");
       utils.appendLine(""cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));"");
       utils.appendLine(""var curElement = cxfjsutils.getFirstElementChild(element);"");

       utils.appendLine(""var item;"");

       for (ListIterator<XmlSchemaObject> i = items.listIterator(); i.hasNext();) {
              utils.appendLine(""cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));"");
              XmlSchemaObject thing = i.next();
              ParticleInfo itemInfo = ParticleInfo.forLocalItem(thing, schemaInfo.getSchema(),
                            xmlSchemaCollection, prefixAccumulator, type.getQName());
              if (itemInfo.isAny()) {
                     ParticleInfo nextItem = null;
                     if (i.hasNext()) {
                            XmlSchemaObject nextThing = i.next();
                            nextItem = ParticleInfo.forLocalItem(nextThing, schemaInfo.getSchema(),
                                          xmlSchemaCollection, prefixAccumulator, type.getQName());
                            // theoretically, you could have two anys with different
                            // namespaces.
                            if (nextItem.isAny()) {
                                      unsupportedConstruct(""MULTIPLE_ANY"", type.getQName());
                            }
                     }
                     deserializeAny(type, itemInfo, nextItem);
              } else {
                     deserializeElement(type, thing);
              }
       }
       utils.appendLine(""return newobject;"");
       code.append(""}\n\n"");
}",29/Mar/09 15:50;juergenk;This is a compiled version of the described HACK to test it quickly.,"29/Mar/09 23:02;bmargulies;Hi there. For legal reasons, I have to ask you to post a diff with the 'licensed to Apache' flag turned on for me to work with this.
","30/Mar/09 11:49;juergenk;Here you go. (Please ignore changed imports, I ran reformat code.. my bad.)
---
I have to add that this was made for version 2.1.4, I just quickly tried 2.2 and saw it has the same issue.","02/Apr/09 00:00;bmargulies;That diff was pretty untractable due to the lack of -u or -c and the reformatting.

What I really need is a testcase of the problem ...",02/Apr/09 00:05;bmargulies;I committed a fix based on your work. Please try it out.,,,,,,,,,,,,,,,,,,,,,,,,,
JAXB binding files with no schemaLocation don't work,CXF-2135,12419603,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,bmargulies,bmargulies,27/Mar/09 02:34,01/Feb/10 19:02,14/Mar/19 02:29,05/Jan/10 03:34,,,,,,,,,,,,,,,2.2.6,,,,Tooling,,,,,,0,,,,"In order to clean up other code and prevent other bugs, I am breaking the code that allows JAXB binding files with no schemaLocation attribute to work.

In 2.2 and earlier, this worked because we fed all the schemas to JAXB under the same key. This is contrary to the doc and likely to cause other more confusing problems, such as mis-applied customizations.

The correct solution seems to be to just leave off the schemaLocation, but as of JAXB 2.1.10, that doesn't work, since JAXB doesn't handle this case for outboard customization files. Heck, perhaps recycling outboard customization files with JAXB is just not a good idea, period.
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-12-15 21:18:38.49,,,no_permission,,,,,,,,,,,,,113588,,,Mon Jan 04 19:45:50 UTC 2010,,,,,,0|i1403j:,231478,,,,,,,,"15/Dec/09 21:18;dkulp;
Marking this invalid.  Per JAXB spec, the schemaLocation is required so not accepting it is OK.","04/Jan/10 19:45;dkulp;

Kind of a regression as this feature was specifically added for CXF-1094.

Semi-easy to add back in, but with a small performance penalty, but the penalty is really just hit for binding files with no schemaLocation so not a big deal for most use cases.  ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ResponseBuilder implementation sets date headers with Date.toString() method,CXF-2134,12419542,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,sergey_beryozkin,romkal,romkal,26/Mar/09 15:44,24/Apr/09 21:17,14/Mar/19 02:29,26/Mar/09 19:59,2.2,,,,,,,,,,,,,,2.2.1,,,,JAX-RS,,,,,,0,,,,"{{expires()}} and {{lastModified()}}  methods of {{ResponseBuilderImpl}} sets response headers with {{Date.toString()}} method, while they should obey time format specified by RFC1123.

This means that the date should be formated like
{code}
new SimpleDateFormat(""EEE, dd MMM yyyy HH:mm:ss zzz"", Locale.ENGLISH).format(expires);
{code}",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-03-26 18:00:35.114,,,no_permission,,,,,,,,,,,,,113587,,,Thu Mar 26 18:00:35 UTC 2009,,,,,,0|i0v1gf:,179209,,,,,,,,"26/Mar/09 18:00;sergey_beryozkin;fix will go shortly - though the format is created slightly differently
{code}
public static SimpleDateFormat getHttpDateFormat() {
        SimpleDateFormat dateFormat = 
            new SimpleDateFormat(""EEE, dd MMM yyyy HH:mm:ss zzz"", Locale.US);
        TimeZone tZone = TimeZone.getTimeZone(""GMT"");
        dateFormat.setTimeZone(tZone);
        return dateFormat;
    }
{code}

I reckon it's correct, right ?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ResponseBuilder implementation returns nulls from various builder methods,CXF-2133,12419539,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,sergey_beryozkin,romkal,romkal,26/Mar/09 15:40,24/Apr/09 21:17,14/Mar/19 02:29,26/Mar/09 19:59,2.2,,,,,,,,,,,,,,2.2.1,,,,JAX-RS,,,,,,0,,,,"{{ResponseBuilderImpl}} class in various builder methods like {{expires()}}, {{language()}} returns {{null}} instead of {{this}}, so the proper invocation throws NPE.",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,Novice,,,,,,,,,,,113586,,,2009-03-26 15:40:39.0,,,,,,0|i140hz:,231543,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
@Oneway doesn't work with simple/bare element types,CXF-2132,12419306,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,goelshek,goelshek,24/Mar/09 14:05,24/Apr/09 21:17,14/Mar/19 02:29,25/Mar/09 18:06,2.2,,,,,,,,,,,,,,2.1.5,2.2.1,,,Soap Binding,,,,,,0,,,,"If the service interface is specified to have a parameter style of bare/simple by using the @SOAPBinding annotation, a method that has been annotated with @Oneway does not behave as expected. The method still acts as a two way method in that the client is not free'd up immediately. The client waits for method to finish processing.

Interface:
@WebService
@SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
public interface HelloWorld 
{
    @WebMethod
    @Oneway
    void sayHiOneWay(String text);
}

Impl:
@WebService(endpointInterface = ""demo.hw.server.HelloWorld"", serviceName = ""HelloWorld"")
public class HelloWorldImpl implements HelloWorld 
{
    @Oneway
    public void sayHiOneWay(String text) 
    {
        System.out.println(""sayHiOneWay called"");
        System.out.println(""sleeping for 10 secs"");
        try { Thread.sleep(10000); } 
        catch (InterruptedException e) { e.printStackTrace(); }
	System.out.println(""woke up after 10 secs"");
        System.out.println(""accepted: "" + text);
    }
}

Client:
public final class Client 
{
    private static final QName SERVICE_NAME = new QName(""http://server.hw.demo/"", ""HelloWorld"");
    private static final QName PORT_NAME = new QName(""http://server.hw.demo/"", ""HelloWorldPort"");

    private Client() 
    {
    } 

    public static void main(String args[]) throws Exception 
    {
        Service service = Service.create(SERVICE_NAME);
        // Endpoint Address
        String endpointAddress = ""http://localhost:9090/Hello"";

        // Add a port to the Service
        service.addPort(PORT_NAME, SOAPBinding.SOAP11HTTP_BINDING, endpointAddress);
        
        HelloWorld hw = service.getPort(HelloWorld.class);
        
        System.out.println(""Invoke sayHiOneWay()...."");
        long startTime = System.currentTimeMillis();
        hw.sayHiOneWay(System.getProperty(""user.name""));
        System.out.println(""Time taken to call sayHiOneWay(): "" + (System.currentTimeMillis()-startTime) + "" ms"");
    }
}","Win XP, CXF 2.2, Java 5",,,,,,,,,,,,,,,,24/Mar/09 14:12;goelshek;screenshot-1.jpg;https://issues.apache.org/jira/secure/attachment/12403519/screenshot-1.jpg,24/Mar/09 14:09;goelshek;src.zip;https://issues.apache.org/jira/secure/attachment/12403518/src.zip,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,Moderate,,,,,,,,,,,113585,,,Tue Mar 24 14:12:28 UTC 2009,,,,,,0|i0v0rb:,179096,,,,,,,,24/Mar/09 14:09;goelshek;Adding the source code that is used to replicate the problem.,24/Mar/09 14:12;goelshek;This screenshot shows that the client takes more than 10 seconds to invoke a oneway method. There is a 10 second sleep inside the method.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
wsdl2js gives NullPointerException on http://lcorp.ulif.org.ua/ILib5/Service.svc?wsdl,CXF-2128,12419190,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,arysin,arysin,23/Mar/09 01:43,24/Apr/09 21:17,14/Mar/19 02:29,20/Apr/09 18:28,2.2,,,,,,,,,,,,,,2.1.5,2.2.1,,,Tooling,,,,,,0,,,,"wsdl2js http://lcorp.ulif.org.ua/ILib5/Service.svc?wsdl
produces
WSDLToJS Error : java.lang.NullPointerException

wsdl2java works fine
","Mandriva Linux x86_64
java version ""1.6.0_0""
IcedTea6 1.4 (mandriva-0.18.b14.1mdv2009.1-x86_64) Runtime Environment (build 1.6.0_0-b14)
OpenJDK 64-Bit Server VM (build 14.0-b08, mixed mode)
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113581,,,2009-03-23 01:43:40.0,,,,,,0|i0v0qv:,179094,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Aegis makes bogus XML Schema in several cases,CXF-2126,12419160,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,bmargulies,bmargulies,bmargulies,21/Mar/09 17:40,24/Apr/09 21:17,14/Mar/19 02:29,21/Mar/09 18:48,2.2,,,,,,,,,,,,,,2.2.1,,,,Aegis Databinding,,,,,,0,,,,"Turning on the new validation-of-schema feature, many, many, Aegis unit tests fail.

(-PvalidateSchemas)

",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113579,,,Sat Mar 21 18:48:19 UTC 2009,,,,,,0|i0v1fj:,179205,,,,,,,,"21/Mar/09 17:49;bmargulies;annotatedTypeTest.testType fails:

There is a property of type String, and a custom type anotation via @XmlElement, and it comes up with http://java.lang.String instead of xs:string. 
","21/Mar/09 18:33;bmargulies;In revision 756982, I added code as follows:

If there is a custom type mapping, and the mapping does not specify the XML schema type name, and the Java type name is in begins with 'java', then try to get a schema type name from the current type mapping rather than creating a useless QName for http://lang.java or something like it. This has the effect that if someone hangs a custom type mapping off of a java.lang.String property, and does not explicitly register it, and does not specify the schema type QName, they get xs:string as a schema type, which does not seem entirely crazy.

","21/Mar/09 18:48;bmargulies;The rest of this was unit test support bugs. The 'CustomStringType' didn't write any schema, thus leading to a dangling schema pointer.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,
SOAPHandlerInterceptorTest.java inconsistency,CXF-2125,12419156,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,bmargulies,bmargulies,bmargulies,21/Mar/09 15:33,30/Jul/09 18:01,14/Mar/19 02:29,24/Mar/09 16:03,2.2.1,,,,,,,,,,,,,,2.2.1,,,,,,,,,,0,,,,"In my current  environment, this test puts an XMLStreamReader on a message for content, but the interceptor goes looking for a DOM node, and fails to find one. This is probably my mistake in some horrifically indirect fashion, but I'm looking for help.
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-03-24 16:03:48.819,,,no_permission,,,,,,,,,,,,,113578,,,Tue Mar 24 16:03:48 UTC 2009,,,,,,0|i140ef:,231527,,,,,,,,"21/Mar/09 15:34;bmargulies;SAAJInterceptor expects a DOM node. Who is supposed to put it there?
","21/Mar/09 15:51;bmargulies;The code in the SAAJInInterceptor has clearly been busted in 2.2, but I don't know why I'm the unique victim.

In 2.1...

 Document node = (Document) message.getContent(Node.class);
            DOMSource source = new DOMSource(node);
            part.setContent(source);

In 2.2, it passes the node to StaxUtils, which get very unhappy if it is null.

","21/Mar/09 16:02;bmargulies;I've checked in a fix, but I'm leaving this open for Dan to investigate if he likes it.
","24/Mar/09 16:03;dkulp;
The fix you made looks right.   ",,,,,,,,,,,,,,,,,,,,,,,,,,,
DynamicClientFactory.createClient API would throw an exception with source path instead of classes path when classes.mkdir() call fails,CXF-2124,12417401,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,dkulp,aruld,aruld,20/Mar/09 17:18,24/Apr/09 21:17,14/Mar/19 02:29,24/Mar/09 16:47,2.1.4,,,,,,,,,,,,,,2.1.5,2.2.1,,,JAXB Databinding,,,,,,0,,,,"https://svn.apache.org/repos/asf/cxf/trunk/rt/databinding/jaxb/src/main/java/org/apache/cxf/endpoint/dynamic/DynamicClientFactory.java

The following code is not using the classes path in the exception message when classes.mkdir fails.
        File classes = new File(tmpdir, stem + ""-classes"");
        if (!classes.mkdir()) {
            throw new IllegalStateException(""Unable to create working directory "" + src.getPath());// change this to classes.getPath()
        }

Let me know if I need to submit a patch. Hope this is a simple fix to make. ",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-03-24 16:47:19.689,,,no_permission,,,,,,,,,,,,,113577,,,Tue Mar 24 22:30:20 UTC 2009,,,,,,0|i14f3r:,233910,,,,,,,,"24/Mar/09 16:47;dkulp;
Simple enough fix.   Thanks for catching it.",24/Mar/09 22:30;aruld;Thanks Dan for fixing it.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Generated Schemas are missing import statements,CXF-2123,12417376,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,bmargulies,chrisdutz,chrisdutz,20/Mar/09 12:14,24/Apr/09 21:17,14/Mar/19 02:29,21/Mar/09 18:29,2.2,,,,,,,,,,,,,,2.2.1,,,,Aegis Databinding,,,,,,0,,,,"In CXF 2.1.4 schemas generated by Aegis contained import statements to import other generated schemas.

Even if these statements might be optional from a schema perspective, these statements are needed when processing the SOAP messages in an Adobe Flex SOAPDecoder.

To make everything a litte clearer:
Old WSDL:
<xsd:schema xmlns:ns1=""http://impl.common.pgm.model.pgm.tiller.upw.de"" 
   xmlns:tns=""http://credentials.pgm.model.pgm.tiller.upw.de"" 
   attributeFormDefault=""qualified"" 
   elementFormDefault=""qualified"" 
   targetNamespace=""http://credentials.pgm.model.pgm.tiller.upw.de"">
   <import xmlns=""http://www.w3.org/2001/XMLSchema""
namespace=""http://impl.common.pgm.model.pgm.tiller.upw.de""/>
   <xsd:complexType abstract=""true"" name=""PgmCredential"">
      <xsd:complexContent>
         <xsd:extension base=""ns1:AbstractDatabaseObject"">
            <xsd:sequence>
               <xsd:element minOccurs=""0"" name=""name"" nillable=""true""
type=""xsd:string""/>
            </xsd:sequence>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>
   <xsd:complexType name=""ArrayOfPgmCredential"">
      <xsd:sequence>
         <xsd:element maxOccurs=""unbounded"" minOccurs=""0""
name=""PgmCredential"" nillable=""true"" type=""tns:PgmCredential""/>
      </xsd:sequence>
   </xsd:complexType>
   <xsd:complexType name=""PgmUsernamePasswordCredential"">
      <xsd:complexContent>
         <xsd:extension base=""tns:PgmCredential"">
            <xsd:sequence>
               <xsd:element minOccurs=""0"" name=""password"" nillable=""true""
type=""xsd:string""/>
               <xsd:element minOccurs=""0"" name=""username"" nillable=""true""
type=""xsd:string""/>
            </xsd:sequence>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>
   <xsd:complexType name=""PgmX509CertificateCredential"">
      <xsd:complexContent>
         <xsd:extension base=""tns:PgmCredential"">
            <xsd:sequence>
               <xsd:element minOccurs=""0"" name=""certificate"" nillable=""true""
type=""xsd:string""/>
            </xsd:sequence>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>
</xsd:schema>


New WSDL:
<xsd:schema xmlns:ns0=""http://impl.common.pgm.model.pgm.tiller.upw.de"" 
    xmlns:tns=""http://credentials.pgm.model.pgm.tiller.upw.de"" 
    attributeFormDefault=""qualified"" 
    elementFormDefault=""qualified"" 
    targetNamespace=""http://credentials.pgm.model.pgm.tiller.upw.de"">
    <xsd:complexType abstract=""true"" name=""PgmCredential"">
        <xsd:complexContent>
            <xsd:extension base=""ns0:AbstractDatabaseObject"">
                <xsd:sequence>
                    <xsd:element minOccurs=""0"" name=""name"" nillable=""true""
type=""xsd:string""/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:complexType name=""ArrayOfPgmCredential"">
        <xsd:sequence>
            <xsd:element maxOccurs=""unbounded"" minOccurs=""0""
name=""PgmCredential"" nillable=""true"" type=""tns:PgmCredential""/>
        </xsd:sequence>
    </xsd:complexType>
    <xsd:complexType name=""PgmUsernamePasswordCredential"">
        <xsd:complexContent>
            <xsd:extension base=""tns:PgmCredential"">
                <xsd:sequence>
                    <xsd:element minOccurs=""0"" name=""password""
nillable=""true"" type=""xsd:string""/>
                    <xsd:element minOccurs=""0"" name=""username""
nillable=""true"" type=""xsd:string""/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:complexType name=""PgmX509CertificateCredential"">
        <xsd:complexContent>
            <xsd:extension base=""tns:PgmCredential"">
                <xsd:sequence>
                    <xsd:element minOccurs=""0"" name=""certificate""
nillable=""true"" type=""xsd:string""/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
</xsd:schema>

The problem is the missing:
   <import xmlns=""http://www.w3.org/2001/XMLSchema""
namespace=""http://impl.common.pgm.model.pgm.tiller.upw.de""/>
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-03-20 19:22:42.724,,,no_permission,,,,,,,,,,,,,113576,,,Sat Mar 21 18:29:09 UTC 2009,,,,,,0|i0v1fr:,179206,,,,,,,,"20/Mar/09 12:48;chrisdutz;It seems that the Problem is in the class BeanType class is missing an implementation of the ""usesUtitlyTypes()""-method. 

This method is implemented to return ""false"" in Type and is not overriden in BeanType.

","20/Mar/09 19:22;bmargulies;That won't fix it. returning true from that function will add one particular import, but not the one you want. I'm working on the fix.
","21/Mar/09 18:29;bmargulies;As of revision 756982, there is code to ensure that all the imports are there whether or not any particular bit of schema generation misses one.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE in AbstractJAXWSMethodInvoker,CXF-2122,12417375,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,opalka,opalka,20/Mar/09 11:08,24/Apr/09 21:17,14/Mar/19 02:29,30/Mar/09 21:21,2.1.4,2.2,,,,,,,,,,,,,2.1.5,2.2.1,,,JAX-WS Runtime,,,,,,0,,,,"This issue was reported by our JBossWS-CXF integation user, see
http://www.jboss.org/index.html?module=bb&op=viewtopic&p=4219792#4219792
To fix the issue, apply the same proposed fix from that user, i.e.:

<             if (sm != null) {
<                 Iterator<?> iter = list.iterator();
<                 while (iter.hasNext())
<                 {
<                    sm.getHeaders().add((Header) iter.next());
<                 }
---
>             Iterator<?> iter = list.iterator();
>             while (iter.hasNext())
>             {
>                sm.getHeaders().add((Header) iter.next());",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-03-20 11:14:27.526,,,no_permission,,,,,,,,,,,,,113575,,,Mon Mar 30 21:21:14 UTC 2009,,,,,,0|i0v1gv:,179211,,,,,,,,20/Mar/09 11:14;asoldano;Leaving the fix version decision to committers,30/Mar/09 21:21;dkulp;Fix applied.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
wsdl2java failes with NPE with void Async Methods,CXF-2119,12417228,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,bryan.kearney,bryan.kearney,18/Mar/09 23:21,24/Apr/09 21:17,14/Mar/19 02:29,24/Mar/09 16:43,2.1.4,,,,,,,,,,,,,,2.1.5,,,,Tooling,,,,,,0,,,,"If a method which ends in Async returns void, and therefore an operation with a name that ends in Async and no output, then running wsdl2java will result in an NPE.

     [exec] wsdl2java -compile -d /home/bkearney/workspace/testclient/./src/main/java -p com.redhat.vdc.client.generated -verbose -classdir /home/bkearney/workspace/testclient/./target/classes http://localhost:8080/backends/wcf?wsdl
     [exec] wsdl2java - Apache CXF 2.1.4
     [exec] 
     [exec] Failed to invoke WSDLToJava
     [exec] org.apache.cxf.tools.common.ToolException: java.lang.NullPointerException
     [exec] 	at org.apache.cxf.tools.wsdlto.WSDLToJavaContainer.execute(WSDLToJavaContainer.java:240)
     [exec] 	at org.apache.cxf.tools.common.toolspec.ToolRunner.runTool(ToolRunner.java:83)
     [exec] 	at org.apache.cxf.tools.wsdlto.WSDLToJava.run(WSDLToJava.java:103)
     [exec] 	at org.jboss.wsf.stack.cxf.tools.CXFConsumerImpl.consume(CXFConsumerImpl.java:224)
     [exec] 	at org.jboss.wsf.spi.tools.cmd.WSConsume.importServices(WSConsume.java:222)
     [exec] 	at org.jboss.wsf.spi.tools.cmd.WSConsume.main(WSConsume.java:80)
     [exec] Caused by: java.lang.NullPointerException
     [exec] 	at org.apache.cxf.tools.wsdlto.frontend.jaxws.processor.internal.OperationProcessor.isAsyncMethod(OperationProcessor.java:182)
     [exec] 	at org.apache.cxf.tools.wsdlto.frontend.jaxws.processor.internal.OperationProcessor.processMethod(OperationProcessor.java:76)
     [exec] 	at org.apache.cxf.tools.wsdlto.frontend.jaxws.processor.internal.OperationProcessor.process(OperationProcessor.java:63)
     [exec] 	at org.apache.cxf.tools.wsdlto.frontend.jaxws.processor.internal.PortTypeProcessor.process(PortTypeProcessor.java:143)
     [exec] 	at org.apache.cxf.tools.wsdlto.frontend.jaxws.processor.WSDLToJavaProcessor.wsdlDefinitionToJavaModel(WSDLToJavaProcessor.java:88)
     [exec] 	at org.apache.cxf.tools.wsdlto.frontend.jaxws.processor.WSDLToJavaProcessor.process(WSDLToJavaProcessor.java:60)
     [exec] 	at org.apache.cxf.tools.wsdlto.WSDLToJavaContainer.execute(WSDLToJavaContainer.java:197)
     [exec] 	at org.apache.cxf.tools.wsdlto.WSDLToJavaContainer.execute(WSDLToJavaContainer.java:232)
     [exec] 	... 5 more
","JbossWS-CXF 3.1.0 (Uses CXF 2.1.4), Jboss 5.1.0, Fedora 10",,,,,,,,,,,,,,,,19/Mar/09 12:32;bryan.kearney;bad.wsdl;https://issues.apache.org/jira/secure/attachment/12402574/bad.wsdl,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2009-03-19 04:49:30.749,,,no_permission,,,,,,,,,,,,,113573,,,Tue Mar 24 16:43:46 UTC 2009,,,,,,0|i0v1fz:,179207,,,,,,,,"19/Mar/09 04:49;dkulp;Bryan,

I BELIEVE this is fixed on the 2.1.x branch for 2.1.5 and the fix was included in 2.2.   Any chance you could test with either 2.2 or with the 2.1.5 snapshots to double check?   If it doesn't fix it, any chance on getting the wsdl?

Dan",19/Mar/09 12:32;bryan.kearney;Here is the wsdl. I will attempt to download and recreate as well.,"24/Mar/09 16:43;dkulp;
Marking this resolved as the trunk and 2.1.x branches both process the wsdl fine.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
method AnnotationHandlerChainBuilder.patternMatches() causes CXF portability issues with other JAX-WS stacks,CXF-2117,12417055,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,opalka,opalka,17/Mar/09 12:53,15/Oct/09 20:40,14/Mar/19 02:29,25/Mar/09 02:00,2.1.4,,,,,,,,,,,,,,2.1.5,2.2.1,,,,,,,,,0,,,,"If I have config like this:

<handler-chains xmlns=""http://java.sun.com/xml/ns/javaee""
  xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
  xmlns:ns1=""http://org.jboss.ws/jaxws/samples/logicalhandler""
  xsi:schemaLocation=""http://java.sun.com/xml/ns/javaee javaee_web_services_1_2.xsd"">

  <handler-chain>
    <port-name-pattern>ns1:SOAPEndpoint*</port-name-pattern>
		<handler>
			<handler-name> PortClientHandler </handler-name>
			<handler-class> org.jboss.test.ws.jaxws.samples.logicalhandler.PortHandler </handler-class>
		</handler>
    </handler-chain>
  
</handler-chains>

the port-name-pattern matches e.g. SOAPEndpointDocPort on JBoss, Glassfish, Websphere but not on Geronimo.
The relevant piece of code is:

 private boolean patternMatches(Element el, QName comp) {
   ...
        if (localPart.contains(""*"")) {
            //wildcard pattern matching
            return Pattern.matches(localPart, comp.getLocalPart()); // PROBLEMATIC PART HERE
        } else if (!localPart.equals(comp.getLocalPart())) {
            return false;
        }
        return true;
    }

The problem is:

Pattern.matches(""SOAPEndpoint*"", ""SOAPEndpointDocPort"") returns false // CXF expects. SOAPEndpoint.* as wildcard which is not portable cross different APP servers

Consider fix that will match it, please.
",,,,,,,,,,,,CXF-1766,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113571,,,2009-03-17 12:53:31.0,,,,,,0|i0v1e7:,179199,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
refactor JBIConduitOutputStream exception handle,CXF-2115,12416943,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,ffang,ffang,ffang,16/Mar/09 06:57,24/Apr/09 21:17,14/Mar/19 02:29,19/Mar/09 03:52,,,,,,,,,,,,,,,2.0.11,2.1.5,2.2.1,,,,,,,,0,,,,"currently it's
{code}
        } catch (IOException e) {
            throw e;
        } catch (Exception e) {
            e.printStackTrace();
            new IOException(e.toString());
        }
{code}

should be 
{code}
        } catch (IOException e) {
            throw e;
        } catch (Exception e) {
            throw new RuntimeException(e.toString());
        }
{code}
so that we can get correct exception back from JBI client side and remove noisy exception stacktrace",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113569,,,Thu Mar 19 03:52:31 UTC 2009,,,,,,0|i0v1pb:,179249,,,,,,,,"19/Mar/09 03:52;ffang;commit fix
http://svn.apache.org/viewvc?rev=755498&view=rev for trunk
http://svn.apache.org/viewvc?rev=755519&view=rev for 2.1.x branch
http://svn.apache.org/viewvc?rev=755822&view=rev for 2.0.x branch",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Some extra config needed for wstrust13 test client,CXF-2111,12416773,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,eamonndwyer,eamonndwyer,12/Mar/09 18:43,24/Apr/09 21:17,14/Mar/19 02:27,12/Mar/09 19:01,2.2,,,,,,,,,,,,,,2.2,,,,WS-* Components,,,,,,0,,,,The following tests should pass but the client config needs some reworking,,,,,,,,,,,,,,,,,12/Mar/09 18:44;eamonndwyer;sandboxPatchMar12.patch;https://issues.apache.org/jira/secure/attachment/12402078/sandboxPatchMar12.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2009-03-12 19:01:27.569,,,no_permission,,,,,,,,,,,,,113565,,,Thu Mar 12 19:01:27 UTC 2009,,,,,,0|i13zq7:,231418,,,,,,,,"12/Mar/09 18:44;eamonndwyer;The attached file results in 
CustomBinding_IPingServiceContract: OK!
OasisScenario2Binding_IPingServiceContract: OK!
CustomBinding_IPingServiceContract1: OK!
OasisScenario4Binding_IPingServiceContract: OK!
CustomBinding_IPingServiceContract2: OK!
CustomBinding_IPingServiceContract4: OK!
CustomBinding_IPingServiceContract10: OK!",12/Mar/09 19:01;dkulp;Patch applied.   Thanks.   ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
samples\corba\bank_ws_addressing does not compile,CXF-2109,12416693,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Trivial,Fixed,dkulp,reporter,reporter,11/Mar/09 21:48,24/Apr/09 21:17,14/Mar/19 02:29,12/Mar/09 15:26,2.1.4,,,,,,,,,,,,,,2.1.5,,,,Samples,,,,,,0,,,,"""ant cxf.server"" won't build because of invalid code in samples\corba\bank_ws_addressing\src\cxf\server\BankImpl.java

    // TODO: What is the correct implementation for this operation?
    public void findAccount(javax.xml.ws.Holder<Object> accountDetails) {
    }

correct code for sample

    // TODO: What is the correct implementation for this operation?
    public java.lang.Object findAccount(java.lang.Object accountDetails) {
	   Object holder = ""foo"";
	   return holder;
	}


",,300,300,,0%,300,300,,,,,,,,,,11/Mar/09 21:49;reporter;BankImpl.java;https://issues.apache.org/jira/secure/attachment/12401974/BankImpl.java,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,Novice,,,,,,,,,,,113563,,,Wed Mar 11 21:49:24 UTC 2009,,,,,,0|i1advr:,268715,,,,,,,,11/Mar/09 21:49;reporter;fix,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
idl2wsdl NullPointerException at typedef with sequence of (named) fixed array,CXF-2108,12416690,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,dkulp,reporter,reporter,11/Mar/09 21:34,24/Apr/09 21:17,14/Mar/19 02:29,12/Mar/09 18:27,2.1.4,,,,,,,,,,,,,,2.1.5,,,,Tooling,,,,,,0,,,,"The idl2wsdl-tool throws a NullPointerException at
org.apache.cxf.tools.corba.processors.idl.SimpleTypeSpecVisitor.visit(SimpleTypeSpecVisitor.java:75) 
when trying to convert following valid CORBA idl to wsdl:

-- Begin IDL
module idl2wsdlnullpointer {

typedef string foo[1];
typedef sequence<foo> bar;

};
-- END IDL

Line 75 in the relevant source file contains: visitor.visit(node);
The exception occurs because the visitor is still null after all three visitors failed to accept above node.

I doublechecked fuse-services-framework-2.1.3.3. Same issue.

Workaround
-----------------

The following workaround does break neither client nor server code and allows the idl2wsdl-tool to fully generate a wsdl definition.

-- Begin IDL Workaround
module idl2wsdlnullpointer {

typedef sequence<string> foo;
typedef sequence<foo> bar;

};
-- END IDL
 
This workaround does not change generated Java ORB server-skeletons. It does however change e.g. generated Python client-stubs, thereby maybe affecting ORB/IIOP performance negatively (probably only marginally).
",,14400,14400,,0%,14400,14400,,,,,,,,,,11/Mar/09 21:40;reporter;idl2wsdlbug.idl;https://issues.apache.org/jira/secure/attachment/12401973/idl2wsdlbug.idl,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,Moderate,,,,,,,,,,,113562,,,Wed Mar 11 21:40:21 UTC 2009,,,,,,0|i1advz:,268716,,,,,,,,11/Mar/09 21:40;reporter;idl to reproduce nullpointer ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
wsdlLocation paramater and xmlbeans databinding throwing NPE,CXF-2107,12416682,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,dkulp,dkulp,11/Mar/09 20:21,03/Aug/09 20:06,14/Mar/19 02:29,22/Jun/09 17:36,2.1.4,,,,,,,,,,,,,,2.1.6,2.2.3,,,Tooling,,,,,,0,,,,"
If you run ""wsdl2java -databinding xmlbeans -wsdlLocation /META-INF/wsdl hello_world.wsdl"" in the samples, you get a NPE:

WSDLToJava Error: java.lang.NullPointerException

org.apache.cxf.tools.common.ToolException: java.lang.NullPointerException
        at org.apache.cxf.tools.wsdlto.WSDLToJavaContainer.execute(WSDLToJavaContainer.java:246)
        at org.apache.cxf.tools.common.toolspec.ToolRunner.runTool(ToolRunner.java:83)
        at org.apache.cxf.tools.wsdlto.WSDLToJava.run(WSDLToJava.java:103)
        at org.apache.cxf.tools.wsdlto.WSDLToJava.main(WSDLToJava.java:173)
Caused by: java.lang.NullPointerException
        at org.apache.xmlbeans.impl.schema.StscState.addError(StscState.java:387)
        at org.apache.cxf.xmlbeans.tools.XMLBeansToolingDataBinding.loadTypeSystem(XMLBeansToolingDataBinding.java:258)
        at org.apache.cxf.xmlbeans.tools.XMLBeansToolingDataBinding.initialize(XMLBeansToolingDataBinding.java:103)
        at org.apache.cxf.tools.wsdlto.WSDLToJavaContainer.generateTypes(WSDLToJavaContainer.java:543)
        at org.apache.cxf.tools.wsdlto.WSDLToJavaContainer.execute(WSDLToJavaContainer.java:194)
        at org.apache.cxf.tools.wsdlto.WSDLToJavaContainer.execute(WSDLToJavaContainer.java:238)
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-03-19 03:11:56.015,,,no_permission,,,,,,,,,,,,,113561,,,Thu Mar 19 03:11:56 UTC 2009,,,,,,0|i14dxz:,233722,,,,,,,,"19/Mar/09 03:11;njiang;Hi Dan,

I tried to reproduce the error by adding the cxf-testutils-2.2.1-SNAPSHOT.jar into the CLASSPATH.
But I got the below error instead of the NPE.

Mar 19, 2009 11:04:10 AM org.apache.cxf.binding.corba.CorbaConduit prepare
SEVERE: Unable to locate a valid CORBA address
Mar 19, 2009 11:04:10 AM org.apache.cxf.binding.corba.CorbaConduit prepare
SEVERE: Could not resolve target object

WSDLToJava Error: org.apache.cxf.wsdl11.WSDLRuntimeException: Fail to create wsd
l definition from : file:/D:/tmp/apache-cxf-2.2/bin/hello_world.wsdl
Caused by : WSDLException: faultCode=PARSER_ERROR: Problem parsing 'file:/D:/tmp
/apache-cxf-2.2/bin/hello_world.wsdl'.: java.io.FileNotFoundException: D:\tmp\ap
ache-cxf-2.2\bin\hello_world.wsdl (The system cannot find the file specified)

Can you show me how you produce this kind of NPE ?

Thanks,

Willem
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Temp files created for data over 64kb are never deleted,CXF-2106,12416674,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,martinmurphy,martinmurphy,11/Mar/09 19:03,24/Apr/09 21:17,14/Mar/19 02:29,12/Mar/09 13:32,2.1.4,2.2,,,,,,,,,,,,,2.0.11,2.1.5,,,Core,,,,,,0,,,,"CXF saves incoming data greater than 64kb are saved to a temp directory in a [cached output stream|http://svn.apache.org/viewvc/cxf/trunk/api/src/main/java/org/apache/cxf/io/CachedOutputStream.java?view=markup]. This makes sense since we don't want large messages to cause the JVM to run out of memory.
The problem is, these never seem to be deleted at the moment. You can see this if you run the mtom sample. You can change the directory that the temp file is written to using the org.apache.cxf.io.CachedOutputStream.OutputDirectory property. Notice with the mtom sample that two files are written to the directory for the client and server. This is because the the client invokes twice, once with a byte array and once with a data handler.

If you know the size of all messages that may be received you can avoid this problem by setting the threshold for creating a temp file to be larger than the largest expected file. The property for this (measure in bytes) is org.apache.cxf.io.CachedOutputStream.Threshold.

In my investigation it seems that there are two possible problems here. The first is that for the byte array the output stream is locked for future use, but not closed. So, when we try to delete the file a stream is still in use and the file cannot be deleted. If you close the stream when marking it as locked this problem seems to go away, although I haven't fully tested this, so I am unsure of the knock on affects :
{code}
/**
* Locks the output stream to prevent additional writes, but maintains
* a pointer to it so an InputStream can be obtained
* @throws IOException
*/
public void lockOutputStream() throws IOException {
    currentStream.flush();
    outputLocked = true;
    // Not sure of the impact of this close - mtom sample still works fine.
    currentStream.close();
    streamList.remove(currentStream);
}
{code}

However for the datahandler it seems that there is never any attempt to delete the file. It seems that the datahandler has no knowledge of the temp file and even if I try to close the inputstream it is using from the mtom client mainline I still see the temp file is never deleted.",Tested against 2.1 branch and the trunk,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-03-12 03:08:38.698,,,no_permission,,,,,,,,,,,,,113560,,,Mon Mar 16 12:20:08 UTC 2009,,,,,,0|i0sy7r:,167020,,,,,,,,"12/Mar/09 03:08;dkulp;
I committed what I hope is a fix for this.  However, I don't have a windows box to try it.   On Linux, the files delete fine.   It seems to be a Windows issue.

Could you try and double check it's fixed?
","12/Mar/09 11:40;martinmurphy;Thanks for that Dan, just tried the version on the trunk and it only seems to work for the byte array. The temp file for the DataHandler still exists. I'm looking into that now.","12/Mar/09 13:12;dkulp;
That's a bug in the demo.   Just committed a fix for that.   The demo wasn't closing the stream so it wasn't letting us know to delete the file.",16/Mar/09 12:20;utuba;This has fixed the issue for us on Windows 2008 Server.  Thanks.,,,,,,,,,,,,,,,,,,,,,,,,,,,
The CxfBusLifeCycleManager can cause ConcurrentModificationExceptions to be thrown,CXF-2105,12416666,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,eamonndwyer,eamonndwyer,11/Mar/09 18:10,24/Apr/09 21:17,14/Mar/19 02:29,11/Mar/09 18:47,2.0.10,,,,,,,,,,,,,,2.0.11,2.1.5,,,Core,,,,,,0,,,,"The CxfBusLifeCycleManager  has a list of listeners. in a number of occasions it iterates over this list and makes calls out to each listener. Each listener can then call back into the CxfBusLifeCycleManager and potentially try access the listeners. This causes the exception. Typically the exception thrown looks like. 

java.util.ConcurrentModificationException
at java.util.AbstractList$Itr.checkForComodification(AbstractList.java:449)
at java.util.AbstractList$Itr.next(AbstractList.java:420)
at org.apache.cxf.buslifecycle.CXFBusLifeCycleManager.preShutdown(CXFBusLifeCycleManager.java:81)
at org.apache.cxf.bus.CXFBusImpl.shutdown(CXFBusImpl.java:122)
at org.apache.cxf.testutil.common.AbstractBusClientServerTestBase.deleteStaticBus(AbstractBusClientServerTestBase.java:89)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:585)
at org.junit.internal.runners.BeforeAndAfterRunner.invokeMethod(BeforeAndAfterRunner.java:74)
at org.junit.internal.runners.BeforeAndAfterRunner.runAfters(BeforeAndAfterRunner.java:65)
at org.junit.internal.runners.BeforeAndAfterRunner.runProtected(BeforeAndAfterRunner.java:37)
at org.junit.internal.runners.TestClassRunner.run(TestClassRunner.java:52)
at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:62)
at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:138)
at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:125)
at org.apache.maven.surefire.Surefire.run(Surefire.java:132)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:585)
at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:290)
at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:818)",,,,,,,,,,,,,,,,,11/Mar/09 18:11;eamonndwyer;Mar11.patch;https://issues.apache.org/jira/secure/attachment/12401950/Mar11.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2009-03-11 18:37:53.953,,,no_permission,,,,,,,,,,,,,113559,,,Wed Mar 11 18:37:53 UTC 2009,,,,,,0|i0sy7z:,167021,,,,,,,,11/Mar/09 18:11;eamonndwyer;The patch attached is a possible solution to this issue,"11/Mar/09 18:12;eamonndwyer;I should add I spotted this while using the 
http://svn.apache.org/repos/asf/cxf/branches/2.0.x-fixes
branch so the fix could be applied just there. ","11/Mar/09 18:37;dkulp;
Actually, the fix is even easier:

-        listeners = new ArrayList<BusLifeCycleListener>();
+        listeners = new CopyOnWriteArrayList<BusLifeCycleListener>();

Anyway, I'll get the committed and merged down.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Caller application hangs in case it uses the polling (Response) method with JAX-WS async mapping and an http error occurs during sending. In case of callback style (AsyncHandler), the client application has no way of getting the exception.",CXF-2104,12416654,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,orbang,orbang,11/Mar/09 16:09,24/Apr/09 21:17,14/Mar/19 02:29,11/Mar/09 22:39,2.1.4,2.1.5,2.2,,,,,,,,,,,,2.0.11,2.1.5,,,JAX-WS Runtime,,,,,,0,,,,"This happens if, for example, an http 404 occurs at sending. If the caller app wants to retrieve the response using Response<ResponseBean>.get(), it hangs forever. If it implements the AsynHandler<ResponseBean> method, handleResponse never gets called, which means that the app does not get notified of the exception. The attached patches are against
http://fisheye6.atlassian.com/browse/~raw,r=651669/cxf/trunk/rt/core/src/main/java/org/apache/cxf/interceptor/ClientOutFaultObserver.java
and
http://fisheye6.atlassian.com/browse/~raw,r=743441/cxf/trunk/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/JaxWsClientProxy.java","sun jdk 1.5.x, 1.6.x",,,,,,,,,,,,,,,,11/Mar/09 16:10;orbang;ClientOutFaultObserver.patch;https://issues.apache.org/jira/secure/attachment/12401940/ClientOutFaultObserver.patch,11/Mar/09 16:10;orbang;JaxWsClientProxy.patch;https://issues.apache.org/jira/secure/attachment/12401939/JaxWsClientProxy.patch,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113558,,,2009-03-11 16:09:08.0,,,,,,0|i14f2v:,233906,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Some attributes marshalled through JAXBSource have wrong names,CXF-2103,12416632,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,angelini,angelini,11/Mar/09 11:05,24/Apr/09 21:17,14/Mar/19 02:29,13/Apr/09 20:02,2.1.4,,,,,,,,,,,,,,2.1.5,2.2.1,,,,,,,,,0,,,,"Hello,

I'm using CXF through the JAX-WS Provider interface. I set the parametric parameter of the interface to javax.xml.transform.Source.

The XML results of marshalling a DOMSource or a JAXBSource are different, look for example at the first attribute of the ""formatResponse"" element (the DOMSource one is correct):

--- DOMSource ---

<SOAP-ENV:Envelope xmlns:SOAP-ENV=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">
   <SOAP-ENV:Header/>
   <SOAP-ENV:Body>
      <formatResponse attribute=""attr1"" xmlns=""http://www.cxftest.org"">
         <formattedName>test</formattedName>
      </formatResponse>
   </SOAP-ENV:Body>
</SOAP-ENV:Envelope>

------------------------------------------------------------------------------------------------------------

--- JAXBSource ---

<SOAP-ENV:Envelope xmlns:SOAP-ENV=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">
   <SOAP-ENV:Header/>
   <SOAP-ENV:Body>
      <formatResponse formatResponse=""attr1"" xmlns=""http://www.cxftest.org"">
         <formattedName>test</formattedName>
      </formatResponse>
   </SOAP-ENV:Body>
</SOAP-ENV:Envelope>

------------------------------------------------------------------------------------------------------------

you can find attached a test case.

Regards

Valerio Angelini
",,,,,,,,,,,,,,,,,11/Mar/09 11:06;angelini;cxf-JAXBSource-bug.zip;https://issues.apache.org/jira/secure/attachment/12401925/cxf-JAXBSource-bug.zip,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113557,,,Wed Mar 11 11:06:51 UTC 2009,,,,,,0|i0v1f3:,179203,,,,,,,,11/Mar/09 11:06;angelini;test case,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cannot add headers to request from Dispatch client in async mode -- ThreadLocal issue,CXF-2101,12416564,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,andrewclegg,andrewclegg,10/Mar/09 17:59,24/Apr/09 21:17,14/Mar/19 02:29,12/Mar/09 19:37,2.1.4,,,,,,,,,,,,,,2.1.5,,,,JAX-WS Runtime,,,,,,0,,,,"org.apache.cxf.jaxws.DispatchImpl extends org.apache.cxf.jaxws.BindingProviderImpl, which has a requestContext field:

protected ThreadLocal <Map<String, Object>> requestContext = 
    new ThreadLocal<Map<String, Object>>();

Because the request context is in a ThreadLocal, changes made to it are not visible when you invoke the service via DispatchImpl's invokeAsync method.

For example:

dispatch.getRequestContext().put(
        BindingProvider.SOAPACTION_USE_PROPERTY, Boolean.TRUE );
dispatch.getRequestContext().put(
        BindingProvider.SOAPACTION_URI_PROPERTY, ""uri:myAction"" );

// If you call it this way, no SOAPAction header, verified by Wireshark:
Response<StreamSource> response = dispatch.invokeAsync( request );

// But if you call it this way, you get the header
StreamSource result = dispatch.invoke( request );

I can package up a test case if anyone thinks it would help fix this. Personally I know very little about CXF's internals, or the JAX-WS specs, but I can do whatever necessary to help.",JDK 1.6.0_10,,,,,,,,,,,,,,CXF-1907,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-03-11 20:42:41.857,,,no_permission,,Advanced,,,,,,,,,,,113556,,,Thu Mar 12 14:51:39 UTC 2009,,,,,,0|i1adwf:,268718,,,,,,,,"11/Mar/09 20:42;dkulp;
When the dispatch stuff is refactored to use the ClientImpl properly, this problem should magically go away. 

That said, I'm definitely open to patches or anything to use as a temporary fix.  Would just changing to a non-thread local context work?    That's the default for non-dispatch clients so I would assume yes.

",12/Mar/09 11:04;andrewclegg;Wouldn't that cause problems with other code that assumes clients are thread-safe? (I'm not at all familiar with CXF's internals though.),"12/Mar/09 14:51;dkulp;
A temporary fix was put in to copy the request context when pushed onto the background thread.   That SHOULD allow this to work.  ",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Digest auth is broken,CXF-2100,12416535,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,chriz2600,chriz2600,10/Mar/09 13:57,24/Apr/09 21:17,14/Mar/19 02:29,10/Mar/09 14:45,2.1.4,2.2,,,,,,,,,,,,,2.1.5,2.2,,,Transports,,,,,,0,,,,"When trying to connect to virtualearth webservice using cxf I found some issues
in the cxf-rt-transports-http artifact regarding digest authentication

1) ""authSupplier"" configuration option is missing in org.apache.cxf.transport
.http.spring.HttpConduitBeanDefinitionParser#mapSpecificElements, so it's not
possible to configure a DigestAuthSupplier via cxf.xml.

2) In org.apache.cxf.transport.http.DigestAuthSupplier the method getPassword
returns the username and vice versa.

3) In org.apache.cxf.transport.http.DigestAuthSupplier the 'opaque' field is
always send to server even it was NULL, which results in 'opaque=""null""'.
RFC 2069 says:

opaque
  A string of data, specified by the server, which should be
  returned by the client unchanged.  It is recommended that this
  string be base64 or hexadecimal data.  This field is a
  ""quoted-string"" as specified in section 2.2 of the HTTP/1.1
  specification [2].

So I think the correct handling is to skip the opaque field, when no opaque-field
was sent by the server.

4) After a while the nonce may become stale, so a new digest has to be created.
To achieve that, every request against an digest authenticated server needs to be
cached and chunking has to be disabled to replay the request whith recalculated
digest.

5) org.apache.cxf.transport.http.HTTPConduit#setHeadersByAuthorizationPolicy: If
an authSupplier is present and a authString was generated, the method should return
even when the authString is NULL, instead of creating a basic auth authorization
header.

I included patches, which allow me to connect against virtualearth token service.
The wsdl can be found here: https://staging.common.virtualearth.net/find-30/common.asmx?WSDL,
but you have to be authenticated to get it.
",,,,,,,,,,,,,,,,,10/Mar/09 13:59;chriz2600;digest-auth.patch;https://issues.apache.org/jira/secure/attachment/12401836/digest-auth.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2009-03-10 14:45:24.194,,,no_permission,,,,,,,,,,,,,113555,,,Tue Mar 10 14:45:24 UTC 2009,,,,,,0|i1adwn:,268719,,,,,,,,10/Mar/09 13:59;chriz2600;Added patches.,"10/Mar/09 14:45;dkulp;
Patch applied.   Major thanks.

The only change I made was to add a flag to the base HttpAuthSupplier to allow any subclass to specify whether they need the request caching or not.   That eliminates the ""instanceof DigestAuthSupplier"" in the conduit and also allows us to do the same if we implement NTLM auth later on as that will also need request caching.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The @PathParam change from '+' to space.,CXF-2098,12416488,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,sergey_beryozkin,imcaptor,imcaptor,10/Mar/09 03:21,24/Apr/09 21:17,14/Mar/19 02:29,11/Mar/09 14:25,2.1.3,2.1.4,,,,,,,,,,,,,2.2,,,,JAX-RS,,,,,,0,,,,"When I send a PathParam include '+', the '+' is changed to space.

In version 2.1.1, the parameter is '+' unchanged.
",tomcat5.5.20 JDK1.5,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-03-10 14:43:57.367,,,no_permission,,Unknown,,,,,,,,,,,113553,,,Tue Mar 10 23:01:18 UTC 2009,,,,,,0|i0v1br:,179188,,,,,,,,10/Mar/09 14:43;sergey_beryozkin;Hi - I'm just sending a query to  ajaxrs list at this very moment of time. PathParam values are automatically decoded now and URLDecoder which we use produces a space. Solution (or workaround ?) is to add @Encoded to a given parameter and things should work fine - but I need to clarify few bits additionally too....,"10/Mar/09 17:53;sergey_beryozkin;Fix will go tomorrow morning - explicit '+' should not be decoded for path segments - thanks for catching this issue just before the 2.2 release :-), fix will go to 2.1.5 too
","10/Mar/09 23:01;imcaptor;Thank you, I will try the @Encoded tag method.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
"If wrapped style is used and multiple message parts are generated (because, for example, a soap header parameter is declared), the generated wsdl does not interop with RI or CXF client.",CXF-2097,12416444,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,orbang,orbang,09/Mar/09 15:30,24/Apr/09 21:17,14/Mar/19 02:29,13/Apr/09 19:50,2.1.4,,,,,,,,,,,,,,2.1.5,2.2.1,,,JAX-WS Runtime,,,,,,0,,,,"It happens because CXF by default uses the ""parameters"" name for both the input and output message parts. The following web method demonstrates the issue:

    @WebMethod(operationName = ""Hello"")
    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.WRAPPED)
    public void hello(
            @WebParam(targetNamespace = ""myns"", name = ""Message"") String message,
            @WebParam(header = true, name = ""myOutHeader"", targetNamespace = ""myns"", mode = Mode.OUT) Holder<String> header1) {
    }

which produces:

<wsdl:message name=""Hello"">
<wsdl:part element=""tns:Hello"" name=""parameters"">
    </wsdl:part>
</wsdl:message>
−
<wsdl:message name=""HelloResponse"">
<wsdl:part element=""tns:HelloResponse"" name=""parameters"">
    </wsdl:part>
<wsdl:part element=""tns:myOutHeader"" name=""myOutHeader"">
    </wsdl:part>
</wsdl:message>

The reference implementation produces the following:

<message name=""Hello"">
<part name=""parameters"" element=""tns:Hello""/>
</message>

<message name=""HelloResponse"">
<part name=""result"" element=""tns:HelloResponse""/>
<part name=""myOutHeader"" element=""tns:myOutHeader""/>
</message>

Please see the patch attached that fixes this problem in 2.1.4 and makes CXF generate the same as RI.",,,,,,,,,,,,,,,,,02/Apr/09 09:33;orbang;ReflectionServiceFactoryBean.patch;https://issues.apache.org/jira/secure/attachment/12404429/ReflectionServiceFactoryBean.patch,09/Mar/09 15:32;orbang;ReflectionServiceFactoryBean.patch;https://issues.apache.org/jira/secure/attachment/12401757/ReflectionServiceFactoryBean.patch,,,,,2.0,,,,,,,,,,,,,,,,,,,,2009-03-12 18:44:13.147,,,no_permission,,,,,,,,,,,,,113552,,,Thu Apr 02 09:33:57 UTC 2009,,,,,,0|i14dun:,233707,,,,,,,,"12/Mar/09 18:44;dkulp;
Unfortunately, blinding changing from parameters to result doesn't allow the JWS tck to pass.   If there ISN'T any headers (aka: single part in the message), I think it needs to be parameters, otherwise result is fine.    That will require a bit more work.

","02/Apr/09 09:33;orbang;Fixed the patch as you suggested, only name the out message part ""result"" if it is not a single part (aka there are some out headers). Patch is against http://fisheye6.atlassian.com/browse/~raw,r=760582/cxf/trunk/rt/frontend/simple/src/main/java/org/apache/cxf/service/factory/ReflectionServiceFactoryBean.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
wsdl2java -db xmlbeans can't generate right wrapped class,CXF-2095,12416399,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,njiang,njiang,njiang,09/Mar/09 01:24,24/Apr/09 21:17,14/Mar/19 02:29,09/Mar/09 02:07,2.1.3,2.1.4,,,,,,,,,,,,,2.1.5,2.2,,,,,,,,,0,,,,"Here is part of the SEI  which is generated by wsdl2java -db xmlbeans

{code}
    @ResponseWrapper(localName = ""greetMeResponse"", targetNamespace = ""http://apache.org/hello_world_soap_http/types"", className = ""org.apache.helloWorldSoapHttp.types.GreetMeResponseDocument"")
    @RequestWrapper(localName = ""greetMe"", targetNamespace = ""http://apache.org/hello_world_soap_http/types"", className = ""org.apache.helloWorldSoapHttp.types.GreetMeDocument"")
    @WebResult(name = ""responseType"", targetNamespace = ""http://apache.org/hello_world_soap_http/types"")
    @WebMethod
    public org.apache.xmlbeans.XmlString greetMe(
        @WebParam(name = ""requestType"", targetNamespace = ""http://apache.org/hello_world_soap_http/types"")
        org.apache.helloWorldSoapHttp.types.MyStringType requestType
    );
{code}

The tool should mapping the XmlBeans buildin type into the natural Java class, such as org.apache.xmlbeans.XmlString to String.
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113550,,,Mon Mar 09 02:07:06 UTC 2009,,,,,,0|i1adx3:,268721,,,,,,,,09/Mar/09 02:07;njiang;Applied the patch into trunk and 2.1.x branch.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Aegis schema generation doing arrays at two levels,CXF-2094,12416373,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,bmargulies,bmargulies,bmargulies,07/Mar/09 19:14,24/Apr/09 21:17,14/Mar/19 02:29,07/Mar/09 19:40,2.2,,,,,,,,,,,,,,2.2,,,,Aegis Databinding,,,,,,0,,,,"TypeClassInfo.getMinOccurs(QName) isn't really implemented, and getMaxOccurs(QName) doesn't even exist!

In an effort to work around this, I made the caller of this check directly for an element of Array type and retrieve the bounds. However, that check does not manage to mirror the logic that decides when to use an ArrayOf... type. So it ends up generating schema with maxOccurs at both levels. Oops. The fix has to be to actually make getMinOccurs work right and add the missing getMaxOccurs. 

The real fun here seems to be that a parameter with maxOccurs doesn't trigger an ArrayOf type correctly. Arggh.",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113549,,,2009-03-07 19:14:16.0,,,,,,0|i0v43j:,179637,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CXF Compatiblity,CXF-2093,12416338,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,bmargulies,relphie,relphie,06/Mar/09 22:52,01/Feb/10 19:02,14/Mar/19 02:29,15/Dec/09 20:39,2.0.10,2.0.9,2.1.3,2.1.4,2.1.5,2.2,,,,,,,,,2.1.9,2.2.6,,,Integration,,,,,,0,,,,"The attached projects attempt to illustrate the compatibility problems between CXF versions.  The projects also illustrate some bugs within each CXF code branch.  Hopefully these test projects can help to identify the bugs.

The -service projects are wars.  They each contain a test that starts the war, generates a client, and runs each service method.  The wars can also run standalone with 'mvn jetty:run', and you can run the -client projects tests against it.
The -client projects contains a test that creates a client, and attempts to run each service method against a localhost:8080 server.

Here is an overview of the current compatibility with the supplied projects:

2.0 Service
----------------
1.  2.0 Client:  The client throws a null-pointer exception when creating the Aegis databinding at org.apache.cxf.aegis.type.basic.BeanTypeInfo.getType(BeanTypeInfo.java:199).
2.  2.1 Client:  The client  throws a null-pointer exception when creating the Aegis databinding at org.apache.cxf.aegis.type.basic.BeanType.getMinOccurs(BeanType.java:775).
3.  2.2 Client:  The client cannot send any method arguments (all methods receive null-valued arguments.

2.1 Service
----------------
1.  2.0 Client:  The client throws a null-pointer exception when creating the Aegis databinding at org.apache.cxf.aegis.type.basic.BeanTypeInfo.getType(BeanTypeInfo.java:199).
2.  2.1 Client:  The client  throws a null-pointer exception when creating the Aegis databinding at org.apache.cxf.aegis.type.basic.BeanType.getMinOccurs(BeanType.java:775).
3.  2.2 Client:  The client cannot send any method arguments (all methods receive null-valued arguments.

2.2 Service
----------------
1.  2.0 Client:  The client throws a null-pointer exception when creating the Aegis databinding at org.apache.cxf.aegis.type.basic.BeanTypeInfo.getType(BeanTypeInfo.java:199).
2.  2.1 Client:  The client  throws a null-pointer exception when creating the Aegis databinding at org.apache.cxf.aegis.type.basic.BeanType.getMinOccurs(BeanType.java:775).
3.  2.2 Client:  All tests pass.
",,,,,,,,,,,,,,,,,06/Mar/09 22:54;relphie;cxf-test-case.zip;https://issues.apache.org/jira/secure/attachment/12401651/cxf-test-case.zip,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2009-03-11 21:31:06.085,,,no_permission,,,,,,,,,,,,,113548,,,Tue Dec 15 20:39:19 UTC 2009,,,,,,0|i1adxb:,268722,,,,,,,,06/Mar/09 22:54;relphie;Test projects for 2.0 - 2.1 - 2.2 compatiblity tests.,"11/Mar/09 21:31;bmargulies;I'm not succeeding in getting this running under Eclipse. I get the following. I do end up with Spring 2.5.6 in the classpath.

java.lang.NoSuchMethodError: org.springframework.core.annotation.AnnotationUtils.findAnnotationDeclaringClass(Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/Class;
	at org.springframework.test.context.TestContext.retrieveContextLocations(TestContext.java:144)
	at org.springframework.test.context.TestContext.<init>(TestContext.java:110)
	at org.springframework.test.context.TestContextManager.<init>(TestContextManager.java:103)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTestContextManager(SpringJUnit4ClassRunner.java:120)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.<init>(SpringJUnit4ClassRunner.java:80)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:494)
	at org.junit.internal.requests.ClassRequest.buildRunner(ClassRequest.java:33)
	at org.junit.internal.requests.ClassRequest.getRunner(ClassRequest.java:28)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.<init>(JUnit4TestReference.java:28)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestClassReference.<init>(JUnit4TestClassReference.java:24)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestLoader.createTest(JUnit4TestLoader.java:40)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestLoader.loadTests(JUnit4TestLoader.java:30)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:445)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)

","11/Mar/09 21:49;bmargulies;I gave up on getting CXF and your test case into Eclipse at the same time. Now I hit a different failure in the 2.1 environment; an attempt to load the XML schema-schema into XML Schema twice.

Someone is going to have to find a way to convert your stuff into in-the-tree test cases. I'll try.
","11/Mar/09 23:48;bmargulies;The Map types in your service are trying to end up in the default type mapping instead of your per-service type mapping. I don't know why yet.
","11/Mar/09 23:49;bmargulies;Ah, I see. When your registrar asks for the context, it forces a premature initialization, and that causes the use of the XSD namespace URI, with unpleasant consequences.

",12/Mar/09 01:50;bmargulies;2.1 now passes against 2.1.,"12/Mar/09 14:51;relphie;I do use the m2eclipse plugin to build the projects in eclipse, maybe that would help?","05/Oct/09 16:51;dkulp;
Is this now resolved?       The 2.1 <-->   2.1   and 2.2 <-->2.2 are now working, right? ","05/Oct/09 20:58;bmargulies;I didn't do very much here, I got swamped.
","15/Dec/09 20:39;dkulp;
I'm resolving this.   Using the test case above, I checked:

|| Client || Server
|2.1.9-SNAPSHOT|2.1.9-SNAPSHOT|
|2.1.9-SNAPSHOT|2.2.6-SNAPSHOT|
|2.2.6-SNAPSHOT|2.1.9-SNAPSHOT|
|2.2.6-SNAPSHOT|2.2.6-SNAPSHOT|

Thus, all the 2.1 <--> 2.2 scenarios are now working.   The 2.0.x scenarios might not be, but we don't support 2.0.x anymore.
",,,,,,,,,,,,,,,,,,,,,
"CXF 2.2-SNAPSHOT exports ""svn packages""",CXF-2092,12416336,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,ceefour,ceefour,06/Mar/09 21:44,04/Jun/09 21:34,14/Mar/19 02:29,12/Mar/09 18:30,2.2,,,,,,,,,,,,,,Invalid,,,,OSGi,,,,,,0,,,,"For example in the manifest of cxf-bundle-jaxrs-2.2:

Import-Package: .......
org.apache.cxf..svn.text-base;version=""2.2.0.SNAPSHOT"",
org.apache.cxf.aegis;version=""2.2.0.SNAPSHOT"",
org.apache.cxf. aegis.databinding;version=""2.2.0.SNAPSHOT"",
org.apache.cxf.aegis.databinding..svn.prop-base;.......

The ..svn something isn't right.",(irrelevant),,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-03-12 18:30:06.194,,,no_permission,,,,,,,,,,,,,113547,,,Fri Mar 13 15:51:58 UTC 2009,,,,,,0|i13zrr:,231425,,,,,,,,"12/Mar/09 18:30;dkulp;
I believe this was an issue caused from building the snapshots on my dev machine that has eclipse doing strange things and such to the same svn checkout tree. 

The latest snapshots that are now deployed from hudson don't seem to have those issues.",13/Mar/09 15:51;sergey_beryozkin;I see no .svn noise on windows too. ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CXF Bundle is hardly usable under OSGi,CXF-2091,12416313,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,ceefour,ceefour,06/Mar/09 16:42,01/Feb/10 19:02,14/Mar/19 02:29,17/Dec/09 22:21,2.1.4,,,,,,,,,,,,,,2.2.6,,,,OSGi,,,,,,0,,,,"CXF-Bundle is really hard to use.

The cause is because it's very strict in its Import-Package manifest, version constract. Especially in packages that are provided by default in say, JDK 6, but not exported with version by Equinox.

For example the: Import-Package: javax.xml.stream; version=""1.0.0"" results in the following error

osgi> start 81
org.osgi.framework.BundleException: The bundle could not be resolved. Reason: Missing Constraint: Import-Package: javax.xml.stream; version=""1.0.0""
        at org.eclipse.osgi.framework.internal.core.BundleHost.startWorker(BundleHost.java:305)
        at org.eclipse.osgi.framework.internal.core.AbstractBundle.start(AbstractBundle.java:265)
        at org.eclipse.osgi.framework.internal.core.AbstractBundle.start(AbstractBundle.java:257)
        at org.eclipse.osgi.framework.internal.core.FrameworkCommandProvider._start(FrameworkCommandProvider.java:257)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)
        at org.eclipse.osgi.framework.internal.core.FrameworkCommandInterpreter.execute(FrameworkCommandInterpreter.java:150)
        at org.eclipse.osgi.framework.internal.core.FrameworkConsole.docommand(FrameworkConsole.java:302)
        at org.eclipse.osgi.framework.internal.core.FrameworkConsole.console(FrameworkConsole.java:287)
        at org.eclipse.osgi.framework.internal.core.FrameworkConsole.run(FrameworkConsole.java:223)
        at java.lang.Thread.run(Thread.java:619)

Which happens because Equinox somehow exports the package without version:

osgi> p javax.xml.stream
javax.xml.stream; version=""0.0.0""<System Bundle [0]>
  initial@reference:file:plugins/org.eclipse.update.configurator.jar/ [2] imports
  /.../target/work/webapp/WEB-INF/load/org.apache.servicemix.bundles.neethi-2.0.4_1.jar [55] imports

Note that Neethi packaged by ServiceMix has no problem importing it.

I would vote for these solutions/workarounds:
* remove the version requirement of Import-Package, of all JDK(6) packages
* remove the version requirement for all ""1.0.0"" packages, or change it to ""[0.0.0,2.0.0)"" which means ""anything before version 2.0.0, which I think is a more practical interpretation of require-version-1.0""
* document where to find the rest of dependencies (OSGi bundles, not plain Java JARs). I have to search through : http://servicemix.apache.org/SMX4/bundles-repository.html , ServiceMix specs, Geronimo specs, and SpringSource Repository and mix and match between them... nightmare :-(

Also important: Even if I can find those bundles, simply installing (e.g. javax.*) bundles which has the proper exported version is usually not enough, because these packages are already exported by system bundle... these packages will have two suppliers.... resulting in ""uses conflict"" errors. Happens to my case. :-(

osgi> b 81
/.../target/work/webapp/WEB-INF/load/cxf-bundle-jaxrs-2.1.4.jar [81]
  Id=81, Status=INSTALLED   Data Root=/.../target/work/eclipse/configuration/org.eclipse.osgi/bundles/81/data                                                                                          
  No registered services.                                                                                              
  No services in use.                                                                                                  
  Exported packages                                                                                                    
    org.apache.cxf.configuration.jsse; version=""2.1.4""[exported]                                                       
    org.apache.cxf.jaxrs.utils; version=""2.1.4""[exported]                                                              
    org.apache.cxf.service.invoker; version=""2.1.4""[exported]                                                          
    org.codehaus.xfire.aegis.type.java5; version=""0.0.0""[exported]                                                     
    org.apache.cxf.binding.xml; version=""2.1.4""[exported]                                                              
    org.apache.cxf.configuration.security; version=""2.1.4""[exported]                                                   
    org.apache.cxf.bus.spring; version=""2.1.4""[exported]                                                               
    org.apache.cxf.clustering.spring; version=""2.1.4""[exported]                                                        
    org.apache.cxf.jaxrs.utils.schemas; version=""2.1.4""[exported]                                                      
    org.apache.cxf.management.annotation; version=""2.1.4""[exported]                                                    
    org.apache.cxf.transport.http.gzip; version=""2.1.4""[exported]                                                      
    org.apache.cxf.aegis.util; version=""2.1.4""[exported]                                                               
    org.apache.cxf.transport.https; version=""2.1.4""[exported]                                                          
    org.apache.cxf.binding.soap.wsdl11; version=""2.1.4""[exported]                                                      
    org.apache.cxf.resource; version=""2.1.4""[exported]                                                                 
    org.apache.cxf.jaxb; version=""2.1.4""[exported]                                                                     
    org.apache.cxf.transports.http_jetty.configuration; version=""2.1.4""[exported]                                      
    org.apache.cxf.workqueue; version=""2.1.4""[exported]                                                                
    org.apache.cxf.databinding; version=""2.1.4""[exported]                                                              
    org.apache.cxf.endpoint; version=""2.1.4""[exported]                                                                 
    org.apache.cxf.jaxrs.provider; version=""2.1.4""[exported]                                                           
    org.apache.cxf.aegis.xml.stax; version=""2.1.4""[exported]                                                           
    org.apache.cxf.databinding.source; version=""2.1.4""[exported]                                                       
    org.apache.cxf.tools.validator; version=""2.1.4""[exported]                                                          
    org.apache.cxf.jaxrs.utils.multipart; version=""2.1.4""[exported]                                                    
    org.apache.cxf.binding.soap.saaj; version=""2.1.4""[exported]                                                        
    org.apache.cxf.aegis.type.encoded; version=""2.1.4""[exported]                                                       
    org.apache.cxf.transport.http.spring; version=""2.1.4""[exported]                                                    
    org.apache.cxf.ws.addressing.v200403; version=""2.1.4""[exported]                                                    
    org.apache.cxf.bus; version=""2.1.4""[exported]                                                                      
    org.apache.cxf.frontend.spring; version=""2.1.4""[exported]                                                          
    org.apache.cxf.common.annotation; version=""2.1.4""[exported]                                                        
    org.apache.cxf.security.transport; version=""2.1.4""[exported]                                                       
    org.apache.cxf.feature; version=""2.1.4""[exported]                                                                  
    org.apache.cxf.phase; version=""2.1.4""[exported]                                                                    
    org.apache.cxf.configuration.jsse.spring; version=""2.1.4""[exported]                                                
    org.apache.cxf.binding.xml.wsdl11; version=""2.1.4""[exported]                                                       
    org.apache.cxf.attachment; version=""2.1.4""[exported]                                                               
    org.apache.cxf.jaxb.io; version=""2.1.4""[exported]                                                                  
    org.apache.cxf.version; version=""2.1.4""[exported]                                                                  
    org.apache.cxf.tools.common; version=""2.1.4""[exported]                                                             
    org.apache.cxf.binding; version=""2.1.4""[exported]                                                                  
    org.apache.cxf.aegis.type.java5; version=""2.1.4""[exported]                                                         
    org.apache.cxf.endpoint.dynamic; version=""2.1.4""[exported]                                                         
    org.apache.cxf.ws.addressing.v200408; version=""2.1.4""[exported]                                                    
    org.apache.cxf.event; version=""2.1.4""[exported]                                                                    
    org.apache.cxf.tools.common.dom; version=""2.1.4""[exported]                                                         
    org.apache.cxf.common.commands; version=""2.1.4""[exported]                                                          
    org.apache.cxf.binding.xml.interceptor; version=""2.1.4""[exported]                                                  
    org.apache.cxf.jca.outbound; version=""2.1.4""[exported]                                                             
    org.apache.cxf.service.model; version=""2.1.4""[exported]                                                            
    org.apache.cxf.simple; version=""2.1.4""[exported]                                                                   
    org.apache.cxf.interceptor; version=""2.1.4""[exported]                                                              
    org.apache.cxf.transport; version=""2.1.4""[exported]                                                                
    org.apache.cxf.management; version=""2.1.4""[exported]                                                               
    org.apache.cxf.common.xmlschema; version=""2.1.4""[exported]                                                         
    org.apache.cxf.configuration; version=""2.1.4""[exported]                                                            
    org.apache.cxf.jaxrs.lifecycle; version=""2.1.4""[exported]                                                          
    org.apache.cxf.binding.soap; version=""2.1.4""[exported]                                                             
    org.apache.cxf.aegis.util.date; version=""2.1.4""[exported]                                                          
    org.apache.cxf; version=""2.1.4""[exported]                                                                          
    org.apache.cxf.clustering; version=""2.1.4""[exported]                                                               
    org.apache.cxf.transport.http_jetty.spring; version=""2.1.4""[exported]                                              
    org.apache.cxf.security; version=""2.1.4""[exported]                                                                 
    org.apache.cxf.staxutils; version=""2.1.4""[exported]                                                                
    org.apache.cxf.helpers; version=""2.1.4""[exported]                                                                  
    org.apache.cxf.headers; version=""2.1.4""[exported]                                                                  
    org.apache.cxf.transport.http_jetty; version=""2.1.4""[exported]                                                     
    org.apache.cxf.tools.common.extensions.soap; version=""2.1.4""[exported]                                             
    org.apache.cxf.jaxb.attachment; version=""2.1.4""[exported]                                                          
    org.apache.cxf.frontend; version=""2.1.4""[exported]                                                                 
    org.apache.cxf.common.i18n; version=""2.1.4""[exported]                                                              
    org.apache.cxf.bindings.xformat; version=""2.1.4""[exported]                                                         
    org.apache.cxf.ws.policy.builder.primitive; version=""2.1.4""[exported]                                              
    org.apache.cxf.service.factory; version=""2.1.4""[exported]                                                          
    org.apache.cxf.jaxrs.model; version=""2.1.4""[exported]                                                              
    org.apache.cxf.jaxrs.impl; version=""2.1.4""[exported]                                                               
    META-INF.cxf; version=""0.0.0""[exported]                                                                            
    org.apache.cxf.aegis.type.mtom; version=""2.1.4""[exported]                                                          
    org.apache.cxf.ws.policy; version=""2.1.4""[exported]                                                                
    org.apache.cxf.transport.http; version=""2.1.4""[exported]                                                           
    org.apache.cxf.ws.policy.builder.xml; version=""2.1.4""[exported]                                                    
    org.apache.cxf.jaxrs.ext; version=""2.1.4""[exported]                                                                
    org.apache.cxf.transports.http; version=""2.1.4""[exported]                                                          
    org.apache.cxf.aegis.type.basic; version=""2.1.4""[exported]                                                         
    org.apache.cxf.buslifecycle; version=""2.1.4""[exported]                                                             
    org.apache.cxf.wsdl.http; version=""2.1.4""[exported]                                                                
    org.apache.cxf.bus.extension; version=""2.1.4""[exported]                                                            
    org.apache.cxf.tools.util; version=""2.1.4""[exported]                                                               
    org.apache.cxf.common.classloader; version=""2.1.4""[exported]                                                       
    org.apache.cxf.ws.policy.util; version=""2.1.4""[exported]                                                           
    org.apache.cxf.jaxrs; version=""2.1.4""[exported]                                                                    
    org.apache.cxf.common.injection; version=""2.1.4""[exported]                                                         
    org.apache.cxf.configuration.spring; version=""2.1.4""[exported]                                                     
    org.apache.cxf.jaxrs.interceptor; version=""2.1.4""[exported]                                                        
    org.apache.cxf.aegis.type.collection; version=""2.1.4""[exported]                                                    
    org.apache.cxf.wsdl11; version=""2.1.4""[exported]                                                                   
    org.apache.cxf.transport.http.policy; version=""2.1.4""[exported]                                                    
    org.apache.cxf.transport.servlet; version=""2.1.4""[exported]                                                        
    org.apache.cxf.common.logging; version=""2.1.4""[exported]                                                           
    org.apache.cxf.catalog; version=""2.1.4""[exported]                                                                  
    org.apache.cxf.tools.common.model; version=""2.1.4""[exported]                                                       
    org.apache.cxf.aegis.databinding; version=""2.1.4""[exported]                                                        
    org.apache.cxf.aegis; version=""2.1.4""[exported]                                                                    
    org.apache.cxf.extension; version=""2.1.4""[exported]                                                                
    org.apache.cxf.transport.https_jetty; version=""2.1.4""[exported]                                                    
    org.apache.cxf.binding.soap.spring; version=""2.1.4""[exported]                                                      
    org.apache.cxf.message; version=""2.1.4""[exported]                                                                  
    org.apache.cxf.common.util; version=""2.1.4""[exported]                                                              
    org.apache.cxf.binding.soap.interceptor; version=""2.1.4""[exported]                                                 
    org.apache.cxf.tools.common.toolspec; version=""2.1.4""[exported]                                                    
    org.apache.cxf.aegis.util.jdom; version=""2.1.4""[exported]                                                          
    org.apache.cxf.ws.addressing; version=""2.1.4""[exported]                                                            
    org.apache.cxf.aegis.util.stax; version=""2.1.4""[exported]                                                          
    org.apache.cxf.service; version=""2.1.4""[exported]                                                                  
    org.apache.cxf.wsdl; version=""2.1.4""[exported]                                                                     
    org.apache.cxf.aegis.xml.jdom; version=""2.1.4""[exported]                                                           
    org.apache.cxf.databinding.stax; version=""2.1.4""[exported]                                                         
    org.apache.cxf.test; version=""2.1.4""[exported]                                                                     
    org.apache.cxf.binding.soap.model; version=""2.1.4""[exported]                                                       
    org.apache.cxf.jaxrs.ext.multipart; version=""2.1.4""[exported]                                                      
    org.apache.cxf.tools.common.toolspec.parser; version=""2.1.4""[exported]                                             
    org.apache.cxf.aegis.type.xml; version=""2.1.4""[exported]                                                           
    org.apache.cxf.aegis.xml; version=""2.1.4""[exported]                                                                
    org.apache.cxf.databinding.source.mime; version=""2.1.4""[exported]                                                  
    org.apache.cxf.bus.resource; version=""2.1.4""[exported]                                                             
    org.apache.cxf.aegis.type; version=""2.1.4""[exported]                                                               
    org.apache.cxf.jaxrs.impl.tl; version=""2.1.4""[exported]                                                            
    org.apache.cxf.io; version=""2.1.4""[exported]                                                                       
    org.apache.cxf.jaxrs.spring; version=""2.1.4""[exported]                                                             
    org.apache.cxf.transport.http_jetty.continuations; version=""2.1.4""[exported]                                       
    org.apache.cxf.ws.policy.builder.jaxb; version=""2.1.4""[exported]                                                   
    org.apache.cxf.ws.addressing.wsdl; version=""2.1.4""[exported]                                                       
    org.apache.cxf.transports.http.configuration; version=""2.1.4""[exported]                                            
    org.apache.cxf.continuations; version=""2.1.4""[exported]                                                            
  No imported packages
  No fragment bundles
  No named class spaces
  No required bundles

",Equinox,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-12-17 22:21:36.686,,,no_permission,,,,,,,,,,,,,113546,,,Thu Dec 17 22:21:36 UTC 2009,,,,,,0|i0v43b:,179636,,,,,,,,"06/Mar/09 16:56;ceefour;Spelling correction: 

The cause is because it's very strict in its Import-Package manifest, version **constraint**. ","17/Dec/09 22:21;dkulp;
Managed to get the versions to be ranges from [0.0,#)  so the 0.0 version that equinox uses should be OK.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ws-sec 10 server interop tests failing,CXF-2090,12416292,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,eamonndwyer,eamonndwyer,06/Mar/09 10:46,24/Apr/09 21:17,14/Mar/19 02:29,06/Mar/09 17:47,2.2,,,,,,,,,,,,,,2.2,,,,WS-* Components,,,,,,0,,,,The ws sec 10 tests haven't been setup correctly. They need more configuration to function correctly.,,,,,,,,,,,,,,,,,06/Mar/09 10:47;eamonndwyer;Mar042009.patch;https://issues.apache.org/jira/secure/attachment/12401612/Mar042009.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2009-03-06 17:47:53.695,,,no_permission,,,,,,,,,,,,,113545,,,Fri Mar 06 17:47:53 UTC 2009,,,,,,0|i1adxj:,268723,,,,,,,,06/Mar/09 10:47;eamonndwyer;The attached file is a propsed patch for this issue,06/Mar/09 17:47;dkulp;patch applied,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Sign before encrypt throws a ClassCastException,CXF-2089,12416205,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,eamonndwyer,eamonndwyer,05/Mar/09 13:27,24/Apr/09 21:17,14/Mar/19 02:29,05/Mar/09 21:32,2.2,,,,,,,,,,,,,,2.2,,,,,,,,,,0,,,,"The UX ws-sec 11 test fails in the server side with the following exception

INFO: Interceptor has thrown exception, unwinding now
org.apache.cxf.interceptor.Fault: java.util.ArrayList
	at org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler.doSignBeforeEncrypt(SymmetricBindingHandler.java:380)
	at org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler.handleBinding(SymmetricBindingHandler.java:113)
	at org.apache.cxf.ws.security.wss4j.PolicyBasedWSS4JOutInterceptor$PolicyBasedWSS4JOutInterceptorInternal.handleMessage(PolicyBasedWSS4JOutInterceptor.java:131)
	at org.apache.cxf.ws.security.wss4j.PolicyBasedWSS4JOutInterceptor$PolicyBasedWSS4JOutInterceptorInternal.handleMessage(PolicyBasedWSS4JOutInterceptor.java:1)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
	at org.apache.cxf.interceptor.OutgoingChainInterceptor.handleMessage(OutgoingChainInterceptor.java:74)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
	at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:89)
	at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.serviceRequest(JettyHTTPDestination.java:302)
	at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.doService(JettyHTTPDestination.java:265)
	at org.apache.cxf.transport.http_jetty.JettyHTTPHandler.handle(JettyHTTPHandler.java:70)
	at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:729)
	at org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:206)
	at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)
	at org.mortbay.jetty.Server.handle(Server.java:324)
	at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:505)
	at org.mortbay.jetty.HttpConnection$RequestHandler.content(HttpConnection.java:843)
	at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:729)
	at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:205)
	at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:380)
	at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:395)
	at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:488)
Caused by: java.lang.ClassCastException: java.util.ArrayList
	at org.apache.cxf.ws.security.wss4j.policyhandlers.AbstractBindingBuilder.assertSupportingTokens(AbstractBindingBuilder.java:370)
	at org.apache.cxf.ws.security.wss4j.policyhandlers.AbstractBindingBuilder.assertSupportingTokens(AbstractBindingBuilder.java:1343)
	at org.apache.cxf.ws.security.wss4j.policyhandlers.SymmetricBindingHandler.doSignBeforeEncrypt(SymmetricBindingHandler.java:331)
	... 21 more",,,,,,,,,,,,,,,,,05/Mar/09 13:28;eamonndwyer;Mar05.patch;https://issues.apache.org/jira/secure/attachment/12401518/Mar05.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113544,,,Thu Mar 05 13:28:57 UTC 2009,,,,,,0|i1adxr:,268724,,,,,,,,05/Mar/09 13:28;eamonndwyer;Attaching possible fix for this issue,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wrong serialisation order of elements when using Aegis databinding.,CXF-2088,12416195,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,bmargulies,chrisdutz,chrisdutz,05/Mar/09 09:53,24/Apr/09 21:17,14/Mar/19 02:29,05/Mar/09 23:58,2.1.4,,,,,,,,,,,,,,2.1.5,,,,Aegis Databinding,,,,,,0,,,,"In my current case I hava 
* an abstract Java class ""AbstractDatabaseObject"" defining a property ""id"".
* an abstract Java class ""Credential"" which extends ""AbstractDatabaseObject"" and defines a property ""name""
* a concrete Java class ""UsernamePasswordCredential"" which extends ""Credential"" and defines properties ""username"" and ""password""

All schemas are created to my greates satisfaction (Great Job!).
Unfortunately the serialisation order when using Aegis databinding (don't know if its the same using others) is the wrong way around.
Instead of getting:
<cred>
    <id>306ce816-01b7-11de-8d92-8d4df6b73eb1</id>
    <name>dsfgsdfgs</name>
    <password>dsfsfdg</password>
    <username>sdsdfgsdfg</username>
</cred>

I get:
<cred>
    <password>dsfsfdg</password>
    <username>sdsdfgsdfg</username>
    <name>dsfgsdfgs</name>
    <id>306ce816-01b7-11de-8d92-8d4df6b73eb1</id>
</cred>

Which my Flex client complains about.

I'll try to whip up a patch fixing this issue today.",,,,,,,,,,,,,,,,,05/Mar/09 10:27;chrisdutz;BeanType.java;https://issues.apache.org/jira/secure/attachment/12401504/BeanType.java,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2009-03-05 20:15:12.272,,,no_permission,,Advanced,,,,,,,,,,,113543,,,Fri Mar 06 12:16:00 UTC 2009,,,,,,0|i1adxz:,268725,,,,,,,,"05/Mar/09 10:29;chrisdutz;All that has to be done to resonve this issue, is to change the order of two code fragments in the method writeObjectInternal

Here the blocks:

for (Iterator itr = inf.getElements(); itr.hasNext();) {
    ...
}

and

if (inf.isExtension()) {
    ...
}

simply have to be swapped to output the extended type first.
","05/Mar/09 20:15;bmargulies;Could you post your fix as a patch, please? (diff -u)",05/Mar/09 23:57;bmargulies;Are you sure we want to run the extension code between the attributes and the elements? I guess attribute order doesn't matter.,05/Mar/09 23:58;bmargulies;Fix applied to trunk.,"06/Mar/09 11:27;chrisdutz;I haven't had a real deep look into how data is processed. The main problem was that the order was simply not schema valid.

I guss to make it really fool-proof it would be necessary to do a two-phase processing ... 
1. Process attributes of current- and parent-types
2. Process the elements of the parents and then of the current type

Tanks for patching :-)
When will with be available as compiled maven-artifact?
I am curently using a local artifact of version 2.1.4 with the applied patch, as I sort of had problems building a 2.1.4.1 version ...","06/Mar/09 12:16;bmargulies;If you are in a hurry, and will work with trunk, I'll make a snapshot. If you need 2.1.x, someone will have to do a merge down first.",,,,,,,,,,,,,,,,,,,,,,,,,
"CXFServlet / URIResolver tries to load file """" (empty file name)",CXF-2087,12416156,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,dkulp,gvanore,gvanore,04/Mar/09 22:28,24/Apr/09 21:17,14/Mar/19 02:29,12/Mar/09 20:24,2.1.4,,,,,,,,,,,,,,2.0.11,2.1.5,,,,,,,,,0,,,,"When I enable Java security, I get the following stack trace after allowing permission to 'cxf.xml' and '/WEB-INF/cxf-servlet.xml':

java.security.AccessControlException: access denied (java.io.FilePermission  read)
	java.security.AccessControlContext.checkPermission(AccessControlContext.java:323)
	java.security.AccessController.checkPermission(AccessController.java:546)
	java.lang.SecurityManager.checkPermission(SecurityManager.java:532)
	java.lang.SecurityManager.checkRead(SecurityManager.java:871)
	java.io.File.exists(File.java:731)
	org.apache.cxf.resource.URIResolver.tryFileSystem(URIResolver.java:158)
	org.apache.cxf.resource.URIResolver.<init>(URIResolver.java:84)
	org.apache.cxf.resource.URIResolver.<init>(URIResolver.java:72)
	org.apache.cxf.resource.URIResolver.<init>(URIResolver.java:68)
	org.apache.cxf.transport.servlet.CXFServlet.loadAdditionalConfig(CXFServlet.java:148)
	org.apache.cxf.transport.servlet.CXFServlet.updateContext(CXFServlet.java:134)
	org.apache.cxf.transport.servlet.CXFServlet.loadSpringBus(CXFServlet.java:101)
	org.apache.cxf.transport.servlet.CXFServlet.loadBus(CXFServlet.java:70)
	org.apache.cxf.transport.servlet.AbstractCXFServlet.init(AbstractCXFServlet.java:79)

Looking through the code, I see that CXFServlet uses the URIResolver constructor that calls this("""", path). (lines 67-69).

Later in the tryFileSystem method, URIResolver null-checks the baseUriStr (line 154) and then attempts to analyze it.  The first File.exists() call triggers the FilePermission exception.

I believe that this can be fixed if the URIResolver constructor calls this(null, path) instead of this("""", path).  Granting read permission to """" *DOES* solve the issue as a workaround, but it's less than ideal - security policies are often scrutinized and something like that may raise flags.",Redhat 5.2; Java 1.6.0u12; Tomcat 6.0.18; CXF 2.1.4 - java security enabled,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-03-12 20:24:44.795,,,no_permission,,Novice,,,,,,,,,,,113542,,,Thu Mar 12 20:24:44 UTC 2009,,,,,,0|i1ady7:,268726,,,,,,,,04/Mar/09 22:29;gvanore;Added line number to description.,"12/Mar/09 20:24;dkulp;
If the baseURI is null or empty, several of the things in there can be skipped.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Applications classloader should be set during method invocations.,CXF-2085,12416110,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,sergey_beryozkin,chaitanyak,chaitanyak,04/Mar/09 14:43,24/Apr/09 21:17,14/Mar/19 02:29,10/Mar/09 21:54,2.2,,,,,,,,,,,,,,2.2,,,,,,,,,,0,,,,"Invocation of a JAX-RS method may depend on some application classes which may not be loaded already, they will be loaded during invocation. But during invocation the classloader will be CXF war application classloader, this will lead to NoClassDefFoundErrors. To avoid this root resource class' classloader should be set on the current thread.
Similar fix should be applied to provider methods such as readFrom, writeTo etc.",,,,,,,,,,,,,,,,,06/Mar/09 12:23;chaitanyak;cl_test.war;https://issues.apache.org/jira/secure/attachment/12401619/cl_test.war,06/Mar/09 13:34;chaitanyak;new_cl_test.war;https://issues.apache.org/jira/secure/attachment/12401625/new_cl_test.war,06/Mar/09 13:35;chaitanyak;new_sources.zip;https://issues.apache.org/jira/secure/attachment/12401626/new_sources.zip,06/Mar/09 12:24;chaitanyak;sources.zip;https://issues.apache.org/jira/secure/attachment/12401620/sources.zip,,,4.0,,,,,,,,,,,,,,,,,,,,2009-03-05 19:38:59.602,,,no_permission,,Moderate,,,,,,,,,,,113540,,,Tue Mar 10 21:54:06 UTC 2009,,,,,,0|i13zin:,231384,,,,,,,,"05/Mar/09 19:38;sergey_beryozkin;Hi

Can you provide some simple test case please ? I'm not sure I understand. If a class lazily loaded when one of the resource class methods is being invoked then the resource class loader will be used to load the class first... 

 ","06/Mar/09 12:50;sergey_beryozkin;thanks - so if you expect the context loader be equal to that of the resource class (HelloClass in your example) loader, then why would not you do

HelloService.class.getClassLoader(), when loading the properties ?","06/Mar/09 13:39;chaitanyak;I am sorry. I was not clear enough last time. I hope this example explains why i want to use Thread.currentThread().getContextClassLoader() instead of HelloService.class.getClassLoader().

use the request urls :          new_cl_test/helloservice/hello and new_cl_test/byeservice/bye

Thank you for shuch a prompt response.","06/Mar/09 14:29;sergey_beryozkin;So why don't we use User.class.getClassLoader() in this case ? it will be the same loader which loaded the class which tries to load User, either HelloService or ByeService ?
","10/Mar/09 10:39;chaitanyak;You are right, we can use User.class.getClassLoader() , but the application developer need not know how CXF works and may use Thread.currentThread().getContextClassLoader() . But I guess that is not your problem.

Thanks for the help.","10/Mar/09 10:52;sergey_beryozkin;Hi - my problem is to make sure things work well for a user :-)
Would you agree that by doing Thread.currentThread().getContextClassLoader() a user code  actually becomes more aware of how things work under the hood ? IMHO, User.class.getClassLoader() is more neutral and is likely to work better, especially given that you do expect the loader of User class (which is the same loader which loaded Hello/Bye service class) be equal to Thread.currentThread().getContextClassLoader().

Dan, others - any comments ? I've not seen JAXWSInvoker setting a Thread.currentThread().getContextClassLoader() to that of the class to be invoked...

","10/Mar/09 14:47;dkulp;
The JAXWS invoker probably SHOULD set it.   If the user has a specific XML parser or similar that they want to use (which could be different than the one CXF is using), without the classloader being set, that won't really work.    ","10/Mar/09 21:54;sergey_beryozkin;It's an interesting comment which made me think that equally there could be an application code there depending on whatever xml parser provided by the container environment.
That said I've decided to introduce a property, which, if set, will lead to a thread context loader set to that of the resource class loader,
name of the property is ""org.apache.cxf.serviceloader-context"", I could not think of a shorter/better name

can be set up like this :

<jaxrs:server address=""/"">
    <jaxrs:properties>
       <entry key=""org.apache.cxf.serviceloader-context"" value=""true""/>
    </jaxrs:properties>
  </jaxrs:server> 

I think it's a reasonable compromise",,,,,,,,,,,,,,,,,,,,,,,
"AbstractMessageResponseTimeInterceptor has protected methods, but default (package) scope constructor",CXF-2084,12416108,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,web.development.guys,web.development.guys,04/Mar/09 14:11,24/Apr/09 21:17,14/Mar/19 02:29,12/Mar/09 20:25,2.1.4,,,,,,,,,,,,,,2.0.11,2.1.5,,,Core,,,,,,0,,,,"The class org.apache.cxf.management.interceptor.AbstractMessageResponseTimeInterceptor has several protected methods, indicating a desire to allow extension; however, the class cannot be extended by a class outside the package org.apache.cxf.management.interceptor, because it has an explicit constructor with no scope modifier (and thus is accessible only within the package).

Presumably, this was an oversight, and the constructor should be protected, allowing clients of the API to extend the class.

Otherwise, the protected modifier should be removed from the methods within the class, since it is meaningless, and consideration should be given to making the class non-public, since it will be unusable by anything but CXF internals (this would depend on the existing package structure of CXF, with which I am not familiar).",,900,900,,0%,900,900,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-03-12 20:25:10.745,,,no_permission,,Novice,,,,,,,,,,,113539,,,Thu Mar 12 20:25:10 UTC 2009,,,,,,0|i0sy87:,167022,,,,,,,,"12/Mar/09 20:25;dkulp;
Made the constructor public",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
XMLBeans - XmlBeansSchemaInitializer can't handle xs:import,CXF-2083,12416090,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,knutivar,knutivar,04/Mar/09 09:55,26/Aug/10 08:33,14/Mar/19 02:29,21/Jul/09 13:58,2.1.4,,,,,,,,,,,,,,2.1.6,2.2.3,,,,,,,,,1,,,,"Background: 
I have a Xfire project which I'm porting to CXF. Using the Document-First approach and using XMLBeans. We have one xsd that imports other xsd's for each ""domain"". Every ""domain"" xsd contains requests and responses which imports datatypes from underlaying schemas with different namespaces.
This works with JAXB (And Xfire with XMLBeans), but not with CXF and XMLBeans.

I have simplified a test project.
The structure is like this;

PublishedFacade.xsd              -- imports sum.xsd
         | ---- sum.xsd                -- contains request and responses. Imports types.xsd.
                     | ---- types.xsd  -- contains complextypes and simpletypes for XMLObject validation

PublishedFacade.xsd:
--------------------------------------------------------------------------
<?xml version=""1.0"" encoding=""UTF-8""?>
<xsd:schema targetNamespace=""http://cxftest.com/webservicetest/ws/test""
            xmlns:tns=""http://cxftest.com/webservicetest/ws/test""
            xmlns:xsd=""http://www.w3.org/2001/XMLSchema""
            xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
            xmlns:wsdl=""http://schemas.xmlsoap.org/wsdl/""
            xmlns:wsdlsoap=""http://schemas.xmlsoap.org/wsdl/soap/""
            elementFormDefault=""qualified"">

    <xsd:import namespace=""http://cxftest.com/webservicetest/ws/test/sum"" schemaLocation=""sum/sum.xsd""/>

</xsd:schema>
--------------------------------------------------------------------------

sum.xsd:
--------------------------------------------------------------------------
<?xml version=""1.0"" encoding=""UTF-8""?>
<xsd:schema targetNamespace=""http://cxftest.com/webservicetest/ws/test/sum""
            xmlns:tns=""http://cxftest.com/webservicetest/ws/test/sum""
            xmlns:xsd=""http://www.w3.org/2001/XMLSchema""
            xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
            xmlns:wsdl=""http://schemas.xmlsoap.org/wsdl/""
            xmlns:types =""http://cxftest.com/webservicetest/ws/test/sum/types""
            xmlns:wsdlsoap=""http://schemas.xmlsoap.org/wsdl/soap/""
            elementFormDefault=""qualified"">

    <xsd:import namespace=""http://cxftest.com/webservicetest/ws/test/sum/types"" schemaLocation=""types/types.xsd""/>

    <xsd:element name=""testServiceRequest"" type=""types:TestServiceRequest"" />

    <xsd:element name=""testServiceResponse"" type=""types:TestServiceResponse"" />

</xsd:schema>
--------------------------------------------------------------------------

types.xsd:
--------------------------------------------------------------------------
<?xml version=""1.0"" encoding=""UTF-8""?>
<xsd:schema targetNamespace=""http://cxftest.com/webservicetest/ws/test/sum/types""
            xmlns:tns=""http://cxftest.com/webservicetest/ws/test/sum/types""
            xmlns:xsd=""http://www.w3.org/2001/XMLSchema""
            xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
            xmlns:wsdl=""http://schemas.xmlsoap.org/wsdl/""
            xmlns:wsdlsoap=""http://schemas.xmlsoap.org/wsdl/soap/""
            elementFormDefault=""qualified"">

    <xsd:complexType name=""TestServiceRequest"">
        <xsd:sequence>
            <xsd:element name=""number1"" type=""xsd:int"" minOccurs=""0"" nillable=""true"" />
            <xsd:element name=""number2"" type=""tns:nummer2"" minOccurs=""1"" nillable=""false"" />
        </xsd:sequence>
    </xsd:complexType>

    <xsd:complexType name=""TestServiceResponse"">
        <xsd:sequence>
            <xsd:element name=""sum"" type=""xsd:int"" minOccurs=""1"" nillable=""false"" />
        </xsd:sequence>
    </xsd:complexType>

    <xsd:simpleType name=""nummer2"">
        <xsd:restriction base=""xsd:int"">
            <xsd:minInclusive value=""1""/>
            <xsd:maxInclusive value=""20""/>
        </xsd:restriction>
    </xsd:simpleType>

</xsd:schema>
--------------------------------------------------------------------------

Generate xmlbeans objects with xmlbeans-maven-plugin.

When deploying; I get this stack;
----------------------------------------------------------
13:05:32,193 [] ERROR [org.springframework.web.context.ContextLoader] Context initialization failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'testservice': Invocation of init method failed; nested exception is javax.xml.ws.WebServiceException: java.lang.RuntimeException: Failed to find schema for: sum/sum.xsd
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1175)
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:427)
at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:249)
at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:155)
at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:246)
at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:160)
at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:291)
at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:352)
at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:246)
at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:189)
at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:49)
at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:3764)
at org.apache.catalina.core.StandardContext.start(StandardContext.java:4216)
at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1014)
at org.apache.catalina.core.StandardHost.start(StandardHost.java:736)
at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1014)
at org.apache.catalina.core.StandardEngine.start(StandardEngine.java:443)
at org.apache.catalina.core.StandardService.start(StandardService.java:448)
at org.apache.catalina.core.StandardServer.start(StandardServer.java:700)
at org.apache.catalina.startup.Catalina.start(Catalina.java:552)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:585)
at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:295)
at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:433)
Caused by: javax.xml.ws.WebServiceException: java.lang.RuntimeException: Failed to find schema for: sum/sum.xsd
at org.apache.cxf.jaxws.EndpointImpl.doPublish(EndpointImpl.java:268)
at org.apache.cxf.jaxws.EndpointImpl.publish(EndpointImpl.java:202)
at org.apache.cxf.jaxws.EndpointImpl.publish(EndpointImpl.java:397)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:585)
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:1242)
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1208)
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1172)
... 25 more
Caused by: java.lang.RuntimeException: Failed to find schema for: sum/sum.xsd
at org.apache.cxf.xmlbeans.XmlBeansSchemaInitializer.getSchema(XmlBeansSchemaInitializer.java:148)
at org.apache.cxf.xmlbeans.XmlBeansSchemaInitializer.mapClass(XmlBeansSchemaInitializer.java:200)
at org.apache.cxf.xmlbeans.XmlBeansSchemaInitializer.begin(XmlBeansSchemaInitializer.java:170)
at org.apache.cxf.service.ServiceModelVisitor.visitOperation(ServiceModelVisitor.java:97)
at org.apache.cxf.service.ServiceModelVisitor.walk(ServiceModelVisitor.java:74)
at org.apache.cxf.xmlbeans.XmlBeansDataBinding.initialize(XmlBeansDataBinding.java:102)
at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.buildServiceFromClass(ReflectionServiceFactoryBean.java:371)
at org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean.buildServiceFromClass(JaxWsServiceFactoryBean.java:525)
at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.initializeServiceModel(ReflectionServiceFactoryBean.java:422)
at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.create(ReflectionServiceFactoryBean.java:190)
at org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean.create(JaxWsServiceFactoryBean.java:164)
at org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory.createEndpoint(AbstractWSDLBasedEndpointFactory.java:100)
at org.apache.cxf.frontend.ServerFactoryBean.create(ServerFactoryBean.java:117)
at org.apache.cxf.jaxws.JaxWsServerFactoryBean.create(JaxWsServerFactoryBean.java:168)
at org.apache.cxf.jaxws.EndpointImpl.getServer(EndpointImpl.java:339)
at org.apache.cxf.jaxws.EndpointImpl.doPublish(EndpointImpl.java:252)
... 34 more
Caused by: java.lang.RuntimeException: Failed to find schema for: types/types.xsd
at org.apache.cxf.xmlbeans.XmlBeansSchemaInitializer.getSchema(XmlBeansSchemaInitializer.java:148)
at org.apache.cxf.xmlbeans.XmlBeansSchemaInitializer.getSchema(XmlBeansSchemaInitializer.java:135)
... 49 more
Caused by: java.lang.IllegalArgumentException: InputStream cannot be null
at javax.xml.parsers.DocumentBuilder.parse(DocumentBuilder.java:94)
at org.apache.cxf.helpers.XMLUtils.parse(XMLUtils.java:136)
at org.apache.cxf.xmlbeans.XmlBeansSchemaInitializer.getSchema(XmlBeansSchemaInitializer.java:129)
... 50 more
----------------------------------------------------------

There were a similar error using xs:include (https://issues.apache.org/jira/browse/CXF-1700), but I can't use include as the wsdl will be different when the namespaces changes. My wsdl's should not change.

Project that ""explains"" the issue has been attatched.

","Java 1.5, Spring 2.5, CXF 2.1.4, Any OS.",,,,,,,,,,,,,,CXF-2959,,04/Mar/09 09:59;knutivar;CXFTestXmlBeansXSD.rar;https://issues.apache.org/jira/secure/attachment/12401393/CXFTestXmlBeansXSD.rar,25/Jun/09 06:48;knutivar;CXFTestXmlBeansXSD.zip;https://issues.apache.org/jira/secure/attachment/12411756/CXFTestXmlBeansXSD.zip,,,,,2.0,,,,,,,,,,,,,,,,,,,,2009-05-22 21:26:12.109,,,no_permission,,Moderate,,,,,,,,,,,113538,,,Thu Jun 25 06:48:03 UTC 2009,,,,,,0|i14etz:,233866,,,,,,,,"04/Mar/09 09:59;knutivar;Added file: Maven project containing all you need. mvn install and then deploy (possibly make changes to the cargo plugin.. (tomcat_home).
The file is the same as linked to in the original issue description.","22/May/09 21:26;tdunst;I can't speak to this problem directly, but I can say that the code in the XmlBeansSchemaInitializer.getSchema() method (the method throwing your exception) is not currently capable of resolving external XML schema references (i.e. http:// as opposed to relative locations in the local file system).  The code is simply resolving all references locally using the following code:

InputStream ins = sts.getSourceAsStream(file);

If any of your XML schema <import> statements in any of your references schemas contain URL/URI external references, this method will fail in exactly the same way as you have seen in your attached stack trace.  In addition, even local file resources can fail to resolve if you haven't correctly specified the relative file locations of each import in every schema file you are deploying and managing locally.

I think this could be fixed fairly easily by simply making use of an XML entity resolver in the getSchema() method and making sure that you deploy every required XML schema document locally.  Please let me know if you have made any other progress on this issue, or if your are still experiencing this problem.  ","22/Jun/09 17:48;dkulp;
I cannot unpack the attached rar.   None of the .java files are coming out of it.    ","25/Jun/09 06:45;knutivar;The rarfile is working fine for me.... Try downloading it from this link instead; http://www.knutivars.net/cxf/code/CXFTestXmlBeansXSD.rar
Did it work?",25/Jun/09 06:48;knutivar;If you've got problems with the rar-file; here's a zip file! :),,,,,,,,,,,,,,,,,,,,,,,,,,
client using decoupled ws-addressing with async handler hang from time to time,CXF-2082,12416077,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,ffang,ffang,ffang,04/Mar/09 06:30,24/Apr/09 21:17,14/Mar/19 02:29,05/Mar/09 06:38,,,,,,,,,,,,,,,2.0.11,2.1.5,2.2,,,,,,,,0,,,,"If we use decoupled ws-addressing and async invaction handler, client side will hang from time to time. At the same time we can see some error like ""Connection reset by peer"".
The fix is in HTTPConduit, we should cache the InputStream of inMessage before invoke the clientImpl.onMessage, since for async mode, the onMessage is in anonther thead and executing by executor, we can't guarantee the connection still alive when onMessage really invoked.
So we need do like
{code}
                InputStream in = inMessage.getContent(InputStream.class);
                CachedOutputStream cos = new CachedOutputStream();
                IOUtils.copy(in, cos);
                inMessage.setContent(InputStream.class, cos.getInputStream());
                incomingObserver.onMessage(inMessage);
{code}
to cache the inputstream to ensure it's still there when we use it.",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113537,,,2009-03-04 06:30:59.0,,,,,,0|i0v1pz:,179252,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Default value is not assigned to HeaderParam,CXF-2080,12415985,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,,chaitanyak,chaitanyak,03/Mar/09 09:23,24/Apr/09 21:17,14/Mar/19 02:29,03/Mar/09 12:28,2.2,,,,,,,,,,,,,,2.1.5,2.2,,,,,,,,,0,,,,This is because in the method    InjectionUtils.createParameterObject(....) defaultValue is assigned to the paramValues only if paramValues is null and paramValues is never null in case of HeaderParam.,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-03-03 12:28:38.927,,,no_permission,,Moderate,,,,,,,,,,,113535,,,Tue Mar 03 12:28:38 UTC 2009,,,,,,0|i1adyv:,268729,,,,,,,,03/Mar/09 12:28;sergey_beryozkin;Thanks for analysis - made it easy for me to fix fast,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"When using wsdl2java with the -db xmlbeans flag, the generated build.xml doesn't work OOTB",CXF-2077,12415829,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,njiang,dave_stanley,dave_stanley,27/Feb/09 22:34,24/Apr/09 21:17,14/Mar/19 02:29,10/Mar/09 04:07,2.1.4,,,,,,,,,,,,,,2.0.11,2.1.5,2.2,,Tooling,,,,,,0,,,,"When using wsdl2java with the -db xmlbeans flag, the generated build.xml is missing a classpath entry for xmlbeans schema files.

To reproduce, in a clean directory run:

>wsdl2java -db xmlbeans -all <wsdl>

I had to add the following to my build.xml to pick up the generated schema files:

<property name=""home.dir"" location ="".""/>
....
<path id=""cxf.classpath"">
        <pathelement location=""${build.classes.dir}""/>
        <pathelement location=""${cxf-manifest.jar.file}""/>
	<pathelement location=""${home.dir}"" />
    </path>  
","2.1.x, trunk",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-03-10 04:07:20.116,,,no_permission,,,,,,,,,,,,,113533,,,Tue Mar 10 04:07:20 UTC 2009,,,,,,0|i1adz3:,268730,,,,,,,,"10/Mar/09 04:07;njiang;Applied patch into trunk, 2.1.x branch and 2.0.x branch.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
InstantiationException trying to create wrapper object when using xmlbeans databinding,CXF-2076,12415826,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,njiang,dave_stanley,dave_stanley,27/Feb/09 22:03,05/Oct/09 19:37,14/Mar/19 02:29,05/Oct/09 16:49,2.1.4,,,,,,,,,,,,,,2.1.6,2.2.3,,,Tooling,,,,,,0,,,,"I have modified the wsdl_first sample to use the xmlbeans databinding.  Xmlbeans is generating both an interface and a concrete type for each of the types defined in my wsdl. This is causing a problem with CXF as its using the interface rather than the impl to instantiate request and response wrapper classes. 

This results in the stack below which shows the InstantiationException.  Note the type is org.apache.helloWorldSoapHttp.types.SayHiDocument - I think it should be .. org.apache.helloWorldSoapHttp.types.impl.SayHiDocumentImpl ?

INFO: Interceptor has thrown exception, unwinding now
org.apache.cxf.interceptor.Fault: org.apache.helloWorldSoapHttp.types.SayHiDocument
	at org.apache.cxf.jaxws.interceptors.WrapperClassOutInterceptor.handleMessage(WrapperClassOutInterceptor.java:116)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:469)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:299)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:251)
	at org.apache.cxf.frontend.ClientProxy.invokeSync(ClientProxy.java:73)
	at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:123)
	at $Proxy69.sayHi(Unknown Source)
	at demo.hw.client.Client.main(Client.java:71)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at org.codehaus.mojo.exec.ExecJavaMojo$1.run(ExecJavaMojo.java:290)
	at java.lang.Thread.run(Thread.java:595)
Caused by: org.apache.cxf.interceptor.Fault: org.apache.helloWorldSoapHttp.types.SayHiDocument
	at org.apache.cxf.jaxws.interceptors.WrapperHelper$ReflectWrapperHelper.createWrapperObject(WrapperHelper.java:312)
	at org.apache.cxf.jaxws.interceptors.WrapperClassOutInterceptor.handleMessage(WrapperClassOutInterceptor.java:102)
	... 14 more
Caused by: java.lang.InstantiationException: org.apache.helloWorldSoapHttp.types.SayHiDocument
	at java.lang.Class.newInstance0(Class.java:335)
	at java.lang.Class.newInstance(Class.java:303)
	at org.apache.cxf.jaxws.interceptors.WrapperHelper$ReflectWrapperHelper.createWrapperObject(WrapperHelper.java:277)
	... 15 more
","2.1.4, trunk",,,,,,,,,,,,,,,,27/Feb/09 22:15;dave_stanley;cxf_xmlbeans.tar.gz;https://issues.apache.org/jira/secure/attachment/12401142/cxf_xmlbeans.tar.gz,27/Feb/09 22:20;dave_stanley;cxf_xmlbeans_sample.patch;https://issues.apache.org/jira/secure/attachment/12401145/cxf_xmlbeans_sample.patch,,,,,2.0,,,,,,,,,,,,,,,,,,,,2009-03-07 02:12:01.651,,,no_permission,,,,,,,,,,,,,113532,,,Mon Oct 05 16:49:17 UTC 2009,,,,,,0|i0v1xr:,179287,,,,,,,,"27/Feb/09 22:15;dave_stanley;Testcase attached.

Testcase is a modified version of the wsdl_first sample. The build.xml shows how to configure the ant task to generate code using -db xmlbeans. Also the maven pom was updated to generate sources using the xmlbeans-maven-plugin. Would it be worth adding the testcase to the samples directory, once the bug is fixed?

",27/Feb/09 22:20;dave_stanley;xmlbeans sample patch. ,"07/Mar/09 02:12;dkulp;[20:51] <dkulp> There are two ways to approach it.
[20:52] <dkulp> 1) Make sure the code generators ONLY generate BARE mode with XMLBeans.
[20:52] <dkulp> Which I'd be OK with.
[20:52] <willem> dkulp: Do I need to change the template file to get the xmlbeans artifacts work out of box?
[20:53] <dkulp> 2) Add some methods to AbstractDataBinding for creating and filling in the wrappers. 
[20:53] <dkulp> (2) would be a bit complex.
[20:53] <dkulp> You shouldn't.
[20:54] <willem> dkulp: I didn't do any tools or binding relates work before. Can you show me some examples?
[20:55] <dkulp> Hmm......
[20:57] <dkulp> Long time since I looked into some of the databinding code.
[20:58] <dkulp> Looking at the code, to force bare mode, you MAY just need to change the getWrappedElementType method of the XMLBeansToolingDataBinding to return null.
[20:58] <willem> OK, I just want to a find a generatic way to fix this xmlbean issue. 1) will let xmlbean's not support wrapper any more, am I right?
[20:59] <dkulp> Right.
[20:59] <willem> 1) just be a short time solution.
[21:01] <dkulp> Well, supporting the wrapper types in a generic fasion would require major re-architectingg of the databinding.
[21:01] <dkulp> Which would be a 3.0 level thing.
[21:01] <dkulp> Actually, the other thing you can try:
[21:02] <willem> Please shot.
[21:02] <dkulp> In WrapperClassOutInterceptor, check if the databinding class name contains JAXB
[21:02] <dkulp> If not, skip.
[21:02] <willem> Yes, this is other way to do it.
[21:02] <dkulp> Actually, in the JAXWSServiceFactory, if the databinding isn't jaxb, don't even add the wrapepr class in/out interceptors
[21:04] <willem> So the wrapper class will only work for JAXB. The user will not be affected.
[21:04] <dkulp> Maybe.  
[21:04] <dkulp> I DON'T know if XMLBeans will tollerate parsing from the child elements or not.","07/Mar/09 09:11;njiang;Since current CXF 's WrapperClass{In|Out}Interceptor just support the JAXB databinding, and there a quit difference between JAXB and XMLBeans type Instantiation, so you got that kind of error.

To walk around this issue just has DanKulp said , I tried the method 1), if the SEI's method parameter is void, I still get the Wrapped method like this.
 
 {code:java}
@ResponseWrapper(localName = ""pingMeResponse"", targetNamespace = ""http://apache.org/hello_world_soap_http/types"", className = ""org.apache.helloWorldSoapHttp.types.PingMeResponseDocument"")
    @RequestWrapper(localName = ""pingMe"", targetNamespace = ""http://apache.org/hello_world_soap_http/types"", className = ""org.apache.helloWorldSoapHttp.types.PingMeDocument"")
    @WebMethod
    public void pingMe() throws PingMeFault;
 {code}

So we need to find other way to resolve this issue.


","07/Mar/09 09:38;njiang;Here is a mail thread that talks about how to use XMLBeans in CXF.
 http://markmail.org/thread/q3ilqzdftndfpcrr

After digging the code for a while , I think we need to do some work on WrapperHelper to create and fill the wrapper.","10/Mar/09 04:16;njiang;Applied patch into CXF trunk and 2.1.x branch.
Also submitted an example (wsdl_first_xmlbeans) to show how to write a wsdl first service with XMLBeans in CXF trunk and 2.1.x branch.","13/Mar/09 13:43;dave_stanley;Great thanks Willem. Will give it a try.

Cheer's
/Dave","05/Oct/09 16:49;dkulp;
Resolved a while ago.",,,,,,,,,,,,,,,,,,,,,,,
Error in spring config file reported as a missing config file during initialization of BusApplicationContext,CXF-2075,12415802,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,,seumassoltysik,seumassoltysik,27/Feb/09 15:50,24/Apr/09 21:17,14/Mar/19 02:29,10/Mar/09 16:46,2.1.4,,,,,,,,,,,,,,2.1.5,2.2,,,Core,,,,,,0,,,,"The current code to create a Bus in SpringBusFactory masks any problem in processing the spring config file passed in to SpringBusFactory. Currently if a config file is corrupt, the exception thrown trying to process this file is eaten and an attempt to create a Bus is tried again with a different thread context classloader. This completely hides the source of the error and results in a message which indicates that the config file could not be found which is completely misleading for the user.
The solution is to not perform the 2nd attempt to create a BusApplicationContext and let the original exception propagate upwards.

     private BusApplicationContext createApplicationContext(String cfgFiles[], boolean includeDefaults) {
        try {      
            return new BusApplicationContext(cfgFiles, includeDefaults, context);
        } catch (BeansException ex) {
            ClassLoader contextLoader = Thread.currentThread().getContextClassLoader();
            if (contextLoader != BusApplicationContext.class.getClassLoader()) {
                Thread.currentThread().setContextClassLoader(
                    BusApplicationContext.class.getClassLoader());
                try {
                    return new BusApplicationContext(cfgFiles, includeDefaults, context);        
                } finally {
                    Thread.currentThread().setContextClassLoader(contextLoader);
                }
            } else {
                throw ex;
            }
        }
     }",,,,,,,,,,,,,,,,,10/Mar/09 05:20;seumassoltysik;patch.txt;https://issues.apache.org/jira/secure/attachment/12401804/patch.txt,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2009-02-27 16:07:20.275,,,no_permission,,,,,,,,,,,,,113531,,,Tue Mar 10 16:46:47 UTC 2009,,,,,,0|i0sy8n:,167024,,,,,,,,"27/Feb/09 16:07;sergey_beryozkin;Hi Seumas

I think the solution should be about introducing a new type of exception. The second class loading attempt is there to ensure things work nicely in OSGI, though it does mask an issue if the problem is caused by the corrupt configuration file. Perhaps the original problem has been fixed but before CXF can get updated with your fix it would be good if a higher-level project which might be depending on CXF run the OSGI tests with the proposed fix in a local snapshot.

Having a seperate catch block like catch (CorruptConfigurationFile) might be simpler if it's just a poorly formatted config file which causes the problems. If the application context loading has failed due to class loading issues then it could be trickier.

Now that I've said it all I reckon the best option would be actually to store the original BeansException, give it a second try, and if the exception is thrown again then rethrow the original BeansException","27/Feb/09 16:26;seumassoltysik;Sergey, thanks for the input. 
One additional issue is that when the BusApplicationContext is tried a second time, it simply logs an error regarding not being able to find the config file but no exceptions is thrown. I think the BAC would also need to be updated to throw an Exception if the config file is not found on the 2nd try to create the BAC. If we did this we could the implement your solution to hold onto the initial exception and throw it if an exception was thrown during the 2nd try.
Also if this 2nd try is there to satisfy an OSGi requirement, it seems like there should be some kind of test in CXF which requires this 2nd try so that the need for this is confirmed in the testing framework. Currently removing this 2nd try does not affect systests results.
I can submit a patch for this issue once we sort out the solution.","02/Mar/09 17:16;seumassoltysik;Sergey
you suggested holding onto the original expception and then rethrowing if 2nd attempt failed.

this seems to create another problem whereby you may mislead the user because you throw the first exception when it turns out that the 2nd exception is really the one the user needs to know about.

Perhaps simply logging the first exception is the way to go. Also I am curious why the BAC does not throw an exception if the configuration passed into the BAC is not found.

","02/Mar/09 17:27;dkulp;

I'd STRONGLY prefer trying to remove the second call entirely.   This has a side affect of possibly causing objects to be instantiated twice which could do strange things if the objects aren't expecting that.   One example could be management which would setup connections to MBean servers and such.  You could end up with two things listed in the MBean servers.

Thus, I'd like to figure out why the second was necessary and try to fix that.   Do you know if it couldn't find a resource?   Couldn't find a config file?   Couldn't find a class?   etc....?

One option COULD be to create a new Classloader that would delegate first to the current contextClassLoader and then to the BusApplicationContext.class.getClassLoader() and set the contextClassLoader to that.   That SHOULD allow anything that wasn't found the old method to be found.   ","02/Mar/09 17:57;sergey_beryozkin;> Do you know if it couldn't find a resource? Couldn't find a config file? Couldn't find a class? etc....? 

It was probably 5/6 months ago when I applied this now infamous :-) retry. I belive it was about either classes or class resources being not found when run in OSGI. I honestly don't remember.

But I'd personally would not remove the second try before a Progress project which depends on CXF would run all the OSGI tests without it. Dan - perhaps creating a tailored ClassLoader would be a neat idea indeed - but it can also cause some OSGI issues as well as we might end up with some resources/classes being loaded by different loaders.

> This has a side affect of possibly causing objects to be instantiated twice

This is something we obviously do not want - but so far we haven't had any sideeffects - may be because it's now a dead code altogether which just kick in by swallowing an exception.

IMHO it would be good if a quick Progress-internal build could be setup without this second retry. If it works then this code can be just removed, If it does not then I'd start with what Seumas suggested - logging the original exception and opened a JIRA for exploring the possibility of creating a new class loader - the idea behind it does sound good - but it can be difficult to implement while working at the CXF/Fuse level only",10/Mar/09 05:20;seumassoltysik;Attached is a patch for this issue. the patch logs the initial exception after the first attempt to create a Bus and throws an exception when the user config file fails to load.,"10/Mar/09 16:46;sergey_beryozkin;patch applied, thanks",,,,,,,,,,,,,,,,,,,,,,,,
"2.1.4 now throws ""No DestinationFactory was found for the namespace http://schemas.xmlsoap.org/soap/http""",CXF-2074,12415800,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,jaysonraymond,jaysonraymond,27/Feb/09 15:46,19/May/11 10:58,14/Mar/19 02:29,13/Apr/09 21:39,2.1.4,,,,,,,,,,,,,,2.1.5,2.2,,,Soap Binding,Transports,,,,,1,,,,"Upon upgrading from 2.1.3 to 2.1.4 we began experiencing the exception:

""No DestinationFactory was found for the namespace http://schemas.xmlsoap.org/soap/http""

Several other are experiencing this same issue upon upgrading - see comments added to end of closed ticket# CXF-1637.

",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-02-27 19:36:34.41,,,no_permission,,,,,,,,,,,,,113530,,,Thu May 19 10:58:50 UTC 2011,,,,,,0|i1adzb:,268731,,,,,,,,"27/Feb/09 17:53;jaysonraymond;Stack trace:
Caused by: java.lang.Throwable: Substituted for missing class org.apache.cxf.Bus
Exception - No DestinationFactory was found for the namespace http://schemas.xml
soap.org/soap/http.
        at org.apache.cxf.transport.DestinationFactoryManagerImpl.getDestination
Factory(DestinationFactoryManagerImpl.java:115)
        at org.apache.cxf.endpoint.ServerImpl.initDestination(ServerImpl.java:85
)
        at org.apache.cxf.endpoint.ServerImpl.<init>(ServerImpl.java:69)
        at org.apache.cxf.frontend.ServerFactoryBean.create(ServerFactoryBean.ja
va:118)
    :
   :
","27/Feb/09 19:11;jaysonraymond;Fix reported  to be in 2.1.5-SNAPSHOT as of 2/27/09 still failing. 
 (see: http://markmail.org/message/j7pvurmfdj5kss5l#query:no%20DestinationFactory%2
0was%20found%20for%20the%20namespace%20http%3A%2F%2Fschemas.xmlsoap.org%2Fso
ap%2Fhttp+page:1+mid:pfh3ualhrbtn2csm+state:results )  

- - - - - -

For temporary fix see Daniel Kulp's suggestion:

http://markmail.org/message/j7pvurmfdj5kss5l#query:no%20DestinationFactory%20was%20found%20for%20the%20namespace%20http%3A%2F%2Fschemas.xmlsoap.org%2Fsoap%2Fhttp+page:1+mid:ylmlqlr6awi5qs6j+state:result

Detailed work around by  Per Olesen:

http://techpolesen.blogspot.com/2007/09/could-not-find-destination-factory-for.html
","27/Feb/09 19:36;dkulp;
If the 2.1.5 snaps didn't fix this, then I need a sample test case.
",30/Mar/09 18:46;deki;This is fixed in 2.2.,"14/May/09 10:58;ceefour;To solve this problem as application developer, make sure to add to your cxf-beans.xml file:

<import resource=""classpath:META-INF/cxf/cxf-servlet.xml""/>

or:

<import resource=""classpath:META-INF/cxf/cxf-extension-http-jetty.xml""/>

depending which one you use.","19/May/11 10:58;lechlukasz;Hey,

I know I'm reviving old thread but

I have the same problem, but using server stubs generated by CXF 2.2.9.

I have no cxf-beans.xml. Only code-side configuration. How to apply your solution then? Where to put clauses importing this resources?

Thanks in advice,
Lukasz",,,,,,,,,,,,,,,,,,,,,,,,,
SecurityContext injection using @Context fails,CXF-2073,12415756,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,,chaitanyak,chaitanyak,27/Feb/09 09:27,24/Apr/09 21:17,14/Mar/19 02:29,27/Feb/09 17:05,2.2,,,,,,,,,,,,,,2.2,,,,,,,,,,0,,,,"This is because in AbstractHTTPDestination.setupMessage(...) method SecurityContext is put on message using the key org.apache.cxf.security.SecurityContext.class but  in SecurityContextImpl class,   the key javax.ws.rs.core.SecurityContext  is used to get SecurityContext .
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-02-27 17:05:19.719,,,no_permission,,Moderate,,,,,,,,,,,113529,,,Fri Feb 27 17:05:19 UTC 2009,,,,,,0|i1adzj:,268732,,,,,,,,"27/Feb/09 17:05;sergey_beryozkin;Thanks for a tip. Fixed now

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Persistant HTTPS connections appear to be disabled.,CXF-2072,12415722,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,dkulp,jkessinger,jkessinger,27/Feb/09 00:44,24/Apr/09 21:17,14/Mar/19 02:29,27/Feb/09 01:33,2.1.4,,,,,,,,,,,,,,2.1.5,,,,Transports,,,,,,0,,,,"HTTPConduit.setupURL in HTTPConduit.java seems to reset the connection factory whenever the endpoint's protocol startsWith() the connection factory protocol. The net affect seems to disable persistant HTTP/S connections.

I changed to !startsWith() and my app seems to function fine now. I'm not sure if I'm missing something, but I thought I'd log it.

","cxf 2.1.4, win XP Pro, jre (1.6.0_11).",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-02-27 01:33:37.1,,,no_permission,,Novice,,,,,,,,,,,113528,,,Fri Feb 27 01:33:37 UTC 2009,,,,,,0|i1adzr:,268733,,,,,,,,27/Feb/09 01:33;dkulp;Fixed in the latest snapshots,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Missing import on 'com.sun.xml.bind.api' for cxf-bundle,CXF-2071,12415665,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,sauthieg,sauthieg,26/Feb/09 13:14,27/Feb/09 10:47,14/Mar/19 02:29,26/Feb/09 21:10,2.1.4,,,,,,,,,,,,,,2.1.5,,,,OSGi,,,,,,0,,,,"As you can see in the JAXBUtils[1] class CXF is loading a class from the 'com.sun.xml.bind.api' package.
But this import is missing from the Bnd generated manifest.

It would be great to add this package in the DynamicImport-Package list (just like what was done for the woodstox package).

BTW, if you use the 2.1.4 version of CXF, it's also missing an import on 'com.sun.xml.bind.v2' (Where the RI JAXBContext implementation lives). The only way to be able to use it untouched is to install the JAXB 2.0/2.1 API provided by ServiceMix (that is more OSGi friendly). This is what we have done so we can live with this, so this missing package ('com.sun.xml.bind.v2') is not a blocker for us.

[1] http://fisheye6.atlassian.com/browse/cxf/tags/cxf-2.1.4/common/common/src/main/java/org/apache/cxf/jaxb/JAXBUtils.java?r=708410#l541",OW2 JOnAS 5.1.0.M4-SNAPSHOT (Apache Felix 1.4.1),,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-02-26 21:10:47.261,,,no_permission,,Novice,,,,,,,,,,,113527,,,Fri Feb 27 10:47:09 UTC 2009,,,,,,0|i13zlz:,231399,,,,,,,,"26/Feb/09 21:10;dkulp;
I've added the dynamic import.

However, there doesn't seem to be a way to add an import for com.sun.xml.bind.v2 since we don't actually use it anywhere at all.  We already have:
com.sun*;resolution:=optional
for all the sun stuff and the felix plugin doesn't find that package since we don't actually reference it at all.   Thus, the smx bundle will probably need to be used.
","27/Feb/09 10:47;sauthieg;Thanks for the fix

Concerning the 'com.sun.xml.bind.v2' package that was more a general remark: CXF *requires* you to use these particular JAXB2 API in an OSGi environment.
That's something good to know for users of CXF/OSGi :)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CXF2.1.4 Content Negotiation,CXF-2070,12415629,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,,tomliang,tomliang,26/Feb/09 03:42,24/Apr/09 21:17,14/Mar/19 02:29,23/Mar/09 15:54,2.1.4,,,,,,,,,,,,,,2.1.4,2.2,,,JAX-RS,Resources,,,,,0,,,,"According to the JAX-RS311 specification(Jun 27,2008  0.9version), section 3.8 Determining the MediaType of Responses
	4. Sort A and P in descending order, each with a primary key of q-value and secondary key of specificity 8
(n/m > n/* > */*).
	
that means types with higher quality value should be more specific than types with lower quality value, but in CXF2.1.4 implementation.

public final class JAXRSUtils {
	...
    public static int compareMediaTypes(MediaType mt1, MediaType mt2) {
        
        if (mt1.equals(mt2)) {
            float q1 = getMediaTypeQualityFactor(mt1.getParameters().get(""q""));
            float q2 = getMediaTypeQualityFactor(mt2.getParameters().get(""q""));
            int result = Float.compare(q1, q2);
            return result == 0 ? result : ~result;
        }
        
        if (mt1.isWildcardType() && !mt2.isWildcardType()) {
            return 1;
        }
        if (!mt1.isWildcardType() && mt2.isWildcardType()) {
            return -1;
        }
         
        if (mt1.getType().equals(mt2.getType())) {
            if (mt1.isWildcardSubtype() && !mt2.isWildcardSubtype()) {
                return 1;
            }
            if (!mt1.isWildcardSubtype() && mt2.isWildcardSubtype()) {
                return -1;
            }       
        }
        return mt1.toString().compareTo(mt2.toString());
        
    }	
	...
}

The content-negotiation algorithm of CXF2.1.4 seems to take quality value into account only when comparing equivalent MediaTypes.
As a result, for the @ProduceMime{ ""application/xml;q=0.9"", ""application/json;q=0.5"" }, the ""application/json;q=0.5"" is preferred, which 
does not respect the JAX-RS311 specification.

So, I suggest change the compareMediaTypes method as follows to meet the JAX-RS311 specification.
    public static int compareMediaTypes(MediaType mt1, MediaType mt2) {
        float q1 = getMediaTypeQualityFactor(mt1.getParameters().get(""q""));
        float q2 = getMediaTypeQualityFactor(mt2.getParameters().get(""q""));
        int result = Float.compare(q1, q2);
        if (result != 0)
            return ~result;
        
        if (mt1.isWildcardType() && !mt2.isWildcardType()) {
            return 1;
        }
        if (!mt1.isWildcardType() && mt2.isWildcardType()) {
            return -1;
        }
         
        if (mt1.getType().equals(mt2.getType())) {
            if (mt1.isWildcardSubtype() && !mt2.isWildcardSubtype()) {
                return 1;
            }
            if (!mt1.isWildcardSubtype() && mt2.isWildcardSubtype()) {
                return -1;
            }       
        }
        return mt1.toString().compareTo(mt2.toString());
    }",CXF2.1.4,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-02-26 09:38:30.34,,,no_permission,,,,,,,,,,,,,50344,,,Mon Mar 23 15:54:14 UTC 2009,,,,,,0|i1adzz:,268734,,,,,,,,26/Feb/09 09:38;sergey_beryozkin;thanks for raising the issue - It was fixed yesterday - fix will be available in 2.1.5 too. I'll close it after doing few more tests...,"23/Mar/09 15:54;sergey_beryozkin;I've done some additional tests in 2.2.1-SNAPSHOT, it all looks all right to me now. So the fixes which are already in the released 2.2 should be sufficient in most cases. Please reopen the issue if you reckon some more fixes need to be applied",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Ws-SecureConversation client tests failing.,CXF-2068,12415591,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,eamonndwyer,eamonndwyer,25/Feb/09 15:36,24/Apr/09 21:17,14/Mar/19 02:29,25/Feb/09 20:47,2.2,,,,,,,,,,,,,,2.2,,,,WS-* Components,,,,,,0,,,,"The Ws Secure Converation X* tests as described in 
http://svn.apache.org/repos/asf/cxf/sandbox/interopfest
branch are failing. 
They need to be configured properly.

In addition the Ws Sec 10 client  ""MutualCertificate10SignEncrypt"" test is missing and needs to be fixed",,,,,,,,,,,,,,,,,25/Feb/09 15:38;eamonndwyer;Feb252009.patch;https://issues.apache.org/jira/secure/attachment/12400950/Feb252009.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113525,,,Wed Feb 25 15:38:16 UTC 2009,,,,,,0|i0v1av:,179184,,,,,,,,25/Feb/09 15:38;eamonndwyer;This is a proposed patch to these issues.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Can't send message attachments via the WebServiceContext in 2.0.x,CXF-2067,12415588,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,coheigea,coheigea,25/Feb/09 15:03,24/Apr/09 21:17,14/Mar/19 02:29,26/Feb/09 21:14,2.0.10,,,,,,,,,,,,,,2.0.11,,,,JAX-WS Runtime,,,,,,0,,,,"
It isn't possible to send message attachments via the WebServiceContext in 2.0.x (this works fine in 2.1.x). The problem is that the ContextPropertiesMapping#updateWebServiceContext does not convert the Map<String, DataHandler> object attached to the outbound message via the MessageContext.OUBOUND_MESSAGE_ATTACHMENTS String to a Collection<Attachment> object on the message.",,,,,,,,,,,,,,,,,25/Feb/09 15:04;coheigea;cxf_2067.patch;https://issues.apache.org/jira/secure/attachment/12400948/cxf_2067.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113524,,,Wed Feb 25 15:04:22 UTC 2009,,,,,,0|i0v193:,179176,,,,,,,,"25/Feb/09 15:04;coheigea;
Please apply the attached patch for this issue (includes unit test).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Xerces validation of aegis mapping file fails with cvc-complex-type.3.2.2: Attribute 'name' is not allowed to appear in element 'property',CXF-2065,12415569,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,,deki,deki,25/Feb/09 10:58,24/Apr/09 21:17,14/Mar/19 02:29,26/Feb/09 02:02,,,,,,,,,,,,,,,2.2,,,,Aegis Databinding,,,,,,0,,,,"My aegis mapping files doesn't work if xerces is on classpath.

See also: http://www.nabble.com/Xerces-validation-question-td16315446.html

org.apache.cxf.aegis.DatabindingException: Error initializing parameters for operation {http://service.mydomain.tld/}myOperation: Couldn't create type for property myProperty on class tld.mydomain.service.MyResult: cvc-complex-type.3.2.2: Attribute 'name' is not allowed to appear in element 'property'. at /tld/
mydomain/service/MyResult2.aegis.xml line 5 column 25. cvc-complex-type.3.2.2: Attribute 'name' is not allowed to appear in element 'property'. at /tld/
mydomain/service/MyResult2.aegis.xml line 5 column 25.
        at org.apache.cxf.aegis.type.XMLTypeCreator$1.throwDatabindingException(XMLTypeCreator.java:157)
        at org.apache.cxf.aegis.type.XMLTypeCreator$1.error(XMLTypeCreator.java:165)
        at org.apache.xerces.util.ErrorHandlerProxy.error(Unknown Source)
        at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.error(ErrorHandlerWrapper.java:134)
        at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:384)
        at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:318)
        at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator$XSIErrorReporter.reportError(XMLSchemaValidator.java:410)
        at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.reportSchemaError(XMLSchemaValidator.java:3165)
        at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.processAttributes(XMLSchemaValidator.java:2630)
        at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.handleStartElement(XMLSchemaValidator.java:2037)
        at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.startElement(XMLSchemaValidator.java:685)
        at com.sun.org.apache.xerces.internal.jaxp.validation.ValidatorHandlerImpl.startElement(ValidatorHandlerImpl.java:549)
        at org.apache.xerces.jaxp.JAXPValidatorComponent$XNI2SAX.startElement(Unknown Source)
        at org.apache.xerces.jaxp.JAXPValidatorComponent.startElement(Unknown Source)
        at org.apache.xerces.jaxp.JAXPValidatorComponent.emptyElement(Unknown Source)
        at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl.scanStartElement(Unknown Source)
        at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl$FragmentContentDispatcher.dispatch(Unknown Source)
        at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl.scanDocument(Unknown Source)
        at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
        at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
        at org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
        at org.apache.xerces.parsers.DOMParser.parse(Unknown Source)
        at org.apache.xerces.jaxp.DocumentBuilderImpl.parse(Unknown Source)
        at javax.xml.parsers.DocumentBuilder.parse(DocumentBuilder.java:124)
        at org.apache.cxf.aegis.type.XMLTypeCreator.readAegisFile(XMLTypeCreator.java:181)
        at org.apache.cxf.aegis.type.XMLTypeCreator.getDocument(XMLTypeCreator.java:206)
        at org.apache.cxf.aegis.type.XMLTypeCreator.findMapping(XMLTypeCreator.java:265)
        at org.apache.cxf.aegis.type.XMLTypeCreator.isEnum(XMLTypeCreator.java:217)
        at org.apache.cxf.aegis.type.AbstractTypeCreator.createTypeForClass(AbstractTypeCreator.java:116)
        at org.apache.cxf.aegis.type.AbstractTypeCreator.createType(AbstractTypeCreator.java:364)
        at org.apache.cxf.aegis.type.basic.BeanTypeInfo.getType(BeanTypeInfo.java:189)
        at org.apache.cxf.aegis.type.basic.BeanType.getDependencies(BeanType.java:631)
        at org.apache.cxf.aegis.databinding.AegisDatabinding.addDependencies(AegisDatabinding.java:429)
        at org.apache.cxf.aegis.databinding.AegisDatabinding.initializeMessage(AegisDatabinding.java:408)
        at org.apache.cxf.aegis.databinding.AegisDatabinding.initializeOperation(AegisDatabinding.java:340)
        at org.apache.cxf.aegis.databinding.AegisDatabinding.initialize(AegisDatabinding.java:304)
        at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.buildServiceFromClass(ReflectionServiceFactoryBean.java:359)
        at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.initializeServiceModel(ReflectionServiceFactoryBean.java:410)
        at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.create(ReflectionServiceFactoryBean.java:189)
        at org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory.createEndpoint(AbstractWSDLBasedEndpointFactory.java:100)
        at org.apache.cxf.frontend.ServerFactoryBean.create(ServerFactoryBean.java:117)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:1414)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1375)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1335)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:473)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:409)
        at java.security.AccessController.doPrivileged(Native Method)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:380)
        at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:264)
        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:261)
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185)
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164)
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:429)
        at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:728)
        at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:380)
        at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:255)
        at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:199)
        at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:45)",Xerces 2.9.1,,,,,,,,,,,,,,,,26/Feb/09 01:45;bmargulies;aegis.xsd;https://issues.apache.org/jira/secure/attachment/12400983/aegis.xsd,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2009-02-26 00:51:41.068,,,no_permission,,,,,,,,,,,,,113523,,,Sat Feb 28 19:49:17 UTC 2009,,,,,,0|i0v1c7:,179190,,,,,,,,"26/Feb/09 00:51;bmargulies;Doesn't this look like a Xerces bug to you?

the property element refers to an attribute group that surely includes 'name'.",26/Feb/09 01:45;bmargulies;Improved version?,"26/Feb/09 01:46;bmargulies;Dennis,

Can you try with the version I've attached? I think I see the problem, but I'm a bit frustrated in figuring out how to test my ideas.

--benson
","26/Feb/09 02:02;bmargulies;I believe this has to do with the unwanted xs:anyAttributes in the aegis.xsd, which I've removed. I tried a test program that read a .aegis.xml file while validating with Xerces 2.9.1, and it worked.
",27/Feb/09 11:35;deki;Doesn't work with the latest SNAPSHOT. Will upload a testcase asap.,"27/Feb/09 12:02;bmargulies;This is really very odd. I built a standalone app that validated a .aegis.xml with that version of Xerces, and it worked. I look forward to your test case.
",28/Feb/09 17:55;deki;Hmmm it also works in my minimal test case. There are about 140 jars on the classpath of my application. Maybe one of the other dependecies is influencing the validation. I'll try to sort it out later.,"28/Feb/09 19:49;bmargulies;This sure is odd. It's hard to think of what some other thing could to make this fail.
",,,,,,,,,,,,,,,,,,,,,,,
"MTOM content-type header missing required ""type"" parameter",CXF-2062,12415491,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,dkulp,dkulp,24/Feb/09 17:40,24/Apr/09 21:17,14/Mar/19 02:29,24/Feb/09 17:58,,,,,,,,,,,,,,,2.0.11,2.1.5,,,,,,,,,0,,,,"http://tools.ietf.org/html/rfc2387 says that the ""Type"" parameter is required.   We're only outputting it for xop, not for other mime things. 

Also, the charset is stuck on the multipart/related content-type header when it shouldn't be.  (just needed in the individual part headers)",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113520,,,2009-02-24 17:40:52.0,,,,,,0|i0v1b3:,179185,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
org.apache.cxf.jaxrs.provider.AbstractJAXBProvider.getPackageContext erroneously returns null value,CXF-2058,12415402,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,,mhanau,mhanau,23/Feb/09 20:27,24/Apr/09 21:17,14/Mar/19 02:29,04/Mar/09 11:10,2.1.4,,,,,,,,,,,,,,2.1.5,2.2,,,JAX-RS,,,,,,0,,,,"The following code does not allow a non-null context returned by packageContexts.get(packageName) to be returned.

            JAXBContext context = packageContexts.get(packageName);                                             // In my test case this value == null on first iteration but not on second
            if (context == null) {                                                                                                                         // If context != null, then this block is not executed.
                try {
                    context = JAXBContext.newInstance(packageName, type.getClassLoader());
                    packageContexts.put(packageName, context);
                    return context;
                } catch (JAXBException ex) {
                    LOG.fine(""Error creating a JAXBContext using ObjectFactory : "" 
                                + ex.getMessage());
                    return null;
                } // end try-catch
            } // end if 
        } // end synchronized block
        return null;   // Causes response to be null when above if(context == null) is false",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-03-04 11:10:27.374,,,no_permission,,,,,,,,,,,,,113517,,,Wed Mar 04 11:10:27 UTC 2009,,,,,,0|i0v1rb:,179258,,,,,,,,04/Mar/09 11:10;sergey_beryozkin;thanks for pointing to where the problem is - fixed now. The fix has been merged to 2.2 only but it will also go to 2.1.5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java.sql.Date with alternative type binding causes ClassCastException,CXF-2057,12415371,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,bmargulies,deki,deki,23/Feb/09 15:24,24/Apr/09 21:17,14/Mar/19 02:29,27/Feb/09 09:35,2.1.4,,,,,,,,,,,,,,2.2,,,,Aegis Databinding,,,,,,0,,,,"Put a java.sql.Date from a ResultSet in a DTO as java.util.Date. The value is correctly serialized as xsd:dateTime.

After adding the following mapping (found at http://cwiki.apache.org/CXF20DOC/aegis-21.html), a ClassCastException is thrown:

<mappings xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">
	<mapping>
		<property name=""birthday"" 
			type=""org.apache.cxf.aegis.type.basic.DateType"" 
			typeName=""xsd:date""/>
	</mapping>
</mappings>

java.lang.ClassCastException: java.sql.Date
        at org.apache.cxf.aegis.type.java5.XMLGregorianCalendarType.writeObject(XMLGregorianCalendarType.java:54)
        at org.apache.cxf.aegis.type.basic.BeanType.writeElement(BeanType.java:377)
        at org.apache.cxf.aegis.type.basic.BeanType.writeObjectInternal(BeanType.java:356)
        at org.apache.cxf.aegis.type.basic.BeanType.writeObject(BeanType.java:293)
        at org.apache.cxf.aegis.type.basic.BeanType.writeElement(BeanType.java:377)
        at org.apache.cxf.aegis.type.basic.BeanType.writeObjectInternal(BeanType.java:356)
        at org.apache.cxf.aegis.type.basic.BeanType.writeObject(BeanType.java:293)
        at org.apache.cxf.aegis.databinding.XMLStreamDataWriter.write(XMLStreamDataWriter.java:92)
        at org.apache.cxf.aegis.databinding.XMLStreamDataWriter.write(XMLStreamDataWriter.java:43)
        at org.apache.cxf.interceptor.AbstractOutDatabindingInterceptor.writeParts(AbstractOutDatabindingInterceptor.java:113)
        at org.apache.cxf.interceptor.BareOutInterceptor.handleMessage(BareOutInterceptor.java:68)
        at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:220)
        at org.apache.cxf.interceptor.OutgoingChainInterceptor.handleMessage(OutgoingChainInterceptor.java:74)
        at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:220)
        at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:78)
        at org.apache.cxf.transport.servlet.ServletDestination.invoke(ServletDestination.java:92)
        at org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:285)
        at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:168)
        at org.apache.cxf.transport.servlet.AbstractCXFServlet.invoke(AbstractCXFServlet.java:175)
        at org.apache.cxf.transport.servlet.AbstractCXFServlet.doPost(AbstractCXFServlet.java:153)

I can create a testcase, if needed.",Java 1.5,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-02-25 01:42:52.143,,,no_permission,,,,,,,,,,,,,113516,,,Fri Feb 27 09:35:27 UTC 2009,,,,,,0|i13zmf:,231401,,,,,,,,"23/Feb/09 15:55;deki;Also occurs with java.util.Date after applying org.apache.commons.lang.time.DateUtils.truncate:

java.lang.ClassCastException: java.util.Date
        at org.apache.cxf.aegis.type.java5.XMLGregorianCalendarType.writeObject(XMLGregorianCalendarType.java:54)
        at org.apache.cxf.aegis.type.basic.BeanType.writeElement(BeanType.java:377)
","25/Feb/09 01:42;bmargulies;I've reproduced this in a unit test.
","25/Feb/09 01:58;bmargulies;Part of the problem: that doc you reference, which floated along from XFire, claims that Aegis respects a type= to specify the Type for the mapping. Well, there's a tiny shred of code that might imply this, but the rest of the implementation is just missing. I'm a bit in a quandry as to whether this feature should be invented, or whether the real issue here is that the actual type of the object is not being used to select the Type, only the static declaration. More news as I sort it out.","25/Feb/09 02:38;bmargulies;There is a workaround.

Explicitly create an AegisContext, and register java.sql.Date as a rootClass against the DateType.

Either that or remove the mapping for the XMLGregorianDateType from your type mapping.

One or the other is required until I actually implement the apparently missing type='classname' attribute.
","25/Feb/09 03:08;bmargulies;I (re)implemented type= in the trunk, and this now works.","25/Feb/09 13:21;deki;Register as rootClass against DateType?

This didn't work:
      typeMapping.register(java.util.Date.class, XMLSchemaQNames.XSD_DATE, new org.apache.cxf.aegis.type.basic.DateType());
      typeMapping.register(java.sql.Date.class, XMLSchemaQNames.XSD_DATE, new org.apache.cxf.aegis.type.basic.DateType());

I assume you meant XMLGregorianCalendarType and not XMLGregorianDateType. Tried to remove it with:

    TypeMapping typeMapping = aegisContext.getTypeMapping();
    if (typeMapping!=null) {
      LOG.info(""XMLGregorianCalendarType registered? ""+typeMapping.isRegistered(XMLGregorianCalendarType.class));
      LOG.info(""XMLGregorianCalendar registered? ""+typeMapping.isRegistered(XMLGregorianCalendar.class));
      Type type = typeMapping.getType(XMLSchemaQNames.XSD_DATE);
      if (type!=null) {
        LOG.info(""removing ""+type.getTypeClass());
        typeMapping.removeType(type);
      } else {
        LOG.info(""no type present for ""+XMLSchemaQNames.XSD_DATE);
      }
      LOG.info(""XMLGregorianCalendarType registered? ""+typeMapping.isRegistered(XMLGregorianCalendarType.class));
      LOG.info(""XMLGregorianCalendar registered? ""+typeMapping.isRegistered(XMLGregorianCalendar.class));      
    } else {
      LOG.warn(""no typeMapping present"");
    }

Seems to be removed:

0225 14:18:21 INFO  XMLGregorianCalendarType registered? false
0225 14:18:21 INFO  XMLGregorianCalendar registered? true
0225 14:18:21 INFO  removing class javax.xml.datatype.XMLGregorianCalendar
0225 14:18:21 INFO  XMLGregorianCalendarType registered? false
0225 14:18:21 INFO  XMLGregorianCalendar registered? false

But exception stays the same afterwards.","25/Feb/09 15:58;bmargulies;The suggestion about the root class was based on reading the code, but I didn't try it myself.

In any case, I committed the real fix to the trunk, and I'm deploying a snapshot now.
","26/Feb/09 08:53;deki;Tried the 2.2-SNAPSHOT...initialization failed:

Caused by: java.lang.NullPointerException
        at org.apache.cxf.aegis.databinding.AegisDatabinding.createSchemas(AegisDatabinding.java:406)
        at org.apache.cxf.aegis.databinding.AegisDatabinding.initialize(AegisDatabinding.java:285)
        at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.buildServiceFromClass(ReflectionServiceFactoryBean.java:371)
        at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.initializeServiceModel(ReflectionServiceFactoryBean.java:422)
        at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.create(ReflectionServiceFactoryBean.java:190)
        at org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory.createEndpoint(AbstractWSDLBasedEndpointFactory.java:100)
        at org.apache.cxf.frontend.ServerFactoryBean.create(ServerFactoryBean.java:117)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:585)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:1414)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1375)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1335)
        ... 39 more
",26/Feb/09 09:00;deki;Did some debugging...t.getSchemaType() for org.apache.cxf.aegis.type.basic.DateType is null.,26/Feb/09 13:10;bmargulies;I created a unit test for your original remapping (org.apache.cxf.aegis.date.*) that passes as when I made the change. Please post some sort of runnable test case for what happened to you and I can work from there.,"26/Feb/09 13:26;bmargulies;OK, I see what's wrong here. I'd still like a test case.","26/Feb/09 14:10;bmargulies;OK, got it, I think. I'll make another snapshot.
",27/Feb/09 09:35;deki;Thank you...it works now.,,,,,,,,,,,,,,,,,,
wsdl2java NPE on Async WSDL,CXF-2054,12415264,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,blue.thomas,blue.thomas,20/Feb/09 23:26,24/Apr/09 21:17,14/Mar/19 02:29,13/Mar/09 13:16,2.1.4,2.1.5,2.2,,,,,,,,,,,,2.1.5,,,,,,,,,,0,,,,"When JavaMethod gets created for an operation from the WSDL suffixed with ""Async"", OperationProcessor:181 evaluates to true and line 182 throws an NPE because the method object's JavaReturn object was never populated with properties (method.getReturn().getClassName() == null).  I don't see method's JavaReturn object ever getting set in the execution stack.","Linux, JRE 1.6.0_07",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-02-26 21:36:05.135,,,no_permission,,,,,,,,,,,,,113513,,,Thu Feb 26 21:36:05 UTC 2009,,,,,,0|i1ae1b:,268740,,,,,,,,26/Feb/09 21:36;dkulp;Any chance you could provide a wsdl along with the full command line you are running?,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Encrypt before signing not dealing with secure conversation tokens,CXF-2052,12415160,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,eamonndwyer,eamonndwyer,19/Feb/09 18:30,24/Apr/09 21:17,14/Mar/19 02:29,19/Feb/09 18:47,2.2,,,,,,,,,,,,,,2.2,,,,WS-* Components,,,,,,0,,,,The Ws-SecureConversation client is failing for the ADC-ES_IPingService and _AD-ES_IPingService tests. The attached patch suggests a solution for it.,,,,,,,,,,,,,,,,,19/Feb/09 18:31;eamonndwyer;diffFeb192009.patch;https://issues.apache.org/jira/secure/attachment/12400539/diffFeb192009.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113512,,,2009-02-19 18:30:58.0,,,,,,0|i1ae1j:,268741,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Exception in REST Service creates not-well-formed xml responses,CXF-2051,12415133,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,,thecoolace,thecoolace,19/Feb/09 11:20,24/Apr/09 21:17,14/Mar/19 02:29,05/Mar/09 17:59,2.2,,,,,,,,,,,,,,2.1.5,2.2,,,JAXB Databinding,,,,,,0,,,,"I've got this with SOAP and REST services using JAXB Databinding. In case of errors during the databinding phase, I get not well-formed xml like this:

<?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?><Company><addresses><address1Ntl>street</address1Ntl><cityNtl>city</cityNtl><countryISO>276</countryISO><type>Extern</type><zipCity>69250</zipCity></addresses><ns1:XMLFault xmlns:ns1=""http://cxf.apache.org/bindings/xformat""><ns1:faultstring xmlns:ns1=""http://cxf.apache.org/bindings/xformat"">org.hibernate.LazyInitializationException: failed to lazily initialize a collection of role: de.volkswagen.ums.persistence.data.PersistentOrganization.displaynames, no session or session was closed</ns1:faultstring></ns1:XMLFault>

So the already created beginning of the response is not replaced but appended by the fault, creating a not usable response.",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-03-05 17:59:57.999,,,no_permission,,,,,,,,,,,,,113511,,,Thu Mar 05 17:59:57 UTC 2009,,,,,,0|i1ae1r:,268742,,,,,,,,"05/Mar/09 17:59;sergey_beryozkin;If org.apache.cxf.output.buffering is set to true or if a given provider has getEnableBuffering() method which returns true then the output will be buffered, If we're talking about small to medium size messages then the perfomance sideeffects are unlikely to happen, the CachedOutputStream is very efficient.

Additionally, if enableStreaming propery is set to true on a JAXBElementProvider then a caching XMLStreamWriter will be used to capture all the events in memory and then output them to the real stream.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MimeBodyPartInputStream never finishes reading certain streams,CXF-2050,12415078,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,piepera,piepera,18/Feb/09 18:11,24/Apr/09 21:17,14/Mar/19 02:29,19/Feb/09 22:07,2.1.4,,,,,,,,,,,,,,2.0.11,2.1.5,,,,,,,,,0,,,,"The MimeBodyPartInputStream class never finishes reading certain kinds of input streams - it continues to read the same bytes over and over. One result of this issue is that the AttachmentDeserializer enters an infinite loop when trying to deserialize a binary attachment, so I would consider this an important issue.

It appears that the problem has to do with how the end of the stream is read. First, the MimeBody stream's read() method reads the to the end of the PushBack stream. Upon reaching the end of the PushBack stream, the MimeBody stream's hasData() method unreads the last 15 bytes of the PushBack stream. The MimeBody stream's read() method returns 0, which signals that more data needs to be read. This loop can happen over and over - the invoking code will keep asking the MimeBody stream for more data, and the MimeBody stream will continue returning 0.

The MimeBody stream should return -1 if there is no more data to be read - it does this in most cases, but it doesn't handle this case for some reason.",,,,,,,,,,,,,,,,,18/Feb/09 18:14;piepera;MimeBodyPartInputStreamTest.java;https://issues.apache.org/jira/secure/attachment/12400432/MimeBodyPartInputStreamTest.java,18/Feb/09 18:38;piepera;patch.txt;https://issues.apache.org/jira/secure/attachment/12400436/patch.txt,,,,,2.0,,,,,,,,,,,,,,,,,,,,2009-02-19 22:07:01.666,,,no_permission,,Novice,,,,,,,,,,,113510,,,Thu Feb 19 22:07:01 UTC 2009,,,,,,0|i1ae1z:,268743,,,,,,,,"18/Feb/09 18:14;piepera;Here is a test case which duplicates the issue. Executing this test case will demonstrate that MimeBodyInputStream.read() is returning 0 over and over.

Alternatively, you can change this test so that it calls IOUtils.toString() on the stream. This will cause the code to enter an infinite loop, similar to the behavior caused by AttachmentDeserializer.",18/Feb/09 18:38;piepera;Proposed patch to MimeBodyPartInputStream; changed the processBuffer() method so it doesn't unread the Pushback stream when it hits the end of the Pushback stream.,"19/Feb/09 22:07;dkulp;
Your patch caused MANY tests to start failing as existing mime streams could no longer be properly parsed. 

However, your test case was a big help and I've fixed to pass your test.    Thanks!",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Temporary files are not deleted under windows,CXF-2049,12415071,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,utuba,utuba,18/Feb/09 16:36,24/Apr/09 21:17,14/Mar/19 02:29,12/Mar/09 13:48,2.1.4,,,,,,,,,,,,,,2.0.11,2.1.5,,,Core,,,,,,0,,,,"When obtaining packets of data from a webservice, temporary files created for binary data are not deleted when running under windows.

Please see:

CXF-1743

For a description of this issue.  It only occurs under windows, nut under linux.",Windows Server 2008,,,,,,,,,,,CXF-2106,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-03-12 13:41:48.304,,,no_permission,,,,,,,,,,,,,113509,,,Thu Mar 12 13:41:48 UTC 2009,,,,,,0|i0sy93:,167026,,,,,,,,"12/Mar/09 13:41;dkulp;
I think this is the same as CXF-2106.   Fixes are now in.   I HOPE that fixes it, but without a Windows box, a bit hard to know. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ClassCastException occurs on HTTPS web service call made when Tibco EMS SSL Java client library is on classpath,CXF-2048,12415014,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Critical,Fixed,seanoc,rgavlin,rgavlin,18/Feb/09 05:22,30/Jul/09 18:01,14/Mar/19 02:29,19/Feb/09 10:34,2.0.10,,,,,,,,,,,,,,2.2.1,,,,Transports,,,,,,0,,,,"My app is using CXF to make web service connections to external services that require client PKI authentication. The app also uses Tibco Java client libraries for JMS over SSL. The Tibco libs set the following Java system property:

java.protocol.handler.pkgs=com.sun.net.ssl.internal.www.protocol

This causes my CXF web service client to throw a class cast exception when it attempts to make a secure connection. Let me explain why this occurs..

The java.protocol.handler.pkgs system property is a list of package name prefixes used by Java to resolve protocol names into actual handler class names. As of v1.4, JSSE has been integrated into the J2SDK. Thus, the classes formerly in com.sun.net.ssl have been promoted to the javax.net.ssl package and are now a part of the standard JSSE API.

For compatibility purposes the com.sun.net.ssl classes and interfaces still exist, but have been deprecated. Applications written using them can run in the J2SDK v1.4 and later without being recompiled. **Thus, setting the system property causes Java to use the deprecated implementation.**

The problem with CXF comes in because it assumes the newer handler package structure when it attempts to decorate the underlying connection with your TLSClientParameters.

A workaround should be implemented to support common, divergent subtype https implementations including com.sun.net.ssl.HttpsURLConnection.",JDK 6 with Tibco EMS 4 SSL library on classpath,,,,,,,,,,,,,,,,18/Feb/09 09:39;rgavlin;cxf-2048.patch;https://issues.apache.org/jira/secure/attachment/12400402/cxf-2048.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2009-02-19 10:34:54.999,,,no_permission,,,,,,,,,,,,,113508,,,Thu Feb 19 10:34:54 UTC 2009,,,,,,0|i0uybb:,178700,,,,,,,,18/Feb/09 09:39;rgavlin;Patch adds support for deprecated class com.sun.net.ssl.HttpsURLConnection.,"19/Feb/09 10:34;seanoc;Fixed on 2.2, 2.1.x, 2.0.x branches",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Custom headers lost when using Cxf Interceptors,CXF-2045,12414941,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,,kgmanuel,kgmanuel,17/Feb/09 11:27,24/Apr/09 21:17,14/Mar/19 02:29,05/Mar/09 18:04,2.2,,,,,,,,,,,,,,2.1.5,2.2,,,Core,JAX-RS,,,,,0,,,,"All changes to the header through the Message object in the out interceptor are not received by client. 

Server.java

public class RetestRestServer {
    String basepath = ""/someValue"";
    int port = 8080;

    @SuppressWarnings(""unchecked"")
    protected RetestRestServer() throws Exception {
        JAXRSServerFactoryBean sf = new JAXRSServerFactoryBean();
        sf.setResourceClasses(AccountService.class);
        sf.setResourceProvider(AccountService.class, 
            new SingletonResourceProvider(new AccountService()));
        sf.setAddress(""http://localhost:""+port+basepath+""/rest/Accounts/"");
        
        List<Interceptor> out = new ArrayList<Interceptor>(1);
        in.add(new RestOutHandler());
        sf.setOutInterceptors(in);
        
        sf.create();
    }

    public static void main(String args[]) throws Exception {
        new RetestRestServer();
        System.out.println(""Server ready..."");
    }
}

RestOutInterceptor.java

public class RestOutHandler extends AbstractPhaseInterceptor<Message>{
	private static Logger logger = Logger.getLogger(RestOutHandler.class);
	public RestOutHandler() {
		super(Phase.POST_PROTOCOL);
	}
	public void handleMessage(Message message) throws Fault {
		Map<String, List<String>> responseHeaders = (Map<String, List<String>>)message.get(Message.PROTOCOL_HEADERS);
		
		if (responseHeaders == null) {
			responseHeaders = new HashMap<String, List<String>>();
			message.put(Message.PROTOCOL_HEADERS, responseHeaders);
		}
		
		responseHeaders.put(""header1"", Arrays.asList(new String[]{""headerValue""}));
		logger.debug(""out message headers: "" + responseHeaders);
	}
}

AccountService.java

@Consumes(""*/xml"")
@Produces(""text/xml"")
@WebService(serviceName=""AccountService"", portName=""AccountServicePort"")
public class AccountService{
    private static Logger logger = Logger.getLogger(AccountService.class);
    @GET
    @Path(""/"")
    @WebMethod
    public String getAccount(
            @QueryParam(""serialNumber"")
            @WebParam(name=""serialNumber"")
            long serialNumber) {
        logger.info(""get Account received: "" + serialNumber);
        return ""get Account received: "" + serialNumber;
    }
}

Please advise if more info is needed.","Java 1.5
Jetty 6.1",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-03-05 18:04:00.841,,,no_permission,,,,,,,,,,,,,113505,,,Fri Mar 06 02:57:58 UTC 2009,,,,,,0|i0sy9b:,167027,,,,,,,,"05/Mar/09 18:04;sergey_beryozkin;Hi Gabo - I have a test now (and a fix) showing how a custom output interceptor can add headers to the outbound message, this interceptor is registered at Phase.MARSHAL","06/Mar/09 02:57;kgmanuel;Hi Sergey,

Thanks! I'll check it out next opportunity I get. :)

Gabo

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Aegis Custom Type Mapping,CXF-2044,12414890,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,bmargulies,relphie,relphie,16/Feb/09 19:34,24/Apr/09 21:17,14/Mar/19 02:29,21/Feb/09 21:10,2.1.3,2.1.4,,,,,,,,,,,,,2.1.5,2.2,,,Aegis Databinding,,,,,,0,,,,"Attempting to specify a custom type mapping to the aegis context results in a schema name conflict exception.
The exception does not occur in 2.2-SNAPSHOT.",,,,,,,,,,,,,,,,,20/Feb/09 21:57;relphie;cxf-test-case-updated.zip;https://issues.apache.org/jira/secure/attachment/12400628/cxf-test-case-updated.zip,18/Feb/09 16:34;relphie;cxf-test-case.zip;https://issues.apache.org/jira/secure/attachment/12400427/cxf-test-case.zip,,,,,2.0,,,,,,,,,,,,,,,,,,,,2009-02-19 15:19:15.43,,,no_permission,,,,,,,,,,,,,113504,,,Mon Feb 23 18:31:07 UTC 2009,,,,,,0|i1ae2n:,268746,,,,,,,,18/Feb/09 16:34;relphie;Attaching the entire eclipse project for easier testing.,"19/Feb/09 15:19;bmargulies;I've backported the large set of changes that are believed to contain the fix. It remains to add your test case and backport that, and then publish a 2.1. snapshot.
","19/Feb/09 15:25;bmargulies;Brian,

You've done a lot of packaging already, so feel free to decline the following request.

If you could perhaps refactor test case as a patch that adds a unit test to rt/databinding/aegis, I would be extremely grateful.

--benson
","19/Feb/09 18:01;bmargulies;I've published a 2.1.5-SNAPSHOT that passes your test case. Please give it a whirl.
","20/Feb/09 18:47;relphie;Your fixes did indeed solve my test case.  I was looking to create the patch, but it is taking me some time to figure out the format of your existing test cases.

However, after updating to 2.1.5-SNAPSHOT in my own code, I am now getting a null-pointer exception during AegisDatabinding.initialize(Service s) - apparently my BeanTypeInfo has a null info object.  I guess neither getTypeInfo() nor createTypeInfo() are called prior.

I was able to updated the test case to reproduce the issue.  Basically, adding a second service method that accepts the NoDefaultConstructorBean object generates the null pointer.  Would you like me to create a new issue for this, or just upload the updated test case here?  The same null-pointer exception occurs with 2.2-SNAPSHOT.","20/Feb/09 20:32;relphie;I also noticed that there is a non-passive change in the org.apache.cxf.aegis.type.Type#writeSchema() method.  In 2.1.3 and 2.1.4 accepts an org.jdom.Element, where as 2.1.5-SNAPSHOT accepts an org.apache.ws.commons.schema.XmlSchemaElement",20/Feb/09 21:13;bmargulies;We can use this JIRA. Attach away and I'll go from there. Thanks.,"20/Feb/09 21:24;bmargulies;You are correct that this change comes along with an incompatibility in the quasi-public API 'Type'. The original motivation was to push JDOM out of the required dependency list.

This is a lump we'll have to document for 2.1.5.
","20/Feb/09 21:47;dkulp;
Benson,  

Could a utility method be created to help out the migration?   Basically, something that would create a dummy JDOM element that could be passed into their method and another utility to take that JDOM element and fill in the XmlSchema stuff. 

If their methods are complex, migrating to XmlSchema could be a non-trivial.   Having something to help out with it would be a good thing.   Not sure how hard that would be to write though.  :-(","20/Feb/09 21:57;relphie;I attached an expanded test case to reproduce null-pointer exception.

I think an auto-conversion jdom to xmlschema utility would probably be too much work.  Is there a way to get these bug fixes without introducing this change?  Can 2.1.x branch continue to use jdom?

Have you thought about moving all of the api to something even more generic, perhaps the org.w3c.dom apis, so that there is no xml-schema library lock-in?","20/Feb/09 23:21;bmargulies;Brian,

CXF, broadly, has always had an XML Schema dependency. It's not going away. In fact, in general, we're doing just the opposite. Dan and I got ourselves voted in as Xml Schema committers just so that we could more confidently depend on it. Using a DOM API for all the schema things CXF has to do would be really nasty from a performance and maintenance standpoint.

The change to Aegis to have the Type system work directly with Xml Schema is consistent with the rest of the system -- if perhaps not very polite on the 2.1.x branch.

I think you might be one of about 3 people who ever bothered to invest in custom type objects. Or, at least, who have turned up in the CXF community. CXF 2.0.x left a number of Aegis features broken from the original port. I changed all sorts of things in 2.1. 

Porting this code back to 2.1 has the potential to annoy anyone, like you, who adapted custom type code to the 2.1 changes. 

Your welcome to move this thread to the dev list. I suspect that the net-net will be this; there's no one in the community with the time and inclination to fix your original problem inside the 2.1 JDOM paradigm.

If you and others really would rather have JDOM and bugs than Xml Schema and less bugs in the 2.1.x branch, then we'd have to consider unwinding my (really laborious) backport.

--benson
","21/Feb/09 21:10;bmargulies;I've posted snapshots. I'm closing this; we can continue the exchange of views on the incompatible change on the dev list.
","23/Feb/09 17:11;relphie;Thanks for you work, I do understand your motivations for switching to and only supporting XmlSchema.

I agree, custom type mappings hopefully are not needed, unfortunately I am working with some external classes that are not javabeans.

I am sure I can work through creating a new type mapper with xml schema.

Aside from that, do you have a set release schedule?  Or should I plan I building my own 2.1.5 for some time?","23/Feb/09 18:31;bmargulies;Brian, there are published 2.1.5-SNAPSHOT packages you can use for now.

The dev list is busily deciding whether to keep this stuff in 2.1.5 or push really hard to get a 2.2 by mid-march.
",,,,,,,,,,,,,,,,,
"CXF failed to deal with attachment if client sends in attachment with ""Multipart/Related"" instead of ""multipart/related"" as Content-type",CXF-2043,12414860,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,njiang,joeluo,joeluo,16/Feb/09 10:24,24/Apr/09 21:17,14/Mar/19 02:29,17/Feb/09 13:30,2.1.4,,,,,,,,,,,,,,2.1.5,2.2,,,,,,,,,0,,,,"Here is source code from cxf-2.1.x-fixes branch for *org.apache.cxf.attachment.AttachmentUtil.java*
{code}
 public static boolean isTypeSupported(String contentType, List<String> types) {
        if (contentType == null) {
            return false;
        }
        for (String s : types) {
            if (contentType.indexOf(s) != -1) {
                return true;
            }
        }
        return false;
    }
{code}

So if a client sends in a SOAP request with attachment with *Content-Type* as ""Multipart/Related"" instead of ""multipart/related"", then this method will always return *false* as result. The spec says that the Content-Type should be case-insensitive. It should not matter whether the client sends in ""Multipart/Related"" or ""multipart/related"".

I have attached a patch to fix this. Basically, I just simply modified this method to:
{code}
public static boolean isTypeSupported(String contentType, List<String> types) {
        if (contentType == null) {
            return false;
        }
        for (String s : types) {
            if (contentType.toLowerCase().indexOf(s) != -1) {
                return true;
            }
        }
        return false;
    }
{code}","Solaris 10, WinXP Pro",,,,,,,,,,,,,,,,16/Feb/09 10:26;joeluo;multipart.patch;https://issues.apache.org/jira/secure/attachment/12400269/multipart.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2009-02-17 13:30:06.672,,,no_permission,,,,,,,,,,,,,113503,,,Tue Feb 17 13:30:06 UTC 2009,,,,,,0|i0v1qv:,179256,,,,,,,,"17/Feb/09 13:30;njiang;Trunk
http://svn.apache.org/viewvc?rev=744237&view=rev
2.1.x
http://svn.apache.org/viewvc?rev=745035&view=rev",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
One way operations return response after impl is invoked...,CXF-2040,12414713,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,dkulp,dkulp,13/Feb/09 01:57,24/Apr/09 21:17,14/Mar/19 02:29,13/Feb/09 16:46,,,,,,,,,,,,,,,2.1.5,,,,Soap Binding,,,,,,0,,,,"
For one way operations, the 200/202 response code should be sent back as soon as the message is successfully received, not after the impl is invoked..   If the impl takes a long time, the client blocks waiting for the accepted response.
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113500,,,2009-02-13 01:57:54.0,,,,,,0|i1ae33:,268748,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
-Dorg.apache.cxf.spring.validation.mode=VALIDATION_NONE has no effect,CXF-2039,12414664,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,laurent.perez,laurent.perez,12/Feb/09 13:17,04/Dec/09 22:34,14/Mar/19 02:29,09/Nov/09 21:13,2.1.4,,,,,,,,,,,,,,2.2.5,,,,Integration,,,,,,0,,,,"Hi

Following CXF-1647 (and http://cwiki.apache.org/CXF20DOC/schemas-and-namespaces.html), I've tried setting a org.apache.cxf.spring.validation.mode=VALIDATION_NONE property in order to configure timeouts via spring properties, as in :

<http-conf:client ConnectionTimeout=""${ws.auth.connectionTimeout}"" ReceiveTimeout=""${ws.auth.receiveTimeout}""/>

However, the property has no effect, I still get (1) when using a mvn jetty:run :

What I've tried :
- command line, set MAVEN_OPTS=""-Dorg.apache.cxf.spring.validation.mode=VALIDATION_NONE""
- pom.xml, jetty configuration : 					<systemProperties> <systemProperty> <name>org.apache.cxf.spring.validation.mode</name><value>VALIDATION_NONE</value> </systemProperty></systemProperties>
- both have no effect

Is the property supposed to be used like this ?
Thanks

(1)
Offending resource: ServletContext resource [/WEB-INF/applicationContext.xml]; n
ested exception is org.springframework.beans.factory.xml.XmlBeanDefinitionStoreE
xception: Line 43 in XML document from class path resource [ws-context.xml] is i
nvalid; nested exception is org.xml.sax.SAXParseException: cvc-datatype-valid.1.
2.1: '${ws.auth.connectionTimeout}' is not a valid value for 'integer'.:
org.xml.sax.SAXParseException: cvc-datatype-valid.1.2.1: '${ws.auth.connectionTi
meout}' is not a valid value for 'integer'.","win32, cxf2.1.4 or cxf2.1.3",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-02-26 21:39:39.96,,,no_permission,,,,,,,,,,,,,113499,,,Fri Feb 27 12:14:38 UTC 2009,,,,,,0|i14eq7:,233849,,,,,,,,"26/Feb/09 21:39;dkulp;
Can you pass the full stack trace?

That property only applies when it's CXF code actually creating the Application context.    If something else is creating the Application context (like the webapp listener thing), that flag doesn't apply.   It would be up to whatever is creating the context to provide the flags or whatever necessary to turn off the validation.
",27/Feb/09 12:14;tolar;I have run into the same problem. ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
changes for signaturePropFile and decryptionPropFile of WSS4JInteceptor can't be reloaded if we use cxf in container,CXF-2038,12414652,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,ffang,ffang,ffang,12/Feb/09 08:56,24/Apr/09 21:17,14/Mar/19 02:29,13/Feb/09 01:55,2.0.10,2.1.4,,,,,,,,,,,,,2.0.11,2.1.5,2.2,,WS-* Components,,,,,,0,,,,"if we use cxf with ws-security in some kind of container such as servicemix,  and if we change the content of decryptionPropFile and signaturePropFile, then if we hot redeploy artifacts into container, then the changes can't be loaded.
The error is caused by WSSHandler of wss4j, the DEC_PROP_FILE(decryptionPropFile) and SIG_PROP_FILE(signaturePropFile)get loaded only once, see the code of loadDecryptionCrypto in WSSHandler
Crypto crypto = null;
String decPropFile = getString(WSHandlerConstants.DEC_PROP_FILE,
reqData.getMsgContext());
if (decPropFile != null) {
if ((crypto = (Crypto) cryptos.get(decPropFile)) == null) { 
//the cryptos is static so means if decryptionPropFile loaded before, then it won't be loaded again even the content of decPropFile changed 
crypto = CryptoFactory.getInstance(decPropFile, this .getClassLoader(reqData.getMsgContext())); cryptos.put(decPropFile, crypto); }
}
we should override the method in AbstractWSS4JInterceptor which is subclass of WSHandler to ensure each change in DEC_PROP_FILE and SIG_PROP_FILE will be reloaded
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113498,,,Fri Feb 13 01:55:27 UTC 2009,,,,,,0|i0v1r3:,179257,,,,,,,,"13/Feb/09 01:55;ffang;commit fix 
http://svn.apache.org/viewvc?rev=743698&view=rev for trunk
http://svn.apache.org/viewvc?rev=743705&view=rev for 2.1.x branch
http://svn.apache.org/viewvc?rev=743736&view=rev for 2.0.x branch
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SoapFault subcode not outputted correctly in Soap12FaultOutInterceptor,CXF-2037,12414615,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,gduchesneau,gduchesneau,11/Feb/09 20:57,24/Apr/09 21:17,14/Mar/19 02:29,19/Feb/09 22:04,2.1.3,,,,,,,,,,,,,,2.0.11,2.1.5,,,,,,,,,0,,,,"Soap 1.2 spec for faults (http://www.w3.org/TR/soap12-part1/#soapfault) says that a soap fault sub code should be formatted like this:

<Subcode><Value>m:MySubCode</Value></Subcode>

but org.apache.cxf.binding.soap.interceptor.Soap12FaultOutInterceptor does this (inner Value element is absent):

<Subcode>m:MySubCode</Subcode>

By looking at the code, it would be very simple to fix this:

Starting at line 75 in release 2.1.3, code is :
            if (fault.getSubCode() != null) {
                writer.writeStartElement(defaultPrefix, ""Subcode"", ns);
                writer.writeCharacters(fault.getSubCodeString(getFaultCodePrefix(writer, fault.getSubCode()), 
                                                              defaultPrefix));                
                writer.writeEndElement();
            }

... and it would become something like this:
            if (fault.getSubCode() != null) {
                writer.writeStartElement(defaultPrefix, ""Subcode"", ns);
                writer.writeStartElement(defaultPrefix, ""Value"", ns);
                writer.writeCharacters(fault.getSubCodeString(getFaultCodePrefix(writer, fault.getSubCode()), 
                                                              defaultPrefix));                
                writer.writeEndElement();
                writer.writeEndElement();
            }",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113497,,,2009-02-11 20:57:52.0,,,,,,0|i1adh3:,268649,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Issues with SOAPAction ,CXF-2035,12414589,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,acorcoran,acorcoran,11/Feb/09 17:18,01/Feb/10 19:02,14/Mar/19 02:29,15/Dec/09 03:17,2.1.3,,,,,,,,,,,,,,2.1.9,2.2.6,,,Soap Binding,,,,,,0,,,,"It would appear that there are issues with the usage of both the HTTP SOAPAction & WSA SOAP action:

If for the sake of arguments we have a web service with 2 operations create & delete and with corresponding soap actions the following behaviour is observed.

1. If I specify a HTTP SOAP Action of create but the body of the soap request corresponds to a deleteRequest my create operation is invoked
2. If I specify a WSA SOAP Action of create but the body of the soap request corresponds to a deleteRequest my delete operation is invoked

See http://www.nabble.com/ws-a-questions-td21788455.html#a21788455 for the discussion on this.
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113495,,,2009-02-11 17:18:34.0,,,,,,0|i1404f:,231482,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JMS client transport (JMSConduit) does not tear down its reply awaiting listener on Bus shutdown,CXF-2034,12414588,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,marat,marat,11/Feb/09 17:11,24/Apr/09 21:17,14/Mar/19 02:29,27/Feb/09 17:22,2.1.3,,,,,,,,,,,,,,2.0.11,2.1.5,,,Transports,,,,,,0,,,,"As per summary JMSConduit leaks message consumers on Bus shutdown. 

This leads to a race for the same reply message and unpredictable behaviour when more than one CXF proxy consumes messages from the same queue with matching selectors between Bus restarts. This can be easily reproduced within JUnit if two or more tests use CXF proxy with JMS transport on reading replies from the same queue.",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,113494,,,2009-02-11 17:11:55.0,,,,,,0|i13zlr:,231398,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StaxUtils assumes DOM Node::appendChild(c) returns the passed-in child,CXF-2033,12414578,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,bob,bob,11/Feb/09 16:02,24/Apr/09 21:17,14/Mar/19 02:29,13/Feb/09 03:41,2.1.4,,,,,,,,,,,,,,2.0.11,2.1.5,,,Core,,,,,,0,,,,"StaxUtils does XML manipulation:

http://svn.apache.org/repos/asf/cxf/trunk/common/common/src/main/java/org/apache/cxf/staxutils/StaxUtils.java

in startElement(...) it builds a fragment and attaches it to a parent using appendChild(e):

        parent.appendChild(e);

When using this with the JBoss AS5 SOAP/DOM implementation, a SOAPBody appending a SOAPElement will return a different object than the one passed-in.  (In JBoss's case, you get back a SOAPBodyElement that's quite similar to, but distinct from, the SOAPElement you passed to appendChild(...)).

The DOM spec says that appendChild(...) returns the node that was appended, which implies (to me, and at least 1 other JBoss developer) that it may be different than the one you handed in.

This only becomes a problem when later in startElement(...), code calls e.getParent() to perform some logic.  This fails with JBoss DOM, since the 'e' StaxUtils is holding was detached from its own parent, and replaced with a different element node.

The fix is simply to assign the result of appendChild(e) back to e itself:

    e = (Element) parent.appendChild(e);

This causes StaxUtils not to freak out the JBoss DOM.","OSX, JBoss AS5, JDK6",180,180,,0%,180,180,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-02-13 03:49:45.466,,,no_permission,,Novice,,,,,,,,,,,113493,,,Fri Feb 13 03:49:45 UTC 2009,,,,,,0|i0sy9r:,167029,,,,,,,,"13/Feb/09 03:49;dkulp;
I marked this resolved as I fixed the specific location.   However, there are most likely a BUNCH of other places that do this.

A grep of:
grep -r ""appendChild"" * | wc -l
yields 91 calls to appendChild that need to be audited.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CacheControlHeaderProvider produces invalid no-cache headers,CXF-2031,12414520,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,,matth1,matth1,10/Feb/09 23:08,24/Apr/09 21:17,14/Mar/19 02:29,03/Mar/09 12:29,2.1.4,,,,,,,,,,,,,,2.1.5,2.2,,,JAX-RS,,,,,,0,,,,"For my JAXRS services I need to add the no-cache directive to all responses.   I've implemented a ResponseHandler that adds a CacheControl object with setNoCache(true) to the response.   When verifying the response headers I see that the header ""Cache-Control"" is set to ""public;no-cache="".  My application client which is a Flex/Flash application continues to cache the XML its being sent from my services.  

I don't believe that ""no-cache="" is valid in the HTTP 1.1 spec http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html.  The ""="" should only appear if optional field names are also specified.

I got the source and modified the CacheControlHeaderProvider to only include the ""="" when the optional fields were specified and everything works.  The flex client is no longer caching the XML responses from my JAXRS services.",Windows XP,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-03-03 12:29:59.403,,,no_permission,,,,,,,,,,,,,113491,,,Tue Mar 03 12:29:59 UTC 2009,,,,,,0|i0v1qf:,179254,,,,,,,,"03/Mar/09 12:29;sergey_beryozkin;Thanks for the info - fixed now, plus removed a default 'public' directive",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JMS transport is not usable with IBM MQI interface endpoints,CXF-2030,12414505,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,marat,marat,10/Feb/09 18:25,24/Apr/09 21:17,14/Mar/19 02:29,13/Feb/09 17:29,2.1.3,,,,,,,,,,,,,,2.0.11,2.1.5,,,Transports,,,,,,0,,,,"Currently JMS client transport is missing ""use MessageID as correlationID"" capability. 

It is currently impossible to use CXF for two way exchanges with IBM MQ MQI interfaced endpoints (native MQ apps) because native MQI messages are missing MQRFH2 header and the correlationID is loaded into MQMD header instead. 

The only portable way of loading correlationID into MQMD header using JMS APIs is to form a correlationID that would comply with ""A provider specific message ID"" description as per IBM doc bellow.

http://publib.boulder.ibm.com/infocenter/wmqv6/v6r0/index.jsp?topic=/com.ibm.mq.csqzaw.doc/uj25470_.htm

So there are two ways of addressing this issue.

1. Provide ""use Message ID as correlation ID"" capability
2. Generate CorrelationID complaint with IBM MQI format

1st option would take a bit of time do implement properly, that is avoid creating/deleteing a consumer for each potential reply. 2nd option is much easier to do.

I'm going to attach a patch with tests for the 2nd option shortly. This fix would also enable CXF partition a given queue into virtual message spaces with a static correlationID and selector prefix.

",,,,,,,,,,,,,,,,,11/Feb/09 21:27;marat;patch.issue-CXF-2030.branch-2.1.x-fixes.date-2009-02-11;https://issues.apache.org/jira/secure/attachment/12400041/patch.issue-CXF-2030.branch-2.1.x-fixes.date-2009-02-11,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112697,,,2009-02-10 18:25:49.0,,,,,,0|i0v1q7:,179253,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Null Pointer Exception in AbstractInvoker.createFault(),CXF-2025,12414246,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,kajkandler@conficio.com,kajkandler@conficio.com,06/Feb/09 18:10,24/Apr/09 21:17,14/Mar/19 02:29,10/Feb/09 20:31,2.0.8,,,,,,,,,,,,,,2.0.11,2.1.5,,,Core,,,,,,0,,,,"In certain instances (Exceptions coming from WS-I Security interceptor), the Fault can't be created, because it does throw a null pointer exception.

Here is at least a safer implementation. Not sure if this really help debugging the issue underlying why the method seems to be null.

    protected Fault createFault(Throwable ex, Method m, List<Object> params, boolean checked) {
        if (checked) {
            return new Fault(ex);
        } else {
            String message = (ex == null) ? """" : ex.getMessage();
            String method = (m == null) ? ""<null>"" : m.toString();
            return new Fault(new Message(""EXCEPTION_INVOKING_OBJECT"", LOG, message, method, params), ex);
        }
    }

This hurts especially it does simply mask what really is happening.",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112694,,,2009-02-06 18:10:52.0,,,,,,0|i0sya7:,167031,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WSDL Validation issue with wrapped style,CXF-2024,12414090,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,cheminal,cheminal,05/Feb/09 09:56,09/Feb/09 22:20,14/Mar/19 02:29,05/Feb/09 16:03,,,,,,,,,,,,,,,2.1.4,,,,Tooling,,,,,,0,,,,"I get a 'o.a.cxf.tools.common.ToolException' : ""Element Party has Having the same name with different types[{http://www.orange.com/OrderDelivery}PartyViewRequest -- {http://www.orange.com/OrderDelivery}PartyViewResponse], In wrapper style, there is a collision as per the spec.""
during the wsdl2java command when trying to generate code from a wrapped-styled WSDL, although the wsdl seems to be correctly built :
 
2 wrappers elements 'CreateParty' and 'CreatePartyResponse', each containing a single element 'Party' :
 
                  <element name=""CreateParty"">

                        <complexType>

                             <sequence>

                                   <element name=""Party""

                                         type=""tns:PartyViewRequest"" />

                             </sequence>

                        </complexType>

                  </element>

                  

                  <element name=""CreatePartyResponse"">

                        <complexType>

                             <sequence>

                                   <element name=""Party""

                                         type=""tns:PartyViewResponse"" />

                             </sequence>

                        </complexType>

                  </element>

 
 
The issue comes from the name of the element 'Party' which is the same within the 2 wrappers element, and obviously, if I change one of them to something else ('Party' to 'PartyResult') everything works ok. As the wsdl is generated, I can't really do this except for debugging purpose and I was wondering why cxf complains about this way of defining the wrapper elements ?",,,,,,,,,,,,,,,,,05/Feb/09 09:57;cheminal;OrderDelivery.wsdl;https://issues.apache.org/jira/secure/attachment/12399549/OrderDelivery.wsdl,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,50345,,,2009-02-05 09:56:47.0,,,,,,0|i1adhr:,268652,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE being thrown from JAXBEncoderDecoder,CXF-2022,12413986,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,seanoc,seanoc,seanoc,04/Feb/09 11:29,05/Feb/09 11:22,14/Mar/19 02:29,05/Feb/09 11:22,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,"

SchemaInfo sch is being accessed without a check if it is null, hence NPE:

            SchemaInfo sch =
part.getMessageInfo().getOperation().getInterface()
                .getService().getSchema(namespace);
            if (!sch.isElementFormQualified()) { // <== NPE
                namespace = null;
            }

",,,,,,,,,,,,,,,,,04/Feb/09 20:49;xbranko;CXF-bug-2022.zip;https://issues.apache.org/jira/secure/attachment/12399483/CXF-bug-2022.zip,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2009-02-04 20:49:22.996,,,no_permission,,,,,,,,,,,,,112693,,,Wed Feb 04 20:49:22 UTC 2009,,,,,,0|i1adhz:,268653,,,,,,,,"04/Feb/09 20:49;xbranko;The attached zip file contains full eclipse project that illustrates the problem. The only thing missing are jar files, which were omitted due to size constraints, so just put the all the jars into the WebContent/WEB-INF/lib directory, and you should be able to build and deploy this project on a tomcat server. 

Once that is done, just use a client, say soapui, to send a message to the service once it started up. If you send any string, it will be returned, if you send 'throw' it will reveal the problem.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SOAPFault detail is not set in WebServiceException/SOAPFaultException that is thrown from dispatch.invoke,CXF-2021,12413923,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,yfei,yfei,03/Feb/09 18:51,09/Feb/09 22:20,14/Mar/19 02:29,05/Feb/09 17:23,2.1.3,,,,,,,,,,,,,,2.1.4,,,,JAX-WS Runtime,,,,,,0,,,,"I'm using the dispatch mechanism to invoke a soap service in message mode.
 
Upon catching the WebServiceException thrown by the dispatch.invoke method, i try to extract the soap fault information from it (if it is a SOAPFaultException). That's when i realized the SOAPFault detail is missing (is null). The code i'm using is shown below. Also shown is the returned soap fault with detail when the same service is called using SOAPUI.

It appears the SOAPFault detail is not set when it is wrapped into a SOAPFaultException and thrown as a WebServiceException.

        //It appears that the JAX-WS implementation in 
	//cxf simply does not set the optional SOAPFault Detail object 
	//in the SOAPFault object wrapped by the SOAPFaultException
        private SOAPMessage createFaultMessageFromWebServiceException(WebServiceException wse) throws SOAPException {
		SOAPMessage msg = getNewSOAPMessage();
		if (wse instanceof SOAPFaultException) {
			SOAPFault fault = ((SOAPFaultException) wse).getFault();
                        //fault.hasDetail() return false
			msg.getSOAPBody().addFault(fault.getFaultCodeAsQName(), fault.getFaultString());
		} else {
			msg.getSOAPBody().addFault().setFaultString(wse.getMessage());
		}
		return msg;
	}

The same service invoked through SOAPUI returns SOAPFault message with detail.

<soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/"">
   <soap:Body>
      <soap:Fault>
         <faultcode>soap:Server</faultcode>
         <faultstring>Fault occurred while processing.</faultstring>
         <detail>
            <ns8:apiFault errorCode=""item not found"" objectName=""0"" objectType=""categoryset"" .../>
         </detail>
      </soap:Fault>
   </soap:Body>
</soap:Envelope>","Windows XP, Jdk 1.5, tomacat 5.5.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,50347,,,2009-02-03 18:51:17.0,,,,,,0|i1adi7:,268654,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Code generated from SwA/Mime binding when NOT using the enableMIMEContent customization throws exceptions at runtime,CXF-2020,12413822,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,dkulp,dkulp,02/Feb/09 22:27,09/Feb/09 22:20,14/Mar/19 02:29,03/Feb/09 03:06,2.0.9,2.1.3,,,,,,,,,,,,,2.1.4,,,,,,,,,,0,,,,"
If you use a wsdl with a mime binding, but don't enable the code generator to know about it via the <enableMIMEContent>true</enableMIMEContent> jaxb customization, the resulting code does not work for text/plain or octect-stream.    The generated code uses a String for text/plain and byte[] for octects, but the SwA interceptors won't map to those types.


",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,50348,,,2009-02-02 22:27:42.0,,,,,,0|i0v1bb:,179186,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fields of deserialized objects are null (No DOCTYPE declaration..),CXF-2017,12413622,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,vschiavoni,vschiavoni,30/Jan/09 14:02,02/Feb/09 10:39,14/Mar/19 02:29,30/Jan/09 23:42,2.1.3,,,,,,,,,,,,,,2.2,,,,Aegis Databinding,,,,,,0,,,,"I use the simple front-end to export a java interface and to call it.

Given this simple java interface:

public interface ServiceWithWeirdParams {
	void mapOfMapWithStringAndPojo(Map<String, Map<String, Pojo>> bigParam);
}

The implementation simply prints the bigParam argument.

Pojo is:
public class Pojo implements Serializable {

	private static final long serialVersionUID = 1481418882118674796L;

	int id;

	String name;

	Pojo parent;

	XMLGregorianCalendar date;

	public final XMLGregorianCalendar getDate() {
		return date;
	}

	public final void setDate(XMLGregorianCalendar date) {
		this.date = date;
	}

	public final int getId() {
		return id;
	}

	public final void setId(int id) {
		this.id = id;
	}

	public final String getName() {
		return name;
	}

	public final void setName(String name) {
		this.name = name;
	}

	public final Pojo getParent() {
		return parent;
	}

	public final void setParent(Pojo parent) {
		this.parent = parent;
	}

	@Override
	public String toString() {
		return ""Pojo[id:"" + id + "",name:"" + name + "",date:"" + date + ""]"";
	}
}


CXF on both client and server-side is configured using Aegis, like this:

		wsServerFactoryBean = new ServerFactoryBean();
		AegisDatabinding aDB = new AegisDatabinding();
		final AegisContext aegisContext = new AegisContext();
		aegisContext.setWriteXsiTypes(true);
		aDB.setAegisContext(aegisContext);
         	wsServerFactoryBean.getServiceFactory().setDataBinding(aDB);

The method is invoked like this:
	       
               Pojo p1 = new Pojo();
		p1.setName(""i am a pojo"");
		p1.setId(666);
		Map<String, Map<String, Pojo>> mapWithMapOfStringAndPojo = new HashMap<String, Map<String, Pojo>>();
		Map<String, Pojo> nameAndPojo = new HashMap<String, Pojo>();
		nameAndPojo.put(""firstPojo"", p1);
		mapWithMapOfStringAndPojo.put(""keyForFirstPojo"", nameAndPojo);
		ws.mapOfMapWithStringAndPojo(mapWithMapOfStringAndPojo);

And it prints:
***** Server received map of map (with pojo): {keyForFirstPojo={firstPojo=[Document:  No DOCTYPE declaration, Root is [Element: <ns1:value [Namespace: http://weird.connectors.bf.fractal.objectweb.org/]/>]]}}
","java version ""1.5.0_16""
Java(TM) 2 Runtime Environment, Standard Edition (build 1.5.0_16-b06-277)
Java HotSpot(TM) Client VM (build 1.5.0_16-130, mixed mode, sharing)
Mac OSX 10.5.6",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-01-30 22:08:31.735,,,no_permission,,Unknown,,,,,,,,,,,112692,,,Mon Feb 02 10:39:03 UTC 2009,,,,,,0|i1adin:,268656,,,,,,,,"30/Jan/09 14:15;vschiavoni;The linked issue seems to be linked, at least by looking at the kind of parameter passed to the method.","30/Jan/09 22:08;bmargulies;Something has decided to map your complex type to the DOM, and deliver a type-safety-violating collection. How Interesting.","30/Jan/09 22:25;bmargulies;This is going to take some work.

Java5TypeCreator.getOrCreateParameterizedType is punting the detailed info on the inner type, and just taking it to be a generic 'Map'. That's not going to work, but it will take some doing to unconfuse it.","30/Jan/09 23:42;bmargulies;This turns out to be a simple matter of forgetting that not all collections (e.g. Map) inherit from Collection. All done on trunk, hopefully Dan will migrate to 2.1.4.
",01/Feb/09 17:05;vschiavoni;I'd be glad to test it with a snapshot release (possibly 2.1.4-snapshot). When you say trunk you mean 2.2 ?,"01/Feb/09 19:25;bmargulies;I expect someone to push it to 2.1.4. 

It I have time today I'll push out a 2.2 snapshot for you to try.","02/Feb/09 05:42;njiang;Done , it should be a part of CXF 2.1.4-snapshot :).",02/Feb/09 07:57;vschiavoni;I guess it takes sometimes before the snapshot is available through the repositories...right?,"02/Feb/09 08:04;njiang;Yes, if you can't wait, you can check out the code from http://svn.apache.org/repos/asf/cxf/branches/2.1.x-fixes
and run ""mvn clean install -Pfastinstall"" from the root.

","02/Feb/09 10:38;vschiavoni;cool, it works fine now. thanks !",02/Feb/09 10:39;vschiavoni;closed ,,,,,,,,,,,,,,,,,,,,
@Path fails when uses variable with regexp containing curly braces.,CXF-2014,12413563,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,amichalec,amichalec,amichalec,29/Jan/09 21:34,14/Apr/09 17:59,14/Mar/19 02:29,14/Apr/09 17:51,2.2,,,,,,,,,,,,,,2.2.1,,,,JAX-RS,,,,,,0,,,,"According to JAX-RS spec 1.0 one can use @Path annotation that specifies regular expression to match variable content. Most of regexps work fine e.g. @Path(""{var:[a-zA-Z]+}""), however use of curly braces in regexp causes failure of JAX-RS in runtime e.g. this @Path(""{var:\d{2,}}"") fails.
From first look on URITemplate class responsible for URI regexps, its internal matcher treats first closing curly brace as ending of whole expression.

cheers,
andy",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112689,,,Tue Apr 14 17:51:38 UTC 2009,,,,,,0|i14etr:,233865,,,,,,,,14/Apr/09 17:51;amichalec;Fixed in URITemplate implementation.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JMS Transport: Invalid temporary destination when using Tibco ems and temporary reply queue,CXF-2008,12413418,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,chris@die-schneider.net,chris@die-schneider.net,chris@die-schneider.net,27/Jan/09 22:14,11/Oct/10 15:08,14/Mar/19 02:29,23/Sep/09 07:36,2.1.3,,,,,,,,,,,,,,2.2.11,2.3,,,Transports,,,,,,0,,,,"When using the JMS Transport with Tibco EMS and using a temporary reply destination the following exception is thrown on the CXF client.
The problem was reported by Ed Scriven.

See also:
http://www.nabble.com/JAX-WS-CXF-with-Tibco-JMS-to21584686.html

org.springframework.jms.InvalidDestinationException: Invalid temporary destination; nested exception is javax.jms.InvalidDestinationException: Invalid temporary destination
	at org.springframework.jms.support.JmsUtils.convertJmsAccessException(JmsUtils.java:261)
	at org.springframework.jms.support.JmsAccessor.convertJmsAccessException(JmsAccessor.java:168)
	at org.springframework.jms.core.JmsTemplate.execute(JmsTemplate.java:474)
	at org.springframework.jms.core.JmsTemplate.send(JmsTemplate.java:539)
	at org.apache.cxf.transport.jms.JMSDestination.sendExchange(JMSDestination.java:227)
	at org.apache.cxf.transport.jms.JMSOutputStream.doClose(JMSOutputStream.java:56)
	at org.apache.cxf.io.CachedOutputStream.close(CachedOutputStream.java:167)
	at org.apache.cxf.transport.AbstractConduit.close(AbstractConduit.java:66)
	at org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor.handleMessage(MessageSenderInterceptor.java:62)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:220)
	at org.apache.cxf.interceptor.AbstractFaultChainInitiatorObserver.onMessage(AbstractFaultChainInitiatorObserver.java:96)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:260)
	at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:78)
	at org.apache.cxf.transport.jms.JMSDestination.onMessage(JMSDestination.java:176)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:531)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:466)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:435)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:322)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:260)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:944)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:868)
	at java.lang.Thread.run(Thread.java:619)
Caused by: javax.jms.InvalidDestinationException: Invalid temporary destination
	at com.tibco.tibjms.Tibjmsx.buildException(Tibjmsx.java:508)
	at com.tibco.tibjms.TibjmsxSessionImp._createProducer(TibjmsxSessionImp.java:908)
	at com.tibco.tibjms.TibjmsxSessionImp.createProducer(TibjmsxSessionImp.java:4280)
	at org.springframework.jms.core.JmsTemplate.doCreateProducer(JmsTemplate.java:969)
	at org.springframework.jms.core.JmsTemplate.createProducer(JmsTemplate.java:950)
	at org.springframework.jms.core.JmsTemplate.doSend(JmsTemplate.java:568)
	at org.springframework.jms.core.JmsTemplate$3.doInJms(JmsTemplate.java:541)
	at org.springframework.jms.core.JmsTemplate.execute(JmsTemplate.java:471)
	... 19 more","Windows Vista, Java 1.6.0-update 10, Tibco EMS 4.4.2",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112686,,,Wed Nov 25 10:45:50 UTC 2009,,,,,,0|i13yfj:,231208,,,,,,,,"29/Jan/09 07:45;chris@die-schneider.net;I was able to reproduce the exception with my own configuration. The exception happens if the TibJmsConnectionFactory is not wrapped into a SingleConnectionFactory.  The request comes in with a temporary queue as reply to destination. When the ConnectionFactory is not wrapped then spring opens a new Connection which will not be allowed to access the temporary queue.  When the connection is wrapped the same connection is used and so it may use the temporary queue. 

As Ed is using the old style configuration it seems that there must be an error in JmsOldConfigHolder where the wrapping should be done.
A fast workaround is to use the new config style and do the wrapping yourself. I will try to solve this before cxf 2.1.4.
",01/Feb/09 22:25;chris@die-schneider.net;Cannot reproduce the error with old style configuration. So I move this to the next release to not delay 2.1.4,23/Sep/09 07:36;chris@die-schneider.net;Problem did not occur anymore,25/Nov/09 10:45;chris@die-schneider.net;I could reproduce the problem with CXF 2.2.4 and Tibco EMS 4.3.0. I found that updating Tibco EMS to Version >= 4.4.1  solved the problem.,,,,,,,,,,,,,,,,,,,,,,,,,,,
JAXBSource can't be used as Source from a JAX-WS Provider interface,CXF-2007,12413370,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,angelini,angelini,27/Jan/09 12:17,09/Feb/09 22:20,14/Mar/19 02:29,27/Jan/09 20:07,2.1.3,,,,,,,,,,,,,,2.1.4,,,,,,,,,,0,,,,"I'm using CXF through the JAX-WS Provider interface. I set the  
parametric parameter of the interface to javax.xml.transform.Source.

All works well if I return from the method ""invoke"" an object of type  
DOMSource, but when I return a JAXBSource object
I receive an error.

A simple test case can be found at the URL: http://zeus.pin.unifi.it/angelini/cxf-test.tar.bz2

It can be simply run with a command like: mvn jetty:run

WSDL can be accessed through: http://localhost:9090/test-cxf/","MacOS 10.5, Java 5, Jetty 7",,,,,,,,,,,,,,,,27/Jan/09 13:37;angelini;cxf-test.tar.bz2;https://issues.apache.org/jira/secure/attachment/12398812/cxf-test.tar.bz2,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,50353,,,2009-01-27 12:17:39.0,,,,,,0|i0v153:,179158,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Missing type in generated WSDL part definition when using int[] arrays with RPC/Literal encoding,CXF-2005,12413255,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,dkulp,pierrepost,pierrepost,26/Jan/09 13:19,09/Feb/09 22:20,14/Mar/19 02:29,26/Jan/09 17:42,2.1.3,,,,,,,,,,,,,,2.1.4,,,,,,,,,,0,,,,"CXF seems to generate an incorrect WSDL when using operations with int[] array parameters in web services using the RPC/Literal encoding. The following code

@WebService(name=""MathService"", targetNamespace=""http://test.backoffice.ciss.lu/service"")
@SOAPBinding(style=SOAPBinding.Style.RPC, use=SOAPBinding.Use.LITERAL)
public interface MathService {
    
    @WebMethod(operationName=""ConvertToString"")
    @WebResult(name=""stringNumbers"")
    public String[] convertToString(@WebParam(name=""intNumbers"") int[] numbers);
}

generates the WSDL code (extract):

<wsdl:types>
	<xs:schema attributeFormDefault=""unqualified"" elementFormDefault=""unqualified"" targetNamespace=""http://jaxb.dev.java.net/array"" xmlns=""http://jaxb.dev.java.net/array"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"">
    	<xs:complexType final=""#all"" name=""stringArray"">
        	<xs:sequence>
            	<xs:element maxOccurs=""unbounded"" minOccurs=""0"" name=""item"" nillable=""true"" type=""xs:string""></xs:element>
        	</xs:sequence>
    	</xs:complexType>
	</xs:schema>
</wsdl:types>

<wsdl:message name=""ConvertToString"">
	<wsdl:part name=""intNumbers"">
	</wsdl:part>
</wsdl:message>
<wsdl:message name=""ConvertToStringResponse"">
	<wsdl:part name=""stringNumbers"" type=""ns1:stringArray"">
    </wsdl:part>
</wsdl:message>

As you can see, the type information is missing in the first <wsdl:part> tag. The incorrect WSDL obviously produces errors, e.g. when generating the client using the wsdl2java tool:

Loading FrontEnd jaxws ...
Loading DataBinding jaxb ...
wsdl2java -client -verbose http://localhost:8080/CISS_BackOfficeTemplate/services/MathService?wsdl
wsdl2java - Apache CXF 2.1.3


WSDLToJava Error:
 Summary:  Failures: 1, Warnings: 0

 <<< ERROR!
The part does not have a type defined. Every part must specify a type from some
type system. The type can be specified using the built in element or type attrib
utes or may be specified using an extension attribute.



org.apache.cxf.tools.common.ToolException:
 Summary:  Failures: 1, Warnings: 0

 <<< ERROR!
The part does not have a type defined. Every part must specify a type from some
type system. The type can be specified using the built in element or type attrib
utes or may be specified using an extension attribute.


        at org.apache.cxf.tools.validator.internal.WSDL11Validator.isValid(WSDL11Validator.java:136)
        at org.apache.cxf.tools.wsdlto.frontend.jaxws.wsdl11.JAXWSDefinitionBuilder.validate(JAXWSDefinitionBuilder.java:201)
        at org.apache.cxf.tools.wsdlto.frontend.jaxws.wsdl11.JAXWSDefinitionBuilder.validate(JAXWSDefinitionBuilder.java:61)
        at org.apache.cxf.tools.wsdlto.WSDLToJavaContainer.execute(WSDLToJavaContainer.java:133)
        at org.apache.cxf.tools.wsdlto.WSDLToJavaContainer.execute(WSDLToJavaContainer.java:232)
        at org.apache.cxf.tools.common.toolspec.ToolRunner.runTool(ToolRunner.java:83)
        at org.apache.cxf.tools.wsdlto.WSDLToJava.run(WSDLToJava.java:103)
        at org.apache.cxf.tools.wsdlto.WSDLToJava.main(WSDLToJava.java:173)

The error does not occur when using the (default) Document/Literal encoding or when using Integer[] arrays or List<Integer>. It is possible that the error exists with other primitive types (long, double, etc.) but I haven't tested them.","java version ""1.6.0_11"", apache-cxf-2.1.3 (with asm-2.2.3)",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,50354,,,2009-01-26 13:19:53.0,,,,,,0|i1adjj:,268660,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java2ws plugin generating exception beans when they already exist in classpath,CXF-2001,12413094,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,wgomes,wgomes,23/Jan/09 15:06,09/Feb/09 22:20,14/Mar/19 02:29,26/Jan/09 21:14,,,,,,,,,,,,,,,2.1.4,,,,Tooling,,,,,,0,,,,"When running the java2ws goal for the plugin during the process-classes step, it always generates the exception beans even if they already exist in the classpath.  The request/response wrapper beans are only generated for the missing wrappers (ie. for those not already in the claspath). Exception bean generation should behave similarly. ",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,50356,,,2009-01-23 15:06:48.0,,,,,,0|i1adjz:,268662,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ReadHeadersInterceptor ignoring DataBinding when creating SoapHeader,CXF-2000,12413087,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,pliljenberg@gmail.com,pliljenberg@gmail.com,23/Jan/09 12:13,09/Feb/09 22:19,14/Mar/19 02:29,23/Jan/09 18:07,2.1.2,,,,,,,,,,,,,,2.0.10,2.1.4,,,Soap Binding,,,,,,0,,,,"We tried to use soapheaders by adding a HeaderProcessor. When looking at the CXF code (2.1.2) we find this in ReadHeadersInterceptor:

  HeaderProcessor p = bus.getExtension(HeaderManager.class)
                                .getHeaderProcessor(hel.getNamespaceURI());

 Object obj;
DataBinding dataBinding = null;
if (p == null || p.getDataBinding() == null) {
  obj = node;
} else {
   obj = p.getDataBinding().createReader(Node.class).read(node);
}
//TODO - add the interceptors
SoapHeader shead = new SoapHeader(new QName(node.getNamespaceURI(),node.getLocalName()), obj, dataBinding);

This looks like a bug to me.

Should the dataBinding that is extraced be used when constructing the SoapHeader instead of ALWAYS be null. I'm just guessing but shouldn't it look like this:

} else {
   dataBinding = p.getDataBinding();
   obj = dataBinding.createReader(Node.class).read(node); 


http://www.nabble.com/Bug-in-ReadHeadersInterceptor--td21621240.html",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,50357,,,2009-01-23 12:13:43.0,,,,,,0|i0v1dj:,179196,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HTTP conduit configuration is not loaded when not using Spring,CXF-1999,12413006,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,night.kame,night.kame,22/Jan/09 16:26,24/Apr/09 21:17,14/Mar/19 02:29,31/Mar/09 15:08,2.0.9,,,,,,,,,,,,,,2.0.11,2.1.5,2.2.1,,,,,,,,0,,,,"Removing Spring, the default configuration is not loaded anymore with the JaxWS FrontEnd.

Code:
Service service = Service.create(SERVICE);
service.addPort(PORT, SOAPBinding.SOAP11HTTP_BINDING, url);
client = service.getPort(PORT, TheService.class);
HTTPConduit httpConduit = (HTTPConduit) cProxy.getClient().getConduit(); <-- Exception

java.lang.RuntimeException: Could not find conduit initiator for transport http://schemas.xmlsoap.org/soap/http
	at org.apache.cxf.binding.soap.SoapTransportFactory.getConduit(SoapTransportFactory.java:148)
	at org.apache.cxf.endpoint.AbstractConduitSelector.getSelectedConduit(AbstractConduitSelector.java:73)
	at org.apache.cxf.endpoint.UpfrontConduitSelector.selectConduit(UpfrontConduitSelector.java:71)
	at org.apache.cxf.endpoint.ClientImpl.getConduit(ClientImpl.java:448)",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112683,,,Thu Jan 22 17:18:26 UTC 2009,,,,,,0|i1adk7:,268663,,,,,,,,"22/Jan/09 17:18;night.kame;Workaround as seen here: http://code.google.com/p/xebia-france/source/browse/trunk/messaging/messaging-demo/pom.xml?r=74

add cxf-rt-transports-http-jetty.ar to the classpath, even when not using Jetty or having Jetty in the classpath.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE on JAXWS service initialization,CXF-1996,12412976,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,asoldano,opalka,opalka,22/Jan/09 09:56,03/Aug/09 20:06,14/Mar/19 02:29,24/Jul/09 15:20,2.1.3,,,,,,,,,,,,,,2.1.6,2.2.3,,,JAX-WS Runtime,,,,,,1,,,,"We're getting the below NPE with CXF 2.1.3.
It is related to CXF internal initialization.
The problematic code is in ReflectionServiceFactoryBean in method

protected boolean initializeClassInfo(OperationInfo o, Method method, List<String> paramOrder) {
   if (isWrapped(method)) {
      if (o.getUnwrappedOperation() == null) {
         //the ""normal"" algorithm didn't allow for unwrapping,
         //but the annotations say unwrap this.   We'll need to
         //make it.
         WSDLServiceBuilder.checkForWrapped(o, true); // Inside of this code RULE no.2 fails and thus unwrapper operation isn't set at all
      }
      ...
      o = o.getUnwrappedOperation(); // HERE the o variable is set to NULL
   } else if (o.isUnwrappedCapable()) {
      ...
   }
   o.setProperty(METHOD_PARAM_ANNOTATIONS, method.getParameterAnnotations()); // HERE we're getting NPE because o was set to null
   ...
}

We're attaching also web service archive to reproduce the problem.
This is the exception we're facing:

10:51:19,151 ERROR [[/jaxws-jbws2150]] StandardWrapper.Throwable
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'ValidSecureService': Invocation of init method failed; nested exception is javax.xml.ws.WebServiceException: java.lang.NullPointerException
Caused by: 
javax.xml.ws.WebServiceException: java.lang.NullPointerException
	at org.apache.cxf.jaxws.EndpointImpl.doPublish(EndpointImpl.java:267)
	at org.apache.cxf.jaxws.EndpointImpl.publish(EndpointImpl.java:201)
	at org.apache.cxf.jaxws.EndpointImpl.publish(EndpointImpl.java:394)
	at sun.reflect.GeneratedMethodAccessor191.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:1242)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1208)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1172)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:427)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:249)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:155)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:246)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:160)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:291)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:352)
	at org.jboss.wsf.stack.cxf.CXFServletExt.loadAdditionalConfigExt(CXFServletExt.java:124)
	at org.jboss.wsf.stack.cxf.CXFServletExt.loadBus(CXFServletExt.java:101)
	at org.apache.cxf.transport.servlet.AbstractCXFServlet.init(AbstractCXFServlet.java:91)
	at org.jboss.wsf.stack.cxf.CXFServletExt.init(CXFServletExt.java:73)
	at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1161)
	at org.apache.catalina.core.StandardWrapper.allocate(StandardWrapper.java:806)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:129)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:175)
	at org.jboss.web.tomcat.security.SecurityAssociationValve.invoke(SecurityAssociationValve.java:182)
	at org.jboss.web.tomcat.security.JaccContextValve.invoke(JaccContextValve.java:84)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)
	at org.jboss.web.tomcat.service.jca.CachedConnectionValve.invoke(CachedConnectionValve.java:157)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:262)
	at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:844)
	at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583)
	at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:446)
	at java.lang.Thread.run(Thread.java:595)
Caused by: java.lang.NullPointerException
	at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.initializeClassInfo(ReflectionServiceFactoryBean.java:604)
	at org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean.initializeWSDLOperation(JaxWsServiceFactoryBean.java:238)
	at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.initializeWSDLOperations(ReflectionServiceFactoryBean.java:524)
	at org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean.initializeWSDLOperations(JaxWsServiceFactoryBean.java:247)
	at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.buildServiceFromWSDL(ReflectionServiceFactoryBean.java:316)
	at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.initializeServiceModel(ReflectionServiceFactoryBean.java:408)
	at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.create(ReflectionServiceFactoryBean.java:189)
	at org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean.create(JaxWsServiceFactoryBean.java:164)
	at org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory.createEndpoint(AbstractWSDLBasedEndpointFactory.java:100)
	at org.apache.cxf.frontend.ServerFactoryBean.create(ServerFactoryBean.java:117)
	at org.apache.cxf.jaxws.JaxWsServerFactoryBean.create(JaxWsServerFactoryBean.java:168)
	at org.apache.cxf.jaxws.EndpointImpl.getServer(EndpointImpl.java:336)
	at org.apache.cxf.jaxws.EndpointImpl.doPublish(EndpointImpl.java:251)
	... 34 more
10:51:19,152 ERROR [[ValidService]] Allocate exception for servlet ValidService
java.lang.NullPointerException
	at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.initializeClassInfo(ReflectionServiceFactoryBean.java:604)
	at org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean.initializeWSDLOperation(JaxWsServiceFactoryBean.java:238)
	at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.initializeWSDLOperations(ReflectionServiceFactoryBean.java:524)
	at org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean.initializeWSDLOperations(JaxWsServiceFactoryBean.java:247)
	at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.buildServiceFromWSDL(ReflectionServiceFactoryBean.java:316)
	at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.initializeServiceModel(ReflectionServiceFactoryBean.java:408)
	at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.create(ReflectionServiceFactoryBean.java:189)
	at org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean.create(JaxWsServiceFactoryBean.java:164)
	at org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory.createEndpoint(AbstractWSDLBasedEndpointFactory.java:100)
	at org.apache.cxf.frontend.ServerFactoryBean.create(ServerFactoryBean.java:117)
	at org.apache.cxf.jaxws.JaxWsServerFactoryBean.create(JaxWsServerFactoryBean.java:168)
	at org.apache.cxf.jaxws.EndpointImpl.getServer(EndpointImpl.java:336)
	at org.apache.cxf.jaxws.EndpointImpl.doPublish(EndpointImpl.java:251)
	at org.apache.cxf.jaxws.EndpointImpl.publish(EndpointImpl.java:201)
	at org.apache.cxf.jaxws.EndpointImpl.publish(EndpointImpl.java:394)
	at sun.reflect.GeneratedMethodAccessor191.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:1242)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1208)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1172)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:427)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:249)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:155)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:246)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:160)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:291)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:352)
	at org.jboss.wsf.stack.cxf.CXFServletExt.loadAdditionalConfigExt(CXFServletExt.java:124)
	at org.jboss.wsf.stack.cxf.CXFServletExt.loadBus(CXFServletExt.java:101)
	at org.apache.cxf.transport.servlet.AbstractCXFServlet.init(AbstractCXFServlet.java:91)
	at org.jboss.wsf.stack.cxf.CXFServletExt.init(CXFServletExt.java:73)
	at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1161)
	at org.apache.catalina.core.StandardWrapper.allocate(StandardWrapper.java:806)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:129)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:175)
	at org.jboss.web.tomcat.security.SecurityAssociationValve.invoke(SecurityAssociationValve.java:182)
	at org.jboss.web.tomcat.security.JaccContextValve.invoke(JaccContextValve.java:84)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)
	at org.jboss.web.tomcat.service.jca.CachedConnectionValve.invoke(CachedConnectionValve.java:157)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:262)
	at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:844)
	at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583)
	at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:446)
	at java.lang.Thread.run(Thread.java:595)
",Platform independent bug,,,,,,,,,,,,,,,,22/Jan/09 09:58;opalka;cxf-descriptor.xml;https://issues.apache.org/jira/secure/attachment/12398452/cxf-descriptor.xml,22/Jan/09 09:58;opalka;jaxws-jbws2150.war;https://issues.apache.org/jira/secure/attachment/12398451/jaxws-jbws2150.war,,,,,2.0,,,,,,,,,,,,,,,,,,,,2009-07-24 15:20:32.653,,,no_permission,,,,,,,,,,,,,112681,,,Fri Jul 24 15:20:32 UTC 2009,,,,,,0|i14du7:,233705,,,,,,,,22/Jan/09 09:58;opalka;Service archive,22/Jan/09 09:58;opalka;CXF descriptor,"22/Jan/09 10:04;opalka;The easiest way to reproduce the issue is to download JBossWS CXF 3.0.5 integration release available here: http://www.jboss.org/file-access/default/members/jbossws/downloads/jbossws-cxf-3.0.5.GA.zip
Unzip it.
Follow installation instructions.
Once your JBoss is up and running with included CXF integration just copy the attached war file to server/default/deploy and hotdeployer scanner will pick it up and deploy.
Once the archive is deployed, just ping the following URL in your favourite browser: http://127.0.0.1:8080/jaxws-jbws2150/InvalidURL?wsdl",24/Jul/09 15:20;asoldano;Done.,,,,,,,,,,,,,,,,,,,,,,,,,,,
"cxf tools should honor ""java.home"" property to search javac for compiling generated java beans.",CXF-1992,12412726,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,xiaming,xiaming,19/Jan/09 07:21,09/Feb/09 22:20,14/Mar/19 02:29,19/Jan/09 20:17,2.1.3,,,,,,,,,,,,,,2.1.4,,,,,,,,,,0,,,,"When I am using cxf tools to generate web service artifacts, if choosing to compile generated java beans, my system initially shown me a error msg like this:
""Syntax error, annotations are only available if source level is 5.0""

After studying for a while, found out it's caused by incorrect javac used for compilation.

Current cxf tooling Compiler.java assume to use the ""javac"" on the PATH variable, it doesn't honor JAVA_HOME setting when setted for excuting cxf tools.

I think it might be better to check to use ""javac"" in the JAVA_HOME path, then use the one in the PATH variable.

Make sense?
","jdk 1.6
ubuntu 8.04",,,,,,,,,,,,,,GERONIMO-4481,,19/Jan/09 07:35;xiaming;cxf-1992.patch;https://issues.apache.org/jira/secure/attachment/12398209/cxf-1992.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2009-01-19 20:17:20.354,,,no_permission,,,,,,,,,,,,,50359,,,Mon Jan 19 20:17:20 UTC 2009,,,,,,0|i0v1af:,179182,,,,,,,,19/Jan/09 07:35;xiaming;a patch to honor java.home to use the javac in it. Please review and help commit. thanks!,"19/Jan/09 07:45;xiaming;the same code applied to cxf trunk Compiler.java, thanks!","19/Jan/09 20:17;dkulp;Patch applied.   Thanks!
",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incomplete implementations of UriInfo and UriBuilder,CXF-1991,12412718,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,sergey_beryozkin,amichalec,amichalec,19/Jan/09 01:35,09/Feb/09 22:20,14/Mar/19 02:29,02/Feb/09 16:01,2.1.3,2.2,,,,,,,,,,,,,2.1.4,2.2,,,JAX-RS,,,,,,0,,,,"Some useful methods like UriBuilder.path(Class), UriBuilder.path(Method) or UriInfo.getMatchedResources() are not implemented so far.

Since I am have my locally tuned versions of these classes I am going to provide patch soon :)

cheers,
andy.",,,,,,,,,,,,,,,,,21/Jan/09 00:15;amichalec;cxf-1991_20090121.patch;https://issues.apache.org/jira/secure/attachment/12398355/cxf-1991_20090121.patch,28/Jan/09 23:44;amichalec;cxf-1991_20090128.patch;https://issues.apache.org/jira/secure/attachment/12398947/cxf-1991_20090128.patch,02/Feb/09 00:45;amichalec;cxf-1991_20090201.patch;https://issues.apache.org/jira/secure/attachment/12399254/cxf-1991_20090201.patch,,,,3.0,,,,,,,,,,,,,,,,,,,,2009-01-19 10:31:47.063,,,no_permission,,,,,,,,,,,,,50360,,,Mon Feb 02 19:19:50 UTC 2009,,,,,,0|i1472f:,232608,,,,,,,,"19/Jan/09 10:31;sergey_beryozkin;The patch will be welcomed :-) - take your time please. 

","19/Jan/09 17:33;amichalec;I have working set of UriInfo.getMatched*() methods that cooperate with JAXRSInvoker to access to runtime stack of ORIs. I want to also build unit tests for them to solidify code. From short review however I found only unit tests statically using Book/BookStore/etc samples. Is there any good approach to bootstrap JAXRSserver for such cases? Maybe I;ve just overlooked already existing unit tests. Code snippets, or advice appreciated :) (use priv email if preferred)

cheers,
andy","19/Jan/09 18:08;sergey_beryozkin;Hi Andy

Can you please update your code to interact with a Message instance instead ? I'd prefer to have JAXRS impl classes be unaware of things like JAXRSInvoker...For ex, we might let people to provide custom invoker implementations, similarly to JAXWS runtime. Rather than having UriInfo be aware of JAXRSInvoker, it would check a message instead, this is a typical pattern in CXF.
For example, in JAXRSInvoker, before an invocation/injection is done, do something like :

message.put(""MATCHED_OPERATIONS"", oris);

and then in UriInfo you'll do message.get();

At the moment there's no central place for keeping key definitions like MATCHED_OPERATIONS, some of them are kept in JAXRSInInterceptor which is really a wrong place for then. Perhaps it's time to inroduce some JAXRSConstants class.

This way, you can just add some test into JAXRSUtilsTest, or create a new test suite altogether and work with a Message(Impl) only.

In system tests once cam also bootstrap a server, either programmatically or from Spring. See systests/.../jaxrs/JAXRSClientServerBookTest for an example of the former approach and other tests for the example of the latter one


Cheers, Sergey","19/Jan/09 21:11;amichalec;Hi Sergey,
I was aware of decoupling them and indeed they are already done similar way: JAXRSInvoker recursivelly put on stack ORIs and the stack itself is register insinde inbound Message (uder key being stack's class object; same as other objects, it's mimics of surrounding code doing things this way). From UriInfoImpl side it can extracts stack from Message already passed through constructor -- from this perspective no other changes are introduces on the way from JAXRSInvoker to UriInfoImpl. 

I could not find better point of stack generation that invoker itself, since invoker is responsible for lookup for resources -- what's your suggestion? Where is other control point to put ORI on stack?

Or maybe let me finish this unit of work and once patch is submitted you can help me improving it :)

cheers,
andy.","19/Jan/09 22:12;sergey_beryozkin;Hi Andy,

Ok, thanks, it sounds good. So you might want to add a unit test to UriInfoImplTest, and some system test - you might want to update the existing one...

JAXRSInvoker is probably the best place indeed - but as you said - lets get the first implementation and then we'll see where things can be improved

thanks, Sergey ","20/Jan/09 00:37;amichalec;While I can run unit tests from Eclipse, I see problems with systests (CreateProcess fails due to too long command line, yeah Windows box). If I have to run it maven for it, is there any magic spell to run tests only on JAXRS part?

cheers,
andy","20/Jan/09 09:39;sergey_beryozkin;You can do

mvn test -Dtest=JAXRS*

two tests won't not picked up - AtomClientBookTest and JaxRsJaxWsBookTest - I'll need to rename them so that they start from JAXRS* too. Also, JAXRSContinuations test fails when running with this pattern at init time, for some reasons a private static JAXRSContinuations.BookWorker class is deemed to be a test class... 

I've seen CreateProcess failures too on Windows. When it happens I just rerun 'mvn -Peclipse.setup' and then refresh the workspace - and I reckon it actually helps...

Cheers, Sergey","20/Jan/09 23:31;amichalec;OK, I am very close to get stable state (source + unit test + system tests) however I found some weird behavior of current UriBuilderImpl code that impacts new code behavior:

I am not sure what is expected behavior when one of interior path elements has trailing slash (here: ""baz/""). It leads to failure of this new test case:

public class UriBuilderImplTest {
    @Test
    public void testAddPathSlashes() throws Exception {
        URI uri = new URI(""http://foo/"");
        URI newUri = new UriBuilderImpl().uri(uri).path(""/bar"").path(""baz/"").path(""/blah/"").build();
        assertEquals(""URI is not built correctly"", new URI(""http://foo/bar/baz/blah""), newUri);
    }
}

UriBuilderImpl  produces here double slash after ""baz"". It is because internally JAXRSUtils.getPathSegments(String) distinguishes trailing slash and generates empty path segment -- and I am not sure why, since JAX-RS spec says leading/trailing slashes are meaningless, only correct path segments separation is important. Any ideas?

cheers,
andy.","20/Jan/09 23:34;amichalec;Forgot show message: 
java.lang.AssertionError: URI is not built correctly expected:<http://foo/bar/baz/blah> but was:<http://foo/bar/baz//blah/>

there is also trailing slash for ""blah/"" I guess reason is the same. One could normalize URI but it's not the case here (or it is?).

cheers,
andy.","21/Jan/09 00:15;amichalec;Here goes my first patch in this thread (see 'cxf-1991_20090121.patch' attachment) with following notes:
* Formatting led to more content in patch (removal of trailing blanks etc)
* Please double check, could not run full tests on my Windows box (see this discussion: http://www.nabble.com/Failures-of-unit-tests-on-2.2-snapshot-td21506655.html)
* UriBuilderImpl has now complete set of path() methods, some are still not implemented (comming soon I hope); problem with trailing- and double-slashes described earlier is marked as ""fixme"".
* UriInfoImpl serves now runtime stack informatin -- see getMatched*() methods

cheers,
andy","21/Jan/09 09:57;sergey_beryozkin;Hi Andy

Many thanks for this effort. I'll try to apply the patch asap.
As far as your test is concerned :

URI newUri = new UriBuilderImpl().uri(uri).path(""/bar"").path(""baz/"").path(""/blah/"").build();
assertEquals(""URI is not built correctly"", new URI(""http://foo/bar/baz/blah""), newUri); 

java.lang.AssertionError: URI is not built correctly expected:<http://foo/bar/baz/blah> but was:<http://foo/bar/baz//blah/> 

I think the last trailing slash in ""http://foo/bar/baz//blah/"" is actually correct., but there's a bug for 'baz//'.
The last trailing slash can make a difference in matching, for ex

@Path(""/bar"") void bar() {}
@Path(""/bar/"") void bar2() {}

/bar/ will match both methods, but bar2() will be chosen as the @Path value has more literal characters (candidates are sorted in descending order for this criteria)


","22/Jan/09 15:18;sergey_beryozkin;Hi Andy,

I applied the patch with FixMe tests fixed, thanks again.
Would you like me to close this JIRA or are you thinking of submitting another patch for UriBuilderImpl ? UriInfo implementation is now complete

Cheers, Sergey","22/Jan/09 16:29;amichalec;I am working to complete UriBuilderImpl so please keep this issue opened for a while. I will update my svn copy and commit second final patch for this thread.

cheers,
andy.","28/Jan/09 23:44;amichalec;Here goes next patch 'cxf-1991_20090128.patch' ready to apply on today's head svn revision:
* set of UriBuilder.build*() methods now fully respect current JAX-RS 1.0 spec
* URITemplate was extended with template substitution
Some methods are still TBD - matrix and query parameters; hope I can get there with 3rd and last patch as soon as I got some more clarification from jsr311 users group:)

Sergey, BTW I've found also that URITemplate does not hold when playing with complex regexp for variables matching: simple ones like ""{var:\d\d}"" are ok but with ""{var:.*}"" it regexp compilation fails.

cheers,
andy.","29/Jan/09 14:41;sergey_beryozkin;This is awesome. Will take care of applying the send patch now. 

> Sergey, BTW I've found also that URITemplate does not hold when playing with complex regexp for variables matching: 
> simple ones like ""{var:\d\d}"" are ok but with ""{var:.*}"" it regexp compilation fails. 

I have a test for expressions like ""/{base:base.+}/{tail}"", ""/books/{bookId:[^/]+?}"", ""/books/{bookId:...\\.}"" plus few others;
I do know that one can't do expressions with '{' and '}', like {var:\d{9}}, one needs to do \d 9 times, I didn't have time to make it rock solid, so looks like a '*' gets into that category.
Can you open a JIRA please if you get a chance ? 
 
Thanks, Sergey","29/Jan/09 21:41;amichalec;Done - see CXF-2014
BTW example with {var:.*} works fine, my bad. The only problem are curly braces ;)

cheers,
andy.",29/Jan/09 21:55;sergey_beryozkin;thanks Andy ... I'll get it fixed,"02/Feb/09 00:45;amichalec;And here goes final patch:
* all *query*() methods were fixed due to lack of respect for valid ""single param name with multiple values"" case (supporting junits added too).
* all *matrix*() methods for matrix params manipulation with same rules as for query URI part (note ability to have ""single param with multiple values"" due to discussion on jsr311 users group).

Note: I've not changed default behavior of many methods that strip matrix params from path segments keeping matrix management separated. Examples:
* building URI from ""http://foo;p1=v1/bar"" results with ""http://foo/bar"" -- this is ok for me since matrix params should appear only in final path segment
* adding path ""/bar;p1=v1"" to ""http://foo"" causes build() to return ""http://foo/bar"" - user must explicitly add matrix param in next step(s).

Sergey, if you do not find any problems with patch, feel free to close this thread.

cheers,
andy.
","02/Feb/09 10:31;sergey_beryozkin;Hi Andy - it's a great effort. I'll apply a patch.

I'll keep the issue open for a bit longer though. First, I reckon we actually should not strip matrix params as the spec supports them being located at any path segment - so I can get the code updated , unless you get a chance to revisit this issue at some time - let me know please.  I'll also need to fix the issue I've talked about on the cxf-dev list, for UriInfo.getMatchedURI()

Many Thanks 
Sergey","02/Feb/09 11:11;amichalec;Hi Sergey, 
I was following spec's javadoc pointing to this note: http://www.w3.org/DesignIssues/MatrixURIs.html. 
JAX-RS spec seems to explicitly point to doc that discusses only subset of implicitly required functionality.
I agree matrix param could be located at any segment; UriBuilder could modify only *current* path segment like this:

new UriBuilderImpl(""http://foo"").matrixParam(""p1"",""v1"").path(""bar"").matrixParam(""p2"",""v2""); 
// leads to:  http://foo;p1=v1/bar;p2=v2

I will try to find time to look at it, I need more time though ;)

cheers,
andy","02/Feb/09 14:10;sergey_beryozkin;Hi Andy - no problems at all - thanks for doing all the hard work

It's the use of @MatrixParam which is problematic in JAXRS. Specifically, it picks up the first matching parameter, irrespectively of what segment it belongs to, last one or some ancestor one. I believe the JAXRS maintenance spec will limit it to the last segment only. PathSegment can be used to analyze matrix params at any given segment...

I agree that the pattern you suggest makes sense, we just need to do one last minor tweak...

Cheers, Sergey","02/Feb/09 16:01;sergey_beryozkin;Hi Andy - I got the matrix issue fixed - hopefully you haven't started coding yet :-)
I updated buldPath() to get matrix parameters for all but the last segment added too, while 'matrix' map is still used as the last segment's matrix. When path(String) is called, the last existing segment, if any, gets updated with 'matrix', then matrix is cleared and gets updated from the newly added last segment

If you see any weakness in this solution then please let me know or submit a patch.

By the way - would you be interested in adding a short section to User Guide on how UriBuilder and UriInfo.getMatched* methods can be used ?

I'll update the TODO list on the wiki - very happy to see ""UriInfo & UriBuilder"" issue done.

Cheers, Sergey","02/Feb/09 17:46;amichalec;I can try, point me out where should I start and grant me access rights (I cannot start edit this page: http://cwiki.apache.org/confluence/display/CXF20DOC/JAX-RS+(JSR-311) ). 

cheers,
andy.","02/Feb/09 17:53;dkulp;
Andy,

We need an ICLA on file from you to be able to edit the wiki.    See the section ""Contributor License Agreements"" at:
http://www.apache.org/licenses/

(BTW: that is also the first step if voted in as a committer so if you are heading that way, it's a good thing to get done anyway.....   ;-)","02/Feb/09 19:19;amichalec;Ah, right.  It's done now: signed, scanned and sent back via email.

cheers,
andy.",,,,,,
"3 CTS tests,  invokeAsyncTest(for pojo, ejb and servlet) fail",CXF-1990,12412568,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,gawor@mcs.anl.gov,chaitanyak,chaitanyak,16/Jan/09 07:59,09/Feb/09 22:20,14/Mar/19 02:29,19/Jan/09 20:06,,,,,,,,,,,,,,,2.1.4,,,,JAX-WS Runtime,,,,,,0,,,,"CTS tests jaxws.ee.w2j.document.literal.async.client.invokeAsyncCallbackTest (for pojo, ejb and servlet client ) fail ocassionally.  The reason being....
	In the invokeAsync method of JaxWsClientProxy class, ClientCallbacks handleMessage method is overridden.  In this method first ClientCallbacks field done (boolean) is set to true and then handlers handleResponse(Response<?>) is called. In the CTS tests, if a ClientCallback.get() is called in between these two requests, a NullPointerException is thrown as the handlers state remains unchanged.
	
	Suggested Fix : synchronize the ClientCallbacks handleResponse in the JaxWsClientProxy.
	Also, ClientCallback class is a not thread safe so any state change should be done synchronously.",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-01-19 20:01:48.83,,,no_permission,,Moderate,,,,,,,,,,,50361,,,Mon Jan 19 20:06:03 UTC 2009,,,,,,0|i1adlj:,268669,,,,,,,,"19/Jan/09 20:01;dkulp;
I believe this is already fixed on trunk and on the 2.1.x branch (will be in 2.1.4).    The fix was to not allow the get call to return the value until the handlers have been called.    



","19/Jan/09 20:06;dkulp;
Fixed by jgawor in rev 724485",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Sub-resource locator fails on subtyping,CXF-1982,12412435,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,sergey_beryozkin,amichalec,amichalec,15/Jan/09 03:04,09/Feb/09 22:20,14/Mar/19 02:29,29/Jan/09 14:19,2.1.3,2.2,,,,,,,,,,,,,2.1.4,2.2,,,JAX-RS,,,,,,0,,,,"Attempt to use subresource locator with subtyping lead to following problem:

2009-01-15 03:31:28 org.apache.cxf.jaxrs.JAXRSServiceFactoryBean checkMethodDispatcher
WARNING: No resource methods found for resource class org.apache.cxf.jaxrs.model.ClassResourceInfo
2009-01-15 03:31:28 org.springframework.beans.factory.support.DefaultSingletonBeanRegistry destroySingletons
INFO: Destroying singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@1891d5d: defining beans [cxf,org.apache.cxf.bus.spring.BusApplicationListener,org.apache.cxf.bus.spring.BusWiringBeanFactoryPostProcessor,org.apache.cxf.bus.spring.Jsr250BeanPostProcessor,org.apache.cxf.bus.spring.BusExtensionPostProcessor,org.apache.cxf.resource.ResourceManager,org.apache.cxf.configuration.Configurer,org.apache.cxf.binding.BindingFactoryManager,org.apache.cxf.transport.DestinationFactoryManager,org.apache.cxf.transport.ConduitInitiatorManager,org.apache.cxf.wsdl.WSDLManager,org.apache.cxf.phase.PhaseManager,org.apache.cxf.workqueue.WorkQueueManager,org.apache.cxf.buslifecycle.BusLifeCycleManager,org.apache.cxf.endpoint.ServerRegistry,org.apache.cxf.endpoint.ServerLifeCycleManager,org.apache.cxf.endpoint.ClientLifeCycleManager,org.apache.cxf.transports.http.QueryHandlerRegistry,org.apache.cxf.endpoint.EndpointResolverRegistry,org.apache.cxf.headers.HeaderManager,org.apache.cxf.catalog.OASISCatalogManager,org.apache.cxf.endpoint.ServiceContractResolverRegistry,org.apache.cxf.transport.servlet.ServletTransportFactory,org.apache.cxf.jaxrs.JAXRSBindingFactory,jaxRsServer]; root of factory hierarchy
2009-01-15 03:31:28 org.springframework.web.context.ContextLoader initWebApplicationContext
SEVERE: Context initialization failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'jaxRsServer': Error setting property values; nested exception is org.springframework.beans.PropertyBatchUpdateException; nested PropertyAccessExceptions (1) are:
PropertyAccessException 1: org.springframework.beans.MethodInvocationException: Property 'serviceBeans' threw exception; nested exception is java.lang.NullPointerException
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1278)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1010)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:472)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:409)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:380)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:264)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:221)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:261)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:429)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:729)
... 


To reproduces on CXF 2.2 use following code snippet (it also fails in CXF 2.1.3-stable using @ProduceMime):

@Produces(""text/xml"")
public class RootService {

	@GET
	@Path(""/"")
	public String getThis() {
		return ""<root>Root service</root>"";
	}

	//@GET disabled to delegate to sub-resource
	//when SubService is returned it works fine
	//when java.lang.Object is returned it FAILS with Spring autowiring... weird
	@Path(""/sub"")
	public SubService getSub() {
		return new SubService();
	}
}
-------------
@Produces(""text/xml"")
@XmlRootElement
public class SubService {

	private String value = ""sub value"";
	
	@GET
	public Object getThis() {
		return this;
	}

	@GET
	@Path(""/value"")
	public String getValue() {
		return value;
	}
}

I believe JAX-RS specification clearly points out that
""[...]implementation MUST dynamically determine the class of object returned rather than relying on the static sub-resource locator return type since the returned instance may be a subclass of the declared type with potentially different annotations[...]""

As reference see Jboss example returning java.lang.Object from locator: http://www.jboss.org/file-access/default/members/resteasy/freezone/docs/1.0-beta-7/userguide/html/JAX-RS_Resource_Locators_and_Sub_Resources.html

If there are some assumed limitation please provide workarounds for dynamic subresources.

(Side note: effective behavior is very similar to CXF-1762 suffering from method dispatching problems; maybe solution is similar).",Tomcat 5.5.x,,,,,,,,,,,,,,,,15/Jan/09 17:41;amichalec;beans.xml;https://issues.apache.org/jira/secure/attachment/12397987/beans.xml,15/Jan/09 17:41;amichalec;web.xml;https://issues.apache.org/jira/secure/attachment/12397986/web.xml,,,,,2.0,,,,,,,,,,,,,,,,,,,,2009-01-15 14:24:10.847,,,no_permission,,,,,,,,,,,,,50363,,,Thu Jan 29 14:19:22 UTC 2009,,,,,,0|i1401b:,231468,,,,,,,,"15/Jan/09 14:24;sergey_beryozkin;Hi Andrzej

Can you please post some sample configuration ?


","15/Jan/09 17:41;amichalec;Sure, find web.xml and beans.xml attachments. ","16/Jan/09 11:12;sergey_beryozkin;Yes, indeed, we expect that either interface or concrete implementation is returned.
I reckon returning interfaces is neater than returning Objects - and it allows for a dynamic substitution with some
reasonable type safety and it's faster too. That said, we'll have be able to handle Objects as this is what spec requires...

By the way - in your beans.xml no autowiring is enabled - or is it done by default ?

Thanks, Sergey","16/Jan/09 11:31;amichalec;I use Object as most bare example of failure with inheritance.  
I spent too much time plying with locators returning interfaces, abstract classes, than concrete classes without success. 
I agree with you that from design perspective returning Object is coarse but it's (a) is legal approach 
and (b) is simplest proof that something's wrong on very basic level here :)

And autowiring, yeah, my bad, it's not the case here, it was very late in the night when I was experiencing different problems too :)

BTW I have started to looking into CXF guts to see how could I help, however missing javadocs, thin guides/docs 
make learning curve quite steep.

cheers,
andy.","16/Jan/09 11:43;sergey_beryozkin;Returning interfaces and abstract classes should work as expected. One can say there's a limitation there in that
all the JAXRS annotations in such cases should be present on a given interface/abstract type. If you saw the problems with subresources 
being interfaces then they were likely caused by the fact that at the moment proxified subresources can be handled properly  - which is what I'll be looking at now.

So can you please say how did you enable the autowiring - Spring docs say there's a bunch of modes there.

Any help will be welcomed - have a look please here : http://cwiki.apache.org/CXF20DOC/jax-rs-jsr-311.html.
Agreed about poor javadocs - I'll have to find some time and improve them","16/Jan/09 13:47;amichalec;Ah, now I see. You said very important thing applying to CXF implementation -- currently PUT ANNOTATIONS ON INTERFACE/ABSTRACT TYPE
So by example, I confirm that following modification of my previous example works fine in this case:

public interface SubService {

	@GET
	@Produces(""text/xml"")
	SubService getThis();
	
	@GET
	@Path(""/value"")
	@Produces(""text/plain"")
	String getValue(@Context UriInfo ui);
}
---------------
@XmlRootElement(name = ""subservice"")
public class SubServiceImpl implements SubService {
	
	private String value = ""sub value"";
	
	public SubService getThis() {
		return this;
	}

	public String getValue(UriInfo ui) {
		return value + ui.getAbsolutePath();
	}
}

It was not obvious to me, since googling for examples reveals that majority JAX-RS implementations allow dynamic/runtime resolution of URIs.
This way I cannot do what I tried from the very beginning:

@XmlRootElement(name = ""subservice"")
public class SubServiceImpl implements SubService {
  .... // content as above plus:

	@Path(""/value-new"")
	public String getNonInterfaceMethod() {
		return ...
	}
}

attempt to call for ""/sub/value-new"" results with:
INFO: Interceptor has thrown exception, unwinding now
org.apache.cxf.interceptor.Fault: No resource method found on a subresource locator SubService
	at org.apache.cxf.jaxrs.JAXRSInvoker.invoke(JAXRSInvoker.java:174)
	at org.apache.cxf.jaxrs.JAXRSInvoker.invoke(JAXRSInvoker.java:64)
	...

for me it means URI resolution is STATIC based on compile types, not runtime types while JAX-RS spec says dynamic resolution is a must
I think that we can either rename this defect (or close it and open new) that stresses failure on dynamic resolution.
Documentation you pointer URL to, should also be more specific on this limitation.

cheers,
andy.

PS. I feel guilty taking so much your time, but docs are not clean leading to confusion like this... so thanx once more for supersonic responses ;)
","16/Jan/09 14:20;sergey_beryozkin;Hi,

> I feel guilty taking so much your time

not at all - many thanks for playing with the implementation - your feedback is welcome

> Documentation you pointer URL to, should also be more specific on this limitation.

Believe it or not, it does :-)

I think there's no need to close this JIRA. I'll take care of the dynamic resolution - the effect should be the same in case 
of Object or interface or abstract class. First though I'd like to make sure that proxified subresources are handled properly - in cases where
an interface is typed but a proxified instance injected from Spring is returned...

Cheers, Sergey

P.S. By the way - if you have any concrete suggestions on how the user guide has to be improved then please let me know - either on the list or open a JIRA
","16/Jan/09 18:05;sergey_beryozkin;It's all done now, proxified subresources will be handled too.
I'll need to do some system tests - should be merged on Monday evening.

Note, static binding will still be supported - will have to be enabled through the config though.
If a use knows that all the annotations are on a given interface then it does not make sense to
evaluate dynamically.
","19/Jan/09 15:20;sergey_beryozkin;One can disable the dynamic resolution with jaxrs:server/@staticSubresourceResolution=""true""","27/Jan/09 23:50;amichalec;Hi Sergey,
your enhancement works great! 
I found however interference with CXF-1991 where UriInfo.getMatchedResources() was introduced. Consider this case:

public class RootService {
...
@Path(""/sub"")
public Object getSub() {
return new SubService();
}
}
-------------
public class SubService {
...
@Path(""/value"")
public String getValue(@Context UriInfo ui) {
  return ui.getMatchedResources(); 
} 
}

I believe expected result should be stack of class objects of _implementations_ so I would like to see:
[class net.amichalec.cxftest.RootService, class net.amichalec.cxftest.SubService]
while I get
[class net.amichalec.cxftest.RootService, class java.lang.Object]

It's in part I introduced however I do not have time now to dive into proxying I am not familiar with and get to right class object.
(And yes, sorry for using ordinary ""Objects"" but its fastest when only playing and checking things out :)

cheers,
andy
","29/Jan/09 11:57;sergey_beryozkin;Hi Andy - looking into it now... Cheers, Sergey",29/Jan/09 14:19;sergey_beryozkin;Hopefully it's now fixed for good :-),,,,,,,,,,,,,,,,,,,
Inconsistent use of logger delegation via LogUtils,CXF-1981,12412377,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,seanoc,amichalec,amichalec,14/Jan/09 13:36,28/Jan/09 16:48,14/Mar/19 02:29,26/Jan/09 10:13,2.2,,,,,,,,,,,,,,2.0.10,2.1.4,,,,,,,,,1,,,,"Even after installation of Log4jLogger delegate (via META-INF/cxf/org.apache.cxf.Logger file) some messages still are logged by java.util.logging -- example:

14 Jan 2009 14:09:05,358 [ContainerBackgroundProcessor[StandardEngine[Catalina]]] INFO  org.apache.cxf.bus.spring.BusApplicationContext - Refreshing org.apache.cxf.bus.spring.BusApplicationContext@6c826c82: display name [org.apache.cxf.bus.spring.BusApplicationContext@6c826c82]; startup date [Wed Jan 14 14:09:05 CET 2009]; parent: org.springframework.web.context.support.XmlWebApplicationContext@6abe6abe
14 Jan 2009 14:09:05,393 [ContainerBackgroundProcessor[StandardEngine[Catalina]]] INFO  org.apache.cxf.bus.spring.BusApplicationContext - Bean factory for application context [org.apache.cxf.bus.spring.BusApplicationContext@6c826c82]: org.springframework.beans.factory.support.DefaultListableBeanFactory@75d275d2
...
Jan 14, 2009 2:10:03 PM org.apache.cxf.phase.PhaseInterceptorChain doIntercept
INFO: Application has thrown exception, unwinding now
org.apache.cxf.interceptor.Fault
	at org.apache.cxf.service.invoker.AbstractInvoker.createFault(AbstractInvoker.java:148)
	at org.apache.cxf.service.invoker.AbstractInvoker.invoke(AbstractInvoker.java:114)
...


Review of PhaseInterceptorChain class shows that some log messages are passed via delegating logger and other via direct call to LogUtils:


public class PhaseInterceptorChain implements InterceptorChain {
    private static final Logger LOG = LogUtils.getL7dLogger(PhaseInterceptorChain.class); 
...
    public void add(Interceptor i, boolean force) {
...
            if (LOG.isLoggable(Level.FINE)) {
                LOG.fine(""Adding interceptor "" + i + "" to phase "" + phaseName);
            }
...
    }

    public synchronized boolean doIntercept(Message message) {
...
                        if (LOG.isLoggable(Level.FINE)) { 
                            LogUtils.log(LOG, Level.FINE,
                                         ""Application has thrown exception, unwinding now"", ex);
                        } else if (LOG.isLoggable(Level.INFO)) {
...
    }
}


Workaround is to install SFL4J delegating JUL to Log4j however I guess it would be better clean up the code. I think that use of LogUtils.log() should be forbidden and enforcement could be done via checkstyle (marking this method as depreciaded first) -or- introduction of AOP with aspect checking calls to illegal method.

cheers,
andy",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-01-21 17:05:29.488,,,no_permission,,,,,,,,,,,,,50364,,,Mon Jan 26 10:13:08 UTC 2009,,,,,,0|i1472n:,232609,,,,,,,,21/Jan/09 17:05;seanoc;Fixed http://svn.apache.org/viewvc?rev=736343&view=rev,"21/Jan/09 22:39;dkulp;I'm re-opening this as the proper fix is to figure out why LogUtils.log(...) isn't sending it to the right logger.   

There are MANY places in the code that use LogUtils.log(...).   The main reason is to get the stack traces correct if printing stack traces.   That method (or the Log4j delegator) need to be fixed.","22/Jan/09 01:09;amichalec;I agree with Dan. 
After reviewing code I noticed that:
a) LogUtils.log(...) goes through LogUtils.doLog(...) to Logger.log(LogRecord record)
b) AbstractDelegatingLogger (being subclass of Logger) calls in that case internalLog(LogRecord)
c) all other methods like warning(), info() etc. call doLog(LogRecord), not internalLog(LogRecord)
d) difference is that doLog invokes LogRecord.setLoggerName() and then calls internalLog -- I think this is where problem is located; LogRecord has missed logger name and messages do not reach proper Log4j appender...

I would try to to do this:

public abstract class AbstractDelegatingLogger extends Logger {
...
    public void log(LogRecord record) {
        if (isLoggable(record.getLevel())) {
            //WRONG: internalLog(record);
            doLog(record);
        }
    }
...
}

cheers,
andy.","22/Jan/09 10:33;seanoc;Thanks for the feedback Andy.
I'll have another look at this.",26/Jan/09 10:13;seanoc;Made the change Andy suggested.,,,,,,,,,,,,,,,,,,,,,,,,,,
XML Validation in offline fails due to missing cxf-beans.xsd in distro,CXF-1980,12412370,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,amichalec,amichalec,14/Jan/09 12:04,09/Feb/09 22:19,14/Mar/19 02:29,22/Jan/09 18:27,2.2,,,,,,,,,,,,,,2.0.10,2.1.4,,,Resources,,,,,,0,,,,"Validation of Spring config fails when XML parser cannot reach schema online:

...
2009-01-14 13:02:07,968 [main] INFO  org.springframework.beans.factory.xml.XmlBeanDefinitionReader  - Loading XML bean definitions from ServletContext resource [/WEB-INF/beans.xml]
2009-01-14 13:02:08,703 [main] WARN  org.springframework.beans.factory.xml.XmlBeanDefinitionReader  - Ignored XML validation warning
org.xml.sax.SAXParseException: schema_reference.4: Failed to read schema document 'http://cxf.apache.org/schemas/configuration/cxf-beans.xsd', because 1) could not find the document; 2) the document could not be read; 3) the root element of the document is not <xsd:schema>.
	at org.apache.xerces.util.ErrorHandlerWrapper.createSAXParseException(Unknown Source)
	at org.apache.xerces.util.ErrorHandlerWrapper.warning(Unknown Source)
...

Comparing versions 2.1.3 and 2.2 is seems that:
1. in cxf-2.2*.jar!/schemas/configuration/cxf-beans.xsd is missing
2. in cxf-2.2*.jar!/META-INF/spring.schemas mapping entry is missing

It is not possible to apply client-side fix (introducing spring.schemas in client application) so CXF must be fixed.
I guess it is build problem, however temporarily I do not have time to checkout code, fix build and apply patch :/

cheers,
andy.",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-01-22 18:26:32.285,,,no_permission,,,,,,,,,,,,,50365,,,Thu Jan 22 18:26:32 UTC 2009,,,,,,0|i1adlz:,268671,,,,,,,,"22/Jan/09 18:26;dkulp;
Definitely build problem.    The resource directory for the common utilities was src/resources and not src/main/resources.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"wsdl2java fails to generate working client code if web service name or serviceName is ""Service""",CXF-1979,12412321,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,dkulp,jemiller,jemiller,13/Jan/09 20:47,09/Feb/09 22:19,14/Mar/19 02:29,22/Jan/09 18:29,2.1.3,,,,,,,,,,,,,,2.0.10,2.1.4,,,Tooling,,,,,,0,,,,"If you create a web service and set the name or serviceName to ""Service"" like the following, 

@WebService(name = ""Service"", serviceName = ""Service"")
public class Service {
...
}

and you use wsdl2java to generate client code for the web service. The generated code won't compile. This is because javax.xml.ws.Service is imported in some of the files and it gets confused between this and the generated classes. It would be better if the generated code fully qualified the class names rather than importing them. Or, if knew to look for conflicts and renamed the classes to something else. i.e. maybe just call it Service2 instead.
","Windows XP, JDK 1.6.0_11, JAX-WS RI for the web service, and CXF for the client",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-01-13 21:01:54.314,,,no_permission,,,,,,,,,,,,,50366,,,Tue Feb 03 00:56:40 UTC 2009,,,,,,0|i1adm7:,268672,,,,,,,,"13/Jan/09 21:01;gmazza;I doubt we would want to get into class renaming, but I suspect the code would become seriously unreadable if we were to fully qualify every generated object just so clients can have services named ""String"", ""Service"", ""List"", ""HttpServletRequest"", etc.  Code readability would suffer, and from that, it would become a source of new errors.  I wonder what Metro does.

OTOH, if users are indeed allowed to name their services whatever they want, perhaps we would need to allow this too in order to be compatible with JSR-224.
","13/Jan/09 21:18;jemiller;This is what JAX-WS RI generates for the Service_Service class:

It looks like it mostly fully qualifies things, although it does have some imports.

package edu.uchicago.at.transforms;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.logging.Logger;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.1.4-b01-
 * Generated source version: 2.1
 * 
 */
@WebServiceClient(name = ""Service"", targetNamespace = ""http://transforms.at.uchicago.edu/"", wsdlLocation = ""http://localhost:8084/TransformsWebApplication/Service?wsdl"")
public class Service_Service
    extends javax.xml.ws.Service
{

    private final static URL SERVICE_WSDL_LOCATION;
    private final static Logger logger = Logger.getLogger(edu.uchicago.at.transforms.Service_Service.class.getName());

    static {
        URL url = null;
        try {
            URL baseUrl;
            baseUrl = edu.uchicago.at.transforms.Service_Service.class.getResource(""."");
            url = new URL(baseUrl, ""http://localhost:8084/TransformsWebApplication/Service?wsdl"");
        } catch (MalformedURLException e) {
            logger.warning(""Failed to create URL for the wsdl Location: 'http://localhost:8084/TransformsWebApplication/Service?wsdl', retrying as a local file"");
            logger.warning(e.getMessage());
        }
        SERVICE_WSDL_LOCATION = url;
    }

    public Service_Service(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public Service_Service() {
        super(SERVICE_WSDL_LOCATION, new QName(""http://transforms.at.uchicago.edu/"", ""Service""));
    }

    /**
     * 
     * @return
     *     returns Service
     */
    @WebEndpoint(name = ""ServicePort"")
    public edu.uchicago.at.transforms.Service getServicePort() {
        return super.getPort(new QName(""http://transforms.at.uchicago.edu/"", ""ServicePort""), Service.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns Service
     */
    @WebEndpoint(name = ""ServicePort"")
    public edu.uchicago.at.transforms.Service getServicePort(WebServiceFeature... features) {
        return super.getPort(new QName(""http://transforms.at.uchicago.edu/"", ""ServicePort""), Service.class, features);
    }

}
","13/Jan/09 23:05;gmazza;I'm not clear on something--did Metro name the class ""Service_Service"" (with the suffix ""_Service"") because you named the class ""Service"" and it wanted to disambiguate it with javax.xml.ws.Service, or even if you had named the service ""Banana"" it would still have named the class ""Banana_Service""?  Would you mind checking?  Thanks!

(Oooh...you get to attend the Univ. of Chicago?  What a beautiful campus and a great city...I'm envious of you!)","13/Jan/09 23:35;jemiller;On the server side, if I do this:

@WebService()
public class NewWebService {

Then JAX-WS RI does this:

/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.1.4-b01-
 * Generated source version: 2.1
 * 
 */
@WebServiceClient(name = ""NewWebServiceService"", targetNamespace = ""http://test/"", wsdlLocation = ""http://localhost:8084/WebApplication4/NewWebService?wsdl"")
public class NewWebServiceService
    extends Service
{

Interestingly, there is no _ (underscore), but, it does seem to always append a ""Service"" at the end. Personally, I'm still a bit confused on what the difference is between the name and serviceName properties of the WebService annotation. I'm not setting either of those in this example.

I'm just a lowly staff member here at U of C. ;-) Not sure I could afford the tuition if I was a student. ;-) Where are you from?

","13/Jan/09 23:37;jemiller;I just noticed that in this case, it didn't fully qualify the class name. It must only do that if it sees a conflict.","13/Jan/09 23:43;dkulp;
I believe this is already fixed in the 2.1.4-SNAPSHOTs......
","14/Jan/09 17:06;jemiller;I just tried the zip file snapshots for 2.1.4 and 2.2, dated 1/5/2009, and the both still have the problem.

I was able to fix the problem with the generated file Service_Service.java manually by commenting out the import for javax.xml.ws.Service and making the extends class use the fully qualified name.
","15/Jan/09 20:23;dkulp;
Hmm....    the velocity template says:
public class ${service.Name} extends #if (${service.Name} == ""Service"")javax.xml.ws.Service#else Service#end {
so if it's name is Service, it should use the fully qualified name.   Any chance you could attach the wsdl?

","15/Jan/09 20:32;jemiller;If you want to test against the web service that I'm working on, I have the WSDL at:

http://hawk.uchicago.edu/TransformsWebApplication/Service?wsdl
","15/Jan/09 20:41;dkulp;

Oh.....    a portType names Service as well...   Interesting.   OK.  Definitely a bug.

","03/Feb/09 00:56;jemiller;Awesome, it works now! Thanks. I appreciate the quick fix.
",,,,,,,,,,,,,,,,,,,,
simple:frontend cannot use jdk dynamic proxy as serviceBean,CXF-1977,12412302,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,jvassev,jvassev,13/Jan/09 16:38,05/Oct/09 19:37,14/Mar/19 02:29,05/Oct/09 16:39,2.1.3,,,,,,,,,,,,,,2.1.4,,,,Simple Frontend,,,,,,0,,,,"I have the following spring definition
<simple:server id=""ws_eventService"" serviceClass=""xxx.EventService"" address=""/EventService"">
		<simple:serviceBean>
  			<ref bean=""eventService""/>
  		</simple:serviceBean>
  		<simple:dataBinding>
        	       <bean class=""org.apache.cxf.aegis.databinding.AegisDatabinding"" />
               </simple:dataBinding>
</simple:server>

Here, eventService is a is JDK dynamic proxy that is created by spring (in my case a hessian client proxy). It fails with NPE in AnnotationInterceptors.getAnnotationObject() because ClassHelper.getRealClass(a_JDK_proxy) return null.

The proxy implements the xxx.EventService interface","java version ""1.6.0_11""
Java(TM) SE Runtime Environment (build 1.6.0_11-b03)
Java HotSpot(TM) Client VM (build 11.0-b16, mixed mode, sharing)",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-10-05 16:39:06.405,,,no_permission,,,,,,,,,,,,,50368,,,Mon Oct 05 16:39:06 UTC 2009,,,,,,0|i1admn:,268674,,,,,,,,"05/Oct/09 16:39;dkulp;
This was resolved as part of CXF-1494  by making the ClassHelper.getRealClass stuff really dig into the Spring AOP proxies and such to retrieve the actual classes.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WebApplicationException not thrown when injection of fields with *Param annotations fail,CXF-1976,12412271,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,sergey_beryozkin,chaitanyak,chaitanyak,13/Jan/09 07:13,09/Feb/09 22:20,14/Mar/19 02:29,16/Jan/09 10:59,2.2,,,,,,,,,,,,,,2.1.4,,,,JAX-RS,,,,,,0,,,,"When there is any exception during injection of fields with QueryParam, PathParam, HeaderParam or CookieParam annotations, a WebApplicationException should be thrown with the proper response status code set. Instead, we see a null value for the field and no exception thrown.",,,,,,,,,,,,,,,,,13/Jan/09 07:28;chaitanyak;sources.zip;https://issues.apache.org/jira/secure/attachment/12397753/sources.zip,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2009-01-16 10:59:38.825,,,no_permission,,,,,,,,,,,,,50369,,,Fri Jan 16 10:59:38 UTC 2009,,,,,,0|i0v17z:,179171,,,,,,,,13/Jan/09 07:28;chaitanyak;Using Apache commons API for HTTP Client and Junit.,"16/Jan/09 10:59;sergey_beryozkin;PathParam, QueryParam, MatrixParam exceptions will result in 404
HeaderParam, CookieParam, FormParam exceptions will result in 400

If a given type has no constructor with single String or valueOf (String) or fromString(String) or no ParameterHandler can be found then 500 will be reported",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Missing names in sample POMs,CXF-1974,12412261,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,seanoc,bmargulies,bmargulies,13/Jan/09 03:03,23/Jan/09 17:59,14/Mar/19 02:29,15/Jan/09 17:35,2.1.3,,,,,,,,,,,,,,2.1.4,,,,Samples,,,,,,0,,,,"Some, if not all, of the sample pom.xml files are missing the <name/> element.",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-01-15 15:47:49.457,,,no_permission,,,,,,,,,,,,,50370,,,Thu Jan 15 17:41:31 UTC 2009,,,,,,0|i1adn3:,268676,,,,,,,,"15/Jan/09 15:47;seanoc;artifactId not good enough for ya? ;-)

I'll drop the name tag in.","15/Jan/09 17:41;seanoc;URL: http://svn.apache.org/viewvc?rev=734762&view=rev
Log:
CXF-1974 Missing names tag in sample POMs.

Modified:
    cxf/trunk/distribution/src/main/release/samples/aegis/pom.xml
    cxf/trunk/distribution/src/main/release/samples/aegis_standalone/pom.xml
    cxf/trunk/distribution/src/main/release/samples/callback/pom.xml
    cxf/trunk/distribution/src/main/release/samples/configuration_interceptor/pom.xml
    cxf/trunk/distribution/src/main/release/samples/in_jvm_transport/pom.xml
    cxf/trunk/distribution/src/main/release/samples/java_first_jaxws/pom.xml
    cxf/trunk/distribution/src/main/release/samples/java_first_jaxws_factory_bean/pom.xml
    cxf/trunk/distribution/src/main/release/samples/java_first_pojo/pom.xml
    cxf/trunk/distribution/src/main/release/samples/java_first_spring_support/pom.xml
    cxf/trunk/distribution/src/main/release/samples/jax_rs/basic/pom.xml
    cxf/trunk/distribution/src/main/release/samples/jax_rs/basic_https/pom.xml
    cxf/trunk/distribution/src/main/release/samples/jax_rs/content_negotiation/pom.xml
    cxf/trunk/distribution/src/main/release/samples/jax_server_aegis_client/pom.xml
    cxf/trunk/distribution/src/main/release/samples/jaxws_async/pom.xml
    cxf/trunk/distribution/src/main/release/samples/jaxws_dispatch_provider/pom.xml
    cxf/trunk/distribution/src/main/release/samples/jaxws_handlers/pom.xml
    cxf/trunk/distribution/src/main/release/samples/jms_pubsub/pom.xml
    cxf/trunk/distribution/src/main/release/samples/jms_queue/pom.xml
    cxf/trunk/distribution/src/main/release/samples/js_browser_client_java_first/pom.xml
    cxf/trunk/distribution/src/main/release/samples/js_browser_client_simple/pom.xml
    cxf/trunk/distribution/src/main/release/samples/js_client/pom.xml
    cxf/trunk/distribution/src/main/release/samples/mtom/pom.xml
    cxf/trunk/distribution/src/main/release/samples/restful_dispatch/pom.xml
    cxf/trunk/distribution/src/main/release/samples/restful_http_binding/pom.xml
    cxf/trunk/distribution/src/main/release/samples/soap_header/pom.xml
    cxf/trunk/distribution/src/main/release/samples/ws_addressing/pom.xml
    cxf/trunk/distribution/src/main/release/samples/ws_policy/pom.xml
    cxf/trunk/distribution/src/main/release/samples/ws_rm/pom.xml
    cxf/trunk/distribution/src/main/release/samples/wsdl_first/pom.xml
    cxf/trunk/distribution/src/main/release/samples/wsdl_first_https/pom.xml
    cxf/trunk/distribution/src/main/release/samples/wsdl_first_pure_xml/pom.xml
    cxf/trunk/distribution/src/main/release/samples/wsdl_first_rpclit/pom.xml
    cxf/trunk/distribution/src/main/release/samples/wsdl_first_soap12/pom.xml
    cxf/trunk/distribution/src/main/release/samples/wsdl_first_xml_wrapped/pom.xml
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Dynamic Client Factory classes should take URL objects as well as Strings,CXF-1973,12412260,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,seanoc,bmargulies,bmargulies,13/Jan/09 03:02,23/Jan/09 17:59,14/Mar/19 02:29,19/Jan/09 15:54,2.1.3,,,,,,,,,,,,,,2.1.4,,,,Dynamic Languages,,,,,,0,,,,"The JAX-WS API's (e.g. Endpoint) take URL objects. The more-or-less corresponding DynamicClientFactory and JaxWsDynamicClientFactory objects only take Strings. Consistency here would be a good thing.
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-01-19 15:54:58.309,,,no_permission,,,,,,,,,,,,,50371,,,Mon Jan 19 15:54:58 UTC 2009,,,,,,0|i1adnb:,268677,,,,,,,,19/Jan/09 15:54;seanoc;Added in new API's which take a URL.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
cannot send MTOM attachment over 64K when server schema validation on,CXF-1972,12412232,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,lpenninger,lpenninger,12/Jan/09 21:45,03/Aug/09 20:06,14/Mar/19 02:29,28/Jul/09 17:57,2.1.3,,,,,,,,,,,,,,2.1.6,2.2.3,,,,,,,,,0,,,,"I'm using MTOM with CXF 2.1.3 to send an attachment to the server, with validation turned on in the server.  Everything is working fine, as long as the attachment data is 64K or less.  One byte over 64K, and the stream returned by getDataSource().getInputStream() is empty.  The stream is created okay with all the data, but in DocLiteralInInterceptor.handleMessage it eventually calls Base64Data.get, which does a close on the stream.  This is only a problem if the stream is a FileInputStream, which it will be if the data is over 64K, and this particular codepath is only taken if validation is turned on.  I've been able to reproduce this with the mtom sample code.  I will attach my changes to Server.java to turn on validation, and the stack trace showing where the problem occurs.

Thanks, Lisa",RedHat Linux 2.6.9-42.ELsmp,,,,,,,,,,,,,,,,12/Jan/09 21:49;lpenninger;Server.java;https://issues.apache.org/jira/secure/attachment/12397723/Server.java,12/Jan/09 21:47;lpenninger;stack.txt;https://issues.apache.org/jira/secure/attachment/12397722/stack.txt,,,,,2.0,,,,,,,,,,,,,,,,,,,,2009-01-13 15:27:16.356,,,no_permission,,,,,,,,,,,,,112678,,,Tue Jul 28 17:57:45 UTC 2009,,,,,,0|i0v1kn:,179228,,,,,,,,"12/Jan/09 21:47;lpenninger;This is the point where the stream is closed, and the data is lost.",12/Jan/09 21:49;lpenninger;Changes to mtom sample code to reproduce issue.  Only change is to turn on validation.,"13/Jan/09 15:27;dkulp;
This is a JAXB bug..    I've logged a bug with them:
https://jaxb.dev.java.net/issues/show_bug.cgi?id=588

Feel free to vote for it there.
","15/Jan/09 04:11;lpenninger;I would have titled the JAXB bug something more like ""Data loss with validation and MTOM/attachments"".  The current title sounds much too harmless.","28/Jul/09 17:57;dkulp;
Implemented a workaround to lock the attachments and cache them.",,,,,,,,,,,,,,,,,,,,,,,,,,
wsdl2java - NPE when wsdl has a missing attribute,CXF-1969,12412145,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,seanoc,davsclaus,davsclaus,11/Jan/09 14:50,23/Jan/09 17:59,14/Mar/19 02:29,21/Jan/09 17:53,2.1.3,,,,,,,,,,,,,,2.1.4,,,,Tooling,,,,,,0,,,,"I was working on part-five to a longer tutorial using Camel and CXF
http://activemq.apache.org/camel/tutorial-example-reportincident-part5.html

I have a handcrafted .wsdl which I use the wsdl2java tool to generate source code.

I was getting this error reported from wsdl2java
{code}
Jan 11, 2009 3:43:10 PM org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory createEndpoint
WARNING: Could not find endpoint/port for {http://reportincident.example.camel.apache.org}ReportIncidentEndpointPort in wsdl. Using {http://reportincident.example.camel.apache.org}ReportIncidentPort.
{code}

So I was messing a bit with the .wsdl to see what was wrong




How to reproduce
1) Download the .zip from: http://cwiki.apache.org/confluence/display/CAMEL/Tutorial-Example-ReportIncident-Part5
2) Unzip to a folder
3) Run: mvn test   it should run fine
4) Edit the file: src/main/resources/report_incident.wsdl 
5) Change from
{code}
<wsdl:binding name=""ReportIncidentBinding"" type=""tns:ReportIncidentEndpoint"">
{code}
to remove the type attribute (yes I was being a bit mean), so its
{code}
<wsdl:binding name=""ReportIncidentBinding"">
{code}
6) Save
7) Run: mvn test again and see the error

{code}
[INFO] ------------------------------------------------------------------------
[ERROR] BUILD ERROR
[INFO] ------------------------------------------------------------------------
[INFO] java.lang.NullPointerException
{code}

The problem is the NPE doesnt give you any hint what was wrong. What if the .wsdl was very large and you didn't have a clue what was wrong with it.

","MaxOS X, CXF 2.13, Camel 1.5.0",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-01-21 17:53:53.031,,,no_permission,,,,,,,,,,,,,50373,,,Wed Jan 21 17:53:53 UTC 2009,,,,,,0|i1adnr:,268679,,,,,,,,21/Jan/09 17:53;seanoc;applied fix to trunk http://svn.apache.org/viewvc?rev=736352&view=rev,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
W3CDOMStreamReader can't read text in the root element.,CXF-1963,12411791,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,,bmargulies,bmargulies,06/Jan/09 18:31,23/Jan/09 17:59,14/Mar/19 02:29,06/Jan/09 18:49,2.2,,,,,,,,,,,,,,2.1.4,,,,Core,,,,,,0,,,,"src/test/java/org/apache/cxf/staxutils/W3CDOMStreamReaderTest.java

Comment in the commented-out test and it will fail. This blocks work in disentangling JDOM from Aegis.
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,50376,,,Tue Jan 06 18:49:39 UTC 2009,,,,,,0|i0sybb:,167036,,,,,,,,06/Jan/09 18:49;bmargulies;I found a fix.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WHICH_JARS text file does not mention commons-collections.jar,CXF-1955,12411278,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,seanoc,stevendoolan,stevendoolan,24/Dec/08 00:40,02/Feb/09 17:26,14/Mar/19 02:29,26/Jan/09 10:14,2.1.3,,,,,,,,,,,,,,2.1.4,,,,Documentation,,,,,,0,,,,The WHICH_JARS file in the lib directory lists the dependencies of various parts of CXF. commons-collections is required for wsdl2java (and perhaps other sections) but is not mentioned.,all,600,600,,0%,600,600,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-01-21 18:04:32.903,,,no_permission,,Novice,,,,,,,,,,,50380,,,Fri Jan 23 14:43:57 UTC 2009,,,,,,0|i1adov:,268684,,,,,,,,"21/Jan/09 18:04;bmargulies;Sean,

Maybe we want to eliminate the dependency instead of documenting it?
--benson
","23/Jan/09 14:43;seanoc;Hi Benson,

It seems that it CXF is dependent on velocity and that it is dependent on commons-*.jars",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JAXWS client doesn't have http-conduit properties injected,CXF-1951,12411026,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,,srichavali,srichavali,19/Dec/08 01:51,23/Jan/09 17:40,14/Mar/19 02:29,19/Dec/08 02:28,2.1.3,,,,,,,,,,,,,,Invalid,,,,JAX-WS Runtime,,,,,,0,,,,"This is an issue I am reporting from the problem discussion in the mailing group - http://www.nabble.com/Set-custom-HostnameVerifier-on-jaxws%3Aclient-definition-td20861174.html

My CXF configuration is as following:

<?xml version=""1.0"" encoding=""UTF-8""?>
<beans xmlns=""http://www.springframework.org/schema/beans""
	xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
	xmlns:http-conf=""http://cxf.apache.org/transports/http/configuration""
	xmlns:cxf=""http://cxf.apache.org/core""
	xmlns:jaxws=""http://cxf.apache.org/jaxws""
	xsi:schemaLocation=""http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
	                    http://cxf.apache.org/transports/http/configuration http://cxf.apache.org/schemas/configuration/http-conf.xsd 
	                    http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd
	                    http://cxf.apache.org/core http://cxf.apache.org/schemas/core.xsd"">

    <import resource=""classpath:META-INF/cxf/cxf.xml""/>
    <import resource=""classpath:META-INF/cxf/cxf-extension-soap.xml""/>
    <import resource=""classpath:META-INF/cxf/cxf-servlet.xml""/>

	<bean id=""logInbound"" class=""org.apache.cxf.interceptor.LoggingInInterceptor"" />
	<bean id=""logOutbound"" class=""org.apache.cxf.interceptor.LoggingOutInterceptor"" />

	<cxf:bus>
		<cxf:inInterceptors>
			<ref bean=""logInbound"" />
		</cxf:inInterceptors>
		<cxf:outInterceptors>
			<ref bean=""logOutbound"" />
		</cxf:outInterceptors>
		<cxf:inFaultInterceptors>
			<ref bean=""logOutbound"" />
		</cxf:inFaultInterceptors>
	</cxf:bus> 
       

       <http-conf:conduit name=""*.http-conduit""> 
       		<http-conf:tlsClientParameters disableCNCheck=""true""/>        
       </http-conf:conduit>  
       <jaxws:client id=""locationClient"" 
           serviceClass=""com.consortemedia.webservice.api.LocationServiceService""
           wsdlLocation=""https://marketing.ews.yahooapis.com/services/V4/LocationService?wsdl""/>	  
</beans>

I put break points in the CXF source and I can see that the http-conduit settings are being read correctly. I also set a breakpoint @ . org.apache.cxf.configuration.jsse.TLSClientParameters:isDisableCNCheck. However I don't see this break point being hit which leads me to believe that the http-conduit settings are not being injected in the client. When the client is being created I see the following stacktrace:

DEBUG - DefaultResourceManager.findResource(89) | resolving resource <https://marketing.ews.yahooapis.com/services/V4/LocationService?wsdl> type <class java.net.URL>
javax.wsdl.WSDLException: WSDLException: faultCode=PARSER_ERROR: Problem parsing 'https://marketing.ews.yahooapis.com/services/V4/LocationService?wsdl'.: java.io.IOException: HTTPS hostname wrong:  should be <marketing.ews.yahooapis.com>
	at com.ibm.wsdl.xml.WSDLReaderImpl.getDocument(Unknown Source)
	at com.ibm.wsdl.xml.WSDLReaderImpl.readWSDL(Unknown Source)
	at com.ibm.wsdl.xml.WSDLReaderImpl.readWSDL(Unknown Source)
	at org.apache.cxf.wsdl11.WSDLManagerImpl.loadDefinition(WSDLManagerImpl.java:212)
	at org.apache.cxf.wsdl11.WSDLManagerImpl.getDefinition(WSDLManagerImpl.java:176)
	at org.apache.cxf.wsdl11.WSDLServiceFactory.<init>(WSDLServiceFactory.java:81)
	at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.buildServiceFromWSDL(ReflectionServiceFactoryBean.java:311)
	at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.initializeServiceModel(ReflectionServiceFactoryBean.java:408)
	at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.create(ReflectionServiceFactoryBean.java:189)
	at org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean.create(JaxWsServiceFactoryBean.java:164)
	at org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory.createEndpoint(AbstractWSDLBasedEndpointFactory.java:100)
	at org.apache.cxf.frontend.ClientFactoryBean.create(ClientFactoryBean.java:52)
	at org.apache.cxf.frontend.ClientProxyFactoryBean.create(ClientProxyFactoryBean.java:102)
	at org.apache.cxf.jaxws.JaxWsProxyFactoryBean.create(JaxWsProxyFactoryBean.java:115)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:115)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:435)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:903)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:817)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:440)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:409)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:380)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:264)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:261)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:429)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:728)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:380)
	at org.springframework.test.AbstractSingleSpringContextTests.createApplicationContext(AbstractSingleSpringContextTests.java:213)
	at org.springframework.test.AbstractSingleSpringContextTests.loadContextLocations(AbstractSingleSpringContextTests.java:189)
	at org.springframework.test.AbstractSingleSpringContextTests.loadContext(AbstractSingleSpringContextTests.java:169)
	at org.springframework.test.AbstractSpringContextTests.getContext(AbstractSpringContextTests.java:140)
	at org.springframework.test.AbstractSingleSpringContextTests.setUp(AbstractSingleSpringContextTests.java:98)",Windows XP,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112672,,,2008-12-19 01:51:48.0,,,,,,0|i0v3on:,179570,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
wsdl2java omits @WebParam's header=true where <wsdl:service> element is missing.,CXF-1950,12410983,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,dkulp,prophet36,prophet36,18/Dec/08 17:11,24/Apr/09 21:17,14/Mar/19 02:29,13/Mar/09 18:19,2.1.4,,,,,,,,,,,,,,2.1.5,,,,Tooling,,,,,,0,,,,"If you generate code from the WSDL below (a slightly modified version of a WSDL retrieved from a running CXF service) using WSDLToJava, it fails to generate the header=true properties on the @WebParam annotations. The weird thing is that if you reinstate the <wsdl:service> element, the header=true property is correctly generated.

bash-2.05b$ cd apache-cxf-2.1.4-SNAPSHOT/lib
bash-2.05b$ cat > y.wsdl <<EOF
> <?xml version=""1.0"" encoding=""UTF-8""?>
> <wsdl:definitions xmlns:wsdl=""http://schemas.xmlsoap.org/wsdl/"" xmlns:ns1=""http://schemas.xmlsoap.org/soap/http"" xmlns:ns2=""http://xml.ms.com/ns/eai/string-tcp"" xmlns:soap=""http://schemas.xmlsoap.org/wsdl/soap/"" xmlns:tns=""http://xml.ms.com/ns/msjava/greeter"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" name=""GreeterService"" targetNamespace=""http://xml.ms.com/ns/msjava/greeter"">
>   <wsdl:types>
>     <xsd:schema attributeFormDefault=""unqualified"" elementFormDefault=""qualified"" targetNamespace=""http://xml.ms.com/ns/msjava/greeter"" xmlns:tns=""http://xml.ms.com/ns/msjava/greeter"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">
>       <xsd:element name=""Blah"" nillable=""true"" type=""xsd:string""/>
>       <xsd:element name=""GreeterException"" type=""tns:GreeterException""/>
>       <xsd:complexType name=""GreeterException"">
>         <xsd:sequence/>
>       </xsd:complexType>
>       <xsd:element name=""Greeter"" nillable=""true"" type=""xsd:string""/>
>       <xsd:element name=""GreeterResponse"" nillable=""true"" type=""xsd:string""/>
>     </xsd:schema>
>   </wsdl:types>
>   <wsdl:message name=""GreeterException"">
>     <wsdl:part element=""tns:GreeterException"" name=""GreeterException""/>
>   </wsdl:message>
>   <wsdl:message name=""GreeterResponse"">
>     <wsdl:part element=""tns:GreeterResponse"" name=""GreeterResponse""/>
>   </wsdl:message>
>   <wsdl:message name=""Greeter"">
>     <wsdl:part element=""tns:Greeter"" name=""Greeter""/>
>     <wsdl:part element=""tns:Blah"" name=""Blah""/>
>   </wsdl:message>
>   <wsdl:portType name=""Greeter"">
>     <wsdl:operation name=""Greeter"">
>       <wsdl:input message=""tns:Greeter"" name=""Greeter""/>
>       <wsdl:output message=""tns:GreeterResponse"" name=""GreeterResponse""/>
>       <wsdl:fault message=""tns:GreeterException"" name=""GreeterException""/>
>     </wsdl:operation>
>   </wsdl:portType>
>   <wsdl:binding name=""GreeterServiceSoapHttpBinding"" type=""tns:Greeter"">
>     <soap:binding style=""document"" transport=""http://schemas.xmlsoap.org/soap/http""/>
>     <wsdl:operation name=""Greeter"">
>       <soap:operation soapAction="""" style=""document""/>
>       <wsdl:input name=""Greeter"">
>         <soap:header message=""tns:Greeter"" part=""Blah"" use=""literal""/>
>         <soap:body parts=""Greeter"" use=""literal""/>
>       </wsdl:input>
>       <wsdl:output name=""GreeterResponse"">
>         <soap:body use=""literal""/>
>       </wsdl:output>
>       <wsdl:fault name=""GreeterException"">
>         <soap:fault name=""GreeterException"" use=""literal""/>
>       </wsdl:fault>
>     </wsdl:operation>
>   </wsdl:binding>
>   <!--wsdl:service name=""GreeterService"">
>     <wsdl:port binding=""tns:GreeterServiceSoapHttpBinding"" name=""GreeterJettyHTTPPort"">
>       <soap:address location=""http://localhost:7650/Greeter""/>
>     </wsdl:port>
>   </wsdl:service-->
> </wsdl:definitions>
> EOF
bash-2.05b$ java -classpath $(find . -name ""*.jar"" | tr '\n' ':'). org.apache.cxf.tools.wsdlto.WSDLToJava y.wsdl 
Dec 18, 2008 5:08:45 PM org.apache.cxf.tools.validator.internal.WSDLRefValidator collectValidationPoints
WARNING: WSDL document file:/a/lnn16f2/vol/lnn16f2v1/cs_msjava_build/mcclellc/apache-cxf-2.1.4-SNAPSHOT/lib/y.wsdl does not define any services
bash-2.05b$ grep WebParam com/ms/xml/ns/msjava/greeter/Greeter.java 
import javax.jws.WebParam;
        @WebParam(partName = ""Greeter"", name = ""Greeter"", targetNamespace = ""http://xml.ms.com/ns/msjava/greeter"")
        @WebParam(partName = ""Blah"", name = ""Blah"", targetNamespace = ""http://xml.ms.com/ns/msjava/greeter"")
",,,,,,,,,,,,,,,,,18/Dec/08 17:14;prophet36;y.wsdl;https://issues.apache.org/jira/secure/attachment/12396401/y.wsdl,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112671,,,2008-12-18 17:11:50.0,,,,,,0|i1adpr:,268688,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Interface order requires javax.jws before javax.ws.rs,CXF-1949,12410982,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,,mrachell,mrachell,18/Dec/08 17:00,24/Apr/09 21:17,14/Mar/19 02:29,03/Mar/09 11:00,2.1.3,,,,,,,,,,,,,,2.1.4,2.2,,,JAX-RS,JAX-WS Runtime,Soap Binding,,,,0,,,,"I created a class that implements two interfaces - one exposes RESTful services, and another exposes web services. If the web service interface is listed first, then the RESTful operations fail with the error below. If the REST interface is listed first, then there is no problem.

For example, if I have two interfaces: first a REST, then a web service:

// RESTful service interface
@ProduceMime(""application/json"")
@ConsumeMime(""application/json"")
@Path(""/myRestService"")
public interface MyRESTService {

	  @GET
	  public MyResponse getAll();
}

// WebService interface
@WebService(targetNamespace = ""a.b.c.d"")
public interface MySOAPService {

	@WebMethod
	public MyResponse getAll();
}

Then I have a simple class that implements both interfaces showing the web service interface listed first. This class def causes the error below.

public class MyClass implements MySOAPService, MyRESTService{
	public MyResponse getAll(){ ... }
}

If you change the class def to the following, then there is no error.

public class MyClass implements MyRESTService, MySOAPService{
	public MyResponse getAll(){ ... }
}


11:07:07,453 ERROR [STDERR] Dec 18, 2008 11:07:07 AM org.apache.cxf.jaxrs.interceptor.JAXRSInInterceptor processRequest
SEVERE: .No operation matching request path /activityTypeService/ is found, ContentType : */*, Accept : application/json
, text/javascript, */*.
11:07:07,468 ERROR [STDERR] Dec 18, 2008 11:07:07 AM org.apache.cxf.phase.PhaseInterceptorChain doIntercept
INFO: Interceptor has thrown exception, unwinding now
org.apache.cxf.interceptor.Fault: .No operation matching request path /activityTypeService/ is found, ContentType : */*,
 Accept : application/json, text/javascript, */*.
        at org.apache.cxf.jaxrs.interceptor.JAXRSInInterceptor.processRequest(JAXRSInInterceptor.java:195)
        at org.apache.cxf.jaxrs.interceptor.JAXRSInInterceptor.handleMessage(JAXRSInInterceptor.java:65)
        at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:220)
        at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:78)
        at org.apache.cxf.transport.servlet.ServletDestination.invoke(ServletDestination.java:92)
        at org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:285)
        at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:131)
        at org.apache.cxf.transport.servlet.AbstractCXFServlet.invoke(AbstractCXFServlet.java:175)
        at org.apache.cxf.transport.servlet.AbstractCXFServlet.doGet(AbstractCXFServlet.java:157)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:690)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:803)
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
        at org.springframework.security.util.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:359)
        at org.springframework.security.intercept.web.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:10
9)
        at org.springframework.security.intercept.web.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:
83)
        at org.springframework.security.util.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:371)
        at org.springframework.security.ui.ExceptionTranslationFilter.doFilterHttp(ExceptionTranslationFilter.java:101)
        at org.springframework.security.ui.SpringSecurityFilter.doFilter(SpringSecurityFilter.java:53)
        at org.springframework.security.util.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:371)
        at org.springframework.security.wrapper.SecurityContextHolderAwareRequestFilter.doFilterHttp(SecurityContextHold
erAwareRequestFilter.java:91)
        at org.springframework.security.ui.SpringSecurityFilter.doFilter(SpringSecurityFilter.java:53)
        at org.springframework.security.util.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:371)
        at org.springframework.security.ui.AbstractProcessingFilter.doFilterHttp(AbstractProcessingFilter.java:268)
        at org.springframework.security.ui.SpringSecurityFilter.doFilter(SpringSecurityFilter.java:53)
        at org.springframework.security.util.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:371)
        at org.springframework.security.ui.logout.LogoutFilter.doFilterHttp(LogoutFilter.java:87)
        at org.springframework.security.ui.SpringSecurityFilter.doFilter(SpringSecurityFilter.java:53)
        at org.springframework.security.util.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:371)
        at org.springframework.security.ui.SessionFixationProtectionFilter.doFilterHttp(SessionFixationProtectionFilter.
java:61)
        at org.springframework.security.ui.SpringSecurityFilter.doFilter(SpringSecurityFilter.java:53)
        at org.springframework.security.util.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:371)
        at org.springframework.security.context.HttpSessionContextIntegrationFilter.doFilterHttp(HttpSessionContextInteg
rationFilter.java:235)
        at org.springframework.security.ui.SpringSecurityFilter.doFilter(SpringSecurityFilter.java:53)
        at org.springframework.security.util.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:371)
        at org.springframework.security.concurrent.ConcurrentSessionFilter.doFilterHttp(ConcurrentSessionFilter.java:97)

        at org.springframework.security.ui.SpringSecurityFilter.doFilter(SpringSecurityFilter.java:53)
        at org.springframework.security.util.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:371)
        at org.springframework.security.util.FilterChainProxy.doFilter(FilterChainProxy.java:174)
        at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:236)
        at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:167)
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
        at org.jboss.web.tomcat.filters.ReplyHeaderFilter.doFilter(ReplyHeaderFilter.java:96)
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:230)
        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:175)
        at org.jboss.web.tomcat.security.SecurityAssociationValve.invoke(SecurityAssociationValve.java:179)
        at org.jboss.web.tomcat.security.JaccContextValve.invoke(JaccContextValve.java:84)
        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127)
        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)
        at org.jboss.web.tomcat.service.jca.CachedConnectionValve.invoke(CachedConnectionValve.java:157)
        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)
        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:262)
        at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:844)
        at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583)
        at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:446)
        at java.lang.Thread.run(Thread.java:595)","Windows XP Pro, sp3; Sun JDK 1.5.0_16",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-01-23 11:06:06.96,,,no_permission,,Unknown,,,,,,,,,,,50382,,,Tue Mar 03 11:00:26 UTC 2009,,,,,,0|i143i7:,232031,,,,,,,,"23/Jan/09 11:06;sergey_beryozkin;Sorry, I missed this issue - it was probably blocked, alongside with a number of other valid emails, by our new spam system. I'll investigate and try to get a fix done for 2.1.4","23/Jan/09 23:41;sergey_beryozkin;Hi,

I haven't managed to reproduce this issue with 2.2-snapshot, thus I hope it must've been fixed in 2.1.4/2.2 snapshots.
Please see

http://svn.apache.org/repos/asf/cxf/trunk/systests/src/test/java/org/apache/cxf/systest/jaxrs/BookStoreSoapRestImpl2.java
http://svn.apache.org/repos/asf/cxf/trunk/systests/src/test/java/org/apache/cxf/systest/jaxrs/JAXRSSoapBookTest.java

a simple test really, but BookStoreSoapRestImpl2 implements pretty much the same interfaces as you posted, in the same order.

see configuration here :

http://svn.apache.org/repos/asf/cxf/trunk/systests/src/test/resources/jaxrs_soap_rest/WEB-INF/beans.xml

if you could confirm that no issue can be reproduced with the latest trunk then it would be super, but either way I hope it's been fixed.

that said, I did fix one issue. Specifically, if a method contains an HTTPMethod only like GET that it's not correctly recognized as a resource method....

thanks, Sergey 


",03/Mar/09 11:00;sergey_beryozkin;I believe it's been fixed but please reopen the issue in case you find that the order of interfaces still makes the difference.,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Interface is not visible when CXF does not have visiblility to domain classes.,CXF-1948,12410737,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,lfbayer,lfbayer,15/Dec/08 21:46,09/Feb/09 22:20,14/Mar/19 02:29,22/Jan/09 18:43,2.1.3,,,,,,,,,,,,,,2.1.4,,,,Aegis Databinding,,,,,,0,,,,"When CXF is deployed as a bundle in OSGi and interfaces are used for the types Aegis tries to create a proxy using it's own class loader.  Because the domain interfaces are not visible from that class loader an error occurs.

org.apache.cxf.interceptor.Fault: Illegal argument. interface com.example.IDomainThing is not visible from class loader. Nested exception is java.lang.IllegalArgumentException: interface com.example.IDomainThing is not visible from class loader
	at org.apache.cxf.aegis.databinding.XMLStreamDataReader.read(XMLStreamDataReader.java:49)
	at org.apache.cxf.aegis.databinding.XMLStreamDataReader.read(XMLStreamDataReader.java:34)
        <Snipped>
Caused by: org.apache.cxf.aegis.DatabindingException: Illegal argument. interface com.example.IDomainThing is not visible from class loader. Nested exception is java.lang.IllegalArgumentException: interface com.example.IDomainThing is not visible from class loader
	at org.apache.cxf.aegis.type.basic.BeanType.readObject(BeanType.java:170)
	at org.apache.cxf.aegis.type.basic.BeanType.readObject(BeanType.java:146)
	at org.apache.cxf.aegis.AegisXMLStreamDataReader.read(AegisXMLStreamDataReader.java:82)
	at org.apache.cxf.aegis.databinding.XMLStreamDataReader.read(XMLStreamDataReader.java:47)
	... 19 more
Caused by: java.lang.IllegalArgumentException: interface com.example.IDomainThing is not visible from class loader
	at java.lang.reflect.Proxy.getProxyClass(Proxy.java:353)
	at java.lang.reflect.Proxy.newProxyInstance(Proxy.java:581)
	at org.apache.cxf.aegis.type.basic.BeanType.readObject(BeanType.java:99)
	... 22 more",,,,,,,,,,,,,,,,,15/Dec/08 21:48;lfbayer;BeanType.java.diff;https://issues.apache.org/jira/secure/attachment/12396131/BeanType.java.diff,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2008-12-17 03:37:13.276,,,no_permission,,,,,,,,,,,,,50383,,,Wed Dec 17 03:37:13 UTC 2008,,,,,,0|i1adpz:,268689,,,,,,,,"15/Dec/08 21:48;lfbayer;Patch that uses the target interface's classloader to create the proxy.

( Patches org.apache.cxf.aegis.type.basic.BeanType )","17/Dec/08 03:37;bmargulies;It would be really helpful if you could add in a test case that we can check in, as I don't have a way to regress this as things are. If you can't, I'll look for help from the people doing OSGI around CXF.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect deserialization of null values in Map,CXF-1947,12410707,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,bmargulies,cyrius,cyrius,15/Dec/08 13:41,09/Feb/09 22:19,14/Mar/19 02:29,15/Dec/08 16:10,2.0,2.0.1,2.0.2,2.0.3,2.0.4,2.0.5,2.0.6,2.0.7,2.0.8,2.0.9,2.1,2.1.1,2.1.2,2.1.3,2.0.10,2.1.4,,,Aegis Databinding,,,,,,0,,,,"Hi,

There is an issue with AEGIS deserialization (at least on server-side) of Maps that contain null values: the retrieved value may not be null, and can actually be the previous value deserialized from the Map.
For exemple, if the Map contains 3 (key;value) pairs (""0"", null), (""1"", Object1) and (""2"", null), AEGIS will hand over (""0"", null), (""1"", Object1) and (""2"", Object1) to the implementation class.

I had a quick look at the source code, and I think the issue is in the org.apache.cxf.aegis.type.collection.MapType.readObject(MessageReader, Context) function: the variables holding the key and value objects are declared outside the loop processing the Map elements (named 'entry' in the XML stream), and are not reseted to null for each 'entry' processed.
So if the 'key' or 'value' tag is absent (meaning the data is null), the code still points to the deserialized data from the previous entry.

This could be fixed by either moving the declaration of those 2 variables inside the loop, or reseting their values to null at the beginning of the loop.


Snippet from the function :

            Object key = null;
            Object value = null;

            while (reader.hasMoreElementReaders()) {
                MessageReader entryReader = reader.getNextElementReader();

                if (entryReader.getName().equals(getEntryName())) {
                    while (entryReader.hasMoreElementReaders()) {
                        MessageReader evReader = entryReader.getNextElementReader();

                        if (evReader.getName().equals(getKeyName())) {
                            key = kType.readObject(evReader, context);
                        } else if (evReader.getName().equals(getValueName())) {
                            value = vType.readObject(evReader, context);
                        } else {
                            readToEnd(evReader);
                        }
                    }

                    map.put(key, value);
                } else {
                    readToEnd(entryReader);
                }
            }


Note: this issue was already present in XFire",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-12-15 16:10:15.296,,,no_permission,,Unknown,,,,,,,,,,,50384,,,Tue Dec 16 13:08:39 UTC 2008,,,,,,0|i0v1dr:,179197,,,,,,,,15/Dec/08 16:10;bmargulies;Fix for 2.2. Could be backported for 2.1.x.,"16/Dec/08 13:08;njiang;Applied the patch into trunk
http://svn.apache.org/viewvc?rev=726724&view=rev
2.1.x branch
http://svn.apache.org/viewvc?rev=726758&view=rev
2.0.x branch
http://svn.apache.org/viewvc?rev=726946&view=rev",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException in W3CDOMStreamReader,CXF-1945,12410634,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,seanoc,bitwalker,bitwalker,13/Dec/08 18:24,23/Jan/09 17:46,14/Mar/19 02:29,05/Jan/09 17:19,2.1.1,,,,,,,,,,,,,,2.0.10,2.1.4,,,Core,,,,,,0,,,,"The throw statement 'throw new IllegalStateException(""Found type: "" + content.getClass().getName());' in the W3CDOMStreamReader class sometimes fails with a null pointer exception. I am not able to reproduce it yet.

[2008/12/13 13:34:15.647] java.lang.NullPointerException
[2008/12/13 13:34:15.647] 	at org.apache.cxf.staxutils.W3CDOMStreamReader.moveToChild(W3CDOMStreamReader.java:167)
[2008/12/13 13:34:15.647] 	at org.apache.cxf.staxutils.AbstractDOMStreamReader.next(AbstractDOMStreamReader.java:144)
[2008/12/13 13:34:15.647] 	at org.apache.cxf.staxutils.StaxUtils.copy(StaxUtils.java:351)
[2008/12/13 13:34:15.647] 	at org.apache.cxf.staxutils.StaxUtils.copy(StaxUtils.java:313)
[2008/12/13 13:34:15.647] 	at org.apache.cxf.staxutils.StaxUtils.copy(StaxUtils.java:299)
[2008/12/13 13:34:15.647] 	at org.apache.cxf.binding.soap.interceptor.SoapOutInterceptor.writeSoapEnvelopeStart(SoapOutInterceptor.java:121)
[2008/12/13 13:34:15.647] 	at org.apache.cxf.binding.soap.interceptor.SoapOutInterceptor.handleMessage(SoapOutInterceptor.java:76)
[2008/12/13 13:34:15.647] 	at org.apache.cxf.binding.soap.interceptor.SoapOutInterceptor.handleMessage(SoapOutInterceptor.java:57)
[2008/12/13 13:34:15.647] 	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:221)
[2008/12/13 13:34:15.647] 	at org.apache.cxf.interceptor.AbstractFaultChainInitiatorObserver.onMessage(AbstractFaultChainInitiatorObserver.java:96)
[2008/12/13 13:34:15.647] 	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:262)
[2008/12/13 13:34:15.647] 	at org.apache.cxf.interceptor.OutgoingChainInterceptor.handleMessage(OutgoingChainInterceptor.java:74)
[2008/12/13 13:34:15.647] 	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:221)
[2008/12/13 13:34:15.647] 	at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:78)
[2008/12/13 13:34:15.647] 	at org.apache.cxf.transport.servlet.ServletDestination.invoke(ServletDestination.java:92)
[2008/12/13 13:34:15.647] 	at org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:279)
[2008/12/13 13:34:15.647] 	at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:161)
[2008/12/13 13:34:15.647] 	at org.apache.cxf.transport.servlet.AbstractCXFServlet.invoke(AbstractCXFServlet.java:174)
[2008/12/13 13:34:15.647] 	at org.apache.cxf.transport.servlet.AbstractCXFServlet.doPost(AbstractCXFServlet.java:152)
[2008/12/13 13:34:15.647] 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:153)
[2008/12/13 13:34:15.647] 	at javax.servlet.http.HttpServlet.service(HttpServlet.java:91)
[2008/12/13 13:34:15.647] 	at com.caucho.server.dispatch.ServletFilterChain.doFilter(ServletFilterChain.java:103)
[2008/12/13 13:34:15.647] 	at com.caucho.server.cache.CacheFilterChain.doFilter(CacheFilterChain.java:162)
[2008/12/13 13:34:15.647] 	at com.caucho.server.webapp.WebAppFilterChain.doFilter(WebAppFilterChain.java:187)
[2008/12/13 13:34:15.647] 	at com.caucho.server.dispatch.ServletInvocation.service(ServletInvocation.java:266)
[2008/12/13 13:34:15.647] 	at com.caucho.server.hmux.HmuxRequest.handleRequest(HmuxRequest.java:435)
[2008/12/13 13:34:15.647] 	at com.caucho.server.port.TcpConnection.run(TcpConnection.java:678)
[2008/12/13 13:34:15.647] 	at com.caucho.util.ThreadPool$Item.runTasks(ThreadPool.java:721)
[2008/12/13 13:34:15.647] 	at com.caucho.util.ThreadPool$Item.run(ThreadPool.java:643)
[2008/12/13 13:34:15.647] 	at java.lang.Thread.run(Thread.java:595)
","Resin 3.1.7, Java 1.5",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-12-14 01:43:09.658,,,no_permission,,,,,,,,,,,,,50386,,,Mon Jan 05 17:19:04 UTC 2009,,,,,,0|i0sybr:,167038,,,,,,,,"14/Dec/08 01:43;dkulp;
Any chance of trying with 2.1.3 or even a 2.1.4-SNAPSHOT?
","14/Dec/08 08:41;bitwalker;The problem only occurs on our production system, sometimes several times per day, sometimes after a couple of days.
We could go to 2.1.3 but I would rather not use a snapshot version. I checked the release notes but didn't see issues which might be related to this problem. But I see, that there have been quiet a few changes in the staxutils package, so 2.1.3 seems like a good idea.

I still suggest replacing 
throw new IllegalStateException(""Found type: "" + content.getClass().getName());
by 
throw new IllegalStateException();
as in revision 651669 or add a null pointer check.

But that won't solve our problem because then we will have an IllegalStateException without knowing why. ",05/Jan/09 17:19;seanoc;Dan has made changes to make this thread safe.,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jms transport doesn't support to inject  jmsconfig to JmsDestination,CXF-1943,12410557,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,njiang,njiang,njiang,12/Dec/08 07:19,09/Feb/09 22:19,14/Mar/19 02:29,16/Dec/08 08:03,2.0.9,2.1.3,,,,,,,,,,,,,2.0.10,2.1.4,,,Transports,,,,,,0,,,,"A quick look the schema and JMSDestinationBeanDefinitionParser , there is no code for the jmsconfig injection.
We also need to add a test to verify it.",,,,,,,,,,CXF-180,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-12-12 14:49:27.857,,,no_permission,,,,,,,,,,,,,50387,,,Wed Dec 31 10:22:08 UTC 2008,,,,,,0|i1adqf:,268691,,,,,,,,"12/Dec/08 14:49;ffang;Hi Willem,

Currently One way JmsConfig can get injected to JmsDestination is through the new JmsConfigureFeature.

Regards
Freeman","16/Dec/08 08:03;njiang;Applied this patch into 
trunk
http://svn.apache.org/viewvc?rev=726342&view=rev
2.1.x branch
http://svn.apache.org/viewvc?rev=726745&view=rev
2.0.x branch
http://svn.apache.org/viewvc?rev=726940&view=rev","31/Dec/08 10:22;chris@die-schneider.net;Hi,

I left out the parsing of JmsConfig reference in the JMSDestinationBeanDefinitionParser as I think it would be better to set the config in the jaxws:client or jaxws:endpoint. The JmsConfigFeature was meant as a first non intrusive way to add the config to client and endpoint. Ideally
I would think of something like:

<jaxws:client>
  <transport-config-ref=""jmsConfig"">
</jaxws:client>

I do not like the current policy of doing transport configs in conduit and destination as it is quite difficult for a beginner to build for example the destination name from namespace and endpoint name. Referencing the config in a spring like ref is much easier.

I read on the mailing list that one reason for having destination and conduit is that you can use something like name=""http://namespace/*"" but I have never seen that in projects.

Apart from this I think the solution Willem did should work quite well and allows setting the jms config from destination and conduit. But for the long run my proposal would be to dump conduit and destination in the spring configs and instead introduce a transport-config element for client and server.

What are your opinions about this? 
",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Align the remote-services.xml files with the updated schema in RFC 119,CXF-1941,12410476,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,bosschaert,bosschaert,bosschaert,11/Dec/08 13:50,24/Apr/09 21:17,14/Mar/19 02:29,11/Dec/08 14:42,,,,,,,,,,,,,,,2.2,,,,OSGi,,,,,,0,,,,The format of this file has changed and the code & samples need to be updated accordingly.,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112670,,,2008-12-11 13:50:41.0,,,,,,0|i1adqn:,268692,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"WSDLToJava doesn't generate Service interface class, when wsdl has 2 services names that differ for an underscore",CXF-1939,12410350,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,stefgasp,stefgasp,10/Dec/08 09:30,04/Dec/09 22:34,14/Mar/19 02:29,04/Nov/09 17:53,2.1.3,,,,,,,,,,,,,,2.2.5,,,,Tooling,,,,,,0,,,,"When using WSDLToJava i found a problem using two similar services names in my wsdl. 
These are my wsdl services elements:

...
<wsdl:service name=""com.finantix.xsd.strange_name.TestStrangeNames"">
    <wsdl:port name=""com.finantix.xsd.strange_name.TestStrangeNamesSoapBinding"" binding=""tns:com.finantix.xsd.strange_name.TestStrangeNamesSoapBinding"">
      <wsdlsoap:address location=""http://localhost:8089/web/services/com.finantix.xsd.strange_name-TestStrangeNames""/>
    </wsdl:port>
  </wsdl:service>
  <wsdl:service name=""com.finantix.xsd.strange_name.Test_Strange_Names"">
    <wsdl:port name=""com.finantix.xsd.strange_name.Test_Strange_NamesSoapBinding"" binding=""tns:com.finantix.xsd.strange_name.Test_Strange_NamesSoapBinding"">
      <wsdlsoap:address location=""http://localhost:8089/web/services/com.finantix.xsd.strange_name-Test_Strange_Names""/>
    </wsdl:port>
  </wsdl:service>
...

After the following generation:

wsdl2java -impl -server -client 
  -d D:\data\runtime4_wks_4.5\WS_serverDeploy\test.webservices 
  -b D:\data\runtime4_wks_4.5\WS_serverDeploy\webservices\dateTimeBinding.xml 
  -verbose -validate -autoNameResolution 
  D:\data\runtime4_wks_4.5\WS_serverDeploy\webservices\FxWServices.wsdl

in the generated code i can find only ONE service interface called ""ComFinantixXsdStrangeNameTestStrangeNames"" that refers to the second service element (the one with underscored name). 
There are a client, a server and implementation related to the previous service, but not to the second one.
",Operating System: Windows XP,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112668,,,2008-12-10 09:30:37.0,,,,,,0|i1402v:,231475,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
certs out of date in jax_rs/basic_https sample,CXF-1937,12410279,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,seanoc,seanoc,seanoc,09/Dec/08 14:58,23/Jan/09 17:59,14/Mar/19 02:29,11/Dec/08 11:46,2.2,,,,,,,,,,,,,,2.1.4,,,,Samples,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,50388,,,2008-12-09 14:58:58.0,,,,,,0|i0v25z:,179324,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Async methods are bound when not using wsdl on client side,CXF-1936,12410264,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,dkulp,dkulp,09/Dec/08 12:01,09/Feb/09 22:19,14/Mar/19 02:29,09/Dec/08 16:02,2.0.9,2.1.3,,,,,,,,,,,,,2.0.10,2.1.4,,,JAX-WS Runtime,,,,,,0,,,,"
The only time async methods are bound is in the buildOperationFromWSDL method.   The code paths for non-wsdl case don't take them into account.",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,50389,,,2008-12-09 12:01:13.0,,,,,,0|i0v1d3:,179194,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
enableAsyncMapping doesn't work outside of wsdl:operation,CXF-1935,12410168,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,jkh,jkh,08/Dec/08 06:53,09/Feb/09 22:20,14/Mar/19 02:29,08/Dec/08 21:18,2.1.3,,,,,,,,,,,,,,2.1.4,,,,,,,,,,0,,,,"I am trying to generate a service skeleton from an abstract WSDL without binding and service. If I add a jaxws:enableAsyncMapping binding to the WSDL at either wsdl:definitions or wsdl:portType level it is ignored by CXF's wsdl2java (2.1.3). Adding a binding and service to the WSDL changes this behavior. Now, the jaxws:enableAsyncMapping binding is recognized at the wsdl:definitions level but still ignored at the wsdl:portType level.
",,,,,,,,,,,,,,,,,08/Dec/08 06:54;jkh;hello-world-only-abstract.wsdl;https://issues.apache.org/jira/secure/attachment/12395530/hello-world-only-abstract.wsdl,08/Dec/08 06:54;jkh;hello-world-with-service.wsdl;https://issues.apache.org/jira/secure/attachment/12395529/hello-world-with-service.wsdl,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,50390,,,2008-12-08 06:53:27.0,,,,,,0|i1adqv:,268693,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
-npa does not work in wsdl2java due to JAXB bug.,CXF-1934,12410163,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,dkulp,derek.adams,derek.adams,08/Dec/08 00:57,03/Aug/09 20:06,14/Mar/19 02:29,29/Jul/09 03:08,2.1.3,,,,,,,,,,,,,,2.1.6,2.2.3,,,Tooling,,,,,,0,,,,"When generating classes via wsdl2java, the JAXB generated classes for complex types in the schema section do not reflect the correct namespace. For example, generating code from the WSDL below:

<wsdl:definitions xmlns=""http://example.org/math/""
	xmlns:wsdl=""http://schemas.xmlsoap.org/wsdl/"" xmlns:soap=""http://schemas.xmlsoap.org/wsdl/soap/""
	xmlns:http=""http://schemas.xmlsoap.org/wsdl/http/"" xmlns:xs=""http://www.w3.org/2001/XMLSchema""
	xmlns:soapenc=""http://schemas.xmlsoap.org/soap/encoding/"" xmlns:mime=""http://schemas.xmlsoap.org/wsdl/mime/""
	xmlns:y=""http://example.org/math/"" xmlns:type=""http://example.org/math/types/""
	targetNamespace=""http://example.org/math/"">
	<wsdl:types>
		<xs:schema xmlns=""http://example.org/math/types/""
			targetNamespace=""http://example.org/math/types/"">
			<xs:complexType name=""MathInput"">
				<xs:sequence>
					<xs:element name=""x"" type=""xs:double"" />
					<xs:element name=""z"" type=""xs:double"" />
				</xs:sequence>
			</xs:complexType>
			<xs:complexType name=""MathOutput"">
				<xs:sequence>
					<xs:element name=""result"" type=""xs:double"" />
				</xs:sequence>
			</xs:complexType>
			<xs:element name=""Add"" type=""type:MathInput"" />
			<xs:element name=""AddResponse"" type=""type:MathOutput"" />
			<xs:element name=""Subtract"" type=""type:MathInput"" />
			<xs:element name=""SubtractResponse"" type=""type:MathOutput"" />
		</xs:schema>
	</wsdl:types>
	<wsdl:message name=""AddMessage"">
		<wsdl:part name=""parameters"" element=""type:Add"" />
	</wsdl:message>
	<wsdl:message name=""AddResponseMessage"">
		<wsdl:part name=""parameters"" element=""type:AddResponse"" />
	</wsdl:message>
	<wsdl:message name=""SubtractMessage"">
		<wsdl:part name=""parameters"" element=""type:Subtract"" />
	</wsdl:message>
	<wsdl:message name=""SubtractResponseMessage"">
		<wsdl:part name=""parameters"" element=""type:SubtractResponse"" />
	</wsdl:message>
	<wsdl:portType name=""MathInterface"">
		<wsdl:operation name=""Add"">
			<wsdl:input message=""y:AddMessage"" />
			<wsdl:output message=""y:AddResponseMessage"" />
		</wsdl:operation>
		<wsdl:operation name=""Subtract"">
			<wsdl:input message=""y:SubtractMessage"" />
			<wsdl:output message=""y:SubtractResponseMessage"" />
		</wsdl:operation>
	</wsdl:portType>
	<wsdl:binding name=""MathSoapHttpBinding"" type=""y:MathInterface"">
		<soap:binding style=""document""
			transport=""http://schemas.xmlsoap.org/soap/http"" />
		<wsdl:operation name=""Add"">
			<soap:operation soapAction=""http://example.org/math/#Add"" />
			<wsdl:input>
				<soap:body use=""literal"" />
			</wsdl:input>
			<wsdl:output>
				<soap:body use=""literal"" />
			</wsdl:output>
		</wsdl:operation>
		<wsdl:operation name=""Subtract"">
			<soap:operation soapAction=""http://example.org/math/#Subtract"" />
			<wsdl:input>
				<soap:body use=""literal"" />
			</wsdl:input>
			<wsdl:output>
				<soap:body use=""literal"" />
			</wsdl:output>
		</wsdl:operation>
	</wsdl:binding>
	<wsdl:service name=""MathService"">
		<wsdl:port name=""MathEndpoint"" binding=""y:MathSoapHttpBinding"">
			<soap:address location=""http://localhost/math/math.asmx"" />
		</wsdl:port>
	</wsdl:service>
</wsdl:definitions>

results in JAXB classes with no namespaces. For example, MathInput should be in namespace ttp://example.org/math/types/.  The @XmlType declaration in MathInput.java looks like:

@XmlType(name = ""MathInput"", propOrder = {
    ""x"",
    ""z""
})

with no namespace entry. Running the generated code results in the following errors on CXF startup (in this case from Mule):

14:32:04,606 ERROR [STDERR] Dec 7, 2008 2:32:04 PM org.apache.cxf.service.factor
y.ReflectionServiceFactoryBean fillInSchemaCrossreferences
SEVERE: Schema element {http://example.org/math/types/}SubtractResponse referenc
es undefined type MathOutput for service {http://example.org/math/}MathInterface
Service.
14:32:04,606 ERROR [STDERR] Dec 7, 2008 2:32:04 PM org.apache.cxf.service.factor
y.ReflectionServiceFactoryBean fillInSchemaCrossreferences
SEVERE: Schema element {http://example.org/math/types/}Subtract references undef
ined type MathInput for service {http://example.org/math/}MathInterfaceService.
14:32:04,621 ERROR [STDERR] Dec 7, 2008 2:32:04 PM org.apache.cxf.service.factor
y.ReflectionServiceFactoryBean fillInSchemaCrossreferences
SEVERE: Schema element {http://example.org/math/types/}AddResponse references un
defined type MathOutput for service {http://example.org/math/}MathInterfaceServi
ce.
14:32:04,621 ERROR [STDERR] Dec 7, 2008 2:32:04 PM org.apache.cxf.service.factor
y.ReflectionServiceFactoryBean fillInSchemaCrossreferences
SEVERE: Schema element {http://example.org/math/types/}Add references undefined
type MathInput for service {http://example.org/math/}MathInterfaceService.

.. and the WSDL served by CXF relects two 'xs:schema' (one for elements and a separate for the complex types) with different targetNamespaces. Adding the namespace declaration to the JXC-generated sources for the complexTypes fixes the problem.

Thanks,
Derek",,,,,,,,,,,,,,,,,08/Dec/08 01:36;derek.adams;calculator.wsdl;https://issues.apache.org/jira/secure/attachment/12395521/calculator.wsdl,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2008-12-08 01:19:28.917,,,no_permission,,,,,,,,,,,,,112667,,,Mon Dec 08 22:15:22 UTC 2008,,,,,,0|i14esn:,233860,,,,,,,,08/Dec/08 01:19;bmargulies;Would you be willing to attach this  WSDL to the JIRA as a file with the 'license to ASF' box checked?,"08/Dec/08 01:26;bmargulies;By default, elementFormDefault has the value 'unqualified', at least as I read the XSD spec from W3C. Have you tried putting elementFormDefault='qualified' on the schema element?",08/Dec/08 01:36;derek.adams;Example of WSDL that does not generate namespace declarations.,"08/Dec/08 01:40;bmargulies;The plot thickens. With CXF 2.1.3, things seem to work as you would desire, and my comment about 'qualified' seems beside the point. wsdl2java spits out a package-info.java along with the Math classes that specifies the namespace 

@javax.xml.bind.annotation.XmlSchema(namespace = ""http://example.org/math/types/"")
package org.example.math.types;
","08/Dec/08 01:40;derek.adams;I tried adding elementFormDefault=""qualified"", but that didn't seem to affect the generated code. I was kind of suprised because it sounded like a likely fix. The really interesting part is, when viewing the WSDL produced by CXF when deployed, the schema elements reflect elementFormDefault=""unqualified"" even though the original schema indicated ""qualified"". I uploaded the last WSDL including the change to elementFormDefault.

Thanks!
Derek","08/Dec/08 01:45;derek.adams;Looks like we both posted at the same time. Interesting.. I am running wsdl2java from another Java program (via the org.apache.cxf.tools.wsdlto.WSDLToJava class) rather than directly from the command line. It sounds like I need to go back and look at the differences between how I set up the inputs to the Java class compared to the command line tool.

Sorry for the confusion and thanks for your help!
Derek","08/Dec/08 02:02;derek.adams;Yep. This is not a CXF issue at all. The WSDLToJava class is working properly, generating a package-info.java class to indicate the namespace and 'qualified' state. My problem is that I am using a custom classloader that requests classes on the fly as you ask for them (for on-the-fly class reloading). I am assuming that since package-info.class is never requested directly, it's not in the classloader and the annotation is not seen by CXF. Fun stuff, but not a bug at all!","08/Dec/08 02:19;dkulp;
xjc  (the JAXB RI command line tool) has a command line option (-npa) to turn off generating the package-info things.   I've never had the time to figure out how to wire that into our tools.  

For now, you could probably use xjc to regenerate just the schema types. ","08/Dec/08 03:01;bmargulies;It looks like we've already got it. All the options from SchemaCompiler.getOptions() are added to the valid options, -npa included.
","08/Dec/08 03:03;bmargulies;Oh, oops, I misread. Not turned on (yet).","08/Dec/08 04:20;derek.adams;I am trying to use the XJC npa flag by passing it directly into the WSDLToJava options map when I call WSDLToJava.run(context). The context options are set up like this:

	options.put(ToolConstants.CFG_WSDLURL, wsdlUrl);
	options.put(ToolConstants.CFG_WSDL, wsdlUrl);
	options.put(ToolConstants.CFG_OUTPUTDIR, getOutputFolder().getLocation().toFile().getAbsolutePath());
	options.put(ToolConstants.CFG_PACKAGENAME, getPackageName());
	options.put(ToolConstants.CFG_GEN_OVERWRITE, Boolean.TRUE);
	options.put(ToolConstants.CFG_GEN_SEI, Boolean.TRUE);
	options.put(ToolConstants.CFG_GEN_TYPES, Boolean.TRUE);
	options.put(ToolConstants.CFG_XJC_ARGS, ""-npa"");

I see the npa option get passed into JAXBDataBinding and I see the XJC options internal field for generating package-level annotations set to false, yet I still get a package-info.java generated and JAXB classes still look the same. I am kinda stumped on this one. Any ideas on what I might be missing?
","08/Dec/08 13:27;bmargulies;The JAXBDataBinding class processes the schemas before it adds the options from the command line to the Options object.

I will attempt a fix.","08/Dec/08 13:35;bmargulies;We might have a JAXB bug on our hands. I've now fixed the code order, and watched the flag go into the xjc device, and I still get the stupid file.","08/Dec/08 19:22;bmargulies;I've got this in my sights. There's a JAXB API called 'load' that we never call, and the option for npa doesn't go live as a result.","08/Dec/08 19:43;bmargulies;This is blocked on https://jaxb.dev.java.net/issues/show_bug.cgi?id=576. We might possibly be able to rewrite the entire JAXB back-end in terms of the same classes that the RI command uses (ModelLoader, Model, etc) but we will probably run into some block, and it would be a lot of work. So this has to sit for the forseeable future.",08/Dec/08 22:15;derek.adams;I will figure out a workaround to get the package annotations into my custom classloader for now. That should keep things moving until the JAXB stuff is fixed. Thanks for your work on this!,,,,,,,,,,,,,,,
Spring injection with bare parameter style fails to deploy,CXF-1932,12409958,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,martinmurphy,martinmurphy,04/Dec/08 14:43,09/Feb/09 22:19,14/Mar/19 02:29,04/Dec/08 16:21,2.0.9,,,,,,,,,,,,,,2.0.10,,,,JAX-WS Runtime,,,,,,0,,,,"If you have a service endpoint implementation that does not specify the WSDL location, with some methods that are not WebMethods and the bare parameter style is used, then CXF will fail to publish the enpoint.

When deploying on tomcat I see this error:
{quote}
04-Dec-2008 14:24:05 org.springframework.web.context.ContextLoader initWebApplicationContext
SEVERE: Context initialization failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 
'personService': Invocation of init method failed; nested exception is javax.xml.ws.WebServiceException: org.apache.cxf.service.factory.ServiceConstructionException: 
Service class org.apache.cxf.springtest.PersonImpl method getMultiMap part 
{http://cxf.apache.org/springtest}getMultiMapResponse cannot be mapped to schema. 
Check for use of a JAX-WS-specific type without the JAX-WS service factory bean.
Caused by: javax.xml.ws.WebServiceException: org.apache.cxf.service.factory.ServiceConstructionException: 
Service class org.apache.cxf.springtest.PersonImpl method getMultiMap part 
{http://cxf.apache.org/springtest}getMultiMapResponse cannot be mapped to schema. 
Check for use of a JAX-WS-specific type without the JAX-WS service factory bean.
        at org.apache.cxf.jaxws.EndpointImpl.doPublish(EndpointImpl.java:258)
        at org.apache.cxf.jaxws.EndpointImpl.publish(EndpointImpl.java:192)
        at org.apache.cxf.jaxws.EndpointImpl.publish(EndpointImpl.java:380)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:585)        
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:1242)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1208)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1172)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:427)
        at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:249)
        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:155)
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:246)
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:160)
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:291)
        at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:352)
        at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:246)
        at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:189)
        at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:49)
        at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:3764)
        at org.apache.catalina.core.StandardContext.start(StandardContext.java:4216)
        at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:760)
        at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:740)
        at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:544)
        at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:831)
        at org.apache.catalina.startup.HostConfig.deployWARs(HostConfig.java:720)
        at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:490)
        at org.apache.catalina.startup.HostConfig.check(HostConfig.java:1218)
        at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:293)
        at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:120)
        at org.apache.catalina.core.ContainerBase.backgroundProcess(ContainerBase.java:1306)
        at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1570)
        at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1579)
        at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.run(ContainerBase.java:1559)
        at java.lang.Thread.run(Thread.java:595)
Caused by: org.apache.cxf.service.factory.ServiceConstructionException: Service
class org.apache.cxf.springtest.PersonImpl method getMultiMap part 
{http://cxf.apache.org/springtest}getMultiMapResponse cannot be mapped to schema. 
Check for use of a JAX-WS-specific type without the JAX-WS service factory bean.
        at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.createBareMessage(ReflectionServiceFactoryBean.java:969)
        at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.buildServiceFromClass(ReflectionServiceFactoryBean.java:347)
        at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.initializeServiceModel(ReflectionServiceFactoryBean.java:383)
        at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.create(ReflectionServiceFactoryBean.java:169)
        at org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean.create(JaxWsServiceFactoryBean.java:98)
        at org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory.createEndpoint(AbstractWSDLBasedEndpointFactory.java:98)
        at org.apache.cxf.frontend.ServerFactoryBean.create(ServerFactoryBean.java:114)
        at org.apache.cxf.jaxws.JaxWsServerFactoryBean.create(JaxWsServerFactoryBean.java:160)
        at org.apache.cxf.jaxws.EndpointImpl.getServer(EndpointImpl.java:327)
        at org.apache.cxf.jaxws.EndpointImpl.doPublish(EndpointImpl.java:242)
        ... 35 more
04-Dec-2008 14:24:05 org.apache.catalina.core.StandardContext start
SEVERE: Error listenerStart
04-Dec-2008 14:24:05 org.apache.catalina.core.StandardContext start
SEVERE: Context [/springtest-0.0.1-SNAPSHOT] startup failed due to previous errors
{quote}

Note this was discussed last month in [this thread|http://www.nabble.com/commit%3A-r688596-cxf-2.0.9-tt20500264.html] and the problematic area of code was highlighted. Where a method will be incorrectly returned as a webmethod when it is not defined.

Note this seems to work in 2.0.8 and 2.1.3 (didn't try an earlier 2.1 version). ServiceMix 3 uses CXF 2.0.9 in it's CXF Service Engine where the WSDL location cannot be specified.","Reproduced this on CXF 2.0.9 with Tomcat 5.5.27, the app deploys on 2.1.3",,,,,,,,,,,,,,,,04/Dec/08 14:47;martinmurphy;springtest.zip;https://issues.apache.org/jira/secure/attachment/12395287/springtest.zip,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,Moderate,,,,,,,,,,,112666,,,Thu Dec 04 16:28:21 UTC 2008,,,,,,0|i0v45j:,179646,,,,,,,,04/Dec/08 14:47;martinmurphy;Here's an example that shows the problem.,"04/Dec/08 16:28;martinmurphy;Wow, that was quick! Thanks Dan.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Can't include the <jaxws:dataBinding> inside the <jaxws:endpoint>,CXF-1931,12409956,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,njiang,njiang,njiang,04/Dec/08 14:33,09/Feb/09 22:19,14/Mar/19 02:29,05/Dec/08 10:04,2.0.4,2.0.5,2.0.6,2.0.7,2.0.8,2.0.9,2.1,2.1.1,2.1.2,2.1.3,,,,,2.0.10,2.1.4,,,,,,,,,0,,,,"See nabble:
http://www.nabble.com/UnitOfWork-td20829434s22882.html",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,50391,,,Fri Dec 05 10:04:38 UTC 2008,,,,,,0|i0v3zr:,179620,,,,,,,,"05/Dec/08 10:04;njiang;trunk
 http://svn.apache.org/viewvc?rev=723338&view=rev

2.1.x
 http://svn.apache.org/viewvc?rev=723545&view=rev

2.0.x
 http://svn.apache.org/viewvc?rev=723551&view=rev


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JAX-WS + JAXB does not honor the service factory isAnonymousWrapperTypes() flag,CXF-1930,12409634,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,valdemar,valdemar,02/Dec/08 09:41,09/Feb/09 22:20,14/Mar/19 02:29,03/Dec/08 19:28,2.1.3,,,,,,,,,,,,,,2.1.4,,,,JAXB Databinding,,,,,,0,,,,"I'm having trouble getting JAX-WS with JAXB databinding to work with the configuration option for using anonymous wrapper types:

JaxWsServerFactoryBean serverFactory = new JaxWsServerFactoryBean();
// set address, service class etc...
serverFactory.getServiceFactory().setAnonymousWrapperTypes(true);
serverFactory.create();

Doing this doesn't result in the expected results (there are still separate named complex types besides the elements in the WSDL).

It seems to work fine with the simple frontend + aegis databinding.",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-12-02 15:19:01.285,,,no_permission,,,,,,,,,,,,,50392,,,Wed Dec 03 20:03:50 UTC 2008,,,,,,0|i0v19b:,179177,,,,,,,,"02/Dec/08 09:42;valdemar;Reply by mail from Daniel Kulp:

{quote}
I see the problem.   With 2.1.x, if ASM is on the classpath, we use ASM to
generate jaxb wrapper beans in memory and then let JAXB generate the schema.
However, those generated wrapper beans aren't honoring that flag.

If you pull asm off the classpath, it probably will generate what you expect.

I THINK the problem is at line 197 of WrapperClassGenerator.    It needs to
wrap the creation of the XmlType element with a call into the service factory
bean (it's a field on the WrapperClassGenerator) to check that flag and not
generate that annotation if true.

Could you log a JIRA for that (feel free to assign to me)?   If you have the
ability to checkout the source and build it, it would be great if you could
give that fix a try as well and attache a patch.

I'm busy for the next couple days and won't get a chance to look at it
immediately so I want to make sure it doesn't get lost.
{quote}","02/Dec/08 10:41;valdemar;I tried both pulling the asm-jar from the classpath and patching WrapperClassGenerator, but couldn't get any of those two ""fixes"" to work. ","02/Dec/08 15:19;dkulp;
Any chance you could attach a small project that shows the issue.   That would make debugging this quite  a bit easier.
","03/Dec/08 18:59;dkulp;
OK.   I was on the right track, but not quite.   For anonymous types, you have to generate the XmlType annotation, but set the name attribute to an empty string.

         av0 = cw.visitAnnotation(""Ljavax/xml/bind/annotation/XmlType;"", true);
         if (!anonymous) {
            av0.visit(""name"", wrapperElement.getLocalPart());
            av0.visit(""namespace"", wrapperElement.getNamespaceURI());
        } else {
            av0.visit(""name"", """");
        }
        av0.visitEnd();

Will commit once tests done running.
",03/Dec/08 20:03;valdemar;Thank you for fixing this.,,,,,,,,,,,,,,,,,,,,,,,,,,
CXF-Bundle should include JSR311-API,CXF-1929,12409514,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,ffang,ceefour,ceefour,30/Nov/08 18:52,24/Apr/09 21:17,14/Mar/19 02:29,07/Dec/08 13:00,2.1.3,,,,,,,,,,,,,,2.2,,,,JAX-RS,OSGi,,,,,0,,,,"cxf-bundle does not include jsr311-api, and a OSGi-compatible jsr311-api bundle is not provided externally.

This makes application developers have to embed jsr311-api inside application bundle JAR(s).

Note that in my case, simply wrapping jsr311-api (0.8) and installing it (into ServiceMix kernel) doesn't work, throwing ClassNotFoundException in javax.ws.rs.core and org.apache.cxf.jaxrs.utils . Only embedding works.","OSGi, ServiceMix, Spring-DM",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-11-30 20:34:20.976,,,no_permission,,,,,,,,,,,,,112665,,,Fri Feb 06 16:54:38 UTC 2009,,,,,,0|i1adrb:,268695,,,,,,,,"30/Nov/08 20:34;sergey_beryozkin;Hi, I think we may need to contribute a jsr311-api bundle to a
http://svn.apache.org/repos/asf/servicemix/smx4/specs/trunk/



",06/Dec/08 02:16;ffang;create SMX4-167 to track this issue on servicemix side,07/Dec/08 13:00;ffang;SMX4-167 is done,"07/Dec/08 21:57;sergey_beryozkin;Thanks Freeman ! I didn't realize you were looking into it. 
If you can get a chance, may be you can also do the same for 1.0 api ? 

Actually, I'm wondering, would it make sense just to rename 

trunk/jsr311-api-0.8

into

trunk/jsr311-api-1.0

and jsr311-api-1.0 specs bundle, given that it only contains a rewritten FactoryFinder should be usable in cases when cxf 2.1.x which currently depends on 0.8 api is used ?

","08/Dec/08 00:43;ffang;Hi Sergey,

Since jsr311 api 0.8 and 1.0 are different, so we need different bundles for both.
I will create another bundle for jsr311 api 1.0.

Regards
Freeman","08/Dec/08 05:37;ffang;also added bundle for jsr-311 1.0 api in servicemix specs
http://svn.apache.org/viewvc?rev=724264&view=rev","06/Feb/09 16:54;sergey_beryozkin;See http://svn.apache.org/repos/asf/servicemix/smx4/specs/trunk/jsr311-api-1.0/
        http://svn.apache.org/repos/asf/servicemix/smx4/specs/trunk/jsr311-api-0.8/

Many thanks, Freeman",,,,,,,,,,,,,,,,,,,,,,,,
Misleading phase for java2ws goal in Maven Integration and Plugin article.,CXF-1927,12409033,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,atarutin,atarutin,21/Nov/08 22:03,09/Feb/09 22:20,14/Mar/19 02:29,03/Dec/08 19:31,,,,,,,,,,,,,,,2.1.4,,,,Documentation,,,,,,0,,,,The example in the documentation for Maven Integration and Plugin (http://cwiki.apache.org/CXF20DOC/maven-integration-and-plugin.html) for Java2WS task assigns the execution of the java2ws goal in generate-test-sources phase. This is misleading. A better phase for the generation is process-classes.,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-12-03 19:31:38.52,,,no_permission,,,,,,,,,,,,,50394,,,Wed Dec 03 19:31:38 UTC 2008,,,,,,0|i140iv:,231547,,,,,,,,03/Dec/08 19:31;dkulp;Page updated.   Thanks,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Problem with servelt mappin on 2.2-SNAPSHOT,CXF-1925,12408944,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,sergey_beryozkin,roekoe,roekoe,20/Nov/08 20:16,09/Feb/09 22:20,14/Mar/19 02:29,18/Dec/08 18:27,2.2,,,,,,,,,,,,,,2.1.4,,,,Configuration,JAX-RS,,,,,0,,,,"When running a jax-rs REST service with the 2.2-snapshot release there is a problem when CXFServlet maps to somthing else then /*. I tried:

/servlet-mapping-path/bean-config-path/service-path. 

This works fine under 2.1.3. But version 2.2-snapshot. returns a ""no operation defined"" for this settup.",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-11-24 11:13:42.249,,,no_permission,,,,,,,,,,,,,50396,,,Thu Dec 18 18:27:42 UTC 2008,,,,,,0|i0v18v:,179175,,,,,,,,"24/Nov/08 11:13;sergey_beryozkin;In 2.2-SNAPSHOT/2.1.4-SNAPSHOT, HttpServletRequest Request URI is used, as opposed to PathInfo used.

With CXFServlet using ""/*"", Request URI and PathInfo are equal, but with CXFServlet using more restricting patterns like ""/jaxrs/*"" they would be different.

The reason it was done is to be able to handle encoded URIs, as PathInfo already contains a decoded value and it was causing CXF JAXRS failing to handle encoded URIs.

I did a quick test yesterday and it all should work as long as you root resource class's PATH gets updated

For ex if  CXFServlet uses ""/jaxrs/*"" and jaxrs:server uses ""/bookstore"", then root resource class should have

@Path(""/jaxrs/bookstore"") 

for requests like 

GET /jaxrs/bookstore or GET /jaxrs/bookstore/books handled correctly

Can  you update your root resource class and see if things are still working for you ?

I might consider adding an attribute to a jaxrs:server  to tell the runtime to use PathInfo only when selecting root resource classes. is it something  you would like us to do ? It might provide that extra encapsulation layer in cases when it's desirable to keep any changes to web.xml away from the code...

","18/Dec/08 18:27;sergey_beryozkin;No need to push URI segments from CXFServlet to a resource class as I advised earlier - this issue has been fixed now and will work as expected
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Infinite loop in FileUtils.getDefaultTempDir() when ""java.io.tmpdir"" directory does not exist",CXF-1924,12408934,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,seanoc,gawor@mcs.anl.gov,gawor@mcs.anl.gov,20/Nov/08 17:54,11/Dec/10 18:57,14/Mar/19 02:29,05/Dec/08 16:03,2.1.4,2.2,,,,,,,,,,,,,2.0.10,2.1.4,,,Core,,,,,,0,,,,"FileUtils.getDefaultTempDir() can go into a infinite loop when the ""java.io.tmpdir"" system property is set to an non-existent directory. Here's the code that causes the problem:

            s = System.getProperty(""java.io.tmpdir"");
            File f = new File(s, ""cxf-tmp-"" + x);
            while (!f.mkdir()) {
                x = (int)(Math.random() * 1000000);
                f = new File(s, ""cxf-tmp-"" + x);
            }

",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-12-05 16:03:18.083,,,no_permission,,,,,,,,,,,,,50397,,,Thu Dec 09 18:25:56 UTC 2010,,,,,,0|i0sybz:,167039,,,,,,,,05/Dec/08 16:03;seanoc;added check to code and a unit test,"09/Dec/10 18:25;eric.citaire;I'd like to reopen this issue because it still goes in an infinite loop when the property is set to an non-*writable* directory. The fix doesn't check that.

May be something like this would prevent an infinite loop :

{{s = System.getProperty(""java.io.tmpdir"");}}
{{File checkExists = new File(s);}}
{{if (!checkExists.exists() || !checkExists.isDirectory() || !checkExists.canWrite()) {}}
  {{throw new RuntimeException(""The directory ""}}
    {{+ checkExists.getAbsolutePath()}}
    {{+ "" is not a writable directory"");}}
{{}}}
{{File f = new File(s, ""cxf-tmp-"" + x);}}
{{for (int attempts=0; attempts<10; attempts++) {}}
  {{x = (int)(Math.random() * 1000000);}}
  {{f = new File(s, ""cxf-tmp-"" + x);}}
  {{if (f.mkdir()) break;}}
{{}}}


Thank you.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Message ""SOAPBinding can not on method with RPC style"" ?",CXF-1923,12408839,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,stoicflame,stoicflame,19/Nov/08 18:07,09/Feb/09 22:20,14/Mar/19 02:29,20/Nov/08 20:28,2.1.3,,,,,,,,,,,,,,2.1.4,,,,JAX-WS Runtime,,,,,,0,,,,"Here's the method:

 @SOAPBinding (
   style = SOAPBinding.Style.RPC
 )
 String addInfoSet(String sourceId, InfoSet infoSet) throws ServiceException;

And here's what I get:

SOAPBinding can not on method with RPC style
       org.apache.cxf.jaxws.support.JaxWsServiceConfiguration.isWrapped(JaxWsServiceConfiguration.java:662)
       org.apache.cxf.service.factory.ReflectionServiceFactoryBean.isWrapped(ReflectionServiceFactoryBean.java:1670)
       org.apache.cxf.service.factory.ReflectionServiceFactoryBean.createOperation(ReflectionServiceFactoryBean.java:768)
       org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean.createOperation(JaxWsServiceFactoryBean.java:478)
       org.apache.cxf.service.factory.ReflectionServiceFactoryBean.createInterface(ReflectionServiceFactoryBean.java:754)
       org.apache.cxf.service.factory.ReflectionServiceFactoryBean.buildServiceFromClass(ReflectionServiceFactoryBean.java:349)
       org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean.buildServiceFromClass(JaxWsServiceFactoryBean.java:519)
       org.apache.cxf.service.factory.ReflectionServiceFactoryBean.initializeServiceModel(ReflectionServiceFactoryBean.java:410)
       org.apache.cxf.service.factory.ReflectionServiceFactoryBean.create(ReflectionServiceFactoryBean.java:189)
       org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean.create(JaxWsServiceFactoryBean.java:164)
       org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory.createEndpoint(AbstractWSDLBasedEndpointFactory.java:100)
       org.apache.cxf.frontend.ServerFactoryBean.create(ServerFactoryBean.java:117)
       org.apache.cxf.jaxws.JaxWsServerFactoryBean.create(JaxWsServerFactoryBean.java:168)
       org.apache.cxf.jaxws.EndpointImpl.getServer(EndpointImpl.java:336)
       org.apache.cxf.jaxws.EndpointImpl.doPublish(EndpointImpl.java:251)
       org.apache.cxf.jaxws.EndpointImpl.publish(EndpointImpl.java:201)
       org.apache.cxf.jaxws.EndpointImpl.publish(EndpointImpl.java:394)

Whether the exception should be thrown or not, the message should be clarified.

Thanks!

",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-11-20 02:21:31.607,,,no_permission,,,,,,,,,,,,,50398,,,Thu Nov 20 20:28:48 UTC 2008,,,,,,0|i1adrr:,268697,,,,,,,,"20/Nov/08 02:21;bmargulies;Here's the explanation, but it's not going to be a big help.

The code rejects any individual method with an @SOAPBinding with a style of RPC. It accepts RPC on the overall service, but not on methods. I've improved the message, but I'm going to see if Dan has anything to say about the reasonableness of the exception.

SOAPBinding_MESSAGE_RPC= JAX-WS SOAPBinding annotation with Style of RPC found on method {0}. This is not supported.
","20/Nov/08 02:26;bmargulies;Dan,

I can't commit my improved error message since I can't talk to svn.apache.org!

",20/Nov/08 13:00;bmargulies;Committed.,"20/Nov/08 20:28;dkulp;
The error message is now better, but I've also fixed code run previous to where that error occurs that should prevent it even getting there.   When mapping the service to the service model, it now properly gets the operation as RPC (not doc/lit).  However, when actually setting up the endpoint, since we cannot have both RPC and DOC interceptors on the chain right now, it will throw an exception at that point explaining that the WSI-BP prohibits such services.",,,,,,,,,,,,,,,,,,,,,,,,,,,
Oracle WSDL files contain ESB port entry that causes connection failures,CXF-1920,12408709,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Critical,Fixed,dkulp,sweetfa,sweetfa,18/Nov/08 05:36,09/Feb/09 22:20,14/Mar/19 02:29,27/Jan/09 04:14,2.1.3,,,,,,,,,,,,,,2.1.4,,,,Core,JAX-WS Runtime,Soap Binding,,,,0,,,,"A WSDL file generated by Oracle ESB web services creates a port-type entry which is not supported by CXF of the form

<port name=""__esb_Acknowledge_execute_ppt"" binding=""tns:__esb_Acknowledge_execute_ppt""></port>

CXF attempts to create a binding to the port name which fails with the following 

Caused by: org.apache.cxf.wsdl11.WSDLRuntimeException: Cannot find the destination factory, check the port //wsdl:port[@name={0}]

A correct soap name is available in the WSDL but because there is no defined port name or matching transport CXF throws this exception when working with Oracle ESB web services.

A quick fix for it may be to check for a null bindingId in the method org.apache.cxf.jaxws.ServiceImpl.addPort and not add if null bindingId.  I am unable to download the sources here to be able to verify if this will hold up.

    public final void addPort(QName portName, String bindingId, String address) {
        PortInfoImpl portInfo = new PortInfoImpl(bindingId, portName, serviceName);
        portInfo.setAddress(address);
        portInfos.put(portName, portInfo);
    }

In 2.1.2 the same exception was being thrown when initially creating the service which has since been modified as part of the 2.1.3 release.

In my particular case I am not interested in the Oracle ESB port so to ignore its existence and continue working with the SOAP port would be advantageous.
",,,,,,,,,,,,,,,,,20/Nov/08 03:49;sweetfa;Acknowledge.wsdl;https://issues.apache.org/jira/secure/attachment/12394305/Acknowledge.wsdl,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2008-11-18 10:58:57.103,,,no_permission,,,,,,,,,,,,,50401,,,Thu Nov 20 03:49:35 UTC 2008,,,,,,0|i0syc7:,167040,,,,,,,,"18/Nov/08 10:58;gmazza;I suspect Dan would understand this problem more, but in the meantime, can you create for us a dummy WSDL generated by Oracle ESB that does this?  I want to make sure it is a doc/lit one and not a an rpc/encoded or similar that CXF can't handle anyway.

Also, it might be good to see if Metro can handle that WSDL (http://www.jroller.com/gmazza/entry/creating_a_wsdl_first_web1) --if it does so without complaint that would add a lot of weight for us to make this change.  If it also halts with Metro though, that might indicate (1) we're behaving as we're supposed to with respect to the JAX-WS spec, or (2) something is wrong with those Oracle WSDL's, or (3) there's legitimate user reasons for halting with such an error (""Ignore its existence and continue working with the SOAP port would be advantageous"" might not be so helpful if there was a typo or similar problem--users would *want* in this case CXF to halt and let them know about it.)
",20/Nov/08 03:49;sweetfa;Example of WSDL generated file for Oracle ESB,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Corba unit test demands unexpected count, perhaps working around XmlSchema bug",CXF-1919,12408694,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,bmargulies,bmargulies,18/Nov/08 00:11,04/Dec/09 22:34,14/Mar/19 02:29,28/Oct/09 17:31,2.2,,,,,,,,,,,,,,2.2.5,,,,CORBA Binding,,,,,,0,,,,"testWsAddressingAccountType asks for two corba:object elements. I only see one in the wsdl. I don't have a theory as to why this is related to XmlSchema fixes. In any case, I'm making the code accept either 1 or 2, and posting this JIRA to look for eventual attention from someone who actually understands CORBA.",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-10-28 17:31:08.088,,,no_permission,,,,,,,,,,,,,112664,,,Wed Oct 28 17:31:08 UTC 2009,,,,,,0|i140kf:,231554,,,,,,,,"28/Oct/09 17:31;dkulp;
The correct number actually is 2 as the generator adds another corba:object to the type map.   

I think the problem is in the DOM implementation that may have changed in the same timeframe.  (different version of xerces or something).   With XmlSchema now and Xerces 2.9.1, it does resolve 2.   

The main issue is the call to getElementsByTagName(tagname) which doesn't really examine the namespaces and prefixes and such.  I've changed the test to actually look at the namespace + localpart.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
W3CDOMStreamReader returns wrong type in moveToChild(),CXF-1915,12408498,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,gigerstyle,gigerstyle,14/Nov/08 13:44,09/Feb/09 22:19,14/Mar/19 02:29,17/Nov/08 19:16,2.0.9,,,,,,,,,,,,,,2.0.10,2.1.4,,,Core,,,,,,0,,,,"I hit a special case under the following conditions:

- WSS enabled so that the W3CDOMStreamReader is called.
- A Document where directly after an element a xml-comment follows (int my case directly after the root element):
<rootElement><!-- some comment --><nextChildElement>

In this case where no TextNode or something other is between, I got the following NPE:

Caused by: java.lang.NullPointerException
        at org.apache.cxf.staxutils.W3CDOMStreamReader.getTextCharacters(W3CDOMStreamReader.java:289)
        at org.apache.cxf.staxutils.DepthXMLStreamReader.getTextCharacters(DepthXMLStreamReader.java:159)
        at com.sun.xml.bind.v2.runtime.unmarshaller.StAXStreamConnector.handleCharacters(StAXStreamConnector.java:282)
        at com.sun.xml.bind.v2.runtime.unmarshaller.StAXStreamConnector.bridge(StAXStreamConnector.java:146)
        at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl.unmarshal0(UnmarshallerImpl.java:332)
        at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl.unmarshal(UnmarshallerImpl.java:311)
        at org.apache.cxf.jaxb.JAXBEncoderDecoder.unmarshall(JAXBEncoderDecoder.java:578)
        ... 53 more

Attached is a patch which corrects 1) the order and 2) returns correctly the comment type if the current content is a comment
node. The order is very imortant as e.g the com.sun.xml.messaging.saaj.soap.impl.CommentImpl implements javax.xml.soap.Text 
where javax.xml.soap.Text implements org.w3c.dom.Text and so it must be checked before org.w3c.dom.Text

This bug has its root in the xfire stack. An xfire based project from us is also affected.
I think the reason why this wasn't detected until now is, that most users use a binding framework.  Binding framworks
normally don't marshall comments if nothing special is configured.

Thanks

Marc",jdk 1.5 / 1.6,,,,,,,,,,,,,,,,14/Nov/08 13:44;gigerstyle;W3CDOMStreamReader-commentReading-fix.patch;https://issues.apache.org/jira/secure/attachment/12393938/W3CDOMStreamReader-commentReading-fix.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2008-11-14 20:48:48.269,,,no_permission,,,,,,,,,,,,,50404,,,Fri Nov 14 20:48:48 UTC 2008,,,,,,0|i0syd3:,167044,,,,,,,,"14/Nov/08 20:48;dkulp;
I actually think this is already fixed on trunk.  (not merged to 2.0.x yet.   I'll do that in a moment.)

Basically, the code was changed to a switch on the ""node.getType()"" call which is also faster as it avoids all the casting that is problematic anyway.

        switch (content.getNodeType()) {
        case Node.ELEMENT_NODE:
            return START_ELEMENT;
        case Node.TEXT_NODE:
            return CHARACTERS;
        case Node.COMMENT_NODE:
            return COMMENT;
        case Node.CDATA_SECTION_NODE:
            return CDATA;
        case Node.ENTITY_REFERENCE_NODE:
            return ENTITY_REFERENCE;
        default:
            throw new IllegalStateException(""Found type: "" + content.getClass().
getName());
        }

It would be great if you could double check that that works.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
javax.xml.soap.SOAPMessage loses HTTP header information when passing through CXF Interceptors,CXF-1914,12408469,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,,majikshoe,majikshoe,14/Nov/08 03:27,05/Oct/09 19:37,14/Mar/19 02:29,05/Oct/09 16:28,2.1.3,,,,,,,,,,,,,,2.2.2,,,,Core,,,,,,0,,,,"We are using Camel with CXF to enable a lightwight ESB-like integration solution.  One of the services we are proxying requires a binary Soap attachment and so we need to consume and resend the multipart HTTP request, and the headers to support it.

We pass in a HTTP request with the following headers:
 Content-Length: 221357
 SOAPAction: """"
 Content-Type: multipart/related; type=""application/xop+xml""; start=""<rootpart@soapui.org>""; start-info=""text/xml""; boundary=""----=_Part_3_21579068.1226633091650"" 
 MIME-Version: 1.0

But when Camel gets it, the headers have been discarded and replaced with only ""Content-Type: text/xml; charset=utf-8""

After a few hours debugging, the problem seems to be that:

* DispatchInDatabindingInterceptor creates the java.xml.soap.SOAPMessage correctly using the InputStream from the request, and adds it to a org.apache.cxf.message.Message object
* DispatchInDatabindingInterceptor$PostDispatchSOAPHandlerInterceptor removes the SOAPMessage object from org.apache.cxf.message.Message and converts it into a javax.xml.transform.Source, and puts that into the org.apache.cxf.message.Message object
* DispatchInDatabindingInterceptor$PostDispatchLogicalHandlerInterceptor removes the javax.xml.transform.Source and re-creates the java.xml.soap.SOAPMessage again using the Source, and puts it into the org.apache.cxf.message.Message object

Converting to a Source loses the original header information, so the new SOAPMessage created from that Source only has the default headers. This is a problem for us, and others requiring the HTTP headers to be passed through intact from CXF.

If I get some time on the weekend I'll write a test to expose it. 

Thanks!
",Any,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-10-05 16:28:16.503,,,no_permission,,,,,,,,,,,,,112662,,,Mon Oct 05 16:28:16 UTC 2009,,,,,,0|i0sydb:,167045,,,,,,,,"05/Oct/09 16:28;dkulp;
This was resolved in CXF 2.2.2 as part of the big provider/dispatch refactor that  resulted in that interceptor being completely removed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JMS Transport does not work with JMS 1.0.2 provider,CXF-1909,12408298,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,chris@die-schneider.net,chris@die-schneider.net,11/Nov/08 23:20,09/Feb/09 22:19,14/Mar/19 02:29,20/Nov/08 20:41,2.0.9,2.1.3,,,,,,,,,,,,,2.0.10,2.1.4,,,Transports,,,,,,0,,,,"The following error occurs when starting a JMSDestinaation with a JMs provider that only supports JMS 1.0.2

http://www.nabble.com/JMS-1.0.2-support......-to19919693.html

java.lang.AbstractMethodError:
progress.message.jclient.QueueConnectionFactory.createConnection()Ljavax
/jms/Connection;
at
org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapt
er.doCreateConnection(UserCredentialsConnectionFactoryAdapter.java:177)
at
org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapt
er.createConnection(UserCredentialsConnectionFactoryAdapter.java:149)
at
org.springframework.jms.connection.SingleConnectionFactory.doCreateConne
ction(SingleConnectionFactory.java:316)
at
org.springframework.jms.connection.SingleConnectionFactory.initConnectio
n(SingleConnectionFactory.java:270)
at
org.springframework.jms.connection.SingleConnectionFactory.createConnect
ion(SingleConnectionFactory.java:215)
at
org.springframework.jms.connection.SingleConnectionFactory.createQueueCo
nnection(SingleConnectionFactory.java:227)
at
org.springframework.jms.core.JmsTemplate102.createConnection(JmsTemplate
102.java:170)
at
org.springframework.jms.core.JmsTemplate.execute(JmsTemplate.java:461)
at
org.springframework.jms.core.JmsTemplate.execute(JmsTemplate.java:436)
at
org.apache.cxf.transport.jms.JMSFactory.resolveOrCreateDestination(JMSFa
ctory.java:120)
at
org.apache.cxf.transport.jms.JMSFactory.createJmsListener(JMSFactory.jav
a:101)
at
org.apache.cxf.transport.jms.JMSDestination.activate(JMSDestination.java
:99)
at
org.apache.cxf.transport.AbstractObservable.setMessageObserver(AbstractO
bservable.java:48)
at
org.apache.cxf.binding.AbstractBindingFactory.addListener(AbstractBindin
gFactory.java:166)
at
org.apache.cxf.binding.soap.SoapBindingFactory.addListener(SoapBindingFa
ctory.java:721)
at org.apache.cxf.endpoint.ServerImpl.start(ServerImpl.java:122)
at org.apache.cxf.jaxws.EndpointImpl.doPublish(EndpointImpl.java:263)
at org.apache.cxf.jaxws.EndpointImpl.publish(EndpointImpl.java:201)
at
org.apache.cxf.jaxws.spi.ProviderImpl.createAndPublishEndpoint(ProviderI
mpl.java:84)
at javax.xml.ws.Endpoint.publish(Endpoint.java:47) ",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-11-20 20:41:04.635,,,no_permission,,,,,,,,,,,,,50407,,,Thu Nov 20 20:41:04 UTC 2008,,,,,,0|i0v19r:,179179,,,,,,,,"11/Nov/08 23:21;chris@die-schneider.net;Dan found the reason:

I think I see the issue.   If jms102 support is enabled, we need to create a 
SingleConnectionFactory102 instead of SingleConnectionFactory.  Probably 
should check the spring-jms jar for other classes ending in 102 to see if we 
need to change anything else.


Dan

",11/Nov/08 23:34;chris@die-schneider.net;I just synchronized the code and I think you already solved this issue. Is that right?,"20/Nov/08 20:41;dkulp;
Tested with an old version of Sonic.   Now works fine.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
CXF codegen: incorrect portName annotation.,CXF-1908,12408261,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,exoman,exoman,11/Nov/08 17:10,24/Apr/09 21:17,14/Mar/19 02:29,24/Nov/08 15:09,2.1.2,,,,,,,,,,,,,,2.1.3,,,,,,,,,,0,,,,"
I'm generating sources with CXF maven plugin

       <artifactId>cxf-codegen-plugin</artifactId>
       <version>2.1.2</version>

I have just noticed that I get incorrect portName annotation.

The full service description and other relative files are available at http://docs.oasis-open.org/wsrp/v2/

(http://docs.oasis-open.org/wsrp/v2/wsrp-service.wsdl)
=== service.wsdl =================================
...
 <wsdl:service name=""WSRPService"">
...
   <wsdl:port binding=""v2bind:WSRP_v2_ServiceDescription_Binding_SOAP""
name=""WSRP_v2_ServiceDescription_Service"">
     <soap:address location=""http://my.service:8082/WSRPService""/>
   </wsdl:port>
   <wsdl:port binding=""v2bind:WSRP_v2_Registration_Binding_SOAP""
name=""WSRP_v2_Registration_Service"">
     <soap:address location=""http://my.service:8082/WSRPService""/>
   </wsdl:port>
...
=============================================

Generated sources:

===WSRPV2RegistrationPortTypeImpl=================================
@javax.jws.WebService(name = ""WSRPV2RegistrationPortType"",
                     serviceName = ""WSRPService"",
                     portName =
""WSRP_v2_ServiceDescription_Service"",.....) <<--- HERE is an error
public class WSRPV2RegistrationPortTypeImpl implements
WSRPV2RegistrationPortType {
=============================================================

===WSRPV2ServiceDescriptionPortTypeImpl=================================
@javax.jws.WebService(name = ""WSRPV2ServiceDescriptionPortType"",
                     serviceName = ""WSRPService"",
                     portName = ""WSRP_v2_ServiceDescription_Service"",.....)
public class WSRPV2ServiceDescriptionPortTypeImpl implements
WSRPV2ServiceDescriptionPortType {
==================================================================

PS: related mail thread at http://www.nabble.com/CXF-codegen%3A-incorrect-portName-annotation.-to20441105.html",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-11-20 21:45:31.182,,,no_permission,,,,,,,,,,,,,112659,,,Mon Nov 24 08:52:26 UTC 2008,,,,,,0|i0v1p3:,179248,,,,,,,,"20/Nov/08 21:45;dkulp;
Any chance you can try with 2.1.3?  I just tried with the latest 2.1.4-SNAPSHOT's and it seems to be fixed there.   I'm just not sure if it's fixed in 2.1.3 or not right now.",24/Nov/08 08:52;exoman;It works with 2.1.3. Thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unmarshalling Set to TreeSet instead of HashSet,CXF-1906,12408253,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Critical,Fixed,njiang,marcuschristie,marcuschristie,11/Nov/08 15:37,24/Apr/09 21:17,14/Mar/19 02:29,15/Nov/08 12:58,2.1.3,,,,,,,,,,,,,,2.2,,,,Aegis Databinding,,,,,,0,,,,"When using the Aegis databinding, if you are deserializing to a class that has a Set in it, Aegis is currently instantiating the set as a SortedSet.  This fails for cases where the objects being added to the set do not implement Comparable, and is undesired in any case.

The error occurs in CollectionType.java:
{code:java}
    protected Collection<Object> createCollection() {
        Collection values = null;

        if (getTypeClass().isAssignableFrom(List.class)) {
            values = new ArrayList();
        } else if (getTypeClass().isAssignableFrom(SortedSet.class)) {
            values = new TreeSet();
        } else if (getTypeClass().isAssignableFrom(Set.class)) {
            values = new HashSet();
        } else if (getTypeClass().isAssignableFrom(Vector.class)) {
            values = new Vector();
        } else if (getTypeClass().isInterface()) {
            values = new ArrayList();
        } else {
....
{code}

If the typeClass is Set, then the second ""if"" clause evaluates to true since Set is a superclass/superinterface of SortedSet.

I've got a patch I'll submit and I'll explain the fix.",,,,,,,,,,,,,,,,,11/Nov/08 15:52;marcuschristie;CXF-1906_patch.txt;https://issues.apache.org/jira/secure/attachment/12393711/CXF-1906_patch.txt,11/Nov/08 15:41;marcuschristie;CXF-1906_patch.txt;https://issues.apache.org/jira/secure/attachment/12393708/CXF-1906_patch.txt,,,,,2.0,,,,,,,,,,,,,,,,,,,,2008-11-15 12:58:58.503,,,no_permission,,Moderate,,,,,,,,,,,112657,,,Tue Nov 18 08:13:27 UTC 2008,,,,,,0|i0uybz:,178703,,,,,,,,11/Nov/08 15:41;marcuschristie;Patch to fix Set/SortedSet bug.,11/Nov/08 15:52;marcuschristie;This is meant to supersede the previous patch attachment.,"11/Nov/08 15:58;marcuschristie;I submitted a patch to fix this bug (I actually submitted the patch twice, but I realized that the first attempt had a problem with it; please disregard it).  The bug in CollectionType.createCollection is that Set ""isAssignableFrom"" SortedSet because it is a supertype of SortedSet, so the SortedSet ""if"" clause should come after the Set ""if"" clause.  Here is how the code is in that method with the patch applied:

        if (getTypeClass().isAssignableFrom(List.class)) {
            values = new ArrayList();
        } else if (getTypeClass().isAssignableFrom(Set.class)) {
        	values = new HashSet();
        } else if (getTypeClass().isAssignableFrom(SortedSet.class)) {
            values = new TreeSet();
        } else if (getTypeClass().isAssignableFrom(Vector.class)) {
            values = new Vector();
        } else if (getTypeClass().isInterface()) {
            values = new ArrayList();
        } else {
....

This way, if your class has a Set, Aegis will create a HashSet to add values to.  In the case that the typeClass if a SortedSet, it will fail the second ""if"" clause since SortedSet is not a supertype of Set, but will pass the third ""if"" clause since, obviously, SortedSet  ""is assignable from"" a SortedSet.  So the fix is really to just reorder the ""if"" clauses a bit so that not every Set is treated as a SortedSet.","11/Nov/08 16:10;marcuschristie;One other thing, as far as I can tell this bug was introduced in CXF-1770.","15/Nov/08 12:58;bmargulies;Fix, and unit test extended to cover this as related classes.","17/Nov/08 16:09;marcuschristie;Benson,

Thanks for getting on this and resolving it so quickly.  One question, will this bug fix make it into 2.1.4?  Thanks.",17/Nov/08 16:15;bmargulies;I expect that Willem will backport it.,17/Nov/08 16:15;bmargulies;Passing along to the current branch merger.,"18/Nov/08 08:13;njiang;Merged the patch into 2.1.x-fix branch 
http://svn.apache.org/viewvc?rev=718512&view=rev",,,,,,,,,,,,,,,,,,,,,,
WSDL2Java can't handle JAXB-bindings with split WSDLs,CXF-1905,12408242,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,jkh,jkh,11/Nov/08 13:54,16/Mar/09 10:09,14/Mar/19 02:29,20/Nov/08 21:37,2.1.3,,,,,,,,,,,,,,2.0.10,2.1.4,,,,,,,,,0,,,,"The documentation on WSDL2Java says about the parameter ""-b"": ""Specifies zero, or more, JAXWS or JAXB binding files."" In fact, WSDL2Java can not handle specified JAXB binding files if the WSDL is split, i.e. it is given a WSDL with service and binding definitions, which imports another WSDL with port type and messages definitions, which in turn imports an XML schema file.

The command line ""wsdl2java -validate -b jaxb-custom.xjb hello-world-service.wsdl"" will fail with

WSDLToJava Error: Thrown by JAXB : ""file:/home/jheilgei/DEV/workspaces/cxf-mini/hello-world-service.wsdl"" is not a part of this compilation. Is this a mistake for ""file:/home/jheilgei/DEV/workspaces/cxf-mini/hello-world-abstract.wsdl""?

while the command line ""wsdl2java -validate -xjc-b,jaxb-custom.xjb hello-world-service.wsdl"" which gives the binding file directly to the JAXB binding compiler will succeed.",,,,,,,,,,,,,,,,,11/Nov/08 13:56;jkh;hello-world-service.tar.gz;https://issues.apache.org/jira/secure/attachment/12393701/hello-world-service.tar.gz,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2009-03-16 10:06:58.427,,,no_permission,,,,,,,,,,,,,50408,,,Mon Mar 16 10:06:58 UTC 2009,,,,,,0|i1acxb:,268560,,,,,,,,"11/Nov/08 13:56;jkh;Minimal WSDLs, XML schema and JAXB binding file to replicate the problem.","16/Mar/09 10:06;eivindjo;I still get the exception from JAXB that ""(...) is not a part of this compilation. Is this a mistake for (...) ?"". As this issue is closed, I was assuming that CXF now accepts the binding files directly, but running the cxf-codegen maven plugin with the example project provided with this issue, I still need to supply the binding files directly to xjc through <extraarg>-xjc -b,jaxb-custom.xjb</extraarg> and not via the <bindingFiles>(...)</bindingFiles> configuration paramters.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Maven Codegen Plugin Fails For CXF WSDL,CXF-1903,12408018,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,bmargulies,soverbosch,soverbosch,07/Nov/08 14:52,09/Feb/09 22:20,14/Mar/19 02:29,07/Nov/08 23:53,2.1.2,2.1.3,,,,,,,,,,,,,2.1.4,,,,Configuration,,,,,,0,,,,"I've set the wsdlRoot to c:/Repository and when you then issue the statement mvn -x cxf-codegen:wsdl2java, this results in the following:

[DEBUG] Calling wsdl2java with args: [-verbose, -d, C:\projects\java\workspaces\iPrimaPortal\iPrimaClients\target\generated\src\main\java, file:/c:/Repository/EMSPublishingServiceConcrete.wsdl]
Loading FrontEnd jaxws ...
Loading DataBinding jaxb ...
wsdl2java -verbose -d C:\projects\java\workspaces\iPrimaPortal\iPrimaClients\target\generated\src\main\java file:/c:/Repository/EMSPublishingServiceConcrete.wsdl
wsdl2java - Apache CXF 2.1.3

[WARNING] Could not create marker file C:\projects\java\workspaces\iPrimaPortal\iPrimaClients\target\cxf-codegen-plugin-markers\.file:_c:_Repository_EMSPublishingServiceConcrete.wsdl.DONE
[DEBUG]
java.io.IOException: The parameter is incorrect
        at java.io.WinNTFileSystem.createFileExclusively(Native Method)
        at java.io.File.createNewFile(File.java:850)
        at org.apache.cxf.maven_plugin.WSDL2JavaMojo.processWsdl(WSDL2JavaMojo.java:355)
        at org.apache.cxf.maven_plugin.WSDL2JavaMojo.execute(WSDL2JavaMojo.java:249)
        at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:451)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:558)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeStandaloneGoal(DefaultLifecycleExecutor.java:512)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:482)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:330)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:291)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:142)
        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:336)
        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:129)
        at org.apache.maven.cli.MavenCli.main(MavenCli.java:287)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:585)
        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)
        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)
        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)
        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)

IMO the : in C: should be replaced with something which is allowed by Windows","Windows XP, maven, eclipse",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-11-07 23:53:49.092,,,no_permission,,Novice,,,,,,,,,,,50409,,,Mon Nov 10 03:36:42 UTC 2008,,,,,,0|i1acxr:,268562,,,,,,,,"07/Nov/08 21:46;soverbosch;Changed in WSDL2JavaMojo.java line 306/307 from

        doneFileName = doneFileName.replace('?', '_')
            .replace('&', '_').replace('/', '_').replace('\\', '_');

to

        doneFileName = doneFileName.replace('?', '_')
            .replace('&', '_').replace('/', '_').replace('\\', '_').replace(':', '_');

And then it works, the .DONE marker files get created",07/Nov/08 23:53;bmargulies;svn revision 712312.,"10/Nov/08 03:36;njiang;Also applied this patch to 2.1.x branch. 
http://svn.apache.org/viewvc?rev=712600&view=rev",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Invalid ContentId Encode,CXF-1900,12407794,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,andrea.bozzetto,andrea.bozzetto,04/Nov/08 15:54,09/Feb/09 22:19,14/Mar/19 02:29,21/Nov/08 17:39,2.1.3,,,,,,,,,,,,,,2.0.10,2.1.4,,,Core,,,,,,0,,,,"The namespace  ""urn:ihe:iti:xds-b:2007"" is encoded in this way:

Content-ID: <ae6becb4-dee4-441f-8b21-9cdffe3b2986@urn%3Aihe%3Aiti%3Axds-b%3A2007>



I change the class AttachmentUtil like this:

/**
     * @param ns
     * @return
     */
    public static String createContentID(String ns) throws UnsupportedEncodingException {
        // tend to change
        String cid = URLEncoder.encode(""http://cxf.apache.org/"", ""UTF-8"");

        String name = UUID.randomUUID().toString();
        if (ns != null && (ns.length() > 0)) {
            try {
                URI uri = new URI(ns);
                String host = uri.toURL().getHost();
                cid = URLEncoder.encode(host, ""UTF-8"");
            } catch (URISyntaxException e) {
                e.printStackTrace();
                return null;
            } catch (MalformedURLException e) {
                cid = ns;
            }
        }
        return URLEncoder.encode(name, ""UTF-8"") + ""@"" + cid;
    }

bye",Linux - Ubuntu 8.04,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-11-21 16:25:06.706,,,no_permission,,,,,,,,,,,,,50410,,,Fri Nov 21 16:25:06 UTC 2008,,,,,,0|i0sydr:,167047,,,,,,,,"21/Nov/08 16:25;mmayer;I have a similar issue: if I invoke a simple MTOM-enabled Axis2 (v1.4.1) service from a CXF (v2.1.3) client, the Axis2 service fails with the following exception:

[ERROR] Referenced Attachment not found in the MIME Message. ContentID:5005a0c0-9e55-4b79-baf5-9320b1abb43b@http://cxf.apache.org/
Caused by: org.apache.axiom.om.OMException: Referenced Attachment not found in the MIME Message. ContentID:5005a0c0-9e55-4b79-baf5-9320b1abb43b@http://cxf.apache.org/

Looking at the message from the CXF client I realized that both, the cid-Url and the Content-Id message header, were URL-encoded (although RFC 2111 states the cid URL should be, the Content-Id message header not).

I fixed the problem by URL-decoding the Id of the Attachment in org.apache.cxf.attachment.AttachmentSerializer:

private void writeHeaders(String contentType, String attachmentId, Writer writer) throws IOException {
        writer.write(""\r\n"");
        writer.write(""Content-Type: "");
        writer.write(contentType);
        writer.write(""\r\n"");
  
        writer.write(""Content-Transfer-Encoding: binary\r\n"");

        writer.write(""Content-ID: <"");
        writer.write(URLDecoder.decode(attachmentId, ""UTF-8""));
        writer.write("">\r\n\r\n"");
}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
cxf bundle should optionally depend on J2EE Connector API,CXF-1898,12407753,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Trivial,Fixed,ffang,ffang,ffang,04/Nov/08 05:16,09/Feb/09 22:19,14/Mar/19 02:29,04/Nov/08 06:23,,,,,,,,,,,,,,,2.0.10,2.1.4,,,,,,,,,0,,,,"currently our cxf bundle mark javax.resource.spi* package as resolution:=optional, but this doesn't completely remove the dependency to j2ee connector api when in osgi container, we still need to install bundle like geronimo-j2ee-connector_1.5_spec to pass the package resolution
we should mark javax.resource* package as resolution:=optional to fix it",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,50411,,,Tue Nov 04 06:23:32 UTC 2008,,,,,,0|i1acyn:,268566,,,,,,,,"04/Nov/08 06:23;ffang;commit fix
http://svn.apache.org/viewvc?rev=711179&view=rev for trunk
http://svn.apache.org/viewvc?rev=711185&view=rev for 2.1.x branch
http://svn.apache.org/viewvc?rev=711187&view=rev for 2.0.x branch",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Invalid character set UTF-8; action= urn:ihe:iti:2007:RetrieveDocumentSet in request in Contet-type,CXF-1895,12407706,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,andrea.bozzetto,andrea.bozzetto,03/Nov/08 13:40,09/Feb/09 22:19,14/Mar/19 02:29,22/Jan/09 20:06,2.1.3,,,,,,,,,,,,,,2.0.10,2.1.4,,,,,,,,,0,,,,"

Hi, I have a problem reading this soap Message, CXF throw  ""java.io.IOException: Invalid character set UTF-8; action= urn:ihe:iti:2007:RetrieveDocumentSet in request.""

POST /EuleroXDSRepository/repositoryb HTTP/1.1
Content-Type: application/soap+xml; charset=UTF-8; action=""urn:ihe:iti:2007:RetrieveDocumentSet""
User-Agent: Axis2
Host: 172.30.20.161:8888
Transfer-Encoding: chunked
 
2f3
<?xml version='1.0' encoding='UTF-8'?><soapenv:Envelope xmlns:soapenv=""http://www.w3.org/2003/05/soap-envelope"" xmlns:wsa=""http://www.w3.org/2005/08/addressing""><soapenv:Header><wsa:To>http://localhost:8888/EuleroXDSRepository/repositoryb</wsa:To><wsa:MessageID>urn:uuid:F99C8EB3F258E6DC751225718664373</wsa:MessageID><wsa:Action>urn:ihe:iti:2007:RetrieveDocumentSet</wsa:Action></soapenv:Header><soapenv:Body><RetrieveDocumentSetRequest xmlns=""urn:ihe:iti:xds-b:2007"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">
    <DocumentRequest>
        <RepositoryUniqueId>urn:4a8afe2</RepositoryUniqueId>
        <DocumentUniqueId>172.30.20.187262</DocumentUniqueId>
    </DocumentRequest>
</RetrieveDocumentSetRequest></soapenv:Body></soapenv:Envelope>
0
 

","Linux, Ubuntu 8.04",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-11-03 17:05:11.759,,,no_permission,,Unknown,,,,,,,,,,,50412,,,Tue Nov 04 10:42:15 UTC 2008,,,,,,0|i1aczb:,268569,,,,,,,,"03/Nov/08 17:05;sergey_beryozkin;The problem seems to be quite obvious - cxf code assumes that there're only one possible content type value parameter (charset). Fixing it should be easy - but if the action parameter needs to be preserved then it might be worth saving the ContentType info in a wrapper class, similar to a MediaType JAX-RS class. A similar CXF-specific class can be introduced.

in CXF JAX-RS we have an implementation of MediaType so one option is to move its internals  into some common utility code like MediaTypeUtils.java, and have it reused between JAXWS and JAXRS runtimes  ","04/Nov/08 08:20;andrea.bozzetto;I don't understand what you mean. 

The charset parameter is used by servlet class. This is the callstack:

17:29:21,163 ERROR [[CXFServlet]] Servlet.service() for servlet CXFServlet threw exception
java.io.IOException: Invalid character set UTF-8; action= urn:ihe:iti:2007:RetrieveDocumentSet in request.
	at org.apache.cxf.transport.http.AbstractHTTPDestination.setupMessage(AbstractHTTPDestination.java:271)
	at org.apache.cxf.transport.servlet.ServletDestination.invoke(ServletDestination.java:82)
	at org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:285)
	at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:168)
	at org.apache.cxf.transport.servlet.AbstractCXFServlet.invoke(AbstractCXFServlet.java:175)
	at org.apache.cxf.transport.servlet.AbstractCXFServlet.doPost(AbstractCXFServlet.java:153)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:717)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:810)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:252)


I try to patch the class HTTPConduit in this way:

 protected void handleResponseInternal() throws IOException {

.....


            inMessage.put(Message.PROTOCOL_HEADERS, headers);
            inMessage.put(Message.RESPONSE_CODE, responseCode);
            String ct = connection.getContentType();
            inMessage.put(Message.CONTENT_TYPE, ct);
            String charset = null;
            if (ct != null 
                && ct.indexOf(""charset"") != -1) {
                charset = ct.substring(ct.indexOf(""charset"") + 8);
                if (charset.indexOf("";"") != -1) {
                    charset = charset.substring(0, charset.indexOf("";""));
                }

    		int idx2 = charset.indexOf("";"");
   	 	if (idx2 != -1)
			charset = charset.substring(0, idx2).trim();
  	 	else
   	 		charset = charset.trim();
    			

            }

....

}

If it works I will submit the class.

bye","04/Nov/08 08:57;njiang;Hi Andrea,

You could use below code to get the the charset string. 

{code}
        String[] tokens = contentType.split("";"");
        for (String token : tokens) {
            int index = token.indexOf(""charset="");
            if (index >= 0) {
                String charset = token.substring(index + 8); 
                break ; 
            }            
        }
{code}

Willem","04/Nov/08 10:42;andrea.bozzetto;Finally I did change the class HttpHeaderHelper in this way because HTTPConduit was not called :

    public static String mapCharset(String enc) {
        if (enc == null) {
            return UTF8.name();
        }

	if (enc != null 
                && enc.indexOf("";"") != -1) {
    		int idx2 = enc.indexOf("";"");
   	 	if (idx2 != -1)
			enc = enc.substring(0, idx2).trim();
  	 	else
   	 		enc = enc.trim();
    			

            }

        // Charsets can be quoted. But it's quite certain that they can't have escaped quoted or
        // anything like that.
        enc = enc.replace(""\"""", """");
        enc = enc.replace(""'"", """");
        if ("""".equals(enc)) {
            return UTF8.name();
        }
        String newenc = encodings.get(enc);
        if (newenc == null) {
            try {
                newenc = Charset.forName(enc).name();
            } catch (IllegalCharsetNameException icne) {
                return null;
            } catch (UnsupportedCharsetException uce) {
                return null;
            }
            encodings.put(enc, newenc);
        }
        return newenc;
    }


bye
",,,,,,,,,,,,,,,,,,,,,,,,,,,
Aegis serializes enums with toString instead of name,CXF-1890,12407346,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,bmargulies,bmargulies,bmargulies,28/Oct/08 12:10,09/Feb/09 22:19,14/Mar/19 02:29,28/Oct/08 12:23,2.0,2.0.1,2.0.2,2.0.3,2.0.4,2.0.5,2.0.6,2.0.7,2.0.8,2.0.9,2.1,2.1.1,2.1.2,2.1.3,2.0.10,2.1.4,,,Aegis Databinding,,,,,,0,,,,The Enum type support in Aegis serializes with the wrong value: toString instead of name().,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-11-01 04:09:28.922,,,no_permission,,,,,,,,,,,,,50413,,,Sat Nov 01 04:09:28 UTC 2008,,,,,,0|i140gn:,231537,,,,,,,,"01/Nov/08 04:09;njiang;trunk
http://svn.apache.org/viewvc?rev=708550&view=rev

2.1.x
http://svn.apache.org/viewvc?rev=709641&view=rev

2.0.x
http://svn.apache.org/viewvc?rev=709643&view=rev",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WS-RM: Cleanup of candidate list in RetransmissionQueueImpl,CXF-1889,12407344,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,rschmitz,rschmitz,28/Oct/08 10:51,09/Feb/09 22:19,14/Mar/19 02:29,22/Jan/09 22:12,2.1.2,,,,,,,,,,,,,,2.0.10,2.1.4,,,WS-* Components,,,,,,0,,,,"The implementation of method purgeAcknowledged(SourceSequence) removes the values from the internal candidate map. Nonetheless, the fails to delete the keys within the candidate map. This will cause a classic memory leak...",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,50414,,,2008-10-28 10:51:43.0,,,,,,0|i140g7:,231535,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Need to document the ""jaxws:endpoint"" attribute ""createdFromAPI""",CXF-1888,12407342,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,seanoc,joeluo,joeluo,28/Oct/08 10:03,04/Jun/09 21:34,14/Mar/19 02:29,09/Dec/08 12:28,,,,,,,,,,,,,,,Invalid,,,,Documentation,,,,,,0,,,,"The attribute ""createdFromAPI"" of the ""jaxws:endpoint"" element is not documented (http://cwiki.apache.org/CXF20DOC/jax-ws-configuration.html).

We need to document the attribute ""createdFromAPI"" of the ""jaxws:endpoint"".",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-12-09 12:28:12.187,,,no_permission,,,,,,,,,,,,,112647,,,Tue Dec 09 12:28:12 UTC 2008,,,,,,0|i1aczz:,268572,,,,,,,,"09/Dec/08 12:28;seanoc;Added:

createdFromAPI  : This indicates that the endpoint bean was already created using jaxws API's thus at runtime when parsing the bean spring can use these values rather than the default ones. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Disappearing types from @XmlRootElement and no particular namespace,CXF-1886,12407226,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,bmargulies,bmargulies,25/Oct/08 16:02,01/Feb/10 19:02,14/Mar/19 02:29,15/Dec/09 21:13,2.2,,,,,,,,,,,,,,2.1.9,2.2.6,,,JAXB Databinding,,,,,,0,,,,"The attached patch adds two 'innocent' types to the the tests in cxf-rt-javascript. If you look at the attached WSDL, you will see that the type 'inheritanceTestDerived' is referenced in the WSDL but does not end up defined in the schema at all, anywhere!",,,,,,,,,,,,,,,,,25/Oct/08 16:03;bmargulies;trouble.patch;https://issues.apache.org/jira/secure/attachment/12392821/trouble.patch,25/Oct/08 16:03;bmargulies;wsdl;https://issues.apache.org/jira/secure/attachment/12392822/wsdl,,,,,2.0,,,,,,,,,,,,,,,,,,,,2009-12-15 21:13:26.248,,,no_permission,,,,,,,,,,,,,112646,,,Tue Dec 15 21:13:26 UTC 2009,,,,,,0|i1ad07:,268573,,,,,,,,"25/Oct/08 16:14;bmargulies;In general, adding an @XmlRootElement to a type used as a parameter in a wrapped message seems to have, well, spectacularly bad results for the resulting schema.","15/Dec/09 21:13;dkulp;
This is actually the same issue as CXF-1510 and was fixed as part of that.   Param types with just XmlRootElement and no XmlType are pretty much considered anonymous types.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ExceptionMapper is not called due to a NullPointerException at JAXRSOutInterceptor,CXF-1884,12407113,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,,ilusha,ilusha,23/Oct/08 19:32,24/Apr/09 21:17,14/Mar/19 02:29,05/Mar/09 18:01,2.1.2,,,,,,,,,,,,,,2.1.5,2.2,,,JAX-RS,,,,,,0,,,,"ExceptionMapper is not called due to a NullPointerException at JAXRSOutInterceptor when CXF does not find an invoked method.

The problem is in JAXRSOutInterceptor line 150.  If CXF is not able to identify an operation to invoke invoked is null and a NullPointerException is thrown.  This exception causes CXF to bypass the configured ExceptionMapper and show the default error message from XMLFaultOutInterceptor.
I also suspect that there are other methods that don't work right when invoked is null.

JAXRSOutInterceptor line 150:
                writer.writeTo(responseObj, targetType, ****invoked.getGenericReturnType()****, 
                               invoked != null ? invoked.getAnnotations() : new Annotation[]{}, 
                               responseType, 
                               response.getMetadata(), 
                               out);

Oct 23, 2008 3:27:47 PM org.apache.cxf.jaxrs.interceptor.JAXRSInInterceptor processRequest
SEVERE: .No operation matching request path /seaarch/ is found, ContentType : */*, Accept : text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8.
Oct 23, 2008 3:27:47 PM org.apache.cxf.phase.PhaseInterceptorChain doIntercept
INFO: Interceptor has thrown exception, unwinding now
java.lang.NullPointerException
	at org.apache.cxf.jaxrs.interceptor.JAXRSOutInterceptor.processResponse(JAXRSOutInterceptor.java:150)
	at org.apache.cxf.jaxrs.interceptor.JAXRSOutInterceptor.handleMessage(JAXRSOutInterceptor.java:61)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:220)
	at org.apache.cxf.interceptor.OutgoingChainInterceptor.handleMessage(OutgoingChainInterceptor.java:74)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:220)
	at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:78)
	at org.apache.cxf.transport.servlet.ServletDestination.invoke(ServletDestination.java:92)
	at org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:283)
	at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:128)
	at org.apache.cxf.transport.servlet.AbstractCXFServlet.invoke(AbstractCXFServlet.java:174)
	at org.apache.cxf.transport.servlet.AbstractCXFServlet.doGet(AbstractCXFServlet.java:156)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:690)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:803)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
	at org.springframework.security.util.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:359)
	at org.springframework.security.intercept.web.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:109)
	at org.springframework.security.intercept.web.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:83)
	at org.springframework.security.util.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:371)
	at org.springframework.security.ui.ExceptionTranslationFilter.doFilterHttp(ExceptionTranslationFilter.java:101)
	at org.springframework.security.ui.SpringSecurityFilter.doFilter(SpringSecurityFilter.java:53)
	at org.springframework.security.util.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:371)
	at org.springframework.security.ui.preauth.AbstractPreAuthenticatedProcessingFilter.doFilterHttp(AbstractPreAuthenticatedProcessingFilter.java:60)
	at org.springframework.security.ui.SpringSecurityFilter.doFilter(SpringSecurityFilter.java:53)
	at org.springframework.security.util.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:371)
	at com.reuters.agency.g3ids.security.spring.authentication.NonHttpSessionContextFilter.doFilterHttp(NonHttpSessionContextFilter.java:69)
	at org.springframework.security.ui.SpringSecurityFilter.doFilter(SpringSecurityFilter.java:53)
	at org.springframework.security.util.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:371)
	at org.springframework.security.util.FilterChainProxy.doFilter(FilterChainProxy.java:174)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:236)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:167)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
	at com.reuters.agency.g3ids.security.spring.authentication.PreAuthHeaderInjectionFilter.doFilter(PreAuthHeaderInjectionFilter.java:24)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:175)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:286)
	at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:844)
	at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583)
	at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:447)
	at java.lang.Thread.run(Thread.java:619)
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-03-05 18:01:52.252,,,no_permission,,,,,,,,,,,,,112644,,,Thu Mar 05 18:01:52 UTC 2009,,,,,,0|i1ad0n:,268575,,,,,,,,05/Mar/09 18:01;sergey_beryozkin;Finally reproduced it - fixed now...,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
inherited classes and attributes not generated,CXF-1883,12407092,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,bmargulies,bvandeputte,bvandeputte,23/Oct/08 14:23,24/Apr/09 21:17,14/Mar/19 02:29,26/Oct/08 21:29,2.2,,,,,,,,,,,,,,2.2,,,,JavaScript Client,,,,,,0,,,," I'm using the CXF JavaScript Client and i got a problem with extended classes and inherited attributes.
 It's like the Javascript code generated by CXF bugs with extended classes.

 Here is an example , i've got 2 classes :
		--- File Person.java :
		@XmlRootElement(name = ""Person"")
		public class Person {
			Long id;
			String name;
			(...getters/setters..)
		}
		--- File Expert.java :
		@XmlRootElement(name = ""Expert"")
		public class Expert extends Person {
			String speciality;
			(...getters/setters..)
		}
		
 An Expert(id,name,speciality) extends a Person(id,name).

 In my CXF Javascript client, i can invoke (perso JS object).getName(), but (expert JS object).getName() or (expert JS object).getSpeciality() are undefined.
 

 Here is an extract of the generated Javascript
(http://myserver:8080/CXF/HW?js):
		(...)
		//
		// Constructor for XML Schema item
{http://demo.com/}expert
		//
		function demo_com__expert () {
		    this.typeMarker = 'demo_com__expert';
		}
		(...)
		//
		// Constructor for XML Schema item
{http://demo.com/}person
		//
		function demo_com__person () {
		    this.typeMarker = 'demo_com__person';
		    this._id = null;
		    this._name = null;
		}
		(...)
",i686 GNU/Linux - apache-cxf-2.2-SNAPSHOT 15/10/17:04,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-10-25 15:47:10.754,,,no_permission,,,,,,,,,,,,,112643,,,Tue Oct 28 13:41:51 UTC 2008,,,,,,0|i1ad0v:,268576,,,,,,,,"25/Oct/08 15:47;bmargulies;I created a test case, and the immediate results is invalid Javascript! ","25/Oct/08 20:46;bmargulies;I just checked in something for this that I don't really entirely believe. It does NOT set up inheritance in Javascript, but it does arrange for the derived class to have all the inherited attributes.

Can you build from svn and try it? If not, I'll make a snapshot after I code some tests that improve my belief level.
","25/Oct/08 20:48;bmargulies;By the way, you mentioned attributes. Those don't work \at all/ yet.","26/Oct/08 21:29;bmargulies;Fix to inherited properties is in place on the trunk.
",27/Oct/08 12:41;bvandeputte;I'm currently trying to build cxf from svn (1st time for me)...,"28/Oct/08 13:41;bvandeputte;Hi Benson Margulies, 
i just success a build from svn (cxf-2.2-SNAPSHOT svn trunk revision number 708 517); so after some test, i see a correct extended class definition and attributes. 

here is the new sample :
(...)
  //
  // Constructor for XML Schema item {http://demo.com/}expert
  //
  function demo_com__expert () {
      this.typeMarker = 'demo_com__expert';
      this._id = null;
      this._name = null;
      this._speciality = null;
  }
(...)

thanks a lot :o)
regards
Brice Vandeputte",,,,,,,,,,,,,,,,,,,,,,,,,
JAX-RS can't unmarshall request body if the corresponding parameter is annotated with non-JAX-RS annotation,CXF-1882,12406982,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,sergey_beryozkin,kgmanuel,kgmanuel,22/Oct/08 11:02,09/Feb/09 22:20,14/Mar/19 02:29,24/Nov/08 10:58,2.1.2,,,,,,,,,,,,,,2.1.4,,,,JAX-RS,JAX-WS Runtime,JAXB Databinding,,,,0,,,,"I have a java-first service. The goal is to have a single service implementation that can be accessed via SOAP or as ReST service. I am using the JAX-WS annotations to have a more descriptive WSDL. I am using the JAX-RS annotations as defined in: http://cwiki.apache.org/CXF20DOC/jax-rs-jsr-311.html . Below is a trimmed down version of the code:

//AccountService.java
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebService;
import javax.ws.rs.ConsumeMime;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;

@WebService(serviceName=""AccountService"")
@ConsumeMime(""text/xml"") 
public class AccountService {
	@PUT
	@Path(""/Account"")
	@WebMethod
	public long insert(
			@WebParam(name=""account"")
			Account account
			) {
		logger.info(""insert Received: "" + account);
		return 0;
	}
}

//Account.java
import javax.ws.rs.Path;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;

@XmlRootElement(name=""Account"")
@XmlType(name=""Account"")
@XmlAccessorType(XmlAccessType.PROPERTY)
public class Account {
	private String accountID = """";
	public String getAccountID() {
		return accountID;
	}

	public void setAccountID(String accountID) {
		this.accountID = accountID;
	}
}
	
//beans.xml
<beans xmlns=""http://www.springframework.org/schema/beans""
      xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xmlns:jaxws=""http://cxf.apache.org/jaxws""
      xmlns:soap=""http://cxf.apache.org/bindings/soap""
	  xmlns:sec=""http://cxf.apache.org/configuration/security""
	  xmlns:jaxrs=""http://cxf.apache.org/jaxrs""
      xsi:schemaLocation=""
		http://www.springframework.org/schema/beans 
	    http://www.springframework.org/schema/beans/spring-beans-2.0.xsd 
	    http://cxf.apache.org/bindings/soap 
	    http://cxf.apache.org/schemas/configuration/soap.xsd
	    http://cxf.apache.org/core
	    http://cxf.apache.org/schemas/core.xsd
		http://cxf.apache.org/jaxrs
		http://cxf.apache.org/schemas/jaxrs.xsd
	    http://cxf.apache.org/jaxws 
	    http://cxf.apache.org/schemas/jaxws.xsd 
	    http://cxf.apache.org/configuration/security 
	    http://cxf.apache.org/schemas/configuration/security.xsd
	    http://cxf.apache.org/transports/http/configuration
	    http://cxf.apache.org/schemas/configuration/http-conf.xsd
	    http://cxf.apache.org/transports/http-jetty/configuration
	    http://cxf.apache.org/schemas/configuration/http-jetty.xsd
    "">
	<import resource=""classpath:META-INF/cxf/cxf.xml"" />
	<import resource=""classpath:META-INF/cxf/cxf-extension-soap.xml"" />
	<import resource=""classpath:META-INF/cxf/cxf-servlet.xml"" />
    <import resource=""classpath:META-INF/cxf/cxf-extension-jaxrs-binding.xml"" />
    <import resource=""classpath:META-INF/cxf/cxf-extension-http-binding.xml""/>
	<import resource=""classpath:META-INF/cxf/cxf-extension-xml.xml""/>
	
	<jaxrs:server id=""accountRestService"" address=""/rest/Accounts"">
		<jaxrs:serviceBeans>
			<ref bean=""accountServiceClass"" />
		</jaxrs:serviceBeans>
	</jaxrs:server>

	<bean id=""accountServiceClass"" class=""AccountService"" />

    <jaxws:endpoint 
        id=""accountSoapService"" 
        address=""/soap/Accounts""
        implementor=""#accountServiceClass""
        >
    </jaxws:endpoint>
</beans>

I have already discussed this with Sergey of CXF support team (http://www.nabble.com/-JAX-WS--JAX-RS--tt20007600.html). The issue seem to be not present if the parameter is not annotated by JAX-WS. Below is a snippet of his findings:

<quote>
I think I might know what might be happening - JAXRS runtime does not recognize the Account as being a standalone method parameter as it's annotated with a JAXWS annotation. On other words, in JAX-RS, providers(by default) are used only when unmarshalling parameters not annotated with JAX-RS annotations, for ex

void foo(@PathParam(""id"") String id, Account acc);

here the Account will be unmarshalled as expected but because you have

void foo(@WebParam(name=""account"") Account account);

the runtime mistakenly ignores it.... 
</quote>

Please advise if you need more information.","windows XP
apache-tomcat-6.0.13
jdk1.6.0_02",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,50416,,,2008-10-22 11:02:21.0,,,,,,0|i0v15j:,179160,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
org.apache.cxf.xjc.ts.ToStringPlugin cannot be used with a 1.6 JVM,CXF-1880,12406825,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,prophet36,prophet36,20/Oct/08 13:57,02/Feb/11 05:05,14/Mar/19 02:29,08/Jun/09 19:57,2.1.2,,,,,,,,,,,,,,2.1.6,2.2.3,2.3,,,,,,,,1,,,,"If CXF is on the classpath when you invoke the JXC code generator, it tries to load the org.apache.cxf.xjc.ts.ToStringPlugin as a JAXB plugin, but due to some problems with the 1.6 JVM, it fails:

bash-2.05b$ gunzip -c apache-cxf-2.1.2.tar.gz | tar xf -
bash-2.05b$ cd apache-cxf-2.1.2/lib
bash-2.05b$ java -classpath $(pwd)/cxf-manifest.jar com.sun.tools.xjc.XJCFacade
grammar is not specified

Usage: xjc [-options ...] <schema file/URL/dir/jar> ... [-b <bindinfo>] ...
If dir is specified, all schema files in it will be compiled.
If jar is specified, /META-INF/sun-jaxb.episode binding file will be compiled.
Options:
  -nv                :  do not perform strict validation of the input schema(s)
  -extension         :  allow vendor extensions - do not strictly follow the
                        Compatibility Rules and App E.2 from the JAXB Spec
  -b <file/dir>      :  specify external bindings files (each <file> must have its own -b)
                        If a directory is given, **/*.xjb is searched
  -d <dir>           :  generated files will go into this directory
  -p <pkg>           :  specifies the target package
  -httpproxy <proxy> :  set HTTP/HTTPS proxy. Format is [user[:password]@]proxyHost:proxyPort
  -httpproxyfile <f> :  Works like -httpproxy but takes the argument in a file to protect password 
  -classpath <arg>   :  specify where to find user class files
  -catalog <file>    :  specify catalog files to resolve external entity references
                        support TR9401, XCatalog, and OASIS XML Catalog format.
  -readOnly          :  generated files will be in read-only mode
  -npa               :  suppress generation of package level annotations (**/package-info.java)
  -no-header         :  suppress generation of a file header with timestamp
  -target 2.0        :  behave like XJC 2.0 and generate code that doesnt use any 2.1 features.
  -xmlschema         :  treat input as W3C XML Schema (default)
  -relaxng           :  treat input as RELAX NG (experimental,unsupported)
  -relaxng-compact   :  treat input as RELAX NG compact syntax (experimental,unsupported)
  -dtd               :  treat input as XML DTD (experimental,unsupported)
  -wsdl              :  treat input as WSDL and compile schemas inside it (experimental,unsupported)
  -verbose           :  be extra verbose
  -quiet             :  suppress compiler output
  -help              :  display this help message
  -version           :  display version information

Exception in thread ""main"" java.util.ServiceConfigurationError: com.sun.tools.xjc.Plugin: Provider org.apache.cxf.xjc.ts.ToStringPlugin could not be instantiated: java.lang.ClassCastException
        at java.util.ServiceLoader.fail(ServiceLoader.java:207)
        at java.util.ServiceLoader.access$100(ServiceLoader.java:164)
        at java.util.ServiceLoader$LazyIterator.next(ServiceLoader.java:353)
        at java.util.ServiceLoader$1.next(ServiceLoader.java:421)
        at com.sun.tools.xjc.Options.findServices(Options.java:884)
        at com.sun.tools.xjc.Options.getAllPlugins(Options.java:336)
        at com.sun.tools.xjc.Driver.usage(Driver.java:510)
        at com.sun.tools.xjc.Driver._main(Driver.java:125)
        at com.sun.tools.xjc.Driver.access$000(Driver.java:74)
        at com.sun.tools.xjc.Driver$1.run(Driver.java:96)
Caused by: java.lang.ClassCastException
        at java.lang.Class.cast(Class.java:2990)
        at java.util.ServiceLoader$LazyIterator.next(ServiceLoader.java:345)
        ... 7 more
bash-2.05b$ which java
/...<snip>.../sunjdk/1.6.0_06/bin/java

The only solution to this problem that I have been able to find is to put all XJC plugins in a subpackage of com.sun.tools.xjc.addon. No endorsed dirs hackery seems to work.",,,,,,,,,,,,,,,,,02/Feb/11 05:05;amita.bhandari@cignex.com;ASF.LICENSE.NOT.GRANTED--image001.png;https://issues.apache.org/jira/secure/attachment/12470019/ASF.LICENSE.NOT.GRANTED--image001.png,05/Jun/09 19:02;prophet36;newPatch.sh.txt;https://issues.apache.org/jira/secure/attachment/12410015/newPatch.sh.txt,,,,,2.0,,,,,,,,,,,,,,,,,,,,2009-05-27 13:50:42.394,,,no_permission,,,,,,,,,,,,,112641,,,Wed Feb 02 05:05:29 UTC 2011,,,,,,0|i0v1vj:,179277,,,,,,,,"27/May/09 13:50;tbee;I ran into the same problem using this ant task:

    	<taskdef name=""xjc"" classname=""com.sun.tools.xjc.XJCTask"">
    		<classpath>
    			<fileset dir=""${JAXB_HOME}"" includes=""**/*.jar"" />
    			<fileset dir=""lib"" includes=""**/*.jar"" />
    		</classpath>
    	</taskdef>

By removing my project-lib, the problem went away:

    	<taskdef name=""xjc"" classname=""com.sun.tools.xjc.XJCTask"">
    		<classpath>
    			<fileset dir=""${JAXB_HOME}"" includes=""**/*.jar"" />
    		</classpath>
    	</taskdef>

Appearantly there is some jar in my lib causing the problem...",29/May/09 07:06;prophet36;Right. But I only phrased the problem like this for simplicity's sake. The real problem is that wsdl2java invokes the JAXB plugin when generating client-side proxies. Removing the CXF classes from the classpath is not an option in that case.,"04/Jun/09 17:48;dkulp;
Apache legal actually said it's OK to put small wrapper things in com.sun.tools.xjc.addon.apache_cxf.   Apparently the same thing needs to be done in Harmony to have some ""com.sun"" classes that various things expect.    Thus, we can keep the ""real"" code in org.apache.cxf and put thin wrappers in com.sun.tools.xjc.addon.apache_cxf.      

A patch would be nice.   Any takers?",04/Jun/09 17:54;prophet36;I raised the JIRA so I guess it should be me who writes the patch. It may take a day or two for me to get around to it.,"05/Jun/09 19:02;prophet36;Here's the patch, hope it's OK.","02/Feb/11 05:05;amita.bhandari@cignex.com;Please share the soultion for this issue. This is high priority for us.

 

Thanks,

Amita Bhandari

Senior Consultant

 

Direct: 079- 40207999 extension:116

Mobile: 0937 7535 028

 

 

“Liferay Partner of the Year, 2010”

 

Disclaimer: The information contained in this communication is intended only for the use of the individual or entity named above. Any views or opinions presented are solely those of the author and do not necessarily represent those of CIGNEX Global Holding Corporation. It may contain legally privileged and confidential information and if you are not the intended recipient, you must not use, retain, copy, distribute or take any action in reliance on it. If you have received this communication in error, please notify the sender immediately by return email or by fax and delete all copies of the original message. 

 

 please consider the environment before printing this e-mail.

 

 

 

",,,,,,,,,,,,,,,,,,,,,,,,,
Databinding HashMap of HashMap of  a complex Object,CXF-1878,12406812,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,bmargulies,darboistom,darboistom,20/Oct/08 13:15,24/Apr/09 21:17,14/Mar/19 02:29,15/Nov/08 16:46,2.0.7,,,,,,,,,,,,,,2.2,,,,Aegis Databinding,,,,,,0,,,,"Hello, in the project I'm working on (a project based partly on CXF with aegis), I've got trouble with complex databinding. The developer, who has configured the cxf part, told me to send an email on the CXF mailing list about the problem we had in order to see where and why it happens.


We want to be able to manage method with complex parameter like MyObject

 *   MyObject with class attributes
    *   String
    *   String
    *   ArrayList<HashMap,MySecondObject>
 *   MySecondObject with class attributes
    *   String
    *   String
    *   ArrayList<HashMap,Long>

But we have the following issue ""org.apache.cxf.aegis.DatabindingException: Couldn't instantiate class. null. Nested exception is java.lang.InstantiationException: null   org.apache.cxf.binding.soap.SoapFault:"" since ArrayList<HashMap,MySecondObject> is not NULL.

I have simplified my example and I have the same issue with an HashMap of HashMap of SimpleInDataBean (composed of two String parameters).

//KO
public void manageHashMapOfHashMapOfSimpleInDataBean(HashMap<String,HashMap<String,SimpleInDataBean>> myComplexData);

//OK
public void manageHashMapOfSimpleInDataBean(HashMap<String,SimpleInDataBean> myComplexData);


Here is the error stack trace I got:
org.apache.cxf.aegis.DatabindingException: Couldn't instantiate class. null. Nested exception is java.lang.InstantiationException: null   org.apache.cxf.binding.soap.SoapFault: org.apache.cxf.aegis.DatabindingException: Couldn't instantiate class. null. Nested exception is java.lang.InstantiationException: null
at org.apache.cxf.binding.soap.interceptor.Soap11FaultInInterceptor.handleMessage(Soap11FaultInInterceptor.java:70)
at org.apache.cxf.binding.soap.interceptor.Soap11FaultInInterceptor.handleMessage(Soap11FaultInInterceptor.java:35)
at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:221)
at org.apache.cxf.interceptor.AbstractFaultChainInitiatorObserver.onMessage(AbstractFaultChainInitiatorObserver.java:96)
at org.apache.cxf.binding.soap.interceptor.CheckFaultInterceptor.handleMessage(CheckFaultInterceptor.java:65)
at org.apache.cxf.binding.soap.interceptor.CheckFaultInterceptor.handleMessage(CheckFaultInterceptor.java:34)
at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:221)
at org.apache.cxf.endpoint.ClientImpl.onMessage(ClientImpl.java:429)
at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleResponse(HTTPConduit.java:1996)
at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.close(HTTPConduit.java:1832)
at org.apache.cxf.transport.AbstractConduit.close(AbstractConduit.java:66)
at org.apache.cxf.transport.http.HTTPConduit.close(HTTPConduit.java:591)
at org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor.handleMessage(MessageSenderInterceptor.java:62)
at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:221)
at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:276)
at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:222)
at org.apache.cxf.frontend.ClientProxy.invokeSync(ClientProxy.java:73)
at org.apache.cxf.frontend.ClientProxy.invoke(ClientProxy.java:68)
at $Proxy12.manageHashMapOfHashMapOfSimpleInDataBean(Unknown Source) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at org.objectweb.fractal.bf.AbstractRemoteServiceCaller.invoke(AbstractRemoteServiceCaller.java:64)
at $Proxy12.manageHashMapOfHashMapOfSimpleInDataBean(Unknown Source) at org.objectweb.fractal.julia.generated.Cba88d802_0.manageHashMapOfHashMapOfSimpleInDataBean(INTERCEPTOR[WebService1Service])
at org.objectweb.fractal.julia.generated.C345d7387_0.manageHashMapOfHashMapOfSimpleInDataBean(INTERFACE[WebService1Service])
at com.edifixio.ecommerce.exemple.binding.service.webservice1.WebService1ServiceFcOutItf.manageHashMapOfHashMapOfSimpleInDataBean(WebService1ServiceFcOutItf.java:78)
at com.edifixio.ecommerce.exemple.binding.service.webservice1.WebService1ServiceFcSR.manageHashMapOfHashMapOfSimpleInDataBean(WebService1ServiceFcSR.java:62)
at com.edifixio.ecommerce.exemple.binding.application.binding.BindingApplicationImpl.manageHashMapOfHashMapOfSimpleInDataBean(BindingApplicationImpl.java:106)
at com.edifixio.ecommerce.exemple.binding.application.binding.BindingApplicationInterceptorLCSCACCIntent.manageHashMapOfHashMapOfSimpleInDataBean(BindingApplicationInterceptorLCSCACCIntent.java:529)
at com.edifixio.ecommerce.exemple.binding.application.binding.BindingApplicationFcItf.manageHashMapOfHashMapOfSimpleInDataBean(BindingApplicationFcItf.java:94)
at com.edifixio.ecommerce.exemple.binding.test.service.webservice1.ManageHashMapOfHashMapOfSimpleInDataBeanTest.testManageHashMapOfHashMapOfSimpleInDataBean_SimpleInDataBeanEmpty(ManageHashMapOfHashMapOfSimpleInDataBeanTest.java:87)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at junit.framework.TestCase.runTest(TestCase.java:154)


Do not hesitate if you need more details
","Linux and Windows  with JDK Sun  1.6.0_05 - 1.6.0_06 (it has been seen also on other jdk)
",,,,,,,,,,,,,,CXF-2017,,20/Oct/08 13:17;darboistom;GenericBean.java;https://issues.apache.org/jira/secure/attachment/12392481/GenericBean.java,20/Oct/08 13:17;darboistom;SimpleInDataBean.java;https://issues.apache.org/jira/secure/attachment/12392482/SimpleInDataBean.java,,,,,2.0,,,,,,,,,,,,,,,,,,,,2008-10-21 00:36:04.72,,,no_permission,,,,,,,,,,,,,112639,,,Sat Nov 15 16:46:20 UTC 2008,,,,,,0|i1ad1b:,268578,,,,,,,,20/Oct/08 13:17;darboistom;Source code of the Object ,"21/Oct/08 00:36;bmargulies;What front end? JAX-WS or Simple?
","21/Oct/08 00:41;bmargulies;I can't make this fail on the trunk, which is likely to mean, in CXF 2.1.x. Can you try your example with 2.1.x?",21/Oct/08 08:55;vschiavoni;The problem comes with the simple frontend.,"21/Oct/08 12:19;bmargulies;On trunk, it stubbornly insists on working even with the Simple front end.",15/Nov/08 16:46;bmargulies;This is apparently already fixed on the trunk.,,,,,,,,,,,,,,,,,,,,,,,,,
CXF adds @WebParam annotation without import section when async binding is turned on,CXF-1875,12406577,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,,slobodan.marjanovic,slobodan.marjanovic,16/Oct/08 09:46,24/Apr/09 21:17,14/Mar/19 02:29,13/Mar/09 18:32,2.1.2,,,,,,,,,,,,,,2.1.4,,,,,,,,,,0,,,,"I use CXF to generate a WS client classes. There are some smaller issues in generated code. CXF uses @Webparam annotation but it doesn't adds it to the import section of the class.  This happens only when async-binding is turned on.

========================
CXF ant task:
<target name=""generate"">
		<java classname=""org.apache.cxf.tools.wsdlto.WSDLToJava"" fork=""true"">
			<arg value=""-client"" />
			<arg value=""-b"" />
			<arg value=""async_binding.xml"" />
			<arg value=""-d"" />
			<arg value=""src"" />
			<arg value=""${wsdl.url}"" />
			<classpath>
				<fileset dir=""${basedir}/lib"">
					<include name=""*.jar"" />
				</fileset>
			</classpath>
		</java>

	</target>
========================

========================
async_binding.xml
<bindings
    xmlns:xsd=""http://www.w3.org/2001/XMLSchema""
    xmlns:wsdl=""http://schemas.xmlsoap.org/wsdl/""
    xmlns=""http://java.sun.com/xml/ns/jaxws"">
    <bindings node=""wsdl:definitions"">
        <enableAsyncMapping>true</enableAsyncMapping>
    </bindings>
</bindings>
========================

========================
WSDL in question:

<definitions name='HelloWorldSecurityService' targetNamespace='http://session.poc.prozone.com/' xmlns='http://schemas.xmlsoap.org/wsdl/' xmlns:soap12='http://schemas.xmlsoap.org/wsdl/soap12/' xmlns:tns='http://session.poc.prozone.com/' xmlns:xsd='http://www.w3.org/2001/XMLSchema'>
 <types></types>
 <message name='HelloWorldSecurityBean_helloWorldResponse'>
  <part name='return' type='xsd:string'></part>
 </message>
 <message name='HelloWorldSecurityBean_helloWorld'></message>
 <portType name='HelloWorldSecurityBean'>
  <operation name='helloWorld'>
   <input message='tns:HelloWorldSecurityBean_helloWorld'></input>
   <output message='tns:HelloWorldSecurityBean_helloWorldResponse'></output>
  </operation>
 </portType>
 <binding name='HelloWorldSecurityBeanBinding' type='tns:HelloWorldSecurityBean'>
  <soap12:binding style='rpc' transport='http://schemas.xmlsoap.org/soap/http'/>
  <operation name='helloWorld'>
   <soap12:operation soapAction=''/>
   <input>
    <soap12:body namespace='http://session.poc.prozone.com/' use='literal'/>
   </input>
   <output>
    <soap12:body namespace='http://session.poc.prozone.com/' use='literal'/>
   </output>
  </operation>
 </binding>
 <service name='HelloWorldSecurityService'>
  <port binding='tns:HelloWorldSecurityBeanBinding' name='HelloWorldSecurityPort'>
   <soap12:address location='http://127.0.0.1:8080/HelloWorldSecurity-app/HelloWorldSecurityBean'/>
  </port>
 </service>
</definitions>
========================

========================
Problematic generate class:
package com.prozone.poc.session;

import java.util.concurrent.Future;
import javax.jws.WebMethod;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.jws.soap.SOAPBinding.Style;
import javax.xml.ws.AsyncHandler;
import javax.xml.ws.Response;

/**
 * This class was generated by Apache CXF 2.1.2
 * Thu Oct 16 11:33:29 CEST 2008
 * Generated source version: 2.1.2
 * 
 */
 
@WebService(targetNamespace = ""http://session.poc.prozone.com/"", name = ""HelloWorldSecurityBean"")
@SOAPBinding(style = SOAPBinding.Style.RPC)
public interface HelloWorldSecurityBean {

    @WebResult(name = ""return"", targetNamespace = ""http://session.poc.prozone.com/"", partName = ""return"")
    @WebMethod
    public java.lang.String helloWorld();

    @WebMethod(operationName = ""helloWorld"")
    public Response<java.lang.String> helloWorldAsync();

    @WebMethod(operationName = ""helloWorld"")
    public Future<?> helloWorldAsync(
        @WebParam(name = ""asyncHandler"", targetNamespace = """")
        AsyncHandler<java.lang.String> asyncHandler
    );
}

========================
As you can see annotation @WebParam has no import declaration in class, so it has to be imported manually when ever the client is generated.
","Windows XP 64-bit, Java JDK 1.5. update 14 (32-bit)",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-03-13 18:32:47.855,,,no_permission,,,,,,,,,,,,,50417,,,Fri Mar 13 18:32:47 UTC 2009,,,,,,0|i143fz:,232021,,,,,,,,"13/Mar/09 18:32;dkulp;
This seems to have been fixed in 2.1.4 or maybe 2.1.3.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The default /OSGI-INF/remote-services directory should be renamed to /OSGI-INF/remote-service,CXF-1874,12406576,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,bosschaert,bosschaert,bosschaert,16/Oct/08 09:33,24/Apr/09 21:17,14/Mar/19 02:29,20/Jan/09 12:13,2.2,,,,,,,,,,,,,,2.2,,,,OSGi,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112637,,,2008-10-16 09:33:27.0,,,,,,0|i0v15r:,179161,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The osgi.remote.publish.interfaces should be renamed to osgi.remote.interfaces,CXF-1873,12406574,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,bosschaert,bosschaert,bosschaert,16/Oct/08 09:30,24/Apr/09 21:17,14/Mar/19 02:29,20/Oct/08 13:27,2.2,,,,,,,,,,,,,,2.2,,,,OSGi,,,,,,0,,,,,,,,,,,,,,,,,,,,,16/Oct/08 17:04;bosschaert;property_rename.patch;https://issues.apache.org/jira/secure/attachment/12392258/property_rename.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2008-10-20 09:20:26.468,,,no_permission,,,,,,,,,,,,,112636,,,Mon Oct 20 09:20:26 UTC 2008,,,,,,0|i1ad1r:,268580,,,,,,,,16/Oct/08 17:04;bosschaert;The attached file implements a fix for this bug and updates the tests.,"20/Oct/08 09:20;sergey_beryozkin;Patch has been applied, thanks",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JCA inbound connector ignores jaxws-endpoint bean configuration,CXF-1872,12406555,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,njiang,wtam,wtam,16/Oct/08 02:21,09/Feb/09 22:19,14/Mar/19 02:29,16/Oct/08 07:32,,,,,,,,,,,,,,,2.0.10,2.1.4,,,Integration,,,,,,0,,,,,,,,,,,,,,,,,,,,,16/Oct/08 02:40;wtam;CXF-1872.patch;https://issues.apache.org/jira/secure/attachment/12392221/CXF-1872.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2008-10-16 07:32:23.387,,,no_permission,,,,,,,,,,,,,50418,,,Thu Oct 16 07:32:23 UTC 2008,,,,,,0|i140gf:,231536,,,,,,,,"16/Oct/08 02:40;wtam;The problem seems to be that JCA inbound connector uses JaxwsServerFactoryBean to create server object.  Endpoints (org.apache.cxf.jaxws.support.JaxWsEndpointImpl) produced by the factory do not inherit from  org.apache.cxf.jaxws.EndpointImpl.class so they won't pick up jaxws-endpoint bean config.  My patch updates the JCA connector to create server from EndpointImpl for jaxws endpoints.

","16/Oct/08 07:32;njiang;Applied patch into trunk, 2.1.x and 2.0.x with thanks to William.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"I tried to configure <jaxrs:serviceFactory> that ends in a java.lang.IndexOutOfBoundsException: Index: 0, Size: 0 during the jaxrs initialazion.",CXF-1871,12406527,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,sergey_beryozkin,pussinboost,pussinboost,15/Oct/08 20:39,04/Dec/09 22:34,14/Mar/19 02:29,09/Nov/09 21:08,2.1.3,,,,,,,,,,,,,,2.2.5,2.3,,,JAX-RS,,,,,,0,,,,"I want to register my own jaxb com.sun.xml.bind.namespacePrefixMapper implementation for jaxrs. For jaxws it works great.

My jaxrs config look something like this:

<jaxrs:server name=""xml"" id=""xmlserviceserver"" address=""/xml/2008-10-06"">
		<jaxrs:serviceBeans>
			...
		</jaxrs:serviceBeans>
		<jaxrs:serviceFactory>
			<bean class=""org.apache.cxf.jaxrs.JAXRSServiceFactoryBean"">
				<property name=""dataBinding"">
			
					<bean class=""org.apache.cxf.jaxb.JAXBDataBinding"">
						<property name=""marshallerProperties"">
							<map>
								<entry>
									<key>
										<value>com.sun.xml.bind.namespacePrefixMapper</value>
									</key>
									<ref bean=""NamespacePrefixMapper"" />
								</entry>
							</map>
						</property>
					</bean>

				</property>
			</bean>
		</jaxrs:serviceFactory>
	</jaxrs:server>

The following exception is thrown.
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'xmlserviceserver': Invocation of init method failed; nested exception is java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
Caused by: 
java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
	at java.util.ArrayList.RangeCheck(ArrayList.java:547)
	at java.util.ArrayList.get(ArrayList.java:322)
	at org.apache.cxf.jaxrs.JAXRSServiceImpl.getName(JAXRSServiceImpl.java:60)
	at org.apache.cxf.jaxrs.JAXRSServerFactoryBean.createEndpointInfo(JAXRSServerFactoryBean.java:198)
	at org.apache.cxf.jaxrs.JAXRSServerFactoryBean.createEndpoint(JAXRSServerFactoryBean.java:146)
	at org.apache.cxf.jaxrs.JAXRSServerFactoryBean.create(JAXRSServerFactoryBean.java:88)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:1242)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1208)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1172)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:427)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:249)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:155)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:246)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:160)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:291)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:352)
	at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:246)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:189)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:49)
	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:3843)
	at org.apache.catalina.core.StandardContext.start(StandardContext.java:4342)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:791)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:771)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:525)
	at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:830)
	at org.apache.catalina.startup.HostConfig.deployWARs(HostConfig.java:719)
	at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:490)
	at org.apache.catalina.startup.HostConfig.start(HostConfig.java:1149)
	at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:311)
	at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:117)
	at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1053)
	at org.apache.catalina.core.StandardHost.start(StandardHost.java:719)
	at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1045)
	at org.apache.catalina.core.StandardEngine.start(StandardEngine.java:443)
	at org.apache.catalina.core.StandardService.start(StandardService.java:516)
	at org.apache.catalina.core.StandardServer.start(StandardServer.java:710)
	at org.apache.catalina.startup.Catalina.start(Catalina.java:578)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:288)
	at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:413)

If i uncomment the <jaxrs:serviceFactory> tag than it works.","apache cxf 2.1.3-SNAPSHOT 
maven 2 based build
apache tomcat 6.0.18
jdk 1.6",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-10-17 15:47:40.019,,,no_permission,,,,,,,,,,,,,112635,,,Mon Nov 09 21:08:09 UTC 2009,,,,,,0|i1ad1z:,268581,,,,,,,,"17/Oct/08 15:47;sergey_beryozkin;Hi Frank

At the moment JAX-RS runtime can not reuse org.apache.cxf.jaxb.JAXBDataBinding, rather it uses its own JAXBElementProvider.

I've just committed soem changes, you can achive the same effect by explicitly registering JAXRS JAXB Provider :

<jaxrs:server id=""bookservice"" address=""/"">
        <jaxrs:serviceBeans>
            <ref bean=""petstore""/>
            <ref bean=""bookstore""/>
        </jaxrs:serviceBeans>
        <jaxrs:providers>
            <ref bean=""jaxbProvider""/>
        </jaxrs:providers>
    </jaxrs:server>
    <bean id=""jaxbProvider"" class=""org.apache.cxf.jaxrs.provider.JAXBElementProvider"">
       <property name=""marshallerProperties"">
           <map>
             <entry>
<key>
<value>com.sun.xml.bind.namespacePrefixMapper</value>
</key>
<ref bean=""NamespacePrefixMapper"" />
</entry>
</map>
       </property>
   </bean>",09/Nov/09 21:08;sergey_beryozkin;Please use jaxrs:dataBinding or explicitly set marshallProperties on JAXBElementPtovider  ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CXF client failes to parse SOAP 1.2 FaultCode,CXF-1864,12406400,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,slobodan.marjanovic,slobodan.marjanovic,14/Oct/08 15:39,23/Oct/08 03:59,14/Mar/19 02:29,14/Oct/08 17:21,2.1.2,,,,,,,,,,,,,,2.1.3,,,,Soap Binding,,,,,,0,,,,"I'm using CXF as a WS client for WS which is running on JBoss 4.2.3 GA. Web service is configured to use SOAP 1.2 protocol. 
Here is the SOAP message that I get from server: 
<env:Envelope xmlns:env='http://www.w3.org/2003/05/soap-envelope'><env:Header></env:Header><env:Body><env:Fault xmlns:env='http://www.w3.org/2003/05/soap-envelope'><env:Code xmlns:env='http://www.w3.org/2003/05/soap-envelope'><env:Value xmlns:codeNS='http://www.w3.org/2003/05/soap-envelope' xmlns:env='http://www.w3.org/2003/05/soap-envelope'>codeNS:Receiver</env:Value></env:Code><env:Reason xmlns:env='http://www.w3.org/2003/05/soap-envelope'><env:Text xml:lang='en-US' xmlns:env='http://www.w3.org/2003/05/soap-envelope'>Some Reason</env:Text></env:Reason><env:Detail xmlns:env='http://www.w3.org/2003/05/soap-envelope'><Error><ErrorType>General</ErrorType><ErrorCode>201</ErrorCode><ErrorMessage>Person with that pid already exists!</ErrorMessage><ErrorSource>Create</ErrorSource></Error></env:Detail></env:Fault></env:Body></env:Envelope>.

CXF stack trace:
INFO: Interceptor has thrown exception, unwinding now
java.lang.RuntimeException: Invalid QName in mapping: codeNS:Receiver
	at org.apache.cxf.helpers.XMLUtils.getQName(XMLUtils.java:387)
	at org.apache.cxf.binding.soap.interceptor.Soap12FaultInInterceptor.handleMessage(Soap12FaultInInterceptor.java:72)
	at org.apache.cxf.binding.soap.interceptor.Soap12FaultInInterceptor.handleMessage(Soap12FaultInInterceptor.java:46)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:220)
	at org.apache.cxf.interceptor.AbstractFaultChainInitiatorObserver.onMessage(AbstractFaultChainInitiatorObserver.java:96)
	at org.apache.cxf.binding.soap.interceptor.CheckFaultInterceptor.handleMessage(CheckFaultInterceptor.java:69)
	at org.apache.cxf.binding.soap.interceptor.CheckFaultInterceptor.handleMessage(CheckFaultInterceptor.java:34)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:220)
	at org.apache.cxf.endpoint.ClientImpl.onMessage(ClientImpl.java:449)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleResponse(HTTPConduit.java:2029)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.close(HTTPConduit.java:1865)
	at org.apache.cxf.io.CacheAndWriteOutputStream.postClose(CacheAndWriteOutputStream.java:47)
	at org.apache.cxf.io.CachedOutputStream.close(CachedOutputStream.java:170)
	at org.apache.cxf.transport.AbstractConduit.close(AbstractConduit.java:66)
	at org.apache.cxf.transport.http.HTTPConduit.close(HTTPConduit.java:593)
	at org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor.handleMessage(MessageSenderInterceptor.java:62)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:220)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:296)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:242)
	at org.apache.cxf.frontend.ClientProxy.invokeSync(ClientProxy.java:73)
	at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:178)
	at $Proxy39.create(Unknown Source)
	at com.prozone.poc.ejb.session.PersonWS_PersonWSPort_Client.main(PersonWS_PersonWSPort_Client.java:72)
Exception in thread ""main"" javax.xml.ws.WebServiceException: java.lang.RuntimeException: Invalid QName in mapping: codeNS:Receiver
	at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:196)
	at $Proxy39.create(Unknown Source)
	at com.prozone.poc.ejb.session.PersonWS_PersonWSPort_Client.main(PersonWS_PersonWSPort_Client.java:72)
Caused by: java.lang.RuntimeException: Invalid QName in mapping: codeNS:Receiver
	at org.apache.cxf.helpers.XMLUtils.getQName(XMLUtils.java:387)
	at org.apache.cxf.binding.soap.interceptor.Soap12FaultInInterceptor.handleMessage(Soap12FaultInInterceptor.java:72)
	at org.apache.cxf.binding.soap.interceptor.Soap12FaultInInterceptor.handleMessage(Soap12FaultInInterceptor.java:46)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:220)
	at org.apache.cxf.interceptor.AbstractFaultChainInitiatorObserver.onMessage(AbstractFaultChainInitiatorObserver.java:96)
	at org.apache.cxf.binding.soap.interceptor.CheckFaultInterceptor.handleMessage(CheckFaultInterceptor.java:69)
	at org.apache.cxf.binding.soap.interceptor.CheckFaultInterceptor.handleMessage(CheckFaultInterceptor.java:34)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:220)
	at org.apache.cxf.endpoint.ClientImpl.onMessage(ClientImpl.java:449)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleResponse(HTTPConduit.java:2029)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.close(HTTPConduit.java:1865)
	at org.apache.cxf.io.CacheAndWriteOutputStream.postClose(CacheAndWriteOutputStream.java:47)
	at org.apache.cxf.io.CachedOutputStream.close(CachedOutputStream.java:170)
	at org.apache.cxf.transport.AbstractConduit.close(AbstractConduit.java:66)
	at org.apache.cxf.transport.http.HTTPConduit.close(HTTPConduit.java:593)
	at org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor.handleMessage(MessageSenderInterceptor.java:62)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:220)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:296)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:242)
	at org.apache.cxf.frontend.ClientProxy.invokeSync(ClientProxy.java:73)
	at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:178)
	... 2 more

I have tried to use Axis2 to test this case and everything worked ok. After looking at the CXF source code, I have noticed  that the problem is in FaultCode/Value parsing. It seems like CXF soap fault 1.2 interceptor, looks for ""codeNS"" namespace definition only in the top element of the message (Envelope).
","Windows XP 64-bit, Java JDK 1.5. update 14 (32-bit)",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112631,,,2008-10-14 15:39:56.0,,,,,,0|i0v3l3:,179554,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JMS Transport - JMSDestination no room left on workqueue in JMSListenerThread,CXF-1860,12406294,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Critical,Fixed,chris@die-schneider.net,userbob,userbob,13/Oct/08 10:25,23/Oct/08 03:59,14/Mar/19 02:29,18/Oct/08 17:31,2.1.2,,,,,,,,,,,,,,2.1.3,,,,Transports,,,,,,1,,,,"when running a mass test against a CXF/JMS endpoint we discovered that our solution was disposing of messages. On further investigation we discovered that the code in the JMSListenerThread when it runs out of threads on the workqueue doesn't loop like the comment suggests but rather disposes of the message. 

We altered the code to follow the comments advice (shown below) and now it calls into the code held in the else statement (which just runs the message in the listener thread, maybe not ideal from an architectural viewpoint but we don't lose messages).

//FIXME - no room left on workqueue, what to do
//for now, loop until it WILL fit on the queue, 
//although we could just dispatch on this thread.
",,,,,,,,,,,,,,,,,13/Oct/08 10:26;userbob;JMSDestination.java;https://issues.apache.org/jira/secure/attachment/12391999/JMSDestination.java,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2008-10-13 14:37:06.396,,,no_permission,,Advanced,,,,,,,,,,,112627,,,Sat Oct 18 17:31:28 UTC 2008,,,,,,0|i0uza7:,178857,,,,,,,,13/Oct/08 10:26;userbob;fix to allow the messages to post to the listener thread,"13/Oct/08 14:37;njiang;Hi Richard,

There are some refacting works of JMS Transport[1][2][3][4] in CXF 2.1.3 snapshot, the JMSDestination has been changed a lot.
Could you try your test cast against latest CXF 2.1.3 snapshot[4] to see if the issue is still there?

[1]https://issues.apache.org/jira/browse/CXF-1773
[2]https://issues.apache.org/jira/browse/CXF-1783
[3]https://issues.apache.org/jira/browse/CXF-1827
[4]https://issues.apache.org/jira/browse/CXF-1832
[5] http://cwiki.apache.org/CXF/download.html

Willem","14/Oct/08 10:43;userbob;the latest snapshot version solves this issue. thanks for your prompt reply.

regards,","18/Oct/08 17:31;chris@die-schneider.net;Hi Willem,

I think we can close this

Greetings,

Christian",,,,,,,,,,,,,,,,,,,,,,,,,,,
mtom-enabled property case sensitive,CXF-1859,12406290,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,,acorcoran,acorcoran,13/Oct/08 09:59,09/Feb/09 22:20,14/Mar/19 02:29,14/Oct/08 23:01,2.0.8,,,,,,,,,,,,,,2.1.4,,,,Configuration,,,,,,0,,,,"Setting of jax-ws endpoint property mtom-enabled is case sensitive - setting value to 'TRUE' rather than 'true' will not enable mtom.

The root of this problem is in MessageUtils.

    public static boolean isTrue(Object value) {
        if (Boolean.TRUE.equals(value) || ""true"".equals(value)) {
            return true;
        }
        
        return false;
    }

This should obviously be

    public static boolean isTrue(Object value) {
return Boolean.valueOf(value.toString());
}",jdk1.5,1800,1800,,0%,1800,1800,,,,,,,,,,14/Oct/08 05:45;mmasters;MessageUtils.patch;https://issues.apache.org/jira/secure/attachment/12392064/MessageUtils.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2008-10-14 00:02:08.763,,,no_permission,,Novice,,,,,,,,,,,50419,,,Tue Oct 14 23:01:09 UTC 2008,,,,,,0|i1ad3b:,268587,,,,,,,,"14/Oct/08 00:02;bmargulies;Would you care to post up a patch? Not that it's hard for one of us to fix, just that I'm always looking for opportunities to lure in new contributors.","14/Oct/08 05:45;mmasters;I changed the fix to use equalsIgnoreCase() because the suggested implementation would allow ""yes"". I wasn't sure if this was acceptable. I ran all the tests and they passed. I was going to write a unit test for this, but there wasn't a MessageUtilsTest.java file. What is the testing policy? I was going to create the test class, but I wanted to ask before doing so.

I've never submitted a patch before, so any input would be awesome.

cheers,
Mike

","14/Oct/08 11:52;bmargulies;I think this is fine as it is. The policy about tests does not call for unit tests for complete trivia. If you were felling really frisky, you could find and mtom test in systests and add a case for this, but testing the MessageUtils just for this strikes me as silly.",14/Oct/08 23:01;bmargulies;Patch applied. Thanks.,,,,,,,,,,,,,,,,,,,,,,,,,,,
JAXRSOutInterceptor throws NullPointerException for unknown requests when using exception mapper,CXF-1858,12406274,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,,davem,davem,13/Oct/08 02:21,24/Apr/09 21:17,14/Mar/19 02:29,05/Mar/09 18:02,2.1.2,,,,,,,,,,,,,,2.1.5,2.2,,,JAX-RS,,,,,,0,,,,"JAX-RS webservice

When a client requests URL that isnt a valid service endpoint and using an Exeption mapper to return more detailed error, if you add an entity in the response the JAXRSOutInterceptor throws a NPE.

java.lang.NullPointerException
	at org.apache.cxf.jaxrs.interceptor.JAXRSOutInterceptor.processResponse(JAXRSOutInterceptor.java:150)
	at org.apache.cxf.jaxrs.interceptor.JAXRSOutInterceptor.handleMessage(JAXRSOutInterceptor.java:61)
   .....


The exception mapper:

public class MyExceptionMapper implements ExceptionMapper<Exception>
{
	
	private static Logger LOG = LogUtils.getL7dLogger(MyExceptionMapper.class);
	
	@Override
	public Response toResponse(Exception ex) 
	{
		LOG.logp(Level.WARNING, ""MyExceptionMapper"", ""toResponse"",""Caught Exception:"", ex);
		return Response.status(503).type(""text/html"").entity(""Myexception error description"").build();
	}

}


If I dont put the entity in the response it works, but with an entity in the response it causes a NullPointerException.


currently in SVN and 2.1.2 JAXRSOutInterceptor.java line 150 is :
writer.writeTo(responseObj, targetType, invoked.getGenericReturnType(), 
                               invoked != null ? invoked.getAnnotations() : new Annotation[]{}, 
                               responseType, 
                               response.getMetadata(), 
                               out);
                

perhaps should be  this :

writer.writeTo(responseObj, targetType, 
                               invoked != null ? invoked.getGenericReturnType() : null, 
                               invoked != null ? invoked.getAnnotations() : new Annotation[]{}, 
                               responseType, 
                               response.getMetadata(), 
                               out);



","windows XP, jdk1.6.0_07, tomcat 6.0.18",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-10-15 09:26:59.895,,,no_permission,,,,,,,,,,,,,112626,,,Thu Mar 05 18:02:26 UTC 2009,,,,,,0|i1ad3j:,268588,,,,,,,,"15/Oct/08 09:26;sergey_beryozkin;Can you please post a sample resource class (with the root Path annotation), and a sample request URI. I can't reproduce this NPE at the moment. ","21/Oct/08 17:20;sergey_beryozkin;Hi, please get back to me on this issue - can you still reproduce is with say cxf 2.1.3 ?","05/Nov/08 17:57;afranken;I have also updated to 2.1.3.  The following ExceptionMapper throws an exception.  I have also included the skeleton of the service class.  My use case is sending a ""PUT"" request to the expandPatient service.

@Provider
public class FaultExceptionMapper implements ExceptionMapper<Fault> {
	protected final Log log = LogFactory.getLog(getClass());

	@Override
	public Response toResponse(Fault fault) {
		log.debug(""Fault thrown:""+fault.getCode()+"":""+fault.getMessage());
		log.error(fault.getMessage(),fault);
		/* works
		 * return Response.status(Response.Status.NOT_FOUND).build();
		 */
		 return Response.status(Response.Status.NOT_FOUND)
		 	.type(""text/plain;charset=utf-8"")
		 	.entity(""THIS IS A TEST ENTITY-BODY"").build();        
	}
}

@Path(""/PatientService"")
@ProduceMime(""application/xml"")
public class RESTfulPatientServiceImpl extends AbstractRESTfulService implements PatientService {

       ....

	@GET
	@Path(""/expandPatient/{institutionID}/{medicalRecordNumber}"")
	public DOMSource expandPatient(@PathParam(""institutionID"")String institutionID, @PathParam(""medicalRecordNumber"")String medicalRecordNumber){

        }
}

Stack Trace:
Nov 5, 2008 12:52:05 PM org.apache.cxf.interceptor.LoggingInInterceptor logging
INFO: Inbound Message
----------------------------
Encoding: UTF-8
Headers: {cache-control=[max-age=0], connection=[keep-alive], accept-language=[en-us,en;q=0.5], host=[localhost:8180], keep-alive=[300], user-agent=[Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.3) Gecko/2008092510 Ubuntu/8.04 (hardy) Firefox/3.0.3], accept-encoding=[gzip,deflate], Accept=[text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8], accept-charset=[ISO-8859-1,utf-8;q=0.7,*;q=0.7]}
Messages: 
Message:

Payload: 
--------------------------------------
Nov 5, 2008 12:52:05 PM org.apache.cxf.jaxrs.interceptor.JAXRSInInterceptor processRequest
SEVERE: .No operation matching request path /PatientService/expandPatient/1/9/1/ is found, ContentType : */*, Accept : text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8.
2008/11/05 12:52:05:446 EST [DEBUG] FaultExceptionMapper - Fault thrown:NO_OP_EXC:.No operation matching request path /PatientService/expandPatient/1/9/1/ is found, ContentType : */*, Accept : text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8.
2008/11/05 12:52:05:447 EST [ERROR] FaultExceptionMapper - .No operation matching request path /PatientService/expandPatient/1/9/1/ is found, ContentType : */*, Accept : text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8. <org.apache.cxf.interceptor.Fault: .No operation matching request path /PatientService/expandPatient/1/9/1/ is found, ContentType : */*, Accept : text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8.>org.apache.cxf.interceptor.Fault: .No operation matching request path /PatientService/expandPatient/1/9/1/ is found, ContentType : */*, Accept : text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8.
	at org.apache.cxf.jaxrs.interceptor.JAXRSInInterceptor.processRequest(JAXRSInInterceptor.java:195)
	at org.apache.cxf.jaxrs.interceptor.JAXRSInInterceptor.handleMessage(JAXRSInInterceptor.java:65)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:220)
	at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:78)
	at org.apache.cxf.transport.servlet.ServletDestination.invoke(ServletDestination.java:92)
	at org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:285)
	at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:131)
	at org.apache.cxf.transport.servlet.AbstractCXFServlet.invoke(AbstractCXFServlet.java:175)
	at org.apache.cxf.transport.servlet.AbstractCXFServlet.doGet(AbstractCXFServlet.java:157)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:689)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:802)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:269)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:188)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:213)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:172)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:117)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:108)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:151)
	at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:874)
	at org.apache.coyote.http11.Http11BaseProtocol$Http11ConnectionHandler.processConnection(Http11BaseProtocol.java:665)
	at org.apache.tomcat.util.net.PoolTcpEndpoint.processSocket(PoolTcpEndpoint.java:528)
	at org.apache.tomcat.util.net.LeaderFollowerWorkerThread.runIt(LeaderFollowerWorkerThread.java:81)
	at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:689)
	at java.lang.Thread.run(Thread.java:619)

Nov 5, 2008 12:52:05 PM org.apache.cxf.phase.PhaseInterceptorChain doIntercept
INFO: Interceptor has thrown exception, unwinding now
java.lang.NullPointerException
	at org.apache.cxf.jaxrs.interceptor.JAXRSOutInterceptor.processResponse(JAXRSOutInterceptor.java:150)
	at org.apache.cxf.jaxrs.interceptor.JAXRSOutInterceptor.handleMessage(JAXRSOutInterceptor.java:61)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:220)
	at org.apache.cxf.interceptor.OutgoingChainInterceptor.handleMessage(OutgoingChainInterceptor.java:74)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:220)
	at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:78)
	at org.apache.cxf.transport.servlet.ServletDestination.invoke(ServletDestination.java:92)
	at org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:285)
	at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:131)
	at org.apache.cxf.transport.servlet.AbstractCXFServlet.invoke(AbstractCXFServlet.java:175)
	at org.apache.cxf.transport.servlet.AbstractCXFServlet.doGet(AbstractCXFServlet.java:157)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:689)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:802)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:269)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:188)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:213)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:172)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:117)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:108)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:151)
	at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:874)
	at org.apache.coyote.http11.Http11BaseProtocol$Http11ConnectionHandler.processConnection(Http11BaseProtocol.java:665)
	at org.apache.tomcat.util.net.PoolTcpEndpoint.processSocket(PoolTcpEndpoint.java:528)
	at org.apache.tomcat.util.net.LeaderFollowerWorkerThread.runIt(LeaderFollowerWorkerThread.java:81)
	at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:689)
	at java.lang.Thread.run(Thread.java:619)
Nov 5, 2008 12:52:05 PM org.apache.cxf.interceptor.LoggingOutInterceptor$LoggingCallback onClose
INFO: Outbound Message
---------------------------
Encoding: UTF-8
Headers: {Content-Type=[text/plain;charset=utf-8]}
Messages: 
Payload: <ns1:XMLFault xmlns:ns1=""http://cxf.apache.org/bindings/xformat""><ns1:faultstring xmlns:ns1=""http://cxf.apache.org/bindings/xformat"">java.lang.NullPointerException</ns1:faultstring></ns1:XMLFault>
--------------------------------------",05/Mar/09 18:02;sergey_beryozkin;Fixed now,,,,,,,,,,,,,,,,,,,,,,,,,,,
LoggingOutInterceptor has encoding problem and the  solution,CXF-1856,12406152,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,njiang,calvinxiu,calvinxiu,10/Oct/08 07:26,23/Jan/09 17:53,14/Mar/19 02:29,16/Oct/08 13:44,2.1.2,,,,,,,,,,,,,,2.1.3,,,,Core,,,,,,0,,,,"LoggingOutInterceptor  use org.apache.cxf.io.CachedOutputStream to write the log.

in  CachedOutputStream  public void writeCacheTo(StringBuilder out) 

  out.append(((ByteArrayOutputStream)currentStream).toString();

It use the platform default encoding to write the log!!!!

in a chinese server, the default encoding is GBK, but the program is UTF-8, the clause should change to
 
  out.append(((ByteArrayOutputStream)currentStream).toString(""UTF-8"")


should LoggingOutInterceptor  pass  LoggingMessage's encoding message  to CachedOutputStream ?
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-10-16 13:44:40.311,,,no_permission,,,,,,,,,,,,,112624,,,Thu Oct 16 13:44:40 UTC 2008,,,,,,0|i0syen:,167051,,,,,,,,"16/Oct/08 13:44;njiang;Set the default encoding to be UTF-8.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Generated a Web service client , at runtime fails with follwing error",CXF-1855,12406135,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Critical,Fixed,,nmutyam,nmutyam,09/Oct/08 21:49,23/Jan/09 17:40,14/Mar/19 02:29,17/Oct/08 18:19,2.1.2,,,,,,,,,,,,,,Invalid,,,,JAX-WS Runtime,,,,,,0,,,,"Generated a client for Web service ...When i run the cleint it fails at runtime with the following error.

log4j:WARN No appenders could be found for logger (org.springframework.util.ClassUtils).
log4j:WARN Please initialize the log4j system properly.
Oct 9, 2008 4:37:58 PM org.apache.cxf.bus.spring.BusApplicationContext getConfigResources
INFO: No cxf.xml configuration file detected, relying on defaults.
Oct 9, 2008 4:38:01 PM org.apache.cxf.service.factory.ReflectionServiceFactoryBean buildServiceFromWSDL
INFO: Creating Service {http://www.fnfis.com/services/Services-Common/BorrowerFinancial/2004/01/09/v1.0}BorrowerFinancial from WSDL: file:/F:/WorkSpace-O2/MyTestProject/src/main/config/BorrowerFinancialv1[1].0.wsdl
Invoking borrowerFinancialRead...

javax.xml.ws.soap.SOAPFaultException: Request XML failed schema validation.
	at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:199)
	at $Proxy39.borrowerFinancialRead(Unknown Source)
	at com.jpmc.emc.o2.ws.wrapper.BorrowerFinancialWrapper.fetchBorrowerFinancialData(BorrowerFinancialWrapper.java:94)
	at com.jpmc.emc.o2.ws.test.BorrowerFinancialWrapperTest.testFetchBorrowerFinancialData(BorrowerFinancialWrapperTest.java:27)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at org.junit.internal.runners.TestMethodRunner.executeMethodBody(TestMethodRunner.java:99)
	at org.junit.internal.runners.TestMethodRunner.runUnprotected(TestMethodRunner.java:81)
	at org.junit.internal.runners.BeforeAndAfterRunner.runProtected(BeforeAndAfterRunner.java:34)
	at org.junit.internal.runners.TestMethodRunner.runMethod(TestMethodRunner.java:75)
	at org.junit.internal.runners.TestMethodRunner.run(TestMethodRunner.java:45)
	at org.junit.internal.runners.TestClassMethodsRunner.invokeTestMethod(TestClassMethodsRunner.java:66)
	at org.junit.internal.runners.TestClassMethodsRunner.run(TestClassMethodsRunner.java:35)
	at org.junit.internal.runners.TestClassRunner$1.runUnprotected(TestClassRunner.java:42)
	at org.junit.internal.runners.BeforeAndAfterRunner.runProtected(BeforeAndAfterRunner.java:34)
	at org.junit.internal.runners.TestClassRunner.run(TestClassRunner.java:52)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:38)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)
Caused by: org.apache.cxf.binding.soap.SoapFault: Request XML failed schema validation.
	at org.apache.cxf.binding.soap.interceptor.Soap11FaultInInterceptor.handleMessage(Soap11FaultInInterceptor.java:70)
	at org.apache.cxf.binding.soap.interceptor.Soap11FaultInInterceptor.handleMessage(Soap11FaultInInterceptor.java:35)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:220)
	at org.apache.cxf.interceptor.AbstractFaultChainInitiatorObserver.onMessage(AbstractFaultChainInitiatorObserver.java:96)
	at org.apache.cxf.binding.soap.interceptor.CheckFaultInterceptor.handleMessage(CheckFaultInterceptor.java:69)
	at org.apache.cxf.binding.soap.interceptor.CheckFaultInterceptor.handleMessage(CheckFaultInterceptor.java:34)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:220)
	at org.apache.cxf.endpoint.ClientImpl.onMessage(ClientImpl.java:449)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleResponse(HTTPConduit.java:2029)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.close(HTTPConduit.java:1865)
	at org.apache.cxf.transport.AbstractConduit.close(AbstractConduit.java:66)
	at org.apache.cxf.transport.http.HTTPConduit.close(HTTPConduit.java:593)
	at org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor.handleMessage(MessageSenderInterceptor.java:62)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:220)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:296)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:242)
	at org.apache.cxf.frontend.ClientProxy.invokeSync(ClientProxy.java:73)
	at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:178)
	... 23 more
",Simple java application,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,112623,,,2008-10-09 21:49:13.0,,,,,,0|i0uy93:,178690,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Provider classes must implement Provider<T> even when superclass does,CXF-1852,12406073,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,dkulp,andrewclegg,andrewclegg,09/Oct/08 12:00,03/Aug/09 20:06,14/Mar/19 02:29,16/Jul/09 18:39,2.1.2,,,,,,,,,,,,,,2.1.6,2.2.3,,,JAX-WS Runtime,,,,,,0,,,,"I've discovered something a bit weird while messing around with provider services. It seems that the implementation class must directly implement the interface Provider<T>, even if its parent class already does so. If this isn't done, I get an ArrayIndexOutOfBoundsException (on viewing the WSDL, for example) rather than an informative failure.

Stack trace:

java.lang.ArrayIndexOutOfBoundsException: 0
       org.apache.cxf.jaxws.JAXWSProviderMethodDispatcher.<init>(JAXWSProviderMethodDispatcher.java:39)
       org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean.initConfiguration(JaxWsServiceFactoryBean.java:400)
       org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean.setJaxWsImplementorInfo(JaxWsServiceFactoryBean.java:391)
       org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean.setServiceClass(JaxWsServiceFactoryBean.java:174)
       org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory.initializeServiceFactory(AbstractWSDLBasedEndpointFactory.java:227)
       org.apache.cxf.frontend.ServerFactoryBean.initializeServiceFactory(ServerFactoryBean.java:156)
       org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory.createEndpoint(AbstractWSDLBasedEndpointFactory.java:99)
       org.apache.cxf.frontend.ServerFactoryBean.create(ServerFactoryBean.java:116)
       org.apache.cxf.jaxws.JaxWsServerFactoryBean.create(JaxWsServerFactoryBean.java:168)
       org.apache.cxf.jaxws.EndpointImpl.getServer(EndpointImpl.java:336)
       org.apache.cxf.jaxws.EndpointImpl.doPublish(EndpointImpl.java:251)
       org.apache.cxf.jaxws.EndpointImpl.publish(EndpointImpl.java:201)
       org.apache.cxf.jaxws.EndpointImpl.publish(EndpointImpl.java:394)
       sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
       sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
       sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
       java.lang.reflect.Method.invoke(Method.java:597)
       org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:1242)
       org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1208)
       org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1172)
       org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:427)
       org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:249)
       org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:155)
       org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:246)
       org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:160)
       org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:291)
       org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:352)
       org.apache.cxf.transport.servlet.CXFServlet.loadAdditionalConfig(CXFServlet.java:161)
       org.apache.cxf.transport.servlet.CXFServlet.updateContext(CXFServlet.java:129)
       org.apache.cxf.transport.servlet.CXFServlet.loadSpringBus(CXFServlet.java:101)
       org.apache.cxf.transport.servlet.CXFServlet.loadBus(CXFServlet.java:70)
       org.apache.cxf.transport.servlet.AbstractCXFServlet.init(AbstractCXFServlet.java:90)
       org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)
       org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:286)
       org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:844)
       org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583)
       org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:447)
       java.lang.Thread.run(Thread.java:619)

See the attached project archive for a demonstration. It can be deployed to Tomcat with mvn tomcat:deploy . In src/main/java/cxfbug/ProviderSubClass.java there's a comment indicating what to change in order to tickle the bug.","Tomcat 6.0.16
Sun JVM 1.6.0_10-rc2-b32
Centos 5 Linux (probably irrelevent)",,,,,,,,,,,,,,,,09/Oct/08 12:01;andrewclegg;cxf-provider-bug.tar.gz;https://issues.apache.org/jira/secure/attachment/12391811/cxf-provider-bug.tar.gz,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2009-07-16 18:39:26.36,,,no_permission,,,,,,,,,,,,,89212,,,Thu Jul 16 18:39:26 UTC 2009,,,,,,0|i14exr:,233883,,,,,,,,"16/Jul/09 18:39;dkulp;
Resolved in svn revision 789420",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
org.apache.cxf.endpoint.ServerImpl does not shut down destination in stop() when MultipleEndpointObserver is used.,CXF-1850,12406010,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,orbang,orbang,08/Oct/08 12:26,04/Dec/09 22:34,14/Mar/19 02:29,12/Nov/09 01:57,2.1.2,,,,,,,,,,,,,,2.1.8,2.2.5,,,Core,,,,,,0,,,,"stop() should  call
            getDestination().setMessageObserver(null);
            getDestination().shutdown()
at some point (probably where no more endpoints are registered on the observer). Please see attached patch.",,,,,,,,,,,,,,,,,08/Oct/08 12:27;orbang;ServerImpl.patch;https://issues.apache.org/jira/secure/attachment/12391731/ServerImpl.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112619,,,2008-10-08 12:26:52.0,,,,,,0|i0syev:,167052,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
PolicyVerificationOutInterceptor writes faults at wrong phase when processing response,CXF-1849,12405998,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,fdushin,fdushin,08/Oct/08 10:11,23/Jan/09 17:53,14/Mar/19 02:29,10/Oct/08 18:34,2.1.2,,,,,,,,,,,,,,2.1.3,,,,WS-* Components,,,,,,0,,,,"When a CXF response is processed on an endpoint that contains policy assertions (via spring, WSDL, etc), and the policy assertions are not marked as asserted, the PolicyVerificationOutInterceptor properly raises a SOAP fault.  However, this interceptor is inserted into the ""post-stream"" phase, and it seems as though the fault gets written to the SOAP body after the business logic has been written.

So a response in this scenario will come out as follows:

<soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/"">
  <soap:Body>
     <sayHiResponse xmlns=""..."">
       <responseType>Bonjou</responseType>
     </sayHiResponse>
     <soap:Fault>
       <faultcode>soap:Server</faultcode>
       <faultstring>These policy alternatives can not be satisfied: [snip]</faultstring >
    </soap:Fault>
  </soap:Body>
</soap:Envelope>
",,,,,,,,,,,,,,,,,10/Oct/08 17:06;fdushin;CXF-1849-trunk-r703513.patch;https://issues.apache.org/jira/secure/attachment/12391888/CXF-1849-trunk-r703513.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2008-10-08 12:15:57.673,,,no_permission,,,,,,,,,,,,,112618,,,Fri Oct 10 18:55:18 UTC 2008,,,,,,0|i0v18f:,179173,,,,,,,,"08/Oct/08 12:15;dkulp;I think policy verification on the outgoing side needs to just log an error, not throw an exception.  With streaming, there really isn't a way to ""undo"" what was written.

Either that, or all the policies need two interceptors.  One that runs very early to make sure the policy is assertable and then a second that really does the work.
","10/Oct/08 17:06;fdushin;Proposed patch, per Dan's suggestion of logging in the case of an outbound server context.

This patch was generated off r703513 of trunk.

Please review inbound/outbound client/server logic detection, for soundness.  (full build from trunk passes with this change)

If all is well, I'd like to backmerge this patch to the 2.1.x-fixes branch.

Thanks!","10/Oct/08 18:55;fdushin;Thanks, Dan!

The merge back to the 2.1 fixes branch looks like it should be without conflict.  Should I submit a patch for that?  Or is there a different process for back-merging?

/work/src/apache/cxf/branches/2.1.x-fixes> svn diff -r 703557 rt/ws/policy/src/main/java/org/apache/cxf/ws/policy/PolicyVerificationOutInterceptor.java
===================================================================
--- rt/ws/policy/src/main/java/org/apache/cxf/ws/policy/PolicyVerificationOutInterceptor.java	(revision 703557)
+++ rt/ws/policy/src/main/java/org/apache/cxf/ws/policy/PolicyVerificationOutInterceptor.java	(working copy)
@@ -63,32 +63,10 @@
         if (policy == null) {
             return;
         }
-
-        // CXF-1849 Log a message at FINE level if policy verification fails
-        // on the outbound-server side of a response
-        try {
-            aim.checkEffectivePolicy(policy.getPolicy());
-        } catch (final PolicyException e) {
-            if (isOutboundServer(message)) {
-                LOG.fine(""An exception was thrown when verifying that the effective policy for ""
-                         + ""this request was satisfied.  However, this exception will not result in ""
-                         + ""a fault.  The exception raised is: ""
-                         + e.toString());
-                return;
-            } else {
-                throw e;
-            }
-        }
+        
+        aim.checkEffectivePolicy(policy.getPolicy());
+        
         LOG.fine(""Verified policies for outbound message."");
     }
-    
-    private boolean isOutboundServer(final Message message) {
-        final Object role = message.get(Message.REQUESTOR_ROLE);
-        final boolean isClient =
-            role != null ? Boolean.TRUE.equals(role) : false;
-        final boolean isOutbound =
-            message == message.getExchange().getOutMessage()
-            || message == message.getExchange().getOutFaultMessage();
-        return !isClient && isOutbound;
-    }
+
 }

",,,,,,,,,,,,,,,,,,,,,,,,,,,,
AttachmentDeserializer cannot handle attachments with Quoted Printable content transfer encoding,CXF-1847,12405963,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,piepera,piepera,07/Oct/08 21:57,12/Mar/09 20:37,14/Mar/19 02:29,23/Jan/09 17:37,2.1,,,,,,,,,,,,,,2.0.10,2.1.4,,,Core,,,,,,0,,,,"I am writing a Web Service using CXF. The problem occurs when CXF receives quoted printable attachments, like this one:

------=_Part_6_1979395.1210796510882
Content-Type: text/xml; charset=Cp1252
Content-Transfer-Encoding: quoted-printable
Content-ID: 606517570647
<?xml version=3D""1.0"" encoding=3D""UTF-8""?>
<MyXml attribute=3D""value"">
</MyXml> 

The AttachmentDeserializer does not decode the ""=3D"" portions of the attachment. As a result, any downstream interceptors which are expecting XML content complain, because the =3D parts of the attachment make it non-XML compliant.

This issue was originally reported to the mailing list here:

http://www.nabble.com/AttachmentDeserializer---handling-attachments-with-quoted-printable-content-transfer-encoding--tt17259696.html#a17259696

",,,,,,,,,,,,,,,,,07/Oct/08 22:01;piepera;AttachmentDeserializer.java;https://issues.apache.org/jira/secure/attachment/12391677/AttachmentDeserializer.java,07/Oct/08 22:06;piepera;QuotedPrintableDecoderStream.java;https://issues.apache.org/jira/secure/attachment/12391678/QuotedPrintableDecoderStream.java,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,50420,,,Tue Oct 07 22:06:03 UTC 2008,,,,,,0|i0syf3:,167053,,,,,,,,"07/Oct/08 22:01;piepera;The patched AttachmentDeserializer which we are using in production. This patch introduces a dependency on geronimo's QuotedPrintableDecoderStream class, which might be a bad thing.

The referenced QuotedPrintableDecoderStream class had some issues of its own which I also needed to patch.","07/Oct/08 22:06;piepera;The patched QuotedPrintableDecoderStream. This code was derived from Geronimo's QuotedPrintableDecoderStream and QuotedPrintableEncoder classes, both of which were released under the ASF license, so they should be OK to include here.

This fixes two issues with QuotedPrintableDecoderStream:

QuotedPrintableDecoderStream read should return -1 when no more data
http://www.mail-archive.com/dev@geronimo.apache.org/msg60132.html

QuotedPrintableEncoder.decode(InputStream) doesn't handle space before soft newline
http://www.mail-archive.com/dev@geronimo.apache.org/msg60213.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix some test failures when run with the ibm jdk.,CXF-1845,12405954,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,njiang,peterjones,peterjones,07/Oct/08 19:54,24/Apr/09 21:17,14/Mar/19 02:29,07/Oct/08 20:28,,,,,,,,,,,,,,,2.2,,,,,,,,,,0,,,,"Fixes for a couple of test cases which fail when run with the ibmjdk. A jaxrs test case, an aegis databinding systest, couple of corba binding test cases.",,,,,,,,,,,,,,,,,07/Oct/08 19:54;peterjones;some.ibmjdk.test.fixes.txt;https://issues.apache.org/jira/secure/attachment/12391666/some.ibmjdk.test.fixes.txt,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2008-10-07 20:28:05.127,,,no_permission,,,,,,,,,,,,,112615,,,Tue Oct 07 20:28:05 UTC 2008,,,,,,0|i1ad4n:,268593,,,,,,,,07/Oct/08 20:28;bmargulies;This could merge down to 2.1.x.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add support for byte and Byte,CXF-1844,12405926,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,njiang,bgraves,bgraves,07/Oct/08 14:41,09/Feb/09 22:20,14/Mar/19 02:29,07/Oct/08 23:11,2.0.8,2.1.2,,,,,,,,,,,,,2.1.4,,,,Aegis Databinding,,,,,,0,,,,"Hi, 
I have a web service which accepts a byte parameter in one of the objects and aegis does not support it out of the box.  I ran across this issue submitted to XFire some time ago, but it seems it was never fixed:

http://jira.codehaus.org/browse/XFIRE-462

That bug focuses mainly on the wsdl creation, but the byte values don't even get passed correctly to the service.  It seems like a pretty simple fix,so I'm not really sure why it was never resolved.  For the time being I added some custom types (basically just like the ShortType) to handle the two byte classes, but things would be a lot cleaner if aegis supported them.

Preferably, this would be resolved in the 2.0.x branch as we have not yet moved to 2.1.x.",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-10-07 23:11:06.667,,,no_permission,,Novice,,,,,,,,,,,50421,,,Wed Oct 08 14:18:30 UTC 2008,,,,,,0|i0v1db:,179195,,,,,,,,"07/Oct/08 23:11;bmargulies;Please merge all the way to 2.0.x if possible. That's not going to be trivial, given the 2.1 restructuring of Aegis. The OP may be OOL.
","08/Oct/08 13:14;njiang;Hi Benson, 

 It took me some time to merge the change into 2.0.x .Could you review the BeanTest  to make sure I didn't mess up anything?
 http://svn.apache.org/viewvc/cxf/branches/2.0.x-fixes/rt/databinding/aegis/src/test/java/org/apache/cxf/aegis/type/basic/BeanTest.java?view=markup&pathrev=702794

Cheers,

Willem","08/Oct/08 13:15;njiang;trunk
http://svn.apache.org/viewvc?rev=702663&view=rev

2.1.x
http://svn.apache.org/viewvc?rev=702684&view=rev

2.0.x
http://svn.apache.org/viewvc?rev=702794&view=rev","08/Oct/08 14:18;bmargulies;The test looks right to me. Thanks for doing all this work, I'm sure it was a pain.
",,,,,,,,,,,,,,,,,,,,,,,,,,,
"wsdl2java: failed to create ""action"" attribute under annotation @WebMethod",CXF-1843,12405787,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,ryan.kschee,ryan.kschee,06/Oct/08 07:25,15/Oct/08 04:52,14/Mar/19 02:29,06/Oct/08 21:31,2.0.5,,,,,,,,,,,,,,2.0.9,2.1.3,,,Tooling,,,,,,0,,,,"A client is invoking a soap 1.2 .NET webservice. The issue we're having is that the remote service requires soap action headers and cxf's wsdl2java is not generating action parameters for each WebMethod annotation automatically. 

For example, wsdl2java will generate this annotation:

@WebMethod(operationName = ""GetCustomerData"")

but we need it to generate this one:

@WebMethod(operationName = ""GetCustomerData"",action = ""http://tempuri.org/IAceRewardsService/GetCustomerData"") ",Apache CXF-2.0.5-Incubator,,,,,,,,,,,,,,,,06/Oct/08 07:27;ryan.kschee;sampleservice.zip;https://issues.apache.org/jira/secure/attachment/12391521/sampleservice.zip,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2008-10-06 11:05:12.731,,,no_permission,,,,,,,,,,,,,112614,,,Mon Oct 06 19:50:25 UTC 2008,,,,,,0|i1ad4v:,268594,,,,,,,,06/Oct/08 07:28;ryan.kschee;I have attached a sample wsdl file that generates this kind of behavior. ,"06/Oct/08 11:05;dandiep;FYI, I think this is the same issue as: http://www.nabble.com/wsdl2java-%2B-@WebMethod-annotation-with-action...-td19535644.html","06/Oct/08 19:50;dkulp;
This is actually slightly different than I expected.   The problem has to do with the policy reference in the binding.   If that is removed or moved to AFTER the soap12:binding element, the annotations are generated correctly.   Working on a fix.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Some issues with outbound jca connector,CXF-1841,12405779,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,njiang,wtam,wtam,06/Oct/08 04:13,23/Jan/09 17:52,14/Mar/19 02:29,16/Oct/08 07:27,,,,,,,,,,,,,,,2.0.9,2.1.3,,,Integration,,,,,,0,,,,"1. The client proxy factory does not get configured by Configurer to inject configurations.  So, for example, the ws security cannot be enabled in JCA connector.
2. ManagedConnectionImpl should implement equals() ahd hashcode() based on properties as required by JCA 1.5
3. A single bus is shared by multiple web applications.  It is not possible to have a per web application bus config. 
4. If a bean class is defined in a WAR and it is referenced by bus config, the bus cannot be created when the JCA connector starts in WebSphere 6.1.  The reason is JCA connector classloader cannot load the class in belong in a WAR.
5. The outbound connector APIs should be moved to the api module so that javadoc can be produced for them.",,,,,,,,,,,,,,,,,06/Oct/08 20:41;wtam;CXF-1841.patch;https://issues.apache.org/jira/secure/attachment/12391572/CXF-1841.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112612,,,Mon Oct 06 20:41:09 UTC 2008,,,,,,0|i0v1cf:,179191,,,,,,,,06/Oct/08 04:14;wtam;I'll submit a patch.,"06/Oct/08 20:41;wtam;I created a patch to address the issues and added a sample.  The new inbound connector has been tested with WAS 6.1 but it has not been tested with JBoss.   Both the inbound and outbound connector need to be tested with JBoss and resolve any issues that may pop up.   Once that's been done, we can remove the old inbound and outbound connector.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
aegis databinding does not respect type in javax.xml.bind.annotation.XmlElement annotation,CXF-1840,12405778,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,njiang,peterjones,peterjones,06/Oct/08 03:24,24/Apr/09 21:16,14/Mar/19 02:29,07/Oct/08 20:27,,,,,,,,,,,,,,,2.2,,,,Aegis Databinding,,,,,,0,,,,"The JaxbTypeTest.testType() test checks that elementProperty has a type of StringType, however the JaxbBean1 class getElementProperty() method has the following annotation:

    @XmlElement(type = CustomStringType.class)
    public String getElementProperty() {

So, it seems it should test that the type is a CustomStringType.  I'm attaching a patch which fixes the test to test for the custom type, and adds a modification to AnnotationReader so that the type from the javax.xml.bind.annoation.XmlElement annotation is read correctly (so that the modified test will pass).

Let me know if you think this is the appropriate fix!

Cheers,
Peter",,,,,,,,,,,,,,,,,06/Oct/08 03:25;peterjones;rt.databinding.aegis.patch.txt;https://issues.apache.org/jira/secure/attachment/12391512/rt.databinding.aegis.patch.txt,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2008-10-07 20:27:31.629,,,no_permission,,,,,,,,,,,,,112611,,,Tue Oct 07 20:27:31 UTC 2008,,,,,,0|i0v1pr:,179251,,,,,,,,06/Oct/08 03:25;peterjones;Patch to fix issue,07/Oct/08 20:27;bmargulies;This should merge down to 2.1.x.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Space in project name causes ?wsdl parameter to fail,CXF-1838,12405696,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,dkulp,huntc,huntc,03/Oct/08 13:45,13/Nov/09 17:27,14/Mar/19 02:29,16/Oct/09 18:39,2.1.2,,,,,,,,,,,,,,2.1.7,2.2.4,,,Transports,,,,,,0,,,,"An Eclipse project name that includes a space e.g. ""HR Webservices"" results in an exception thrown when querying a web service for its wsdl i.e. using the ?wsdl parameter in a URL.

Renaming the project so that there are no spaces solves the problem.","Eclipse Ganymede, Mac OS X 10.5.5",,,,,,,,,,,,,,CXF-2301,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-10-16 18:39:49.367,,,no_permission,,,,,,,,,,,,,112609,,,Fri Oct 16 18:39:49 UTC 2009,,,,,,0|i0cv2n:,72978,,,,,,,,"16/Oct/09 18:39;dkulp; 
This should have been fixes as part of the fixes for CXF-2301  ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Goofy code until we see a fix from XmlSchema in SchemaCollection,CXF-1837,12405607,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,,bmargulies,bmargulies,02/Oct/08 01:10,11/Oct/10 14:44,14/Mar/19 02:29,15/Oct/09 00:26,2.1.2,,,,,,,,,,,,,,2.3,,,,Core,,,,,,0,,,,SchemaCollection has silly code that should be removed if XmlSchema ever deals with WSCOMMONS-396.,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-10-05 15:47:38.395,,,no_permission,,,,,,,,,,,,,112608,,,Thu Oct 15 00:26:49 UTC 2009,,,,,,0|i0syfj:,167055,,,,,,,,"05/Oct/09 15:47;dkulp;
Did we ever remove the goofy code?     Do we care?   Is this resolvable?

","05/Oct/09 20:59;bmargulies;I could fix this in trunk, yes.",15/Oct/09 00:26;bmargulies;r825351,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The corba prefix is not present in the physical part of the wsdl when a yoko corba namespace is used.,CXF-1834,12405469,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,keith.halligan@iona.com,keith.halligan@iona.com,30/Sep/08 14:18,23/Oct/08 03:59,14/Mar/19 02:29,07/Oct/08 17:06,2.1.2,,,,,,,,,,,,,,2.1.3,,,,CORBA Binding,JAXB Databinding,,,,,0,,,,"The corba prefix is not present in the physical part of the wsdl returned on the wire, when the original wsdl used the old yoko corba namespace: ""http://schemas.apache.org/yoko/bindings/corba""

eg. 
<wsdl:binding name=""HelloWorldCORBABinding"" type=""tns:HelloWorld"">
    <ns2:binding xmlns:ns2=""http://cxf.apache.org/bindings/corba"" bases="""" repositoryID=""IDL:HelloWorld:1.0"" />
    <wsdl:operation name=""greetMe"">
      <ns2:operation xmlns:ns2=""http://cxf.apache.org/bindings/corba"" name=""greetMe"">
        <ns2:param mode=""in"" idltype=""ns2:string"" name=""inparameter"" />
        <ns2:return idltype=""ns2:string"" name=""outparameter"" />
      </ns2:operation>
      <wsdl:input name=""greetMeRequest"">
      </wsdl:input>
      <wsdl:output name=""greetMeResponse"">
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name=""HelloWorldCORBAService"">
    <wsdl:port name=""HelloWorldCORBAPort"" binding=""tns:HelloWorldCORBABinding"">
      <ns2:address xmlns:ns2=""http://cxf.apache.org/bindings/corba"" location=""corbaloc::localhost:40001/hw"" />
    </wsdl:port>
  </wsdl:service>
  <ns2:typeMapping xmlns:ns2=""http://cxf.apache.org/bindings/corba"" targetNamespace=""http://schemas.apache.org/yoko/idl/HelloWorld/corba/typemap/"" />
</wsdl:definitions>",,,,,,,,,,,,,,,,,30/Sep/08 14:22;keith.halligan@iona.com;corba_prefix_fix.diff;https://issues.apache.org/jira/secure/attachment/12391218/corba_prefix_fix.diff,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112606,,,Tue Sep 30 14:31:01 UTC 2008,,,,,,0|i0v16v:,179166,,,,,,,,"30/Sep/08 14:31;keith.halligan@iona.com;This patch fixes the problem where a wsdl returned on the wire does not contain the correct corba prefix, and it defaults to the cxf corba namespace, when the old yoko namespace was in the definition part of the wsdl.

The fix is in the JAXBExtensionHelper.  The change seems a little out of place, as JAXBExtensionHelper seems very generic.  Perhaps someone could offer some suggestions about getting this fix into the rt/bindings/corba code?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
org.apache.cxf.wsdl.EndpointReferenceUtils.resolveResource() changes cause failure in schema import resolution,CXF-1831,12405417,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,bmargulies,bhcollins,bhcollins,29/Sep/08 19:50,15/Oct/08 04:52,14/Mar/19 02:29,30/Sep/08 22:58,2.1.1,2.1.2,,,,,,,,,,,,,2.0.9,2.1.3,,,,,,,,,0,,,,"In moving from cxf 2.1.0 to 2.1.1 (or 2.1.2)  I am encountering the following problem:

org.apache.cxf.wsdl.EndpointReferenceUtils.resolveResource() fails to resolve schema imports because systemId is null when trying to resolve the URI.


Interestingly the comment at the top of EndpointReferenceUtils reads as follows:

   /**
    * We want to load the schemas, including references to external schemas, into a SchemaFactory
    * to validate. There seem to be bugs in resolving inter-schema references in Xerces, so even when we are
    * handing the factory all the schemas, interrelated with &lt;import&gt; elements, we need
    * to also hand over extra copies (!) as character images when requested.
    *
    * To do this, we use the DOM representation kept in the SchemaInfo. This has the bonus
    * of benefiting from the use of the catalog resolver in there, which is missing from
    * the code in here.
    */

It looks like the code that this comment refers to was removed in 2.1.1, and that code does in fact resolve my schema's correctly.",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-09-30 22:58:32.002,,,no_permission,,,,,,,,,,,,,112603,,,Tue Sep 30 22:58:32 UTC 2008,,,,,,0|i1ad67:,268600,,,,,,,,"30/Sep/08 21:41;bhcollins;Changing the second line of EndpointReferenceUtils.resolveResource(), as suggested by Dan, to read as follows:

if (baseURI != null && systemId != null) {  //add additional systemId null check

fixes the issue for me. My only concern/question is
why are systemId and  publicId null? The code path taken after the
change happens not to access either, but does set them both into the
returned impl.

That said everything seems to get resolved correctly.",30/Sep/08 22:58;bmargulies;I applied the fix.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Missing dependency when building dOSGi,CXF-1830,12405355,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,,bosschaert,bosschaert,29/Sep/08 09:40,24/Apr/09 21:16,14/Mar/19 02:29,30/Sep/08 08:31,2.2,,,,,,,,,,,,,,2.2,,,,OSGi,,,,,,0,,,,"When building...

Downloading: http://s3.amazonaws.com/maven.springframework.org/osgi/org/apache/s
ervicemix/bundles/org.apache.servicemix.bundles.woodstox/3.2.6_1-SNAPSHOT/org.ap
ache.servicemix.bundles.woodstox-3.2.6_1-SNAPSHOT.jar
[INFO] ------------------------------------------------------------------------
[ERROR] BUILD ERROR
[INFO] ------------------------------------------------------------------------
[INFO] Failed to resolve artifact.

Missing:
----------
1) org.apache.servicemix.bundles:org.apache.servicemix.bundles.woodstox:jar:3.2.
6_1-SNAPSHOT

  Try downloading the file manually from the project website.

  Then, install it using the command:
      mvn install:install-file -DgroupId=org.apache.servicemix.bundles -Dartifac
tId=org.apache.servicemix.bundles.woodstox -Dversion=3.2.6_1-SNAPSHOT -Dpackagin
g=jar -Dfile=/path/to/file

  Alternatively, if you host your own repository you can deploy the file there:

      mvn deploy:deploy-file -DgroupId=org.apache.servicemix.bundles -DartifactI
d=org.apache.servicemix.bundles.woodstox -Dversion=3.2.6_1-SNAPSHOT -Dpackaging=
jar -Dfile=/path/to/file -Durl=[url] -DrepositoryId=[id]

  Path to dependency:
        1) org.apache.cxf:cxf-dosgi-ri-felix-profiles:jar:1.0-SNAPSHOT
        2) org.apache.servicemix.bundles:org.apache.servicemix.bundles.woodstox:
jar:3.2.6_1-SNAPSHOT

----------
1 required artifact is missing.

for artifact:
  org.apache.cxf:cxf-dosgi-ri-felix-profiles:jar:1.0-SNAPSHOT

from the specified remote repositories:
  repository.opensaml (http://ws.zones.apache.org/repository2),
  spring-osgified-artifacts (http://s3.amazonaws.com/maven.springframework.org/o
sgi),
  apache.snapshots (http://people.apache.org/repo/m2-snapshot-repository/),
  com.springsource.repository.bundles.external (http://repository.springsource.c
om/maven/bundles/external),
  ops4j (http://repository.ops4j.org/maven2),
  java.net (https://maven-repository.dev.java.net/nonav/repository),
  servicemix (http://svn.apache.org/repos/asf/servicemix/m2-repo),
  central (http://repo1.maven.org/maven2),
  com.springsource.repository.bundles.release (http://repository.springsource.co
m/maven/bundles/release),
  i21-s3-maven-repo (http://s3.amazonaws.com/maven.springframework.org/milestone
)


[INFO] ------------------------------------------------------------------------
[INFO] For more information, run Maven with the -e switch
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 31 seconds
[INFO] Finished at: Fri Sep 26 16:54:50 BST 2008
[INFO] Final Memory: 25M/45M
[INFO] ------------------------------------------------------------------------

C:\checkouts\dosgi>

",,,,,,,,,,,,,,,,,29/Sep/08 09:57;bosschaert;missing_deps.patch;https://issues.apache.org/jira/secure/attachment/12391119/missing_deps.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112602,,,Mon Sep 29 09:57:31 UTC 2008,,,,,,0|i1ad6f:,268601,,,,,,,,"29/Sep/08 09:55;bosschaert;Additionally, there is this missing dependency.

[INFO] Failed to resolve artifact.

Missing:
----------
1) org.apache.servicemix.kernel.testing:org.apache.servicemix.kernel.testing.support:jar:1.0.0-SNAPSHOT

 Try downloading the file manually from the project website.

 Then, install it using the command:
     mvn install:install-file -DgroupId=org.apache.servicemix.kernel.testing -DartifactId=org.apache.servicemix.kernel.testing.support -Dversion=1.0.0-SNAPSHOT -Dpackaging=jar -Dfile=/path/to/file

 Alternatively, if you host your own repository you can deploy the file there:
     mvn deploy:deploy-file -DgroupId=org.apache.servicemix.kernel.testing -DartifactId=org.apache.servicemix.kernel.testing.support -Dversion=1.0.0-SNAPSHOT -Dpackaging=jar -Dfile=/path/to/file -Durl=[url] -DrepositoryId=[id]

 Path to dependency:
       1) org.apache.cxf:cxf-dosgi-ri-systests:pom:1.0-SNAPSHOT
       2) org.apache.servicemix.kernel.testing:org.apache.servicemix.kernel.testing.support:jar:1.0.0-SNAPSHOT



",29/Sep/08 09:57;bosschaert;Patch created with the help of Sergey B. Fixes the missing dependency problems.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
xmlbean binding can not handle Exception,CXF-1829,12405305,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,quzhe,quzhe,28/Sep/08 09:34,30/Jul/09 18:01,14/Mar/19 02:29,28/Jul/09 17:48,2.1.1,,,,,,,,,,,,,,2.2.2,,,,JAXB Databinding,,,,,,1,,,,"hi,All:
my webservice using xmlbean binding, when service have not throw a exception, it is working fine, but when I add a throw exception, my webservice can not start.
here is my code:

service:
public InsertFmdeclarationResponse insert(InsertFmdeclarationParamDocument.InsertFmdeclarationParam body) throws TestException
// when I add TestException, it can not working

exception:
@WebFault(name=""TestException"")
public class TestException extends Exception{
...
}

the error trace is""

Caused by: java.lang.NullPointerException
        at org.apache.cxf.xmlbeans.XmlBeansSchemaInitializer.mapClass(XmlBeansSc
hemaInitializer.java:165)
        at org.apache.cxf.xmlbeans.XmlBeansSchemaInitializer.checkForExistence(X
mlBeansSchemaInitializer.java:217)
        at org.apache.cxf.xmlbeans.XmlBeansSchemaInitializer.begin(XmlBeansSchem
aInitializer.java:142)
        at org.apache.cxf.service.ServiceModelVisitor.visitOperation(ServiceMode
lVisitor.java:120)
        at org.apache.cxf.service.ServiceModelVisitor.walk(ServiceModelVisitor.j
ava:74)
        at org.apache.cxf.xmlbeans.XmlBeansDataBinding.initialize(XmlBeansDataBi
nding.java:102)



thank you!
",,,,,,,,,,,,,,,,,01/Oct/08 05:29;quzhe;my-app.zip;https://issues.apache.org/jira/secure/attachment/12391265/my-app.zip,04/Oct/08 15:00;quzhe;my-app2.zip;https://issues.apache.org/jira/secure/attachment/12391468/my-app2.zip,,,,,2.0,,,,,,,,,,,,,,,,,,,,2008-09-30 11:10:25.342,,,no_permission,,,,,,,,,,,,,112601,,,Tue Jul 28 17:48:48 UTC 2009,,,,,,0|i1ad6n:,268602,,,,,,,,"30/Sep/08 11:10;seanoc;Do you have  a testcase that would allow me to reproduce this?
","01/Oct/08 05:24;quzhe;hi,than you for reply

this error happens when spring context loading, I dont know how to write a simple test case for it.

so I create a new project, it is a maven project. you can build and run that test directly.

I have upgrade to 2.1.2, still get this error.

thank you",01/Oct/08 05:29;quzhe;a maven project for test,"04/Oct/08 15:00;quzhe;server side is ok.

but it looks will return a empty soapfault message to client.

so client will create such message:

Caused by: com.sun.xml.messaging.saaj.SOAPExceptionImpl: No NamespaceURI, SOAP requires faultcode content to be a QName
	at com.sun.xml.messaging.saaj.soap.impl.FaultImpl.setFaultCode(FaultImpl.java:101)
	at com.sun.xml.messaging.saaj.soap.impl.FaultImpl.setFaultCode(FaultImpl.java:138)
	at org.apache.cxf.jaxws.JaxWsClientProxy.createSoapFault(JaxWsClientProxy.java:243)
	at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:194)


I only use localTransport,dont know if http will have this error","05/Oct/08 06:28;quzhe;http transport is success.

but Exception constructor's param can not be a xmlbean interface, it need interface implementation

I think maybe local transport have bug here, I can not do integration test without local transport

",08/Jan/09 16:43;seanoc;Recieved testcase from customer on similar issue so investigating this.,"28/Jul/09 17:48;dkulp;
This is resolved.  The attached test case throws the proper SystemFault object with 2.2.2",,,,,,,,,,,,,,,,,,,,,,,,
inFaultInterceptors doesn't work as expected,CXF-1828,12405298,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,seanoc,owler,owler,27/Sep/08 18:52,05/Dec/08 19:01,14/Mar/19 02:29,05/Dec/08 14:37,2.1.1,2.1.2,2.1.3,,,,,,,,,,,,2.2,,,,Bus,Samples,,,,,0,,,,"I'm trying to zip FAULT response from server. 
Server properly zip response , so server's [outFaultInterceptors] work fine
But, It looks like client couldn't properly process it in [inFaultInterceptors]
Step to reproduce:
1. Upade sample code from standart distributive 
     apache-cxf-2.1.2/samples/configuration_interceptor 
client.xml:
    <cxf:bus>
        <cxf:inInterceptors>
        </cxf:inInterceptors>
        <cxf:inFaultInterceptors>
            <ref bean=""GZIPStream""/>            
        </cxf:inFaultInterceptors>

        <!--cxf:outInterceptors>            
            <ref bean=""GZIPStream""/>        
        </cxf:outInterceptors>
        <cxf:outFaultInterceptors>           
             <ref bean=""GZIPStream""/>
        </cxf:outFaultInterceptors-->
    </cxf:bus>

server:xml:
    <cxf:bus>
        <!--cxf:inInterceptors>
            <ref bean=""GZIPStream""/>
        </cxf:inInterceptors>
        <cxf:inFaultInterceptors>
            <ref bean=""GZIPStream""/>            
        </cxf:inFaultInterceptors-->
        <cxf:outInterceptors>            
            <!--ref bean=""GZIPStream""/-->        
        </cxf:outInterceptors>
        <cxf:outFaultInterceptors>           
             <ref bean=""GZIPStream""/>
        </cxf:outFaultInterceptors>
    </cxf:bus>

Client.java:
add next code and uncomment //import lines:

import org.apache.hello_world_soap_http.PingMeFault;
import org.apache.hello_world_soap_http.types.FaultDetail;

...
        try {
            System.out.println(""Invoking pingMe, expecting exception..."");
            port.pingMe();
        } catch (PingMeFault ex) {
            System.out.println(""Expected exception: PingMeFault has occurred: "" + ex.getMessage());
            FaultDetail detail = ex.getFaultInfo();
            System.out.println(""FaultDetail major:"" + detail.getMajor());
            System.out.println(""FaultDetail minor:"" + detail.getMinor());            
        }          
        System.exit(0); 
}

Result: 

     [java] Invoking pingMe, expecting exception...
     [java] Exception in thread ""main"" javax.xml.ws.soap.SOAPFaultException: Could not create XMLStreamReader (input was of encoding UTF-8).
     [java] 	at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:199)
     [java] 	at $Proxy41.pingMe(Unknown Source)
     [java] 	at demo.stream.client.Client.main(Client.java:67)
     [java] Caused by: org.apache.cxf.interceptor.Fault: Could not create XMLStreamReader (input was of encoding UTF-8).
     [java] 	at org.apache.cxf.interceptor.StaxInInterceptor.handleMessage(StaxInInterceptor.java:83)
     [java] 	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:221)
     [java] 	at org.apache.cxf.endpoint.ClientImpl.onMessage(ClientImpl.java:449)
     [java] 	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleResponse(HTTPConduit.java:1996)
     [java] 	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.close(HTTPConduit.java:1832)
     [java] 	at org.apache.cxf.transport.AbstractConduit.close(AbstractConduit.java:66)
     [java] 	at org.apache.cxf.transport.http.HTTPConduit.close(HTTPConduit.java:591)
     [java] 	at org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor.handleMessage(MessageSenderInterceptor.java:62)
     [java] 	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:221)
     [java] 	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:296)
     [java] 	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:242)
     [java] 	at org.apache.cxf.frontend.ClientProxy.invokeSync(ClientProxy.java:73)
     [java] 	at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:178)
     [java] 	... 2 more
     [java] Caused by: com.ctc.wstx.exc.WstxIOException: Invalid UTF-8 start byte 0x8b (at char #2, byte #-1)
     [java] 	at com.ctc.wstx.stax.WstxInputFactory.doCreateSR(WstxInputFactory.java:548)
     [java] 	at com.ctc.wstx.stax.WstxInputFactory.createSR(WstxInputFactory.java:604)
     [java] 	at com.ctc.wstx.stax.WstxInputFactory.createSR(WstxInputFactory.java:629)
     [java] 	at com.ctc.wstx.stax.WstxInputFactory.createXMLStreamReader(WstxInputFactory.java:324)
     [java] 	at org.apache.cxf.interceptor.StaxInInterceptor.handleMessage(StaxInInterceptor.java:81)
     [java] 	... 14 more
     [java] Caused by: java.io.CharConversionException: Invalid UTF-8 start byte 0x8b (at char #2, byte #-1)
     [java] 	at com.ctc.wstx.io.UTF8Reader.reportInvalidInitial(UTF8Reader.java:302)
     [java] 	at com.ctc.wstx.io.UTF8Reader.read(UTF8Reader.java:188)
     [java] 	at com.ctc.wstx.io.ReaderBootstrapper.initialLoad(ReaderBootstrapper.java:245)
     [java] 	at com.ctc.wstx.io.ReaderBootstrapper.bootstrapInput(ReaderBootstrapper.java:132)
     [java] 	at com.ctc.wstx.stax.WstxInputFactory.doCreateSR(WstxInputFactory.java:543)
     [java] 	... 18 more
","java 1.6
",,,,,,,,,,,,,,,,27/Sep/08 18:56;owler;Client.java;https://issues.apache.org/jira/secure/attachment/12391088/Client.java,27/Sep/08 18:56;owler;client.xml;https://issues.apache.org/jira/secure/attachment/12391089/client.xml,27/Sep/08 18:56;owler;server.xml;https://issues.apache.org/jira/secure/attachment/12391090/server.xml,,,,3.0,,,,,,,,,,,,,,,,,,,,2008-12-05 14:37:52.82,,,no_permission,,,,,,,,,,,,,112600,,,Fri Dec 05 19:01:19 UTC 2008,,,,,,0|i1ad6v:,268603,,,,,,,,27/Sep/08 18:56;owler;Find updated files from samples/configuration_interceptor in the attachment  ,"27/Sep/08 19:19;owler;version 2.1.3 works even worse
Change server.xml to zip FAULT response:
        <cxf:outFaultInterceptors>           
             <ref bean=""GZIPStream""/>
        </cxf:outFaultInterceptors>
But intentionally leave client.xml
        <cxf:inFaultInterceptors>
        </cxf:inFaultInterceptors>

Obviously client should throws Exception when received compressed FAULT response from server
But it doesn't!
","05/Dec/08 14:37;seanoc;Fixed the original configuration_interceptor demo as it was not picking up the  configuration files client.xml and server.xml correctly .

Using the provided files from Dimtry, the demo runs as expected:

server output:

[INFO] Executing operation pingMe, throwing PingMeFault exception
[INFO]
[INFO] INFO: Executing operation pingMe, throwing PingMeFault exception
[INFO] 05-Dec-2008 14:32:48 org.apache.cxf.phase.PhaseInterceptorChain doIntercept
[INFO] INFO: Application has thrown exception, unwinding now: org.apache.hello_world_soap_http.PingMeFault: PingMeFault raised by server",05/Dec/08 19:01;owler;Thanks a lot Sean!,,,,,,,,,,,,,,,,,,,,,,,,,,,
JCA inbound-mdb* samples can't be compiled out-of-the-box,CXF-1824,12405170,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,dkulp,wtam,wtam,25/Sep/08 18:08,04/Dec/09 22:34,14/Mar/19 02:29,16/Oct/09 19:57,,,,,,,,,,,,,,,2.2.5,,,,Samples,,,,,,0,,,,"JCA inbound-mdb* samples can't be compiled out-of-the-box because these samples assume ${basedir}/../common/lib/geronimo-ejb_3.0_spec-1.0.1.jar to be present.  However, that jar is not distributed by CXF.",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112596,,,2008-09-25 18:08:42.0,,,,,,0|i1ad7r:,268607,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JCA inbund connector samples (inbound-mdb*) READMEs need correction,CXF-1823,12405169,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,njiang,wtam,wtam,25/Sep/08 18:03,23/Jan/09 17:52,14/Mar/19 02:29,26/Sep/08 04:18,,,,,,,,,,,,,,,2.0.9,2.1.3,,,Samples,,,,,,0,,,,"In steps that involve browsing to rar/jar files, select ""Local path"" radio button if the sample is located in the same machine that you are running the web browser rather than ""the same machine as the WebSphere server"".",,,,,,,,,,,,,,,,,25/Sep/08 18:04;wtam;CXF-1823.patch;https://issues.apache.org/jira/secure/attachment/12390938/CXF-1823.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2008-09-26 04:18:49.773,,,no_permission,,,,,,,,,,,,,112595,,,Fri Sep 26 04:18:49 UTC 2008,,,,,,0|i1ad7z:,268608,,,,,,,,"26/Sep/08 04:18;njiang;Applied patch with thank to William
trunk
http://svn.apache.org/viewvc?rev=699155&view=rev

2.1.x
http://svn.apache.org/viewvc?rev=699158&view=rev

2.0.x
http://svn.apache.org/viewvc?rev=699161&view=rev
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WSDL Schema Imports,CXF-1822,12405164,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,dkulp,trisyn,trisyn,25/Sep/08 17:35,16/Jul/10 14:26,14/Mar/19 02:29,19/Jun/09 17:38,2.1.2,,,,,,,,,,,,,,2.1.6,2.2.3,,,,,,,,,2,,,,"The endpoint and the CXFServlet cannot be configured in such a way that a client consuming a dynamically generated WSDL receives all the imported
and included schemas.   

The generated WSDL only generates the schema import with the namespace without the schemaLocation. The WSDL writer and WSDL query handler do not render the schemaLocation value relatvie to the Servlet so that the client consuming the WSDL can look it up.

Example configruation below:

End Configuration:
<jaxws:endpoint
  id=""helloWorld""
  implementor=""com.sandbox.service.HelloWorldImpl""
  address=""/HelloWorld"">
  <jaxws:schemaLocations>
    <jaxws:schemaLocation>file:///D:/apps/CXFProto/schemas/domain.xsd</jaxws:schemaLocation>
  </jaxws:schemaLocations>
</jaxws:endpoint>


WSDL Generated:
<wsdl:definitions name=""HelloWorldImplService""
  targetNamespace=""http://service.sandbox.com/""
  xmlns:ns1=""http://cxf.apache.org/bindings/xformat""
  xmlns:soap=""http://schemas.xmlsoap.org/wsdl/soap/""
  xmlns:tns=""http://service.sandbox.com/""
  xmlns:wsdl=""http://schemas.xmlsoap.org/wsdl/""
  xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">

<wsdl:types>
  <xsd:schema 
    attributeFormDefault=""unqualified"" 
    elementFormDefault=""qualified"" 
    targetNamespace=""http://service.sandbox.com/""
    xmlns:cs=""http://www.sandbox.com/components""
    xmlns:sb=""http://service.sandbox.com/""
    xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">
      
    <xsd:import namespace=""http://www.sandbox.com/components""/>
    <xsd:include schemaLocation=""fields.xsd""/>

    <xsd:complexType name=""domainType"">
      <xsd:complexContent>
        <xsd:extension base=""cs:componentType"">
          <xsd:sequence>
            <xsd:element minOccurs=""0"" name=""foo"" type=""xsd:string""/>
          </xsd:sequence>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
       
    <xsd:element name=""sayHi"" type=""sb:sayHi""/>
  
    <xsd:complexType name=""sayHi"">
      <xsd:sequence>
        <xsd:element minOccurs=""0"" name=""arg0"" type=""xsd:string""/>
       </xsd:sequence>
    </xsd:complexType>
     
    <xsd:element name=""sayHiResponse"" type=""sb:sayHiResponse""/>
    
    <xsd:complexType name=""sayHiResponse"">
      <xsd:sequence>
        <xsd:element minOccurs=""0"" name=""return"" type=""xsd:string""/>
      </xsd:sequence>
    </xsd:complexType>
      
  </xsd:schema>
</wsdl:types>

...
</wsdl:definitions>

The WSDL generator consumes the domain.xsd specified at the endpoint configuration in Spring and renders it in the WSDL.  However the schemaLocation attribute does not contain the path to the components.xsd imported.

The import should look something like this:
<xsd:import namespace=""http://www.sandbox.com/components"" schemaLocation=""http://localhost:8080/CXFProto/services/HelloWorldServicexsd='components.xsd' "" />

Thus a client consuming the WSDL can lookup components.xsd.  Same issue with the xsd:include element.  A configuration option to get this behavior would be appropriate or the default behavior changed.
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-10-16 13:22:45.675,,,no_permission,,Unknown,,,,,,,,,,,112594,,,Sat Feb 27 16:23:31 UTC 2010,,,,,,0|i14duf:,233706,,,,,,,,16/Oct/08 13:22;njiang;move it to CXF 2.1.4,17/Jun/09 20:58;sortakool;What's the status of this? This is preventing me from the schema-first development I had with XFire. ,"17/Jun/09 21:01;bmargulies;This is an open source project. None of us, apparently, are in a position to tackle this. If you need it badly enough, I'm afraid you will have to join in and make a patch.","17/Jun/09 21:10;dkulp;Barring a full patch,  attaching a full ""ready to run"" test case is also the best way to help get it fixed.   Creating the test cases is usually one of the hardest parts of fixing these things.
","17/Jun/09 21:23;sortakool;Thanks for the quick response. 

I'm assuming a large number of CXF users were XFire users who went the schema-first development way. I've searched the CXF nabble forums for anybody with similar problems and came across this JIRA item. Is there a work around for this problem that I am not aware of? Any help would be appreciated.","27/Feb/10 16:23;yogeshj;Is this issue really resolved? I am facing same problem, with CXF 2.2.5.",,,,,,,,,,,,,,,,,,,,,,,,,
UrlUtilities.getStem is parsing a decoded URL,CXF-1821,12405091,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,njiang,wgomes,wgomes,24/Sep/08 18:09,23/Oct/08 03:59,14/Mar/19 02:29,07/Oct/08 22:24,2.1.2,,,,,,,,,,,,,,2.1.3,,,,,,,,,,0,,,,"UrlUtilities.getStem method parses a decoded uri path using lastIndexOf('/').  This returns an incorrect ""stem"" if the baseURI path contained an encoded forward slash. This in turn is results in the WSDLQueryHandler to not recognize a wsdl query.  I've attached a patch to fix this issue.",,,,,,,,,,,,,,,,,24/Sep/08 18:09;wgomes;patch.txt;https://issues.apache.org/jira/secure/attachment/12390858/patch.txt,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2008-10-07 22:24:13.064,,,no_permission,,,,,,,,,,,,,112593,,,Tue Oct 07 22:24:13 UTC 2008,,,,,,0|i1473z:,232615,,,,,,,,07/Oct/08 22:24;bmargulies;Please include in 2.1.x,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CXF does not work with hex-encoded request parameters,CXF-1820,12405060,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,sergey_beryozkin,tarjei@scanmine.com,tarjei@scanmine.com,24/Sep/08 09:22,09/Feb/09 22:20,14/Mar/19 02:29,24/Nov/08 10:57,2.1.2,,,,,,,,,,,,,,2.1.4,,,,JAX-RS,,,,,,0,,,,"Hi, I got a service where I want to expose a resource that is defined by
an url to a rssfeed, something like:

    @GET
    @Path(""/{URL}/"")
    public Subscriber getSubscriber(@PathParam(""URL"") String url) {
       ... do something with the url.
    }

Now, this does not work with normal urls, nor with urlencoded urls. Why
urlencoded values do not work I do not know, but for normal values, it
seems obvious (they contain '/'s). I've also tried base64 encoding the
urls, but that didn't work either because sometimes the base64 encoded
string contains slashes as well.

After some discussions on the list[1], it was that this is a bug. I have also tested Jersey and standard hex-encoding works with jersey.


Links:
1. http://mail-archives.apache.org/mod_mbox/cxf-users/200809.mbox/%3C48D8F7B9.9090408@scanmine.com%3E

",CXFG using Spring 2.5 and Jetty,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-09-24 14:04:13.96,,,no_permission,,,,,,,,,,,,,50423,,,Tue Oct 21 13:02:35 UTC 2008,,,,,,0|i1ad87:,268609,,,,,,,,"24/Sep/08 14:04;wgomes;Could this be related to UrlUtilities.getStem() method? I posted a question [1] where wsdl query request was not recoginezed because getStem() was parsing an decoded url (even if an encoded url was passed in). I submitted a patch that fixes the issue I was having [2].


[1] http://www.nabble.com/WSDLQueryHandler-not-working-if-URL-service-name-contains-forward-slash-td19616055.html

[2] https://issues.apache.org/jira/browse/CXF-1821","21/Oct/08 13:02;sergey_beryozkin;Fixed on 2.2-snapshot, will be fixed on 2.1.4-SNAPSHOT shortly",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java2ws -createxsdimports with packages that reference other packages should have schemaLocation in schema import,CXF-1818,12405012,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,dkulp,bob fields,bob fields,23/Sep/08 20:47,07/Mar/16 10:01,14/Mar/19 02:29,10/Dec/09 20:00,2.1.2,,,,,,,,,,,,,,2.1.9,2.2.6,,,Tooling,,,,,,2,,,,"Object in package A references another object in package B. Using -createxsdimports option in java2ws creates schema imports and schemaLocation values properly in the .wsdl file but not in the .xsd files. <It creates xs:import namespace=""value""> without the schemaLocation="""" attribute, causing validation in most xml validators to fail. Workaround is to not use -createxsdimports, so that everything is generated in a single wsdl file, which validates properly. However, the schema files are more readable and reusable when created in separate files, instead of inline within the wsdl file.

Attached sample demonstrates this issue.","Windows XP, Sun JDK 1.5, CXF 2.1.2 or 2.2-SNAPSHOT",,,,,,,,,,,,,,,,23/Sep/08 20:48;bob fields;CXFJava2XSDImportBug.zip;https://issues.apache.org/jira/secure/attachment/12390786/CXFJava2XSDImportBug.zip,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112592,,,Tue Sep 23 20:48:12 UTC 2008,,,,,,0|i14dyf:,233724,,,,,,,,23/Sep/08 20:48;bob fields;Run either java2.bat or ant to build the wsdl/xsd files (already included).,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
wsdl2java RandomValueProvider gives StackOverflowException on bidirectional reference,CXF-1817,12405011,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,dkulp,bob fields,bob fields,23/Sep/08 20:38,04/Dec/09 22:34,14/Mar/19 02:29,29/Oct/09 14:57,2.1.2,2.2,,,,,,,,,,,,,2.1.8,2.2.5,,,Tooling,,,,,,0,,,,"ValueObject A has getB() and ValueObject B has getA(). This is a very common pattern in ORM. Running wsdl2java with -defaultValues=org.apache.cxf.tools.wsdlto.core.RandomValueProvider causes a StackOverflowException in both current release 2.1.2 and 2.2-SNAPSHOT as of 9/23/08. Attached sample project (wsdl and wsdl2java with parameters) reproduces this.

org.apache.cxf.tools.common.ToolException: Velocity engine write errors
	at org.apache.cxf.tools.common.VelocityGenerator.doWrite(VelocityGenerator.java:107)
	at org.apache.cxf.tools.wsdlto.core.AbstractGenerator.doWrite(AbstractGenerator.java:51)
	at org.apache.cxf.tools.wsdlto.frontend.jaxws.generators.ImplGenerator.generate(ImplGenerator.java:104)
	at org.apache.cxf.tools.wsdlto.WSDLToJavaContainer.execute(WSDLToJavaContainer.java:209)
	at org.apache.cxf.tools.wsdlto.WSDLToJavaContainer.execute(WSDLToJavaContainer.java:238)
	at org.apache.cxf.tools.common.toolspec.ToolRunner.runTool(ToolRunner.java:83)
	at org.apache.cxf.tools.wsdlto.WSDLToJava.run(WSDLToJava.java:103)
	at org.apache.cxf.tools.wsdlto.WSDLToJava.main(WSDLToJava.java:173)
Caused by: org.apache.velocity.exception.MethodInvocationException: Invocation of method 'writeDefaultValue' in  class org.apache.cxf.tools.common.model.JavaReturn threw exception java.lang.StackOverflowError @ org/apache/cxf/tools/wsdlto/frontend/jaxws/template/impl.vm[82,29]
	at org.apache.velocity.runtime.parser.node.ASTMethod.execute(ASTMethod.java:300)
Caused by: java.lang.StackOverflowError
	at java.util.regex.Pattern.atom(Unknown Source)
	at java.util.regex.Pattern.sequence(Unknown Source)
	at java.util.regex.Pattern.expr(Unknown Source)
	at java.util.regex.Pattern.compile(Unknown Source)
	at java.util.regex.Pattern.<init>(Unknown Source)
	at java.util.regex.Pattern.compile(Unknown Source)
	at java.lang.String.replaceAll(Unknown Source)
	at org.apache.cxf.tools.common.VelocityWriter.write(VelocityWriter.java:60)
	at org.apache.cxf.tools.wsdlto.databinding.jaxb.JAXBDataBinding$JAXBDefaultValueWriter.fillInFields(JAXBDataBinding.java:630)
	at org.apache.cxf.tools.wsdlto.databinding.jaxb.JAXBDataBinding$JAXBDefaultValueWriter.writeDefaultValue(JAXBDataBinding.java:548)
	at org.apache.cxf.tools.wsdlto.databinding.jaxb.JAXBDataBinding$JAXBDefaultValueWriter.fillInFields(JAXBDataBinding.java:616)
	at org.apache.cxf.tools.wsdlto.databinding.jaxb.JAXBDataBinding$JAXBDefaultValueWriter.writeDefaultValue(JAXBDataBinding.java:548)
","Windows XP, Sun JDK 1.5, CXF 2.1.2 or 2.2-SNAPSHOT",,,,,,,,,,,,,,,,23/Sep/08 20:39;bob fields;CXFWsdl2StackOverflow.zip;https://issues.apache.org/jira/secure/attachment/12390785/CXFWsdl2StackOverflow.zip,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112591,,,Tue Sep 23 20:39:21 UTC 2008,,,,,,0|i14evb:,233872,,,,,,,,23/Sep/08 20:39;bob fields;wsdl2.bat runs wsdl2java against supplied wsdl/xsd with the parameters needed to cause StackOverflow.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Undeploying a CXF web app from tomcat on windows does not delete some CXF files,CXF-1816,12404993,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,aleon,aleon,23/Sep/08 17:56,24/Feb/11 10:35,14/Mar/19 02:29,12/Jan/10 17:36,2.1.2,,,,,,,,,,,,,,2.2.6,,,,Integration,,,,,,4,,,,"When we try to undeploy a quite large web application (30Mb WAR file) using CXF, the operation completes with no warnings on the Tomcat manager page. However, the following two CXF files are *not* removed from the webapps folder, so that when we try to deploy the application again Tomcat fails. The files are: ""cxf-2.0.5-incubator"" and ""cxf-2.1.2"". Maybe some thread keeps these files locked and prevents tomcat from deleting them? We even tried to stop the application, wait a minute and then try to undeploy, but the above mentioned files were still there.
","Windows Vista, Tomcat 6",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-09-23 21:48:40.343,,,no_permission,,Unknown,,,,,,,,,,,112590,,,Tue Jan 12 17:36:18 UTC 2010,,,,,,0|i14dyv:,233726,,,,,,,,"23/Sep/08 21:48;gmazza;As Dan mentioned earlier on the CXF-User's list, why do you have both ""cxf-2.0.5-incubator"" and ""cxf-2.1.2""--also, does CXF actually have such files?  Also, given that ""the operation completes with no warnings on the Tomcat manager page"" and yet files still remain, are you sure this is a CXF and not actually a Tomcat one?

Also, you may wish to check your setup vs. mine to see why you apparently are running 2 CXF versions:
http://www.jroller.com/gmazza/date/20080417","24/Sep/08 11:27;aleon;Thank you for the suggestions. We were not cleaning up properly the temporary folder where we create our WAR file, so that old CXF file was there for this reason but was not the cause of the problem. In fact, the problem still existis with the other file (cxf-2.1.2.jar), which still prevents Tomcat from completely undeploying the web app.

We have found on (http://wiki.metawerx.net/wiki/TroubleshootingApplicationDeploymentOnTomcat) a reference to an antiJARLocking=""true"" to be set in the Context (ie: in the context.xml file or server.xml file) during development. We'll try this out and then report. Any other hint would be much appreciated.

","15/Jun/09 09:26;deki;Similar problem: http://www.nabble.com/JAR-locking-cxf-rt-transports-http-on-Windows-td22370086.html

antiJarLocking doesn't fix it.","23/Dec/09 03:45;dkulp;
I've gone through the heap in JProfiler to try and figure out what is happening.   It turns out there are a couple things going on:

1) There WERE two places in CXF that was holding onto the classes and classloaders using a strong reference.   I've committed fixes to that.

2) There are apparently a couple bugs in the JRE that we're hitting.   The Tomcat folks are working on ways to work around it.  You can see some of what they are doing at:
http://svn.apache.org/viewvc/tomcat/trunk/java/org/apache/catalina/core/JreMemoryLeakPreventionListener.java?revision=830908&view=markup&pathrev=830908

Basically, we're hitting both bugs mentioned in there.   The sun.awt.AppContext class is definitely holding onto the WebabbClassloader strongly which is preventing it from being undeployed.   The second bug you can see right in the comment is known to be caused by JAXB.

I've also discovered that Spring is holding onto some classes (and thus their classloader) strongly in one of their bean caches.  It MAY be OK depending on the above bugs.   Not really sure.   The only workaround I could figure out is to put the spring jars in the equivalent of the shared/lib dir and not directly in the jar.   That keeps Spring from caching them.","12/Jan/10 17:36;dkulp;
I've done about the best we can with this from CXF's perspective.   It's really issues in the JDK and the servlet containers that are holding onto things.    The Tomcat team is trying to find hacks/workarounds for various JDK bugs.   I  don't know if Jetty is doing the same.



",,,,,,,,,,,,,,,,,,,,,,,,,,
Annotated @PostConstruct methods called twice on single Spring bean ,CXF-1809,12404882,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,sirianni,sirianni,22/Sep/08 15:53,15/Oct/08 04:52,14/Mar/19 02:29,10/Oct/08 06:54,2.1.1,,,,,,,,,,,,,,2.0.9,2.1.3,,,,,,,,,0,,,,"Seems like an overlap between CXF's Jsr250BeanPostProcessor and Spring's CommonAnnotationBeanPostProcessor:

First invocation:
        MyBean.init() line: 41
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 39	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 25	
	Method.invoke(Object, Object...) line: 585	
	InitDestroyAnnotationBeanPostProcessor$LifecycleElement.invoke(Object) line: 297	
	InitDestroyAnnotationBeanPostProcessor$LifecycleMetadata.invokeInitMethods(Object, String) line: 250	
	CommonAnnotationBeanPostProcessor(InitDestroyAnnotationBeanPostProcessor).postProcessBeforeInitialization(Object, String) line: 144	
	DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).applyBeanPostProcessorsBeforeInitialization(Object, String) line: 350	
	DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).initializeBean(String, Object, RootBeanDefinition) line: 1330	
	DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).doCreateBean(String, RootBeanDefinition, Object[]) line: 473	
	AbstractAutowireCapableBeanFactory$1.run() line: 409	

Second invocation:
        MyBean.init() line: 41
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 39	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 25	
	Method.invoke(Object, Object...) line: 585	
	ResourceInjector.invokePostConstruct() line: 304	
	ResourceInjector.construct(Object) line: 86	
	Jsr250BeanPostProcessor.postProcessAfterInitialization(Object, String) line: 58	
	DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).applyBeanPostProcessorsAfterInitialization(Object, String) line: 361	
	DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).initializeBean(String, Object, RootBeanDefinition) line: 1343	
	DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).doCreateBean(String, RootBeanDefinition, Object[]) line: 473	
	AbstractAutowireCapableBeanFactory$1.run() line: 409	

I noticed this checkin after doing a google search http://code.google.com/p/xebia-france/source/detail?r=139 - it seems relevant to this bug",All,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-10-10 06:54:08.2,,,no_permission,,,,,,,,,,,,,112583,,,Fri Oct 10 06:54:08 UTC 2008,,,,,,0|i13zxb:,231450,,,,,,,,"10/Oct/08 06:54;njiang;trunk
http://svn.apache.org/viewvc?rev=703309&view=rev
2.1.x
http://svn.apache.org/viewvc?rev=703313&view=rev
2.0.x
http://svn.apache.org/viewvc?rev=703338&view=rev
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Inconsistent Databinding relationship between ClientProxyBean/ServiceFactory,CXF-1807,12404752,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,bstopp,bstopp,19/Sep/08 16:15,13/Nov/09 17:27,14/Mar/19 02:29,11/Nov/09 03:13,2.1.1,2.1.2,,,,,,,,,,,,,2.2.4,,,,Simple Frontend,,,,,,0,,,,"When creating a ClientProxyFactoryBean through the use of the spring defintion <simple:client> the data-binding definition is not passed on to all appropriate associated objects in the correct order. (NOTE: All line numbers references are based on v2.1.2 of the source code. Notation is ClassName@line)

The ClientProxyFactoryBean sets it's dataBinding onto the ClientFactoryBean @line 94. This associates the dataBinding with the ClientFactoryBean (attribute dataBinding on parent AbstractEndpointFactory).

However a request is made to execute the create() method on ClientFactoryBean (ClientProxyFactoryBean@97), one of the first tasks is to execute applyExtraClass() (ClientFactoryBean@50). I believe this assists in defining an inheritance model for the class tree. This method retrieves the dataBinding from the _serviceFactory_ (ClientFactoryBean@78) and then proceeds to apply the extra classes as per the property.

However, at this time the ServiceFactory (attribute serviceFactory on parent AbstractWSDLBasedEndpointFactory) has not been initialized. This doesn't occur the method createEndPoint() is invoked (ClientFactoryBean@52). It isn't until the createEndPoint() method is invoke that a check is made against the ServiceFactory to determine it's state. 

Once it's identified that the service hasn't been initialized, initializeServiceFactory() (AbstractWSDLBasedEndpointFactory@78) is invoked, which then associates the original dataBinding defined at the ClientProxyFactoryBean definition with the ServiceFactory (AbstractWSDLBasedEndpointFactory@150).

However, by this time, an invalid (ie: the default) dataBinding definition was used to define the additional classes for the inheritance model.

What brought this to my attention was: i was trying to utilize the AegisDataBinding to map my class tree, however it wasn't being configured correctly. 


-B",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-09-19 17:59:29.536,,,no_permission,,,,,,,,,,,,,112581,,,Wed Nov 11 03:13:55 UTC 2009,,,,,,0|i16vtj:,248287,,,,,,,,"19/Sep/08 17:59;bmargulies;At the risk of seeming to add insult to injury, could I persuade you to do a patch? It looks like you have a good handle on this. I'll take care of applying it.","15/Nov/08 19:44;bmargulies;Could you at least supply a failing test case?
",11/Nov/09 03:13;dkulp;This was fixed as part of the work of implementing the @Databinding annotation.   The applyExtraClass stuff no longer even exists as it's been pushed up into the databinding stuff itself.,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Use of Content-Type in JMS Header not in line with JMS specification,CXF-1805,12404577,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Blocker,Fixed,ulhasbhole,seumassoltysik,seumassoltysik,17/Sep/08 21:44,23/Jan/09 17:52,14/Mar/19 02:29,18/Sep/08 17:22,2.1.2,,,,,,,,,,,,,,2.0.9,2.1.3,,,Transports,,,,,,0,,,,"It looks like the use of ""Content-Type"" as a JMS header property is illegal.

When using the JMS transport with Weblogic, I got the following error:

Caused by: java.io.IOException: weblogic.jms.common.MessageFormatException: Illegal property name, 'Content-Type'
at org.apache.cxf.transport.jms.JMSConduit$JMSOutputStream.doClose(JMSConduit.java:263)
at org.apache.cxf.io.CachedOutputStream.close(CachedOutputStream.java:167)
at org.apache.cxf.transport.AbstractConduit.close(AbstractConduit.java:66)

After doing some googling I found this: http://www.nabble.com/-jira--Created:-(SYNAPSE-424)-JMS-transport-uses-JMS-properties-in-a-way-that-violates-the-JMS-specifications-td18932701.html

Dan K also pointed out the following: The SOAP over JMS spec uses the header name:  SOAPJMS_contentType
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-09-18 12:40:51.039,,,no_permission,,,,,,,,,,,,,112579,,,Thu Sep 18 17:22:25 UTC 2008,,,,,,0|i0ux9j:,178530,,,,,,,,"18/Sep/08 12:40;ulhasbhole;Hi Seumas,

The problem is appearing due to copying of PROTOCOL_HEADERS on the JMS Message. I will change the things to use JMS_content_type and do the translations while adding/retrieving the Content-Type Header.

-- Ulhas Bhole",18/Sep/08 17:22;ulhasbhole;Fixed the problem. It now uses SOAPJMS_contentType when putting or retrieving PROTOCOL_HEADER to/from JMSMessage. ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CorbaBindingFactory does not register with DestinationFactoryManager and ConduitIniatorManager,CXF-1804,12404434,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,matteo.vescovi,matteo.vescovi,16/Sep/08 12:16,23/Oct/08 03:59,14/Mar/19 02:29,16/Sep/08 13:36,2.1.2,,,,,,,,,,,,,,2.1.3,,,,CORBA Binding,,,,,,0,,,,"CorbaBindingFactory does not register with DestinationFactoryManager and ConduitIniatorManager.

",,,,,,,,,,,,,,,,,16/Sep/08 12:17;matteo.vescovi;register_fix.diff;https://issues.apache.org/jira/secure/attachment/12390187/register_fix.diff,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2008-09-16 13:19:29.197,,,no_permission,,,,,,,,,,,,,112578,,,Tue Sep 16 13:19:29 UTC 2008,,,,,,0|i0v173:,179167,,,,,,,,"16/Sep/08 12:17;matteo.vescovi;The patch attached fixes this by adding two @PostConstruct annotated methods to have Spring cause the corba binding factory to register with DestinationFactoryManager and ConduitIniatorManager.

Can someone more familiar with CXF please review the change? I thought about putting the two registration methods in the AbstractBindingFactory class that CorbaBindingFactory class extends, but I am not sure whether this belong there or not.

","16/Sep/08 13:19;dkulp;
It definitely shouldn't go into AbstractBindingFactory.   Many bindings wouldn't also be a ""transport"" and thus wouldn't do the conduit/destination stuff.   How you did it is perfect.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
wsdlvalidator logs uninteresting events,CXF-1800,12404378,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,,bmargulies,bmargulies,15/Sep/08 18:56,11/Oct/10 14:52,14/Mar/19 02:29,10/Dec/09 17:32,2.1.2,,,,,,,,,,,,,,2.1.3,,,,Tooling,,,,,,0,,,,"I think that this message should be DEBUG.

Sep 15, 2008 1:54:48 PM org.apache.cxf.tools.validator.internal.SchemaValidator createSchema
INFO: Create Schema jar:file:/home/benson/x/apache-cxf-2.1.2/lib/cxf-2.1.2.jar!/schemas/wsdl/XMLSchema.xsd which was loaded from jar
Sep 15, 2008 1:54:48 PM org.apache.cxf.tools.validator.internal.SchemaValidator createSchema
INFO: Create Schema jar:file:/home/benson/x/apache-cxf-2.1.2/lib/cxf-2.1.2.jar!/schemas/wsdl/addressing.xsd which was loaded from jar
Sep 15, 2008 1:54:48 PM org.apache.cxf.tools.validator.internal.SchemaValidator createSchema
INFO: Create Schema jar:file:/home/benson/x/apache-cxf-2.1.2/lib/cxf-2.1.2.jar!/schemas/wsdl/corba-binding.xsd which was loaded from jar
Sep 15, 2008 1:54:48 PM org.apache.cxf.tools.validator.internal.SchemaValidator createSchema
INFO: Create Schema jar:file:/home/benson/x/apache-cxf-2.1.2/lib/cxf-2.1.2.jar!/schemas/wsdl/http-conf.xsd which was loaded from jar
Sep 15, 2008 1:54:48 PM org.apache.cxf.tools.validator.internal.SchemaValidator createSchema
INFO: Create Schema jar:file:/home/benson/x/apache-cxf-2.1.2/lib/cxf-2.1.2.jar!/schemas/wsdl/http.xsd which was loaded from jar
Sep 15, 2008 1:54:48 PM org.apache.cxf.tools.validator.internal.SchemaValidator createSchema
INFO: Create Schema jar:file:/home/benson/x/apache-cxf-2.1.2/lib/cxf-2.1.2.jar!/schemas/wsdl/jms-context.xsd which was loaded from jar
Sep 15, 2008 1:54:48 PM org.apache.cxf.tools.validator.internal.SchemaValidator createSchema
INFO: Create Schema jar:file:/home/benson/x/apache-cxf-2.1.2/lib/cxf-2.1.2.jar!/schemas/wsdl/jms.xsd which was loaded from jar
Sep 15, 2008 1:54:48 PM org.apache.cxf.tools.validator.internal.SchemaValidator createSchema
INFO: Create Schema jar:file:/home/benson/x/apache-cxf-2.1.2/lib/cxf-2.1.2.jar!/schemas/wsdl/mime-binding.xsd which was loaded from jar
Sep 15, 2008 1:54:48 PM org.apache.cxf.tools.validator.internal.SchemaValidator createSchema
INFO: Create Schema jar:file:/home/benson/x/apache-cxf-2.1.2/lib/cxf-2.1.2.jar!/schemas/wsdl/soap-binding.xsd which was loaded from jar
Sep 15, 2008 1:54:48 PM org.apache.cxf.tools.validator.internal.SchemaValidator createSchema
INFO: Create Schema jar:file:/home/benson/x/apache-cxf-2.1.2/lib/cxf-2.1.2.jar!/schemas/wsdl/soap-encoding.xsd which was loaded from jar
Sep 15, 2008 1:54:48 PM org.apache.cxf.tools.validator.internal.SchemaValidator createSchema
INFO: Create Schema jar:file:/home/benson/x/apache-cxf-2.1.2/lib/cxf-2.1.2.jar!/schemas/wsdl/ws-addr-wsdl.xsd which was loaded from jar
Sep 15, 2008 1:54:48 PM org.apache.cxf.tools.validator.internal.SchemaValidator createSchema
INFO: Create Schema jar:file:/home/benson/x/apache-cxf-2.1.2/lib/cxf-2.1.2.jar!/schemas/wsdl/ws-addr.xsd which was loaded from jar
Sep 15, 2008 1:54:48 PM org.apache.cxf.tools.validator.internal.SchemaValidator createSchema
INFO: Create Schema jar:file:/home/benson/x/apache-cxf-2.1.2/lib/cxf-2.1.2.jar!/schemas/wsdl/wsdl.xsd which was loaded from jar
Sep 15, 2008 1:54:48 PM org.apache.cxf.tools.validator.internal.SchemaValidator createSchema
INFO: Create Schema jar:file:/home/benson/x/apache-cxf-2.1.2/lib/cxf-2.1.2.jar!/schemas/wsdl/wsrm.xsd which was loaded from jar
Sep 15, 2008 1:54:48 PM org.apache.cxf.tools.validator.internal.SchemaValidator createSchema
INFO: Create Schema jar:file:/home/benson/x/apache-cxf-2.1.2/lib/cxf-2.1.2.jar!/schemas/wsdl/xmime.xsd which was loaded from jar
Sep 15, 2008 1:54:48 PM org.apache.cxf.tools.validator.internal.SchemaValidator createSchema
INFO: Create Schema jar:file:/home/benson/x/apache-cxf-2.1.2/lib/cxf-2.1.2.jar!/schemas/wsdl/xml-binding.xsd which was loaded from jar
Sep 15, 2008 1:54:48 PM org.apache.cxf.tools.validator.internal.SchemaValidator createSchema
INFO: Create Schema jar:file:/home/benson/x/apache-cxf-2.1.2/lib/cxf-2.1.2.jar!/schemas/wsdl/xml.xsd which was loaded from jar
Sep 15, 2008 1:54:48 PM org.apache.cxf.tools.validator.internal.SchemaResourceResolver resolveResource
INFO: Resolve schema xml.xsd from baseURI: jar:file:/home/benson/x/apache-cxf-2.1.2/lib/cxf-2.1.2.jar!/schemas/wsdl/XMLSchema.xsd, namespace: http://www.w3.org/XML/1998/namespace
Sep 15, 2008 1:54:48 PM org.apache.cxf.tools.validator.internal.SchemaResourceResolver resolveResource
INFO: Resolve schema http://schemas.xmlsoap.org/wsdl/2003-02-11.xsd from baseURI: jar:file:/home/benson/x/apache-cxf-2.1.2/lib/cxf-2.1.2.jar!/schemas/wsdl/corba-binding.xsd, namespace: http://schemas.xmlsoap.org/wsdl/
Passed Validation : Valid WSDL ",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-09-15 20:05:42.798,,,no_permission,,,,,,,,,,,,,112575,,,Thu Dec 10 17:32:55 UTC 2009,,,,,,0|i140bb:,231513,,,,,,,,"15/Sep/08 20:05;dkulp;
Yea, me too.   I think I fixed this issue this morning.    :-)
","10/Dec/09 17:32;dkulp;Fixed a long time ago.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DynamicClientFactory does not work when called through Ant,CXF-1798,12404267,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,,ptr106,ptr106,12/Sep/08 18:28,09/Feb/09 22:20,14/Mar/19 02:29,17/Nov/08 12:15,2.0.5,,,,,,,,,,,,,,2.1.4,,,,,,,,,,1,,,,"I've created GroovyWS code to talk to a web service.  GroovyWS uses ApacheCXF 2.0.5 to dynamically create classes for the web services objects.  When this code is run via a batch script, it runs correctly.  When this code is run via Ant, I get this error:

     [java]  javac: invalid flag: C:/DOCUME~1/PCONNO~1/LOCALS~1/Temp/org.apache.
cxf.endpoint.dynamic.DynamicClientFactory@1b67d6a-1219416496084-classes

I think there are a couple of defects in the class DynamicClientFactory.  First, in the compileJavaSrc method, the call to javac is constructed without checking if the classpath is populated.  The code could be modified to conditionally append the classpath similar to this:

static boolean compileJavaSrc(Path classPath, Path srcPath, String dest) {
        String[] srcList = srcPath.list();
        List<String> javacCommand = new ArrayList<String>();
        javacCommand.add(""javac"");
        if(classPath != null && classPath.size() > 0){
            javacCommand.add(""-classpath"");
            javacCommand.add(classPath.toString());
        }
        javacCommand.add(""-d"");
        javacCommand.add(dest.toString());
        javacCommand.add(""-target"");
        javacCommand.add(""1.5"");

        for (int i = 0; i < srcList.length; i++) {
            javacCommand.add(srcList[i]);
        }
        org.apache.cxf.tools.util.Compiler javaCompiler
            = new org.apache.cxf.tools.util.Compiler();

        return javaCompiler.internalCompile(javacCommand.toArray(new String[javacCommand.size()]), javacCommand.size());
    } 

The next issue with DynamicClientFactory is the setupClasspath method.  This method explicitly tests if the ClassLoader inherits from URLClassLoader and then appends the URLs from that URLClassloader to its own classpath.  The AntClassLoader, unfortunately, does not extend from the URLClassLoader.  When the classpath is constructed it is empty.  If the compileJavaSrc method is fixed as above many calls will still fail because there is a dependency on classes that are not present during compilation (i.e. GroovyWS classes).   ",I am using Groovy 1.5.6 with GroovyWS 0.3.1 on Windows XP. I am calling Groovy via Ant 1.7.0.,,,,,,,,,,,,,,,,12/Sep/08 18:33;ptr106;GroovyWSTest.java;https://issues.apache.org/jira/secure/attachment/12390022/GroovyWSTest.java,12/Sep/08 18:34;ptr106;build.xml;https://issues.apache.org/jira/secure/attachment/12390023/build.xml,12/Sep/08 18:34;ptr106;output.log;https://issues.apache.org/jira/secure/attachment/12390024/output.log,,,,3.0,,,,,,,,,,,,,,,,,,,,2008-10-31 00:46:46.645,,,no_permission,,,,,,,,,,,,,50425,,,Mon Nov 17 12:15:03 UTC 2008,,,,,,0|i1adan:,268620,,,,,,,,31/Oct/08 00:46;jrsharp;I've also run into this issue.  I just wanted to add that I too would find it useful to have this issue resolved.,31/Oct/08 00:52;bmargulies;Hmm. Got any suggestions?,"31/Oct/08 14:13;jrsharp;Well, I can add that this behavior doesn't seem to be limited to Ant.

As for what to do with the code, I'm afraid I'm not very familiar with the DynamicClient code, but I can dig into it a little.  Have we tried Peter's suggestions yet?  He seems to have an educated idea regarding the issue.","31/Oct/08 14:39;ptr106;Ideally, DynamicClientFactory should not have to do any string construction of a classpath.  When working with classloaders, typically a delegation model is used where a classloader defers to its parent to look for a class or resource.  Depending on what jdks cxf must compile in, it might be worth looking into using java.lang.Compiler or javax.tools.ToolProvider (jdk 6).  Using these would eliminate the need for a system call to javac and I'm hoping there is a way to delegate loading of classes to the classloader passed to createClient.

It might be worth noting that using a system call for javac requires consumers of DynamicClientFactory to allow all system calls by cxf code (if java security is turned on).  On the other hand, the Compiler class is already privileged.  I would see the ability to lock down the security on cxf as an added benefit of using Compiler or ToolProvider.","31/Oct/08 17:30;bmargulies;I thought that this described two issues: one for which there was a specific suggestion, and one that seems to be wishing that Sun did a better job of arranging the modularity of (potential) class loaders.","31/Oct/08 17:49;ptr106;The root issue is that DynamicClientFactory is dependent on consumers using a URLClassLoader.  As you mentioned, the original notes for this JIRA describe two bugs that stem from this root issue: 1. An empty classpath results in an invalid system call to javac and 2. Using any classloader that doesn't extend URLClassLoader will result in an empty classpath.  I'm not asking that Sun does a better job at arranging their classloaders, I'm suggesting that DynamicClientFactory could make use of the way Sun prescribes doing parent classloader delegation.  One way to accomplish all of these goals, as well as improve the security and maintainability of DynamicClientFactory, could be to use the Compiler or ToolProvider classes.","31/Oct/08 19:39;bmargulies;This all sounds reasonable. While I have been seen making changes to the DCF, I'm not an expert on these technologies. I don't suppose you could be persuaded to spin up a patch? Or failing that, a pointer to something exemplary?","01/Nov/08 01:07;dkulp;
And using the Compiler thing doesn't work on Java 5 unless the user puts the tools jar on the classpath.  That is why it was done the current way.

Plus the Compiler class in some of the VM's leaks memory really badly.  The newer version might be better though.","01/Nov/08 14:31;ptr106;I just dowloaded cxf v 2.1.3 and I can't reproduce this issue.  Instead of the AntClassLoader being passed to the DynamicClient, the classloader for the java call (GroovyClassLoader) is being passed instead.  ","17/Nov/08 12:15;bmargulies;If it works, it works.",,,,,,,,,,,,,,,,,,,,,
Trouble with services having multiple methods/operations ,CXF-1797,12404261,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,juanavelez,juanavelez,12/Sep/08 16:23,15/Oct/08 04:52,14/Mar/19 02:29,12/Sep/08 17:24,2.1,,,,,,,,,,,,,,2.0.9,2.1.3,,,Soap Binding,,,,,,0,,,,"I had understood that a SEI could have multiple methods and the correct method is chosen according to the SOAPAction HTTP Request Header.

 I am using a Java first approach where I have a SEI with 2 operations and both operations share the same message. So when I try two requests, each with different SOAPAction HTTP Header, both requests are handled by the same method operation.

 WSI-BP states that operations need to be unique within the soap:body. However, I still think CXF should route it to the correct method. 
",Tomcat 6.0.6,,,,,,,,,,,,,,,,12/Sep/08 16:28;juanavelez;HttpHeaderHelper.java;https://issues.apache.org/jira/secure/attachment/12390015/HttpHeaderHelper.java,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2008-09-12 17:24:44.622,,,no_permission,,,,,,,,,,,,,112573,,,Fri Sep 12 17:24:44 UTC 2008,,,,,,0|i0v467:,179649,,,,,,,,"12/Sep/08 16:26;juanavelez;There is a ""mapping"" missing in the org.apache.cxf.helpers.HttpHeaderHelper class:

        internalHeaders.put(""soapaction"", ""SOAPAction"");

This needs to be as part of:

    static {
        internalHeaders.put(""Content-Type"", ""content-type"");
        internalHeaders.put(""Content-ID"", ""content-id"");
        internalHeaders.put(""Content-Transfer-Encoding"", ""content-transfer-encoding""); 
        internalHeaders.put(""Transfer-Encoding"", ""transfer-encoding"");
        internalHeaders.put(""Connection"", ""connection"");
        internalHeaders.put(""authorization"", ""Authorization"");
    }
",12/Sep/08 16:28;juanavelez;Modified HttpHeaderHelper class with additional mapping added to the static initializer to handle Tomcat's transformation of SOAPAction into soapaction.,12/Sep/08 17:24;dkulp;Patch applied.   Thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,,,
REST header case sensitivity in CXF-2.1.2 / Tomcat AJP,CXF-1795,12404237,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,sergey_beryozkin,igeorg,igeorg,12/Sep/08 10:36,30/Jul/09 18:01,14/Mar/19 02:29,22/May/09 14:20,2.1.2,,,,,,,,,,,,,,2.2.1,,,,JAX-RS,,,,,,0,,,,"HeaderParam labels in CXF-2.1.2 REST seem to be case sensitive. The problem appears only when using Tomcat-6.0.18 through its AJP connector. It does not appear when Tomcat is accessed through its HTTP connector. mod_jk (1.2.26) is passing headers unmodified to AJP, so differences in AJP & HTTP connectors make this issue manifest.

The following patch fixed the bug for us. The Tomcat HTTP connector also works with the patch.

I'm not sure whether other code paths are affected by the change in AbstractHTTPDestination, however the line after the modified code:
String mappedName = HttpHeaderHelper.getHeaderKey(fname);
already maps common upper-case headers to lower-case (except Authentication).


--- rt/transports/http/src/main/java/org/apache/cxf/transport/http/AbstractHTTPDestination.java    2008-08-12 23:31:10.000000000 +0300
+++ rt/transports/http/src/main/java/org/apache/cxf/transport/http/AbstractHTTPDestination.java 2008-09-11 21:31:56.000000000 +0300
@@ -190,7 +190,7 @@
       HttpServletRequest req = (HttpServletRequest)message.get(HTTP_REQUEST);
       //TODO how to deal with the fields              for (Enumeration e = req.getHeaderNames(); e.hasMoreElements();) {
-            String fname = (String)e.nextElement();
+            String fname = ((String)e.nextElement()).toLowerCase();
           String mappedName = HttpHeaderHelper.getHeaderKey(fname);
           List<String> values;
           if (headers.containsKey(mappedName)) {

--- rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/JAXRSUtils.java     2008-08-12 23:30:37.000000000 +0300
+++ rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/JAXRSUtils.java  2008-09-11 21:29:53.000000000 +0300
@@ -449,7 +449,7 @@
   private static Object processHeaderParam(Message m, String header,                                             Class<?> pClass, Type genericType, String defaultValue) {
       Map<String, List<String>> headers = (Map<String, List<String>>)m.get(Message.PROTOCOL_HEADERS);
-        List<String> values = headers.get(header);
+        List<String> values = headers.get(header.toLowerCase());
       StringBuilder sb = new StringBuilder();
       if (values != null) {
           for (Iterator<String> it = values.iterator(); it.hasNext();) { ","Apache-2.2, Tomcat-6.0.18, mod_jk-1.2.26",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-04-13 18:40:04.76,,,no_permission,,,,,,,,,,,,,112571,,,Fri May 22 14:20:09 UTC 2009,,,,,,0|i1adb3:,268622,,,,,,,,"13/Apr/09 18:40;cmatthews;I have encountered a bug that seems similar to this with CXF-2.1.4 REST (JAX-RS)

When specifying a @HeaderParam CXF does not map the header value to the method parameter unless the header parameter is provided all in lowercase (example: X-Forwarded-For).  Not sure if this is a bug but CXF should also ignore the case of the provided value for @HeaderParams.","14/Apr/09 13:41;sergey_beryozkin;It must have been fixed for 2.1.5-SNAPSHOT, sorry it took me so long to get it fixed.
Please try the latest snapshot, available at http://repository.apache.org/snapshots/org/apache/cxf/apache-cxf/2.1.5-SNAPSHOT/ and confirm it's been fixed. The retrieval of http headers should now be case-insensitive, both for @HttpHeader and @Context HttpHeaders



","29/Apr/09 15:59;sergey_beryozkin;John, Chris : it should definitely be fixed in 2.2 and 2.1.5 - can you confirm please

I'd like to close this JIRA soon

thanks, Sergey
","22/May/09 14:20;sergey_beryozkin;This issue must have been fixed in 2.2.1 for JAX-RS. Please reopen the JIRA if you find it is still not-working for you
",,,,,,,,,,,,,,,,,,,,,,,,,,,
codegen plugin not merging autodetected options with the options in the poms correctly...,CXF-1794,12404188,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,dkulp,dkulp,11/Sep/08 18:49,23/Oct/08 03:59,14/Mar/19 02:29,11/Sep/08 20:52,2.0.8,2.1.2,,,,,,,,,,,,,2.1.3,,,,Tooling,,,,,,0,,,,"
Codegen plugin is not detecting constructing the file objects correctly so the .equals(...) is always false so the options aren't getting merged.   The trick is that the auto loading is using a URI.toString() (so has file: protocol), but just new File(o2.getWsdl()) which then doesn't parse the protocol part.

",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112570,,,2008-09-11 18:49:58.0,,,,,,0|i13zlj:,231397,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WSDL2Java reports Non unique body parts if first part in message are soap headers.,CXF-1793,12404162,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,dagframstad,dagframstad,11/Sep/08 13:04,23/Oct/08 03:59,14/Mar/19 02:29,15/Sep/08 17:14,2.1.2,,,,,,,,,,,,,,2.1.3,,,,Tooling,,,,,,0,,,,"In my WSDL I have 2 services that have similar names.
If the first 14 characters in the message part name are identical WSDL2Java reports (from ant):

generate:
     [java] Loading FrontEnd jaxws ...
     [java] Loading DataBinding jaxb ...
     [java] wsdl2java -b c:\ADN\adnfond/src/main/resources/com/edb/adnfond/transport/ws/calendar.xjb.w2j -impl -verbose -validate -c
atalog c:\ADN\adnfond/src/main/resources/com/edb/adnfond/transport/ws/misc -d c:\ADN\adnfond/src/main/generated c:\ADN\adnfond/src/m
ain/resources/com/edb/adnfond/transport/ws/misc/Misc_v10.wsdl
     [java] wsdl2java - Apache CXF 2.1.2
     [java] 
     [java] 
     [java] WSDLToJava Error: Non unique body parts, operation [ getSalesOfficeId ] and  operation [ getSalesPersonId ] have the sam
e body block {http://edb.com/ws/WSCommon_v21}AutHeader
     [java] 
     [java] 
     [java] 
     [java] org.apache.cxf.tools.common.ToolException: Non unique body parts, operation [ getSalesOfficeId ] and  operation [ getSal
esPersonId ] have the same body block {http://edb.com/ws/WSCommon_v21}AutHeader
     [java] 
     [java] 
     [java]     at org.apache.cxf.tools.validator.internal.WSDL11Validator.isValid(WSDL11Validator.java:128)
     [java]     at org.apache.cxf.tools.wsdlto.frontend.jaxws.wsdl11.JAXWSDefinitionBuilder.validate(JAXWSDefinitionBuilder.java:200
)
     [java]     at org.apache.cxf.tools.wsdlto.frontend.jaxws.wsdl11.JAXWSDefinitionBuilder.validate(JAXWSDefinitionBuilder.java:62)
     [java]     at org.apache.cxf.tools.wsdlto.WSDLToJavaContainer.execute(WSDLToJavaContainer.java:132)
     [java]     at org.apache.cxf.tools.wsdlto.WSDLToJavaContainer.execute(WSDLToJavaContainer.java:232)
     [java]     at org.apache.cxf.tools.common.toolspec.ToolRunner.runTool(ToolRunner.java:83)
     [java]     at org.apache.cxf.tools.wsdlto.WSDLToJava.run(WSDLToJava.java:103)
     [java]     at org.apache.cxf.tools.wsdlto.WSDLToJava.main(WSDLToJava.java:173)

Example WSDL:
<?xml version=""1.0"" encoding=""utf-8""?>
<wsdl:definitions 
	targetNamespace=""http://www.edb.com/adnfond/transport/ws/misc/""
	xmlns:misc=""http://www.edb.com/adnfond/transport/ws/misc/misc_v10""
	xmlns:m=""http://www.edb.com/adnfond/transport/ws/misc/""
	xmlns:soap=""http://schemas.xmlsoap.org/wsdl/soap/"" 
	xmlns:wsdl=""http://schemas.xmlsoap.org/wsdl/"" 
	xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" 
	xmlns:edb=""http://edb.com/ws/WSCommon_v21"">
	<wsdl:documentation/>
	<wsdl:types>
		<schema xmlns=""http://www.w3.org/2001/XMLSchema"">
			<xsd:import namespace=""http://edb.com/ws/WSCommon_v21"" schemaLocation=""../WSCommon_v21.xsd""/>
			<xsd:import namespace=""http://www.edb.com/adnfond/transport/ws/misc/misc_v10"" schemaLocation=""Misc_v10.xsd""/>
		</schema>
	</wsdl:types>
	
	<wsdl:message name=""getSalesOfficeIdReq"">
		<wsdl:part name=""salesOfficeIdHeader"" element=""edb:AutHeader""/>
		<wsdl:part name=""xsalesOfficeIdBodyReq"" element=""misc:getSalesOfficeIdRequest""/>
	</wsdl:message>
	
	<wsdl:message name=""getSalesOfficeIdResp"">
		<wsdl:part name=""salesOfficeIdBodyResp"" element=""misc:getSalesOfficeIdResponse"" />
	</wsdl:message>

	<wsdl:message name=""getSalesOfficeId2Req"">
		<wsdl:part name=""salesOfficeId2Header"" element=""edb:AutHeader""/>
		<wsdl:part name=""xsalesOfficeId2BodyReq"" element=""misc:getSalesOfficeId2Request""/>
	</wsdl:message>
	
	<wsdl:message name=""getSalesOfficeId2Resp"">
		<wsdl:part name=""salesOfficeId2BodyResp"" element=""misc:getSalesOfficeId2Response""/>
	</wsdl:message>

		<!-- 
		wsdl2java fails when part names are xsalesOfficeIdBodyReq and xsalesOfficeId2BodyReq
		but works fine when part names are  salesOfficeIdBodyReq and salesOfficeId2BodyReq 
               -->


	<wsdl:portType name=""MiscPort"">
		<wsdl:operation name=""getSalesOfficeId"">
			<wsdl:input message=""m:getSalesOfficeIdReq""/>
			<wsdl:output message=""m:getSalesOfficeIdResp""/>
		</wsdl:operation>	
		<wsdl:operation name=""getSalesOfficeId2"">
			<wsdl:input message=""m:getSalesOfficeId2Req""/>
			<wsdl:output message=""m:getSalesOfficeId2Resp""/>
		</wsdl:operation>
	</wsdl:portType>
	
	
	
	<wsdl:binding name=""MiscSoapBinding"" type=""m:MiscPort"">
		<soap:binding style=""document"" transport=""http://schemas.xmlsoap.org/soap/http""/>
		<wsdl:operation name=""getSalesOfficeId"">
			<soap:operation soapAction=""getSalesOfficeId"" style=""document""/>
			<wsdl:input>
				<soap:header message=""m:getSalesOfficeIdReq"" part=""salesOfficeIdHeader"" use=""literal""/>
				<soap:body parts=""xsalesOfficeIdBodyReq"" use=""literal""/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use=""literal""/>
			</wsdl:output>
		</wsdl:operation>
		<wsdl:operation name=""getSalesOfficeId2"">
			<soap:operation soapAction=""getSalesOfficeId2"" style=""document""/>
			<wsdl:input>
				<soap:header message=""m:getSalesOfficeId2Req"" part=""salesOfficeId2Header"" use=""literal""/>
				<soap:body parts=""xsalesOfficeId2BodyReq"" use=""literal""/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use=""literal""/>
			</wsdl:output>
		</wsdl:operation>
	</wsdl:binding>
	
	
	<wsdl:service name=""MiscService"">
		<wsdl:port name=""MiscSoapPort"" binding=""m:MiscSoapBinding"">
			<soap:address location=""http://localhost:8080/adnfond/services/MiscService""/>
		</wsdl:port>
	</wsdl:service>
</wsdl:definitions>


This is how I use wsdl2java:
        <target name=""generate"" depends=""prepare"" description=""generate Java source files from schema and wsdl (only run this if you changed shcema or wsdl)"">
                <wsdl2java dir=""${wsdl.dir}/misc"" file=""Misc_v10.wsdl"" srcdestdir=""${generated.dir}"" bindingfile=""${wsdl.dir}/calendar.xjb.w2j"" />
                <replaceregexp match=""wsdlLocation = .* ,"" replace="""" byline=""true"">
                        <fileset dir=""${generated.dir}"" includes=""**/*.java"" />
                </replaceregexp>
                <replaceregexp match="", wsdlLocation = .*\)"" replace="")"" byline=""true"">
                        <fileset dir=""${generated.dir}"" includes=""**/*.java"" />
                </replaceregexp>
        </target>

        <macrodef name=""wsdl2java"">
                <attribute name=""srcdestdir"" default="""" />
                <attribute name=""destdir"" default="""" />
                <attribute name=""file"" />
                <attribute name=""servicename.arg"" default="""" />
                <attribute name=""bindingfile"" default="""" />
                <attribute name=""dir"" default="""" />
                <attribute name=""wsdlLocation"" default="""" />
                <attribute name=""package"" default=""NOT_SPECIFIED"" />
                <sequential>
                        <condition property=""package.arg.@{file}"" value=""-p @{package}"">
                                <not>
                                        <equals arg1=""@{package}"" arg2=""NOT_SPECIFIED"" />
                                </not>
                        </condition>
                        <property name=""package.arg.@{file}"" value="""" />
                        <condition property=""binding.arg"" value='-b ""@{bindingfile}""'>
                                <not>
                                        <equals arg1=""@{bindingfile}"" arg2="""" />
                                </not>
                        </condition>
                        <property name=""binding.arg"" value="""" />
                        <condition property=""wsdlLocation.arg"" value='-wsdlLocation ""@{wsdlLocation}""'>
                                <not>
                                        <equals arg1=""@{wsdlLocation}"" arg2="""" />
                                </not>
                        </condition>
                        <property name=""wsdlLocation.arg"" value="""" />
                        <java failonerror=""true"" classname=""org.apache.cxf.tools.wsdlto.WSDLToJava"" fork=""yes"">
                                <classpath>
                                        <path refid=""test.classpath"" />
                                </classpath>
                                <sysproperty key=""exitOnFinish"" value=""true"" />
                                <arg line=""@{servicename.arg}"" />
                                <arg line=""${package.arg.@{file}}"" />
                                <arg line=""${binding.arg}"" />
                                <arg line=""${wsdlLocation.arg}"" />
                                <arg value=""-impl"" />
                                <arg value=""-verbose"" />
                                <arg value=""-validate"" />
                                <arg value=""-catalog"" />
                                <arg value=""@{dir}"" />
                                <arg value=""-d"" />
                                <arg value=""@{srcdestdir}"" />
                                <arg value=""@{dir}/@{file}"" />
                        </java>
                </sequential>
        </macrodef>

If the specs says that message part names can't be longer than 14 characters then please ignore this issue.

Version 2.0.4 has this problem too, and other versions too I imagine, but I have only tested on 2.0.4 and 2.1.2.

","Windows XP,  Java 1.5",,,,,,,,,,,,,,,,13/Sep/08 21:16;dagframstad;cxf-1793.zip;https://issues.apache.org/jira/secure/attachment/12390064/cxf-1793.zip,12/Sep/08 21:00;dkulp;cxf1793_works.wsdl;https://issues.apache.org/jira/secure/attachment/12390036/cxf1793_works.wsdl,,,,,2.0,,,,,,,,,,,,,,,,,,,,2008-09-11 19:35:08.074,,,no_permission,,,,,,,,,,,,,112569,,,Sat Sep 13 21:16:47 UTC 2008,,,,,,0|i1adbb:,268623,,,,,,,,"11/Sep/08 19:35;dkulp;
This issue has nothing to do with the number of characters....

Both the input message for both operations have the first element of:
edb:AutHeader
Thus, without processing the soap:binding to determine which are headers which I don't think the tools do by default, it doesn't look like the the incoming messages could be dispatched while streaming correctly.   (not wsi-bp compliant type thing again).     It MIGHT work if you add the -exsh true flag (not sure)  

Alternatively, if you move the header to it's own message, that should work (would want the -exsh true flag again)

Or put the header last:
 <wsdl:message name=""getSalesOfficeIdReq""> 
 <wsdl:part name=""xsalesOfficeIdBodyReq"" element=""misc:getSalesOfficeIdRequest""/> 
 <wsdl:part name=""salesOfficeIdHeader"" element=""edb:AutHeader""/> 
 </wsdl:message> 
","12/Sep/08 08:19;dagframstad;OK,
just adding the -exsh true option didn't work.
Neither did putting the header last.

But moving the header to it's own message and using -exsh true option worked (wsdl2java ignored the header with -exsh set to false).

The tools behavior seems faulty to me, since my original example is valid, but I can live with this workaround.

Thanks for the fast response.

This is my WSDL with headers in separate messages:

<?xml version=""1.0"" encoding=""utf-8""?>
<wsdl:definitions 
	targetNamespace=""http://www.edb.com/adnfond/transport/ws/misc/""
	xmlns:misc=""http://www.edb.com/adnfond/transport/ws/misc/misc_v10""
	xmlns:m=""http://www.edb.com/adnfond/transport/ws/misc/""
	xmlns:soap=""http://schemas.xmlsoap.org/wsdl/soap/"" 
	xmlns:wsdl=""http://schemas.xmlsoap.org/wsdl/"" 
	xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" 
	xmlns:edb=""http://edb.com/ws/WSCommon_v21"">
	<wsdl:documentation/>
	<wsdl:types>
		<schema xmlns=""http://www.w3.org/2001/XMLSchema"">
			<xsd:import namespace=""http://edb.com/ws/WSCommon_v21"" schemaLocation=""../WSCommon_v21.xsd""/>
			<xsd:import namespace=""http://www.edb.com/adnfond/transport/ws/misc/misc_v10"" schemaLocation=""Misc_v10.xsd""/>
		</schema>
	</wsdl:types>
	
	<wsdl:message name=""getSalesOfficeIdHeader"">
		<wsdl:part name=""header"" element=""edb:AutHeader""/>
	</wsdl:message>

	<wsdl:message name=""getSalesOfficeIdReq"">
		<wsdl:part name=""body"" element=""misc:getSalesOfficeIdRequest""/>
	</wsdl:message>
	
	<wsdl:message name=""getSalesOfficeIdResp"">
		<wsdl:part name=""body"" element=""misc:getSalesOfficeIdResponse"" />
	</wsdl:message>

	<wsdl:message name=""getSalesOfficeId2Header"">
		<wsdl:part name=""header"" element=""edb:AutHeader""/>
	</wsdl:message>

	<wsdl:message name=""getSalesOfficeId2Req"">
		<wsdl:part name=""body"" element=""misc:getSalesOfficeId2Request""/>
	</wsdl:message>
	
	<wsdl:message name=""getSalesOfficeId2Resp"">
		<wsdl:part name=""body"" element=""misc:getSalesOfficeId2Response""/>
	</wsdl:message>

	<wsdl:portType name=""MiscPort"">
		<wsdl:operation name=""getSalesOfficeId"">
			<wsdl:input message=""m:getSalesOfficeIdReq"" />
			<wsdl:output message=""m:getSalesOfficeIdResp""/>
		</wsdl:operation>	
		<wsdl:operation name=""getSalesOfficeId2"">
			<wsdl:input message=""m:getSalesOfficeId2Req""/>
			<wsdl:output message=""m:getSalesOfficeId2Resp""/>
		</wsdl:operation>
	</wsdl:portType>
	
	<wsdl:binding name=""MiscSoapBinding"" type=""m:MiscPort"">
		<soap:binding style=""document"" transport=""http://schemas.xmlsoap.org/soap/http""/>
		<wsdl:operation name=""getSalesOfficeId"">
			<soap:operation soapAction=""getSalesOfficeId"" style=""document""/>
			<wsdl:input>
				<soap:header message=""m:getSalesOfficeIdHeader"" part=""header"" use=""literal""/>
				<soap:body parts=""body"" use=""literal""/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use=""literal""/>
			</wsdl:output>
		</wsdl:operation>
		<wsdl:operation name=""getSalesOfficeId2"">
			<soap:operation soapAction=""getSalesOfficeId2"" style=""document""/>
			<wsdl:input>
				<soap:header message=""m:getSalesOfficeId2Header"" part=""header"" use=""literal""/>
				<soap:body parts=""body"" use=""literal""/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use=""literal""/>
			</wsdl:output>
		</wsdl:operation>
	</wsdl:binding>
	
	
	<wsdl:service name=""MiscService"">
		<wsdl:port name=""MiscSoapPort"" binding=""m:MiscSoapBinding"">
			<soap:address location=""http://localhost:8080/adnfond/services/MiscService""/>
		</wsdl:port>
	</wsdl:service>
</wsdl:definitions>


","12/Sep/08 21:00;dkulp;
I cannot reproduce this.   I've attached a wsdl that I used from the info in the first message.  I had to create a schema for the various elements since you didn't provide any schema stuff.

I ran this with 2.1.1, 2.1.2, and the latest 2.1.3 and 2.2 snapshots and it just works without error.

I'll probably need a full example (zip file attachment is preferred so jira doesn't mangle things).","13/Sep/08 21:16;dagframstad;I have attached a zip file with ant file, wsdl examples and the jar files I needed to get things to work.
My real project has lots more jar files and more complex schemas, but this is enough to reproduce the problem.

There are 3 targets in the ant file:
 headerinownmsg     the headers are in its own message, this works
 headerinreqmsg     the headers are in the request messages with headers first, this fails
 headerinreqrevmsg  the headers are in the request messages with headers last, this fails

",,,,,,,,,,,,,,,,,,,,,,,,,,,
JMX ONs for performance counters should not use qnames for port and operation,CXF-1792,12404140,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,hadrian,hadrian,11/Sep/08 02:19,23/Jan/09 17:53,14/Mar/19 02:29,15/Sep/08 15:11,2.1.2,,,,,,,,,,,,,,2.1.3,,,,Core,,,,,,0,,,,"ObjectNames for counters look like that:

org.apache.cxf:bus.id=cxf945122723,type=Performance.Counter.Server,service=""{http://apache.org/hello_world_soap_http}SOAPService"",port=""{http://apache.org/hello_world_soap_http}SoapPort"",operation=""{http://apache.org/hello_world_soap_http}sayHi""

Having them mapped to qnames is unnecessary and only makes ONs long and hard to read/manage and I think it would be better if they looked like this:

org.apache.cxf:bus.id=cxf945122723,type=Performance.Counter.Server,service=""{http://apache.org/hello_world_soap_http}SOAPService"",port=""SoapPort"",operation=""sayHi""


I am proposing the attached patch to fix this. ",,,,,,,,,,,,,,,,,11/Sep/08 02:21;hadrian;cxf-1792.patch;https://issues.apache.org/jira/secure/attachment/12389895/cxf-1792.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2008-09-15 15:11:15.429,,,no_permission,,,,,,,,,,,,,112568,,,Mon Sep 15 15:11:15 UTC 2008,,,,,,0|i0syfz:,167057,,,,,,,,"15/Sep/08 15:11;dkulp;
Patch applied.  Thanks!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Problem with Calendar,CXF-1788,12403916,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,,aleycris,aleycris,08/Sep/08 17:37,23/Oct/08 03:59,14/Mar/19 02:29,14/Sep/08 00:46,2.1.2,,,,,,,,,,,,,,2.1.3,,,,Aegis Databinding,,,,,,0,,,,"Hi, I'm migrating a XFIRE ws application to CXF. Because I need to
keep alive the compatibility with XFIRE I use Aegis as DataBinding.
I've solve a problems but now I cna't solve the problem with the
Calendar datatype, some of my classes uses java.util.Date or
java.util.Calendar. When the binding tried to make the bindings I've
get this error:

javax.xml.ws.WebServiceException: java.lang.ClassCastException:
org.apache.cxf.aegis.type.basic.CalendarType cannot be cast to
org.apache.cxf.aegis.type.basic.BeanType
       at org.apache.cxf.jaxws.EndpointImpl.doPublish(EndpointImpl.java:267)
.......
Caused by: java.lang.ClassCastException:
org.apache.cxf.aegis.type.basic.CalendarType cannot be cast to
org.apache.cxf.aegis.type.basic.BeanType
       at org.apache.cxf.aegis.type.basic.BeanType.getSuperType(BeanType.java:670)
       at org.apache.cxf.aegis.type.basic.BeanType.writeSchema(BeanType.java:417)
       at org.apache.cxf.aegis.databinding.AegisDatabinding.createSchemas(AegisDatabinding.java:478)
       at org.apache.cxf.aegis.databinding.AegisDatabinding.initialize(AegisDatabinding.java:323)


In XFire I've create a CustomMapping to solve this problem, but in CXF
I don't find any example about that.","JDK 5, JDK 6, WIndows Vista.",,,,,,,,,,,,,,,,09/Sep/08 17:38;aleycris;XFireCustomMapping.java;https://issues.apache.org/jira/secure/attachment/12389761/XFireCustomMapping.java,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2008-09-13 21:58:57.801,,,no_permission,,Unknown,,,,,,,,,,,112564,,,Mon Sep 22 12:16:41 UTC 2008,,,,,,0|i1adbr:,268625,,,,,,,,"09/Sep/08 17:38;aleycris;Hi, I think that I found the problem. 

I've created a method with this signuture: ""GregorianCalendar prueba(String mensaje)"", when I'm trying to deploy the ws with this method I get the error but if I use ""Calendar prueba(String mensaje)"" works fine.

In Xfire I find that the WSDL define this:
<xsd:element minOccurs=""0"" name=""fechaVigenciaDesde"" nillable=""true"" type=""ns10:GregorianCalendar"" /> 

And then I have the class:
- <xsd:schema xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" attributeFormDefault=""qualified"" elementFormDefault=""qualified"" targetNamespace=""http://util.java"">
- <xsd:complexType name=""GregorianCalendar"">
- <xsd:sequence>
  <xsd:element minOccurs=""0"" name=""firstDayOfWeek"" type=""xsd:int"" /> 
  <xsd:element minOccurs=""0"" name=""gregorianChange"" type=""xsd:dateTime"" /> 
  <xsd:element minOccurs=""0"" name=""lenient"" type=""xsd:boolean"" /> 
  <xsd:element minOccurs=""0"" name=""minimalDaysInFirstWeek"" type=""xsd:int"" /> 
  <xsd:element minOccurs=""0"" name=""time"" type=""xsd:dateTime"" /> 
  <xsd:element minOccurs=""0"" name=""timeInMillis"" type=""xsd:long"" /> 
  <xsd:element minOccurs=""0"" name=""timeZone"" nillable=""true"" type=""ns10:TimeZone"" /> 
  </xsd:sequence>
  </xsd:complexType>
- <xsd:complexType abstract=""true"" name=""TimeZone"">
- <xsd:sequence>
  <xsd:element minOccurs=""0"" name=""DSTSavings"" type=""xsd:int"" /> 
  <xsd:element minOccurs=""0"" name=""ID"" nillable=""true"" type=""xsd:string"" /> 
  <xsd:element minOccurs=""0"" name=""displayName"" nillable=""true"" type=""xsd:string"" /> 
  <xsd:element minOccurs=""0"" name=""rawOffset"" type=""xsd:int"" /> 
  </xsd:sequence>
  </xsd:complexType>
  </xsd:schema>

I need to do the same in CXF, I attach the class that I use in XFire

Regards
Alejandro","13/Sep/08 21:58;bmargulies;Here's a question to start with. The default type mapping environment for Aegis includes mappings for all of the stock XML schema calendar types to a local implementation of the XMLGregorianCalendar type. I don't suppose you could use this?

 registerIfAvailable(tm, defaultNillable, ""javax.xml.datatype.Duration"", XMLSchemaQNames.XSD_DURATION,
                            ""org.apache.cxf.aegis.type.java5.DurationType"");
        registerIfAvailable(tm, defaultNillable, ""javax.xml.datatype.XMLGregorianCalendar"",
                            XMLSchemaQNames.XSD_DATE,
                            ""org.apache.cxf.aegis.type.java5.XMLGregorianCalendarType"");
        registerIfAvailable(tm, defaultNillable, ""javax.xml.datatype.XMLGregorianCalendar"",
                            XMLSchemaQNames.XSD_TIME,
                            ""org.apache.cxf.aegis.type.java5.XMLGregorianCalendarType"");
        registerIfAvailable(tm, defaultNillable, ""javax.xml.datatype.XMLGregorianCalendar"",
                            XMLSchemaQNames.XSD_G_DAY,
                            ""org.apache.cxf.aegis.type.java5.XMLGregorianCalendarType"");
        registerIfAvailable(tm, defaultNillable, ""javax.xml.datatype.XMLGregorianCalendar"",
                            XMLSchemaQNames.XSD_G_MONTH,
                            ""org.apache.cxf.aegis.type.java5.XMLGregorianCalendarType"");
        registerIfAvailable(tm, defaultNillable, ""javax.xml.datatype.XMLGregorianCalendar"",
                            XMLSchemaQNames.XSD_G_MONTH_DAY,
                            ""org.apache.cxf.aegis.type.java5.XMLGregorianCalendarType"");
        registerIfAvailable(tm, defaultNillable, ""javax.xml.datatype.XMLGregorianCalendar"",
                            XMLSchemaQNames.XSD_G_YEAR,
                            ""org.apache.cxf.aegis.type.java5.XMLGregorianCalendarType"");
        registerIfAvailable(tm, defaultNillable, ""javax.xml.datatype.XMLGregorianCalendar"",
                            XMLSchemaQNames.XSD_G_YEAR_MONTH,
                            ""org.apache.cxf.aegis.type.java5.XMLGregorianCalendarType"");
        registerIfAvailable(tm, defaultNillable, ""javax.xml.datatype.XMLGregorianCalendar"",
                            XMLSchemaQNames.XSD_DATETIME,
                            ""org.apache.cxf.aegis.type.java5.XMLGregorianCalendarType"");","14/Sep/08 00:46;bmargulies;I've committed a repair.

Here's what you hit.

CXF already provides mappings for both Calendar and GregorianCalendar. When you replaced the mapping for GregorianCalendar, you hit a bug: a BeanType mapping of a class that inherits from a non-BeanType class ran into trouble.

Similiar pickles would result from mapping a class that inherited from, say, Integer.

See rt/databinding/aegis/src/test/java/org/apache/cxf/aegis/custom/CustomMappingTest.java for the code that I set up to test this in a CXF context.

I continue to suspect that you'd be happiest just using the default mapping instead of forcing CXF to treat Calendar as a bean.
",22/Sep/08 12:16;aleycris;That's great I prefer use a DefaultMapping instead of a CustomMapping.,,,,,,,,,,,,,,,,,,,,,,,,,,,
wsdlLocation attribute and XmlBeans: Getting NullPointerException/UNMARSHALL_ERROR,CXF-1785,12403767,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,juanavelez,juanavelez,05/Sep/08 16:59,13/Nov/09 17:27,14/Mar/19 02:29,21/Oct/09 01:18,2.1,,,,,,,,,,,,,,2.1.7,,,,OtherDatabindings,,,,,,0,,,,"I have created my own WSDL and its corresponding service and implementation classes (annotated of course). When I do not use the wsdlLocation attribute on jaxws:endpoint, the request I send to the service works fine, but when I specify the wsdlLocation attribute, I get a NullPointerException/UNMARSHAL_ERROR from the XmlBeans databinding used by CXF. Any ideas where I am not doing it correctly?

Error

java.lang.NullPointerException
        at org.apache.cxf.xmlbeans.DataReaderImpl.read(DataReaderImpl.java:73)
        at org.apache.cxf.xmlbeans.DataReaderImpl.read(DataReaderImpl.java:43)
        at org.apache.cxf.interceptor.DocLiteralInInterceptor.handleMessage(DocLiteralInInterceptor.java:183)
        at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:221)
        at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:78)
        at org.apache.cxf.transport.servlet.ServletDestination.invoke(ServletDestination.java:92)
        at org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:214)
        at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:151)
        at org.apache.cxf.transport.servlet.AbstractCXFServlet.invoke(AbstractCXFServlet.java:170)
        at org.apache.cxf.transport.servlet.AbstractCXFServlet.doPost(AbstractCXFServlet.java:148)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:710)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:803)
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
        at com.arevatd.mmi.pjm.filters.CLUProgramContextFilter.doFilter(CLUProgramContextFilter.java:56)
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)
        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:175)
        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128)
        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)
        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)
        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:286)
        at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:844)
        at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583)
        at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:447)
        at java.lang.Thread.run(Thread.java:595)
Sep 4, 2008 12:35:49 PM org.apache.cxf.phase.PhaseInterceptorChain doIntercept
INFO: Interceptor has thrown exception, unwinding now
org.apache.cxf.interceptor.Fault: UNMARSHAL_ERROR
        at org.apache.cxf.xmlbeans.DataReaderImpl.read(DataReaderImpl.java:81)
        at org.apache.cxf.xmlbeans.DataReaderImpl.read(DataReaderImpl.java:43)
        at org.apache.cxf.interceptor.DocLiteralInInterceptor.handleMessage(DocLiteralInInterceptor.java:183)
        at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:221)
        at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:78)
        at org.apache.cxf.transport.servlet.ServletDestination.invoke(ServletDestination.java:92)
        at org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:214)
        at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:151)
        at org.apache.cxf.transport.servlet.AbstractCXFServlet.invoke(AbstractCXFServlet.java:170)
        at org.apache.cxf.transport.servlet.AbstractCXFServlet.doPost(AbstractCXFServlet.java:148)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:710)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:803)
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
        at com.arevatd.mmi.pjm.filters.CLUProgramContextFilter.doFilter(CLUProgramContextFilter.java:56)
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)
        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:175)
        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128)
        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)
        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)
        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:286)
        at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:844)
        at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583)
        at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:447)
        at java.lang.Thread.run(Thread.java:595)
Caused by: java.lang.NullPointerException
        at org.apache.cxf.xmlbeans.DataReaderImpl.read(DataReaderImpl.java:73)
        ... 26 more


WSDL

<?xml version=""1.0"" encoding=""UTF-8""?>
<wsdl:definitions name=""mmi""
                  targetNamespace=""http://com.arevatd.mmi/xml/wsdl""
                  xmlns:soap=""http://schemas.xmlsoap.org/wsdl/soap/""
                  xmlns:tns=""http://com.arevatd.mmi/xml/wsdl""
                  xmlns:wsdl=""http://schemas.xmlsoap.org/wsdl/""
                  xmlns:xsd=""http://www.w3.org/2001/XMLSchema""
                  xmlns:mmi=""http://com.arevatd.mmi/xml"">

  <wsdl:types>
    <xsd:schema targetNamespace=""http://com.arevatd.mmi/xml/wsdl""
                xmlns=""http://www.w3.org/2001/XMLSchema"">

      <import namespace=""http://com.arevatd.mmi/xml""
              schemaLocation=""../xml/mmi.xsd"" />

    </xsd:schema>
  </wsdl:types>

  <wsdl:message name=""ExportRequestMessage"">
    <wsdl:part name=""request"" element=""mmi:ExportRequestMessage"" />
  </wsdl:message>

  <wsdl:portType name=""MMIExportRequestPortType"">
    <wsdl:operation name=""performExportRequest"">
      <wsdl:input message=""tns:ExportRequestMessage"" />
    </wsdl:operation>
  </wsdl:portType>

  <wsdl:binding name=""MMIExportRequestSoapBinding"" type=""tns:MMIExportRequestPortType"">
    <soap:binding style=""document"" transport=""http://schemas.xmlsoap.org/soap/http"" />
    <wsdl:operation name=""performExportRequest"">
      <soap:operation soapAction=""performExportRequest"" style=""document"" />
      <wsdl:input>
        <soap:body use=""literal"" />
      </wsdl:input>
    </wsdl:operation>
  </wsdl:binding>

  <wsdl:service name=""MMIExportRequestService"">
      <wsdl:port name=""MMIExportRequestPort"" binding=""tns:MMIExportRequestSoapBinding"">
      <soap:address location=""http://localhost:8080/mmi/services/export"" />
    </wsdl:port>
  </wsdl:service>

</wsdl:definitions>

XML SCHEMA

<?xml version=""1.0"" encoding=""UTF-8""?>
<schema xmlns=""http://www.w3.org/2001/XMLSchema""
        targetNamespace=""http://com.arevatd.mmi/xml""
        xmlns:mmi=""http://com.arevatd.mmi/xml""
        elementFormDefault=""qualified"">

        <complexType name=""ExportRequestMessageType"">
                <all>
                        <element minOccurs=""1"" maxOccurs=""1"" name=""application""   type=""string"" />
                        <element minOccurs=""1"" maxOccurs=""1"" name=""environment""   type=""string"" />
                        <element minOccurs=""1"" maxOccurs=""1"" name=""directoryName"" type=""string"" />
                        <element minOccurs=""1"" maxOccurs=""1"" name=""filename""      type=""string"" />
                        <element minOccurs=""1"" maxOccurs=""1"" name=""requestId""     type=""string"" />
                </all>
        </complexType>

        <element name=""ExportRequestMessage"" type=""mmi:ExportRequestMessageType"" />

</schema>

CXF-servlet.xml

<?xml version=""1.0"" encoding=""UTF-8""?>

<!-- Configuration File for CXF -->
<beans xmlns=""http://www.springframework.org/schema/beans""
       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
       xmlns:jaxws=""http://cxf.apache.org/jaxws""
       xsi:schemaLocation=""http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd"">
       
    <import resource=""classpath:META-INF/cxf/cxf.xml"" />
    <import resource=""classpath:META-INF/cxf/cxf-extension-soap.xml"" />
    <import resource=""classpath:META-INF/cxf/cxf-servlet.xml"" />
   
    <bean id=""exportService"" class=""com.arevatd.mmi.business.services.support.CmiModelDataExportWsImpl"" scope=""prototype"" />
   
    <bean id=""xmlBeansBean"" class=""org.apache.cxf.xmlbeans.XmlBeansDataBinding"" scope=""prototype"" />

    <bean id=""exportServiceFactory"" class=""org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean"" scope=""singleton"">
      <property name=""dataBinding"" ref=""xmlBeansBean"" />
    </bean>

    <jaxws:endpoint id=""exportServiceEndPoint""
                    implementor=""com.arevatd.mmi.business.services.support.CmiModelDataExportWsImpl""
                    address=""/export""
                    wsdlLocation=""wsdl/mmi.wsdl"" >
        <jaxws:serviceFactory>
            <ref bean=""exportServiceFactory"" />
        </jaxws:serviceFactory>
    </jaxws:endpoint>

</beans>

Service Class

package com.arevatd.mmi.business.services;

import javax.jws.Oneway;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;

import mmi.arevatd.com.xml.ExportRequestMessageType;


/**
 * Interface for the Import Service
 *
 * @author jvelez
 *
 */
@WebService(name=""MMIExportRequestPortType"",
            targetNamespace=""http://com.arevatd.mmi/xml/wsdl"")
@SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
public interface CmiModelDataExportWs {
    /**
     * The actual operation for this web service: perform an export of CMI Model Data
     *
     * @param request The Request to export a e-terrasource export project
     */
    @WebMethod(operationName = ""performExportRequest"", action = ""performExportRequest"")
    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    @Oneway()
    public void exportCmiModelData(
        @WebParam(targetNamespace = ""http://com.arevatd.mmi/xml"",
                  partName=""request"",
                  name = ""ExportRequestMessage"")
        ExportRequestMessageType request);
}

Service Implementation Class

package com.arevatd.mmi.business.services.support;

import java.util.logging.Logger;

import javax.jws.WebService;
import javax.xml.namespace.QName;
import javax.xml.soap.SOAPException;
import javax.xml.soap.SOAPFactory;
import javax.xml.soap.SOAPFault;
import javax.xml.ws.BindingType;
import javax.xml.ws.soap.SOAPFaultException;

import com.arevatd.mmi.business.services.CmiModelDataExportWs;

import mmi.arevatd.com.xml.ExportRequestMessageType;


/**
 * Implementation for the CmiModelDataExportWs Web Service
 *
 * @author jvelez
 *
 */
@WebService(endpointInterface=""com.arevatd.mmi.business.services.CmiModelDataExportWs"",
            targetNamespace=""http://com.arevatd.mmi/xml/wsdl"",
            portName=""MMIExportRequestPort"",
            serviceName=""MMIExportRequestService"",
            name=""MMIExportRequestPortType"")
@BindingType(value=javax.xml.ws.soap.SOAPBinding.SOAP11HTTP_BINDING)
public class CmiModelDataExportWsImpl implements CmiModelDataExportWs {
    private final Logger logger = Logger.getLogger(this.getClass().getName());

    public void exportCmiModelData(ExportRequestMessageType request) /*throws ExportRequestFault*/ {
        logger.info(""Application="" + request.getApplication());
        logger.info(""Environment="" + request.getEnvironment());
        logger.info(""Directory="" + request.getDirectoryName());
        logger.info(""File="" + request.getFilename());
        logger.info(""Export Request Id="" + request.getRequestId());
       
        try {
            SOAPFactory soapFactory = SOAPFactory.newInstance();
            SOAPFault fault = soapFactory.createFault(""Hello"",
                new QName(""http://schemas.xmlsoap.org/soap/envelope/"", ""Client""));
            fault.setFaultString(""Juan"");

            throw new SOAPFaultException(fault);
        } catch(SOAPException se) {
        }
    }
}
","WinXP Pro SP3, Java 1.6, Spring 2.5, XmlBeans 2.3.0, CXF 2.1",,,,,,,,,,,,,,,,27/Feb/09 08:17;knutivar;CXFTestXmlBeansHeader.rar;https://issues.apache.org/jira/secure/attachment/12401091/CXFTestXmlBeansHeader.rar,05/Sep/08 17:03;juanavelez;MMI CXF.zip;https://issues.apache.org/jira/secure/attachment/12389570/MMI+CXF.zip,,,,,2.0,,,,,,,,,,,,,,,,,,,,2008-09-24 15:30:45.058,,,no_permission,,,,,,,,,,,,,112561,,,Wed Oct 21 01:18:25 UTC 2009,,,,,,0|i0cv2v:,72979,,,,,,,,"05/Sep/08 17:03;juanavelez;This is the Eclipe Project that I am using when I get the error. (It also includes the XSD and WSDL files)

CXF 2.1, Spring 2.5 and XmlBeans 2.3.0 libraries have been removed from the lib folder.

I am using SOAP UI 2.0.2 to test the WS

This is the SOAP Request I am using

<soapenv:Envelope xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:ns=""http://com.arevatd.mmi/xml"">
   <soapenv:Header/>
   <soapenv:Body>
      <ns:ExportRequestMessage>
         <!--You may enter the following 5 items in any order-->
         <ns:application>?</ns:application>
         <ns:environment>?</ns:environment>
         <ns:directoryName>?</ns:directoryName>
         <ns:filename>?</ns:filename>
         <ns:requestId>?</ns:requestId>
      </ns:ExportRequestMessage>
   </soapenv:Body>
</soapenv:Envelope>","24/Sep/08 15:30;seanoc;Hi Juan,

Do you have a simple testcase which I could use to recreate this problem?

Regards,

Seán.","24/Sep/08 15:53;juanavelez;Hi Sean:

Thanks for looking into this. Unfortunately besides the documentation 
provided as part of this Issue, there is no longer a test case as my team 
and I decided (some weeks ago) no longer to use XmlBeans as the XML Data 
Binding for CXF given the many issues/bugs with it. We have moved to using 
JAXB as the XML Data Binding for CXF. 

Let me know if any specific file is needed so you can recreate the problem

Thank you,

Juan Andres VELEZ CADAVID
Senior Software Engineer
AREVA T&D Inc.
10865 Willows Road NE
Redmond, WA  98052-2502
Tel: +1(425) 250-2628
Fax: +1(425) 250-1400
E-Mail: juan.velez@areva-td.com

CONFIDENTIALITY:  This e-mail and any attachments are confidential and may 
be privileged.
If  you are not a named recipient, please notify the sender immediately 
and do not disclose the 
contents to another person,  use it for any purpose or store or copy the 
information in any medium.




""Sean O'Callaghan (JIRA)"" <jira@apache.org> 
24-09-08 08:30 AM

To
Juan VELEZ/USBVE01/TDE/AREVA-TD@ATD
cc

Subject
[jira] Commented: (CXF-1785) wsdlLocation attribute and XmlBeans: Getting 
NullPointerException/UNMARSHALL_ERROR







    [ 
https://issues.apache.org/jira/browse/CXF-1785?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&focusedCommentId=12634167#action_12634167 
] 

Sean O'Callaghan commented on CXF-1785:
---------------------------------------

Hi Juan,

Do you have a simple testcase which I could use to recreate this problem?

Regards,

Seán.

NullPointerException/UNMARSHALL_ERROR
----------------------------------------------------------------------------------
2.3.0, CXF 2.1
implementation classes (annotated of course). When I do not use the 
wsdlLocation attribute on jaxws:endpoint, the request I send to the 
service works fine, but when I specify the wsdlLocation attribute, I get a 
NullPointerException/UNMARSHAL_ERROR from the XmlBeans databinding used by 
CXF. Any ideas where I am not doing it correctly?
org.apache.cxf.xmlbeans.DataReaderImpl.read(DataReaderImpl.java:73)
org.apache.cxf.xmlbeans.DataReaderImpl.read(DataReaderImpl.java:43)
org.apache.cxf.interceptor.DocLiteralInInterceptor.handleMessage(DocLiteralInInterceptor.java:183)
org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:221)
org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:78)
org.apache.cxf.transport.servlet.ServletDestination.invoke(ServletDestination.java:92)
org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:214)
org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:151)
org.apache.cxf.transport.servlet.AbstractCXFServlet.invoke(AbstractCXFServlet.java:170)
org.apache.cxf.transport.servlet.AbstractCXFServlet.doPost(AbstractCXFServlet.java:148)
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
com.arevatd.mmi.pjm.filters.CLUProgramContextFilter.doFilter(CLUProgramContextFilter.java:56)
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)
org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:175)
org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128)
org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)
org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)
org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:286)
org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:844)
org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583)
org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:447)
doIntercept
org.apache.cxf.xmlbeans.DataReaderImpl.read(DataReaderImpl.java:81)
org.apache.cxf.xmlbeans.DataReaderImpl.read(DataReaderImpl.java:43)
org.apache.cxf.interceptor.DocLiteralInInterceptor.handleMessage(DocLiteralInInterceptor.java:183)
org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:221)
org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:78)
org.apache.cxf.transport.servlet.ServletDestination.invoke(ServletDestination.java:92)
org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:214)
org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:151)
org.apache.cxf.transport.servlet.AbstractCXFServlet.invoke(AbstractCXFServlet.java:170)
org.apache.cxf.transport.servlet.AbstractCXFServlet.doPost(AbstractCXFServlet.java:148)
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
com.arevatd.mmi.pjm.filters.CLUProgramContextFilter.doFilter(CLUProgramContextFilter.java:56)
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)
org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:175)
org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128)
org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)
org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)
org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:286)
org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:844)
org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583)
org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:447)
org.apache.cxf.xmlbeans.DataReaderImpl.read(DataReaderImpl.java:73)
type=""tns:MMIExportRequestPortType"">
http://schemas.xmlsoap.org/soap/http"" />
/>
binding=""tns:MMIExportRequestSoapBinding"">
/>
name=""application""   type=""string"" />
name=""environment""   type=""string"" />
name=""directoryName"" type=""string"" />
name=""filename""      type=""string"" />
name=""requestId""     type=""string"" />
type=""mmi:ExportRequestMessageType"" />
http://www.springframework.org/schema/beans/spring-beans-2.5.xsd 
http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd"">
class=""com.arevatd.mmi.business.services.support.CmiModelDataExportWsImpl"" 
scope=""prototype"" />
class=""org.apache.cxf.xmlbeans.XmlBeansDataBinding"" scope=""prototype"" />
class=""org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean"" 
scope=""singleton"">
implementor=""com.arevatd.mmi.business.services.support.CmiModelDataExportWsImpl""
CMI Model Data
project
""performExportRequest"")
@WebService(endpointInterface=""com.arevatd.mmi.business.services.CmiModelDataExportWs"",
Logger.getLogger(this.getClass().getName());
/*throws ExportRequestFault*/ {
""Client""));

-- 
This message is automatically generated by JIRA.
-
You can reply to this email to add a comment to the issue online.



","27/Feb/09 08:16;knutivar;Hi! 

I have a similar problem using CXF and XMLBeans. The service works fine, but when I pass information in the SOAP Header, I get this stacktrace:
---------------------------------------------------------------------
26.feb.2009 20:07:42 org.apache.cxf.phase.PhaseInterceptorChain doIntercept
INFO: Interceptor has thrown exception, unwinding now UNMARSHAL_ERROR
fault =
java.lang.NullPointerException
at org.apache.cxf.xmlbeans.DataReaderImpl.read(DataReaderImpl.java:73)
at org.apache.cxf.xmlbeans.DataReaderImpl.read(DataReaderImpl.java:43)
at org.apache.cxf.binding.soap.interceptor.SoapHeaderInterceptor.handleMessage(SoapHeaderInterceptor.java:109)
at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:226)
at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:89)
at org.apache.cxf.transport.servlet.ServletDestination.invoke(ServletDestination.java:99)
at org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:305)
at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:175)
at org.apache.cxf.transport.servlet.AbstractCXFServlet.invoke(AbstractCXFServlet.java:163)
at org.apache.cxf.transport.servlet.AbstractCXFServlet.doPost(AbstractCXFServlet.java:141)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:767)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:860)
at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:269)
at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:188)
at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:213)
at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:174)
at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127)
at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:117)
at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:548)
at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:108)
at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:174)
at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:874)
at org.apache.coyote.http11.Http11BaseProtocol$Http11ConnectionHandler.processConnection(Http11BaseProtocol.java:665)
at org.apache.tomcat.util.net.PoolTcpEndpoint.processSocket(PoolTcpEndpoint.java:528)
at org.apache.tomcat.util.net.LeaderFollowerWorkerThread.runIt(LeaderFollowerWorkerThread.java:81)
at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:689)
at java.lang.Thread.run(Thread.java:619)
---------------------------------------------------------------------

I'll upload a war file containing the project here. Complete with pom.xml and all the source you need. (For deployment, you have to change the path to tomcat in the pom.xml. For further information; see here: http://www.knutivars.net/cxf/index.html .

I hope this might help.  ","27/Feb/09 08:17;knutivar;Added file CXFTestXmlBeansHeader.rar. It contains a working project with CXF and xmlbeans.... until you actually pass a value in the SOAP Header. If you use <soapenv:header /> it will run. If you use any value in the soap header, it will fail with the unmarshall error.","21/Oct/09 01:18;dkulp;The attached test case, which indeed fails with 2.1.4, runs fine with 2.1.7 so marking resolved.",,,,,,,,,,,,,,,,,,,,,,,,,
"cxf-codegen-plugin:wsdl2java goal runs wsdl2java tool on all WSDL files avaialable at src/main/resources/wsdl/ dir by default, even when <wsdlOptions> specify a diffenent wsdl(s)",CXF-1784,12403738,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,,ugopalak,ugopalak,05/Sep/08 07:21,12/Oct/09 20:45,14/Mar/19 02:29,10/Oct/09 18:14,2.1.1,,,,,,,,,,,,,,2.2.4,,,,Tooling,,,,,,0,,,,"When there are wsdl files at src/main/resources/wsdl dir in my project, cxf-codegen-plugin:wsdl2java goal always operates on them produces Java articfacts and the <wsdlOptions> specified in the plugin configuration are ignored.

 I worked around the problem my renaming the src/main/resources/wsdl to src/main/resources/wsdls. 

I will create a test case attach it here in a couple of days.

","Maven version: 2.0.9
Java version: 1.6.0_04
OS name: ""windows xp"" version: ""5.1"" arch: ""x86"" Family: ""windows""",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-10-10 18:14:23.376,,,no_permission,,,,,,,,,,,,,112560,,,Sat Oct 10 18:14:23 UTC 2009,,,,,,0|i16vtr:,248288,,,,,,,,10/Oct/09 18:14;chris@die-schneider.net;I just tested the issue with the trunk version will become (2.2.4) and was not able to reproduce the issue. The wsdl in src/main/resources/wsdls was not processed.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unprocessed soap headers with mustUnderstand=1 and no actor not throwing exceptions,CXF-1781,12403624,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,dkulp,dkulp,03/Sep/08 17:47,15/Oct/08 04:52,14/Mar/19 02:29,03/Sep/08 18:21,2.0.8,2.1.2,,,,,,,,,,,,,2.0.9,2.1.3,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112557,,,2008-09-03 17:47:34.0,,,,,,0|i1adcn:,268629,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
float's and double's negative infinity is incorrectly marshalled/unmarshalled as positive infinity,CXF-1780,12403532,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,matteo.vescovi,matteo.vescovi,02/Sep/08 10:43,23/Oct/08 03:59,14/Mar/19 02:29,02/Sep/08 14:02,2.1.2,,,,,,,,,,,,,,2.1.3,,,,CORBA Binding,,,,,,0,,,,"Floats with value Float.NEGATIVE_INFINITY or doubles with value Double.NEGATIVE_INFINITY are incorrectly marshalled/unmarshalled as positive infinity.


",,,,,,,,,,,,,,,,,02/Sep/08 10:46;matteo.vescovi;infinity_patch.diff;https://issues.apache.org/jira/secure/attachment/12389340/infinity_patch.diff,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2008-09-02 11:45:20.687,,,no_permission,,,,,,,,,,,,,112556,,,Tue Sep 02 11:45:20 UTC 2008,,,,,,0|i0v3zb:,179618,,,,,,,,"02/Sep/08 10:46;matteo.vescovi;Patch attached.

Apply from trunk with: patch -p0 < infinity_patch.diff

","02/Sep/08 10:50;matteo.vescovi;Patch attached resolves the issue by fixing the marshalling/umarshalling of infinity values following the pattern already in place, by using ""-INF"" and ""INF"" strings.

I wonder whether it would be cleaner to just use the output of Double.NEGATIVE_INFINITY (""-Infinity"") or Double.POSITIVE_INFINITY instead (similarly for float type).
","02/Sep/08 11:45;dkulp;
Because ""Infinity"" and ""-Infinity"" are not valid values for float/double in XML.   If validation is turned on in JAXB, it would reject those values.   Likewise, I don't think the XMLBeans databinding would process them correctly either.



",,,,,,,,,,,,,,,,,,,,,,,,,,,,
exclude non-serializable property to JBI NormalizedMessage,CXF-1779,12403523,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,ffang,ffang,ffang,02/Sep/08 06:57,23/Jan/09 17:52,14/Mar/19 02:29,02/Sep/08 09:43,2.0.8,2.1.2,,,,,,,,,,,,,2.0.9,2.1.3,,,,,,,,,0,,,,this will fix https://issues.apache.org/activemq/browse/SM-1526,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-09-03 16:17:42.748,,,no_permission,,,,,,,,,,,,,112555,,,Wed Sep 03 16:17:42 UTC 2008,,,,,,0|i0v25j:,179322,,,,,,,,"02/Sep/08 08:28;ffang;commit fix
http://svn.apache.org/viewvc?rev=691146&view=rev for 2.0.x fix branch
http://svn.apache.org/viewvc?rev=691147&view=rev for 2.1.x fix branch
http://svn.apache.org/viewvc?rev=691148&view=rev for trunk","03/Sep/08 04:15;ffang;also need exclude Map or Collection property as well which entry may not be serializable
http://svn.apache.org/viewvc?rev=691508&view=rev for 2.0.x
http://svn.apache.org/viewvc?rev=691510&view=rev for 2.1.x
http://svn.apache.org/viewvc?rev=691511&view=rev for trunk","03/Sep/08 16:17;rgavlin;I believe the description incorrectly references SM-1537. Instead, it should reference SMX issue https://issues.apache.org/activemq/browse/SM-1526.

Regards,

Ron",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Memory leak occurs in specific cases when WS-Addressing feature is enabled,CXF-1778,12403482,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Critical,Fixed,dkulp,makwieci,makwieci,01/Sep/08 10:40,18/Jan/19 08:41,14/Mar/19 02:29,03/Sep/08 18:21,2.1.2,,,,,,,,,,,,,,2.1.3,,,,WS-* Components,,,,,,0,,,,"I observed memory leak  (OOM thrown) in following situations:

1.WS-Addressing enabled on client and server side. When server stops responding (connection refused on client side) 
client memory usage is increasing until OOM is thrown.

2.WS-Addressing enabled only on client side, server provide service without WS-Addressing feature (or WS-Addressing configuration is incorrect). Client memory  heap is building up even faster than in first case.

I will provide a sample application and more detailed description how to reproduce bug.
",,,,,,,,,,,,,,,,,01/Sep/08 11:01;makwieci;cxf-ws-addr-memory-leak.zip;https://issues.apache.org/jira/secure/attachment/12389283/cxf-ws-addr-memory-leak.zip,01/Sep/08 11:09;makwieci;histoConnectionRefused.log;https://issues.apache.org/jira/secure/attachment/12389284/histoConnectionRefused.log,01/Sep/08 11:09;makwieci;histoEchoServerWithoutWsAddr.log;https://issues.apache.org/jira/secure/attachment/12389285/histoEchoServerWithoutWsAddr.log,,,,3.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112554,,,Thu Sep 04 14:11:21 UTC 2008,,,,,,0|i0uy7z:,178685,,,,,,,,"01/Sep/08 11:01;makwieci;Pleas find below detailed description how to reproduce bug using attached project.

Prerequisite: 
1. Import project to Eclipse
 
Case #0: No WS-Addressing feature enabled, No memory leaks

1. Run EchoServer 
2. Run LoadRunner with two arguments:
    24 - number of simulated client  
   1800-  test duration in seconds
and one JVM arg:
-Dorg.apache.cxf.Logger=org.apache.cxf.common.logging.Log4jLogger (let log4j deal  with logging)

3. Observe  memory usage for EchoServer and LoadRunner (Wait for a while)
4. Stop EchoServer
5.Wait for a while - memory leak should not be observed :)


Case #1: WS-Addressing enabled on client and service side.

1. Enable WS-Addressing feature
    Uncomment <!--  <wsa:addressing />  -->  in cxf.xml filen in src/main/resources directory

2. Run EchoServer
3. Run LoadRunner (the same way as in Case #0)
4. Observe  memory usage for EchoServer and LoadRunner (Wait for a while)
5. Stop EchoServer
6. Observe memory usage for LoadRunner (memory usage should increase and after  a few minutes OOM should appear ( in my case: I run LoadRunner with default heap size value and OOM is thrown when LoadRunner memory usage is aprox. 100MB) 




Case #2: WS-Addressing enabled only on client side, server does not support WS-Addressing

1.  Disable WS-Addressing feature on EchoServer side.
Uncomment following section in EchoServer:
       
//        SpringBusFactory busFactory = new SpringBusFactory();
//        URL cxfConfig = new URL(""file:src/main/resources/cxf-server.xml"");
//        Bus bus = busFactory.createBus(cxfConfig);
//        BusFactory.setDefaultBus(bus);

2. Run EchoServer
3. Run LoadRunner (the same way as in Case #0)
4. Observe memory usage for LoadRunner (memory usage should increase even faster than in Case #1 and after  a few minutes OOM should appear 



","01/Sep/08 11:09;makwieci;Last but not least,  I attach memory histograms created using jmap.

histoConnectionRefused.log - created for case #1
histoEchoServerWithoutWsAddr.log -  created for case #2


","03/Sep/08 10:15;makwieci;Daniel,

First of all, I am very gratefull for really quick bug fix.
Memory leak does not occur  when server doesn't respond with addressing information any more. 
However, there is still memory leak when server doesn't respond at all (client receives Connection refused).

Given that case #1 is stil the issue, let me reopen it. I hope case #1 might be also fixed.

Thanks,
Maciej","04/Sep/08 14:11;makwieci;
Thanks for quick fix again.
I've tested case#1 (invoked sevice does not respond at all) and it is not the issue any more.

Regards,
Maciej",,,,,,,,,,,,,,,,,,,,,,,,,,,
Generated WSDL has a char,CXF-1772,12403388,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,bmargulies,ndeckard,ndeckard,29/Aug/08 20:00,02/Apr/12 06:03,14/Mar/19 02:29,13/Sep/08 17:02,2.1.1,,,,,,,,,,,,,,2.2,,,,Aegis Databinding,,,,,,0,,,,"My .aegis.xml mappings are not overriding a char that is showing up in the generated WSDL. The char is causing SOAPUI to error out because char does not exist in the http://schemas.xmlsoap.org/soap/encoding/ schema.

NathansCharImpl.aegis.xml:
<?xml version=""1.0"" encoding=""UTF-8""?>
<!-- For Aegis mappings -->
<aegis:mappings xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" 
          xmlns:aegis=""http://cwiki.apache.org/CXF20DOC/aegis-databinding.data/aegis""
          schemaLocation=""http://cwiki.apache.org/CXF20DOC/aegis-databinding.data/aegis.xsd"">
 
   	<aegis:mapping>
    	<aegis:property name=""myCharacter""  
    					componentType=""org.apache.cxf.aegis.type.basic.CharacterType"" 
						typeName=""xsd:string""/>

		<aegis:method name=""getMyCharacter"">
			<return-type componentType=""org.apache.cxf.aegis.type.basic.CharacterType"" typeName=""xsd:string""/>
		</aegis:method>
	</aegis:mapping>
	
</aegis:mappings>

@WebService
@Features(features = ""org.apache.cxf.feature.LoggingFeature"")
public interface NathansCharacter {

	public abstract Character getMyCharacter();

	public abstract void setMyCharacter(Character myCharacter);

}

@WebService (endpointInterface = ""com.clearingcorp.riskmanagement.ws.NathansCharacter"")
@Features(features = ""org.apache.cxf.feature.LoggingFeature"")
public class NathansCharacterImpl implements NathansCharacter {
	private Character myCharacter;
	
	public Character getMyCharacter() {
		return myCharacter;
	}
	
	public void setMyCharacter(Character myCharacter) {
		this.myCharacter = myCharacter;
	}
}

		
    <bean id=""nathansCharacterServiceImpl"" class=""com.clearingcorp.riskmanagement.ws.NathansCharacterImpl""/>
		
	
    <jaxws:endpoint id=""myCharacterServiceEndpoint""
            implementorClass=""com.clearingcorp.riskmanagement.ws.NathansCharacterImpl""
            implementor=""#nathansCharacterServiceImpl""
            address=""/myCharacterService"">
        
        <jaxws:serviceFactory>
            <ref bean=""jaxws-and-aegis-service-factory""/>
        </jaxws:serviceFactory>
          
    </jaxws:endpoint>

    <bean id=""aegisBean""
        class=""org.apache.cxf.aegis.databinding.AegisDatabinding""
        scope=""prototype""/> 
    <bean id=""jaxws-and-aegis-service-factory""
        class=""org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean""
        scope=""prototype"">
        <property name=""dataBinding"" ref=""aegisBean""/>
        
        <property name=""serviceConfigurations"">
            <list>
                       <bean class=""org.apache.cxf.jaxws.support.JaxWsServiceConfiguration""/>
                       <bean class=""org.apache.cxf.aegis.databinding.XFireCompatibilityServiceConfiguration""/>
                       <bean class=""org.apache.cxf.service.factory.DefaultServiceConfiguration""/> 

            </list>
        </property>
         
    </bean>


The error from SOAPUI:
Fri Aug 29 14:55:49 CDT 2008:ERROR:org.apache.xmlbeans.XmlException: http://localhost:7003/riskmanagement-wsserver/myCharacterService?wsdl:0: error: src-resolve: type 'char@http://schemas.xmlsoap.org/soap/encoding/' not found.
   org.apache.xmlbeans.XmlException: http://localhost:7003/riskmanagement-wsserver/myCharacterService?wsdl:0: error: src-resolve: type 'char@http://schemas.xmlsoap.org/soap/encoding/' not found.
   	at org.apache.xmlbeans.impl.schema.SchemaTypeSystemCompiler.compile(SchemaTypeSystemCompiler.java:225)
   	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
   	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
   	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
   	at java.lang.reflect.Method.invoke(Unknown Source)
   	at org.apache.xmlbeans.XmlBeans.compileXmlBeans(XmlBeans.java:667)
   	at org.apache.xmlbeans.XmlBeans.compileXsd(XmlBeans.java:553)
   	at com.eviware.soapui.impl.wsdl.support.xsd.SchemaUtils.buildSchemaTypes(SchemaUtils.java:266)
   	at com.eviware.soapui.impl.wsdl.support.xsd.SchemaUtils.loadSchemaTypes(SchemaUtils.java:179)
   	at com.eviware.soapui.impl.wsdl.support.wsdl.WsdlContext.loadDefinitions(WsdlContext.java:264)
   	at com.eviware.soapui.impl.wsdl.support.wsdl.WsdlContext.access$500(WsdlContext.java:53)
   	at com.eviware.soapui.impl.wsdl.support.wsdl.WsdlContext$Loader.construct(WsdlContext.java:218)
   	at com.eviware.soapui.support.swing.SwingWorkerDelegator.construct(SwingWorkerDelegator.java:45)
   	at com.eviware.soapui.support.swing.SwingWorker$2.run(SwingWorker.java:111)
   	at java.lang.Thread.run(Unknown Source)
Fri Aug 29 14:55:49 CDT 2008:ERROR:com.eviware.soapui.impl.wsdl.support.xsd.SchemaException
   com.eviware.soapui.impl.wsdl.support.xsd.SchemaException
   	at com.eviware.soapui.impl.wsdl.support.xsd.SchemaUtils.buildSchemaTypes(SchemaUtils.java:273)
   	at com.eviware.soapui.impl.wsdl.support.xsd.SchemaUtils.loadSchemaTypes(SchemaUtils.java:179)
   	at com.eviware.soapui.impl.wsdl.support.wsdl.WsdlContext.loadDefinitions(WsdlContext.java:264)
   	at com.eviware.soapui.impl.wsdl.support.wsdl.WsdlContext.access$500(WsdlContext.java:53)
   	at com.eviware.soapui.impl.wsdl.support.wsdl.WsdlContext$Loader.construct(WsdlContext.java:218)
   	at com.eviware.soapui.support.swing.SwingWorkerDelegator.construct(SwingWorkerDelegator.java:45)
   	at com.eviware.soapui.support.swing.SwingWorker$2.run(SwingWorker.java:111)
   	at java.lang.Thread.run(Unknown Source)
Fri Aug 29 14:55:49 CDT 2008:ERROR:com.eviware.soapui.impl.wsdl.support.xsd.SchemaException: Error loading schema types
   com.eviware.soapui.impl.wsdl.support.xsd.SchemaException: Error loading schema types
   	at com.eviware.soapui.impl.wsdl.support.xsd.SchemaUtils.loadSchemaTypes(SchemaUtils.java:184)
   	at com.eviware.soapui.impl.wsdl.support.wsdl.WsdlContext.loadDefinitions(WsdlContext.java:264)
   	at com.eviware.soapui.impl.wsdl.support.wsdl.WsdlContext.access$500(WsdlContext.java:53)
   	at com.eviware.soapui.impl.wsdl.support.wsdl.WsdlContext$Loader.construct(WsdlContext.java:218)
   	at com.eviware.soapui.support.swing.SwingWorkerDelegator.construct(SwingWorkerDelegator.java:45)
   	at com.eviware.soapui.support.swing.SwingWorker$2.run(SwingWorker.java:111)
   	at java.lang.Thread.run(Unknown Source)
   Caused by: com.eviware.soapui.impl.wsdl.support.xsd.SchemaException
   	at com.eviware.soapui.impl.wsdl.support.xsd.SchemaUtils.buildSchemaTypes(SchemaUtils.java:273)
   	at com.eviware.soapui.impl.wsdl.support.xsd.SchemaUtils.loadSchemaTypes(SchemaUtils.java:179)
   	... 6 more

",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-09-02 17:54:17.407,,,no_permission,,,,,,,,,,,,,112548,,,Mon Apr 02 06:03:50 UTC 2012,,,,,,0|i1addz:,268635,,,,,,,,"02/Sep/08 17:54;bmargulies;This is not a feature of Aegis at this time. You will have to work with the type mapping object to change the object. There's no mechanism in the XML type mapping system for this.

However, if this is non-conforming, we should just fix it to use string.

","02/Sep/08 18:13;dkulp;
Comment #1:  at this point, we definitely shouldn't be mapping anything into the soap-enc namespace.   We don't really support soap-encoding at this point (Dain added SOME support into aegis, but it's not really hooked up yet).   Thus, that definitely needs to be fixed.

Comment #2:  it would probably be a good idea to map ""char"" into a simpleType restriction of string with maxLength=1:
 <simpleType name=""Character"">
      <restriction base=""string"">
        <maxLength value=""1""/>
        <minLength value=""1""/>
      </restriction>
    </simpleType>



","13/Sep/08 17:02;bmargulies;I checked in a fix. char and Character are now mapped to integer types except when SOAP encoding is really turned on.
","02/Apr/12 06:03;petr.udalau;There is one problem with char type in wsdl. 
org.apache.cxf.aegis.type.basic.CharacterAsStringType has wrong QName(""http://cxf.apache.org/aegisTypes"", ""char""). When we try to add wsdl with ""char"" type in SoapUI for example we will get the message that type ""char@http://cxf.apache.org/aegisTypes"" is undefined in wsdl.

As the characters mapped to integer types there should be 
CHARACTER_AS_STRING_TYPE_QNAME = XMLSchemaQNames.XSD_INT;
instead of
CHARACTER_AS_STRING_TYPE_QNAME = new QName(""http://cxf.apache.org/aegisTypes"", ""char""). Am I right?
",,,,,,,,,,,,,,,,,,,,,,,,,,,
org.apache.cxf.aegis.type.collection.CollectionType createCollection method returns ArrayList object for typeClass java.util.SortedSet,CXF-1770,12403274,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,bmargulies,smhaskins,smhaskins,28/Aug/08 18:43,24/Apr/09 21:16,14/Mar/19 02:29,29/Aug/08 01:33,2.1.2,,,,,,,,,,,,,,2.2,,,,Aegis Databinding,,,,,,0,,,,"In attempting to populate a POJO with the response from a WSDL using Aegis databinding, I am getting the exception...

Caused by: org.apache.cxf.aegis.DatabindingException: No write method for property {http://domain.webmap.gis.doitt.nyc.gov}fields in class gov.nyc.doitt.gis.webmap.domain.DataStoreRenderer
	at org.apache.cxf.aegis.type.basic.BeanType.writeProperty(BeanType.java:243)
	at org.apache.cxf.aegis.type.basic.BeanType.readObject(BeanType.java:147)
	at org.apache.cxf.aegis.type.basic.ArrayType.readCollection(ArrayType.java:89)
	at org.apache.cxf.aegis.type.collection.CollectionType.readObject(CollectionType.java:48)
	at org.apache.cxf.aegis.type.basic.BeanType.readObject(BeanType.java:145)
	at org.apache.cxf.aegis.AegisXMLStreamDataReader.read(AegisXMLStreamDataReader.java:82)
	at org.apache.cxf.aegis.databinding.XMLStreamDataReader.read(XMLStreamDataReader.java:47)

My POJOs looks like:

public class DataStoreRenderer extends Persistent {
	private SortedSet<DataStoreRendererField> fields = new TreeSet<DataStoreRendererField>();
        ...

	public SortedSet<DataStoreRendererField> getFields() {
		return fields;
	}
	
	public void setFields(SortedSet<DataStoreRendererField> fields) {
		this.fields = fields;
	}
        ...
}

public class DataStoreRendererField implements Comparable<DataStoreRendererField> {
        ...
	public int compareTo(DataStoreRendererField o) {
		...
	}
}

A simplied version of the response being bound looks like this...

<soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/"">
    <soap:Body>
        <ns1:getApplicationResponse xmlns:ns1=""http://service.webmap.gis.doitt.nyc.gov/"">
            <application>
                <ns2:dataStoreRenderers xmlns:ns2=""http://domain.webmap.gis.doitt.nyc.gov"">
                    <ns2:DataStoreRenderer>
                    <ns2:fields>
                        <ns2:DataStoreRendererField>
                            <ns2:id>1</ns2:id>
                        </ns2:DataStoreRendererField>
                        <ns2:DataStoreRendererField>
                            <ns2:id>2</ns2:id>
                        </ns2:DataStoreRendererField>
                        <ns2:DataStoreRendererField>
                            <ns2:id>3</ns2:id>
                        </ns2:DataStoreRendererField>
                        <ns2:DataStoreRendererField>
                            <ns2:id>4</ns2:id>
                        </ns2:DataStoreRendererField>
                    </ns2:fields>
                    </ns2:DataStoreRenderer>
                </ns2:dataStoreRenderers>
            </application>
        </ns1:getApplicationResponse>
    </soap:Body>
</soap:Envelope>

After debugging through the code I found that the exception is thrown because there xml is converted into an ArrayList and then when an appropriate setter is looked for we cannot find any that take ArrayList.  Once I found that out I debugged some more and found that the org.apache.cxf.aegis.type.collection.CollectionType.createCollection() method was the one creating the ArrayList.  The solution I had in mind was simply to add another else if statement (between List and Set) inside this createCollection method that would do the following...

protected Collection<Object> createCollection() {
        Collection values = null;

        if (getTypeClass().isAssignableFrom(List.class)) {
            values = new ArrayList();
        } else if (getTypeClass().isAssignableFrom(SortedSet.class)) {
            values = new TreeSet();
        } else if (getTypeClass().isAssignableFrom(Set.class)) {
            values = new HashSet();
        } else if (getTypeClass().isAssignableFrom(Vector.class)) {
            values = new Vector();
        } else if (getTypeClass().isInterface()) {
            values = new ArrayList();
        } else {
            try {
                values = (Collection<Object>)getTypeClass().newInstance();
            } catch (Exception e) {
                throw new DatabindingException(""Could not create map implementation: ""
                                               + getTypeClass().getName(), e);
            }
        }

        return values;
    }

Although it is possible that not everyone has implemented Comparable on the object contained in a SortedSet, wouldn't it be better to at least create a TreeSet as the default, rather than an ArrayList?  That way no exception will be thrown and the code won't fail to complete?","Microsoft Windows XP, Java 1.5.0.14, Tomcat 5.5",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-08-29 00:17:00.992,,,no_permission,,Novice,,,,,,,,,,,112546,,,Fri Aug 29 01:33:35 UTC 2008,,,,,,0|i1adef:,268637,,,,,,,,"29/Aug/08 00:17;bmargulies;Doc for SortedSet demands Comparable, so I think you've got the right fix. I'll make it.","29/Aug/08 00:38;smhaskins;Technically, you can also pass a Comparator to the SortedSet at creation time.  But basic natural ordering support would be a good first step.  Supporting specifications of comparators may be beyond the scope of this issue.",29/Aug/08 01:33;bmargulies;revision 690067.,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Nillable schema elements in WSDL cause XmlSchemaException,CXF-1769,12403260,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,jhite,jhite,28/Aug/08 15:35,15/Oct/08 04:52,14/Mar/19 02:29,02/Sep/08 14:04,2.1.2,,,,,,,,,,,,,,2.0.9,2.1.3,,,JAX-WS Runtime,,,,,,0,,,,"A WSDL with a nillable schema element, e.g.

<element name=""sayHelloResponse"">
   <complexType>
    <sequence>
     <element name=""output"" type=""xsd:string"" minOccurs=""0"" maxOccurs=""1"" nillable=""true"" />
    </sequence>
   </complexType>
  </element>

can be used to generate a JAX-WS front end, but when trying to recreate the WSDL via reflection, the following exception is thrown:

""org.apache.ws.commons.schema.XmlSchemaException: Schema name conflict in collection. Namespace: urn:example-helloworld""


Steps to reproduce:

1. Use WSDLToJava to generate a JAXWS frontend from the provided WSDL.
2. Use JavaToWS to generate a new WSDL from the generated JAXWS frontend.

If you remove the 'nillable=""true""' from the wsdl, then this error goes away.
",,,,,,,,,,,,,,,,,28/Aug/08 15:39;jhite;HelloWorld.wsdl;https://issues.apache.org/jira/secure/attachment/12389105/HelloWorld.wsdl,28/Aug/08 15:37;jhite;build.xml;https://issues.apache.org/jira/secure/attachment/12389103/build.xml,,,,,2.0,,,,,,,,,,,,,,,,,,,,2008-08-30 20:00:02.949,,,no_permission,,,,,,,,,,,,,112545,,,Tue Sep 02 14:04:05 UTC 2008,,,,,,0|i0v16f:,179164,,,,,,,,30/Aug/08 20:00;bmargulies;This seems to work on the trunk. Note that I do not include the specific version of JAX-WS that you include when I try it.,"02/Sep/08 14:04;dkulp;
I added some code to the jaxb databinding on trunk to workaround a bug in JAXB for this.   That's why it's working there.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Pointless log message when running wsdl2js,CXF-1767,12403144,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,bmargulies,bmargulies,27/Aug/08 12:17,18/Apr/11 12:44,14/Mar/19 02:29,08/Apr/11 14:47,2.1.2,,,,,,,,,,,,,,2.4,,,,Tooling,,,,,,0,,,,"Running the simplest variation on wsdl2js,  I this message. It seems pointless.

bim-1330% ../../bin/wsdl2js wsdl/hello_world.wsdl 
Aug 27, 2008 7:16:00 AM sun.reflect.NativeMethodAccessorImpl invoke0
INFO: Logging to org.slf4j.impl.JDK14LoggerAdapter(org.mortbay.log) via org.mortbay.log.Slf4jLog
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-09-04 15:27:16.726,,,no_permission,,,,,,,,,,,,,112543,,,Fri Apr 08 14:47:40 UTC 2011,,,,,,0|i145o7:,232382,,,,,,,,"04/Sep/08 15:27;seanoc;I've run this against latest snapshot and see no message.
This is on windows XP using jdk1.6.0_04


C:\CXFISSUES\CXF1767>wsdl2js hello_world.wsdl
C:\CXFISSUES\CXF1767>",04/Sep/08 15:30;bmargulies;Hmm. I'll try it here.,"14/Sep/08 00:57;bmargulies;On Ubuntu, with JVM 1.5 and 1.6, I still see this with a snapshot I just built myself. The sun package does suggest that this has to do with the JVM.

bim-1330% cd x/apache-cxf-2.2-SNAPSHOT/   
bim-1330% cd samples/js_browser_client_simple 
bim-1330% ../../bin/wsdl2js wsdl/hello_world.wsdl 
Sep 13, 2008 7:56:03 PM sun.reflect.NativeMethodAccessorImpl invoke0
INFO: Logging to org.slf4j.impl.JDK14LoggerAdapter(org.mortbay.log) via org.mortbay.log.Slf4jLog
bim-1330% 

bim-1330% java -version
java version ""1.5.0_15""
Java(TM) 2 Runtime Environment, Standard Edition (build 1.5.0_15-b04)
Java HotSpot(TM) Server VM (build 1.5.0_15-b04, mixed mode)
bim-1330% 

I tried it again with a 1.6 JVM with the same results.



","15/Sep/08 15:59;dkulp;
Benson, 

This is due to it picking up the cxf.xml file in there as the ""default"" configuration.   There is a jetty configuration in there so it's going ahead and configuring the jetty instance which is resulting in jetty configuring it's logging through slf4j.


",15/Sep/08 18:03;bmargulies;I don't think that the tools should read cxf.xml that happens to be lying about.,"08/Apr/11 14:47;dkulp;
This seems to be resolved in 2.4 due to the changes in using the ExtensionManagerBus by default.

I ran the wsdl2js on all the ""hello_world.wsdl""  things in various directories and didn't see any log messages anywhere.
",,,,,,,,,,,,,,,,,,,,,,,,,
handler chain wildcard matching does not quite work,CXF-1766,12403110,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,gawor@mcs.anl.gov,gawor@mcs.anl.gov,26/Aug/08 20:38,24/Apr/09 21:16,14/Mar/19 02:29,25/Mar/09 02:00,2.1.3,2.2,,,,,,,,,,,,,2.1.5,2.2.1,,,JAX-WS Runtime,,,,,,0,,,,"In AnnotationHandlerChainBuilder the following wildcard check is done:

        if (localPart.contains(""*"")) {
            //wildcard pattern matching
            return Pattern.matches(localPart, comp.getLocalPart());
        ...

So, for example if localPart is ""foo*"", this check will only return true if comp.getLocalPart() returns ""foo"" followed by any number of o's but will return false on anything else even if the string starts with ""foo"". According to the spec the ""foo*"" should match any string starting with ""foo"", e.g. ""fooBar"", ""fooCXF"", etc. Looks like the ""*"" in the localPart need to be first converted into appropriate regex - e.g. localPart = localPart.replace(""*"", "".*"");
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112542,,,2008-08-26 20:38:31.0,,,,,,0|i0v1g7:,179208,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The JAXRS mapping of Java methods without method parameter not working.,CXF-1762,12402859,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,sergey_beryozkin,pussinboost,pussinboost,22/Aug/08 09:19,09/Feb/09 22:20,14/Mar/19 02:29,10/Dec/08 16:25,2.1.2,,,,,,,,,,,,,,2.1.4,,,,Resources,,,,,,1,,,,"Hello everybody,

I implemented a REST resource that has a java method without method parameter's.
@Path(""/service"")
@ConsumeMime({ ""application/json;charset=UTF-8"", ""application/xml;charset=UTF-8"" })
@ProduceMime({ ""application/json;charset=UTF-8"", ""application/xml;charset=UTF-8"" })
public class RestService {

    @GET
    @Path(""/id/{id}"")
    public SomeThingElse getSomeThingElse(@PathParam(""id"")int id) {
        return new SomeThingElse();
    }

    @GET
    public SomeThing getSomeThing() {
        return new SomeThing();
    }

}

If you call the rest uri /service the following error occur 
SCHWERWIEGEND: .No operation matching request path /adspaces/ is found, ContentT
ype : */*, Accept : text/xml,application/xml,application/xhtml+xml,text/html;q=0
.9,text/plain;q=0.8,image/png,*/*;q=0.5.

I changed the method getSomeThing and add a method parameter than it works.

any suggestions

And a other strange behavior is if you remove the method getSomeThingElse from the code than an error by creating the service occur. 
Here the error log: 

ERROR main org.springframework.web.context.ContextLoader - Context initialization failed
 org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'xmlserviceserver': Error setting property values; nested exception is org.springframework.beans.PropertyBatchUpdateException; nested PropertyAccessExceptions (1) are:
PropertyAccessException 1: org.springframework.beans.MethodInvocationException: Property 'serviceBeans' threw exception; nested exception is java.lang.NullPointerException
Caused by: 
org.springframework.beans.PropertyBatchUpdateException; nested PropertyAccessException details (1) are:
PropertyAccessException 1:
org.springframework.beans.MethodInvocationException: Property 'serviceBeans' threw exception; nested exception is java.lang.NullPointerException
Caused by: 
java.lang.NullPointerException
	at org.apache.cxf.jaxrs.JAXRSServiceFactoryBean.setResourceClassesFromBeans(JAXRSServiceFactoryBean.java:144)
	at org.apache.cxf.jaxrs.JAXRSServerFactoryBean.setServiceBeans(JAXRSServerFactoryBean.java:265)
	at org.apache.cxf.jaxrs.JAXRSServerFactoryBean.setServiceBeans(JAXRSServerFactoryBean.java:260)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:821)
	at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:645)
	at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:78)
	at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:59)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1127)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:862)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:423)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:249)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:155)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:246)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:160)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:291)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:352)
	at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:246)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:189)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:49)
	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:3843)
	at org.apache.catalina.core.StandardContext.start(StandardContext.java:4350)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:791)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:771)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:525)
	at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:829)
	at org.apache.catalina.startup.HostConfig.deployWARs(HostConfig.java:718)
	at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:490)
	at org.apache.catalina.startup.HostConfig.start(HostConfig.java:1147)
	at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:311)
	at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:117)
	at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1053)
	at org.apache.catalina.core.StandardHost.start(StandardHost.java:719)
	at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1045)
	at org.apache.catalina.core.StandardEngine.start(StandardEngine.java:443)
	at org.apache.catalina.core.StandardService.start(StandardService.java:516)
	at org.apache.catalina.core.StandardServer.start(StandardServer.java:710)
	at org.apache.catalina.startup.Catalina.start(Catalina.java:578)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:288)
	at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:413)
","Windows XP,
jdk 1.6.0_07
",,,,,,,,,,,,,,,,29/Nov/08 17:21;pussinboost;zxapp_rest_test.zip;https://issues.apache.org/jira/secure/attachment/12394931/zxapp_rest_test.zip,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2008-09-04 13:11:10.008,,,no_permission,,,,,,,,,,,,,50426,,,Fri Dec 05 22:40:11 UTC 2008,,,,,,0|i1adfj:,268642,,,,,,,,04/Sep/08 13:11;sergey_beryozkin;I'll try to fix it by the end of next week...,"17/Oct/08 17:17;sergey_beryozkin;Frank,

can you please confirm it's still an issue with 2.1.2 ?

I can't confirm it.

Here's my test case.

1. Server impl

@Path(""/bookstore/"")
public class BookStoreSpring {

    private Map<Long, Book> books = new HashMap<Long, Book>();
    private Long mainId = 123L;
        
    public BookStoreSpring() {
        init();
        System.out.println(""----books: "" + books.size());
    }
    
    @GET
    @Path(""/books/{id}"")
    @ProduceMime(""application/json"")
    public Book getBookById(@PathParam(""id"") Long id) {
        return books.get(id);
    }

    @GET
    @ProduceMime(""application/json"")
    public Book getDefaultBook() {
        return books.get(mainId);
    }

    
    // init()
}

this is equivalent to the class sample you provided, just the names are different.

2. beans.xml

<jaxrs:server id=""bookservice""
address=""/"">
    <jaxrs:serviceBeans>
      <bean class=""org.apache.cxf.systest.jaxrs.BookStoreSpring"" />
    </jaxrs:serviceBeans>
  </jaxrs:server>

The server is started ok , both methods can be executed

The only difference is that Jetty is used....",21/Oct/08 17:19;sergey_beryozkin;Frank - I'd appreciate if you could get back to me on this issue...,"28/Oct/08 17:14;sylvek91;i confirm this issue :-/

i have the same problem under tomcat (6.0.14) and with CXF 2.1.2.

i use in the same ""service"" function with and without paramters.","30/Oct/08 16:40;pussinboost;Sorry about the delay.

I will check if the bug is still present in the next day on the 2.1.2 and 2.1.3 version.

please forgive me Sergey. :-)","03/Nov/08 12:03;sergey_beryozkin;Hi sylvek (using your login name :-)) - thanks for the confirmation - can you please post here the sample code (the sample resource class with annotations and methods) plus the spring config, plus the URI request which results in a no method found error ? Did you try 2.1.3 ?

Hi Frank - no problems at all - please try it when you get a chance. If it still fails then please check that the sample resource class you posted above is indeed matching the one you're using and please also post the spring config. May be 2.1.3 will fix it ?

thanks","06/Nov/08 23:40;sylvek91;tested with cxf 2.1.2:

my PlayerRestService:

@Path(""/player/{uuid}/"")
@ProduceMime(""application/json"")
public class PlayerServiceDefault extends AbstractService implements
		PlayerService {

	private ConcurrentMap<String, AsyncPlayer> players;

	public void setPlayers(ConcurrentMap<String, AsyncPlayer> players) {
		this.players = players;
	}

	@GET
	@Path(""/error"")
	@NotNullChecker
	public String getError(@PathParam(""uuid"") String uuid) throws BusinessException {
		return getPlayer(uuid).getLastError().getMessage();
	}
	
	@GET
	@Path(""/fatal"")
	@NotNullChecker
	public String getFatal(@PathParam(""uuid"") String uuid) throws BusinessException {
		return getPlayer(uuid).getFatal().getMessage();
	}

	@GET
	@Path(""/state"")
	@NotNullChecker
	public String getState(@PathParam(""uuid"") String uuid) throws BusinessException {
		return getPlayer(uuid).getCurrentState().value();
	}
}

my app-context file:
beans xmlns=""http://www.springframework.org/schema/beans""
	xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:jaxws=""http://cxf.apache.org/jaxws""
	xmlns:jaxrs=""http://cxf.apache.org/jaxrs""
	xsi:schemaLocation=""
	http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
	http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd 
	http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd""
	default-lazy-init=""true"">
	<import resource=""classpath:META-INF/cxf/cxf.xml"" />
<!--	<import resource=""classpath:META-INF/cxf/cxf-extension-soap.xml"" />-->
	<import resource=""classpath:META-INF/cxf/cxf-extension-jaxrs-binding.xml"" />
	<import resource=""classpath:META-INF/cxf/cxf-servlet.xml"" />
	<bean id=""PlayerService"" class=""fr.sokaris.poker.services.impl.PlayerServiceDefault"">
		<property name=""players"">
			<ref bean=""Players"" />
		</property>
	</bean>
	<jaxrs:server id=""PlayerRestService"" address=""/rest/"">
		<jaxrs:serviceBeans>
			<ref bean=""PlayerService"" />
		</jaxrs:serviceBeans>
	</jaxrs:server>
<!--	<jaxws:endpoint id=""PlayerWebService"" implementor=""#PlayerService""-->
<!--		implementorClass=""fr.sokaris.poker.services.impl.PlayerServiceDefault""-->
<!--		address=""/PlayerService"" />-->

my web.xml file :
<servlet>
    <servlet-name>CXFServlet</servlet-name>
    <servlet-class>org.apache.cxf.transport.servlet.CXFServlet</servlet-class>
    <load-on-startup>1</load-on-startup>
  </servlet>
  <servlet-mapping>
    <servlet-name>CXFServlet</servlet-name>
    <url-pattern>/services/*</url-pattern>
  </servlet-mapping>

and my error :
7 nov. 2008 00:35:28 org.apache.cxf.jaxrs.JAXRSServiceFactoryBean checkMethodDispatcher
ATTENTION: No resource methods found for resource class org.apache.cxf.jaxrs.model.ClassResourceInfo
INFO  DefaultListableBeanFactory - Destroying singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@1bfc9d: defining beans [cxf,org.apache.cxf.bus.spring.BusWiringBeanFactoryPostProcessor,org.apache.cxf.bus.spring.Jsr250BeanPostProcessor,org.apache.cxf.bus.spring.BusExtensionPostProcessor,org.apache.cxf.resource.ResourceManager,org.apache.cxf.configuration.Configurer,org.apache.cxf.binding.BindingFactoryManager,org.apache.cxf.transport.DestinationFactoryManager,org.apache.cxf.transport.ConduitInitiatorManager,org.apache.cxf.wsdl.WSDLManager,org.apache.cxf.phase.PhaseManager,org.apache.cxf.workqueue.WorkQueueManager,org.apache.cxf.buslifecycle.BusLifeCycleManager,org.apache.cxf.endpoint.ServerRegistry,org.apache.cxf.endpoint.ServerLifeCycleManager,org.apache.cxf.endpoint.ClientLifeCycleManager,org.apache.cxf.transports.http.QueryHandlerRegistry,org.apache.cxf.endpoint.EndpointResolverRegistry,org.apache.cxf.headers.HeaderManager,org.apache.cxf.catalog.OASISCatalogManager,org.apache.cxf.endpoint.ServiceContractResolverRegistry,org.apache.cxf.jaxrs.JAXRSBindingFactory,org.apache.cxf.transport.servlet.ServletTransportFactory,PlayerService,PlayerRestService,GameService,GameRestService,GameFindService,GameFindRestService,GamePlayerService,GamePlayerRestService,GameAdminService,GameAsminRestService,PlayerAdminService,PlayerAdminRestService,RegistrationService,RegistrationRestService,ActionService,ActionRestService,BetService,BetRestService,Players,Games,UidService,ConfigurationService,Rules,RefreshGamble,DistributeCards,ThePreFlop,ThePreFlopActionsState,TheDefaultActionsState,TheFlop,TheTurn,TheRiver,TheShutdown,ThePot,ShowTheWinners,MakeABreak,Croupier,PotManager,NotNullInterceptor,org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator,LoggerInterceptor,org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator,TaskExecutor,GameThreadFactory]; root of factory hierarchy
ERROR ContextLoader - Context initialization failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'PlayerRestService': Error setting property values; nested exception is org.springframework.beans.PropertyBatchUpdateException; nested PropertyAccessExceptions (1) are:
PropertyAccessException 1: org.springframework.beans.MethodInvocationException: Property 'serviceBeans' threw exception; nested exception is java.lang.NullPointerException
Caused by: org.springframework.beans.PropertyBatchUpdateException; nested PropertyAccessException details (1) are:
PropertyAccessException 1:
org.springframework.beans.MethodInvocationException: Property 'serviceBeans' threw exception; nested exception is java.lang.NullPointerException
Caused by: java.lang.NullPointerException
	at org.apache.cxf.jaxrs.JAXRSServiceFactoryBean.setResourceClassesFromBeans(JAXRSServiceFactoryBean.java:144)
	at org.apache.cxf.jaxrs.JAXRSServerFactoryBean.setServiceBeans(JAXRSServerFactoryBean.java:265)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
","06/Nov/08 23:46;sylvek91;same issu with cxf 2.1.3 :'(

7 nov. 2008 00:45:17 org.apache.cxf.jaxrs.JAXRSServiceFactoryBean checkMethodDispatcher
ATTENTION: No resource methods found for resource class org.apache.cxf.jaxrs.model.ClassResourceInfo
INFO  DefaultListableBeanFactory - Destroying singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@1bfc9d: defining beans [cxf,org.apache.cxf.bus.spring.BusWiringBeanFactoryPostProcessor,org.apache.cxf.bus.spring.Jsr250BeanPostProcessor,org.apache.cxf.bus.spring.BusExtensionPostProcessor,org.apache.cxf.resource.ResourceManager,org.apache.cxf.configuration.Configurer,org.apache.cxf.binding.BindingFactoryManager,org.apache.cxf.transport.DestinationFactoryManager,org.apache.cxf.transport.ConduitInitiatorManager,org.apache.cxf.wsdl.WSDLManager,org.apache.cxf.phase.PhaseManager,org.apache.cxf.workqueue.WorkQueueManager,org.apache.cxf.buslifecycle.BusLifeCycleManager,org.apache.cxf.endpoint.ServerRegistry,org.apache.cxf.endpoint.ServerLifeCycleManager,org.apache.cxf.endpoint.ClientLifeCycleManager,org.apache.cxf.transports.http.QueryHandlerRegistry,org.apache.cxf.endpoint.EndpointResolverRegistry,org.apache.cxf.headers.HeaderManager,org.apache.cxf.catalog.OASISCatalogManager,org.apache.cxf.endpoint.ServiceContractResolverRegistry,org.apache.cxf.jaxrs.JAXRSBindingFactory,org.apache.cxf.transport.servlet.ServletTransportFactory,PlayerService,PlayerRestService,GameService,GameRestService,GameFindService,GameFindRestService,GamePlayerService,GamePlayerRestService,GameAdminService,GameAsminRestService,PlayerAdminService,PlayerAdminRestService,RegistrationService,RegistrationRestService,ActionService,ActionRestService,BetService,BetRestService,Players,Games,UidService,ConfigurationService,Rules,RefreshGamble,DistributeCards,ThePreFlop,ThePreFlopActionsState,TheDefaultActionsState,TheFlop,TheTurn,TheRiver,TheShutdown,ThePot,ShowTheWinners,MakeABreak,Croupier,PotManager,NotNullInterceptor,org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator,LoggerInterceptor,org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator,TaskExecutor,GameThreadFactory]; root of factory hierarchy
ERROR ContextLoader - Context initialization failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'PlayerRestService': Error setting property values; nested exception is org.springframework.beans.PropertyBatchUpdateException; nested PropertyAccessExceptions (1) are:
PropertyAccessException 1: org.springframework.beans.MethodInvocationException: Property 'serviceBeans' threw exception; nested exception is java.lang.NullPointerException
Caused by: org.springframework.beans.PropertyBatchUpdateException; nested PropertyAccessException details (1) are:
PropertyAccessException 1:
org.springframework.beans.MethodInvocationException: Property 'serviceBeans' threw exception; nested exception is java.lang.NullPointerException
Caused by: java.lang.NullPointerException
	at org.apache.cxf.jaxrs.JAXRSServiceFactoryBean.setResourceClassesFromBeans(JAXRSServiceFactoryBean.java:144)
	at org.apache.cxf.jaxrs.JAXRSServerFactoryBean.setServiceBeans(JAXRSServerFactoryBean.java:265)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
",07/Nov/08 09:42;sergey_beryozkin;Ok - I'll look at this issue asap - I'm a bit busy with the other work at the moment but I'll do my best to get it fixed for 2.1.4,"24/Nov/08 14:32;sergey_beryozkin;Here's what I have. Slightly simplified PlayerService :

@Path(""/player/{uuid}/"")
@Produces(""application/json"")
public class PlayerService {

    // instead of ConcurrentMap, just to tp have some property set on a root  resource class from Spring
    public void setProperty(String value) {
    }
    
    @GET
    @Path(""/error"")
    public String getError(@PathParam(""uuid"") String uuid) {
        return ""little problem"";
    }

    @GET
    @Path(""/fatal"")
    public String getFatal(@PathParam(""uuid"") String uuid) {
        return ""big problem"";
    }

    @GET
    @Path(""/state"")
    public String getState(@PathParam(""uuid"") String uuid) {
        return ""ok"";
    }

}

same web.xml, and this beans.xml :

<beans xmlns=""http://www.springframework.org/schema/beans""
  xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
  xmlns:jaxrs=""http://cxf.apache.org/jaxrs""
  xsi:schemaLocation=""
http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans.xsd
http://cxf.apache.org/jaxrs
http://cxf.apache.org/schemas/jaxrs.xsd"" default-lazy-init=""true"">

  <import resource=""classpath:META-INF/cxf/cxf.xml"" />
  <import resource=""classpath:META-INF/cxf/cxf-extension-jaxrs-binding.xml"" />
  <import resource=""classpath:META-INF/cxf/cxf-servlet.xml"" />
  
  <bean id=""PlayerService"" class=""org.apache.cxf.systest.jaxrs.PlayerService"">
     <property name=""property"" value=""property""/>
  </bean>

  <jaxrs:server id=""bookservice""
		        address=""/"">
    <jaxrs:serviceBeans>
      <ref bean=""PlayerService""/>
    </jaxrs:serviceBeans>		   
  </jaxrs:server>

</beans>

With Tomcat 5.5.25 and cxf-fuse 2.1.2 (certified CXF, but the jaxrs code is the same there) I see no problems at all starting the web application.

Can you give me a favor and remove @NullCheck annotations and if it changes anything ? Likewsie can you temporarily comment out everything but jaxrs related definitions
in your bean and give it a try ?

","24/Nov/08 14:40;sergey_beryozkin;Frank : I tried this code again (by hacking a bit a PlayerService code but it matched one to one the code you posted originally)

@Path(""/player/"")
@Produces(""application/json"")
@Consumes(""application/json"")
public class PlayerService {
    
    @GET
    @Path(""/id/{id}"")
    public String getSomeThingElse(@PathParam(""id"")int id) {
        return new String(""bar"");
    }

    @GET
    public String getSomeThing() {
        return ""something"";
    } 

}

Both methods can be successfully invoked",29/Nov/08 17:21;pussinboost;Here is a sample maven project to reproduce the error.,"29/Nov/08 17:27;pussinboost;Hy Sergey,

sorry for the long delay but i was also very busy the christmas business has started.
I attached a little rest project that i used to reproduce the issue.

The good news is that this issue is fixed in the 2.1.3 and 2.1.2 version.
I tested this with the apache tomcat version 6.0.18.

I remember that this issue occurs in 2.1.3-SNAPSHOT version before 22.08.08 I guess.

So good work it's fixed.","30/Nov/08 20:19;sergey_beryozkin;Hi Frank - good news and thanks for taking your time and verifying this issue has been fixed,  at least for your project. I'd happy to close this issue, 
but sylvek  saw this issue too - though I can't confirm it - I do hope that may be I'll be able to close this issue soon enough :-)    ",05/Dec/08 22:40;sergey_beryozkin;I reproduced it while messing with spring security - which is good,,,,,,,,,,,,,,,,
jms transport don't support MTOM,CXF-1760,12402783,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,ffang,ffang,ffang,21/Aug/08 10:45,19/May/09 09:01,14/Mar/19 02:29,21/Aug/08 12:17,,,,,,,,,,,,,,,2.0.9,2.1.3,,,,,,,,,0,,,,"mtom can't work over jms transport because miss content-type in the protocol header, but the content-type is important for AttachmentInIntecepor to parse the attachment in the message",,,,,,,,,,,,,,,,,18/May/09 12:48;liucong;cxf-jms.patch;https://issues.apache.org/jira/secure/attachment/12408374/cxf-jms.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2009-05-07 03:26:38.445,,,no_permission,,,,,,,,,,,,,92088,,,Tue May 19 09:01:26 UTC 2009,,,,,,0|i13zmv:,231403,,,,,,,,"21/Aug/08 12:17;ffang;commit fix
http://svn.apache.org/viewvc?rev=687703&view=rev for 2.0.x branch
http://svn.apache.org/viewvc?rev=687722&view=rev for trunk","20/Dec/08 01:38;ffang;commit fix 
http://svn.apache.org/viewvc?rev=687778&view=rev for 2.1.x branch","07/May/09 03:26;liucong;If the config <jms:client messageType=""byte""/> doesn't appear in the WSDL of the service, the JMS Transport will send MTOM message as TextMessage.
Thought the client send attachement information and the server get the attachment information, the attachment which is got by the server is not the same with the attachment information which is sent by the client.
I have compared the two messages. And I have used several kinds of attatchment for it.
    1) Text File. The result is right.
    2) WinRaR File. The file that is received by the server is larger than the file that is sent by the client.
    3) BitMap file. The size of attachment that is sent by the client is 163166, but the size of attachment that is received is 485947, which is 167% more than the original binary data. (http://www.w3.org/TR/2008/WD-soapjms-20081121/#binding-message-body)
According to the analysis above, reason may be as follows:
    1) In the client, the attachment is encoded as base64 encoding, and transfer as TextMessage in JMS.
    2) The server doesn't know the encoding, and just get the text message.

So if one wants to use JMS MTOM-support, the config <jms:client messageType=""byte""/> must be set, then the MTOM message will be sent as ByteMessage. 
Some fixed for these should be done in CXF.","18/May/09 12:48;liucong;This is the patch for the problem above.
https://issues.apache.org/jira/secure/attachment/12408374/cxf-jms.patch","19/May/09 07:16;njiang;When use the MTOM, we need to make sure the message type be binary.
In LiuCong's patch , we will check the message type in the JMSconduit send method ， where we can tell if the message has the attachments.
If the message type is text and it has the attachment messages,  a configuration error will be thrown.

@Liu Cong，
Your patch addresses this issue, that is great. But you didn't change the old JMS MTOM test, so it was failed if you applied patch.
I changed the old JMS MTOM test to catch that JMS configuration exception and also updated the exception's message for it .
Please check them out.
","19/May/09 09:01;ffang;Hi LiuCong,
Besides the test failure Willem mentioned here, the patch is ok for me.
You need ensure all tests pass based on your patch, :-)
Thanks
Freeman
",,,,,,,,,,,,,,,,,,,,,,,,,
Simple front end does not figure out generic implementation beans.,CXF-1758,12402767,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,vasvir,vasvir,21/Aug/08 06:54,01/Feb/10 19:02,14/Mar/19 02:29,15/Dec/09 14:14,2.1.2,,,,,,,,,,,,,,2.2.6,,,,Simple Frontend,,,,,,0,,,,"The real issue in the description below is that the SimpleFrontEnd is not dealing with an implementation bean like

MyClass<String> as it must. It isn't figuring out the actual types, it's just allowing type erasure to mislead it into treating all instances of the type parameters as Object, which is to say xsd:anyType. This happened to trigger an obscure explosion in the Javascript generator.

If anyone wants to fix this badly enough, they need to contemplate 

   List<P> doSomething(P someItem)

in terms of the complexity of the code that will trace that P down there in the list up to the SEB.



I managed to get a javascript client example working but it barfs in some cases.

All my server classes are pojos and I am using the simple frontend (I think) with Aegis. I am very pleased with java2java communication since I can pass complex types with no annotations at all.

The problematic cases are of the form. (All other cases are working with js client)

public interface Service<T, P> {
    public int open(P args);

    public void close(int handle);

    public int getValue(int handle);
}

My guess is it barfs in the generic P type argument.

When I am trying to do http://localhost/ws/SomeService?js tomcat produces an error

Aug 20, 2008 7:14:43 AM org.apache.cxf.transport.servlet.ServletController invoke
WARNING: org.apache.cxf.javascript.JavascriptQueryHandler Exception caught writing response.
java.lang.ClassCastException: org.apache.ws.commons.schema.XmlSchemaType cannot be cast to org.apache.ws.commons.schema.XmlSchemaComplexType
        at org.apache.cxf.javascript.types.SchemaJavascriptBuilder.deserializeElement(SchemaJavascriptBuilder.java:610)
        at org.apache.cxf.javascript.types.SchemaJavascriptBuilder.domDeserializerFunction(SchemaJavascriptBuilder.java:413)
        at org.apache.cxf.javascript.types.SchemaJavascriptBuilder.generateCodeForSchema(SchemaJavascriptBuilder.java:102)
        at org.apache.cxf.javascript.JavascriptQueryHandler.writeResponse(JavascriptQueryHandler.java:135)
        at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:152)
        at org.apache.cxf.transport.servlet.AbstractCXFServlet.invoke(AbstractCXFServlet.java:174)
        at org.apache.cxf.transport.servlet.AbstractCXFServlet.doGet(AbstractCXFServlet.java:156)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:689)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:802)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)
        at org.apache.catalina.security.SecurityUtil$1.run(SecurityUtil.java:244)
        at java.security.AccessController.doPrivileged(Native Method)
        at javax.security.auth.Subject.doAsPrivileged(Subject.java:517)
        at org.apache.catalina.security.SecurityUtil.execute(SecurityUtil.java:276)
        at org.apache.catalina.security.SecurityUtil.doAsPrivilege(SecurityUtil.java:162)
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:262)
        at org.apache.catalina.core.ApplicationFilterChain.access$0(ApplicationFilterChain.java:192)
        at org.apache.catalina.core.ApplicationFilterChain$1.run(ApplicationFilterChain.java:171)
        at java.security.AccessController.doPrivileged(Native Method)
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:167)
        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:213)
        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:174)
        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127)
        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:117)
        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:108)
        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:174)
        at org.apache.jk.server.JkCoyoteHandler.invoke(JkCoyoteHandler.java:200)
        at org.apache.jk.common.HandlerRequest.invoke(HandlerRequest.java:283)
        at org.apache.jk.common.ChannelSocket.invoke(ChannelSocket.java:773)
        at org.apache.jk.common.ChannelSocket.processConnection(ChannelSocket.java:703)
        at org.apache.jk.common.ChannelSocket$SocketConnection.runIt(ChannelSocket.java:895)
        at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:689)
        at java.lang.Thread.run(Thread.java:619)
",linux debian stable (etch) tomcat 5.5.20-2etch3,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-08-21 23:17:48.562,,,no_permission,,Advanced,,,,,,,,,,,112537,,,Tue Dec 15 14:14:05 UTC 2009,,,,,,0|i0v2sn:,179426,,,,,,,,"21/Aug/08 23:17;bmargulies;Are you classes of the form

class MyClass<P> implements MyInterface<P> {

}

or 

class MyClass implements MyInterface<String> {
}
?
","21/Aug/08 23:40;bmargulies;I tried to come up with a test case, but it resolutely refuses to fail. Please actually concoct a failing test case and add it here.
","25/Aug/08 14:23;vasvir;ok

the interface is

----------------------
package com.biovista.ws.iface;

public interface TestService<P> {
    public int open(P args);

    public void close(int handle);

    public int getValue(int handle);
}
----------------------
The implementation is
----------------------
package com.biovista.ws.impl;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

public class TestService<P> implements com.biovista.ws.iface.TestService<P> {
    private Log log = LogFactory.getLog(getClass());

    public void close(int handle) {
    }

    public int getValue(int handle) {
        return 2;
    }

    public int open(P args) {
        log.info(""args = "" + args + "" class = "" + args.getClass());
        return 0;
    }
}
----------------------

it crashes with the same error in tomcat logs when I am requesting
the javascript client (?js instead of ?wsdl)

	Vassilis
","25/Aug/08 14:38;bmargulies;Oh, the entire SEI is parameterized! OK, I'll try THAT.","25/Aug/08 14:41;bmargulies;Hang on, I don't understand this. How do you actually use this? What does the spring configuration look like to set up this endpoint? Do you just set the whole business up in Java?
","25/Aug/08 20:13;bmargulies;OK, I've got a repro.","25/Aug/08 20:20;bmargulies;This isn't a javascript bug, at least not the one you think it is. It's a simple front end bug, and it may be bigger than I can chase.

The simple front end is building a schema without using the information about the specialization. It has to, I fear, due to type erasure.

The service class is SomeGenericClass<String>, but the simple front end doesn't deal with the generic information, and ends up spitting out an xsd:any particle.

The javascript code has some support for xsd:any, but not enough to handle this case.  And if the simple front end were working right, there's be no 'any' anywhere.

I strongly recommend deploying your service via an extra level of non-generic class.

",25/Aug/08 20:44;bmargulies;This is way too hard for me to tackle.,"15/Dec/09 14:14;dkulp;
This is now somewhat resolved, about as good as we can get it. 

One note:
You need a concrete bean subclass for this to work.  Thus, something like:

svrBean.setServiceBean(new TestServiceImpl<String>());

will not work, but if you do:

svrBean.setServiceBean(new TestServiceImpl<String>() { })

It will work as the compiler will generate a subclass that would retain the type information.
",,,,,,,,,,,,,,,,,,,,,,
Javascript client not working on IE-6,CXF-1757,12402762,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,,harbhanu,harbhanu,21/Aug/08 04:34,09/Feb/09 22:20,14/Mar/19 02:29,21/Aug/08 23:08,2.1,,,,,,,,,,,,,,2.1.4,,,,JavaScript Client,,,,,,0,,,,"Javascript client not able to process, send/recieve, any SOAP request.
After some debugging I learnt that the generated code is not able to create the XMLHttpRequest Object on IE6.

There is some issue with the way we are creating the XMLHttpRequest Object for IE.","Windows XP SP2,  Intel P4 and Internet Explorer 6",,,,,,,,,,,,,,,,21/Aug/08 15:00;harbhanu;patch.txt;https://issues.apache.org/jira/secure/attachment/12388675/patch.txt,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2008-08-21 23:07:28.642,,,no_permission,,,,,,,,,,,,,50427,,,Thu Aug 21 23:08:13 UTC 2008,,,,,,0|i1adg7:,268645,,,,,,,,"21/Aug/08 15:00;harbhanu;Please consider on whether we should add trace in case any particular AcitveXObject creation fails.

try
{
         httpRequest = new ActiveXObject(XMLHTTPREQUEST_MS_PROGIDS[i]);
         success = true;
}
catch (ex)
{// Ignore the error or one can choose to log it.. <<<<< Here.....
}","21/Aug/08 23:07;bmargulies;I checked in a variation on this. I can't test on IE, please test on the next snapshot.",21/Aug/08 23:08;bmargulies;Applied fix.,,,,,,,,,,,,,,,,,,,,,,,,,,,,
wsdl2java @WebService annotation on Impl class should be on Interface class JSR181 3.1,CXF-1756,12402737,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,dkulp,bob fields,bob fields,20/Aug/08 20:00,23/Oct/08 03:59,14/Mar/19 02:29,20/Aug/08 21:09,2.1.2,,,,,,,,,,,,,,2.1.3,,,,Tooling,,,,,,0,,,,"Looks like XFIRE-496 (http://jira.codehaus.org/browse/XFIRE-496) was never fixed or carried over to CXF.

I'm getting an error from my Eclipse Jax-ws validator for the code created by wsdl2java: JSR-181 3.1: name element cannot be used with endpointInterface.

According to JSR181 section 3.1, if an Interface has an Impl, the @WebService annotation on the Impl class must only have serviceName and endpointInterface attributes. The other attributes (name, portName, targetNamespace, wsdlLocation) must be on the Interface class @WebService annotation.

java2wsdl creates this on the Impl class (removed data between quotes) but should only have serviceName and endpointImpl:
@javax.jws.WebService(name = """",
                      serviceName = """",
                      portName = """",
                      targetNamespace = """",
                      wsdlLocation = """",
                      endpointInterface = """")

and this on the Interface class (missing serviceName, portName, wsdlLocation):
@WebService(targetNamespace = """", name = """")

java2wsdl appears to work correctly with the annotations in the proper place in the SEI and Impl classes.",CXF 2.1.2 and 2.0.8,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-08-20 20:25:16.183,,,no_permission,,,,,,,,,,,,,112536,,,Wed Aug 20 21:02:02 UTC 2008,,,,,,0|i1adgf:,268646,,,,,,,,"20/Aug/08 20:25;dkulp;
name="""" shouldn't be there.  I agree with that. 

The rest are allowed per JAX-WS spec.

In particular:
wsdlLocation is specifically DISCOURAGED from being on the SEI interface and the reference implementation would not put it there.   If it's on the SEI, you cannot use that sei in a ""code first"" type scenario as the wsdl would always have to be pulled in.

targetNamespace also needs to be allowed to be able to model/use implementations where the ""service"" is in a different namespace than the portType/binding nodes.

portName isn't even mentioned in the jsr311 spec.  


In anycase, I'll remove the name attribute, but the others need to stay.

Note: I checked a bunch of the impls in the JAX-WS TCK and I see things like:

@WebService(
    portName=""HelloPort"",
    serviceName=""HelloService"",
    targetNamespace=""......,
    wsdlLocation=""WEB-INF/........./.wsdl"",
    endpointInterface=""........Hello""
)
public class HelloImpl implements Hello {


",20/Aug/08 21:02;bob fields;Removing name from the generated Impl was enough to get rid of the validation error. I guess I was interpreting the 'only' part too literally.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JMSConduit need copy protocol headers to response in Message,CXF-1755,12402715,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,ffang,ffang,ffang,20/Aug/08 13:45,23/Jan/09 17:52,14/Mar/19 02:29,20/Aug/08 14:54,,,,,,,,,,,,,,,2.0.9,2.1.3,,,,,,,,,0,,,,"need add 
inMessage.put(Message.PROTOCOL_HEADERS,outMessage.get(Message.PROTOCOL_HEADERS));
this is needed to fix
http://issues.apache.org/activemq/browse/SM-1508",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112535,,,Thu Aug 21 03:18:51 UTC 2008,,,,,,0|i13zm7:,231400,,,,,,,,"20/Aug/08 14:54;ffang;commit fix http://svn.apache.org/viewvc?rev=687359&view=rev to 2.0.x branch
http://svn.apache.org/viewvc?rev=687363&view=rev to trunk","21/Aug/08 03:18;ffang;populate headers for inMessage directly instead of changing OutMessage

http://svn.apache.org/viewvc?rev=687535&view=rev
http://svn.apache.org/viewvc?rev=687543&view=rev",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
cxf-codegen:wsdl2java java.util.zip.ZipException: The system cannot find the path specified,CXF-1753,12402627,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Critical,Fixed,dkulp,vianetman,vianetman,19/Aug/08 13:57,15/Oct/08 04:52,14/Mar/19 02:29,20/Aug/08 21:08,2.0.8,2.1.2,,,,,,,,,,,,,2.0.9,2.1.3,,,Build system,,,,,,0,,,,"While running the Maven plugin, I get the following exception below. The source of this exception is that on my Windows machine, the path property of the URL object includes a '/' character at the beginning and '%20' where the spaces are as in a URL. If I remove these elements in the debugger, the code executes fine. The path looks like:

/C:/Documents%20and%20Settings/user/.m2/repository/org/apache/cxf/cxf-tools-wsdlto-core/2.0.8/cxf-tools-wsdlto-core-2.0.8.jar

Exception:

[INFO] cxf-codegen:wsdl2java
java.util.zip.ZipException: The system cannot find the path specified
	at java.util.zip.ZipFile.open(Native Method)
	at java.util.zip.ZipFile.<init>(ZipFile.java:203)
	at java.util.jar.JarFile.<init>(JarFile.java:132)
	at java.util.jar.JarFile.<init>(JarFile.java:70)
	at org.apache.cxf.maven_plugin.CodegenUtils.getClassTime(CodegenUtils.java:74)
	at org.apache.cxf.maven_plugin.CodegenUtils.getCodegenTimestamp(CodegenUtils.java:48)
	at org.apache.cxf.maven_plugin.WSDL2JavaMojo.execute(WSDL2JavaMojo.java:221)
	at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:578)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:508)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:328)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:151)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:220)
	at org.apache.maven.embedder.MavenEmbedder.execute(MavenEmbedder.java:813)
	at org.maven.ide.eclipse.embedder.Maven2Executor.main(Maven2Executor.java:85)
","Windows XP, Maven inside Eclipse",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,Moderate,,,,,,,,,,,112533,,,2008-08-19 13:57:58.0,,,,,,0|i0uzl3:,178906,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JavaToWs generates wrong types for arrays and generic types in wrapper classes,CXF-1752,12402548,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,bwende,bwende,18/Aug/08 08:13,19/Aug/08 07:04,14/Mar/19 02:29,18/Aug/08 17:41,2.0.8,2.1.1,,,,,,,,,,,,,2.0.9,2.1.3,,,Tooling,,,,,,0,,,,"I found a problem where wsdl2java generates wrong types for fields in my request-wrapper classes.
This seems to happen on Arrays of primitive types and for generic types like List<Long>.

I have done the following:
- Used the Java first approach and wrote an annotated interface, e.g.

public interface MyWebServiceInterface {
    @WebMethod(action = ""storeDocument"")
    public abstract PostStageItem storeDocument(
        @WebParam(name=""receivers"") List<Long> receivers, 
        @WebParam(name=""item"") PreStageDocument item, 
        @WebParam(name=""binaryContent"") byte[] binaryContent, 
        @WebParam(name=""fileName"") String fileName)

}


- used JavaToWS as follows:

<java classname=""org.apache.cxf.tools.java2ws.JavaToWS"" fork=""true"">
    <arg value=""-o""/>
    <arg value=""src/ws/META-INF/wsdl/MyWebService.wsdl""/>
    <arg value=""-databinding""/>
    <arg value=""jaxb""/>
    <arg value=""-wsdl""/>
    <arg value=""-wrapperbean""/>
    <arg value=""-verbose""/>
    <arg value=""-s""/>
    <arg value=""src/ws""/>
    <arg value=""com.mycompany.mywebservice.MyWebServiceInterface""/>
    <classpath>
        <path refid=""cxf.classpath""/>
    </classpath>
</java>


The result is that JavaToWS generates the WSDL as I would expect. 
But the tool fails to generate the request-wrapper classes. But the output is wrong like that:

...
@XmlRootElement(name = ""storeDocument"", namespace = ""http://www.mycompany.com/myservice"")
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = ""storeDocument"", namespace = ""http://www.mycompany.com/myservice"", propOrder = {""receivers"",""item"",""binaryContent"",""fileName""})
public class StoreDocument {

    @XmlElement(name = ""receivers"")
    private java.lang.Long receivers;
    @XmlElement(name = ""item"")
    private abaxx.postbox.staging.PreStageDocument item;
    @XmlElement(name = ""binaryContent"")
    private PreStageDocument binaryContent;
    @XmlElement(name = ""fileName"")
    private java.lang.String fileName;

... <the getters and setters>...
}

This output is really unexpected. I would expect a List<Long> for ""receivers"" and a byte[] for ""binaryContent"".
I debugged the problem and found it in
http://svn.apache.org/viewvc/cxf/trunk/tools/javato/ws/src/main/java/org/apache/cxf/tools/java2wsdl/processor/internal/jaxws/RequestWrapper.java?view=markup
In this class the types of the parameters are determined with:

final Type[] paramClasses = method.getGenericParameterTypes();

Later in buildFields() a loop is started for these parameters and they are analyzed.

In my example, the type of the field ""receivers"" is a ParameterizedType instance (List<Long<). The code takes the first generic type argument, wich is Long, and use it as type for the property in the request wrapper. This is wrong. It should generate List<Long> instead.

In the second case the type for the field ""binaryContent"" is determined as GenericArrayType. The method fails totally and uses PreStageDocument as type in the request-wrapper. This is because PreStageDocument was the last value of the ""type"" variable in the buildFields()-loop and none of the if- and else-if-conditions were true. I think this should at least throw an exception if no type for the field can be found.

Maybe this problem also exists on the response-wrapper generator, but I didnt test this.","WinXP, Sun JDK 1.5.0_10",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112532,,,Tue Aug 19 07:04:33 UTC 2008,,,,,,0|i1adgv:,268648,,,,,,,,19/Aug/08 07:04;bwende;The fix works for me. Thank you for the quick reaction.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
idl2wsdl fails to generate wsdl for IDL files with complex object reference usage,CXF-1751,12402461,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,matteo.vescovi,matteo.vescovi,15/Aug/08 16:38,23/Oct/08 03:59,14/Mar/19 02:29,15/Aug/08 18:48,2.1.2,,,,,,,,,,,,,,2.1.3,,,,Tooling,,,,,,0,,,,"Here is the stack trace:

org.apache.cxf.tools.common.ToolException: org.apache.cxf.tools.common.ToolException: org.apache.ws.commons.schema.XmlSchemaException: Schema name conflict in collection
        at org.apache.cxf.tools.corba.processors.idl.IDLToWSDLProcessor.process(IDLToWSDLProcessor.java:88)
        at org.apache.cxf.tools.corba.processors.idl.IDLToWSDLProcessor.process(IDLToWSDLProcessor.java:79)
        at org.apache.cxf.tools.corba.processors.idl.AbstractIDLToWSDLModuleToNSTestCase.testModuleToNSWSDLGeneration(AbstractIDLToWSDLModuleToNSTestCase.java:147)
        at org.apache.cxf.tools.corba.processors.idl.AbstractIDLToWSDLModuleToNSTestCase.testModuleToNSWSDLGeneration(AbstractIDLToWSDLModuleToNSTestCase.java:89)
        at org.apache.cxf.tools.corba.processors.idl.AbstractIDLToWSDLModuleToNSTestCase.testModuleToNSWSDLGeneration(AbstractIDLToWSDLModuleToNSTestCase.java:76)
        at com.iona.soa.bindings.corba.tools.processors.idl.IDLToWSDLParlay50GenerationTest.testPolicyInterfaces(IDLToWSDLParlay50GenerationTest.java:496)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:585)
        at junit.framework.TestCase.runTest(TestCase.java:168)
        at junit.framework.TestCase.runBare(TestCase.java:134)
        at junit.framework.TestResult$1.protect(TestResult.java:110)
        at junit.framework.TestResult.runProtected(TestResult.java:128)
        at junit.framework.TestResult.run(TestResult.java:113)
        at junit.framework.TestCase.run(TestCase.java:124)
        at junit.framework.TestSuite.runTest(TestSuite.java:232)
        at junit.framework.TestSuite.run(TestSuite.java:227)
        at org.junit.internal.runners.OldTestClassRunner.run(OldTestClassRunner.java:35)
        at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:62)
        at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:140)
        at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:127)
        at org.apache.maven.surefire.Surefire.run(Surefire.java:177)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:585)
        at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:334)
        at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:980)
Caused by: org.apache.cxf.tools.common.ToolException: org.apache.ws.commons.schema.XmlSchemaException: Schema name conflict in collection
        at org.apache.cxf.tools.corba.processors.idl.IDLToWSDLProcessor.parseIDL(IDLToWSDLProcessor.java:219)
        at org.apache.cxf.tools.corba.processors.idl.IDLToWSDLProcessor.process(IDLToWSDLProcessor.java:86)
        ... 28 more
Caused by: java.lang.RuntimeException: org.apache.ws.commons.schema.XmlSchemaException: Schema name conflict in collection
        at org.apache.cxf.tools.corba.processors.idl.PortTypeVisitor.visitInterface(PortTypeVisitor.java:199)
        at org.apache.cxf.tools.corba.processors.idl.PortTypeVisitor.visit(PortTypeVisitor.java:91)
        at org.apache.cxf.tools.corba.processors.idl.DefinitionVisitor.visit(DefinitionVisitor.java:66)
        at org.apache.cxf.tools.corba.processors.idl.ModuleVisitor.visit(ModuleVisitor.java:53)
        at org.apache.cxf.tools.corba.processors.idl.DefinitionVisitor.visit(DefinitionVisitor.java:57)
        at org.apache.cxf.tools.corba.processors.idl.ModuleVisitor.visit(ModuleVisitor.java:53)
        at org.apache.cxf.tools.corba.processors.idl.DefinitionVisitor.visit(DefinitionVisitor.java:57)
        at org.apache.cxf.tools.corba.processors.idl.ModuleVisitor.visit(ModuleVisitor.java:53)
        at org.apache.cxf.tools.corba.processors.idl.DefinitionVisitor.visit(DefinitionVisitor.java:57)
        at org.apache.cxf.tools.corba.processors.idl.ModuleVisitor.visit(ModuleVisitor.java:53)
        at org.apache.cxf.tools.corba.processors.idl.DefinitionVisitor.visit(DefinitionVisitor.java:57)
        at org.apache.cxf.tools.corba.processors.idl.WSDLASTVisitor.visit(WSDLASTVisitor.java:120)
        at org.apache.cxf.tools.corba.processors.idl.IDLToWSDLProcessor.parseIDL(IDLToWSDLProcessor.java:211)
        ... 29 more
Caused by: org.apache.ws.commons.schema.XmlSchemaException: Schema name conflict in collection
        at org.apache.ws.commons.schema.XmlSchema.<init>(XmlSchema.java:126)
        at org.apache.ws.commons.schema.XmlSchema.<init>(XmlSchema.java:134)
        at org.apache.cxf.tools.corba.processors.idl.ObjectReferenceVisitor.visitForwardDeclaredObjectReference(ObjectReferenceVisitor.java:465)
        at org.apache.cxf.tools.corba.processors.idl.ObjectReferenceVisitor.visit(ObjectReferenceVisitor.java:86)
        at org.apache.cxf.tools.corba.processors.idl.ScopedNameVisitor.forwardDeclared(ScopedNameVisitor.java:227)
        at org.apache.cxf.tools.corba.processors.idl.ScopedNameVisitor.visit(ScopedNameVisitor.java:99)
        at org.apache.cxf.tools.corba.processors.idl.ParamTypeSpecVisitor.visit(ParamTypeSpecVisitor.java:62)
        at org.apache.cxf.tools.corba.processors.idl.OperationVisitor.visitOpTypeSpec(OperationVisitor.java:375)
        at org.apache.cxf.tools.corba.processors.idl.OperationVisitor.visit(OperationVisitor.java:161)
        at org.apache.cxf.tools.corba.processors.idl.PortTypeVisitor.visitInterface(PortTypeVisitor.java:174)
        ... 41 more
",,,,,,,,,,,,,,,,,15/Aug/08 16:39;matteo.vescovi;complex_obj_ref_idl.diff;https://issues.apache.org/jira/secure/attachment/12388319/complex_obj_ref_idl.diff,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112531,,,Fri Aug 15 16:39:54 UTC 2008,,,,,,0|i1acen:,268476,,,,,,,,"15/Aug/08 16:39;matteo.vescovi;Patch attached.

Apply from trunk with:  patch -p0 < complex_obj_ref_idl.diff

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CXF 2.1.1 And WebLogic 10,CXF-1750,12402452,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,,sripathiacharya,sripathiacharya,15/Aug/08 13:06,13/Apr/11 00:41,14/Mar/19 02:29,10/Oct/08 17:19,2.1.1,,,,,,,,,,,,,,Invalid,,,,,,,,,,0,,,,"Hi All,

I'm facing the following exception when I build the webservice from the CXF sample hello_world.wsdl and try to deploy on WebLogic 10

<Aug 15, 2008 12:20:34 PM BST> <Error> <HTTP> <BEA-101125> <[weblogic.servlet.internal.WebAppServletContext@14627f - appName: 'HelloWorld', name: 'HelloWorldWeb', context-path: '/HelloWorldWeb'] Error occurred while instantiating servlet: ""org.apache.cxf.js.rhino.DOMPayloadProvider"".
java.lang.InstantiationException: org.apache.cxf.js.rhino.DOMPayloadProvider
        at java.lang.Class.newInstance0(Class.java:335)
        at java.lang.Class.newInstance(Class.java:303)
        at weblogic.servlet.internal.WebComponentContributor.getNewInstance(WebComponentContributor.java:187)
        at weblogic.servlet.internal.WebComponentContributor.createServletInstance(WebComponentContributor.java:203)
        at weblogic.servlet.internal.StubSecurityHelper$ServletInitAction.run(StubSecurityHelper.java:254)

I've used CXF wsdl2java converter to build the server side code.

My EAR model is as follows:

HelloWorld.ear
    -META-INF
        -weblogic-application.xml
    -HelloWorldWeb.war
        -wsdl
            -hello_world.wsdl
        -WEB-INF
            -lib
            -classes
            -web.xml
            -bean.xml

The bean XML has the following entry:

	<import resource=""classpath:META-INF/cxf/cxf.xml"" />
	<import resource=""classpath:META-INF/cxf/cxf-extension-soap.xml"" />
	<import resource=""classpath:META-INF/cxf/cxf-servlet.xml"" />
	<jaxws:endpoint id=""HelloWorld""
		implementor=""org.apache.hello_world_soap_http.GreeterImpl""
		address=""/HelloWorld"">
	</jaxws:endpoint>

weblogic-application.xml has the following entry:

    <application-param>
        <param-name>webapp.encoding.default</param-name>
        <param-value>UTF-8</param-value>
    </application-param>
    <prefer-application-packages>
        <package-name>javax.jws.*</package-name>
    </prefer-application-packages> 

Workaround:
I've modified the DOMPayloadProvider source to include default constructor, which allowed me to deploy the application on to WebLogic 10.

P.S. The application works fine on Tomcat 6.0",WebLogic 10,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-08-16 01:31:58.983,,,no_permission,,,,,,,,,,,,,112530,,,Wed Apr 13 00:41:02 UTC 2011,,,,,,0|i1acev:,268477,,,,,,,,"16/Aug/08 01:31;gmazza;I'm not sure this is a CXF problem.  In your weblogic-application.xml, you need to add to the <prefer-application-packages/> pretty much any package name it complains about (and it can vary from webapp to webapp).  There's probably nothing we can do in the CXF code to help you here, probably CXF-USER is a better solution for you.

I would try my weblogic-application file listed here:
http://www.jroller.com/gmazza/entry/deploying_metro_and_cxf_based

Does my w-a.xml file help?  If not, perhaps more package names until you get it working...

Glen
","18/Aug/08 10:57;sripathiacharya;Hi Glen,

The application failed to deploy even with the weblogic-application.xml you have mentioned. 

One thing I noticed was, when I removed the classes DOMPayloadProvider and DOMMessageProvider from the cxf-2.1.1.jar, I am able to deploy the application on WebLogic successfully.

I don't know if this error is due to the classes provided by CXF or the way these are instantiated by WebLogic server (also don't know from where its reading the bean configurations). Any help is highly appreciated.

Sripathi","19/Aug/08 01:07;gmazza;Sorry, don't think I can help you here.  It appears then that DOMPayloadProvider and/or DOMMessageProvider are calling libraries that WebLogic supplies by default, and those libraries that are either older or newer than the ones CXF ships with.  

WebLogic unfortunately uses its own libraries unless you explicitly add them to <prefer application packages/>  -- that is what triggers the CXF-bundled libraries to be used.  I don't know of an easy way to figure out what those libraries are--view error stack traces, perhaps.

As far as I'm concerned, if we work on Tomcat it is not a CXF bug.  It is not the CXF project's fault if an app server wrongly swaps out the JARs that CXF is packaged with and replaces them with its own.  But if you can find out more information, please leave a comment here so others can be helped.
","10/Oct/08 17:19;sripathiacharya;Since Weblogic uses JAX-WS 2.0 and CXF requires JAX-WS 2.1 we need to override the package javax.xml.ws.*

Modify the weblogic-application.xml as follows

<?xml version=""1.0"" encoding=""UTF-8""?> 
<weblogic-application xmlns=""http://www.bea.com/ns/weblogic/90""> 
    <application-param> 
        <param-name>webapp.encoding.default</param-name> 
        <param-value>UTF-8</param-value> 
    </application-param> 
    <prefer-application-packages> 
        <package-name>javax.jws.*</package-name>
        <package-name>javax.xml.ws.*</package-name>
        <package-name>org.apache.cxf.*</package-name>
        <package-name>antlr.*</package-name>
    </prefer-application-packages> 
</weblogic-application> ","13/Apr/11 00:41;gburboz;Web Service with CXF and Weblogic 11g issue has been resolved with an enhancement in CXF version 2.4 and 2.3.4

Reference JIRA: [https://issues.apache.org/jira/browse/CXF-3363]",,,,,,,,,,,,,,,,,,,,,,,,,,
Quick Fix for JMS Encoding issue,CXF-1749,12402407,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,njiang,chris@die-schneider.net,chris@die-schneider.net,14/Aug/08 20:54,09/Feb/09 22:19,14/Mar/19 02:29,31/Oct/08 12:41,2.1.2,,,,,,,,,,,,,,2.0.10,2.1.4,,,Transports,,,,,,1,,,,"The encoding of JMS Messages is wrong if they are sent as TextMessage and the platform encoding is not equal to the message encoding. This issue is linked to CXF-1668. While the other issue handles a long term solution like proposed from Daniel Kulp this issue aims to provide a short term fix.

The short term fix is to avoid the simple getBytes() call and instead call getBytes(<encoding>) with the correct encoding.",,,,,,,,,,,,,,,CXF-1668,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-10-30 07:43:15.976,,,no_permission,,,,,,,,,,,,,50428,,,Fri Oct 31 12:41:00 UTC 2008,,,,,,0|i1acf3:,268478,,,,,,,,"14/Aug/08 20:55;chris@die-schneider.net;Link to longer problem description, discussion and the proposal for a long term solution","14/Aug/08 21:01;chris@die-schneider.net;For the short term fix we have to find out which encoding the message uses. Is it safe to read this encoding from the <?xml encoding=""""?> ?  Or is the encoding always UTF-8?","30/Oct/08 07:43;njiang;I think we can leverage the content-type which holds the charset (encoding) information. 
If there is no charset information you use the default encoding UTF-8, otherwise we set the message encoding to the charset.
BTW, there is Message.ENCODING  key in the Message , I think we need to use it to specify the text message's encoding.","31/Oct/08 12:41;njiang;trunk: http://svn.apache.org/viewvc?rev=709353&view=rev
           http://svn.apache.org/viewvc?rev=709354&view=rev

2.1.x:  http://svn.apache.org/viewvc?rev=709357&view=rev

2.0.x: http://svn.apache.org/viewvc?rev=709363&view=rev",,,,,,,,,,,,,,,,,,,,,,,,,,,
idl2wsdl tool fails to add Any type to schema,CXF-1745,12402286,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,matteo.vescovi,matteo.vescovi,13/Aug/08 10:33,23/Oct/08 03:59,14/Mar/19 02:29,13/Aug/08 15:18,2.1.3,,,,,,,,,,,,,,2.1.3,,,,Tooling,,,,,,0,,,,"idl2wsdl tool fails to add Any type to schema if the http://www.w3.org/2001/XMLSchema schema is not the first schema returned by getXmlSchemas().

",,,,,,,,,,,,,,,,,13/Aug/08 10:36;matteo.vescovi;add_any_type_to_schema.diff;https://issues.apache.org/jira/secure/attachment/12388125/add_any_type_to_schema.diff,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,49700,,,Wed Aug 13 10:36:04 UTC 2008,,,,,,0|i0v44v:,179643,,,,,,,,"13/Aug/08 10:36;matteo.vescovi;Patch attached.

Apply from trunk with: patch -p0 < add_any_type_to_schema.diff
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Temporary files are not deleted,CXF-1743,12402133,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,rostrzycki,rostrzycki,11/Aug/08 15:18,18/Feb/09 16:37,14/Mar/19 02:29,12/Aug/08 19:07,2.1.1,2.1.2,,,,,,,,,,,,,2.0.9,2.1.2,,,Core,,,,,,0,,,,"I have endpoint declared in Spring as follows:
---
	<jaxws:endpoint id=""importService""
		implementor=""my.ImportServiceImpl""
		address=""/importService"">
		<jaxws:properties>
			<entry key=""mtom-enabled"" value=""true"" />
		</jaxws:properties>
	</jaxws:endpoint>

---

During tests I discovered, that large attachments (>64k), which are saved in temporary files, are not removed after processing SOAP message.

I've analysed sources of org.apache.cxf.attachment.AttachmentDataSource and org.apache.cxf.io.CachedOutputStream and discovered that AttachmentDataSource does not allow to close cache. 
The only solution is to add close() method to AttachmentDataSource and close cache manually.






","Linux, FreeBSD",,,,,,,,,,,,,,CXF-2049,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-08-12 18:12:02.038,,,no_permission,,,,,,,,,,,,,112525,,,Fri Oct 31 12:07:07 UTC 2008,,,,,,0|i0sygf:,167059,,,,,,,,"12/Aug/08 10:59;rostrzycki;My solution (hack) of this bug:

1. add close() method to AttachmentDataSource:
    /**
     * The only way to clean temporary files.
     * 
     * @throws IOException if closing cache threw an exception.  
     */
    public void close() throws IOException {
        cache.close();
    }

2. manually close LazyDataSource objects used to access uploaded attachments using such helper method:

	public static void closeDatasource(DataSource ds) {
		if(ds != null && ds instanceof LazyDataSource) {
			if(((LazyDataSource) ds).getDataSource() instanceof AttachmentDataSource) {
				AttachmentDataSource attDS = (AttachmentDataSource) ((LazyDataSource) ds).getDataSource();
				try {
					attDS.close();
				} catch (IOException e) {
					// logger.error(e.getMessage(), e);
				}
			}
		}
		
	}

This fixes this bug in 2.1.1 and probably in 2.1.2-SNAPSHOT.
","12/Aug/08 18:12;dkulp;
What's SUPPOSED to happen is when the input stream is closed, the file is deleted.   This isn't actually working though.   :-(       I'm testing a fix now.

",31/Oct/08 12:07;utuba;I've just tested this in the 2.1.3 version under linux (opensuse 11) and it doesn't generate files anymore.  Under Windows server 2008 its still leaves the files lying around.  Both use the latest java 6 release.  Have you tested it under windows at any time?,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JMS Conduit Pooled Session Recycling,CXF-1742,12402102,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,ulhasbhole,cnelson,cnelson,11/Aug/08 04:05,18/Aug/08 18:26,14/Mar/19 02:29,12/Aug/08 07:25,2.1.1,,,,,,,,,,,,,,2.0.9,2.1.2,,,Transports,,,,,,0,,,,"I  believe the doClose method of JMSOutputStream should have the pooled session recycle call within a finally block. As it is now, if the handleResponse call fails due to a timeout an IOException will be thrown by handleResponse. If that happens the recycle call will not happen. We had a large number of timeouts that occurred during a load test. This eventually killed our JMS server due to the number of consumers created.

The change below seems to have fixed our issue, but please let me know if this is incorrect.

        protected void doClose() throws IOException {            
            try {
                isOneWay = outMessage.getExchange().isOneWay();
                commitOutputMessage();
                if (!isOneWay) {
                    handleResponse();
                }                
            } catch (JMSException jmsex) {
                getLogger().log(Level.WARNING, ""JMS connect failed with JMSException : "", jmsex);            
                throw new IOException(jmsex.toString());
            } finally {
            	base.sessionFactory.recycle(pooledSession);
            }
        }",N/A,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-08-12 07:25:52.962,,,no_permission,,Novice,,,,,,,,,,,112524,,,Tue Aug 12 07:25:52 UTC 2008,,,,,,0|i1acfz:,268482,,,,,,,,12/Aug/08 07:25;ulhasbhole;Fixed now and will be available in next release.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE is thrown when publish the code first service  in NoSpringServlet,CXF-1741,12402074,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,njiang,njiang,njiang,10/Aug/08 01:05,18/Aug/08 18:26,14/Mar/19 02:29,11/Aug/08 02:19,2.0.8,2.1.1,,,,,,,,,,,,,2.0.9,2.1.2,,,Transports,,,,,,0,,,,"If we publish a code first service with JAXWS API in NoSpringServlet like this
            HelloImpl helloImpl = new HelloImpl();
            Endpoint.publish(""/Hello"", helloImpl);    

The stack trace like this
Caused by: java.lang.NullPointerException
	at javax.naming.InitialContext.getURLScheme(InitialContext.java:228)
	at javax.naming.InitialContext.getURLOrDefaultInitCtx(InitialContext.java:277)
	at javax.naming.InitialContext.lookup(InitialContext.java:351)
	at org.apache.cxf.transport.servlet.ServletContextResourceResolver.resolve(ServletContextResourceResolver.java:63)
	at org.apache.cxf.resource.DefaultResourceManager.findResource(DefaultResourceManager.java:99)
	at org.apache.cxf.resource.DefaultResourceManager.resolveResource(DefaultResourceManager.java:55)
	at org.apache.cxf.common.injection.ResourceInjector.resolveResource(ResourceInjector.java:398)
	at org.apache.cxf.common.injection.ResourceInjector.visitMethod(ResourceInjector.java:185)
	at org.apache.cxf.common.annotation.AnnotationProcessor.processMethods(AnnotationProcessor.java:87)
	at org.apache.cxf.common.annotation.AnnotationProcessor.accept(AnnotationProcessor.java:70)
	at org.apache.cxf.common.injection.ResourceInjector.inject(ResourceInjector.java:81)
	at org.apache.cxf.common.injection.ResourceInjector.inject(ResourceInjector.java:76)
	at org.apache.cxf.bus.extension.ExtensionManagerImpl.loadAndRegister(ExtensionManagerImpl.java:175)
	at org.apache.cxf.bus.extension.ExtensionManagerImpl.activateViaNS(ExtensionManagerImpl.java:96)
	at org.apache.cxf.bus.extension.ExtensionManagerImpl.activateAll(ExtensionManagerImpl.java:104)
	at org.apache.cxf.bus.extension.DeferredMap.undefer(DeferredMap.java:36)
	at org.apache.cxf.transport.DestinationFactoryManagerImpl.getDestinationFactoryForUri(DestinationFactoryManagerImpl.java:140)
	at org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory.createEndpointInfo(AbstractWSDLBasedEndpointFactory.java:206)
	at org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory.createEndpoint(AbstractWSDLBasedEndpointFactory.java:146)
	at org.apache.cxf.frontend.ServerFactoryBean.create(ServerFactoryBean.java:116)
	at org.apache.cxf.jaxws.JaxWsServerFactoryBean.create(JaxWsServerFactoryBean.java:168)
	at org.apache.cxf.jaxws.EndpointImpl.getServer(EndpointImpl.java:336)
	at org.apache.cxf.jaxws.EndpointImpl.doPublish(EndpointImpl.java:251)
	... 6 more
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112523,,,Mon Aug 11 02:19:29 UTC 2008,,,,,,0|i13zun:,231438,,,,,,,,"10/Aug/08 01:09;njiang;This NPE can be walk around by using the  frontend API and setting the transportId 

            ServerFactoryBean sf = new ServerFactoryBean();
            sf.setAddress(""/Hello"");
            sf.setServiceBean(helloImpl);
            sf.setTransportId(""http://schemas.xmlsoap.org/soap/http"");
            sf.create();","11/Aug/08 02:19;njiang;2.1.x 
http://svn.apache.org/viewvc?rev=684397&view=rev
2.0.x
http://svn.apache.org/viewvc?rev=684398&view=rev",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE in ClientProxyFactoryBean on void methods ,CXF-1737,12401865,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,benneke,benneke,07/Aug/08 07:28,18/Aug/08 18:26,14/Mar/19 02:29,08/Aug/08 21:20,2.1.1,,,,,,,,,,,,,,2.0.9,2.1.2,,,Core,,,,,,0,,,,"If you try to access a service containing a method returning nothing (void), the ClientProxyFactoryBean fails with a NullPointerException:

Exception in thread ""main"" java.lang.NullPointerException
	at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.initializeParameter(ReflectionServiceFactoryBean.java:643)
	at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.initializeClassInfo(ReflectionServiceFactoryBean.java:609)
	at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.initializeWSDLOperation(ReflectionServiceFactoryBean.java:540)
	at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.initializeWSDLOperations(ReflectionServiceFactoryBean.java:510)
	at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.buildServiceFromWSDL(ReflectionServiceFactoryBean.java:305)
	at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.initializeServiceModel(ReflectionServiceFactoryBean.java:394)
	at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.create(ReflectionServiceFactoryBean.java:181)
	at org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory.createEndpoint(AbstractWSDLBasedEndpointFactory.java:79)
	at org.apache.cxf.frontend.ClientFactoryBean.create(ClientFactoryBean.java:51)
	at org.apache.cxf.frontend.ClientProxyFactoryBean.create(ClientProxyFactoryBean.java:97)

If you change the method returning something or eliminate the method altogether, everything works fine...",,,,,,,,,,,,,,,,,08/Aug/08 09:29;benneke;void.zip;https://issues.apache.org/jira/secure/attachment/12387802/void.zip,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2008-08-07 23:30:38.427,,,no_permission,,,,,,,,,,,,,112519,,,Fri Aug 08 19:08:58 UTC 2008,,,,,,0|i0sygn:,167060,,,,,,,,"07/Aug/08 23:30;lothian;I couldn't reproduce that issue, but found out the following piece of code within DefaultServiceConfiguration:

    @Override
    public Boolean hasOutMessage(Method m) {
        if (m.getReturnType().getClass().equals(void.class) && m.getExceptionTypes().length == 0) {
            return false;
        }
        return true;
    }

I believe Java 5 will do some auto-boxing with void.class that might result in Void.class which is, I think, different from Void.TYPE. So, since Void.TYPE is the Class representation of the primitive void, changing the method to the following might do the trick:

    @Override
    public Boolean hasOutMessage(Method m) {
        if (m.getReturnType().getClass().equals(Void.TYPE) && m.getExceptionTypes().length == 0) {
            return false;
        }
        return true;
    }

","08/Aug/08 09:29;benneke;Finally I managed to strip things down to the attached test project. 

The junit test starts the server endpoint and tries to call it with 
- plain JaxWS (which works), 
- the JaxWsProxyFactoryBean (which also works) and 
- the ClientProxyFactoryBean (which fails with the given exception)","08/Aug/08 09:37;benneke;Simon, thanks for looking into it. I've just attached a test case to reproduce the exception.

According to my tests, the following assertions are all valid:

		assertTrue(Void.TYPE.equals(void.class));
		assertFalse(Void.class.equals(void.class));
		assertFalse(Void.class.equals(Void.TYPE));

Therefore, as far as I see the change you propose would not change anything. One could however be on the very save side by doing somthing like this:

    @Override
    public Boolean hasOutMessage(Method m) {
        Class rt = m.getReturnType().getClass();
        if ((rt.equals(Void.TYPE) || rt.equals(Void.class)) && m.getExceptionTypes().length == 0) {
            return false;
        }
        return true;
    } 

","08/Aug/08 09:42;benneke;Aaaaah, I see. It does m.getReturnType().getClass() which will always be ""Class"" as getReturnType() already returns the value. So this method will never return false and it should read:

    @Override
    public Boolean hasOutMessage(Method m) {
        Class rt = m.getReturnType().getClass();
        if ((rt.equals(Void.TYPE) || rt.equals(Void.class)) && m.getExceptionTypes().length == 0) {
            return false;
        }
        return true;
    } 

However I think, the following change would be enough:

    @Override
    public Boolean hasOutMessage(Method m) {
        if (m.getReturnType().equals(void.class) && m.getExceptionTypes().length == 0) {
            return false;
        }
        return true;
    } 

","08/Aug/08 19:08;dkulp;

Thanks for the testcase.   Very useful.  

The ""correct"" fix is actually on line 618:
        if (!initializeParameter(o, method, -1, paramType, genericType)) {
            return false;
        }

should change to:
        if (o.hasOutput()
            && !initializeParameter(o, method, -1, paramType, genericType)) {
            return false;
        }

Basically, if the wsdl states there is no output message (it's a one-way), then the return type is irrelevant and should/could be completely skipped.",,,,,,,,,,,,,,,,,,,,,,,,,,
Error in finding the DestinationFactory when using Soap/JMS with configuration,CXF-1736,12401801,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,edellnolan,edellnolan,06/Aug/08 16:24,18/Aug/08 18:26,14/Mar/19 02:29,12/Aug/08 18:46,2.0.8,,,,,,,,,,,,,,2.1.2,,,,Transports,,,,,,0,,,,"Hi,

I am trying to use soap/jms with the config specified in a file and it appears that its currently broken.

I have tested this on the latest cxf 2.0.8 version as well as an earlier version.

To Reproduce this if you run the sample ""jms_queue"" it runs fine with the config in the wsdl  but if you attempt to put this config in a config file it throws the following error when you attempt to run the server

     [java] Starting Server
     [java] Exception in thread ""main"" javax.xml.ws.WebServiceException: org.apa
che.cxf.service.factory.ServiceConstructionException
     [java]     at org.apache.cxf.jaxws.EndpointImpl.doPublish(EndpointImpl.java
:258)
     [java]     at org.apache.cxf.jaxws.EndpointImpl.publish(EndpointImpl.java:1
92)
     [java]     at org.apache.cxf.jaxws.spi.ProviderImpl.createAndPublishEndpoin
t(ProviderImpl.java:74)
     [java]     at javax.xml.ws.Endpoint.publish(Endpoint.java:156)
     [java]     at demo.jms_greeter.server.Server.<init>(Server.java:30)
     [java]     at demo.jms_greeter.server.Server.main(Server.java:34)
     [java] Caused by: org.apache.cxf.service.factory.ServiceConstructionExcepti
on
     [java]     at org.apache.cxf.frontend.ServerFactoryBean.create(ServerFactor
yBean.java:134)
     [java]     at org.apache.cxf.jaxws.JaxWsServerFactoryBean.create(JaxWsServe
rFactoryBean.java:160)
     [java]     at org.apache.cxf.jaxws.EndpointImpl.getServer(EndpointImpl.java
:327)
     [java]     at org.apache.cxf.jaxws.EndpointImpl.doPublish(EndpointImpl.java
:242)
     [java]     ... 5 more
     [java] Caused by: org.apache.cxf.BusException: No DestinationFactory was fo
und for the namespace http://cxf.apache.org/transport/jms.
     [java]     at org.apache.cxf.transport.DestinationFactoryManagerImpl.getDes
tinationFactory(DestinationFactoryManagerImpl.java:106)
     [java]     at org.apache.cxf.endpoint.ServerImpl.initDestination(ServerImpl
.java:85)
     [java]     at org.apache.cxf.endpoint.ServerImpl.<init>(ServerImpl.java:69)

     [java]     at org.apache.cxf.frontend.ServerFactoryBean.create(ServerFactor
yBean.java:115)


I have attached the cxf.xml file with the config in it and the wsdl with the jms:address commented out.

cheers, Edell.",,,,,,,,,,,,,,,,,06/Aug/08 16:25;edellnolan;cxf.xml;https://issues.apache.org/jira/secure/attachment/12387655/cxf.xml,06/Aug/08 16:25;edellnolan;jms_greeter.wsdl;https://issues.apache.org/jira/secure/attachment/12387656/jms_greeter.wsdl,,,,,2.0,,,,,,,,,,,,,,,,,,,,2008-08-12 18:46:05.843,,,no_permission,,,,,,,,,,,,,112518,,,Tue Aug 12 18:46:05 UTC 2008,,,,,,0|i1acgv:,268486,,,,,,,,"12/Aug/08 18:46;dkulp;
The wsdl's were wrong as the transport id in the soap:binding element were wrong.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Invalid namespace qualification in Java to WSDL mapping,CXF-1735,12401727,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,gawor@mcs.anl.gov,gawor@mcs.anl.gov,05/Aug/08 20:35,23/Oct/08 03:59,14/Mar/19 02:29,21/Aug/08 16:41,2.0.8,,,,,,,,,,,,,,2.1.3,,,,JAX-WS Runtime,,,,,,0,,,,"I have the following SEI:

@WebService(name = ""Greeter"", targetNamespace = ""http://apache.org/greeter_control"")
public interface Greeter {

    @WebMethod
    @WebResult(name = ""responseType"", targetNamespace = ""http://apache.org/greeter_control/types"")
    @RequestWrapper(localName = ""greetMe"", targetNamespace = ""http://apache.org/greeter_control/types"", className = ""org.apache.greeter_control.types.GreetMe"")
    @ResponseWrapper(localName = ""greetMeResponse"", targetNamespace = ""http://apache.org/greeter_control/types"", className = ""org.apache.greeter_control.types.GreetMeResponse"")
    public String greetMe(
        @WebParam(name = ""requestType"", targetNamespace = ""http://apache.org/greeter_control/types"")
        String requestType);

}

?wsdl request on a service that implements this SEI contains the following schema:

<xsd:schema attributeFormDefault=""unqualified"" elementFormDefault=""unqualified"" targetNamespace=""http://apache.org/greeter_control/types"" xmlns=""http://apache.org/greeter_control/types"" xmlns:tns=""http://apache.org/greeter_control"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">
<import namespace=""http://apache.org/greeter_control"" xmlns=""http://www.w3.org/2001/XMLSchema"" />
    <xsd:element name=""greetMe"" type=""greetMe"" />
    <xsd:complexType name=""greetMe"">
        <xsd:sequence>
            <xsd:element minOccurs=""0"" name=""requestType"" type=""xsd:string"" />
        </xsd:sequence>
    </xsd:complexType>
    <xsd:element name=""greetMeResponse"" type=""greetMeResponse"" />
    <xsd:complexType name=""greetMeResponse"">
        <xsd:sequence>
            <xsd:element minOccurs=""0"" name=""responseType"" type=""xsd:string"" />
        </xsd:sequence>
    </xsd:complexType>
</xsd:schema>

Notice, the elementFormDefault=""unqualified"" attribute on the schema. That means that the requestType and responseType elements are unqualified in the schema. However, the annotation defines explicit namespaces for these elements.

When actaully invoking the service, the service will expect the requestType element to be unqualified. If the requestType element is qualified on the wire, the ""requestType"" parameter in Java code will be passed as null.
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112517,,,2008-08-05 20:35:16.0,,,,,,0|i1472v:,232610,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SoapPreProtocolOutInterceptor overrides SoapActionOutInterceptor ,CXF-1733,12401720,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,imanrahmati,imanrahmati,05/Aug/08 18:36,18/Aug/08 18:26,14/Mar/19 02:29,06/Aug/08 13:09,2.1.1,,,,,,,,,,,,,,2.0.9,2.1.2,,,Soap Binding,,,,,,0,,,,"SoapActionOutInterceptor appends "";action=blaBla"" to the content-type header :

            String ct = (String) message.get(Message.CONTENT_TYPE);
           
            if (ct.indexOf(""action=\"""") == -1) {
                ct = new StringBuilder().append(ct)
                    .append(""; action="").append(action).toString();
                message.put(Message.CONTENT_TYPE, ct);
            }

where after that SoapPreProtocolOutInterceptor resets it to the string without the action :

        message.put(Message.CONTENT_TYPE, soapVersion.getContentType());",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112515,,,2008-08-05 18:36:38.0,,,,,,0|i0v3cv:,179517,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"RFSB NPE for some sort of confusion on a return type caused by Aegis, maybe",CXF-1732,12401521,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,bmargulies,bmargulies,bmargulies,01/Aug/08 23:49,23/Oct/08 03:59,14/Mar/19 02:29,25/Aug/08 01:34,2.1.1,,,,,,,,,,,,,,2.1.3,,,,Aegis Databinding,,,,,,0,,,,"Unignore the test in org.apache.cxf.aegis.client.HeaderTest, and observe the resulting NPE fireworks. Feel free to throw back at me.
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-08-06 13:12:07.435,,,no_permission,,,,,,,,,,,,,112514,,,Mon Aug 25 01:34:52 UTC 2008,,,,,,0|i140hj:,231541,,,,,,,,"06/Aug/08 13:12;dkulp;
This is due to the interface having JAX-WS stuff (the holder specifically), but you are using the simple frontend/aegis.   The simple frontend/aegis has no clue how to map the Holder so it doesn't. 

It PROBABLY shouldn't NPE.   Probably a WARNING or something that states it wasn't mapped or map it to xsd:any or something.

",25/Aug/08 01:34;bmargulies;I improved the error message. I also deleted the test :-) because Aegis has no support whatsoever for soap headers.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unexpected control based on the namespace of the soap:body element,CXF-1731,12401494,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,,stephane_ardouin,stephane_ardouin,01/Aug/08 14:21,13/Nov/09 17:27,14/Mar/19 02:29,28/Oct/09 20:36,2.0.8,,,,,,,,,,,,,,2.2.3,,,,Soap Binding,,,,,,0,,,,"It appears that CXF and/or JAXB interprets the attribute <soap:body namespace> of the WSDL as a control to apply on the namespace.
For a schema without ""elementForm=Qualified"" elements, there shouldn't be such control. 

This ticket is based on the thread ""Different behaviors between Axis and CXF for namespaces"" on 2008/07/29, ending with the following comment of Daniel Kulp :
The namespace on the soap:body thing is really just used for Rpc/ 
Lit.   In that case, the runtime needs to create a new wrapper element  
which is the operation name plus that namespace.   For doc/lit which  
everything is completely controlled by the elements in the namespace, it should be irrelevant.
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-10-28 20:36:47.472,,,no_permission,,Unknown,,,,,,,,,,,112513,,,Wed Oct 28 20:36:47 UTC 2009,,,,,,0|i0v1j3:,179221,,,,,,,,"28/Oct/09 20:36;dkulp;
This was fixed a long time ago.   I just ran the wsdl2java on the wsdl in that thread with and without the namespace in the soap:body and the generated code was identical.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The Exception handling if it is thrown from a RequestHandler is not correct i guess.,CXF-1730,12401426,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,pussinboost,pussinboost,31/Jul/08 17:31,24/Apr/09 21:18,14/Mar/19 02:29,02/Sep/08 20:27,2.1.2,,,,,,,,,,,,,,2.1.2,,,,JAX-RS,,,,,,0,,,,"Hello again

i' ve used an implementation of RequestHandler to perform authentication stuff. So
if the Authentication failed a RuntimeException is thrown.  I've also wrote a ExceptionMapper implementation to transform occurred Exception into Http Status codes. If the RuntimeException from the Authentication was thrown than this is translated to an HTTP 403 status code.

But this Http status code is not send as response. This sends a 200 status code. After a time of debugging i found the code that is responsible for that. The processResponse method of the org.apache.cxf.jaxrs.interceptor.JAXRSOutInterceptor work not correct is guess. Because code with the following code block this methods ends.

OperationResourceInfo operation = (OperationResourceInfo)exchange.get(OperationResourceInfo.class
            .getName());

        if (operation == null) {
            return;
        }

because the operation variable is null. The code after this is responsible to but the Response from the ExceptionMapper class into the message object so that i received a 403 http status code.

I've searched the code again and i found the code block how put the OperationResourceInfo into the Exchange object. That is done by the processRequest method of the org.apache.cxf.jaxrs.interceptor.JAXRSInInterceptor class. But before the OperationResourceInfo object is putted in the registered ResourceHandler are called see the code block below.

 for (ProviderInfo<RequestHandler> sh : shs) {
            Response response = sh.getProvider().handleRequest(message, resource);
            if (response != null) {
                message.getExchange().put(Response.class, response);
                return;
            }
        }

I guess the code how put in the OperationresourceInfo object could be performed before the RequestHandlers are called maybe? 

Or it's forbidden to throw a Runtimeexception inside the RequestHandler ?

I've also tried to return an Response object from the RequestHandler but the effect was the same it never arrives the client. It received also the Response object with http code 200.

The CXF framework is great and very flexible good work. The opportunities to register own code is very great.

Good work.","Windows XP,  jdk1.6, Apache Tomcat 6.0.16",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-07-31 21:47:15.733,,,no_permission,,,,,,,,,,,,,112512,,,Thu Sep 04 13:23:08 UTC 2008,,,,,,0|i0v1sf:,179263,,,,,,,,31/Jul/08 17:45;pussinboost;I changed the code that i mentioned and build cxf 2.1.2 on my local machine new. And now the behavior is what i expected. I received the 403 http status code.,"31/Jul/08 21:47;sergey_beryozkin;Hi, I think I've actually fixed it yesterday - please do the trunk update and give it a go...","31/Jul/08 21:50;sergey_beryozkin;> changed the code that i mentioned

can you just  post the code you changed just in case my update does not work for you ?

Thanks

 ","01/Aug/08 00:10;pussinboost;This was the original code (class org.apache.cxf.jaxrs.interceptor.JAXRSInInterceptor) :

private void processRequest(Message message) {
        RequestPreprocessor rp = 
            ProviderFactory.getInstance().getRequestPreprocessor();
        if (rp != null) {
            rp.preprocess(message, new UriInfoImpl(message, null));
        }
        
        String path = (String)message.get(Message.PATH_INFO);
        String address = (String)message.get(Message.BASE_PATH);
        String httpMethod = (String)message.get(Message.HTTP_REQUEST_METHOD);
        String requestContentType = (String)message.get(Message.CONTENT_TYPE);
        if (requestContentType == null) {
            requestContentType = ""*/*"";
        }
        
        if (address.startsWith(""http"")) {
            int idx = address.indexOf('/', 7);
            if (idx != -1) {
                address = address.substring(idx);
            }
        }

        if (path.startsWith(address)) {
            path = path.substring(address.length());
            if (!path.startsWith(""/"")) {
                path = ""/"" + path;
            }
        }

        if (!path.endsWith(""/"")) {
            path = path + ""/"";
        }
        
        
        //1. Matching target resource class
        Service service = message.getExchange().get(Service.class);
        List<ClassResourceInfo> resources = ((JAXRSServiceImpl)service).getClassResourceInfos();

        MultivaluedMap<String, String> values = new MetadataMap<String, String>();
        ClassResourceInfo resource = JAXRSUtils.selectResourceClass(resources, path, values);
        if (resource == null) {
            org.apache.cxf.common.i18n.Message errorMsg = 
                new org.apache.cxf.common.i18n.Message(""NO_ROOT_EXC"", 
                                                   BUNDLE, 
                                                   path);
            LOG.severe(errorMsg.toString());
            throw new Fault(errorMsg);
        }
        
        List<ProviderInfo<RequestHandler>> shs = 
            ProviderFactory.getInstance().getRequestHandlers();
        for (ProviderInfo<RequestHandler> sh : shs) {
            Response response = sh.getProvider().handleRequest(message, resource);
            if (response != null) {
                message.getExchange().put(Response.class, response);
                return;
            }
        }
        
        String acceptTypes = (String)message.get(Message.ACCEPT_CONTENT_TYPE);
        if (acceptTypes == null) {
            acceptTypes = ""*/*"";
        }
        
        List<MediaType> acceptContentTypes = JAXRSUtils.sortMediaTypes(acceptTypes);
        message.getExchange().put(Message.ACCEPT_CONTENT_TYPE, acceptContentTypes);
        message.getExchange().put(ROOT_RESOURCE_CLASS, resource);
        
        LOG.fine(""Request path is: "" + path);
        LOG.fine(""Request HTTP method is: "" + httpMethod);
        LOG.fine(""Request contentType is: "" + requestContentType);
        LOG.fine(""Accept contentType is: "" + acceptTypes);
        
        
        OperationResourceInfo ori = 
            JAXRSUtils.findTargetMethod(resource, values.getFirst(URITemplate.FINAL_MATCH_GROUP), 
                                       httpMethod, values, requestContentType, acceptContentTypes);

        if (ori == null) {
            org.apache.cxf.common.i18n.Message errorMsg = 
                new org.apache.cxf.common.i18n.Message(""NO_OP_EXC"", 
                                                   BUNDLE, 
                                                   path,
                                                   requestContentType,
                                                   acceptTypes);
            LOG.severe(errorMsg.toString());
            throw new Fault(errorMsg);
        }
        LOG.fine(""Found operation: "" + ori.getMethodToInvoke().getName());
        
        message.getExchange().put(OperationResourceInfo.class, ori);
        message.put(RELATIVE_PATH, values.getFirst(URITemplate.FINAL_MATCH_GROUP));
        message.put(URITemplate.TEMPLATE_PARAMETERS, values);
      
        //2. Process parameters
        List<Object> params = JAXRSUtils
            .processParameters(ori, values, message);

        message.setContent(List.class, params);
    }","01/Aug/08 00:11;pussinboost;And i moved the resolving of the OperationResourceInfo  before the Request Hadnler's are invoked.
look here:

private void processRequest(Message message) {
        RequestPreprocessor rp = 
            ProviderFactory.getInstance().getRequestPreprocessor();
        if (rp != null) {
            rp.preprocess(message, new UriInfoImpl(message, null));
        }
        
        String path = (String)message.get(Message.PATH_INFO);
        String address = (String)message.get(Message.BASE_PATH);
        String httpMethod = (String)message.get(Message.HTTP_REQUEST_METHOD);
        String requestContentType = (String)message.get(Message.CONTENT_TYPE);
        if (requestContentType == null) {
            requestContentType = ""*/*"";
        }
        
        if (address.startsWith(""http"")) {
            int idx = address.indexOf('/', 7);
            if (idx != -1) {
                address = address.substring(idx);
            }
        }

        if (path.startsWith(address)) {
            path = path.substring(address.length());
            if (!path.startsWith(""/"")) {
                path = ""/"" + path;
            }
        }

        if (!path.endsWith(""/"")) {
            path = path + ""/"";
        }
        
        
        //1. Matching target resource class
        Service service = message.getExchange().get(Service.class);
        List<ClassResourceInfo> resources = ((JAXRSServiceImpl)service).getClassResourceInfos();

        MultivaluedMap<String, String> values = new MetadataMap<String, String>();
        ClassResourceInfo resource = JAXRSUtils.selectResourceClass(resources, path, values);
        if (resource == null) {
            org.apache.cxf.common.i18n.Message errorMsg = 
                new org.apache.cxf.common.i18n.Message(""NO_ROOT_EXC"", 
                                                   BUNDLE, 
                                                   path);
            LOG.severe(errorMsg.toString());
            throw new Fault(errorMsg);
        }
        
        
        String acceptTypes = (String)message.get(Message.ACCEPT_CONTENT_TYPE);
        if (acceptTypes == null) {
            acceptTypes = ""*/*"";
        }
        
        List<MediaType> acceptContentTypes = JAXRSUtils.sortMediaTypes(acceptTypes);
        message.getExchange().put(Message.ACCEPT_CONTENT_TYPE, acceptContentTypes);
        message.getExchange().put(ROOT_RESOURCE_CLASS, resource);
        
        LOG.fine(""Request path is: "" + path);
        LOG.fine(""Request HTTP method is: "" + httpMethod);
        LOG.fine(""Request contentType is: "" + requestContentType);
        LOG.fine(""Accept contentType is: "" + acceptTypes);
        
        
        OperationResourceInfo ori = 
            JAXRSUtils.findTargetMethod(resource, values.getFirst(URITemplate.FINAL_MATCH_GROUP), 
                                       httpMethod, values, requestContentType, acceptContentTypes);

        if (ori == null) {
            org.apache.cxf.common.i18n.Message errorMsg = 
                new org.apache.cxf.common.i18n.Message(""NO_OP_EXC"", 
                                                   BUNDLE, 
                                                   path,
                                                   requestContentType,
                                                   acceptTypes);
            LOG.severe(errorMsg.toString());
            throw new Fault(errorMsg);
        }
        LOG.fine(""Found operation: "" + ori.getMethodToInvoke().getName());
        
        message.getExchange().put(OperationResourceInfo.class, ori);
        message.put(RELATIVE_PATH, values.getFirst(URITemplate.FINAL_MATCH_GROUP));
        message.put(URITemplate.TEMPLATE_PARAMETERS, values);
        
        List<ProviderInfo<RequestHandler>> shs = 
            ProviderFactory.getInstance().getRequestHandlers();
        for (ProviderInfo<RequestHandler> sh : shs) {
            Response response = sh.getProvider().handleRequest(message, resource);
            if (response != null) {
                message.getExchange().put(Response.class, response);
                return;
            }
        }
      
        //2. Process parameters
        List<Object> params = JAXRSUtils
            .processParameters(ori, values, message);

        message.setContent(List.class, params);
    }","01/Aug/08 22:12;sergey_beryozkin;Frank - did you try the latest trunk ? I did some fix there to make sure 404 is returned if no root resource class is found and I had to ensure the exceptions thrown at the input path could be mapped and processed properly.

I'm on holidays till the end of August","02/Aug/08 04:22;pussinboost;Hello Sergey okay i will try it.  I'am also on vacation but i will take the time tomorrow to check the trunk version. 
Great work and thanks for your fast responses.

Enjoy your holiday.","05/Aug/08 07:37;pussinboost;Hello, yesterday I tried the latest trunk version and i couldn't checked if this bug was fixed or not. Because
the following Exception was thrown.

java.lang.NullPointerException
	at org.apache.cxf.jaxrs.utils.JAXRSUtils.intersectMimeTypes(JAXRSUtils.java:709)
	at org.apache.cxf.jaxrs.interceptor.JAXRSOutInterceptor.computeAvailableContentTypes(JAXRSOutInterceptor.java:200)
	at org.apache.cxf.jaxrs.interceptor.JAXRSOutInterceptor.processResponse(JAXRSOutInterceptor.java:113)
	at org.apache.cxf.jaxrs.interceptor.JAXRSOutInterceptor.handleMessage(JAXRSOutInterceptor.java:61)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:221)
	at org.apache.cxf.interceptor.OutgoingChainInterceptor.handleMessage(OutgoingChainInterceptor.java:74)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:221)
	at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:78)
	at org.apache.cxf.transport.servlet.ServletDestination.invoke(ServletDestination.java:92)
	at org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:283)
	at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:128)
	at org.apache.cxf.transport.servlet.AbstractCXFServlet.invoke(AbstractCXFServlet.java:174)
	at org.apache.cxf.transport.servlet.AbstractCXFServlet.doGet(AbstractCXFServlet.java:156)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:690)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:803)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:175)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:286)
	at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:844)
	at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583)
	at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:447)
	at java.lang.Thread.run(Thread.java:619)
","06/Aug/08 13:42;dkulp;

I added an NPE guard there.  Just committed to trunk. 
","07/Aug/08 15:13;pussinboost;Okay i updated my local cxf project and now i got something new for you.

java.lang.NullPointerException
        at org.apache.cxf.jaxrs.interceptor.JAXRSOutInterceptor.processResponse(JAXRSOutInterceptor.java:150)
        at org.apache.cxf.jaxrs.interceptor.JAXRSOutInterceptor.handleMessage(JAXRSOutInterceptor.java:61)
        at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:221)
        at org.apache.cxf.interceptor.OutgoingChainInterceptor.handleMessage(OutgoingChainInterceptor.java:74)
        at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:221)
        at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:78)
        at org.apache.cxf.transport.servlet.ServletDestination.invoke(ServletDestination.java:92)
        at org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:283)
        at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:128)
        at org.apache.cxf.transport.servlet.AbstractCXFServlet.invoke(AbstractCXFServlet.java:174)
        at org.apache.cxf.transport.servlet.AbstractCXFServlet.doGet(AbstractCXFServlet.java:156)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:690)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:803)
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)
        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:175)
        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128)
        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)
        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)
        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:286)
        at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:844)
        at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583)
        at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:447)
        at java.lang.Thread.run(Thread.java:619)

I guess there is a deeper problem with that. With my local patched version of cxf 2.1.2 that i mentioned before all works fine and i wrote no new code i only change the order of the code a little bit. I looked in the trunk source code and what i see was that in the processResponse method of the JAXRSOutInterceptor class you put a lot of if checks for the OperationResourceInfo local variable. Because in my scenario see above this variable was never set.

So let me give you an advice set the OperationResourceInfo varaiable before the RequestHandler are called. With this solution the lot of null checks you are now performed not needed.

Last but not least you have forgot one of this null checks.

writer.writeTo(responseObj, targetType, invoked.getGenericReturnType(), 
                               invoked != null ? invoked.getAnnotations() : new Annotation[]{}, 
                               responseType, 
                               response.getMetadata(), 
                               out);

This line of code cause the trouble because the invoked variable is null and this code fragment invoked.getGenericReturnType() cause the NullPointerException.

Another thing about the RequestHandler feature is that i want used this possibility to write Authentication code. To do that i need the OperationResourceInfo variable setted in the Message instance. So please say if this is a bad idear.

Thanks for your attention","09/Aug/08 00:42;dkulp;OK, I put another fix in place to try and make sure the operationResourceINfo thing is filled in.   Let me know how that works out.
","12/Aug/08 08:21;pussinboost;I tried again and it's not working. But I think we are on the right way. I take a look into the source code and I see they are a misunderstanding. The following line of source code:

OperationResourceInfo ori = 
                    JAXRSUtils.findTargetMethod(resource, values.getFirst(URITemplate.FINAL_MATCH_GROUP), 
                                               httpMethod, values, requestContentType, acceptContentTypes);
                message.getExchange().put(OperationResourceInfo.class, ori);

has to be performed before the following loop starts

for (ProviderInfo<RequestHandler> sh : shs) {
            Response response = sh.getProvider().handleRequest(message, resource);
....
}

This code snippets are from the JAXRSInInterceptor class.

So good luck.","22/Aug/08 16:30;sergey_beryozkin;Frank, can you please attach a test case (or just some sample handlers) ?

What you suggest won't work - the exception may get thrown much earlier before the operation resource info has been resolved - for ex, at the point when a root resource is checked.","27/Aug/08 12:17;pussinboost;Hello again,

how was your holiday?

First of all now it works. I've downloaded the 2.1.2 version and now it works. So thanks for your help.

Here a little piece of sample code for my RequestHandler implementation.

import javax.ws.rs.core.Response;

import org.apache.cxf.jaxrs.ext.RequestHandler;
import org.apache.cxf.jaxrs.model.ClassResourceInfo;
import org.apache.cxf.jaxrs.model.OperationResourceInfo;
import org.apache.cxf.message.Message;

public class TestRequestHanler implements RequestHandler {

    public Response handleRequest(Message message, ClassResourceInfo resourceClass) {

        OperationResourceInfo ori = message.getExchange().get(OperationResourceInfo.class);
        // no resource method was found for incoming request
        if (ori == null) {
            return null;
        }
        // do some stuff with the ori variable get meta information something like that
        
        throw new RuntimeException(""access denied"");
//        return null;
    }
}
go on with your great work.","02/Sep/08 20:27;dkulp;
Confirmed fixed in 2.1.2.","04/Sep/08 13:23;sergey_beryozkin;Hi Frank

> how was your holiday? 
thanks, it was good :-)

> First of all now it works. I've downloaded the 2.1.2 version and now it works. So thanks for your help.

Unfortunately, even though it works, the fact that your filter depends on OperationResourceInfo be set
in the message makes your filter a bit brittle.

The problem is that selecting OperationResourceInfo before filters are invoked brings the necessity to reselect OperationResourceInfo after every individual filter is invoked - as an individual filter may have the Accept header value updated in the message - with this value affecting the selection of the OperationResourceInfo in the first place. In other words, you reckon that OperationResourceInfo you're dealing with in the filter represents the method which will be invoked upon - but it might not be the case - well at least in  the looser environment.

I feel it would be better to do this kind of authentication using Spring AOP.  This current dependency is a bit brittle - I may need to refactor for 2.1.3 it again (basically revert some of the changes that were needed for this JIRA be solved) - unless we find a smarter solution
",,,,,,,,,,,,,,,
Aegis service customizations don't work,CXF-1729,12401424,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,bmargulies,bmargulies,bmargulies,31/Jul/08 17:06,24/Apr/09 21:16,14/Mar/19 02:29,25/Aug/08 01:07,2.0,2.0.1,2.0.2,2.0.3,2.0.4,2.0.5,2.0.6,2.0.7,2.0.8,2.1,2.1.1,,,,2.2,,,,Aegis Databinding,,,,,,1,,,,"In XFire, Aegis supported the use of .aegis.xml files to configure the SEI. This allowed for parameter names, nillability, etc.

The port to CXF lost this, since the service factory system does not ask the data binding for advice on this subject.

Users want it back.
",,604800,604800,,0%,604800,604800,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,Moderate,,,,,,,,,,,112511,,,Mon Aug 25 01:07:52 UTC 2008,,,,,,0|i1ach3:,268487,,,,,,,,25/Aug/08 01:07;bmargulies;Code added to the databinding to reflect the type properties onto the parts.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
wsdl2java does not generate properly formatted javadoc when jaxws:javadoc tags are used,CXF-1728,12401411,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,edweip3,edweip3,31/Jul/08 14:37,18/Aug/08 18:26,14/Mar/19 02:29,06/Aug/08 15:23,2.1.1,,,,,,,,,,,,,,2.1.2,,,,Tooling,,,,,,0,,,,"The doc generated doc comments should begin with ""/**"" with two asterisks instead of one.

When using jaxws:javadoc at the package level, the doc comments should be added to a file called package.html instead of top of every single class that belongs to that package.

When using jaxws:javadoc at the class level, the doc comments are incorrect.  It still contained the generic javadoc comments.
/**
 * This class was generated by Apache CXF 2.1.1
 * Thu Jul 31 10:30:04 EDT 2008
 * Generated source version: 2.1.1
 * 
 */
 
 /*
  * These are the actual doc comments for this class
  */",Windows xp,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-08-06 15:23:00.017,,,no_permission,,,,,,,,,,,,,112510,,,Wed Aug 06 15:23:00 UTC 2008,,,,,,0|i0v3c7:,179514,,,,,,,,"06/Aug/08 15:23;dkulp;
Fixed.

Also stopped it from generating empty javadoc if no jaxws:javadoc stuff is used.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
I guess there is an error in the ProviderFactory of jaxrs component.,CXF-1727,12401329,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,,pussinboost,pussinboost,30/Jul/08 14:51,18/Aug/08 18:26,14/Mar/19 02:29,30/Jul/08 22:07,2.1.2,,,,,,,,,,,,,,2.1.2,,,,JAX-RS,,,,,,0,,,,"I thin in the method createExceptionMapper of the org.apache.cxf.jaxrs.provider.ProviderFactory class is an error.
The following code block is wrong i guess:

if (exceptionType.isAssignableFrom((Class<?>)args[i])) {
   InjectionUtils.injectContextFields(em.getProvider(), em, m);
   InjectionUtils.injectContextMethods(em.getProvider(), em, m);
   return em.getProvider();
}

The if doesn't work correctly. I wrote a ExceptionMapper<Exception> for the general Exception class. And i tested this ExceptionMapper with a throw of a IOException and it was not called. So I decided to debug the ExceptionMapper staff and i found that the if in the code block a above is false.

So i wrote a little test to understand this.

System.out.println(IOException.class.isAssignableFrom(Exception.class));
System.out.println(Exception.class.isAssignableFrom(IOException.class));

The first line of code is what your if does and if you check this you will see it returns false. But Exception is the super class
of IOException how could it possible. The answer is easy because the isAssignableFrom method check if the 
passed class parameter is the same or a child of the class on which isAssignableForm was called. So The bug fix will be the second line they return true. 

Please change the wrong code block the right order of parameter will be

if (((Class<?>)args[i]).isAssignableFrom(exceptionType))

Thank for your attention
","Windowx XP, Apache Tomcat and i used spring configuration",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-07-30 15:51:48.686,,,no_permission,,,,,,,,,,,,,112509,,,Wed Jul 30 22:07:42 UTC 2008,,,,,,0|i0v14n:,179156,,,,,,,,"30/Jul/08 15:51;sergey_beryozkin;Thanks for it, I consider your suggestion be a patch. I'm planning to do a merge with few minor fixes very soon this week and I'll include this fix.","30/Jul/08 18:19;pussinboost;Before i can submit a patch i will try if me suggestion is right. I fixed this and build a new cxf 2.1.2 version local. After that i will see if i have the time to submit the patch tomorrow.

Can you give my advices how could i submit a patch here or a link.

By the try to build the cxf 2.1.2 source with my patch i end with the error message below

[INFO] FastInfosetting 0 resource
[INFO] [cxf-common-xsd:xsdtojava {execution: generate-sources}]
[ERROR] src-resolve: Cannot resolve the name 'wsdl:tExtensibilityElement' to a(n) 'type definition' component.
  line 32 of file:/C:/jzx/sodtware/apache-cxf-2.1.2-SNAPSHOT-src/rt/bindings/xml/src/main/resources/schemas/wsdl/xml-binding.xsd

Failed to parse a schema.
org.apache.tools.ant.ExitException: ExitException: status -1
        at org.apache.tools.ant.util.optional.NoExitSecurityManager.checkExit(NoExitSecurityManager.java:38)
        at java.lang.Runtime.exit(Runtime.java:88)
        at java.lang.System.exit(System.java:906)
        at com.sun.tools.xjc.Driver._main(Driver.java:116)
        at com.sun.tools.xjc.Driver.access$000(Driver.java:74)
        at com.sun.tools.xjc.Driver$1.run(Driver.java:96)
[INFO] ------------------------------------------------------------------------
[ERROR] BUILD ERROR
[INFO] ------------------------------------------------------------------------
[INFO] ExitException: status -1

[INFO] ------------------------------------------------------------------------
[INFO] For more information, run Maven with the -e switch
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 2 minutes 26 seconds
[INFO] Finished at: Wed Jul 30 20:18:27 CEST 2008
[INFO] Final Memory: 60M/916M
[INFO] ------------------------------------------------------------------------

So today i couldn't check if the bug fix works.

Run the maven command
mvn -Pfastinstall doesn't work also the same error occurred.
Any help.","30/Jul/08 19:45;sergey_beryozkin;Sorry, I meant I'd myself change the code as you suggested - I'll do it this evening and try the tests. Because you explained what  the problem was and the change was minimal I thought it was sufficient to treat your initial entry  in this JIRA as an actual patch...

Perhaps Dan or someone else can help you with the Maven issue - building CXF locally would help in case you spot some other problems and decide to submit a patch :-)

Cheers, Sergey ","30/Jul/08 19:55;pussinboost;Okay i got the point and thanks for your fast feedback.

The maven build was successful now. I read the Building CXF section again and try a little bit with maven and now it works. Sorry about the build panic from my side. I'am not so familiar with maven. So great job of yours.","30/Jul/08 22:07;sergey_beryozkin;This is fixed now, thanks",,,,,,,,,,,,,,,,,,,,,,,,,,
Upgrade from CXF 2.1 to CXF 2.1.1 results in two BouncyCastle JARs being used,CXF-1726,12401207,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,gmazza,gmazza,29/Jul/08 00:59,18/Aug/08 18:26,14/Mar/19 02:29,12/Aug/08 15:53,,,,,,,,,,,,,,,2.1.2,,,,,,,,,,0,,,,"Updating this dependency:

<dependency>
   <groupId>org.apache.cxf</groupId>
   <artifactId>cxf-rt-ws-security</artifactId>
   <version>${cxf.version}</version>
</dependency>

From CXF 2.1 to 2.1.1 results into two Bouncy Castle jars being placed into the web service provider's WAR-- the usual bcprov-jdk14-136.jar from CXF 2.1 and bcprov-jdk13-132.jar.  I don't know why both are being loaded--maybe OpenSAML (which is not in 2.1) is the culprit, or xmlsec's upgrade from 1.3 to 1.4 or WSS4J's from 1.5.2 to 1.5.4--but either of the latter two causing this is rather doubtful.

(It might be nice also to upgrade to BC's 1.5 or 1.6 library at this time.)

Test case:  Download my DoubleIt sample[1], place this dependency in the trunk/pom.xml, and from that run ""mvn clean install"" -- you'll see the two BC libs in the service-war/target folder.

[1] http://glen.mazza.blog.googlepages.com/20080418DoubleIt.zip
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-08-11 19:32:54.865,,,no_permission,,Novice,,,,,,,,,,,112508,,,Tue Aug 12 03:07:56 UTC 2008,,,,,,0|i1achb:,268488,,,,,,,,"11/Aug/08 19:32;dkulp;Glen,

I just tried this and I'm not seeing a duplicate jar with either 2.1.1 or 2.1.2-SNAPSHOT.


dkulp@dilbert ~/tmp/DoubleIt/trunk/service-war/target/doubleit/WEB-INF/lib $ ls
FastInfoset-1.2.2.jar                       geronimo-stax-api_1.0_spec-1.0.1.jar
XmlSchema-1.4.2.jar                         geronimo-ws-metadata_2.0_spec-1.1.2.jar
activation-1.1.jar                          jaxb-api-2.1.jar
aopalliance-1.0.jar                         jaxb-impl-2.1.7.jar
asm-2.2.3.jar                               jaxb-xjc-2.1.7.jar
avalon-framework-4.1.3.jar                  log4j-1.2.12.jar
bcprov-jdk14-136.jar                        logkit-1.0.1.jar
commons-lang-2.4.jar                        neethi-2.0.4.jar
commons-logging-1.1.jar                     opensaml-1.1.jar
cxf-api-2.1.2-SNAPSHOT.jar                  saaj-api-1.3.jar
cxf-common-schemas-2.1.2-SNAPSHOT.jar       saaj-impl-1.3.jar
cxf-common-utilities-2.1.2-SNAPSHOT.jar     servlet-api-2.3.jar
cxf-rt-bindings-soap-2.1.2-SNAPSHOT.jar     spring-beans-2.0.8.jar
cxf-rt-bindings-xml-2.1.2-SNAPSHOT.jar      spring-context-2.0.8.jar
cxf-rt-core-2.1.2-SNAPSHOT.jar              spring-core-2.0.8.jar
cxf-rt-databinding-jaxb-2.1.2-SNAPSHOT.jar  spring-web-2.0.8.jar
cxf-rt-frontend-jaxws-2.1.2-SNAPSHOT.jar    stax-api-1.0-2.jar
cxf-rt-frontend-simple-2.1.2-SNAPSHOT.jar   velocity-1.4.jar
cxf-rt-transports-http-2.1.2-SNAPSHOT.jar   velocity-dep-1.4.jar
cxf-rt-ws-addr-2.1.2-SNAPSHOT.jar           wsdl4j-1.6.2.jar
cxf-rt-ws-security-2.1.2-SNAPSHOT.jar       wss4j-1.5.4.jar
cxf-tools-common-2.1.2-SNAPSHOT.jar         wstx-asl-3.2.4.jar
geronimo-activation_1.1_spec-1.0.2.jar      xalan-2.7.0.jar
geronimo-annotation_1.0_spec-1.1.1.jar      xml-resolver-1.2.jar
geronimo-javamail_1.4_spec-1.3.jar          xmlsec-1.4.0.jar
geronimo-jaxws_2.1_spec-1.0.jar


Is it possible you didn't do a ""clean"" between switching from 2.1 to 2.1.1?

","12/Aug/08 01:54;gmazza;No--I'm still getting two jars in /WEB-INF/lib -- bcprov-jdk13-132.jar and bcprov-jdk14-136.jar.  And it isn't just me[1].  I nearly always run ""mvn clean install"", and certainly did below when duplicating the issue.  (I don't think that would be it anyway, because 2.1 doesn't import BC 1.3 -- it uses only 1.4 anyway.)

My exact steps (I'm using Ubuntu, if it matters):

1.) Download and extract the zip file.
2.) In the DoubleIt/trunk/pom.xml, add the dependency listed I gave earlier into the *CXF Profile's* dependency section (not the Metro profile)
3.) from the DoubleIt/trunk folder, run ""mvn clean install""
4.) Navigate to the service-war/target/doubleit.war, and open up the ""lib"" folder.  You should see those two files.

Glen

[1] http://tinyurl.com/596h2v","12/Aug/08 03:07;dkulp;
Looks like it's a java6 thing.  Doesn't appear with java 5, but does with java 6.   :-(

",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Don't create empty <details/> elements in SOAP fault messages.,CXF-1725,12401203,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,dkulp,gmazza,gmazza,29/Jul/08 00:26,04/Dec/09 22:34,14/Mar/19 02:29,16/Oct/09 20:01,,,,,,,,,,,,,,,2.2.5,,,,Soap Binding,,,,,,0,,,,"Make sure no empty details elements are created, have hasDetails() return false if no details element.

See: http://www.nabble.com/Creation-of-empty-detail-elements-for-SOAPFaults-td18667733.html
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112507,,,2008-07-29 00:26:49.0,,,,,,0|i14e2v:,233744,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Nullpointer error in DOMUtils,CXF-1724,12401120,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,chris@die-schneider.net,chris@die-schneider.net,27/Jul/08 20:03,18/Aug/08 18:26,14/Mar/19 02:29,06/Aug/08 15:09,2.1.1,,,,,,,,,,,,,,2.0.9,2.1.2,,,,,,,,,0,,,,"When I set endpointName to a simple string without prefix in an endpoint definition I get a Nullpointer exception in DOMUtils. This is probably easy to fix.

    public static String getNamespace(Element el, String pre) {
        NamedNodeMap atts = el.getAttributes();
        for (int i = 0; i < atts.getLength(); i++) {
            Node node = atts.item(i);
            String name = node.getLocalName();
            String pre2 = node.getPrefix();
            if (pre.equals(name) && ""xmlns"".equals(pre2)) {
                return node.getNodeValue();
            } else if (pre.length() == 0 && ""xmlns"".equals(name) && pre2.length() == 0) {  <======= The error happens at pre2.length when pre2 is null
                return node.getNodeValue();
            }
        }

I have attached the stack trace:

Exception in thread ""main"" org.springframework.beans.factory.BeanDefinitionStoreException: Unexpected exception parsing XML document from class path resource [spring-config/server-applicationContext.xml]; nested exception is java.lang.NullPointerException
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:420)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:342)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:310)
	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:143)
	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:178)
	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:149)
	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:212)
	at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:113)
	at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:80)
	at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:123)
	at org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:423)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:353)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:139)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:93)
	at com.mycompany.examples.customerrelations.ServiceServer.main(ServiceServer.java:15)
Caused by: java.lang.NullPointerException
	at org.apache.cxf.helpers.DOMUtils.getNamespace(DOMUtils.java:397)
	at org.apache.cxf.configuration.spring.AbstractBeanDefinitionParser.parseQName(AbstractBeanDefinitionParser.java:352)
	at org.apache.cxf.jaxws.spring.EndpointDefinitionParser.doParse(EndpointDefinitionParser.java:85)
	at org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser.parseInternal(AbstractSingleBeanDefinitionParser.java:84)
	at org.springframework.beans.factory.xml.AbstractBeanDefinitionParser.parse(AbstractBeanDefinitionParser.java:56)
	at org.springframework.beans.factory.xml.NamespaceHandlerSupport.parse(NamespaceHandlerSupport.java:69)
	at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1255)
	at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1245)
	at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:135)
	at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.registerBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:92)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:507)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:398)
	... 14 more
",,,,,,,,,,,,,,,,,28/Jul/08 08:46;daveel;CXF-1724.diff;https://issues.apache.org/jira/secure/attachment/12387009/CXF-1724.diff,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2008-07-28 08:46:31.892,,,no_permission,,,,,,,,,,,,,112506,,,Wed Aug 06 15:09:07 UTC 2008,,,,,,0|i1achj:,268489,,,,,,,,"28/Jul/08 08:46;daveel;Added a null check to the part of code in question. Not sure that a blank string will ever be returned but i coded to accept with null or a blank string. Added some javadoc and renamed most of the variables so they make more sense to me.

Dave","06/Aug/08 15:09;dkulp;
Patch applied.

(Although my comment in the commit message was wrong.  Patch from Dave Leatherdale)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
wsdl2java generates errorneous code,CXF-1723,12400991,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,masc,masc,25/Jul/08 08:42,18/Aug/08 18:26,14/Mar/19 02:29,06/Aug/08 16:31,2.1.1,,,,,,,,,,,,,,2.1.2,,,,Tooling,,,,,,0,,,,"Code generation from ""test.wsdl"" results in errorneous java code ""DeliverFaultMessage.java"" (without exceptions/error/warnings of wsdl2java).

---- test.wsdl ---- START
<wsdl:definitions name=""test""
    xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" 
    xmlns:soap=""http://schemas.xmlsoap.org/wsdl/soap/""
    xmlns:wsdl=""http://schemas.xmlsoap.org/wsdl/"" 
    xmlns:types=""http://www.abc.com/mb/schema"" 
    xmlns:tns=""http://www.abc.com/mb""
    xmlns:mime=""http://schemas.xmlsoap.org/wsdl/mime/"" 
    xmlns:xmime=""http://www.w3.org/2005/05/xmlmime"" 
    xmlns:SCXSD=""http://www.abc.com/mb/schema.ws""
    targetNamespace=""http://www.abc.com/mb"">

	<wsdl:types>
		<schema xmlns=""http://www.w3.org/2001/XMLSchema"" xmlns:xmime=""http://www.w3.org/2005/05/xmlmime"" targetNamespace=""http://www.abc.com/mb/schema"" elementFormDefault=""qualified"">
			<xsd:element name=""data"" type=""xsd:string""/>
			<xsd:element name=""comment"" type=""xsd:string""/>
        </schema>
    </wsdl:types>

    <wsdl:message name=""DeliverRequestMessage"">
    	<wsdl:part name=""header"" element=""types:data""/>
    	<wsdl:part name=""body"" element=""types:data""/>
    </wsdl:message>

    <wsdl:message name=""DeliverResponseMessage"">
    	<wsdl:part name=""header"" element=""types:data""/>
    	<wsdl:part name=""body"" element=""types:data""/>
    </wsdl:message>

    <wsdl:message name=""DeliverFaultMessage"">
    	<wsdl:part name=""comment1"" element=""types:comment""/>
    	<wsdl:part name=""comment2"" element=""types:comment""/>
    </wsdl:message>
    
    <wsdl:portType name=""DeliverPortType"">
        <wsdl:operation name=""Deliver"">
            <wsdl:input message=""tns:DeliverRequestMessage""/>
            <wsdl:output message=""tns:DeliverResponseMessage""/>
            <wsdl:fault name=""runtimeexception"" message=""tns:DeliverFaultMessage""/>
        </wsdl:operation>
    </wsdl:portType>
    
    <wsdl:binding name=""DeliveryBinding"" type=""tns:DeliverPortType"">
        <soap:binding style=""document"" transport=""http://schemas.xmlsoap.org/soap/http""/>
        <wsdl:operation name=""Deliver"">
            <soap:operation soapAction=""""/>
            <wsdl:input>
            	<soap:header message=""tns:DeliverRequestMessage"" part=""header"" use=""literal""/>
                <soap:body use=""literal"" parts=""body""/>
            </wsdl:input>
            <wsdl:output>
            	<soap:header message=""tns:DeliverResponseMessage"" part=""header"" use=""literal""/>
                <soap:body use=""literal"" parts=""body""/>
            </wsdl:output>
            <wsdl:fault name=""runtimeexception"">
            	<soap:fault name=""runtimeexception"" use=""literal""/>
            </wsdl:fault>
        </wsdl:operation>
    </wsdl:binding>

    <wsdl:service name=""DeliverService"">
        <wsdl:port name=""DeliverPort"" binding=""tns:DeliveryBinding"">
            <soap:address location=""http://localhost:1001/deliver""/>
        </wsdl:port>
    </wsdl:service>

</wsdl:definitions>
---- test.wsdl ---- END


","Windows XP 5.1, java 1.5.0_12",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-07-25 09:41:00.414,,,no_permission,,,,,,,,,,,,,112505,,,Wed Aug 06 16:31:47 UTC 2008,,,,,,0|i1achr:,268490,,,,,,,,"25/Jul/08 09:41;gmazza;Apache CXF doesn't normally compile during generation, so you won't see the error until after you manually compile.  But there is a CXF option (check our WSDL2Java page) for compiling immediately after JAX-WS artifact generation.  For me, I saw plenty of compilation errors:

/work/workspace/MyTest/trunk/service-war/target/generated/com/abc/mb/DeliverFaultMessage.java:[48,29] comment is already defined in com.abc.mb.DeliverFaultMessage

/work/workspace/MyTest/trunk/service-war/target/generated/com/abc/mb/DeliverFaultMessage.java:[50,11] DeliverFaultMessage() is already defined in com.abc.mb.DeliverFaultMessage

/work/workspace/MyTest/trunk/service-war/target/generated/com/abc/mb/DeliverFaultMessage.java:[54,11] DeliverFaultMessage(java.lang.String) is already defined in com.abc.mb.DeliverFaultMessage

/work/workspace/MyTest/trunk/service-war/target/generated/com/abc/mb/DeliverFaultMessage.java:[58,11] DeliverFaultMessage(java.lang.String,java.lang.Throwable) is already defined in com.abc.mb.DeliverFaultMessage

/work/workspace/MyTest/trunk/service-war/target/generated/com/abc/mb/DeliverFaultMessage.java:[62,11] DeliverFaultMessage(java.lang.String,java.lang.String) is already defined in com.abc.mb.DeliverFaultMessage

/work/workspace/MyTest/trunk/service-war/target/generated/com/abc/mb/DeliverFaultMessage.java:[67,11] DeliverFaultMessage(java.lang.String,java.lang.String,java.lang.Throwable) is already defined in com.abc.mb.DeliverFaultMessage

/work/workspace/MyTest/trunk/service-war/target/generated/com/abc/mb/DeliverFaultMessage.java:[72,28] getFaultInfo() is already defined in com.abc.mb.DeliverFaultMessage

/work/workspace/MyTest/trunk/service-war/target/generated/com/abc/mb/DeliverFaultMessage.java:[15,46] duplicate annotation

To see my setup, download my WSDL-first sample (http://www.jroller.com/gmazza/date/20080417), delete the two Java files within it, replace the contents of DoubleIt.wsdl with your WSDL, and from the DoubleIt/trunk directory just run ""mvn install""--you'll see those errors above.

Glen
",25/Jul/08 11:06;masc;Of course i did the compilation manually and got the exceptions ... but I mean it's a bug if wsdl2java generates errorneous java code - isn't it?,"25/Jul/08 11:13;gmazza;Yeah, I guess a check should be put in.  I don't see this as ""major"" priority though.","25/Jul/08 12:11;gmazza;Just FYI, the Metro error that occurs (halting the creation of any classes):
[ERROR] fault ""runtimeexception"" refers to message ""DeliverFaultMessage"", but the message has more than one parts
  line 29 of file:/work/workspace/MyTest/trunk/service-war/src/main/webapp/WEB-INF/wsdl/DoubleIt.wsdl

Apparently the DeliverFaultMessage should have only one part--but it has two in the example above.  Perhaps that's how this error can be trapped.

Glen","25/Jul/08 12:49;dkulp;

Right.   This is an invalid wsdl.   If it generates invalid code for an invalid wsdl, it's not a super serious bug.   However, it should have trapped the error, displayed a decent message, and then not generated anything.","25/Jul/08 13:33;masc;""This is an invalid wsdl."" ... might be, i'm not in soap/wsdl spec in detail ... but seems as if there is space in <detail></detail> element according to soap11.xsd (perhaps you could give a link to spec?)

  <xs:complexType name=""Fault"" final=""extension"">
    <xs:annotation>
	  <xs:documentation>
	    Fault reporting structure
	  </xs:documentation>
	</xs:annotation>
    <xs:sequence>
      <xs:element name=""faultcode"" type=""xs:QName""/>
      <xs:element name=""faultstring"" type=""xs:string""/>
      <xs:element name=""faultactor"" type=""xs:anyURI"" minOccurs=""0""/>
      <xs:element name=""detail"" type=""tns:detail"" minOccurs=""0""/>      
    </xs:sequence>
  </xs:complexType>","06/Aug/08 15:25;dkulp;

http://www.w3.org/TR/wsdl#_soap:fault

""The fault message MUST have a single part.""",06/Aug/08 15:45;masc;certainly thank you ...,"06/Aug/08 16:31;dkulp;
I added an error check.  It will now print:

WSDLToJava Error: Fault message DeliverFaultMessage has multiple parts which is against WSDL specification.

instead of generating bogus code.
",,,,,,,,,,,,,,,,,,,,,,
CXF does not write out PIs at the root of the WSDL file,CXF-1722,12400958,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,bmargulies,bmargulies,bmargulies,24/Jul/08 22:32,18/Aug/08 18:26,14/Mar/19 02:29,28/Jul/08 18:31,2.0.8,2.0.9,2.1.2,,,,,,,,,,,,2.1.2,,,,Core,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-07-28 14:10:34.928,,,no_permission,,Novice,,,,,,,,,,,112504,,,Mon Jul 28 18:31:40 UTC 2008,,,,,,0|i0syh3:,167062,,,,,,,,24/Jul/08 22:45;bmargulies;Fix made as per Dan's suggestion in StaxUtils.,"28/Jul/08 14:10;dkulp;

Most likely, in those cases, we would be calling writeDocument with the writePrologue falg set to false as it would be encapsulated in a soap message or something that would have already written that.    Most likely, if prologue writing is turned off, we DON'T want to write any PI's either as they would be invalid.   Thus, my suggestion would be to use the old behavior if false and your new code if true.
",28/Jul/08 18:31;bmargulies;I've made Dan's suggested adjustment.,"28/Jul/08 18:31;bmargulies;PIs are now suppressed if we're not writing a prolog.
",,,,,,,,,,,,,,,,,,,,,,,,,,,
Generated WS-Addressing action uses wrong separator for urns,CXF-1721,12400890,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,alisonr,alisonr,24/Jul/08 03:27,18/Aug/08 18:26,14/Mar/19 02:29,11/Aug/08 17:23,2.1.2,,,,,,,,,,,,,,2.0.9,2.1.2,,,WS-* Components,,,,,,0,,,,"According to the Web Services Addressing 1.0 specification the format for an Action is (non-fault case):
[target namespace][delimiter][port type name][delimiter][input|output name]

The following definition of delimiter is supplied:
""is "":"" when the [target namespace] is a URN, otherwise ""/"".""

Source: http://www.w3.org/TR/2006/CR-ws-addr-wsdl-20060529/#defactionwsdl11

I have a WSDL with the following relevant values:
target namespace - urn:xyz/BLAH
port type name - BlahServicePortType
input name - CountStuffRequest

I would expect CXF to generate the action:
urn:xyz/BLAH:BlahServicePortType:CountStuffRequest

However it appears to use a dot ('.') to delimit the fields:
urn:xyz/BLAH.BlahServicePortType.CountStuffRequest

I will dig around the cxf-rt-ws-addr module to see if I can narrow this down further...

","java version ""1.6.0_05""
cxf 2.1.2-SNAPSHOT",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112503,,,Thu Jul 24 07:01:11 UTC 2008,,,,,,0|i0v3db:,179519,,,,,,,,"24/Jul/08 07:01;alisonr;Ah hah!

File: rt/ws/addr/src/main/java/org/apache/cxf/ws/addressing/MAPAggregator.java

    private String getDelimiter(String uri) {
        if (uri.startsWith(""urn"")) {
            return ""."";
        }
        return ""/"";
    }

That ""."" should be a "":"" (or configurable or something).
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RPC/Lit soap 1.2 not processing the soap-rpc:result element,CXF-1720,12400884,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,dkulp,dkulp,24/Jul/08 00:34,18/Aug/08 18:26,14/Mar/19 02:29,24/Jul/08 00:54,2.0.7,2.1.1,,,,,,,,,,,,,2.0.9,2.1.2,,,Soap Binding,,,,,,0,,,,"I was testing the CXF 2.1 client with SOAP 1.2.  I got an RPC-literal endpoint from the White Mesa server and had problems consuming it with the CXF client.  (I had no problems using soapUI.)  

Once the namespace issue was resolved, I got further, actually getting a response from the server.  However, the client threw an exception.  Using TCPMon, I observed that a response was received but the CXF client did not recognize the <result> element directly inside the operation response wrapper (See SOAP 1.2 Adjuncts). CXF is complaining that it finds no logical part that matches this element. 



",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112502,,,2008-07-24 00:34:35.0,,,,,,0|i0v3p3:,179572,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RPC/Lit not honoring namespace in soap:body wsdl extensor,CXF-1719,12400883,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,dkulp,dkulp,24/Jul/08 00:33,18/Aug/08 18:26,14/Mar/19 02:29,24/Jul/08 00:54,2.0.7,2.1.1,,,,,,,,,,,,,2.0.9,2.1.2,,,Soap Binding,,,,,,0,,,,"I was testing the CXF 2.1 client with SOAP 1.2.  I got an RPC-literal endpoint from the White Mesa server and had problems consuming it with the CXF client.  (I had no problems using soapUI.)  


Once the chunking issue was resolved, I got further but got a SOAP fault saying that the operation was not recognized.  The White Mesa WSDL specifies a namespace attribute in the SOAP body element in the BINDING that differs from the abstract messages and operations namespace.  CXF does not seem to be able to handle this.  I worked around this by making the namespaces the same in the abstract messages and the binding. ",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112501,,,2008-07-24 00:33:29.0,,,,,,0|i1achz:,268491,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
URI returned by UriInfo.getAbsolutePath only contains relative portion of the URI,CXF-1717,12400853,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,,bsimons,bsimons,23/Jul/08 18:13,24/Apr/09 21:16,14/Mar/19 02:29,18/Feb/09 14:59,2.1.1,,,,,,,,,,,,,,2.1.4,,,,JAX-RS,,,,,,2,,,,"With a class like:

@Path(""/helloWorld"")
public class HelloWorldResource {
    @Context
    private UriInfo context;
    
    /** Creates a new instance of HelloWorldResource */
    public HelloWorldResource() {
    }

    /**
     * Retrieves representation of an instance of helloworld.HelloWorldResource
     * @return an instance of java.lang.String
     */
    @GET
    @ProduceMime(""text/plain"")
    public String getXml() {
        return context.getAbsolutePath().toString();
    }
}

The String returned by the context.getAbsolutePath().toString only contains the path( /helloWorld )portion of the URI. It should contain the full URI (http://localhost:8080/helloWorld).",Tomcat 6.x running on Windows XP and Java 1.6,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-07-30 22:06:30.142,,,no_permission,,,,,,,,,,,,,50429,,,Wed Feb 18 13:29:51 UTC 2009,,,,,,0|i1aci7:,268492,,,,,,,,23/Jul/08 18:16;bsimons;updated description... hit submit too early,30/Jul/08 22:06;sergey_beryozkin;This is now fixed with a system test in place - feel free to reopen if it does not work in your case,"01/Aug/08 14:19;bsimons;Thanks for the update.  It doesn't look like the fix is in the latest maven snapshot (2.1.2-20080724.010135-4).

Where can I get the code with the fix?  When will the latest SNAPSHOT be posted?

Thanks.","01/Aug/08 14:47;sergey_beryozkin;Have a look please at this code :

http://svn.apache.org/viewvc/cxf/trunk/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/UriInfoImpl.java?view=markup, specifically 

 public URI getBaseUri() {
        URI u = URI.create(getEndpointAddress());
        return HttpUtils.toAbsoluteUri(u, message);
    }


Does the snapshot you downloaded contains the same UriInfoImpl ?
If not then this fix just didn't make it inot the latest published snapshot - Dan Kulp would know when the next one will be available

","01/Aug/08 15:01;dkulp;I'll do another snapshot later this afternoon.

","01/Aug/08 18:20;bsimons;Picked up the snapshot and the scheme, host and port number all are present.

The issue I'm now seeing is that if the CXFServlet is mapped to a url pattern that is not ""/*"", the mapped portion of the url is not present.

For example, in my web.xml file I have:
    <servlet-mapping>
        <servlet-name>CXFServlet</servlet-name>
        <url-pattern>/test/*</url-pattern>
    </servlet-mapping>

I now access my HelloWorld service on the url http://localhost:8080/test/helloWorld.  The value returned from .getAbsolutePath() is actually http://localhost:8080/helloWorld (/test is omitted).

Is that cause for re-opening this issue or entering a new one?
","01/Aug/08 22:06;sergey_beryozkin;Hmm...I'm wondering is it a CXFServlet issue ?

Or perhaps HttpUtils.toAbsoluteUri(u, message); is not taking this extra path segment into consideration ?
Probably yes.

Unfortunately I won't be able to look at this issue during the next month, I'm traveling these weekends. If you can get a chance to track the remaining problem down then it would be cool. Otherwise I'll be able to have a look at it sometime in late August/early September.

",18/Feb/09 13:29;vergnes;It seems to be fixed in 2.1.4 version,,,,,,,,,,,,,,,,,,,,,,,
Wrong namespace for faultcode,CXF-1716,12400825,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,,mamue,mamue,23/Jul/08 13:01,18/Aug/08 18:26,14/Mar/19 02:29,11/Aug/08 20:59,2.1.1,,,,,,,,,,,,,,2.0.9,2.1.2,,,Soap Binding,,,,,,0,,,,"When throwing a SoapFault constructed using SoapFault.FAULT_CODE_CLIENT the generated response contains
<soap:Fault><faultcode xmlns:ns1=""http://cxf.apache.org/faultcode"">ns1:client</faultcode>...

I think the SOAP spec http://www.w3.org/TR/2000/NOTE-SOAP-20000508/#_Toc478383510 suggests that the faultcode should be in the envelope namespace.

cnf. org/apache/cxf/interceptor/Fault.java
maybe should be changed to
    public static final QName FAULT_CODE_CLIENT = new QName(""http://schemas.xmlsoap.org/soap/envelope/"", ""Client"");
    public static final QName FAULT_CODE_SERVER = new QName(""http://schemas.xmlsoap.org/soap/envelope/"", ""Server"");
(probably only in the inherited SoapFault?)

Thanks,
 Martin",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112499,,,2008-07-23 13:01:08.0,,,,,,0|i0v14v:,179157,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Required dependency jaxws-api.jar  not included in apache-cxf-2.1.1.zip distribution,CXF-1715,12400742,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,dkulp,jsimons,jsimons,22/Jul/08 13:31,24/Apr/09 21:16,14/Mar/19 02:29,22/Jul/08 14:02,2.1.1,,,,,,,,,,,,,,2.0.9,2.1.3,,,,,,,,,0,,,,"The release 2.11 binary distribution contains a file apache-cxf-2.1.1/lib/WHICH_JARS  that states ""This directory includes the CXF jar, the CXF manifest jar, the required dependencies"" 

Under JAX-WS support, it lists 

For JAX-WS support:
- geronimo-ws-metadata.jar [6]
- jaxws-api.jar [6]

however, the required depenency jaxws-api.jar is not included in the apache-cxf-2.1.1/lib folder of the distribution.",Windows,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-07-22 14:02:31.804,,,no_permission,,,,,,,,,,,,,112498,,,Tue Jul 22 14:02:31 UTC 2008,,,,,,0|i1acif:,268493,,,,,,,,"22/Jul/08 14:02;dkulp;
I've updated the WHICH_JARS file to reflect that we now ship the geronimo specs version:

geronimo-jaxws_2.1_spec-1.0.jar


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Generated Javascript does not handle simultaneous soap requests correctly,CXF-1713,12400734,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,bmargulies,christine,christine,22/Jul/08 11:48,18/Aug/08 18:26,14/Mar/19 02:29,23/Jul/08 01:32,,,,,,,,,,,,,,,2.1.2,,,,JavaScript Client,,,,,,0,,,,"I use the js client code as dynamically provided by cxf. My js client, which is modeled after the helloworld example, generates two soap requests. The second request is issued before the first has completed. What happens is that the response to the first request gets handled by the response handler of the second request. this is my code (I have added an additional ""sayIt"" to demo the issue)
function saySomething(formObj)
{
	saveText = formObj.textField.value;
	formObj.textField.value = """";
	userId=readCookie();
	if (userId == null || userId.length < 20)
	{
	   register(userId);
	   sayIt(userId, ""hi"");
	} else {
	   sayIt(userId, saveText);
	}
}

The response to the ""register(userid)"" is handled by the response function for the SayIt function. I have solved the problem in my code by making the sayIt wait until the responst to the register has been processed.

What I think that happens is the following. The cxf js code sets the response functions in function soap__say_op:
    this._onsuccess = successCallback;
    this._onerror = errorCallback;
When a response comes in, the onsuccess or onerror function is used that has last been set. What should happen is that the name of the response function is taken from the xml response, xmlresponse.firstchild.firstchild.firstchild.localname. There is a  function org_apache_cxf_deserialize_anyType that does seem to take the tag name from the xml, but this is not used in the response handling that I have seen.

My js client runs in FireFox 3.0 on Ubuntu linux 64 bits. I have tested on IE7 on Windows XP with the same results. I use cxf 2.1.1.


",linux64 ubuntu firefox 3.0,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-07-22 12:35:19.875,,,no_permission,,Novice,,,,,,,,,,,112497,,,Thu Jul 24 10:34:32 UTC 2008,,,,,,0|i1acin:,268494,,,,,,,,"22/Jul/08 12:35;bmargulies;I don't think that your proposed solution can work. We need another closure.

The idea here is that you, the programmer, declare what function you want to see called at completion. We can't automatically determine that function from the response XML. (There is some trickery for 'any' types that does pick functions based on XML, but that's part of the deserialization process.)

The generated code has to create a new closure function that captures the 'on' functions and associates them with the request. In fact, I thought I'd set out to code it this way to begin with.

The hardest part of fixing this will be to come up with a 'mock' for it that allows for a test in the Rhino unit tests.

","22/Jul/08 19:12;christine;Whatever solution you come up with, the js client will have to decide where to put the response based on the response it gets from the server. I mean, you send request A and request B shortly after one another, and you don't know which one will receive a response first. When the first response comes in, you have to identify it from the message or the envelope or whatever you have that comes back. I don't know enough about web services to be of any help here, I guess.
Why exactly can't you pick the function name from the message? I saw that the original function name is in the response header, there should be a point after receiving the message and before handing it to the user response function, where you can set the proper response function name.","23/Jul/08 01:32;bmargulies;I've committed the fix.

All the state for a request is now packaged with the request, so multiple requests can pend at the same time.

I will shortly make the sample demonstrate this.
","23/Jul/08 01:59;bmargulies;As promised, I added an example of how to keep multiple requests sorted out. If you fetch from svn, you can find it here.

distribution/src/main/release/samples/js_browser_client_simple/staticContent/HelloWorld.html

Here's the fun part:

For each transaction, it creates a new JavaScript closure that arranges to deposit the response in the desired place.

   var receiveFirstResponse = function(response) { sayHiResponse(response, responseSpan1); };
    Greeter.sayHi(receiveFirstResponse, sayHiError);
    var receiveSecondResponse = function(response) { sayHiResponse(response, responseSpan2); };
    Greeter.sayHi(receiveSecondResponse, sayHiError);","24/Jul/08 10:34;christine;Cool! Thanks.

Christine

-- 
dagdag is just a two character rotation of byebye
www.christine.nl

",,,,,,,,,,,,,,,,,,,,,,,,,,
ObjectFactory cache doesn't take classloaders into accout,CXF-1712,12400706,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Critical,Fixed,dkulp,dkulp,dkulp,22/Jul/08 03:39,28/Jul/08 14:09,14/Mar/19 02:29,22/Jul/08 04:09,2.0.6,2.0.7,2.1.1,,,,,,,,,,,,2.0.8,2.1.2,,,JAXB Databinding,,,,,,0,,,,"
The ObjectFactory cache in the JAXBDataBinding doesn't take the classloader into account, it only uses the full classname.   If two services use the same classes, but are in different classloaders, creating the JAXB context fails as the object factory is in a different classloader than the beans.",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112496,,,2008-07-22 03:39:42.0,,,,,,0|i0uyhj:,178728,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Server failed to start and receieved IllegalAnnotationExceptions ,CXF-1711,12400668,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Critical,Fixed,dkulp,wtam,wtam,21/Jul/08 16:41,28/Jul/08 14:09,14/Mar/19 02:29,21/Jul/08 20:52,2.0.7,,,,,,,,,,,,,,2.0.8,2.1.2,,,JAXB Databinding,,,,,,1,,,,"Un-tar the attached tarball in the samples directory, then change to mtosi_v2/alarm_retrieval directory and run ""ant server"".  The following stackstrace can be reproduced.  (It requires ACTIVEMQ_VERSION and ACTIVEMQ_HOME to be set).  it works find in 2.1.

     [java] Caused by: com.sun.xml.bind.v2.runtime.IllegalAnnotationsException:
1 counts of IllegalAnnotationExceptions
     [java] No element mapping exists for ""http://www.tmforum.org/mtop/fmw/xsd/c
ei/v1"":""commonEventInformation""
     [java]     this problem is related to the following location:
     [java]             at @javax.xml.bind.annotation.XmlElementDecl(namespace=h
ttp://www.tmforum.org/mtop/nra/xsd/alm/v1, defaultValue= , substitutionHeadName=
commonEventInformation, scope=class javax.xml.bind.annotation.XmlElementDecl$GLO
BAL, substitutionHeadNamespace=http://www.tmforum.org/mtop/fmw/xsd/cei/v1, name=
alarm)
     [java]             at public javax.xml.bind.JAXBElement org.tmforum.mtop.nr
a.xsd.alm.v1.ObjectFactory.createAlarm(org.tmforum.mtop.nra.xsd.alm.v1.AlarmType
)
     [java]             at org.tmforum.mtop.nra.xsd.alm.v1.ObjectFactory

     [java]     at com.sun.xml.bind.v2.runtime.IllegalAnnotationsException$Build
er.check(IllegalAnnotationsException.java:66)
     [java]     at com.sun.xml.bind.v2.runtime.JAXBContextImpl.getTypeInfoSet(JA
XBContextImpl.java:389)
     [java]     at com.sun.xml.bind.v2.runtime.JAXBContextImpl.<init>(JAXBContex
tImpl.java:236)
     [java]     at com.sun.xml.bind.v2.ContextFactory.createContext(ContextFacto
ry.java:76)
     [java]     at com.sun.xml.bind.v2.ContextFactory.createContext(ContextFacto
ry.java:55)
     [java]     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
     [java]     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAcces
sorImpl.java:39)
     [java]     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMet
hodAccessorImpl.java:25)
     [java]     at java.lang.reflect.Method.invoke(Method.java:585)
     [java]     at javax.xml.bind.ContextFinder.newInstance(ContextFinder.java:2
10)
     [java]     at javax.xml.bind.ContextFinder.find(ContextFinder.java:366)
     [java]     at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:574)
     [java]     at org.apache.cxf.jaxb.JAXBDataBinding.createJAXBContext(JAXBDat
aBinding.java:512)
     [java]     at org.apache.cxf.jaxb.JAXBDataBinding.initialize(JAXBDataBindin
g.java:268)
     [java]     ... 14 more
     [java] Java Result: 1",,,,,,,,,,,,,,,,,21/Jul/08 16:42;wtam;mtosi_v2.tar.gz;https://issues.apache.org/jira/secure/attachment/12386543/mtosi_v2.tar.gz,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2008-07-21 17:32:30.941,,,no_permission,,,,,,,,,,,,,112495,,,Mon Jul 21 20:26:04 UTC 2008,,,,,,0|i0uz9j:,178854,,,,,,,,"21/Jul/08 17:32;dkulp;
This is most likely a bug in the jaxb xjc compiler since we don't generate the ObjectFactories, it does.   

You can try grabbing the 2.0.5 version of the xjc jar from:
http://download.java.net/maven/1/com.sun.xml.bind/jars/
and adding that to the classpath before the 2.0 version we ship and seeing if that helps.   It probably will.

We cannot ship the 2.0.5 version as the JAX-WS RI 2.0 version that we have to test against for the TCK does not work with code generated from the 2.0.5 xjc.   Thus, we would not be able to claim JAX-WS compliancy.


","21/Jul/08 17:55;wtam;Thanks for suggestion.  Unfortunately, jaxb-xjc-2.0.5.jar didn't help.  I regenerated java code with it but I still got the error when I ran the server.","21/Jul/08 20:26;dkulp;
OK.  This looks like a behavior change in JAXB2.1, but we can work around it.

Basically, JAXB 2.0 doesn't seem to grab the superclasses of types prior to checking the annotations.  Thus, the supertype of the AlarmType (EventInformationType and it's superclass CommonEventInformationType) are not available in the context and thus the element isn't available.   

Two ways to deal with it:
1) Use the ""extra classes"" configuration stuff to configure in the extra classes that are needed.  

2) Update the JAXBContextInitializer to walk the parent as well.    I'll get this done on the fixes branch.


",,,,,,,,,,,,,,,,,,,,,,,,,,,,
WSDL endpoint address incorrect when publishing similar endpoints through a servlet,CXF-1710,12400644,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,,runholt,runholt,21/Jul/08 09:38,21/Jan/11 18:18,14/Mar/19 02:29,08/Jan/11 03:58,2.1.1,,,,,,,,,,,,,,NeedMoreInfo,,,,JAX-WS Runtime,,,,,,4,,,,"This issue is very similar to the problem described in issue CXF-793, but that is supposed to have been fixed in 2.0.4.
This issue might relate to the use of servlets.

When multiple published endpoints use the same WSDL, the served WSDLs (?wsdl) don't get the correct endpoint adress. 

I am subclassing CXFServlet and deploy multiple endpoints using the API as described in the docs:
   Endpoint.publish(""/Greeter"", new GreeterImpl());
   Endpoint.publish(""/Greeter2"", new GreeterImpl());

In all the endpoints, the generated WSDL specifies soap:address location pointing to the last endpoint listed in the service list.


The same happens using cxf-servlet.xml.

Steps to reproduce:
- Use sample ""wsdl_first""
- Edit cxf-servlet.xml: duplicate the <jaxws:endpoint> section, change id and address in the copy
- Build WAR
- Deploy on Tomcat
- Check the generated WSDLs 


The WSDLs are supposed to point to different adresses, right?
In my test they don't.


Regards,
-- Kim
",Tomcat 6.0.16.,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2011-01-08 03:57:35.441,,,no_permission,,,,,,,,,,,,,112494,,,Sat Jan 08 03:58:29 UTC 2011,,,,,,0|i1aciv:,268495,,,,,,,,"08/Jan/11 03:57;dkulp;
This issue seems to be fixed now.  I cannot reproduce it with the latest wsdl_first code using the instructions above.  ","08/Jan/11 03:58;dkulp;
Please reopen if a new testcase can be produced.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"""No service was found."" after refresh of Spring's ApplicationContext ",CXF-1709,12400642,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Critical,Fixed,dkulp,deki,deki,21/Jul/08 09:28,25/Mar/10 08:07,14/Mar/19 02:29,22/Jul/08 17:24,2.1.1,,,,,,,,,,,,,,2.0.8,2.1.2,,,,,,,,,1,,,,"Spring's ApplicationContext can be dynamically refreshed with org.springframework.context.ConfigurableApplicationContext.refresh(). CXF doesn't work after this refresh:

21.07.2008 11:21:26 org.apache.cxf.transport.servlet.ServletController invoke
WARN: Can't find the the request for http://localhost:8080/cxf-testserver/services/TestService's Observer

Opening the URL in a browser shows:
""No service was found.""",,,,,,,,,,,,,,,CXF-2730,,21/Jul/08 09:33;deki;cxf-testclient-1.0.0-SNAPSHOT-project.zip;https://issues.apache.org/jira/secure/attachment/12386509/cxf-testclient-1.0.0-SNAPSHOT-project.zip,21/Jul/08 09:31;deki;cxf-testserver-1.0.0-SNAPSHOT-project.zip;https://issues.apache.org/jira/secure/attachment/12386508/cxf-testserver-1.0.0-SNAPSHOT-project.zip,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112493,,,Mon Jul 21 09:33:08 UTC 2008,,,,,,0|i0uz8n:,178850,,,,,,,,21/Jul/08 09:31;deki;I created a testcase. Launch this testserver with mvn jetty:run.,21/Jul/08 09:33;deki;Use the TestClient class to access the testserver. ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
wsdl2java creates java.io.IOException: The parameter is incorrect,CXF-1708,12400571,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,,wleck,wleck,18/Jul/08 17:13,30/Jul/09 18:01,14/Mar/19 02:29,28/Jul/09 20:05,2.1.1,,,,,,,,,,,,,,2.1.4,,,,Tooling,,,,,,1,,,,"Changed POM to use 2.1.1 from 2.1.  Executing mvn to generate-source using wsdl2java plugin now generates the following exception:

java.io.IOException: The parameter is incorrect
	at java.io.WinNTFileSystem.createFileExclusively(Native Method)
	at java.io.File.createNewFile(File.java:850)
	at org.apache.cxf.maven_plugin.WSDL2JavaMojo.processWsdl(WSDL2JavaMojo.java:345)
	at org.apache.cxf.maven_plugin.WSDL2JavaMojo.execute(WSDL2JavaMojo.java:223)
	at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:447)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:539)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:480)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:459)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:311)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:278)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:143)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:333)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:126)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:282)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)
	at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)
	at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)
	at org.codehaus.classworlds.Launcher.main(Launcher.java:375)

wsd2java works correctly in when switching back to 2.1.",Windows XP Service Pack 3 JDK 1.5.0_15 Maven 2.0.8,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-07-22 18:16:40.247,,,no_permission,,Unknown,,,,,,,,,,,50430,,,Tue Jul 28 20:05:03 UTC 2009,,,,,,0|i0v1kv:,179229,,,,,,,,"22/Jul/08 18:16;dkulp;
I deployed a new 2.1.2-SNAPSHOT last night that should add some more debugging to this to try and figure out what is wrong.  

My gut feeling is that it's now a path length issue or similar on Windows.   Not really sure though.
","06/Feb/09 14:34;dharmon;Is this a duplicate of CXF-1903[1]?

[1] https://issues.apache.org/jira/browse/CXF-1903","06/Feb/09 15:37;wleck;Actually, I would say CXF-1903 would be a duplicate to this one since this one was written first :).  However, it does appear to be the same issue.  Glad to see someone was able to find the issue.  I will try it soon.","28/Jul/09 20:05;dkulp;
This is a duplicate of a resolved issue.",,,,,,,,,,,,,,,,,,,,,,,,,,,
Security Exception when using java2ws via the cxf-java2ws-plugin in Netbeans,CXF-1707,12400559,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,gumnaam.suri,gumnaam.suri,18/Jul/08 14:27,18/Aug/08 18:26,14/Mar/19 02:29,18/Jul/08 20:33,2.1.1,,,,,,,,,,,,,,2.1.2,,,,Build system,,,,,,0,,,,"Similar to https://issues.apache.org/jira/browse/CXF-1256, I get a security exception when  using java2ws via the cxf-java2ws-plugin in Netbeans 6.x.
For CXF-1256 the error was in wsdl2java, for my case the error is in java2ws.

As CXF-1526 was a bug in CXF rather than Netbeans, I figure this is the same case.

Stack Trace below

[DEBUG]Setting context classloader for plugin to: /plugins/org.apache.cxf:cxf-java2ws-plugin:2.1.1@-953946915/thread:exec_Build cxfdemo_1 (instance is: ClassRealm[/plugins/org.apache.cxf:cxf-java2ws-plugin:2.1.1@-953946915/thread:exec_Build cxfdemo_1, parent: ClassRealm[plexus.core, parent: null]])
[ERROR]Runtime Exception thrown during execution
[ERROR]null
[ERROR]Error stacktrace:
[ERROR]java.lang.SecurityException
[ERROR]	at org.netbeans.TopSecurityManager.checkSetSecurityManager(TopSecurityManager.java:442)
[ERROR]	at org.netbeans.TopSecurityManager.checkPermission(TopSecurityManager.java:376)
[ERROR]	at java.lang.System.setSecurityManager0(System.java:273)
[ERROR]	at java.lang.System.setSecurityManager(System.java:264)
[ERROR]	at org.apache.cxf.maven_plugin.Java2WSMojo.execute(Java2WSMojo.java:140)
[ERROR]	at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:580)
[ERROR]	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:498)
[ERROR]	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegmentForProject(DefaultLifecycleExecutor.java:265)
[ERROR]	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:191)
[ERROR]	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:149)
[ERROR]	at org.codehaus.mevenide.netbeans.embedder.exec.MyLifecycleExecutor.execute(MyLifecycleExecutor.java:72)
[ERROR]	at org.apache.maven.DefaultMaven.execute_aroundBody0(DefaultMaven.java:223)
[ERROR]	at org.apache.maven.DefaultMaven.execute_aroundBody1$advice(DefaultMaven.java:304)
[ERROR]	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:1)
[ERROR]	at org.apache.maven.embedder.MavenEmbedder.execute_aroundBody2(MavenEmbedder.java:904)
[ERROR]	at org.apache.maven.embedder.MavenEmbedder.execute_aroundBody3$advice(MavenEmbedder.java:304)
[ERROR]	at org.apache.maven.embedder.MavenEmbedder.execute(MavenEmbedder.java:1)
[ERROR]	at org.codehaus.mevenide.netbeans.execute.MavenJavaExecutor.run(MavenJavaExecutor.java:215)
[ERROR]	at org.netbeans.core.execution.RunClassThread.run(RunClassThread.java:151)
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112492,,,2008-07-18 14:27:21.0,,,,,,0|i1acj3:,268496,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Exception on using MTOM,CXF-1702,12400296,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,njiang,ehildebrandt,ehildebrandt,15/Jul/08 15:10,22/Jul/08 12:26,14/Mar/19 02:29,22/Jul/08 12:26,2.1.1,,,,,,,,,,,,,,Invalid,,,,,,,,,,0,,,,"15.07.2008 17:03:27 org.apache.cxf.interceptor.LoggingInInterceptor logging
INFO: Inbound Message
----------------------------
Encoding: 
Headers: {JMSDestination=[Queue[com.mycompany.examples.customerrelations.CustomerServiceV1]], JMSRedelivered=[false], JMSTimestamp=[1216134207296], JMSExpiration=[1216134227296], SOAPAction=[""getCustomer""], JMSType=null, JMSDeliveryMode=[2], JMSMessageID=[ID:EMS-SERVER.6FC487CBAEB7:1], JMSXGroupID=null, JMSCorrelationID=null, JMSPriority=[4], JMSReplyTo=[Queue[$TMP$.EMS-SERVER.6FC487CBAEB6.1]]}
Messages: 
Message:

Payload: 
------=_Part_0_536608.1216134206859
Content-Type: application/xop+xml; charset=UTF-8; type=""text/xml"";
Content-Transfer-Encoding: binary
Content-ID: <root.message@cxf.apache.org>

<soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/""><soap:Body><ns2:getCustomer xmlns:ns2=""http://www.mycompany.com/examples/customerrelations""><customerNummber>12345</customerNummber></ns2:getCustomer></soap:Body></soap:Envelope>
------=_Part_0_536608.1216134206859--
--------------------------------------
15.07.2008 17:03:27 org.apache.cxf.phase.PhaseInterceptorChain doIntercept
INFO: Interceptor has thrown exception, unwinding now
org.apache.cxf.binding.soap.SoapFault: Error reading XMLStreamReader.
	at org.apache.cxf.binding.soap.interceptor.ReadHeadersInterceptor.handleMessage(ReadHeadersInterceptor.java:183)
	at org.apache.cxf.binding.soap.interceptor.ReadHeadersInterceptor.handleMessage(ReadHeadersInterceptor.java:54)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:221)
	at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:78)
	at org.apache.camel.component.cxf.transport.CamelDestination.incoming(CamelDestination.java:148)
	at org.apache.camel.component.cxf.transport.CamelDestination$ConsumerProcessor.process(CamelDestination.java:172)
	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:59)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:75)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:57)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:155)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:91)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:57)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:39)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:41)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:66)
	at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:68)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:531)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:466)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:435)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:322)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:260)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:944)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:875)
	at java.lang.Thread.run(Thread.java:595)
Caused by: com.ctc.wstx.exc.WstxUnexpectedCharException: Unexpected character '-' (code 45) in prolog; expected '<'
 at [row,col {unknown-source}]: [2,1]
	at com.ctc.wstx.sr.StreamScanner.throwUnexpectedChar(StreamScanner.java:623)
	at com.ctc.wstx.sr.BasicStreamReader.nextFromProlog(BasicStreamReader.java:2047)
	at com.ctc.wstx.sr.BasicStreamReader.next(BasicStreamReader.java:1069)
	at com.ctc.wstx.sr.BasicStreamReader.nextTag(BasicStreamReader.java:1095)
	at org.apache.cxf.binding.soap.interceptor.ReadHeadersInterceptor.handleMessage(ReadHeadersInterceptor.java:83)
	... 24 more",Windows XP,,,,,,,,,,,,,,,,15/Jul/08 15:16;ehildebrandt;example-mtom.zip;https://issues.apache.org/jira/secure/attachment/12386061/example-mtom.zip,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2008-07-16 01:45:36.433,,,no_permission,,,,,,,,,,,,,112487,,,Tue Jul 22 12:26:23 UTC 2008,,,,,,0|i1acjj:,268498,,,,,,,,15/Jul/08 15:16;ehildebrandt;Sample Project,"16/Jul/08 01:45;gmazza;Ich habe Ihre Testanwendung heruntergeladet und ""mvn package"" eingegeben, aber weiss nicht wie ich es laufen kann.  (Translation:  How do I fire up this puppy?)","16/Jul/08 07:54;ehildebrandt;Das Beispiel enthält die Klassen ServiceServer und ServiceClient. Nach dem das Projekt mit Maven kompiliert worden ist, kann man diese Klassen einfach aus Eclipse starten. Das Beispiel verwendet SOAP over JMS unter Einsatz von Apache Camel als Transport Schicht. Daher ist ein JMS Server (ActiveMQ auf localhost) notwendig. Derselbe Fehler tritt jedoch auch auf wenn man die JMS Komponente von CXF verwendet oder HTTP einsetzt.

-----

In English:
Simply run the classes ServiceServer and ServiceClient from Eclipse. This example uses SOAP over JMS with Apache Camel Transport. You need ActiveMQ listing on localhost (default port).
","16/Jul/08 09:56;ehildebrandt;Korrektur: Beispiel funktioniert problemlos mit HTTP. Fehler scheint nur bei Einsatz von JMS aufzutreten.

-----

English: It seems that this issue only occurs using JMS as transport.","16/Jul/08 16:25;dkulp;
Yea, there isn't anything in the JMS headers that suggests this is not text/xml.    The Content-Type header needs to be stuck in there somehow. 

From this, it looks like if we tried a different payload (like fastinfoset) it would barf as well for the same reason.","16/Jul/08 21:36;ehildebrandt;Do you have any suggestions how we can solve this issue? Should we add an additional ""Content-Type"" header property to the JMS message? Are there any standard headers in JMS for that kind of information?","22/Jul/08 12:25;njiang;I just fill a JIRA[1] in camel and fixed the example by setting the content-type into the camel message header.
I will committed the fix into the camel truck , please check it out.

[1] https://issues.apache.org/activemq/browse/CAMEL-739

",22/Jul/08 12:26;njiang;This issue is resolved from camel side.,,,,,,,,,,,,,,,,,,,,,,,
JMS Transport Configuration in a WSDL file is not parsed,CXF-1701,12400295,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,ulhasbhole,ehildebrandt,ehildebrandt,15/Jul/08 14:47,24/Apr/09 21:16,14/Mar/19 02:29,24/Jul/08 09:15,2.1.1,,,,,,,,,,,,,,2.0.9,2.1.3,,,,,,,,,1,,,,JMS Transport Configuration in a WSDL file is not parsed correctly.,,0,0,,0%,0,0,,,,,,,,,,15/Jul/08 14:48;ehildebrandt;patch.txt;https://issues.apache.org/jira/secure/attachment/12386059/patch.txt,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2008-07-16 22:16:32.454,,,no_permission,,Novice,,,,,,,,,,,112486,,,Thu Jul 24 09:15:46 UTC 2008,,,,,,0|i1acjr:,268499,,,,,,,,15/Jul/08 14:48;ehildebrandt;Please consider apply attached patch.,"16/Jul/08 22:16;ulhasbhole;This behaviour is intentional. Client, Server and Session Pool configuration are specific to each instance so they are excluded from WSDL extensor  and added to CXF configuration.

Can you explain more why you need them via WSDL?
 ","17/Jul/08 12:04;ehildebrandt;I created this issue primary because it is very irritating having valid (according to XML schema) configuration elements which do nothing. Maybe these configuration elements should be removed from XML schema for WSDL (not for Spring configuration). At least this behaviour should be documented in Wiki.

However one of my customers is planning to use a service registry. The registry keeps the abstract part of the WSDL static and generates the concrete part (ports, endpoint, ...) dynamically based on the query (or requester).  For this reason it could be interesting having the possibility to configure the endpoint including client, server and session pool.","17/Jul/08 12:16;dkulp;
For 2.2, we've discussed enhancing the JMS transport to support the proposed spec:
http://www.w3.org/Submission/SOAPJMS/
and all the timeToLive, timeouts, etc... would be in the wsdl there as well.    Thus, I don't really see a reason not to do this.","24/Jul/08 09:15;ulhasbhole;Sending        .
Sending        rt/transports/jms/src/main/java/org/apache/cxf/transport/jms/JMSProviderHub.java
Sending        rt/transports/jms/src/main/java/org/apache/cxf/transport/jms/JMSTransportBase.java
Sending        rt/transports/jms/src/main/resources/META-INF/cxf/extensions.xml
Sending        rt/transports/jms/src/main/resources/schemas/wsdl/jms.xsd
Sending        systests/src/test/java/org/apache/cxf/systest/jms/GreeterByteMessageImpl.java
Sending        systests/src/test/java/org/apache/cxf/systest/jms/GreeterImplDoc.java
Adding         systests/src/test/java/org/apache/cxf/systest/jms/GreeterImplDocBase.java
Sending        systests/src/test/java/org/apache/cxf/systest/jms/GreeterImplTwoWayJMS.java
Sending        systests/src/test/java/org/apache/cxf/systest/jms/JMSClientServerTest.java
Adding         systests/src/test/java/org/apache/cxf/systest/jms/JmsDestPubSubImpl.java
Sending        systests/src/test/java/org/apache/cxf/systest/jms/Server.java
Adding         systests/src/test/java/org/apache/cxf/systest/jms/SoapService6SoapPort6Impl.java
Adding         systests/src/test/java/org/apache/cxf/systest/jms/TwoWayJMSImplBase.java
Sending        testutils/src/main/resources/wsdl/hello_world_doc_lit.wsdl
Sending        testutils/src/main/resources/wsdl/jms_test.wsdl
Transmitting file data ...........
Committed revision 679316.",,,,,,,,,,,,,,,,,,,,,,,,,,
XMLBeans - XmlBeansSchemaInitializer (Lline #177) can't handle xs:include ,CXF-1700,12400150,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Critical,Fixed,dkulp,leon30338,leon30338,12/Jul/08 01:26,04/Mar/09 09:58,14/Mar/19 02:29,17/Jul/08 15:20,2.1.1,,,,,,,,,,,,,,2.1.2,,,,,,,,,,0,,,,"XMLBeans binding can't seem to handle an xs:include.  see XmlBeansSchemaInitializer.java (Lline #177) Here is sample .xsd to reproduce this problem. 


<?xml version=""1.0"" encoding=""UTF-8""?>
<xs:schema     
    xmlns:xs=""http://www.w3.org/2001/XMLSchema""
    targetNamespace=""http://sample.com/procure""
    xmlns:po=""http://sample.com/procure""
    elementFormDefault=""qualified"">
    <xs:include schemaLocation=""./commonSchemas.xsd""/>
    <xs:element name=""purchase-order"">
        <xs:complexType>
            <xs:sequence>
                <xs:element name=""customer"" type=""po:customer""/>
                <xs:element name=""shipper"" type=""po:shipper"" minOccurs=""0""/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
</xs:schema>


<?xml version=""1.0"" encoding=""UTF-8""?>
<xs:schema xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns=""http://sample.com/procure"" targetNamespace=""http://sample.com/procure"" elementFormDefault=""qualified"" attributeFormDefault=""unqualified"">
    <xs:complexType name=""customer"">
        <xs:sequence>
            <xs:element name=""name"" type=""xs:string""/>
            <xs:element name=""address"" type=""xs:string""/>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name=""shipper"">
        <xs:sequence>
            <xs:element name=""name"" type=""xs:string""/>
            <xs:element name=""per-ounce-rate"" type=""xs:decimal""/>
        </xs:sequence>
    </xs:complexType>
</xs:schema>",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-03-04 09:57:12.478,,,no_permission,,,,,,,,,,,,,112485,,,Wed Mar 04 09:57:12 UTC 2009,,,,,,0|i0uz0f:,178813,,,,,,,,04/Mar/09 09:57;knutivar;Maven project containing the problem. mvn install and deploy it!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Content type not set on http response,CXF-1699,12400103,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,sergey_beryozkin,bradmoody,bradmoody,11/Jul/08 09:40,18/Aug/08 18:26,14/Mar/19 02:29,14/Jul/08 08:55,2.1.2,,,,,,,,,,,,,,2.1.2,,,,JAX-RS,,,,,,0,,,,The content type decided by the Accept header and @ProduceMime annotation is set on the message object but is not transfered to the http response.,"WinXP pro
Java 1.5.1",,,,,,,,,,,,,,,,11/Jul/08 09:43;bradmoody;JAXRSOutInterceptor.patch;https://issues.apache.org/jira/secure/attachment/12385854/JAXRSOutInterceptor.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2008-07-14 08:55:04.503,,,no_permission,,,,,,,,,,,,,112484,,,Mon Jul 14 08:55:04 UTC 2008,,,,,,0|i1acjz:,268500,,,,,,,,11/Jul/08 09:43;bradmoody;Sets the content type on the message object before the repsonse headers are copied to the http response.,14/Jul/08 08:55;sergey_beryozkin;Brad's patch has been applied,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WSDL operation null when getting from the SOAPMessageContext,CXF-1698,12400063,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,seanoc,aruld,aruld,10/Jul/08 21:28,12/Nov/09 17:45,14/Mar/19 02:29,25/Feb/09 14:56,2.1.1,,,,,,,,,,,,,,,,,,JAX-WS Runtime,,,,,,0,,,,"The following code on the SoapMessageContext returns null.

javax.xml.namespace.QName operation = (javax.xml.namespace.QName) smc.get(MessageContext.WSDL_OPERATION);

I have annotated my web method with operationName tag.  But, still getting null.",,,,,,,,,,,,,,,CXF-2532,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-01-14 17:35:16.493,,,no_permission,,,,,,,,,,,,,112483,,,Fri Jan 16 15:29:25 UTC 2009,,,,,,0|i1ack7:,268501,,,,,,,,"14/Jan/09 17:35;seanoc;Hi Arulazi,
Can you give more details so the error can be reproduced. A test case perhaps.
thanks,
Seán.
","15/Jan/09 15:41;seanoc;Hi Arulazi,

I've had a look through the code and within the RPCInInterceptor class you can see  that the operation name is being correctly set  in the MessageContext.

Are you correctly using the SOAP Binding?

If you get back to me with more detail I will investigate further, otherwise I will close this JIRA.

Regards,

Seán.

","15/Jan/09 15:47;dkulp;
Is this in the Impl or in some sort of JAX-WS handler?

If it's in a handler, the WSDL_OPERATION may be null as that wouldn't have been determined yet.
","15/Jan/09 16:14;aruld;Sorry for the delayed response.

I was using the Logging handler, which is a JAX-WS handler right?","16/Jan/09 15:29;seanoc;I've reproduced the problem using the jaxws_handler sample calling 

operation = (javax.xml.namespace.QName) smc.get(MessageContext.WSDL_OPERATION); 

from within handleMessage(SOAPMessageContext smc) in the samples LoggingHandler.

Debugging into it it appears that the MessageContext has not been fully populated in that the exchange variable in WrappedMessageContext is null and so the get() cannot call out to determine the operation name.",,,,,,,,,,,,,,,,,,,,,,,,,,
Problem with converting to Calendar,CXF-1697,12400019,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,wojtekg212,wojtekg212,10/Jul/08 13:43,28/Jul/08 14:09,14/Mar/19 02:29,22/Jul/08 20:51,2.0.4,,,,,,,,,,,,,,2.0.8,,,,,,,,,,0,,,,"'m receiving following error: ""Unmarshalling Error: unexpected element (uri:"""", local:""from""). Expected elements are (none)"". It occurs when xs:dateTime is mapped to java.util.Calendar.

Here is the part of WSDL:

    <xs:element name=""getDownloadHistory"" type=""getDownloadHistory""/>

    <xs:complexType name=""getDownloadHistory"">
        <xs:sequence>
            <xs:element minOccurs=""0"" name=""application"" type=""xs:string""/>
            <xs:element minOccurs=""0"" name=""id"" type=""xs:string""/>
            <xs:element minOccurs=""0"" name=""type"" type=""historyType""/>
            <xs:element minOccurs=""0"" name=""from"" type=""xs:dateTime""/>
            <xs:element minOccurs=""0"" name=""to"" type=""xs:dateTime""/>
        </xs:sequence>
    </xs:complexType>

    <xs:element name=""getDownloadHistoryResponse"" type=""getDownloadHistoryResponse""/>
    <xs:complexType name=""getDownloadHistoryResponse"">
        <xs:sequence>
            <xs:element maxOccurs=""unbounded"" minOccurs=""0"" name=""return"" type=""downloadRecord""/>
        </xs:sequence>
    </xs:complexType>


Here is the service interface:

    List<DownloadRecord> getDownloadHistory(
            @WebParam(name = ""application"")
            final String applicationID,
            @WebParam(name = ""id"")
            final String userID,
            @WebParam(name = ""type"")
            final HistoryType type,
            @WebParam(name = ""from"")
            final Calendar from,
            @WebParam(name = ""to"")
            final Calendar to);


I'm using following SOAP binding:

@SOAPBinding(style = SOAPBinding.Style.DOCUMENT,
             use = SOAPBinding.Use.LITERAL,
             parameterStyle = SOAPBinding.ParameterStyle.WRAPPED)


Here is a SOAP request:

<soapenv:Envelope xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:dow=""http://www.volantis.com/xmlns/2008/01/mss/download-module"">
   <soapenv:Header/>
   <soapenv:Body>
      <dow:getDownloadHistory>
         <!--Optional:-->
         <application>111:222:op</application>
         <!--Optional:-->
         <id>666</id>
         <!--Optional:-->
         <type>ACTIVE</type>
         <!--Optional:-->
         <from>2007-02-17T14:40:32.000Z</from>
         <to>2008-07-08T12:10:00.000Z</to>
      </dow:getDownloadHistory>
   </soapenv:Body>
</soapenv:Envelope>

And SOAP response:

<soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/"">
   <soap:Body>
      <soap:Fault>
         <faultcode>soap:Server</faultcode>
         <faultstring>Unmarshalling Error: unexpected element (uri:"""", local:""from""). Expected elements are (none)</faultstring>
      </soap:Fault>
   </soap:Body>
</soap:Envelope>

It seems that everything is correctly configured but I still have the same error.

I've found that in JAXBEncoderDecoder#unmarshall, in case of abstract class (like java.util.Calendar), is unmarshalled without class by JAXB what causes in result mentioned error: ""Unmarshalling Error: unexpected element (uri:"""", local:""from""). Expected elements are (none)"".

Here is the ""if"" statement checking if class is abstract.

            if (clazz == null || (!clazz.isPrimitive() && !clazz.isArray() && !clazz.isEnum()
                && (Modifier.isAbstract(clazz.getModifiers())
                || Modifier.isInterface(clazz.getModifiers())))) {
                unmarshalWithClass = false;
            }

Is it correct ""Modifier.isAbstract(clazz.getModifiers())""? Can someone confirm if it is a bug and real cause of problem? If I remove ""Modifier.isAbstract(clazz.getModifiers())"" everything works fine. ",CXF 2.0.4,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112482,,,2008-07-10 13:43:18.0,,,,,,0|i1ackf:,268502,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
wsdl2java issues with implicit headers,CXF-1696,12399965,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,bdm,bdm,09/Jul/08 21:48,28/Jul/08 14:09,14/Mar/19 02:29,16/Jul/08 19:28,2.0.7,,,,,,,,,,,,,,2.0.8,2.1.2,,,Tooling,,,,,,0,,,,"All,

I are trying to consume a wsdl file from a third party company (which we can't change) that includes implicit headers.  We have a number of issues that we have hit while trying to make this work:

1) When I run wsdl2java (via maven) I get the ""Non unique body parts"" message with the following message:

INFO] Non unique body parts! In a port, operations must have unique operation signaure on the wire for successful dispatch. In port {urn:_HelpDesk_Queries}_HelpDesk_QueriesSoap, Operations ""{urn:_HelpDesk_Queries}GetListBy_Requester_FullName"" and ""{urn:_HelpDesk_Queries}GetListBy_Requester_Login"" have the same request body block {urn:_HelpDesk_Queries}AuthenticationInfo 

With the following wsdl (edited):

<?xml version=""1.0"" encoding=""UTF-8""?>
<definitions targetNamespace=""urn:_HelpDesk_Queries"" xmlns=""http://schemas.xmlsoap.org/wsdl/"" xmlns:s=""urn:_HelpDesk_Queries"" xmlns:soap=""http://schemas.xmlsoap.org/wsdl/soap/"" xmlns:soapenc=""http://schemas.xmlsoap.org/soap/encoding/"" xmlns:wsdl=""http://schemas.xmlsoap.org/wsdl/"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">
 <wsdl:types>
  <xsd:schema elementFormDefault=""qualified"" targetNamespace=""urn:_HelpDesk_Queries"">
   <xsd:element name=""GetListBy_Requester_FullName"" type=""s:GetListInputMap1""/>
   <xsd:complexType name=""GetListInputMap1"">
    <xsd:sequence>
     <xsd:element name=""Requester_Full_Name"" type=""xsd:string""/>
    </xsd:sequence>
   </xsd:complexType>

   <xsd:element name=""GetListBy_Requester_FullNameResponse"" type=""s:GetListOutputMap1""/>
   <xsd:complexType name=""GetListOutputMap1"">
    <xsd:sequence>
     <xsd:element maxOccurs=""unbounded"" name=""getListValues"">
      <xsd:complexType>
       <xsd:sequence>
        <xsd:element minOccurs=""0"" name=""Assignee_Login_Name"" type=""xsd:string""/>
        <xsd:element name=""Case_ID"" type=""xsd:string""/>
        <xsd:element name=""Case_Type"" type=""s:Case_TypeType""/>

        <xsd:element name=""Category"" type=""xsd:string""/>
        <xsd:element name=""Create_Time"" type=""xsd:dateTime""/>
        <xsd:element minOccurs=""0"" name=""Department"" type=""xsd:string""/>
        <xsd:element name=""Description"" type=""xsd:string""/>
        <xsd:element name=""Item"" type=""xsd:string""/>
        <xsd:element minOccurs=""0"" name=""Office"" type=""xsd:string""/>
        <xsd:element minOccurs=""0"" name=""Phone_Number"" type=""xsd:string""/>
        <xsd:element name=""Priority"" type=""s:PriorityType""/>
        <xsd:element minOccurs=""0"" name=""Region"" type=""xsd:string""/>

        <xsd:element minOccurs=""0"" name=""Request_Urgency"" type=""s:Request_UrgencyType""/>
        <xsd:element name=""Requester_Login_Name"" type=""xsd:string""/>
        <xsd:element name=""Requester_Name"" type=""xsd:string""/>
        <xsd:element minOccurs=""0"" name=""Site"" type=""xsd:string""/>
        <xsd:element name=""Source"" type=""s:SourceType""/>
        <xsd:element name=""Status"" type=""s:StatusType""/>
        <xsd:element name=""Submitted_By"" type=""xsd:string""/>
        <xsd:element name=""Summary"" type=""xsd:string""/>
        <xsd:element name=""Type"" type=""xsd:string""/>

        <xsd:element name=""Catalog"" type=""xsd:string""/>
        <xsd:element name=""Assigned_To_Group"" type=""xsd:string""/>
        <xsd:element name=""Resolution_Code"" type=""s:Resolution_CodeType""/>
        <xsd:element name=""Public_Work_Log"" type=""xsd:string""/>
        <xsd:element name=""Private_Work_Log"" type=""xsd:string""/>
       </xsd:sequence>
      </xsd:complexType>
     </xsd:element>
    </xsd:sequence>

   </xsd:complexType>
   <xsd:simpleType name=""Case_TypeType"">
    <xsd:restriction base=""xsd:string"">
     <xsd:enumeration value=""Incident""/>
     <xsd:enumeration value=""Information""/>
     <xsd:enumeration value=""Service Request""/>
     <xsd:enumeration value=""Enhancement Request""/>
     <xsd:enumeration value=""Problem""/>
     <xsd:enumeration value=""Training""/>

    </xsd:restriction>
   </xsd:simpleType>
   <xsd:simpleType name=""PriorityType"">
    <xsd:restriction base=""xsd:string"">
     <xsd:enumeration value=""4-Low""/>
     <xsd:enumeration value=""3-Med""/>
     <xsd:enumeration value=""2-High""/>
     <xsd:enumeration value=""1-Urgent""/>
    </xsd:restriction>

   </xsd:simpleType>
   <xsd:simpleType name=""Request_UrgencyType"">
    <xsd:restriction base=""xsd:string"">
     <xsd:enumeration value=""4-Low""/>
     <xsd:enumeration value=""3-Medium""/>
     <xsd:enumeration value=""2-High""/>
     <xsd:enumeration value=""1-Critical""/>
    </xsd:restriction>
   </xsd:simpleType>

   <xsd:simpleType name=""SourceType"">
    <xsd:restriction base=""xsd:string"">
     <xsd:enumeration value=""Phone""/>
     <xsd:enumeration value=""Chat""/>
     <xsd:enumeration value=""Walk-in""/>
     <xsd:enumeration value=""Monitoring""/>
     <xsd:enumeration value=""Requester""/>
     <xsd:enumeration value=""Email""/>
     <xsd:enumeration value=""Web""/>

     <xsd:enumeration value=""Paper""/>
    </xsd:restriction>
   </xsd:simpleType>
   <xsd:simpleType name=""StatusType"">
    <xsd:restriction base=""xsd:string"">
     <xsd:enumeration value=""New""/>
     <xsd:enumeration value=""Assigned""/>
     <xsd:enumeration value=""Work In Progress""/>
     <xsd:enumeration value=""Pending""/>

     <xsd:enumeration value=""Resolved""/>
     <xsd:enumeration value=""Closed""/>
    </xsd:restriction>
   </xsd:simpleType>
   <xsd:simpleType name=""Resolution_CodeType"">
    <xsd:restriction base=""xsd:string"">
     <xsd:enumeration value=""Successful""/>
     <xsd:enumeration value=""Successful with Problems""/>
     <xsd:enumeration value=""Unsuccessful""/>

     <xsd:enumeration value=""Unsuccessful with Problems""/>
    </xsd:restriction>
   </xsd:simpleType>

   <xsd:element name=""GetListBy_Requester_Login"" type=""s:GetListInputMap""/>
   <xsd:complexType name=""GetListInputMap"">
    <xsd:sequence>

     <xsd:element name=""Requester_Login"" type=""xsd:string""/>
    </xsd:sequence>
   </xsd:complexType>
   <xsd:element name=""GetListBy_Requester_LoginResponse"" type=""s:GetListOutputMap""/>
   <xsd:complexType name=""GetListOutputMap"">
    <xsd:sequence>
     <xsd:element maxOccurs=""unbounded"" name=""getListValues"">
      <xsd:complexType>
       <xsd:sequence>

        <xsd:element minOccurs=""0"" name=""Assignee_Login_Name"" type=""xsd:string""/>
        <xsd:element name=""Case_ID"" type=""xsd:string""/>
        <xsd:element name=""Case_Type"" type=""s:Case_TypeType""/>
        <xsd:element name=""Category"" type=""xsd:string""/>
        <xsd:element name=""Create_Time"" type=""xsd:dateTime""/>
        <xsd:element minOccurs=""0"" name=""Department"" type=""xsd:string""/>
        <xsd:element name=""Description"" type=""xsd:string""/>
        <xsd:element name=""Item"" type=""xsd:string""/>
        <xsd:element minOccurs=""0"" name=""Office"" type=""xsd:string""/>

        <xsd:element minOccurs=""0"" name=""Phone_Number"" type=""xsd:string""/>
        <xsd:element name=""Priority"" type=""s:PriorityType""/>
        <xsd:element minOccurs=""0"" name=""Region"" type=""xsd:string""/>
        <xsd:element minOccurs=""0"" name=""Request_Urgency"" type=""s:Request_UrgencyType""/>
        <xsd:element name=""Requester_Login_Name"" type=""xsd:string""/>
        <xsd:element name=""Requester_Name"" type=""xsd:string""/>
        <xsd:element minOccurs=""0"" name=""Site"" type=""xsd:string""/>
        <xsd:element name=""Source"" type=""s:SourceType""/>
        <xsd:element name=""Status"" type=""s:StatusType""/>

        <xsd:element name=""Submitted_By"" type=""xsd:string""/>
        <xsd:element name=""Summary"" type=""xsd:string""/>
        <xsd:element name=""Type"" type=""xsd:string""/>
        <xsd:element name=""Catalog"" type=""xsd:string""/>
        <xsd:element name=""Assigned_To_Group"" type=""xsd:string""/>
        <xsd:element name=""Resolution_Code"" type=""s:Resolution_CodeType""/>
        <xsd:element name=""Public_Work_Log"" type=""xsd:string""/>
        <xsd:element name=""Private_Work_Log"" type=""xsd:string""/>
       </xsd:sequence>

      </xsd:complexType>
     </xsd:element>
    </xsd:sequence>
   </xsd:complexType>

   <xsd:element name=""AuthenticationInfo"" type=""s:AuthenticationInfo""/>
   <xsd:complexType name=""AuthenticationInfo"">
    <xsd:sequence>
     <xsd:element name=""userName"" type=""xsd:string""/>
     <xsd:element name=""password"" type=""xsd:string""/>
     <xsd:element minOccurs=""0"" name=""authentication"" type=""xsd:string""/>
     <xsd:element minOccurs=""0"" name=""locale"" type=""xsd:string""/>
     <xsd:element minOccurs=""0"" name=""timeZone"" type=""xsd:string""/>

    </xsd:sequence>
   </xsd:complexType>
  </xsd:schema>
 </wsdl:types>

   <message name=""GetListBy_Requester_LoginSoapIn"">
      <part element=""s:GetListBy_Requester_Login"" name=""parameters""/>
   </message>
   <message name=""GetListBy_Requester_LoginSoapOut"">
      <part element=""s:GetListBy_Requester_LoginResponse"" name=""parameters""/>
   </message>
   <message name=""GetListBy_Requester_FullNameSoapIn"">
      <part element=""s:GetListBy_Requester_FullName"" name=""parameters""/>
   </message>
   <message name=""GetListBy_Requester_FullNameSoapOut"">
      <part element=""s:GetListBy_Requester_FullNameResponse"" name=""parameters""/>
   </message>
   <message name=""ARAuthenticate"">
      <part element=""s:AuthenticationInfo"" name=""parameters""/>
   </message>

   <portType name=""_HelpDesk_QueriesPortType"">
      <operation name=""GetListBy_Requester_FullName"">
         <input message=""s:GetListBy_Requester_FullNameSoapIn""/>
         <output message=""s:GetListBy_Requester_FullNameSoapOut""/>
      </operation>
      <operation name=""GetListBy_Requester_Login"">
         <input message=""s:GetListBy_Requester_LoginSoapIn""/>
         <output message=""s:GetListBy_Requester_LoginSoapOut""/>
      </operation>
   </portType>

   <binding name=""_HelpDesk_QueriesSoapBinding"" type=""s:_HelpDesk_QueriesPortType"">
      <soap:binding style=""document"" transport=""http://schemas.xmlsoap.org/soap/http""/>
      <operation name=""GetListBy_Requester_FullName"">
         <soap:operation soapAction=""urn:_HelpDesk_Queries/GetListBy_Requester_FullName"" style=""document""/>
         <input>
            <soap:header message=""s:ARAuthenticate"" part=""parameters"" use=""literal"">
            </soap:header>
            <soap:body use=""literal""/>
         </input>
         <output>
            <soap:body use=""literal""/>
         </output>
      </operation>
      <operation name=""GetListBy_Requester_Login"">
         <soap:operation soapAction=""urn:_HelpDesk_Queries/GetListBy_Requester_Login"" style=""document""/>
         <input>
            <soap:header message=""s:ARAuthenticate"" part=""parameters"" use=""literal"">
            </soap:header>
            <soap:body use=""literal""/>
         </input>
         <output>
            <soap:body use=""literal""/>
         </output>
      </operation>
   </binding>
   <service name=""_HelpDesk_QueriesService"">
      <port binding=""s:_HelpDesk_QueriesSoapBinding"" name=""_HelpDesk_QueriesSoap"">
         <soap:address location=""http://someserver/ARService?server=server&webService=_HelpDesk_Queries""/>
      </port>
   </service>
</definitions>

Note that the signature error is pointing to the implicit header and not the actual messages.

2)  I then removed the operation for GetListBy_Requester_FullName from the wsdl and generated again.  I got the following (with -client -extsh true specified as parameters to wsdl2java) code in the port type:

   @ResponseWrapper(localName = ""GetListBy_Requester_LoginResponse"", targetNamespace = ""urn:_HelpDesk_Queries"", className = ""_helpdesk_queries.GetListOutputMap"")
    @RequestWrapper(localName = ""AuthenticationInfo"", targetNamespace = ""urn:_HelpDesk_Queries"", className = ""_helpdesk_queries.AuthenticationInfo"")
    @WebResult(name = ""getListValues"", targetNamespace = ""urn:_HelpDesk_Queries"")
    @WebMethod(operationName = ""GetListBy_Requester_Login"", action = ""urn:_HelpDesk_Queries/GetListBy_Requester_Login"")
    public java.util.List<_helpdesk_queries.GetListOutputMap.GetListValues> getListByRequesterLogin(
        @WebParam(name = ""userName"", targetNamespace = ""urn:_HelpDesk_Queries"")
        java.lang.String userName,
        @WebParam(name = ""password"", targetNamespace = ""urn:_HelpDesk_Queries"")
        java.lang.String password,
        @WebParam(name = ""authentication"", targetNamespace = ""urn:_HelpDesk_Queries"")
        java.lang.String authentication,
        @WebParam(name = ""locale"", targetNamespace = ""urn:_HelpDesk_Queries"")
        java.lang.String locale,
        @WebParam(name = ""timeZone"", targetNamespace = ""urn:_HelpDesk_Queries"")
        java.lang.String timeZone,
        @WebParam(name = ""AuthenticationInfo"", targetNamespace = ""urn:_HelpDesk_Queries"", header = true)
        AuthenticationInfo parameters
    );
}

The @RequestWrapper is the header, not the GetListBy_Requester_Login message as it should be. The elements of the header are also specified as individual parameters along with the header object.

 I generated the same request in Metro and got the following:

    @WebMethod(operationName = ""GetListBy_Requester_Login"", action = ""urn:_HelpDesk_Queries/GetListBy_Requester_Login"")
    @WebResult(name = ""getListValues"", targetNamespace = ""urn:_HelpDesk_Queries"")
    @RequestWrapper(localName = ""GetListBy_Requester_Login"", targetNamespace = ""urn:_HelpDesk_Queries"", className = ""_helpdesk_queri
es.GetListInputMap"")
    @ResponseWrapper(localName = ""GetListBy_Requester_LoginResponse"", targetNamespace = ""urn:_HelpDesk_Queries"", className = ""_helpd
esk_queries.GetListOutputMap"")
    public List<_helpdesk_queries.GetListOutputMap.GetListValues> getListByRequesterLogin(
        @WebParam(name = ""Requester_Login"", targetNamespace = ""urn:_HelpDesk_Queries"")
        String requesterLogin,
        @WebParam(name = ""AuthenticationInfo"", targetNamespace = ""urn:_HelpDesk_Queries"", header = true, partName = ""parameters"")
        AuthenticationInfo parameters);

Which is more along the lines of what I would expect.  I also can run metro on the whole wsdl without having a problem with the duplicate signatures.  

My supposition is that both of these problems are related to recognition of the implicit header as part of the message and not as a separate header.  

Any ideas or suggestions would be appreciated.  I found a thread from about a year ago with something similar, but didn't see a final resolution.

I am running 2.0.7 release code for the wsdl2java. ",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-07-16 19:28:09.245,,,no_permission,,,,,,,,,,,,,112481,,,Wed Jul 16 19:28:09 UTC 2008,,,,,,0|i13zlb:,231396,,,,,,,,"16/Jul/08 19:28;dkulp;
This turned out to be harder than I thought.   Fixed now but required some changes to the service model.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Potential for NPE in AbstractResourceInfo.clearProxies,CXF-1691,12399720,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,sergey_beryozkin,bradmoody,bradmoody,07/Jul/08 13:10,18/Aug/08 18:26,14/Mar/19 02:29,07/Jul/08 14:41,2.1.2,,,,,,,,,,,,,,2.1.2,,,,JAX-RS,,,,,,0,,,,"I've had NPE thrown in clearProxies method during the call to tlp.remove();

The var ""tlp"" may be null due to an error elsewhere but won't hurt to add a check here.","WinXP pro
Java(TM) 2 Runtime Environment, Standard Edition (build 1.5.0_11-b03)",,,,,,,,,,,,,,,,07/Jul/08 13:11;bradmoody;patch-CXF-1691.txt;https://issues.apache.org/jira/secure/attachment/12385396/patch-CXF-1691.txt,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,Novice,,,,,,,,,,,112477,,,Mon Jul 07 13:11:52 UTC 2008,,,,,,0|i1aclb:,268506,,,,,,,,07/Jul/08 13:11;bradmoody;Patch attached.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CXF assumes class.getPackage() is never null,CXF-1689,12399642,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,hani,hani,05/Jul/08 03:12,28/Jul/08 14:09,14/Mar/19 02:29,16/Jul/08 19:45,2.1.1,,,,,,,,,,,,,,2.0.8,2.1.2,,,Core,,,,,,0,,,,"One example, JAXBExtensionHelper has this line:

cls.getPackage().getAnnotation(XmlSchema.class)

According to the javadocs of Class.getPackage, a classloader may return null if it has not defined a package for the class. Specifying a package is optional, so the class needs to handle getPackage() returning null.

Note that some CXF developers seem to understand this restriction, and so parts of the codebase perform the correct null check for getPackage(), but others seem unaware of it, and so do not check for null. The right solution is to go through every call to getPackage() and add a null check.

If needed (and if it'd speed up the fixing), I can supply a patch to apply to fix all occurrences of this issue.",,,,,,,,,,,,,,,,,09/Jul/08 05:31;hani;cxf-1689.patch;https://issues.apache.org/jira/secure/attachment/12385573/cxf-1689.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2008-07-07 16:59:45.943,,,no_permission,,Novice,,,,,,,,,,,112475,,,Wed Jul 16 19:45:04 UTC 2008,,,,,,0|i0syhj:,167064,,,,,,,,"07/Jul/08 16:59;dkulp;
A patch would be GREAT!

","09/Jul/08 05:31;hani;Fixing the code: 10 minutes
Running tests to find checkstyle violations: 4 hours
Getting closer to switching to cxf from xfire: priceless

Patch enclosed. Some tests fail, but the same ones fail without the patch so all is well.","16/Jul/08 19:45;dkulp;
Patch applied.  Thanks!",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Lots of NPE when parsing documents at start time,CXF-1687,12399623,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Trivial,Fixed,dkulp,gnt,gnt,04/Jul/08 16:00,28/Jul/08 14:09,14/Mar/19 02:29,07/Jul/08 17:42,,,,,,,,,,,,,,,2.0.8,2.1.2,,,,,,,,,0,,,,"I've noticed lots of NPE with the following stack trace:

Signal Dispatcher@475 daemon, priority=9, in group 'system', status: 'RUNNING'

Finalizer@476 daemon, priority=8, in group 'system', status: 'WAIT'
	  at java.lang.Object.wait(Object.java:-1)
	  at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:116)
	  at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:132)
	  at java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:159)

Reference Handler@477 daemon, priority=10, in group 'system', status: 'WAIT'
	  at java.lang.Object.wait(Object.java:-1)
	  at java.lang.Object.wait(Object.java:474)
	  at java.lang.ref.Reference$ReferenceHandler.run(Reference.java:116)

main@2, priority=5, in group 'main', status: 'RUNNING'
	  at org.apache.cxf.staxutils.W3CDOMStreamWriter.writeComment(W3CDOMStreamWriter.java:162)
	  at org.apache.cxf.staxutils.StaxUtils.copy(StaxUtils.java:338)
	  at org.apache.cxf.staxutils.StaxUtils.copy(StaxUtils.java:313)
	  at org.apache.cxf.bus.spring.TunedDocumentLoader.loadFastinfosetDocument(TunedDocumentLoader.java:146)
	  at org.apache.cxf.bus.spring.ControlledValidationXmlBeanDefinitionReader.fastInfosetLoadBeanDefinitions(ControlledValidationXmlBeanDefinitionReader.java:164)
	  at org.apache.cxf.bus.spring.ControlledValidationXmlBeanDefinitionReader.loadBeanDefinitions(ControlledValidationXmlBeanDefinitionReader.java:126)
	  at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:280)
	  at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:131)
	  at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:108)
	  at org.apache.cxf.bus.spring.BusApplicationContext.loadBeanDefinitions(BusApplicationContext.java:256)
	  at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:101)
	  at org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:389)
	  at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:324)
	  at org.apache.cxf.bus.spring.BusApplicationContext.<init>(BusApplicationContext.java:87)
	  at org.apache.cxf.bus.spring.SpringBusFactory.createApplicationContext(SpringBusFactory.java:103)
	  at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:94)
	  at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:69)
	  at org.apache.servicemix.cxfse.CxfSeComponent.doInit(CxfSeComponent.java:73)
	  at org.apache.servicemix.common.AsyncBaseLifeCycle.init(AsyncBaseLifeCycle.java:193)
	  at org.apache.servicemix.common.SyncLifeCycleWrapper.init(SyncLifeCycleWrapper.java:44)
	  at org.apache.servicemix.jbi.framework.ComponentMBeanImpl.init(ComponentMBeanImpl.java:201)
	  at org.apache.servicemix.jbi.container.JBIContainer.activateComponent(JBIContainer.java:1,150)
	  at org.apache.servicemix.jbi.container.JBIContainer.activateComponent(JBIContainer.java:1,112)
	  at org.apache.servicemix.jbi.container.JBIContainer.activateComponent(JBIContainer.java:1,071)
	  at org.apache.servicemix.jbi.container.JBIContainer.activateComponent(JBIContainer.java:1,059)
	  at org.apache.servicemix.jbi.container.SpringJBIContainer.getComponentForEndpoint(SpringJBIContainer.java:175)
	  at org.apache.servicemix.jbi.container.SpringJBIContainer.initEndpoints(SpringJBIContainer.java:151)
	  at org.apache.servicemix.jbi.container.SpringJBIContainer.afterPropertiesSet(SpringJBIContainer.java:106)
	  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1,201)
	  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1,171)
	  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:425)
	  at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:251)
	  at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:156)
	  at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:248)
	  at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:160)
	  at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:287)
	  at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:352)
	  at org.apache.xbean.spring.context.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:161)
	  at org.apache.xbean.spring.context.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:51)
	  at org.apache.servicemix.cxfse.CxfSeContextInjectionTest.createBeanFactory(CxfSeContextInjectionTest.java:71)
	  at org.apache.servicemix.tck.SpringTestSupport.setUp(SpringTestSupport.java:65)
	  at org.apache.servicemix.cxfse.CxfSeContextInjectionTest.setUp(CxfSeContextInjectionTest.java:39)
	  at junit.framework.TestCase.runBare(TestCase.java:125)
	  at junit.framework.TestResult$1.protect(TestResult.java:106)
	  at junit.framework.TestResult.runProtected(TestResult.java:124)
	  at junit.framework.TestResult.run(TestResult.java:109)
	  at junit.framework.TestCase.run(TestCase.java:118)
	  at junit.framework.TestSuite.runTest(TestSuite.java:208)
	  at junit.framework.TestSuite.run(TestSuite.java:203)
	  at junit.framework.TestSuite.runTest(TestSuite.java:208)
	  at junit.framework.TestSuite.run(TestSuite.java:203)
	  at junit.textui.TestRunner.doRun(TestRunner.java:116)
	  at com.intellij.rt.execution.junit.IdeaTestRunner.doRun(IdeaTestRunner.java:65)
	  at junit.textui.TestRunner.doRun(TestRunner.java:109)
	  at com.intellij.rt.execution.junit.IdeaTestRunner.startRunnerWithArgs(IdeaTestRunner.java:24)
	  at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:118)
	  at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:40)

The NPE is thrown because the currentNode is null in the writer, which seems to be the case when the xml document starts with a comment.  Not sure why, but I suppose it should be quite easy to fix and could improve performance at start time.",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112473,,,2008-07-04 16:00:45.0,,,,,,0|i1aclz:,268509,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ExtendedURIResolver returns relative paths after resolving a URI relative to another one.,CXF-1683,12399600,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,daveel,daveel,04/Jul/08 08:55,28/Jul/08 14:09,14/Mar/19 02:29,07/Jul/08 16:36,2.1.1,,,,,,,,,,,,,,2.0.8,2.1.2,,,,,,,,,0,,,,"This showed up by a failure to resolve a XSD which was relatively imported from another XSD which itself was relative to the WSDL.

Solution is simple just move the storing of the new URI until after it has been resolved.",,,,,,,,,,,,,,,,,04/Jul/08 08:58;daveel;CXF-1683.diff;https://issues.apache.org/jira/secure/attachment/12385283/CXF-1683.diff,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2008-07-07 16:36:32.901,,,no_permission,,Novice,,,,,,,,,,,112469,,,Mon Jul 07 16:36:32 UTC 2008,,,,,,0|i0v45r:,179647,,,,,,,,04/Jul/08 08:57;daveel;URIResolver had the same problem in it some time ago as in the linked issue.,04/Jul/08 08:58;daveel;Added Patch for ExtendedURIResolver,"07/Jul/08 16:36;dkulp;
Patch applied.  Thanks!",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Base URL caching in ServletController avoids needed updateDests() call on republishing endpoints,CXF-1681,12399528,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,strider,strider,03/Jul/08 11:29,28/Jul/08 14:09,14/Mar/19 02:29,07/Jul/08 13:36,2.1.1,,,,,,,,,,,,,,2.0.8,2.1.2,,,Transports,,,,,,0,,,,"In updateDests() the following:

        if (base.equals(lastBase)) {
            return;
        }

returns on equal base URLs which results in avoiding the needed second call of

d2.getEndpointInfo().setAddress(base + path);

which is needed to set the fully qualified URI, because the first setAdress() call made by invoke() just sets the relative path.


What i do is:

1. I use the CXFServlet in combination with Jetty (using nearly the original example) except of using 
root.addServlet(servlet, ""/soap/*"") instead of just ""/*"" as the base path.
Now i do:

Endpoint.publish(""/testService"", impl)

resulting in a ServletController which first sets in invoke() the adress to '/testService' and after that the adress will be set again in updateDests() but this time as 'http://localhost:8123/soap/testService'

This works fine for me, now i can load the WSDL for example.

2. The problem now occurs if i indirectly reuse the ServletController by doing the following:

endpoint.stop();
Endpoint.publish(""/testService"", impl)

because the second EndpointInfo.setAdress() call won't be made, because of the base URL matching in updateDests() as shown above.

- The base URL is not changing.
- The second fully qualified EndpointInfo.setAdress() call is missing.
- EndpointInfo contains '/testService' and not as needed 'http://localhost:8123/soap/testService'
- Calling WSDL FQ-URL failes because:
- WSDLQueryHandler can't identify the request using:

isRecognizedQuery()
...
 return endpointInfo.getAddress().contains(UrlUtilities.getStem(baseUri.substring(0, idx)));
",Standalone Jetty,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,Moderate,,,,,,,,,,,112467,,,2008-07-03 11:29:05.0,,,,,,0|i13ztz:,231435,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Schema entries with same targetNamespace produces error in wsdl2java,CXF-1679,12399448,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,,kruzty,kruzty,02/Jul/08 13:29,11/Oct/10 14:52,14/Mar/19 02:29,13/Nov/09 20:10,2.1.1,,,,,,,,,,,,,,2.2,,,,Tooling,,,,,,0,,,,"When running wsdl2java, If there are multiple xsd:schema entries with the same targetNamespace in the wsdl:types section, a ""WSDLToJava Error: Failed to create java parameter..."" error occurs.  I'm not actually sure why the error occurs, but he wsdl validates just fine with the validation tool.

Validates, but causes a problem in wsdl2java:

<wsdl:types>
  <xsd:schema elementFormDefault=""qualified"" targetNamespace=""target:ns"" xmlns:tns=""target:ns"">
    <xsd:include schemaLocation=""../schemas/first.xsd"" />
  </xsd:schema>
  <xsd:schema elementFormDefault=""qualified"" targetNamespace=""target:ns"" xmlns:tns=""target:ns"">
    <xsd:include schemaLocation=""../schemas/second.xsd"" />
  </xsd:schema>
</wsdl:types>

Does not cause a problem:

<wsdl:types>
  <xsd:schema elementFormDefault=""qualified"" targetNamespace=""target:ns"" xmlns:tns=""target:ns"">
    <xsd:include schemaLocation=""../schemas/first.xsd"" />
    <xsd:include schemaLocation=""../schemas/second.xsd"" />
  </xsd:schema>
</wsdl:types>","Windows XP, Eclipse",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-11-13 17:35:46.982,,,no_permission,,,,,,,,,,,,,112465,,,Fri Nov 13 20:10:34 UTC 2009,,,,,,0|i1acn3:,268514,,,,,,,,"13/Nov/09 17:35;dkulp;
Any idea if this is still a problem?   With 2.2.x, we changed how the schemas are loaded internally to using the XmlSchema stuff entirely and also how the elements are looked up from XmlSchema.  Thus, I believe this should be fixed.","13/Nov/09 17:44;kruzty;Wow, that was some time ago - I couldn't say if it is still an issue or not.  I'm sure I came up with a workaround at the time just to move forward.","13/Nov/09 20:10;dkulp;
I'm going to mark this resolved as I'm pretty sure it's now fixed and no one else has encountered it in the last year.    If someone else does encounter something similar, reopen this bug or log a new one (with a testcase would be good). ",,,,,,,,,,,,,,,,,,,,,,,,,,,,
wsdl2java does not generate impl stubs when only logical wsdl is present,CXF-1678,12399395,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,ramnarine,ramnarine,01/Jul/08 19:30,28/Jul/08 14:09,14/Mar/19 02:29,18/Jul/08 19:50,2.0.7,,,,,,,,,,,,,,2.0.8,2.1.2,,,Tooling,,,,,,0,,,,"We have a customer that has a programming model that focuses on logical wsdl first.  So in addition to the interface, they need stub implementation classes to be generated from logical portType elements, even when no binding or service element is present.  Passing -impl or -all to wsdl2java does not help.","Solaris 10, Windows ",,,,,,,,,,,,,,,,17/Jul/08 22:06;ramnarine;CXF-1678.patch;https://issues.apache.org/jira/secure/attachment/12386351/CXF-1678.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2008-07-01 23:38:23.597,,,no_permission,,,,,,,,,,,,,112464,,,Fri Jul 18 19:50:32 UTC 2008,,,,,,0|i0v2yv:,179454,,,,,,,,"01/Jul/08 23:38;gmazza;I believe the JAX-WS spec defines what wsdl2java is supposed to do, so we may not be able to fix this.  I wonder what the JAX-WS reference implementation (Metro) would do here.

Glen
","01/Jul/08 23:53;dkulp;
wsimport  with -verbose just says:
parsing WSDL...

Failed to parse the WSDL.


Not too useful.


That said, that doesn't apply here.   The RI doesn't have tools to generate sample server skeletons and sample clients and such which is what this bug is about.    This DOES affect the generated ""Service"" object as there wouldn't be any ""getXXXPort(..)"" calls generated, but that is minor and not really required anyway.
 


","02/Jul/08 00:00;dkulp;
The other ""issue"" is what to do about the serviceName and name attributes in the WebService annotation for the Impl.   They should match the service/port names in the wsdl.   Probably not major as you can override them in your spring config.  


","17/Jul/08 22:06;ramnarine;The attached patch allows impl's to be generated even when there is only logical wsdl.
This fix assumes spring config can be used to fill in for the missing service name, port, and namespace, once they are known.","18/Jul/08 19:50;dkulp;
Patch applied!  Thanks!",,,,,,,,,,,,,,,,,,,,,,,,,,
oneway request followed by two-way request fails while using JMS Transport. ,CXF-1676,12399264,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,ulhasbhole,ulhasbhole,ulhasbhole,30/Jun/08 10:41,18/Aug/08 18:26,14/Mar/19 02:29,30/Jun/08 11:23,2.0.7,2.1,,,,,,,,,,,,,2.1.2,,,,Transports,,,,,,0,,,,"JMSSessionFactory do not handle the caching of the pooledsession in a scenario where the oneway request is fired first followed by TwoWay request. 
",,7200,7200,,0%,7200,7200,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112462,,,Mon Jun 30 11:23:30 UTC 2008,,,,,,0|i13znr:,231407,,,,,,,,30/Jun/08 11:23;ulhasbhole;Issue is fixed now.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
@QueryParam is not following reference javadoc for primitive types,CXF-1675,12399221,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,,jsunday,jsunday,28/Jun/08 18:13,18/Aug/08 18:26,14/Mar/19 02:29,30/Jul/08 22:05,2.1.2,,,,,,,,,,,,,,2.1.2,,,,JAX-RS,,,,,,0,,,,"The reference javadoc for @DefaultValue states:
If this annotation is not used and the corresponding metadata is not present in the request, the value will be an empty collection for List, Set or SortedSet, null for other object types, and the Java-defined default for primitive types.

If @QueryParameter is used with a primitive type, a null pointer exeption is thrown rather than setting the parameter to the java-defined default:
@Path(""/update/{id}"")
@GET
public Result getUpdates(@PathParam(""since"") long since, @QueryParam(""terse"") boolean terse) { ... }

org.apache.cxf.interceptor.Fault: null while invoking public com.example.Result com.example.Service.getUpdates(long,boolean) with params [0, null].
        at org.apache.cxf.service.invoker.AbstractInvoker.createFault(AbstractInvoker.java:121)
        at org.apache.cxf.service.invoker.AbstractInvoker.invoke(AbstractInvoker.java:113)
        at org.apache.cxf.jaxrs.JAXRSInvoker.invoke(JAXRSInvoker.java:98)
        at org.apache.cxf.jaxrs.JAXRSInvoker.invoke(JAXRSInvoker.java:53)
        at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:56)
        at org.apache.cxf.workqueue.SynchronousExecutor.execute(SynchronousExecutor.java:37)

$ curl http://localhost:2259/example/update/0
<ns1:XMLFault xmlns:ns1=""http://cxf.apache.org/bindings/xformat""><ns1:faultstring xmlns:ns1=""http://cxf.apache.org/bindings/xformat"">java.lang.IllegalArgumentException</ns1:faultstring></ns1:XMLFault>

It seems to ignore @DefaultValue altogether, as the same fault happens if the method is changed to:
public Result getUpdates(@PathParam(""since"") long since, @QueryParam(""terse"") @DefaultValue(""false"") boolean terse) { ... }

",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-06-30 08:32:22.196,,,no_permission,,,,,,,,,,,,,112461,,,Wed Jul 30 22:05:15 UTC 2008,,,,,,0|i13zu7:,231436,,,,,,,,"28/Jun/08 18:17;jsunday;Not sure if this should be split into a second issue, but @DefaultValue doesn't appear to be used at all for objects either:
public Result getUpdates(@PathParam(""since"") long since, @QueryParam(""terse"") @DefaultValue(""false"") Boolean terse) { ... } 
public Result getUpdates(@PathParam(""since"") long since, @QueryParam(""terse"") @DefaultValue(""true"") Boolean terse) { ... } 

Get without query string in both cases results in terse = null instead of the @DefaultValue specified.

",30/Jun/08 08:32;sergey_beryozkin;This is fixed in my snapshot. I hope to see it merged this week,30/Jul/08 22:05;sergey_beryozkin;DefaultValue annotation and default value initialization is now fully supported,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JAXB unmarshalling cannot be configured to use the ObjectFactory,CXF-1674,12399157,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,benneke,benneke,27/Jun/08 10:25,18/Aug/08 18:26,14/Mar/19 02:29,01/Jul/08 20:19,2.0.7,2.1.1,,,,,,,,,,,,,2.1.2,,,,,,,,,,0,,,,"JAXB requires to explicitly configure the Unmarshaller to use the ObjectFactory using setProperty - it will otherwise use reflection (newInstance). An example:

package test;

@XmlRootElement
@XmlType(name = ""data"")
public class Data {
}

public class ExtendedData extends Data {
}

@XmlRegistry
public class ObjectFactory {
   public Data createData() {
      return new ExtendedData();
   }
}

public class Test {

   public static void main(String[] args) throws Exception {
      JAXBContext context = JAXBContext.newInstance(Test.class.getPackage().getName());
      Unmarshaller u1 = context.createUnmarshaller();

      String xml = ""<?xml version=\""1.0\""?><data/>"";
      System.out.println(u1.unmarshal(new StringReader(xml)).getClass().getName());

      Unmarshaller u2 = context.createUnmarshaller();
      u2.setProperty(com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl.FACTORY,
               new ObjectFactory());
      System.out.println(u2.unmarshal(new StringReader(xml)).getClass().getName());
   }
}

Output:
test.Data
test.ExtendedData

To allow setting the above property JAXBDataBinding, JAXBEncoderDecoder and DataReaderImpl would require ""unmarshallerProperties"" (in line with existing marshallerProperties for the DataWriterImpl).
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112460,,,2008-06-27 10:25:22.0,,,,,,0|i1acnj:,268516,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unnecessary dependencies,CXF-1673,12399132,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,chris@die-schneider.net,chris@die-schneider.net,27/Jun/08 00:05,09/Feb/09 22:20,14/Mar/19 02:29,29/Jan/09 20:59,2.1.1,,,,,,,,,,,,,,2.1.4,,,,JAX-WS Runtime,,,,,,1,,,,"The module cxf-frontend-jaxws includes the module cxf-rt-bindings-soap which includes cxf-tools-common. Now the problem is that
cxf-tools-common depends on jaxb-xjc and velocity. While these are useful for tools they are probably not necessary for the runtime of a service.
So I think these dependencies should be deleted. If they are needed in some tools they can be included there.
On the other hand perhaps I am missing something and they are needed somewhere but I can´t imagine where.

Best regards

Christian",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-07-15 14:39:05.221,,,no_permission,,,,,,,,,,,,,50431,,,Thu Oct 16 13:11:44 UTC 2008,,,,,,0|i1acnr:,268517,,,,,,,,15/Jul/08 14:39;daveel;I think jaxb-xjc is used at runtime for generation of dynamic clients not sure if this path to the dependency is correct however?. ,"15/Jul/08 20:31;dkulp;
Yes.   Removing tools-common from the deps would remove velocity off the dep list, but xjc would remain as the jaxb databinding depends on it due to the dymanic client code.

I guess xjc could be flagged scope optional or provided in the jaxb databinding, but that could break existing builds.","24/Jul/08 10:51;daveel;Slightly related issue I was wondering if the geronimo spec jars should be down as provided/optional, after spent a little time tracking down some class cast exceptions based on having some of these apis being provided by classloaders both inside my webapp and by the app server. The scopes used in the pom files seem to be inconsistent between projects.",16/Oct/08 13:11;njiang;move it to CXF 2.1.4,,,,,,,,,,,,,,,,,,,,,,,,,,,
MTOM does not work when add WSS4J interceptors(UsernameToken and Timestamp),CXF-1669,12399085,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,navinbhat,navinbhat,26/Jun/08 13:31,10/Nov/08 10:47,14/Mar/19 02:29,07/Jul/08 19:08,2.1,,,,,,,,,,,,,,2.0.8,2.1.2,,,WS-* Components,,,,,,0,,,,"I have wriitten an Apache CXF client with the following specification,

1. MTOM attachment enabled(implemented by refering http://cwiki.apache.org/CXF20DOC/mtom.html link).
2. WS-Secuirty features namely, UsernameToken and Timestamp (implemented by refering   http://cwiki.apache.org/CXF20DOC/ws-security.html link)

As per my observation, i see that the MTOM attachment gets inlined in the soap body of request, when i enable either of  WS-Security features(UsernameToken or Timestamp).But when i disable WSS4J interceptors i see that client sends the data as MTOM attachment.

I suspect  WSS4J interceptor is causing the problem.Kindly help me in this regard.

Note: I added WSS4J interceptors programmatically.

Thanks in advance,
Navin Bhat

 ","Windows Xp,
JDK 1.5 update 11
apache CXF 2.1 release",259200,259200,,0%,259200,259200,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-06-26 14:29:05.22,,,no_permission,,Moderate,,,,,,,,,,,112456,,,Mon Jul 07 19:08:04 UTC 2008,,,,,,0|i1acon:,268521,,,,,,,,"26/Jun/08 14:29;dkulp;
This is as designed.   Right now, wss4j doesn't know anything about the attachments and thus stuff outside the soap body.   Thus, the data needs to remain inlined to be encrypted and/or signed.


","27/Jun/08 04:02;navinbhat;
If WSS4J is designed to behave that way then,it is impossible for me to transfer large attachments(around 1GB or so) with WS-Security features enabled.I will get heap space exception if i try to send large data.It means it is a shortcoming on the part of apache CXF.I have worked on glassfish ,it does allow me to send large attachments with WSS enabled.

Thanks for your comments Mr.Daniel Kulp.
Let me know if there is a work around.","27/Jun/08 12:43;gmazza;Since Metro solves your needs, I would just use it.  It's a fine product.

","27/Jun/08 16:57;dkulp;
Do you know if metro enrypts/signs the mtom attachments as well or are they passed in the clear?   If you are OK with them being passed in the clear, it's a simple.  Line 73 of the WSS4JOutInterceptor turns off the mtom stuff.   You can just add an interceptor immediately after the WSS4JOutInterceptor to turn it back on.  (or subclass the WSS4JOutInterceptor and reset it after calling super.handleMessage(msg))



","07/Jul/08 19:08;dkulp;
I've added a AllowMTOM property to the out interceptor to allow the mtom settings to go through.  Keep in mind, attachments are not considered in the security actions (encrypting/signatures).",,,,,,,,,,,,,,,,,,,,,,,,,,
WsdlLocation can't not be set from <simple:server> or <jaxws:server>,CXF-1667,12398974,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,njiang,njiang,njiang,25/Jun/08 08:51,28/Jul/08 14:09,14/Mar/19 02:29,26/Jun/08 05:25,2.0.4,2.0.5,2.0.6,2.0.7,2.1,2.1.1,,,,,,,,,2.0.8,2.1.2,,,Configuration,,,,,,0,,,,"org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'simpleWithWSDL': Initialization of bean failed; nested exception is org.springframework.beans.InvalidPropertyException: Invalid property 'wsdlLocation' of bean class [org.apache.cxf.frontend.spring.ServerFactoryBeanDefinitionParser$SpringServerFactoryBean]: No property 'wsdlLocation' found
Caused by: org.springframework.beans.InvalidPropertyException: Invalid property 'wsdlLocation' of bean class [org.apache.cxf.frontend.spring.ServerFactoryBeanDefinitionParser$SpringServerFactoryBean]: No property 'wsdlLocation' found
	at org.springframework.beans.BeanWrapperImpl.convertForProperty(BeanWrapperImpl.java:376)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1106)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:862)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:423)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:249)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:155)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:246)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:160)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:291)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:352)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:122)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:76)
	at org.apache.cxf.frontend.spring.SpringBeansTest.testServers(SpringBeansTest.java:50)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at org.junit.internal.runners.TestMethod.invoke(TestMethod.java:59)
	at org.junit.internal.runners.MethodRoadie.runTestMethod(MethodRoadie.java:98)
	at org.junit.internal.runners.MethodRoadie$2.run(MethodRoadie.java:79)
	at org.junit.internal.runners.MethodRoadie.runBeforesThenTestThenAfters(MethodRoadie.java:87)
	at org.junit.internal.runners.MethodRoadie.runTest(MethodRoadie.java:77)
	at org.junit.internal.runners.MethodRoadie.run(MethodRoadie.java:42)
	at org.junit.internal.runners.JUnit4ClassRunner.invokeTestMethod(JUnit4ClassRunner.java:88)
	at org.junit.internal.runners.JUnit4ClassRunner.runMethods(JUnit4ClassRunner.java:51)
	at org.junit.internal.runners.JUnit4ClassRunner$1.run(JUnit4ClassRunner.java:44)
	at org.junit.internal.runners.ClassRoadie.runUnprotected(ClassRoadie.java:27)
	at org.junit.internal.runners.ClassRoadie.runProtected(ClassRoadie.java:37)
	at org.junit.internal.runners.JUnit4ClassRunner.run(JUnit4ClassRunner.java:42)
..

",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112455,,,Thu Jun 26 05:25:45 UTC 2008,,,,,,0|i1acp3:,268523,,,,,,,,"26/Jun/08 05:25;njiang;Done, the patches are applied into the trunk  and 2.0.x branch.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"org.apache.cxf.databinding.AbstractDataBinding.class, ws-addressing and offline workstation",CXF-1666,12398922,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,ffang,fullocto,fullocto,24/Jun/08 14:53,04/Jun/09 21:34,14/Mar/19 02:29,20/Dec/08 16:51,2.1.1,,,,,,,,,,,,,,Invalid,,,,,,,,,,0,,,,"Hi all, 

Actually I am using CXF in Apache servicemix and I have a problem when I want to use a proxy. This ""proxy"" is some kind of webservice client created thanks to an annotated class.
In this annotated class I am using wsaddressing classes either JAXWS compliant (javax.xml.ws.addressing.W3CEnpointReference) or CXF (org.apache.cxf.addressing.EndpointReferenceType).
I work on an offline computer and I have an error during the creation of the proxy (done by spring)

I found the problem: it changes the schemaLocation (ws-addr.xsd) and gives an internet address http://www.w3.org/2006/03/addressing/ws-addr.xsd 
As I can't access internet, it crashes, in debug mode I changed (""hot change"") the value to ws-addr.xsd (my file) and it works.

Is there another solution such as put the ws-addr somewhere in an archive/resource folder that can be automatically detect?

TY 
Brice
-------------------------------------------------------------------------------------------------------------------------------------
I have already posted on servicemix forum:
http://www.nabble.com/CXF-SE%3A-Error-during-the-creation-of-proxy-ts17819062.html    
If you need more information, but in fact I was quite wrong at the beginning...
",Used in servicemix during the creation of a webservice ,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-06-24 15:02:19.355,,,no_permission,,,,,,,,,,,,,112454,,,Sat Dec 20 16:17:27 UTC 2008,,,,,,0|i0v1wf:,179281,,,,,,,,"24/Jun/08 15:02;ffang;Hi Brice,

Just paste comment from Dan Kulp about SM-1398

Related to this....

In CXF 2.1.1 (not in any of the 2.0.x series), I updated the java first stuff to consult the OASIS catalogs.   Thus, with 2.1.1, you can add a catalog to your application that would point the w3c schemas to local copies and such.    With straight CXF, it's just adding a META-INF/jax-ws-catalog.xml file your application.  Not sure how to do it with ServiceMix.

Obviously, that doesn't help the 2.0.x stuff much.   :-(

Dan

I believe in servicemix trunk (which use cxf 2.1.1 snapshot) we also can take advantage of this feature, but I have no time to get it a try yet. Hopefully I can figure it out ASAP.

Freeman","24/Jun/08 15:47;fullocto;Thank you, I'm sorry I didn't see this post.
I'll try to find some information about it

Really thank you for your help
Brice BRAUN




-----Message d'origine-----
De : Freeman Fang (JIRA) [mailto:jira@apache.org]

    [ https://issues.apache.org/jira/browse/CXF-1666?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&focusedCommentId=12607643#action_12607643 ] 

Freeman Fang commented on CXF-1666:
-----------------------------------

Hi Brice,

Just paste comment from Dan Kulp about SM-1398

Related to this....

In CXF 2.1.1 (not in any of the 2.0.x series), I updated the java first stuff to consult the OASIS catalogs.   Thus, with 2.1.1, you can add a catalog to your application that would point the w3c schemas to local copies and such.    With straight CXF, it's just adding a META-INF/jax-ws-catalog.xml file your application.  Not sure how to do it with ServiceMix.

Obviously, that doesn't help the 2.0.x stuff much.   :-(

Dan

I believe in servicemix trunk (which use cxf 2.1.1 snapshot) we also can take advantage of this feature, but I have no time to get it a try yet. Hopefully I can figure it out ASAP.

Freeman


-- 
This message is automatically generated by JIRA.
-
You can reply to this email to add a comment to the issue online.
","20/Dec/08 16:17;ffang;this is caused by https://issues.apache.org/activemq/browse/SM-1744
will fix it there",,,,,,,,,,,,,,,,,,,,,,,,,,,,
org.apache.cxf.jaxws.interceptors.SwAOutInterceptor:197 | Unreachable Code,CXF-1665,12398913,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,dkulp,radumanolescu,radumanolescu,24/Jun/08 12:47,28/Jul/08 14:09,14/Mar/19 02:29,07/Jul/08 19:19,2.1.1,,,,,,,,,,,,,,2.0.8,2.1.2,,,Core,,,,,,0,,,,"Examine the code fragment below to see that line 197 is unreachable:
On line 148, dh=null.
Then we test the object o for its data type, in a series of if/elseif
clauses.
There are two possibilities for the object o:
1. o instanceof Source / Image / DataHandler
2. all other situations
 
In situation 1, execution will enter the blocks after lines 151, or 155,
or 182, then continue from line 202.
In situation 2, execution will not enter any of the blocks after lines
151, or 155, or 182. As a result, dh is still null when we reach line
194, and a Fault is thrown.
Either way, execution cannot reach line 197.
 
package org.apache.cxf.jaxws.interceptors;
public class SwAOutInterceptor extends AbstractSoapInterceptor {
            DataHandler dh = null; // LINE 148            
            if (o instanceof Source) { // LINE 151
                dh = new DataHandler(createDataSource((Source)o, ct));

            } else if (o instanceof Image) { // LINE 155
                dh = new DataHandler(new ByteArrayDataSource(bos.toByteArray(), ct));
            } else if (o instanceof DataHandler) { // LINE 182
                dh = (DataHandler) o;
            } else if (dh == null) { // LINE 194
                throw new Fault(...);
            } else if (dh.getDataSource() instanceof URLDataSource) { // <========== LINE 197: UNREACHABLE
                URLDataSource ds = (URLDataSource)dh.getDataSource();
                dh = new DataHandler(ds.getURL()); 
                ct = ds.getContentType();
            } // LINE 201
",This is a coding error which will manifest itself on every platform.,172800,172800,,0%,172800,172800,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,Moderate,,,,,,,,,,,112453,,,2008-06-24 12:47:53.0,,,,,,0|i0syhr:,167065,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Attempting to use a Spring configured HTTPConduit causing compatability problems with Spring 2.5.4 testing framework,CXF-1663,12398702,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,dkulp,james.kavanagh,james.kavanagh,20/Jun/08 13:21,28/Jul/08 14:09,14/Mar/19 02:29,07/Jul/08 21:30,2.0.5,,,,,,,,,,,,,,2.0.8,2.1.2,,,Transports,,,,,,1,,,,"Hi there,

I'm attempting to run some integration tests with a spring configured HTTP conduit:
    <http:conduit name=""*.http-conduit"">
        <http:tlsClientParameters secureSocketProtocol=""SSL"">
            <sec:keyManagers keyPassword=""0123456789"">
                <sec:keyStore type=""PKCS12"" password=""0123456789""
                    file=""src/test/resources/keystores/client.p12""/>
            </sec:keyManagers>
            <sec:trustManagers>
                <sec:keyStore type=""JKS"" password=""0123456789""
                    file=""src/test/resources/keystores/truststore.jks"" />
            </sec:trustManagers>        
            <sec:cipherSuitesFilter>
                <!-- these filters ensure that a ciphersuite with
                    export-suitable or null encryption is used,
                    but exclude anonymous Diffie-Hellman key change as
                    this is vulnerable to man-in-the-middle attacks -->
                <sec:include>.*_EXPORT_.*</sec:include>
                <sec:include>.*_EXPORT1024_.*</sec:include>
                <sec:include>.*_WITH_DES_.*</sec:include>
                <sec:include>.*_WITH_NULL_.*</sec:include>
                <sec:exclude>.*_DH_anon_.*</sec:exclude>
            </sec:cipherSuitesFilter>
        </http:tlsClientParameters>
    </http:conduit>              

My test class is using JUnit 4 annotations and I'm also extending from AbstractJUnit4SpringContextTests which as you may know automatically loads the spring context for you with autowiring turned on. The problem I'm having is that HTTPConduit declares some of its methods with the @Resource annotation which Spring then attempts to resolved dependencies for and fails. The issue is that the HTTPConduit class does not need these dependencies injected in order to function correctly so I guess I'm wondering why they are annotated as such. Is this necessary?

If so is there anything I can do to work around this problem?

Here's a sample stack trace to illustrated the problem that occurs:
javax.xml.ws.soap.SOAPFaultException: Error creating bean with name '*.http-conduit': Injection of resource methods failed; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No unique bean of type [org.apache.cxf.configuration.security.AuthorizationPolicy] is defined: Unsatisfied dependency of type [class org.apache.cxf.configuration.security.AuthorizationPolicy]: expected at least 1 matching bean
	at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:211)
	at $Proxy54.getAccountDetails(Unknown Source)
	at com.sportex.regpay.payment.mtapi.transfers.TransferFundsIntegrationTest.performTransferCreditSuccessfulWithGBP(TransferFundsIntegrationTest.java:97)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.springframework.test.context.junit4.SpringTestMethod.invoke(SpringTestMethod.java:163)
	at org.springframework.test.context.junit4.SpringMethodRoadie.runTestMethod(SpringMethodRoadie.java:233)
	at org.springframework.test.context.junit4.SpringMethodRoadie$RunBeforesThenTestThenAfters.run(SpringMethodRoadie.java:333)
	at org.springframework.test.context.junit4.SpringMethodRoadie.runWithRepetitions(SpringMethodRoadie.java:217)
	at org.springframework.test.context.junit4.SpringMethodRoadie.runTest(SpringMethodRoadie.java:197)
	at org.springframework.test.context.junit4.SpringMethodRoadie.run(SpringMethodRoadie.java:143)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.invokeTestMethod(SpringJUnit4ClassRunner.java:142)
	at org.junit.internal.runners.JUnit4ClassRunner.runMethods(JUnit4ClassRunner.java:51)
	at org.junit.internal.runners.JUnit4ClassRunner$1.run(JUnit4ClassRunner.java:44)
	at org.junit.internal.runners.ClassRoadie.runUnprotected(ClassRoadie.java:27)
	at org.junit.internal.runners.ClassRoadie.runProtected(ClassRoadie.java:37)
	at org.junit.internal.runners.JUnit4ClassRunner.run(JUnit4ClassRunner.java:42)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:38)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name '*.http-conduit': Injection of resource methods failed; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No unique bean of type [org.apache.cxf.configuration.security.AuthorizationPolicy] is defined: Unsatisfied dependency of type [class org.apache.cxf.configuration.security.AuthorizationPolicy]: expected at least 1 matching bean
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.postProcessPropertyValues(CommonAnnotationBeanPostProcessor.java:306)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:996)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.configureBean(AbstractAutowireCapableBeanFactory.java:283)
	at org.springframework.beans.factory.wiring.BeanConfigurerSupport.configureBean(BeanConfigurerSupport.java:155)
	at org.apache.cxf.configuration.spring.ConfigurerImpl.configureBean(ConfigurerImpl.java:114)
	at org.apache.cxf.configuration.spring.ConfigurerImpl.configureWithWildCard(ConfigurerImpl.java:134)
	at org.apache.cxf.configuration.spring.ConfigurerImpl.configureBean(ConfigurerImpl.java:101)
	at org.apache.cxf.configuration.spring.ConfigurerImpl.configureBean(ConfigurerImpl.java:84)
	at org.apache.cxf.transport.http.AbstractHTTPTransportFactory.configure(AbstractHTTPTransportFactory.java:223)
	at org.apache.cxf.transport.http.AbstractHTTPTransportFactory.getConduit(AbstractHTTPTransportFactory.java:163)
	at org.apache.cxf.transport.http.AbstractHTTPTransportFactory.getConduit(AbstractHTTPTransportFactory.java:145)
	at org.apache.cxf.endpoint.AbstractConduitSelector.getSelectedConduit(AbstractConduitSelector.java:73)
	at org.apache.cxf.endpoint.UpfrontConduitSelector.prepare(UpfrontConduitSelector.java:61)
	at org.apache.cxf.endpoint.ClientImpl.prepareConduitSelector(ClientImpl.java:452)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:273)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:222)
	at org.apache.cxf.frontend.ClientProxy.invokeSync(ClientProxy.java:73)
	at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:170)
	... 24 more
Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No unique bean of type [org.apache.cxf.configuration.security.AuthorizationPolicy] is defined: Unsatisfied dependency of type [class org.apache.cxf.configuration.security.AuthorizationPolicy]: expected at least 1 matching bean
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:613)
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.getResource(CommonAnnotationBeanPostProcessor.java:423)
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor$ResourceElement.getResourceToInject(CommonAnnotationBeanPostProcessor.java:502)
	at org.springframework.beans.factory.annotation.InjectionMetadata$InjectedElement.inject(InjectionMetadata.java:192)
	at org.springframework.beans.factory.annotation.InjectionMetadata.injectMethods(InjectionMetadata.java:117)
	at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.postProcessPropertyValues(CommonAnnotationBeanPostProcessor.java:303)
	... 41 more


Many thanks,
James K




",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-07-03 12:55:23.32,,,no_permission,,,,,,,,,,,,,112451,,,Thu Jul 03 12:55:23 UTC 2008,,,,,,0|i1acpj:,268525,,,,,,,,"03/Jul/08 12:55;jgeraerts;I was able to work around this issue by using the legacy AbstractDependencyInjectionSpringContextTests and not use @Resource 

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"style=""rpc"" in soapBinging configuration is not honored",CXF-1661,12398623,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,dkulp,dkulp,19/Jun/08 20:10,28/Jul/08 14:09,14/Mar/19 02:29,19/Jun/08 20:28,,,,,,,,,,,,,,,2.0.8,2.1.2,,,Soap Binding,,,,,,0,,,,"
A configuration like:
  <jaxws:server id=""inlineSoapBindingRPC"" 
    serviceClass=""org.apache.cxf.jaxws.service.Hello""
    address=""http://localhost:8080/testrpc"">
    <jaxws:binding>
      <soap:soapBinding style=""rpc""/>
    </jaxws:binding>
  </jaxws:server>

is not honoring the style=""rpc"" part.   It's still coming out doc/lit/wrapped.",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112449,,,2008-06-19 20:10:29.0,,,,,,0|i0v387:,179496,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Nested namespace defined spring beans aren't properly unique,CXF-1660,12398621,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,dkulp,dkulp,19/Jun/08 20:08,28/Jul/08 14:09,14/Mar/19 02:29,19/Jun/08 20:27,2.0.7,2.1.1,,,,,,,,,,,,,2.0.8,2.1.2,,,Configuration,,,,,,0,,,,"
With a spring config like:
  <jaxws:server id=""inlineSoapBinding12"" 
    serviceClass=""org.apache.cxf.jaxws.service.Hello""
    address=""http://localhost:8080/test"">
    <jaxws:binding>
      <soap:soapBinding mtomEnabled=""true"" version=""1.2""/>
    </jaxws:binding>
  </jaxws:server>
  
  <jaxws:server id=""inlineSoapBinding11"" 
    serviceClass=""org.apache.cxf.jaxws.service.Hello""
    address=""http://localhost:8080/testrpc"">
    <jaxws:binding>
      <soap:soapBinding mtomEnabled=""false"" version=""1.1""/>
    </jaxws:binding>
  </jaxws:server>

Only a single ""SoapBindingConfiguration"" object is created.   Thus, the properties for the second one aren't honored.



",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112448,,,2008-06-19 20:08:48.0,,,,,,0|i0v3uf:,179596,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Eclipse plugin has ${cxf.version} in directory name,CXF-1659,12398592,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,janstey,janstey,19/Jun/08 14:35,28/Jul/08 14:09,14/Mar/19 02:29,19/Jun/08 15:26,2.1,,,,,,,,,,,,,,2.0.8,2.1.2,,,Tooling,,,,,,0,,,,"The cxf-eclipse-plugin here

http://repo1.maven.org/maven2/org/apache/cxf/cxf-eclipse-plugin/2.1/cxf-eclipse-plugin-2.1.zip

contains a directory named ""org.apache.cxf_${cxf.version}"" which should be ""org.apache.cxf_2.1""",,,,,,,,,,,,,,,,,19/Jun/08 14:36;janstey;fix_eclipse_plugin.patch;https://issues.apache.org/jira/secure/attachment/12384295/fix_eclipse_plugin.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112447,,,Thu Jun 19 16:03:34 UTC 2008,,,,,,0|i0v3ov:,179571,,,,,,,,19/Jun/08 14:36;janstey;Fix for this issue,19/Jun/08 16:03;janstey;Thanks for committing this Dan.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The jbi transport should honor the sendSync flag so that xa transactions are handled correctly in smx3,CXF-1658,12398534,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,gnt,gnt,gnt,18/Jun/08 20:17,28/Jul/08 14:09,14/Mar/19 02:29,18/Jun/08 20:20,,,,,,,,,,,,,,,2.0.8,2.1.2,,,Transports,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112446,,,Wed Jun 18 20:20:05 UTC 2008,,,,,,0|i1acpz:,268527,,,,,,,,"18/Jun/08 20:20;gnt;Sending        jbi/src/main/java/org/apache/cxf/transport/jbi/JBIDestinationOutputStream.java
Transmitting file data .
Committed revision 669277.

Sending        rt/transports/jbi/src/main/java/org/apache/cxf/transport/jbi/JBIDestinationOutputStream.java
Transmitting file data .
Committed revision 669278.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CheckFaultInterceptor causes XMLStreamReader to throw IllegalState at doc end,CXF-1657,12398506,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,jaysonraymond,jaysonraymond,18/Jun/08 13:49,18/Aug/08 18:26,14/Mar/19 02:29,08/Aug/08 21:23,2.1,,,,,,,,,,,,,,2.0.9,2.1.2,,,Soap Binding,,,,,,1,,,,"From handleMessage():
  :
        try {
            // advance to first tag.
            int x = xmlReader.getEventType();
            while (x != XMLStreamReader.START_ELEMENT
                && x != XMLStreamReader.END_ELEMENT
                && xmlReader.hasNext()) {
                x = xmlReader.next();
            }
        } catch (XMLStreamException e) {
            throw new SoapFault(new Message(""XML_STREAM_EXC"", LOG), e, 
                                message.getVersion().getSender());
        }
        if (message.getVersion().getFault().equals(xmlReader.getName())) {
 :
In the case where hasNext() == false (e.g. document end) will cause the subsequent call to xmlReader.getName() to throw an IllegalStateException, as per the javax.xml.stream,XMLStreamReader interface. It would seem the appropriate response would be to simply return in this case:

  :
        try {
            // advance to first tag.
            int x = xmlReader.getEventType();
            while (x != XMLStreamReader.START_ELEMENT
                && x != XMLStreamReader.END_ELEMENT
                && xmlReader.hasNext()) {
                x = xmlReader.next();
            }
            if ( x==XMLStreamReader.END_DOCUMENT) return;
        } catch (XMLStreamException e) {
 :
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112445,,,2008-06-18 13:49:15.0,,,,,,0|i1acq7:,268528,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE when no sub-resource method found that matches to the request,CXF-1655,12398443,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,sergey_beryozkin,zagyvaib,zagyvaib,17/Jun/08 18:10,18/Aug/08 18:26,14/Mar/19 02:29,03/Jul/08 17:10,2.1,,,,,,,,,,,,,,2.1.2,,,,JAX-RS,,,,,,0,,,,"Hi,

In the process of matching a request to a resource method, a sub-resource locator (if any involved) returns a sub-resource class. CXF will try to find a method in that class with which it continues the request matching, but it doesn't check if a suitable method can actually be found. This can result in a NPE.

At org.apache.cxf.jaxrs.JAXRSInvoker.invoke(JAXRSInvoker.java:139):

OperationResourceInfo subOri = JAXRSUtils.findTargetMethod(subCri, 
														   subResourcePath, 
														   httpMethod, 
														   values, 
														   contentType, 
														   acceptContentType);

This call to findTargetMethod() is made in order to get the handler method from the sub-resource class. At this point a check is missing to see whether subOri is null, because later it is assumed to represent either a sub-resource method or a sub-resource locator. 
subOri can be null for a number of reasons:
  1. no method found with matching URI template,
  2. no resource method found for the given httpMethod,
  3. no method found with matching @ConsumeMime value,
  4. no method found with matching @ProduceMime value.

According to the JAX-RS spec v0.6, section 2.5, step 3, the above cases have to result in:
  1. well, not sure about this, step 3.(c) simply says ""otherwise no matching resource method can be found and the algorithm terminates"". I would guess a not found response (HTTP 404 status) would be proper, as this is similar to the case in step 2.(e).
  2. a method not allowed response (HTTP 405 status)
  3. an unsupported media type response (HTTP 415 status)
  4. a not acceptable response (HTTP 406 status)

Sorry, I don't feel familiar enough with the code yet to try to send a patch for this bug.

Thanks,
Balazs
",,,,,,,,,,,,,,,,,17/Jun/08 18:13;zagyvaib;test.zip;https://issues.apache.org/jira/secure/attachment/12384148/test.zip,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2008-06-18 13:41:53.678,,,no_permission,,Moderate,,,,,,,,,,,112443,,,Thu Jul 03 17:10:17 UTC 2008,,,,,,0|i1acqn:,268530,,,,,,,,17/Jun/08 18:13;zagyvaib;Attaching a test that shows the 4th sub-case of the described bug.,"18/Jun/08 13:41;sergey_beryozkin;Thanks for the analysis, it's very welcome. This NullPointerException is fixed in my private snapshot but I won't have time to ensure all the right error status codes are returned. We'll fixed it afterwards.
 ",03/Jul/08 17:10;sergey_beryozkin;This should be fixed in 2.1.2 or on the trunk - feel free to reopen this JIRA if proved otherwise,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Deviation from spec: unnecessary check for @ProduceMime of sub-resource locators,CXF-1653,12398431,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,sergey_beryozkin,zagyvaib,zagyvaib,17/Jun/08 14:23,18/Aug/08 18:26,14/Mar/19 02:29,03/Jul/08 17:17,2.1,,,,,,,,,,,,,,2.1.2,,,,JAX-RS,,,,,,0,,,,"Hi,

I'm experimenting with restful services, and stumbled upon something that seems to be a deviation from the specification in CXF's implementation of jax-rs: when matching a request to resource methods, CXF tries to match the @ProduceMime value of sub-resource locators with the request's Accept header. See the second condition in the first line of the below code snippet from JAXRSUtils.findTargetMethod():

if (ori.isSubResourceLocator() && matchMimeTypes(requestType, acceptType, ori)) {
	candidateList.put(ori, map);
} else if (ori.getHttpMethod().equalsIgnoreCase(httpMethod)
		   && matchMimeTypes(requestType, acceptType, ori)) {

The call to matchMimeTypes() in the first condition is problematic for two reasons:
  1. (in my understanding) according to the specification, sub-resource locators never has to be filtered by media types. See spec v0.6 (https://jsr311.dev.java.net/drafts/spec20080131.pdf) section 2.5: step 2.(d) applies to sub-resource locators, and filters them only by URI template matching. Then the 4th point of step 3.(a) filters methods by matching their @ProduceMime values with the request's Accept header, but at this step we only have resource methods at hand, and no sub-resource locators at all.
  2. This code introduces a bug by which an NPE will be thrown in the else branch of the above code snippet, when ori is a sub-resource locator, and the if condition in the first line evaluates to false due to mismatching mime-types. In this case ori.getHttpMethod() still returns null, thus ori.getHttpMethod().equalsIgnoreCase(httpMethod) throws an NPE when evaluating the second if. This happens if the first media type in the request's Accept header doesn't match with the @ProduceMime value of the sub-resource locator. (see the attached test-case showing this bug).

Basically, it doesn't make any sense to annotate a sub-resource locator with @ProduceMime, as it doesn't produce any content, just relays the request to another resource class. The specification confirms this when stating (section 2.4 in spec v0.6): ""Application classes can declare the supported request and response media types using the @ProduceMime and @ConsumeMime annotations. These annotations MAY be applied to a resource method, a resource class, or to an entity provider..."" The mentioned three things don't include sub-resource locators according to the terminology in section 1.5.

Ok, sorry for the longish description, I just wanted to propose the attached patch removing the matchMimeTypes() call from the first line above.

Thanks,
Balazs",,,,,,,,,,,,,,,,,17/Jun/08 14:26;zagyvaib;JAXRSUtils.patch;https://issues.apache.org/jira/secure/attachment/12384134/JAXRSUtils.patch,17/Jun/08 14:24;zagyvaib;test.zip;https://issues.apache.org/jira/secure/attachment/12384133/test.zip,,,,,2.0,,,,,,,,,,,,,,,,,,,,2008-06-17 17:12:25.553,,,no_permission,,Novice,,,,,,,,,,,112441,,,Thu Jul 03 17:17:15 UTC 2008,,,,,,0|i1acqv:,268531,,,,,,,,17/Jun/08 14:24;zagyvaib;test case for the bug,17/Jun/08 14:26;zagyvaib;proposed patch,"17/Jun/08 17:12;sergey_beryozkin;Thanks for the patch. I'll need to confirm it on the jax-rs users list to be 100% sure.
I think you're absolutely right","03/Jul/08 17:17;sergey_beryozkin;Done on the trunk, thanks for the patch. Please reopen if you do need it applied to 2.1 as well",,,,,,,,,,,,,,,,,,,,,,,,,,,
CXF Decoupled Endpoints are not getting cleaned up properly even after bus.Shutdown() in org.apache.cxf.systest.ws.rm.SequenceTest.,CXF-1652,12398430,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,ffang,ulhasbhole,ulhasbhole,17/Jun/08 14:08,18/Aug/08 18:26,14/Mar/19 02:29,06/Aug/08 13:41,2.0.6,,,,,,,,,,,,,,2.0.9,2.1.2,,,Transports,,,,,,0,,,,"I am getting some test failures in ServiceMix test related to CXF  which points to lingering Decoupled endpoints started by some previous test. 
So I tried org.apache.cxf.systest.ws.rm.SequenceTest from CXF Systest module and debugged it in Eclipse and see the same behaviour. If you monitor the threads each test that starts decoupled endpoint never get cleaned up and jetty therads keep listening on those ports.

how To reproduce:
Run org.apache.cxf.systest.ws.rm.SequenceTest  from eclipse and monitor debug stack trace. You will see the list of threads running with listener on port 9999,9998,9997 ....

",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-08-06 13:41:13.289,,,no_permission,,,,,,,,,,,,,112440,,,Wed Aug 06 13:41:13 UTC 2008,,,,,,0|i0v3cf:,179515,,,,,,,,"26/Jun/08 17:31;ulhasbhole;Further analysis suggest that the jettyHTTPDestination's deactiveate() method which is responsible for removing servant never get called.  Even if Bus.shutdown() would call jettyHTTPDestination shutdown() which then calls jettyHTTPTransportFactory's removeDestination(), This sequence only removes the Destination from the map hold by jettyHTTPTransportFactory but doesn't really inform JettyHTTPServerEngine to remove the servant. So unless the JVM is shutdown jetty threads will never go away.

I understand that there is some problem with keep alive and socket remaining open for 60 second afterwards as per the comment in jettyHTTPServerEngine's shouldDestroyPort() method. 

","06/Aug/08 13:41;ffang;commit fix
http://svn.apache.org/viewvc?rev=683262&view=rev for trunk
http://svn.apache.org/viewvc?rev=683216&view=rev for 2.0.x branch",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
localtransport  Concurrent problem,CXF-1649,12398213,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,ispx_team,ispx_team,13/Jun/08 07:05,03/Jul/08 17:19,14/Mar/19 02:29,16/Jun/08 20:15,2.1,,,,,,,,,,,,,,2.0.7,2.1.1,,,Transports,,,,,,0,,,,"I start 20 service with localtransport like this:
<jaxws:server xmlns:jaxws=""http://cxf.apache.org/jaxws"" id=""kimberlyServiceLocalServer"" serviceBean=""#kimberlyWebService"" address=""local://KimberlyService"">
    <jaxws:serviceFactory>
      <ref bean=""jaxws-and-xmlbean-service-factory"" />
    </jaxws:serviceFactory>
  </jaxws:server>
  
and start 20 client call those local service:

<jaxws:client xmlns:jaxws=""http://cxf.apache.org/jaxws"" id=""kimberlyServiceClient"" serviceClass=""com.KimberlyWebService"" address=""local://KimberlyService"">
    <jaxws:binding>
      <soap:soapBinding xmlns:soap=""http://cxf.apache.org/bindings/soap"" mtomEnabled=""true"" version=""1.2"" />
    </jaxws:binding>
    <jaxws:dataBinding>
      <bean class=""org.apache.cxf.xmlbeans.XmlBeansDataBinding"" />
    </jaxws:dataBinding>
  </jaxws:client>
  
  when I run call client I meet this error, and sometime it can success.
  
  Exception in thread ""Thread-11"" java.util.ConcurrentModificationException
        at java.util.HashMap$HashIterator.nextEntry(HashMap.java:841)
        at java.util.HashMap$EntryIterator.next(HashMap.java:883)
        at java.util.HashMap$EntryIterator.next(HashMap.java:881)
        at org.apache.cxf.transport.local.LocalTransportFactory.copy(LocalTransp
ortFactory.java:166)
        at org.apache.cxf.transport.local.LocalConduit$1$1.run(LocalConduit.java
:123)
        at java.lang.Thread.run(Thread.java:595)
2008-6-13 13:50:38 org.apache.cxf.endpoint.ClientImpl waitResponse
警告: Timed out waiting for response to operation {http://www.test.com/schema/
aes}SaveCommodity.",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-06-13 18:15:49.215,,,no_permission,,,,,,,,,,,,,112438,,,Fri Jun 13 18:15:49 UTC 2008,,,,,,0|i143gn:,232024,,,,,,,,"13/Jun/08 18:15;dkulp;
I've seen this in our system tests VERY occasionally, but not enough to reproduce it reliably enough to debug it.  :-(


I've just committed some fixes the the Local transport that I think will fix this, but since I really am having issues trying to reproduce it to start of with, I'm not 100% positive it's completely fixed.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Non-String Placeholders Fail to Validate,CXF-1647,12398185,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,dkulp,egoldfarb,egoldfarb,12/Jun/08 18:38,22/Sep/16 05:55,14/Mar/19 02:29,09/Nov/09 21:12,2.1,,,,,,,,,,,,,,2.2.5,,,,Configuration,,,,,,1,,,,"Using the schema-based spring bean configuration doesn't work with some property placeholders which are required to be integers.

The timeout properties are declared as <xsd:integer> in the XSD, making the configuration fail.

The MULE project had this issue as well, they handled it by introducing a special replaceable types in their schema.
See http://mule.mulesource.org/jira/browse/MULE-1887

I'm not using CXF's configuration reader or servlet. I am loading the beans via mule2 by including the application-context.xml file in mule-config.xml. It uses Spring for configuration.  

<mule xmlns=""http://www.mulesource.org/schema/mule/core/2.0""
	xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
	xmlns:spring=""http://www.springframework.org/schema/beans""
	xsi:schemaLocation=""
                http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
                http://www.mulesource.org/schema/mule/core/2.0 http://www.mulesource.org/schema/mule/core/2.0/mule.xsd"">
	<spring:beans>
		<spring:import resource=""/application-context.xml""/>
	</spring:beans>
</mule>

Spring application-context.xml:

<?xml version=""1.0"" encoding=""UTF-8""?>
<beans xmlns=""http://www.springframework.org/schema/beans""
	xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
	xmlns:aop=""http://www.springframework.org/schema/aop""
	xmlns:tx=""http://www.springframework.org/schema/tx""
	xmlns:context=""http://www.springframework.org/schema/context""
	xmlns:http=""http://cxf.apache.org/transports/http/configuration""
	xsi:schemaLocation=""http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd 
        http://cxf.apache.org/transports/http/configuration http://cxf.apache.org/schemas/configuration/http-conf.xsd"">


	<context:property-placeholder location=""classpath:billing.properties"" />
<!-- ...Configure a CXF-based client here ...-->

	<http:conduit name=""*.http-conduit"">
		<http:client ConnectionTimeout=""${httpTimeout}""
			ReceiveTimeout=""${httpTimeout}"" MaxRetransmits=""1""
			AutoRedirect=""true"" Connection=""Keep-Alive"" />
	</http:conduit>

</beans>

Error:

4620 [main] ERROR org.mule.config.builders.AbstractConfigurationBuilder  - Configuration with ""org.mule.config.spring.SpringXmlConfigurationBuilder"" failed.
org.springframework.beans.factory.parsing.BeanDefinitionParsingException: Configuration problem: Failed to import bean definitions from relative location [/application-context.xml]
Offending resource: URL [file:/C:/dev/mule/target/classes/mule-config.xml]; nested exception is org.springframework.beans.factory.xml.XmlBeanDefinitionStoreException: Line 158 in XML document from URL [file:/C:/dev/mule/target/classes/application-context.xml] is invalid; nested exception is org.xml.sax.SAXParseException: cvc-datatype-valid.1.2.1: '${httpTimeout}' is not a valid value for 'integer'.
	at org.springframework.beans.factory.parsing.FailFastProblemReporter.error(FailFastProblemReporter.java:68)
	at org.springframework.beans.factory.parsing.ReaderContext.error(ReaderContext.java:85)
	at org.springframework.beans.factory.parsing.ReaderContext.error(ReaderContext.java:76)
	at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.importBeanDefinitionResource(DefaultBeanDefinitionDocumentReader.java:201)
	at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseDefaultElement(DefaultBeanDefinitionDocumentReader.java:147)
	at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:132)
	at org.mule.config.spring.MuleBeanDefinitionDocumentReader.parseBeanDefinitions(MuleBeanDefinitionDocumentReader.java:45)
	at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.registerBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:92)
	at org.mule.config.spring.MuleHierarchicalBeanDefinitionParserDelegate.handleSpringElements(MuleHierarchicalBeanDefinitionParserDelegate.java:162)
	at org.mule.config.spring.MuleHierarchicalBeanDefinitionParserDelegate.parseCustomElement(MuleHierarchicalBeanDefinitionParserDelegate.java:70)
	at org.mule.config.spring.MuleHierarchicalBeanDefinitionParserDelegate.parseCustomElement(MuleHierarchicalBeanDefinitionParserDelegate.java:130)
	at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1243)
	at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:141)
	at org.mule.config.spring.MuleBeanDefinitionDocumentReader.parseBeanDefinitions(MuleBeanDefinitionDocumentReader.java:45)
	at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.registerBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:92)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:507)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:398)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:342)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:310)
	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:143)
	at org.mule.config.spring.MuleApplicationContext.loadBeanDefinitions(MuleApplicationContext.java:216)
	at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:123)
	at org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:423)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:353)
	at org.mule.config.spring.MuleApplicationContext.<init>(MuleApplicationContext.java:102)
	at org.mule.config.spring.MuleApplicationContext.<init>(MuleApplicationContext.java:56)
	at org.mule.config.spring.SpringXmlConfigurationBuilder.createSpringParentRegistry(SpringXmlConfigurationBuilder.java:95)
	at org.mule.config.spring.SpringXmlConfigurationBuilder.doConfigure(SpringXmlConfigurationBuilder.java:71)
	at org.mule.config.builders.AbstractConfigurationBuilder.configure(AbstractConfigurationBuilder.java:38)
	at org.mule.config.builders.AbstractResourceConfigurationBuilder.configure(AbstractResourceConfigurationBuilder.java:78)
	at org.mule.context.DefaultMuleContextFactory.createMuleContext(DefaultMuleContextFactory.java:97)
	at org.mule.context.DefaultMuleContextFactory.createMuleContext(DefaultMuleContextFactory.java:55)
	at com.defimobile.mule.TestNewCustomer.init(TestNewCustomer.java:27)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at org.junit.internal.runners.ClassRoadie.runBefores(ClassRoadie.java:49)
	at org.junit.internal.runners.ClassRoadie.runProtected(ClassRoadie.java:36)
	at org.junit.internal.runners.JUnit4ClassRunner.run(JUnit4ClassRunner.java:42)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:38)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)
Caused by: org.springframework.beans.factory.xml.XmlBeanDefinitionStoreException: Line 158 in XML document from URL [file:/C:/dev/mule/target/classes/application-context.xml] is invalid; nested exception is org.xml.sax.SAXParseException: cvc-datatype-valid.1.2.1: '${httpTimeout}' is not a valid value for 'integer'.
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:404)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:342)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:310)
	at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.importBeanDefinitionResource(DefaultBeanDefinitionDocumentReader.java:190)
	... 42 more
Caused by: org.xml.sax.SAXParseException: cvc-datatype-valid.1.2.1: '${httpTimeout}' is not a valid value for 'integer'.
	at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.createSAXParseException(ErrorHandlerWrapper.java:236)
	at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.error(ErrorHandlerWrapper.java:172)
	at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:382)
	at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:316)
	at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator$XSIErrorReporter.reportError(XMLSchemaValidator.java:429)
	at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.reportSchemaError(XMLSchemaValidator.java:3185)
	at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.processOneAttribute(XMLSchemaValidator.java:2799)
	at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.processAttributes(XMLSchemaValidator.java:2735)
	at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.handleStartElement(XMLSchemaValidator.java:2094)
	at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.emptyElement(XMLSchemaValidator.java:725)
	at com.sun.org.apache.xerces.internal.impl.XMLNSDocumentScannerImpl.scanStartElement(XMLNSDocumentScannerImpl.java:322)
	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl$FragmentContentDispatcher.dispatch(XMLDocumentFragmentScannerImpl.java:1693)
	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:368)
	at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:834)
	at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:764)
	at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:148)
	at com.sun.org.apache.xerces.internal.parsers.DOMParser.parse(DOMParser.java:250)
	at com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderImpl.parse(DocumentBuilderImpl.java:292)
	at org.springframework.beans.factory.xml.DefaultDocumentLoader.loadDocument(DefaultDocumentLoader.java:75)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:396)
	... 45 more

","JDK 1.5.0_13, Mule 2.0, Spring framework 2.5.4",,,,,,,,,,,,CXF-2324,CXF-2039,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-06-12 18:45:43.122,,,no_permission,,,,,,,,,,,,,112436,,,Thu Sep 22 05:54:56 UTC 2016,,,,,,0|i14epz:,233848,,,,,,,,"12/Jun/08 18:45;dkulp;
See my response to:
http://www.nabble.com/Property-Placeholder-configuration-for-jms%3Adestinations-to17504725.html#a17504725


The issue is a bit different than Mule's as we're using JAXB to build the beans, not spring.   In anycase, the workaround that is committed to trunk may work.  


","12/Jun/08 22:36;egoldfarb;Daniel,
Thank you for the quick response.

I believe the issue you pointed out is slightly different.  In your case, none of the placeholders were parsed, while in my case, only the ones declared as xsd:integer are failing.

Maybe I should include more details (updated description).

The validation error takes place before any beans are created, during the XML parsing and validation stage, failing XML schema validation.  Eclipse red-flags the problem in the config file as well, just by checking against the XSD.

I updated the description with the complete stack trace.  Sorry if I'm being thick on this.  I will certainly pull down trunk and see if it fixes the issue, but I doubt it.


","13/Jun/08 20:13;dkulp;
Oh, yea.   This is a bit different.   This is a validation issue.   By default, we turn on schema validation when parsing the XML to make sure the user is aware of any errors in it.    Since this is the XML parser itself just parsing the XML, there isn't an opportunity here for any type of variable substitution.    If you use properties like that, you should turn off the schema validation. 

According to:
http://cwiki.apache.org/CXF20DOC/schemas-and-namespaces.html

You need the system property:
Dorg.apache.spring.validation.mode=VALIDATION_NONE




","17/Oct/09 21:16;bmargulies;No further traffic for a long time, solution supplied.","09/Nov/09 18:38;dkulp;
Re-openning as I have a semi-solution that I'm testing that should work for 80% (or more) of the cases.

Basically, I've defined a type of:
    <xs:simpleType name=""ParameterizedValue"">
    	<xs:restriction base=""xs:string"">
    		<xs:pattern value=""[$#](\{.*\}|\(.*\)|\[.*\])""/>
    	</xs:restriction>
    </xs:simpleType>

and then defined a bunch of other types like:
    <xs:simpleType name=""ParameterizedInt"">
        <xs:union memberTypes=""xs:int tns:ParameterizedValue""/>
    </xs:simpleType>

that allow the value to be either a int or something that matches the patterns.   While not 100% since the spring ProeperyPlaceholderCOnfigurer allows setting custom prefix/suffix things, the above patter works for pretty much all the use cases I found (quick search).

In anycase, in our schemas, instead of xsd:int, we need to use ParameterizedInt and it should then validate fine.
","30/Jan/15 12:21;alexhopgood;Is it possible to get this type change incorporated into the http://cxf.apache.org/schemas/core.xsd schema?
Currently the <cxf:logging limit="""" /> value is specified as an int and I would like to use a SpringPropertyPlaceholderConfigurator to set this limit value instead of having to disable schema validation in spring.","22/Sep/16 05:54;mohanaraosv;[~alexhopgood] This can be achieved by below configuration. Convension over configuration.

<bean id=""wsPayloadLogFeature"" class=""org.apache.cxf.feature.LoggingFeature"" >
	<property name=""limit"" value=""${cxf.payload.limit}"" />
</bean>

<cxf:bus>
	<cxf:features>
		<ref bean=""wsPayloadLogFeature"" />
	</cxf:features>
</cxf:bus>",,,,,,,,,,,,,,,,,,,,,,,,
Maven codegen-plugin skips generation of multiple wsdl options of equally named wsdl files,CXF-1646,12398156,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,benneke,benneke,12/Jun/08 11:08,03/Jul/08 17:19,14/Mar/19 02:29,12/Jun/08 17:11,2.0.6,2.0.7,2.1,2.1.1,,,,,,,,,,,2.0.7,2.1.1,,,Tooling,,,,,,0,,,,"We have several versions of our wsdl files separated only by directory (and package). In the pom we have

                <wsdlOptions>
                  <wsdlOption>
                     <wsdl>${basedir}/src/main/resources/wsdl/v10/service.wsdl</wsdl>
                     <packagenames>
                        <packagename>some.package.webservice.v10</packagename>
                     </packagenames>
                  </wsdlOption>
                  <wsdlOption>
                     <wsdl>${basedir}/src/main/resources/wsdl/latest/service.wsdl</wsdl>
                     <packagenames>
                        <packagename>some.package.webservice.latest</packagename>
                     </packagenames>
                  </wsdlOption>
               </wsdlOptions>

But the wsdl2java plugin only generates the first one.

To me it looks like the DONE-files should take some path information (or at least the index of the option) into account?",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112435,,,2008-06-12 11:08:42.0,,,,,,0|i1acrj:,268534,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ResourceInjector fails to inject into (Spring) proxies if resource to be in injected is subclassed,CXF-1645,12398050,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,benneke,benneke,11/Jun/08 13:06,03/Jul/08 17:19,14/Mar/19 02:29,13/Jun/08 15:59,2.0.6,2.0.7,2.1,2.1.1,,,,,,,,,,,2.0.7,2.1.1,,,Core,,,,,,0,,,,"If the target is a proxy ResourceInjector tries to resolve an appropriate setter method for the resource using 

  Method targetMethod = getTarget().getClass().getMethod(method.getName(), new Class[]{resource.getClass()});
  targetMethod.invoke(getTarget(), resource);

This fails if the resource has been subclassed because getMethod() (still) does only exact matches (see http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4287725).

This is (for example) the reason why injecting the WebServiceContext into a (Spring) proxy does not work: The real implementation WebServiceContextImpl is always a subclass (see thread http://www.mail-archive.com/cxf-user@incubator.apache.org/msg03050.html)

As a solutions, the ResourceInjector might implement it's own matching algorithm or e. g. use Spring's MethodInvoker instead which already contains such an algorithm:

  MethodInvoker targetInvoker = new MethodInvoker();
  targetInvoker.setTargetObject(getTarget());
  targetInvoker.setTargetMethod(method.getName());
  targetInvoker.setArguments(new Object[]{resource});
  targetInvoker.prepare();
  targetInvoker.invoke();",,,,,,,,,,,,,,,,,11/Jun/08 13:11;benneke;ResourceInjector.patch;https://issues.apache.org/jira/secure/attachment/12383828/ResourceInjector.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2008-06-11 21:01:25.436,,,no_permission,,,,,,,,,,,,,112434,,,Fri Jun 13 14:50:40 UTC 2008,,,,,,0|i0syi7:,167067,,,,,,,,"11/Jun/08 13:11;benneke;This patch adds the proposed change to the ResourceInjector and extends the unit test to cover the specified case .

(Note: the test fails with the unpatched ResourceInjector)","11/Jun/08 21:01;dkulp;
We cannot take a dependency on Spring at this level as this can be used in non-spring cases.

However, it's rather simple to get this to work as we only care about the public methods that have only a single parameter so something like:

           for (Method m : class1.getMethods()) {
                if (m.getName().equals(name)
                    && m.getParameterTypes().length == 1
                    && m.getParameterTypes()[0].isInstance(resource)) {
                    return m;
                }
            }

Should work.   I'll get this committed shortly.

","12/Jun/08 08:24;benneke;Perfect, thanks a lot for the quick response! :-D","13/Jun/08 08:21;benneke;I've been thinking a bit about our solution(s) and think it might fail, if the method in question is overloaded. The for-loop (and even my spring solution) might end up calling a method with the wrong signature (which was not annotated). This might lead to unexpected results if the methods are doing different things...

What about this (going back to the original implementation):

  Method targetMethod = getTarget().getClass().getMethod(method.getName(), method.getParameterTypes());
  targetMethod.invoke(getTarget(), resource); 

Any thoughts?","13/Jun/08 14:50;dkulp;
You're right.   That should work just as well without the loop.   I'll definitely change that.   Thanks!



",,,,,,,,,,,,,,,,,,,,,,,,,,
Adding value to wsdl parameter causes NullPointerException,CXF-1644,12398016,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,dkulp,btomasini,btomasini,11/Jun/08 02:21,03/Jul/08 17:19,14/Mar/19 02:29,12/Jun/08 18:52,2.1,,,,,,,,,,,,,,2.0.7,2.1.1,,,Core,,,,,,0,,,,"The following error happens when ?wsdl=1 is specified.  ?wsdl works fine.

Though this is abnormal usage, CXF could respond with something less messy.  

*****

HTTP ERROR: 500

Exception occurred while trying to process http://localhost:8080/wstest-cxf/services/itemService?wsdl=1

RequestURI=/wstest-cxf/services/itemService
Caused by:

org.apache.cxf.transport.http.WSDLQueryException: Exception occurred while trying to process http://localhost:8080/wstest-cxf/services/itemService?wsdl=1
	at org.apache.cxf.transport.http.WSDLQueryHandler.writeResponse(WSDLQueryHandler.java:229)
	at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:137)
	at org.apache.cxf.transport.servlet.AbstractCXFServlet.invoke(AbstractCXFServlet.java:170)
	at org.apache.cxf.transport.servlet.AbstractCXFServlet.doGet(AbstractCXFServlet.java:152)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:707)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:820)
	at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:487)
	at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:362)
	at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216)
	at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181)
	at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:726)
	at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:405)
	at org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:206)
	at org.mortbay.jetty.handler.HandlerCollection.handle(HandlerCollection.java:114)
	at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)
	at org.mortbay.jetty.Server.handle(Server.java:324)
	at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:505)
	at org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:828)
	at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:514)
	at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:211)
	at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:380)
	at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:395)
	at org.mortbay.thread.BoundedThreadPool$PoolThread.run(BoundedThreadPool.java:450)
Caused by: java.lang.NullPointerException
	at java.util.concurrent.ConcurrentHashMap.hash(ConcurrentHashMap.java:157)
	at java.util.concurrent.ConcurrentHashMap.get(ConcurrentHashMap.java:730)
	at org.apache.cxf.transport.http.WSDLQueryHandler.writeResponse(WSDLQueryHandler.java:148)
	... 22 more

Caused by:

java.lang.NullPointerException
	at java.util.concurrent.ConcurrentHashMap.hash(ConcurrentHashMap.java:157)
	at java.util.concurrent.ConcurrentHashMap.get(ConcurrentHashMap.java:730)
	at org.apache.cxf.transport.http.WSDLQueryHandler.writeResponse(WSDLQueryHandler.java:148)
	at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:137)
	at org.apache.cxf.transport.servlet.AbstractCXFServlet.invoke(AbstractCXFServlet.java:170)
	at org.apache.cxf.transport.servlet.AbstractCXFServlet.doGet(AbstractCXFServlet.java:152)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:707)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:820)
	at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:487)
	at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:362)
	at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216)
	at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181)
	at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:726)
	at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:405)
	at org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:206)
	at org.mortbay.jetty.handler.HandlerCollection.handle(HandlerCollection.java:114)
	at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)
	at org.mortbay.jetty.Server.handle(Server.java:324)
	at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:505)
	at org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:828)
	at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:514)
	at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:211)
	at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:380)
	at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:395)
	at org.mortbay.thread.BoundedThreadPool$PoolThread.run(BoundedThreadPool.java:450)

Powered by Jetty://



















","Linux, Jetty",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112433,,,2008-06-11 02:21:04.0,,,,,,0|i0syif:,167068,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Move runtime resources found in META-INF to META-INF/cxf so that they can be found in an OSGi runtime environment,CXF-1643,12397967,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,ramnarine,ramnarine,10/Jun/08 21:06,03/Jul/08 17:19,14/Mar/19 02:29,11/Jun/08 20:00,2.0.6,2.1,,,,,,,,,,,,,2.0.7,2.1.1,,,,,,,,,0,,,,"The mechanisms in cxf-bundle that load WSDL extensors by finding and processing META-INF/extensions.xml needs to be updated to work in an OSGi environment.  Although it would seem like this issue could be resolved by adding META-INF to the Export-Package list in distribution/bundle/pom.xml, that would use too general a package name, and would not work if there were other bundles that exported META-INF.  One proposed solution is to move CXF stuff in META-INF to META-INF/cxf, possibly with a lookup in both the old and new places for backward compatibility.  Relavent code is in WSDLManagerImpl.
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112432,,,2008-06-10 21:06:35.0,,,,,,0|i0v41z:,179630,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CXF Bundle is missing an Import-Package for woodstox,CXF-1642,12397914,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,sauthieg,sauthieg,10/Jun/08 14:09,30/Mar/10 21:57,14/Mar/19 02:29,11/Jun/08 20:14,2.0.6,2.1,,,,,,,,,,,,,2.0.7,2.1.1,,,,,,,,,0,,,,"When running the cxf-bundle (2.0.6) in an OSGi environment (Felix), the Bus cannot initialize sucesfuly:

2008-06-10 14:54:27,350 : SpringBusFactory.createBus : Failed to create application context.
org.springframework.beans.factory.BeanDefinitionStoreException: Unexpected exception parsing XML document from class path resource [META-INF/cxf/cxf.xml]; nested exception is javax.xml.transform.TransformerException: org.w3c.dom.DOMException: NAMESPACE_ERR: An attempt is made to create or change an object in a way which is incorrect with regard to namespaces.

After a bit of digging, I've found that Xerces was used instead of Woodstox.

This is caused by the TunedDocumentLoader:

        try {
            Class<?> cls = Class.forName(""com.ctc.wstx.sax.WstxSAXParserFactory"");
            saxParserFactory = (SAXParserFactory)cls.newInstance();
            nsasaxParserFactory = (SAXParserFactory)cls.newInstance();
        } catch (Exception e) {
            //woodstox not found, use any other Stax parser
            saxParserFactory = SAXParserFactory.newInstance();
            nsasaxParserFactory = SAXParserFactory.newInstance();
        }

Indeed, the cxf-bundle do not import the 'com.ctc.wstx.sax' package, so we fall back in the Exception handling, and CXF uses the default SAXParserFactory, which is provided by Xerces.

Just to be sure, I've added manually an Import-Package on 'com.ctc.wstx.sax', and provided woodstox as a bundle, and everythings works better !

I've only tested that on  2.0.6, but I've checked the Import-Package of the cxf-bundle version 2.1 and there is still no import, so I guess the problem is there too.

What I'm proposing is simply add an optional dependency on Woodstox, so that if it is available, it will be used.

Import-Package com.ctc.wstx.sax:resolution:=optional, *

BTW, I'm curious, how about normal users who are not using OSGi ? What happen if they remove the woodstox.jar ? Will they have the same behavior than me ? If so, CXF has a real dependency on woodstox, and it should not try to hide it using Class.forName ...
",Running CXF with cxf-bundle,,,,,,,,,,,,,,,,10/Jun/08 14:11;sauthieg;cxf-stacktrace.txt;https://issues.apache.org/jira/secure/attachment/12383750/cxf-stacktrace.txt,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2008-06-10 14:18:57.494,,,no_permission,,,,,,,,,,,,,112431,,,Tue Mar 30 21:57:04 UTC 2010,,,,,,0|i13zhz:,231381,,,,,,,,10/Jun/08 14:11;sauthieg;For your eyes only: the explicit stack trace :),"10/Jun/08 14:18;dkulp;
Just a note: I think both issues are fixed in the latest snapshots.

First: we added wstx as ""optional"" to the bundle imports.  Thus, it will pick up wstx if there.

Second: I believe things are now fixed so if woodstox isn't found, it still will work.   We had to change some exception handling and stuff in there.





","10/Jun/08 16:14;sauthieg;Great to know.

I've just seen that import statement in the pom.xml:

com.ctc.wstx*;resolution:=optional

I'm checking the 2.0.x-fixes MANIFEST to be sure that the import is really there....
No luck, the import package is not there !!!

I've noticed that the import described with pattern (com.ctc.wstx* for example) are not always turned into real import packages by Bnd.
In fact, this is understandable: Bnd looks for really used packages, and try to match them using the patterns.

If no used packages match the import directive (the pattern), there will be no real Import-Package in the MANIFEST.

This is what happen for CXF (or at least I suspect that), so, CXF should avoid using a pattern for woodstox:
Import-Package com.ctc.wstx.sax;resolution:=optional, *
is probably better


BTW, here is what I see during bundlization:

[INFO] [bundle:bundle]
[WARNING] Warning building bundle org.apache.cxf:cxf-bundle:bundle:2.0.7-SNAPSHOT : Instructions for Export-Package that are never used: org\.w3\._2006\._05\.addressing\.wsdl\..*|org\.w3\._2006\._05\.addressing\.wsdl, org\.xmlsoap\.schemas\.wsdl\.http\..*|org\.xmlsoap\.schemas\.wsdl\.http, =META-INF\.cxf
[WARNING] Warning building bundle org.apache.cxf:cxf-bundle:bundle:2.0.7-SNAPSHOT : Superfluous export-package instructions: [org.w3._2006._05.addressing.wsdl.*, org.xmlsoap.schemas.wsdl.http.*]
[WARNING] Warning building bundle org.apache.cxf:cxf-bundle:bundle:2.0.7-SNAPSHOT : Did not find matching referal for com.ctc.wstx*
[WARNING] Warning building bundle org.apache.cxf:cxf-bundle:bundle:2.0.7-SNAPSHOT : Did not find matching referal for org.jaxen*
[ERROR] Error building bundle org.apache.cxf:cxf-bundle:bundle:2.0.7-SNAPSHOT : Exporting packages that are not on the Bundle-Classpath[Jar:dot]: [META-INF.cxf]

See Did not find matching referal for com.ctc.wstx*, same for org.jaxen*","11/Jun/08 14:57;dkulp;
Talked to Guillaume Nodet about this.   He suggested adding:
                        <DynamicImport-Package>
                            com.ctc.wstx.*,
                            com.ctc.wstx.sax.*
                        </DynamicImport-Package>
to the pom so the Class.forName would work without the introspector finding it.

I'll get the merged to trunk/2.0.x.   Hopefully that solves that problem.","11/Jun/08 15:27;sauthieg;Good suggestion. I think it will work.

BTW, having only com.ctc.wstx.* is sufficent

  <DynamicImport-Package>
                            com.ctc.wstx.*,
  </DynamicImport-Package>","30/Mar/10 21:57;yozh;I'm using CXF 2.2.7, I forgot to add woodstox to the classpath, and I got same problem (NAMESPACE_ERR).",,,,,,,,,,,,,,,,,,,,,,,,,
Clientside EndpointPolicy details never removed from PolicyEngineImpl.,CXF-1640,12397906,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,bharathganesh,bharathganesh,bharathganesh,10/Jun/08 12:42,03/Jul/08 17:19,14/Mar/19 02:29,10/Jun/08 12:45,2.0.6,2.1,,,,,,,,,,,,,2.0.7,2.1.1,,,WS-* Components,,,,,,0,,,,PolicyEngineImpl maintains a map of EndpointInfo Vs EndpointPolicy for each client endpoint. An entry added to this is never removed from this map. ,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112429,,,Tue Jun 10 12:45:10 UTC 2008,,,,,,0|i0v2hb:,179375,,,,,,,,10/Jun/08 12:45;bharathganesh;Now we remove all Client EndpointPolicy entries while the corresponding server endpoint is stopped.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Memory leak due to literal keys in WSDLDefinition map,CXF-1639,12397904,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,bharathganesh,bharathganesh,bharathganesh,10/Jun/08 12:25,08/Oct/15 17:03,14/Mar/19 02:29,16/Jun/08 18:23,2.0.6,2.1,,,,,,,,,,,,,2.0.7,2.1.1,,,Core,,,,,,0,,,,"The definitionsMap in WSDLManagerImpl holds the WSDLDefinitions against a weak key, again relying
on the WeakHashMap semantics for removal.

The loadDefinition(String) method loads the WSDLDef and puts this in a map
against a String key. But this String key, is a literal String and will be
present in the constant pool, where garbage collection never happens. This
would mean the key would always be referenced from the constant pool, and
the entry would never be removed.",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112428,,,Mon Jun 16 18:23:15 UTC 2008,,,,,,0|i0syin:,167069,,,,,,,,"10/Jun/08 12:25;bharathganesh;http://www.nabble.com/Memory-Leak-at-WSDLManagerImpl-td17579537.html

Fixing this by always putting a URL as key in this map. The only valid
usage I saw was from WSDLServiceFactory. The WSDLServiceFactory, instead of
using the  wsdlManager.getDefinition(String) method, can create a URL from
this String, strongly refer the URL from wsdlURL field, and invoke the
wsdlManager.getDefinition(URL) method. ","10/Jun/08 18:08;bharathganesh;From the code it looks that wherever Strings are used as keys, a new String is created. So there is no chance of a literal being used as key. So we need to once again verify with memory profiler if this is really causing the issue or is it something else. 
So as of now leaving this issue open - Will update again after profiling.",16/Jun/08 18:23;bharathganesh;Verified the new memory leak fixes by profiling JAX-WS server and client runtime. Also the complete Java EE TCK (JAX-WS 2.0 on CXF 2.0.7 snapshot) runs in a single run with around 200M heap size. All looks OK.,,,,,,,,,,,,,,,,,,,,,,,,,,,,
http conduit authorization not applied in spring configuration with simple:client,CXF-1633,12397588,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Critical,Fixed,dkulp,deki,deki,05/Jun/08 14:57,03/Jul/08 17:19,14/Mar/19 02:29,13/Jun/08 02:06,2.1,,,,,,,,,,,,,,2.0.7,2.1.1,,,Configuration,,,,,,0,,,,"Similar to issue CXF-922. 

Spring configuration with simple:client:
<?xml version=""1.0"" encoding=""UTF-8""?>
<beans xmlns=""http://www.springframework.org/schema/beans""
      xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
      xmlns:simple=""http://cxf.apache.org/simple""
      xmlns:sec=""http://cxf.apache.org/configuration/security""
      xmlns:http=""http://cxf.apache.org/transports/http/configuration""
      xsi:schemaLocation=""http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
  http://cxf.apache.org/simple http://cxf.apache.org/schemas/simple.xsd
  http://cxf.apache.org/configuration/security http://cxf.apache.org/schemas/configuration/security.xsd
  http://cxf.apache.org/transports/http/configuration http://cxf.apache.org/schemas/configuration/http-conf.xsd"">

  <simple:client id=""cxf-client""
  	address=""http://localhost:8080/webservices/MyService""
  	serviceClass=""de.my.service.MyService"">
  	<simple:dataBinding>
  		<bean class=""org.apache.cxf.aegis.databinding.AegisDatabinding"" />
  	</simple:dataBinding>
  </simple:client>

  <http:conduit name=""{http://service.my.de/}MyServicePort.http-conduit"">
  	<http:authorization>
  		<sec:UserName>myTestuser</sec:UserName>
  		<sec:Password>myTestpassword</sec:Password>
  	</http:authorization>
  </http:conduit>
</beans>

Also tried the wildcard solution explained here - http://cwiki.apache.org/CXF20DOC/client-http-transport-including-ssl-support.html:
  <http:conduit name=""*.http-conduit"">
  	<http:authorization>
  		<sec:UserName>myTestuser</sec:UserName>
  		<sec:Password>myTestpassword</sec:Password>
  	</http:authorization>
  </http:conduit>

AuthorizationPolicy exists, but userName and password are null (see screenshot).","Tomcat 6, JDK 1.5",,,,,,,,,,,,,,,,05/Jun/08 14:58;deki;Debugger screenshot.jpg;https://issues.apache.org/jira/secure/attachment/12383462/Debugger+screenshot.jpg,11/Jun/08 11:21;deki;cxf-testclient-1.0.0-SNAPSHOT-project.zip;https://issues.apache.org/jira/secure/attachment/12383821/cxf-testclient-1.0.0-SNAPSHOT-project.zip,11/Jun/08 11:20;deki;cxf-testserver-1.0.0-SNAPSHOT-project.zip;https://issues.apache.org/jira/secure/attachment/12383820/cxf-testserver-1.0.0-SNAPSHOT-project.zip,,,,3.0,,,,,,,,,,,,,,,,,,,,2008-06-09 19:05:26.861,,,no_permission,,Unknown,,,,,,,,,,,112422,,,Fri Jun 13 02:06:49 UTC 2008,,,,,,0|i0uyq7:,178767,,,,,,,,"09/Jun/08 19:05;dkulp;
Any chance of getting a small project that shows this?

This actually might be fixed with the latest 2.1 snapshots.  The most common case of this is the wrong bus is being grabbed.  The snapshots handle injecting the bus differently so it may work better.



","09/Jun/08 19:39;deki;Ok, I will try it with 2.1.1-SNAPSHOT from http://people.apache.org/repo/m2-snapshot-repository/org/apache/cxf/ tomorrow.

If I don't suceed, I will create a small testcase runnable with jetty and a sample client.",10/Jun/08 14:50;deki;Didn't work with latest snapshot either. Will upload a testcase asap.,11/Jun/08 11:20;deki;Launch this testserver with mvn jetty:run,11/Jun/08 11:21;deki;Use the TestClient class to access the testserver.,"12/Jun/08 20:37;dkulp;
If you create your own spring context like the client does, you need to import the required CXF stuff into it.   Otherwise, the CXF runtime will create a ""default"" context/runtime under the covers to load all of its extensions.   In your case, if you add:

	<import resource=""classpath:META-INF/cxf/cxf.xml"" />
	<import resource=""classpath:META-INF/cxf/cxf-extension-http.xml"" />
	<import resource=""classpath:META-INF/cxf/cxf-extension-soap.xml"" />

to your client.xml, the testcase runs fine.



","13/Jun/08 02:06;dkulp;
Fix put in place to allow either style to work.   Using the imports is preferred (and performs better), but the other form now works.",,,,,,,,,,,,,,,,,,,,,,,,
jaxws:endpoint properties not honored,CXF-1629,12397474,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,dkulp,dkulp,04/Jun/08 14:33,03/Jul/08 17:19,14/Mar/19 02:29,04/Jun/08 15:00,2.0.6,2.1,,,,,,,,,,,,,2.0.7,2.1.1,,,JAX-WS Runtime,,,,,,0,,,,"
The jaxws:properties defined in jaxws:endpoint definitions in spring configuration are not copied into the service factory and thus are not honored at runtime.


",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112418,,,2008-06-04 14:33:01.0,,,,,,0|i1actb:,268542,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TypeCreationOptions ignored,CXF-1628,12397410,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,bmargulies,bruno.braga,bruno.braga,03/Jun/08 19:51,24/Apr/09 21:16,14/Mar/19 02:29,25/Aug/08 01:06,2.1,,,,,,,,,,,,,,2.2,,,,Aegis Databinding,,,,,,0,,,,"I believe that the aegis is with a bug.

The new settings using TypeCreationOptions  are not working (or I did wrong settings and didn't show any error).

--------------------------
        <bean id=""aegisBean"" class=""org.apache.cxf.aegis.databinding.AegisDatabinding"">
                <property name=""configuration"">
                        <bean class=""org.apache.cxf.aegis.type.TypeCreationOptions"">
                        <property name=""defaultMinOccurs"" value=""1""/>
                        <property name=""defaultNillable"" value=""false""/>
                        </bean>
                </property>
        </bean>
           
        <bean id=""jaxws-and-aegis-service-factory""
            class=""org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean""
            scope=""prototype"">
            <property name=""dataBinding"" ref=""aegisBean""/>
        </bean>
       
        <bean id=""segurancaService"" class=""xxxxx.SegurancaService"">
                <constructor-arg><ref bean=""fachadaSeguranca""/></constructor-arg>  
        </bean>
       

        <jaxws:endpoint id=""endpointSegurancaService"" implementor=""#segurancaService"" address=""/SegurancaService"">
                <jaxws:serviceFactory>
                        <ref bean='jaxws-and-aegis-service-factory' />
                </jaxws:serviceFactory>
            <jaxws:inInterceptors>
              <bean class=""org.apache.cxf.binding.soap.saaj.SAAJInInterceptor"" />
              <bean class=""org.apache.cxf.ws.security.wss4j.WSS4JInInterceptor"">
                <constructor-arg>
                  <map>
                    <entry key=""action"" value=""UsernameToken Timestamp"" />
                    <entry key=""passwordType"" value=""PasswordDigest"" />
                    <entry key=""passwordCallbackClass"" value=""xxxxx.wssecurity.PWCallback"" />
                  </map>
                </constructor-arg>
              </bean>
              <bean class=""xxxxx.wssecurity.UsernameTokenInterceptor"" />
            </jaxws:inInterceptors>
        </jaxws:endpoint>

--------------------------

My wsdl is being generated thus:

<xsd:sequence>
<xsd:element minOccurs=""0"" name=""idSistema"" type=""xsd:int""/>
<xsd:element minOccurs=""0"" name=""idModulo"" type=""xsd:int""/>
</xsd:sequence>

It's wrong.
minOccurs should be 1.

TypeCreationOptions had no effect. 
",java 6 update 6 + tomcat 6.0.16,,,,,,,,,,,,,,,,06/Jun/08 04:49;bruno.braga;MyService.java;https://issues.apache.org/jira/secure/attachment/12383532/MyService.java,06/Jun/08 04:49;bruno.braga;MyTypeCreationOptionsSpringTest.java;https://issues.apache.org/jira/secure/attachment/12383531/MyTypeCreationOptionsSpringTest.java,06/Jun/08 04:49;bruno.braga;myAegisOptionsTestBeans.xml;https://issues.apache.org/jira/secure/attachment/12383530/myAegisOptionsTestBeans.xml,,,,3.0,,,,,,,,,,,,,,,,,,,,2008-06-03 22:36:00.186,,,no_permission,,,,,,,,,,,,,112417,,,Mon Aug 25 01:06:57 UTC 2008,,,,,,0|i1actj:,268543,,,,,,,,"03/Jun/08 22:36;bmargulies;The unit test for this uses the API, not Spring. I'll set up a Spring test case.","03/Jun/08 23:01;bruno.braga;apparently the problem is with primitive types...

the defaultMinOccurs and defaultNillable are not working for the ""xsd:int""... but changed arrays

that was the purpose?

I need to remove the minOccurs=""0"" of  ""xsd: int"" to avoid problems with .Net clients:

http://geekswithblogs.net/shahed/archive/2007/07/11/113881.aspx

.Net interprets the minOccurs = ""0"" as optional field and generates the stub wrong :(","04/Jun/08 00:05;bmargulies;I committed something that makes the test I created pass.
","05/Jun/08 21:06;bruno.braga;Hi Benson,

Thanks for changing!
	
But I did tests with the apache-cxf-2.1.1-20080604.152030-9.zip and the problem continues...

	
This is part of my WSDL:

<xsd:complexType name=""alterarVisao"">
<xsd:sequence>
<xsd:element minOccurs=""0"" name=""idSistema"" type=""xsd:int""/>
<xsd:element minOccurs=""0"" name=""nomeVisao"" type=""xsd:string""/>
<xsd:element minOccurs=""0"" name=""codigoVisao"" type=""xsd:string""/>
<xsd:element minOccurs=""0"" name=""idVisao"" type=""xsd:short""/>
</xsd:sequence>
</xsd:complexType>

WSDL element has minOccurs=""0"" :/
I must change or remove it.
	
TypeCreationOptions was ignored for these elements.","05/Jun/08 22:37;bmargulies;Bruno,

Could you possibly post a test case? My example that I used did have an int[] property, and it seemed to get better.

The code related to this is distressingly complicated, so I can easily believe that you're triggering something that I didn't find.

--benson
","06/Jun/08 01:55;bmargulies;I definitely need more information.

Here's how I test this:

I made an @WebMethod like:

public void takeMyBean(BeanClass bean) {
}

and then I defined 

class BeanClass {
  private int[] ints;
  public int[] getInts() {return ints; }
  public void setInts(int[] n) { ints = n; }
}

Aegis makes a schema in which there is a separate ArrayOfInt type, and it has whatever minOccurs I put in the options class.

How are you getting minOccurs='0' for a plain int in a sequence?

For example, I see schemata like:

 <xsd:complexType name=""BeanWithArrayNoAegisXml"">
        <xsd:sequence>
            <xsd:element name=""intArray"" type=""ns1:ArrayOfInt"" />
            <xsd:element name=""oneInt"" type=""xsd:int"" />
        </xsd:sequence>
    </xsd:complexType>

Are you using a .aegis.xml file? Any @ annotations?

","06/Jun/08 02:13;bruno.braga;Hi Benson,

I was beginning to prepare a project using your test files ...
But I will answer some things here to detail the problem better.

	
This ""alterarVisao"" is an operation, not a class.

<xsd:complexType name=""alterarVisao"">
<xsd:sequence>
<xsd:element minOccurs=""0"" name=""idSistema"" type=""xsd:int""/>
<xsd:element minOccurs=""0"" name=""nomeVisao"" type=""xsd:string""/>
<xsd:element minOccurs=""0"" name=""codigoVisao"" type=""xsd:string""/>
<xsd:element minOccurs=""0"" name=""idVisao"" type=""xsd:short""/>
</xsd:sequence>
</xsd:complexType> 

See the code of WS and annotations:

@WebMethod
public Visao alterarVisao(@WebParam(name=""idSistema"") Integer idSistema, @WebParam(name=""nomeVisao"") String nomeVisao, @WebParam(name=""codigoVisao"") String codigoVisao, @WebParam(name=""idVisao"") Short idVisao) throws SegurancaException {

Using JAX or Aegis I have a minOccurs=""0"" for each field of operation.
This causes a big problem for the .Net client.

I have the same WS in Axis 1. The WSDL is generated correctly (I'm trying to migrate to CXF):
<wsdl:message name=""alterarVisaoRequest"">
<wsdl:part name=""idSistema"" type=""xsd:int""/>
<wsdl:part name=""nomeVisao"" type=""xsd:string""/>
<wsdl:part name=""codigoVisao"" type=""xsd:string""/>
<wsdl:part name=""idVisao"" type=""xsd:short""/>
</wsdl:message>

I'm seeing now that my operation of the Axis 1 (wsdl:message) is generated as xsd:complexType in Aegis...

But the important is: I don't have minOccurs=""0"" in WS parameters using Axis, and that is my problem of interop:
http://geekswithblogs.net/shahed/archive/2007/07/11/113881.aspx ","06/Jun/08 04:30;bruno.braga;about my observation of xsd:complexType and wsdl:message:

CXF uses tns to MAP a complexType to wsdl:message (axis1 use wsdl:part directly):
---------
<xsd:element name=""alterarVisao"" type=""tns:alterarVisao""/>
<xsd:complexType name=""alterarVisao"">
<xsd:sequence>
<xsd:element minOccurs=""0"" name=""idSistema"" type=""xsd:int""/>
<xsd:element minOccurs=""0"" name=""nomeVisao"" type=""xsd:string""/>
<xsd:element minOccurs=""0"" name=""codigoVisao"" type=""xsd:string""/>
<xsd:element minOccurs=""0"" name=""idVisao"" type=""xsd:short""/>
</xsd:sequence>
</xsd:complexType>
---------
<wsdl:message name=""alterarVisao"">
<wsdl:part element=""tns:alterarVisao"" name=""parameters"">
    </wsdl:part>
</wsdl:message>
---------

but complexType of Objects could have different rules of params complexType.
default minOccurs=""0"" to int / string params is useful?
",06/Jun/08 04:49;bruno.braga;I created test files to reproduce that problem,"06/Jun/08 12:07;bmargulies;I'm afraid that I know what is going on here.

The parameters of your service are under the control of JAX-WS. Dan is the expert, but my suspicion is that JAX-WS forces the behavior you don't like.

Can you use the Simple front end instead of JAX-WS?

I could be wrong here, so I'm going to ask Dan to way in.

If this is supposed to work, I'll dive back into the code and see what's going on.
","06/Jun/08 19:09;dkulp;

If Axis is generating things like:
<wsdl:part name=""nomeVisao"" type=""xsd:string""/> 

that implies it's an RPC style service, not a Doc/Literal.    If that's what you want, just add:
@SOAPBinding(style = SOAPBinding.Style.RPC)
to the interface.    That will generate the ""type"" form instead of the wrapper complex type.

 ","06/Jun/08 22:09;bruno.braga;ok..... I will try...

but if I want to keep cxf default style and remove the minOccurs=""0""?
minOccurs in webmethods causes interop problem with the .net","25/Aug/08 01:05;bmargulies;I'm reasonably certain that you hit the fact that Aegis was failing to communicate minOccurs, maxOccurs, and nillable \for parameters/ to the RFSB. I'm fixed that now.

",25/Aug/08 01:06;bmargulies;As above.,,,,,,,,,,,,,,,,,
CodegenUtils.java needs to use URLDecoder to decode path for Windows,CXF-1626,12397390,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,,willowmck,willowmck,03/Jun/08 16:21,13/Nov/09 17:27,14/Mar/19 02:29,11/Nov/09 02:47,2.0.6,,,,,,,,,,,,,,2.0.9,2.1.3,,,Tooling,,,,,,1,,,,Getting FileNotFoundException from CodegenUtils because it is translating spaces in path to %20 ascii encoding.,"Windows XP, running Maven embedder in Netbeans.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-06-06 19:02:22.749,,,no_permission,,Novice,,,,,,,,,,,112415,,,Wed Nov 11 02:47:33 UTC 2009,,,,,,0|i1actz:,268545,,,,,,,,"06/Jun/08 19:02;dkulp;Is there a full stack trace for this?


","11/Nov/09 02:47;dkulp;
This is resolved.  As part of  CXF-1753, the CodegenUtils stuff was completely illiminated.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ServletDestination does not support decoupled responses,CXF-1625,12397301,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,dkulp,dkulp,02/Jun/08 16:57,03/Jul/08 17:19,14/Mar/19 02:29,02/Jun/08 17:54,2.0.6,2.1,,,,,,,,,,,,,2.0.7,2.1.1,,,,,,,,,0,,,,"
The getConduitInitiator returns null from ServletDestination so decoupled responses don't work.


",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112414,,,2008-06-02 16:57:48.0,,,,,,0|i0v3uv:,179598,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
XmlSchemaException: Schema name conflict in collection.,CXF-1624,12397299,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,opalka,opalka,02/Jun/08 16:22,23/Oct/08 03:59,14/Mar/19 02:29,03/Sep/08 03:24,2.1,,,,,,,,,,,,,,2.1.3,,,,,,,,,,4,,,,"17:50:53,336 ERROR [[/jaxws-samples-logicalhandler-jaxb]] StandardWrapper.Throwable
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'SOAPEndpoint': Invocation of init method failed; nested exception is javax.xml.ws.WebServiceException: org.apache.ws.commons.schema.XmlSchemaException: Schema name conflict in collection. Namespace: http://org.jboss.ws/jaxws/samples/logicalhandler
Caused by: 
javax.xml.ws.WebServiceException: org.apache.ws.commons.schema.XmlSchemaException: Schema name conflict in collection. Namespace: http://org.jboss.ws/jaxws/samples/logicalhandler
        at org.apache.cxf.jaxws.EndpointImpl.doPublish(EndpointImpl.java:258)
        at org.apache.cxf.jaxws.EndpointImpl.publish(EndpointImpl.java:194)
        at org.apache.cxf.jaxws.EndpointImpl.publish(EndpointImpl.java:380)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:585)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:1242)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1208)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1172)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:427)
        at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:249)
        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:155)
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:246)
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:160)
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:291)
        at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:352)
        at org.jboss.wsf.stack.cxf.CXFServletExt.loadAdditionalConfigExt(CXFServletExt.java:125)
        at org.jboss.wsf.stack.cxf.CXFServletExt.loadBus(CXFServletExt.java:102)
        at org.apache.cxf.transport.servlet.AbstractCXFServlet.init(AbstractCXFServlet.java:86)
        at org.jboss.wsf.stack.cxf.CXFServletExt.init(CXFServletExt.java:74)
        at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1161)
        at org.apache.catalina.core.StandardWrapper.allocate(StandardWrapper.java:806)
        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:129)
        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:175)
        at org.jboss.web.tomcat.security.SecurityAssociationValve.invoke(SecurityAssociationValve.java:179)
        at org.jboss.web.tomcat.security.JaccContextValve.invoke(JaccContextValve.java:84)
        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127)
        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)
        at org.jboss.web.tomcat.service.jca.CachedConnectionValve.invoke(CachedConnectionValve.java:157)
        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)
        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:262)
        at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:844)
        at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583)
        at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:446)
        at java.lang.Thread.run(Thread.java:595)
Caused by: org.apache.ws.commons.schema.XmlSchemaException: Schema name conflict in collection. Namespace: http://org.jboss.ws/jaxws/samples/logicalhandler
        at org.apache.ws.commons.schema.SchemaBuilder.handleXmlSchemaElement(SchemaBuilder.java:104)
        at org.apache.ws.commons.schema.SchemaBuilder.build(SchemaBuilder.java:83)
        at org.apache.ws.commons.schema.XmlSchemaCollection.read(XmlSchemaCollection.java:424)
        at org.apache.ws.commons.schema.XmlSchemaCollection.read(XmlSchemaCollection.java:418)
        at org.apache.cxf.common.xmlschema.SchemaCollection.read(SchemaCollection.java:122)
        at org.apache.cxf.databinding.AbstractDataBinding.addSchemaDocument(AbstractDataBinding.java:92)
        at org.apache.cxf.jaxb.JAXBDataBinding.initialize(JAXBDataBinding.java:345)
        at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.buildServiceFromClass(ReflectionServiceFactoryBean.java:343)
        at org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean.buildServiceFromClass(JaxWsServiceFactoryBean.java:512)
        at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.initializeServiceModel(ReflectionServiceFactoryBean.java:394)
        at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.create(ReflectionServiceFactoryBean.java:180)
        at org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean.create(JaxWsServiceFactoryBean.java:163)
        at org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory.createEndpoint(AbstractWSDLBasedEndpointFactory.java:79)
        at org.apache.cxf.frontend.ServerFactoryBean.create(ServerFactoryBean.java:114)
        at org.apache.cxf.jaxws.JaxWsServerFactoryBean.create(JaxWsServerFactoryBean.java:160)
        at org.apache.cxf.jaxws.EndpointImpl.getServer(EndpointImpl.java:322)
        at org.apache.cxf.jaxws.EndpointImpl.doPublish(EndpointImpl.java:244)
        ... 35 more
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-08-26 16:04:06.801,,,no_permission,,,,,,,,,,,,,112413,,,Wed Sep 03 03:24:35 UTC 2008,,,,,,0|i1acu7:,268546,,,,,,,,"02/Jun/08 16:45;opalka;Here are the steps to reproduce the issue:

# checkout JBoss-CXF integration first
svn co  http://anonsvn.jboss.org/repos/jbossws/stack/cxf/trunk

# ensure your user maven settings.xml reference both snapshots.jboss.org and repository.jboss.org maven repositories
See http://jbws.dyndns.org/mediawiki/index.php?title=Mavenization

# download e.g. AS 422
svn co  http://anonsvn.jboss.org/repos/jbossas/tags/JBoss_4_2_2_GA

# build AS
cd JBoss_4_2_2_GA/build
./build.sh main

# update your user maven settings.xml
    <!-- user profile -->
    <profile>
      <id>user-profile</id>
      <activation>
        <activeByDefault>true</activeByDefault>
      </activation>
      <properties>
        <jboss.local.repository>/opt/svn/jboss.local.repository</jboss.local.repository>
        <jboss422.home>/your/checkout/path/JBoss_4_2_2_GA/build/output/jboss-4.2.2.GA</jboss422.home>
      </properties>
    </profile>

# Update file jbossws/stack/cxf/trunk/modules/testsuite/test-excludes-jboss422.txt file and remove line containing
org/jboss/test/ws/jaxws/samples/logicalhandler/LogicalHandlerJAXBTestCase.*

# build JBoss-CXF integration
cd jbossws/stack/cxf/trunk
ant deploy-jboss422

# start JBoss AS server
cd /your/checkout/path/JBoss_4_2_2_GA/build/output/jboss-4.2.2.GA/bin
./run.sh

# execute the test
cd jbossws/stack/cxf/trunk
mvn -Ptestsuite,hudson,jboss422 -Dtest=**/jaxws/samples/logicalhandler/LogicalHandlerJAXBTestCase -DfailIfNoTests=false test
",26/Aug/08 16:04;veita;Is this the same bug as WSCOMMONS-377?,"03/Sep/08 03:24;dkulp;
I've fixed the XmlSchema error.  The test still fails (not sure why) but the schema is properly generated now.

That said, jboss is going to have a little bit of work to update their code to 2.1.3/2.2 levels.   They are calling some classes/api's that aren't in cxf-api and were recently removed/modified as part of some performance work.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
org.apache.cxf.interceptor.StaxOutInterceptor uses StAX API incorrectly,CXF-1622,12397264,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,bmargulies,lipkap,lipkap,02/Jun/08 08:34,03/Jul/08 17:19,14/Mar/19 02:29,02/Jun/08 12:17,2.1,,,,,,,,,,,,,,2.1.1,,,,Core,,,,,,0,,,,"Method StaxOutInterceptor.handleMessage(Message msg) calls javax.xml.stream.XMLStreamWriter.writeStartDocument(String) assuming that the string arg denotes the xml encoding while the StAX javadoc says it denotes the xml version. There's another variant that has two inputs javax.xml.stream.XMLStreamWriter.writeStartDocument(String encoding, String version) that should be used instead.

The snippet below highlights the erroneous api call:
{code} 
 public void handleMessage(Message message) {
        OutputStream os = message.getContent(OutputStream.class);
        XMLStreamWriter writer = message.getContent(XMLStreamWriter.class);
        if (os == null || writer != null) {
            return;
        }
        // assert os != null;

        // TODO: where does encoding constant go?
        String encoding = getEncoding(message);
        
        try {
            writer = getXMLOutputFactory(message).createXMLStreamWriter(os, encoding);
            if (Boolean.TRUE.equals(message.getContextualProperty(FORCE_START_DOCUMENT))) {
                writer.writeStartDocument(encoding);  /*<=====================================================================THIS IS THE ERRONEOUS API CALL*/
            }
        } catch (XMLStreamException e) {
            throw new Fault(new org.apache.cxf.common.i18n.Message(""STREAM_CREATE_EXC"", BUNDLE), e);
        }
        message.setContent(XMLStreamWriter.class, writer);

        // Add a final interceptor to write end elements
        message.getInterceptorChain().add(ending);
    }
{code}",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-06-02 12:17:51.641,,,no_permission,,,,,,,,,,,,,112411,,,Mon Jun 02 12:17:51 UTC 2008,,,,,,0|i0syiv:,167070,,,,,,,,02/Jun/08 12:17;bmargulies;Fix committed.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Memory Leak in WSDLManagerImpl - SchemaCacheMap,CXF-1621,12397260,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,bharathganesh,bharathganesh,bharathganesh,02/Jun/08 06:37,03/Jul/08 17:19,14/Mar/19 02:29,10/Jun/08 12:22,2.0.6,2.1,,,,,,,,,,,,,2.0.7,2.1.1,,,Core,,,,,,0,,,,"The schemaCacheMap in WSDLManagerImpl has a weak key - WSDLDefinition and value ServiceSchemaInfo. A key,value pair is inserted into this map while building a service. The entry is never explicitly removed from this map. Since the map is a WeakHashMap, it is assumed that when the key WSDLDefinition is weakly referenced, the entry would be removed from the map. But it is seen that the value ServiceSchemaInfo(the value) holds on to a SchemaInfo which in turn holds on to the ServiceInfo, which holds the WSDLDefinition through the AbstractPropertiesHolder.
This would mean that the value of the CacheMap always strongly refers to the key, which would mean the entry would never be removed from the map.
""The value objects in a WeakHashMap are held by ordinary strong references. Thus care should be taken to ensure that value objects do not strongly refer to their own keys, either directly or indirectly, since that will prevent the keys from being discarded""

This would mean ServiceInfo, OperationInfo, BindingInfo, WSDLDefinition would all stay in the VM even after the endpoint is stopped.
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-06-06 19:22:09.008,,,no_permission,,,,,,,,,,,,,112410,,,Mon Jun 16 18:26:08 UTC 2008,,,,,,0|i0syj3:,167071,,,,,,,,"06/Jun/08 19:22;dkulp;
Any updates to this?   It would definitely be great to get a fix in for the 2.0.7/2.1.1 builds next week.  :-)

","07/Jun/08 06:42;bharathganesh;Sure will do that. On a vacation now. Will commit on monday..

","10/Jun/08 12:22;bharathganesh;http://www.nabble.com/Memory-Leak-at-WSDLManagerImpl-td17579537.html

The schemaCacheMap will now always have a weak value (This will be done by putting a WeakReference of the
ServiceSchemaInfo in the map). ","10/Jun/08 20:57;dkulp;
Bharath,

This caused a NPE when building the system tests on a couple a my machines.   Basically, the CORBA utils have the manager create a Definition and a builder then builds the schemas and stuff for it and add to the cache.  However, the builder is discarded so nothing at all was holding onto the Schemas strongly and they got garbage collected before the CORBA utils could grab them.  Not all machines, but it did on my Mac.  :-)

I flipped the schemaCache to using the same keys as the definitionsCache.   That fixed that.

However, after I did that, I discovered the ServiceInfo in the SchemaInfo was never used at all.   It wasn't needed.  Thus, I yanked it.   That should also fix it.

In anycase, I'd appreciate a verification.  

",16/Jun/08 18:26;bharathganesh;Verified the memory leak fixes by profiling JAX-WS server and client runtime. Also the complete Java EE TCK (JAX-WS 2.0 on CXF 2.0.7 snapshot) runs in a single run with around 200M heap size. All looks OK.,,,,,,,,,,,,,,,,,,,,,,,,,,
wsdl2java ignores jaxb2 xjc globalBindings with namespace xjc,CXF-1620,12397257,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,bfields,bfields,02/Jun/08 01:47,19/Aug/08 19:00,14/Mar/19 02:29,22/Jul/08 20:53,2.0.6,,,,,,,,,,,,,,2.0.8,2.1.2,,,JAXB Databinding,,,,,,1,,,,"JAXB databindings work fine as shown in wsdl2java bindings documentation for customizing Date mapping. If I add the Jaxb2 specific customizations, they are ignored in xjc. Specifically, add jxb:version=""2.0"" jxb:extensionBindingPrefixes=""xjc"" xmlns:xjc=""http://java.sun.com/xml/ns/jaxb/xjc"" in the jaxws:bindings declaration, and use something like <xjc:serializable> <xjc:simple> <xjc:javaType adapter=""""> in the jxb:globalBindings section. There's no error or anything, the xjc bindings are simply ignored.

One possibly related problem - if cxf-manifest.jar is in my environment classpath, Jaxb2 xjc customizations cause the xjc ant task to fail even when I set the classpath. I'm generating JAXB classes in a project unrelated to CXF using Jaxb 2.0.5 xjc jar. I have to remove the manifest jar from the classpath for xjc to work again.

We specifically need xjc:simple to avoid JAXBElement creations and to add @XmlRootElement where it would otherwise not appear. We also want xjc:javaType adapter="""" because the jxb:javaType print/parse bindings create one Adapter class for each binding customization (not for each customization type), which can be several hundred in very large webservice projects.

A related improvement would be to add CXF DataTypeAdapter classes that extend javax.xml.bind.annotation.adapters.XmlAdapter<String, Date> with a marshal and unmarshal method, which looks like the generated AdapterX classes. I would suggest four classes for date, time, dateTime, and integer (replacing BigInteger with Integer).

A sample project showing JAXB customized datatype bindings for wsdl2java would be helpful too. If I get some time next week I'll create and submit one based on the wsdl2java samples, with a working jxb binding and an xjc binding that should work but doesn't. Unless this issue has already been noticed and is being worked on (I didn't see anything related in JIRA).",CXF 2.0.6. Jaxb 2.0.5,,,,,,,,,,,,,,,,19/Aug/08 14:46;bob fields;wsdl_first_binding_wrapped.zip;https://issues.apache.org/jira/secure/attachment/12388533/wsdl_first_binding_wrapped.zip,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2008-07-22 20:53:26.465,,,no_permission,,,,,,,,,,,,,112409,,,Tue Aug 19 19:00:55 UTC 2008,,,,,,0|i1acuf:,268547,,,,,,,,"22/Jul/08 20:53;dkulp;
I'm going to resolve this as the bug in the title is now fixed.

We do provide parser things for the various dates/times/etc:

<jxb:globalBindings  xmlns:jxb=""http://java.sun.com/xml/ns/jaxb"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"">
       <jxb:javaType name=""java.util.Date"" xmlType=""xs:dateTime""
                     parseMethod=""org.apache.cxf.tools.common.DataTypeAdapter.parseDateTime""
                     printMethod=""org.apache.cxf.tools.common.DataTypeAdapter.printDateTime""/>
 </jxb:globalBindings>

If that isn't adequate (I'm not sure on the pros/cons), please log another jira for that.","14/Aug/08 20:23;bob fields;Still not fixed. The parseMethod/printMethod attributes work, but the adapter="""" annotation does not. Tested with CXF 2.1.1. Strangely enough, I can get it working if I use just the jxb:bindings namespace but not with the jaxws:bindings namespace (which works with the jxb:javaType as long as I select an XPATH node). I'll file another JIRA with some working and non-working examples. The parse/printMethod customization is not adequate.","15/Aug/08 01:48;john.greeley;This is not fixed. The XJC external bindings (note that these are non-standard ""vendor customizations"" implemented in Sun JAXB RI) work fine in the maven2 jaxb plugin and the maven2 jaxws plugin but not in the maven2 cxf codegen plugin. This is really annoying if you depend on these customizations because you have to mess around with the barely-supported Metro related maven plugins for a CXF maven project. ",15/Aug/08 01:50;john.greeley;Here's the page describing the Sun vendor customizations to XJC -  https://jaxb.dev.java.net/2.1.7/docs/vendorCustomizations.html,"15/Aug/08 11:39;dkulp;
This is marked ""Fix version: 2.1.2"".   Are you using 2.1.2?  Bob specifically mentions 2.1.1 which it would obviously NOT be fixed in.

It DOES work for my simple test case.   Buy your test case could be more complex than mine.   If you could attach a non-working test case, then it might have a chance of getting debugged and fixed.","19/Aug/08 14:45;bob fields;Verified still not working in CXF 2.1.2. I created a sample based on the samples\wsdl_first_wrapped with customized bindings, adding a DateTypes class. I added Adapter classes for date, time, dateTime for both Date and calendar types, and updated build.xml generate.code task to use the bindings. There are three binding files: 
JXBJavaType.xjb demonstrates jxb:javaType Customization from the jaxws namespace (works but produces the Adapter# classes) using XPATH node; 
XJCJavaType.xjb demonstrates the xjc:javaType Customization from the jxb namespace, which works for global customizations without having to use XPATH (also works for Jaxb XJC directly), but does not allow customization of the class names that you get from the jaxws namespace;
BADJAXWSJavaType.xjb demonstrates the xjc binding customization starting from the jaxws namespace, the same as the JXBJavaType except xjc:javaType is used instead of jxb:javaType.

The sample could eventually be added to the list of samples and the 6 classes which extend XMLAdapter could be added to the CXF code base. I'm sure there are other Adapter classes out there that are needed (I saw CurrencyAdapter in one test sample and MapAdapter in another).

Reading through the docs, it looks like multiple binding files can be passed to wsdl2java -b (separated by a space), that's a potential solution here because of the different namespaces but I was unable to get it to work. The build.xml generate.code task shows a call with the two binding files. wsdl2java attempts to parse the parameters (two files separated by a space) together as a single parameter and throws an IOException File not found.","19/Aug/08 14:46;bob fields;Modified version of wsdl_first_xml_wrapped, showing customized bindings.","19/Aug/08 16:27;dkulp;
OK:

1) JXBJavaType.xjb - doesn't have any jaxb customizations in it.  Just customizations for the SEI name and service name.   Did you send the wrong version? 

2) I can reproduce the BADJAXWSJavaType.xjb thing.   Digging in now.

3) The wsdl2java macro that is setup in common_build.xml only allows a single binding file.   You could modify the macro to allow multiple files:

<macrodef name=""wsdl2java"">
        <attribute name=""srcdestdir"" default=""${build.src.dir}""/>
        <attribute name=""destdir"" default=""${build.classes.dir}""/>
        <attribute name=""file""/>
        <attribute name=""servicename.arg"" default=""""/>
        <attribute name=""bindingfile"" default=""""/>
        <attribute name=""bindingfile2"" default=""""/>
        <attribute name=""dir"" default=""${wsdl.dir}""/>
        <attribute name=""package"" default=""NOT_SPECIFIED""/>
        <attribute name=""compile"" default=""false""/>
        <attribute name=""classdir"" default=""""/>
        <attribute name=""gen"" default=""all""/>
        <attribute name=""validate"" default=""true""/>
        <sequential>
            <mkdir dir=""@{destdir}""/>
            <mkdir dir=""@{srcdestdir}""/>
            <condition property=""package.arg.@{file}"" value=""-p @{package}"">
                <not>
                    <equals arg1=""@{package}"" arg2=""NOT_SPECIFIED""/>
                </not>
            </condition>
            <property name=""package.arg.@{file}"" value=""""/>
            <condition property=""binding.arg"" value='-b ""@{bindingfile}""'>
                <not>
                    <equals arg1=""@{bindingfile}"" arg2=""""/>
                </not>
            </condition>
            <property name=""binding.arg"" value=""""/>
            <condition property=""binding.arg2"" value='-b ""@{bindingfile2}""'>
                <not>
                    <equals arg1=""@{bindingfile2}"" arg2=""""/>
                </not>
            </condition>
            <property name=""binding.arg2"" value=""""/>
            <java failonerror=""true"" classname=""org.apache.cxf.tools.wsdlto.WSDLToJava"" fork=""yes"">
                <classpath>
                    <path refid=""cxf.classpath"" />
                </classpath>
                <sysproperty key=""java.util.logging.config.file"" value=""${cxf.etc.dir}/logging.properties""/>
                <sysproperty key=""exitOnFinish"" value=""true""/>
                <arg line=""@{servicename.arg}""/>
                <arg line=""${package.arg.@{file}}""/>
                <arg line=""${binding.arg}""/>
                <arg line=""${binding.arg2}""/>
                <arg value=""-verbose""/>
                <arg value=""-d""/>
                <arg value=""@{srcdestdir}""/>
                <arg value=""-all""/>
                <arg value=""-validate""/>
                <arg value=""@{dir}/@{file}""/>
            </java>
        </sequential>
    </macrodef>

","19/Aug/08 16:35;dkulp;

OK.   If you move the jxb:extensionBindingPrefixes=""xjc"" attribute to the jxb:globalBindings node, it all works fine.   (that's how my test case has it setup which is why I knew my test worked.   It apparently doesn't traverse up the parents to find that attribute.
","19/Aug/08 19:00;bob fields;Wow that was fast. 5 minutes after verifying the problem you figured it out. I noticed it wasn't traversing up the attribute when I had to move the jxb namespace declaration to globalBindings in order for the binding to work without the class name customization. I verified it works with 2.1.2 after moving the extensionBindingPrefixes. I'm creating pattern templates for web service generation from UML models (using AndroMDA), this whole exercise was very helpful. Yes I did forget that I had removed the jxb bindings from JXBJavaType.xjb, but the same markup was in the other bindings file, commented out.

The non-parsing of the space separated bindings files also occurred for me when running org.apache.cxf.tools.wsdlto.WSDLToJava class from java (debugging in Eclipse with command line arguments). Did you verify it worked from the ant script?

Will you add the working binding sample to the samples list and the Adapters classes to cxf core, or do you need additional code or a patch file? I also wanted to demonstrate using the xjc argument in CXF - we use lots of Jaxb2 plugins in our regular Jaxb code (in the process of converting 275 schemas from Jaxb pre-release to Jaxb 2.1 on one project). Also wanted the pom.xml file to demonstrate wsdl2java with all of the various options.

Part of what threw me for the bindings was that I just recently switched from 2.0 to 2.1 CXF. When trying the working bindings file in 2.0.8 I get:

     [java] Caused by: org.xml.sax.SAXParseException: cvc-complex-type.2.4.a: In
valid content was found starting with element 'xjc:javaType'. One of '{""http://j
ava.sun.com/xml/ns/jaxb"":javaType, ""http://java.sun.com/xml/ns/jaxb"":serializabl
e, ""http://java.sun.com/xml/ns/jaxb/xjc"":serializable, ""http://java.sun.com/xml/
ns/jaxb/xjc"":superClass, ""http://java.sun.com/xml/ns/jaxb/xjc"":superInterface, ""
http://java.sun.com/xml/ns/jaxb/xjc"":typeSubstitution, ""http://java.sun.com/xml/
ns/jaxb/xjc"":smartWildcardDefaultBinding, ""http://java.sun.com/xml/ns/jaxb/xjc"":
simple, ""http://java.sun.com/xml/ns/jaxb/xjc"":generateElementProperty, ""http://j
ava.sun.com/xml/ns/jaxb/xjc"":noMarshaller, ""http://java.sun.com/xml/ns/jaxb/xjc""
:noUnmarshaller, ""http://java.sun.com/xml/ns/jaxb/xjc"":noValidator, ""http://java
.sun.com/xml/ns/jaxb/xjc"":noValidatingUnmarshaller}' is expected.

Thanks for everything. CXF has been a very good product so far, fewer problems than with a lot of the other tools we use here (we're an IBM Rational / Websphere shop).",,,,,,,,,,,,,,,,,,,,,
ReflectionServiceFactoryBean creates inconsistent schema for messages with parts with types and no elements,CXF-1618,12397119,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,bmargulies,bmargulies,29/May/08 23:40,03/Jul/08 17:19,14/Mar/19 02:29,30/May/08 23:08,2.1,,,,,,,,,,,,,,2.1.1,,,,Core,,,,,,0,,,,"I added an @Ignored test that fails to the ReflectionServiceFactoryBeanTest. This test demonstrates the model cooking itself up with a part element QName for an element that isn't in the schema.

The same results ensue when run with the JaxWsServiceFactoryBean, whose test also has this case now.

",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-05-30 02:54:44.974,,,no_permission,,,,,,,,,,,,,112407,,,Fri May 30 23:08:13 UTC 2008,,,,,,0|i0syjb:,167072,,,,,,,,"30/May/08 02:54;dkulp;I don't think this test is valid.   It's a straight RSFB test and thus the JAX-WS annotations on the interface are ignored.   The important one is that the ""BARE"" anotation.  Without that, RSFB assumes its wrapped and thus creates a single wrapper message. 

Possibly move to the jaxws package? ","30/May/08 10:57;bmargulies;I am carefully not calling 'setWrapped(true)' -- and the failure mode is identical with the live environment.

I'll move it and see, but I bet you that the behavior will be unchanged.
","30/May/08 11:13;bmargulies;Dan,

It seems to me that this is a bug as it is, on more thought. If RFSB puts a qname into the element qname field, then that element aught to be in the schema. 

?

--benson
","30/May/08 12:08;bmargulies;To save us debate, I went ahead and tossed the test case into JaxWsServiceFactoryBeanTest, as well. It fails there just the same.
","30/May/08 21:14;dkulp;
I fixed the jaxws version.   That was a bug in RFSB.

For the non-jaxws version, I don't think it's really fixable using that interface.   The exception that is thrown should be better, but it's more or less behaving correctly.   I've changed the configuration to do make sure isWrapped returns false.  (the default is true).   It now throws another exception because it doesn't know how to map the Holder<...> thing.   That's a jaxws thing so the holder doesn't get mapped and there isn't a type for the part.


",30/May/08 23:08;bmargulies;I put in a polite throw for the plain RFSB case.,,,,,,,,,,,,,,,,,,,,,,,,,
Basic Authentication failure,CXF-1617,12397038,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,njiang,gdprao,gdprao,29/May/08 01:47,28/Jul/08 14:09,14/Mar/19 02:29,19/Jun/08 06:25,2.0.3,,,,,,,,,,,,,,2.0.8,2.1.2,,,JAX-WS Runtime,,,,,,0,,,,"I have tried the following options to send username and password with basic authentication credentials.  But I realized  from the server SOAP logs that the basic authentication header is not passing to the server from the client in both the cases.  I see the username and password attributes are available in the XSD and used them in configuration of client in spring application context.  I am using CXF-2.0.3 version.  

Front end approach: 

<bean id=""searchClientFactory"" 
                class=""org.apache.cxf.jaxws.JaxWsProxyFactoryBean""> 
     <property name=""serviceClass"" 
                        value=""com.client.service.SearchService"" /> 
     <property name=""address"" value=""${webservice.host.url}/${soapservice.url}"" /> 
     <property name=""username"" value=""uname""/> 
      <property name=""password"" value=""pword""/> 
 </bean> 

jaxws approach: 
        <jaxws:client id=""searchClient"" 
        serviceClass=""com.client.service.SearchService"" 
        address=""${webservice.host.url}/${soapservice.url}""  username=""uname"" password=""pword""/> 

",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-06-19 06:25:26.555,,,no_permission,,,,,,,,,,,,,112406,,,Thu Jun 19 06:25:26 UTC 2008,,,,,,0|i1acun:,268548,,,,,,,,"30/May/08 02:52;gdprao;The temporary workaround is described in the following post 
http://www.nabble.com/Basic-authentication-with-Spring-configured-client-td17500802.html","19/Jun/08 06:25;njiang;Applied the patch into CXF trunk[1] and 2.0.x branch[2]
[1]  http://svn.apache.org/viewvc?rev=669396&view=rev
[2]  http://svn.apache.org/viewvc?rev=669398&view=rev",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException when asm 2.2.3 is in classpath (???),CXF-1616,12397000,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,,ndeloof,ndeloof,28/May/08 15:11,23/Jan/09 17:51,14/Mar/19 02:29,28/May/08 16:21,2.0.6,,,,,,,,,,,,,,2.1.2,,,,,,,,,,0,,,,"CXF fails to deserialize incoming XML with an empty element :

Caused by: java.lang.NullPointerException
	at _33j.services.servicesmodification.schema.DeliverLoyaltyAccountRequest_WrapperTypeHelper1.getWrapperParts(Unknown Source)
	at org.apache.cxf.jaxws.interceptors.WrapperClassInInterceptor.handleMessage(WrapperClassInInterceptor.java:122)
	... 21 more

If I remove asm from the war classpath the web service invocation pass.","tomcat 6 
SUN java 1.5
Spring 2.5.3",,,,,,,,,,,,,,,,02/Jun/08 14:46;ndeloof;CXF1616.zip;https://issues.apache.org/jira/secure/attachment/12383229/CXF1616.zip,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2008-05-29 17:50:08.51,,,no_permission,,,,,,,,,,,,,112405,,,Mon Jun 02 15:13:36 UTC 2008,,,,,,0|i0v3m7:,179559,,,,,,,,28/May/08 16:21;ndeloof;allready documented in http://cxf.apache.org/21-migration-guide.html,"29/May/08 17:50;dkulp;
Can you retry with the latest snapshot?   In theory, this should work fine with ASM 2.2.3 on the classpath.  I'm concerned about that.   I've made some fixes in the wrapperhelper stuff and also added some debug code into it.  Thus,  if you could try it, it would be a big help.

","02/Jun/08 14:46;ndeloof;The attached zip is a maven project containing a minimal webapp with a simplified Web service.

run mvn compile jetty:run to get the webapp running

check http://localhost:8080/tpal-webservices/services/servicesModification?wsdl to ensure it's running fine

use soapUi (or other) to call the service, but REMOVE all optional elements from the message :

<soapenv:Envelope xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:sch=""http://33J/services/ServicesModification/schema"">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:DeliverLoyaltyAccount>
         <sch:channel>foo</sch:channel>
      </sch:DeliverLoyaltyAccount>
   </soapenv:Body>
</soapenv:Envelope>

--> NullPointerException.

Then remove the asm dependency, restart jetty and try the same request.
","02/Jun/08 15:13;dkulp;
FYI:  I tried this with 2.0.6 (and saw the NPE).  I also tried it with the 2.0.7-SNAPSHOT and it works fine.   Thus, the changes that have been made to the helpers seem to have fixed it.   Thanks for the testcase. 

With 2.0.7-SNAPSHOT, on the server side, I see:
Jun 2, 2008 11:12:22 AM _33j.services.servicesmodification.g1.ServicesModificationCompteImpl deliverLoyaltyAccount
INFO: Executing operation deliverLoyaltyAccount
null
null
null
null
null
foo
null

Which looks about right.   The response sent back to the client is:

<soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/"">
<soap:Body>
<DeliverLoyaltyAccountResponse xmlns=""http://33J/services/ServicesModification/schema"">
<responseStatusCode></responseStatusCode>
<responseStatusLabel></responseStatusLabel>
</DeliverLoyaltyAccountResponse>
</soap:Body>
</soap:Envelope>
",,,,,,,,,,,,,,,,,,,,,,,,,,,
"Bug in CXF Validation, SOAP Fault produces invalid XML",CXF-1614,12396960,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Blocker,Fixed,dkulp,tibble,tibble,28/May/08 08:48,03/Jul/08 17:19,14/Mar/19 02:29,29/May/08 00:33,2.1,,,,,,,,,,,,,,2.0.7,2.1.1,,,,,,,,,0,,,,"SUMMARY:

When using a xsd:simpleType with pattern restriction, a non-valid reponse message (which generates a SAXParseException) results in CXF returning invalid XML (missing "">"" etc...), instead of CXF returning a proper SOAP Fault. I think this is a major issue!


Any help on this problem really really appreciated! 



EXPLANATION + REPRODUCTION DETAILS:

In here I will put all the information needed to reproduce the bug. We have a web service with external schema, xsd1.xsd


<include schemaLocation=""xsd2.xsd""/>
<xsd:element name=""Period"">
  <xsd:complexType>
		<xsd:sequence>
      	<xsd:element name=""StartPeriod"" type=""uwvml:Datum""/>
		<xsd:element name=""EndPeriod"" type=""uwvml:Datum"" minOccurs=""0""/>
		</xsd:sequence>
  </xsd:complexType>
/xsd:element>


This includes xsd2.xsd where Datum is defined as a pattern for year month day in yyyymmdd:

<simpleType name=""Datum"">
 <restriction base=""string"">
	<length value=""8""/>
	<pattern value=""[1-2][0-9]{3}(0[1-9]|1[0-2])(0[1-9]|[1-2][0-9]|3[0-1])""/>
 </restriction>
</simpleType>

We use CXF 2.1, with JAXB binding.

The service operation looks like:

public MyResponse doSomething(MyRequest, Holder<MyHeader header) {... }


In the MyResponse is a StartPeriod which does NOT comply with the XSD. It contains the value ""21130"" (without quotes).

In the Spring config we turned on validation:


<jaxws:endpoint ... 
      <jaxws:properties>
            <entry key=""schema-validation-enabled"" value=""true"" />
      </jaxws:properties>
</jaxws:endpoint>
 

Now.... I would have expected CXF to return a SOAP-FAULT... but instead it returns:


<soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/"">
	<soap:Header>
		<ns4:MyHeader xmlns:ns5="". . .. "" xmlns:ns4="". . . "" xmlns:ns3="". . "">
		<!-- VALID XML -->
		</ns4:MyHeader>
	</soap:Header>
	<soap:Body>
		<ns3:MyResponse xmlns:ns2="". . . "" xmlns:ns3="". . . "" xmlns:ns4="". . . "" xmlns:ns5="". . . "">
		<!-- VALID XML until... -->
		<ns3:SomeTagName<soap:Fault><faultcode>soap:Server</faultcode><faultstring>Marshalling Error: cvc-pattern-valid: Value '21130' is not facet-valid with respect to pattern '[1-2][0-9]{3}(0[1-9]|1[0-2])(0[1-9]|[1-2][0-9]|3[0-1])' for type 'Datum'.</faultstring></soap:Fault></soap:Body></soap:Envelope>


The stacktrace i got is:


INFO: Interceptor has thrown exception, unwinding now
org.apache.cxf.interceptor.Fault: Marshalling Error: cvc-pattern-valid: Value '21130' is not facet-valid with respect to pattern '[1-2][0-9]{3}(0[1-9]|1[0-2])(0[1-9]|[1-2][0-9]|3[0-1])' for type 'Datum'.
	at org.apache.cxf.jaxb.JAXBEncoderDecoder.marshall(JAXBEncoderDecoder.java:208)
	at org.apache.cxf.jaxb.io.DataWriterImpl.write(DataWriterImpl.java:79)
	at org.apache.cxf.interceptor.AbstractOutDatabindingInterceptor.writeParts(AbstractOutDatabindingInterceptor.java:86)
	at org.apache.cxf.interceptor.BareOutInterceptor.handleMessage(BareOutInterceptor.java:68)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:221)
	at org.apache.cxf.interceptor.OutgoingChainInterceptor.handleMessage(OutgoingChainInterceptor.java:74)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:221)
	at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:78)
	at org.apache.cxf.transport.servlet.ServletDestination.invoke(ServletDestination.java:92)
	at org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:214)
	at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:151)
	at org.apache.cxf.transport.servlet.AbstractCXFServlet.invoke(AbstractCXFServlet.java:170)
	at org.apache.cxf.transport.servlet.AbstractCXFServlet.doPost(AbstractCXFServlet.java:148)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:710)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:803)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:175)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:263)
	at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:844)
	at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:584)
	at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:447)
	at java.lang.Thread.run(Thread.java:595)
Caused by: javax.xml.bind.MarshalException
 - with linked exception:
[org.xml.sax.SAXParseException: cvc-pattern-valid: Value '21130' is not facet-valid with respect to pattern '[1-2][0-9]{3}(0[1-9]|1[0-2])(0[1-9]|[1-2][0-9]|3[0-1])' for type 'Datum'.]
	at com.sun.xml.bind.v2.runtime.MarshallerImpl.write(MarshallerImpl.java:331)
	at com.sun.xml.bind.v2.runtime.MarshallerImpl.marshal(MarshallerImpl.java:257)
	at javax.xml.bind.helpers.AbstractMarshallerImpl.marshal(AbstractMarshallerImpl.java:75)
	at org.apache.cxf.jaxb.JAXBEncoderDecoder.writeObject(JAXBEncoderDecoder.java:436)
	at org.apache.cxf.jaxb.JAXBEncoderDecoder.marshall(JAXBEncoderDecoder.java:189)
	... 26 more
Caused by: org.xml.sax.SAXParseException: cvc-pattern-valid: Value '21130' is not facet-valid with respect to pattern '[1-2][0-9]{3}(0[1-9]|1[0-2])(0[1-9]|[1-2][0-9]|3[0-1])' for type 'Datum'.
	at com.sun.org.apache.xerces.internal.jaxp.validation.Util.toSAXParseException(Util.java:109)
	at com.sun.org.apache.xerces.internal.jaxp.validation.ErrorHandlerAdaptor.error(ErrorHandlerAdaptor.java:104)
	at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:382)
	at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:316)
	at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator$XSIErrorReporter.reportError(XMLSchemaValidator.java:429)
	at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.reportSchemaError(XMLSchemaValidator.java:3185)
	at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.elementLocallyValidType(XMLSchemaValidator.java:3113)
	at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.processElementContent(XMLSchemaValidator.java:3025)
	at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.handleEndElement(XMLSchemaValidator.java:2178)
	at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.endElement(XMLSchemaValidator.java:814)
	at com.sun.org.apache.xerces.internal.jaxp.validation.ValidatorHandlerImpl.endElement(ValidatorHandlerImpl.java:345)
	at org.xml.sax.helpers.XMLFilterImpl.endElement(XMLFilterImpl.java:546)
	at com.sun.xml.bind.v2.runtime.output.SAXOutput.endTag(SAXOutput.java:128)
	at com.sun.xml.bind.v2.runtime.output.XmlOutputAbstractImpl.endTag(XmlOutputAbstractImpl.java:120)
	at com.sun.xml.bind.v2.runtime.output.ForkXmlOutput.endTag(ForkXmlOutput.java:87)
	at com.sun.xml.bind.v2.runtime.XMLSerializer.leafElement(XMLSerializer.java:322)
	at com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$1.writeLeafElement(RuntimeBuiltinLeafInfoImpl.java:210)
	at com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$1.writeLeafElement(RuntimeBuiltinLeafInfoImpl.java:209)
	at com.sun.xml.bind.v2.runtime.reflect.TransducedAccessor$CompositeTransducedAccessorImpl.writeLeafElement(TransducedAccessor.java:250)
	at com.sun.xml.bind.v2.runtime.property.SingleElementLeafProperty.serializeBody(SingleElementLeafProperty.java:98)
	at com.sun.xml.bind.v2.runtime.ClassBeanInfoImpl.serializeBody(ClassBeanInfoImpl.java:322)
	at com.sun.xml.bind.v2.runtime.XMLSerializer.childAsXsiType(XMLSerializer.java:681)
	at com.sun.xml.bind.v2.runtime.property.ArrayElementNodeProperty.serializeItem(ArrayElementNodeProperty.java:65)
	at com.sun.xml.bind.v2.runtime.property.ArrayElementProperty.serializeListBody(ArrayElementProperty.java:168)
	at com.sun.xml.bind.v2.runtime.property.ArrayERProperty.serializeBody(ArrayERProperty.java:152)
	at com.sun.xml.bind.v2.runtime.ClassBeanInfoImpl.serializeBody(ClassBeanInfoImpl.java:322)
	at com.sun.xml.bind.v2.runtime.XMLSerializer.childAsXsiType(XMLSerializer.java:681)
	at com.sun.xml.bind.v2.runtime.property.SingleElementNodeProperty.serializeBody(SingleElementNodeProperty.java:150)
	at com.sun.xml.bind.v2.runtime.ClassBeanInfoImpl.serializeBody(ClassBeanInfoImpl.java:322)
	at com.sun.xml.bind.v2.runtime.XMLSerializer.childAsXsiType(XMLSerializer.java:681)
	at com.sun.xml.bind.v2.runtime.ElementBeanInfoImpl$1.serializeBody(ElementBeanInfoImpl.java:151)
	at com.sun.xml.bind.v2.runtime.ElementBeanInfoImpl$1.serializeBody(ElementBeanInfoImpl.java:185)
	at com.sun.xml.bind.v2.runtime.ElementBeanInfoImpl.serializeBody(ElementBeanInfoImpl.java:305)
	at com.sun.xml.bind.v2.runtime.ElementBeanInfoImpl.serializeRoot(ElementBeanInfoImpl.java:312)
	at com.sun.xml.bind.v2.runtime.ElementBeanInfoImpl.serializeRoot(ElementBeanInfoImpl.java:71)
	at com.sun.xml.bind.v2.runtime.XMLSerializer.childAsRoot(XMLSerializer.java:490)
	at com.sun.xml.bind.v2.runtime.MarshallerImpl.write(MarshallerImpl.java:328)
	... 30 more



To see what is wrong, i added in the service method, just before the return, the following code. 

 Class[] responseClasses = { MyResponse.class };
 JAXBContext responseContext = JAXBContext.newInstance(responseClasses);
 Marshaller responseMarshaller = responseContext.createMarshaller();
 responseMarshaller.marshal(response,System.err);


This produces correct XML, but non-compliant with the XSD because there is a Datum tag with a ""21130"" value.




Cheers,
- Marcel Heemskerk
","Windows Server 2003, MyEclipse 6.01, Tomcat 5.5",,,,,,,,,,,CXF-1551,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-05-28 08:58:28.582,,,no_permission,,,,,,,,,,,,,112403,,,Wed May 28 12:32:53 UTC 2008,,,,,,0|i0uxdz:,178550,,,,,,,,"28/May/08 08:58;jmi;Could you check, if this happens also with short response?
It'll be interesting to know , if it's new issue, or if it's duplicate of 1551.","28/May/08 12:32;tibble;yes, you are right, it is duplicate of 1551

when i return a brand new and empty 'new MyResponse( )'  a correct SOAP Fault is thrown...

Thanks for the quick feedback!
- Marcel",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
javax.xml.stream.XMLStreamException when process WSDL,CXF-1612,12396855,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Blocker,Fixed,dkulp,quaff,quaff,27/May/08 08:22,03/Jul/08 17:19,14/Mar/19 02:29,29/May/08 16:35,2.1,,,,,,,,,,,,,,2.0.7,2.1.1,,,Core,,,,,,0,,,,"when I upgrade cxf from 2.0.5-incubator  to 2.1,and visit http://localhost:8080/e3s/services/BAS?wsdl


2008-05-27 15:51:32,671 [http-8080-1] [org.apache.cxf.transport.servlet.ServletController] [WARN] -- org.apache.cxf.transport.http.WSDLQueryHandler Exception caught writing response.

org.apache.cxf.transport.http.WSDLQueryException: Exception occurred while trying to process http://localhost:8080/e3s/services/BAS?wsdl

	at org.apache.cxf.transport.http.WSDLQueryHandler.writeResponse(WSDLQueryHandler.java:229)

	at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:137)

	at org.apache.cxf.transport.servlet.AbstractCXFServlet.invoke(AbstractCXFServlet.java:170)

	at org.apache.cxf.transport.servlet.AbstractCXFServlet.doGet(AbstractCXFServlet.java:152)

	at javax.servlet.http.HttpServlet.service(HttpServlet.java:690)

	at javax.servlet.http.HttpServlet.service(HttpServlet.java:803)

	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)

	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)

	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)

	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:175)

	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128)

	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)

	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)

	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:286)

	at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:844)

	at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583)

	at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:447)

	at java.lang.Thread.run(Thread.java:619)

Caused by: javax.xml.stream.XMLStreamException: NamespaceURI cannot be null

	at com.sun.xml.internal.stream.writers.XMLStreamWriterImpl.writeAttribute(XMLStreamWriterImpl.java:605)

	at org.apache.cxf.staxutils.StaxUtils.writeElement(StaxUtils.java:520)

	at org.apache.cxf.staxutils.StaxUtils.writeElement(StaxUtils.java:440)

	at org.apache.cxf.staxutils.StaxUtils.writeDocument(StaxUtils.java:421)

	at org.apache.cxf.staxutils.StaxUtils.writeDocument(StaxUtils.java:411)

	at org.apache.cxf.staxutils.StaxUtils.writeNode(StaxUtils.java:560)

	at org.apache.cxf.transport.http.WSDLQueryHandler.writeResponse(WSDLQueryHandler.java:226)

	... 17 more
","java version ""1.6.0_04"" on windows
Java(TM) SE Runtime Environment (build 1.6.0_04-b12)
Java HotSpot(TM) Client VM (build 10.0-b19, mixed mode, sharing)",,,,,,,,,,,CXF-1581,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112401,,,2008-05-27 08:22:58.0,,,,,,0|i0syjj:,167073,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
  testWsaddressingServerIdlgen(org.apache.cxf.tools.corba.processors.WSDLToIDLGenerationTest) fails import of addressing schema,CXF-1611,12396811,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,bmargulies,bmargulies,26/May/08 13:48,03/Jul/08 17:19,14/Mar/19 02:29,29/May/08 17:06,2.1,,,,,,,,,,,,,,2.1.1,,,,,,,,,,0,,,,"  testWsaddressingServerIdlgen(org.apache.cxf.tools.corba.processors.WSDLToIDLGenerationTest)

is failing, and I'm @Ignoring it. The source of the problem (after I added a check) is that 
/tools/corba/target/test-classes/idlgen/wsaddressing_server.wsdl gets into trouble trying to import the addressing schema.

Shouldn't we be using a catalog?

",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112400,,,2008-05-26 13:48:26.0,,,,,,0|i13zp3:,231413,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cannot build service model from WSDL for 'type' part of xsd:base64binary,CXF-1610,12396806,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,bmargulies,bmargulies,bmargulies,26/May/08 12:04,24/Apr/09 21:16,14/Mar/19 02:29,25/Aug/08 01:15,2.1.1,,,,,,,,,,,,,,2.0.9,2.1.3,,,,,,,,,0,,,,"I'm about to commit a org.apache.cxf.systest.jaxws.JaxWsDynamicClientTest test. It is @Ignored, since it fails. It fails, apparently, because wsdl4j can't handle it's WSDL. The wsdl has a part with a type='xsd:base64Binary', but wsdl4j coughs up a null string for the type. 

Do we build a complex workaround involving parsing the wsdl for ourselves?

",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112399,,,Mon Aug 25 01:15:15 UTC 2008,,,,,,0|i1acvb:,268551,,,,,,,,26/May/08 12:21;bmargulies;The wsdl4j issue is number 1972751.,"28/May/08 01:46;bmargulies;Here's what is going on. When the JAXWS+JAXB service answers the call for ?wsdl, the resulting wsdl is all wrong, having elements with stupid names instead of types.
","29/May/08 00:11;bmargulies;I think I'm on the trail of this.

Problem 1: when we build a WSDL from a service, we don't build <message/> elements at the top level.

Problem 2: when the DynamicClientFactory deals with a WSDL without the message elements, something goes wrong. Maybe wsdl4j infers the Messages incorrectly, I don't know yet.","25/Aug/08 01:15;bmargulies;Somebody turned off the @Ignore, after apparently dealing with this, but didn't close this report.
",,,,,,,,,,,,,,,,,,,,,,,,,,,
The setSynchronousTimeout on the ClientImpl does not prevent reading the socket to timeout...,CXF-1609,12396803,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,,benjamin coiffe,benjamin coiffe,26/May/08 10:18,03/Jul/08 17:19,14/Mar/19 02:29,16/Jun/08 17:46,2.1.1,,,,,,,,,,,,,,2.0.7,2.1.1,,,Configuration,Core,,,,,0,,,,"This method has apparently been replaced with
    HTTPConduit.setReceiverTimeout(Long). 
    HTTPConduit.setConnectionTimeout(Long)
I can't remember how the old way was meant to work (private void ClientImpl.waitForResponse(...)) but this seems to be deprecated atm.

Other thing:
        HTTPConduit.setReceiverTimeout(Long)
        HTTPConduit.setConnectionTimeout(Long)
are casted as int in the conduit :
        connection.setConnectTimeout((int)clientSidePolicy.getConnectionTimeout());
        connection.setReadTimeout((int)clientSidePolicy.getReceiveTimeout());

This conversion is very dangerous e.g Long.MAX_VALUE is converted into a negative integer!


",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,Moderate,,,,,,,,,,,112398,,,2008-05-26 10:18:51.0,,,,,,0|i0syjr:,167074,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"should add disableCNCheck=""true"" for wsdl_first_https samples client configuration according to recent change in cxf security",CXF-1608,12396786,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,ffang,ffang,ffang,26/May/08 02:08,03/Jul/08 17:19,14/Mar/19 02:29,26/May/08 02:33,2.0.6,,,,,,,,,,,,,,2.0.7,,,,Samples,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112397,,,2008-05-26 02:08:56.0,,,,,,0|i14007:,231463,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
wsdl_first_https sample doesn't work caused by the Certificate we are using expired,CXF-1606,12396754,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,ffang,ffang,ffang,24/May/08 13:44,03/Jul/08 17:19,14/Mar/19 02:29,26/May/08 02:33,,,,,,,,,,,,,,,2.0.7,2.1.1,,,Samples,,,,,,0,,,,"get expection like
java.security.cert.CertificateExpiredException: NotAfter: Fri May 23 14:08:24 CST 2008
seems we need regenerate it",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112395,,,2008-05-24 13:44:40.0,,,,,,0|i1acvj:,268552,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Dynamic client does not support attachements,CXF-1605,12396713,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,bmargulies,benjamin coiffe,benjamin coiffe,23/May/08 13:45,24/Apr/09 21:16,14/Mar/19 02:29,25/Aug/08 01:16,2.0.4,2.0.5,2.0.6,2.1,,,,,,,,,,,2.0.9,2.1.3,,,Core,,,,,,0,,,,"The dynamic client does not support attachement it is missing a few handlers in the stack...More precisely, it is not getting any handlers from the Binding because it the Endpoint used is not initiated correctly. 

A quick fix is to change one line in the ClientImpl(String,Bus,EndpointInfo): new EndpointImpl(...) with new JaxWsEndpointImpl(); but it kind of breaks the build.
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-05-23 20:14:33.794,,,no_permission,,,,,,,,,,,,,112394,,,Mon Aug 25 01:16:46 UTC 2008,,,,,,0|i0syk7:,167076,,,,,,,,"23/May/08 20:14;bmargulies;Hmm. It's supposed to be a JAX-WS dynamic client, so it seems like sorting out the shrapnel in the build might make sense. I'll have a look.
","23/May/08 22:17;bmargulies;Benjamin,

On the trunk, I added a new DynamicClientFactory in the land of JAX-WS. Could you please give it a spin? If you could possibly come up with a patch containing a test for all of this, I'd be exceedingly grateful.

I don't know whether to think in terms of deprecating the plain JAXB factory, leaving it alone, or giving it more interceptors.

--benson
","25/May/08 14:50;benjamin coiffe;I'll give it a go with the web service whose description is attached in core-1603 and then patch and test.
","26/May/08 02:30;bmargulies;Benjamin,

I've checked in a regression test for 1603, and that gives me a
service I can use to test the new Dynamic client, which I've renamed
to JaxWsDynamicClientFactory.

--benson
","26/May/08 12:01;bmargulies;The sun service fails wsdlvalidator. It also triggers a bug in wsdl4j, which is making it hard to tell if I'm getting anywhere with this. New JIRA to follow.","26/May/08 12:27;benjamin coiffe;Yep, this one is very weird...
For example, one of the parameters of the convertMime method is a Holder<byte[]>...When I pass it the object, i get the exception B[ attachements are not supported. I can get it working by forcing a DataHandler through the Client.invoke...

Well, all this to say that I managed to get the convertMime working with the Dynamic Client but the Service generated is unusable...
Btw, the parsing of the wsdl works for me...
More details later",25/Aug/08 01:16;bmargulies;Evidence is that this was all fixed. Counter-evidence would be welcome.,,,,,,,,,,,,,,,,,,,,,,,,
"Passing null to an ""object array"" or ""object list"" parameter results in NPE",CXF-1604,12396637,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,dkulp,dkulp,22/May/08 15:30,03/Jul/08 17:19,14/Mar/19 02:29,22/May/08 16:26,2.0.6,2.1,,,,,,,,,,,,,2.0.7,2.1.1,,,JAX-WS Runtime,,,,,,0,,,,"
If a ""null"" is passed for a List<String> parameter when using unwrapped doc/lit stuff and using wsdl2java generated wrapper types, a stack trace is dumped:

Caused by: java.lang.NullPointerException
at java.util.ArrayList.addAll(ArrayList.java:472)
at com.foo.blah.BlahArray_WrapperTypeHelper1.createWrapperObject(Unknown Source)
at org.apache.cxf.jaxws.interceptors.WrapperClassOutInterceptor.handleMessage(WrapperClassOutInterceptor.java:102)
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112393,,,2008-05-22 15:30:02.0,,,,,,0|i0v45b:,179645,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Can not generate subs or dynamic client for a web service with no Body Parts (NullPointerException),CXF-1603,12396606,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,benjamin coiffe,benjamin coiffe,22/May/08 08:47,03/Jul/08 17:19,14/Mar/19 02:29,22/May/08 15:08,2.0,2.0.1,2.0.2,2.0.3,2.0.4,2.1.1,,,,,,,,,2.0.7,2.1.1,,,Soap Binding,,,,,,0,,,,"Stacktrace is:
at org.apache.cxf.binding.soap.SoapBindingFactory.initializeMessage(SoapBindingFactory.java:576)
	at org.apache.cxf.binding.soap.SoapBindingFactory.initializeBindingOperation(SoapBindingFactory.java:500)
	at org.apache.cxf.binding.soap.SoapBindingFactory.createBindingInfo(SoapBindingFactory.java:475)
	at org.apache.cxf.wsdl11.WSDLServiceBuilder.buildBinding(WSDLServiceBuilder.java:364)
	at org.apache.cxf.wsdl11.WSDLServiceBuilder.buildServices(WSDLServiceBuilder.java:253)
	at org.apache.cxf.wsdl11.WSDLServiceBuilder.buildServices(WSDLServiceBuilder.java:147)
	at org.apache.cxf.wsdl11.WSDLServiceBuilder.buildServices(WSDLServiceBuilder.java:136)
	at org.apache.cxf.wsdl11.WSDLServiceFactory.create(WSDLServiceFactory.java:94)
	at org.apache.cxf.endpoint.ClientImpl.<init>(ClientImpl.java:109)

Code is:
if (sb.getParts().size() == 1) {
      partName = (String) sb.getParts().get(0);
}

and certainly should be:

 if (sb.getParts() != null  && sb.getParts().size() == 1) {
              partName = (String) sb.getParts().get(0);
 }


",,,,,,,,,,,,,,,,,22/May/08 08:49;benjamin coiffe;SOConverter.xml;https://issues.apache.org/jira/secure/attachment/12382544/SOConverter.xml,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2008-05-26 00:46:32.786,,,no_permission,,,,,,,,,,,,,112392,,,Mon May 26 00:46:32 UTC 2008,,,,,,0|i146kn:,232528,,,,,,,,"22/May/08 08:49;benjamin coiffe;The wsdl attached is the one from Sun Star Office and CXF fails to do anything with it. With the fix suggested above, it can generate the stubs. ",26/May/08 00:46;bmargulies;What a pity that it has that obnoxious IP notice on the top and thus we can't check it in at Apache.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DataTypeAdapter causes NPE with jaxb-impl 2.1.6 if multiple bindings go to the same java type,CXF-1602,12396565,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,piepera,piepera,21/May/08 20:39,03/Jul/08 17:19,14/Mar/19 02:29,29/May/08 17:30,,,,,,,,,,,,,,,2.0.7,2.1.1,,,,,,,,,0,,,,"A NullPointerException occurs in the attached example. I'm not sure exactly what causes it, but the following conditions seem to play a role:

  * jaxb-impl v2.1.6. If we switch to jaxb-impl v2.0.1, the NPE doesn't happen.
  * We define a custom binding.xml with two classes mapped to the same java type. In this example, ""date"" and ""datetime"" are both mapped to ""java.util.Date"". If we remove the ""datetime"" binding, the NPE doesn't happen.

The result is that it tries to pass a ""null"" value into the Date->String adapter, which causes an NPE.

Caused by: java.lang.NullPointerException
        at java.util.Calendar.setTime(Calendar.java:1032)
        at org.apache.cxf.tools.common.DataTypeAdapter.printDateTime(DataTypeAdapter.java:52)
        at gen.jdnets.ds.Adapter2.marshal(Adapter2.java:17)
        at gen.jdnets.ds.Adapter2.marshal(Adapter2.java:7)
        at com.sun.xml.bind.v2.runtime.reflect.AdaptedAccessor.get(AdaptedAccessor.java:72)
        ... 52 more",,,,,,,,,,,,,,,,,21/May/08 20:40;piepera;date_bug.zip;https://issues.apache.org/jira/secure/attachment/12382509/date_bug.zip,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2008-05-29 17:30:34.64,,,no_permission,,,,,,,,,,,,,112391,,,Thu May 29 17:56:39 UTC 2008,,,,,,0|i0v007:,178974,,,,,,,,"21/May/08 20:40;piepera;This was adapted from the wsdl_first sample. Extract it into the apache-cxf-2.1/samples/date_bug folder, then run ""ant server"" and ""ant client"" similar to the other examples.","29/May/08 17:30;dkulp;
First, there is a problem with the sample:
In the binding.xml, you map both xsd:date and xsd:dateTime to parseDateTime.   xsd:date should be mapped to just parseDate.


The bug is for ""optional"" stuff (like the optional date), the null is passed into the parseDateTime/printDateTime routines.   We need to just return null there as well.   

","29/May/08 17:56;piepera;Thanks for the fix. The bug in the sample is also in our code, so that's a good catch too.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Paramaters are being generated for parts in out-of-band messages that aren't listed in the ""part"" of the soap:header",CXF-1600,12396524,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,dkulp,dkulp,21/May/08 17:03,03/Jul/08 17:19,14/Mar/19 02:29,21/May/08 17:27,2.0.6,2.1,,,,,,,,,,,,,2.0.7,2.1.1,,,Tooling,,,,,,0,,,,"
The salesforce.com wsdl puts ALL the possible headers into a single message, and then just references one part at a time for the various operations.   

With ""-exsh true"", the code generator is generating parameters for ALL the parts in that message, not just the single part that is referenced from the <soap:header part=""""> element in the wsdl.

",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112389,,,2008-05-21 17:03:01.0,,,,,,0|i1acvr:,268553,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DynamicClientFactory.setupClasspath throws a null pointer exception if classloader does not contain jars,CXF-1596,12396331,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,uwodi,uwodi,19/May/08 17:11,03/Jul/08 17:19,14/Mar/19 02:29,20/May/08 16:37,2.1,,,,,,,,,,,,,,2.0.7,2.1.1,,,JAXB Databinding,,,,,,0,,,,"On WAS, one of the ExtClassCloader returns a null instead of an empty array when getUrls is called.

Stack trace:
Caused by: java.lang.RuntimeException: java.lang.NullPointerException
        at org.apache.cxf.endpoint.dynamic.DynamicClientFactory.createClient(DynamicClientFactory.java:215)
        at org.apache.cxf.endpoint.dynamic.DynamicClientFactory.createClient(DynamicClientFactory.java:150)
        at org.apache.cxf.endpoint.dynamic.DynamicClientFactory.createClient(DynamicClientFactory.java:129)
        at mil.af.ilss.common.service.WebServiceUtil.invokeWebService(WebServiceUtil.java:43)
        ... 1 more
Caused by: java.lang.NullPointerException
        at org.apache.cxf.endpoint.dynamic.DynamicClientFactory.setupClasspath(DynamicClientFactory.java:404)
        at org.apache.cxf.endpoint.dynamic.DynamicClientFactory.createClient(DynamicClientFactory.java:213)

The following is the list of classloaders in order:
     com.ibm.ws.classloader.CompoundClassLoader           Delegation Mode: PARENT_FIRST
     com.ibm.ws.classloader.JarClassLoader                          Delegation mode: PARENT_LAST
     com.ibm.ws.classloader.ProtectionClassLoader 
     com.ibm.ws.bootstrap.ExtClassLoader


The following code should fix the issue.   setupClasspath method line 402:

            if (tcl instanceof URLClassLoader) {
                URL[] urls = ((URLClassLoader)tcl).getURLs();
                if (urls != null) {
	                for (URL url : urls) {
	                    if (url.getProtocol().startsWith(""file"")) {
	                        File file; 
	                        try { 
	                            file = new File(url.toURI().getPath()); 
	                        } catch (URISyntaxException urise) { 
	                            file = new File(url.getPath()); 
	                        } 
	
	                        if (file.exists()) { 
	                            classPath.append(file.getAbsolutePath()) 
	                                .append(System 
	                                        .getProperty(""path.separator"")); 
	
	                            if (file.getName().endsWith("".jar"")) { 
	                                addClasspathFromManifest(classPath, file); 
	                            }                         
	                        }     
	                    }
	                }
                }
            }
","Websphere 6.1.0.7, jdk 1.5.09, Solaris",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,Novice,,,,,,,,,,,112386,,,2008-05-19 17:11:20.0,,,,,,0|i1acwf:,268556,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE in W3CDOMStreamWriter.writeCharacters caused by StaxUtils.copy,CXF-1595,12396327,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,piepera,piepera,19/May/08 16:03,03/Jul/08 17:19,14/Mar/19 02:29,29/May/08 17:45,2.1,,,,,,,,,,,,,,2.0.7,2.1.1,,,Core,,,,,,0,,,,"An NPE in W3CDOMStreamWriter.writeCharacters is caused by StaxUtils.copy. Tracing into W3CDOMStreamWriter, this happens because ""currentNode""  is null.

The stack trace is attached.",,,,,,,,,,,,,,,,,19/May/08 17:47;piepera;patch.txt;https://issues.apache.org/jira/secure/attachment/12382321/patch.txt,19/May/08 16:03;piepera;stacktrace.txt;https://issues.apache.org/jira/secure/attachment/12382308/stacktrace.txt,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112385,,,Mon May 19 17:47:47 UTC 2008,,,,,,0|i0sykn:,167078,,,,,,,,19/May/08 17:47;piepera;Proposed patch,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
cxf-codegen-plugin : wsdl2java does not take packagename argument into account,CXF-1593,12396318,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,jc.meillaud,jc.meillaud,19/May/08 14:33,03/Jul/08 17:19,14/Mar/19 02:29,19/May/08 18:00,2.0.6,2.1,,,,,,,,,,,,,2.0.7,2.1.1,,,WS-* Components,,,,,,0,,,,"When using the wsdl2java task of the Maven cxf-codegen-plugin, the argument packagename is not taken into account for the generated code.

In order to reproduce the bug, just create a simple maven project with only one WSDL, and try to generate java code through a maven codegen task :

<plugin>
        <groupId>org.apache.cxf</groupId>
        <artifactId>cxf-codegen-plugin</artifactId>
        <version>${cxf.version}</version>
        <executions>
        <execution>
            <id>generate-sources</id>
            <phase>generate-sources</phase>
            <configuration>
          <sourceRoot>${basedir}/target/generated/</sourceRoot>
          <wsdlOptions>
            <wsdlOption>
              <wsdl>${basedir}/src/main/resources/wsdl/my_simple_wsdl.wsdl</wsdl>
              <extraargs>
                <extraarg>p</extraarg>
                <extraarg>com.something.else</extraarg>
              </extraargs>
            </wsdlOption>
          </wsdlOptions>
        </configuration>
            <goals>
                <goal>wsdl2java</goal>
            </goals>
        </execution>
    </executions>
      </plugin>


It seems to work only with cxf 2.0.2-incubator
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-05-19 17:36:28.741,,,no_permission,,Moderate,,,,,,,,,,,112383,,,Tue May 20 01:37:14 UTC 2008,,,,,,0|i1acwv:,268558,,,,,,,,"19/May/08 17:36;dkulp;
OK.  I can duplicate the problem and am working on a fix.

There are two workarounds:

1) in the pom, add a configuration option like <wsdlRoot>${basedir}/src/dir/does/not/exist</wsdlRoot>

2) Instead of configuring any wsdl related args in the pom, create a file:
${basedir}/src/main/resources/wsdl/my_simple_wsdl-options
which is just a text file that would contains the options you want, like:
-p com.something



",19/May/08 23:52;gmazza;Doesn't he just need to use: <extraarg>-p</extraarg> instead of <extraarg>p</extraarg>?,"20/May/08 01:37;dkulp;
Glen, 

Nope.  That was my first thought as well.   The problem stemmed from the auto processing of the wsdls in src/main/resources/wsdl directory that was needed for the command line runs to work.   Any file in there is processed with the autodetected stuff instead of anything specified in the pom.xml.    The change I made today allowed the pom specified stuff to be merged into the autodetected stuff.

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,
DynamicClientFactory throws inside JAXB when presented with Aegis-generated WSDL,CXF-1592,12396264,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,bmargulies,bmargulies,17/May/08 22:47,24/Mar/11 07:06,14/Mar/19 02:29,20/May/08 21:22,2.1.1,,,,,,,,,,,,,,2.0.7,2.1.1,,,,,,,,,0,,,,"org.apache.cxf.systest.aegis.AegisClientServerTest now contains an @Ignored test case which tries to create a dynamic client from an Aegis service. One of the problems seems to be that the generated ObjectFactory is trying to perform an unnatural act with a StackTraceElement.

The result is ...

java.lang.IllegalStateException: Unable to create JAXBContext for generated packages: 1 counts of IllegalAnnotationExceptions
	at org.apache.cxf.endpoint.dynamic.DynamicClientFactory.createClient(DynamicClientFactory.java:245)
	at org.apache.cxf.endpoint.dynamic.DynamicClientFactory.createClient(DynamicClientFactory.java:150)
	at org.apache.cxf.endpoint.dynamic.DynamicClientFactory.createClient(DynamicClientFactory.java:129)
	at org.apache.cxf.systest.aegis.AegisClientServerTest.testDynamicClient(AegisClientServerTest.java:161)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at org.junit.internal.runners.TestMethod.invoke(TestMethod.java:59)
	at org.junit.internal.runners.MethodRoadie.runTestMethod(MethodRoadie.java:98)
	at org.junit.internal.runners.MethodRoadie$2.run(MethodRoadie.java:79)
	at org.junit.internal.runners.MethodRoadie.runBeforesThenTestThenAfters(MethodRoadie.java:87)
	at org.junit.internal.runners.MethodRoadie.runTest(MethodRoadie.java:77)
	at org.junit.internal.runners.MethodRoadie.run(MethodRoadie.java:42)
	at org.junit.internal.runners.JUnit4ClassRunner.invokeTestMethod(JUnit4ClassRunner.java:88)
	at org.junit.internal.runners.JUnit4ClassRunner.runMethods(JUnit4ClassRunner.java:51)
	at org.junit.internal.runners.JUnit4ClassRunner$1.run(JUnit4ClassRunner.java:44)
	at org.junit.internal.runners.ClassRoadie.runUnprotected(ClassRoadie.java:27)
	at org.junit.internal.runners.ClassRoadie.runProtected(ClassRoadie.java:37)
	at org.junit.internal.runners.JUnit4ClassRunner.run(JUnit4ClassRunner.java:42)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:38)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)
Caused by: com.sun.xml.bind.v2.runtime.IllegalAnnotationsException: 1 counts of IllegalAnnotationExceptions
java.lang.StackTraceElement does not have a no-arg default constructor.
	this problem is related to the following location:
		at java.lang.StackTraceElement
		at public java.lang.StackTraceElement[] java.lang.Throwable.getStackTrace()
		at java.lang.Throwable
		at java.lang.Exception
		at java.lang.RuntimeException
		at javax.xml.ws.WebServiceException
		at public javax.xml.bind.JAXBElement org.apache.cxf.systest.aegis.sports.ObjectFactory.createWebServiceException(javax.xml.ws.WebServiceException)
		at org.apache.cxf.systest.aegis.sports.ObjectFactory

	at com.sun.xml.bind.v2.runtime.IllegalAnnotationsException$Builder.check(IllegalAnnotationsException.java:102)
	at com.sun.xml.bind.v2.runtime.JAXBContextImpl.getTypeInfoSet(JAXBContextImpl.java:438)
	at com.sun.xml.bind.v2.runtime.JAXBContextImpl.<init>(JAXBContextImpl.java:286)
	at com.sun.xml.bind.v2.ContextFactory.createContext(ContextFactory.java:139)
	at com.sun.xml.bind.v2.ContextFactory.createContext(ContextFactory.java:117)
	at com.sun.xml.bind.v2.ContextFactory.createContext(ContextFactory.java:188)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at javax.xml.bind.ContextFinder.newInstance(ContextFinder.java:133)
	at javax.xml.bind.ContextFinder.find(ContextFinder.java:286)
	at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:372)
	at org.apache.cxf.endpoint.dynamic.DynamicClientFactory.createClient(DynamicClientFactory.java:242)
	... 25 more

",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2011-03-24 07:06:22.086,,,no_permission,,Advanced,,,,,,,,,,,112382,,,Thu Mar 24 07:06:22 UTC 2011,,,,,,0|i1abuv:,268387,,,,,,,,"18/May/08 00:37;bmargulies;The source of the distress here is the throws WebServiceException. XJC tries to generate code for that class, with really unfortunate consequences. Shouldn't something have built a fault bean wrapper, instead?",24/Mar/11 07:06;timeking;Still reproduced http://stackoverflow.com/questions/825887/cxf-illegalannotationexception-related-to-no-arg-stacktraceelement-constructor,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WS Addressing Does Not Work with JAX-WS Provider Based Implementations,CXF-1591,12396219,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,bharath_t19,bharath_t19,16/May/08 20:05,04/Jun/09 21:32,14/Mar/19 02:29,13/May/09 18:32,2.1,,,,,,,,,,,,,,2.2.2,,,,WS-* Components,,,,,,3,,,,"When we deploy our services on CXF using the provider based implementation.And by following the steps in the admin guide to enable the addressing feature i see that the addressing is enabled on the server ,but i do not see the addressing headers going back in the response.When we add the following annotations to our provider we see the exception below.


@Addressing(enabled=true, required=true)
public class AuthenticationProvider
  implements Provider<SOAPMessage>

I have also tried by using the action annotation on the invoke method,but the result is still the same.

 @Action(
        input=""http://authentication.org/input"",
        output=""http://authentication.org/output"")

This is the Soap Request and Response

Payload: <soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/""><
soap:Header><MessageID xmlns=""http://www.w3.org/2005/08/addressing"">urn:uuid:93c
e3eaa-ddf7-456f-b4eb-9028c9ef0c7c</MessageID><To xmlns=""http://www.w3.org/2005/0
8/addressing"">http://127.0.0.1:9090/p6ws/services/AuthenticationService</To><Rep
lyTo xmlns=""http://www.w3.org/2005/08/addressing""><Address>http://www.w3.org/200
5/08/addressing/anonymous</Address></ReplyTo><FaultTo xmlns=""http://www.w3.org/2
005/08/addressing""><Address>http://www.w3.org/2005/08/addressing/anonymous</Addr
ess></FaultTo><Action xmlns=""http://www.w3.org/2005/08/addressing"">http://authen
tication.org/input</Action></soap:Header><soap:Body><Login xmlns=""http://ws.prim
avera.com/2007/p6/6.1/Authentication"" xmlns:ns2=""http://schemas.primavera.com/20
07/p6/6.1/IntegrationFaultType""></Login></soap:Body></soap:Envelope>
--------------------------------------
May 8, 2008 1:25:28 PM org.apache.cxf.ws.addressing.ContextUtils retrieveMAPs
INFO: retrieving MAPs from context property javax.xml.ws.addressing.context.inbo
und
May 8, 2008 1:25:28 PM org.apache.cxf.ws.addressing.ContextUtils retrieveMAPs
INFO: WS-Addressing - failed to retrieve Message Addressing Properties from cont
ext
May 8, 2008 1:25:28 PM org.apache.cxf.ws.addressing.soap.MAPCodec unmarshalMAPs
INFO: Inbound WS-Addressing headers
May 8, 2008 1:25:28 PM org.apache.cxf.ws.addressing.ContextUtils retrieveMAPs
INFO: retrieving MAPs from context property javax.xml.ws.addressing.context.inbo
und
May 8, 2008 1:25:28 PM org.apache.cxf.ws.addressing.ContextUtils retrieveMAPs
WARNING: WS-Addressing - failed to retrieve Message Addressing Properties from c
ontext
May 8, 2008 1:25:28 PM org.apache.cxf.ws.addressing.MAPAggregator getMAPs
INFO: MAPs retrieved from message null
May 8, 2008 1:25:28 PM org.apache.cxf.phase.PhaseInterceptorChain doIntercept
INFO: Interceptor has thrown exception, unwinding now
org.apache.cxf.binding.soap.SoapFault: A required header representing a Message
Addressing Property is not present
        at org.apache.cxf.ws.addressing.MAPAggregator.mediate(MAPAggregator.java
:374)
        at org.apache.cxf.ws.addressing.MAPAggregator.handleMessage(MAPAggregato
r.java:158)
        at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseIntercept
orChain.java:221)
        at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainIniti
ationObserver.java:78)
        at org.apache.cxf.transport.servlet.ServletDestination.invoke(ServletDes
tination.java:92)
        at org.apache.cxf.transport.servlet.ServletController.invokeDestination(
ServletController.java:214)
        at org.apache.cxf.transport.servlet.ServletController.invoke(ServletCont
roller.java:151)
        at org.apache.cxf.transport.servlet.AbstractCXFServlet.invoke(AbstractCX
FServlet.java:170)
        at org.apache.cxf.transport.servlet.AbstractCXFServlet.doPost(AbstractCX
FServlet.java:148)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:710)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:803)
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(Appl
icationFilterChain.java:269)
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationF
ilterChain.java:188)
        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperV
alve.java:213)
        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextV
alve.java:174)
        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.j
ava:127)
        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.j
ava:117)
        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineVal
ve.java:108)
        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.jav
a:151)
        at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java
:874)
        at org.apache.coyote.http11.Http11BaseProtocol$Http11ConnectionHandler.p
rocessConnection(Http11BaseProtocol.java:665)
        at org.apache.tomcat.util.net.PoolTcpEndpoint.processSocket(PoolTcpEndpo
int.java:528)
        at org.apache.tomcat.util.net.LeaderFollowerWorkerThread.runIt(LeaderFol
lowerWorkerThread.java:81)
        at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadP
ool.java:689)
        at java.lang.Thread.run(Thread.java:595)
May 8, 2008 1:25:28 PM org.apache.cxf.ws.addressing.ContextUtils retrieveMAPs
INFO: retrieving MAPs from context property javax.xml.ws.addressing.context.inbo
und
May 8, 2008 1:25:28 PM org.apache.cxf.ws.addressing.ContextUtils retrieveMAPs
WARNING: WS-Addressing - failed to retrieve Message Addressing Properties from c
ontext
May 8, 2008 1:25:28 PM org.apache.cxf.ws.addressing.MAPAggregator getMAPs
INFO: MAPs retrieved from message null
May 8, 2008 1:25:28 PM org.apache.cxf.ws.addressing.ContextUtils retrieveMAPs
INFO: retrieving MAPs from context property javax.xml.ws.addressing.context.outb
ound
May 8, 2008 1:25:28 PM org.apache.cxf.ws.addressing.ContextUtils retrieveMAPs
WARNING: WS-Addressing - failed to retrieve Message Addressing Properties from c
ontext
May 8, 2008 1:25:28 PM org.apache.cxf.ws.addressing.ContextUtils retrieveMAPs
INFO: retrieving MAPs from context property javax.xml.ws.addressing.context.outb
ound
May 8, 2008 1:25:29 PM org.apache.cxf.ws.addressing.ContextUtils retrieveMAPs
WARNING: WS-Addressing - failed to retrieve Message Addressing Properties from c
ontext
May 8, 2008 1:25:29 PM org.apache.cxf.interceptor.LoggingOutInterceptor$LoggingC
allback onClose
INFO: Outbound Message
---------------------------
Encoding: UTF-8
Headers: {}
Messages:
Payload: <soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/""><
soap:Body><soap:Fault><faultcode xmlns:ns1=""http://www.w3.org/2005/08/addressing
"">ns1:MessageAddressingHeaderRequired</faultcode><faultstring>A required header
representing a Message Addressing Property is not present</faultstring></soap:Fa
ult></soap:Body></soap:Envelope>","Windows XP,Apache Tomcat 5.5.25",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-04-21 21:41:49.297,,,no_permission,,,,,,,,,,,,,112381,,,Wed May 13 18:32:30 UTC 2009,,,,,,0|i14exz:,233884,,,,,,,,21/Apr/09 21:41;cmuchinsky@initiatesystems.com;Are there any workarounds for this issue?,"07/May/09 13:51;dkulp;
Linking this issue with the related Dispatch client issue.   The ongoing refactoring of the dispatch/provider stuff should hopefully solve this.",13/May/09 18:32;dkulp;Testcase added to CXF.   Now working in the latest 2.2.2 snapshots.,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Quoted-Printable Content-Transfer-Encoding does not get decoded,CXF-1590,12396204,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,piepera,piepera,16/May/08 16:36,24/Apr/09 21:16,14/Mar/19 02:29,12/Mar/09 20:37,2.1,,,,,,,,,,,,,,2.0.10,2.1.4,,,Core,,,,,,0,,,,"The following is an MTOM attachment generated by SoapUI, a web testing tool:

------=_Part_6_1979395.1210796510882
Content-Type: text/xml; charset=Cp1252
Content-Transfer-Encoding: quoted-printable
Content-ID: 606517570647

<?xml version=3D""1.0"" encoding=3D""UTF-8""?>
<MyXml attribute=3D""value"">
</MyXml>

The content-transfer-encoding is quoted-printable, and the attachment uses ""=3D"" throughout, which is a quoted-printable-encoded equals sign. CXF should handle the decoding of this attachment. However, when this attachment reaches my web service implementation after going through CXF's interceptors, the ""=3D"" characters are still included the document, rendering the XML invalid.",,,,,,,,,,,,CXF-1847,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,50433,,,2008-05-16 16:36:05.0,,,,,,0|i0sykv:,167079,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Exception is thrown only the first time an error occur while trying to publish a webservice with HTTP transport,CXF-1589,12396182,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,kjell,kjell,16/May/08 09:04,03/Jul/08 17:19,14/Mar/19 02:29,19/May/08 21:10,2.0.6,,,,,,,,,,,,,,2.0.7,2.1.1,,,Transports,,,,,,0,,,,"When a webservice with HTTP defined as transport is published with the following code and the service is already started at the defined publish address an exception is thrown which is a correct behaviour. The problem is that if the same publish code is executed again no error is thrown. 

try{
   Endpoint end = Endpoint.create(impl);
   endpoint = (EndpointImpl) end;
   endpoint.setWsdlLocation(wsdlfile);
   endpoint.publish();
}catch(WebServiceException e){
   System.out.println(e);
   
   //The following error message will be printed if the address is already in use:
   
   //javax.xml.ws.WebServiceException: org.apache.cxf.interceptor.Fault: START_UP_SERVER_FAILED_MSG
   //org.apache.cxf.interceptor.Fault: START_UP_SERVER_FAILED_MSG
   //java.net.BindException: Address already in use
}

try{
   Endpoint end = Endpoint.create(impl);
   endpoint = (EndpointImpl) end;
   endpoint.setWsdlLocation(wsdlfile);
   endpoint.publish();
}catch(WebServiceException e){
   System.out.println(e);
   
   //No exception is thrown this time even if the publish address is already in use
}

The problem seems to be in the method org.apache.cxf.transport.http_jetty.JettyHTTPServerEngine#addServant. The method has the following structure:

    public synchronized void addServant(URL url, JettyHTTPHandler handler) {

        if (server == null) {

            ....  code to start server

            } catch (Exception e) {
                LOG.log(Level.SEVERE, ""START_UP_SERVER_FAILED_MSG"", new Object[] {e.getMessage()});
                //problem starting server
                try {                    
                    server.stop();
                    server.destroy();
                } catch (Exception ex) {
                    //ignore - probably wasn't fully started anyway
                } // Add the following to fix the problem
                  //finally{
                  //  server = null;
                  //}  
                throw new Fault(new Message(""START_UP_SERVER_FAILED_MSG"", LOG, e.getMessage()), e);
            }
        }

The problem is that server field is not null the second time publish is called. Adding the expression ""server = null;"" in a finally block for the server.stop() and server.destroy() try seems to fix the problem.
",,1200,1200,,0%,1200,1200,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-05-19 20:42:25.2,,,no_permission,,Novice,,,,,,,,,,,112380,,,Mon May 19 20:42:25 UTC 2008,,,,,,0|i0v3vb:,179600,,,,,,,,"19/May/08 20:42;dkulp;
Well, it's definitely a little more involved than that.   :-(    That leaves the destination for that address with a listener attached so it thinks it's activated.   I'm tracing it through now.   Thus, the second call just re-uses it and doesn't fail. 


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException in JbiConduitOutputStream,CXF-1588,12396082,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Critical,Fixed,ffang,wbaran,wbaran,15/May/08 08:12,03/Jul/08 17:19,14/Mar/19 02:29,15/May/08 13:10,2.1.1,,,,,,,,,,,,,,2.0.7,2.1.1,,,Transports,,,,,,0,,,,"When MessageExchange contains no fault but error this code causes NPE:

NormalizedMessage outMsg = ((InOut)xchng).getOutMessage();
Source content = null;
if (outMsg != null) {
        content = outMsg.getContent();
} else {
        content = ((InOut)xchng).getFault().getContent();
}

There should be some checking for error if there is no fault present.",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112379,,,2008-05-15 08:12:19.0,,,,,,0|i0uz7r:,178846,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Aegis Databinding cannot handle wildcard as a Map value type (ex: Map<String, ?>)",CXF-1587,12396044,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,bmargulies,brianga,brianga,14/May/08 19:00,03/Jul/08 17:19,14/Mar/19 02:29,18/May/08 02:14,2.1,,,,,,,,,,,,,,2.1.1,,,,Aegis Databinding,,,,,,0,,,,"If an interface conatins a method which takes a param of type Map<String, ?> or returns a Map<String, ?> the following exception occurs with the following code:

ServerFactoryBean svrFactory = new ServerFactoryBean();
svrFactory.setServiceClass(Tester.class);
svrFactory.setAddress(""http://localhost:9090/cxfbug"");
svrFactory.setServiceBean(new TesterImpl());
svrFactory.getServiceFactory().setDataBinding(new AegisDatabinding());
svrFactory.create();

Exception in thread ""main"" java.lang.ArrayIndexOutOfBoundsException: 1
        at org.apache.cxf.aegis.type.java5.Java5TypeCreator.getComponentType(Java5TypeCreator.java:184)
        at org.apache.cxf.aegis.type.java5.Java5TypeCreator.getOrCreateParameterizedType(Java5TypeCreator.java:134)
        at org.apache.cxf.aegis.type.java5.Java5TypeCreator.getOrCreateMapValueType(Java5TypeCreator.java:130)
        at org.apache.cxf.aegis.type.AbstractTypeCreator.getOrCreateMapValueType(AbstractTypeCreator.java:254)
        at org.apache.cxf.aegis.type.XMLTypeCreator.getOrCreateMapValueType(XMLTypeCreator.java:514)
        at org.apache.cxf.aegis.type.AbstractTypeCreator.createMapType(AbstractTypeCreator.java:268)
        at org.apache.cxf.aegis.type.AbstractTypeCreator.createTypeForClass(AbstractTypeCreator.java:111)
        at org.apache.cxf.aegis.databinding.AegisDatabinding.getParameterType(AegisDatabinding.java:593)
        at org.apache.cxf.aegis.databinding.AegisDatabinding.initializeMessage(AegisDatabinding.java:375)
        at org.apache.cxf.aegis.databinding.AegisDatabinding.initializeOperation(AegisDatabinding.java:339)
        at org.apache.cxf.aegis.databinding.AegisDatabinding.initialize(AegisDatabinding.java:303)
        at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.buildServiceFromClass(ReflectionServiceFactoryBean.java:343)
        at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.initializeServiceModel(ReflectionServiceFactoryBean.java:394)
        at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.create(ReflectionServiceFactoryBean.java:180)
        at org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory.createEndpoint(AbstractWSDLBasedEndpointFactory.java:79)
        at org.apache.cxf.frontend.ServerFactoryBean.create(ServerFactoryBean.java:114)

If you do not use the Aegis Databinding then the code works as expected.
The problem seems to stem from the org.apache.cxf.aegis.type.java5.Java5TypeCrestor class in the following method:
protected Class getComponentType(Object genericType, int index) {
        Class paramClass = null;

        if (genericType instanceof ParameterizedType) {
            ParameterizedType type = (ParameterizedType)genericType;

            if (type.getActualTypeArguments()[index] instanceof Class) {
                paramClass = (Class)type.getActualTypeArguments()[index];
            } else if (type.getActualTypeArguments()[index] instanceof WildcardType) {
                WildcardType wildcardType = (WildcardType)type.getActualTypeArguments()[index];

                if (wildcardType.getUpperBounds()[index] instanceof Class) {
                    paramClass = (Class)wildcardType.getUpperBounds()[index];
                }
            } else if (type.getActualTypeArguments()[index] instanceof ParameterizedType) {
                ParameterizedType ptype = (ParameterizedType)type.getActualTypeArguments()[index];
                paramClass = (Class)ptype.getRawType();
            }
        }
        return paramClass;
    }

I found if I change 
if (wildcardType.getUpperBounds()[index] instanceof Class) {
                    paramClass = (Class)wildcardType.getUpperBounds()[index];
                }
to
if (wildcardType.getUpperBounds()[0] instanceof Class) {
                    paramClass = (Class)wildcardType.getUpperBounds()[0];
                }
it works in my case but not at all sure if this is the correct fix or if this should be expected to be supported.",Java 1.5.0_10; Windows,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-05-18 02:14:55.845,,,no_permission,,,,,,,,,,,,,112378,,,Sun May 18 02:14:55 UTC 2008,,,,,,0|i1abv3:,268388,,,,,,,,"18/May/08 02:14;bmargulies;Added test, fixed bug.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Error in javadoc of org.apache.cxf.common.logging.LogUtils,CXF-1585,12395848,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Trivial,Fixed,,andri,andri,12/May/08 16:45,03/Jul/08 17:19,14/Mar/19 02:29,12/May/08 16:58,2.1,,,,,,,,,,,,,,2.1.1,,,,Documentation,,,,,,0,,,,"Pretty trivial mistake in the javadoc of org.apache.cxf.common.logging.LogUtils: instead of looking for ""META-INF/cxf/org.apache.cxf.logger"" as the javadoc specifies, CXF will actually look for ""META-INF/cxf/org.apache.cxf.Logger"".",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-05-12 16:58:26.946,,,no_permission,,Novice,,,,,,,,,,,112376,,,Mon May 12 16:58:26 UTC 2008,,,,,,0|i1abvj:,268390,,,,,,,,12/May/08 16:46;andri;Documentation is probably a better component for this issue.,12/May/08 16:58;bmargulies;Done.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DynamicClientFactory.setupClasspath method throws Exception if jar file does not exist,CXF-1584,12395802,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,uwodi,uwodi,11/May/08 22:08,03/Jul/08 17:19,14/Mar/19 02:29,13/May/08 01:30,2.1,,,,,,,,,,,,,,2.1.1,,,,Core,,,,,,0,,,,"If a jar file reported by the classloader does not exist, the following exception is thrown:

Caused by: java.util.zip.ZipException: No such file or directory
        at java.util.zip.ZipFile.open(Native Method)
        at java.util.zip.ZipFile.<init>(ZipFile.java:203)
        at java.util.jar.JarFile.<init>(JarFile.java:132)
        at java.util.jar.JarFile.<init>(JarFile.java:97)
        at org.apache.cxf.endpoint.dynamic.DynamicClientFactory.addClasspathFromManifest(DynamicClientFactory.java:366)
        at org.apache.cxf.endpoint.dynamic.DynamicClientFactory.setupClasspath(DynamicClientFactory.java:422)
        at org.apache.cxf.endpoint.dynamic.DynamicClientFactory.createClient(DynamicClientFactory.java:214)
        ... 54 more

As the code does not display the file in question, it is a very tedious process to find the issue in the classpath.  It would be prefferable if the code would ignore any missing jar file.  Another possible solution (though less preferrable) would be to print the jar files as they are added.

Code in question:
                        if (file.exists()) {
                            classPath.append(file.getAbsolutePath())
                                .append(System
                                        .getProperty(""path.separator""));                                
                        }
                           
                        if (file.getName().endsWith("".jar"")) {
                            addClasspathFromManifest(classPath, file);
                        }

The following code should fix the issue:

                        if (file.exists()) {
                            classPath.append(file.getAbsolutePath())
                                .append(System
                                        .getProperty(""path.separator""));                                
                            if (file.getName().endsWith("".jar"")) {
                            	addClasspathFromManifest(classPath, file);
                            }
                        }
","Ubuntu 7.04, Windows XP, jdk 1.5_09, cxf 2.1 ",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112375,,,2008-05-11 22:08:31.0,,,,,,0|i0syl3:,167080,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DynamicClientFactory.setupClasspath method cannot handle spaces in path to jar file,CXF-1583,12395787,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,uwodi,uwodi,10/May/08 21:32,03/Jul/08 17:19,14/Mar/19 02:29,13/May/08 01:30,2.1,,,,,,,,,,,,,,2.1.1,,,,Core,,,,,,0,,,,"The setupClasspath method in the DynamicClientFactory class cannot handle spaces in the path to jar files.  It throws the following exception:

Caused by: java.net.URISyntaxException: Illegal character in path at index 16: file:/C:/Program Files/Apache/Tomcat-5.5.20/common/i18n/tomcat-i18n-en.jar
	at java.net.URI$Parser.fail(URI.java:2816)
	at java.net.URI$Parser.checkChars(URI.java:2989)
	at java.net.URI$Parser.parseHierarchical(URI.java:3073)
	at java.net.URI$Parser.parse(URI.java:3021)
	at java.net.URI.<init>(URI.java:578)
	at java.net.URL.toURI(URL.java:916)
	at org.apache.cxf.endpoint.dynamic.DynamicClientFactory.setupClasspath(DynamicClientFactory.java:405)

This is a know issue withthe URL.toURI() method.

A possible solution would be to replace the following:
                    if (url.getProtocol().startsWith(""file"")) {
                        try {
                            File file = new File(url.toURI().getPath());
                            if (file.exists()) {
                                classPath.append(file.getAbsolutePath())
                                    .append(System
                                            .getProperty(""path.separator""));                                
                            }
                               
                            if (file.getName().endsWith("".jar"")) {
                                addClasspathFromManifest(classPath, file);
                            }
                        } catch (URISyntaxException e) {
                            throw new UncheckedException(e);
                        }
                    }


with
                    if (url.getProtocol().startsWith(""file"")) {
                    	File file;
                    	try {
                    		file = new File(url.toURI().getPath());
                    	} catch (catch catch(URISyntaxException urise) { 
                            file = new File(url.getPath()); 
                        }

                        if (file.exists()) {
                            classPath.append(file.getAbsolutePath())
                                .append(System
                                        .getProperty(""path.separator""));                                
                        }
                           
                        if (file.getName().endsWith("".jar"")) {
                            addClasspathFromManifest(classPath, file);
                        }
                    }


","Ubuntu 7.04, Windows XP, jdk 1.5_09, cxf 2.1 ",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,Novice,,,,,,,,,,,112374,,,2008-05-10 21:32:32.0,,,,,,0|i0sylb:,167081,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
?wsdl not working if using the sun stax parser instead of woodstox,CXF-1581,12395731,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,dkulp,dkulp,09/May/08 17:45,03/Jul/08 17:19,14/Mar/19 02:29,12/May/08 20:37,2.0.6,2.1,,,,,,,,,,,,,2.0.7,2.1.1,,,,,,,,,0,,,,"
The writeAttributes method in StaxUtils is sometimes getting a ""null"" namespace which seems to be OK for woodstox, but not for Sun's parser.",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112372,,,2008-05-09 17:45:08.0,,,,,,0|i1abvz:,268392,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CXF uses unpredictable string constructor,CXF-1580,12395677,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,,bmargulies,bmargulies,09/May/08 01:50,03/Jul/08 17:19,14/Mar/19 02:29,18/May/08 00:13,2.1,,,,,,,,,,,,,,2.1.1,,,,,,,,,,0,,,,"CXF uses String(byte[], start, length), which uses the current default encoding, which could be anything. There are examples in 
CachedOutputStream. We need a PMD rule for this.
",,,,,,,,,,,,,,,,,10/May/08 13:16;bmargulies;stringprobs.html;https://issues.apache.org/jira/secure/attachment/12381822/stringprobs.html,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112371,,,Sun May 18 00:13:00 UTC 2008,,,,,,0|i140kv:,231556,,,,,,,,"10/May/08 13:16;bmargulies;I taught pmd to notice these, and here's a list.
",18/May/08 00:13;bmargulies;I fixed them all.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The web documentation don't show the examples,CXF-1579,12395656,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,jvillablanca,jvillablanca,08/May/08 20:38,03/Jul/08 17:19,14/Mar/19 02:29,20/May/08 20:18,,,,,,,,,,,,,,,2.1.1,,,,Documentation,,,,,,0,,,,"If you go to 
http://cwiki.apache.org/CXF20DOC/writing-a-service-with-spring.html
you can read:

Our implementation will then look like this:
An error occurred: Connection refused. The system administrator has been notified.


",Explorer and Apache over Windows XP,1800,1800,,0%,1800,1800,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-05-09 00:38:45.507,,,no_permission,,Unknown,,,,,,,,,,,112370,,,Tue May 20 20:18:40 UTC 2008,,,,,,0|i0v2bj:,179349,,,,,,,,"09/May/08 00:38;njiang;This issue is caused by the snippet plugin can't connect to the new apache svn repository box.
Maybe we should fill a JIRA for the apache infrastructure.","09/May/08 17:13;dkulp;No, this is because the SVN moved from incubator/cxf to just cxf.    Someone needs to go through the whole site and find all of them and fix them.  :-(


","20/May/08 20:18;dkulp;
The snippets have been updated to point to the new svn location.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Json marshall/unmarshall error,CXF-1578,12395577,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Blocker,Fixed,dkulp,ceppelli,ceppelli,07/May/08 23:23,28/Jul/08 14:09,14/Mar/19 02:29,22/Jul/08 18:37,2.0.6,2.1,,,,,,,,,,,,,2.0.8,2.1.2,,,JAX-RS,,,,,,0,,,,"The Json binding has problems with methods that have more than 1 parameter.
This is related only  with the Json stax parser. The pure xml binding has not problem.

To run the test case:

mvn test","Linux Fedora 8
Jdk 1.5.0_13-b05",,,,,,,,,,,,,,,,07/May/08 23:27;ceppelli;ceppelli.cxf.bug.json.zip;https://issues.apache.org/jira/secure/attachment/12381646/ceppelli.cxf.bug.json.zip,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2008-07-22 17:53:14.315,,,no_permission,,,,,,,,,,,,,112369,,,Tue Jul 22 18:37:59 UTC 2008,,,,,,0|i0uxfb:,178556,,,,,,,,07/May/08 23:27;ceppelli;mvn test,"22/Jul/08 17:53;dkulp;
This is a bug in Jettison.   I've logged a bug there:
http://jira.codehaus.org/browse/JETTISON-50



","22/Jul/08 18:37;dkulp;
I'm going to mark this resolved.  It's a bug in Jettison and really needs to get fixed there.   However, I put a ""workaround"" in place in this specific area of CXF so your test passes.   There may be other areas that call the same broken API though that would still be affected.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Documentation required related to transport chunking,CXF-1576,12395529,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,uwodi,uwodi,07/May/08 14:19,04/Dec/09 22:35,14/Mar/19 02:29,30/Oct/09 17:27,2.1,,,,,,,,,,,,,,Invalid,,,,Documentation,,,,,,0,,,,"We had an issue (referenced in issue #1575), that seems to have been caused by the setting of the ""Transfer-Encoding: chunked""  header on the soap messages.  The following soap error was returned:
     org.apache.cxf.binding.soap.SoapFault: [ISS.0088.9125] SOAP request does not conform to the SOAP message model 

It would great if the documentation go a bit more in depth about what chunking is and how endpoints respond to it.  We were able to resolve our issue by turning chunking off, but it took a while to figure out (due to #1575).  We are still unclear as to why chunking caused the issue for our client.","Ubuntu 7.04, Windows XP, jdk 1.5_09, cxf 2.1 ",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-10-30 17:27:19.236,,,no_permission,,,,,,,,,,,,,112367,,,Fri Oct 30 17:27:19 UTC 2009,,,,,,0|i13zpr:,231416,,,,,,,,"30/Oct/09 17:27;dkulp;Added some content about chunking to:

http://cwiki.apache.org/confluence/display/CXF20DOC/Client+HTTP+Transport+(including+SSL+support)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SoapFault is not being properly propagated up the stack,CXF-1575,12395527,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,,uwodi,uwodi,07/May/08 14:08,03/Jul/08 17:19,14/Mar/19 02:29,20/May/08 21:19,2.1,,,,,,,,,,,,,,2.0.7,2.1.1,,,JAX-WS Runtime,,,,,,0,,,,"We are getting a soap exception
     org.apache.cxf.binding.soap.SoapFault: [ISS.0088.9125] SOAP request does not conform to the SOAP message model

that is not being properly propagated up.  Instead we are getting a java.lang.NoSuchMethodError: javax.xml.soap.SOAPFactory.createFault()Ljavax/xml/soap/SOAPFault;

Looks like the issue is in the JaxWsClientProxy.invoke(Object, Method, Object[]) line: 193	

            if (getBinding() instanceof HTTPBinding) {
                HTTPException exception = new HTTPException(HttpURLConnection.HTTP_INTERNAL_ERROR);
                exception.initCause(ex);
                throw exception;
            } else if (getBinding() instanceof SOAPBinding) {
                SOAPFault soapFault = ((SOAPBinding)getBinding()).getSOAPFactory().createFault();
                                                                                                                                                  ^^^^^^^^^^^^^^

Looks like the SoapFactory returned by the binding does not have a createFault method.  Does this mean that we have the incorrect version of a jar?

At any rate, the error should be caught so that a the very least a meaningful stack trace will be generated.
","Ubuntu 7.04, Windows XP, jdk 1.5_09,  cxf 2.1",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-05-20 20:25:12.168,,,no_permission,,,,,,,,,,,,,112366,,,Wed May 21 00:05:08 UTC 2008,,,,,,0|i1abwf:,268394,,,,,,,,"20/May/08 20:25;dkulp;
This would mean that you have a 1.2 version of saaj instead of the 1.3 version we ship.   Check you classloader for older implementations.

","20/May/08 21:19;dkulp;Added some code to get it to try and do something a bit smarter if an older saaj version is found.

","21/May/08 00:05;uwodi;Yes, there was an older version of saaj on the classpath.  Gotta love Websphere as it seems to load some jars even though it is directed to load application jars first.  I appreciate the help",,,,,,,,,,,,,,,,,,,,,,,,,,,,
JBI transport should support copy inbound normalizedmessage property to outbound normalizedmessage,CXF-1574,12395503,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,ffang,ffang,ffang,07/May/08 10:21,03/Jul/08 17:19,14/Mar/19 02:29,07/May/08 10:24,,,,,,,,,,,,,,,2.0.7,2.1.1,,,Integration,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112365,,,2008-05-07 10:21:13.0,,,,,,0|i0v29b:,179339,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JBIDestinationOutputStream should copy attachments into NormalizedMessage to support outbound attachments,CXF-1573,12395489,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,ffang,ffang,ffang,07/May/08 06:47,03/Jul/08 17:19,14/Mar/19 02:29,07/May/08 08:32,,,,,,,,,,,,,,,2.0.7,2.1.1,,,,,,,,,0,,,,"related issuse in servicemix
https://issues.apache.org/activemq/browse/SM-1336",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112364,,,2008-05-07 06:47:17.0,,,,,,0|i0v3xj:,179610,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
@Path is not mapping to required methods,CXF-1572,12395440,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,sergey_beryozkin,bradmoody,bradmoody,06/May/08 16:36,18/Aug/08 18:26,14/Mar/19 02:29,03/Jul/08 17:16,2.1,,,,,,,,,,,,,,2.1.2,,,,JAX-RS,,,,,,0,,,,"Hi


    Hi,

    I'm getting an issue where my @Path annotations aren't mapping to the
    required URLs. Here's a rough outline of my test class:

    @Path(value=""/{domain}/{network}/{user}/mail"")
    public class MailService {

    @GET
    @ConsumeMime({""application/xml"", ""application/json""})
    @ProduceMime({""application/xml"", ""application/json""})
    public MailFolderDocument listMail(@PathParam(""domain"")String domain,
    @PathParam(""network"")String network, @PathParam(""user"")String user,
    @HeaderParam(""token"")String token){
              ....
          }

    @Path(value=""/{messageId}"", limited=true)
    @GET
    @ConsumeMime({""application/xml"", ""application/json""})
    @ProduceMime({""application/xml"", ""application/json""})
    public MessageDocument readMessage(@PathParam(""user"")String user,
    @PathParam(""messageId"")String messageId, @HeaderParam(""token"")String
    token){
              ....
          }
    }

    The problem I'm seeing is that when i invoke the URL
    http://localhost:8081/cxf/rest/test/domain/network/brad/mail, it
    invokes the readMessage method instead of listMail. Am I using the
    correct format for my annotations here?


The annontations seem fine. Can you confirm please, as your're debugging, that listMail() is also added to the list of candidates ?
I'm actually not sure what exactly JAX_RS says in this regard, the only piece I can see is this one (section 3.6, 2.f) :

""Sort E using the number of literal characters in each member as the primary key (descending order), ..., number of capturing groups as the secondary key, and the source of each member ...""

In both cases it's a resource method, so the source is the same. Number of captuting groups for listMail is 3 as opposed to 2 for readEmail(), and the number of literal characters is different. It seems like only this bit of the specification which governs the dispatch in this case, but I''ll need to verify it...

One possible workaround is to

1. Have another root class created, but with slightly different Path.

In the end, I believe it's the CXF bug rather than the ambiguity of the JAX-RS spec...Can you please open a JIRA ?





    Anyway, just in case I have got it right (*pig flies by*) I stepped
    through JAXRSUtils.findTargetMethod and I was left wondering if this
    line is correct:

    private static final String URITEMPLATE_VARIABLE_REGEX = ""(.*?)"";

    I'm no regex expert but I did find this in the Java 1.5 API docs:

    X*?  X, zero or more times
    X+? X, one or more times

    Would that value make more sense as ""(.+?)"" ?


This is required by the spec, every template parameter is substituted by this reg expression. The rationale I believe is that it
makes it possible for a given method act as a subresource locator...

Cheers, Sergey


    Thanks,
    Brad.


----------------------------
IONA Technologies PLC (registered in Ireland)
Registered Number: 171387
Registered Address: The IONA Building, Shelbourne Road, Dublin 4, Ireland","Win XP, Sun JDK 1.5_011",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-07-03 17:15:08.921,,,no_permission,,,,,,,,,,,,,112363,,,Thu Jul 03 17:16:04 UTC 2008,,,,,,0|i1abwn:,268395,,,,,,,,03/Jul/08 17:15;sergey_beryozkin;This is fixed on the trunk - using number of matching groups workaround - in 0.9 we'll use a diiferent reqular expression as per the spec. Thanks for your analysis and suggesting (.+?),03/Jul/08 17:16;sergey_beryozkin;Feel free to reopen if you'll be able to reproduce the issue on the trunk ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"CachedOutputStream#writeCacheTo(StringBuilder, int) fails with StringIndexOutOfBoundsException",CXF-1571,12395396,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,bmargulies,axelviii,axelviii,06/May/08 09:47,03/Jul/08 17:19,14/Mar/19 02:29,09/May/08 01:43,2.1,,,,,,,,,,,,,,2.1.1,,,,Core,,,,,,0,,,,"    public void writeCacheTo(StringBuilder out, int limit) throws IOException {
    ...
                if ((count + x) > limit) {
                    x = count - limit;                               <<< this has to be:    x = limit - count;
                }
                out.append(new String(bytes, 0, x));
                count += x;
    ...
    }

If limit is reached x becomes negative and String construction fails with

java.lang.StringIndexOutOfBoundsException: String index out of range: -784
	at java.lang.String.checkBounds(String.java:368)
	at java.lang.String.<init>(String.java:457)
	at org.apache.cxf.io.CachedOutputStream.writeCacheTo(CachedOutputStream.java:272)",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-05-09 01:43:37.583,,,no_permission,,Novice,,,,,,,,,,,112362,,,Fri May 09 01:43:37 UTC 2008,,,,,,0|i0sylj:,167082,,,,,,,,09/May/08 01:43;bmargulies;Committed to trunk.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException in JAXRSUtils,CXF-1570,12395391,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,sergey_beryozkin,bradmoody,bradmoody,06/May/08 08:34,16/Jun/08 08:45,14/Mar/19 02:29,16/Jun/08 08:45,2.1,,,,,,,,,,,,,,2.1.1,,,,JAX-RS,,,,,,0,,,,NullPointerException can be thrown at line 513 of JAXRSUtils when processing a request.,Any.,,,,,,,,,,,,,,,,06/May/08 08:36;bradmoody;jaxrsUtils-patch_issue_1570.txt;https://issues.apache.org/jira/secure/attachment/12381490/jaxrsUtils-patch_issue_1570.txt,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2008-06-03 08:40:09.901,,,no_permission,,,,,,,,,,,,,112361,,,Tue Jun 03 08:40:09 UTC 2008,,,,,,0|i1abwv:,268396,,,,,,,,06/May/08 08:36;bradmoody;Patch file created from trunk directory.,"03/Jun/08 08:40;sergey_beryozkin;I'll apply the patch quite soon, as part of my accumulative JAX-RS patch",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java.util.ConcurrentModificationException on client with JAXBFrontend,CXF-1569,12395389,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,bmargulies,gigerstyle,gigerstyle,06/May/08 07:55,03/Jul/08 17:19,14/Mar/19 02:29,23/May/08 22:15,2.0.6,,,,,,,,,,,,,,2.0.7,2.1.1,,,JAXB Databinding,,,,,,0,,,,"I have a testcase where I do fire 100 ws calls in parallel. The test ends with following stacktrace on the client side:
Every client is a new instance and not reused!
That's the first time I got this exception, so it seems very difficult to reproduce.

-------------------------------------------------------------------------------
Test set: TestSuite
-------------------------------------------------------------------------------
Tests run: 100, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 23.645 sec <<< FAILURE!
test_ParallelPerf(ch.itserve.lohnstandard.refapps2.ws20051002.test.PerformanceTest)  Time elapsed: 5.059 sec  <<< FAILURE!
java.util.ConcurrentModificationException
        at java.util.HashMap$HashIterator.nextEntry(HashMap.java:793)
        at java.util.HashMap$KeyIterator.next(HashMap.java:828)
        at org.apache.cxf.common.util.WeakIdentityHashMap.keySet(WeakIdentityHashMap.java:94)
        at org.apache.cxf.common.util.CacheMap.updateMainDataMap(CacheMap.java:55)
        at org.apache.cxf.common.util.CacheMap.containsKey(CacheMap.java:64)
        at org.apache.cxf.jaxb.JAXBDataBinding.createJAXBContext(JAXBDataBinding.java:509)
        at org.apache.cxf.jaxb.JAXBDataBinding.initialize(JAXBDataBinding.java:268)
        at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.buildServiceFromWSDL(ReflectionServiceFactoryBean.java:283)
        at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.initializeServiceModel(ReflectionServiceFactoryBean.java:368)
        at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.create(ReflectionServiceFactoryBean.java:162)
        at org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean.create(JaxWsServiceFactoryBean.java:97)
        at org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory.createEndpoint(AbstractWSDLBasedEndpointFactory.java:74)
        at org.apache.cxf.frontend.ClientFactoryBean.create(ClientFactoryBean.java:51)
        at org.apache.cxf.frontend.ClientProxyFactoryBean.create(ClientProxyFactoryBean.java:92)
        at org.apache.cxf.jaxws.ServiceImpl.createPort(ServiceImpl.java:387)
        at org.apache.cxf.jaxws.ServiceImpl.getPort(ServiceImpl.java:282)
        at javax.xml.ws.Service.getPort(Service.java:92)
        at ch.swissdec.schema.sd._20051002.salarydeclarationservice.SalaryDeclarationService.getSalaryDeclaration(SalaryDeclarationService.java:55)
        at ch.itserve.lohnstandard.refapps2.ws20051002.test.TestBase.invoke(TestBase.java:185)
        at ch.itserve.lohnstandard.refapps2.ws20051002.test.PerformanceTest.test_ParallelPerf(PerformanceTest.java:55)

test_ParallelPerf(ch.itserve.lohnstandard.refapps2.ws20051002.test.PerformanceTest)  Time elapsed: 0.369 sec  <<< FAILURE!
java.util.ConcurrentModificationException
        at java.util.HashMap$HashIterator.nextEntry(HashMap.java:793)
        at java.util.HashMap$KeyIterator.next(HashMap.java:828)
        at org.apache.cxf.common.util.WeakIdentityHashMap.keySet(WeakIdentityHashMap.java:94)
        at org.apache.cxf.common.util.CacheMap.updateMainDataMap(CacheMap.java:55)
        at org.apache.cxf.common.util.CacheMap.get(CacheMap.java:84)
        at org.apache.cxf.jaxb.JAXBDataBinding.createJAXBContext(JAXBDataBinding.java:429)
        at org.apache.cxf.jaxb.JAXBDataBinding.initialize(JAXBDataBinding.java:268)
        at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.buildServiceFromWSDL(ReflectionServiceFactoryBean.java:283)
        at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.initializeServiceModel(ReflectionServiceFactoryBean.java:368)
        at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.create(ReflectionServiceFactoryBean.java:162)
        at org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean.create(JaxWsServiceFactoryBean.java:97)
        at org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory.createEndpoint(AbstractWSDLBasedEndpointFactory.java:74)
        at org.apache.cxf.frontend.ClientFactoryBean.create(ClientFactoryBean.java:51)
        at org.apache.cxf.frontend.ClientProxyFactoryBean.create(ClientProxyFactoryBean.java:92)
        at org.apache.cxf.jaxws.ServiceImpl.createPort(ServiceImpl.java:387)
        at org.apache.cxf.jaxws.ServiceImpl.getPort(ServiceImpl.java:282)
        at javax.xml.ws.Service.getPort(Service.java:92)
        at ch.swissdec.schema.sd._20051002.salarydeclarationservice.SalaryDeclarationService.getSalaryDeclaration(SalaryDeclarationService.java:55)
        at ch.itserve.lohnstandard.refapps2.ws20051002.test.TestBase.invoke(TestBase.java:185)
        at ch.itserve.lohnstandard.refapps2.ws20051002.test.PerformanceTest.test_ParallelPerf(PerformanceTest.java:55)",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-05-09 01:17:10.27,,,no_permission,,,,,,,,,,,,,112360,,,Fri May 23 22:15:22 UTC 2008,,,,,,0|i0v45z:,179648,,,,,,,,"09/May/08 01:17;bmargulies;Could you please attach your test case? If not, I'll try to cook something up.",09/May/08 01:39;bmargulies;I've committed a fix to the trunk. Can you try against a 2.1.x snapshot when one is made?,"16/May/08 07:35;gigerstyle;I've tested your patch against cxf-2.0.6 and couldn't reproduce it (I can't test cxf-2.1)
But I can't say for sure that the bug is fixed, because it was difficult to reproduce (~just 1 of 100 run did fail).

Will your patch get applied to cxf-2.0.x branch too?

Thanks

Marc","16/May/08 11:48;dkulp;It was migrated to the 2.0.x branch last friday.

Dan","23/May/08 22:15;bmargulies;Having heard no more complaints, I'm assuming that my fix did the trick.",,,,,,,,,,,,,,,,,,,,,,,,,,
cxf client error throws exception while invoking strikeIron ws with implicit headers,CXF-1568,12395362,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,dkulp,olonga,olonga,05/May/08 22:18,03/Jul/08 17:19,14/Mar/19 02:29,06/Jun/08 19:26,2.0.4,,,,,,,,,,,,,,2.0.7,2.1.1,,,,,,,,,0,,,,"client code:

package client;

import java.util.*;
import javax.xml.ws.Holder;
import com.strikeiron.*;
import com.strikeiron.ws.*;
import org.apache.cxf.transports.http.configuration.*;
import org.apache.cxf.transport.http.*;
import org.apache.cxf.frontend.ClientProxy;
import org.apache.cxf.endpoint.Client;

public class WSClient {

   private static void setProxyInfo(Object port)
   {
               Client client = ClientProxy.getClient( port );
               HTTPConduit httpConduit = (HTTPConduit) client.getConduit();
               HTTPClientPolicy policy = new HTTPClientPolicy();
               policy.setProxyServer( ""proxy.domain.com"" );
               policy.setProxyServerPort( 8080 );
               httpConduit.setClient( policy );
   }

   private static LicenseInfo getLicenseInfo()
   {
       LicenseInfo licenseInfo = new LicenseInfo();
       RegisteredUser registeredUser = new RegisteredUser();
       registeredUser.setUserID(""iam@email.com"");
       registeredUser.setPassword(""mypwd"");
       licenseInfo.setRegisteredUser( registeredUser );
       return licenseInfo;
   }

   private static javax.xml.ws.Holder getSubscriptionInfo()
   {
       SubscriptionInfo sInfo = new SubscriptionInfo();
       javax.xml.ws.Holder holder = new javax.xml.ws.Holder( sInfo );

       return holder;
   }

   public static void main (String[] args) {
       try {
           if (args.length != 1) {
               System.out.println(""Usage: WSClient "");
               System.exit(0);
           }

           SDPNFLTeams sdpService = new SDPNFLTeams();
           SDPNFLTeamsSoap endpt = sdpService.getSDPNFLTeamsSoap();
           setProxyInfo( endpt );

           com.strikeiron.NFLTeamOutput x = endpt.getTeamInfoByCity( ""INDIANAPOLLIS"",getLicenseInfo(),getSubscriptionInfo() );
           List teamInfo = x.getServiceResult().getTeams().getNFLTeamInfo();
           for(NFLTeamInfo tix: teamInfo) {
               System.out.println( tix.getNickname()+"" ""+tix.getDivision() );
           }


       } catch (Exception e) {
           e.printStackTrace();
           System.out.println(""Exception: "" +  e.getMessage());
       }
   }
}

Everthing seems fine till the execution point it throws an exception:

    [java] javax.xml.ws.soap.SOAPFaultException: Index: 3, Size: 3
    [java]     at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:175)
    [java]     at $Proxy28.getTeamInfoByCity(Unknown Source)
    [java]     at client.WSClient.main(WSClient.java:60)
    [java] Caused by: java.lang.IndexOutOfBoundsException: Index: 3, Size: 3
    [java]     at java.util.ArrayList.RangeCheck(ArrayList.java:546)
    [java]     at java.util.ArrayList.get(ArrayList.java:321)
    [java]     at org.apache.cxf.message.MessageContentsList.get(MessageContentsList.java:79)
    [java]     at org.apache.cxf.jaxws.interceptors.HolderInInterceptor.handleMessage(HolderInInterceptor.java:64)
    [java]     at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:208)
    [java]     at org.apache.cxf.endpoint.ClientImpl.onMessage(ClientImpl.java:429)
    [java]     at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleResponse(HTTPConduit.java:1955)
    [java]     at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.close(HTTPConduit.java:1791)
    [java]     at org.apache.cxf.transport.AbstractConduit.close(AbstractConduit.java:66)
    [java]     at org.apache.cxf.transport.http.HTTPConduit.close(HTTPConduit.java:575)
    [java]     at org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor.handleMessage(MessageSenderInterceptor.java:62)
    [java]     at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:208)
    [java]     at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:276)
    [java]     at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:222)
    [java]     at org.apache.cxf.frontend.ClientProxy.invokeSync(ClientProxy.java:73)
    [java]     at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:135)
    [java]     ... 2 more
    [java] Exception: Index: 3, Size: 3","The client artifacts were generated using the wsdl2java utility with -exsh flag set to true in order to invoke strike iron NFL Team web service.
ref: http://www.jroller.com/gmazza/date/20071001 (Sending implicit SOAP Headers using JAX-WS).",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-05-20 03:16:29.866,,,no_permission,,,,,,,,,,,,,112359,,,Tue May 20 03:16:29 UTC 2008,,,,,,0|i1abx3:,268397,,,,,,,,"20/May/08 03:16;calvinxiu;yes,we have the same problem of this issues....it's  a very big problem of our project.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DynamicClientFactory throws NullPointerException while building classpath if jar does not have Manifest file,CXF-1567,12395168,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,uwodi,uwodi,01/May/08 23:20,03/Jul/08 17:19,14/Mar/19 02:29,02/May/08 18:49,2.1,,,,,,,,,,,,,,2.0.7,2.1.1,,,Core,,,,,,0,,,,"While attempting to  use the following code snippet:

DynamicClientFactory dcf = DynamicClientFactory.newInstance();
Client client = dcf.createClient(wsdlUrl);

The factory throws a NullPointerException without a helpuful stack trace. The issue was caused by a jar file that did not have a manifest file.  

    static void addClasspathFromManifest(StringBuilder classPath, File file) 
        throws URISyntaxException, IOException {
        
        JarFile jar = new JarFile(file);
        Attributes attr = jar.getManifest().getMainAttributes();
                                         ^^^^^^^^^^^^^

The following code should fix the issue:

      Attributes attr = null;
      if (jar.getManifest() != null) {
        attr = jar.getManifest().getMainAttributes();
      }

","JDK 1.5.0_09, Tomcat 5.5.20, Ubuntu 7.04, Windows XP",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,Novice,,,,,,,,,,,112358,,,2008-05-01 23:20:13.0,,,,,,0|i0sylr:,167083,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
wsdl2java jaxws binding issues,CXF-1565,12395132,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,acorcoran,acorcoran,01/May/08 11:38,03/Jul/08 17:19,14/Mar/19 02:29,02/May/08 18:49,2.0.5,2.0.6,2.1,,,,,,,,,,,,2.0.7,2.1.1,,,Tooling,,,,,,0,,,,"Seems to be issues with specifying external jaxws customisations or mixing inline customisations with external customisations.

I have attached 3 tests cases

1. Show jaxws (actually jaxb) customisation working - type safe enum & xsd:date --> java.sql.Date

2. Shows an error if the type safe enum customisation is left inlne and the xsd:date customisation is moved into the external bindings. This external binding customisation works if the inline bindings are removed. Error is below
     [java] WSDLToJava Error: Thrown by JAXB : compiler was unable to honor this enum customization. It is attached to a wrong place, or its inconsistent with other bindings.

3. If the type safe enum and xsd:date customisation are moved to the external binding then the type safe enum customisation is applied, however the global binding for xsd:date is ignored, no error is show.

See attached file for the three test cases","XP
jdk 1.5.0_12",,,,,,,,,,,,,,,,01/May/08 11:40;acorcoran;binding-issues.rar;https://issues.apache.org/jira/secure/attachment/12381247/binding-issues.rar,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112357,,,Thu May 01 11:40:07 UTC 2008,,,,,,0|i1abxb:,268398,,,,,,,,01/May/08 11:40;acorcoran;sample test cases,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ArrayType does not work correctly if isWriteOuter == false,CXF-1564,12395121,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,bmargulies,likanen,likanen,01/May/08 06:27,03/Jul/08 17:19,14/Mar/19 02:29,01/May/08 15:11,2.0,2.0.1,2.0.2,2.0.3,2.0.4,2.0.5,2.0.6,2.0.7,2.1,2.1.1,,,,,2.1.1,,,,Aegis Databinding,,,,,,0,,,,"In org.apache.cxf.aegis.type.basic.ArrayType:

    protected void writeValue(Object value, MessageWriter writer, Context context, Type type, String name,
        ...
        if (type.isWriteOuter()) {
            cwriter = writer.getElementWriter(name, ns);
        } else {
            cwriter = writer;
        }

        if (value == null && type.isNillable()) {
            cwriter.writeXsiNil();
        } else {
            type.writeObject(value, cwriter, context);
        }

        cwriter.close();
    }

Should be: 

    protected void writeValue(Object value, MessageWriter writer, Context context, Type type, String name,
        ...
        if (type.isWriteOuter()) {
            cwriter = writer.getElementWriter(name, ns);
        } else {
            cwriter = writer;
        }

        if (value == null && type.isNillable()) {
            cwriter.writeXsiNil();
        } else {
            type.writeObject(value, cwriter, context);
        }

        if (type.isWriteOuter()) {
            cwriter.close();
        }
    }

Similar bug was in XFire (http://jira.codehaus.org/browse/XFIRE-547).",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-05-01 15:11:40.011,,,no_permission,,Novice,,,,,,,,,,,112356,,,Thu May 08 15:32:23 UTC 2008,,,,,,0|i1abxj:,268399,,,,,,,,"01/May/08 15:11;bmargulies;I've committed your fix, thanks. 

Can you tell me how to make a test case for this?
","01/May/08 15:57;likanen;Perhaps testing that the message writer that is passed to the writeObject of ArrayType is not closed when control is returned from the writeObject?

If I have understood the logic correctly, the isWriteOuter indicates if the type class wants to write the element tag itself or use the default element tag which would be one defined by the name attribute of @XmlType annotation in the mapped class or if that is not defined the simple class name.


","01/May/08 16:26;bmargulies;Do you have a snippet that ran into this problem? Otherwise, I'll work from your comment.","01/May/08 17:11;likanen;I think you are better off making it from scratch than trying to create a test case from my code.

But something like this would do the trick:

public class MyType extends Type {
  public boolean isWriteOuter() {
    return true;
  }
}

public class MockMessageWriter extends AbstractMessageWriter {
  boolean isClosed = false;
  public void close() {
    super.close();
    isClosed = true;
  }
}

public class ArrayTypeTest extends TestCase {
  public testCXF-1564() throws Exception {
    ArrayType type = new ArrayType();
    MockMessageWriter writer = new MockMessageWriter();
    type.writeValue(new Object(), writer, null, type, ""MyType"", ""http://cxf.apache.org/test"")
    assertFalse(""type should not close writer of the parent"", writer.isClosed());
  }
}


",08/May/08 15:32;likanen;Could this be fixed also in the 2.0.x branch?,,,,,,,,,,,,,,,,,,,,,,,,,,
OSGI needed manifest modifications,CXF-1562,12395111,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,dkulp,dbrosius,dbrosius,30/Apr/08 23:37,03/Jul/08 17:19,14/Mar/19 02:29,16/Jun/08 17:11,2.0.6,,,,,,,,,,,,,,2.0.7,2.1.1,,,Bus,,,,,,0,,,,"The manifest for cxf needs to specify

Bundle-ClassPath: .,cxf-2.0.5-incubator.jar

and not just

Bundle-ClassPath: cxf-2.0.5-incubator.jar

(or whatever the jar is called now). That is add the .    (root directory)

Also

add

META-INF.services

to the Export-Package list

The reason is that BusFactory.getBusFactoryClass can't load 'META-INF/services/org.apache.cxf.bus.factory' from an OSGI class loader without it.

",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-05-02 21:07:49.442,,,no_permission,,,,,,,,,,,,,112354,,,Mon Jun 16 17:11:15 UTC 2008,,,,,,0|i1abxz:,268401,,,,,,,,"02/May/08 21:07;dkulp;
I don't see a Bundle-ClassPath defined at all in 2.1/2.0.6.

Also, the second thing isn't ideal.   Exporting META-INF/services is not ideal as other jars use that as well.   For example, saaj looks for stuff in there.   Since you can only have one plugin exporting the package in your osgi container, it kind of is less than idea.

What I'm going to do is copy the 'META-INF/services/org.apache.cxf.bus.factory' to META-INF/cxf and have the factory check both.  services first, then the cxf dir.



","16/Jun/08 17:11;dkulp;Copied the file to META-INF/cxf and updated CXF to look there as well.


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
EndpointReferenceUtils.getSchema threading issue,CXF-1560,12395055,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,gigerstyle,gigerstyle,30/Apr/08 09:35,03/Jul/08 17:19,14/Mar/19 02:29,01/May/08 12:53,2.0.6,,,,,,,,,,,,,,2.0.7,2.1.1,,,Core,,,,,,0,,,,"After the first time the service is started and the service is invoked in parallel with multiple threads I get the following
stacktrace and the service returns a soap-fault:

30.04.2008 10:24:30 org.apache.cxf.phase.PhaseInterceptorChain doIntercept
INFO: Interceptor has thrown exception, unwinding now
java.lang.ArrayIndexOutOfBoundsException: 2 >= 0
        at java.util.Vector.elementAt(Vector.java:427)
        at org.apache.xerces.dom.DeferredDocumentImpl.getNodeValueString(Unknown Source)
        at org.apache.xerces.dom.DeferredDocumentImpl.getNodeValueString(Unknown Source)
        at org.apache.xerces.dom.DeferredTextImpl.synchronizeData(Unknown Source)
        at org.apache.xerces.dom.CharacterDataImpl.getNodeValue(Unknown Source)
        at org.apache.ws.commons.schema.XmlSchemaSerializer.serializeDocumentation(XmlSchemaSerializer.java:2002)
        at org.apache.ws.commons.schema.XmlSchemaSerializer.serializeAnnotation(XmlSchemaSerializer.java:1904)
        at org.apache.ws.commons.schema.XmlSchemaSerializer.serializeElement(XmlSchemaSerializer.java:582)
        at org.apache.ws.commons.schema.XmlSchemaSerializer.serializeChoice(XmlSchemaSerializer.java:1229)
        at org.apache.ws.commons.schema.XmlSchemaSerializer.serializeComplexType(XmlSchemaSerializer.java:917)
        at org.apache.ws.commons.schema.XmlSchemaSerializer.serializeSchemaChild(XmlSchemaSerializer.java:254)
        at org.apache.ws.commons.schema.XmlSchemaSerializer.serializeSchemaElement(XmlSchemaSerializer.java:192)
        at org.apache.ws.commons.schema.XmlSchemaSerializer.serializeSchema(XmlSchemaSerializer.java:83)
        at org.apache.ws.commons.schema.XmlSchema.serialize_internal(XmlSchema.java:452)
        at org.apache.ws.commons.schema.XmlSchema.write(XmlSchema.java:426)
        at org.apache.ws.commons.schema.XmlSchema.write(XmlSchema.java:382)
        at org.apache.cxf.service.model.SchemaInfo.getElement(SchemaInfo.java:82)
        at org.apache.cxf.wsdl.EndpointReferenceUtils.getSchema(EndpointReferenceUtils.java:541)
        at org.apache.cxf.interceptor.AbstractInDatabindingInterceptor.setSchemaInMessage(AbstractInDatabindingInterceptor.java:104)
        at org.apache.cxf.interceptor.AbstractInDatabindingInterceptor.getDataReader(AbstractInDatabindingInterceptor.java:86)
        at org.apache.cxf.interceptor.AbstractInDatabindingInterceptor.getDataReader(AbstractInDatabindingInterceptor.java:93)
        at org.apache.cxf.interceptor.DocLiteralInInterceptor.handleMessage(DocLiteralInInterceptor.java:69)
        at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:221)
        at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:77)
        at org.apache.cxf.transport.local.LocalConduit.dispatchDirect(LocalConduit.java:100)
        at org.apache.cxf.transport.local.LocalConduit.close(LocalConduit.java:71)
        at org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor.handleMessage(MessageSenderInterceptor.java:62)
        at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:221)
        at org.apache.camel.component.cxf.invoker.CxfClient.invokeWithMessageStream(CxfClient.java:130)
        at org.apache.camel.component.cxf.invoker.CxfClient.dispatch(CxfClient.java:75)
        at org.apache.camel.component.cxf.CxfProducer.process(CxfProducer.java:248)
        at org.apache.camel.component.cxf.CxfProducer.process(CxfProducer.java:170)
        at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:59)
        at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:53)
        at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsynProcessorBridge.process(AsyncProcessorTypeConverter.java:44)
        at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:143)
        at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:87)
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:101)
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:85)
        at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:40)
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:44)
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:68)
        at org.apache.camel.component.cxf.CamelInvoker.invoke(CamelInvoker.java:59)
        at org.apache.camel.component.cxf.feature.MessageInvokerInterceptor$1.run(MessageInvokerInterceptor.java:51)
        at org.apache.cxf.workqueue.SynchronousExecutor.execute(SynchronousExecutor.java:37)
        at org.apache.camel.component.cxf.feature.MessageInvokerInterceptor.handleMessage(MessageInvokerInterceptor.java:71)
        at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:221)
        at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:77)
        at org.apache.cxf.transport.servlet.ServletDestination.invoke(ServletDestination.java:92)
        at org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:214)
        at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:151)
        at org.apache.cxf.transport.servlet.AbstractCXFServlet.invoke(AbstractCXFServlet.java:170)
        at org.apache.cxf.transport.servlet.AbstractCXFServlet.doPost(AbstractCXFServlet.java:148)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:727)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:820)
        at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:487)
        at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:362)
        at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216)
        at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181)
        at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:726)
        at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:405)
        at org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:206)
        at org.mortbay.jetty.handler.HandlerCollection.handle(HandlerCollection.java:114)
        at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)
        at org.mortbay.jetty.Server.handle(Server.java:324)
        at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:505)
        at org.mortbay.jetty.HttpConnection$RequestHandler.content(HttpConnection.java:842)
        at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:730)
        at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:211)
        at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:380)
        at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:395)
        at org.mortbay.thread.BoundedThreadPool$PoolThread.run(BoundedThreadPool.java:450)
30.04.2008 10:24:30 org.apache.cxf.phase.PhaseInterceptorChain doIntercept
INFO: Interceptor has thrown exception, unwinding now
java.lang.ArrayIndexOutOfBoundsException: 6 >= 0
        at java.util.Vector.elementAt(Vector.java:427)
        at org.apache.xerces.dom.DeferredDocumentImpl.getNodeValueString(Unknown Source)
        at org.apache.xerces.dom.DeferredDocumentImpl.getNodeValueString(Unknown Source)
        at org.apache.xerces.dom.DeferredTextImpl.synchronizeData(Unknown Source)
        at org.apache.xerces.dom.CharacterDataImpl.getNodeValue(Unknown Source)
        at org.apache.ws.commons.schema.XmlSchemaSerializer.serializeDocumentation(XmlSchemaSerializer.java:2002)
        at org.apache.ws.commons.schema.XmlSchemaSerializer.serializeAnnotation(XmlSchemaSerializer.java:1904)
        at org.apache.ws.commons.schema.XmlSchemaSerializer.serializeElement(XmlSchemaSerializer.java:582)
        at org.apache.ws.commons.schema.XmlSchemaSerializer.serializeSequence(XmlSchemaSerializer.java:989)
        at org.apache.ws.commons.schema.XmlSchemaSerializer.serializeComplexType(XmlSchemaSerializer.java:913)
        at org.apache.ws.commons.schema.XmlSchemaSerializer.serializeSchemaChild(XmlSchemaSerializer.java:254)
        at org.apache.ws.commons.schema.XmlSchemaSerializer.serializeSchemaElement(XmlSchemaSerializer.java:192)
        at org.apache.ws.commons.schema.XmlSchemaSerializer.serializeSchema(XmlSchemaSerializer.java:83)
        at org.apache.ws.commons.schema.XmlSchema.serialize_internal(XmlSchema.java:452)
        at org.apache.ws.commons.schema.XmlSchema.write(XmlSchema.java:426)
        at org.apache.ws.commons.schema.XmlSchema.write(XmlSchema.java:382)
        at org.apache.cxf.service.model.SchemaInfo.getElement(SchemaInfo.java:82)
        at org.apache.cxf.wsdl.EndpointReferenceUtils.getSchema(EndpointReferenceUtils.java:541)
        at org.apache.cxf.interceptor.AbstractInDatabindingInterceptor.setSchemaInMessage(AbstractInDatabindingInterceptor.java:104)
        at org.apache.cxf.interceptor.AbstractInDatabindingInterceptor.getDataReader(AbstractInDatabindingInterceptor.java:86)
        at org.apache.cxf.interceptor.AbstractInDatabindingInterceptor.getDataReader(AbstractInDatabindingInterceptor.java:93)
        at org.apache.cxf.interceptor.DocLiteralInInterceptor.handleMessage(DocLiteralInInterceptor.java:69)
        at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:221)
...
...
...

If I invoke a fresh started service once with a single thread and after that with multiple threads it works fine.

The attached patch fixes that but I'm not sure if it's the right place and who is at fault here. The overhead by this patch should be minimal.",,,,,,,,,,,,,,,,,30/Apr/08 16:16;dkulp;cxf-1560.patch;https://issues.apache.org/jira/secure/attachment/12381196/cxf-1560.patch,30/Apr/08 09:36;gigerstyle;cxf-2.0.6-threading-issue.patch;https://issues.apache.org/jira/secure/attachment/12381175/cxf-2.0.6-threading-issue.patch,,,,,2.0,,,,,,,,,,,,,,,,,,,,2008-04-30 16:16:50.874,,,no_permission,,,,,,,,,,,,,112352,,,Wed Apr 30 19:16:37 UTC 2008,,,,,,0|i0sylz:,167084,,,,,,,,"30/Apr/08 16:16;dkulp;
The patch is a bit heavyweight (adds a sync block along the critical message path, even if not needed) so I'm going to change that a bit.   However, it's also only ""part"" of the problem.   There are a couple other places in the code where schema<-->doc stuff occurs that may also break with this.   I'm going to go ahead and add a couple other sync blocks and stuff to hopefully fix this.

Unforunately, svn at apache is down again so I cannot commit it for you to test.  :-(    I'm going to attach a patch with my changes.   If you could give that a try, that would be great.

","30/Apr/08 19:10;gigerstyle;Hi Daniel,
My patch was not meant to apply as is. It just should show the problematic code part, and the possible solution;-)
Your patch works as expected.

Is your patch against cxf-2.1? I've tested it with cxf-2.0.6

Thanks","30/Apr/08 19:16;dkulp;
Yea, my patch is against 2.1 as I pretty much always fix things there and then merge the fixes back to 2.0.x.  

Thanks for the report.  Once svn is back up, I'll get it committed and merged back 2.0.x.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Missing Client side Soap Attachments Support in CXF,CXF-1559,12395015,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,bharath_t19,bharath_t19,29/Apr/08 21:19,03/Jul/08 17:19,14/Mar/19 02:29,01/May/08 12:53,2.0.3,,,,,,,,,,,,,,2.0.7,2.1.1,,,JAX-WS Runtime,,,,,,0,,,,"WIth a JAX-WS Client,When the following code is used to retrieve the attachment part of the SOAP message.It always returns Null.Looks like the attachment part of the soap message is never being set in the context MAP.

BindingProvider bp = (BindingProvider)port;

java.util.Map<String,Object> responseContext =bp.getResponseContext();

(Map<String,List<String>>)responseContext.get(MessageContext.INBOUND_MESSAGE_ATTACHMENTS)

","Windows XP,Apache Tomcat 5.5.25,jdk1.5.0_10",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112351,,,2008-04-29 21:19:56.0,,,,,,0|i0v3tr:,179593,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Webservice method returning a Set results in  java.lang.ClassCastException: java.util.LinkedHashSet cannot be cast to java.util.List,CXF-1558,12395010,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,martijn_brinkers,martijn_brinkers,29/Apr/08 19:59,03/Jul/08 17:19,14/Mar/19 02:29,01/May/08 12:53,2.1,,,,,,,,,,,,,,2.0.7,2.1.1,,,,,,,,,0,,,,"A webservice method that returns a Set results in java.lang.ClassCastException: java.util.LinkedHashSet cannot be cast to java.util.List. 

The problem seems related to asm because when asm is removed from the classpath the exception does not occur.","Java HotSpot(TM) 64-Bit Server VM (build 1.6.0_03-b05, mixed mode)
jaxb-api-2.1.jar, jaxb-impl-2.1.6.jar, asm-2.2.3.jar",,,,,,,,,,,,,,,,29/Apr/08 20:02;martijn_brinkers;cxf-classcast-bug.tar.gz;https://issues.apache.org/jira/secure/attachment/12381138/cxf-classcast-bug.tar.gz,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2008-04-30 18:24:35.724,,,no_permission,,,,,,,,,,,,,112350,,,Wed Apr 30 18:24:35 UTC 2008,,,,,,0|i1abyf:,268403,,,,,,,,29/Apr/08 20:02;martijn_brinkers;testcase showing that returning a Set results in a ClasscastException.,"30/Apr/08 18:24;dkulp;
Very interesting.   I didn't even think Set was an allowed JAXB type.   I though the only collection type that was supported was List.   In order to do Sets, I though you had to write an XmlJavaTypeAdapter like you need to do for Maps.  

Anyway, I've fixed the problem.   Once apache's svn is fixed, I'll get it committed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WS-Addressing deployed in Tomcat raise exception,CXF-1557,12394966,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,,cencio,cencio,29/Apr/08 08:04,24/Apr/09 21:18,14/Mar/19 02:29,18/Jul/08 20:20,2.0.4,2.0.5,2.1,,,,,,,,,,,,2.1.1,,,,WS-* Components,,,,,,0,,,,"I tryed to deploy it in a standalone server and it works, but deployed in Tomcat gives error when send the response to a different http endpoint 

","Java 1.5, Tomcat 5",,,,,,,,,,,,,,,,29/Apr/08 08:13;cencio;wsa-on-tomcat.jar;https://issues.apache.org/jira/secure/attachment/12381080/wsa-on-tomcat.jar,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2008-07-18 20:20:08.343,,,no_permission,,,,,,,,,,,,,112349,,,Fri Jul 18 20:20:08 UTC 2008,,,,,,0|i1abyn:,268404,,,,,,,,"29/Apr/08 08:13;cencio;To run the test:

ant generate.code
ant deploy
ant client

","18/Jul/08 20:20;dkulp;
This was resolved a while ago.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Javascript generator does not include the usual web service 'port' model,CXF-1555,12394944,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,bmargulies,bmargulies,bmargulies,29/Apr/08 00:17,03/Jul/08 17:19,14/Mar/19 02:29,29/Apr/08 20:48,2.1,,,,,,,,,,,,,,2.1.1,,,,JavaScript Client,,,,,,0,,,,"The javascript generator does not follow the usual structure of web service client generators of creating a 'port' object for each defined endpoint from the WSDL. It expects the client application to have (and supply) the service endpoint URL from some other source of information.

At least one user has asked for support for the 'believe the URL in the WSDL' approach to the problem.
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112347,,,Tue Apr 29 20:48:19 UTC 2008,,,,,,0|i13zpb:,231414,,,,,,,,29/Apr/08 20:48;bmargulies;fix submitted.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Content type is set as if for soap 1.2 even though javascript client generator only supports 1.1.,CXF-1554,12394942,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,bmargulies,bmargulies,,28/Apr/08 23:30,03/Jul/08 17:19,14/Mar/19 02:29,01/May/08 16:27,2.1,,,,,,,,,,,,,,2.1.1,,,,JavaScript Client,,,,,,0,,,,"cxf-utils.js sets the wrong content type in ordinary messages.
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112346,,,Thu May 01 16:27:45 UTC 2008,,,,,,0|i13zpj:,231415,,,,,,,,29/Apr/08 20:49;bmargulies;Fix committed.,01/May/08 16:27;bmargulies;Fix checked in the other day.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TunedDocumentLoader fails to resolve xsi prefix properly when not using WSTX.,CXF-1553,12394920,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,prophet36,prophet36,28/Apr/08 15:38,03/Jul/08 17:19,14/Mar/19 02:29,29/Apr/08 21:07,2.1,,,,,,,,,,,,,,2.0.7,2.1.1,,,Configuration,,,,,,0,,,,"I want to use Xerces, not WSTX. But if I remove WSTX from the CLASSPATH, the fallback mechanism at line 75 of TunedDocumentLoader fails. I believe WSTX defaults the ""http://xml.org/sax/features/namespaces"" property to true, whereas Xerces defaults it to false. As a result, you get a cryptic error:

NAMESPACE_ERR: An attempt is made to create or change an object in a way which is incorrect with regard to namespaces

The fix is to add this line:

nsasaxParserFactory.setFeature(""http://xml.org/sax/features/namespaces"", true); 

After line 85 of org.apache.cxf.bus.spring.TunedDocumentLoader.

On a side note, what is the reason for the fallback mechanism at org.apache.cxf.bus.spring.TunedDocumentLoader.java:75? Why not just rely on the JAXP mechanism to find implementations?

- Chris",,600,600,,0%,600,600,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-04-28 15:52:01.284,,,no_permission,,Novice,,,,,,,,,,,112345,,,Mon Apr 28 15:52:01 UTC 2008,,,,,,0|i1abz3:,268406,,,,,,,,"28/Apr/08 15:52;dkulp;
You're probably write about the property.   I'll add that to the namespace-prefix property that we DO set on that factory.  

The basic reason is that we want to use Woodstox if it's available.   Woodstox is a LOT faster than xerces to do this.   Benson has done quite a bit of benchmarking on application startup and making sure we use woodstox when it's there is a huge help with application startup time.    However, it should work if woodstox isn't there.

Dan

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"When publish the endpoint by using Serlvet transport without the spring , get the NPE for injecting the bus resource to JMSTransportFactory",CXF-1552,12394866,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,njiang,njiang,njiang,27/Apr/08 14:20,03/Jul/08 17:19,14/Mar/19 02:29,14/May/08 14:47,2.0.3,2.0.4,2.0.5,,,,,,,,,,,,2.0.7,2.1.1,,,Transports,,,,,,0,,,,"{code}
public class AbcCxfServlet extends CXFNonSpringServlet {

    public void init(ServletConfig servletConfig) throws ServletException {
        super.init(servletConfig);
        Bus bus = this.getBus();
        BusFactory.setDefaultBus(bus);
	  Endpoint.publish(""/users"", new HelloWorldImpl());
    }
}
{code}
   

SEVERE: an AnnotationVisitor (org.apache.cxf.common.injection.ResourceInjector@aeea66) raised an exception on element public void org.apache.cxf.transport.jms.JMSTransportFactory.setBus(org.apache.cxf.Bus).
java.lang.NullPointerException
        at javax.naming.InitialContext.getURLScheme(InitialContext.java:228)
        at javax.naming.InitialContext.getURLOrDefaultInitCtx(InitialContext.java:277)
        at javax.naming.InitialContext.lookup(InitialContext.java:351)
        at org.apache.cxf.transport.servlet.ServletContextResourceResolver.resolve(ServletContextResourceResolver.java:62)
        at org.apache.cxf.resource.DefaultResourceManager.findResource(DefaultResourceManager.java:99)
        at org.apache.cxf.resource.DefaultResourceManager.resolveResource(DefaultResourceManager.java:55)
        at org.apache.cxf.common.injection.ResourceInjector.resolveResource(ResourceInjector.java:401)
        at org.apache.cxf.common.injection.ResourceInjector.visitMethod(ResourceInjector.java:185)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:585)
        at org.apache.cxf.common.annotation.AnnotationProcessor.visitAnnotatedElement(AnnotationProcessor.java:131)
        at org.apache.cxf.common.annotation.AnnotationProcessor.processMethods(AnnotationProcessor.java:103)
        at org.apache.cxf.common.annotation.AnnotationProcessor.accept(AnnotationProcessor.java:90)
        at org.apache.cxf.common.injection.ResourceInjector.inject(ResourceInjector.java:81)
        at org.apache.cxf.common.injection.ResourceInjector.inject(ResourceInjector.java:76)
        at org.apache.cxf.bus.extension.ExtensionManagerImpl.loadAndRegister(ExtensionManagerImpl.java:165)
        at org.apache.cxf.bus.extension.ExtensionManagerImpl.activateViaNS(ExtensionManagerImpl.java:86)
        at org.apache.cxf.bus.extension.ExtensionManagerImpl.activateAll(ExtensionManagerImpl.java:94)
        at org.apache.cxf.bus.extension.DeferredMap.undefer(DeferredMap.java:36)
        at org.apache.cxf.transport.DestinationFactoryManagerImpl.getDestinationFactoryForUri(DestinationFactoryManagerImpl.java:127)
        at org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory.createEndpointInfo(AbstractWSDLBasedEndpointFactory.java:155)
        at org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory.createEndpoint(AbstractWSDLBasedEndpointFactory.java:97)",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112344,,,Wed May 14 14:47:22 UTC 2008,,,,,,0|i1abzb:,268407,,,,,,,,14/May/08 14:47;njiang;The patch is committed into the svn repository.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
validation against XML schema - leads to invalid soap response,CXF-1551,12394849,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,jmi,jmi,26/Apr/08 22:52,03/Jul/08 17:19,14/Mar/19 02:29,29/May/08 00:32,2.1,,,,,,,,,,,,,,2.0.7,2.1.1,,,,,,,,,1,,,,"when XML schema validation is enabled, and mandatory element is missing (probably the same for any other error) in CXF-generated response, then response is invalid in some cases.

E.g. such response is generated from modified wsdl_first sample:

<soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/""><soap:Body><sayHiResponse xmlns=""http://apache.org/hello_world_soap_http/types""><responseType>Executing operation sayHi1</responseType><responseType2><responseType>THIS IS IMPORTANT .. VERY LONG TEXT ..SOMETHING WILL BE flushed probably and that's why cannot be removed later when fault should replace contentsoap:Fault><faultcode>soap:Server</faultcode><faultstring>Marshalli
ng Error: cvc-complex-type.2.4.a: Invalid content was found starting with element 'responseType2'. One of '{""http://apache.org/hello_world_soap_http/types"":responseType}' is expected.</faultstring></soap:Fault></soap:Body></soap:Envelope>

in attachment you can find  modified sample I used to show the bug in simple enough project. Just do ""ant server"" and then invoke sayHi from soapUi or other tool, You should see response listed above.


Dans comment from mailing list:
Basically, fixing this will require breaking the streaming.  Most likely, 
if validation is turned on, we'll need to buffer the message to a cached 
stream, and if that doesn't result in a error, then flush the buffer to 
the real output stream.  That will be a little bit slower, but would fix 
this issue.",,,,,,,,,,,,,,,,,26/Apr/08 22:54;jmi;wsdl_first.rar;https://issues.apache.org/jira/secure/attachment/12380986/wsdl_first.rar,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2008-05-29 00:32:47.96,,,no_permission,,,,,,,,,,,,,112343,,,Thu May 29 00:32:47 UTC 2008,,,,,,0|i1abzj:,268408,,,,,,,,26/Apr/08 22:54;jmi;sample which shows the bug,"12/May/08 21:21;jmi;changed component, because this is probably more general problem in handling exceptions during writing response.","29/May/08 00:32;dkulp;
Resolved on trunk and new snapshot deployed.   I'd appreciate a couple folks double checking it doesn't break things and actually works.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Inconsistency in AbstractFeature dealing with client and server endpoints,CXF-1547,12394736,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,wtam,wtam,24/Apr/08 21:04,03/Jul/08 17:19,14/Mar/19 02:29,01/Jul/08 19:28,,,,,,,,,,,,,,,2.1.1,,,,Configuration,,,,,,0,,,,"(This would apply to both in and out fault interceptors.)

In AbstractFeature.initialize methods, unlike the ""initialize server""
counterpart, the initialize method for client is not passing
client.getEndpoint() to the initializeProvider() method.

public abstract class AbstractFeature {
   public void initialize(Server server, Bus bus) {
       initializeProvider(server.getEndpoint(), bus);
   }

   public void initialize(Client client, Bus bus) {
       initializeProvider(client, bus);
   }

As a result, adding InFault interceptors to the (client) provider
inside the initializeProvider() method does not really end up putting
them in the fault interceptor chain since the
InFaultChainInitiatorObserver.initializeInterceptors() method only
looks for inFault interceptors in the following places.

protected void initializeInterceptors(Exchange ex,
PhaseInterceptorChain chain) {
       Endpoint e = ex.get(Endpoint.class);

       chain.add(e.getInFaultInterceptors());
       chain.add(e.getBinding().getInFaultInterceptors());
       chain.add(e.getService().getInFaultInterceptors());
       chain.add(getBus().getInFaultInterceptors());
   }",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-07-01 19:28:46.288,,,no_permission,,,,,,,,,,,,,112339,,,Tue Jul 01 19:28:46 UTC 2008,,,,,,0|i1ac07:,268411,,,,,,,,"01/Jul/08 19:28;dkulp;
This was fixed in 2.1.1",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CDATA section markers removed from WSDL comments,CXF-1546,12394675,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,dkulp,jmi,jmi,24/Apr/08 08:36,03/Jul/08 17:19,14/Mar/19 02:29,01/May/08 12:53,2.1,,,,,,,,,,,,,,2.0.7,2.1.1,,,,,,,,,0,,,,"when jaxws:endpoint is craeted with wsdlLocation attribute, then result of endpointname?wsdl is wsdl with these differences from original wsdl:
- CDATA sections markers are missing in wsdl:documentation elements, which efectivelly breaks formating of documentation in lots of wsdl viewers and also in javadoc after using wsdl2java of various WS stacks.

note that special character & was replaced with &amp; (this replacement shouldn't be done if CDATA is used)","jdk1.5.0_06, xmlApi and xerces from jboss4.0.4GA, other libraries should be in versions from apache-cxf-2.1-incubator-20080408.031557-47",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-04-27 01:09:00.627,,,no_permission,,,,,,,,,,,,,112338,,,Wed Apr 30 19:08:27 UTC 2008,,,,,,0|i1ac0f:,268412,,,,,,,,"27/Apr/08 01:09;gmazza;It would be nice if you could check to see the results if you used the Metro web service stack instead (http://www.jroller.com/gmazza/date/20080417#WFstep8)--same problem?  or does the problem go away?

I would like to know if this is a CXF bug, or just the way most WS stacks work.

Also, are you sure the CDATA sections are really gone, instead of just not being viewable via the ...?wsdl HTML URL (the ""view source"" option from your web browser will tell you that.)

Glen","30/Apr/08 17:41;jmi;I tested with jaxws-ri-2.1.1 using sample project ""fromwsdl"" where I added documentation with cdata section. Also with jaxws CDATA section is missing.
It's really missing (wsdl downloaded with CURL and checked in plain text editor).
Is this what you wanted to know?","30/Apr/08 19:08;dkulp;
This is a bug in StaxUtils.   We do:
        } else if (n instanceof Text) {
            writer.writeCharacters(((Text)n).getNodeValue());
        } else if (n instanceof CDATASection) {
            writer.writeCData(((CDATASection)n).getData());

but CDATASection is a subclass of Text so it always hits the first one and never the second one.  Flipping the two around fixes it.

Once SVN is up............................",,,,,,,,,,,,,,,,,,,,,,,,,,,,
DispatchOutDatabindingInterceptor apparently incorrectly using MessageFactory.createMessage() method,CXF-1545,12394642,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,,gmazza,gmazza,23/Apr/08 19:17,05/Oct/09 19:37,14/Mar/19 02:29,05/Oct/09 15:05,2.0.5,2.1,,,,,,,,,,,,,2.2.2,,,,Core,,,,,,0,,,,"On line 345 of DispatchOutDatabindingInterceptor[1] the no-parameter version of SAAJ's MessageFactory.createMessage() is being called.  However Sun's SAAJ 1.3 implementation does not allow that variant--in com.sun.xml.messaging.saaj.soap.MessageFactoryImpl, line 70, SAAJ will throw an UnsupportedOperationException() if you use that version.  Sun requires the createMessage(MimeHeaders headers, InputStream in) version on line 79 of that same file.  If I'm correct here, line 345 of this class needs to be rewritten to use this version.

Version of SAAJ being used:

System.setProperty(""javax.xml.soap.MessageFactory"", ""com.sun.xml.messaging.saaj.soap.MessageFactoryImpl"");

Maven: (same as CXF):

		<dependency>
			<groupId>com.sun.xml.messaging.saaj</groupId>
			<artifactId>saaj-impl</artifactId>
			<version>1.3</version>
			<exclusions>
				<exclusion>
					<groupId>javax.activation</groupId>
					<artifactId>activation</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

[1] http://tinyurl.com/6pvjxv
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-10-05 15:05:59.911,,,no_permission,,Novice,,,,,,,,,,,112337,,,Mon Oct 05 15:05:59 UTC 2009,,,,,,0|i0symf:,167086,,,,,,,,"05/Oct/09 15:05;dkulp;
Marking this as resolved as the DispatchOutDatabindingInterceptor and all the other Dispatch/Provider based stuff has been completely removed/re-written.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JAX-RS Demos don't compile,CXF-1544,12394573,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,,sergey_beryozkin,sergey_beryozkin,22/Apr/08 21:43,30/Apr/08 14:57,14/Mar/19 02:29,22/Apr/08 22:32,2.1,,,,,,,,,,,,,,2.1,,,,JAX-RS,,,,,,0,,,,,,,,,,,,,,,,,,,,,22/Apr/08 21:43;sergey_beryozkin;patch.patch;https://issues.apache.org/jira/secure/attachment/12380728/patch.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112336,,,2008-04-22 21:43:21.0,,,,,,0|i13zf3:,231368,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Query parameters can not be converted into objects with consructors accepting String,CXF-1543,12394567,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,sergey_beryozkin,sergey_beryozkin,22/Apr/08 20:18,30/Apr/08 14:57,14/Mar/19 02:29,22/Apr/08 21:34,2.1,,,,,,,,,,,,,,2.1,,,,JAX-RS,,,,,,0,,,,,,,,,,,,,,,,,,,,,22/Apr/08 20:20;sergey_beryozkin;cxf-1543.patch;https://issues.apache.org/jira/secure/attachment/12380721/cxf-1543.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112335,,,2008-04-22 20:18:48.0,,,,,,0|i1ac0n:,268413,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
message.getContent(OutputStream.class) cannot be null,CXF-1538,12394507,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,orbang,orbang,22/Apr/08 09:19,03/Jul/08 17:19,14/Mar/19 02:29,16/Jun/08 17:12,,,,,,,,,,,,,,,2.1.1,,,,Core,JAX-WS Runtime,,,,,0,,,,"SAAJOutEndingInterceptor assumes that message.getContent(OutputStream.class) is not null. It causes problems when we try to add a SOAPHandler. I wonder if it would be possible to check first if the OutputStream is available in the message and not throw an exception in case we have only an XMLStreamWriter? The reason why we keep only XMLStreamWriter on the message is that we use a binary xml stream implementation of STAX which writes binary data to the underlying stream, so once the XMLStreamWriter is created the OutputStream cannot be used directly any more.",snapshot 20080414,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-06-13 18:19:24.716,,,no_permission,,,,,,,,,,,,,112330,,,Fri Jun 13 18:19:24 UTC 2008,,,,,,0|i0symn:,167087,,,,,,,,13/Jun/08 18:19;radumanolescu;We are hitting this problem while trying to create secure SOAP messages. Is there any workaround at this time?,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Out only out-of-band headers don't code gen correctly (with -exsh true) and runtime doesn't work with -exsh false,CXF-1537,12394493,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,dkulp,dkulp,22/Apr/08 02:59,30/Apr/08 14:55,14/Mar/19 02:29,22/Apr/08 21:07,2.0.5,,,,,,,,,,,,,,2.0.6,,,,JAX-WS Runtime,Tooling,,,,,0,,,,"
With an outbound only out-of-band header with a BARE method (not wrapped), the code generator messes up the method signature if -exsh true is specified. 

If -exsh false is specified, the code is generated correctly, but the HolderInInterceptor and HolderOutInterceptor are expecting there to be parts/holders for those headers and an IndexOutOfBoundsException is thrown.

",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112329,,,2008-04-22 02:59:26.0,,,,,,0|i0v42f:,179632,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
When a SOAP request is submitted without an enclosing </soapenv:Envelope> a successful response is returned.  I would think that this should generate a parsing error/exception.,CXF-1536,12394340,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,dkulp,bobdellago,bobdellago,18/Apr/08 19:52,04/Dec/09 22:34,14/Mar/19 02:29,05/Nov/09 18:07,2.1,,,,,,,,,,,,,,2.2.5,,,,Soap Binding,,,,,,1,,,,"When a SOAP request is submitted without an enclosing </soapenv:Envelope> a successful response is returned.  I would think that this should generate a parsing error/exception.

<soapenv:Envelope xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:v1=""http://www.nortel.com/xmlprotocol/wsdl/protocol_interfaces/v1_0/"">
   <soapenv:Header/>
   <soapenv:Body>
      <v1:CallCleared-Event>
         <!--Optional:-->
         <callId>1-1-1-1</callId>
         <cause>6</cause>
      </v1:CallCleared-Event>
   </soapenv:Body>
*** missing soapenv ***

Actual Response:
<soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/"">
   <soap:Body>
      <ns1:CallCleared-EventResponse xmlns:ns1=""http://www.nortel.com/xmlprotocol/wsdl/protocol_interfaces/v1_0/"">
         <status>success</status>
      </ns1:CallCleared-EventResponse>
   </soap:Body>
</soap:Envelope>
","Windows 2003
Jboss 4.2.1GA
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-11-01 14:34:12.572,,,no_permission,,Unknown,,,,,,,,,,,112328,,,Thu Nov 05 18:07:36 UTC 2009,,,,,,0|i14epj:,233846,,,,,,,,"01/Nov/09 14:34;bmargulies;Can you submit a test case, or at least detail the configuration you used?
","05/Nov/09 18:07;dkulp;
If schema-validation is enabled, we now also check the structure of the soap message.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JAXWSMethodInvoker doesn't honour faultcode in thrown SoapFault,CXF-1534,12394124,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,eswdd,eswdd,16/Apr/08 16:21,19/May/09 11:05,14/Mar/19 02:29,16/Apr/08 18:16,2.0.5,,,,,,,,,,,,,,2.0.6,,,,JAX-WS Runtime,,,,,,0,,,,"I have written a service which implements an interface generated using wsdl2java.

In it I create and throw a SoapFault with a custom faultcode using code like this:

throw new SoapFault(""An error message"", new QName(""http://www.company.com/blah"",""Server.InvalidConfiguration""));

But in JAXWSMethodInvoker:
    protected Fault createFault(Throwable ex, Method m, List<Object> params, boolean checked) {
        //map the JAX-WS faults
        if (ex instanceof SOAPFaultException) {
            SOAPFaultException sfe = (SOAPFaultException)ex;
            SoapFault fault = new SoapFault(sfe.getFault().getFaultString(),
                                            sfe,
                                            sfe.getFault().getFaultCodeAsQName());
            fault.setRole(sfe.getFault().getFaultActor());
            fault.setDetail(sfe.getFault().getDetail());
            
            return fault;
        }
        return super.createFault(ex, m, params, checked);
    }

you're missing an extra if:
            if (ex instanceof Fault) {
                        return (Fault) ex;
            }

which means it drops through to super, which loses my fault code and only keeps the message.",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-05-19 11:05:06.631,,,no_permission,,,,,,,,,,,,,112326,,,Tue May 19 11:05:06 UTC 2009,,,,,,0|i0v1v3:,179275,,,,,,,,"19/May/09 11:05;writetoevv;hi daniel,

can you please suggest what should i do to resolve above issue in my code

thanks in advance.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Clients generated with CXF from java using Aegis DataBinding and SimpleFrontEnd sends the header SoapAction empty. This prevent interaction with oracle soa products wich depends on this header to execute correctly.,CXF-1533,12394117,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,bmargulies,injeniero,injeniero,16/Apr/08 15:31,03/Jul/08 17:19,14/Mar/19 02:29,02/May/08 22:54,2.0.5,,,,,,,,,,,,,,2.1.1,,,,Aegis Databinding,,,,,,0,,,,"it could be added to org.apache.cxf.service.factory.DefaultServiceConfiguration this implementation of the function getAction():

public String getAction(OperationInfo op, Method method) {
        String action = op.getName().getLocalPart();
        if(StringUtils.isEmpty(action)){
        	action = method.getName();
        }
        return action;
}

Wich is a first aproach, of course, but for the simple case it works.

Actually org.apache.cxf.service.factory.DefaultServiceConfiguration has no implementation for getAction and org.apache.cxf.service.factory.AbstractServiceConfiguration returns null.",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-04-16 17:00:39.936,,,no_permission,,Moderate,,,,,,,,,,,112325,,,Fri May 02 22:54:19 UTC 2008,,,,,,0|i13zs7:,231427,,,,,,,,"16/Apr/08 17:00;dkulp;
This is working as designed.   The soapAction stuff is effective deprecated and by default, according to most specs like jaxws, should be the empty string.

However, we COULD create a new ""MethodNameSoapActionConfiguration"" class that subclasses the AbstractServiceConfiguration class to provide that functionality.  Would just need to configure it in.
","17/Apr/08 18:46;injeniero;Hi,

I will appreciate this being included in the next release, because making
CXF works with the oracle soa is a mayor compatibility step.

Simon P.


","02/May/08 22:54;bmargulies;I've created the new service configuration. Just add it to the end of the list.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,
@XmlSeeAlso is not processed in JAXBContextInitializer.walk(),CXF-1532,12394103,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,,grishaklimov,grishaklimov,16/Apr/08 13:13,17/Apr/08 10:09,14/Mar/19 02:29,17/Apr/08 10:09,2.0.5,,,,,,,,,,,,,,2.1,,,,JAXB Databinding,,,,,,0,,,,"please add support for @XmlSeeAlso annotation, otherwise there is no way to add classes to context",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-04-16 13:29:02.471,,,no_permission,,Novice,,,,,,,,,,,112324,,,Wed Apr 16 13:29:02 UTC 2008,,,,,,0|i1ac1z:,268419,,,,,,,,"16/Apr/08 13:29;dkulp;@XmlSeeAlso is part of JAXB 2.1, not 2.0.   CXF 2.0.x must pass the JAX-WS 2.0 tck which requires the use of JAXB 2.0

CXF 2.1, on the other hand, uses JAXB 2.1.6 and we do have support for XmlSeeAlso there.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
support to publish the endpoint with multiple addresses which are starting with same context path,CXF-1531,12394100,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,njiang,njiang,njiang,16/Apr/08 12:52,21/Apr/08 02:30,14/Mar/19 02:29,21/Apr/08 02:30,2.0,2.0.1,2.0.2,2.0.3,2.0.4,2.0.5,,,,,,,,,2.0.6,2.1,,,,,,,,,0,,,,"Here is a mail thread which talks about it.
http://www.nabble.com/Multiple-addresses-for-a-service-td16584614.html#a16584614",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112323,,,Mon Apr 21 02:30:38 UTC 2008,,,,,,0|i0v40v:,179625,,,,,,,,"17/Apr/08 07:34;njiang;I just  committed a patch ,  please verify it .",17/Apr/08 07:42;njiang;The fixing also need to be merged to th CXF 2.0.x branch.,21/Apr/08 02:30;njiang;The patch are in the trunk and 2.0.x branch now.,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Deploying a JAXWS Service with a HandlerChain specified causes NPE,CXF-1529,12394039,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,seanoc,scottpaisey,scottpaisey,15/Apr/08 21:04,30/Apr/08 14:57,14/Mar/19 02:29,17/Apr/08 14:32,2.0.5,,,,,,,,,,,,,,2.1,,,,JAX-WS Runtime,,,,,,0,,,,"When attempting to deploy a simple JAXWS service with a HandlerChain specified, HandlerChainBuilder.buildHandlerChain() line 107 throws NPE.
PortComponentHandlerType.getHandlerName().getValue() causes the problem as handler name is null.

Annotations used in Service implementation:

@WebService(
            targetNamespace = ""com.test.service"",
            endpointInterface = ""com.test.service.HelloService""
           )
@HandlerChain(file = ""/com/test/service/proxy/handlers.xml"")

handlers.xml file is packaged in the same jar as the service implementation and is not being read from disk.",Windows XP.,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112321,,,Thu Apr 17 13:36:06 UTC 2008,,,,,,0|i0v3q7:,179577,,,,,,,,"17/Apr/08 13:36;scottpaisey;Also occurs with version 2.1SNAPSHOT:

     [java] WARNING: Task.run exception
     [java] javax.xml.ws.WebServiceException: Failed to instantiate handler
     [java]     at org.apache.cxf.jaxws.handler.HandlerChainBuilder.buildHandlerChain(HandlerChainBuilder.java:131)
     [java]     at org.apache.cxf.jaxws.handler.AnnotationHandlerChainBuilder.processHandlerElement(AnnotationHandlerChainBuilder.java:227)
     [java]     at org.apache.cxf.jaxws.handler.AnnotationHandlerChainBuilder.processHandlerChainElement(AnnotationHandlerChainBuilder.java:165)
     [java]     at org.apache.cxf.jaxws.handler.AnnotationHandlerChainBuilder.buildHandlerChainFromClass(AnnotationHandlerChainBuilder.java:118)
     [java]     at org.apache.cxf.jaxws.handler.AnnotationHandlerChainBuilder.buildHandlerChainFromClass(AnnotationHandlerChainBuilder.java:244)
     [java]     at org.apache.cxf.jaxws.JaxWsServerFactoryBean.buildHandlerChain(JaxWsServerFactoryBean.java:191)
     [java]     at org.apache.cxf.jaxws.JaxWsServerFactoryBean.init(JaxWsServerFactoryBean.java:169)
     [java]     at org.apache.cxf.jaxws.JaxWsServerFactoryBean.create(JaxWsServerFactoryBean.java:161)
     [java]     at org.apache.cxf.jaxws.EndpointImpl.getServer(EndpointImpl.java:322)
     [java]     at org.apache.cxf.jaxws.EndpointImpl.doPublish(EndpointImpl.java:244)
     [java]     at org.apache.cxf.jaxws.EndpointImpl.publish(EndpointImpl.java:194)
     [java]     at org.apache.cxf.jaxws.spi.ProviderImpl.createAndPublishEndpoint(ProviderImpl.java:84)
     [java]     at javax.xml.ws.Endpoint.publish(Endpoint.java:170)
     [java]     at com.itello.dispatcher.impl.DispatcherManager.serviceAdded(DispatcherManager.java:113)
     [java]     at net.jini.lookup.ServiceDiscoveryManager$LookupCacheImpl.serviceNotifyDo(ServiceDiscoveryManager.java:2130)
     [java]     at net.jini.lookup.ServiceDiscoveryManager$LookupCacheImpl.serviceNotifyDo(ServiceDiscoveryManager.java:2117)
     [java]     at net.jini.lookup.ServiceDiscoveryManager$LookupCacheImpl.addServiceNotify(ServiceDiscoveryManager.java:2077)
     [java]     at net.jini.lookup.ServiceDiscoveryManager$LookupCacheImpl.access$2500(ServiceDiscoveryManager.java:821)
     [java]     at net.jini.lookup.ServiceDiscoveryManager$LookupCacheImpl$NewOldServiceTask.run(ServiceDiscoveryManager.java:1393)
     [java]     at net.jini.lookup.ServiceDiscoveryManager$LookupCacheImpl$NotifyEventTask.run(ServiceDiscoveryManager.java:1132)
     [java]     at com.sun.jini.thread.TaskManager$TaskThread.run(TaskManager.java:331)
     [java] Caused by: java.lang.NullPointerException
     [java]     at org.apache.cxf.jaxws.handler.HandlerChainBuilder.buildHandlerChain(HandlerChainBuilder.java:119)
     [java]     ... 20 more

Changing HandlerChainBuilder line 119 from

LOG.log(Level.FINE, ""loading handler"", trimString(ht.getHandlerName().getValue()));
to
LOG.log(Level.FINE, ""loading handler"", trimString(ht.getHandlerClass().getValue()));

fixes the problem and allows the service to be exposed as WS.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DynamicClientFactory throws IllegalStateException due to JAXB not generating classes when unexpected schema element encountered in WSDL,CXF-1528,12394007,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,jrsharp,jrsharp,15/Apr/08 16:37,30/Apr/08 14:55,14/Mar/19 02:29,15/Apr/08 16:43,,,,,,,,,,,,,,,2.0.6,,,,JAXB Databinding,,,,,,0,,,,"java.lang.IllegalStateException: Unable to create JAXBContext for generated packages: ""generated"" doesnt contain ObjectFactory.class or jaxb.index
	at org.apache.cxf.endpoint.dynamic.DynamicClientFactory.createClient(DynamicClientFactory.java:246)
	at org.apache.cxf.endpoint.dynamic.DynamicClientFactory.createClient(DynamicClientFactory.java:143)
	at groovyx.net.ws.WSClient.<init>(WSClient.java:126)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:494)
	at org.codehaus.groovy.runtime.MetaClassHelper.doConstructorInvoke(MetaClassHelper.java:535)
	at groovy.lang.MetaClassImpl.doConstructorInvoke(MetaClassImpl.java:2352)
	at groovy.lang.MetaClassImpl.invokeConstructor(MetaClassImpl.java:1252)
	at groovy.lang.MetaClassImpl.invokeConstructor(MetaClassImpl.java:1182)
	at org.codehaus.groovy.runtime.InvokerHelper.invokeConstructorOf(InvokerHelper.java:805)
	at org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeNewN(ScriptBytecodeAdapter.java:227)
	at SOAPClient.doSOAP(SOAPClient.groovy:9)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:86)
	at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:226)
	at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:910)
	at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:754)
	at org.codehaus.groovy.runtime.InvokerHelper.invokePogoMethod(InvokerHelper.java:777)
	at org.codehaus.groovy.runtime.InvokerHelper.invokeMethod(InvokerHelper.java:757)
	at org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodN(ScriptBytecodeAdapter.java:167)
	at org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethod0(ScriptBytecodeAdapter.java:195)
	at SOAPClient.main(SOAPClient.groovy:18)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:86)
	at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:226)
	at groovy.lang.MetaClassImpl.invokeStaticMethod(MetaClassImpl.java:1102)
	at org.codehaus.groovy.runtime.InvokerHelper.invokeMethod(InvokerHelper.java:748)
	at groovy.lang.GroovyShell.runMainOrTestOrRunnable(GroovyShell.java:244)
	at groovy.lang.GroovyShell.run(GroovyShell.java:218)
	at groovy.lang.GroovyShell.run(GroovyShell.java:147)
	at groovy.ui.GroovyMain.processOnce(GroovyMain.java:493)
	at groovy.ui.GroovyMain.run(GroovyMain.java:308)
	at groovy.ui.GroovyMain.process(GroovyMain.java:294)
	at groovy.ui.GroovyMain.processArgs(GroovyMain.java:111)
	at groovy.ui.GroovyMain.main(GroovyMain.java:92)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at org.codehaus.groovy.tools.GroovyStarter.rootLoader(GroovyStarter.java:101)
	at org.codehaus.groovy.tools.GroovyStarter.main(GroovyStarter.java:130)
Caused by: javax.xml.bind.JAXBException: ""generated"" doesnt contain ObjectFactory.class or jaxb.index
	at com.sun.xml.bind.v2.ContextFactory.createContext(ContextFactory.java:127)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at javax.xml.bind.ContextFinder.newInstance(ContextFinder.java:132)
	at javax.xml.bind.ContextFinder.find(ContextFinder.java:285)
	at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:372)
	at org.apache.cxf.endpoint.dynamic.DynamicClientFactory.createClient(DynamicClientFactory.java:243)
	... 48 more","Java 5 (apple), Java 6 (soylatte) - Mac OS X, Java 6 (sun) - Linux.",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,112320,,,Tue Apr 15 16:46:07 UTC 2008,,,,,,0|i0v41r:,179629,,,,,,,,"15/Apr/08 16:46;jrsharp;In addition to the above stacktrace, I should point out that this is manifested when the WSDL provided to the DynamicClientFactory is constructed as follows:

<xsd:schema>
<xsd:import namespace=""<namespace>"" schemaLocation=""<location>""></xsd:import>
</xsd:schema>

while adding a ""targetNamepace"" attribute to the xsd:schema element satisfies JAXB/CXF:

<xsd:schema targetNamespace=""<namespace>"">
<xsd:import namespace=""<namespace>"" schemaLocation=""<location>""></xsd:import>
</xsd:schema>
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bug in JAX-RS Form Encoding Provider handling null strings,CXF-1527,12394000,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,barfitzgerald,barfitzgerald,15/Apr/08 15:49,30/Apr/08 14:57,14/Mar/19 02:29,15/Apr/08 17:27,2.1,,,,,,,,,,,,,,2.1,,,,JAX-RS,,,,,,0,,,,"Form encoding provider fails when null values are posted through.

patch attached",All,,,,,,,,,,,,,,,,15/Apr/08 15:50;barfitzgerald;CXF-FormEncodingProvider.patch;https://issues.apache.org/jira/secure/attachment/12380194/CXF-FormEncodingProvider.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112319,,,Tue Apr 15 15:50:22 UTC 2008,,,,,,0|i0v3pj:,179574,,,,,,,,15/Apr/08 15:50;barfitzgerald;Patch to handle null vaues,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
unable to create my own cxf.xml file DocumentBuilderFactory.setFeature(Ljava/lang/String;Z)V ,CXF-1526,12393876,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,kaithwas,kaithwas,14/Apr/08 11:58,05/Oct/09 19:37,14/Mar/19 02:29,05/Oct/09 14:55,2.0.5,,,,,,,,,,,,,,2.1.5,,,,Transports,,,,,,1,,,,"Hi,
I am trying to create ssl client with cxf 2.0.5, for this I am supplying http:conduit element using custom cxf.xml file. but while loading my cxf.xml file. i got the below mensioned error >>>
""
14-Apr-2008 17:18:16 org.apache.cxf.bus.spring.SpringBusFactory createBus
WARNING: Failed to create application context.
org.springframework.beans.factory.BeanDefinitionStoreException: Unexpected exception parsing XML document from class path resource [ravi.xml]; nested exception is java.lang.AbstractMethodError: javax.xml.parsers.DocumentBuilderFactory.setFeature(Ljava/lang/String;Z)V
Caused by: java.lang.AbstractMethodError: javax.xml.parsers.DocumentBuilderFactory.setFeature(Ljava/lang/String;Z)V
	at org.apache.cxf.bus.spring.TunedDocumentLoader.createDocumentBuilderFactory(TunedDocumentLoader.java:98)
	at org.springframework.beans.factory.xml.DefaultDocumentLoader.loadDocument(DefaultDocumentLoader.java:70)
	at org.apache.cxf.bus.spring.TunedDocumentLoader.loadDocument(TunedDocumentLoader.java:88)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:351)
	at org.apache.cxf.bus.spring.ControlledValidationXmlBeanDefinitionReader.doLoadBeanDefinitions(ControlledValidationXmlBeanDefinitionReader.java:70)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:303)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:280)
	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:131)
	at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:108)
	at org.apache.cxf.bus.spring.BusApplicationContext.loadBeanDefinitions(BusApplicationContext.java:229)
	at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:101)
	at org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:389)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:324)
	at org.apache.cxf.bus.spring.BusApplicationContext.<init>(BusApplicationContext.java:86)
	at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:93)
	at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:87)
	at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:65)
	at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:54)
	at org.apache.cxf.BusFactory.getDefaultBus(BusFactory.java:69)
	at org.apache.cxf.BusFactory.getThreadDefaultBus(BusFactory.java:106)
	at org.apache.cxf.BusFactory.getThreadDefaultBus(BusFactory.java:97)
	at org.apache.cxf.jaxws.spi.ProviderImpl.createServiceDelegate(ProviderImpl.java:54)
	at javax.xml.ws.Service.<init>(Service.java:57)
	at com.rbs.gbm.campari.service.tradequery.TradeQueryService.<init>(TradeQueryService.java:52)
	at com.rbs.gbm.campari.service.tradequery.TradeQueryServicePortType_TradeQueryServicePort_Client.main(TradeQueryServicePortType_TradeQueryServicePort_Client.java:65)
Exception in thread ""main"" java.lang.RuntimeException: org.springframework.beans.factory.BeanDefinitionStoreException: Unexpected exception parsing XML document from class path resource [ravi.xml]; nested exception is java.lang.AbstractMethodError: javax.xml.parsers.DocumentBuilderFactory.setFeature(Ljava/lang/String;Z)V
	at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:96)
	at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:87)
	at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:65)
	at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:54)
	at org.apache.cxf.BusFactory.getDefaultBus(BusFactory.java:69)
	at org.apache.cxf.BusFactory.getThreadDefaultBus(BusFactory.java:106)
	at org.apache.cxf.BusFactory.getThreadDefaultBus(BusFactory.java:97)
	at org.apache.cxf.jaxws.spi.ProviderImpl.createServiceDelegate(ProviderImpl.java:54)
	at javax.xml.ws.Service.<init>(Service.java:57)
	at com.rbs.gbm.campari.service.tradequery.TradeQueryService.<init>(TradeQueryService.java:52)
	at com.rbs.gbm.campari.service.tradequery.TradeQueryServicePortType_TradeQueryServicePort_Client.main(TradeQueryServicePortType_TradeQueryServicePort_Client.java:65)
Caused by: org.springframework.beans.factory.BeanDefinitionStoreException: Unexpected exception parsing XML document from class path resource [ravi.xml]; nested exception is java.lang.AbstractMethodError: javax.xml.parsers.DocumentBuilderFactory.setFeature(Ljava/lang/String;Z)V
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:375)
	at org.apache.cxf.bus.spring.ControlledValidationXmlBeanDefinitionReader.doLoadBeanDefinitions(ControlledValidationXmlBeanDefinitionReader.java:70)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:303)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:280)
	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:131)
	at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:108)
	at org.apache.cxf.bus.spring.BusApplicationContext.loadBeanDefinitions(BusApplicationContext.java:229)
	at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:101)
	at org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:389)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:324)
	at org.apache.cxf.bus.spring.BusApplicationContext.<init>(BusApplicationContext.java:86)
	at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:93)
	... 10 more
Caused by: java.lang.AbstractMethodError: javax.xml.parsers.DocumentBuilderFactory.setFeature(Ljava/lang/String;Z)V
	at org.apache.cxf.bus.spring.TunedDocumentLoader.createDocumentBuilderFactory(TunedDocumentLoader.java:98)
	at org.springframework.beans.factory.xml.DefaultDocumentLoader.loadDocument(DefaultDocumentLoader.java:70)
	at org.apache.cxf.bus.spring.TunedDocumentLoader.loadDocument(TunedDocumentLoader.java:88)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:351)
	... 21 more
""<<<

2. at this link >>> http://cwiki.apache.org/CXF20DOC/configuration-for-developers.html , Can someone please add an example of how to add ""HTTP Conduit inside CXF"".

Thanks in advance,
Ravi ","windows xp, java 1.5 ",3600,3600,,0%,3600,3600,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-04-14 12:43:34.105,,,no_permission,,Moderate,,,,,,,,,,,112318,,,Mon Oct 05 14:55:41 UTC 2009,,,,,,0|i0v1xb:,179285,,,,,,,,"14/Apr/08 12:02;kaithwas;here is my custom cxf.xml file >>> 

<beans xmlns=""http://www.springframework.org/schema/beans"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
	xmlns:sec=""http://cxf.apache.org/configuration/security"" xmlns:http=""http://cxf.apache.org/transports/http/configuration""
	xmlns:jaxws=""http://java.sun.com/xml/ns/jaxws""
	xsi:schemaLocation=""
  		   http://cxf.apache.org/configuration/security 
  		      C:/temp/CXF/cxf-2.0.5-incubator/schemas/configuration/security.xsd
           http://cxf.apache.org/transports/http/configuration 
              C:/temp/CXF/cxf-2.0.5-incubator/schemas/configuration/http-conf.xsd
           http://www.springframework.org/schema/beans
              http://www.springframework.org/schema/beans/spring-beans-2.0.xsd"">


	<http:conduit name=""{http://gbm.ravi.com/campari/TradeQueryService}TradeQueryService.http-conduit"">
		<http:tlsClientParameters secureSocketProtocol=""TLS"">
			<sec:keyManagers keyPassword=""changeit"">
				<sec:keyStore type=""JKS"" password=""changeit""
					file=""C:\workspace\tradeQueryService_cxf 2.0.5\src\main\resources\tradeQueryStore.jks"" />
			</sec:keyManagers>
			<sec:trustManagers>
				<sec:keyStore type=""JKS"" password=""changeit""
					file=""C:\workspace\tradeQueryService_cxf 2.0.5\src\main\resources\trustManager.jks"" />
			</sec:trustManagers>
			<sec:cipherSuitesFilter>
				<!-- these filters ensure that a ciphersuite with
					export-suitable or null encryption is used,
					but exclude anonymous Diffie-Hellman key change as
					this is vulnerable to man-in-the-middle attacks -->
				<sec:include>.*_EXPORT_.*</sec:include>
				<sec:include>.*_EXPORT1024_.*</sec:include>
				<sec:include>.*_WITH_DES_.*</sec:include>
				<sec:include>.*_WITH_NULL_.*</sec:include>
				<sec:exclude>.*_DH_anon_.*</sec:exclude>
			</sec:cipherSuitesFilter>
		</http:tlsClientParameters>
		<http:authorization>
			<sec:UserName>tomcat</sec:UserName>
			<sec:Password>changeit</sec:Password>
		</http:authorization>
		<http:client AutoRedirect=""true"" Connection=""Keep-Alive"" />
	</http:conduit>

</beans>
","14/Apr/08 12:43;bimargulies;If you look at the error, it appears that there is something really wrong with the XML libraries on your classpath. 

Googling AbstractMethodError and setFeature suggests that you have a broken Xerces in your environment.
","14/Apr/08 19:18;dkulp;

Yea, this looks like a xerces 1.x version is somehow being picked up.   Definitely dig into the classpath and make sure the stuff that is there really is what you want there.
","16/Apr/08 12:05;kaithwas;Thanks Guys the issue was with older version of Xerces. that is resolved, Now I getting the following error with my ssl configuration. 
I am running my webservice on tomcat server and the link goes like this https://localhost:8443/...... 
the error I got is >>>>
Exception in thread ""main"" javax.xml.ws.WebServiceException: org.apache.cxf.service.factory.ServiceConstructionException: Failed to create service.
	at org.apache.cxf.jaxws.ServiceImpl.<init>(ServiceImpl.java:129)
	at org.apache.cxf.jaxws.spi.ProviderImpl.createServiceDelegate(ProviderImpl.java:55)
	at javax.xml.ws.Service.<init>(Service.java:57)
	at com.rbs.gbm.campari.service.tradequery.TradeQueryService.<init>(TradeQueryService.java:52)
	at com.rbs.gbm.campari.service.tradequery.TradeQueryServicePortType_TradeQueryServicePort_Client.main(TradeQueryServicePortType_TradeQueryServicePort_Client.java:77)
Caused by: org.apache.cxf.service.factory.ServiceConstructionException: Failed to create service.
	at org.apache.cxf.wsdl11.WSDLServiceFactory.<init>(WSDLServiceFactory.java:83)
	at org.apache.cxf.jaxws.ServiceImpl.initializePorts(ServiceImpl.java:135)
	at org.apache.cxf.jaxws.ServiceImpl.<init>(ServiceImpl.java:127)
	... 4 more
Caused by: javax.wsdl.WSDLException: WSDLException: faultCode=PARSER_ERROR: Problem parsing 'https://localhost:8443/tradeQueryService-1.0-SNAPSHOT/tradequery?wsdl'.: java.io.IOException: HTTPS hostname wrong:  should be <localhost>
	at com.ibm.wsdl.xml.WSDLReaderImpl.getDocument(Unknown Source)
	at com.ibm.wsdl.xml.WSDLReaderImpl.readWSDL(Unknown Source)
	at com.ibm.wsdl.xml.WSDLReaderImpl.readWSDL(Unknown Source)
	at org.apache.cxf.wsdl11.WSDLManagerImpl.loadDefinition(WSDLManagerImpl.java:204)
	at org.apache.cxf.wsdl11.WSDLManagerImpl.getDefinition(WSDLManagerImpl.java:168)
	at org.apache.cxf.wsdl11.WSDLServiceFactory.<init>(WSDLServiceFactory.java:81)
	... 6 more
Caused by: java.io.IOException: HTTPS hostname wrong:  should be <localhost>
	at sun.net.www.protocol.https.HttpsClient.checkURLSpoofing(HttpsClient.java:490)
	at sun.net.www.protocol.https.HttpsClient.afterConnect(HttpsClient.java:415)
	at sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect(AbstractDelegateHttpsURLConnection.java:170)
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:916)
	at sun.net.www.protocol.https.HttpsURLConnectionImpl.getInputStream(HttpsURLConnectionImpl.java:234)
	at org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
	at org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
	at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
	at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
	at org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
	at org.apache.xerces.parsers.DOMParser.parse(Unknown Source)
	at org.apache.xerces.jaxp.DocumentBuilderImpl.parse(Unknown Source)
	... 12 more
<<<<<

","16/Apr/08 12:06;kaithwas;here is my cxf.xml file. 
<beans xmlns=""http://www.springframework.org/schema/beans"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
	xmlns:sec=""http://cxf.apache.org/configuration/security"" xmlns:http=""http://cxf.apache.org/transports/http/configuration""
	xmlns:jaxws=""http://java.sun.com/xml/ns/jaxws""
	xsi:schemaLocation=""
  		   http://cxf.apache.org/configuration/security
  		      http://cxf.apache.org/schemas/configuration/security.xsd
           http://cxf.apache.org/transports/http/configuration
              http://cxf.apache.org/schemas/configuration/http-conf.xsd
           http://www.springframework.org/schema/beans
              http://www.springframework.org/schema/beans/spring-beans-2.0.xsd"">

	<http:conduit name=""{http://gbm.rbs.com/campari/TradeQueryService}TradeQueryService.http-conduit"">
		<http:tlsClientParameters secureSocketProtocol=""SSL"">
			<sec:keyManagers keyPassword=""changeit"">
				<sec:keyStore type=""JKS"" password=""changeit""
					file=""C:\workspace\tradeQueryService_cxf 2.0.5\src\main\resources\tradeQueryStore.jks"" />
			</sec:keyManagers>
			<sec:trustManagers>
				<sec:keyStore type=""JKS"" password=""changeit""
					file=""C:\workspace\tradeQueryService_cxf 2.0.5\src\main\resources\trustManager.jks"" />
			</sec:trustManagers>
			<sec:cipherSuitesFilter>
				<!--					these filters ensure that a ciphersuite with export-suitable or null encryption is used, but exclude anonymous-->
				<!--					Diffie-Hellman key change as this is vulnerable to man-in-the-middle attacks-->
				<sec:include>.*_EXPORT_.*</sec:include>
				<sec:include>.*_EXPORT1024_.*</sec:include>
				<sec:include>.*_WITH_DES_.*</sec:include>
				<sec:include>.*_WITH_NULL_.*</sec:include>
				<sec:exclude>.*_DH_anon_.*</sec:exclude>
			</sec:cipherSuitesFilter>
		</http:tlsClientParameters>
		<http:authorization>
			<sec:UserName>tomcat</sec:UserName>
			<sec:Password>changeit</sec:Password>
		</http:authorization>
		<http:client AutoRedirect=""true"" Connection=""Keep-Alive"" />
	</http:conduit>
</beans>
","17/Apr/08 10:21;kaithwas;now facing new Issue. 
I am using keytool to import certificate.  the below command import certificate to trustManager.jks but http:conduit is checking %JAVA_HOME%/jre/lib/security/cacerts key store for validating the certificate.
keytool -import -alias tomcat -trustcacerts -file certificate.cer -keypass changeit -keystore trustManager.jks -storepass changeit

I guess cxf is not reading the following tag in http:conduit tag. 
<sec:trustManagers>
 <sec:keyStore type=""JKS"" password=""changeit"" file=""C:\workspace\tradeQueryService_cxf2.0.5\src\main\resources\trustManager.jks"" />
</sec:trustManagers>

Can cxf validate certificate without using %JAVA_HOME%/jre/lib/security/cacerts file?","05/Oct/09 14:55;dkulp;
This was resolved in 2.1.5 by allowing the http:conduits to have a wildcard URL for an ID  and updating the WSDL/schema retrieval to use it.  Thus, https can be completely configured in cxf.xml",,,,,,,,,,,,,,,,,,,,,,,,
NullPointer Exception when SOAP FAULT FaultString is NULL,CXF-1525,12393748,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Critical,Fixed,,g0nz0,g0nz0,11/Apr/08 12:59,30/Apr/08 14:55,14/Mar/19 02:29,24/Apr/08 21:23,2.0.4,2.0.5,,,,,,,,,,,,,2.0.6,,,,Soap Binding,,,,,,0,,,,"When a WS returns a SOAP FAULT with an empty FaultString in it a NPE is thrown.

suspicious code:
DispatchInDatabindingInterceptor handleMessage:

   if (message instanceof SoapMessage) {
....
    
                Fault fault = new Fault(new org.apache.cxf.common.i18n.Message(soapFault.getFaultString(),
                                                                                   LOG));
...

                }     

=> soapFault.getFaultString() is NULL this leads in the end to and NPE when the field code in the message gets adressed. As a consequence of this the original Exception from the WebService is getting ignored. 


yours,
alex","JBoss 4.2.2, cxf used as a client",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-04-14 19:36:25.591,,,no_permission,,Novice,,,,,,,,,,,112317,,,Tue Apr 15 17:29:19 UTC 2008,,,,,,0|i0uz6v:,178842,,,,,,,,"14/Apr/08 19:36;dkulp;

I believe this is already fixed on 2.0.6 snapshot as that line no longer even exists in the DispatchInDatabindingInterceptor.  Any chance you can give the 2.0.6 snapshots a try to make sure?
",15/Apr/08 17:29;g0nz0;yeah. it looks like it was fixed. I will test it next week and will let you know if it works.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SOAP with Attachments (BMMimeMultipart):  DispatchInDatabindingInterceptor 's call to soapMessage.countAttachments() throws IOException ,CXF-1524,12393745,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Critical,Fixed,dkulp,g0nz0,g0nz0,11/Apr/08 11:43,30/Apr/08 14:55,14/Mar/19 02:29,21/Apr/08 16:11,2.0.4,2.0.5,,,,,,,,,,,,,2.0.6,,,,Soap Binding,,,,,,0,,,,"The following call throws a IOException:

SOAPMessage soapResponseMsg = disp.invoke(soapRequestMsg);

The response is a SOAP Message with 2 Attachments. One small xml and one rather big pdf (250kb). When the DispatchInDatabindingInterceptor calls oapMessage.countAttachments() the underlying BMMimeMultipart class throws an IOExcpetion. 

One important thing to mention is that the same code works perfectly when only one xml attachment is returned by the called webservice. Another interesting thing is that in the logging below it states that the message was saved to an tmp file. but when i look at that place there is none. Could that be the reason for the IO  -Handle - exception? 

Logs:
11.04.2008 09:20:10 org.apache.cxf.interceptor.LoggingInInterceptor logging
INFO: Inbound Message
----------------------------
Encoding: UTF-8
Headers: {content-type=[multipart/related; type=""text/xml""; start=""<3EB558C5A498923F1340808112DC20DF>"";  boundary=""----=_Part_361_17089125.1207898405321""], connection=[Keep-Alive], transfer-encoding=[chunked], Date=[Fri, 11 Apr 2008 07:20:05 GMT], Keep-Alive=[timeout=15, max=100], Server=[Apache]}
Messages: 
Message (saved to tmp file):
Filename: C:\DOKUME~1\XXXXXX\LOKALE~1\Temp\cxf-tmp-105260\cos27407tmp
(message truncated to 102400 bytes)

Payload: 
------=_Part_361_17089125.1207898405321
Content-Type: text/xml; charset=UTF-8
Content-Transfer-Encoding: binary
Content-Id: <3EB558C5A498923F1340808112DC20DF>

call throws the following Stacktrace:
11.04.2008 09:20:36 org.apache.cxf.phase.PhaseInterceptorChain doIntercept
INFO: Interceptor has thrown exception, unwinding now
java.lang.RuntimeException: com.sun.xml.messaging.saaj.packaging.mime.MessagingException: IO Error;
  nested exception is:
	java.io.IOException: Das Handle ist ungültig
	at com.sun.xml.messaging.saaj.soap.MessageImpl.countAttachments(MessageImpl.java:734)
	at org.apache.cxf.jaxws.interceptors.DispatchInDatabindingInterceptor$PostDispatchSOAPHandlerInterceptor.handleMessage(DispatchInDatabindingInterceptor.java:221)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:220)
	at org.apache.cxf.jaxws.DispatchImpl.onMessage(DispatchImpl.java:330)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleResponse(HTTPConduit.java:1976)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.close(HTTPConduit.java:1812)
	at org.apache.cxf.io.CacheAndWriteOutputStream.postClose(CacheAndWriteOutputStream.java:47)
	at org.apache.cxf.io.CachedOutputStream.close(CachedOutputStream.java:159)
	at org.apache.cxf.transport.AbstractConduit.close(AbstractConduit.java:66)
	at org.apache.cxf.transport.http.HTTPConduit.close(HTTPConduit.java:582)
	at org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor.handleMessage(MessageSenderInterceptor.java:62)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:220)
	at org.apache.cxf.jaxws.DispatchImpl.invoke(DispatchImpl.java:179)
	at org.apache.cxf.jaxws.DispatchImpl.invoke(DispatchImpl.java:124)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at junit.framework.TestCase.runTest(TestCase.java:164)
	at junit.framework.TestCase.runBare(TestCase.java:130)
	at org.springframework.test.ConditionalTestCase.runBare(ConditionalTestCase.java:76)
	at org.springframework.test.annotation.AbstractAnnotationAwareTransactionalTests.access$001(AbstractAnnotationAwareTransactionalTests.java:70)
	at org.springframework.test.annotation.AbstractAnnotationAwareTransactionalTests$1.run(AbstractAnnotationAwareTransactionalTests.java:186)
	at org.springframework.test.annotation.AbstractAnnotationAwareTransactionalTests.runTest(AbstractAnnotationAwareTransactionalTests.java:313)
	at org.springframework.test.annotation.AbstractAnnotationAwareTransactionalTests.runTestTimed(AbstractAnnotationAwareTransactionalTests.java:281)
	at org.springframework.test.annotation.AbstractAnnotationAwareTransactionalTests.runBare(AbstractAnnotationAwareTransactionalTests.java:182)
	at org.springframework.test.jpa.AbstractJpaTests.runBare(AbstractJpaTests.java:174)
	at org.springframework.test.jpa.AbstractJpaTests.runBare(AbstractJpaTests.java:255)
	at junit.framework.TestResult$1.protect(TestResult.java:110)
	at junit.framework.TestResult.runProtected(TestResult.java:128)
	at junit.framework.TestResult.run(TestResult.java:113)
	at junit.framework.TestCase.run(TestCase.java:120)
	at junit.framework.TestSuite.runTest(TestSuite.java:228)
	at junit.framework.TestSuite.run(TestSuite.java:223)
	at org.junit.internal.runners.OldTestClassRunner.run(OldTestClassRunner.java:35)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:38)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)
Caused by: com.sun.xml.messaging.saaj.packaging.mime.MessagingException: IO Error;
  nested exception is:
	java.io.IOException: Das Handle ist ungültig
	at com.sun.xml.messaging.saaj.packaging.mime.internet.BMMimeMultipart.parse(BMMimeMultipart.java:214)
	at com.sun.xml.messaging.saaj.packaging.mime.internet.MimeMultipart.getCount(MimeMultipart.java:186)
	at com.sun.xml.messaging.saaj.soap.MessageImpl.initializeAllAttachments(MessageImpl.java:1257)
	at com.sun.xml.messaging.saaj.soap.MessageImpl.countAttachments(MessageImpl.java:732)
	... 43 more","CXF used to call a WebService (client-mode): WS called uses SOAP  with Attachments document/literal wrapped style. client uses dispatch method and Service.Mode.MESSAGE. saaj-api 1.3 and saaj-impl 1.3 , jaxb-api 2.1 all endorsed. called from a junit test case.
",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-04-14 18:01:01.779,,,no_permission,,Moderate,,,,,,,,,,,112316,,,Mon Apr 28 09:21:45 UTC 2008,,,,,,0|i0uz5z:,178838,,,,,,,,"11/Apr/08 11:47;g0nz0;this is a real show stopper for us. hope someone can help.

thanks in advance.

-alex",14/Apr/08 18:01;dkulp;Any chance a test case can be created for this?,"21/Apr/08 15:58;dkulp;
OK.  I have a reproduceable test for this.   It's not a bug in CXF.  It's a bug in the Sun SAAJ implementation.  :-(

Basically, if you create a SOAPMessage from an InputStream that is pretty large or at least has large attachments,  then call getSOAPBody() on it (to see if it's a fault for example), it ends up closing the stream and then when we want to iterate/count the attachments, it barfs.

The workaround is to just call msg.countAttachments() right after creating the SOAPMessage to suck the attachments in and get  them initialized.   I'll add that to the DispatchInDatabindingInterceptor.   The testcase works with that in place.


","21/Apr/08 16:05;g0nz0;thanks for the testcase and the of course for the fix. 

the next time I'll create a test for it. 

promise.

-alex","28/Apr/08 09:21;g0nz0;sorry for the delay. the latest snapshot release 2.0.6 works.

thanks.",,,,,,,,,,,,,,,,,,,,,,,,,,
Reopen Bug CXF-1448: Aegis + SAAJ leads to namespace complaint.,CXF-1523,12393712,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,wliaw,wliaw,11/Apr/08 01:49,30/Apr/08 14:55,14/Mar/19 02:29,15/Apr/08 16:58,2.0.5,,,,,,,,,,,,,,2.0.6,,,,Aegis Databinding,,,,,,0,,,,"I still get the exception with version CXF 2.0.5 in WebLogic. I found out that:
The previous fix of CXF-1448 does not fix the problem for empty namespaces, because the fix only checks for ""namespace != null"" but not checks for ""namespace.length() > 0"".",WebLogic,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-04-15 16:58:31.261,,,no_permission,,,,,,,,,,,,,112315,,,Tue Apr 15 16:58:31 UTC 2008,,,,,,0|i0v41b:,179627,,,,,,,,"15/Apr/08 16:58;dkulp;
I've gone through Aegis and replaced all of the namespace != null things with !StringUtils.isEmpty(namespace) things which will account for null or """" namespaces.   Thus, this should now be fixed, I hope.   Hard to reproduce though as the various SAAJ impls and Stax writers do different things.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE in ServiceUtils,CXF-1522,12393516,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,maomaode,tdiesler,tdiesler,09/Apr/08 10:28,24/Apr/09 21:16,14/Mar/19 02:29,22/Jan/09 17:47,2.0.5,,,,,,,,,,,,,,2.1.3,,,,,,,,,,0,,,,"[tdiesler@tddell trunk]$ ant -Dtest=jaxws/jbws1566 test
Buildfile: build.xml

tests-prepare:

     [echo] -----------------------------------------------
     [echo] jboss.home   = /home/tdiesler/svn/jbossas/tags/JBoss_4_2_2_GA/build/output/jboss-4.2.2.GA
     [echo] excludesfile = /home/tdiesler/svn/jbossws/stack/cxf/trunk/src/test/resources/test-excludes-jboss422.txt
     [echo] java.home    = /usr/java/jdk1.5.0_12/jre
     [echo] jboss.bind   = localhost
     [echo] -----------------------------------------------

tests-classpath-jboss50:

tests-classpath-jboss42:

tests-classpath:

tests-init:

test:

tests-prepare:

     [echo] -----------------------------------------------
     [echo] jboss.home   = /home/tdiesler/svn/jbossas/tags/JBoss_4_2_2_GA/build/output/jboss-4.2.2.GA
     [echo] excludesfile = /home/tdiesler/svn/jbossws/stack/cxf/trunk/src/test/resources/test-excludes-jboss422.txt
     [echo] java.home    = /usr/java/jdk1.5.0_12/jre
     [echo] jboss.bind   = localhost
     [echo] -----------------------------------------------

tests-classpath-jboss50:

tests-classpath-jboss42:

tests-classpath:

tests-init:

tests-run-internal:
    [junit] Running org.jboss.test.ws.jaxws.jbws1566.c.JBWS1566TestCase
    [junit] wsdl URL:http://localhost:8080/jaxwstest/Jaxb20StatelessTestBean?wsdl
    [junit] Tests run: 1, Failures: 0, Errors: 1, Time elapsed: 6.004 sec
    [junit] Test org.jboss.test.ws.jaxws.jbws1566.c.JBWS1566TestCase FAILED

BUILD SUCCESSFUL
Total time: 10 seconds

[tdiesler@tddell trunk]$ cat output/tests/reports/TEST-org.jboss.test.ws.jaxws.jbws1566.c.JBWS1566TestCase.txt 
Testsuite: org.jboss.test.ws.jaxws.jbws1566.c.JBWS1566TestCase
Tests run: 1, Failures: 0, Errors: 1, Time elapsed: 6.004 sec
------------- Standard Output ---------------
wsdl URL:http://localhost:8080/jaxwstest/Jaxb20StatelessTestBean?wsdl
------------- ---------------- ---------------

Testcase: testWebService took 4.668 sec
        Caused an ERROR
null
java.lang.NullPointerException
        at org.apache.cxf.helpers.ServiceUtils.makeServiceNameFromClassName(ServiceUtils.java:42)
        at org.apache.cxf.service.factory.DefaultServiceConfiguration.getFaultName(DefaultServiceConfiguration.java:75)
        at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.getFaultName(ReflectionServiceFactoryBean.java:1631)
        at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.setFaultClassInfo(ReflectionServiceFactoryBean.java:643)
        at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.initializeClassInfo(ReflectionServiceFactoryBean.java:550)
        at org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean.initializeWSDLOperation(JaxWsServiceFactoryBean.java:173)
        at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.initializeWSDLOperations(ReflectionServiceFactoryBean.java:482)
        at org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean.initializeWSDLOperations(JaxWsServiceFactoryBean.java:182)
        at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.buildServiceFromWSDL(ReflectionServiceFactoryBean.java:280)
        at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.initializeServiceModel(ReflectionServiceFactoryBean.java:366)
        at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.create(ReflectionServiceFactoryBean.java:162)
        at org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean.create(JaxWsServiceFactoryBean.java:97)
        at org.apache.cxf.jaxws.ServiceImpl.createPort(ServiceImpl.java:353)
        at org.apache.cxf.jaxws.ServiceImpl.getPort(ServiceImpl.java:265)
        at javax.xml.ws.Service.getPort(Service.java:120)
        at org.jboss.test.ws.jaxws.jbws1566.c.JBWS1566TestCase.testWebService(JBWS1566TestCase.java:62)
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)
        at junit.extensions.TestSetup$1.protect(TestSetup.java:19)
        at junit.extensions.TestSetup.run(TestSetup.java:23)
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-04-12 02:57:15.451,,,no_permission,,,,,,,,,,,,,112314,,,Thu Jan 22 09:30:49 UTC 2009,,,,,,0|i1ac2f:,268421,,,,,,,,"09/Apr/08 21:45;tdiesler;To reproduce, please have a look at

http://jbws.dyndns.org/mediawiki/index.php?title=Building_From_Source","12/Apr/08 02:57;maomaode;Can not access the url, guess it not accessible from China (must be blocked)

But I can give a quick fix, see if it solve the problem",22/Jan/09 09:30;opalka;We do not see this issue anymore with CXF 2.1.3,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Missing fault detail in messages from SLSB Provider,CXF-1518,12393505,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,asoldano,tdiesler,tdiesler,09/Apr/08 09:04,06/Feb/09 15:28,14/Mar/19 02:29,05/Feb/09 23:35,2.0.5,,,,,,,,,,,,,,,,,,,,,,,,1,,,,"[tdiesler@tddell trunk]$ ant -Dtest=jaxws/jbws1815 test

tests-run-internal:
    [junit] Running org.jboss.test.ws.jaxws.jbws1815.JBWS1815TestCase
    [junit] Tests run: 2, Failures: 1, Errors: 0, Time elapsed: 3.818 sec
    [junit] Test org.jboss.test.ws.jaxws.jbws1815.JBWS1815TestCase FAILED

11:02:39,460 INFO  [PhaseInterceptorChain] Interceptor has thrown exception, unwinding now
java.lang.RuntimeException: javax.ejb.EJBException: javax.xml.ws.soap.SOAPFaultException: Fault string, and possibly fault code, not set
        at org.jboss.wsf.stack.cxf.AbstractInvoker.handleException(AbstractInvoker.java:149)
        at org.jboss.wsf.stack.cxf.AbstractInvoker.invoke(AbstractInvoker.java:118)
        at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:56)
        at org.apache.cxf.workqueue.SynchronousExecutor.execute(SynchronousExecutor.java:37)
        at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:92)
        at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:220)
        at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:77)
        at org.apache.cxf.transport.servlet.ServletDestination.invoke(ServletDestination.java:92)
        at org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:213)
        at org.jboss.wsf.stack.cxf.ServletControllerExt.invoke(ServletControllerExt.java:133)
        at org.jboss.wsf.stack.cxf.RequestHandlerImpl.handleHttpRequest(RequestHandlerImpl.java:63)
        at org.jboss.wsf.stack.cxf.CXFServletExt.service(CXFServletExt.java:136)
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-02-05 23:16:06.66,,,no_permission,,,,,,,,,,,,,112311,,,Thu Feb 05 23:35:17 UTC 2009,,,,,,0|i1ac2v:,268423,,,,,,,,"09/Apr/08 21:45;tdiesler;To reproduce, please have a look at

http://jbws.dyndns.org/mediawiki/index.php?title=Building_From_Source","05/Feb/09 23:16;opalka;This already works.
It was JBossWS integration code issue.
Related issue is: https://jira.jboss.org/jira/browse/JBWS-2513
Could you please close this issue guys?",05/Feb/09 23:35;bmargulies;I'm always happy to close an issue.,,,,,,,,,,,,,,,,,,,,,,,,,,,,
wsdl2java doesn't generate method and class javadoc from jaxws:javadoc element,CXF-1512,12393406,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,seanoc,pawel5870,pawel5870,08/Apr/08 13:02,31/Jul/08 14:09,14/Mar/19 02:29,15/May/08 14:55,2.0.4,,,,,,,,,,,,,,2.1.1,,,,Tooling,,,,,,0,,,,"For example:

  ............
		<wsdl:operation name=""updateInfo"">
			<wsdl:documentation>
				Some documentation
			</wsdl:documentation>
			<wsdl:input message=""tns:someMethodRequest""
				name=""someMethodRequest"">
			</wsdl:input>
			<jaxws:bindings>
				<jaxws:method name=""updateInfoInfo"">
					<jaxws:javadoc>Not working javadoc :-( </jaxws:javadoc>
				</jaxws:method>
			</jaxws:bindings>
		</wsdl:operation>
  .............


Same problem is also with class javadoc",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-07-31 14:09:30.005,,,no_permission,,,,,,,,,,,,,112306,,,Thu Jul 31 14:09:30 UTC 2008,,,,,,0|i1ac3z:,268428,,,,,,,,"31/Jul/08 14:09;edweip3;The generated JavaDoc has incorrect format.  All doc comments should start with ""/**"" with two asterisks instead of just one.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Problem with CXF Websphere Deployment,CXF-1508,12393342,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,,bharath_t19,bharath_t19,07/Apr/08 19:59,05/Oct/09 19:37,14/Mar/19 02:29,05/Oct/09 14:51,2.0.3,,,,,,,,,,,,,,2.1.4,,,,Integration,,,,,,1,,,,"We are trying to deploy our CXF application on WebSphere 6.1 and we see the following problem 

ServletWrappe E   SRVE0100E: Did not realize  init() exception thrown by servlet cxf: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'AuthenticationService': Invocation of init method failed; nested exception is java.lang.IncompatibleClassChangeError
Caused by: java.lang.IncompatibleClassChangeError
	at org.apache.cxf.wsdl11.WSDLServiceBuilder.copyExtensionAttributes(WSDLServiceBuilder.java:117)
	at org.apache.cxf.wsdl11.WSDLServiceBuilder.buildServices(WSDLServiceBuilder.java:218)
	at org.apache.cxf.wsdl11.WSDLServiceBuilder.buildServices(WSDLServiceBuilder.java:150)
	at org.apache.cxf.wsdl11.WSDLServiceFactory.create(WSDLServiceFactory.java:117)


This was fixed by following the instruction in the CXF App Server Guide.

But now we see the following exception.Looks like its seaching the XSDs in the server root folder instead of searching for them relative to the wsdl files.All the wsdl files are under the web-inf folder of the webapplication and the XSDs imported in the WSDLs go in to the same directory.We see the same exception when we try both the options in the App Server Guide.

1)put jar in the endorsed folder
2)Add your own class loader

 00000018 ServletWrappe E   SRVE0100E: Did not realize  init() exception thrown by servlet cxf: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'AuthenticationService': Invocation of init method failed; nested exception is org.apache.cxf.service.factory.ServiceConstructionException: Failed to create service.
Caused by: org.apache.cxf.service.factory.ServiceConstructionException: Failed to create service.
	at org.apache.cxf.wsdl11.WSDLServiceFactory.<init>(WSDLServiceFactory.java:83)
	at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.buildServiceFromWSDL(ReflectionServiceFactoryBean.java:256)
	at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.initializeServiceModel(ReflectionServiceFactoryBean.java:331)
	at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.create(ReflectionServiceFactoryBean.java:151)
	at org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean.create(JaxWsServiceFactoryBean.java:93)
	at org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory.createEndpoint(AbstractWSDLBasedEndpointFactory.java:74)
	at org.apache.cxf.frontend.ServerFactoryBean.create(ServerFactoryBean.java:108)
	at org.apache.cxf.jaxws.JaxWsServerFactoryBean.create(JaxWsServerFactoryBean.java:147)
	at org.apache.cxf.jaxws.EndpointImpl.getServer(EndpointImpl.java:288)
	at org.apache.cxf.jaxws.EndpointImpl.doPublish(EndpointImpl.java:228)
	at org.apache.cxf.jaxws.EndpointImpl.publish(EndpointImpl.java:179)
	at org.apache.cxf.jaxws.EndpointImpl.publish(EndpointImpl.java:341)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:615)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:1240)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1205)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1171)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:425)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:251)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:156)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:248)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:160)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:287)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:352)
	at org.apache.cxf.transport.servlet.CXFServlet.loadAdditionalConfig(CXFServlet.java:145)
	at org.apache.cxf.transport.servlet.CXFServlet.loadSpringBus(CXFServlet.java:113)
	at org.apache.cxf.transport.servlet.CXFServlet.loadBus(CXFServlet.java:63)
	at org.apache.cxf.transport.servlet.AbstractCXFServlet.init(AbstractCXFServlet.java:86)
	at com.ibm.ws.webcontainer.servlet.ServletWrapper.init(ServletWrapper.java:185)
	at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.init(ServletWrapper.java:316)
	at com.ibm.ws.webcontainer.servlet.ServletWrapper.initialize(ServletWrapper.java:1119)
	at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.initialize(ServletWrapper.java:149)
	at com.ibm.wsspi.webcontainer.extension.WebExtensionProcessor.createServletWrapper(WebExtensionProcessor.java:99)
	at com.ibm.ws.webcontainer.webapp.WebApp.getServletWrapper(WebApp.java:741)
	at com.ibm.ws.webcontainer.webapp.WebApp.initializeTargetMappings(WebApp.java:421)
	at com.ibm.ws.webcontainer.webapp.WebApp.commonInitializationFinish(WebApp.java:274)
	at com.ibm.ws.wswebcontainer.webapp.WebApp.initialize(WebApp.java:271)
	at com.ibm.ws.wswebcontainer.webapp.WebGroup.addWebApplication(WebGroup.java:88)
	at com.ibm.ws.wswebcontainer.VirtualHost.addWebApplication(VirtualHost.java:157)
	at com.ibm.ws.wswebcontainer.WebContainer.addWebApp(WebContainer.java:653)
	at com.ibm.ws.wswebcontainer.WebContainer.addWebApplication(WebContainer.java:606)
	at com.ibm.ws.webcontainer.component.WebContainerImpl.install(WebContainerImpl.java:333)
	at com.ibm.ws.webcontainer.component.WebContainerImpl.start(WebContainerImpl.java:549)
	at com.ibm.ws.runtime.component.ApplicationMgrImpl.start(ApplicationMgrImpl.java:1295)
	at com.ibm.ws.runtime.component.DeployedApplicationImpl.fireDeployedObjectStart(DeployedApplicationImpl.java:1129)
	at com.ibm.ws.runtime.component.DeployedModuleImpl.start(DeployedModuleImpl.java:567)
	at com.ibm.ws.runtime.component.DeployedApplicationImpl.start(DeployedApplicationImpl.java:814)
	at com.ibm.ws.runtime.component.ApplicationMgrImpl.startApplication(ApplicationMgrImpl.java:948)
	at com.ibm.ws.runtime.component.ApplicationMgrImpl$AppInitializer.run(ApplicationMgrImpl.java:2114)
	at com.ibm.wsspi.runtime.component.WsComponentImpl$_AsynchInitializer.run(WsComponentImpl.java:340)
	at com.ibm.ws.util.ThreadPool$Worker.run(ThreadPool.java:1498)
Caused by: javax.wsdl.WSDLException: WSDLException (at /wsdl:definitions/wsdl:types/xsd:schema): faultCode=PARSER_ERROR: Problem parsing 'IntegrationFault.xsd'.: java.io.FileNotFoundException: C:\Program Files\IBM\WebSphere\AppServer\profiles\AppSrv01\IntegrationFault.xsd (The system cannot find the file specified.)

","Websphere 6.1,Windows XP,CXF 2.0.3",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-10-05 14:51:16.719,,,no_permission,,,,,,,,,,,,,50434,,,Mon Oct 05 14:51:16 UTC 2009,,,,,,0|i1ac4n:,268431,,,,,,,,05/Oct/09 14:51;dkulp;This was resolved a long time ago by making sure the right URL's for the wsdl's and schemas get passed throughout so the relative resolves work correctly.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
No Implementation-Vendor in manifest,CXF-1506,12393323,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,tdiesler,tdiesler,07/Apr/08 16:41,30/Apr/08 14:54,14/Mar/19 02:29,15/Apr/08 17:22,2.0.5,,,,,,,,,,,,,,2.0.6,,,,,,,,,,0,,,,"The cxf-2.0.5-incubator.jar does not contain vendor information.

With 2.0.4 we have 

Implementation-Title: Apache CXF XJC toString Plugin
Implementation-Vendor: The Apache Software Foundation
Implementation-Vendor-Id: org.apache
Implementation-Version: 2.0.4-incubator
Specification-Title: Apache CXF XJC toString Plugin
Specification-Vendor: The Apache Software Foundation
Specification-Version: 2.0.4-incubator



",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112302,,,Wed Apr 09 21:45:25 UTC 2008,,,,,,0|i0v3vr:,179602,,,,,,,,"09/Apr/08 21:45;tdiesler;To reproduce, please have a look at

http://jbws.dyndns.org/mediawiki/index.php?title=Building_From_Source",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AegisDataBinding throws NullPointer with un-prefixed Namespace,CXF-1504,12393268,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,bmargulies,judethecutedude,judethecutedude,06/Apr/08 17:37,30/Apr/08 14:57,14/Mar/19 02:29,06/Apr/08 19:55,2.1,,,,,,,,,,,,,,2.1,,,,Aegis Databinding,,,,,,0,,,,"When dealing with Complex types (i.e. non-primitives), AegisDatabinding throws a NullPointer exception [in NamespaceHelper.getPrefix() ] when I but it works perfectly fine when I use JAXB (see the ""comment me to use JAXB"" line in the server & client). It should default to a prefix e.g. ns0.

First, here is the stacktrace:

Apr 6, 2008 2:06:05 AM org.apache.cxf.service.factory.ReflectionServiceFactoryBean buildServiceFromClass
INFO: Creating Service {http://education.toorosystems.com/}University from class com.toorosystems.education.University
Exception in thread ""main"" java.lang.NullPointerException
    at org.apache.cxf.aegis.util.NamespaceHelper.getPrefix(NamespaceHelper.java:71)
    at org.apache.cxf.aegis.util.NamespaceHelper.getUniquePrefix(NamespaceHelper.java:57)
    at org.apache.cxf.aegis.type.basic.BeanType.getNameWithPrefix(BeanType.java:533)
    at org.apache.cxf.aegis.type.basic.BeanType.writeSchema(BeanType.java:483)
    at org.apache.cxf.aegis.databinding.AegisDatabinding.createSchemas(AegisDatabinding.java:477)
    at org.apache.cxf.aegis.databinding.AegisDatabinding.initialize(AegisDatabinding.java:322)
    at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.buildServiceFromClass(ReflectionServiceFactoryBean.java:343)
    at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.initializeServiceModel(ReflectionServiceFactoryBean.java:392)
    at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.create(ReflectionServiceFactoryBean.java:180)
    at org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory.createEndpoint(AbstractWSDLBasedEndpointFactory.java:79)
    at org.apache.cxf.frontend.ServerFactoryBean.create(ServerFactoryBean.java:113)
    at com.toorosystems.education.Server.main(Server.java:19)

To reproduce:
I had 2 beans, the interface and the implementation, the server & the client (all in the same package). 

The model:
a) The beans:
1. Course [id (long), name & description; their getters and setters, + 2 constructors: (no-arg & all-arg)]
2. Teacher [age (int), name, department; their getters/setters, + 2 constructors (no-arg & all-arg i.e. Course(int age, String name, String dept)]

b) The interface:
package com.toorosystems.education;

import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.jws.WebMethod;
import javax.jws.WebResult;
import javax.jws.WebParam;

@WebService(name=""University"", targetNamespace=""http://education.toorosystems.com/"")
@SOAPBinding(use=SOAPBinding.Use.LITERAL, style=SOAPBinding.Style.DOCUMENT, parameterStyle=SOAPBinding.ParameterStyle.BARE)
public interface University {

    @WebResult(targetNamespace=""http://education.toorosystems.com/"", name=""return"", partName=""return"")
    @WebMethod(operationName=""getTeacher"", exclude=false)
    public Teacher getTeacher(@WebParam(targetNamespace=""http://education.toorosystems.com/"", name=""course"", mode=WebParam.Mode.IN)
    Course course);
}

c) The implementation
package com.toorosystems.education;

import javax.xml.ws.WebServiceClient;

//@WebServiceClient(name=""com.toorosystems.education.UniversityImpl"", targetNamespace=""http://education.toorosystems.com/"")
public class UniversityImpl implements University {

    public UniversityImpl() {}
    public Teacher getTeacher(Course course) {
        System.out.println(""getTeacher called..."");
        return new Teacher(""Mr. Tom"", 52, ""Computer Science"" + course.getName());
    }

}


d) The Server
package com.toorosystems.education;

import org.apache.cxf.aegis.databinding.AegisDatabinding;
import org.apache.cxf.frontend.ServerFactoryBean;

public class Server {

    public static void main(String[] args) {
        // Create our service implementation
        System.out.println(""Starting server ..."");
        ServerFactoryBean svrFactory = new ServerFactoryBean();
        svrFactory.setServiceClass(University.class);
        svrFactory.setAddress(""http://localhost:9090/TV"");
        svrFactory.setServiceBean(new UniversityImpl());
       
        // comment me to use JAXB
        svrFactory.getServiceFactory().setDataBinding(new AegisDatabinding());
       
        svrFactory.create();
        System.out.println(""Server started!"");
    }
}

e) The client
package com.toorosystems.education;

import org.apache.cxf.aegis.databinding.AegisDatabinding;
import org.apache.cxf.frontend.ClientProxyFactoryBean;

public class Client {

    public static void main(String[] args) {
        // see http://cwiki.apache.org/CXF20DOC/introduction-to-aegis-21.html
        ClientProxyFactoryBean factory = new ClientProxyFactoryBean();
        // comment me to use JAXB
        factory.getServiceFactory().setDataBinding(new AegisDatabinding());
       
        factory.setServiceClass(University.class);
        factory.setAddress(""http://localhost:9090/TV"");
        University client = (University) factory.create();
       
        Teacher tr = client.getTeacher(new Course(40, ""Intro to CS"", ""Introductory Comp Sci""));
        System.out.println(""Response is: "" + tr.getName() + "", "" + tr.getAge() + "", "" + tr.getDepartment());
    }
}","Windows XP, Eclipse Europa (3.3), Java 1.6",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-04-06 19:55:27.033,,,no_permission,,Moderate,,,,,,,,,,,112300,,,Sun Apr 06 19:55:27 UTC 2008,,,,,,0|i0v3yf:,179614,,,,,,,,"06/Apr/08 19:55;bmargulies;svn 645294. This appears to be a problem with doc/lit/bare versus Aegis.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
String ambigeous after import org.apache.cxf.jaxws.javaee.String,CXF-1502,12393253,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Critical,Fixed,seanoc,wimv,wimv,06/Apr/08 05:38,30/Apr/08 14:57,14/Mar/19 02:29,09/Apr/08 10:36,2.0,2.0.1,2.0.2,2.0.3,2.0.4,2.0.5,2.0.6,2.1,2.1.1,,,,,,2.1,,,,Core,Integration,JAX-WS Runtime,JAXB Databinding,Service Model,,0,,,,"Spring and CFX can't work together. Everything ends with a :
Unsatisfied dependency expressed through constructor argument with
dex 2 of type [java.lang.String]: Ambiguous constructor argument types - did you specify the correct bean references as constructor arguments?


","all os, all platform, cxf 2.0.0 or higher",14400,14400,,0%,14400,14400,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-04-09 10:36:22.541,,,no_permission,,Guru,,,,,,,,,,,112299,,,Wed Apr 09 10:36:22 UTC 2008,,,,,,0|i0syn3:,167089,,,,,,,,"06/Apr/08 05:39;wimv;<jaxws:endpoint/> uses a org.apache.cxf.service.factory.ReflectionServiceFactoryBean.
(but where is that ns declared? there's no cfx.apache.org and 
couldn't find it in any of the classpath xml files either)
This calls a  org.apache.cxf.jaxws.JaxWsSererFactoryBean.

This imports a lot of things, which in turn import a lot
of other things. In the end, org.apache.cxf.jaxws.javaee.PortComponentType
is imported.

This is where things go wrong, imho.
line 91 PortComponentType.java :
@XmlElement(name = ""port-component-name"", required = true)
    protected org.apache.cxf.jaxws.javaee.String portComponentName;

org.apache.cxf.jaxws.javaee.String get imported when this gets constructed
(actually, i think more because this is constructed, but were dealing with reflection here so
forgive me if i'm not clear on this)

After the call returns, of maybe straight away (...), this results in String being ambigous
so it always has to be specified using the package name.

But Spring ioc/di uses reflection and
mostly uses Class.forName(String forName) to obtain a refference to the class.

And that is Class.forName(String forName) and not Class.forName(java.lang.String forName).
(java6)

To make thing worse, but unavoidable, org.apache.cxf.jaxws.javaee.String also extends
java.lang.Object which defines 

public String toString() {
	return getClass().getName() + ""@"" + Integer.toHexString(hashCode());
}    

Again. String and not java.lang.String.

So whenver org.apache.cxf.jaxws.javaee.String get's loaded String becomes ambigious
and reflection (and half the jdk) become useless unless every String is updated to
java.lang.String in the code.

I'd suggest renaming org.apache.cxf.jaxws.javaee.String to
org.apache.cxf.jaxws.javaee.CString  (Complex String, what it is). Otherwise imho,
you can expect more problelms.
",09/Apr/08 10:36;seanoc;Replaced org.apache.cxf.jaxws.javaee.String with org.apache.cxf.jaxws.javaee.CString,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Very unhelpful error message for wsdl2java problem with documentation annotations,CXF-1500,12393032,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,bmargulies,bmargulies,03/Apr/08 14:41,04/Dec/09 22:34,14/Mar/19 02:29,12/Nov/09 22:06,2.1,,,,,,,,,,,,,,2.2.5,,,,Tooling,,,,,,1,,,,"I am trying to run wsdl2java on a WSDL file with some doc annotations. I get the following. I will attach the file. It doesn't have the annotations on line 0!


bim-1330% $CXF_HOME/bin/wsdl2java -d src -server /home/benson/x/tip/webservices/doc/en/RosetteTextAnalyzer.wsdl

WSDLToJava Error: Thrown by JAXB : Unexpected <annotation> appears at line 0 column 0
",,,,,,,,,,,,,,,,,03/Apr/08 14:42;bmargulies;RosetteTextAnalyzer.wsdl;https://issues.apache.org/jira/secure/attachment/12379268/RosetteTextAnalyzer.wsdl,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2008-04-04 01:18:03.581,,,no_permission,,,,,,,,,,,,,112297,,,Fri Apr 04 01:18:03 UTC 2008,,,,,,0|i14dsn:,233698,,,,,,,,03/Apr/08 14:42;bmargulies;Example wsdl that gets  the error.,"03/Apr/08 14:50;bmargulies;xjc in 2.1.6 gives me ...

bim-1330% ./xjc.sh -d /tmp/foo -wsdl /home/benson/x/tip/webservices/doc/en/RosetteTextAnalyzer.wsdl
parsing a schema...
[ERROR] Unexpected <annotation> appears at line 107 column 16
  line 107 of file:/home/benson/x/tip/webservices/doc/en/RosetteTextAnalyzer.wsdl

Failed to parse a schema.


so it's clear that more information about the problem is possible.
","03/Apr/08 14:55;bmargulies;The file is legitimately illegitimate, but the message really needs improving.","04/Apr/08 01:18;gmazza;I don't know what we can do about it--that error message comes from xjc, CXF is probably just dutifully returning it without modification.  I wonder if the problem is that we are using an older version of xjc with CXF, or if we are using a different processing mechanism (StAX? SAX?) than xjc standalone that results in line numbers not being available.  ",,,,,,,,,,,,,,,,,,,,,,,,,,,
JAX-RS: Servlet Resources Injection,CXF-1498,12392958,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,goujon,goujon,02/Apr/08 17:46,30/Apr/08 14:57,14/Mar/19 02:29,02/Apr/08 21:20,2.1,,,,,,,,,,,,,,2.1,,,,JAX-RS,,,,,,0,,,,"From the 0.6 specs for JAX-RS, in section 5.1:
""The javax.annotation.Resource annotation can be used to indicate a  dependency on a Servlet-defined resource. An implementation MUST support  injection of the following types: ServletConfig, ServletContext,  HttpServletRequest and HttpServletResponse.""

This is currently missing from the current 2.1-incubator version.

I'll attach to this ticket a patch that adds support for ServletContext,  HttpServletRequest and HttpServletResponse (written with the help of Sergey ).",,,,,,,,,,,,,,,,,02/Apr/08 17:48;goujon;patch-diff.txt;https://issues.apache.org/jira/secure/attachment/12379163/patch-diff.txt,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2008-04-02 21:20:44.547,,,no_permission,,,,,,,,,,,,,112295,,,Wed Apr 02 21:20:44 UTC 2008,,,,,,0|i0v40f:,179623,,,,,,,,"02/Apr/08 17:48;goujon;This is the patch adding support for ServletContext, HttpServletRequest and HttpServletResponse injection.",02/Apr/08 21:20;dkulp;patch applied.  Major thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wrong content type produced by CXF BC provider,CXF-1496,12392844,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,gboccalon,gboccalon,01/Apr/08 13:59,30/Apr/08 14:54,14/Mar/19 02:29,15/Apr/08 20:03,2.0.2,,,,,,,,,,,,,,2.0.6,,,,,,,,,,0,,,,"I found a problem on the CXF BC provider: I'm sending a MTOM/XOP message and I found an error on the content type of the first SOAP part (the one containing the SOAP envelope).

As you can see the attribute ""type"" of the part contains also the attributes action and charset within the """":

------=_Part_0_20040450.1206892450875

Content-Type: application/xop+xml; charset=UTF-8; type=""application/soap+xml; action=""urn:ihe:iti:2007:RetrieveDocumentSet""; charset=UTF-8""


The correct value for the attribute should be:

------=_Part_0_20040450.1206892450875

Content-Type: application/xop+xml; charset=UTF-8; type=""application/soap+xml"";

I found the problem in the class org.apache.cxf.attachment.AttachmentSerializer in the method writeProlog().
The code that produces the problem is:

       mimeBodyCt.append(""application/xop+xml; charset="")
       .append(enc)
       .append(""; type=\"""")
       .append(bodyCt)
       .append(""; charset="")
       .append(enc)
       .append(""\"""");


while it should be:

       mimeBodyCt.append(""application/xop+xml; charset="")
           .append(enc)
           .append(""; type=\"""")
           .append(bodyCt)
           .append(""\"";"");

I found a similar problem on the header of the SOAP request, on the attribute start-info:

Content-Type: multipart/related; type=""application/xop+xml""; boundary=""----=_Part_0_20040450.1206892450875""; start=""<root.message@cxf.apache.org>""; start-info=""application/soap+xml; action=""urn:ihe:iti:2007:RetrieveDocumentSet""""

it should be:

Content-Type: multipart/related; type=""application/xop+xml""; boundary=""----=_Part_0_20040450.1206892450875""; start=""<root.message@cxf.apache.org>""; start-info=""application/soap+xml""; action=""urn:ihe:iti:2007:RetrieveDocumentSet""


The problem is aways on the same class.
The problem occurs also on the response messages of the CXF BC Consumer.
",,,,,,,,,,,,,,,,,02/Apr/08 14:45;gboccalon;AttachmentSerializer.java.diff;https://issues.apache.org/jira/secure/attachment/12379139/AttachmentSerializer.java.diff,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2008-04-15 20:03:57.847,,,no_permission,,,,,,,,,,,,,112293,,,Tue Apr 15 20:03:57 UTC 2008,,,,,,0|i0v3vj:,179601,,,,,,,,"02/Apr/08 14:44;gboccalon;The patch was not complete because the SoapActionOutInterceptor changes the content type, adding the action attribute.
I provide the entire patch.",15/Apr/08 20:03;dkulp;Patch applied.  Thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AbstractHTTPDestination not propperly handling zero-length passwords in Basic Authorization header,CXF-1495,12392770,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,gmazza,cwolf127,cwolf127,31/Mar/08 19:57,23/Jan/09 17:51,14/Mar/19 02:29,31/Mar/08 23:46,,,,,,,,,,,,,,,2.1.2,,,,Transports,,,,,,0,,,,"
When deploying the CXF servlet to a Siteminder-protected web app, Siteminder will modify the Basic Authorization
header and blank out the password for increased security, since subsequent requests are already authenticated via the encrypted
Siteminder cookie.    Zero-length passwords in the Basic Authorization headers are permitted per RFC-2617:
http://www.rfc.net/rfc2617.html#p5

The symptom is the following stack trace trace:

ava.lang.ArrayIndexOutOfBoundsException: 1
org.apache.cxf.transport.http.AbstractHTTPDestination.setHeaders(AbstractHTTPDestination.java:137)
org.apache.cxf.transport.http.AbstractHTTPDestination.setupMessage(AbstractHTTPDestination.java:286)
org.apache.cxf.transport.servlet.ServletDestination.invoke(ServletDestination.java:82)
org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:213)
org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:150)
org.apache.cxf.transport.servlet.AbstractCXFServlet.invoke(AbstractCXFServlet.java:170)
org.apache.cxf.transport.servlet.AbstractCXFServlet.doPost(AbstractCXFServlet.java:148)
javax.servlet.http.HttpServlet.service(HttpServlet.java:709)
javax.servlet.http.HttpServlet.service(HttpServlet.java:802)

The fix is to change one line in:
org.apache.cxf.transport.http.AbstractHTTPDestination, line 137 (snapshot
2008-01-30)

Change the line from:
String password = authInfo[1];

...to:

String password = (authInfo.length>1?authInfo[1]:"""");



","Snapshot 30 Jan, 2008",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-03-31 23:46:49.276,,,no_permission,,,,,,,,,,,,,112292,,,Mon Mar 31 23:46:49 UTC 2008,,,,,,0|i1ac5z:,268437,,,,,,,,"31/Mar/08 23:46;gmazza;Patch applied (you'll see it in a day or two after Dan K moves it to 2.0.5)  Thanks!
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Issue Using JAX-RS / REST When AOP Proxy In Place,CXF-1494,12392587,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,sergey_beryozkin,yarddog,yarddog,28/Mar/08 19:18,17/Jul/09 01:20,14/Mar/19 02:29,24/Apr/08 14:29,2.1,,,,,,,,,,,,,,2.1,,,,JAX-RS,,,,,,0,,,,"If your beans.xml contains the following entry:

<jaxrs:server id=""services"" address=""/"">
    <jaxrs:serviceBeans>
        <ref bean=""test"" />
    </jaxrs:serviceBeans>
</jaxrs:server>

<bean id=""test"" class=""test.rest.Test"" />


And you have a Spring AOP pointcut defined as:

<aop:config>
    <aop:pointcut id=""testOperations"" expression=""execution(* test.rest.*.*(..))"" />
    <aop:advisor advice-ref=""transactionAdvice"" pointcut-ref=""testOperations"" />
</aop:config>


no mapping to the test bean are mapped and method cannot be invoked - it fails with ""No operation found for path: /test/string/""

If you comment out the contents of <aop:config> everything works fine.

This link describes the problem with JAX-WS and the same issue probably applies to JAX-RS:
http://incubator.apache.org/cxf/faq.html#FAQ-WhenusingSpringAOPtoenablethingsliketransactionsandsecurity%252CthegeneratedWSDLisverymessedupwithwrongnamespaces%252Cpartnames%252Cetc...

However, the solution provided in the link does not work due to differences in the APIs between JAX-WS and JAX-RS.

I have a dumbed-down Maven project that I can zip up and provide if necessary.

Is there a suggested way around this problem for JAX-RS?

Is there a reason that, if the instance of the class that JAX-RS sees is a proxy object, that it can't get the underlying class information by drilling into the proxy object, thereby eliminating the necessity to define the serviceClass information (as in the JAX-WS ""fix"")?  Ideally , I'd like to be able to do the following:

<jaxrs:server id=""services"" address=""/"">
    <jaxrs:serviceBeans>
        <ref bean=""test1"" />
        <ref bean=""test2"" />
        <ref bean=""test3"" />
    </jaxrs:serviceBeans>
</jaxrs:server>

without having to define separate jaxrs server(s) (as in the JAX-WS ""fix"").",,,,,,,,,,,,,,,CXF-2345,,09/Apr/08 20:35;yarddog;Test.java;https://issues.apache.org/jira/secure/attachment/12379771/Test.java,09/Apr/08 20:35;yarddog;beans.xml;https://issues.apache.org/jira/secure/attachment/12379770/beans.xml,11/Apr/08 21:07;sergey_beryozkin;cxf-1494-2.patch;https://issues.apache.org/jira/secure/attachment/12379956/cxf-1494-2.patch,06/Apr/08 16:35;sergey_beryozkin;cxf-1494.patch;https://issues.apache.org/jira/secure/attachment/12379506/cxf-1494.patch,,,4.0,,,,,,,,,,,,,,,,,,,,2008-03-31 12:45:49.358,,,no_permission,,,,,,,,,,,,,112291,,,Tue Apr 15 15:40:13 UTC 2008,,,,,,0|i1ac67:,268438,,,,,,,,"31/Mar/08 12:45;sergey_beryozkin;> Is there a reason that, if the instance of the class that JAX-RS sees is a proxy object, that it can't get the underlying class information by drilling into the proxy object

It makes sense but I reckon there's a (slim) possibility of the resource class itself being a proxy ? 

Perhaps we can do 

<jaxrs:server id=""services"" address=""/"" proxyAware=""true""> 
    <jaxrs:serviceBeans> 
        <ref bean=""test1"" /> 
        <ref bean=""test2"" /> 
        <ref bean=""test3"" /> 
    </jaxrs:serviceBeans> 
</jaxrs:server>

thus giving an explicit indication to JAX-RS runtime that it's ok to attempt to introspect Proxy instances further ?
","01/Apr/08 18:04;yarddog;Not a bad idea - but, I'd be concerned that the proxyAware setting may not apply to all of the <ref bean=""...""> entries in the list.  Would proxyAware=""true"" just mean that a check should occur on each bean in the list, or that each bean would need to be a proxy?  The setting may be more appropriate on an a serviceBean entry - i.e.

<jaxrs:server id=""services"" address=""/"" proxyAware=""true"">
    <jaxrs:serviceBeans>

        <jaxrs:serviceBean proxyAware=""true"">
            <bean=""test1"" />
        </jaxrs:serviceBean>

        <jaxrs:serviceBean proxyAware=""false"">
            <bean=""test2"" />
        </jaxrs:serviceBean>

        <jaxrs:serviceBean>   <!-- means proxyAware=""false""   -->
            <bean=""test3"" />
        </jaxrs:serviceBean>

        <bean=""test4"" />    <!-- equivalent to the test3 example, where proxyAware is defaulted to ""false""   -->

    </jaxrs:serviceBeans>
</jaxrs:server> 

I'm looking a little more at the schema and CXF (in general) to understand exactly what I'm suggesting.  But, I'm having issues checking out the code.  Eclipse is currently giving me a ""cannot checkout"" error from subversion.

checkout -r HEAD http://svn.apache.org/repos/asf/incubator/cxf/trunk/rt/core
    RA layer request failed
svn: REPORT request failed on '/repos/asf/!svn/vcc/default'
svn: REPORT of '/repos/asf/!svn/vcc/default': 400 Bad Request (http://svn.apache.org)
","02/Apr/08 08:39;sergey_beryozkin;> Not a bad idea - but, I'd be concerned that the proxyAware setting may not apply to all of the <ref bean=""...""> entries 

I reckon this should not be an issue. 'proxyAware' is just an explicit hint to the the runtime that if one of the resource classes (or all of them) happens to be a Proxy (for whatever reasons, due to Spring 'interference' or to something else) then the runtime should try to get to the class this Proxy wraps...

<jaxrs:serviceBean proxyAware=""true""> would also work but having ths attribute on a jaxrs: server should make it simpler to deal with...Would you agree ?","02/Apr/08 08:50;sergey_beryozkin;That said, perhaps we shoudl also support the proxyAware overriding on individual beans, as you suggested, in those rare cases when the resource class itself is a proxy, but I'd still prefer to start with an attribute on the jaxrs:server, as supporting attributes on jaxrs:serviceBean is just likely to be a bit more complicated... 

I'm nearly ready to go with your original suggestion and basically make proxyAware=""true"" be a default value and if we ever have a case for resources class being a proxy then we can introduce the actual proxyAware attribute...That said, perhaps having an explict proxyAware attribute from a start makes it a bit more descriptive","02/Apr/08 13:13;yarddog;Seeing that 'proxyAware' is more of a hint than a forced requirement on the bean classes, your suggestion to put it on <jaxrs:server> should be sufficient.  I do like the idea of the proxyAware default being true, as I think (with Hibernate/Spring/CGLIB) the scenario where the bean class is a proxy to another object will be more often the case than the resource class itself being a proxy.  Right off the bat, I can't think of a scenario where I'd want the resource class to be a proxy - but, there probably is some case I'm just not thinking of.

Any concern about how this differs from the jaxws stuff?  I have some concerns about how the jaxws piece appears to be implemented for this scenario (mainly in that it appears I would have to create a different <jaxws:server> for each serviceClass/serviceBean), but that's a different forum.  But, obviously, similar implementations would be ideal.

The jaxws implementation I'm referring to is:
http://incubator.apache.org/cxf/faq.html#FAQ-WhenusingSpringAOPtoenablethingsliketransactionsandsecurity%252CthegeneratedWSDLisverymessedupwithwrongnamespaces%252Cpartnames%252Cetc
","03/Apr/08 21:54;dkulp;
The JAX-WS case was slightly different.   At the time (and we still kind of do) there was a requirement that you can use basic JAX-WS services without any of the spring jars available.   Getting the ""real"" object out of the proxy requires the spring-aop jar and a couple of it's dependencies to be available.  Thus, we couldn't really use the spring aop utils thing to get the class. 

I don't know how people think about being able to use the JAX-RS stuff without spring.   Is it configurable/usable at all without it?   (Honest question, I don't really know as I haven't looked.)


Actually looking at the jaxws stuff a bit more, we MIGHT be able to get it to work by putting the calls to the spring aop utils stuff into the namespace handler which would only be used in the spring case.   Basically, if the serviceBean is a proxy and serviceClass is not specified, in the namespace handler, go ahead and get the service class and set it into the service factory as if the user had set it.   

That said, doing this will then add the spring-aop jar to the list of required jars (when using spring) along with cglib-nodeps.   This comes back to the question of whether we should switch to the full spring jar or keep the individual jars.  If we're going to end up shipping most of them anyway, might was well grab the full jar.

","04/Apr/08 17:13;sergey_beryozkin;> I don't know how people think about being able to use the JAX-RS stuff without spring. 

JAX-RS is usable without Spring. I think Jervis added the Spring support at a later stage...

> Getting the ""real"" object out of the proxy requires the spring-aop jar and a couple of it's dependencies to be available

Hmm. It's getting a bit hairy :-) I thought it would be simpler...The idea of doing this unwrapping in a Spring handler only is interesting, but it's likely that Proxies may be created by not only Spring AOP ? 

Is there some generic solution to extracting the underlying class this Proxy wraps ?

So perhaps the jaxws 'fix' is indeed the best fix ? No extra dependencies needed. This class would need to be created for every serviceBean but may be it's not that big a deal ?","04/Apr/08 19:54;dkulp;
I've added a utility to common that will autodetect if spring-aop jar is available and, if so, do the right thing to get the class.   If not, it just calls the normal obj.getClass() thing it currently does.

Thus, all you SHOULD need to do to support this case is to find all the calls to obj.getClass() and replace it with:
ClassHelper.getRealClass(obj)
and it will probably all work without having to take any direct dependency on spring or spring-aop.

","05/Apr/08 11:52;sergey_beryozkin;I forgot a cable plug for my laptop at work, so I have 10 mins in the battery, trying to setup a system test. So I'll have to fix it early next week...","06/Apr/08 16:34;sergey_beryozkin;Drew to work to pick it up...

Dan, I had to update slightly ClassHelper, have a look at the attached patch...

","08/Apr/08 20:47;yarddog;Thanks for patching this so quickly.

After downloading the latest snapshot, my simple dumbed-down test project worked beautifully.  However, my ""real"" project is throwing the following exception:

2008-04-08 16:28:41.621::INFO:  Started SelectChannelConnector@0.0.0.0:8080
Apr 8, 2008 4:28:45 PM org.apache.cxf.jaxrs.interceptor.JAXRSInInterceptor handleMessage
INFO: Found operation: getTestString
Apr 8, 2008 4:28:45 PM org.apache.cxf.phase.PhaseInterceptorChain doIntercept
INFO: Application has thrown exception, unwinding now
org.apache.cxf.interceptor.Fault: object is not an instance of declaring class while invoking public java.lang.String a.b.c.ServiceImpl.getTestString() with params [].
	at org.apache.cxf.service.invoker.AbstractInvoker.createFault(AbstractInvoker.java:109)
	at org.apache.cxf.service.invoker.AbstractInvoker.invoke(AbstractInvoker.java:101)
	at org.apache.cxf.jaxrs.JAXRSInvoker.invoke(JAXRSInvoker.java:79)
	at org.apache.cxf.jaxrs.JAXRSInvoker.invoke(JAXRSInvoker.java:52)
	at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:56)
	at org.apache.cxf.workqueue.SynchronousExecutor.execute(SynchronousExecutor.java:37)
	at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:92)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:220)
	at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:78)
	at org.apache.cxf.transport.servlet.ServletDestination.invoke(ServletDestination.java:92)
	at org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:214)
	at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:113)
	at org.apache.cxf.transport.servlet.AbstractCXFServlet.invoke(AbstractCXFServlet.java:170)
	at org.apache.cxf.transport.servlet.AbstractCXFServlet.doGet(AbstractCXFServlet.java:152)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:707)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:820)
	at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:487)
	at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:362)
	at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216)
	at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181)
	at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:726)
	at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:405)
	at org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:206)
	at org.mortbay.jetty.handler.HandlerCollection.handle(HandlerCollection.java:114)
	at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)
	at org.mortbay.jetty.Server.handle(Server.java:324)
	at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:505)
	at org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:828)
	at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:514)
	at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:211)
	at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:380)
	at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:395)
	at org.mortbay.thread.BoundedThreadPool$PoolThread.run(BoundedThreadPool.java:450)
Caused by: java.lang.IllegalArgumentException: object is not an instance of declaring class
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at org.apache.cxf.service.invoker.AbstractInvoker.performInvocation(AbstractInvoker.java:124)
	at org.apache.cxf.service.invoker.AbstractInvoker.invoke(AbstractInvoker.java:82)
	... 31 more


I can post more of the specifics on the configuration of the bean ""a.b.c.ServiceImpl"" (I have changed it from the real name), but I was hoping you might be able to eyeball the exception and provide a diagnosis based on your understanding of the patch you just applied.  So, it appears the mapping is now being found (based on your patch), but for some reason it can't invoke the method due to the reference not being what it thought it would be.

Any help is greatly appreciated.","09/Apr/08 08:52;sergey_beryozkin;Can you please provide a bit more info. I'd need to update a system test to fail first so that a proper fix can be found.

Lets assume we have a.b.c.ServiceImpl with a single ""String getTestString()"" method.
This ServiceImpl is a root class with a @Path annotation and it's been injected into a JAX-RS server runtime through the spring config. Can you please show the spring configuration (simplified if you prefer but reflecting the real scenario as much as possible), including the aop one for this ServiceImpl ? 

","09/Apr/08 18:53;yarddog;Sergey - 

I've tried debugging this a little on my side because I'm still not sure how to replicate this in my dumb-downed project that produced the original error.

But, here's what I can tell you:

In the dumbed-down project that works after your patch, the instance of resourceObject on line 79 of JAXRSInvoker is an instance called Test$$EnhancerByCGLIB$2484b11, which is basically a Cglib2AopProxy.

In my more complex project that fails, the instance of resourceObject on line 79 of JAXRSInvoker is an instance called $Proxy152, which is a JdkDynamicAopProxy.

I'm still trying to figure out how to get my dumbed-down project to fail, but I thought this information may help in the meantime.  As an FYI, my more complex project is using, at its core, Spring and Hibernate.  I have several different AOP pointcuts defined that do things like declarative transaction demarcation, logging, etc...

- Steve
","09/Apr/08 20:32;yarddog;OK - I finally have it narrowed down to some specifics.

I believe the two attached source files (beans.xml and Test.java) are all you need to replicate this issue.  Obviously, you'd have to configure your datasource appropriately for your environment.  My initial guess is that its going to have something to do with the HibernateTransactionManager pointcut I have defined and that it uses the JdkDynamicAopProxy (as opposed to a cglib proxy instance).  But, I far from an expert in how all of these libraries play together.","09/Apr/08 20:35;yarddog;Files to replicate issue ""org.apache.cxf.interceptor.Fault: object is not an instance of declaring class while invoking......"" have been attached.","10/Apr/08 13:33;dkulp;
Sergey/Steve,

I haven't looked at the code, but I'm pretty sure I know what the problem is....

In the proxy case, the Method object that is used to determine the annotations cannot be the method object that is used to do the invoke.   It's kind of a strang case, but the proxy isn't actually an instance of the class.  (it works in the cglib case, as it's a generated subclass that overrides the method).  Most likely what needs to be done it use the Class cls = ClassHelper.getRealClass(...) to get the class for the lookup of the methods for the annotations, but then if cls.isInstance(obj) returns false, you'll need to call obj.getClass() and find the corresponding method on that to really do the invoke.

Dan","10/Apr/08 15:13;sergey_beryozkin;JAXRSInvoker has this code :

Object serviceObject = null;

Class c  = cri.getResourceClass();
            for (Object resourceObject : resources) {
                if (c.isInstance(resourceObject)) {
                    serviceObject = resourceObject;
                }
            } 

Multiple service beans can be available so here it checks for the match...Putting aside this fact (lets assume we have a single service bean instance), do you mean 
that if this 

if (c.isInstance(resourceObject)) fails 

then a Method needs to be found on the resourceObject.getClass(), which will then be invoked ?

",10/Apr/08 17:39;sergey_beryozkin;Does anyone know how to create an instance of JdkDynamicAopProxy manually in the code ?,"10/Apr/08 18:16;yarddog;This might help:
http://jsourcery.com/output/sourceforge/spring/1.2rc1/org/springframework/aop/framework/JdkDynamicProxyTests.source.html

Take a look at the test method testInterceptorIsInvokedWithNoTarget()

- Steve
","11/Apr/08 21:05;sergey_beryozkin;According to http://static.springframework.org/spring/docs/2.5.x/reference/aop.html#aop-proxying

JDK Proxy will be used if the bean implements at least one interface, that section also shows how to enforce the use of CGLIB 
proxies, using proxy-target-class=""true"" attribute

The new patch will support a case where a JDK Proxy is created, but for the method like the one in the attached Test class be invoked
through JAX-RS, this method has to come as part of implementing the interface,  as one can't get non-interface methods from a JDK Proxy 

That is you'll need to do :

Test implements TestInterface {
   public void doIt() {
   }
}

if that is not suitable for some reasons that you'd need to force a CGLIB proxy be created as described in the spring aop docs...
 ","11/Apr/08 21:07;sergey_beryozkin;* support for complex AOP scenarous
* conversion of annotated parameters into classes with either constructors or static  valueOf methods accepting String
* inheritance of most annotations from superclasses/interfaces",11/Apr/08 21:08;sergey_beryozkin;cxf-1494-2.patch is the latest update ,"14/Apr/08 16:51;sergey_beryozkin;Steve, can you please confirm a fix ? Dan has just applied a patch, you may want to build from jax-rs component from a trunk or wait for a snapshot be ready...","14/Apr/08 18:14;yarddog;Sergey / Dan - 

Can you confirm whether or not the fix / patch would have been included in the ""cxf-rt-frontend-jaxrs-2.1-incubator-20080411.173632-38.jar"" SNAPSHOT release?  If it is included, my initial test failed, but I could still be running with a older version.  Hoping you'll say that it was not.

I am unable to build this myself, as I am receive the following errors from within Eclipse when trying to update the code:

RA layer request failed
svn: REPORT request failed on 'http://svn.apache.org/repos/asf/incubator/cxf/trunk/rt/frontend/jaxrs'
svn: REPORT of 'http://svn.apache.org/repos/asf/incubator/cxf/trunk/rt/frontend/jaxrs': 400 Bad Request (http://svn.apache.org)

I am looking into what this Subversion/Eclipse error means.","14/Apr/08 19:14;dkulp; 
No, it wouldn't.  I just committed the code this morning.

I'll be doing another snapshot build sometime later today which will have it.
","15/Apr/08 15:31;yarddog;Works perfectly - thanks for responding so quickly on fixing this.

For others who may find this thread later, looking for some help, I want to stress one of your comments above:  ""The new patch will support a case where a JDK Proxy is created, but for the method like the one in the attached Test class be invoked through JAX-RS, this method has to come as part of implementing the interface, as one can't get non-interface methods from a JDK Proxy.""

This caused me a little grief this morning, as I couldn't figure out why it still wasn't working, but trusted you guys knew what you were doing.  So, I kept re-reading your comments and trying various things.

To re-summarize for others, it is not enough to annotate your implementation class with the ""javax.ws.rs.*"" annotations if you are using Spring and the JdkDynamicAopProxy.  Because the non-interface methods are not visible from the JdkDynamicAopProxy, you'll have to also add the method to the interface your bean implements.  Its obvious once you understand why, but can be easily overlooked when implementing - especially because the method I exposed on the service implementation was just a REST helper that wrapped a call to another method on the service with a more complex parameter.

Thanks again -
","15/Apr/08 15:40;sergey_beryozkin;Excellent news, thanks for a quick confirmation. I'll update the docs (one of those promises :-)).
Using proxy-target-class=""true"" on a bean may let you avoid introducing a new interface (CGLIB subclassing will be used), but I haven't tried",,,,
Cannot  build 2.0.4 JBI Integration ,CXF-1493,12392443,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,tdiesler,tdiesler,27/Mar/08 13:49,30/Apr/08 14:54,14/Mar/19 02:29,21/Apr/08 17:26,2.0.4,,,,,,,,,,,,,,2.0.6,,,,,,,,,,0,,,,"The 2.0.4 build seems to be broken in the JBI Integration module

To reproduce, move your .m2 repository 

mv ~/.m2 ~/.m2.backup

[tdiesler@tddell jbi]$ pwd
/home/tdiesler/svn/jbossws/stack/cxf/branches/jbossws-3.0.1-cxf-1.0.1.GA/apache-cxf/integration/jbi
[tdiesler@tddell jbi]$ mvn
[INFO] Scanning for projects...
[INFO] ----------------------------------------------------------------------------
[INFO] Building Apache CXF JBI Integration
[INFO]    task-segment: [install]
[INFO] ----------------------------------------------------------------------------
[INFO] Setting property: classpath.resource.loader.class => 'org.codehaus.plexus.velocity.ContextClassLoaderResourceLoader'.
[INFO] Setting property: velocimacro.messages.on => 'false'.
[INFO] Setting property: resource.loader => 'classpath'.
[INFO] Setting property: resource.manager.logwhenfound => 'false'.
[INFO] ************************************************************** 
[INFO] Starting Jakarta Velocity v1.4
[INFO] RuntimeInstance initializing.
[INFO] Default Properties File: org/apache/velocity/runtime/defaults/velocity.properties
[INFO] Default ResourceManager initializing. (class org.apache.velocity.runtime.resource.ResourceManagerImpl)
[INFO] Resource Loader Instantiated: org.codehaus.plexus.velocity.ContextClassLoaderResourceLoader
[INFO] ClasspathResourceLoader : initialization starting.
[INFO] ClasspathResourceLoader : initialization complete.
[INFO] ResourceCache : initialized. (class org.apache.velocity.runtime.resource.ResourceCacheImpl)
[INFO] Default ResourceManager initialization complete.
[INFO] Loaded System Directive: org.apache.velocity.runtime.directive.Literal
[INFO] Loaded System Directive: org.apache.velocity.runtime.directive.Macro
[INFO] Loaded System Directive: org.apache.velocity.runtime.directive.Parse
[INFO] Loaded System Directive: org.apache.velocity.runtime.directive.Include
[INFO] Loaded System Directive: org.apache.velocity.runtime.directive.Foreach
[INFO] Created: 20 parsers.
[INFO] Velocimacro : initialization starting.
[INFO] Velocimacro : adding VMs from VM library template : VM_global_library.vm
[ERROR] ResourceManager : unable to find resource 'VM_global_library.vm' in any resource loader.
[INFO] Velocimacro : error using  VM library template VM_global_library.vm : org.apache.velocity.exception.ResourceNotFoundException: Unable to find resource 'VM_global_library.vm'
[INFO] Velocimacro :  VM library template macro registration complete.
[INFO] Velocimacro : allowInline = true : VMs can be defined inline in templates
[INFO] Velocimacro : allowInlineToOverride = false : VMs defined inline may NOT replace previous VM definitions
[INFO] Velocimacro : allowInlineLocal = false : VMs defined inline will be  global in scope if allowed.
[INFO] Velocimacro : initialization complete.
[INFO] Velocity successfully started.
[INFO] [checkstyle:checkstyle {execution: validate}]
[INFO] Starting audit...
Audit done.

[INFO] Preparing pmd:check
[INFO] [pmd:pmd]
[INFO] [pmd:check {execution: validate}]
[INFO] 
[INFO] Setting property: classpath.resource.loader.class => 'org.codehaus.plexus.velocity.ContextClassLoaderResourceLoader'.
[INFO] Setting property: velocimacro.messages.on => 'false'.
[INFO] Setting property: resource.loader => 'classpath'.
[INFO] Setting property: resource.manager.logwhenfound => 'false'.
[INFO] [remote-resources:process {execution: default}]
[INFO] [resources:resources]
[INFO] Using default encoding to copy filtered resources.
Downloading: http://people.apache.org/repo/m2-incubating-repository/org/apache/geronimo/specs/geronimo-qname_1.1_spec/1.1/geronimo-qname_1.1_spec-1.1.jar
Downloading: http://download.java.net/maven/1//org.apache.geronimo.specs/jars/geronimo-qname_1.1_spec-1.1.jar
Downloading: http://www.ibiblio.org/maven2/org/apache/geronimo/specs/geronimo-qname_1.1_spec/1.1/geronimo-qname_1.1_spec-1.1.jar
Downloading: http://svn.apache.org/repos/asf/incubator/servicemix/m2-repo/org/apache/geronimo/specs/geronimo-qname_1.1_spec/1.1/geronimo-qname_1.1_spec-1.1.jar
Downloading: http://people.apache.org/repo/m2-incubating-repository/org/apache/geronimo/specs/geronimo-activation_1.0.2_spec/1.2/geronimo-activation_1.0.2_spec-1.2.jar
Downloading: http://download.java.net/maven/1//org.apache.geronimo.specs/jars/geronimo-activation_1.0.2_spec-1.2.jar
Downloading: http://www.ibiblio.org/maven2/org/apache/geronimo/specs/geronimo-activation_1.0.2_spec/1.2/geronimo-activation_1.0.2_spec-1.2.jar
Downloading: http://svn.apache.org/repos/asf/incubator/servicemix/m2-repo/org/apache/geronimo/specs/geronimo-activation_1.0.2_spec/1.2/geronimo-activation_1.0.2_spec-1.2.jar
[INFO] ------------------------------------------------------------------------
[ERROR] BUILD ERROR
[INFO] ------------------------------------------------------------------------
[INFO] Failed to resolve artifact.

Missing:
----------
1) org.apache.geronimo.specs:geronimo-qname_1.1_spec:jar:1.1

  Try downloading the file manually from the project website.

  Then, install it using the command: 
      mvn install:install-file -DgroupId=org.apache.geronimo.specs -DartifactId=geronimo-qname_1.1_spec \
          -Dversion=1.1 -Dpackaging=jar -Dfile=/path/to/file
Alternatively, if you host your own repository you can deploy the file there:       mvn deploy:deploy-file -DgroupId=org.apache.geronimo.specs -DartifactId=geronimo-qname_1.1_spec \
          -Dversion=1.1 -Dpackaging=jar -Dfile=/path/to/file \
           -Durl=[url] -DrepositoryId=[id]

  Path to dependency: 
        1) org.apache.cxf:cxf-integration-jbi:jar:2.0.4-incubator
        2) org.apache.servicemix:servicemix-jbi:jar:3.1.2
        3) org.apache.geronimo.specs:geronimo-qname_1.1_spec:jar:1.1

2) org.apache.geronimo.specs:geronimo-activation_1.0.2_spec:jar:1.2

  Try downloading the file manually from the project website.

  Then, install it using the command: 
      mvn install:install-file -DgroupId=org.apache.geronimo.specs -DartifactId=geronimo-activation_1.0.2_spec \
          -Dversion=1.2 -Dpackaging=jar -Dfile=/path/to/file
Alternatively, if you host your own repository you can deploy the file there:       mvn deploy:deploy-file -DgroupId=org.apache.geronimo.specs -DartifactId=geronimo-activation_1.0.2_spec \
          -Dversion=1.2 -Dpackaging=jar -Dfile=/path/to/file \
           -Durl=[url] -DrepositoryId=[id]

  Path to dependency: 
        1) org.apache.cxf:cxf-integration-jbi:jar:2.0.4-incubator
        2) org.apache.servicemix:servicemix-jbi:jar:3.1.2
        3) org.apache.geronimo.specs:geronimo-activation_1.0.2_spec:jar:1.2

----------
2 required artifacts are missing.

for artifact: 
  org.apache.cxf:cxf-integration-jbi:jar:2.0.4-incubator

from the specified remote repositories:
  central (http://repo1.maven.org/maven2),
  java.net (http://download.java.net/maven/1/),
  apache-incubating (http://people.apache.org/repo/m2-incubating-repository)


[INFO] ------------------------------------------------------------------------
[INFO] For more information, run Maven with the -e switch
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 27 seconds
[INFO] Finished at: Thu Mar 27 14:50:28 CET 2008
[INFO] Final Memory: 18M/52M
[INFO] ------------------------------------------------------------------------
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-03-27 14:09:02.414,,,no_permission,,,,,,,,,,,,,112290,,,Mon Apr 21 17:26:37 UTC 2008,,,,,,0|i0v427:,179631,,,,,,,,"27/Mar/08 14:06;tdiesler;Originally I thought it had todo with missing apache incubator repositories. However when following 

http://cwiki.apache.org/CXF20DOC/maven-integration-and-plugin.html

I get what it seems the correct list of repositories

from the specified remote repositories:
  central (http://repo1.maven.org/maven2),
  java.net (http://download.java.net/maven/1/),
  apache-incubating (http://people.apache.org/repo/m2-incubating-repository)
","27/Mar/08 14:09;gnt;These jars are avaiable in the public repo:
  http://repo1.maven.org/maven2
I suppose the problem may come from ibiblio repo being down:
  http://www.ibiblio.org/maven2/","27/Mar/08 14:52;dkulp; The servicemix 3.1.2 pom is problematic/broken and will cause 
failures if ibiblio is down.  They redefine ""central"" to point to 
ibiblio.   It's fixed in servicemix 3.2.1.   I'll update cxf 2.0.6/2.1 
to use the newer version of servicemix, but that won't really help for 
the previous tags.

Couple of options:
1) In your ~/.m2/settings.xml, define a ""mirror"" for central that points 
back to central.
<mirrors>
    <mirror>
        <id>central-mirror</id>
        <name>Local proxy of http://repo1.maven.org/maven2/</name>
        <url>http://repo1.maven.org/maven2/</url>
        <mirrorOf>central</mirrorOf>
    </mirror>
</mirrors>

2) Run the build with -Dservicemix.version=3.2.1 to have it build it with 
the newer service mix.   

This really sucks.  Not much we can do about it either.","27/Mar/08 14:52;tdiesler;I may not be able to read the error message probably, but what is actually missing here?

I can find

http://repo1.maven.org/maven2/org/apache/geronimo/specs/geronimo-qname_1.1_spec/1.1/
http://repo1.maven.org/maven2/org/apache/geronimo/specs/geronimo-activation_1.0.2_spec/1.2/
http://people.apache.org/repo/m2-incubating-repository/org/apache/cxf/cxf-integration-jbi/2.0.4-incubator/
","09/Apr/08 21:45;tdiesler;To reproduce, please have a look at

http://jbws.dyndns.org/mediawiki/index.php?title=Building_From_Source","21/Apr/08 17:26;dkulp;
This will be resolved in 2.0.6 as we're moving to the newer version of servicemix which is available in central and doesn't redefine central.

",,,,,,,,,,,,,,,,,,,,,,,,,
JAXB databinding adds classes recursively to JAXBContext. The reference impl. adds only the request and response classes.,CXF-1492,12392331,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,orbang,orbang,26/Mar/08 10:38,30/Apr/08 14:54,14/Mar/19 02:29,27/Mar/08 20:55,,,,,,,,,,,,,,,2.0.6,,,,JAXB Databinding,,,,,,0,,,,"This can cause problems with custom JAXB type adapters. Since CXF walks the classes recursively in JAXBContextInitializer, it adds the custom type's xml schema to the wsdl. Because these classes are intended for internal usage only they should not be part of the contract. If, for example, we have an adapter for xs:date we don't want to see in the wsdl the schema of the class that xs:date is mapped to internally.

This is a patch against JAXBContextInitializer that worked for us:

53a54
>
149,152d149
<             if (!Throwable.class.equals(cls)
<                 && !Exception.class.equals(cls)) {
<                 walkReferences(cls);
<             }
165d161
<                 walkReferences(cls);
",snapshot 20080130,,,,,,,,,,,,,,,,26/Mar/08 10:41;orbang;JAXBContextInitializer.patch;https://issues.apache.org/jira/secure/attachment/12378624/JAXBContextInitializer.patch,26/Mar/08 16:07;dkulp;cxf-1492.patch;https://issues.apache.org/jira/secure/attachment/12378637/cxf-1492.patch,,,,,2.0,,,,,,,,,,,,,,,,,,,,2008-03-26 15:46:59.269,,,no_permission,,,,,,,,,,,,,112289,,,Wed Mar 26 16:07:39 UTC 2008,,,,,,0|i1ac6f:,268439,,,,,,,,"26/Mar/08 15:46;dkulp;
Can you attach a sample JAXB class or something that I can look at?

We pretty much have to walk the references.   Otherwise, we're likely to not pick up everything that is required and users would then end up with failures that are very hard to diagnose and they would have to do special configuration to get the extra classes that would be needed into the context.   (such as add @XmlSeeAlso annotations all over the place)

I'd rather find a solution that would keep the references.   Possibly if the field/property has an @XmlJavaTypeAdapter annotation, don't include it itself. 

","26/Mar/08 16:07;dkulp;
Can you try the attached patch instead and let me know how well it works?  It ignores stuff with the XmlJavaTypeAdapter annoation.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ReadHeadersInterceptor reads to much after parsing soap-header and breaks wss signature,CXF-1491,12392287,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Critical,Fixed,dkulp,gigerstyle,gigerstyle,25/Mar/08 21:58,30/Apr/08 14:54,14/Mar/19 02:29,01/Apr/08 02:49,2.0.4,,,,,,,,,,,,,,2.0.6,,,,,,,,,,0,,,,"On line 176 in ReadHeadersInterceptor there is the following code:

/// advance just past body.
//xmlReader.nextTag();
if (message.getVersion().getFault().equals(xmlReader.getName())) {
    Endpoint ep = message.getExchange().get(Endpoint.class);
    if (!isDecoupled(message)) {
        message.getInterceptorChain().abort();
        if (ep.getInFaultObserver() != null) {
            ep.getInFaultObserver().onMessage(message);
        }
    } else {
        message.getExchange().put(""deferred.fault.observer.notification"", Boolean.TRUE);
    }
} 

xmlReader.nextTag(); reads to much. After the body-element it is possible to have a text-node which is part of signature-digest when the whole
body is signed. With this statement we skip this text-node and as result the signature is invalid.
xmlReader.next() solves that problem but the code that follows it stops working...of course.

Btw: If I understand the code correctly, if the incoming mesage is a soap-fault the InFaultChain is called. Is ReadHeadersInterceptor the right place to check for a InFault? What happens when the incoming fault is encrypted? Shouldn't that be moved to a separate interceptor after a possible WSS4JInterceptor is called?

Thanks

Marc",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112288,,,2008-03-25 21:58:00.0,,,,,,0|i0uyyf:,178804,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
cxf-java2ws-plugin generates sources into ${basedir},CXF-1489,12392250,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,,bond,bond,25/Mar/08 12:19,17/Apr/10 11:02,14/Mar/19 02:29,11/Apr/08 13:27,,,,,,,,,,,,,,,2.1,,,,Tooling,,,,,,0,,,,"Maven plugin for java2ws generates sources into ${basedir}. Java2ws '-s' option is ignored. It should output sources either under target/generated or  the output dir should be configurable (preferable).

Is it planned to support other arguments supported by java2ws command line ?",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-04-07 16:57:27.038,,,no_permission,,,,,,,,,,,,,112286,,,Sat Apr 17 11:02:53 UTC 2010,,,,,,0|i1ac6n:,268440,,,,,,,,07/Apr/08 16:57;dlopezleon;you can use <argline>-s ${basedir}/target/generated/src/main/java</argline> (i.e.) inside configuration.,11/Apr/08 13:27;bond;Yep it works. Thanks,"17/Apr/10 11:02;andreasek;I still see this problem in 
				<groupId>org.apache.cxf</groupId>
				<artifactId>cxf-java2ws-plugin</artifactId>
				<version>2.2.6</version>

How comes that this issue is fixed? 
The suggested workaround works, though.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Synchronization issues in PolicyEngineImpl,CXF-1488,12392166,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,bharathganesh,bharathganesh,bharathganesh,24/Mar/08 10:11,30/Apr/08 14:54,14/Mar/19 02:29,25/Mar/08 05:22,2.0.5,2.1,,,,,,,,,,,,,2.0.6,2.1,,,WS-* Components,,,,,,0,,,,"The cleaning up tasks of BindingOperations and BindingFaults during the stopServer() callback in PolicyEngine, is not threadsafe. We take an iterator over the clientRequestInfo map keyset, clientResponseMap, serverRequestInfo, serverResponseInfo, clientFaultInfo, serverFaultInfo etc and do a map.remove() which would lead to synchronization issues.",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112285,,,Tue Mar 25 05:22:06 UTC 2008,,,,,,0|i1ac6v:,268441,,,,,,,,"25/Mar/08 05:22;bharathganesh;While cleaning up the entries of requestInfo's, responseInfo's and faultInfo's map, we create a temperory Set with all the keys. Later we iterate over the keys of this temp set, and if it's same as that of the endpoint being undeployed, we remove the corresponding entries from the client and server maps.   ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WS-RM policy assertions not merged properly ,CXF-1487,12392165,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,bharathganesh,bharathganesh,bharathganesh,24/Mar/08 09:51,30/Apr/08 14:54,14/Mar/19 02:29,25/Mar/08 11:49,,,,,,,,,,,,,,,2.0.6,2.1,,,WS-* Components,,,,,,0,,,,"While merging the RM policy assertions several max and min logic are applied currently. 
Refer to [http://www.nabble.com/WS-RM-BaseRetransmissionInterval-td13383409.html#a133834]
For instance, the maximum value for BaseRetransmissionInterval WS-RM policy assertion is 3 secs, which is the default value. Even if the user provides a
different value the minimum of user specified value and the default value is taken.  If user provides a non null value for any of the assertions - Retransmission interval, inactivity timeout, acknowledgment interval, we should apply them.  
",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,112284,,,Tue Mar 25 11:49:58 UTC 2008,,,,,,0|i0v3rj:,179583,,,,,,,,"25/Mar/08 11:49;bharathganesh;
Files changed: org.apache.cxf.ws.rm.policy.PolicyUtils.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
wsdl2java generates aync SEI methods having compile errors when consuming a BARE service returning int.,CXF-1486,12392074,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,prophet36,prophet36,21/Mar/08 19:50,30/Apr/08 14:54,14/Mar/19 02:29,25/Mar/08 15:37,2.1,,,,,,,,,,,,,,2.0.6,,,,Tooling,,,,,,0,,,,"If you create a service like this:

@WebService(targetNamespace = Bug.NS_URI)
@SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
public class Bug {
	public static final String NS_URI = ""http://blah"";
	@WebMethod(operationName = ""GetInt"")
	public int getInt(
		@WebParam(targetNamespace = NS_URI, name = ""GetInt"")
		String request)
	{
		return 10;
	}
}

...and then pipe its CXF-generated WSDL through wsdl2java with enableAsyncMapping, the generated SEI will not compile:

@SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
@WebMethod(operationName = ""GetInt"")
public Response<int> getIntAsync(
    @WebParam(partName = ""GetInt"", name = ""GetInt"", targetNamespace = ""http://blah"")
    java.lang.String getInt
);

The reason is that you can't do Response<int>; it has to be Response<Integer>. The same is true for any builtin type (int, float, boolean etc).",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-03-25 15:37:55.306,,,no_permission,,,,,,,,,,,,,112283,,,Tue Mar 25 15:37:55 UTC 2008,,,,,,0|i1ac73:,268442,,,,,,,,"25/Mar/08 15:37;dkulp;
We were mapping for Holders, just not the others.  :-(",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Startup Exception: java.lang.NoSuchMethodError: org.apache.cxf.service.model.ServiceInfo.getSchemas()Ljava/util/Collection;,CXF-1483,12392018,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,javidelgadillo,javidelgadillo,20/Mar/08 23:25,30/Apr/08 14:57,14/Mar/19 02:29,21/Mar/08 13:15,2.1,,,,,,,,,,,,,,2.1,,,,Core,,,,,,0,,,,"I tried using the Mar 19 Snapshot build of CXF to see an issue had been resolved with the Mar 14 snapshot build had been resolved (http://issues.apache.org/jira/browse/CXF-1482) and got an error on startup.  The same configuration files successfully launched using the Mar 14 snapshot build.

We use the Spring 2 syntax to configure our beans as follows:
  <simple:server id=""cxf.find"" serviceClass=""com.esri.aws.services.Foo"" address=""/soap/Foo"">
      <simple:serviceBean><ref bean=""fooBean"" /></simple:serviceBean>
      <simple:dataBinding><ref bean=""cxf.aegisBinding"" /></simple:dataBinding>
      <simple:serviceFactory><ref bean=""cxf.serviceFactory"" /></simple:serviceFactory>
   </simple:server>

Error creating bean with name 'cx.find': Invocation of init method failed; nested exception is java.lang.NoSuchMethodError: org.apache.cxf.service.model.ServiceInfo.getSchemas()Ljava/util/Collection;
Caused by: java.lang.NoSuchMethodError: org.apache.cxf.service.model.ServiceInfo.getSchemas()Ljava/util/Collection;
	at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.initializeWrappedSchema(ReflectionServiceFactoryBean.java:793)
	at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.buildServiceFromClass(ReflectionServiceFactoryBean.java:347)
	at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.initializeServiceModel(ReflectionServiceFactoryBean.java:392)
	at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.create(ReflectionServiceFactoryBean.java:180)
	at org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory.createEndpoint(AbstractWSDLBasedEndpointFactory.java:79)
	at org.apache.cxf.frontend.ServerFactoryBean.create(ServerFactoryBean.java:113)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:1240)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1205)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1171)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:425)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:251)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:156)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:248)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:160)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:287)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:352)
	at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:244)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:187)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:49)
	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4236)
	at org.apache.catalina.core.StandardContext.start(StandardContext.java:4760)",Glassfish App Server,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-03-21 01:58:15.778,,,no_permission,,,,,,,,,,,,,112280,,,Fri Mar 21 13:15:17 UTC 2008,,,,,,0|i0synr:,167092,,,,,,,,"21/Mar/08 01:58;bmargulies;This just about has to be the result of your somehow combining two incompatible CXF JAR files. The missing method is just an ordinary method.

It was just very recently modified to return a List<> instead of a Collection<>, so I think that you've got an old JAR file with a caller in it.

If you can find a reference to the Collection<> returning version in the current snapshot, then something went wrong with its construction in a big way.
","21/Mar/08 02:33;njiang;I can reproduce the exception with the Mar 19's CXF 2.1 snapshot, but when I point the jars to the latest trunk version , every thing is OK.
Maybe we should deploy a new snapshot right now ;)","21/Mar/08 02:48;dkulp;Uhgg...   Must be my fault.  Probably didn't do a clean before the deploy or something.

I'll deploy a new snapshot now.

","21/Mar/08 13:10;bmargulies;Dan is producing 2.1 beta 1 this afternoon, that will resolve this.
","21/Mar/08 13:15;dkulp;Actually, this should be resolved in the snapshot I DID deploy yesterday.  

Dan
",,,,,,,,,,,,,,,,,,,,,,,,,,
List<Double> parameters don't map to xsd:double in generated WSDL,CXF-1482,12392017,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,bmargulies,javidelgadillo,javidelgadillo,20/Mar/08 23:11,30/Apr/08 14:57,14/Mar/19 02:29,21/Mar/08 02:07,2.1,,,,,,,,,,,,,,2.1,,,,Aegis Databinding,Soap Binding,,,,,0,,,,"When using the Mar 14 snapshot build of 2.1, CXF outputs less than desirable WSDL for any service that has an input parameter of type List<Double> when used in conjuction with Aegis Mapping files.

With previous builds, the List<Double> would map to xsd:double, but now it creates its own namespace.

Here's the interface:
public interface Foo
{
    int bar( List<Double> doublesList );
}

Here's the Aegis mapping file:
<?xml version=""1.0""?>
<!-- xmlns=""http://xfire.codehaus.org/schemas/1.0/mapping.xsd"" -->
<mappings>
    <mapping>
        <method name=""bar"">
            <parameter index=""0"" mappedName=""doublesList"" componentType=""java.lang.Double""/>
        </method>
    </mapping>
</mappings>

Here's the generated WSDL:
<?xml version=""1.0"" encoding=""UTF-8""?><wsdl:definitions xmlns:soap=""http://schemas.xmlsoap.org/wsdl/soap/"" xmlns:tns=""http://arcwebservices.com/v4"" xmlns:wsdl=""http://schemas.xmlsoap.org/wsdl/"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" name=""Foo"" targetNamespace=""http://arcwebservices.com/v4"">
  <wsdl:types>
<xsd:schema xmlns:tns=""http://lang.java"" attributeFormDefault=""qualified"" elementFormDefault=""qualified"" targetNamespace=""http://lang.java"">
    <xsd:complexType name=""Double"">
        <xsd:sequence>
            <xsd:element minOccurs=""0"" name=""infinite"" type=""xsd:boolean""/>
            <xsd:element minOccurs=""0"" name=""naN"" type=""xsd:boolean""/>
        </xsd:sequence>
    </xsd:complexType>
    <xsd:complexType name=""ArrayOfDouble"">
        <xsd:sequence>
            <xsd:element maxOccurs=""unbounded"" minOccurs=""0"" name=""Double"" nillable=""true"" type=""tns:Double""/>
        </xsd:sequence>
    </xsd:complexType>
</xsd:schema>
<xsd:schema xmlns:ns0=""http://lang.java"" attributeFormDefault=""unqualified"" elementFormDefault=""qualified"" targetNamespace=""http://arcwebservices.com/v4"">
    <xsd:import namespace=""http://lang.java""/>
    <xsd:element name=""bar"">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name=""doublesList"" type=""ns0:ArrayOfDouble""/>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name=""barResponse"">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name=""return"" type=""xsd:int""/>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
</xsd:schema>
  </wsdl:types>
  <wsdl:message name=""barResponse"">
    <wsdl:part element=""tns:barResponse"" name=""parameters""/>
  </wsdl:message>
  <wsdl:message name=""bar"">
    <wsdl:part element=""tns:bar"" name=""parameters""/>
  </wsdl:message>
  <wsdl:portType name=""FooPortType"">
    <wsdl:operation name=""bar"">
      <wsdl:input message=""tns:bar"" name=""bar""/>
      <wsdl:output message=""tns:barResponse"" name=""barResponse""/>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name=""FooSoapBinding"" type=""tns:FooPortType"">
    <soap:binding style=""document"" transport=""http://schemas.xmlsoap.org/soap/http""/>
    <wsdl:operation name=""bar"">
      <soap:operation soapAction="""" style=""document""/>
      <wsdl:input name=""bar"">
        <soap:body use=""literal""/>
      </wsdl:input>
      <wsdl:output name=""barResponse"">
        <soap:body use=""literal""/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name=""Foo"">
    <wsdl:port binding=""tns:FooSoapBinding"" name=""FooPort"">
      <soap:address location=""http://localhost:8080/soap/Foo""/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>",Glassfish App Server,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-03-21 02:03:53.836,,,no_permission,,,,,,,,,,,,,112279,,,Fri Mar 21 02:07:49 UTC 2008,,,,,,0|i0v40n:,179624,,,,,,,,"21/Mar/08 02:03;bmargulies;I've got a repro into a unit test, working on the explanation.","21/Mar/08 02:07;bmargulies;The mapping from Double.class to xsd:double was missing from the default set as a result of an editing error in the recent remodularization.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"PropertyEditor for class ""org.apache.cxf.binding.soap.SoapVersion""  is wrong",CXF-1481,12391944,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,quaff,quaff,20/Mar/08 08:48,30/Apr/08 14:54,14/Mar/19 02:29,21/Apr/08 18:26,2.0.4,2.1,,,,,,,,,,,,,2.0.6,,,,Soap Binding,,,,,,0,,,,"it should be ""org.apache.cxf.binding.soap.SoapVersionEditor"",but is ""org.apache.cxf.binding.soap.SoapVersionPropertyEditor""",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-03-26 16:18:27.98,,,no_permission,,,,,,,,,,,,,112278,,,Fri Mar 28 01:17:46 UTC 2008,,,,,,0|i13zov:,231412,,,,,,,,"26/Mar/08 16:18;dkulp;
Can I get more context on this?    The class name is SoapVersionPropertyEditor so I think the current setting is correct.

","28/Mar/08 01:17;quaff;please refer to javabeans spec,spring reused PropertyEditorManager.

http://java.sun.com/javase/6/docs/api/java/beans/PropertyEditorManager.html

The PropertyEditorManager uses three techniques for locating an editor for a given type. First, it provides a registerEditor method to allow an editor to be specifically registered for a given type. Second it tries to locate a suitable class by adding ""Editor"" to the full qualified classname of the given type (e.g. ""foo.bah.FozEditor""). Finally it takes the simple classname (without the package name) adds ""Editor"" to it and looks in a search-path of packages for a matching class.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Basic authentication header missing while accessing WSDL URL,CXF-1480,12391861,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,andrea.chiodoni,andrea.chiodoni,19/Mar/08 11:18,05/Oct/09 19:37,14/Mar/19 02:29,05/Oct/09 14:43,2.0.4,,,,,,,,,,,,,,2.1.5,,,,Transports,,,,,,1,,,,"While accessing the wsdl URL I get a 401. Service + WLS protected with basic auth.

Here my client context:

	<bean id=""cassaService""
		class=""ch.chiodoni.cassa.server.service.CassaService""
		factory-bean=""clientFactory"" factory-method=""create"" />

	<bean id=""clientFactory""
		class=""org.apache.cxf.jaxws.JaxWsProxyFactoryBean"">
		<property name=""serviceClass""
			value=""ch.chiodoni.cassa.server.service.CassaService"" />
		<!-- 
			<property name=""address""
			value=""http://cassa:cassa@localhost:8080/cassa-server/server/cassa?wsdl"" />
			<property name=""address""
			value=""http://localhost:8080/cassa-server/cassa.wsdl"" />
		-->

		<property name=""wsdlURL""
			value=""http://localhost:8080/cassa-server/server/cassa?wsdl"" />
		<property name=""username"" value=""cassa"" />
		<property name=""password"" value=""xxx"" />
	</bean>

	<http:conduit
		name=""{http://chiodoni.ch/cassa/server}CassaServiceImplPort.http-conduit"">
		<http:client AutoRedirect=""true"" Connection=""Keep-Alive"" />
		<http:authorization>
			<sec:UserName>cassa</sec:UserName>
			<sec:Password>xxx</sec:Password>
		</http:authorization>
	</http:conduit>


Would be basic auth HTTP header sent with the provided context or I'm configuring something wrong?

Thanks
Andrea

","Max os, Leopard, jetty, spring 2.5.2",,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2009-10-05 14:43:22.467,,,no_permission,,,,,,,,,,,,,112277,,,Mon Oct 05 14:43:22 UTC 2009,,,,,,0|i1ac7r:,268445,,,,,,,,"05/Oct/09 14:43;dkulp;
With CXF 2.1.5, we added the ability to configure conduits based on URL instead of portName.    Thus, it can be used to retrieve wsdls (which occurs before the serviceName/portName stuff is resolved since much of that is in the wsdl).

You should be able to do:

<http:conduit  id=""http://localhost:8080/cassa-server/server/.*"">
  <http:client AutoRedirect=""true"" Connection=""Keep-Alive"" />
 <http:authorization>
 <sec:UserName>cassa</sec:UserName>
 <sec:Password>xxx</sec:Password>
 </http:authorization>
</http:conduit>

And have it be used for the wsdl and the service (note the .* wildcard at the end of the URL)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WebParam ignored in service implementation,CXF-1478,12391478,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,,night.kame,night.kame,14/Mar/08 18:29,05/Oct/09 19:37,14/Mar/19 02:29,05/Oct/09 14:39,2.0.4,,,,,,,,,,,,,,2.2,,,,JAX-WS Runtime,,,,,,0,,,,"I have a very simple WSDL (see attached file), Doc/Lit/bare.
I generate with WSDL2Java server + impl. The generated Jax-WS interface looks like this:
public interface TestDocLit {

    @ResponseWrapper(localName = ""operation1Response"", targetNamespace = ""http://www.example.org/TestDocLit/"", className = ""org.example.testdoclit.Operation1Response"")
    @RequestWrapper(localName = ""operation1"", targetNamespace = ""http://www.example.org/TestDocLit/"", className = ""org.example.testdoclit.Operation1"")
    @WebResult(name = ""out"", targetNamespace = """")
    @WebMethod(action = ""http://www.example.org/TestDocLit/operation1"")
    public java.lang.String operation1(
        @WebParam(name = ""par1"", targetNamespace = """")
        int par1
    );
}

We note that WebParam is correct (no namespace, ""par1"").

The service is tested like this:
ServerFactoryBean svrFactory = new ServerFactoryBean();
svrFactory.setServiceClass(TestDocLit.class);
svrFactory.setAddress(url);
svrFactory.setServiceBean(new TestDocLitImpl());
svrFactory.create();

final Service service = Service.create(TestDocLit_Service.SERVICE);
service.addPort(TestDocLit_Service.TestDocLitSOAP, SOAPBinding.SOAP11HTTP_BINDING, url);
service.getPort(TestDocLit_Service.TestDocLitSOAP, TestDocLit.class).operation1(42);

The message sent by the client seems correct:
<soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/""><soap:Body><ns2:operation1 xmlns:ns2=""http://www.example.org/TestDocLit/""><par1>42</par1></ns2:operation1></soap:Body></soap:Envelope>

But debugging through DocLiteralInInterceptor::getPara, it appears that the service expects a (""http://testdoclit.example.org/"":""arg0""), whereas it receives a ("""":par1), thus, we have in return the dreaded:
null while invoking public abstract java.lang.String org.example.testdoclit.TestDocLit.operation1(int) with params [null].

So, the server has basically lost the parameter's name, and added a target namespace which (maybe) not due.
At http://localhost:9000/TestDocLit?wsdl, the generated WSDL exposes this fact as well:
<wsdl:message name=""operation1"">
    <wsdl:part element=""tns:operation1"" name=""parameters"">
    </wsdl:part>
  </wsdl:message>
and tns:operation1 is defined below:
<xsd:element name=""operation1"" type=""tns:operation1""/>
<xsd:complexType name=""operation1"">
<xsd:sequence>
<xsd:element name=""arg0"" type=""xsd:int""/>
</xsd:sequence>",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2008-03-14 18:48:12.874,,,no_permission,,,,,,,,,,,,,112275,,,Mon Oct 05 14:39:00 UTC 2009,,,,,,0|i1ac87:,268447,,,,,,,,"14/Mar/08 18:48;dkulp;> ServerFactoryBean svrFactory = new ServerFactoryBean();

Use the JaxWsServerFactoryBean instead.   The ""simple"" frontend doesn't 
know anything about the jaxws annotations.
","15/Mar/08 14:41;night.kame;The thing is, the same code is working in 2.0.2. So I don't know if the problem lies with the reading WebParam or if the information is stored somewhere else. But it would seem quite normal than using exclusively CXF (wsdl2java with validation, server and client), would lead to a working webservice. Or, at the very least, produce a warning when the server frontend is guessing the parameters.","05/Oct/09 14:39;dkulp;
The simple frontends now spit out a warning to suggest using the jaxws frontend if it sees the jaxws annotations in various places.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Exception in INOUT parameter,CXF-1476,12391415,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,gvaleri,gvaleri,14/Mar/08 08:42,30/Apr/08 14:57,14/Mar/19 02:29,19/Mar/08 04:58,2.0.4,,,,,,,,,,,,,,2.1,,,,,,,,,,0,,,,"I need to expose a service with CXF with an INOUT parameter. The INOUT parameter is two dimensial array of objects (of class NameAndValue_T). 

The interface exposed is: 

package foo; 

import javax.jws.WebParam; 
import javax.jws.WebParam.Mode; 


@javax.jws.WebService(name=""ENDPOINT_NAME"", 
                      targetNamespace=""NAME_SPACE"")@javax.jws.soap.SOAPBinding(use=javax.jws.soap.SOAPBinding.Use.LITERAL, 
                      parameterStyle=javax.jws.soap.SOAPBinding.ParameterStyle.WRAPPED) 

public abstract interface TestInterface { 

    @javax.jws.WebMethod(operationName=""bar"") 
    abstract public boolean bar(@WebParam(name=""how_many"") int how_many, @WebParam(name=""nameList"", mode=Mode.INOUT)  javax.xml.ws.Holder<foo.NameAndValue_T[][]> nameList); 

} 

During the Service creation the following Exception is raised: 

INFO: Creating Service {NAME_SPACE}TestInterfaceService from class foo.TestInterface 
Exception in thread ""main"" java.lang.ClassCastException: sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl cannot be cast to java.lang.Class 
        at org.apache.cxf.jaxws.support.JaxWsServiceConfiguration.getHolderClass(JaxWsServiceConfiguration.java:707) 
        at org.apache.cxf.jaxws.support.JaxWsServiceConfiguration.getHolderType(JaxWsServiceConfiguration.java:697) 
        at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.getHolderType(ReflectionServiceFactoryBean.java:1423) 
        at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.initializeParameter(ReflectionServiceFactoryBean.java:1325) 
        at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.createMessageParts(ReflectionServiceFactoryBean.java:1156) 
        at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.createOperation(ReflectionServiceFactoryBean.java:699) 
        at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.createInterface(ReflectionServiceFactoryBean.java:683) 
        at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.buildServiceFromClass(ReflectionServiceFactoryBean.java:305) 
        at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.initializeServiceModel(ReflectionServiceFactoryBean.java:362) 
        at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.create(ReflectionServiceFactoryBean.java:156) 
        at org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean.create(JaxWsServiceFactoryBean.java:89) 
        at org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory.createEndpoint(AbstractWSDLBasedEndpointFactory.java:74) 
        at org.apache.cxf.frontend.ServerFactoryBean.create(ServerFactoryBean.java:108) 
        at org.apache.cxf.jaxws.JaxWsServerFactoryBean.create(JaxWsServerFactoryBean.java:147) 
        at foo.Server.<init>(Server.java:41) 
        at foo.Server.main(Server.java:46) 
        

In attachement there is a project to reproduce the problem. ",,,,,,,,,,,,,,,,,14/Mar/08 08:44;gvaleri;testcxf.zip;https://issues.apache.org/jira/secure/attachment/12377885/testcxf.zip,,,,,,1.0,,,,,,,,,,,,,,,,,,,,2008-03-17 18:06:00.824,,,no_permission,,,,,,,,,,,,,112274,,,Mon Mar 17 18:06:00 UTC 2008,,,,,,0|i1ac8n:,268449,,,,,,,,14/Mar/08 08:44;gvaleri;project to reproduce the problem,"17/Mar/08 18:06;dkulp;
I've reproduced this and am testing a fix now.

That said, once I fix the multi-dim array issue, it still runs into CXF-1388.   The workaround for that is to make the NameAndValue_T class not final.  Then it starts up fine. (once the fix is in)

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
