Summary,Issue key,Issue id,Issue Type,Status,Project key,Project name,Project type,Project lead,Project description,Project url,Priority,Resolution,Assignee,Reporter,Creator,Created,Updated,Last Viewed,Resolved,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Fix Version/s,Fix Version/s,Fix Version/s,Fix Version/s,Component/s,Component/s,Component/s,Component/s,Component/s,Due Date,Votes,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Description,Environment,Original Estimate,Remaining Estimate,Time Spent,Work Ratio,Σ Original Estimate,Σ Remaining Estimate,Σ Time Spent,Security Level,Outward issue link (Blocker),Outward issue link (Cloners),Outward issue link (Duplicate),Outward issue link (Incorporates),Outward issue link (Reference),Outward issue link (Reference),Outward issue link (Regression),Outward issue link (Regression),Outward issue link (Required),Outward issue link (Supercedes),Outward issue link (dependent),Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Custom field (Attachment count),Custom field (Blog - New Blog Administrators),Custom field (Blog - New Blog PMC),Custom field (Blog - Write access),Custom field (Blog Administrator?),Custom field (Blogs - Admin for blog),Custom field (Blogs - Email Address),Custom field (Blogs - Existing Blog Access Level),Custom field (Blogs - Existing Blog Name),Custom field (Blogs - New Blog Write Access),Custom field (Blogs - Username),Custom field (Bug Category),Custom field (Bugzilla - Email Notification Address),Custom field (Bugzilla - List of usernames),Custom field (Bugzilla - PMC Name),Custom field (Bugzilla - Project Name),Custom field (Bugzilla Id),Custom field (Change Category),Custom field (Complexity),Custom field (Date of First Response),Custom field (Discovered By),Custom field (Docs Text),Custom field (Enable Automatic Patch Review),Custom field (Epic Link),Custom field (Estimated Complexity),Custom field (Existing GitBox Approval),Custom field (External issue ID),Custom field (External issue URL),Custom field (Git Notification Mailing List),Custom field (Git Repository Import Path),Custom field (Git Repository Name),Custom field (Git Repository Type),Custom field (GitHub Options),Custom field (Github Integration),Custom field (Github Integrations - Other),Custom field (Global Rank),Custom field (INFRA - Subversion Repository Path),Custom field (Initial Confluence Contributors),Custom field (Last public comment date),Custom field (Machine Readable Info),Custom field (New-TLP-TLPName),Custom field (Patch Info),Custom field (Priority),Custom field (Project),Custom field (Protected Branch),Custom field (Rank),Custom field (Rank (Obsolete)),Custom field (Regression),Custom field (Severity),Custom field (Severity),Custom field (Space Description),Custom field (Space Key),Custom field (Space Name),Custom field (Test and Documentation Plan),Custom field (Testcase included),Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment
spring-dm and blueprint - OSGi language resolver does not work,CAMEL-6060,12631628,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Blocker,Fixed,davsclaus,davsclaus,davsclaus,10/Feb/13 06:18,08/May/14 12:19,13/Mar/19 22:18,11/Feb/13 12:28,2.11.0,,,,,,,,,2.11.0,,,,camel-spring,osgi,,,,,0,,,,,,,,,"Running Camel 2.11 in Karaf 2.3.0, can not resolve languages when using spring-dm apps.

[  78] [Active     ] [Created     ] [       ] [   50] camel-blueprint (2.11.0.SNAPSHOT)
[  79] [Active     ] [            ] [       ] [   50] mvel2 (2.1.3.Final)
[  80] [Active     ] [            ] [       ] [   50] camel-mvel (2.11.0.SNAPSHOT)
[  81] [Active     ] [            ] [       ] [   80] A Camel Spring-DM Route (1.0.0)
Exception in thread ""SpringOsgiExtenderThread-2"" org.apache.camel.RuntimeCamelException: org.apache.camel.FailedToCreateRouteException: Failed to create route route1 at: >>> Transform[mvel{request.body.substring(0, 4)}] <<< in route: Route[[From[timer:foo?period=5000]] -> [SetBody[bean{helloBe... because of No language could be found for: mvel
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1328)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:120)
	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:282)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:97)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:303)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:911)
	at org.springframework.osgi.context.support.AbstractOsgiBundleApplicationContext.finishRefresh(AbstractOsgiBundleApplicationContext.java:235)
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext$4.run(AbstractDelegatedExecutionApplicationContext.java:358)
	at org.springframework.osgi.util.internal.PrivilegedUtils.executeWithCustomTCCL(PrivilegedUtils.java:85)
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.completeRefresh(AbstractDelegatedExecutionApplicationContext.java:320)
	at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor$CompleteRefreshTask.run(DependencyWaiterApplicationContextExecutor.java:132)
	at java.lang.Thread.run(Thread.java:680)
Caused by: org.apache.camel.FailedToCreateRouteException: Failed to create route route1 at: >>> Transform[mvel{request.body.substring(0, 4)}] <<< in route: Route[[From[timer:foo?period=5000]] -> [SetBody[bean{helloBe... because of No language could be found for: mvel
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:879)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:172)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:742)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:1821)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1601)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1470)
	at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:179)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1438)
	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:228)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:118)
	... 10 more
Caused by: org.apache.camel.NoSuchLanguageException: No language could be found for: mvel
	at org.apache.camel.core.osgi.OsgiLanguageResolver.resolveLanguage(OsgiLanguageResolver.java:63)
	at org.apache.camel.impl.DefaultCamelContext.resolveLanguage(DefaultCamelContext.java:1009)
	at org.apache.camel.model.language.ExpressionDefinition.createExpression(ExpressionDefinition.java:177)
	at org.apache.camel.model.language.ExpressionDefinition.createExpression(ExpressionDefinition.java:168)
	at org.apache.camel.model.TransformDefinition.createProcessor(TransformDefinition.java:59)
	at org.apache.camel.model.ProcessorDefinition.makeProcessor(ProcessorDefinition.java:459)
	at org.apache.camel.model.ProcessorDefinition.addRoutes(ProcessorDefinition.java:177)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:876)
	... 20 more",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-05-08 12:19:21.543,,,no_permission,,Unknown,,,,,,,,,,,312124,,,Thu May 08 12:19:21 UTC 2014,,,,,,,0|i1hv4f:,312470,,,,,,,,,"10/Feb/13 06:29;davsclaus;Okay camel-mvel does not export the language as a service in OSGi.
Its just empty for camel-mvel


It works for groovy etc
camel-groovy (88) provides:
---------------------------
language = groovy
objectClass = org.apache.camel.spi.LanguageResolver
service.id = 232
","10/Feb/13 06:40;davsclaus;It works for Camel 2.10.3 in Karaf 2.2.10:

[  75] [Active     ] [            ] [       ] [   50] Apache ServiceMix :: Bundles :: mvel2 (2.0.18.3)
[  76] [Active     ] [            ] [       ] [   50] camel-mvel (2.10.3)
karaf@root> ls 76
You are about to access system bundle 76.  Do you wish to continue (yes/no): 
camel-mvel (76) provides:
-------------------------
language = mvel
objectClass = org.apache.camel.spi.LanguageResolver
service.id = 212",10/Feb/13 06:42;davsclaus;And also for Camel 2.10.3 in Karaf 2.3.0,10/Feb/13 07:13;davsclaus;This is also a problem for blueprint. The language cannot be resolved due its not registered in the osgi service registry.,"11/Feb/13 09:56;davsclaus;Okay I think I found the issue.

camel-mvel JAR has flawed MANIFEST.MF generated by the tooling.

This is the packages it imports:
{code}
Import-Package: org.apache.camel;version=""[2.11,2.12)"",org.apache.camel.
 language;version=""[2.11,2.12)"",org.apache.camel.support;version=""[2.11,
 2.12)"",org.mvel2;version=""[2.1,3)""
{code}

So we import these packages from Camel
- org.apache.camel
- org.apache.camel.language
- org.apache.camel.support

But we need to import the spi package, which is in fact used by the MvelLanguage.java file.
See the import in the top of its source code

{code}
package org.apache.camel.language.mvel;

import org.apache.camel.Expression;
import org.apache.camel.Predicate;
import org.apache.camel.spi.Language;
import org.apache.camel.support.LanguageSupport;

/**
 * An <a href=""http://mvel.codehaus.org/"">MVEL</a> {@link Language} plugin
 * 
 * @version 
 */
public class MvelLanguage extends LanguageSupport {

    public Predicate createPredicate(String expression) {
        expression = loadResource(expression);
        return new MvelExpression(this, expression, Boolean.class);
    }

    public Expression createExpression(String expression) {
        expression = loadResource(expression);
        return new MvelExpression(this, expression, Object.class);
    }

}
{code}
","11/Feb/13 10:02;davsclaus;And this is the generated MANIFEST.MF file from Camel 2.10.3 release.
Notice it has import of ""org.apache.camel.spi""

{code}
Import-Package: org.apache.camel;version=""[2.10,2.11)"",org.apache.camel.
 language;version=""[2.10,2.11)"",org.apache.camel.spi;version=""[2.10,2.11
 )"",org.apache.camel.support;version=""[2.10,2.11)"",org.mvel2;version=""[2
 .0,3)""
Karaf-Info: Camel;camel-mvel=2.10.3
{code}","11/Feb/13 12:28;davsclaus;I had to force adding the spi package, and not the MANIFEST.MF has that package included out of the box.","08/May/14 12:19;cp1;Probably the same error for jsonpath language implementation:

{code}
2014-05-08 16:08:21,179 | ERROR | ExtenderThread-8 | ContextLoaderListener            | 141 - org.springframework.osgi.extender - 1.2.1 | Application context refresh failed (OsgiBundleXmlApplicationContext(bundle=cbonds-adapter, config=osgibundle:/META-INF/spring/*.xml))
org.apache.camel.RuntimeCamelException: org.apache.camel.FailedToCreateRouteException: Failed to create route update-route at: >>> Choice[[When[jsonpath{$.items} -> [Log[Json ${body}], process[ref:updateProcessor], To[mock:parsed]]], When[jsonpath{$.error} -> [Log[Json Error ${body}], Stop]]] Otherwise[[Log[Json Other ${body}], Stop]]] <<< in route: Route(update-route)[[From[direct:update-table]] -> [OnExcept... because of No language could be found for: jsonpath
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1363)[136:org.apache.camel.camel-core:2.13.0]
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:122)[144:org.apache.camel.camel-spring:2.13.0]
	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:316)[144:org.apache.camel.camel-spring:2.13.0]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:96)[127:org.springframework.context:3.2.4.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:334)[127:org.springframework.context:3.2.4.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:948)[127:org.springframework.context:3.2.4.RELEASE]
	at org.springframework.osgi.context.support.AbstractOsgiBundleApplicationContext.finishRefresh(AbstractOsgiBundleApplicationContext.java:235)[140:org.springframework.osgi.core:1.2.1]
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext$4.run(AbstractDelegatedExecutionApplicationContext.java:358)[140:org.springframework.osgi.core:1.2.1]
	at org.springframework.osgi.util.internal.PrivilegedUtils.executeWithCustomTCCL(PrivilegedUtils.java:85)[140:org.springframework.osgi.core:1.2.1]
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.completeRefresh(AbstractDelegatedExecutionApplicationContext.java:320)[140:org.springframework.osgi.core:1.2.1]
	at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor$CompleteRefreshTask.run(DependencyWaiterApplicationContextExecutor.java:132)[141:org.springframework.osgi.extender:1.2.1]
	at java.lang.Thread.run(Thread.java:745)[:1.7.0_55]
Caused by: org.apache.camel.FailedToCreateRouteException: Failed to create route update-route at: >>> Choice[[When[jsonpath{$.items} -> [Log[Json ${body}], process[ref:updateProcessor], To[mock:parsed]]], When[jsonpath{$.error} -> [Log[Json Error ${body}], Stop]]] Otherwise[[Log[Json Other ${body}], Stop]]] <<< in route: Route(update-route)[[From[direct:update-table]] -> [OnExcept... because of No language could be found for: jsonpath
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:910)[136:org.apache.camel.camel-core:2.13.0]
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:175)[136:org.apache.camel.camel-core:2.13.0]
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:778)[136:org.apache.camel.camel-core:2.13.0]
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:2041)[136:org.apache.camel.camel-core:2.13.0]
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1791)[136:org.apache.camel.camel-core:2.13.0]
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1665)[136:org.apache.camel.camel-core:2.13.0]
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)[136:org.apache.camel.camel-core:2.13.0]
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1633)[136:org.apache.camel.camel-core:2.13.0]
	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:254)[144:org.apache.camel.camel-spring:2.13.0]
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:120)[144:org.apache.camel.camel-spring:2.13.0]
	... 10 more
Caused by: org.apache.camel.NoSuchLanguageException: No language could be found for: jsonpath
	at org.apache.camel.core.osgi.OsgiLanguageResolver.resolveLanguage(OsgiLanguageResolver.java:63)[144:org.apache.camel.camel-spring:2.13.0]
	at org.apache.camel.impl.DefaultCamelContext.resolveLanguage(DefaultCamelContext.java:1135)[136:org.apache.camel.camel-core:2.13.0]
	at org.apache.camel.model.language.ExpressionDefinition.createPredicate(ExpressionDefinition.java:154)[136:org.apache.camel.camel-core:2.13.0]
	at org.apache.camel.model.language.ExpressionDefinition.createPredicate(ExpressionDefinition.java:143)[136:org.apache.camel.camel-core:2.13.0]
	at org.apache.camel.model.ExpressionNode.createPredicate(ExpressionNode.java:120)[136:org.apache.camel.camel-core:2.13.0]
	at org.apache.camel.model.ExpressionNode.createFilterProcessor(ExpressionNode.java:110)[136:org.apache.camel.camel-core:2.13.0]
	at org.apache.camel.model.WhenDefinition.createProcessor(WhenDefinition.java:77)[136:org.apache.camel.camel-core:2.13.0]
	at org.apache.camel.model.WhenDefinition.createProcessor(WhenDefinition.java:31)[136:org.apache.camel.camel-core:2.13.0]
	at org.apache.camel.model.ProcessorDefinition.createProcessor(ProcessorDefinition.java:459)[136:org.apache.camel.camel-core:2.13.0]
	at org.apache.camel.model.ChoiceDefinition.createProcessor(ChoiceDefinition.java:135)[136:org.apache.camel.camel-core:2.13.0]
	at org.apache.camel.model.ProcessorDefinition.makeProcessor(ProcessorDefinition.java:499)[136:org.apache.camel.camel-core:2.13.0]
	at org.apache.camel.model.ProcessorDefinition.addRoutes(ProcessorDefinition.java:212)[136:org.apache.camel.camel-core:2.13.0]
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:907)[136:org.apache.camel.camel-core:2.13.0]
	... 19 more
{code}",,,,,,,,,,,,,,,,
Wrapped RouteContextProcessor could potential rewrap and cause an ever growing processor path,CAMEL-4787,12535463,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Blocker,Fixed,davsclaus,davsclaus,davsclaus,16/Dec/11 14:33,16/Dec/11 14:35,13/Mar/19 22:18,16/Dec/11 14:35,2.9.0,,,,,,,,,2.9.0,,,,camel-core,,,,,,0,,,,,,,,,"There is a problem in the UnitOfWork processor that wraps using a RouteContextProcessor, where the latter is used to track the current route the exchange is being routed. Unfortunately the wrapping may re-wrap itself, causing every growing processor paths.

{code}
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)[file:/Users/davsclaus/workspace/camel/camel-core/target/classes/:]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)[file:/Users/davsclaus/workspace/camel/camel-core/target/classes/:]
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)[file:/Users/davsclaus/workspace/camel/camel-core/target/classes/:]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)[file:/Users/davsclaus/workspace/camel/camel-core/target/classes/:]
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)[file:/Users/davsclaus/workspace/camel/camel-core/target/classes/:]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)[file:/Users/davsclaus/workspace/camel/camel-core/target/classes/:]
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)[file:/Users/davsclaus/workspace/camel/camel-core/target/classes/:]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)[file:/Users/davsclaus/workspace/camel/camel-core/target/classes/:]
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)[file:/Users/davsclaus/workspace/camel/camel-core/target/classes/:]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)[file:/Users/davsclaus/workspace/camel/camel-core/target/classes/:]
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)[file:/Users/davsclaus/workspace/camel/camel-core/target/classes/:]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)[file:/Users/davsclaus/workspace/camel/camel-core/target/classes/:]
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)[file:/Users/davsclaus/workspace/camel/camel-core/target/classes/:]
	...
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,221147,,,2011-12-16 14:33:59.0,,,,,,,0|i02333:,10101,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
shouldn't call BaseTypeConverterRegistry.loadTypeConverters() in OSGi container,CAMEL-4231,12514162,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Blocker,Fixed,davsclaus,ffang,ffang,15/Jul/11 06:00,15/Jul/11 08:40,13/Mar/19 22:18,15/Jul/11 08:40,2.8.0,,,,,,,,,2.8.0,,,,camel-core,,,,,,0,,,,,,,,,"the Activator in camel-core take care of loading the converters from bundles, we should avoid  calling BaseTypeConverterRegistry.loadTypeConverters() in OSGi container, otherwise due to no classloader was specified, see this code in OsgiTypeConverter
            @Override
            public Set<ClassLoader> getClassLoaders() {
                // we don't need any classloaders as we use osgi service tracker instead
                return Collections.emptySet();
            }

we'll get exception like
Caused by: org.apache.camel.TypeConverterLoaderException: Failed to load type converters because of: Cannot find any type converter classes from the following packages: [org.apache.servicemix.camel.converter]
	at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.load(AnnotationTypeConverterLoader.java:90)
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.loadTypeConverters(BaseTypeConverterRegistry.java:406)
	at org.apache.camel.impl.converter.DefaultTypeConverter.doStart(DefaultTypeConverter.java:42)
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:67)
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:54)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:56)
	at org.apache.camel.core.osgi.OsgiTypeConverter.createRegistry(OsgiTypeConverter.java:163)
",,,,,,,,,,,,,,,,,,,,,15/Jul/11 07:01;ffang;CAMEL-4231-new.patch;https://issues.apache.org/jira/secure/attachment/12486555/CAMEL-4231-new.patch,15/Jul/11 06:03;ffang;CAMEL-4231.patch;https://issues.apache.org/jira/secure/attachment/12486552/CAMEL-4231.patch,,,,,2.0,,,,,,,,,,,,,,,,,,,2011-07-15 08:40:13.855,,,no_permission,,,,,,,,,,,,,13857,,,Fri Jul 15 08:40:13 UTC 2011,,,,,,,0|i01znj:,9545,,,,,,,,,"15/Jul/11 07:01;ffang;attach CAMEL-4231-new.patch which change the load order, loadCoreTypeConverters firstly, keep it same as the scenario out-of OSGi container.",15/Jul/11 08:40;davsclaus;Applied patch. Thanks Freeman,,,,,,,,,,,,,,,,,,,,,,
MailComponent 'peek' doesn't work due to programming error,CAMEL-7254,12697747,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,njiang,mattnathan,mattnathan,27/Feb/14 17:57,28/Feb/14 13:09,13/Mar/19 22:18,28/Feb/14 02:44,2.12.2,,,,,,,,,2.11.5,2.12.4,2.13.0,,camel-mail,,,,,,0,,,,,,,,,"The MailComponent peek setting doesn't work due to the following line:

{code:java}
    private void peekMessage(Message mail) {
        // this only applies to IMAP messages which has a setPeek method
        if (mail.getClass().getName().startsWith(""IMAP"")) {
            try {
                LOG.trace(""Calling setPeek(true) on mail message {}"", mail);
                IntrospectionSupport.setProperty(mail, ""peek"", true);
            } catch (Throwable e) {
                // ignore
                LOG.trace(""Error setting peak property to true on: "" + mail + "". This exception is ignored."", e);
            }
        }
    }
{code}

The line that checks the class name for IMAP should be using getSimpleName. Otherwise it's checking the package name instead.

This effectively means that rollback of processing in camel mail is not supported.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-02-27 19:40:18.022,,,no_permission,,Unknown,,,,,,,,,,,376221,,,Fri Feb 28 13:09:41 UTC 2014,,,,,,,0|i1stwf:,376517,,,,,,,,,"27/Feb/14 19:40;githubbot;GitHub user davidkarlsen opened a pull request:

    https://github.com/apache/camel/pull/103

    CAMEL-7254: Fix IMAP peeking, use simpleName() for classcheck

    Signed-off-by: david <david@davidkarlsen.com>

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/davidkarlsen/camel CAMEL-7254

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/103.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #103
    
----
commit 8af0b6069c414e8c46fb9843d99374d63c7c9581
Author: david <david@davidkarlsen.com>
Date:   2014-02-27T19:38:45Z

    CAMEL-7254: Fix IMAP peeking, use simpleName() for classcheck
    
    Signed-off-by: david <david@davidkarlsen.com>

----
","28/Feb/14 02:44;njiang;Applied the patch with thanks to Matt into master, camel-2.12.x and camel-2.11.x branches.","28/Feb/14 13:09;githubbot;Github user davidkarlsen closed the pull request at:

    https://github.com/apache/camel/pull/103
",,,,,,,,,,,,,,,,,,,,,
Camel fails to send messages to IPv6 address with a port number,CAMEL-6914,12676686,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,njiang,ladislav.lengyel,ladislav.lengyel,30/Oct/13 17:45,03/Jan/14 04:40,13/Mar/19 22:18,03/Jan/14 04:40,2.11.0,,,,,,,,,2.12.3,2.13.0,,,camel-core,,,,,,0,,,,,,,,,"Dear Camel team,
we are just verifying our migrated application to Apache Camel. Today we found an issue that is not described on the web, in the faq  nor among the existing issues.
We are creating endpoints via String literals and when we started the IPv6 tests we failed on this issue.
The Camel transforms the orginal address 
{noformat}http://[2a00:8a00:6000:40::1413]:30300{noformat}
to this format
{noformat}http://%5B2a00:8a00:6000:40::1413%5D:30300{noformat}
which causes this exception
{noformat}instance1 2013-10-30 13:25:23,914 org.apache.camel.processor.DefaultErrorHandler DEBUG (MarkerIgnoringBase.java:debug:72) [Camel (camel-1) thread #74 - JmsConsumer[XXX-RR-TEST]]
| Failed delivery for (MessageId: ID:mch30-pgd02-b-45068-1383134137465-8:5:1:1:3 on ExchangeId: ID-mch30-pgd02-b-35624-1383134141407-0-176). On delivery attempt: 0 caught: org.apache.commons.httpclient.URIException: IPv6reference{noformat}

The suggested solution is to remove the square brackets {noformat}[ ]{noformat} from the {noformat}unsafeCharacters{noformat} in the {noformat}org.apache.camel.util.UnsafeUriCharactersEncoder{noformat}
since the square brackets are valid IPv6 characters.
Thanks!
Best regards,
Laci",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-01-03 04:40:35.212,,,no_permission,,Unknown,,,,,,,,,,,356118,,,Fri Jan 03 04:40:35 UTC 2014,,,,,,,0|i1pe5r:,356406,,,,,,,,,03/Jan/14 04:40;njiang;Applied the patch into master and camel-2.12.x branches.,,,,,,,,,,,,,,,,,,,,,,,
Karaf and servlet 2.5/3.0 due recent jetty upgrade causes karaf problems!,CAMEL-6774,12669802,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,bvahdat,davsclaus,davsclaus,21/Sep/13 10:03,23/Oct/13 20:48,13/Mar/19 22:18,23/Oct/13 20:48,2.13.0,,,,,,,,,2.13.0,,,,karaf,,,,,,0,,,,,,,,,"Running tests in tests/camel-itest-karaf fails with features that uses servlet 2.5 api with Karaf 2.3.3.

{code}
test:org.apache.camel.itest.karaf.CamelJettyTest.test:KarafTestContainer{mvn:org.apache.karaf/apache-karaf/2.3.3/tar.gz}(org.apache.camel.itest.karaf.CamelJettyTest)  Time elapsed: 10.706 sec  <<< FAILURE!
java.lang.AssertionError: Cannot get component with name: jetty
	at org.junit.Assert.fail(Assert.java:93)
	at org.junit.Assert.assertTrue(Assert.java:43)
	at org.junit.Assert.assertNotNull(Assert.java:526)
	at org.apache.camel.itest.karaf.AbstractFeatureTest.testComponent(AbstractFeatureTest.java:64)
	at org.apache.camel.itest.karaf.CamelJettyTest.test(CamelJettyTest.java:32)
{code}

I suspect its the recent jetty 8.x and servlet 3 upgrade that is causing problems.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-10-23 18:47:49.49,,,no_permission,,Unknown,,,,,,,,,,,349730,,,Wed Oct 23 20:47:57 UTC 2013,,,,,,,0|i1oax3:,350028,,,,,,,,,"12/Oct/13 09:36;davsclaus;These tests fails

Failed tests:
  CamelCometdTest.test:32->AbstractFeatureTest.testComponent:64 Cannot get component with name: cometd
  CamelHttp4Test.test:32->AbstractFeatureTest.testComponent:64 Cannot get component with name: http4
  CamelHttpTest.test:32->AbstractFeatureTest.testComponent:64 Cannot get component with name: http
  CamelJettyTest.test:32->AbstractFeatureTest.testComponent:64 Cannot get component with name: jetty
  CamelSalesforceTest.test:32->AbstractFeatureTest.testComponent:64 Cannot get component with name: salesforce
  CamelServletTest.test:32->AbstractFeatureTest.testComponent:64 Cannot get component with name: servlet
  CamelStompTest.test:32->AbstractFeatureTest.testComponent:64 Cannot get component with name: stomp
  CamelWebsocketTest.test:32->AbstractFeatureTest.testComponent:64 Cannot get component with name: websocket","23/Oct/13 15:29;davsclaus;With [~bvahdat] recent fixes we are down to 2 erros

  CamelCometdTest.test:32->AbstractFeatureTest.testComponent:64 Cannot get component with name: cometd
  CamelWebsocketTest.test:32->AbstractFeatureTest.testComponent:64 Cannot get component with name: websocket","23/Oct/13 18:47;bvahdat;Yeah I've got those two remaining tests fixed as well on my workspace. Running a full build right now to make sure everything is fine.

Also [this CXF test being excluded inside the POM of {{camel-itest-karaf}}|https://github.com/apache/camel/blob/master/tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/CamelCxfTest.java] works again, so why I will re-enable it again.
","23/Oct/13 20:47;bvahdat;O.K. I managed to fix those Karaf tests.

Just realized that there're other failing tests by the {{camel-itest-osgi}} module with or without of the fix for this ticket. Are we already aware of this? Is there any ticket around for this?

These are the ones failing for me but I didn't look into them:
{code}
BeanValidatorTest.validateShouldSuccessWithExpliciteDefaultGroup:47 » Validation
BeanValidatorTest.testBeanValidatorRoute:36 » Validation Unable to create a Co...
CamelBlueprint4Test.testRouteWithXSLT:42->AbstractIntegrationTest.getOsgiService:87 » Runtime
XsltBlueprintRouteTest>CamelTestSupport.setUp:218->doPostSetup:68->AbstractIntegrationTest.getOsgiService:87 » Runtime
DisruptorTest>CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:311->CamelTestSupport.startCamelContext:477 » ResolveEndpointFailed
DisruptorTest>CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:311->CamelTestSupport.startCamelContext:477 » ResolveEndpointFailed
DisruptorVmTest>CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:311->CamelTestSupport.startCamelContext:477 » ResolveEndpointFailed
GroovyTest.testGroovyLanguage:38 » ClassNotFound groovy.lang.Script
HdfsBlueprintRouteTest.testWriteAndReadString:50->AbstractIntegrationTest.getOsgiService:87 » Runtime
JaxbDataFormatTest>CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:311->CamelTestSupport.startCamelContext:477 » JAXB
GroovyScriptOsgiTest.testLanguage:47 » ClassNotFound groovy.lang.Script
{code}
",,,,,,,,,,,,,,,,,,,,
netty consumer using UDP should release the datagram channel factory,CAMEL-6856,12673405,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,davsclaus,davsclaus,davsclaus,11/Oct/13 10:00,11/Oct/13 10:05,13/Mar/19 22:18,11/Oct/13 10:05,2.10.7,2.11.2,,,,,,,,2.11.3,,,,camel-netty,,,,,,0,,,,,,,,,We only release the TCP resources on netty. We should do the same when UDP as in use.,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,353028,,,Fri Oct 11 10:05:43 UTC 2013,,,,,,,0|i1ov5b:,353315,,,,,,,,,11/Oct/13 10:05;davsclaus;Backported to 2.10 and 2.9 branches as well.,"11/Oct/13 10:05;davsclaus;If using UDP and you hot deploy a new application when using netty UDP consumer, you may have depending on netty version in use, some threads still alive that can take up CPU time.",,,,,,,,,,,,,,,,,,,,,,
"Sftp upload to subdirectory does not work if home directory is root (""/"" or ""\"")",CAMEL-6309,12644321,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,ay,rodehav,rodehav,24/Apr/13 09:27,29/Jul/13 13:10,13/Mar/19 22:18,23/Jul/13 11:52,2.10.2,2.10.3,2.10.4,2.11.0,,,,,,2.10.7,2.11.2,2.12.0,,camel-ftp,,,,,,3,,,,,,,,,"It is not possible to upload a file to a sub directory via sftp if the home directory (the directory where you end up directly after login) is root (""/"" or ""\"").

The reason is that after having checked that the sub directory exists (and perhaps created it), Camel tries to go back to the original directory which is ""/"". The SftpOperations.changeCurrentDirectory() method calls the FileUtil.compactPath() method that incorrecly changes ""/"" to ""//"". The bug thus resides in the FileUtil class which is part of camel-core.

I think this bug may cause a number of other errors than the one I have enountered. E g it cannot be possible to change direcotory to ""/"" at all. And, other protocols (like ftp/ftps) might also be affected.

This has been discussed on Camel user list:

http://camel.465427.n5.nabble.com/Problems-with-sftp-in-Camel-2-11-0-td5731359.html
",,,,,,,,,,,,,,,,,,,,,25/Apr/13 07:22;rodehav;FileUtil.java.patch;https://issues.apache.org/jira/secure/attachment/12580496/FileUtil.java.patch,25/Apr/13 07:22;rodehav;FileUtilTest.java.patch;https://issues.apache.org/jira/secure/attachment/12580497/FileUtilTest.java.patch,,,,,2.0,,,,,,,,,,,,,,,,,,,2013-07-11 20:22:04.94,,,no_permission,,Unknown,,,,,,,,,,,324688,,,Mon Jul 29 13:10:13 UTC 2013,,,,,,,0|i1k0mv:,325033,Regression,,,,,,,,"24/Apr/13 09:34;rodehav;When looking closer at the FileUtil.compactPath() method I notice that it uses the normalizePath() method which in turn does some weird checking of operating system to determine what separator to use. This functionality checks the local operating system (where Camel is running) but does not take into account what separator is being used on the remote server (the sftp server in my case).

The FileUtil class is a generic class that does not know anything about any remote file system's separator - and I don't think it should. Therefore, the FileUtil class can't really be used in SftpOperations since it makes assumptions about separators that it really can't know anything about.

I haven't encountered any erors regarding this yet but it's easy to see that the logic is failing.",24/Apr/13 11:08;rodehav;I noticed that FtpOperations also call the FileUtil.compactPath() method. This probably means that ftp/ftps will have the same error as sftp.,25/Apr/13 07:22;rodehav;Patches for verifying the error (FileUtilTest) and fixing the error (FileUtil).,"25/Apr/13 07:34;rodehav;Uploaded patches for extending the FileUtilTest as well as fixing the problem in FileUtil. In FileUtilTest i added four more asserts in testCompactPath(). All of those failed for me before applying the fix. Note that I added the four asserts both for the ""Windows"" case and the ""non-Windows"" case but I have only tested on Windows.","25/Apr/13 07:42;rodehav;I looked further into the ""weird checking of operating systems"" that I wrote about in a previous comment. Although I still think it is kind of weird that the normalizePath() method is checking the local operating system to determine what separator to use, I am now of the opinion that it really doesn't affect the final outcome. This is because the compactPath() method is called with a separator set to ""/"" which means that the produced path will use ""/"" as separator even if the normalized path will use ""\"" (on Windows anyway). So, this probably works.","11/Jul/13 20:22;louisparks;I do not get this error when connecting to a windows based Filezilla ftp server.  But I do get it when connecting to a RHEL box.
Has anyone gotten around this?  I would imagine this would affect a lot of people. I know all my FTP routes no longer work.","22/Jul/13 14:16;xandroalmeida;I encountered this problem using a ftp route .
The work around for this problem is to add one ""/ "" in the path of the FTP directory. ex

/export/home/userone/path => //export/home/userone/path","23/Jul/13 11:52;ay;Hi Bengt,
thanks for the patch and test cases.
I applied a slightly simpler patch.
regards, aki",29/Jul/13 13:10;rodehav;Thanks a lot for fixing Aki!,,,,,,,,,,,,,,,
Memory leak when using CometD producer,CAMEL-6197,12638264,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,davsclaus,calbazasebastian,calbazasebastian,21/Mar/13 15:49,02/Jun/13 19:33,13/Mar/19 22:18,02/Jun/13 15:52,2.10.4,,,,,,,,,2.10.5,2.11.1,2.12.0,,camel-cometd,,,,,,0,,,,,,,,,"We have an application that creates a lot of channels, resulting in a lot of producers with a Cometd local session attached. These local sessions just add up till we get a out of memory. 


",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-03-21 22:23:10.337,,,no_permission,,Unknown,,,,,,,,,,,318740,,,Sun Jun 02 19:33:43 UTC 2013,,,,,,,0|i1izxb:,319081,,,,,,,,,"21/Mar/13 22:23;muellerc;Do you consider to work on a patch? And also on a unit test which show the issue?

http://camel.apache.org/contributing.html","22/Mar/13 21:29;calbazasebastian;Sure, will do",22/Mar/13 21:57;muellerc;Cool. Looking forward to your patch...,26/May/13 12:43;davsclaus;Any update on a patch?,"26/May/13 22:18;calbazasebastian;Check https://github.com/calbazasebastian/camel/commits/sebi/6197_cometd_oom 
The simplest solution is to disconnect the session that is created by the producer... I added an isLocalSession check to close just the local ones as these are lightweight objects and are not sweeped.",02/Jun/13 15:52;davsclaus;Thanks for reporting and providing a patch with a solution.,"02/Jun/13 19:33;bvahdat;The ticket is marked as fixed but I don't see any commit for this on any branch, e.g. on master this's the current history I see:

{code}
commit ddf7ba9b9140eaaab3c784732bfd6eeb1f0114d2
Author: Claus Ibsen <davsclaus@apache.org>
Date:   Sun Jun 2 17:22:49 2013 +0200

    CAMEL-6157: Added support for named parameters to camel-jdbc, like we have in camel-sql. Thanks to Devendra Khanolkar for contribution.

commit bd34771fa19702b9c8f7e86ac56b4a92d2c35169
Author: Claus Ibsen <davsclaus@apache.org>
Date:   Sun Jun 2 11:42:08 2013 +0200

    CAMEL-6413: Fixed race condition in file consumer, as read lock release should be executed last.

commit 211f90657478df858e02f0bbf8d912d2199b0484
Author: Babak Vahdat <bvahdat@apache.org>
Date:   Sun Jun 2 11:22:13 2013 +0200

    CAMEL-6412: Trying to fix the broken build.

commit 6ca055d399b7528175f0192f5d948350e1ee7258
Author: Babak Vahdat <bvahdat@apache.org>
Date:   Sun Jun 2 00:11:18 2013 +0200

    CAMEL-6412: Fixed the Maven build warning about camel-validator-test-resources.jar

commit bdf64e05c8f5b045bb0cbee07a181a06bd516355
Author: Babak Vahdat <bvahdat@apache.org>
Date:   Sat Jun 1 19:38:40 2013 +0200

    Polished.

commit 1da8850907623866acaa648f6378596e79f0db69
Author: Babak Vahdat <bvahdat@apache.org>
Date:   Sat Jun 1 19:30:52 2013 +0200

    Polished.

commit d5b16f55799a5cdfc2b69bcab62ecbd0962e0f53
Author: Claus Ibsen <davsclaus@apache.org>
Date:   Sat Jun 1 07:28:10 2013 +0200

    Upgrade to Groovy 2.1.4

commit 343fd1cf5b08953072f4f3b5bb344dbfad87343c
Author: Babak Vahdat <bvahdat@apache.org>
Date:   Fri May 31 21:56:14 2013 +0200

    Upgrade to Bouncy Castle 1.48 which is already an OSGi bundle out-of-the-box (no need for a SMX bundle anymore). Also cleaned up all the @deprecated Bouncy

commit 9016ac6a22871097ce55d47a4af166f7c73a1f0f
Author: Babak Vahdat <bvahdat@apache.org>
Date:   Fri May 31 19:53:51 2013 +0200

    Resolved the deprecated API usage after upgrade to Ehcache 2.7.0.

commit 8c57bd4d204e9ecb2bcb54e5733e5b322ac9f710
Author: Babak Vahdat <bvahdat@apache.org>
Date:   Fri May 31 19:37:15 2013 +0200

    Upgrade to Ehcache 2.7.0 which is already an OSGi bundle out-of-the-box (no need for a SMX bundle anymore).
{code}",,,,,,,,,,,,,,,,,
New restlet endpoints don't work if route is created after restlet server is started.,CAMEL-6385,12648655,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,njiang,chenyuejie,chenyuejie,21/May/13 16:15,24/May/13 13:36,13/Mar/19 22:18,24/May/13 13:36,2.11.0,,,,,,,,,,,,,camel-restlet,,,,,,0,,,,,,,,,"If a route with restlet endponit is created after restlet server is started, restlet can't handle the endpoint correctly, because restlet translate all URI pattern of routes at server starting, but don't it for later attached routes. So we must translate the URI pattern before attach it to restlet after restlet server is started. See http://restlet.tigris.org/issues/show_bug.cgi?id=988. ",,,,,,,,,,,,,,,,,,,,,21/May/13 16:19;chenyuejie;patch.txt;https://issues.apache.org/jira/secure/attachment/12584031/patch.txt,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-05-23 14:45:23.678,,,no_permission,,,,,,,,,,,,,329010,,,Thu May 23 14:45:23 UTC 2013,,,Patch Available,,,,0|i1krjr:,329352,,,,,,,,,"23/May/13 14:45;njiang;Applied the patch into master, camel-2.11.x and camel-2.10.x with thanks to Yuejie.",,,,,,,,,,,,,,,,,,,,,,,
camel-jms: InOut exchange can time out even if response was received,CAMEL-6123,12635116,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,raulvk,raulvk,raulvk,04/Mar/13 12:41,22/Mar/13 00:33,13/Mar/19 22:18,22/Mar/13 00:32,2.10.3,2.9.5,,,,,,,,2.10.5,2.11.0,2.9.6,,camel-jms,,,,,,0,,,,,,,,,"When performing an InOut JMS exchange with a certain requestTimeout, if the reply message is received in time, but the following formula stands true: 

{{T0 + T1 >= T!}}, where:

T0 = JMS response time
T1 = remaining route processing time following the reply
T! = requestTimeout

Then camel-jms will throw an {{ExchangeTimedOutException}} regardless of the fact that the reply was truly received in time.

I'm surprised this bug has gone unnoticed until now, as it's been present since mid-2010.

*Example unit test:*

{code:java}
    @Test
    public void testTimeoutNotTriggered() throws Exception {
        getMockEndpoint(""mock:exception"").expectedMessageCount(0);
        template.requestBody(""activemq:test"", ""<hello />"");
        assertMockEndpointsSatisfied();
    }

    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            @Override
            public void configure() throws Exception {

                onException(ExchangeTimedOutException.class)
                    .handled(true)
                    .to(""mock:exception"");

                from(""activemq:test"")
                    .inOut(""activemq:test?requestTimeout=500"")
                    .delay(constant(1000));
                
                from(""activemq:test"")
                    .log(""test"");
            }
        };
    }
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-03-20 09:25:29.341,,,no_permission,,Unknown,,,,,,,,,,,315609,,,Fri Mar 22 00:33:27 UTC 2013,,,,,,,0|i1igm7:,315952,,,,,,,,,"04/Mar/13 12:42;raulvk;This happens because the entry is removed from the CorrelationTimeoutMap too late, after the subsequent processing has been invoked and returns.",20/Mar/13 09:25;davsclaus;Any status on this. As we are closing in on a 2.11.0 release.,"22/Mar/13 00:33;raulvk;Fixed in trunk, 2.10.x and 2.9.x branches.",,,,,,,,,,,,,,,,,,,,,
Camel 2.9.0 incapable of working with % in endpoint URIs,CAMEL-4954,12540342,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,hadrian,sruehl,sruehl,30/Jan/12 10:26,18/Mar/13 18:15,13/Mar/19 22:18,03/Feb/12 22:16,2.9.0,,,,,,,,,2.10.0,2.9.1,,,camel-core,,,,,,0,,,,,,,,,"In the class org.apache.camel.util.URISupport which will be used to resolve endpoints (DefaultCamelContext#normalizeEndpointUri) the method parseParameters will be called.
At first the java.net.Uri#getQuery will be called with according to the javadoc ""Returns the decoded query component of this URI"" returns a decoded URI. If that fails the java.net.Uri#getSchemeSpecificPart method will be called which according to the javadoc ""Returns the decoded scheme-specific part of this URI."" returns a decoded URI.
So to summarize we get in any case a decoded URI.
This URI will then be than in the method org.apache.camel.util.URISupport#parseQuery(String) again decoded with java.net.URLDecoder#decode(String,String).
This code leads to the following behaviour:
 If a % is properly encoded with %25test the %25test will be substituted by the first call to %test and the decoded again which leads to an Exception.

In the http://svn.apache.org/viewvc?view=revision&revision=1166508 commit you can see that the % was uncommented from org.apache.camel.util#UnsafeUriCharactersEncoder. Maybe this is related.

However... Double encoding of URIs seems quite odd. With any URI char there is no issue with that. But with % the % will be decoded again, which makes a % unusable in Camel.",Mac 10.7 Java 1.6.0_29,,,,,,,,,,,,,,,,,,,,02/Feb/12 14:19;sruehl;PercentTest.java;https://issues.apache.org/jira/secure/attachment/12512949/PercentTest.java,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-02-02 15:03:23.807,,,no_permission,,Unknown,,,,,,,,,,,225755,,,Fri Feb 10 16:37:20 UTC 2012,,,,,,,0|i0243j:,10265,,,,,,,,,30/Jan/12 10:28;sruehl;Maybe this issue is a side effect,30/Jan/12 10:35;sruehl;FYI %2525test leads to the excepted behavior (%test).,02/Feb/12 14:19;sruehl;Attached jUnit test which demonstrates the issue.,"02/Feb/12 15:03;hadrian;Thanks a lot for reporting this and especially for providing a unit test. That is a problem I will fix today. In general however, the aim is to get rid of the normalizeEndpointUri. It is used because the uri design for some components allows the creation of invalid URIs that cannot be passed, so using it was a workaround in the first place (from almost the very beginning). The endpoint creation is quite convoluted and is due for some refactoring anyway, but I thought it could wait until 3.0.

The goal for 3.0 is to ensure that all components only accept valid URIs, so it's the responsibility of the user to encode whatever needs encoding, as it the case with any other technology the uses URIs. There is a new method a component can override now, preProcessUri(String) that would convert (and log) the original invalid Uri into a valid one, which could be used instead of the original one. This should also help with migration.

On a side note, using clear passwords in the uri is not the most secure thing to do. You may want to take a look at camel-jasypt. It may provide a different, safer, workaround.","03/Feb/12 07:20;hadrian;@Sebastian, I committed a fix, actually more like a workaround on trunk. It took a while because I had to run the full tests to make sure I didn't break something. A better fix is possible and get rid of the double decode, but that only after we fix all components to not rely on unsafe URIs and then we can remove the double decode and more importantly the normalize.

It should work for you now. It would be great if you could test it from trunk. I will merge to 2.9.1 in a few hours.","08/Feb/12 01:32;njiang;@Hadrian,

A lot of test failed because of patch merging into the Camel 2.8.x.
Can you take a look at it ?
 ","10/Feb/12 06:26;njiang;Revert the patch of 1240189 in camel 2.8.x branch to fix the build.
","10/Feb/12 16:37;sruehl;@Hadrian I wasn't able to build the trunk by myself (the camel build tips won't help) so I can't test it. But thanks for the tip for camel-jasypt.

@Willem Im quite not sure of the content of patch 1240189 but could you link to the hudson output (or a place where the test output can be found)?

Because its reverted shouldn't then this Issue reopened?",,,,,,,,,,,,,,,,
EndpointHelper.setReferenceProperties() does not work with OSGiServiceRegistry,CAMEL-6130,12635432,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,davsclaus,aaronjwhiteside,aaronjwhiteside,05/Mar/13 21:05,12/Mar/13 11:47,13/Mar/19 22:18,12/Mar/13 11:47,2.10.4,2.9.5,,,,,,,,2.10.5,2.11.0,,,osgi,,,,,,0,,,,,,,,,"EndpointHelper.setReferenceProperties() does not work with OSGiServiceRegistry

setReferenceProperties() is hard-coded to lookup services of type Object.class.

It should use reflection to determine the type that the setter method accepts and then use that type to lookup the reference in the service registry.

At the moment this issue is stopping #bean references in Endpoints from being resolved when using an OSGiServiceRegistry, in OSGi you need to know the class of the service you want before hand.",,,,,,,,,,,,,,,,,,,,,06/Mar/13 18:38;aaronjwhiteside;CAMEL-6130-2.patch;https://issues.apache.org/jira/secure/attachment/12572362/CAMEL-6130-2.patch,06/Mar/13 18:50;aaronjwhiteside;CAMEL-6130-3.patch;https://issues.apache.org/jira/secure/attachment/12572366/CAMEL-6130-3.patch,06/Mar/13 20:45;aaronjwhiteside;CAMEL-6130-4_.patch;https://issues.apache.org/jira/secure/attachment/12572388/CAMEL-6130-4_.patch,07/Mar/13 17:10;aaronjwhiteside;CAMEL-6130-5.patch;https://issues.apache.org/jira/secure/attachment/12572557/CAMEL-6130-5.patch,05/Mar/13 23:36;aaronjwhiteside;CAMEL-6130.patch;https://issues.apache.org/jira/secure/attachment/12572197/CAMEL-6130.patch,,5.0,,,,,,,,,,,,,,,,,,,2013-03-06 10:31:03.563,,,no_permission,,Unknown,,,,,,,,,,,315925,,,Thu Mar 07 19:00:19 UTC 2013,,,Patch Available,,,,0|i1iikf:,316268,,,,,,,,,"05/Mar/13 23:36;aaronjwhiteside;Patch that fixes the issue, it's a little ugly but I didn't want to rewrite EndpointHelper or IntrospectionSupport.

Passes all camel-core unit tests.",06/Mar/13 10:31;davsclaus;I think the fix should be on the OSGi side instead. So if Object.class is provided as type then it should ignore that. Or rely on the fact that any type is an Object.,"06/Mar/13 15:53;aaronjwhiteside;I don't think that is possible, you need to know the exact type of a service to retrieve it from a BundleContext.

http://www.osgi.org/javadoc/r4v43/core/org/osgi/framework/BundleContext.html

Passing in Object.class returns nothing because nothing is explicitly registered against that class.","06/Mar/13 16:08;davsclaus;You can use this method and provide null as the class
http://www.osgi.org/javadoc/r4v43/core/org/osgi/framework/BundleContext.html#getServiceReferences(java.lang.Class, java.lang.String)

Frankly the end user has not provided any class but only the name of the bean to use. So if the service is register with class FooImpl.class, and we want to lookup this service using the name ""foo"", then we should be able to do

getServiceReferences(null, ""foo"");

If the setter type is a Foo (eg the interface) then Camel (with your patch) would call
getServiceReferences(Foo.class, ""foo"");

But what happens if the service was registered with 
FooImpl.class as the class type.

Would the OSGi service registry be smart enough to know that FooImpl and Foo is the ""same""","06/Mar/13 16:19;aaronjwhiteside;The javadoc for that method says:

{quote}
clazz - The class under whose name the service was registered. Must not be null.
{quote}

I think in this case the _user_ is the Endpoint who is trying to lookup a property/bean and inject it into a method. So the method it finds to inject into determines the type? I think EndpointHelper.setReferenceProperties() is only used in that specific scenario and not by the wider public.

Services in OSGi CAN be registered with any type, interface or not. But the general rule of thumb is you NEVER register a classes concert type, abstract types are OK, only the service interface. This is the essence of loosely coupled services, so I don't see this happening in practice.

If the service was registered with it's concert class and you try and look it up by an interface it implements, you will not be able to find it. Mind you in OSGi you can expose/register a service via many interfaces/abstract classes.

So no the OSGi service registry wouldn't be smart enough to figure it out by itself.","06/Mar/13 16:31;davsclaus;Ah it was getAllServiceReferences

clazz - The class name with which the service was registered or null for all services.","06/Mar/13 16:36;aaronjwhiteside;Ah OK, So I still see a potential problem with that..

Service property's have no unique constraint in OSGi, so there could be a a hundred services registered with the property name=hello, of all different types. So we would have to iterate through the list trying to inject each one until one fits? If you're OK with that approach I could implement it. Though I would be worried at the number of services it would find... potential performance issue.

","06/Mar/13 17:43;aaronjwhiteside;I've had more time to think about this, and I don't think we should go with this approach.

In endpoint helper we would have to call Registry.findByTypeWithName() passing Object.class then index into the result keyed by the bean name to get the object. 

I'm not sure that all Registry implementations would work correctly this way? For me at least it still makes more sense to figure out the specific type and try and lookup a bean with that specific type and name.

What do you think?","06/Mar/13 18:19;davsclaus;Yeah in light of the best practice in OSGi to register a service by its interface, and assuming the endpoint options will be using the interface as its type as well. So there is a 1:1 match. Then it makes sense to use the setter type in the lookup.

If there is a type hierachy from the setter type, we could walk up the tree (and select the interfacaes), and do re-lookup, if we could not find a match. Though this may be overkill? 
","06/Mar/13 18:25;aaronjwhiteside;I think that's not a bad idea, I've cleaned up the first patch a bit - so let me attach the cleaned up version. Then I'll work on a version that returns a set of possible types to try and lookup/inject.","06/Mar/13 18:38;aaronjwhiteside;Latest patch, cleaned up.","06/Mar/13 18:45;davsclaus;Great, it would be good if we could add an unit test to tests/camel-itest-osgi to have an actual unit test running in osgi environment.",06/Mar/13 18:50;aaronjwhiteside;second patch had a bug in it.. this one fixes that,"06/Mar/13 18:54;aaronjwhiteside;You wouldn't happen to know which profiles to enable to run the tests under tests/camel-itest-osgi?
","06/Mar/13 19:08;davsclaus;You can run the tests just by
{code}
mvn clean install
{code}

Or a specific test class with
{code}
mvn clean test -Dtest=FooTest
{code}

The profiles is there to not run the tests on the CI servers as they may hang the CI servers. Though the situation recently with pax-exam 2.6 and karaf 2.3 may improve this.","06/Mar/13 20:50;aaronjwhiteside;Forth patch, this one gets all the possible setter methods and then tries to inject each one until it succeeds or fails (due to conversion error or one of the setter methods throws an error).

I added a todo comment, because I think we should really be suppressing these errors instead of just failing outright? But currently the existing behavior is preserved and all camel-core unit tests pass.

I've taken a look at OSGiIntegrationTestSupport used in tests/camel-itest-osgi and I can see that we never actually use the real OsgiServiceRegistry the JndiRegistry is always used by default. 

I'll continue to look at adding a real OSGi test, but in the meantime is the latest patch good enough to be applied? ",07/Mar/13 08:33;davsclaus;camel-ahc uses builder pattern for its configuration so it failed due the code changes. We should allow builder pattern by default when using the set property IMHO. So I am testing with this enabled.,"07/Mar/13 10:52;davsclaus;When using spring (spring-dm) or blueprint in the OSGi tests, then they use an OSGi CamelContext that setup all the registry and whatnot to use the OSGi versions. So eg OSGiRegistry would be used over JndiRegistry etc.

This happens automatic for you.

On the other hand if you create CamelContext manually you would need to use the osgi version of it, and setup all that other stuff manually.
","07/Mar/13 17:10;aaronjwhiteside;Cleaned up EndpointHelper moved all the messy logic back into IntrospectionSupport.setProperty()

All camel-core unit tests pass.",07/Mar/13 19:00;davsclaus;Thanks applied patch #5 to trunk and 2.10 branch,,,,
CamelJob implementation rely on some inconsistent endpoints LRU cache - Camel endpoints may not be called on quartz fire after some days of uptime,CAMEL-5994,12628715,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,davsclaus,alexiskinsella,alexiskinsella,22/Jan/13 14:17,25/Jan/13 08:43,13/Mar/19 22:18,25/Jan/13 08:43,2.10.3,2.9.5,,,,,,,,2.10.4,2.11.0,2.9.6,,camel-quartz,,,,,,1,,,,,,,,,"CamelJobs rely on some endpoints LRU cache from camel context. If i'm not wrong, since LRU Cache relies on SoftReferences, Garbage Collector can decide to evict some entries and especially QuartzEndpoints.

It happens that sometimes endpoints evicted from LRU Caches are QuartzEndpoints. Since QuartzEnpoints are searched from CamelJob in LRU cache, they are not reachable anymore.

The side effect, is that CamelJob isntance initializes a new QuartzEndpoint, but loadbalancer is not initialized since it is initialized from QuartzConsumer.

The result is that quartz triggers jobs that instanciate Quartz endpoints with unintialized load balancers which are unable to call processor from the routes associated.

I have joined a fix that rely on the search of QuartzEndpoints from initalized routes of Camel context.

Fundamentally, the search of endpoints should not rely on endpoints LRU cache. It is a broken design.

Hope it helps.

By the way, there are other issues related to QuartzEndpoint load balancer initalization: If quartz starts before startup of Camel routes you will have the same issue: Correctly initialized QuartzEndpoints are not in LRU cache since Camel has not started routes (and so endpoints and consumers). Quartz will trigger job, and camel job will search for QuartzEndpoint and put it in LRUCache with uninitialized load balancer.
",Quartz is in deployed in cluster mode.,,,,,,,,,,CAMEL-5993,,,,,,,,,,22/Jan/13 14:18;alexiskinsella;CamelJob.java;https://issues.apache.org/jira/secure/attachment/12565946/CamelJob.java,23/Jan/13 14:01;denis.delangle;QuartzCronRouteWithSmallCacheTest.java;https://issues.apache.org/jira/secure/attachment/12566126/QuartzCronRouteWithSmallCacheTest.java,,,,,2.0,,,,,,,,,,,,,,,,,,,2013-01-23 13:59:44.762,,,no_permission,,Advanced,,,,,,,,,,,307242,,,Fri Jan 25 08:43:16 UTC 2013,,,,,,,0|i1akp3:,269819,,,,,,,,,23/Jan/13 13:59;denis.delangle;I made a pull request based on this patch and with a testcase https://github.com/apache/camel/pull/7. This patch solved my problem (described in CAMEL-5993),23/Jan/13 14:01;denis.delangle;JUnit test that reproduce the bug and that is fixed by the correction in CamelJob,25/Jan/13 08:43;davsclaus;Thank guys for help with fixing this issue,,,,,,,,,,,,,,,,,,,,,
camel-hl7 marshal charset  error,CAMEL-5943,12626658,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,njiang,valdar,valdar,08/Jan/13 22:09,11/Jan/13 08:27,13/Mar/19 22:18,11/Jan/13 07:37,,,,,,,,,,2.10.4,2.11.0,2.9.6,,camel-hl7,,,,,,0,charset,converting,dataformat,hl7,marshaling,unmar,,,"Suppose you have an environment with default charset = ISO-8859-1 and a route like this one:
{code:xml}
... 
<bean id=""hl7codec"" class=""org.apache.camel.component.hl7.HL7MLLPCodec"">
    <property name=""charset"" value=""utf-8"" />
</bean>
...
<camel:from uri=""mina2:tcp://localhost:8787?sync=true&amp;codec=#hl7codec""/>
//do someting with hl7 object
<camel:marshal><hl7/></camel:marshal>
//do someting with hl7 string
...
{code}

The marshal fail because it use default charset (ISO-8859-1 in this example) without taking in account the Exchange.CHARSET_NAME property (UTF-8 in this example)",All,172800,172800,,0%,172800,172800,,,,,,,,,,,,,,08/Jan/13 22:14;valdar;camel-hl7-dataformatCharEncoding-patch.txt;https://issues.apache.org/jira/secure/attachment/12563840/camel-hl7-dataformatCharEncoding-patch.txt,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-01-11 07:37:07.792,,,no_permission,,Moderate,,,,,,,,,,,303265,,,Fri Jan 11 08:27:17 UTC 2013,,,Patch Available,,,,0|i1790n:,250429,,,,,,,,,08/Jan/13 22:14;valdar;Patch provided (local to camel-hl7 subproject),08/Jan/13 22:16;valdar;provided also a pull request on github.,"11/Jan/13 07:37;njiang;Applied the patch into trunk, camel-2.10.x and camel-2.9.x branches.",11/Jan/13 08:27;valdar;Closed also the pull request on github.,,,,,,,,,,,,,,,,,,,,
BlueprintCamelContext should not get started in the init() method but later when the blueprint container is fully initialized,CAMEL-5712,12612418,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,davsclaus,davsclaus,davsclaus,18/Oct/12 12:41,24/Oct/12 08:09,13/Mar/19 22:18,18/Oct/12 19:43,2.10.0,2.9.0,,,,,,,,2.10.3,2.11.0,2.9.5,,camel-blueprint,,,,,,0,,,,,,,,,"The init() method in BlueprintCamelContext should not call maybeStart(). but instead should be started when the blueprint container is done doing all its dance and initialization.

For example Spring sends on ContextRefreshedEvent when its done.

We need something similar for blueprint to tell us when its done doing its initialization et all.

The problem is that the CamelContext should not be started until all that other stuff is initialized as well.",,,,,,,,,,,,,,CAMEL-5738,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Moderate,,,,,,,,,,,249548,,,Thu Oct 18 12:42:20 UTC 2012,,,,,,,0|i0affz:,58775,,,,,,,,,18/Oct/12 12:42;davsclaus;Now the trick is to figure out how to get the BlueprintContainer to tell me when its done.,,,,,,,,,,,,,,,,,,,,,,,
Camel Proxy ignores camelContextId property in Spring configuration,CAMEL-5518,12603885,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,njiang,koscejev,koscejev,17/Aug/12 16:37,20/Aug/12 02:35,13/Mar/19 22:18,20/Aug/12 02:35,2.10.0,,,,,,,,,2.10.1,2.11.0,2.9.3,,camel-core,,,,,,0,context,proxy,spring,,,,,,"Camel Proxy, if configured outside camelContext element in Spring configuration, ignores camelContextId property. (Actual code only cares about this property, if camelContext isn't set - which it always is by then.)

Steps to reproduce: Configure two contexts in spring configuration. Then in the same config file configure two proxies, each pointing to the same URI, but with different camelContextId specified. Both proxies will be created pointing to the same (first) camel context, despite being configured to different contexts.",,,,,,,,,,,,,,,,,,,,,17/Aug/12 16:48;koscejev;Test.zip;https://issues.apache.org/jira/secure/attachment/12541385/Test.zip,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-08-18 19:55:25.687,,,no_permission,,Unknown,,,,,,,,,,,241390,,,Mon Aug 20 02:35:12 UTC 2012,,,,,,,0|i027kv:,10829,,,,,,,,,17/Aug/12 16:48;koscejev;Test suite to reproduce the bug,"18/Aug/12 19:55;bvahdat;We've got 2 regression failures through the fix of this ticket:
https://builds.apache.org/job/Camel.trunk.fulltest.java7/224/","20/Aug/12 02:34;njiang;@Babak, thanks for the reminding, I committed a fix for it.","20/Aug/12 02:35;njiang;Applied patch into trunk, camel-2.10.x and camel-2.9.x branches.",,,,,,,,,,,,,,,,,,,,
"camel-jms - Request/Reply - Leak in ActiveMQSessionPool causing it to eat up memory, when using fixed replyTo queue names",CAMEL-4657,12530985,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,davsclaus,davsclaus,davsclaus,10/Nov/11 11:05,11/Nov/11 08:34,13/Mar/19 22:18,11/Nov/11 08:34,,,,,,,,,,,,,,camel-jms,,,,,,0,activemq,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Possible-memory-leak-in-org-apache-activemq-pool-PooledSession-tp4964951p4964951.html

This bug is in ActiveMQ, but creating a ticket to get it resolved as the leak is apparent when using Spring DMLC with CACHE_SESSION, which Camel by default does when doing request/reply over JMS with fixed replyTo queues.

Then the consumer is not cached, and therefore created on each poll, but the ActiveMQSessionPool keeps growing in its internal list of created consumers, as the session is cached.

Most likely a patch is needed to fix this in the AMQ side",,,,,,,,,,,,,,,,,,,,AMQ-3588,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Advanced,,,,,,,,,,,216723,,,Fri Nov 11 08:34:44 UTC 2011,,,,,,,0|i022af:,9972,,,,,,,,,11/Nov/11 08:34;davsclaus;This was a bug in ActiveMQ which has been fixed in the upcoming AMQ 5.6 release.,,,,,,,,,,,,,,,,,,,,,,,
Issue using errorBuilderRef with the xml dsl,CAMEL-4022,12508547,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Critical,Fixed,davsclaus,hadrian,hadrian,27/May/11 13:27,10/Jun/11 08:42,13/Mar/19 22:18,10/Jun/11 08:42,2.7.1,,,,,,,,,2.8.0,,,,,,,,,,0,,,,,,,,,"While fixing issues around the errorHandler I noticed that <onException> definitions defined in the camel context are ignored if a route specifies its own errorHandlerRef. The reason is that we set the onException definition on the default error handler. I have a fix for that, but I discovered a different issue (I think) for which I would like to discuss the solution.

When we have an onException definition that looks kinda like this:
{code}
<onException>
  <exception> java.lang.IllegalArgumentException</exception>
  <to uri=""mock:illegalArgumentException""/>
</onException>
{code}
... something happens, the IAE exception is caught, we do something, but in that process another exception is thrown. Currently, that would be caught by the default error handler, which may not be what we want.

What error handler (if any) should handle exceptions thrown while in onException?

The onException mechanism is somewhat similar to a try/catch. I don't think the exceptions thrown while handling onException should be handled by the same error handler configured for the route, or even the context scoped one. The processing should be very simple, predictable and immutable. Since the default ""CamelDefaultErrorHandlerBuilder"" can be replaced, it is not imho a solution and we need one global one that does as little as possible (the problem would be agreeing what that is: no redeliveries, logging or not, etc).

Thoughts?




",,,,,,,,,,,,,,CAMEL-4041,,,,,,,06/Jun/11 14:57;davsclaus;onexceptionerrorhandler.patch;https://issues.apache.org/jira/secure/attachment/12481573/onexceptionerrorhandler.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-05-27 13:55:49.151,,,no_permission,,,,,,,,,,,,,13977,,,Fri Jun 10 08:42:27 UTC 2011,,,,,,,0|i01ydb:,9337,,,,,,,,,"27/May/11 13:55;davsclaus;The behavior should be that no error handler should be used, when routing inside the <onException>.

For example as you say if another exception, or the same type of exception occurs, then the complexity gets hard. What if there is another onException that handles that exception, and then another exception is thrown and you go back to the first onException. And so on. Eg you have to be careful to not go in circles.

The onException is to allow end users to handle that exception in any custom way. For example to prepare some custom reply message (instead of the exception).

If you want to continue routing and have error handling, then send the message to a route:
{code}
onException(SomeException.class).handled(true).to(""direct:someRoute"");
{code}","27/May/11 14:14;hadrian;@Claus, thanks for the input. That's the issue, what if I don't want handled(true) and to(""direct:someRoute"") fails?

For the situation you mention where there is an onException handling the exception thrown while handling, that should *not* trigger. That is only meant for exceptions thrown on the route, not while handling. I believe exception thrown while handling have a special status and should be handled differently, in a simple, predictable way, not by the ErrorHandler configured for the route.

We need to come up with a good convention.","27/May/11 14:17;hadrian;To be more precise, I believe exceptions thrown while handling are extremely exceptional and imho indicate a design/coding problem that needs to be resolved by the developer and should not appear in production. I don't see any good choice a framework like camel can make for you in such situations.","01/Jun/11 17:25;hadrian;I added a test in r1130232 that demonstrates the problem. What should happen if exception is thrown while handling exception? Imho, certainly not going through redeliveries and the default error handler (which can be replaced by the user app).

My proposal is to have a fatalErrorHandler for this scenario that is simple and stateless (i.e. no redelivery and virtually no chances of throwing other exceptions, no sending to other endpoints). If that sounds good I can implement the piping for it while we keep discussing what exactly the fatalErrorHandler should do. If you can think of better solutions feel free to comment.

Thoughts?","02/Jun/11 16:33;joed;This is an interesting use-case....
I strongly agree that it is an edge-case, ideally I think this should be something that is done as try/catch/finally, but since the case can occur
from my looking at the test I agree that some sort of fatalError is at least a good start.","02/Jun/11 16:38;joed;Second comment, whatever we do, I think the most important is that it is not hidden from the user in any way shape or form.
Like swallowing it and carrying on as if nothing happened...","02/Jun/11 17:26;hadrian;Johan, not sure how edge-case it is. Absolutely agree that we should not just swallow it.

Actually since it's a separate issue than the one reported here, I opened an improvement issue CAMEL-4041, and we can continue the discussion there.","05/Jun/11 12:36;davsclaus;I had a bit time to look into that unit test Hadrian committed.

I moved it into its separate unit test file: ExceptionCamel4022Test
That makes it easier to debug.

I also added a bunch of unit tests that showed the expected behavior of onException when an exception was thrown: ExceptionThrownFromOnExceptionTest

The odd thing from Hadrians test is that if you send the message to direct:intermediate instead of direct:start, then it works as expected. I haven't debugged this more throughly to see the oddity.

","05/Jun/11 12:46;davsclaus;The current logic for onException is as follows:

1. onException will shadow any errorHandler
2. any errorHandler does not take part if onException is processing an exception (this is the intend, but Hadrian created an unit test where the DLC interfered)


The logic in onException is roughly a ""magic"" try .. catch
{code}
try

   // while loop routing the exchange
 
} catch (OnException e) {
   try {
      // onException route logic goes here, if there is any
   } catch (Throwable t) {
      // ops an exception occurred in onException, we will store it on the exchange
      // TOOD: this is where we may want the onExceptionErrorHandler (to log the exception or something)
      exchange.setException(t);
   }
   
   if (!continued) {
      // mark exchange to stop routing (this is the default behavior)
   }
   if (!handled) {
      // if onException is configured to NOT handle, then rethrown exception (this is the default behavior)
      throw exchange.getException();
   }
}
{code}

So if an exception is thrown during onException processing, then that exception is caught. But we may want to introduce that OnExceptionErrorHandler (FatalErrorHandler as named by Hadrian) to log the exception (I think that's already done). But having an OnExceptionErrorHandler, we could let end user configure what to do. But again this may just become more complicated.

","05/Jun/11 15:41;davsclaus;*Note:* We ought to discuss this in ticket CAMEL-4041

Okay Hadrian is correct when he suggests a OnExceptionErrorHandler (he named it FatalErrorHandler) that is stateless and doesn't do redelivery and whatnot. I got a prototype up and running with that now.

So what we need to consider is what the outcome of the processing of the Exchange should be when using OnException and a 2nd exception is thrown from within OnException. I hope you follow me now.

As I see we can do either of the following
a) log the 2nd exception and then ignore it
b) log the 2nd exception and set it as exception on the Exchange
c) as b + force the exchange to fail, even if continued/handled was set to true
d) as b + having an option to control if we should force the exchange to fail or not

And in terms of logging, we can have log level options end users can control in  case they don't want that. But by default I suggest its logged at WARN level incl. stacktraces

The ""big"" questions is what we should consider as the outcome. Should the 2nd exception be ignored or not. And if not ignored should it replace the 1st exception on the Exchange. And if so should we always force the Exchange to fail, even if the end user configured handled(true) etc.

","06/Jun/11 09:48;davsclaus;I have added unit tests on trunk
http://svn.apache.org/viewvc?rev=1132562&view=rev

That tests for <onException> with both context and route scoped error handlers. I cannot reproduce the issue Hadrian reported in the initial comment of this JIRA ticket.

The test Hadrian created in r1130232 does neither reproduce it as its only a Java DSL test (no XML DSL test as well) and it indicated another issue, which is what should happen if another exception is thrown during processing onException. That is ticket CAMEL-4041.

","06/Jun/11 14:35;hadrian;Claus, I can understand how you got confused. I should have been clearer in the description above. This shouldn't be a duplicate of CAMEL-3989, as I said in the description above: ""I discovered a different issue"". And the problem, although I discovered while looking into the camel-spring issue is in camel-core. Anyway, the title and description are not clear, I agree with that.

Regarding your comment above, yes, my test targeted the java dsl, to resolve the part of the issue that became CAMEL-4041 on Thu, one day later.

I don't think it's worth getting pedantic and cleanup the description and title of this issue (feel free if you think it's important). I would however continue the discussion for CAMEL-4041 here, because we have the context here (unless we copy a couple of the relevant comments there).

To the not very important issue of naming, I think OnExceptionErrorHandler is much less descriptive than FatalErrorHandler, which may not be the best name either. More descriptive would be ExceptionWhileHandlingExceptionErrorHandler, which to me sounded like Fatal.

To the proposed issues of having it configurable, I am strongly against it being configurable. This is a fatal situation that should not occur in the first place. If the exception should be ignored, again no, I believe Johan said the same thing. This is a situation much more likely to appear during development (in production it would be only the result of insufficient testing). We should fail fast and loud. So the only viable solution to me is c), something like an 'internal server error'. There are other solutions to be considered, like stopping the route, but given the stateless nature of camel routes I don't think we should go that far.
","06/Jun/11 14:51;davsclaus;> To the not very important issue of naming, I think OnExceptionErrorHandler is much less descriptive than FatalErrorHandler, which may not be the best name either. More descriptive would be ExceptionWhileHandlingExceptionErrorHandler, which to me sounded like Fatal.

??? That new error handler is *only* being used when you use OnException, and thus a description that indicate that is much better than a general/confusing name such as FatalErrorHandler. The name ExceptionWhileHandlingExceptionErrorHandler is a better description but again it doesn't trigger/being used, in case, lets say DeadLetterChannel itself caused a fatal exception while processing the exception.

So having the name OnExceptionErrorHandler is a better description as it points the user/reader in the direction its being used when you use OnException.",06/Jun/11 14:52;davsclaus;And in terms of the options listed. I also currently agree/think that *c* is the best and what the end user would expect. The exception is not hidden etc. It causes the exchange to fail. And its being logged so they can find it in the log also.,06/Jun/11 14:57;davsclaus;Work in progress patch for this new error handler. ,"06/Jun/11 15:06;davsclaus;Hadrian fell free to look at the attached patch file, it goes most of the stuff in place. Of course some unit tests have to be adjusted slightly as they was dependent on the old code. Likewise there may be some tests in camel-spring that need to be adjusted.

Since this would be a bigger change, a good idea is to run a full test before committing :)","07/Jun/11 02:52;hadrian;@Claus, I agree a full test is absolutely necessary before committing.

FWIW, I know this ErrorHandler is only used with OnException, i.e. when onException is used in the DSL. Naming the handler OnExceptionErrorHandler will therefore relate to the route building syntax, not the semantics which to me is a problem. I trust you'll be able to come with something better.

Couple of comments on the patch: the error handler could be a singleton (obviously stateless). I think logging should be at error level. To your comment in the code, I don't think anything related to this error handler should be configurable.

That said, it's definitely a step in the right direction. Feel free to commit the patch. We can follow up with more changes once we agree on the other details and then close the issue (CAMEL-4041).","09/Jun/11 13:49;davsclaus;Okay I will return to this ticket and the patch, now that I got time again.","09/Jun/11 15:54;davsclaus;Will take a bit more work to get the XML DSL side working as they use error handler ref, and this indirection takes a bit more work to proper setup with this new FatalErrorHandler.",10/Jun/11 08:42;davsclaus;Fixed by CAMEL-4041. I added better validation of OnException so you cannot mis configure it.,,,,
CXF endpoint doesn't play nice with doTry/doCatch,CAMEL-5356,12560153,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,onders,jensgr,jensgr,11/Jun/12 11:37,21/Dec/17 17:41,13/Mar/19 22:18,26/Jul/17 18:57,2.8.3,,,,,,,,,2.20.0,,,,camel-cxf,,,,,,2,,,,,,,,,"When using a CXF client endpoint to call a web service via SOAP/HTTP there are two possible error scenarios:

1) The call fails immediately with an exception (e.g. because the service is down/the address is wrong)
2) The call ""succeeds"" but returns a SOAP fault. This could also signal an error condition to the application.

Currently, using doTry/doCatch doesn't work properly in either scenario because, apprently, the CXF endpoint nulls the message when receiving an exception or fault.",,,,,,,,,,,,,,,,,,,,,11/Jun/12 11:39;jensgr;camelTryCatch.zip;https://issues.apache.org/jira/secure/attachment/12531665/camelTryCatch.zip,25/Jul/17 13:37;onders;camelTryCatch_now.zip;https://issues.apache.org/jira/secure/attachment/12878798/camelTryCatch_now.zip,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-06-12 14:15:44.647,,,no_permission,,Unknown,,,,,,,,,,,241229,,,Thu Dec 21 17:41:02 UTC 2017,,,,,,,0|i026l3:,10668,,,,,,,,,"11/Jun/12 11:39;jensgr;Here is a test case with both scenarios. Note that the test also shows another (related?) issue: For the first test to succeed the convertBodyTo is required (despite stream caching being turned on). For the last test case, the convertBodyTo must not be present, however.","12/Jun/12 14:15;davsclaus;There is a handleFault you can enable to turn SOAP faults into exceptions, which Camels error handler can react upon.
","12/Jun/12 14:58;jensgr;At least in POJO mode it seems like a SOAP fault is handled like an exception anyway. Either way, using handleFault=true doesn't change the outcome of the test cases.","21/Jun/12 13:31;davsclaus;Thanks for the tests cases. The #1 situation should of course be propagated back to the caller, if sending failed due some exception.
","21/Jun/12 13:33;davsclaus;Lets see if we can get this fixed in a future patch releases of the Camel branches. 

In terms of #2 then the idea would be that when you use handleFault=true then Camel turns SOAP Faults into exceptions, which try .. catch ought to react upon.","21/Jul/17 07:56;onders;I tried to run the test with latest versions

as pom below 

{code}
<?xml version=""1.0"" encoding=""UTF-8""?>
<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">

  <modelVersion>4.0.0</modelVersion>
  <packaging>jar</packaging>

  <groupId>de.dz.camel</groupId>
  <artifactId>trycatch-test</artifactId>
  <version>1.0</version>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <java.source.version>1.8</java.source.version>
    <java.target.version>1.8</java.target.version>
    <camel.version>2.18.4</camel.version>
    <cxf.version>3.1.12</cxf.version>
  </properties>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>4.8.2</version>
      </dependency>
      <dependency>
        <groupId>org.apache.camel</groupId>
        <artifactId>camel-cxf</artifactId>
        <version>${camel.version}</version>
      </dependency>
      <dependency>
        <groupId>org.apache.camel</groupId>
        <artifactId>camel-spring</artifactId>
        <version>${camel.version}</version>
      </dependency>
      <dependency>
        <groupId>org.apache.cxf</groupId>
        <artifactId>cxf-bundle</artifactId>
        <version>${cxf.version}</version>
      </dependency>
      <dependency>
        <groupId>org.slf4j</groupId>
        <artifactId>slf4j-api</artifactId>
        <version>1.6.1</version>
      </dependency>
      <dependency>
        <groupId>org.slf4j</groupId>
        <artifactId>slf4j-log4j12</artifactId>
        <version>1.6.1</version>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-cxf</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-spring</artifactId>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-log4j12</artifactId>
      <scope>runtime</scope>
    </dependency>
  </dependencies>

  <build>
    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.6.1</version>
          <configuration>
            <source>${java.source.version}</source>
            <target>${java.target.version}</target>
          </configuration>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.20</version>
        </plugin>
      </plugins>
    </pluginManagement>

    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <includes>
            <include>**/*Test.java</include>
          </includes>
        </configuration>
      </plugin>
    </plugins>
  </build>

</project>
{code}

Have not debugged deeply? Anyone has an initial idea by the first look?



org.apache.camel.RuntimeCamelException: org.apache.camel.FailedToCreateRouteException: Failed to create route tryCatchRoute: Route(tryCatchRoute)[[From[cxf:bean:routerEP]] -> [ConvertBo... because of ServiceConstructionException
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1779)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:138)
	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:353)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:167)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:383)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:337)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:882)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:545)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:139)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:83)
	at de.dz.camel.test.TryCatchTest.setup(TryCatchTest.java:44)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:27)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
	at org.junit.runners.BlockJUnit4ClassRunner.runNotIgnored(BlockJUnit4ClassRunner.java:79)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:71)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:49)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)
Caused by: org.apache.camel.FailedToCreateRouteException: Failed to create route tryCatchRoute: Route(tryCatchRoute)[[From[cxf:bean:routerEP]] -> [ConvertBo... because of ServiceConstructionException
	at org.apache.camel.impl.RouteService.warmUp(RouteService.java:143)
	at org.apache.camel.impl.DefaultCamelContext.doWarmUpRoutes(DefaultCamelContext.java:3666)
	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:3573)
	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:3359)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:3213)
	at org.apache.camel.impl.DefaultCamelContext.access$000(DefaultCamelContext.java:184)
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:3008)
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:3004)
	at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:3027)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:3004)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:2970)
	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:275)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:136)
	... 36 more
Caused by: org.apache.cxf.service.factory.ServiceConstructionException
	at org.apache.cxf.frontend.ServerFactoryBean.create(ServerFactoryBean.java:197)
	at org.apache.cxf.jaxws.JaxWsServerFactoryBean.create(JaxWsServerFactoryBean.java:211)
	at org.apache.camel.component.cxf.CxfConsumer.createServer(CxfConsumer.java:72)
	at org.apache.camel.component.cxf.CxfConsumer.<init>(CxfConsumer.java:66)
	at org.apache.camel.component.cxf.CxfEndpoint.createConsumer(CxfEndpoint.java:252)
	at org.apache.camel.impl.EventDrivenConsumerRoute.addServices(EventDrivenConsumerRoute.java:69)
	at org.apache.camel.impl.DefaultRoute.onStartingServices(DefaultRoute.java:103)
	at org.apache.camel.impl.RouteService.doWarmUp(RouteService.java:167)
	at org.apache.camel.impl.RouteService.warmUp(RouteService.java:141)
	... 49 more
Caused by: java.io.IOException: Cannot find any registered HttpDestinationFactory from the Bus.
	at org.apache.cxf.transport.http.HTTPTransportFactory.getDestination(HTTPTransportFactory.java:269)
	at org.apache.cxf.binding.soap.SoapTransportFactory.getDestination(SoapTransportFactory.java:135)
	at org.apache.cxf.endpoint.ServerImpl.initDestination(ServerImpl.java:84)
	at org.apache.cxf.endpoint.ServerImpl.<init>(ServerImpl.java:63)
	at org.apache.cxf.frontend.ServerFactoryBean.create(ServerFactoryBean.java:182)
	... 57 more

","21/Jul/17 08:26;jensgr@gmx.net;cxf-bundle no longer exists with CXF 3.x. You probably need

{code}
      <dependency>
        <groupId>org.apache.cxf</groupId>
        <artifactId>cxf-rt-transports-http-jetty</artifactId>
        <version>${cxf.version}</version>
      </dependency> 
{code}",25/Jul/17 13:38;onders;pom is updated with latest released dependencies,"25/Jul/17 13:52;githubbot;GitHub user onders86 opened a pull request:

    https://github.com/apache/camel/pull/1847

    CAMEL-5356 - handle if the value is an empty collection

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/onders86/camel CAMEL-5356

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1847.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1847
    
----
commit 2c654d97c7f4332ce1aa07b694be4bd12fd545f4
Author: onders86 <ondersezgin@gmail.com>
Date:   2017-07-25T13:51:26Z

    CAMEL-5356 - handle if the value is an empty collection

----
","25/Jul/17 21:52;onders;{{<convertBodyTo type=""java.lang.String""/> }} in spring.xml file requires custom converter development. (once convertBodyTo is removed, all tests pass in camelTryAndCatch_now example. the issue is not related to try catch by the looks of it. it is complete conversion issue.)
because cxf returns {{org.apache.cxf.message.MessageContentsList}} as an empty list.

it is either required to write customer converter or accepting empty list collection as non-convertable object.
as [~davsclaus] mentioned in github comment like _an empty collection should still be convertable_, it is nice to have custom converter. the issue seems to be invalidated. I propose closing it by marking 'not a problem'","26/Jul/17 18:59;githubbot;Github user onders86 closed the pull request at:

    https://github.com/apache/camel/pull/1847
","21/Dec/17 17:41;eximius;Unfortunately, the this bug is still valid in some cases: https://issues.apache.org/jira/browse/CAMEL-12101",,,,,,,,,,,,
Invalid KeyStore format error is generated using camel websocket secure on osgi platform,CAMEL-6433,12651271,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,cmoulliard,cmoulliard,06/Jun/13 06:08,28/Apr/16 13:53,13/Mar/19 22:18,28/Apr/16 13:53,,,,,,,,,,2.18.0,,,,camel-mina2,camel-websocket,osgi,,,,1,,,,,,,,,"When the following camel websocket secure route is deployed on karaf, we get this error 

{code}
Caused by: java.io.IOException: Invalid keystore format
	at sun.security.provider.JavaKeyStore.engineLoad(JavaKeyStore.java:633)[:1.6.0_45]
	at sun.security.provider.JavaKeyStore$JKS.engineLoad(JavaKeyStore.java:38)[:1.6.0_45]
	at java.security.KeyStore.load(KeyStore.java:1185)[:1.6.0_45]
	at org.apache.camel.util.jsse.KeyStoreParameters.createKeyStore(KeyStoreParameters.java:175)[130:org.apache.camel.camel-core:2.10.0.redhat-60024]
	at org.apache.camel.util.jsse.KeyManagersParameters.createKeyManagers(KeyManagersParameters.java:108)[130:org.apache.camel.camel-core:2.10.0.redhat-60024]
	at org.apache.camel.util.jsse.SSLContextParameters.createSSLContext(SSLContextParameters.java:236)[130:org.apache.camel.camel-core:2.10.0.redhat-60024]
{code}

{code}

<beans xmlns=""http://www.springframework.org/schema/beans""
       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
       xmlns:camel=""http://camel.apache.org/schema/spring""
       xsi:schemaLocation=""
       http://www.springframework.org/schema/beans
          http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/spring
          http://camel.apache.org/schema/spring/camel-spring.xsd"">

    <bean id=""activemq"" class=""org.apache.activemq.camel.component.ActiveMQComponent"">
        <property name=""brokerURL"" value=""tcp://localhost:61616""/>
    </bean>

  <camel:sslContextParameters
      id=""sslContextParameters"">
    <camel:keyManagers
        keyPassword=""changeit"">
      <camel:keyStore
          resource=""jsse/websocket.jks""
          password=""changeit""/>
    </camel:keyManagers>
    <camel:trustManagers>
      <camel:keyStore
          resource=""jsse/websocket.jks""
          password=""changeit""/>
    </camel:trustManagers>
  </camel:sslContextParameters>

  <camelContext xmlns=""http://camel.apache.org/schema/spring"">
    <packageScan>
      <package>com.fusesource.examples.camel.websocket.secure</package>
    </packageScan>
  </camelContext>

...

           from(""activemq:topic:newsTopic"").routeId(""fromJMStoWebSocketSecureNews"")
             .log(LoggingLevel.DEBUG, "">> News info received : ${body}"")
             .delay(5000)
             .to(""websocket://0.0.0.0:8443/newsTopic?sendToAll=true"" +
                     ""&sslContextParametersRef=#sslContextParameters&staticResources=classpath:webapp"");
{code}",,,,,,,,,,,,,,,,,,,,,06/Jun/13 08:23;cmoulliard;Screen Shot 2013-06-06 at 10.21.53.png;https://issues.apache.org/jira/secure/attachment/12586468/Screen+Shot+2013-06-06+at+10.21.53.png,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-11-18 18:24:09.662,,,no_permission,,Unknown,,,,,,,,,,,331597,,,Thu Apr 28 13:53:34 UTC 2016,,,,,,,0|i1l7fb:,331928,,,,,,,,,06/Jun/13 06:09;cmoulliard;Project works fine using mvn camel:run with same reources,"06/Jun/13 08:18;cmoulliard;Error occurs when keystore load the password

{code}
        if (this.resource == null) {
            ks.load(null, ksPassword);
        } else {
            InputStream is = this.resolveResource(this.parsePropertyValue(this.resource));
            ks.load(is, ksPassword); // ERROR OCCURS HERE
        }
{code}",06/Jun/13 08:22;cmoulliard;Could this issue be due to the InputStream created by Felix (see screenshot) ?,"18/Nov/14 18:24;pberkman;I get the same issue using Java DSL route and Mina2:

{code}
            if (isTLS) {
                
                MessagingGroup mg = ConfigurationCache.getEntry(instanceName).getMessagingSettings();

                KeyStoreParameters ksp = new KeyStoreParameters();
                ksp.setResource(mg.getSecurityKeystoreFile());
                ksp.setPassword(mg.getSecurityKeystorePass());
                
                KeyManagersParameters kmp = new KeyManagersParameters();
                kmp.setKeyStore(ksp);
                kmp.setKeyPassword(mg.getSecurityPrivateKeyPass());
                
                KeyStoreParameters tsp = new KeyStoreParameters();
                tsp.setResource(mg.getSecurityTruststoreFile());
                tsp.setPassword(mg.getSecurityTruststorePass());
                
                TrustManagersParameters tmp = new TrustManagersParameters();
                tmp.setKeyStore(tsp);
                
                SSLContextServerParameters scsp = new SSLContextServerParameters();
                scsp.setClientAuthentication(ClientAuthentication.REQUIRE.name());
                
                SSLContextParameters scp = new SSLContextParameters();
                scp.setServerParameters(scsp);
                scp.setKeyManagers(kmp);
                scp.setTrustManagers(tmp);

                minaCfg.setSslContextParameters(scp);
            }
{code}

{code}
Exception:
ERROR: Bundle com.nextgate.ms.components.adapters.ngms-listener-hl7v2-mllp [283] Error starting mvn:com.nextgate.ms.components.adapters/ngms-listener-h
l7v2-mllp/9.0.0 (org.osgi.framework.BundleException: Activator start error in bundle com.nextgate.ms.components.adapters.ngms-listener-hl7v2-mllp [283]
.)
java.io.IOException: Invalid keystore format
        at sun.security.provider.JavaKeyStore.engineLoad(JavaKeyStore.java:650)
        at sun.security.provider.JavaKeyStore$JKS.engineLoad(JavaKeyStore.java:55)
        at java.security.KeyStore.load(KeyStore.java:1214)
        at org.apache.camel.util.jsse.KeyStoreParameters.createKeyStore(KeyStoreParameters.java:175)
        at org.apache.camel.util.jsse.KeyManagersParameters.createKeyManagers(KeyManagersParameters.java:108)
        at org.apache.camel.util.jsse.SSLContextParameters.createSSLContext(SSLContextParameters.java:256)
        at org.apache.camel.component.mina2.Mina2Consumer.setupSocketProtocol(Mina2Consumer.java:159)
        at org.apache.camel.component.mina2.Mina2Consumer.<init>(Mina2Consumer.java:78)
        at org.apache.camel.component.mina2.Mina2Endpoint.createConsumer(Mina2Endpoint.java:55)
        at org.apache.camel.impl.EventDrivenConsumerRoute.addServices(EventDrivenConsumerRoute.java:65)
        at org.apache.camel.impl.DefaultRoute.onStartingServices(DefaultRoute.java:80)
        at org.apache.camel.impl.RouteService.warmUp(RouteService.java:134)
        at org.apache.camel.impl.DefaultCamelContext.doWarmUpRoutes(DefaultCamelContext.java:2263)
        at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:2193)
        at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:1981)
        at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1851)
        at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1683)
        at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
        at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1651)
        at com.nextgate.ms.bundlelib.interfaces.NGMSBundleActivator.startup(NGMSBundleActivator.java:80)
        at com.nextgate.ms.component.adapter.listener.hl7mllp.routes.Activator.start(Activator.java:55)
        at org.apache.felix.framework.util.SecureAction.startActivator(SecureAction.java:645)
        at org.apache.felix.framework.Felix.activateBundle(Felix.java:2146)
        at org.apache.felix.framework.Felix.startBundle(Felix.java:2064)
        at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1291)
        at org.apache.felix.framework.FrameworkStartLevelImpl.run(FrameworkStartLevelImpl.java:304)
        at java.lang.Thread.run(Thread.java:745)
ERROR: Bundle com.nextgate.ms.components.adapters.ngms-sender-hl7v2-mllp [284] Error starting mvn:com.nextgate.ms.components.adapters/ngms-sender-hl7v2
-mllp/9.0.0 (org.osgi.framework.BundleException: Activator start error in bundle com.nextgate.ms.components.adapters.ngms-sender-hl7v2-mllp [284].)
org.apache.camel.FailedToCreateProducerException: Failed to create Producer for endpoint: Endpoint[mina2:tcp://192.168.0.200:8001]. Reason: java.io.IOE
xception: Invalid keystore format
        at org.apache.camel.impl.ProducerCache.doGetProducer(ProducerCache.java:409)
        at org.apache.camel.impl.ProducerCache.acquireProducer(ProducerCache.java:123)
        at org.apache.camel.processor.SendProcessor.doStart(SendProcessor.java:202)
        at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
        at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
        at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
        at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
        at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:89)
        at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:79)
        at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
        at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
        at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
        at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
        at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:89)
        at org.apache.camel.processor.RedeliveryErrorHandler.doStart(RedeliveryErrorHandler.java:1154)
        at org.apache.camel.support.ChildServiceSupport.start(ChildServiceSupport.java:41)
        at org.apache.camel.support.ChildServiceSupport.start(ChildServiceSupport.java:28)
        at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
        at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
        at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
        at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:89)
        at org.apache.camel.processor.interceptor.DefaultChannel.doStart(DefaultChannel.java:153)
        at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
        at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
        at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
        at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
        at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:61)
        at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
        at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:89)
        at org.apache.camel.processor.MulticastProcessor.doStart(MulticastProcessor.java:993)
        at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
        at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
        at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
        at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
        at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:89)
        at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:79)
        at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
        at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
        at org.apache.camel.impl.RouteService.startChildService(RouteService.java:334)
        at org.apache.camel.impl.RouteService.warmUp(RouteService.java:158)
        at org.apache.camel.impl.DefaultCamelContext.doWarmUpRoutes(DefaultCamelContext.java:2263)
        at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:2193)
        at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:1981)
        at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1851)
        at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1683)
        at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
        at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1651)
        at com.nextgate.ms.bundlelib.interfaces.NGMSBundleActivator.startup(NGMSBundleActivator.java:80)
        at com.nextgate.ms.component.adapter.sender.hl7mllp.routes.Activator.start(Activator.java:56)
        at org.apache.felix.framework.util.SecureAction.startActivator(SecureAction.java:645)
        at org.apache.felix.framework.Felix.activateBundle(Felix.java:2146)
        at org.apache.felix.framework.Felix.startBundle(Felix.java:2064)
        at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1291)
        at org.apache.felix.framework.FrameworkStartLevelImpl.run(FrameworkStartLevelImpl.java:304)
        at java.lang.Thread.run(Thread.java:745)
Caused by: java.io.IOException: Invalid keystore format
        at sun.security.provider.JavaKeyStore.engineLoad(JavaKeyStore.java:650)
        at sun.security.provider.JavaKeyStore$JKS.engineLoad(JavaKeyStore.java:55)
        at java.security.KeyStore.load(KeyStore.java:1214)
        at org.apache.camel.util.jsse.KeyStoreParameters.createKeyStore(KeyStoreParameters.java:175)
        at org.apache.camel.util.jsse.KeyManagersParameters.createKeyManagers(KeyManagersParameters.java:108)
        at org.apache.camel.util.jsse.SSLContextParameters.createSSLContext(SSLContextParameters.java:256)
        at org.apache.camel.component.mina2.Mina2Producer.setupSocketProtocol(Mina2Producer.java:313)
        at org.apache.camel.component.mina2.Mina2Producer.<init>(Mina2Producer.java:90)
        at org.apache.camel.component.mina2.Mina2Endpoint.createProducer(Mina2Endpoint.java:49)
        at org.apache.camel.impl.ProducerCache.doGetProducer(ProducerCache.java:405)
        ... 54 more
{code}",28/Apr/16 13:14;davsclaus;We need to inject CamelContext on the SSL parameters so when it attempts to load those resources it can have access to the bundle classloader (via Camel's ClassResolver),28/Apr/16 13:44;davsclaus;Also I think we should let the ClassResolver load the resource first instead of trying the TCCL and whatnot known tricks.,28/Apr/16 13:53;davsclaus;There were a bunch of changes so pushing this to master for know,,,,,,,,,,,,,,,,,
Set XsltBuilder allowStax attribute to be true by default,CAMEL-7130,12688507,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,13/Jan/14 08:14,25/Jan/16 21:53,13/Mar/19 22:18,13/Jan/14 09:46,,,,,,,,,,2.11.4,2.12.3,2.13.0,,camel-xslt,,,,,,0,,,,,,,,,It could be more effective and safe to use the stax API by default.,,,,,,,,,,,,,,,,CAMEL-9534,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,367526,,,Mon Jan 13 09:46:22 UTC 2014,,,,,,,0|i1rclz:,367834,,,,,,,,,"13/Jan/14 09:46;njiang;Applied the patch into master, camel-2.12.x and camel-2.11.x branches.",,,,,,,,,,,,,,,,,,,,,,,
HTTP 1.1 Host header not set correctly with camel-http4,CAMEL-5757,12613916,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,trembmax,trembmax,29/Oct/12 16:13,30/Dec/15 15:35,13/Mar/19 22:18,02/Nov/12 07:44,2.10.1,,,,,,,,,2.10.3,2.11.0,2.9.5,,camel-http,,,,,,0,,,,,,,,,"The HTTP 1.1 Host header is not set correctly when using the camel-http4 component as a proxy with bridgeEnpoint=true.

The original request Host header is set in the proxied request instead of the host of the service requested by the proxy (ref: http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html section 14.23).

This simple route shows the problem:

 <route autoStartup=""true"" id=""TestHost"" xmlns:ns2=""http://camel.apache.org/schema/web"" xmlns=""http://camel.apache.org/schema/spring"">
        <from uri=""jetty:http://0.0.0.0:8090/TestHost""/>
        <to uri=""https4://www.google.com?bridgeEndpoint=true&amp;throwExceptionOnFailure=false""/>
 </route> 

This is what I get in the log:

INFO   | jvm 1    | 2012/10/26 14:52:48 | [    qtp31541880-35 - /TestHost] DefaultClientConnection        DEBUG Sending request: GET / HTTP/1.1
INFO   | jvm 1    | 2012/10/26 14:52:48 | [    qtp31541880-35 - /TestHost] wire                           DEBUG >> ""GET / HTTP/1.1[\r][\n]""
INFO   | jvm 1    | 2012/10/26 14:52:48 | [    qtp31541880-35 - /TestHost] wire                           DEBUG >> ""breadcrumbId: ID-localhost-1329-1351277552803-0-2[\r][\n]""
INFO   | jvm 1    | 2012/10/26 14:52:48 | [    qtp31541880-35 - /TestHost] wire                           DEBUG >> ""User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:15.0) Gecko/20100101 Firefox/15.0[\r][\n]""
INFO   | jvm 1    | 2012/10/26 14:52:48 | [    qtp31541880-35 - /TestHost] wire                           DEBUG >> ""Accept-Encoding: gzip, deflate[\r][\n]""
INFO   | jvm 1    | 2012/10/26 14:52:48 | [    qtp31541880-35 - /TestHost] wire                           DEBUG >> ""Host: localhost:8090[\r][\n]""
INFO   | jvm 1    | 2012/10/26 14:52:48 | [    qtp31541880-35 - /TestHost] wire                           DEBUG >> ""Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8[\r][\n]""
INFO   | jvm 1    | 2012/10/26 14:52:48 | [    qtp31541880-35 - /TestHost] wire                           DEBUG >> ""Accept-Language: en-us,en;q=0.5[\r][\n]""
INFO   | jvm 1    | 2012/10/26 14:52:48 | [    qtp31541880-35 - /TestHost] wire                           DEBUG >> ""Connection: Keep-Alive[\r][\n]""
INFO   | jvm 1    | 2012/10/26 14:52:48 | [    qtp31541880-35 - /TestHost] wire                           DEBUG >> ""[\r][\n]""
",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-10-30 08:49:44.317,,,no_permission,,Unknown,,,,,,,,,,,252806,,,Wed Dec 30 15:35:46 UTC 2015,,,,,,,0|i0d8cn:,75129,,,,,,,,,"30/Oct/12 08:49;njiang;Hi,

You can remove the header ""host"" from the message to avoid the bridgeEndpoint resend the message for you.
I think we could help people to filter these header if the bridgeEndpoint option is set to be true.

Willem
","02/Nov/12 07:44;njiang;Applied patch into trunk, camel-2.10.x and camel-2.9.x branches.","30/Dec/15 15:35;hu2008yinxiang;Hi, [~njiang], I have met the problem [https://issues.apache.org/jira/browse/CAMEL-9462], would you mind help me and have a look, please.",,,,,,,,,,,,,,,,,,,,,
Camel Jetty chunked parameter appears broken,CAMEL-5821,12617505,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,cott@internetstaff.com,cott@internetstaff.com,24/Nov/12 22:57,12/Nov/15 03:50,13/Mar/19 22:18,25/Jan/13 15:08,2.10.0,2.10.1,2.10.2,2.9.3,2.9.4,,,,,2.10.4,2.11.0,2.9.6,,camel-jetty,,,,,,0,,,,,,,,,"I have several Jetty endpoints that use ?chunked=false

They all stopped working in 2.9.3. The parameter is ignored and chunked encoding is used.

I'm suspicious of CAMEL-5367 and CAMEL-5274 due to the timing, but nothing else.
",,,,,,,,,,,,,,CAMEL-9299,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-11-25 09:22:47.432,,,no_permission,,Unknown,,,,,,,,,,,291990,,,Fri Jan 25 15:08:03 UTC 2013,,,,,,,0|i0rivr:,158703,,,,,,,,,"25/Nov/12 09:22;davsclaus;What versions of Camel have you tested with? Have you tried the latest releases?
","25/Nov/12 16:52;cott@internetstaff.com;2.9.3, 2.9.4, 2.10.0, 2.10.1, and 2.10.2 :)
","26/Nov/12 04:49;njiang;Can I have a look at your route ?
If you don't set the length of message, Jetty will use the chunked encoding by default.
","07/Dec/12 15:03;cott@internetstaff.com;Willem, I'm not entirely sure what you're asking to see?

I'm not relying on a default, I'm setting chunked=false. This works up through 2.9.2.

","07/Dec/12 15:20;njiang;Hi Cott,

I want to see how do you use the camel-jetty component.
Maybe a simple test case can help me dig the issue.

","25/Jan/13 15:08;njiang;Applied the patch into trunk, camel-2.10.x and camel-2.9.x branches.",,,,,,,,,,,,,,,,,,
Using simple language OGNL expressions doesn't work for Bean Binding when a field is null,CAMEL-6687,12666309,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,koscejev,koscejev,30/Aug/13 11:50,20/Oct/15 13:42,13/Mar/19 22:18,01/Sep/13 09:15,2.11.1,,,,,,,,,2.11.2,2.12.0,,,camel-core,,,,,,0,bean,method,ognl,simple,,,,,"The following functionality doesn't work, when one of the fields is null: 

http://camel.apache.org/bean-binding.html
{quote}
You can also use the OGNL support of the Simple expression language. Now suppose the message body is an object which has a method named asXml. To invoke the asXml method we can do as follows:
{code}.bean(OrderService.class, ""doSomething(${body.asXml}, ${header.high})""){code}

Instead of using .bean as shown in the examples above, you may want to use .to instead as shown:
{code}.to(""bean:orderService?method=doSomething(${body.asXml}, ${header.high})""){code}
{quote}

A test case is provided. Instead of getting values of fields ""foo"" and ""bar"" respectively, the first parameter (which should be null) receives value of pojo.toString(), while the second parameter receives the correct value.",,,,,,,,,,,,,,,,,,,,,30/Aug/13 11:51;koscejev;CamelBeanMethodOgnlFieldTest.java;https://issues.apache.org/jira/secure/attachment/12600770/CamelBeanMethodOgnlFieldTest.java,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-09-01 09:15:00.131,,,no_permission,,Unknown,,,,,,,,,,,346248,,,Mon Sep 02 16:46:51 UTC 2013,,,,,,,0|i1nphj:,346549,,,,,,,,,01/Sep/13 09:15;davsclaus;Thanks for reporting and providing a unit test.,"02/Sep/13 16:46;koscejev;No, thank you for fixing it. I'm always impressed how fast these are fixed. :)
Looking forward to 2.12...",,,,,,,,,,,,,,,,,,,,,,
RabbitMQ Producer not able to use the default exchange,CAMEL-7031,12682232,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,jrfoster67,jrfoster67,02/Dec/13 21:53,10/Jun/15 17:37,13/Mar/19 22:18,03/Dec/13 03:07,2.12.2,,,,,,,,,2.12.3,,,,camel-rabbitmq,,,,,,0,,,,,,,,,"In RabbitMQ, the default exchange is a direct exchange with no name (empty string) and is pre-declared by the broker. It has one special property that makes it very useful for simple applications: every queue that is created is automatically bound to it with a routing key which is the same as the queue name.  This is especially useful in RPC style messaging when the producer specifies a REPLY_TO queue name that was created ""exclusive""  Since RabbitMQ binds that queue onto the default exchange, it makes RPC much simpler.

However, the camel rabbitmq producer throws an IllegalArgumentException if the exchange name is empty, which prevents this simple RPC exchange.  The fix for this is simple, just don't throw that IllegalArgumentException if the exchange name was set to empty string.

The same problem may exists with the Consumer as well.

This python script will send an rpc request (from RabbitMQ in Action)
{code}
import time, json, pika

creds_broker = pika.PlainCredentials(""guest"", ""guest"")
conn_params = pika.ConnectionParameters(""localhost"",
                                         virtual_host = ""/"",
                                         credentials = creds_broker)
conn_broker = pika.BlockingConnection(conn_params)
channel = conn_broker.channel()

msg = json.dumps({""client_name"": ""RPC Client 1.0"",
                  ""time"" : time.time()})
result = channel.queue_declare(exclusive=True, auto_delete=True)
msg_props = pika.BasicProperties()
msg_props.reply_to = result.method.queue
msg_props.content_type = ""application/json""
msg_props.correlation_id = ""1""
msg_props.delivery_mode = 2

channel.basic_publish(body=msg,
                      exchange=""rpc"",
                      properties=msg_props,
                      routing_key=""ping"")

print ""Sent 'Ping' RPC call.  Waiting for reply...""

def reply_callback(channel, method, header, body):
     """"""Receives RPC server replies.""""""
     print ""RPC Reply --- "" + body
     channel.stop_consuming()

channel.basic_consume(reply_callback,
                      queue=result.method.queue,
                      consumer_tag=result.method.queue)

channel.start_consuming()
{code}

This route would be what I would want to do when consuming from Rabbit the rpc call and sending back a response:
{code}
        from(""rabbitmq://192.168.213.130/rpc?queue=ping&routingKey=ping&durable=True&autoDelete=False&autoAck=False&username=guest&password=guest"")
            .log(""Incoming Headers: ${headers}"")
            .setHeader(""rabbitmq.ROUTING_KEY"", header(""rabbitmq.REPLY_TO""))
            .removeHeader(""rabbitmq.REPLY_TO"")
            .removeHeader(""rabbitmq.EXCHANGE_NAME"")
            .setBody(simple(""Pong!""))
            .to(""rabbitmq://192.168.213.130/?username=guest&password=guest"");

{code}
If I remove the illegalargumentexception, the code works as expected.",,,,,,,,,,,,,,CAMEL-7003,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-12-03 03:07:41.597,,,no_permission,,Unknown,,,,,,,,,,,361489,,,Wed Jun 10 17:37:28 UTC 2015,,,,,,,0|i1qbav:,361787,,,,,,,,,03/Dec/13 03:07;njiang;Apply the patch into master and camel-2.12.x branch,"10/Jun/15 17:37;splazit;I'm camel-rabbitmq component as as rabbitmq consumer. The consumer is consuming message from a default exchange """" with a routing key. When I started up the app, I got the exception ""Caused by: java.lang.IllegalArgumentException: No URI path as the exchangeName for the RabbitMQEndpoint"". 
The camel version I'm using is 2.15.2.

Regards,",,,,,,,,,,,,,,,,,,,,,,
Blueprint route not shutdown when using OSGi service processor,CAMEL-7144,12689995,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,DominikAmon,DominikAmon,21/Jan/14 10:31,15/Feb/15 16:58,13/Mar/19 22:18,15/Feb/15 16:58,2.12.2,,,,,,,,,2.15.0,,,,camel-core,,,,,,0,,,,,,,,,"The route description uses .toString() when shutting down. This causes the shutdown to block if a proxied OSGi service is used as processor (in XML DSL <process ref=""osgiService/>) and the service is not present at the time the route is shut down.

See http://camel.465427.n5.nabble.com/Blueprint-route-not-shutdown-when-using-OSGi-service-processor-td5746114.html",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-02-06 14:32:17.503,,,no_permission,,Advanced,,,,,,,,,,,368952,,,Sun Feb 15 16:58:29 UTC 2015,,,,,,,0|i1rlbz:,369256,,,,,,,,,"06/Feb/14 14:32;davsclaus;As its a toString on the osgi proxy that causes it to call the remote service that is no longer, then its a bit more tricky.

We could either
- avoid any toString calls, but then non OSGi proxied beans can't have toString description in logs etc as today.
- detect if its a proxy and avoid toString
- something else",15/Feb/15 16:58;davsclaus;We now do not do a toString on the processor instance,,,,,,,,,,,,,,,,,,,,,,
camel-jclouds - Does not work in OSGi - Seems META-INF/services loader may not work,CAMEL-6134,12635569,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,06/Mar/13 13:26,15/Feb/15 15:49,13/Mar/19 22:18,15/Feb/15 15:49,2.11.0,,,,,,,,,2.15.0,,,,camel-jclouds,karaf,,,,,0,,,,,,,,,"The BlobStoreBlueprintRouteTest test fails in tests/camel-itest-osgi, when running
{code}
mvn clean test -Dtest=BlobStoreBlueprintRouteTest
{code}

It cannot find the transient provider, which seems to be located in jclouds-blobstore JAR in the META/INF/services directory.

org.jclouds.blobstore.TransientApiMetadata

Migrating to the new builder API I get this error
{code}
java.util.NoSuchElementException: key [transient] not in the list of providers or apis: {}
	at org.jclouds.ContextBuilder.newBuilder(ContextBuilder.java:172)
	at org.apache.camel.itest.osgi.jclouds.BlobStoreBlueprintRouteTest.doPreSetup(BlobStoreBlueprintRouteTest.java:52)
{code}

Not sure what it takes to get service loader to work in OSGi / Karaf.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-03-06 13:34:48.113,,,no_permission,,Unknown,,,,,,,,,,,316062,,,Sun Feb 15 15:49:38 UTC 2015,,,,,,,0|i1ijev:,316405,,,,,,,,,"06/Mar/13 13:34;iocanel;The service loader doesn't work inside OSGi. 
So I've added some bits to jclouds itself so that it registers its own stuff founds under META-INF/service to the Service Registry. I'll have a look and see why its borked.",04/Mar/14 07:07;davsclaus;[~iocanel] wonder if this is still a problem with jclouds 1.7.1 ?,15/Feb/15 15:49;davsclaus;The test works now,,,,,,,,,,,,,,,,,,,,,
Using custom beans with @ManagedResource shows unavailable standard attributes,CAMEL-7018,12681541,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,27/Nov/13 11:47,10/Dec/14 16:21,13/Mar/19 22:18,27/Nov/13 14:14,,,,,,,,,,2.11.3,2.12.3,2.13.0,,camel-core,jmx,,,,,0,,,,,,,,,"If you have a custom bean with @ManagedResource and your own attr/ops then Camel adds its default attrs/ops which it should not as they are not available.

See screenshot",,,,,,,,,,,,,,,,,,,,,27/Nov/13 11:48;davsclaus;jmx-custom-bean.png;https://issues.apache.org/jira/secure/attachment/12616029/jmx-custom-bean.png,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-12-10 16:21:56.215,,,no_permission,,Unknown,,,,,,,,,,,360805,,,Wed Dec 10 16:21:56 UTC 2014,,,,,,,0|i1q73j:,361104,,,,,,,,,"10/Dec/14 16:21;Matteo Mortari;Hi, this solves for the use case in description 'custom bean'.
However if I define a +custom Processor+, possibly I annotate with @ManagedResource to expose my own attr/ops, but shouldn't this case _indeed_ expose also the Camel's default attrs/ops for a ManagedProcessor?

The problem I believe is this line, modified in the changelog of this bug:
https://github.com/apache/camel/blob/camel-2.13.x/camel-core/src/main/java/org/apache/camel/management/DefaultManagementMBeanAssembler.java#L63
would actually make expose for a custom Processor _only_ my own annotated attr/ops. But being my custom Processor a ManagedProcessor at runtime, I would have expected it to expose on JMX both the custom and Camel's default attr/ops.

It seems to me same problem described here:
http://camel.465427.n5.nabble.com/exposing-custom-jmx-properties-td5713375.html
And same I experienced today.

I would like to know if this is intended, and how to mitigate for a custom processor, please?
I think this could be a sort of unexpected behavior to some users, and from the faq http://camel.apache.org/why-is-my-processor-not-showing-up-in-jconsole.html to me at least is not clear how to mitigate for a custom processor.
Thanks",,,,,,,,,,,,,,,,,,,,,,,
NullPointerException at FileInputStreamCache.<init>(FileInputStreamCache.java:52) in connection with DataFormat.marshal,CAMEL-7055,12683788,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,forsthofer,forsthofer,10/Dec/13 07:37,09/Dec/14 07:23,13/Mar/19 22:18,14/Dec/13 10:06,2.11.2,2.12.2,,,,,,,,2.12.3,2.13.0,,,camel-core,,,,,,0,,,,,,,,,"Stack Trace:
{code}
Caused by: java.lang.NullPointerException
	at org.apache.camel.converter.stream.FileInputStreamCache.<init>(FileInputStreamCache.java:52)
	at org.apache.camel.converter.stream.CachedOutputStream.newStreamCache(CachedOutputStream.java:199)
	at org.apache.camel.processor.MarshalProcessor.process(MarshalProcessor.java:79)
{code}

Error occurs, if streamCache is true and the stream is put into the file system because the spool threashold is reached. 

The following is happening:
The Marshall Processor handels over to the DataFromat.marshal method a CachedOutputStream instance. In the marschal method data are written into the output stream, when the spool threshold is reached the data are streamed into the file system. Finally the output stream is closed and the CachedOutputStream instance deletes the cached file during closing. The next processor tries to read the FileInputStreamCache and gets the NullPointerException.

Currently this problem can occur in the following DataFormat classes (because they close the stream, which is actually correct):

GzipDataFormat
CryptoDataFormat
PGPDataFormat
SerializationDataFormat
XMLSecurityDataFormat
ZipDataFormat

My proposal is not to delete the cached file during closing the output stream. The cached file shall only be closed on the onCompletion event of the route. See attached patch.


",,,,,,,,,,,,,,CAMEL-8134,,,,,,,10/Dec/13 11:58;forsthofer;0001-bug-CachedOutputStream-close.patch;https://issues.apache.org/jira/secure/attachment/12618030/0001-bug-CachedOutputStream-close.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-12-14 10:06:50.608,,,no_permission,,Unknown,,,,,,,,,,,362860,,,Fri Dec 20 07:07:20 UTC 2013,,,Patch Available,,,,0|i1qjrj:,363166,,,,,,,,,14/Dec/13 10:06;davsclaus;Thanks for reporting and the patch.,"18/Dec/13 02:59;njiang;As camel-http and camel-http4 is use the CachedOutputStream to cache the response inputstream, the change could cause a side effect on that part, which means you cannot access the input stream after the exchange is done just like this.
{code}
String out = template.requestBody(""http://localhost:{{port}}/myserver"", body, String.class);
{code}
In this way we need to delete the temp file when the input stream is closed, I will commit a quick fix shortly.","20/Dec/13 07:07;forsthofer;Hi Willem,
I am not sure if it is a good idea to generally delete the temp file when the input stream is closed. If you have streamCache=true on the route then the inputStream can be passed from one processor to the next and in between the input stream is reset so that it can be reused in the next processer. The resetting creates a new FileInputStream on the temp file. 

Regards Franz",,,,,,,,,,,,,,,,,,,,,
NULL values are not supported in named parameters,CAMEL-6473,12654096,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,srg,srg,21/Jun/13 07:00,10/Nov/14 21:26,13/Mar/19 22:18,23/Jun/13 07:39,2.11.0,,,,,,,,,2.11.1,2.12.0,,,camel-sql,,,,,,0,,,,,,,,,"Due to the bug in the DefaultSqlPrepareStatementStrategy there no ability to use NULL values.

Following query will be failed, if we try to use NULL  as a parameter value:

bq. select a, b from foo where (:#param1 IS NOT NULL AND a > 12 ) OR (:#param2 IS NOT NULL AND b > 12)

We'll get an error: 
{quote}
Caused by: java.sql.SQLException: Number of parameters mismatch. Expected: 2, was:1
at org.apache.camel.component.sql.DefaultSqlPrepareStatementStrategy.populateStatement(DefaultSqlPrepareStatementStrategy.java:132) ~[camel-sql-2.11.0.jar:2.11.0]
	at org.apache.camel.component.sql.SqlProducer$1.doInPreparedStatement(SqlProducer.java:74) ~[camel-sql-2.11.0.jar:2.11.0]
	at org.apache.camel.component.sql.SqlProducer$1.doInPreparedStatement(SqlProducer.java:57) ~[camel-sql-2.11.0.jar:2.11.0]
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:587) ~[spring-jdbc-3.1.4.RELEASE.jar:3.1.4.RELEASE]
{quote}


Fix is quite simple: iterator implementation (returned by DefaultSqlPrepareStatementStrategy.createPopulateIterator()) should be changed as follows:

{code:java}
                return new Iterator<Object>() {
                    private NamedQueryParser parser = new NamedQueryParser(query);
                    private String nextParam;
                    private boolean done;

                    @Override
                    public boolean hasNext() {
                        if (done) {
                            return false;
                        }
                        
                        if (nextParam == null) {
                            nextParam = parser.next();
                            if (nextParam == null) {
                                done = true;
                            }
                        }
                        return nextParam != null;
                    }

                    @Override
                    public Object next() {
                        if(!hasNext()){
                            throw new NoSuchElementException();
                        }
                        
                        boolean contains = bodyMap != null ? bodyMap.containsKey(nextParam) : false;
                        contains |= headerMap != null ? headerMap.containsKey(nextParam) : false;
                        if (!contains) {
                            throw new RuntimeExchangeException(""Cannot find key ["" + nextParam + ""] in message body or headers to use when setting named parameter in query ["" + query + ""]"", exchange);
                        }
                            
                        // get from body before header
                        Object next = bodyMap != null ? bodyMap.get(nextParam) : null;
                        if (next == null) {
                            next = headerMap != null ? headerMap.get(nextParam) : null;
                        }

                        nextParam = null;
                        return next;
                    }

                    @Override
                    public void remove() {
                        // noop
                    }
                };
{code}
",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-06-23 07:39:47.615,,,no_permission,,Unknown,,,,,,,,,,,334373,,,Sun Jun 23 07:39:47 UTC 2013,,,,,,,0|i1lohz:,334699,,,,,,,,,23/Jun/13 07:39;davsclaus;Thanks for reporting and with the patch.,,,,,,,,,,,,,,,,,,,,,,,
Race condition in AggregatorProcessor recovery sometimes causes duplicates,CAMEL-6097,12633699,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ben.truitt,ben.truitt,22/Feb/13 22:28,07/Nov/14 12:53,13/Mar/19 22:18,01/Mar/13 09:49,2.9.2,,,,,,,,,2.10.5,2.11.0,2.9.6,,camel-core,,,,,,11,,,,,,,,,"There seems to be a race condition in org.apache.camel.processor.aggregate.AggregateProcessor's RecoverTask.  That task calls recoverable.scan() to find Exchanges that may need to be recovered. Since scan() might return Exchanges that are actually just in progress, the RecoverTask then checks to see if the Exchange really is in progress.  It does this by calling inProgressCompleteExchanges.contains(exchangeId).  However, that collection may have been modified during the time between when scan() returned and when contains() is called.  This would happen if the in-progress Exchange completes before contains() is called.  In that situation, inProgress would evaluate to false, so the Exchange would be recovered.  This results in a duplicate Exchange being output by the Aggregator component. 

One possible solution might be to prevent updating the inProgressCompleteExchanges during the critical section. Another possible solution might be to copy inProgressCompleteExchanges before calling scan().  I'm sure that there are other ways to deal with this also.
",,,,,,,,,,,,,,CAMEL-8010,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-03-01 09:49:20.813,,,no_permission,,Unknown,,,,,,,,,,,314194,,,Fri Mar 01 09:49:20 UTC 2013,,,,,,,0|i1i7wf:,314539,,,,,,,,,"01/Mar/13 09:49;davsclaus;Thanks for reporting, and providing ideas for a solution.",,,,,,,,,,,,,,,,,,,,,,,
Missing packages from camel-quartz2.jar,CAMEL-6789,12670674,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,bvahdat,abaldoni,abaldoni,26/Sep/13 09:57,04/Aug/14 07:43,13/Mar/19 22:18,26/Sep/13 14:49,2.12.0,2.12.1,,,,,,,,2.12.2,2.13.0,,,camel-quartz2,,,,,,0,,,,,,,,,"The jar camel-quartz2.jar from both maven and the Camel binary zip available on camel.apache.org is missing the following packages:

org.apache.camel.pollconsumer.quartz2
org.apache.camel.routepolicy.quartz2

Both are present in the source code.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-09-26 14:49:40.193,,,no_permission,,Unknown,,,,,,,,,,,350503,,,Thu Sep 26 14:49:40 UTC 2013,,,,,,,0|i1ofnj:,350796,,,,,,,,,26/Sep/13 14:49;bvahdat;Thanks for reporting.,,,,,,,,,,,,,,,,,,,,,,,
Enrich EIP may cause async callback done twice,CAMEL-5981,12628416,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,19/Jan/13 15:42,17/Jul/14 14:35,13/Mar/19 22:18,19/Jan/13 16:30,,,,,,,,,,2.10.4,2.11.0,2.9.6,,camel-core,eip,,,,,0,,,,,,,,,"The Enricher may call callback.done(false) two times if there was an exception during enrichment.

Noticed this problem during investigation of See CAMEL-5905",,,,,,,,,,,,,,CAMEL-7609,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,305570,,,2013-01-19 15:42:06.0,,,,,,,0|i18fe7:,257296,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
IAE when you have a nested placeholder that starts and ends with {{ and }},CAMEL-7189,12694283,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,mattnathan,mattnathan,10/Feb/14 15:20,19/Jun/14 08:53,13/Mar/19 22:18,19/Jun/14 08:53,2.12.2,,,,,,,,,2.12.4,2.13.2,2.14.0,,camel-core,,,,,,1,,,,,,,,,"Test case: https://gist.github.com/mattnathan/7706ebdce8aa51ebc3c6

When you have a uri that has a placeholder in it and that placeholder is of the form {{\{\{prefix\}\}something\{\{suffix\}\}}} then you get an IllegalArgumentException of the form:

{noformat}
org.apache.camel.FailedToCreateRouteException: Failed to create route route1 at: >>> To[{{value}}] <<< in route: Route(route1)[[From[direct:test]] -> [To[{{value}}]]] because of Expecting }} but found end of string from text: scheme}}:{{path
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:912)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:177)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:770)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:1914)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1670)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1544)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1512)
	at org.apache.camel.test.junit4.CamelTestSupport.startCamelContext(CamelTestSupport.java:477)
	at org.apache.camel.test.junit4.CamelTestSupport.doSetUp(CamelTestSupport.java:311)
	at org.apache.camel.test.junit4.CamelTestSupport.setUp(CamelTestSupport.java:217)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:74)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:202)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:65)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:120)
Caused by: java.lang.IllegalArgumentException: Expecting }} but found end of string from text: scheme}}:{{path
	at org.apache.camel.component.properties.DefaultPropertiesParser.doParseUri(DefaultPropertiesParser.java:90)
	at org.apache.camel.component.properties.DefaultPropertiesParser.parseUri(DefaultPropertiesParser.java:51)
	at org.apache.camel.component.properties.DefaultPropertiesParser.parseUri(DefaultPropertiesParser.java:38)
	at org.apache.camel.component.properties.DefaultPropertiesParser.createPlaceholderPart(DefaultPropertiesParser.java:189)
	at org.apache.camel.component.properties.DefaultPropertiesParser.doParseUri(DefaultPropertiesParser.java:105)
	at org.apache.camel.component.properties.DefaultPropertiesParser.parseUri(DefaultPropertiesParser.java:51)
	at org.apache.camel.component.properties.PropertiesComponent.parseUri(PropertiesComponent.java:160)
	at org.apache.camel.component.properties.PropertiesComponent.parseUri(PropertiesComponent.java:119)
	at org.apache.camel.impl.DefaultCamelContext.resolvePropertyPlaceholders(DefaultCamelContext.java:1128)
	at org.apache.camel.model.ProcessorDefinition.resolvePropertyPlaceholders(ProcessorDefinition.java:572)
	at org.apache.camel.model.ProcessorDefinition.makeProcessor(ProcessorDefinition.java:475)
	at org.apache.camel.model.ProcessorDefinition.addRoutes(ProcessorDefinition.java:213)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:909)
	... 40 more
{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-02-14 13:04:08.517,,,no_permission,,Unknown,,,,,,,,,,,372792,,,Thu Jun 19 08:53:28 UTC 2014,,,,,,,0|i1s8tz:,373096,,,,,,,,,"14/Feb/14 13:04;davsclaus;Yeah the bug is that you have 2 nested and that they both start and end the string. So you hit a bug that assume this was only 1 nested.

Working on a fix.","19/Jun/14 08:41;antoine.dessaigne;Now that CAMEL-7429 is fixed, I've executed the provided test and it passes",19/Jun/14 08:53;davsclaus;Thanks its fixed by another ticket,,,,,,,,,,,,,,,,,,,,,
RabbitMQ Component unable to transfer custom headers,CAMEL-6821,12672298,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,mayank.mishra,mayank.mishra,04/Oct/13 07:23,08/Jun/14 12:59,13/Mar/19 22:18,28/Oct/13 11:45,2.12.1,,,,,,,,,2.12.2,2.13.0,,,camel-rabbitmq,,,,,,0,,,,,,,,,"There is no capability to pass in some custom headers through rabbitmq camel component. it seems only well-known headers of AMQP.BasicProperties are supported.
",,,,,,,,,,,,,,,,,,,,,15/Oct/13 15:26;davidkeen;0001-CAMEL-6821-Add-support-for-custom-RabbitMQ-headers.patch;https://issues.apache.org/jira/secure/attachment/12608521/0001-CAMEL-6821-Add-support-for-custom-RabbitMQ-headers.patch,04/Oct/13 07:33;mayank.mishra;RabbitMQProducer.patch;https://issues.apache.org/jira/secure/attachment/12606748/RabbitMQProducer.patch,04/Oct/13 07:33;mayank.mishra;RabbitMQProducerTest.patch;https://issues.apache.org/jira/secure/attachment/12606749/RabbitMQProducerTest.patch,,,,3.0,,,,,,,,,,,,,,,,,,,2013-10-11 10:24:57.191,,,no_permission,,Unknown,,,,,,,,,,,351924,,,Sun Jun 08 12:59:19 UTC 2014,,,,,,,0|i1oodj:,352212,,,,,,,,,04/Oct/13 07:33;mayank.mishra;Adding Source code change and Unit test case for custom headers support,07/Oct/13 12:04;mayank.mishra;FYI...It's also copying AMQP well known properties in the headers.,11/Oct/13 10:24;davidkeen;I guess we also need to do something on the consumer side to pull out any custom headers into the camel message. I've attached a patch for RabbitMQConsumer and RabbitMQEndpoint which should do this but it seems header values may need to be filtered or serialized somehow as com.rabbitmq.client.impl.Frame#fieldValueSize throws an IllegalArgumentException if it receives an object value that is not one of its expected types.,15/Oct/13 10:50;davidkeen;I have added some filtering of headers in the producer so incompatible headers are not set. I have created a fork on GitHub here https://github.com/davidkeen/camel/tree/rabbitmq-headers. I will update my patchfile to include these changes.,15/Oct/13 14:55;davidkeen;Added unit tests.,15/Oct/13 15:26;davidkeen;Combine git patches into single file.,28/Oct/13 11:45;davsclaus;Thanks for the patch.,"08/Jun/14 12:59;githubbot;Github user jfarrell closed the pull request at:

    https://github.com/apache/camel/pull/50
",,,,,,,,,,,,,,,,
AbstractListGroupedExchangeAggregationStrategy produces failed exchange if first received exchange fails,CAMEL-7271,12698772,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,wlhamaty,wlhamaty,05/Mar/14 00:00,28/Apr/14 05:39,13/Mar/19 22:18,28/Apr/14 05:39,2.11.3,2.12.2,,,,,,,,2.12.4,2.13.1,2.14.0,,camel-core,,,,,,0,,,,,,,,,"If the first exchange received by a (concrete implementation of) AggregationStrategy  contains an exception, then the result of the aggregation will also contain that exception, and so will not continue routing without error. This makes the first received exchange have an effect that subsequent exchanges do not have.

The specific use case multicasts to GroupedExchangeAggregationStrategy. The MulticastProcessor.doDone function uses ExchangeHelper.copyResults to copy the aggregated result to the original exchange. The copyResults method copies the exception as well, thereby propagating the error.

 The attached unit test has 3 tests, testAFail, testBFail, and testAllGood. All three of these should pass, but testAFail does not.

What is happening is that AbstractListAggregationStrategy is directly storing its values on and returning the first exchange:
    public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {
        List<V> list;

        if (oldExchange == null) {
            list = getList(newExchange);
        } else {
            list = getList(oldExchange);
        }

        if (newExchange != null) {
            V value = getValue(newExchange);
            if (value != null) {
                list.add(value);
            }
        }

        return oldExchange != null ? oldExchange : newExchange;
    }

The pre-CAMEL-5579 version of GroupedExchangeAggregationStrategy created a fresh exchange to store and return the aggregated exchanges:
    public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {
        List<Exchange> list;
        Exchange answer = oldExchange;

        if (oldExchange == null) {
            answer = new DefaultExchange(newExchange);
            list = new ArrayList<Exchange>();
            answer.setProperty(Exchange.GROUPED_EXCHANGE, list);
        } else {
            list = oldExchange.getProperty(Exchange.GROUPED_EXCHANGE, List.class);
        }

        if (newExchange != null) {
            list.add(newExchange);
        }
        return answer;
    }
",,,,,,,,,,,,,,,,,,,,,05/Mar/14 00:11;wlhamaty;camel-jira7271-test.zip;https://issues.apache.org/jira/secure/attachment/12632715/camel-jira7271-test.zip,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-04-28 05:39:33.192,,,no_permission,,Moderate,,,,,,,,,,,377120,,,Mon Apr 28 05:39:33 UTC 2014,,,,,,,0|i1szfz:,377415,,,,,,,,,28/Apr/14 05:39;davsclaus;Thanks for reporting and providing test cases.,,,,,,,,,,,,,,,,,,,,,,,
Custom HeaderFilterStrategy does not work when set it on either component or endpoint uri,CAMEL-7141,12689524,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,joeluo,joeluo,17/Jan/14 17:20,15/Apr/14 03:21,13/Mar/19 22:18,15/Apr/14 03:21,2.12.2,,,,,,,,,2.12.4,2.13.1,2.14.0,,camel-netty-http,,,,,,0,,,,,,,,,"Setting custom HeaderFilterStrategy on either NettyHttpComponent or NettyHttpEndpoint uri does not work. The only way to get it to work is to create a NettyHttpBinding bean and set the custom HeaderFilterStrategy as a property of the NettyHttpBinding bean and then set the custom NettyHttpBinding bean onto either NettyHttpComponent and NettyHttpEndpoint uri.

The reason it does not work was that when applying the custom HeaderFilterStrategy, it is not set on NettyHttpBinding object as the NettyHttpBinding object always uses default HeaderFilterStrategy. 

I have attached the patch file. It might not be necessary to modify NettyHttpComponent class but I thought it'd be better to initialize configuration, nettyBinding and headerFilterStrategy in their getter method only when needed rather than in constructor of the NettyHttpComponent.",,,,,,,,,,,,,,,,,,,,,17/Jan/14 17:21;joeluo;NettyHttpHeaderFilterBug.patch;https://issues.apache.org/jira/secure/attachment/12623682/NettyHttpHeaderFilterBug.patch,07/Apr/14 20:39;joeluo;revised_patch.txt;https://issues.apache.org/jira/secure/attachment/12639055/revised_patch.txt,,,,,2.0,,,,,,,,,,,,,,,,,,,2014-01-18 08:53:40.611,,,no_permission,,Unknown,,,,,,,,,,,368491,,,Tue Apr 08 13:36:59 UTC 2014,,,Patch Available,,,,0|i1rihj:,368795,,,,,,,,,"18/Jan/14 08:53;njiang;Applied the patch into master and camel-2.12.x branches.
","07/Apr/14 20:39;joeluo;Hi, Willem

Apologies but I have to reopen this JIRA since the previous patch I provided caused a new problem. I'll attach a revised patch with a new junit test case to this ticket.

Here is the code changes in NettyHttpEndpoint.java class:
{code}
     public void setHeaderFilterStrategy(HeaderFilterStrategy headerFilterStrategy) {
         this.headerFilterStrategy = headerFilterStrategy;
+        if (getNettyHttpBinding() != null) {
+            getNettyHttpBinding().setHeaderFilterStrategy(headerFilterStrategy);
+        }
{code}

Basically it allows this method to modify NettyHttpComponent's member object ""nettyHttpBinding"" simply by setting a new headerFilterStrategy to it. As a result, the component's member object contains a different headerFilterStrategy rather than default one that created in component's default constructor. It is ok if we only have one netty http endpoint created. Otherwise, the next endpoint will be created with a non-default headerFilterStrategy that is from previous endpoint. 

The fix is quite simple: in this case, we should not touch component's nettyHttpBinding object at all. Instead, if we have configured a custom headerFilterStrategy on endpoint uri, we should create a new DefaultNettyHttpBinding object with the headerFilterStrategy for the current endpoint.

I also reverted back some changes to initialize default NettyHttpConfiguration, NettyHttpHeaderFilterStrategy and DefaultNettyHttpBinding object in NettyHttpComponent's default constructor since it is reasonable to create them upfront for the component.","08/Apr/14 13:36;njiang;Applied the patch into camel master, camel-2.13.x and camel-2.12.x with thanks to Joe.
I also did some changes on the joe's patch to support setting the CustomDefaultNettyHttpBinding to the CamelNettyHttpComponent.",,,,,,,,,,,,,,,,,,,,,
Error handler for SEDA producer doesn't work,CAMEL-6918,12676861,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ceposta,ceposta,ceposta,31/Oct/13 14:20,09/Apr/14 14:36,13/Mar/19 22:18,04/Nov/13 22:27,2.12.1,,,,,,,,,2.12.4,2.13.0,,,camel-core,,,,,,1,,,,,,,,,"Exceptions thrown by seda producer bypass exception handling and bubble up to original caller. 

",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-10-31 14:45:35.558,,,no_permission,,Unknown,,,,,,,,,,,356237,,,Wed Apr 09 14:36:12 UTC 2014,,,,,,,0|i1pevr:,356525,Regression,,,,,,,,"31/Oct/13 14:21;ceposta;The SendProcessor doesn't catch exceptions and set them on the exchange (which is what the Redelivery bits look for). 

I'm working on a patch.","31/Oct/13 14:45;8forty@gmail.com;FYI in my test cast the exception doesn't ""bubble up to the original caller"" unless tracing is turned on.  See CAMEL-6912.","31/Oct/13 14:53;ceposta;Yes, that's because the trace processor adds the exception handling as mentioned above. It really should be in the SendProcessor too.","04/Nov/13 22:27;ceposta;Fix is now on master. 
Please check a nightly snapshot from here in a day or so:

https://repository.apache.org/content/repositories/snapshots/org/apache/camel/apache-camel/2.13-SNAPSHOT/",05/Nov/13 07:32;bvahdat;I wonder if we could better remove the try/catch block of {{SedaErrorTest}} for this fix as the test is a positive and not a negative one. See also CAMEL-5983.,"05/Nov/13 15:06;ceposta;I agree. The test migrated in different iterations, and I no longer need the try/catch. Change has been committed. Thanks for the code review.","08/Apr/14 17:44;fchaillou;Hello,
The issue is marked resolved in 2.12.2 but we have the same issue in 2.12.3.
When looking at the commit, it seems the fix was not pushed on the 2.12 branch. Could you confirm ?
Thank you !
Fabien",09/Apr/14 02:55;njiang;I just merged the patches into camel-2.12.x branch and updated the fix version.,"09/Apr/14 14:36;fchaillou;Thank you Willem, do you know when the 2.12.4 is expected to be released ?
Have a good day.
Fabien",,,,,,,,,,,,,,,
"camel-quartz2 - When clustering, triggers may be left in a paused and unrecoverable state",CAMEL-7033,12682348,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,klodrik,klodrik,03/Dec/13 10:06,03/Apr/14 12:06,13/Mar/19 22:18,03/Apr/14 12:06,,,,,,,,,,2.12.4,2.13.1,2.14.0,,camel-quartz2,,,,,,0,,,,,,,,,"The reason seems to be that onConsumerStop() is called when camel is shut down. This method does not take clustering into account and pauses the trigger in the quartz database, leaving it in a state that is unrecoverable from camel. I was able to prevent this by removing pauseTrigger() from onConsumerStop(), but I'm not sure what the correct procedure should be. It seems to me like onConsumerStop() and doStop() has some overlap.","camel-quartz2, 2.13-SNAPSHOT clustered on Oracle database",,,,,,,,,,,,,,,,,,,,04/Dec/13 08:03;klodrik;0001-Handling-clustered-scheduler-in-pauseTrigger.patch;https://issues.apache.org/jira/secure/attachment/12616951/0001-Handling-clustered-scheduler-in-pauseTrigger.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-04-03 12:03:40.795,,,no_permission,,Unknown,,,,,,,,,,,361605,,,Thu Apr 03 12:03:40 UTC 2014,,,,,,,0|i1qc0v:,361903,,,,,,,,,04/Dec/13 08:03;klodrik;Patch that handles clustering in pauseTrigger().,"03/Apr/14 12:03;njiang;Applied the patch into camel master, camel-2.13.x and camel-2.12.x with thanks to Arne.
I also remove the jobAdded.set(false); which makes other unit test failed.
",,,,,,,,,,,,,,,,,,,,,,
"SJMS: Cannot connect to durable topic because ""noLocal"" is hardcoded to ""true""",CAMEL-7287,12700907,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,miljenko,miljenko,12/Mar/14 07:28,13/Mar/14 09:11,13/Mar/19 22:18,13/Mar/14 09:11,2.11.3,,,,,,,,,2.11.5,2.12.4,2.13.0,,camel-sjms,,,,,,0,,,,,,,,,"See this thread: http://camel.465427.n5.nabble.com/SJMS-issue-with-noLocal-td5748632.html
",Tibco EMS,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-03-12 15:40:10.863,,,no_permission,,Unknown,,,,,,,,,,,379250,,,Thu Mar 13 09:01:02 UTC 2014,,,,,,,0|i1tcj3:,379542,,,,,,,,,12/Mar/14 15:40;davsclaus;Are you working on a patch?,"13/Mar/14 09:01;davsclaus;Yeah noLocal should be false, that is the default in the JMS spec
http://docs.oracle.com/javaee/6/api/javax/jms/Session.html#createConsumer(javax.jms.Destination, java.lang.String, boolean)",,,,,,,,,,,,,,,,,,,,,,
SqlProducer call twice the getResultSet on the PreparedStatement => This cause issue with HSQLDB (NPE),CAMEL-7251,12697694,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,boretti,boretti,27/Feb/14 14:10,12/Mar/14 13:43,13/Mar/19 22:18,28/Feb/14 03:47,2.12.3,,,,,,,,,2.12.4,2.13.0,,,camel-sql,,,,,,0,,,,,,,,,"The SqlProducer class use the following lines of code :

ResultSet rs = ps.getResultSet();
                        SqlOutputType outputType = getEndpoint().getOutputType();
                        log.trace(""Got result list from query: {}, outputType={}"", rs, outputType);
                        if (outputType == SqlOutputType.SelectList) {
                            List<Map<String, Object>> data = getEndpoint().queryForList(ps.getResultSet());
                           .................................
                        } else if (outputType == SqlOutputType.SelectOne) {
                            Object data = getEndpoint().queryForObject(ps.getResultSet());
                            .................................
                        } else {
                            throw new IllegalArgumentException(""Invalid outputType="" + outputType);
                        }

The problem is that the ResultSet is retrieved at the start, and then only used for the log. Later, when the result set is required, a new call to getResultSet is done. It is an issue with HSQL DB (tested with version 2.3.0 and 2.3.2 of HSQL DB), which in this case return null for the second call.

As the ResultSet is already available in a variable ""rs"", I would recommand to use this variable to replace the two last call to ps.getResultSet().

Thanks",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-02-27 20:58:14.668,,,no_permission,,Unknown,,,,,,,,,,,376168,,,Wed Mar 12 13:43:27 UTC 2014,,,,,,,0|i1stkn:,376464,,,,,,,,,"27/Feb/14 20:58;githubbot;GitHub user boretti opened a pull request:

    https://github.com/apache/camel/pull/104

    CAMEL-7251 SqlProducer call twice the getResultSet on the PreparedStatement => This cause issue with HSQLDB (NPE)

    According https://issues.apache.org/jira/browse/CAMEL-7251

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/boretti/camel camel-7251

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/104.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #104
    
----
commit e44f258a2f4fac85dcb67c48a9dc9ae129aa87e8
Author: boretti <mathieu.boretti@gmail.com>
Date:   2014-02-27T20:56:04Z

    SqlProducer call twice the getResultSet on the PreparedStatement => This
    cause issue with HSQLDB (NPE)

----
",28/Feb/14 03:47;njiang;Applied the patch with thanks to Mathieu into master and camel-2.12.x branches.,"12/Mar/14 13:43;githubbot;Github user boretti closed the pull request at:

    https://github.com/apache/camel/pull/104
",,,,,,,,,,,,,,,,,,,,,
amazonSNSEndpoint option is ignored,CAMEL-7286,12700871,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,12/Mar/14 01:25,12/Mar/14 07:49,13/Mar/19 22:18,12/Mar/14 02:51,2.11.4,2.12.3,,,,,,,,2.11.5,2.12.4,2.13.0,,camel-aws,,,,,,0,,,,,,,,,I just got [an user complain|http://camel.465427.n5.nabble.com/AWS-SNS-Camel-amazonSNSEndpoint-being-ignored-tp5748651.html ] that the amazonSNSEndpoint option of aws-sns was ignored. ,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,379214,,,Wed Mar 12 07:49:09 UTC 2014,,,,,,,0|i1tcb3:,379506,,,,,,,,,"12/Mar/14 02:51;njiang;Applied patch into master, camel-2.12.x and camel-2.11.x branches.","12/Mar/14 07:49;njiang;I just found other camel-aws endpoints have the same issue, I will commit the patch shortly.",,,,,,,,,,,,,,,,,,,,,,
Yammer now uses bearer token for auth,CAMEL-7279,12699460,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,janstey,janstey,07/Mar/14 16:42,07/Mar/14 16:50,13/Mar/19 22:18,07/Mar/14 16:50,2.12.3,,,,,,,,,2.12.4,2.13.1,,,,,,,,,0,,,,,,,,,... which means camel-yammer cannot connect to the yammer API currently.,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,377807,,,Fri Mar 07 16:50:34 UTC 2014,,,,,,,0|i1t3n3:,378099,,,,,,,,,"07/Mar/14 16:50;janstey;master - http://git-wip-us.apache.org/repos/asf/camel/commit/263b5681
camel-2.12.x - http://git-wip-us.apache.org/repos/asf/camel/commit/496026d6",,,,,,,,,,,,,,,,,,,,,,,
camel-ssh should close the session when execution is finished.,CAMEL-7277,12699330,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,07/Mar/14 03:08,07/Mar/14 10:53,13/Mar/19 22:18,07/Mar/14 10:53,2.11.4,2.12.3,,,,,,,,2.11.5,2.12.4,2.13.0,,camel-ssh,,,,,,0,,,,,,,,,Here is [the complain|http://stackoverflow.com/questions/22229687/camel-ssh-multiple-session-not-getting-closed-after-execution] from the stackoverfow ,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,377677,,,Fri Mar 07 10:53:44 UTC 2014,,,,,,,0|i1t2uf:,377969,,,,,,,,,"07/Mar/14 10:53;njiang;Applied patch into trunk, camel-2.12.x and camel-2.11.x branches.",,,,,,,,,,,,,,,,,,,,,,,
Using doTry .. doCatch with recipient list should not trigger error handler during recipient list work,CAMEL-7275,12699107,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,06/Mar/14 09:59,06/Mar/14 16:00,13/Mar/19 22:18,06/Mar/14 16:00,2.12.3,,,,,,,,,2.12.4,2.13.0,,,camel-core,eip,,,,,0,,,,,,,,,"When you have a route like this

{code}
                from(""direct:start"")
                    .doTry()
                        .recipientList(constant(""direct:foo"")).end()
                    .doCatch(Exception.class)
                        .to(""mock:catch"")
                        .transform().constant(""doCatch"")
                    .end()
                    .to(""mock:result"");
{code}

Then if an exception was thrown it should be catch by doCatch

A similar route with to instead works as expected.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,377454,,,2014-03-06 09:59:35.0,,,,,,,0|i1t1hj:,377748,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Support roles in the camel-shiro component,CAMEL-7274,12698932,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,raulvk,coheigea,coheigea,05/Mar/14 18:11,05/Mar/14 19:05,13/Mar/19 22:18,05/Mar/14 19:03,,,,,,,,,,2.13.0,,,,camel-shiro,,,,,,0,,,,,,,,,"
The Camel-shiro component allows the ability to perform authorization based on permissions. However, it does not allow using straight-forward roles for authorization. While using permissions is more flexible, we should also support authorization using roles.",,,,,,,,,,,,,,,,,,,,,05/Mar/14 18:18;coheigea;camel-7274.patch;https://issues.apache.org/jira/secure/attachment/12632865/camel-7274.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-03-05 19:03:47.261,,,no_permission,,Unknown,,,,,,,,,,,377279,,,Wed Mar 05 19:03:47 UTC 2014,,,,,,,0|i1t0fb:,377574,,,,,,,,,"05/Mar/14 18:18;coheigea;
A patch + tests for this issue.

Colm.",05/Mar/14 19:03;raulvk;Patch applied on master (2.13.x) with thanks to [~coheigea].,,,,,,,,,,,,,,,,,,,,,,
camel-mqtt - dead lock when processing fetching/sending messages at high frequency,CAMEL-6717,12667553,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ralfkornberger,ralfkornberger,09/Sep/13 11:58,05/Mar/14 13:10,13/Mar/19 22:18,28/Jan/14 15:17,2.11.0,,,,,,,,,2.12.3,2.13.0,,,camel-mqtt,,,,,,0,,,,,,,,,"I'm using Apache Camel with MQTT to fetch data from a Mosquitto broker. Data are published there at high
frequency (< 10s) by serveral devices. After receiving the data, I send an acknowlege message back. This is done by publishing a message
to a topic for each device. I'm using the Fusesource MQTT Client (version 2.5) for this.
I encountered the following problem: after some time (can be 15 minutes up to 1 day) some thing ""weird"" happens.
The application stops receiving or sending any data via MQTT. Looking at it with jstack reveals the following:


""hawtdispatch-DEFAULT-2"" daemon prio=10 tid=0x00007facc1a2f000 nid=0x782d waiting on condition [0x00007fac42bcf000]
   java.lang.Thread.State: WAITING (parking)
	at sun.misc.Unsafe.park(Native Method)
	- parking to wait for  <0x000000078e792b88> (a java.util.concurrent.CountDownLatch$Sync)
	at java.util.concurrent.locks.LockSupport.park(LockSupport.java:156)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:811)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedInterruptibly(AbstractQueuedSynchronizer.java:969)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1281)
	at java.util.concurrent.CountDownLatch.await(CountDownLatch.java:207)
	at org.fusesource.mqtt.client.Promise.await(Promise.java:88)
	at org.fusesource.mqtt.client.BlockingConnection.publish(BlockingConnection.java:73)
	at org.fusesource.mqtt.client.BlockingConnection.publish(BlockingConnection.java:82)
	at net.centersight.plugins.agent.protomqtt.comm.MQTTManager.sendACKMessage(MQTTManager.java:92)
	at net.centersight.plugins.agent.protomqtt.comm.MQTTCommunication.sendACKMessage(MQTTCommunication.java:116)
	at net.centersight.plugins.agent.protomqtt.camel.AgentMQTTbatchACKer.process(AgentMQTTbatchACKer.java:47)
	at sun.reflect.GeneratedMethodAccessor101.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.camel.component.bean.MethodInfo.invoke(MethodInfo.java:341)
	at org.apache.camel.component.bean.MethodInfo$1.proceed(MethodInfo.java:238)
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:166)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:334)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:220)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:117)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)
	at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:86)
	at org.apache.camel.component.mqtt.MQTTConsumer.processExchange(MQTTConsumer.java:46)
	at org.apache.camel.component.mqtt.MQTTEndpoint$1.onPublish(MQTTEndpoint.java:88)
	at org.fusesource.mqtt.client.CallbackConnection.toReceiver(CallbackConnection.java:815)
	at org.fusesource.mqtt.client.CallbackConnection.processFrame(CallbackConnection.java:732)
	at org.fusesource.mqtt.client.CallbackConnection.access$17(CallbackConnection.java:727)
	at org.fusesource.mqtt.client.CallbackConnection$6.onTransportCommand(CallbackConnection.java:392)
	at org.fusesource.hawtdispatch.transport.TcpTransport.drainInbound(TcpTransport.java:660)
	at org.fusesource.hawtdispatch.transport.TcpTransport$6.run(TcpTransport.java:538)
	at org.fusesource.hawtdispatch.internal.NioDispatchSource$3.run(NioDispatchSource.java:226)
	at org.fusesource.hawtdispatch.internal.SerialDispatchQueue.run(SerialDispatchQueue.java:96)
	at org.fusesource.hawtdispatch.internal.pool.SimpleThread.run(SimpleThread.java:77)

   Locked ownable synchronizers:
	- None
	
Appearently, both the Camel receiving thread and the Fusesource client thread are hanging at
at org.fusesource.mqtt.client.Promise.await(Promise.java:88)

Since I use BlockingConnection in my sending client, I took a look at the Fusesource MQTT client.
In BlockingConnection.java, function 
public void publish(final UTF8Buffer topic, final Buffer payload, final QoS qos, final boolean retain) throws Exception 

in line 80, a Future is received on publishing. And there is an await() afterwards.
When I change this await() to await(30L, TimeUnit.SECONDS), the problem still occurs, but the application keeps working.
I've put in debug printouts at the trace class which show me that at the time the problem occurs the MQTT client seems to loose the connection to the broker and tries to reestablish it. Debug logs also show that the timeout exception throw by the timeouted await comes every minute for ca. 20 minutes. Then the problem ""vanishes"" and comes again after serval hours.

Ps.: I also posted this at github, in the Fusesource MQTT issue tracker:
https://github.com/fusesource/mqtt-client/issues/21#issuecomment-23861700
",jdk 1.6.32,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-09-09 20:59:39.72,,,no_permission,,Unknown,,,,,,,,,,,347490,,,Wed Mar 05 13:10:26 UTC 2014,,,,,,,0|i1nx4f:,347789,,,,,,,,,09/Sep/13 20:59;muellerc;I think this issue has to be fixed on the mqtt-client site.,"01/Oct/13 09:43;davsclaus;Yes its a bug in 3rd party library
https://github.com/fusesource/mqtt-client/issues/23","07/Oct/13 08:18;ralfkornberger;Ok, now we have cyclic references between Apache Camel here and MQTT Client on GitHub . ;-) Thats's fine, but what next? I've tried to get close to the problem, but without real success. So, does anyone have an idea where to start? ",28/Jan/14 15:17;davsclaus;The word on the street is that this should be fixed in MQTT 1.7 client.,05/Mar/14 13:10;ralfkornberger;Thanks. I think it working :-) I haven't had a deadlock so far ....,,,,,,,,,,,,,,,,,,,
NullPointerException at DefaultCxfRsBinding,CAMEL-7256,12697807,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,yavalek,yavalek,27/Feb/14 22:00,05/Mar/14 03:08,13/Mar/19 22:18,05/Mar/14 03:08,2.12.1,,,,,,,,,2.12.4,2.13.0,,,camel-cxf,,,,,,0,,,,,,,,,"In case if message.isFault() is true, but no Exception set:

{code}
Caused by: java.lang.NullPointerException
        at org.apache.camel.component.cxf.jaxrs.DefaultCxfRsBinding.populateCxfRsResponseFromExchange(DefaultCxfRsBinding.java:76)[202:org.apache.camel.camel-cxf:2.12.1]
        at org.apache.camel.component.cxf.jaxrs.CxfRsInvoker.returnResponse(CxfRsInvoker.java:166)[202:org.apache.camel.camel-cxf:2.12.1]
        at org.apache.camel.component.cxf.jaxrs.CxfRsInvoker.asyncInvoke(CxfRsInvoker.java:107)[202:org.apache.camel.camel-cxf:2.12.1]
        at org.apache.camel.component.cxf.jaxrs.CxfRsInvoker.performInvocation(CxfRsInvoker.java:57)[202:org.apache.camel.camel-cxf:2.12.1]
        at org.apache.cxf.service.invoker.AbstractInvoker.invoke(AbstractInvoker.java:96)[158:org.apache.cxf.cxf-api:2.7.6]
        ... 23 more
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-02-28 02:32:14.256,,,no_permission,,Unknown,,,,,,,,,,,376281,,,Fri Feb 28 02:32:14 UTC 2014,,,,,,,0|i1su9r:,376577,,,,,,,,,"28/Feb/14 02:32;njiang;We need to check if the exchange has the exception before throw it.
I just committed a patch for it into master, camel-2.12.x and camel-2.11.x.",,,,,,,,,,,,,,,,,,,,,,,
PGPDataFormat: NullPointerException if decryptor gets body with invalid format,CAMEL-7253,12697727,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,forsthofer,forsthofer,27/Feb/14 15:26,05/Mar/14 03:08,13/Mar/19 22:18,05/Mar/14 03:08,2.12.3,,,,,,,,,2.12.4,2.13.0,,, camel-crypto,,,,,,0,,,,,,,,,"if the PGPDataFormat gets an invalid format during the decryption process a NullPointerException is thrown.

The attached patch throws an IllegalArgumentException instead and improves further error situations if a wrong formated input is provided.",,,,,,,,,,,,,,,,,,,,,01/Mar/14 09:14;forsthofer;0001-pgp-NullPointer-exception-if-incorrect-input.patch;https://issues.apache.org/jira/secure/attachment/12631935/0001-pgp-NullPointer-exception-if-incorrect-input.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-02-28 02:52:42.022,,,no_permission,,Unknown,,,,,,,,,,,376201,,,Mon Mar 03 08:42:55 UTC 2014,,,Patch Available,,,,0|i1strz:,376497,,,,,,,,,"28/Feb/14 02:52;njiang;Hi Franz,

I think here is a code error in your patch in the patched PGPKeyAccessDataFormat.
You add two same check of ""o instanceof PGPEncryptedDataList"" in a if ... else block.
{code}
   @SuppressWarnings(""resource"")
    public Object unmarshal(Exchange exchange, InputStream encryptedStream) throws Exception {
        if (encryptedStream == null) {
            return null;
        }
        InputStream in = PGPUtil.getDecoderStream(encryptedStream);
        PGPObjectFactory pgpFactory = new PGPObjectFactory(in);
        Object o = pgpFactory.nextObject();
        // the first object might be a PGP marker packet 
        PGPEncryptedDataList enc;
        if (o instanceof PGPEncryptedDataList) {
            enc = (PGPEncryptedDataList) o;
        } else if (o instanceof PGPEncryptedDataList) {
            enc = (PGPEncryptedDataList) pgpFactory.nextObject();
        } else {
            enc = null;
        }
{code}",28/Feb/14 05:17;forsthofer;You are right. I have a look at this adn will update the patch.,"28/Feb/14 06:55;forsthofer;Hi Willem,

i corrected the error. Please have a look.

Regards Franz",01/Mar/14 09:14;forsthofer;I corrected an error message.,03/Mar/14 08:42;njiang;Applied into camel master branch and back port the patch into camel-2.12.x branch with thanks to Franz.,,,,,,,,,,,,,,,,,,,
[cxfrs] Bus features aren't initialized,CAMEL-7194,12694708,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,amarkevich,amarkevich,12/Feb/14 10:31,05/Mar/14 03:07,13/Mar/19 22:18,05/Mar/14 03:07,2.12.2,,,,,,,,,,,,,camel-cxf,,,,,,0,,,,,,,,,"- CxfRsEndpoint doesn't support custom feture support like
org.apache.camel.component.cxf.CxfEndpoint.setFeatures(List<AbstractFeature>)
- org.apache.camel.component.cxf.jaxrs.CxfRsEndpoint.createJAXRSClientFactoryBean() can't be used for additional configuration because org.apache.camel.component.cxf.jaxrs.CxfRsProducer.ClientFactoryBeanCache used
- in case bus was initialized with required features they aren't initialized for WebClient",,,,,,,,,,,,,,,,,,,,,12/Feb/14 10:32;amarkevich;CxfRsProducerTest.java;https://issues.apache.org/jira/secure/attachment/12628462/CxfRsProducerTest.java,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-02-12 12:01:37.046,,,no_permission,,Unknown,,,,,,,,,,,373216,,,Mon Feb 17 13:12:08 UTC 2014,,,,,,,0|i1sbfj:,373517,,,,,,,,,12/Feb/14 10:32;amarkevich;testProducerWithFeature added,"12/Feb/14 10:36;amarkevich;BTW there are typos for methods testGetCostumerWithClientProxyAPI(), testGetCostumersWithClientProxyAPI() and testGetCostumerWithHttpCentralClientAPI()","12/Feb/14 12:01;njiang;Hi Alexey,

I hit this kind issue last year, it was mentioned in CXF-4953.
You cannot take the consideration that the feature which is set to the bus can work on the JAXRSClientFactoryBean out of box.

Regards,

Willem","12/Feb/14 12:28;amarkevich;Hi Willem,
I tried to add custom feature somehow - bus initialization was like workaround. CxfRsEndpoint.setFeatures will be enought.","12/Feb/14 13:39;njiang;You can setup the feature by using cxfrs:client or cxfrs:server elements in the spring or blueprint file.
I can add an option features in CxfRsEndpoint to help you set customer feature through the URI.",13/Feb/14 13:47;amarkevich;Finally I've set the features using beans. Thanks!,"14/Feb/14 07:28;njiang;Hi Alexey,

I just commit quick fix to camel master and camel-2.12.x, you should be able to set the features option just like you do on camel-cxf.

","14/Feb/14 18:07;sergey_beryozkin;Hi Willem, thanks for fixing it, I've been trying frantically to create a patch for 7179 but have been happy to find out the issue has been fixed :-)

Btw, I have some extra code for setting properties & in/out interceptors, but I guess it is a bit late to squeeze the extra code now, I was not really sure how to to test it, see it from your commit; I can try to do a patch next week or so

Cheers, Sergey ","17/Feb/14 02:02;njiang;@Sergey,

Maybe you can share you patch here and we can figure out how to test it in the community. That's the beauty of OpenSource :)","17/Feb/14 13:12;sergey_beryozkin;Hi Willem, sure, I've added a patch to
https://issues.apache.org/jira/browse/CAMEL-7207, to complement your changes to get interceptors & properties also supported at CxfRsEndpoint level.

Now, I don't understand how to test that the properties enabled in Spring contexts are visible to CxfRsEndpoint; see the attached patch to CAMEL-7207, I updated two different tests with no luck; can you please help with getting the tests passing or give a hint on what needs to be done ? I can add tests validating the interceptors and features setup from the context are also visible

Thanks, Sergey ",,,,,,,,,,,,,,
NullPointerException when chaining CXF/Jackson REST services in a Camel route,CAMEL-7147,12690309,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,dvanbale,dvanbale,22/Jan/14 16:46,05/Mar/14 03:07,13/Mar/19 22:18,05/Mar/14 03:07,2.12.0,,,,,,,,,2.12.4,2.13.0,,,camel-cxf,camel-jackson,,,,,0,cxf,cxfrs,json,threadlocal,,,,,"When chaining multiple REST service calls in a single camel route, using Jackson as the JSON provider for CXF, the JacksonJsonProvider appears to lose its thread local context between invocations, resulting in an NPE. The NPE doesn't always occur at the same point. Sometimes one or both additional services are successfully called before the thead local context disappears, but other times neither service is called and an NPE is thrown as soon as the initial service is invoked.

See attached zip archive for reproducer (service2 and service3 are deployed on JBoss AS 7.3.0).

See camel-users thread for background:
http://camel.465427.n5.nabble.com/Questions-about-cxfrs-td5746294.html

Lib versions:

Camel: 2.12.0
Jackson: 1.9.10
CXF: 2.7.0

Full stacktrace:

11:40:51,678 | INFO  | tp1806392083-718 | LoggingInInterceptor             | 150 - org.apache.cxf.cxf-api - 2.7.0.redhat-610139 | Inbound Message
----------------------------
ID: 15
Address: http://localhost:8182/service1/service1path
Encoding: ISO-8859-1
Http-Method: POST
Content-Type: application/json
Headers: {Accept=[*/*], accept-encoding=[gzip,deflate,sdch], Accept-Language=[en-US,en;q=0.8], connection=[keep-alive], Content-Length=[23], content-type=[application/json], Host=[localhost:8182], Origin=[chrome-extension://fhjcajmcbmldlhcimfajhfbgofnpcjmb], User-Agent=[Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.63 Safari/537.36]}
Payload: {""id"":1,""name"":""Fred""}

--------------------------------------
11:40:51,679 | WARN  | tp1806392083-718 | PhaseInterceptorChain            | 150 - org.apache.cxf.cxf-api - 2.7.0.redhat-610139 | Interceptor for {http://jackson.blueprint.camel.mycompany.com/}ServiceOne has thrown exception, unwinding now
java.lang.NullPointerException
	at org.apache.cxf.jaxrs.impl.tl.ThreadLocalProviders.getContextResolver(ThreadLocalProviders.java:50)[166:org.apache.cxf.cxf-rt-frontend-jaxrs:2.7.0.redhat-610139]
	at org.codehaus.jackson.jaxrs.JacksonJsonProvider.locateMapper(JacksonJsonProvider.java:633)[245:jackson-jaxrs:1.9.10]
	at org.codehaus.jackson.jaxrs.JacksonJsonProvider.readFrom(JacksonJsonProvider.java:413)[245:jackson-jaxrs:1.9.10]
	at org.apache.cxf.jaxrs.utils.JAXRSUtils.readFromMessageBodyReader(JAXRSUtils.java:1280)[166:org.apache.cxf.cxf-rt-frontend-jaxrs:2.7.0.redhat-610139]
	at org.apache.cxf.jaxrs.utils.JAXRSUtils.readFromMessageBody(JAXRSUtils.java:1231)[166:org.apache.cxf.cxf-rt-frontend-jaxrs:2.7.0.redhat-610139]
	at org.apache.cxf.jaxrs.utils.JAXRSUtils.processParameter(JAXRSUtils.java:782)[166:org.apache.cxf.cxf-rt-frontend-jaxrs:2.7.0.redhat-610139]
	at org.apache.cxf.jaxrs.utils.JAXRSUtils.processParameters(JAXRSUtils.java:741)[166:org.apache.cxf.cxf-rt-frontend-jaxrs:2.7.0.redhat-610139]
	at org.apache.cxf.jaxrs.interceptor.JAXRSInInterceptor.processRequest(JAXRSInInterceptor.java:263)[166:org.apache.cxf.cxf-rt-frontend-jaxrs:2.7.0.redhat-610139]
	at org.apache.cxf.jaxrs.interceptor.JAXRSInInterceptor.handleMessage(JAXRSInInterceptor.java:103)[166:org.apache.cxf.cxf-rt-frontend-jaxrs:2.7.0.redhat-610139]
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:272)[150:org.apache.cxf.cxf-api:2.7.0.redhat-610139]
	at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:121)[150:org.apache.cxf.cxf-api:2.7.0.redhat-610139]
	at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.serviceRequest(JettyHTTPDestination.java:355)[176:org.apache.cxf.cxf-rt-transports-http-jetty:2.7.0.redhat-610139]
	at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.doService(JettyHTTPDestination.java:319)[176:org.apache.cxf.cxf-rt-transports-http-jetty:2.7.0.redhat-610139]
	at org.apache.cxf.transport.http_jetty.JettyHTTPHandler.handle(JettyHTTPHandler.java:72)[176:org.apache.cxf.cxf-rt-transports-http-jetty:2.7.0.redhat-610139]
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1077)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1013)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:135)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:255)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:116)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.Server.handle(Server.java:368)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:488)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.AbstractHttpConnection.content(AbstractHttpConnection.java:943)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.AbstractHttpConnection$RequestHandler.content(AbstractHttpConnection.java:1004)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:861)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:240)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.AsyncHttpConnection.handle(AsyncHttpConnection.java:82)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:628)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:52)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:608)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:543)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at java.lang.Thread.run(Thread.java:744)[:1.7.0_45]
11:40:51,681 | WARN  | tp1806392083-718 | PhaseInterceptorChain            | 150 - org.apache.cxf.cxf-api - 2.7.0.redhat-610139 | Exception in handleFault on interceptor org.apache.cxf.binding.xml.interceptor.XMLFaultOutInterceptor@7ba1c840
org.apache.cxf.interceptor.Fault
	at org.apache.cxf.interceptor.AbstractFaultChainInitiatorObserver.onMessage(AbstractFaultChainInitiatorObserver.java:76)[150:org.apache.cxf.cxf-api:2.7.0.redhat-610139]
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:333)[150:org.apache.cxf.cxf-api:2.7.0.redhat-610139]
	at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:121)[150:org.apache.cxf.cxf-api:2.7.0.redhat-610139]
	at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.serviceRequest(JettyHTTPDestination.java:355)[176:org.apache.cxf.cxf-rt-transports-http-jetty:2.7.0.redhat-610139]
	at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.doService(JettyHTTPDestination.java:319)[176:org.apache.cxf.cxf-rt-transports-http-jetty:2.7.0.redhat-610139]
	at org.apache.cxf.transport.http_jetty.JettyHTTPHandler.handle(JettyHTTPHandler.java:72)[176:org.apache.cxf.cxf-rt-transports-http-jetty:2.7.0.redhat-610139]
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1077)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1013)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:135)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:255)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:116)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.Server.handle(Server.java:368)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:488)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.AbstractHttpConnection.content(AbstractHttpConnection.java:943)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.AbstractHttpConnection$RequestHandler.content(AbstractHttpConnection.java:1004)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:861)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:240)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.AsyncHttpConnection.handle(AsyncHttpConnection.java:82)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:628)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:52)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:608)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:543)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at java.lang.Thread.run(Thread.java:744)[:1.7.0_45]
Caused by: java.lang.NullPointerException
	at org.apache.cxf.jaxrs.impl.tl.ThreadLocalProviders.getContextResolver(ThreadLocalProviders.java:50)[166:org.apache.cxf.cxf-rt-frontend-jaxrs:2.7.0.redhat-610139]
	at org.codehaus.jackson.jaxrs.JacksonJsonProvider.locateMapper(JacksonJsonProvider.java:633)[245:jackson-jaxrs:1.9.10]
	at org.codehaus.jackson.jaxrs.JacksonJsonProvider.readFrom(JacksonJsonProvider.java:413)[245:jackson-jaxrs:1.9.10]
	at org.apache.cxf.jaxrs.utils.JAXRSUtils.readFromMessageBodyReader(JAXRSUtils.java:1280)[166:org.apache.cxf.cxf-rt-frontend-jaxrs:2.7.0.redhat-610139]
	at org.apache.cxf.jaxrs.utils.JAXRSUtils.readFromMessageBody(JAXRSUtils.java:1231)[166:org.apache.cxf.cxf-rt-frontend-jaxrs:2.7.0.redhat-610139]
	at org.apache.cxf.jaxrs.utils.JAXRSUtils.processParameter(JAXRSUtils.java:782)[166:org.apache.cxf.cxf-rt-frontend-jaxrs:2.7.0.redhat-610139]
	at org.apache.cxf.jaxrs.utils.JAXRSUtils.processParameters(JAXRSUtils.java:741)[166:org.apache.cxf.cxf-rt-frontend-jaxrs:2.7.0.redhat-610139]
	at org.apache.cxf.jaxrs.interceptor.JAXRSInInterceptor.processRequest(JAXRSInInterceptor.java:263)[166:org.apache.cxf.cxf-rt-frontend-jaxrs:2.7.0.redhat-610139]
	at org.apache.cxf.jaxrs.interceptor.JAXRSInInterceptor.handleMessage(JAXRSInInterceptor.java:103)[166:org.apache.cxf.cxf-rt-frontend-jaxrs:2.7.0.redhat-610139]
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:272)[150:org.apache.cxf.cxf-api:2.7.0.redhat-610139]
	... 21 more
11:40:51,682 | ERROR | tp1806392083-718 | tractFaultChainInitiatorObserver | 150 - org.apache.cxf.cxf-api - 2.7.0.redhat-610139 | Error occurred during error handling, give up!
org.apache.cxf.interceptor.Fault
	at org.apache.cxf.interceptor.AbstractFaultChainInitiatorObserver.onMessage(AbstractFaultChainInitiatorObserver.java:76)[150:org.apache.cxf.cxf-api:2.7.0.redhat-610139]
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:333)[150:org.apache.cxf.cxf-api:2.7.0.redhat-610139]
	at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:121)[150:org.apache.cxf.cxf-api:2.7.0.redhat-610139]
	at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.serviceRequest(JettyHTTPDestination.java:355)[176:org.apache.cxf.cxf-rt-transports-http-jetty:2.7.0.redhat-610139]
	at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.doService(JettyHTTPDestination.java:319)[176:org.apache.cxf.cxf-rt-transports-http-jetty:2.7.0.redhat-610139]
	at org.apache.cxf.transport.http_jetty.JettyHTTPHandler.handle(JettyHTTPHandler.java:72)[176:org.apache.cxf.cxf-rt-transports-http-jetty:2.7.0.redhat-610139]
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1077)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1013)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:135)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:255)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:116)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.Server.handle(Server.java:368)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:488)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.AbstractHttpConnection.content(AbstractHttpConnection.java:943)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.AbstractHttpConnection$RequestHandler.content(AbstractHttpConnection.java:1004)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:861)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:240)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.AsyncHttpConnection.handle(AsyncHttpConnection.java:82)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:628)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:52)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:608)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:543)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at java.lang.Thread.run(Thread.java:744)[:1.7.0_45]
Caused by: java.lang.NullPointerException
	at org.apache.cxf.jaxrs.impl.tl.ThreadLocalProviders.getContextResolver(ThreadLocalProviders.java:50)[166:org.apache.cxf.cxf-rt-frontend-jaxrs:2.7.0.redhat-610139]
	at org.codehaus.jackson.jaxrs.JacksonJsonProvider.locateMapper(JacksonJsonProvider.java:633)[245:jackson-jaxrs:1.9.10]
	at org.codehaus.jackson.jaxrs.JacksonJsonProvider.readFrom(JacksonJsonProvider.java:413)[245:jackson-jaxrs:1.9.10]
	at org.apache.cxf.jaxrs.utils.JAXRSUtils.readFromMessageBodyReader(JAXRSUtils.java:1280)[166:org.apache.cxf.cxf-rt-frontend-jaxrs:2.7.0.redhat-610139]
	at org.apache.cxf.jaxrs.utils.JAXRSUtils.readFromMessageBody(JAXRSUtils.java:1231)[166:org.apache.cxf.cxf-rt-frontend-jaxrs:2.7.0.redhat-610139]
	at org.apache.cxf.jaxrs.utils.JAXRSUtils.processParameter(JAXRSUtils.java:782)[166:org.apache.cxf.cxf-rt-frontend-jaxrs:2.7.0.redhat-610139]
	at org.apache.cxf.jaxrs.utils.JAXRSUtils.processParameters(JAXRSUtils.java:741)[166:org.apache.cxf.cxf-rt-frontend-jaxrs:2.7.0.redhat-610139]
	at org.apache.cxf.jaxrs.interceptor.JAXRSInInterceptor.processRequest(JAXRSInInterceptor.java:263)[166:org.apache.cxf.cxf-rt-frontend-jaxrs:2.7.0.redhat-610139]
	at org.apache.cxf.jaxrs.interceptor.JAXRSInInterceptor.handleMessage(JAXRSInInterceptor.java:103)[166:org.apache.cxf.cxf-rt-frontend-jaxrs:2.7.0.redhat-610139]
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:272)[150:org.apache.cxf.cxf-api:2.7.0.redhat-610139]
	... 21 more
11:40:51,683 | WARN  | tp1806392083-718 | AbstractHttpConnection           | 93 - org.eclipse.jetty.aggregate.jetty-all-server - 8.1.9.v20130131 | /service1/service1path
java.lang.RuntimeException: org.apache.cxf.interceptor.Fault
	at org.apache.cxf.interceptor.AbstractFaultChainInitiatorObserver.onMessage(AbstractFaultChainInitiatorObserver.java:116)[150:org.apache.cxf.cxf-api:2.7.0.redhat-610139]
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:333)[150:org.apache.cxf.cxf-api:2.7.0.redhat-610139]
	at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:121)[150:org.apache.cxf.cxf-api:2.7.0.redhat-610139]
	at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.serviceRequest(JettyHTTPDestination.java:355)[176:org.apache.cxf.cxf-rt-transports-http-jetty:2.7.0.redhat-610139]
	at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.doService(JettyHTTPDestination.java:319)[176:org.apache.cxf.cxf-rt-transports-http-jetty:2.7.0.redhat-610139]
	at org.apache.cxf.transport.http_jetty.JettyHTTPHandler.handle(JettyHTTPHandler.java:72)[176:org.apache.cxf.cxf-rt-transports-http-jetty:2.7.0.redhat-610139]
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1077)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1013)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:135)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:255)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:116)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.Server.handle(Server.java:368)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:488)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.AbstractHttpConnection.content(AbstractHttpConnection.java:943)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.AbstractHttpConnection$RequestHandler.content(AbstractHttpConnection.java:1004)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:861)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:240)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.server.AsyncHttpConnection.handle(AsyncHttpConnection.java:82)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:628)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:52)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:608)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:543)[93:org.eclipse.jetty.aggregate.jetty-all-server:8.1.9.v20130131]
	at java.lang.Thread.run(Thread.java:744)[:1.7.0_45]
Caused by: org.apache.cxf.interceptor.Fault
	at org.apache.cxf.interceptor.AbstractFaultChainInitiatorObserver.onMessage(AbstractFaultChainInitiatorObserver.java:76)[150:org.apache.cxf.cxf-api:2.7.0.redhat-610139]
	... 22 more
Caused by: java.lang.NullPointerException
	at org.apache.cxf.jaxrs.impl.tl.ThreadLocalProviders.getContextResolver(ThreadLocalProviders.java:50)[166:org.apache.cxf.cxf-rt-frontend-jaxrs:2.7.0.redhat-610139]
	at org.codehaus.jackson.jaxrs.JacksonJsonProvider.locateMapper(JacksonJsonProvider.java:633)[245:jackson-jaxrs:1.9.10]
	at org.codehaus.jackson.jaxrs.JacksonJsonProvider.readFrom(JacksonJsonProvider.java:413)[245:jackson-jaxrs:1.9.10]
	at org.apache.cxf.jaxrs.utils.JAXRSUtils.readFromMessageBodyReader(JAXRSUtils.java:1280)[166:org.apache.cxf.cxf-rt-frontend-jaxrs:2.7.0.redhat-610139]
	at org.apache.cxf.jaxrs.utils.JAXRSUtils.readFromMessageBody(JAXRSUtils.java:1231)[166:org.apache.cxf.cxf-rt-frontend-jaxrs:2.7.0.redhat-610139]
	at org.apache.cxf.jaxrs.utils.JAXRSUtils.processParameter(JAXRSUtils.java:782)[166:org.apache.cxf.cxf-rt-frontend-jaxrs:2.7.0.redhat-610139]
	at org.apache.cxf.jaxrs.utils.JAXRSUtils.processParameters(JAXRSUtils.java:741)[166:org.apache.cxf.cxf-rt-frontend-jaxrs:2.7.0.redhat-610139]
	at org.apache.cxf.jaxrs.interceptor.JAXRSInInterceptor.processRequest(JAXRSInInterceptor.java:263)[166:org.apache.cxf.cxf-rt-frontend-jaxrs:2.7.0.redhat-610139]
	at org.apache.cxf.jaxrs.interceptor.JAXRSInInterceptor.handleMessage(JAXRSInInterceptor.java:103)[166:org.apache.cxf.cxf-rt-frontend-jaxrs:2.7.0.redhat-610139]
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:272)[150:org.apache.cxf.cxf-api:2.7.0.redhat-610139]
	... 21 more
",Fuse ESB 6.1.0.alpha,,,,,,,,,,,,,,,,,,,CXF-5542,22/Jan/14 20:33;dvanbale;CAMEL-7147.zip;https://issues.apache.org/jira/secure/attachment/12624421/CAMEL-7147.zip,07/Feb/14 16:36;sergey_beryozkin;blueprint.xml;https://issues.apache.org/jira/secure/attachment/12627647/blueprint.xml,10/Feb/14 22:25;sergey_beryozkin;jaxrs-beans.xml;https://issues.apache.org/jira/secure/attachment/12628087/jaxrs-beans.xml,,,,3.0,,,,,,,,,,,,,,,,,,,2014-01-26 09:12:54.148,,,no_permission,,Unknown,,,,,,,,,,,369262,,,Tue Feb 11 15:58:17 UTC 2014,,,,,,,0|i1rn8n:,369567,,,,,,,,,"22/Jan/14 16:53;dvanbale;Reproducer project, contains a camel route project (camel-blueprint-jackson), a project with shared class (model), and two additional REST services to be called by the camel route (service2 and service3).",22/Jan/14 20:33;dvanbale;Fixed logging issue in service3,"22/Jan/14 21:20;dvanbale;Update:

Looks like, on the first invocation, all three services are called and the NPE occurs when the entry-point service is sending its response. Upon subsequent invocations, there is an immediate NPE during invocation of the entry-point service.","23/Jan/14 19:21;dvanbale;A workaround for this is to wire your own ObjectMapper and use it to instantiate the JacksonJsonProvider. This way, the provider won't attempt to store the mapper on the thread local context.

	<bean id=""jacksonMapper"" class=""org.codehaus.jackson.map.ObjectMapper"" />
	<bean id=""jsonProvider"" class=""org.codehaus.jackson.jaxrs.JacksonJsonProvider"">
		<argument ref=""jacksonMapper""/>
	</bean>

","26/Jan/14 09:12;njiang;Hi David,

You user case is more complicated than the other CXFRS application, I suggest you use camel-jetty and camel-http to implement the REST proxy server with more control on you side.
 
In the code of CXF, the rs server clean the proxy thread local context when it suspend the invocation.  But in your rs client side it may still need to access the thread local information when it get the response message.

Can you change the enter point of camel route in camel-blueprint-jackson like this?
{code}
...
  <route id=""twBusinessRoute"">
                        <from uri=""cxfrs:bean:Service1?Synchronous=false"" />
...
{code}
The Synchronous option can make sure the request and response are handled in the same thread.

Regards,

Willem
","04/Feb/14 17:36;sergey_beryozkin;Willem, it is nothing to do with CXF clearing the thread-local proxies on the invocation thread exiting for whatever reasons.

The reason for this NPE is that we have a single Jackson JAX-RS provider shared between multiple CXFRS components - this is in itself is fine, we have a test where a single Jackson provider instance is shared between few endpoints. The problem is the components in the route have different CXF bus instances => the server endpoint injects a thread local proxy into Jackson while the client being injected with a different bus - another one which overrides the server-injected one, therefore the server thinking it has a proper local proxy injects the current value into it bur the provider points to another thread local proxy.

It is a bit of a mess unfortunately.

I've managed to get past the NPE but updating it like this:

{code:xml}
        <bean class=""org.apache.cxf.bus.blueprint.BlueprintBus"" id=""jaxrs"">
            <property name=""id"" value=""jaxrs""/>
        </bean>

	<cxf:rsServer id=""Service1"" address=""http://localhost:8182""
		serviceClass=""com.mycompany.camel.blueprint.jackson.ServiceOne""
		loggingFeatureEnabled=""true""
                bus=""jaxrs"">
		<cxf:providers>
			<ref component-id=""jsonProvider"" />
		</cxf:providers>
	</cxf:rsServer>
        <!-- and also injecting the bus references for clients -->
{code}

and then adding a bus ref

{code:xml}

<from uri=""cxfrs:bean:Service1?bus=#jaxrs"" />

<!-- same for to: -->
{code}

Another work-around is to register a unique Jackson provider per the component, but that is not cool.

This got me past NPE but I hit:

{noformat}
Caused by: org.codehaus.jackson.map.JsonMappingException: No serializer found for class org.apache.cxf.helpers.LoadingByteArrayOutputStream$1 and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationConfig.Feature.FAIL_ON_EMPTY_BEANS) )
	at org.codehaus.jackson.map.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:52)[197:jackson-mapper-asl:1.9.13]
{noformat}

I think we are actually hitting the problem to do with Jackson blindly accepting all types including InputStream, I'll play a bit more with it; CXF should also be enhanced to allow the thread local contexts shared between different buses
","07/Feb/14 16:36;sergey_beryozkin;David, Willem, see the attached files, it all works nicely if we use a custom bus (will not be needed starting from CXF 2.7.10) and drop Jackson: it accepts InputStream and then chokes on it (this won't be a problem with CXF 3.0.0, with JAX-RS 2.0 requiring that the default providers take care of types like InputStream, etc). ","07/Feb/14 16:41;sergey_beryozkin;Willem or David (if you are still interested) - can you please confirm independently it will work with CXF 2.7.10 when it is out ? if you will, please use the attached files first, next - remove a reference to the custom bus - this should not be needed with CXF 2.7.10. And as I said, with CXF 3.0.0 the original route definition is expected to work as is, i.e, no custom bus and jettison references","08/Feb/14 06:40;njiang;Hi Sergey,

Thanks for digging this issue. If you did some change in the CXF side, could you please add a comment with the CXF JIRA?
It could be easy for the user to follow the fix of CXF.

Regards,

Willem",09/Feb/14 18:32;sergey_beryozkin;CXF-5542 fix will let users avoid introducing shared custom CXF buses as shown in the attached files ,"10/Feb/14 02:54;njiang;Hi Sergey,

Thanks for the link. 
It looks there is an bus injection issue in camel-cxfrs blueprint parser, I will dig the code to see if I can do some work on the camel-cxf side to make sure the bus are injected rightly.

Regards,

Willem","10/Feb/14 11:31;sergey_beryozkin;Hi Willem, I see you've added the tests validating the bus injection works , thanks.

I've created 

https://issues.apache.org/jira/browse/CXF-5551 

but it is to do with the fact that creating a custom bus with a name other than ""cxf"" in the context via the CXF Blueprint namespace handler does not really work; I guess CXF-5551 is a pure CXF issue, unless you see this being actually a CXF RS Blueprint parser issue, I've looked at the Camel code, it seems OK to me, please double check.

Cheers, Sergey

",10/Feb/14 22:25;sergey_beryozkin;CXF-5551 is a non issue; updated jaxrs-beans.xml,"11/Feb/14 04:57;njiang;Hi Sergey,

I just did a quick test with karaf 2.3.3, camel-2.13-SNAPSHOT and CXF 2.7.10, the NPE is gone.

Regards,

Willem","11/Feb/14 09:46;sergey_beryozkin;Hi Willem, thanks for the help on your end; I guess this issue becomes resolved then ? The only other thing that is worth testing, may be independently, is that the original route as defined by David works (with Jackson & with no custom bus) - with CXF 3.0.0-miltesone2, when it's out, but it can be done later 
Cheers, Sergey","11/Feb/14 15:58;dvanbale;Thanks for your work on this. I am still interested in testing the original route. I'll try to do so when I get a chance, but not sure when I'll get to that since I'm not working with Camel at the moment.",,,,,,,,
ByteBuffer to String conversion uses buffer capacity not limit,CAMEL-7241,12697241,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,aaronjwhiteside,aaronjwhiteside,25/Feb/14 22:50,28/Feb/14 07:36,13/Mar/19 22:18,28/Feb/14 07:36,2.12.3,,,,,,,,,2.11.5,2.12.4,2.13.0,,camel-core,,,,,,0,,,,,,,,,"Camel's conversion logic for ByteBuffer's to String's has a bug where camel uses a ByteBuffers capacity() instead of it's limit().

If you allocate a large byte buffer and only partially fill it with data, and use camel to convert this into a string, camel tries to convert all the bytes, even the non-used ones.

This unit test reproduces this bug.

{code}
    @Test
    public void testByteBufferToStringConversion()
    {
        String str = ""123456789"";
        ByteBuffer buffer = ByteBuffer.allocate( 16 );
        buffer.put( str.getBytes() );

        Exchange exchange = new DefaultExchange( context() );
        exchange.getIn().setBody( buffer );
        assertEquals( str, exchange.getIn().getBody( String.class ) );
    }
{code}",,3600,3600,,0%,3600,3600,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-02-26 02:35:59.78,,,no_permission,,Novice,,,,,,,,,,,375715,,,Wed Feb 26 02:35:59 UTC 2014,,,,,,,0|i1sqsf:,376011,,,,,,,,,"26/Feb/14 02:35;njiang;Applied the patch into camel master, camel-2.12.x and camel-2.11.x branches.",,,,,,,,,,,,,,,,,,,,,,,
PGPDataFormat: verification with subkey restricted by User ID does not work,CAMEL-7244,12697388,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,forsthofer,forsthofer,26/Feb/14 15:45,27/Feb/14 07:26,13/Mar/19 22:18,27/Feb/14 07:26,2.13.0,,,,,,,,,2.13.0,,,, camel-crypto,,,,,,0,,,,,,,,,"If you verify a PGP signature with a subkey which should have a certain User ID, then you run into an error.

Reason: The implementation has not taken into account that the subkey has no User ID on its own. One must consider the User ID of its master/primary key. ",,,,,,,,,,,,,,,,,,,,,26/Feb/14 15:45;forsthofer;0001-pgp-verficiation-with-subkey-filtered-by-user-ID.patch;https://issues.apache.org/jira/secure/attachment/12631253/0001-pgp-verficiation-with-subkey-filtered-by-user-ID.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-02-27 07:26:05.917,,,no_permission,,Unknown,,,,,,,,,,,375862,,,Thu Feb 27 07:26:05 UTC 2014,,,Patch Available,,,,0|i1srp3:,376158,,,,,,,,,27/Feb/14 07:26;njiang;Applied the patch into camel master branch with thanks to Franz.,,,,,,,,,,,,,,,,,,,,,,,
when(body().isInstanceOf(Collection.class)) does not work in 2.10.7,CAMEL-7242,12697281,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,oleg.kozlov,oleg.kozlov,26/Feb/14 02:04,26/Feb/14 06:52,13/Mar/19 22:18,26/Feb/14 06:52,2.10.7,,,,,,,,,2.12.0,,,,,,,,,,0,,,,,,,,,"I have a body object of type ArrayList<String>, the following Java DSL when() condition incorrectly evaluates to ""false"" in Camel version 2.10.7. In versions 2.10.3 and 2.12.2 it evaluates correctly to ""true"".

when(body().isInstanceOf(Collection.class))

Using Java 6.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-02-26 02:39:34.006,,,no_permission,,Unknown,,,,,,,,,,,375755,,,Wed Feb 26 06:52:46 UTC 2014,,,,,,,0|i1sr1b:,376051,,,,,,,,,26/Feb/14 02:39;njiang;We don't provide community support for camel-2.10.x. Please update your Camel version for it.,"26/Feb/14 02:42;oleg.kozlov;That's ok, as long as this bug does not get merged to 2.12 branch.

Thanks!","26/Feb/14 06:52;davsclaus;Fixed in 2.12 onwards. 

Camel 2.10.x is EOL",,,,,,,,,,,,,,,,,,,,,
ThreadsProcessor should resolve RejectedPolicy from the referenced ThreadPoolProfile,CAMEL-7240,12697147,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,hekonsek,hekonsek,25/Feb/14 16:52,25/Feb/14 16:54,13/Mar/19 22:18,25/Feb/14 16:54,,,,,,,,,,2.13.0,,,,camel-core,,,,,,0,,,,,,,,,"Hi,

{{ThreadsProcessor}} uses {{rejectedPolicy}} field to determine if it should set the exception on the exchange. 

{code}
boolean abort = ThreadPoolRejectedPolicy.Abort == rejectedPolicy;
if (abort) {
  exchange.setException(new RejectedExecutionException());
}
{code}

Unfortunately {{ThreadsDefinition}} reads {{rejectedPolicy}} only if the latter is set directly on the Threads definition level. If {{getExecutorServiceRef}} is set on the {{ThreadsDefinition}}, the {{rejectedPolicy}} value from the referenced thread pool profile is ignored.

{code}
ThreadsProcessor thread = ...;
...
thread.setRejectedPolicy(getRejectedPolicy());
{code}

That leads to the situations when task is rejected, but exception is not set on the exchange, because {{ThreadsProcessor}} is unaware of the effective rejection policy.

The following configuration demonstrates the issue:

{code}
<threadPool id=""bigPool"" poolSize=""1"" maxPoolSize=""1"" threadName=""foo"" maxQueueSize=""1"" rejectedPolicy=""Abort""/>
...
<threads executorServiceRef=""bigPool"" ...>
...
{code}

{{ThreadsProcessor}} should resolve the rejection policy from the thread pool profile if one is referenced with the {{ExecutorServiceRef}} option.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,375621,,,Tue Feb 25 16:54:05 UTC 2014,,,,,,,0|i1sq7j:,375917,,,,,,,,,25/Feb/14 16:54;hekonsek;Fixed in 77bbb6e2783cb552fb735ce6caeb711bec8eb472.,,,,,,,,,,,,,,,,,,,,,,,
SJMS does not respect QoS settings (ttl/persistence) for sending to queues,CAMEL-7230,12696295,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ceposta,ceposta,ceposta,20/Feb/14 16:45,24/Feb/14 17:59,13/Mar/19 22:18,20/Feb/14 20:51,2.12.2,,,,,,,,,2.12.4,2.13.0,,,camel-sjms,,,,,,0,,,,,,,,,"Reproduced here:

https://github.com/christian-posta/camel-sandbox/blob/master/camel-2.12.2-issues/src/test/java/posta/SjmsTestFromMailingList.java",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,374771,,,Thu Feb 20 20:51:38 UTC 2014,,,,,,,0|i1skzr:,375071,,,,,,,,,"20/Feb/14 20:51;ceposta;Fixed with this commit: 
https://git-wip-us.apache.org/repos/asf/camel.git/?p=camel.git;a=commitdiff;h=5d1eebccce0e88e053be100c401a97ecb10e8908",,,,,,,,,,,,,,,,,,,,,,,
Address the SchemaFactory thread safe issue.,CAMEL-7239,12696841,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,24/Feb/14 04:45,24/Feb/14 07:16,13/Mar/19 22:18,24/Feb/14 07:16,2.11.3,2.12.3,,,,,,,,2.11.5,2.12.4,2.13.0,,camel-validator,,,,,,0,,,,,,,,,"SchemaFactory is not thread safe, we need to do addition work in ValidatorProcessor to avoid the threads issue.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,375316,,,Mon Feb 24 07:16:43 UTC 2014,,,,,,,0|i1sobz:,375612,,,,,,,,,"24/Feb/14 07:16;njiang;Applied the patch into master, camel-2.12.x and camel-2.11.x branches.",,,,,,,,,,,,,,,,,,,,,,,
NIOConverter need to call flip() when we put something into the buffer,CAMEL-7213,12695449,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,17/Feb/14 06:28,21/Feb/14 14:44,13/Mar/19 22:19,17/Feb/14 06:59,,,,,,,,,,2.12.3,2.13.0,,,camel-core,,,,,,0,,,,,,,,,"When we create a ByteBuffer, we need to make sure it is ready to be read.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,373957,,,Mon Feb 17 06:59:33 UTC 2014,,,,,,,0|i1sfz3:,374257,,,,,,,,,17/Feb/14 06:59;njiang;Applied the patch into master and camel-2.12.x branches.,,,,,,,,,,,,,,,,,,,,,,,
Failed to validate camel-fop feature,CAMEL-7183,12694173,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,muellerc,muellerc,09/Feb/14 20:28,21/Feb/14 14:40,13/Mar/19 22:19,09/Feb/14 21:03,,,,,,,,,,2.12.3,2.13.0,,,,,,,,,0,,,,,,,,,"{noformat}
christians-mbp:karaf cmueller$ mvn clean install -Pvalidate
[INFO] Scanning for projects...
...
[INFO]     OK: imports resolved for camel-flatpack
[WARNING] Failed to validate feature camel-fop
[WARNING] No export found to match org.apache.bcel.classfile;version=""[5.1,6)"" (imported by mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.xalan/2.7.1_7)
[WARNING] No export found to match org.apache.bcel.util;version=""[5.1,6)"" (imported by mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.xalan/2.7.1_7)
[WARNING] No export found to match org.apache.bcel.generic;version=""[5.1,6)"" (imported by mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.xalan/2.7.1_7)
{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,372682,,,2014-02-09 20:28:34.0,,,,,,,0|i1s85r:,372986,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NIOConverter.toByteArray return bad data.,CAMEL-7209,12695361,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,rhubner,rhubner,15/Feb/14 14:01,21/Feb/14 14:39,13/Mar/19 22:19,17/Feb/14 05:48,,,,,,,,,,2.12.3,2.13.0,,,camel-core,,,,,,0,,,,,,,,,"Current implmentation of NIOConverter.toByteArray return the byte array
that back the buffer. Array can be bigger that relevant data in ByteBuffer.",,,,,,,,,,,,,,,,,,,,,15/Feb/14 14:03;rhubner;0001-CAMEL-7209-Fix-wrong-implementation-NIOConverter.toB.patch;https://issues.apache.org/jira/secure/attachment/12629219/0001-CAMEL-7209-Fix-wrong-implementation-NIOConverter.toB.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-02-17 05:48:22.56,,,no_permission,,Unknown,,,,,,,,,,,373869,,,Mon Feb 17 05:48:22 UTC 2014,,,Patch Available,,,,0|i1sffj:,374169,,,,,,,,,17/Feb/14 05:48;njiang;Applied the patch into master and camel-2.12.x branches with thanks to Radek.,,,,,,,,,,,,,,,,,,,,,,,
Fix broken BeanValidatorTest,CAMEL-7211,12695409,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hekonsek,hekonsek,hekonsek,16/Feb/14 16:18,16/Feb/14 16:37,13/Mar/19 22:19,16/Feb/14 16:37,,,,,,,,,,2.13.0,,,,,,,,,,0,,,,,,,,,{{BeanValidatorTest}} doesn't pass because Hibernate Validator doesn't work well in OSGi environment out-of-the-box. We need to fix the test.,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,373917,,,Sun Feb 16 16:37:16 UTC 2014,,,,,,,0|i1sfq7:,374217,,,,,,,,,16/Feb/14 16:37;hekonsek;Fixed by resolving CAMEL-7211.,,,,,,,,,,,,,,,,,,,,,,,
Bean Validator should use OSGi-friendly ValidationProviderResolver if deployed into OSGi environment,CAMEL-7212,12695410,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hekonsek,hekonsek,hekonsek,16/Feb/14 16:22,16/Feb/14 16:36,13/Mar/19 22:19,16/Feb/14 16:36,,,,,,,,,,2.13.0,,,,,,,,,,0,,,,,,,,,"If Bean Validator is deployed into OSGi container (like Karaf), it should use OSGi-friendly {{ValidationProviderResolver}}.

We should detect the type of the current {{CamelContext}} and if the latter is OSGi-aware, and if {{ValidationProviderResolver}} isn't specified explicitly, then we should use {{HibernateValidationProviderResolver}} (which is OSGi-friendly).",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,373918,,,Sun Feb 16 16:36:50 UTC 2014,,,,,,,0|i1sfqf:,374218,,,,,,,,,16/Feb/14 16:36;hekonsek;Fixed in 9b7ab4263f1c99c230f0bc5089c2f200b63a5fb2.,,,,,,,,,,,,,,,,,,,,,,,
[cxfrs] Consumer returns 204 response for simple route,CAMEL-7198,12694739,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,amarkevich,amarkevich,12/Feb/14 12:57,14/Feb/14 08:17,13/Mar/19 22:19,14/Feb/14 08:16,2.12.2,,,,,,,,,2.11.4,2.12.3,2.13.0,,camel-cxf,,,,,,0,,,,,,,,,"Route: from(""cxfrs://.."").setBody().simple("".."");

If .to(""log:any"") added then response is 200",,,,,,,,,,,,,,CAMEL-7061,,,,,,,12/Feb/14 12:57;amarkevich;camel-204.zip;https://issues.apache.org/jira/secure/attachment/12628476/camel-204.zip,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-02-14 08:16:13.175,,,no_permission,,Unknown,,,,,,,,,,,373247,,,Fri Feb 14 08:16:13 UTC 2014,,,,,,,0|i1sbmf:,373548,,,,,,,,,14/Feb/14 08:16;njiang;This issue has been fixed by CAMEL-7061.,,,,,,,,,,,,,,,,,,,,,,,
DefaultCxfRsBinding only uses Exchange.getOut(),CAMEL-7061,12684068,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,DominikAmon,DominikAmon,11/Dec/13 16:32,14/Feb/14 08:16,13/Mar/19 22:19,12/Dec/13 13:39,2.12.2,,,,,,,,,2.11.3,2.12.3,2.13.0,,camel-cxf,,,,,,0,,,,,,,,,"When {{org.apache.camel.component.cxf.jaxrs.DefaultCxfRsBinding}} is populating the response from an {{org.apache.camel.Exchange}} then only the {{exchange.getOut().getBody()}} is used.

In the SOAP case {{org.apache.camel.component.cxf.DefaultCxfBinding}} the response is either uses  {{exchange.getOut().getBody()}} or {{exchange.getIn().getBody()}}

See also [Discussion|http://camel.465427.n5.nabble.com/DefaultCxfRsBinding-only-uses-Exchange-getOut-td5744605.html] for more details.",,,,,,,,,,,,,,,,,,,,,11/Dec/13 16:35;DominikAmon;DefaultCxfRsBinding.patch;https://issues.apache.org/jira/secure/attachment/12618256/DefaultCxfRsBinding.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-12-12 13:39:05.402,,,no_permission,,Unknown,,,,,,,,,,,363140,,,Thu Dec 12 13:39:05 UTC 2013,,,,,,,0|i1qlhb:,363446,,,,,,,,,11/Dec/13 16:35;DominikAmon;The patch implements the same handling as in {{org.apache.camel.component.cxf.DefaultCxfBinding}} for propulating the response in the {{org.apache.camel.component.cxf.jaxrs.DefaultCxfRsBinding}},"12/Dec/13 13:39;njiang;Applied the patch into master, camel-2.12.x and camel-2.11.x branches.",,,,,,,,,,,,,,,,,,,,,,
PGPDataFormat: Sub-Key not supported for signing and correct selection of encryption/signing key via KeyFlag,CAMEL-7192,12694477,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,forsthofer,forsthofer,11/Feb/14 12:06,13/Feb/14 09:43,13/Mar/19 22:19,12/Feb/14 09:59,2.12.2,,,,,,,,,2.12.3,2.13.0,,, camel-crypto,,,,,,0,,,,,,,,,"A PGP key ring with version 4 keys typically consists of a primary key which has sub-keys. There is a use-case where the primary key has only the usage flag (KeyFlag) ""certify"" and one sub-key is makred with the usage flag ""signing"" and the other sub-key is marked with usage flag""encryption"".  In this case the PGPDataFormat does not use the correct sub-key for signing and encryption.

In the patch I enabled the usage of sub-keys for the signing process and I introduced the usage flag (KeyFlag) for finding the correct keys for signing and encryption.

",,,,,,,,,,,,,,,,,,,,,13/Feb/14 09:43;forsthofer;0001-pgp-key-accessor-interfaces-for-key-caching.patch;https://issues.apache.org/jira/secure/attachment/12628710/0001-pgp-key-accessor-interfaces-for-key-caching.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-02-12 03:29:11.676,,,no_permission,,Unknown,,,,,,,,,,,372985,,,Wed Feb 12 09:59:17 UTC 2014,,,Patch Available,,,,0|i1sa0f:,373287,,,,,,,,,"12/Feb/14 03:29;njiang;Applied the patch into master and camel-2.12.x branches with thanks to Franz.
@Franz,  
Do you mind update the wiki page for the new feature?",12/Feb/14 06:47;forsthofer;I will do that.,12/Feb/14 07:30;forsthofer;I updated the wiki.,"12/Feb/14 09:59;njiang;Thanks Franz, now I can close the issue.",,,,,,,,,,,,,,,,,,,,
getComponentDocumentation do not work in OSGi,CAMEL-7200,12694769,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,12/Feb/14 16:20,12/Feb/14 16:35,13/Mar/19 22:19,12/Feb/14 16:35,2.12.0,,,,,,,,,2.12.3,2.13.0,,,camel-core,osgi,,,,,0,,,,,,,,,"This API returns null in OSGi, eg Karaf.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,373277,,,2014-02-12 16:20:41.0,,,,,,,0|i1sbt3:,373578,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
APT - Should check inherited class/interface for UriParam when scanning,CAMEL-7185,12694234,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,10/Feb/14 10:39,10/Feb/14 12:05,13/Mar/19 22:19,10/Feb/14 12:05,2.12.0,,,,,,,,,2.12.3,2.13.0,,,tooling,,,,,,0,,,,,,,,,"For example generation of the file component does not check the super class which has all the options, and therefore we only detect a few options.

{code}
<html>
<header>
<title></title>
</header>
<body>
<h1>file endpoint</h1>
<p>File endpoint.</p>
<table class='table'>
  <tr>
    <th>Name</th>
    <th>Type</th>
    <th>Description</th>
  </tr>
  <tr>
    <td>copyAndDeleteOnRenameFail</td>
    <td>boolean</td>
    <td></td>
  </tr>
  <tr>
    <td>forceWrites</td>
    <td>boolean</td>
    <td></td>
  </tr>
</table>
<h2>file consumer</h2>
<p>File consumer.</p>
</body>
</html>
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,372743,,,2014-02-10 10:39:15.0,,,,,,,0|i1s8j3:,373047,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-guice - PostConstruct do not throw checked exception,CAMEL-7182,12694082,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,08/Feb/14 08:03,08/Feb/14 08:32,13/Mar/19 22:19,08/Feb/14 08:32,2.12.0,,,,,,,,,2.11.4,2.12.3,2.13.0,,camel-guice,,,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/GuiceCamelContext-checked-exception-issue-with-Glassfish4-tp5746869.html",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,372591,,,2014-02-08 08:03:33.0,,,,,,,0|i1s7lz:,372895,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
A single call of consumerTemplate.receiveBody consumes more than one messages from a SEDA queue,CAMEL-7112,12687680,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,bocamel,bocamel,07/Jan/14 16:47,06/Feb/14 16:42,13/Mar/19 22:19,06/Feb/14 16:42,2.12.2,,,,,,,,,2.11.4,2.12.3,2.13.0,,camel-core,,,,,,0,,,,,,,,,"When using consumer template's receiveBody on a SEDA queue that has multiple exchanges, a single call of receiveBody consumed more than one messages from the queue.  This happens for both receiveBody and receiveBodyNoWait.

I will attach a test project that can produce this issue.",JDK 1.7 on Windows 8.1,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-02-06 14:51:56.742,,,no_permission,,Unknown,,,,,,,,,,,366680,,,Thu Feb 06 14:51:56 UTC 2014,,,,,,,0|i1r7f3:,366991,,,,,,,,,"07/Jan/14 16:54;bocamel;SInce it seems that I cannot attach files to this issue, here are the code to reproduce this issue:

public class TestProc implements Processor {
	
	public void process(Exchange exchange) throws Exception {
		SedaEndpoint queueEp = (SedaEndpoint) exchange.getContext().getEndpoint(""seda:test"");
		ConsumerTemplate cTemplate = (ConsumerTemplate) exchange.getContext().getRegistry().lookupByName(""cTemplate"");
		System.out.println(""seda queue size before receive: "" + queueEp.getExchanges().size());
		String msgBody = cTemplate.receiveBody(queueEp, 10, String.class);
		System.out.println(""seda queue size after receive: "" + queueEp.getExchanges().size());
	}

}

will produce the following output:

seda queue size before receive: 5 
seda queue size after receive: 0 

That is, after a single receive, the queue became empty.  The routes used are:

  <bean id=""testProc"" class=""com.pci.TestSeda.TestProc"" />
  <camel:camelContext xmlns=""http://camel.apache.org/schema/spring"">

        <camel:consumerTemplate id=""cTemplate"" />

    <camel:route>
      <camel:from uri=""file:src/data?noop=true""/>
      <camel:to uri=""seda:test"" />
    </camel:route>
    
    <camel:route>
    <camel:from uri=""timer://foo?period=500000"" />
    <camel:process ref=""testProc""/>
    </camel:route>
  </camel:camelContext>

Thank you!
","06/Feb/14 14:51;davsclaus;Thanks for reporting. Yeah we should use a real polling consumer implementation instead of the event driven, then we can better control taking exchanges from the queue.",,,,,,,,,,,,,,,,,,,,,,
2.12.1 caches groovy call - resulting with previous caller state,CAMEL-6988,12680319,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,7erry,7erry,20/Nov/13 16:34,04/Feb/14 21:36,13/Mar/19 22:19,31/Jan/14 16:18,2.12.1,,,,,,,,,2.11.4,2.12.3,2.13.0,,camel-groovy,,,,,,0,,,,,,,,,"2.12.1
Works
{code}
        <simple>""${body.subOrderName}Endpoint""</simple>
{code}
Fails 
{code}
         <groovy>""${request.body.subOrderName}Endpoint""</groovy>
{code}

2.11.1
Works
{code}
        <simple>""${body.subOrderName}Endpoint""</simple>
{code}
Works
{code}
        <groovy>""${request.body.subOrderName}Endpoint""</groovy>
{code}

*Fails by returning a previous calls result for subOrderName. 
To reproduce you must make several calls in a timely manner with different bean data (OGNL/subOrderName).

Route:
{code}
...
<setHeader headerName=""RSSX_ORDER_ROUTING_SLIP"">
<groovy>return ""${request.body.subOrderName}Endpoint""</groovy>
</setHeader>
<!-- Route the order by the routing slip header -->
<routingSlip>
<header>RSSX_ORDER_ROUTING_SLIP</header>
</routingSlip>
...
{code}

Log:
1st execution
Before set header:    UpdatePortIn

After set header:   RSSX_ORDER_ROUTING_SLIP=UpdatePortInEndpoint

2nd execution (in a timely manner – exposing a LRU Cache issue?)
Before set header: ResellerAddSubscriberPortIn
After set header:    RSSX_ORDER_ROUTING_SLIP=UpdatePortInEndpoint

Same logic works in 2.11.1

Additionally this does not appear OGNL related:
I just ran into the case where       
{code}
<setHeader headerName=""RSSX_ORDER_ROUTING_SLIP"">
        <groovy>""${request.body.getSubOrderName()}Endpoint""</groovy>
      </setHeader>
{code}

returns the cached subOrderName from the previous transaction

So this appears to be isolated to the <groovy> component changes (LRU Cache?) that were introduced in 2.12.1","same results using java 7 on osx, ubuntu, and windoze",,,,,,,,,,,,,CAMEL-7143,CAMEL-6340,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-11-21 19:35:57.733,,,no_permission,,Unknown,,,,,,,,,,,359584,,,Tue Feb 04 21:36:59 UTC 2014,,,,,,,0|i1pzlr:,359883,,,,,,,,,"21/Nov/13 19:35;davsclaus;CAMEL-6340 was also introduced in Camel 2.11.1. Are you sure its that version? Can you double check.
",21/Nov/13 19:46;davsclaus;How many different values do you return in the {{getSubOrderName}} method? Is there only these 2 values or do you have many more?,"21/Nov/13 19:59;davsclaus;Just pushed some unit tests to master. Cannot reproduce this.

Can you double check again what version doesnt work for you.
And if possible put together an unit test or small sample project that demonstrates/reproduces this issue?",21/Nov/13 20:00;davsclaus;Also what is the code logic in the method {{subOrderName}}?,"21/Nov/13 20:52;7erry;This is directly related to 2.12.1 since it works correctly in 2.11.1.
Also if we change from <groovy> to <simple> it works.
The exchange accepts an xml payload and then gets converted to a bean:
      <bean ref=""orderConverter"" method=""newExchangeOrder""/>
The bean uses Stax to marshal from XML into an ExchangeOrder bean.
The ExchangeOrder bean contains a getSubOrderName:
	String getSubOrderName(){ 	
		String s = order?.subOrder[0]?.class.simpleName
		
		(s.startsWith(""Lessee""))? s.replace('Lessee', 'Reseller') : s	
	}
","22/Nov/13 10:28;davsclaus;Groovy itself has likely been upgraded between Camel 2.11 and 2.12. Can you try downgrading and use same Groovy version, and test on your end.
And can you make a simpler unit test / sample project that reproduces this problem?

We cannot reproduce this issue you see on your end.

And frankly the setHeader logic you use is so simple you can just use the simple language.","22/Nov/13 14:39;7erry;These dependencies work:
    <camel-version>2.11.1</camel-version>
    <groovy-version>2.1.6</groovy-version>
These do not:
    <camel-version>2.12.1</camel-version>
    <groovy-version>2.1.6</groovy-version>

I have recommended the use of <simple> however it is a large project and there is some concern about how many conditional statements can be scoped ( (a&b)||(c&d) ) using simple.
I am still working on a localized test to reproduce this issue. It is is a timing issue; if you wait a few seconds before sending the second request it will have the correct value which is why I *assumed* it was related to caching groovy.
","22/Nov/13 15:10;7erry;This is isolated to the camel-groovy component given the following *working* configuration:
    <camel-version>2.12.1</camel-version>
    <groovy-version>2.1.6</groovy-version>

    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-script</artifactId>
      <version>2.11.1</version>
    </dependency>
",31/Jan/14 16:18;davsclaus;CAMEL-7143 fixes this.,04/Feb/14 21:36;7erry;Thank you! I'll have (big phone company) move back to groovy from simple once 2.12.3 is GA.,,,,,,,,,,,,,,
[bean-validation] Provide OSGi-friendly ValidationProviderResolver,CAMEL-7168,12693106,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hekonsek,hekonsek,hekonsek,04/Feb/14 13:57,04/Feb/14 15:09,13/Mar/19 22:19,04/Feb/14 15:09,,,,,,,,,,2.13.0,,,,,,,,,,0,,,,,,,,,Default Hibernate's {{ValidationProviderResolver}} doesn't work well in the OSGi environment. It will be nice to ship OSGi-friendly provider together with the camel-bean-validation jar.,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,371692,,,Tue Feb 04 15:09:42 UTC 2014,,,,,,,0|i1s23b:,371992,,,,,,,,,04/Feb/14 15:09;hekonsek;Fixed in 058d22e83a9f9d343ebb7299ca8cf371c69135de.,,,,,,,,,,,,,,,,,,,,,,,
BacklogDebugger - Should not change body/header type to string,CAMEL-7163,12692926,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,03/Feb/14 19:11,03/Feb/14 19:15,13/Mar/19 22:19,03/Feb/14 19:15,2.12.2,,,,,,,,,2.12.3,2.13.0,,,camel-core,,,,,,0,,,,,,,,,"When using the backlog debugger then updating the body/headers would currently force those to become string type.

We should preserve existing type, and allow end users to specify a new type. And also make it possible to remove body/headers as well.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,371512,,,2014-02-03 19:11:38.0,,,,,,,0|i1s0zb:,371814,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Problem with MvelExpression class visibility between camel bundles,CAMEL-7139,12689519,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,andrzej.majewski,andrzej.majewski,17/Jan/14 16:47,03/Feb/14 14:17,13/Mar/19 22:19,03/Feb/14 14:17,2.12.2,,,,,,,,,2.11.4,2.12.3,2.13.0,,osgi,,,,,,1,,,,,,,,,"http://camel.465427.n5.nabble.com/Problem-with-camel-routes-running-in-apache-karaf-2-3-3-td5745929.html

I am having problems with with class visibility between osgi bundles when using camel 2.12 and 2.13-SNAPSHOT. I have created a showcase to reproduce the problem based on camel example projects. I have tested the created solution in camel 2.10 and problem does not exist.

I have created a sample application which is able to reproduce the problem. Please pick it up from my forked repo:
https://github.com/andrzej-majewski/camel/tree/MvelExpression-class-visibility


The problem occurs when
- camel-example-osgi-domain - project containing only domain classes required by different osgi projects ex.( org.apache.camel.example.osgi.domain.MyPojo )
- camel-example-osgi-mvel -  example project which has dependency on camel-example-osgi-domain

Now camel-example-osgi-mvel has following camel context.
{code}
<?xml version=""1.0"" encoding=""UTF-8""?>   
<beans xmlns=""http://www.springframework.org/schema/beans""  
       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""  
       xmlns:camel=""http://camel.apache.org/schema/spring""  
       xsi:schemaLocation=""   
         http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd  
         http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd"">  
  
    
  <camelContext xmlns=""http://camel.apache.org/schema/spring"">  
  
    <route>  
      <from uri=""timer://mytestTrigger?fixedRate=true&amp;period=10000""/>  
      <to uri=""myTestFactory""/>  
    </route>  
    <route id=""mvelTest"">  
      <from uri=""seda://myMvelTest?concurrentConsumers=2""/>  
      <choice>  
      <when>  
        <mvel>request.body instanceof org.apache.camel.example.osgi.MyPojo</mvel>  
      <to uri=""log:MvelRouter""/>  
      </when>            
      </choice>  
    </route>  
          
  </camelContext>  
  
  <bean id=""myTestFactory"" class=""org.apache.camel.example.osgi.MyTestFactory"">  
    <property name=""numberOfMessages"" value=""2""/>  
  </bean>  
  
</beans>
{code}

When I deploy both feature to karaf and place a message on seda://myMvelTest queue I get following exception in karaf.
{code}
ERROR | eda://myMvelTest | DefaultErrorHandler              | rg.apache.camel.util.CamelLogger  215 | 73 - org.apache.camel.camel-core - 2.13.0.SNAPSHOT | Failed delivery for (MessageId: ID-localhost-51000-1389691121739-1-56 on ExchangeId: ID-localhost-51000-1389691121739-1-85). Exhausted after delivery attempt: 1 caught: org.apache.camel.ExpressionEvaluationException: [Error: could not access: org; in class: org.apache.camel.language.mvel.RootObject]
[Near : {... est.body instanceof org.apache.camel.example.osgi. ....}]
                                 ^
[Line: 1, Column: 25]
 
Message History
---------------------------------------------------------------------------------------------------------------------------------------
RouteId              ProcessorId          Processor                                                                        Elapsed (ms)
[mvelTest          ] [mvelTest          ] [seda://myMvelTest?concurrentConsumers=2                                       ] [        14]
[mvelTest          ] [choice2           ] [when[mvel{Mvel[request.body instanceof org.apache.camel.example.osgi.MyPojo]}]] [         0]
 
Exchange
---------------------------------------------------------------------------------------------------------------------------------------
Exchange[
        Id                  ID-localhost-51000-1389691121739-1-85
        ExchangePattern     InOut
        Headers             {breadcrumbId=ID-localhost-51000-1389691121739-1-56, CamelRedelivered=false, CamelRedeliveryCounter=0}
        BodyType            org.apache.camel.example.osgi.MyPojo
        Body                org.apache.camel.example.osgi.MyPojo@21093d9e
]
 
Stacktrace
---------------------------------------------------------------------------------------------------------------------------------------
org.apache.camel.ExpressionEvaluationException: [Error: could not access: org; in class: org.apache.camel.language.mvel.RootObject]
[Near : {... est.body instanceof org.apache.camel.example.osgi. ....}]
                                 ^
[Line: 1, Column: 25]
        at org.apache.camel.language.mvel.MvelExpression.evaluate(MvelExpression.java:60)[103:org.apache.camel.camel-mvel:2.13.0.SNAPSHOT]
        at org.apache.camel.support.ExpressionSupport.matches(ExpressionSupport.java:32)[73:org.apache.camel.camel-core:2.13.0.SNAPSHOT]
        at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:90)[73:org.apache.camel.camel-core:2.13.0.SNAPSHOT]
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)[73:org.apache.camel.camel-core:2.13.0.SNAPSHOT]
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398)[73:org.apache.camel.camel-core:2.13.0.SNAPSHOT]
        at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[73:org.apache.camel.camel-core:2.13.0.SNAPSHOT]
        at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[73:org.apache.camel.camel-core:2.13.0.SNAPSHOT]
        at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:291)[73:org.apache.camel.camel-core:2.13.0.SNAPSHOT]
        at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:200)[73:org.apache.camel.camel-core:2.13.0.SNAPSHOT]
        at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:147)[73:org.apache.camel.camel-core:2.13.0.SNAPSHOT]
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:895)[:1.6.0_65]
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:918)[:1.6.0_65]
        at java.lang.Thread.run(Thread.java:695)[:1.6.0_65]
Caused by: [Error: could not access: org; in class: org.apache.camel.language.mvel.RootObject]
[Near : {... est.body instanceof org.apache.camel.example.osgi. ....}]
                                 ^
[Line: 1, Column: 25]
        at org.mvel2.optimizers.impl.refl.ReflectiveAccessorOptimizer.getBeanProperty(ReflectiveAccessorOptimizer.java:683)[102:org.mvel2:2.1.7.Final]
        at org.mvel2.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileGetChain(ReflectiveAccessorOptimizer.java:337)[102:org.mvel2:2.1.7.Final]
        at org.mvel2.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeAccessor(ReflectiveAccessorOptimizer.java:140)[102:org.mvel2:2.1.7.Final]
        at org.mvel2.optimizers.dynamic.DynamicOptimizer.optimizeAccessor(DynamicOptimizer.java:67)[102:org.mvel2:2.1.7.Final]
        at org.mvel2.ast.ASTNode.optimize(ASTNode.java:159)[102:org.mvel2:2.1.7.Final]
        at org.mvel2.ast.ASTNode.getReducedValueAccelerated(ASTNode.java:115)[102:org.mvel2:2.1.7.Final]
        at org.mvel2.ast.Instance.getReducedValueAccelerated(Instance.java:21)[102:org.mvel2:2.1.7.Final]
        at org.mvel2.compiler.ExecutableAccessor.getValue(ExecutableAccessor.java:42)[102:org.mvel2:2.1.7.Final]
        at org.mvel2.MVEL.executeExpression(MVEL.java:954)[102:org.mvel2:2.1.7.Final]
        at org.apache.camel.language.mvel.MvelExpression.evaluate(MvelExpression.java:57)[103:org.apache.camel.camel-mvel:2.13.0.SNAPSHOT]
{code}",,,,,,,,,,,,,,,,,,,,,28/Jan/14 22:34;fbalicchia;CAMEL-7139.patch.txt;https://issues.apache.org/jira/secure/attachment/12625693/CAMEL-7139.patch.txt,28/Jan/14 22:33;fbalicchia;mvelItest.path.txt;https://issues.apache.org/jira/secure/attachment/12625692/mvelItest.path.txt,,,,,2.0,,,,,,,,,,,,,,,,,,,2014-01-27 22:59:45.249,,,no_permission,,Unknown,,,,,,,,,,,368486,,,Mon Feb 03 14:17:23 UTC 2014,,,,,,,0|i1rigf:,368790,Regression,,,,,,,,17/Jan/14 16:50;andrzej.majewski;I am happy to create a pull request with showcase example.,"27/Jan/14 22:59;fbalicchia;I reproduced the problem with itest please see the attach.

To Fix the problem a possible solution is remove TCCL to MVEL until 
http://jira.codehaus.org/browse/MVEL-250 is not resolved

Please see the attach for the patch;I hope it's ok for you.

If it's ok for you please clean it a bit

Any feedback is welcome.",28/Jan/14 06:15;davsclaus;Yeah you are welcome to cleanup the patch.,28/Jan/14 22:33;fbalicchia;osgi-itest for mvel,03/Feb/14 14:17;davsclaus;Thanks for the patch.,,,,,,,,,,,,,,,,,,,
camel-bindy not picking up @Link annotation items,CAMEL-7159,12692535,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,janstey,janstey,31/Jan/14 16:00,03/Feb/14 14:12,13/Mar/19 22:19,03/Feb/14 14:12,2.12.2,,,,,,,,,2.11.4,2.12.3,2.13.0,,,,,,,,0,,,,,,,,,"It works fine (like in the tests) when you provide bindy with a Map<String, Object> of model objects corresponding to the @Linked-ed classes. We should do better though and try to figure this out for users.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,371130,,,2014-01-31 16:00:58.0,,,,,,,0|i1rynr:,371434,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Throttling has problems with rate changes,CAMEL-7160,12692805,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,michael.pisula,michael.pisula,03/Feb/14 09:25,03/Feb/14 13:55,13/Mar/19 22:19,03/Feb/14 13:55,2.12.2,,,,,,,,,2.11.4,2.12.3,2.13.0,,camel-core,eip,,,,,0,,,,,,,,,"When using the throttler with the header expression for controlling the rate, changing the rate does not work reliably. 

Some more information can be found in the following mail thread:

http://camel.465427.n5.nabble.com/Problems-with-dynamic-throttling-td5746613.html",,,,,,,,,,,,,,,,,,,,,03/Feb/14 09:53;michael.pisula;CAMEL-7160.patch;https://issues.apache.org/jira/secure/attachment/12626626/CAMEL-7160.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-02-03 13:55:28.12,,,no_permission,,Unknown,,,,,,,,,,,371391,,,Mon Feb 03 13:55:28 UTC 2014,,,Patch Available,,,,0|i1s093:,371694,,,,,,,,,03/Feb/14 09:27;michael.pisula;New test and fix for dynamic rate change problem,"03/Feb/14 09:53;michael.pisula;Added fix for changing rate from high to low, the patch before worked just accidentally because messageCount in the test was 9.",03/Feb/14 13:55;davsclaus;Thanks for reporting and the patch.,,,,,,,,,,,,,,,,,,,,,
camel-dozer - Can cause dead-lock in init when using spring,CAMEL-7161,12692807,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,03/Feb/14 09:37,03/Feb/14 09:39,13/Mar/19 22:19,03/Feb/14 09:39,2.12.2,,,,,,,,,2.12.3,2.13.0,,,,,,,,,0,,,,,,,,,"When using spring with dozer, and we call init in the ctr, then spring can cause a dead lock when it does its getBean stuff.

{code}
   java.lang.Thread.State: BLOCKED (on object monitor)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:182)
	- waiting to lock <0x00000007d7c4ca38> (a java.util.concurrent.ConcurrentHashMap)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:468)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:356)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:334)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:434)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:428)
	at org.springframework.context.support.AbstractApplicationContext.getBeansOfType(AbstractApplicationContext.java:1182)
	at org.springframework.beans.factory.BeanFactoryUtils.beansOfTypeIncludingAncestors(BeanFactoryUtils.java:228)
	at org.apache.camel.spring.spi.ApplicationContextRegistry.findByTypeWithName(ApplicationContextRegistry.java:85)
	at org.apache.camel.impl.PropertyPlaceholderDelegateRegistry.findByTypeWithName(PropertyPlaceholderDelegateRegistry.java:70)
	at org.apache.camel.converter.dozer.DozerTypeConverterLoader.lookupDozerBeanMapperConfigurations(DozerTypeConverterLoader.java:228)
	at org.apache.camel.converter.dozer.DozerTypeConverterLoader.init(DozerTypeConverterLoader.java:155)
{code}

We should defer init to a bit later, and turn the loader into a service so init is done like the others with start|stop methods.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,371393,,,2014-02-03 09:37:44.0,,,,,,,0|i1s09j:,371696,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-groovy - Evaluation returns 1st result only,CAMEL-7143,12689846,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,20/Jan/14 17:49,31/Jan/14 16:24,13/Mar/19 22:19,31/Jan/14 16:24,2.11.2,2.12.0,,,,,,,,2.11.4,2.12.3,2.13.0,,camel-script,,,,,,0,,,,,,,,,"Seems like we have another issue reported which we couldn't reproduce.

But maybe this time we can.
Issue at SO
http://stackoverflow.com/questions/21221085/strange-behaiour-with-camel-groovy-spring-dsl

",,,,,,,,,,,,,,,,,,,,,30/Jan/14 21:00;max.bridgewater;groovy-test.zip;https://issues.apache.org/jira/secure/attachment/12626174/groovy-test.zip,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-01-30 21:00:49.564,,,no_permission,,Unknown,,,,,,,,,,,368813,,,Fri Jan 31 16:17:08 UTC 2014,,,,,,,0|i1rkh3:,369117,Regression,,,,,,,,27/Jan/14 18:42;davsclaus;Added some unit tests in camel-itest on master and 2.12 branch. Cannot reproduce this issue from the SO.,"30/Jan/14 21:00;max.bridgewater;Attached is a ready to run small Maven-Spring project that  would help reproduce this issue. The POM has two properties section. To reproduce the issue, comment out the Camel 2.12.2 section. To check the issue with Camel 2.11.1 uncomment the other properties section.

After building the app, dploy it in Tomcat or Jetty and hit the following URLs in your browser:
http://localhost:8080/groovy-test/rs/convert/4
http://localhost:8080/groovy-test/rs/convert/5

The expected result is browser showing the number 4 and 5 respectively.
Observed behaviour with 2.12.1 is browser will show 4 for both URLs.
",31/Jan/14 14:19;davsclaus;Thanks for the test case which reproduces the issue,"31/Jan/14 16:16;davsclaus;Okay have a fix for this, and will backport this to branches shortly.",31/Jan/14 16:17;davsclaus;The problem is in camel-script,,,,,,,,,,,,,,,,,,,
Sending an empty soap body message to a generic provider camel-cxf consumer results in NPE,CAMEL-7069,12684524,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ay,ay,ay,13/Dec/13 19:08,29/Jan/14 11:38,13/Mar/19 22:19,29/Jan/14 11:38,2.12.2,,,,,,,,,2.11.4,2.12.3,2.13.0,,camel-cxf,,,,,,1,,,,,,,,,"In some cases, CXFPayload is instantiated with a null body and this is causing an NPE later in the processing.

Caused by: java.lang.NullPointerException
	at org.apache.camel.component.cxf.CxfPayload$1.size(CxfPayload.java:105)
	at org.apache.camel.component.cxf.converter.NodeListWrapper.getLength(NodeListWrapper.java:33)
	at org.apache.camel.converter.jaxp.DomConverter.toString(DomConverter.java:69)
	at org.apache.camel.converter.jaxp.DomConverter.toByteArray(DomConverter.java:142)
	at org.apache.camel.converter.jaxp.DomConverter.toInputStream(DomConverter.java:137)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)

What is not sure is how we should fix it.
CXFPayload is not checking whether the body is null when it is instantiated. In that case, some methods will lead to NPE but some are not (like getBodySources() or getHeaders()). And there are some test cases passing a null body.

So I think, we should either 
1. change CXFPayload to automatically creates an empty body (i.e., an empty List<Source>) when the body passed to the constructor is null, or
2. add this null->empty handling in DefaultCXFBinding.getPayloadBodyElements when extracting the body and pass an empty list to the CXFPayload constructor in this case, or
3. just throws a specific exception instead of NPE in this particular case.

In any case, we need to clarify what is the correct usage of CXFPayload.


",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,363596,,,Tue Jan 28 17:49:44 UTC 2014,,,,,,,0|i1qo9z:,363902,,,,,,,,,"28/Jan/14 17:49;ay;After some pause (forgot about this ticket), I thought about those options again.
Since some of the CXF payload conversion methods and NodeList conversion methods assume the body (of the CxfPayload) to be not null, option 3 will require many changes in those converters to avoid NPE. Option 1 would introduce a redundant way of creating an empty cxf payload (either passing null or an empty list). So, I think we can opt for option 2 and change the getPayloadBodyElements method so that normal scenarios resulting a null camel body will not result in NPE at cxf payload instantiation.


",,,,,,,,,,,,,,,,,,,,,,,
Cannot set JMSReplyTo with a topic destination when sending a message to a queue,CAMEL-7049,12683576,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,lichtin,lichtin,09/Dec/13 11:26,28/Jan/14 08:29,13/Mar/19 22:19,28/Jan/14 08:29,2.11.1,,,,,,,,,2.11.4,2.12.3,2.13.0,,camel-jms,,,,,,0,,,,,,,,,"The use case is about using Camel to communicate with the ActiveMQ StatisticsPlugin:

Need to send a message and set 'JMSReplyTo' with a destination for the response message(s). Doing this as part of a Camel processor:

   in.setHeader(""JMSReplyTo"", ""topic://mydest"");

This, however, results in the broker (ie. the statistics plugin) returning messages to the ""mydest"" queue, as opposed to the topic.

The issue is that Camel starts fiddling with the 'JMSReplyTo' header.
Enabling trace level shows how Camel coerces the topic into a queue:

JmsProducer | amel.component.jms.JmsProducer$2 315 | 126 - org.apache.camel.camel-jms - 2.11.1 | Normalized JMSReplyTo destination name topic://jmsqueuemonitor -> jmsqueuemonitor
JmsProducer | amel.component.jms.JmsProducer$2 315 | 126 - org.apache.camel.camel-jms - 2.11.1 | Normalized JMSReplyTo destination name topic://jmsqueuemonitor -> jmsqueuemonitor
JmsProducer | amel.component.jms.JmsProducer$2 331 | 126 - org.apache.camel.camel-jms - 2.11.1 | Creating JMSReplyTo queue: jmsqueuemonitor
JmsProducer | amel.component.jms.JmsProducer$2 331 | 126 - org.apache.camel.camel-jms - 2.11.1 | Creating JMSReplyTo queue: jmsqueuemonitor
JmsProducer | amel.component.jms.JmsProducer$2 343 | 126 - org.apache.camel.camel-jms - 2.11.1 | Using JMSReplyTo destination: queue://jmsqueuemonitor
JmsProducer | amel.component.jms.JmsProducer$2 343 | 126 - org.apache.camel.camel-jms - 2.11.1 | Using JMSReplyTo destination: queue://jmsqueuemonitor

Camel seems to apply some logic that is faulty in this circumstance.

Just want to send a message to a queue and have that message carry a 'JMSReplyTo' value that should be left untouched. ",,,,,,,,,,,,,,,,,,,AMQ-4921,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-01-04 13:19:13.186,,,no_permission,,Unknown,,,,,,,,,,,362649,,,Tue Jan 28 08:29:25 UTC 2014,,,,,,,0|i1qif3:,362943,,,,,,,,,04/Jan/14 13:19;davsclaus;Thanks for reporting.,"22/Jan/14 11:25;lichtin;Unfortunately it doesn't seem to be fixed, at least not in 2.11.3.
I still see how it the 'normalization' switches from topic to queue:

JmsProducer                      | amel.component.jms.JmsProducer$2  328 | 126 - org.apache.camel.camel-jms - 2.11.3 | Normalized JMSReplyTo destination name topic://xxx -> xxx
JmsProducer                      | amel.component.jms.JmsProducer$2  344 | 126 - org.apache.camel.camel-jms - 2.11.3 | Creating JMSReplyTo queue: xxx
JmsProducer                      | amel.component.jms.JmsProducer$2  356 | 126 - org.apache.camel.camel-jms - 2.11.3 | Using JMSReplyTo destination: queue://xxx
JmsProducer                      | amel.component.jms.JmsProducer$2  364 | 126 - org.apache.camel.camel-jms - 2.11.3 | Created javax.jms.Message: ActiveMQMessage {commandId = 0, responseRequired = false, messageId = null, originalDestination = null, originalTransactionId = null, producerId = null, destination = null, transactionId = null, expiration = 0, timestamp = 0, arrival = 0, brokerInTime = 0, brokerOutTime = 0, correlationId = null, replyTo = queue://xxx, persistent = true, type = null, priority = 0, groupID = null, groupSequence = 0, targetConsumerId = null, compressed = false, userID = null, content = null, marshalledProperties = null, dataStructure = null, redeliveryCounter = 0, size = 0, properties = {breadcrumbId=ID-mlipc-54383-1390388987563-0-1, firedTime=Wed Jan 22 12:09:49 CET 2014}, readOnlyProperties = false, readOnlyBody = false, droppable = false}

",28/Jan/14 06:40;davsclaus;What message broker do you use?,"28/Jan/14 07:06;lichtin;ActiveMQ 5.7.0
(however, from what I can see, no message broker code is involved, it's happening in JmsProducer)",28/Jan/14 08:29;davsclaus;Applied a new fix.,,,,,,,,,,,,,,,,,,,
"Added username, password options on cxf endpoint ",CAMEL-7145,12690181,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,22/Jan/14 03:28,22/Jan/14 03:53,13/Mar/19 22:19,22/Jan/14 03:53,,,,,,,,,,2.11.4,2.12.3,2.13.0,,,,,,,,0,,,,,,,,,It could be handy if we can setup the basic authentication username and password on the cxf endpoint url.,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,369138,,,Wed Jan 22 03:53:30 UTC 2014,,,,,,,0|i1rmhb:,369443,,,,,,,,,"22/Jan/14 03:53;njiang;Applied the patch into master, camel-2.12.x and camel-2.11.x branches.
I also updated the cxf wiki page for the new added options.",,,,,,,,,,,,,,,,,,,,,,,
Remove the CamelXsltResourceUri header from xslt component,CAMEL-7129,12688491,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,13/Jan/14 03:00,13/Jan/14 07:48,13/Mar/19 22:19,13/Jan/14 07:48,,,,,,,,,,2.11.4,2.12.3,2.13.0,,camel-xslt,,,,,,0,,,,,,,,,We should not encourage user to change the xslt url dynamically.,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,367510,,,Mon Jan 13 07:48:06 UTC 2014,,,,,,,0|i1rcif:,367818,,,,,,,,,"13/Jan/14 07:48;njiang;Applied patch into master, camel-2.12.x and camel-2.11.x branches.",,,,,,,,,,,,,,,,,,,,,,,
camel-sjms NullPointerException in case of connection loss,CAMEL-7107,12687432,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,matriv,matriv,06/Jan/14 13:14,10/Jan/14 10:55,13/Mar/19 22:19,10/Jan/14 10:55,2.13.0,,,,,,,,,2.12.3,2.13.0,,,camel-sjms,,,,,,0,,,,,,,,,When connection to a broker (HornetQ) is destroyed due to networking issues or broker internal issues or restarts the getProducers().borrowObject() returns null which is not handled properly.,,,,,,,,,,,,,,,,,,,,,06/Jan/14 13:17;matriv;CAMEL_7107.patch;https://issues.apache.org/jira/secure/attachment/12621597/CAMEL_7107.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-01-10 09:30:55.688,,,no_permission,,Unknown,,,,,,,,,,,366433,,,Fri Jan 10 10:55:56 UTC 2014,,,Patch Available,,,,0|i1r5vz:,366744,,,,,,,,,"10/Jan/14 09:30;davsclaus;Willem, have you fixed this?",10/Jan/14 10:55;njiang;Applied the patch into master and camel-2.12.x fixed branches.,,,,,,,,,,,,,,,,,,,,,,
Enable Xml Transformer security processing feature by default,CAMEL-7123,12688205,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,10/Jan/14 09:16,10/Jan/14 09:20,13/Mar/19 22:19,10/Jan/14 09:20,,,,,,,,,,2.11.4,2.12.3,2.13.0,,camel-xslt,,,,,,0,,,,,,,,,It could be good if we enable the Xml Transformer security processing feature by default.,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,367224,,,Fri Jan 10 09:20:58 UTC 2014,,,,,,,0|i1rarj:,367533,,,,,,,,,"10/Jan/14 09:20;njiang;Applied patch into master , camel-2.12.x and camel-2.11.x branches.",,,,,,,,,,,,,,,,,,,,,,,
JettyHttpProducer.doStop does not stop client thread pool,CAMEL-7116,12688048,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,matihost,matihost,09/Jan/14 11:31,10/Jan/14 09:04,13/Mar/19 22:19,10/Jan/14 09:04,2.12.2,,,,,,,,,2.12.3,2.13.0,,,camel-jetty,,,,,,0,,,,,,,,,"Case:

CamelContext with one route :

from(""direct:a"")
 .routingSlip(generateHttpUrl())

Where generateHttpUrl() returns  for example:

""jetty:http://someurl.com:666/some?httpClientMinThreads=128&""


When CamelContext is closing, JettyHttpProducer.doStop is not called.

Result:
-  When JettyHttpProducer.client is closing, its thread pool is not closed and the threads are non-deamon threads (subject to another JIRA),  so application cannot be shutdown.


",java7,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-01-10 09:04:57.043,,,no_permission,,Unknown,,,,,,,,,,,367054,,,Fri Jan 10 09:04:57 UTC 2014,,,,,,,0|i1r9pz:,367364,,,,,,,,,10/Jan/14 09:04;davsclaus;Thanks for reporting. We now stop the thread pool.,,,,,,,,,,,,,,,,,,,,,,,
Multicast EIP with only one child processor does not call aggregate strategy,CAMEL-7111,12687603,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,07/Jan/14 08:42,07/Jan/14 09:17,13/Mar/19 22:19,07/Jan/14 09:17,2.12.2,,,,,,,,,2.11.3,2.12.3,2.13.0,,camel-core,eip,,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/multicast-aggregation-tp5745571.html",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,366604,,,2014-01-07 08:42:40.0,,,,,,,0|i1r6xz:,366915,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
PGP decryption sometimes can't find the secret key,CAMEL-7106,12687343,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,mriordan,mriordan,05/Jan/14 01:48,06/Jan/14 03:31,13/Mar/19 22:19,06/Jan/14 03:31,2.12.2,,,,,,,,,2.13.0,,,, camel-crypto,,,,,,0,patch,,,,,,,,"Camel Crypto fails to decrypt PGP files encrypted by GnuPG and other programs, when the secret key used to encrypt the symmetric key is not the first on the keyring (using Bouncy Castle's definition of a keyring). The error message is ""Provided input is encrypted with unknown pair of keys.""  Since the encryption key in files from other PGP programs normally is a subkey and is not the first one in the keyring (which is typically the master key), this means that decryption fails in many cases.

The fix is a one-liner to PGPDataFormatUtil.findPrivateKeyWithKeyId(), to use a BC method that searches for the secret key rather than assume it's the first one on the secret keyring.  I will attach a patch.",,0,0,,0%,0,0,,,,,,,CAMEL-7052,,,,,,,05/Jan/14 01:51;mriordan;CAMEL-7106.patch;https://issues.apache.org/jira/secure/attachment/12621496/CAMEL-7106.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-01-06 03:31:06.94,,,no_permission,,Moderate,,,,,,,,,,,366342,,,Mon Jan 06 03:31:06 UTC 2014,,,,,,,0|i1r5bz:,366653,,,,,,,,,"06/Jan/14 03:31;njiang;This issue is resolved in CAMEL-7052 few days ago, please try to use the latest camel-2.13-SNAPSHOT to verify the fix.",,,,,,,,,,,,,,,,,,,,,,,
PGPDataFormat: Unable to encrypt using subkey,CAMEL-7052,12683690,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,sdanig,sdanig,09/Dec/13 21:25,06/Jan/14 03:31,13/Mar/19 22:19,04/Jan/14 13:27,2.12.2,,,,,,,,,2.12.3,2.13.0,,, camel-crypto,,,,,,0,,,,,,,,,"Generate a keyring with a DSA key for signing and an Elgamal key for encryption, using the password ""secret"":

{code}>gpg --gen-key
gpg (GnuPG) 2.0.17; Copyright (C) 2011 Free Software Foundation, Inc.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Please select what kind of key you want:
   (1) RSA and RSA (default)
   (2) DSA and Elgamal
   (3) DSA (sign only)
   (4) RSA (sign only)
Your selection? 2
DSA keys may be between 1024 and 3072 bits long.
What keysize do you want? (2048) 2048
Requested keysize is 2048 bits
Please specify how long the key should be valid.
         0 = key does not expire
      <n>  = key expires in n days
      <n>w = key expires in n weeks
      <n>m = key expires in n months
      <n>y = key expires in n years
Key is valid for? (0) 0
Key does not expire at all
Is this correct? (y/N) y

GnuPG needs to construct a user ID to identify your key.

Real name: Testing
Email address: testing@foo.com
Comment:
You selected this USER-ID:
    ""Testing <testing@foo.com>""

Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? O
You need a Passphrase to protect your secret key.

We need to generate a lot of random bytes. It is a good idea to perform
some other action (type on the keyboard, move the mouse, utilize the
disks) during the prime generation; this gives the random number
generator a better chance to gain enough entropy.
gpg: WARNING: some OpenPGP programs can't handle a DSA key with this digest size
We need to generate a lot of random bytes. It is a good idea to perform
some other action (type on the keyboard, move the mouse, utilize the
disks) during the prime generation; this gives the random number
generator a better chance to gain enough entropy.
gpg: key C49B82A0 marked as ultimately trusted
public and secret key created and signed.

gpg: checking the trustdb
gpg: 3 marginal(s) needed, 1 complete(s) needed, PGP trust model
gpg: depth: 0  valid:   1  signed:   0  trust: 0-, 0q, 0n, 0m, 0f, 1u
pub   2048D/C49B82A0 2013-12-09
      Key fingerprint = AB15 5E15 768E E6FE 96AB  2423 6488 CEA7 C49B 82A0
uid                  Testing <testing@foo.com>
sub   2048g/361D9AA1 2013-12-09{code}

List the keys to make sure they look OK:

{code}>gpg --list-keys
pubring.gpg
---------------
pub   2048D/C49B82A0 2013-12-09
uid                  Testing <testing@foo.com>
sub   2048g/361D9AA1 2013-12-09{code}

Export to a file and then check the contents of the file:

{code}>gpg --export > pubring.pgp

>gpg pubring.pgp
pub  2048D/C49B82A0 2013-12-09 Testing <testing@foo.com>
sub  2048g/361D9AA1 2013-12-09{code}

We now have a keyring that contains a primary DSA key for signing, and an Elgamal subkey for encryption. The subkey does not have a user ID associated with it, because the user ID is associated with the corresponding primary / master key.

The latest code in {{PGPDataFormatUtil.findPublicKeys(InputStream, List<String>, boolean)}} cannot handle this scenario, because it expects the subkey to also have a user ID. Only the first key in a keychain (which is the primary / master key) will have a user ID. The subkeys don't have user IDs directly associated with them, and so they are not recognized as usable by Camel, when in fact they are usable.

See this discussion for more info on how primary keys and subkeys are represented in the BouncyCastle model, and how this relates to user IDs:

http://bouncy-castle.1462172.n4.nabble.com/How-to-find-PGP-subkeys-td1465289.html",,,,,,,,,,,,,,,,,,,,,09/Dec/13 23:47;sdanig;camel-7052.patch;https://issues.apache.org/jira/secure/attachment/12617924/camel-7052.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-01-04 13:27:43.247,,,no_permission,,Unknown,,,,,,,,,,,362762,,,Sat Jan 04 13:27:43 UTC 2014,,,,,,,0|i1qj47:,363056,,,,,,,,,"09/Dec/13 23:43;sdanig;I think the PGPDataFormatElGamalTest is failing in master, but it's not visible in the build because the test is marked with the Ignore annotation (because JCE unlimited strength isn't on the build server). I'll provide a proposed patch soon.",09/Dec/13 23:47;sdanig;All tests (including the ignored Elgamal test) pass for me with this patch.,04/Jan/14 13:27;davsclaus;Thanks for reporting and the patch.,,,,,,,,,,,,,,,,,,,,,
CLONE - Camel Splitter eat up exceptions recorded by the underlying Scanner,CAMEL-7100,12686527,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,waynebagguley,waynebagguley,27/Dec/13 14:14,03/Jan/14 07:25,13/Mar/19 22:19,03/Jan/14 07:25,2.10.2,2.10.3,2.11.0,2.12.2,2.9.4,2.9.5,,,,2.11.3,2.12.3,2.13.0,,camel-core,,,,,,0,,,,,,,,,See http://camel.465427.n5.nabble.com/Trouble-with-split-tokenize-on-linux-td5721677.html for details,,,,,,,,,,,CAMEL-5767,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-01-03 07:25:59.629,,,no_permission,,Unknown,,,,,,,,,,,365518,,,Fri Jan 03 07:25:59 UTC 2014,,,,,,,0|i1r02n:,365819,,,,,,,,,"27/Dec/13 14:49;waynebagguley;This is still a problem.

In Java 7 the Scanner class now implements Closeable so the fix for 5767 does not work as the Splitter code handling the IOException never gets executed.

Furthermore there is an additional problem when using tokenize with grouping e.g.: from(""file:inbox"").split().tokenize(""\n"", 1000).streaming().to(""activemq:queue:order"");

In this case the Scanner object is wrapped in a GroupIterator and the code in the Splitter to handle the case of when the Scanner exited with an exception does not get executed because GroupIterator implements Closeable (and is not an instance of Scanner either). I.e. in both cases only the first case of the IF statement on line 149 of the Splitter class will be executed and this leads to no exception being thrown and incorrect behaviour whereby the incorrect number of split messages gets processed and the route exits with no errors.","03/Jan/14 07:25;njiang;Applied the patch into master, camel-2.12.x and camel-2.11.x.",,,,,,,,,,,,,,,,,,,,,,
Broken JUnit classes for testing authentication in camel-jcr,CAMEL-7102,12686922,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,gzurowski,gzurowski,02/Jan/14 02:02,03/Jan/14 04:43,13/Mar/19 22:19,03/Jan/14 04:43,2.12.2,,,,,,,,,2.12.3,2.13.0,,,camel-jcr,,,,,,0,,,,,,,,,"The following JUnit tests that are supposed to test authentication with the camel-jcr component are currently broken and disabled (annotated @Ignore):

- AuthTokenLoginFailureTest
- JcrAuthTokenWithLoginTest

Testing authentication in camel-jcr (i.e. connection URI parsing) is essential and should be fixed.",,,,,,,,,,,,,,,,,,,,,02/Jan/14 02:06;gzurowski;camel-fix-auth-unittests.patch;https://issues.apache.org/jira/secure/attachment/12621022/camel-fix-auth-unittests.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-01-03 04:43:33.827,,,no_permission,,Unknown,,,,,,,,,,,365917,,,Fri Jan 03 04:43:33 UTC 2014,,,Patch Available,,,,0|i1r2p3:,366224,,,,,,,,,02/Jan/14 02:16;gzurowski;The attached patch fixes the authentication test cases for the camel-jcr component. Also submitted pull request https://github.com/apache/camel/pull/82.,02/Jan/14 02:27;gzurowski;Regarding pull request https://github.com/apache/camel/pull/82: Please note that the JUnit classes were renamed in a second commit (https://github.com/gzurowski/camel/commit/71ad30423ef5d61e60e746d1d6465fc58367355c) to reflect what is actually tested. The previous class names were misleading as they tested the opposite of what the name suggested.,03/Jan/14 04:43;njiang;Applied patch into master and camel-2.12.x branches with thanks to Gregor.,,,,,,,,,,,,,,,,,,,,,
tokenize xml for splitter throwing org.xml.sax.SAXParseException; XML documents structures must start and end within the same entity. ,CAMEL-6940,12677736,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ay,Cecilio Alvarez,Cecilio Alvarez,06/Nov/13 08:44,03/Jan/14 03:32,13/Mar/19 22:19,13/Nov/13 17:19,2.12.1,,,,,,,,,2.11.3,2.12.2,2.13.0,,camel-core,,,,,,0,,,,,,,,,"When trying to split a xml containing this:
<tag name=name/>
I encountered the following exception : org.xml.sax.SAXParseException; XML documents structures must start and end within the same entity. 

Extract from my route:
the input is:

<BOOKS>
            <LIBRARY name=Library1/>
                      <BOOK name=Book1/>  <-----this kind of tag doesn't work.
                      <BOOK name=Book2/>
            </LIBRARY>
            <LIBRARY name=Library2/>
                      <BOOK name=Book1></BOOK>   <---this works.
                      <BOOK name=Book2></BOOK>
            </LIBRARY>
</BOOKS>


The splitting route:
<route>
<from uri=""activemq:queue.TEST""/>
<choice> 
        <when> 
                <xpath>/BOOKS</xpath> 
                <split streaming=""true"">
                        <tokenize token=""LIBRARY"" xml=""true""/>
                        <to uri=""activemq:example.LIBRARY""/>
                </split>
        </when> 
        <otherwise> 
                <log message=""Not a Books xml.""/> 
        </otherwise>       
</choice>
</route>

This issue is not part of camel 2.11.0.
",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-11-08 15:15:07.452,,,no_permission,,,,,,,,,,,,,357111,,,Tue Nov 12 11:25:55 UTC 2013,,,,,,,0|i1pk9r:,357401,,,,,,,,,"08/Nov/13 15:15;ay;hi,
i can look into this.
but could you attach the input file to this jira ticket?
your pasted xml is missing the quotation marks and it does't look like the input you are actually using.
and where are you getting the parsing exception?

thanks.
aki","08/Nov/13 15:42;Cecilio Alvarez;Hi,

the quotation marks is <?xml version=""1.0"" encoding=""utf-8""?>
the parsing exception is throws each time a ""library"" contains a ""book"" tag without the closing </BOOK> tag, this wasn't a problem in camel 2.11.0.
I have to ask if I can put the original XML. But it's the same but with different tags names.

Thanks.
Cecilio Alvarez.","12/Nov/13 09:21;ay;hi Cecilio,
initially i thought you were just using a broken xml (as your input xml pasted on this ticket had the attributes not quoted and the LIBRARY elements prematurely terminated), but there seems to be a real issue in the tokenizer when a tokenized block itself contains at least one self-terminated child. So we need to fix this issue.
thanks.
regards, aki","12/Nov/13 11:25;ay;Hi Cecilio,
I just committed the fix for this issue into trunk, 2.12.x, and 2.11.x.
I included a test case that resembles your example, so I hope this fix will resolve your issue.
If you can test it with your example, that would be great.
thanks.
regards, aki",,,,,,,,,,,,,,,,,,,,
StreamCache does not reset at the end of the pipeline,CAMEL-7087,12685797,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,siano,siano,20/Dec/13 12:16,20/Dec/13 17:28,13/Mar/19 22:19,20/Dec/13 17:28,2.12.2,,,,,,,,,2.12.3,2.13.0,,,camel-core,,,,,,0,,,,,,,,,"The StreamCache does not reset at the end of the pipeline.

The following routes will not work as expected:
   from(""direct:c"").noStreamCaching().to(""direct:d"").to(""mock:c"");
   from(""direct:d"").streamCaching().process(new TestProcessor());

(the test processor is a processor that reads the InputMessage)

If another processor is added after the TestProcessor that does nothing, the routes will work as expected.

This case is a bit synthetic, but in real life a route that starts with a InOut CXF endpoint, has an endpoint that generates a Stream and then writes the message content to an in only endpoint (file, FTP, log, etc.) will also fail, even if stream caching is enabled.
",,,,,,,,,,,,,,,,,,,,,20/Dec/13 12:20;siano;0001-CAMEL-7087-StreamCache-does-not-reset-at-the-end-of-.patch;https://issues.apache.org/jira/secure/attachment/12619803/0001-CAMEL-7087-StreamCache-does-not-reset-at-the-end-of-.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-12-20 17:28:20.332,,,no_permission,,Unknown,,,,,,,,,,,364958,,,Fri Dec 20 17:28:20 UTC 2013,,,Patch Available,,,,0|i1qwon:,365269,,,,,,,,,"20/Dec/13 12:27;siano;The root cause is currently the StreamCache is reset only before the executin of the processor, not afterwards. If the consumer gets the exchange back, a StreamCache in the in-message will remain as it is and does not close.

My patch also resets the stream cache after each processor. This means normally the reset() will be executed twice on the stream cache (after the previous processor and before the next), but a reset() on a StreamCache that was reset before, will only do a null comparison, so it doesn't cost much. I also considered to remove the reset before the processors, but I am not sure whether this doesn't break wiretaps or the like.",20/Dec/13 17:28;davsclaus;Thanks for reporting and the patch.,,,,,,,,,,,,,,,,,,,,,,
FtpEndpoint createRemoteFileOperations should keep the parameter for next invocation,CAMEL-7077,12685328,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,18/Dec/13 07:14,18/Dec/13 17:45,13/Mar/19 22:19,18/Dec/13 08:01,,,,,,,,,,2.11.3,2.12.3,2.13.0,,,,,,,,0,,,,,,,,,"Current createRemoteFileOperations just remove the parameter map directly when it configure the ftp client. It could cause some troubles when the createRemoteFileOperations is called again.
 
Here is the mail thread which talks about it.
http://camel.465427.n5.nabble.com/Camel-FTP-consumer-socketFactory-not-work-correctly-tp5744716.html ",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-12-18 17:45:29.679,,,no_permission,,Unknown,,,,,,,,,,,364405,,,Wed Dec 18 17:45:29 UTC 2013,,,,,,,0|i1qt7r:,364705,,,,,,,,,"18/Dec/13 08:01;njiang;Applied the patch into master, camel-2.12.x and camel-2.11.x branches.","18/Dec/13 17:45;alexey-s;Thanks for the correction of an error.
Exactly the same error there FtpsEndpoint.",,,,,,,,,,,,,,,,,,,,,,
camel-restlet - request headers are sent in response,CAMEL-7073,12684980,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,davidkeen,davidkeen,16/Dec/13 15:42,17/Dec/13 02:59,13/Mar/19 22:19,17/Dec/13 02:59,2.12.2,,,,,,,,,2.12.3,2.13.0,,,camel-restlet,,,,,,0,,,,,,,,,"The fix applied in CAMEL-6879 causes the request headers to be sent back in the response.

DefaultRestletBinding copies the request headers in 'org.restlet.http.headers' header to the response headers in 'org.restlet.http.headers'.

This causes problems for things like Content-Type header which is a valid request and response header and so the response is sent with the request content-type. Eg, POST requests that should receive JSON in response and send using content-type application/x-www-form-urlencoded will be sent back a response with the same content-type which doesn't make sense.",,,,,,,,,,,,,,CAMEL-6879,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-12-17 02:59:16.058,,,no_permission,,Unknown,,,,,,,,,,,364057,,,Tue Dec 17 02:59:16 UTC 2013,,,,,,,0|i1qr2n:,364357,,,,,,,,,"16/Dec/13 15:54;davidkeen;I have opened a pull request with a fix for this issue including a unit test: https://github.com/apache/camel/pull/69.

I can create and attach a patch if you prefer.",17/Dec/13 02:59;njiang;Applied patch into master and camel-2.12.x branches with thanks to David.,,,,,,,,,,,,,,,,,,,,,,
Flatpack skips 1 row every 2 rows when using split with streaming=true,CAMEL-7068,12684519,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,xfournet,xfournet,13/Dec/13 18:49,14/Dec/13 09:09,13/Mar/19 22:19,14/Dec/13 09:09,,,,,,,,,,2.11.3,2.12.3,2.13.0,,camel-flatpack,,,,,,0,,,,,,,,,"When using a route with a streamed split of a Flatpack result, only halve of the rows are processed

Using the repro case we get
{noformat}
2013-12-13 19:51:17,438 [main] INFO route1 - Number of rows 6
2013-12-13 19:51:17,442 [main] INFO test - Exchange[ExchangePattern: InOnly, BodyType: java.util.HashMap, Body: {Col1=1, Col2=A}]
2013-12-13 19:51:17,443 [main] INFO test - Exchange[ExchangePattern: InOnly, BodyType: java.util.HashMap, Body: {Col1=3, Col2=C}]
2013-12-13 19:51:17,443 [main] INFO test - Exchange[ExchangePattern: InOnly, BodyType: java.util.HashMap, Body: {Col1=5, Col2=E}]
{noformat}

if streaming() is removed, all the lines are processed

{noformat}
2013-12-13 19:52:37,471 [main] INFO route1 - Number of rows 6
2013-12-13 19:52:37,475 [main] INFO test - Exchange[ExchangePattern: InOnly, BodyType: java.util.HashMap, Body: {Col1=1, Col2=A}]
2013-12-13 19:52:37,476 [main] INFO test - Exchange[ExchangePattern: InOnly, BodyType: java.util.HashMap, Body: {Col1=2, Col2=B}]
2013-12-13 19:52:37,476 [main] INFO test - Exchange[ExchangePattern: InOnly, BodyType: java.util.HashMap, Body: {Col1=3, Col2=C}]
2013-12-13 19:52:37,476 [main] INFO test - Exchange[ExchangePattern: InOnly, BodyType: java.util.HashMap, Body: {Col1=4, Col2=D}]
2013-12-13 19:52:37,479 [main] INFO test - Exchange[ExchangePattern: InOnly, BodyType: java.util.HashMap, Body: {Col1=5, Col2=E}]
2013-12-13 19:52:37,479 [main] INFO test - Exchange[ExchangePattern: InOnly, BodyType: java.util.HashMap, Body: {Col1=6, Col2=F}]
{noformat}",,,,,,,,,,,,,,,,,,,,,13/Dec/13 18:50;xfournet;Camel7068Test.java;https://issues.apache.org/jira/secure/attachment/12618655/Camel7068Test.java,13/Dec/13 19:33;xfournet;Fix-CAMEL-7068.patch;https://issues.apache.org/jira/secure/attachment/12618666/Fix-CAMEL-7068.patch,,,,,2.0,,,,,,,,,,,,,,,,,,,2013-12-14 09:09:14.795,,,no_permission,,Unknown,,,,,,,,,,,363591,,,Sat Dec 14 09:09:14 UTC 2013,,,Patch Available,,,,0|i1qo8v:,363897,,,,,,,,,13/Dec/13 18:50;xfournet;Repro case,13/Dec/13 19:33;xfournet;Patch with unit test,14/Dec/13 09:09;davsclaus;Thanks for reporting and the patch.,,,,,,,,,,,,,,,,,,,,,
JcrProducer ignores existing nodes and creates invalid node hierarchies,CAMEL-7064,12684298,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,gzurowski,gzurowski,12/Dec/13 16:43,12/Dec/13 19:01,13/Mar/19 22:19,12/Dec/13 19:01,,,,,,,,,,2.11.3,2.12.3,2.13.0,,camel-jcr,,,,,,0,,,,,,,,,"The CamelJcrInsert operation of the JcrProducer does not handle existing nodes properly: If some of the nodes already exist within the path provided by the CamelJcrNodeName property, they will be skipped, resulting in the creation of an incorrect node hierarchy. Therefore, JcrProducer only works correctly with newly created node hierarchies.

E.g.: For the requested path ""/exists1/exists2/new-node"", JcrProducer will incorrectly create ""/new-node"" (i.e. directly on root level), given nodes ""exists1"" and ""exists2"" do already exist in the repository.",,,,,,,,,,,,,,,,,,,,,12/Dec/13 16:46;gzurowski;camel-jcr-existing-nodes.patch;https://issues.apache.org/jira/secure/attachment/12618434/camel-jcr-existing-nodes.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-12-12 18:58:55.907,,,no_permission,,Unknown,,,,,,,,,,,363370,,,Thu Dec 12 19:01:07 UTC 2013,,,Patch Available,,,,0|i1qmw7:,363676,,,,,,,,,"12/Dec/13 16:46;gzurowski;The attached patch contains a new JUnit test ""JcrProducerSubNodeTest"" that creates a node and a sub node in the same node hierarchy. It will fail if the fix to JcrProducer (which is also part of the patch) is not applied.

I have also submitted a pull request for this fix: https://github.com/apache/camel/pull/66","12/Dec/13 18:58;davsclaus;The patch looks good. Only one checkstyle error

/Users/davsclaus/workspace/camel/components/camel-jcr/src/test/java/org/apache/camel/component/jcr/JcrProducerSubNodeTest.java:80: method call child at indentation level 16 not at correct indentation, 20

Details here how to build with checkstyle
http://camel.apache.org/building.html","12/Dec/13 19:01;davsclaus;Thanks for the patch. I have fixed the CS.

Keep them coming :)",,,,,,,,,,,,,,,,,,,,,
"Tracer, BacklogTracer and BacklogDebugger should stop/shutdown when Camel does that",CAMEL-7062,12684200,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,12/Dec/13 10:42,12/Dec/13 13:23,13/Mar/19 22:19,12/Dec/13 13:23,2.12.0,,,,,,,,,2.12.3,2.13.0,,,camel-core,,,,,,0,,,,,,,,,"This ensures we cleanup resources nicely.

Also the backlog tracer should remove processor definitions when a route is removed to not keep reference to defintions which are no longer in use.

See nabble
http://camel.465427.n5.nabble.com/BacklogTracer-memory-leak-tp5744561.html",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,363272,,,2013-12-12 10:42:39.0,,,,,,,0|i1qman:,363578,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Type conversion between DOMSource and InputStream breaks on Windows,CAMEL-6854,12673376,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,siano,siano,11/Oct/13 05:53,10/Dec/13 07:54,13/Mar/19 22:19,10/Dec/13 07:54,2.10.7,2.11.2,2.12.1,,,,,,,2.11.3,2.12.3,2.13.0,,camel-core,,,,,,0,,,,,,,,,"The type conversion between DomSource and InputStream will destroy non-ascii characters if the default charset is not UTF-8.

Therefore the following test will work on Linux (and in my Eclipse on Windows) where the default charset is UTF-8, but it will not work if invoked from the command line (maven) when the default charset is not UTF-8.

I will also get similar issues if the type converter are implicitly called by endpoints (the real use case was to read the output of a camel-cxf endpoint as an InputStream).

import java.io.InputStream;

import javax.xml.transform.dom.DOMSource;

import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.mock.MockEndpoint;
import org.apache.camel.test.junit4.CamelTestSupport;
import org.junit.Test;

public class XMLTypeConverterTest extends CamelTestSupport {

    @Test
    public void testBase64Marshal() throws InterruptedException {
        MockEndpoint mock = getMockEndpoint(""mock:result"");
        mock.expectedMessageCount(1);
        template.sendBody(""direct:source"", ""<colors><color>grün</color></colors>"");
        assertMockEndpointsSatisfied();
        String body = mock.getReceivedExchanges().get(0).getIn().getBody(String.class);
        assertStringContains(body, ""<colors><color>grün</color></colors>"");
    }

    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                from(""direct:source"").convertBodyTo(DOMSource.class).convertBodyTo(InputStream.class).convertBodyTo(DOMSource.class)
                        .convertBodyTo(String.class).to(""mock:result"");
            }
        };
    }
}
",Windows,,,,,,,,,,,,,,,,,,,,14/Oct/13 06:01;siano;0001-CAMEL-6854-Type-conversion-between-DOMSource-and-Inp.patch;https://issues.apache.org/jira/secure/attachment/12608241/0001-CAMEL-6854-Type-conversion-between-DOMSource-and-Inp.patch,11/Oct/13 06:03;siano;XMLTypeConverterTest.txt;https://issues.apache.org/jira/secure/attachment/12607954/XMLTypeConverterTest.txt,09/Dec/13 14:05;ay;test2.diff;https://issues.apache.org/jira/secure/attachment/12617832/test2.diff,,,,3.0,,,,,,,,,,,,,,,,,,,2013-12-09 14:03:58.804,,,no_permission,,Unknown,,,,,,,,,,,352999,,,Tue Dec 10 07:54:52 UTC 2013,,,,,,,0|i1ouyv:,353286,,,,,,,,,"11/Oct/13 06:13;siano;I think the issue is in org.apache.camel.converter.jaxp.XmlConverter

...
    @Converter
    public InputStream toInputStream(DOMSource source, Exchange exchange) throws TransformerException, IOException {
        String s = toString(source, exchange);
        return new ByteArrayInputStream(s.getBytes());
    }

Converts the data to a String first, then we get a ByteArrayInputStream. The content of the InputStream has to be UTF-8 unless the preamble (which we don't have) or the BOM (which we also don't have) indicate otherwise.

I am pretty sure that other XML data types (like Document) have the same issue.

I am not entirely sure how to fix this, but it might be possible that the either the default charset needs to be UTF-8 for these XML type conversions or that a XML preamble (with charset) needs to be written in all cases.","11/Oct/13 11:46;siano;Wouldn't changing lines 834 and 848 of XMLConverter class to
        return new ByteArrayInputStream(s.getBytes(""UTF-8""));

fix this issue? (hardcoded UTF-8 no matter what the default encoding is)

Or would this have side effects?",14/Oct/13 06:03;siano;I have attached a patch that will fix this specific issue (even though there might be encoding issues elswhere in the code),"09/Dec/13 14:03;ay;Hi Willem,
I was wondering if the reason for this change not being committed is the test using non-ascii characters that are violating the code check? If that is the case, I am attaching a modified test that does not directly include those non-ascii characters in the code but includes them using their corresponding escaped unicode characters. I even added a few characters to make it more interesting.

regards, aki","09/Dec/13 14:05;ay;a modified test file with test cases that use escaped unicode characters.
","10/Dec/13 01:48;njiang;This issue was out of my radar for a while, I will review patch and apply it to the master branch today.","10/Dec/13 07:54;njiang;Applied the patch into master, camel-2.12.x and camel-2.11.x branches.",,,,,,,,,,,,,,,,,
Camel XSD validation not working with apache xerces,CAMEL-7036,12682611,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,04/Dec/13 04:43,07/Dec/13 14:48,13/Mar/19 22:19,07/Dec/13 14:48,2.11.2,2.12.2,,,,,,,,2.11.3,2.12.3,2.13.0,,camel-core,,,,,,0,,,,,,,,,Here is the [user complain|http://stackoverflow.com/questions/20347619/camel-xsd-validation-not-working-camel-2-12-1-jboss-5-1-0-ga-jdk-1-6] of it,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,361868,,,Sat Dec 07 14:48:13 UTC 2013,,,,,,,0|i1qdlz:,362163,,,,,,,,,"07/Dec/13 14:48;njiang;Applied the patch into master, camel-2.12.x and camel-2.11.x branches.",,,,,,,,,,,,,,,,,,,,,,,
We should ignore the rabbitmq.ROUTING_KEY when bridgeEndpoint option is true,CAMEL-7044,12683039,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,06/Dec/13 02:11,07/Dec/13 14:33,13/Mar/19 22:19,07/Dec/13 14:33,2.12.2,,,,,,,,,2.12.3,2.13.0,,,camel-rabbitmq,,,,,,0,,,,,,,,,"[An user complains about camel route keeping sending the message to the same queue|http://camel.465427.n5.nabble.com/camel-rabbitmq-routing-issue-tp5744371p5744374.html ] when using the camel-rabbitmq as a proxy.
{code}
<camelContext xmlns=""http://camel.apache.org/schema/spring""> 
<route> 
<from 
uri=""rabbitmq://localhost/general.topic?queue=general.queue&amp;routingKey=general.queue&amp;exchangeType=topic&amp;username=guest&amp;password=guest&amp;autoDelete=false&amp;durable=true""
/> 
<to 
uri=""rabbitmq://localhost/scheduler.topic?queue=scheduler.queue&amp;routingKey=scheduler.queue&amp;exchangeType=topic&amp;username=guest&amp;password=guest&amp;autoDelete=false&amp;durable=true""
/> 
</route> 
</camelContext>
{code}

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,362291,,,Sat Dec 07 14:33:08 UTC 2013,,,,,,,0|i1qg7r:,362585,,,,,,,,,07/Dec/13 14:33;njiang;Applied the patch into master and camel-2.12.x branches.,,,,,,,,,,,,,,,,,,,,,,,
"Camel 2.12 shows unexpected warning ""Cannot determine current route from Exchange""",CAMEL-6793,12670971,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,michaelf33,michaelf33,27/Sep/13 17:00,03/Dec/13 19:59,13/Mar/19 22:19,17/Oct/13 14:05,2.12.1,,,,,,,,,2.12.2,2.13.0,,,camel-core,eip,,,,,0,,,,,,,,,"Since upgrading from 2.10.6 to 2.12.1 Camel logs the following warning:
{code}
18:47:10,278 [WARN ] DefaultErrorHandler       - Cannot determine current route from Exchange with id: ID-xyz-0-12, will fallback and use first error handler.
{code}

It looks like the ""splitter"" is causing the problem. If the ""<split>"" is disabled in the route, then the warning disappears!

Here's the example route for reproduction:
{code}
<?xml version=""1.0"" encoding=""UTF-8""?>
<beans xmlns=""http://www.springframework.org/schema/beans""
       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
       xsi:schemaLocation=""http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd"">

	<!-- custom exceptions -->
	<bean id=""demoIllegalStateException"" class=""java.lang.IllegalStateException"">
		<constructor-arg index=""0"" value=""Forced Exception"" type=""java.lang.String""/>
	</bean>

	<!-- this is the camel route which proxy the web service and forward it to the real web service -->
	<camelContext id=""camelCtx"" xmlns=""http://camel.apache.org/schema/spring"" errorHandlerRef=""defaultErrorHandler"" trace=""false""
	              messageHistory=""true"">

		<errorHandler id=""defaultErrorHandler"" type=""DefaultErrorHandler"">
			<redeliveryPolicy logExhausted=""true""/>
		</errorHandler>

		<errorHandler id=""noErrorHandler"" type=""NoErrorHandler""/>

		<endpoint id=""myTimer"" uri=""timer://myTimer?period=5s""/>
		<route id=""Start"" autoStartup=""true"" trace=""false"" errorHandlerRef=""defaultErrorHandler""
		       startupOrder=""900"">
			<from uri=""ref:myTimer""/>
			<setBody>
				<simple>Some Test Message</simple>
			</setBody>
			<to uri=""direct:Process""/>
		</route>

		<route id=""Process"" autoStartup=""true"" trace=""false"" errorHandlerRef=""defaultErrorHandler""
		       startupOrder=""800"">
			<from uri=""direct:Process""/>

			<onException>
				<exception>java.lang.ArithmeticException</exception>
				<handled>
					<constant>true</constant>
				</handled>
				<to uri=""direct:HandleException""/>
			</onException>

			<!-- now delegate the processing of the body with all the selected transfers -->
			<to uri=""direct:Process2""/>
		</route>


		<route id=""Process2"" autoStartup=""true"" trace=""false"" errorHandlerRef=""defaultErrorHandler""
		       startupOrder=""30"">
			<from uri=""direct:Process2""/>

			<onException>
				<exception>java.lang.IllegalStateException</exception>
				<handled>
					<constant>true</constant>
				</handled>
				<to uri=""direct:HandleException""/>
			</onException>

			<split stopOnException=""true"" streaming=""false"" parallelProcessing=""false"">
				<simple>${body}</simple>

				<throwException ref=""demoIllegalStateException""/>
			</split>
		</route>

		<route id=""HandleException"" autoStartup=""true"" trace=""false""
		       errorHandlerRef=""noErrorHandler""
		       startupOrder=""13"">
			<from uri=""direct:HandleException""/>

			<log loggingLevel=""INFO"" message=""[${property.LogPrefix}] EXCEPTION message: ${exception}""/>
			<log loggingLevel=""DEBUG"" message=""[${property.LogPrefix}] EXCEPTION stacktrace: ${exception.stacktrace}""/>
			<stop/>
		</route>
	</camelContext>
</beans>
{code}

Is it a bug or do I have to configure something new? 2.10.6 and previous versions did not show this kind of behavior (meaning: did not log this warning)!",Windows,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-10-17 11:53:01.243,,,no_permission,,Unknown,,,,,,,,,,,350800,,,Tue Dec 03 19:59:23 UTC 2013,,,,,,,0|i1ohgv:,351091,,,,,,,,,17/Oct/13 11:53;davsclaus;Thanks for reporting. I have reproduced the issue and have a pending fix.,03/Dec/13 19:59;Luckless;I just wanted to confirm that I am having the same issue,,,,,,,,,,,,,,,,,,,,,,
camel-core-osgi doesn't properly handle different version of the same bundle,CAMEL-7035,12682427,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,iocanel,iocanel,iocanel,03/Dec/13 16:39,03/Dec/13 17:14,13/Mar/19 22:19,03/Dec/13 17:14,2.12.2,,,,,,,,,2.12.3,2.13.0,,,osgi,,,,,,0,,,,,,,,,"CamelContext service is registered once per bundle symbolic name.

If multiple bundles share symbolic names (and use different versions) the CamelContext will only registered for the first bundle.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,361684,,,2013-12-03 16:39:59.0,,,,,,,0|i1qci7:,361982,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RabbitMQ Consumer does not pick up REPLY_TO,CAMEL-7009,12681194,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,jrfoster67,jrfoster67,26/Nov/13 03:35,03/Dec/13 00:38,13/Mar/19 22:19,03/Dec/13 00:38,2.12.1,,,,,,,,,2.12.2,,,,camel-rabbitmq,,,,,,0,,,,,,,,,"When using RPC in RabbitMQ, the producer sets up an exclusive queue and specifies that queue as the reply_to on outgoing messages.  When the consumer in camel-rabbitmq receives the messages, the reply_to isn't available on the exchange, so no RPC calls can be completed.

The following Python script (from RabbitMQ In Action) produces the message with a reply_to property:

import time, json, pika

creds_broker = pika.PlainCredentials(""guest"", ""guest"")
conn_params = pika.ConnectionParameters(""localhost"",
                                         virtual_host = ""/"",
                                         credentials = creds_broker)
conn_broker = pika.BlockingConnection(conn_params)
channel = conn_broker.channel()

msg = json.dumps({""client_name"": ""RPC Client 1.0"",
                  ""time"" : time.time()})
result = channel.queue_declare(exclusive=True, auto_delete=True)
msg_props = pika.BasicProperties()
msg_props.reply_to = result.method.queue

channel.basic_publish(body=msg,
                      exchange=""talentsprout.rpc"",
                      properties=msg_props,
                      routing_key=""ping"")

print ""Sent 'Ping' RPC call.  Waiting for reply...""

def reply_callback(channel, method, header, body):
     """"""Receives RPC server replies.""""""
     print ""RPC Reply --- "" + body
     channel.stop_consuming()

channel.basic_consume(reply_callback,
                      queue=result.method.queue,
                      consumer_tag=result.method.queue)

channel.start_consuming()



The following route in Camel would consume messages from this queue:

		from(""rabbitmq://192.168.213.130/talentsprout.rpc?queue=ping&routingKey=ping&durable=False&autoDelete=False&autoAck=False&username=guest&password=guest"")
		.log(""Headers: ${headers}"");

The log statement from that route shows that no reply_to header is added.

Without this feature, RPC from external producers cannot work.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-11-26 07:32:41.709,,,no_permission,,Unknown,,,,,,,,,,,360459,,,Tue Dec 03 00:38:09 UTC 2013,,,,,,,0|i1q4yv:,360758,,,,,,,,,"26/Nov/13 07:32;njiang;I just checked the code of RabbitMQConsumer, it just put the REPLY_TO into the message header.
Can you double check if the message properties is set rightly?
{code}
        if (properties.getReplyTo() != null) {
                exchange.getIn().setHeader(RabbitMQConstants.REPLY_TO, properties.getReplyTo());
            }
{code}","26/Nov/13 08:22;njiang;I just ran a simple tests and verified the REPLY_TO message header is set rightly.
{code}
rabbitmq.REPLY_TO=myReply
{code}
","26/Nov/13 16:54;jrfoster67;I downloaded the source from here http://www.interior-dsgn.com/apache/camel/apache-camel/2.12.1/apache-camel-2.12.1-src.zip and looked in apache-camel-2.12.1\components\camel-rabbitmq\src\main\java\org\apache\camel\component\rabbitmq\RabbitMQConsumer.java and don't see the code you posted in the comment.  I also did a full search through the entire camel 2.12.1 source tree for that constant (using ultra-edit), and only found the following two references:

----------------------------------------
Find 'RabbitMQConstants.REPLY_TO' in 'C:\DevJava\Workspaces\apache-camel-2.12.1\components\camel-rabbitmq\src\main\java\org\apache\camel\component\rabbitmq\RabbitMQProducer.java' (11/26/2013 10:01:38 AM; 9/18/2013 9:35:08 PM):
C:\DevJava\Workspaces\apache-camel-2.12.1\components\camel-rabbitmq\src\main\java\org\apache\camel\component\rabbitmq\RabbitMQProducer.java(90):         final Object replyTo = exchange.getIn().getHeader(RabbitMQConstants.REPLY_TO);
Found 'RabbitMQConstants.REPLY_TO' 1 time(s).
----------------------------------------
Find 'RabbitMQConstants.REPLY_TO' in 'C:\DevJava\Workspaces\apache-camel-2.12.1\components\camel-rabbitmq\src\test\java\org\apache\camel\component\rabbitmq\RabbitMQProducerTest.java' (11/26/2013 10:01:38 AM; 9/18/2013 9:35:08 PM):
C:\DevJava\Workspaces\apache-camel-2.12.1\components\camel-rabbitmq\src\test\java\org\apache\camel\component\rabbitmq\RabbitMQProducerTest.java(101):         message.setHeader(RabbitMQConstants.REPLY_TO, ""bbbbdfgdfg"");
Found 'RabbitMQConstants.REPLY_TO' 1 time(s).
Search complete, found 'RabbitMQConstants.REPLY_TO' 2 time(s). (2 file(s)).

Not sure if the trunk has been updated and not released, or if we're not talking about the same code.

However, if I run the above route in camel, and run the above python script, these are the headers I see:

[) thread #2 - RabbitMQConsumer] route1                         INFO  Headers: {rabbitmq.EXCHANGE_NAME=talentsprout.rpc, breadcrumbId=ID-DENORALT852-61351-1385483624264-0-1, rabbitmq.ROUTING_KEY=ping, rabbitmq.DELIVERY_TAG=1}

","02/Dec/13 21:00;jrfoster67;I looked at  and re-tested with 2.12.2 I can now see that the REPLY_TO header (and others) do get correctly set on the consumer, so must have been code in the trunk you were looking at.",03/Dec/13 00:38;njiang;It is already fixed in camel-2.12.2.,,,,,,,,,,,,,,,,,,,
quartz2 - Simple trigger should repeat forever by default,CAMEL-7029,12682213,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,02/Dec/13 20:07,02/Dec/13 20:42,13/Mar/19 22:19,02/Dec/13 20:42,2.12.2,,,,,,,,,2.12.3,2.13.0,,,camel-quartz2,,,,,,0,,,,,,,,,"If you use the simple trigger then it only triggers once out of the box. You must set repeatCount=-1 to keep firing. Or set it to the exact number of times you want.

The default value of 0 makes it only fire once.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,361470,,,2013-12-02 20:07:07.0,,,,,,,0|i1qb6v:,361769,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Allow clearing of field 'Name' for upserts in Salesforce component,CAMEL-7021,12681626,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,dhirajsb,dhirajsb,27/Nov/13 18:16,28/Nov/13 08:37,13/Mar/19 22:19,28/Nov/13 08:37,2.12.2,,,,,,,,,2.12.3,2.13.0,,,camel-salesforce,,,,,,0,,,,,,,,,"The Salesforce component clears the field 'Name' when upserting SObjects assuming its a common external ID. But Salesforce allows creating SObjects with custom external IDs, and the user may need to insert/update the 'Name' field. The method clearBaseFields in AbstractSObjectBase should not clear this field to support this use case. 
This was originally submitted as a github pull request https://github.com/apache/camel/pull/57 by mdarcemont. ",,,,,,,,,,,,,,,,,,,,,27/Nov/13 19:25;dhirajsb;salesforce-CAMEL-7021.patch;https://issues.apache.org/jira/secure/attachment/12616101/salesforce-CAMEL-7021.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-11-28 08:37:40.311,,,no_permission,,Unknown,,,,,,,,,,,360890,,,Thu Nov 28 08:37:40 UTC 2013,,,,,,,0|i1q7m7:,361189,,,,,,,,,27/Nov/13 19:25;dhirajsb;Attaching patch to disable clearing 'Name' field for update/upsert,28/Nov/13 08:37;davsclaus;Thanks for the patch,,,,,,,,,,,,,,,,,,,,,,
Problem with stream caching and DefaultHttpBinding.writeResponse,CAMEL-6991,12680486,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ulrich.kramer,ulrich.kramer,21/Nov/13 11:21,22/Nov/13 08:27,13/Mar/19 22:19,22/Nov/13 08:27,2.11.2,,,,,,,,,2.12.0,,,,camel-http,,,,,,0,,,,,,,,,"DefaultHttpBinding.writeResponse was modified between 2.11.0 and 2.11.2. This yields to a problem with stream caching. 

When exchange.out is not set target (DefaultHttpBinding.java:215)  is assigned to exchange.in . exchange.in may contain a body which is already removed by an onCompletion callback. In DefaultHttpBindung.java:377 this body is read. This may yield to an exception",Debian 7,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-11-21 20:03:25.056,,,no_permission,,Unknown,,,,,,,,,,,359751,,,Fri Nov 22 08:27:40 UTC 2013,,,,,,,0|i1q0mf:,360050,,,,,,,,,"21/Nov/13 20:03;davsclaus;Are you talking about using onCompletion
http://camel.apache.org/oncompletion.html

eg onCompletion in a route, or what?",21/Nov/13 20:05;davsclaus;And can you provide an sample route or what else to demonstrate this?,21/Nov/13 20:06;davsclaus;And try with latest release Camel 2.12.1,"22/Nov/13 06:21;ulrich.kramer;With the following example you can reproduce the problem when you set two breakpoints:

# CachedOutputStream line: 209  cleanUpTempFile()	
# FileInputStreamCache line: 110  createInputStream(File)	

cleanupTempFile is called first. createInputStream creates an IOException because the file is already removed.

{code}
        CamelContext context = new DefaultCamelContext();
        context.addRoutes(new RouteBuilder() {

            @Override
            public void configure() throws Exception {
                from(""direct:input"").to(""jetty:http://localhost:55555/input"");
                from(""jetty:http://localhost:55555/input"").process(new Processor() {

                    @Override
                    public void process(final Exchange exchange) throws Exception {
                        Assert.assertFalse(exchange.hasOut());
                    }
                });
            }
        });
        context.start();
        ProducerTemplate template = context.createProducerTemplate();
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < 10000; i++) {
            sb.append(""0123456789"");
        }
        template.sendBody(""direct:input"", sb.toString());
        while (true) {
            Thread.sleep(1000);
        }
{code}","22/Nov/13 08:27;davsclaus;Ah use Camel 2.12 onwards as Jetty ends the UoW after it has written the response. So the cleanup of the file happens afterwards now.
For earlier releases use .convertBodyTo(byte[].class) to ensure the content is in-memory, at the end of the jetty route.",,,,,,,,,,,,,,,,,,,
camel-paxlogging ignores some properties from the local thread,CAMEL-6983,12679981,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jbonofre,jbonofre,jbonofre,19/Nov/13 16:16,19/Nov/13 18:32,13/Mar/19 22:19,19/Nov/13 18:32,2.12.1,,,,,,,,,2.11.3,2.12.2,2.13.0,,,,,,,,0,,,,,,,,,The camel-paxlogging component (the consumer endpoint) ignores the properties (especially the MDC ones) from the local thread.,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,359338,,,Tue Nov 19 18:32:07 UTC 2013,,,,,,,0|i1py33:,359637,,,,,,,,,19/Nov/13 17:22;jbonofre;Fixed on master: 33f1fca0ce3895f6f21226c1e52fdb78a533acd7,19/Nov/13 18:01;jbonofre;Fixed on camel-2.12.x: d89e76f816acef449610291629759ae86fb7a602,19/Nov/13 18:21;jbonofre;Fixed on camel-2.11.x: 3c6b6c57880aa8e7142af684b71faeea83318935,19/Nov/13 18:32;jbonofre;Fixed on camel-2.10.x: d6ccae1622eb47981520fb586b900bc7f302aff6,,,,,,,,,,,,,,,,,,,,
Missing fields in RestResources DTO in Salesforce component,CAMEL-6974,12679791,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,dhirajsb,dhirajsb,18/Nov/13 18:46,19/Nov/13 03:26,13/Mar/19 22:19,19/Nov/13 03:26,2.12.1,,,,,,,,,2.12.2,2.13.0,,,camel-salesforce,,,,,,0,,,,,,,,,"In Salesforce API version 27.0 new url fields licensing and analytics were added to RestResources. Although the getResources API may not be used that often, for compatibility reasons and to avoid an UnrecognizedFieldException, the fields must be added to the RestResources DTO. ",,,,,,,,,,,,,,,,,,,,,18/Nov/13 18:47;dhirajsb;salesforce-missing-fields.patch;https://issues.apache.org/jira/secure/attachment/12614445/salesforce-missing-fields.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-11-19 03:26:30.096,,,no_permission,,Unknown,,,,,,,,,,,359149,,,Tue Nov 19 03:26:30 UTC 2013,,,,,,,0|i1pwxb:,359448,,,,,,,,,18/Nov/13 18:47;dhirajsb;A patch is attached to fix this issue. ,19/Nov/13 03:26;njiang;Applied the patch into master and camel-2.12.x branches with thanks to Dhiraj.,,,,,,,,,,,,,,,,,,,,,,
Camel FileComponent: Done file will not be removed if moveFailed option is configured and an error occurs,CAMEL-6964,12679167,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,cgiera,cgiera,14/Nov/13 07:21,14/Nov/13 11:51,13/Mar/19 22:19,14/Nov/13 11:51,2.11.0,,,,,,,,,2.11.3,2.12.2,2.13.0,,camel-core,,,,,,0,,,,,,,,,"Only the ""real"" file is moved to the directory specified with the moveFailed-option. The done file still exists in the source folder and will not be deleted.",,,,,,,,,,,,,,,,,,,,,14/Nov/13 08:12;cgiera;camel.patch;https://issues.apache.org/jira/secure/attachment/12613798/camel.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-11-14 11:51:04.846,,,no_permission,,Unknown,,,,,,,,,,,358532,,,Thu Nov 14 11:51:04 UTC 2013,,,Patch Available,,,,0|i1pt13:,358822,,,,,,,,,"14/Nov/13 08:12;cgiera;First time git, hopefully correct.
Patch is for ""master"" version","14/Nov/13 11:51;davsclaus;Thanks for reporting and the patch.

Notice that the done file should only be deleted on rollback if moveFailed is in use.",,,,,,,,,,,,,,,,,,,,,,
FTP route with idempotent repo does not detect modified files,CAMEL-6936,12677585,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,skelly,skelly,05/Nov/13 14:47,11/Nov/13 11:30,13/Mar/19 22:19,11/Nov/13 11:19,2.12.1,,,,,,,,,2.11.3,2.12.2,2.13.0,,camel-core,camel-ftp,,,,,0,,,,,,,,,"Per my forum post:
http://camel.465427.n5.nabble.com/inProgressRepository-Not-clearing-for-items-in-idempotentRepository-td5742613.html

I'm attempting to consume messages from an FTP server using an idempotent repository to ensure that I do not re-download a file unless it has been modified. 

Here is my (quite simple) camel configuration: 
{code}
        <beans:bean id=""downloadRepo"" class=""org.apache.camel.processor.idempotent.FileIdempotentRepository"" >
                <beans:property name=""fileStore"" value=""/tmp/.repo.txt""/>
                <beans:property name=""cacheSize"" value=""25000""/>
                <beans:property name=""maxFileStoreSize"" value=""1000000""/>
        </beans:bean>

        <camelContext trace=""true"" xmlns=""http://camel.apache.org/schema/spring"">
                <endpoint id=""myFtpEndpoint"" uri=""ftp://me@localhost?password=****&binary=true&recursive=true&consumer.delay=15000&readLock=changed&passiveMode=true&noop=true&idempotentRepository=#downloadRepo&idempotentKey=$simple{file:name}-$simple{file:modified}"" />
                <endpoint id=""myFileEndpoint"" uri=""file:///tmp/files""/>

        <route>
            <from uri=""ref:myFtpEndpoint"" />
            <to uri=""ref:myFileEndpoint"" />
        </route>
{code}

When I start my application for the first time, all files are correctly downloaded from the FTP server and stored in the target directory, as well as recorded in the idempotent repo. 

When I restart my application, all files are correctly detected as being in the idempotent repo already on the first poll of the FTP server, and are not re-downloaded: 

13-11-04 16:52:10,811 TRACE [Camel (camel-1) thread #0 - ftp://me@localhost] org.apache.camel.component.file.remote.FtpConsumer: FtpFile[name=test1.txt, dir=false, file=true] 
2013-11-04 16:52:10,811 TRACE [Camel (camel-1) thread #0 - ftp://me@localhost] org.apache.camel.component.file.remote.FtpConsumer: This consumer is idempotent and the file has been consumed before. Will skip this file: RemoteFile[test1.txt] 

However, on all subsequent polls to the FTP server the idempotent check is short-circuited because the file is ""in progress"": 

2013-11-04 16:53:10,886 TRACE [Camel (camel-1) thread #0 - ftp://me@localhost] org.apache.camel.component.file.remote.FtpConsumer: FtpFile[name=test1.txt, dir=false, file=true]
2013-11-04 16:53:10,886 TRACE [Camel (camel-1) thread #0 - ftp://me@localhost] org.apache.camel.component.file.remote.FtpConsumer: Skipping as file is already in progress: test1.txt 

I am using camel-ftp:2.11.1 (also observing same behavior with 2.12.1)  When I inspect the source code I notice two interesting things. 
First, the GenericFileConsumer check that determines whether a file is already inProgress which is called from isValidFile() always adds the file to the inProgressRepository: 
{code}
    protected boolean isInProgress(GenericFile<T> file) { 
        String key = file.getAbsoluteFilePath(); 
        return !endpoint.getInProgressRepository().add(key); 
    } 
{code}

Second, if a file is determined to match an entry already present in the idempotent repository it is discarded (GenericFileConsumer.isValidFile() returns false).  This means it is never published to an exchange, and thus never reaches the code which would remove it from the inProgressRepository. 

Since the inProgress check happens before the Idempotent Check, we will always short circuit after we get into the inprogress state, and the file will never actually be checked again. ",,,,,,,,,,,,,,CAMEL-6574,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-11-11 10:09:56.557,,,no_permission,,Unknown,,,,,,,,,,,356960,,,Mon Nov 11 10:09:56 UTC 2013,,,,,,,0|i1pjcn:,357250,,,,,,,,,"05/Nov/13 21:23;skelly;In order to solve this, might I suggest removing the idempotent options entirely, and instead implementing an Idempotent GenericFileFilter which can then be injected into the ftp component. This is the approach I used to get around the bug in my implementation and it is working well for me.",11/Nov/13 10:09;davsclaus;Thanks for the detailed report. This bug is also in the regular file component.,,,,,,,,,,,,,,,,,,,,,,
FTP consumer does not detect file changes,CAMEL-6574,12659664,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,albertob,albertob,24/Jul/13 21:05,11/Nov/13 11:30,13/Mar/19 22:19,11/Nov/13 11:21,2.11.1,,,,,,,,,2.11.3,2.12.2,2.13.0,,camel-ftp,,,,,,0,,,,,,,,,"I have a route with an FTP consumer with the following options:

delay=1800000
disconnect=true
fileName=xxxxx.yyy
idempotent=true
idempotentKey=${file:name}-${file:size}
maxMessagesPerPoll=1
noop=true
readLock=changed
sortBy=file:modified

Upgrading from camel 2.11.0 to 2.11.1 the FTP consumer does not detect changes in the file.
I tried several idempotentKey without success.
Reverting to 2.11.0 works all fine.

I did not find any relevant info in the release notes.","GNU/Debian 6.0, Java 1.7 ",,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-07-27 17:11:31.149,,,no_permission,,Unknown,,,,,,,,,,,339856,,,Mon Nov 11 11:21:00 UTC 2013,,,,,,,0|i1mm7r:,340174,,,,,,,,,"27/Jul/13 17:11;davsclaus;As we say on the file/ftp component docs in the bottom
http://camel.apache.org/ftp2

Enable TRACE logging and see what happens on your system.","06/Aug/13 16:36;clee;I had a similar issue and stepped through the code. IMHO, it has to do with the end point's internal inprogressIdempotentRepository not clearing under certain circumstances.

The problem arise when you use have file names that do not change. In this case, you typically use the new custom idempotent key:

        from(""ftp://"" + this.user
                + ""@"" + this.host
                + "":"" + this.port
                + this.ftpDir.trim()
                + ""?password="" + this.pass
                // Poll every minute
                + ""&delay=60000""
                // Site is Read-Only, so do not attempt any operation on remote FTP.
                // NOTE: This implies idempotent=true
                + ""&noop=true""
                // Add timestamp to the key, so that we only process files that are new
                + ""&idempotentKey=${file:onlyname}-${file:size}-${date:file:yyyyMMddHHmmss}""
                // Use PASV FTP
                + ""&passiveMode=true"").
                routeId(this.getClass().getSimpleName()).
                to(""log:com.psi.camel?showAll=true&multiline=true"").
                to(""file://"" + dir.getAbsolutePath()
                + ""?fileName="" + fileName
                + ""&autoCreate=true""
                + ""&fileExist=Override"");

When the route executes the first time, all files are new (since its a memory based cache), and all is fine:
a) Filenames added to inprogress cache, 
b) custom idempotent keys added to end point idempotent cache, 
c) files processed
d) inprogress cache cleared.

When the route runs again,
a) Filenames added to inprogress cache, 
b) custom idempotent keys exists, 
c) files not processed
d) inprogress cache not cleared.

Hope this helps.

Thanks vm",22/Aug/13 14:10;davsclaus;Added unit tests. Works fine on trunk. The file is picked up again if its changed such as length etc.,"21/Oct/13 13:54;albertob;Still having problems using SFTP consumer. Trace the component gives no additional information.

Endpoint configuration:

sftp://username@host//dirname?delay=1800000&disconnect=true&fileName=FILENAME&idempotentKey=$simple{file:name}-$simple{file:modified}-$simple{file:size}&idempotentRepository=#fileStore&maxMessagesPerPoll=1&noop=true&password=xxxxxx&readLock=changed&sortBy=file:modified

Log:
2013-10-21 15:26:57,921 TRACE SftpConsumer - SftpFile[fileName=FILENAME, longName=-rwxr-xr-x    1 User Group   1504500 Oct 21 12:16 FILENAME, dir=false]
2013-10-21 15:26:57,925 TRACE SftpConsumer - This consumer is idempotent and the file has been consumed before. Will skip this file: RemoteFile[dirname/FILENAME]

I tried both inMemory and file idempotent key repository but the behaviour is always the same. Looking in the file repository I can see the old key  that is different from that of the current file, but the consumer always says that the file has been consumed before.
","29/Oct/13 12:17;albertob;Just a bit more.
The sftp server on test was an openssh on Windows. Now I tried with a sftp server on Linux and the behaviour is the same. The changes of the file are not detected.",11/Nov/13 11:21;davsclaus;Fixed by CAMEL-6936,,,,,,,,,,,,,,,,,,
camel-netty-http producer should close the connection when the request connection header is close,CAMEL-6945,12678158,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,08/Nov/13 05:33,11/Nov/13 03:18,13/Mar/19 22:19,08/Nov/13 08:56,2.12.0,2.12.1,,,,,,,,2.12.2,2.13.0,,,camel-netty-http,,,,,,0,,,,,,,,,"camel-netty-http producer should close the connection when the request connection header is close otherwise it will get ClosedChannelException when the producer try to reuse the connection.
",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-11-08 12:38:21.676,,,no_permission,,Unknown,,,,,,,,,,,357533,,,Mon Nov 11 03:18:36 UTC 2013,,,,,,,0|i1pmvj:,357823,,,,,,,,,08/Nov/13 08:56;njiang;Applied the patch into master and camel-2.12.x branches.,"08/Nov/13 12:38;davsclaus;I think we have a catch-22 situation here.

Yeah this ticket about the netty http producer should close the connection if ""Connection: close"" is in the HTTP header, then that is correct. The missing piece was that the check was already there, but the binding code didn't set the Exhcange.CLOSE header. Though this code sets it as a property on the exchange. Should really be header instead to be consistent.

Okay the catch-22 is when you bridge using netty-http, eg

{code}
1..n clients
-->
from netty-http 
   to netty-http 
-->
  backend server
{code}

Then you have N+ clients on the outside that may have ""Connection: close"" in their http headers. So on the Camel server we have the catch-22 situation, because

1. We want the netty http consumer to close the connection when the request is done (current code does that)
2. We most likely do not want to close connections between Camel and the backend server (to keep these connections alive and fast as possible)

So we should have a better way of doing #2 to tell Camel it should disregard the ""Connection: close"" header but keep it alive between Camel and backend server. eg some way of configuring this better.

Today we have the disconnect option people could use to force this
{code}
from netty-http 
   to netty-http?disconnect=false 
{code}

But I am not sure if setting that disconnect option would have the http header override it, so if there is a http header with ""Connection: close"" it may take precedence and still close the connection on the netty http producer side.
","11/Nov/13 03:18;njiang;If we want to proxy the request and keep using the connection, we need to change the header ""Connection: close"" to be ""Connection: keepalive"", the proxy can be like this
{code}
from(""netty-http:xxx"").setHeader(""connection"", ""keep-alive"").to(""netty-http:yyy"")
{code}",,,,,,,,,,,,,,,,,,,,,
Component Resolution for CXFBean Triggers a Race Condition,CAMEL-6920,12676878,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,zilatica,zilatica,31/Oct/13 15:53,10/Nov/13 10:28,13/Mar/19 22:19,10/Nov/13 10:28,2.10.7,,,,,,,,,2.11.0,,,,camel-cxf,karaf,osgi,,,,0,,,,,,,,,"Making use of the cxfbean camel component triggers a race condition in ServiceMix startup.

Logs received:
{code}
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: cxfbean://failureProof due to: No component found with scheme: cxfbean
        at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:495)[101:org.apache.camel.camel-core:2.10.7]
        at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:50)[101:org.apache.camel.camel-core:2.10.7]
        at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:187)[101:org.apache.camel.camel-core:2.10.7]
        at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:108)[101:org.apache.camel.camel-core:2.10.7]
        at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:114)[101:org.apache.camel.camel-core:2.10.7]
        at org.apache.camel.model.SendDefinition.resolveEndpoint(SendDefinition.java:61)[101:org.apache.camel.camel-core:2.10.7]
        at org.apache.camel.model.SendDefinition.createProcessor(SendDefinition.java:55)[101:org.apache.camel.camel-core:2.10.7]
        at org.apache.camel.model.ProcessorDefinition.makeProcessor(ProcessorDefinition.java:461)[101:org.apache.camel.camel-core:2.10.7]
        at org.apache.camel.model.ProcessorDefinition.addRoutes(ProcessorDefinition.java:179)[101:org.apache.camel.camel-core:2.10.7]
        at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:876)[101:org.apache.camel.camel-core:2.10.7]
        ... 20 more
{code}

Will attach example code to trigger error and steps to reproduce in Apache ServiceMix 4.5.3.","Apache ServiceMix 4.5.3
Linux centora 2.6.18-308.8.2.el5 #1 SMP Tue Jun 12 09:57:26 EDT 2012 i686 i686 i386 GNU/Linux",,,,,,,,,,,,,,,,,,,,31/Oct/13 16:01;zilatica;cxf-cxfbean-broken.zip;https://issues.apache.org/jira/secure/attachment/12611416/cxf-cxfbean-broken.zip,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-11-10 10:24:05.279,,,no_permission,,Unknown,,,,,,,,,,,356254,,,Sun Nov 10 10:28:57 UTC 2013,,,,,,,0|i1pezj:,356542,,,,,,,,,"31/Oct/13 15:58;zilatica;Steps to reproduce:

# Install Apache ServiceMix 4.5.3 ""Full assembly"" (http://servicemix.apache.org/downloads.html)
# Unzip to Linux machine
# Modify <smx untar root>/etc/org.apache.karaf.features.cfg
to be 
{code}
featuresBoot=karaf-framework,config,activemq-broker,activemq-spring,saaj,cxf-specs,camel,activemq-camel,camel-cxf,camel-blueprint,war,jetty,camel-jetty
{code}
Not the addition of jetty and camel-jetty
# Build attached source as part of the examples folder under <smx root>/examples/cxf
# Deliver cxf-cxfbean-broken jar into <smx root>/deploy
# Start ServiceMix (<smx root>/bin/start)
# Watch logs at <sxm root>/data/log/servicemix.log

Expected behavior:
Port 8585 will open up and listen for requests.

Actual behavior:
No start, error in logs
{code}
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: cxfbean://failureProof due to: No component found with scheme: cxfbean
        at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:495)[101:org.apache.camel.camel-core:2.10.7]
        at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:50)[101:org.apache.camel.camel-core:2.10.7]
        at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:187)[101:org.apache.camel.camel-core:2.10.7]
        at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:108)[101:org.apache.camel.camel-core:2.10.7]
        at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:114)[101:org.apache.camel.camel-core:2.10.7]
        at org.apache.camel.model.SendDefinition.resolveEndpoint(SendDefinition.java:61)[101:org.apache.camel.camel-core:2.10.7]
        at org.apache.camel.model.SendDefinition.createProcessor(SendDefinition.java:55)[101:org.apache.camel.camel-core:2.10.7]
        at org.apache.camel.model.ProcessorDefinition.makeProcessor(ProcessorDefinition.java:461)[101:org.apache.camel.camel-core:2.10.7]
        at org.apache.camel.model.ProcessorDefinition.addRoutes(ProcessorDefinition.java:179)[101:org.apache.camel.camel-core:2.10.7]
        at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:876)[101:org.apache.camel.camel-core:2.10.7]
        ... 20 more
{code}

Issue can be resolved by waiting around 3 minutes after actual startup and refresh (forcing a reload) the jar via
{code}
touch ./deploy/cxf-cxfbean-broken-4.5.3.jar
{code}

8585 will start listening after forcing the reload via touch and you may then run http://localhost:8585/test or http://<server host>:8585/test
You will receive a plain/text response of ""Hello world"" once the issue is resolved.
","31/Oct/13 16:01;zilatica;Build this code running ""mvn clean install"" as part of the Apache ServiceMix 4.5.3 examples under 
<smx unzip root>/examples/cxf

You may build it directly or add a module under the cxf pom.xml file to include this example","31/Oct/13 16:05;zilatica;Side notes:
I have tried ferociously to work around this issue without having to create a bug report as I'm well aware this is an old component that may not be fully maintained.  However, nothing is working.

I have enforced in the pom.xml:
{code}
 <Require-Bundle>org.apache.camel.camel-cxf</Require-Bundle>
{code}
which guarantees the camel-cxf bundle is up and running.  This does not fix the issue.

In addition, I reviewed the code and figured out that components are actually camel services with properties defining the component name.  To try to guarantee that the component is actually up and running before using it, I have included this in the camel-context.xml which ensure the service is truly up and running:
{code}
    <!-- this forces our delay to start after cxfbean starts -->
    <osgi:reference id=""cxfbeanReference"" cardinality=""1..1"" interface=""org.apache.camel.spi.ComponentResolver"" filter=""(component=cxfbean)"" />
{code}

I even went through the hassle of creating an OSGI Lifecycle listener and made sure I was actually receiving the component service.  While the service is up and running, it would seem camel is concurrently preparing to enable the ""cxfbean"" component while it is bringing up camel routes that require the component and subsequently failing.  This is a race condition that is solved only by waiting a given amount of time and then forcing a bundle update.  
","31/Oct/13 16:12;zilatica;Also, documentation does not indicate this component is deprecated.  See http://camel.apache.org/cxf-bean-component.html
If this component is no longer being maintained/tested, I'd like to know so that I can work with my team to migrate all of our code away from it.  I'm still hoping the component is maintained and simply missing some blocking lock mechanism that is required for component startup.","10/Nov/13 10:24;davsclaus;This is more of a Karaf/SMX issue, than Camel issue!. 

> step 5 - > Deliver cxf-cxfbean-broken jar into <smx root>/deploy
Also I never recommend people to deploy using the deploy directory - you do not have any control when the container starts the bundle from this dir. 

Install using the shell instead and you can use start level to have your bundles started after the container and framework bundles
","10/Nov/13 10:27;davsclaus;And from Camel 2.11 onwards the Camel components enlist in their MANIFEST.MF entries the components as services this bundle exports

Export-Service: org.apache.aries.blueprint.NamespaceHandler;osgi.service
 .blueprint.namespace=""http://camel.apache.org/schema/blueprint/cxf"",org
 .apache.camel.spi.ComponentResolver;component=cxfrs,org.apache.camel.sp
 i.ComponentResolver;component=cxf,org.apache.camel.spi.ComponentResolve
 r;component=cxfbean

This should also help with this Karaf/SMX to resolve this better.

SMX 4.6 is being upgraded to use Camel 2.12 and thus have this out of the box.",10/Nov/13 10:28;davsclaus;Use SMX 4.6 or Camel 2.11 onwards. And dont deploy using the deploy dir.,,,,,,,,,,,,,,,,,
http4 component should always filter 'host' header,CAMEL-6185,12637957,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ceposta,fhoeben,fhoeben,20/Mar/13 11:44,04/Nov/13 20:57,13/Mar/19 22:19,04/Nov/13 20:57,2.10.4,,,,,,,,,2.12.2,2.13.0,,,camel-ahc,camel-http,camel-http4,camel-jetty,camel-netty-http,,0,,,,,,,,,"Exchanges originating from a CXF consumer get an incorrect 'host' http-header when directed to a http4 producer. The problem is that the cxf consumer copies the incoming 'host' header to the message, and the http4 producer copies this to the outgoing message. The http component does not do that.

When sending a http request the HttpProducer copies headers from the incomming message to the HTTP request. The 'host' header should not be copied since it (according to the http spec) should always contain the name of the server the request is sent to.
This has already been addressed for bridge endpoints (CAMEL-5757), but is always an issue.

The easiest fix seems to be to add the 'host' header to the list of out going filters in org.apache.camel.component.http4.HttpHeaderFilterStrategy.initialize() i.e.:
{code}
getOutFilter().add(""host"");
{code}

Once this is done the special handling (i.e. removal of) of 'host' header in case of bridgeEndpoint inside HttpProducer can be removed (since the strategy will remove it):
{code}
            // Need to remove the Host key as it should be not used 
            exchange.getIn().getHeaders().remove(""host"");
{code}",,,,,,,,,,,,,,,,,,,,,30/Oct/13 03:16;ceposta;CAMEL-6185-3.patch;https://issues.apache.org/jira/secure/attachment/12610978/CAMEL-6185-3.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-09-25 18:34:21.265,,,no_permission,,Novice,,,,,,,,,,,318435,,,Mon Nov 04 20:57:29 UTC 2013,,,,,,,0|i1iy1j:,318776,,,,,,,,,"25/Sep/13 18:34;ceposta;I'll take a look and what is the best patch, and tests...","21/Oct/13 13:43;davsclaus;Some details about host header
http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.23

Need to make the same fix in
- camel-http
- camel-http4
- camel-ahc
- camel-jetty
- camel-netty-http

As we have several http clients.
","29/Oct/13 19:02;ceposta;Thanks Claus. You're right -- all of the previously listed components also have a header filter strategy that doesn't take into account HOST. I have a patch almost complete.

The camel-jetty component, however, has a dependency on the camel-http component. So it does not directly need any patching.

Should have this fixed shortly.

","30/Oct/13 03:16;ceposta;Claus, 
can you review my patch before I commit?

Thanks!",31/Oct/13 14:24;davsclaus;Patch looks good.,04/Nov/13 20:57;ceposta;This is now fixed on master.,,,,,,,,,,,,,,,,,,
"camel-netty - producer channel pool should not close channel on destroy from pool, but noop",CAMEL-6921,12676930,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,31/Oct/13 18:51,31/Oct/13 18:58,13/Mar/19 22:19,31/Oct/13 18:58,2.10.7,2.11.2,2.12.1,,,,,,,2.11.3,2.12.2,2.13.0,,camel-netty,,,,,,0,,,,,,,,,"This can lead to a NPE in message received in ClientChannelHandler

{code}
2013-10-31 13:03:18,046 | DEBUG | w I/O  worker #1 | NettyProducer                    | ?                                   ? | 234 - org.apache.camel.camel-netty - 2.10.6 | Closing channel as an exception was thrown from Netty
java.lang.NullPointerException
	at org.apache.camel.util.ExchangeHelper.isOutCapable(ExchangeHelper.java:370)
	at org.apache.camel.component.netty.handlers.ClientChannelHandler.messageReceived(ClientChannelHandler.java:145)
	at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:296)
	at org.jboss.netty.handler.codec.frame.FrameDecoder.unfoldAndFireMessageReceived(FrameDecoder.java:458)
	at org.jboss.netty.handler.codec.frame.FrameDecoder.callDecode(FrameDecoder.java:439)
	at org.jboss.netty.handler.codec.frame.FrameDecoder.messageReceived(FrameDecoder.java:303)
	at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:268)
	at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:255)
	at org.jboss.netty.channel.socket.nio.NioWorker.read(NioWorker.java:84)
	at org.jboss.netty.channel.socket.nio.AbstractNioWorker.processSelectedKeys(AbstractNioWorker.java:471)
	at org.jboss.netty.channel.socket.nio.AbstractNioWorker.run(AbstractNioWorker.java:332)
	at org.jboss.netty.channel.socket.nio.NioWorker.run(NioWorker.java:35)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)[:1.7.0_45]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)[:1.7.0_45]
	at java.lang.Thread.run(Thread.java:744)[:1.7.0_45]
{code}

",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,356306,,,2013-10-31 18:51:01.0,,,,,,,0|i1pfb3:,356594,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
We should support to set the ContentMetadata of the Payload object through message header,CAMEL-6887,12675210,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,23/Oct/13 08:11,29/Oct/13 02:53,13/Mar/19 22:19,29/Oct/13 02:53,,,,,,,,,,2.13.0,,,,camel-jclouds,,,,,,0,,,,,,,,,"It could be handy if we can set the Payload ContentMetadata of the JcloudsBlock by setting the Camel message header.
",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,354830,,,Tue Oct 29 02:53:45 UTC 2013,,,,,,,0|i1p67z:,355119,,,,,,,,,29/Oct/13 02:53;njiang;Applied the patch into master branch.,,,,,,,,,,,,,,,,,,,,,,,
camel-xmljson: Encoding is not considered while marhaling,CAMEL-6895,12675531,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,vgoldin@gmail.com,vgoldin@gmail.com,24/Oct/13 18:07,29/Oct/13 02:52,13/Mar/19 22:19,29/Oct/13 02:52,2.12.1,,,,,,,,,2.11.3,2.12.2,2.13.0,,,,,,,,0,,,,,,,,,"The encoding specified in the DataFormat properties should be passed to OutputStreamWriter constructor in XmlJsonDataFormat.marshal method, otherwise it is not being considered.

OutputStreamWriter osw = new OutputStreamWriter(stream, encoding);",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-10-25 11:42:08.636,,,no_permission,,Novice,,,,,,,,,,,355108,,,Tue Oct 29 02:52:58 UTC 2013,,,,,,,0|i1p7xj:,355396,,,,,,,,,"25/Oct/13 08:50;vgoldin@gmail.com;Willem, why the charset is taken from the exchange instead of DataFormat properties, where it is explicitly specified (""encoding"")?","25/Oct/13 11:42;njiang;Oh, it's my fault. The feature that I just added was supposed to change the encoding dynamically (per message)
I will update the code to apply the encoding setting of DataFormat if the message header is not setting the encoding header.","29/Oct/13 02:52;njiang;Applied the patch into master, camel-2.12.x and camel-2.11.x branches.",,,,,,,,,,,,,,,,,,,,,
IMAP message flagged as SEEN following rollback,CAMEL-6905,12675825,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,dambrose,dambrose,25/Oct/13 15:19,26/Oct/13 14:06,13/Mar/19 22:19,26/Oct/13 14:06,2.12.1,,,,,,,,,2.11.3,2.12.2,2.13.0,,camel-mail,,,,,,0,,,,,,,,,"By default, if you access the content of an IMAPMessage, it will be flagged as SEEN on the server. This creates a problem if the route is subsequently rolled back (due to an exception - e.g. connection error on destination endpoint), the message will remain as SEEN and never get picked up on subsequent polls (unseen=true).

setPeek(true) should be called on each IMAPMessage before being dispatched to the processor; this ensures that the message will not be automatically flagged as SEEN before being fully consumed.

As a work around, implement a custom processor that calls setPeek(true) on the original IMAPMessage (using reflection):

{quote}
Message msgIn = exchange.getIn();

Field f = msgIn.getClass().getDeclaredField(""originalMailMessage"");
f.setAccessible(true);
IMAPMessage im = (IMAPMessage) f.get( msgIn );
im.setPeek(true);

{quote}

For reference, this is my route configuration:

{quote}
from(""imap://sn?username=un&password=xx&delete=false&unseen=true"").
process( new MyCustomAttachmentProcessor() ).
to(""jms://xyz"");
{quote}
",Windows 7,0,0,,0%,0,0,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-10-26 14:06:30.985,,,no_permission,,Novice,,,,,,,,,,,355323,,,Sat Oct 26 14:06:30 UTC 2013,,,Patch Available,,,,0|i1p99b:,355611,,,,,,,,,26/Oct/13 14:06;davsclaus;Thanks for reporting. There is a peek=true option now.,,,,,,,,,,,,,,,,,,,,,,,
camel-netty-http - Endpoint should include params in uri so they are unique,CAMEL-6903,12675783,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,25/Oct/13 10:44,26/Oct/13 13:22,13/Mar/19 22:19,26/Oct/13 13:22,2.12.1,,,,,,,,,2.12.2,2.13.0,,,camel-netty-http,,,,,,0,,,,,,,,,"This avoids eg a netty-http producer picking up a wrong endpoint, and send wrong data.

",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,355281,,,2013-10-25 10:44:44.0,,,,,,,0|i1p8zz:,355569,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FacebookConsumer does not decode the Reading since field correctly,CAMEL-6847,12673062,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,dhirajsb,dhirajsb,09/Oct/13 17:37,25/Oct/13 12:39,13/Mar/19 22:19,25/Oct/13 12:39,2.12.1,,,,,,,,,2.12.2,2.13.0,,,camel-facebook,,,,,,0,,,,,,,,,The FacebookConsumer class takes the string output of Reading class and tries to retrieve the since field value. It should use java.net.Decoder to correctly decode the URL encoded value. ,,,,,,,,,,,,,,,,,,,,,11/Oct/13 19:04;dhirajsb;patchCAMEL-6847-2.txt;https://issues.apache.org/jira/secure/attachment/12608056/patchCAMEL-6847-2.txt,09/Oct/13 17:44;dhirajsb;patchCAMEL-6847.txt;https://issues.apache.org/jira/secure/attachment/12607605/patchCAMEL-6847.txt,,,,,2.0,,,,,,,,,,,,,,,,,,,2013-10-10 08:19:11.029,,,no_permission,,Unknown,,,,,,,,,,,352685,,,Fri Oct 25 12:39:28 UTC 2013,,,,,,,0|i1ot1r:,352972,,,,,,,,,09/Oct/13 17:44;dhirajsb;Attached patch for CAMEL-6847,10/Oct/13 08:19;njiang;Applied the patch into master and camel-2.12.x branches.,"11/Oct/13 18:56;dhirajsb;The reading since and until fields should be able to use all the arbitrary formats supported by the PHP strtotime function, instead of making the Facebook component standardize on ISO8601 format. 
Also, the since date parse is still broken when its the only reading property specified in the endpoint. ","11/Oct/13 19:04;dhirajsb;Patch fixes the 'since' parse bug for the situation when it occurs as the last reading field in the endpoint url. 
Also removes the restriction on the since and until date formats to be ISO8601. The since and until values are passed as is to Facebook REST calls, which will convert and validate on server side at call time. 
This could result in a facebook4j.FacebookException being raised for an invalid date format, which will be propagated to the Camel error handler. ","21/Oct/13 13:36;davsclaus;Willem, did you get the latest patch committed? If so can this ticket be resolved?",25/Oct/13 12:39;njiang;Applied the second patch into master and camel-2.12.x branches with thanks to Dhiraj.,,,,,,,,,,,,,,,,,,
camel-jclouds JcloudsPayloadConverter doesn't copy the inputstream,CAMEL-6888,12675245,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,23/Oct/13 13:19,25/Oct/13 12:36,13/Mar/19 22:19,25/Oct/13 12:36,2.10.7,2.11.2,2.12.1,,,,,,,2.11.3,2.12.2,2.13.0,,camel-jclouds,,,,,,0,,,,,,,,,"JcloudsPayloadConverter.toPayload(InputStream is, Exchange exchange)  doesn't copy is if the is.markSupported() is false.

",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,354865,,,Fri Oct 25 12:36:27 UTC 2013,,,,,,,0|i1p6fr:,355154,,,,,,,,,"25/Oct/13 12:36;njiang;Applied the patch into master, camel-2.12.x and camel-2.11.x branches.",,,,,,,,,,,,,,,,,,,,,,,
npe when receiving a soapfault with the CXF_MESSAGE dataformat,CAMEL-6243,12641139,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,mr_dfuse,mr_dfuse,05/Apr/13 22:14,25/Oct/13 11:36,13/Mar/19 22:19,20/Oct/13 08:53,2.10.3,2.10.4,,,,,,,,2.11.3,2.12.2,2.13.0,,camel-cxf,,,,,,0,,,,,,,,,"cxf proxy scenario:

from(""cxf:bean:brokerOrderLimit?dataFormat=CXF_MESSAGE"")
.to(""cxf:bean:thalerOrderLimit?dataFormat=CXF_MESSAGE"");

When the thalerOrderLimit service returns a SOAPFault a NPE occurs:
java.lang.NullPointerException
	at org.apache.cxf.interceptor.ClientFaultConverter.getConstructor(ClientFaultConverter.java:204)[cxf-api-2.6.3.jar:2.6.3]
	at org.apache.cxf.interceptor.ClientFaultConverter.processFaultDetail(ClientFaultConverter.java:176)[cxf-api-2.6.3.jar:2.6.3]
	at org.apache.cxf.interceptor.ClientFaultConverter.handleMessage(ClientFaultConverter.java:80)[cxf-api-2.6.3.jar:2.6.3]
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:262)[cxf-api-2.6.3.jar:2.6.3]
	at org.apache.cxf.interceptor.AbstractFaultChainInitiatorObserver.onMessage(AbstractFaultChainInitiatorObserver.java:112)[cxf-api-2.6.3.jar:2.6.3]
	at org.apache.cxf.binding.soap.interceptor.CheckFaultInterceptor.handleMessage(CheckFaultInterceptor.java:69)[cxf-rt-bindings-soap-2.6.3.jar:2.6.3]
	at org.apache.cxf.binding.soap.interceptor.CheckFaultInterceptor.handleMessage(CheckFaultInterceptor.java:34)[cxf-rt-bindings-soap-2.6.3.jar:2.6.3]
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:262)[cxf-api-2.6.3.jar:2.6.3]
	at org.apache.cxf.endpoint.ClientImpl.onMessage(ClientImpl.java:783)[cxf-api-2.6.3.jar:2.6.3]
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleResponseInternal(HTTPConduit.java:1694)[cxf-rt-transports-http-2.6.3.jar:2.6.3]
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream$1.run(HTTPConduit.java:1535)[cxf-rt-transports-http-2.6.3.jar:2.6.3]
	at org.apache.cxf.workqueue.AutomaticWorkQueueImpl$3.run(AutomaticWorkQueueImpl.java:426)[cxf-api-2.6.3.jar:2.6.3]
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(Unknown Source)[:1.6.0_21]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)[:1.6.0_21]
	at org.apache.cxf.workqueue.AutomaticWorkQueueImpl$AWQThreadFactory$1.run(AutomaticWorkQueueImpl.java:351)[cxf-api-2.6.3.jar:2.6.3]
	at java.lang.Thread.run(Unknown Source)[:1.6.0_21]
Exception in thread ""default-workqueue-1"" java.lang.NullPointerException
	at org.apache.camel.component.cxf.DefaultCxfBinding.getContentFromCxf(DefaultCxfBinding.java:642)
	at org.apache.camel.component.cxf.DefaultCxfBinding.populateExchangeFromCxfResponse(DefaultCxfBinding.java:151)
	at org.apache.camel.component.cxf.CxfClientCallback.handleException(CxfClientCallback.java:81)
	at org.apache.cxf.interceptor.ClientOutFaultObserver.onMessage(ClientOutFaultObserver.java:59)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream$1.run(HTTPConduit.java:1540)
	at org.apache.cxf.workqueue.AutomaticWorkQueueImpl$3.run(AutomaticWorkQueueImpl.java:426)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.cxf.workqueue.AutomaticWorkQueueImpl$AWQThreadFactory$1.run(AutomaticWorkQueueImpl.java:351)
	at java.lang.Thread.run(Unknown Source)

Worked around by switching to PAYLOAD","Windows 7, Java 6",,,,,,,,,,,CAMEL-6404,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-04-06 09:25:02.579,,,no_permission,,Unknown,,,,,,,,,,,321555,,,Sun Oct 20 08:53:05 UTC 2013,,,,,,,0|i1jhbb:,321900,,,,,,,,,"06/Apr/13 09:25;njiang;What kind of SOAP fault does the service return?
Can you just past the SOAP message here?","08/Apr/13 08:42;mr_dfuse;<env:Envelope xmlns:env=""http://schemas.xmlsoap.org/soap/envelope/"">
   <env:Header/>
   <env:Body>
      <env:Fault>
         <faultcode>env:Server</faultcode>
         <faultstring>The request cannot be processed, time is over. (The request timestamp is over the timeout)</faultstring>
         <detail>
            <ns2:CWFault xmlns:ns2=""http://acme.com/"">
               <ns2:errorMessageId>WSEX0252</ns2:errorMessageId>
               <ns2:errorMessage>The request cannot be processed, time is over. (The request timestamp is over the timeout)</ns2:errorMessage>
               <ns2:comment>The request timestamp is over the timeout</ns2:comment>
            </ns2:CWFault>
         </detail>
      </env:Fault>
   </env:Body>
</env:Envelope>","10/Oct/13 09:11;davsclaus;Willem do you mind checking on this, as a NPE is a bug in camel-cxf / CXF which we must fix.",10/Oct/13 13:20;njiang;This issue is same with the CAMEL-6404 which is fixed long time ago.,"20/Oct/13 08:22;njiang;I managed to reproduce the first NPE error by not applying the serviceClass attribute on the CxfEndpoint, I will commit a quick fix for it shortly.","20/Oct/13 08:53;njiang;Applied patch into master, camel-2.12.x, camel-2.11.x and camel-2.10.x branches.",,,,,,,,,,,,,,,,,,
CBR - Should break out if exception was thrown when evaluating predicate,CAMEL-6889,12675247,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,23/Oct/13 13:43,23/Oct/13 14:19,13/Mar/19 22:19,23/Oct/13 14:19,2.11.2,2.12.1,,,,,,,,2.11.3,2.12.2,2.13.0,,camel-core,eip,,,,,0,,,,,,,,,"If having a CBR and the predicate throws an exception, then the next predicate is called before error handler triggers.

We should break out when exception is detected like pipeline/multicast can do.

",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-10-23 13:54:34.435,,,no_permission,,Unknown,,,,,,,,,,,354867,,,Wed Oct 23 14:19:26 UTC 2013,,,,,,,0|i1p6g7:,355156,,,,,,,,,23/Oct/13 13:54;kaaveland;I was the one asking about this on IRC earlier - just going to document that we found a workaround here. We made the bean implement Predicate and use when(bean) instead of when(method(bean)) and the error handling appears to work correctly.,23/Oct/13 14:19;davsclaus;Thanks for reporting and providing the work around,,,,,,,,,,,,,,,,,,,,,,
ConcurrentModificationException when starting QuickFIX/J component with more than one engine,CAMEL-6866,12674127,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,bvahdat,antonin.stefanutti,antonin.stefanutti,16/Oct/13 14:16,21/Oct/13 16:55,13/Mar/19 22:19,21/Oct/13 16:53,2.12.1,,,,,,,,,2.11.3,2.12.2,2.13.0,,camel-quickfix,,,,,,0,,,,,,,,,"{code}
Caused by: java.util.ConcurrentModificationException
	at java.util.HashMap$HashIterator.nextEntry(HashMap.java:793)
	at java.util.HashMap$EntryIterator.next(HashMap.java:834)
	at java.util.HashMap$EntryIterator.next(HashMap.java:832)
	at org.apache.camel.component.quickfixj.QuickfixjComponent.onCamelContextStarted(QuickfixjComponent.java:163)
	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:1833)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1699)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1544)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1512)
{code}

Since [CAMEL-6443].",,,,,,,,,,,,,,CAMEL-6443,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-10-17 08:52:08.701,,,no_permission,,Unknown,,,,,,,,,,,353750,,,Mon Oct 21 16:53:24 UTC 2013,,,,,,,0|i1ozmv:,354042,Regression,,,,,,,,17/Oct/13 08:52;davsclaus;Are you using any container such as Apache Karaf or something?,"21/Oct/13 15:24;antonin.stefanutti;I'm using Weld SE {{2.1.0.CR1}}.

It's reproducible with an Arquillian test (I'm using the {{arquillian-weld-se-embedded-1.1}} plugin) that uses two different _session settings_ configuration files for the {{quickfix}} endpoint.",21/Oct/13 16:41;bvahdat;Yeah this is indeed a side effect of CAMEL-6443 and I could reproduce this by one of this component's test.,21/Oct/13 16:53;bvahdat;Thanks for reporting.,,,,,,,,,,,,,,,,,,,,
"camel-quickfix - Engine that could not start (e.g. because of store creation problems) is still stored in the engiens map, thus making futher starts problematic",CAMEL-6443,12652015,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,tivv,tivv,10/Jun/13 11:39,21/Oct/13 16:52,13/Mar/19 22:19,23/Jul/13 08:50,2.10.0,,,,,,,,,2.10.7,2.11.2,2.12.0,,camel-quickfix,,,,,,0,,,,,,,,,"It's even worse as because of https://issues.apache.org/jira/browse/CAMEL-6441
if two starts was not successful, engine becomes totally broken.

The only workaround I can see now is to create new component instance for each endpoint.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-07-23 08:50:06.452,,,no_permission,,Unknown,,,,,,,,,,,332339,,,Tue Jul 23 08:50:06 UTC 2013,,,,,,,0|i1lbz3:,332668,,,,,,,,,23/Jul/13 08:50;davsclaus;Thanks for reporting.,,,,,,,,,,,,,,,,,,,,,,,
camel-jpa is throwing an exception in high concurrency,CAMEL-6857,12673428,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,bvahdat,muellerc,muellerc,11/Oct/13 12:30,21/Oct/13 15:06,13/Mar/19 22:19,21/Oct/13 15:06,2.12.0,2.12.1,,,,,,,,2.12.2,2.13.0,,,camel-jpa,,,,,,0,,,,,,,,,"Today, it looks much better [1]. We are trying to fix the unit tests which are failing from time to time on slower boxes. But this isn't so easy for all of them...

I had a look at org.apache.camel.processor.jpa.JpaProducerConcurrentTest.testConcurrentProducers. A few times I get the following exception which results in missing exchanges in the mock:result endpoint:
{noformat}
2013-10-11 14:01:10,623 [pool-2-thread-2] ERROR DefaultErrorHandler            - Failed delivery for (MessageId: ID-christians-macbook-pro-fritz-box-54975-1381492869188-0-4 on ExchangeId: ID-christians-macbook-pro-fritz-box-54975-1381492869188-0-9). Exhausted after delivery attempt: 1 caught: org.springframework.dao.InvalidDataAccessApiUsageException: This operation cannot be performed while a Transaction is active.; nested exception is <openjpa-2.2.2-r422266:1468616 nonfatal user error> org.apache.openjpa.persistence.InvalidStateException: This operation cannot be performed while a Transaction is active.

Message History
---------------------------------------------------------------------------------------------------------------------------------------
RouteId              ProcessorId          Processor                                                                        Elapsed (ms)
[route1            ] [route1            ] [direct://start                                                                ] [        68]
[route1            ] [to1               ] [jpa://org.apache.camel.examples.SendEmail                                     ] [        67]

Exchange
---------------------------------------------------------------------------------------------------------------------------------------
Exchange[
    Id                  ID-christians-macbook-pro-fritz-box-54975-1381492869188-0-9
    ExchangePattern     InOnly
    Headers             {breadcrumbId=ID-christians-macbook-pro-fritz-box-54975-1381492869188-0-4, CamelEntityManager=org.apache.openjpa.persistence.EntityManagerImpl@6e453dd5, CamelRedelivered=false, CamelRedeliveryCounter=0}
    BodyType            org.apache.camel.examples.SendEmail
    Body                SendEmail[id: 102 address: null]
]

Stacktrace
---------------------------------------------------------------------------------------------------------------------------------------
org.springframework.dao.InvalidDataAccessApiUsageException: This operation cannot be performed while a Transaction is active.; nested exception is <openjpa-2.2.2-r422266:1468616 nonfatal user error> org.apache.openjpa.persistence.InvalidStateException: This operation cannot be performed while a Transaction is active.
    at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:293)
    at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerSynchronization.convertException(ExtendedEntityManagerCreator.java:501)
    at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerSynchronization.afterCommit(ExtendedEntityManagerCreator.java:482)
    at org.springframework.transaction.support.TransactionSynchronizationUtils.invokeAfterCommit(TransactionSynchronizationUtils.java:133)
    at org.springframework.transaction.support.TransactionSynchronizationUtils.triggerAfterCommit(TransactionSynchronizationUtils.java:121)
    at org.springframework.transaction.support.AbstractPlatformTransactionManager.triggerAfterCommit(AbstractPlatformTransactionManager.java:951)
    at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:797)
    at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:724)
    at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:148)
    at org.apache.camel.component.jpa.JpaProducer.process(JpaProducer.java:53)
    at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
    at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:132)
    at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:307)
    at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:127)
    at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398)
    at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
    at org.apache.camel.processor.Pipeline.process(Pipeline.java:118)
    at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
    at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
    at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:56)
    at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
    at org.apache.camel.processor.UnitOfWorkProducer.process(UnitOfWorkProducer.java:73)
    at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:378)
    at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:1)
    at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:242)
    at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:346)
    at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:184)
    at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:124)
    at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:137)
    at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:144)
    at org.apache.camel.processor.jpa.JpaProducerConcurrentTest$1.call(JpaProducerConcurrentTest.java:58)
    at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
    at java.util.concurrent.FutureTask.run(FutureTask.java:138)
    at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:895)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:918)
    at java.lang.Thread.run(Thread.java:680)
Caused by: <openjpa-2.2.2-r422266:1468616 nonfatal user error> org.apache.openjpa.persistence.InvalidStateException: This operation cannot be performed while a Transaction is active.
    at org.apache.openjpa.kernel.BrokerImpl.begin(BrokerImpl.java:1369)
    at org.apache.openjpa.kernel.DelegatingBroker.begin(DelegatingBroker.java:925)
    at org.apache.openjpa.persistence.EntityManagerImpl.begin(EntityManagerImpl.java:565)
    at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.enlistInCurrentTransaction(ExtendedEntityManagerCreator.java:422)
    at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.doJoinTransaction(ExtendedEntityManagerCreator.java:399)
    at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:351)
    at com.sun.proxy.$Proxy18.joinTransaction(Unknown Source)
    at org.apache.camel.component.jpa.JpaProducer$1.doInTransaction(JpaProducer.java:55)
    at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:131)
    ... 27 more
{noformat}
which is throwing from the line 55 in org.apache.camel.component.jpa.JpaProducer
entityManager.joinTransaction();

I think this is a concurrency issue we have to investigate (not sure whether the issue is in Camel, Spring, OpenJPA, ...).",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-10-21 13:37:27.852,,,no_permission,,Unknown,,,,,,,,,,,353051,,,Mon Oct 21 15:05:39 UTC 2013,,,,,,,0|i1ovaf:,353338,,,,,,,,,"21/Oct/13 13:37;davsclaus;Babak, you got this fixed. Is it also merged to 2.11 and 2.12 branches? If so many you can resolve this ticket?",21/Oct/13 15:05;bvahdat;Yeah this issue is now resolved through CAMEL-6874 and has *only* been backported to the 2.12 branch where the problem started *after* the fix of CAMEL-5932.,,,,,,,,,,,,,,,,,,,,,,
camel-http4 - Should support defining multiple components with different names,CAMEL-6880,12674754,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,21/Oct/13 09:33,21/Oct/13 12:52,13/Mar/19 22:19,21/Oct/13 12:52,2.11.2,2.12.1,,,,,,,,2.11.3,2.12.2,2.13.0,,camel-http4,,,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Using-different-SSLContextParameters-with-HTTP4-component-tp5740430.html

If you define multiple http4 components and assign their names as: ""http4-foo"", and ""http4-bar"" etc, then the address uri is not resolved correctly.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,354376,,,2013-10-21 09:33:53.0,,,,,,,0|i1p3fb:,354666,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-Gson does not respect Exchange.CHARSET_NAME,CAMEL-6873,12674499,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,FergusN,FergusN,18/Oct/13 12:23,21/Oct/13 04:39,13/Mar/19 22:19,21/Oct/13 04:39,2.12.0,,,,,,,,,2.11.3,2.12.2,2.13.0,,camel-gson,,,,,,0,,,,,,,,,"When marshalling and unmarshalling using the gson component it does not respect the Excahnge.CHARSET_NAME property on the exchange. When constructing the Streams the charset should be passed. My changes are highlighted below. Git pull request to follow.

    @Override
    public void marshal(final Exchange exchange, final Object graph, final OutputStream stream) throws Exception {
        BufferedWriter writer = IOHelper.buffered(new OutputStreamWriter(stream{color:red}, IOHelper.getCharsetName(exchange){color}));
        gson.toJson(graph, writer);
        writer.close();
    }

    @Override
    public Object unmarshal(final Exchange exchange, final InputStream stream) throws Exception {
        BufferedReader reader = IOHelper.buffered(new InputStreamReader(stream{color:red}, IOHelper.getCharsetName(exchange){color}));
        Object result = gson.fromJson(reader, this.unmarshalType);
        reader.close();
        return result;
    }",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-10-21 04:39:32.294,,,no_permission,,Unknown,,,,,,,,,,,354121,,,Mon Oct 21 04:39:32 UTC 2013,,,,,,,0|i1p1w7:,354413,,,,,,,,,"21/Oct/13 04:39;njiang;Applied the patch into master, camel-2.12.x and camel-2.11.x with thanks to  Fergus.",,,,,,,,,,,,,,,,,,,,,,,
camel-hdfs - HdfsProducer filename collisions when Producer instance recreated,CAMEL-6867,12674173,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,boday,boday,boday,16/Oct/13 18:38,21/Oct/13 03:47,13/Mar/19 22:19,21/Oct/13 03:47,,,,,,,,,,2.11.3,2.12.2,2.13.0,,camel-hdfs,,,,,,0,,,,,,,,,"The HdfsProducer uses an instance variable (long splitNum) that is incremented to create unique output filenames in a given directory (seg0, seg1, etc).  

If the Producer instance is recreated (producer cache limit exceeded, server restart, etc), the splitNum variable is reset to 0.  This results in files being overwritten when using overwrite=true mode or throwing ""The file already exists"" errors when using overwrite=false mode.

We should switch to using a timestamp or some other unique generator to prevent filename collisions regardless of the Producer instance lifecycle for the same hdfs directory URL...

",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-10-17 06:16:19.696,,,no_permission,,Unknown,,,,,,,,,,,353795,,,Mon Oct 21 03:33:33 UTC 2013,,,,,,,0|i1ozwf:,354087,,,,,,,,,16/Oct/13 22:37;boday;any objection to using System.nanoTime() for the file name unique Id instead of the the long splitNum++?,17/Oct/13 06:16;davsclaus;Maybe use messageId from Message which is what the Camel File/FTP components does if no explicit file name has been given?,"17/Oct/13 21:15;boday;the issue with using the messageId is that the connectOnStartup mode creates the initial file stream on startup (no messageId to use in this case).  how about if we use the UUID generator from the CamelContext like this: getEndpoint().getCamelContext().getUuidGenerator().generateUuid()?

also, any reason to continue to prepend the DEFAULT_SEGMENT_PREFIX with this new approach...the prefix ""seg"" seems pretty arbitrary and should probably be configurable if we need to keep it...
","18/Oct/13 09:19;davsclaus;Yeah good point of using the uuid generator from Camel.

And yeah fell free to change that prefix or make it configurable etc, as you think its the best.","18/Oct/13 22:58;boday;per discussion, changed the split filename logic to use the UUID generator and removed the ""seg"" prefix from the filenames

thanks to Sergey Kozlovich ([~skozlovich]) for helping find/fix/test this issue
","18/Oct/13 23:24;boday;anyone see an issue with backporting this fix to the 2.10.x, 2.11.x, 2.12.x branches?","19/Oct/13 07:10;davsclaus;2.10 is no longer supported, so 2.11 onwards is fine.","21/Oct/13 03:33;boday;merging fixes into 2.11.x, 2.12.x branches",,,,,,,,,,,,,,,,
"camel-jpa - Avoid sharing the same EntityManager object across JpaEndpoint, it's Producers & Consumers as per se EntityManagers are not thread-safe.",CAMEL-6874,12674593,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,bvahdat,bvahdat,bvahdat,18/Oct/13 21:37,19/Oct/13 00:15,13/Mar/19 22:19,19/Oct/13 00:15,2.12.0,,,,,,,,,2.12.2,2.13.0,,,camel-jpa,,,,,,0,,,,,,,,,"See http://camel.465427.n5.nabble.com/Build-failures-td5741273.html

The JPA 2.0 Spec, section 7.2:
{quote}
An entity manager must not be shared among multiple concurrently executing threads, as the entity manager and persistence context are not required to be threadsafe. Entity managers must only be accessed in a single-threaded manner.
{quote}

The test {{org.apache.camel.processor.jpa.JpaProducerConcurrentTest}} is relevant in this context.
",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,354215,,,2013-10-18 21:37:59.0,,,,,,,0|i1p2fz:,354506,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-script - Memory leak if creating a lit of expressions and predicates,CAMEL-6870,12674291,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,17/Oct/13 10:12,17/Oct/13 10:39,13/Mar/19 22:19,17/Oct/13 10:39,2.11.2,2.12.1,,,,,,,,2.11.3,2.12.2,2.13.0,,camel-script,,,,,,0,,,,,,,,,"See
http://camel.465427.n5.nabble.com/Camel-Javascript-Leak-tp5741468.html",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,353913,,,Thu Oct 17 10:15:43 UTC 2013,,,,,,,0|i1p0lz:,354205,,,,,,,,,17/Oct/13 10:15;davsclaus;The problem is CAMEL-6559,,,,,,,,,,,,,,,,,,,,,,,
camel-netty-http route cannot proxy the response which is chunked,CAMEL-6861,12673653,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,14/Oct/13 07:49,15/Oct/13 08:04,13/Mar/19 22:19,15/Oct/13 08:04,2.12.0,2.12.1,,,,,,,,2.12.2,2.13.0,,,camel-netty-http,,,,,,0,,,,,,,,,"If I use camel-netty-http to build a http proxy, the proxy just send a empty response back if the back end server is using chunk encoding.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-10-14 13:29:49.211,,,no_permission,,Unknown,,,,,,,,,,,353276,,,Tue Oct 15 08:04:14 UTC 2013,,,,,,,0|i1owpr:,353569,,,,,,,,,14/Oct/13 10:40;njiang;Applied the patch into master and Camel-2.12.x branches.,"14/Oct/13 13:29;davsclaus;I think it broke the unit tests in camel-itest

Tests run: 2, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 1.535 sec <<< FAILURE! - in org.apache.camel.itest.nettyhttp.NettyHttpClientChunkedResponseTest
testNettyHttpRouteClientChunked(org.apache.camel.itest.nettyhttp.NettyHttpClientChunkedResponseTest)  Time elapsed: 1.147 sec  <<< FAILURE!
org.junit.ComparisonFailure: expected:<[Bye Camel in chunks.]> but was:<[]>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at org.junit.Assert.assertEquals(Assert.java:144)
	at org.apache.camel.itest.nettyhttp.NettyHttpClientChunkedResponseTest.invokeService(NettyHttpClientChunkedResponseTest.java:51)
	at org.apache.camel.itest.nettyhttp.NettyHttpClientChunkedResponseTest.testNettyHttpRouteClientChunked(NettyHttpClientChunkedResponseTest.java:38)","15/Oct/13 02:01;njiang;Hi Claus,

I ran the test in my box without any issue, and I found the test were passed in the CI[1].
Could you double check it ?
[1]https://builds.apache.org/job/Camel.trunk.fulltest/org.apache.camel$camel-itest/1573/testReport/org.apache.camel.itest.nettyhttp/NettyHttpClientChunkedResponseTest/",15/Oct/13 08:04;davsclaus;Yeah re-ran a couple of test runs today and it passed.,,,,,,,,,,,,,,,,,,,,
STOMP endpoint not configurable via URI options,CAMEL-6823,12672308,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,pinback,pinback,04/Oct/13 10:04,12/Oct/13 10:48,13/Mar/19 22:19,12/Oct/13 10:48,2.12.1,,,,,,,,,2.12.2,2.13.0,,,camel-stomp,,,,,,0,,,,,,,,,"In contrast to the documentation on the STOMP components wiki page, the endpoint can not be configured via URI options. The endpoint implementation is missing the corresponding attributes.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-10-12 10:48:13.458,,,no_permission,,Unknown,,,,,,,,,,,351934,,,Sat Oct 12 10:48:13 UTC 2013,,,,,,,0|i1oofr:,352222,,,,,,,,,12/Oct/13 10:48;davsclaus;Thanks for reporting.,,,,,,,,,,,,,,,,,,,,,,,
JettyContentExchange hides the original error,CAMEL-6828,12672348,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,matihost,matihost,04/Oct/13 14:49,12/Oct/13 10:29,13/Mar/19 22:19,12/Oct/13 10:29,2.12.1,,,,,,,,,2.11.3,2.12.2,2.13.0,,camel-jetty,,,,,,0,,,,,,,,,"JettyContentExchange:202 hides the original exchange exception.
The original exchange error should be passed as a cause.",,3600,3600,,0%,3600,3600,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-10-12 10:29:54.408,,,no_permission,,Novice,,,,,,,,,,,351973,,,Sat Oct 12 10:29:54 UTC 2013,,,,,,,0|i1ooo7:,352261,,,,,,,,,12/Oct/13 10:29;davsclaus;Thanks for reporting and point to the bug in the source code.,,,,,,,,,,,,,,,,,,,,,,,
camel-qaurtz - Memory leak - when an exception is thrown during the scheduling phase,CAMEL-6832,12672568,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,nurali.techie@yahoo.com,nurali.techie@yahoo.com,07/Oct/13 02:58,12/Oct/13 10:19,13/Mar/19 22:19,12/Oct/13 10:18,2.10.4,2.11.0,2.11.2,,,,,,,2.11.3,2.12.2,2.13.0,,camel-quartz,,,,,,0,quartz,scheduler,,,,,,,"Hello,

I have observed a memory leak for Quartz worker thread in case an exception is thrown during
the scheduling phase when schedule is set to past time.
I have observed this issue with camel-quart 2.10.4, 2.11.0, 2.11.2 versions.

For ex, assuming today is 4-Oct; If a schedule is provided for yesterday (i.e 3-Oct) then
below sequence happen:

1. Quartz create worker thread for new schedule [generally TEN Threads with name 'DefaultQuartzScheduler']
2. Camel-quartz increment jobCounter for scheduler context [using QuartzComponent.incrementJobCounter()]
3. Camel-quartz tries to create new schedule [using Scheduler.scheduleJob()]
4. scheduleJob() throws SchedulerException with the message - 'Based on configured schedule,
the given trigger will never fire'
5. Camel-quartz does NOT decrement the job counter and jobCounter value remains '1'
6. Later Camel-Quartz stops the route and call QuartzComponent.doStop()
7. In doStop(), Scheduler.shutdown() supposed to be called so that those TEN threads are
removed but to call shutdown() the pre-condition is that the jobCounter should be '0'.  In
this case jobCounter is '1' and Scheduler.shutdown() will NOT be called and those TEN threads
are NOT removed.  This is memory leak.

Please find the stack trace in attachment 'memory_leak_scheduler_stack_trace.log' [with Camel-Quartz 2.11.2 and org.apache.servicemix.bundles.quartz-1.8.6_1
which wrapped Quartz Scheduler as OSGi bundle] when SchedulerException is thrown at step
4 in above sequence.

Thanks,
Nurali",OS - Windows 7 and Unix.  Server – OSGi equinox,,,,,,,,,,,,,,,,,,,,07/Oct/13 03:01;nurali.techie@yahoo.com;memory_leak_scheduler_stack_trace.log;https://issues.apache.org/jira/secure/attachment/12607122/memory_leak_scheduler_stack_trace.log,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-10-12 10:18:59.088,,,no_permission,,Unknown,,,,,,,,,,,352191,,,Sat Oct 12 10:18:59 UTC 2013,,,,,,,0|i1oq07:,352479,,,,,,,,,12/Oct/13 10:18;davsclaus;Thanks for reporting and providing the stacktrace.,,,,,,,,,,,,,,,,,,,,,,,
UnsafeUriCharactersEncoder is missing hex digits,CAMEL-6853,12673261,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,thomas_konst,thomas_konst,10/Oct/13 17:11,11/Oct/13 11:45,13/Mar/19 22:19,11/Oct/13 11:45,2.12.1,,,,,,,,,2.11.3,2.12.2,2.13.0,,camel-core,,,,,,0,,,,,,,,,"The class org.apache.camel.util.UnsafeUriCharactersEncoder in camel-core has a char[] HEX_DIGITS which includes hex digits that can be used in encoded urls following the % sign. However the char[] only contains the uppercase hexadecimal digits 'A' through 'F' which (following RFC 3986, chapter 2.1) are equivalent to the lowercase digits 'a' through 'f' in percent-encoding used in URIs. 

So the char[] should also contain the lowercase digits 'a' through 'f', because otherwise the class does not work correctly in cases where URLs with already encoded characters having lowercase hex digits are encoded (e.g. URL with %3c). For these URLs the % sign is encoded once again (making it %253c in the example).

The provided patch adds the lowercase hex digits to the HEX_DIGITS char[].

Regards,
Thomas",,,,,,,,,,,,,,,,,,,,,10/Oct/13 17:36;thomas_konst;UnsafeUriCharactersEncoder.patch;https://issues.apache.org/jira/secure/attachment/12607846/UnsafeUriCharactersEncoder.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-10-11 11:45:41.697,,,no_permission,,Novice,,,,,,,,,,,352884,,,Fri Oct 11 11:45:41 UTC 2013,,,Patch Available,,,,0|i1ou9j:,353171,,,,,,,,,11/Oct/13 11:45;davsclaus;Thanks for reporting and the patch.,,,,,,,,,,,,,,,,,,,,,,,
"Hazelcast Map Support Uses Wrong Verb ""Envict""",CAMEL-6843,12672954,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jwcarman,jwcarman,jwcarman,09/Oct/13 04:29,10/Oct/13 13:42,13/Mar/19 22:19,10/Oct/13 13:42,,,,,,,,,,,,,,camel-hazelcast,,,,,,0,,,,,,,,,"The event type is ""evicted"" not ""envicted.""  Our code has a constant called HazelcastConstants.ENVICTED which has the value ""envicted.""  We need to fix this, but it will cause a compatibility break.  We could introduce the correct values and support both, with the incorrect ones being deprecated.  Would that work?",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-10-10 11:47:18.759,,,no_permission,,Unknown,,,,,,,,,,,352577,,,Thu Oct 10 13:42:00 UTC 2013,,,,,,,0|i1osdr:,352864,,,,,,,,,"10/Oct/13 11:47;muellerc;I propose to @deprecate the existing one and update it to use the correct spelling. And of course add a new one with the correct spelling.

{noformat}
@deprecate
HazelcastConstants.ENVICTED = ""evicted""
HazelcastConstants.EVICTED = ""evicted""
{noformat}

And add a remark to the section ""Changes that may affect end users"" in [the release notes|http://camel.apache.org/camel-2130-release.html]",10/Oct/13 13:42;jwcarman;Now using new constant EVICTED.,,,,,,,,,,,,,,,,,,,,,,
rabbitmq component sends basic ack after channel closed when endpoint is set to autoAck,CAMEL-6767,12669314,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,danrevel@yahoo.com,danrevel@yahoo.com,18/Sep/13 19:21,10/Oct/13 13:29,13/Mar/19 22:19,10/Oct/13 13:29,2.12.0,,,,,,,,,2.12.2,2.13.0,,,camel-rabbitmq,,,,,,0,,,,,,,,,"Consuming from a rabbitmq endpoint uri that is configured to autoAck generates errors and fails.

Example URI: rabbitmq://localhost:5672/test?autoAck=true&queue=test&autoDelete=false&username=guest&password=guest

Here's the relevant log output:

12:19:03.746  -  osis-ht TRACE o.a.c.c.rabbitmq.RabbitMQConsumer - Acknowleding receipt [delivery_tag=10]
12:19:03.747  -  osis-ht WARN  o.a.c.c.rabbitmq.RabbitMQConsumer - Error processing exchange. Exchange[Message: WTF-9-1379531943713]. Caused by: [com.rabbitmq.client.AlreadyClosedException - clean connection shutdown; reason: Attempt to use closed channel]
com.rabbitmq.client.AlreadyClosedException: clean connection shutdown; reason: Attempt to use closed channel
	at com.rabbitmq.client.impl.AMQChannel.ensureIsOpen(AMQChannel.java:190) ~[amqp-client-3.1.3.jar:na]
	at com.rabbitmq.client.impl.AMQChannel.transmit(AMQChannel.java:291) ~[amqp-client-3.1.3.jar:na]
	at com.rabbitmq.client.impl.AMQChannel.transmit(AMQChannel.java:285) ~[amqp-client-3.1.3.jar:na]
	at com.rabbitmq.client.impl.ChannelN.basicAck(ChannelN.java:907) ~[amqp-client-3.1.3.jar:na]
	at org.apache.camel.component.rabbitmq.RabbitMQConsumer$RabbitConsumer.handleDelivery(RabbitMQConsumer.java:126) ~[camel-rabbitmq-2.12.0.jar:2.12.0]
	at com.rabbitmq.client.impl.ConsumerDispatcher$4.run(ConsumerDispatcher.java:121) [amqp-client-3.1.3.jar:na]
	at com.rabbitmq.client.impl.ConsumerWorkService$WorkPoolRunnable.run(ConsumerWorkService.java:76) [amqp-client-3.1.3.jar:na]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) [na:1.7.0_21]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) [na:1.7.0_21]
	at java.lang.Thread.run(Thread.java:722) [na:1.7.0_21]
","Tested on OSX, JDK 1.7",,,,,,,,,,,,,,,,,,,,18/Sep/13 19:22;danrevel@yahoo.com;autoack.patch;https://issues.apache.org/jira/secure/attachment/12603896/autoack.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-10-01 09:47:50.106,,,no_permission,,Unknown,,,,,,,,,,,349246,,,Thu Oct 10 13:29:22 UTC 2013,,,Patch Available,,,,0|i1o7xj:,349544,,,,,,,,,18/Sep/13 19:22;danrevel@yahoo.com;Consumer should not send basicAck on channels that are doing autoAck.,01/Oct/13 09:47;davsclaus;Thanks for the patch.,"10/Oct/13 10:56;FergusN;Note that the patch is broken. The logic is wrong. From the comment above from Dan - ""Consumer should not send basicAck on channels that are doing autoAck."" the logic below is missing the not. Needs a ! added to the if.

+                if (consumer.endpoint.isAutoAck()) {
+                    log.trace(""Acknowledging receipt [delivery_tag={}]"", deliveryTag);
+                    channel.basicAck(deliveryTag, false);
+                }
 ",10/Oct/13 12:39;davsclaus;Yeah it seems to make sense to only ack if auto ack is disabled.,10/Oct/13 12:59;FergusN;Pull request - https://github.com/apache/camel/pull/48,10/Oct/13 13:29;davsclaus;Thanks,,,,,,,,,,,,,,,,,,
Atomic Number Producer Uses Wrong Name,CAMEL-6833,12672732,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jwcarman,jwcarman,jwcarman,08/Oct/13 01:21,10/Oct/13 13:20,13/Mar/19 22:19,08/Oct/13 17:43,,,,,,,,,,2.13.0,,,,camel-hazelcast,,,,,,0,,,,,,,,,"When redesigning the tests to use mock objects, I noticed that the atomic number producer actually uses the incorrect atomic number name.  If you try to update an atomic number named ""foo"", it actually updates one named ""ue:foo"".  This is because it uses the wrong constant (the one for instances) when it picks apart the URI. ",,900,900,,0%,900,900,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,352355,,,2013-10-08 01:21:08.0,,,,,,,0|i1or0n:,352643,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
cCXF route proxy cannot return Fault message to client when Dataformat is CXF_MESSAGE,CAMEL-6404,12649847,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,mfshen,mfshen,29/May/13 05:55,10/Oct/13 13:19,13/Mar/19 22:19,31/May/13 15:18,,,,,,,,,,2.10.5,2.11.1,2.12.0,,camel-cxf,,,,,,0,,,,,,,,,"use CXF component with CXF_MESSAGE dataFormat to call any service, and the response of this service is a fault, then you can see this exception.
{noformat} 
Exception in thread ""default-workqueue-1"" java.lang.NullPointerException
	at org.apache.camel.component.cxf.DefaultCxfBinding.getContentFromCxf(DefaultCxfBinding.java:642)
	at org.apache.camel.component.cxf.DefaultCxfBinding.populateExchangeFromCxfResponse(DefaultCxfBinding.java:151)
	at org.apache.camel.component.cxf.CxfClientCallback.handleException(CxfClientCallback.java:81)
	at org.apache.cxf.interceptor.ClientOutFaultObserver.onMessage(ClientOutFaultObserver.java:59)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream$1.run(HTTPConduit.java:1132)
	at org.apache.cxf.workqueue.AutomaticWorkQueueImpl$3.run(AutomaticWorkQueueImpl.java:428)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at org.apache.cxf.workqueue.AutomaticWorkQueueImpl$AWQThreadFactory$1.run(AutomaticWorkQueueImpl.java:353)
	at java.lang.Thread.run(Thread.java:662)
{noformat} ",,,,,,,,,,,,,,,,,,,,,31/May/13 06:07;gangliu;CXFFaultExample.zip;https://issues.apache.org/jira/secure/attachment/12585557/CXFFaultExample.zip,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-05-31 06:07:56.597,,,no_permission,,Unknown,,,,,,,,,,,330174,,,Tue Jun 04 08:39:18 UTC 2013,,,,,,,0|i1kyo7:,330508,,,,,,,,,31/May/13 06:07;gangliu;Attached an example,31/May/13 06:39;davsclaus;What version of Camel and CXF are you using?,"31/May/13 06:57;gangliu;I'm using Camel-2.10.4, CXF-2.7.5, see the attached example","31/May/13 14:21;njiang;I just checked the code, the NPE is caused by the DefaultCxfBinding try to find the processed object from CXF message. As the CXF_MESSAGE consume the input stream and throw out the exception, the DefaultCxfBing get the NPE. 
This issue can be fixed by letting DefaultCxfBinding ignore the CXF message content when there is nothing. camel-cxf will take care of the fault message (which is turned into an exception) then.","31/May/13 15:18;njiang;Applied the patch into master, camel-2.11.x and camel-2.10.x branches.","31/May/13 15:36;gangliu;But by this way, the answer returns null, right? then user can give the expect fault response message?
thanks

Now, I resolved this problem by extracting *W3CDOMStreamWriter.class* content, and then wrap it into a *List* object.","31/May/13 15:42;njiang;The exception will be marshalled and sent to client, you don't need to wrap the W3CDOMStreamWriter.class.","02/Jun/13 12:43;gangliu;Hi Willem: 
But this only happens after the fix, right? for now, I always get the NullPointerException, So I have to find a workaround to make it works.

And BTW, when I want to call a WebService by creating request from scratch, for example, timer -> setBody -> CXF (*with RAW dataFormat*), I found if the body type isn't *javax.xml.tranform.Source.class*, then the body will always be empty, no matter what I've set in setBody component. I think the convert should be done inside Camel instead of client. Could you also have a check? 

Thanks alot.","03/Jun/13 02:44;njiang;I think you are talking about other issue, we'd better start a new thread for it.
When you using the RAW dataFormat, you need to cache the input stream before you read it.
If you don't cache it, you cannot read the input stream again if you already consumed it.","03/Jun/13 03:40;gangliu;OK, thanks. ","03/Jun/13 10:02;ay;Hi Willem,
I am not sure about this handling and wanted to ask you or Dan about it.

Instead of trying to get the List object and return its content, could we use SOAPMessage directly in this case?
That means,

+import javax.xml.soap.SOAPMessage;
...
-                answer = message.getContent(List.class).get(0);
+                answer = message.getContent(SOAPMessage.class);


regards, aki","03/Jun/13 14:54;njiang;Hi Aki,

I just did a quick test on your suggestion, it look like the below code is much like each other
{code}
answer = message.getContent(List.class).get(0);
answer = message.getContent(SOAPMessage.class);
{code}
But if the camel-cxf producer get an exception (fault message), we still cannot get the SOAPMessage from the cxf message.

Regards,

Willem","04/Jun/13 01:20;gangliu;Now, I'm using message.getContent(W3CDOMStreamWriter.class) for workaround in fault case","04/Jun/13 01:46;njiang;Hi liugang,

Can you verify my fix by running the test case with the latest Camel 2.12-SNAPSHOT?
I did the test last weekend, it works :)

Willem","04/Jun/13 05:50;gangliu;sure, The Maven Repository is https://repository.apache.org/content/repositories/snapshots , right?","04/Jun/13 07:15;njiang;yes, it is.","04/Jun/13 08:39;gangliu;OK, I just gave a try on 2.12.SNAPSHOT version. the same route which doen't work on 2.10.4, works fine on this snapshot version.",,,,,,,
Using recipient list to a route that has no error handler should allow caller route to trigger its error handler,CAMEL-6845,12673018,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,09/Oct/13 13:47,10/Oct/13 08:28,13/Mar/19 22:19,10/Oct/13 08:28,,,,,,,,,,2.11.3,2.12.2,2.13.0,,camel-core,,,,,,0,,,,,,,,,"This route
{code}
                errorHandler(deadLetterChannel(""mock:dead""));

                from(""direct:start"")
                    .recipientList().constant(""direct:foo"")
                    .to(""mock:result"");

                from(""direct:foo"")
                    .errorHandler(noErrorHandler())
                    .to(""mock:foo"")
                    .process(new Processor() {
                        @Override
                        public void process(Exchange exchange) throws Exception {
                            throw new IllegalArgumentException(""Forced"");
                        }
                    });
{code}

So in the 2nd route we disabled error handling by using the no error handler. Instead we would like the error handler from the caller route (the 1st) which will fallback and use the context scoped dead letter channel to handle the exception.

",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,352641,,,2013-10-09 13:47:42.0,,,,,,,0|i1osrz:,352928,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Facebook endpoint incorrectly sets the nameStyle field to GET_AND_SEARCH even when no search* candidate methods are found,CAMEL-6839,12672848,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,dhirajsb,dhirajsb,08/Oct/13 17:06,10/Oct/13 08:20,13/Mar/19 22:19,10/Oct/13 08:20,2.12.1,,,,,,,,,2.12.2,2.13.0,,,camel-facebook,,,,,,0,,,,,,,,,Class FacebookEndpoint needs to look at the candidate method list size to determine whether it found get* only or get* and search* candidate methods. ,,,,,,,,,,,,,,,,,,,,,08/Oct/13 17:08;dhirajsb;patchCAMEL-6839.txt;https://issues.apache.org/jira/secure/attachment/12607383/patchCAMEL-6839.txt,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-10-10 08:20:32.194,,,no_permission,,Unknown,,,,,,,,,,,352471,,,Thu Oct 10 08:20:32 UTC 2013,,,Patch Available,,,,0|i1orq7:,352758,,,,,,,,,08/Oct/13 17:08;dhirajsb;Patch attached for CAMEL-6839,10/Oct/13 08:20;njiang;Applied the patch into master and camel-2.12.x with thanks to Dhiraj.,,,,,,,,,,,,,,,,,,,,,,
Resuming a bundle that uses blueprint+camel fails if it was suspended externally,CAMEL-6790,12670840,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,eugene.tarasov,eugene.tarasov,26/Sep/13 21:51,07/Oct/13 10:45,13/Mar/19 22:19,07/Oct/13 10:45,2.12.1,,,,,,,,,2.11.3,2.12.2,2.13.0,,camel-blueprint,,,,,,0,,,,,,,,,"There is a problem in this scenario:

# Karaf is running.
# Start some bundle that uses blueprint+camel. For convenience will call it <testbundle>.
# Cause this bundle to be suspended by container, by refreshing a bundle that provides some namespace used by <testbundle> bundle. For example, by refreshing camel-cxf (assuming that <testbundle> uses also blueprint/cxf namespace). In logs one can see something like this:
bq. Bundle <testbundle> is waiting for namespace handlers [http://camel.apache.org/schema/blueprint/cxf]

In this case after the missing namespace becomes available again the bundle will fail to resume with exception like:
bq. Caused by: org.xml.sax.SAXParseException: cvc-complex-type.2.4.c: The matching wildcard is strict, but no declaration can be found for element 'camelContext'.

The problem is in CamelNamespaceHandler class which is a part of camel-blueprint. When it parses incoming dom it changes namespace of all elements from http://camel.apache.org/schema/blueprint to http://camel.apache.org/schema/spring. So when a bundle that uses blueprint+camel needs to validate its blueprint context again (like if it was waiting for some namespace) the new validation will fail.
",,,,,,,,,,,,,,,,,,,,,06/Oct/13 21:37;eugene.tarasov;CamelContextIdSetting.patch;https://issues.apache.org/jira/secure/attachment/12607108/CamelContextIdSetting.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-09-28 12:59:40.231,,,no_permission,,Unknown,,,,,,,,,,,350669,,,Mon Oct 07 10:45:43 UTC 2013,,,,,,,0|i1ogo7:,350962,,,,,,,,,28/Sep/13 12:59;davsclaus;Thanks for reporting.,"06/Oct/13 21:37;eugene.tarasov;Hi Claus. Thanks for fixing the problem! Trying the fix I found a further problem - when camelContext tag is being parsed, its id is being set to some unique value if it wasnt set by user. For setting the id CamelNamespaceHandler calls non-namespace-aware method ""setAttribute"". Its necessary to change it to setAttributeNS (I added a patch that does it). With this change the whole ""refresh"" problem becomes solved.",07/Oct/13 10:45;davsclaus;Thanks I did the same change in camel-spring as its also in use with spring-dm for OSGi,,,,,,,,,,,,,,,,,,,,,
Netty - SSLContext should be initialized once and reused - Also race condition in current code,CAMEL-6818,12671943,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,02/Oct/13 14:33,02/Oct/13 14:44,13/Mar/19 22:19,02/Oct/13 14:44,2.12.1,,,,,,,,,2.12.2,2.13.0,,,camel-netty,,,,,,0,,,,,,,,,"The SSLContext is created per pipeline which is not as efficient as creating it once.

Also there is a race condition in the current code that can lead to:
{code}
14:04:27,328 | WARN | ttyServerTCPBoss | netty | 246 - org.jboss.netty - 3.6.6.Final | [org.jboss.netty.channel.socket.nio.AbstractNioSelector] Failed to initialize an accepted socket.
java.lang.IllegalStateException: SSLContextImpl is not initialized
at sun.security.ssl.SSLContextImpl.engineCreateSSLEngine(SSLContextImpl.java:197)[:1.7.0_21]
at javax.net.ssl.SSLContext.createSSLEngine(SSLContext.java:330)
at org.apache.camel.component.netty.ssl.SSLEngineFactory.createServerSSLEngine(SSLEngineFactory.java:104)
at org.apache.camel.component.netty.http.HttpServerPipelineFactory.configureServerSSLOnDemand(HttpServerPipelineFactory.java:153)
at org.apache.camel.component.netty.http.HttpServerPipelineFactory.getPipeline(HttpServerPipelineFactory.java:77)
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,351569,,,2013-10-02 14:33:45.0,,,,,,,0|i1om73:,351858,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StaxConverter: encoding problems for XMLEventReader and XMLStreamReader,CAMEL-6779,12669998,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,forsthofer,forsthofer,23/Sep/13 08:15,01/Oct/13 09:39,13/Mar/19 22:19,01/Oct/13 09:39,2.11.1,2.12.1,,,,,,,,2.11.3,2.12.2,2.13.0,,camel-core,,,,,,0,,,,,,,,,"StaxConverter creates XMLEventReader and XMLStreamReader always with a specified encoding. However, the encoding of the data the readers should read is not always known. Therefore exceptions occur.

The solution is easy: The encoding should not be set so that the readers can determine the encoding.",,,,,,,,,,,,,,,,,,,,,23/Sep/13 09:17;forsthofer;0001-StaxConverter-encoding-problem.patch;https://issues.apache.org/jira/secure/attachment/12604545/0001-StaxConverter-encoding-problem.patch,23/Sep/13 08:16;forsthofer;0001-StaxConverter-encoding-problem.patch;https://issues.apache.org/jira/secure/attachment/12604536/0001-StaxConverter-encoding-problem.patch,,,,,2.0,,,,,,,,,,,,,,,,,,,2013-09-23 08:21:09.295,,,no_permission,,Unknown,,,,,,,,,,,349828,,,Tue Oct 01 09:39:01 UTC 2013,,,Patch Available,,,,0|i1obiv:,350126,,,,,,,,,"23/Sep/13 08:21;davsclaus;Thanks for the patch. Can you use \uNNNN for the german chars, as the source code should use ascii chars.",23/Sep/13 08:33;forsthofer;Yes I will do that.,"23/Sep/13 09:18;forsthofer;Hi Claus,

the latest version of the patch does now contain \u00E4\u00F6\u00FC.

Regards Franz",01/Oct/13 09:39;davsclaus;Thanks for the patch.,,,,,,,,,,,,,,,,,,,,
Using stopOnException in splitter should not copy result back as we should preserve original exchange,CAMEL-6802,12671342,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,30/Sep/13 10:38,30/Sep/13 11:33,13/Mar/19 22:19,30/Sep/13 11:09,2.11.2,2.12.1,,,,,,,,2.11.3,2.12.2,2.13.0,,camel-core,eip,,,,,0,,,,,,,,,"If you use stopOnException on splitter then when an exception occurs then changes to eg exchange.properties should not override the input exchange, as that would not be expected.

",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-09-30 11:33:19.447,,,no_permission,,Unknown,,,,,,,,,,,351048,,,Mon Sep 30 11:33:19 UTC 2013,,,,,,,0|i1oizz:,351340,,,,,,,,,"30/Sep/13 11:33;raulvk;Hey Claus,

For me, this is not a black or white situation. When an exception occurs with stopOnException, it understandable that the user may require the (partial) aggregation result as an output + the appropriate Exception set on the exchange.

That way, they get the best of both worlds: (1) knowing that an Exception happened (and triggering any error handlers as a consequence) and (2) the output of the aggregation so far.

Perhaps we could introduce an option 'exchangeOnException' taking the values 'original' and 'aggregated_partial'?

Regards,
Raúl.",,,,,,,,,,,,,,,,,,,,,,,
Bean language - Having dots in parameters cause bean id lookup problem,CAMEL-6800,12671313,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,30/Sep/13 07:49,30/Sep/13 08:46,13/Mar/19 22:19,30/Sep/13 08:46,2.11.0,2.12.0,,,,,,,,2.11.3,2.12.2,2.13.0,,camel-core,,,,,,0,,,,,,,,,"Related to CAMEL-6395

The following example would not work
{code}
                from(""direct:start"")
                    .setHeader(""goto"").simple(""${bean:myBean.whereToMate({{myApp}}, ${header.id})}"")
                    .to(""mock:result"");
{code}

Where as if we use ?method=whereToMate it would work.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,351019,,,2013-09-30 07:49:33.0,,,,,,,0|i1oitj:,351311,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ConcurrentModificationException thrown from inside camel splitter,CAMEL-6771,12669608,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,placebojim,placebojim,20/Sep/13 06:16,29/Sep/13 10:34,13/Mar/19 22:19,29/Sep/13 10:34,2.11.1,,,,,,,,,2.11.3,2.12.2,2.13.0,,camel-core,,,,,,0,,,,,,,,,"We use camel 2.11.1 running on the oracle 1.7 jvm for linux.

I have a route that looks like this. It reads in files and puts them on a seda queue with 8 concurrent consumers. 
- The SpatialInterpolationPojo reads each file is read and split into two messages X and Y. 
- The MyAggregator uses X and Y together and outputs a combined message A.B 
- The MySplitterPojo splits A.B into two messages A and B 

{code}
from(""file://somefile"") 
    .to(""seda:filteraccept?concurrentConsumers=8""); 

from(""seda:filteraccept?concurrentConsumers=8"") 
    .split() 
    .method(new SpatialInterpolationPojo(), ""split"") 
    .to(""direct:wind-aggregator""); 

from(""direct:wind-aggregator"") 
    .aggregate(packageCorrelationId(), new MyAggregator()) 
    .completionPredicate(header(FIELD_AGGREGATION_COMPLETE).isNotNull()) 
    .split() 
    .method(new MySplitterPojo()) 
    .to(""seda:output""); 
{code}

The MySplitterPojo simply returns List<Message> containing two messages that come from data in the input message body. We copy the body headers to the result messages. 

It is thread safe, it has no state, ie there are no object fields that are modified. 

The method is like this it is edited for clarity/privacy: 
{code}
public class MySplitterPojo {

 public List<Message> splitMessage( 
            @Headers Map<String, Object> headers, 
            @Body CombinedObject body) { 
    
    DefaultMessage a = new DefaultMessage(); 
    a.setBody(body.getA()); 
    a.setHeaders(new HashMap<String, Object>(headers)); 
            
    DefaultMessage b = new DefaultMessage(); 
    b.setBody(body.getB()); 
    b.setHeaders(new HashMap<String, Object>(headers)); 
  
    ArrayList<Message> result = new ArrayList<Message>(2); 
    result.add(a); 
    result.add(b); 
    
    return result; 
 } 
}
{code}
When we run this route we very occasionally get the exception below. You can see that it is entirely within camel, it appears to be trying to copy the map stored under the exchange property Exchange.AGGREGATION_STRATEGY which is a camel internal property key. 

By inspection of the message I can see that Exchange has just come out of the WindVectorAggregator. 

This seems like it must be a camel bug to me. Any ideas? 

{code}
15 Sep 2013 23:06:47,140[Camel (camel-1) thread #21 - seda://filteraccept] WARN AggregateProcessor Error processing aggregated exchange. Exchange[Message: { Trondheim, NO=WindVector [u=-5.92894983291626, v=7.060009002685547], ... }]. Caused by: [java.util.ConcurrentModificationException - null] 
java.util.ConcurrentModificationException 
        at java.util.HashMap$HashIterator.nextEntry(Unknown Source) 
        at java.util.HashMap$EntryIterator.next(Unknown Source) 
        at java.util.HashMap$EntryIterator.next(Unknown Source) 
        at java.util.HashMap.putAllForCreate(Unknown Source) 
        at java.util.HashMap.<init>(Unknown Source) 
        at org.apache.camel.processor.MulticastProcessor.setAggregationStrategyOnExchange(MulticastProcessor.java:1011) 
        at org.apache.camel.processor.Splitter.process(Splitter.java:95) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.processor.interceptor.BacklogTracerInterceptor.process(BacklogTracerInterceptor.java:84) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:391) 
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:273) 
        at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:335) 
        at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150) 
        at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:99) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:86) 
        at org.apache.camel.processor.aggregate.AggregateProcessor$1.run(AggregateProcessor.java:495) 
        at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source) 
        at java.util.concurrent.FutureTask$Sync.innerRun(Unknown Source) 
        at java.util.concurrent.FutureTask.run(Unknown Source) 
        at org.apache.camel.util.concurrent.SynchronousExecutorService.execute(SynchronousExecutorService.java:62) 
        at java.util.concurrent.AbstractExecutorService.submit(Unknown Source) 
        at org.apache.camel.processor.aggregate.AggregateProcessor.onSubmitCompletion(AggregateProcessor.java:487) 
        at org.apache.camel.processor.aggregate.AggregateProcessor.onCompletion(AggregateProcessor.java:471) 
        at org.apache.camel.processor.aggregate.AggregateProcessor.doAggregation(AggregateProcessor.java:325) 
        at org.apache.camel.processor.aggregate.AggregateProcessor.process(AggregateProcessor.java:229) 
        at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.processor.interceptor.BacklogTracerInterceptor.process(BacklogTracerInterceptor.java:84) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:391) 
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:273) 
        at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:335) 
        at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:122) 
        at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:60) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:391) 
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:273) 
        at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150) 
        at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:571) 
        at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:504) 
        at org.apache.camel.processor.MulticastProcessor.process(MulticastProcessor.java:213) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.RecipientList.sendToRecipientList(RecipientList.java:151) 
        at org.apache.camel.component.bean.MethodInfo$1.doProceed(MethodInfo.java:285) 
        at org.apache.camel.component.bean.MethodInfo$1.proceed(MethodInfo.java:251) 
        at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:161) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.processor.interceptor.BacklogTracerInterceptor.process(BacklogTracerInterceptor.java:84) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:391) 
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:273) 
        at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:335) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:117) 
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:80) 
        at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:122) 
        at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:60) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:122) 
        at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:298) 
        at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:117) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.processor.interceptor.BacklogTracerInterceptor.process(BacklogTracerInterceptor.java:84) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:391) 
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:273) 
        at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:335) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:391) 
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:273) 
        at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150) 
        at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:571) 
        at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:504) 
        at org.apache.camel.processor.MulticastProcessor.process(MulticastProcessor.java:213) 
        at org.apache.camel.processor.Splitter.process(Splitter.java:98) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.processor.interceptor.BacklogTracerInterceptor.process(BacklogTracerInterceptor.java:84) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:391) 
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:273) 
        at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:335) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:117) 
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:80) 
        at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150) 
        at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117) 
        at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:294) 
        at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:203) 
        at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:150) 
        at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source) 
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source) 
        at java.lang.Thread.run(Unknown Source)
{code}","Amazon Linux, oracle jdk 1.7",,,,,,,,,,,,,,,,,,,,28/Sep/13 16:25;jwcarman;CAMEL-6771.patch;https://issues.apache.org/jira/secure/attachment/12605662/CAMEL-6771.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-09-23 17:35:45.594,,,no_permission,,Unknown,,,,,,,,,,,349540,,,Sun Sep 29 10:34:01 UTC 2013,,,,,,,0|i1o9qv:,349838,,,,,,,,,"23/Sep/13 17:35;ceposta;It would be best to recreate this. Can you post an isolated test case that reproduces this?

Or you can take a look at the test I hacked together here and get it to fail w/  your use case:

https://github.com/christian-posta/camel-sandbox/blob/master/camel-2.11.1-issues/src/test/java/posta/Camel6771Test.java

",23/Sep/13 18:05;ceposta;btw... also give a try w/ java 1.6.. curious if that plays a role,23/Sep/13 20:14;ceposta;CAMEL-5704 also demonstrates nested split issues.,"28/Sep/13 16:25;jwcarman;This should fix the problem.  I was having trouble creating a unit test that reliably reproduces the issue, so I didn't include it in this patch.  Basically, instead of using a HashMap, I'm using a ConcurrentHashMap to store the MulticastProcessor -> AggreationStrategy map.",29/Sep/13 10:34;davsclaus;Thanks for the patch.,,,,,,,,,,,,,,,,,,,
IntrospectionSupport.setProperty ClassCastException if you have overloaded methods,CAMEL-6781,12670256,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,forsthofer,forsthofer,24/Sep/13 11:51,29/Sep/13 08:16,13/Mar/19 22:19,29/Sep/13 08:16,2.11.1,2.12.0,,,,,,,,2.11.3,2.12.2,2.13.0,,camel-core,,,,,,0,,,,,,,,,"If you use DefaultComponent.setProperties(config, parameters) with a config object having overloaded methods you can get the following Exception:

org.apache.camel.NoSuchBeanException: Found bean: myExpression in JNDI Context: javax.naming.InitialContext@7f597bc4 of type: org.apache.camel.builder.ExpressionBuilder$31 expected type was: class java.lang.String
	at org.apache.camel.impl.JndiRegistry.lookupByNameAndType(JndiRegistry.java:60)
	at org.apache.camel.impl.PropertyPlaceholderDelegateRegistry.lookupByNameAndType(PropertyPlaceholderDelegateRegistry.java:63)
	at org.apache.camel.util.CamelContextHelper.lookup(CamelContextHelper.java:121)
	at org.apache.camel.util.IntrospectionSupport.setProperty(IntrospectionSupport.java:499)
	at org.apache.camel.util.EndpointHelper.setReferenceProperties(EndpointHelper.java:271)
	at org.apache.camel.impl.DefaultComponent.setProperties(DefaultComponent.java:263)
	at org.apache.camel.impl.DefaultComponentReferencePropertiesTest$MyComponent.createEndpoint(DefaultComponentReferencePropertiesTest.java:94)
	at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:120)
	at org.apache.camel.impl.DefaultComponentReferencePropertiesTest.testCallExpressionSetter(DefaultComponentReferencePropertiesTest.java:152)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at org.apache.camel.TestSupport.runBare(TestSupport.java:58)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)
Caused by: java.lang.ClassCastException: Cannot cast org.apache.camel.builder.ExpressionBuilder$31 to java.lang.String
	at java.lang.Class.cast(Class.java:3084)
	at org.apache.camel.impl.JndiRegistry.lookupByNameAndType(JndiRegistry.java:56)
	... 28 more

The exception does not occur always it dpends on the order of the methods with the same name. In IntrospectionSupport.setProperty you find
{code}
 setters = findSetterMethods(clazz, name, value, allowBuilderPattern);
...
  Class<?> parameterType = setter.getParameterTypes()[0];
            Object ref = value;
            // try and lookup the reference based on the method
            if (context != null && refName != null && ref == null) {
                ref = CamelContextHelper.lookup(context, refName.replaceAll(""#"", """"), parameterType);
{code}

If by chance the first setter method has a paramterType which fits to the referenced bean then you will not get the exception. But if the first setter method has a parameterType which does not fit to the referenced bean then you will get the exception.
",,,,,,,,,,,,,,,,,,,,,24/Sep/13 11:52;forsthofer;0001-ClassCastException-in-setProperties.patch;https://issues.apache.org/jira/secure/attachment/12604782/0001-ClassCastException-in-setProperties.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-09-29 08:16:07.154,,,no_permission,,Unknown,,,,,,,,,,,350085,,,Sun Sep 29 08:16:07 UTC 2013,,,Patch Available,,,,0|i1od33:,350379,,,,,,,,,29/Sep/13 08:16;davsclaus;Thanks for the patch. I polished it slightly.,,,,,,,,,,,,,,,,,,,,,,,
camel-xmlsecurity - Some options is not exposed as getter/setters,CAMEL-6796,12671083,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,28/Sep/13 11:00,29/Sep/13 07:39,13/Mar/19 22:19,28/Sep/13 11:46,2.12.0,,,,,,,,,2.12.2,2.13.0,,,,,,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/contentObjectId-in-XML-Security-camel-xmlsecurity-tp5740265p5740348.html

Some options has not been exposed as getter/setters so they can be fully configured.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-09-29 07:39:06.976,,,no_permission,,Unknown,,,,,,,,,,,350912,,,Sun Sep 29 07:39:06 UTC 2013,,,,,,,0|i1oi5r:,351203,,,,,,,,,"29/Sep/13 07:39;forsthofer;Hello,

I do not think that this is a bug. The objectId of the Element 'Object' is generated automatically for the enveloping XML Signature case. And there is a Reference element gnerated with an  URI whose value is ""#<generated object ID>"" The header 'CamelXmlSignatureContentReferenceUri' can be used to overwrite the reference URI in order to reference only a part of the message and not the total message (as the generated object ID does. 

Regards Franz  ",,,,,,,,,,,,,,,,,,,,,,,
Camel Email Component Missing Attachments ,CAMEL-6045,12631262,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,cgiera,cgiera,07/Feb/13 14:00,24/Sep/13 17:50,13/Mar/19 22:19,07/Feb/13 14:53,2.6.0,,,,,,,,,2.10.4,2.11.0,2.9.6,,camel-mail,,,,,,0,,,,,,,,,"see http://camel.465427.n5.nabble.com/Camel-Email-Component-Missing-Attachments-td3386382.html#a5727102

The disposition field is optional(see RFC 2183), so it is possible that camel misses attachments.
{noformat}
                if (disposition != null && (disposition.equalsIgnoreCase(Part.ATTACHMENT) || disposition.equalsIgnoreCase(Part.INLINE))) {
                    // only add named attachments
                    String fileName = part.getFileName();
                    if (fileName != null) {
                        LOG.debug(""Mail contains file attachment: "" + fileName);
                        // Parts marked with a disposition of Part.ATTACHMENT are clearly attachments
                        CollectionHelper.appendValue(map, fileName, part.getDataHandler());
                    }
                }
{noformat}

Adding the fileName check to the if should resolve the issue.
",,,,,,,,,,,,,,,,,,,,,07/Feb/13 14:31;cgiera;MailBinding.java.patch;https://issues.apache.org/jira/secure/attachment/12568417/MailBinding.java.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-02-07 14:53:33.492,,,no_permission,,Unknown,,,,,,,,,,,311758,,,Tue Sep 24 17:50:14 UTC 2013,,,Patch Available,,,,0|i1hsvb:,312104,,,,,,,,,"07/Feb/13 14:24;cgiera;Test with changed if worked on my side. I've just added the fileName check to the if:
{noformat}
				if ((disposition != null && (disposition
						.equalsIgnoreCase(Part.ATTACHMENT) || disposition
						.equalsIgnoreCase(Part.INLINE)))
						|| fileName != null) {
					LOG.debug(""Mail contains file attachment: "" + fileName);
					// Parts marked with a disposition of Part.ATTACHMENT
					// are clearly attachments
					CollectionHelper.appendValue(map, fileName,
							part.getDataHandler());

				}
{noformat}","07/Feb/13 14:29;cgiera;I still use camel 2.6 due to some customer restrictions(java 5), but I couldn't find a branch for 2.6 to provide a patch for this version. So i will add a patch for the trunk version.",07/Feb/13 14:31;cgiera;patch added,07/Feb/13 14:53;davsclaus;Thanks for the patch.,"20/Aug/13 13:02;vitamon;{code} if ((disposition != null && (disposition.equalsIgnoreCase(Part.ATTACHMENT) || disposition.equalsIgnoreCase(Part.INLINE)))
                        || fileName != null)
{code}
There is a problem with the filename check:
If filename==null, but everything else is ok, it will be added to the map. There should be ""&& filename != null"".
Please correct in future versions.  
 ","24/Sep/13 15:34;ceposta;Vitalii, 
Not sure the sub-task is valid. Can you review my comments on it?
Seems that since disposition is optional, it shouldn't make a difference if it's null or not and whether there is a fileName.","24/Sep/13 17:40;vitamon;The problem is not with disposition, but with fileName. I had a case when disposition was not null, but the fileName == null. (mail from Microsoft Exchange Server btw). The fileName should not be null in any case. Or the map entry (null -> part) will be added, which is not good and causes NPEs.","24/Sep/13 17:47;vitamon;Here's extract from my code:
{code}
Map<String, DataHandler> attachments = exchange.getIn().getAttachments();
if (attachments.size() > 0) {
     for (String name : attachments.keySet()) {
         if (StringUtils.isNotBlank(name)) { // <--- added this to avoid null attachment names
            DataHandler dh = attachments.get(name);
{code}","24/Sep/13 17:50;ceposta;Yes, that makes sense. Thanks for the clarification. I've attached a fix to CAMEL-6654",,,,,,,,,,,,,,,
org.jboss.weld.exceptions.DefinitionException: WELD-001106 BeanAttributes.getStereotypes() returned null for org.apache.camel.cdi.internal.CamelContextBean@19acc826,CAMEL-6753,12668700,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,shay_matasaro,shay_matasaro,15/Sep/13 19:10,24/Sep/13 09:59,13/Mar/19 22:19,24/Sep/13 09:59,2.11.0,2.12.0,,,,,,,,2.11.2,2.12.2,2.13.0,,camel-cdi,,,,,,0,,,,,,,,,"when using Camel-CDI with Weld SE 2.0 , the extension fails to load 

org.jboss.weld.exceptions.DefinitionException: WELD-001106 BeanAttributes.getStereotypes() returned null for org.apache.camel.cdi.internal.CamelContextBean@19acc826
	at org.jboss.weld.bean.attributes.ExternalBeanAttributesFactory.checkNull(ExternalBeanAttributesFactory.java:109)
	at org.jboss.weld.bean.attributes.ExternalBeanAttributesFactory.validateStereotypes(ExternalBeanAttributesFactory.java:76)
	at org.jboss.weld.bean.attributes.ExternalBeanAttributesFactory.validateBeanAttributes(ExternalBeanAttributesFactory.java:69)
	at org.jboss.weld.bootstrap.events.AfterBeanDiscoveryImpl.processBean(AfterBeanDiscoveryImpl.java:83)
	at org.jboss.weld.bootstrap.events.AfterBeanDiscoveryImpl.addBean(AfterBeanDiscoveryImpl.java:77)
	at org.apache.camel.cdi.internal.CamelExtension.registerManagedCamelContext(CamelExtension.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.jboss.weld.injection.MethodInjectionPoint.invokeOnInstanceWithSpecialValue(MethodInjectionPoint.java:93)
	at org.jboss.weld.event.ObserverMethodImpl.sendEvent(ObserverMethodImpl.java:274)
	at org.jboss.weld.event.ExtensionObserverMethodImpl.sendEvent(ExtensionObserverMethodImpl.java:121)
	at org.jboss.weld.event.ObserverMethodImpl.sendEvent(ObserverMethodImpl.java:261)
	at org.jboss.weld.event.ObserverMethodImpl.notify(ObserverMethodImpl.java:240)
	at org.jboss.weld.event.ObserverNotifier.notifyObserver(ObserverNotifier.java:171)
	at org.jboss.weld.event.ObserverNotifier.notifyObservers(ObserverNotifier.java:130)
	at org.jboss.weld.event.ObserverNotifier.fireEvent(ObserverNotifier.java:104)
	at org.jboss.weld.bootstrap.events.AbstractContainerEvent.fire(AbstractContainerEvent.java:63)
	at org.jboss.weld.bootstrap.events.AbstractDefinitionContainerEvent.fire(AbstractDefinitionContainerEvent.java:35)
	at org.jboss.weld.bootstrap.events.AfterBeanDiscoveryImpl.fire(AfterBeanDiscoveryImpl.java:58)
	at org.jboss.weld.bootstrap.WeldBootstrap.deployBeans(WeldBootstrap.java:517)
	at org.jboss.weld.bootstrap.api.helpers.ForwardingBootstrap.deployBeans(ForwardingBootstrap.java:63)
	at org.jboss.weld.environment.se.Weld.initialize(Weld.java:143)

",,,,,,,,,,,,,,,,,,,CAMEL-6500,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-09-16 08:34:39.61,,,no_permission,,Unknown,,,,,,,,,,,348634,,,Mon Sep 16 12:22:47 UTC 2013,,,,,,,0|i1o45j:,348931,,,,,,,,,"15/Sep/13 19:11;shay_matasaro;this is due to the fact that CamelBeanContext return null for getStereotypes, it should return an empty set",15/Sep/13 20:17;shay_matasaro;https://github.com/apache/camel/pull/44,16/Sep/13 08:34;davsclaus;Should a new set be returned or can you return a Collections.EMPTY_SET instead?,"16/Sep/13 12:20;shay_matasaro;I'll check the code to see if an EMPTY_SET would work also
should the fix be also ported back to 2.12 and 2.11?","16/Sep/13 12:22;davsclaus;Your patch has been applied to master, 2.12, and 2.11 branches.",,,,,,,,,,,,,,,,,,,
camel-resltet - Restlet producer problem after recent upgrade,CAMEL-6770,12669433,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,19/Sep/13 11:10,24/Sep/13 09:55,13/Mar/19 22:19,24/Sep/13 09:55,2.12.1,,,,,,,,,2.12.2,,,,camel-restlet,,,,,,0,,,,,,,,,"After Restlet 2.1.4 upgrade we have a problem with this test in tests/camel-itest

mvn test -Dtest=RestletDomainServiceTest

It looks like the 2nd restlet call takes a long time and doesn't signal back when its done.

Also we should make it easier to configure a connection / request timeout as well.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-09-21 13:16:32.166,,,no_permission,,Unknown,,,,,,,,,,,349365,,,Tue Sep 24 09:55:07 UTC 2013,,,,,,,0|i1o8nz:,349663,,,,,,,,,"21/Sep/13 13:16;bvahdat;This problem arised as a side effect of [this commit|https://git-wip-us.apache.org/repos/asf?p=camel.git;a=commitdiff;h=99b40bd7]. I just committed a fix for this. If you would now do a {{""mvm clean install -Pfastinstall""}} for {{""camel-restlet""}} then the test should pass again.

As the dependency scope for {{""org.restlet.ext.httpclient""}} was set to {{test}} we didn't have it on the classpath through which the Apache HTTP client would start up to process the HTTP request through ProducerTemplate of this test.",24/Sep/13 09:55;davsclaus;Thanks,,,,,,,,,,,,,,,,,,,,,,
Split inside Split - Parallel processing issue - Thread is getting wrong Exchange when leaving inner split ,CAMEL-5704,12611766,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,gill3s,gill3s,14/Oct/12 19:09,23/Sep/13 20:14,13/Mar/19 22:19,17/Oct/12 13:12,2.9.3,,,,,,,,,2.10.3,2.11.0,2.9.5,,camel-core,,,,,,0,,,,,,,,,"A small JUnit recreation case is attached.
When using embedded split inside a split with parallel processing, threads are getting a wrong exchange (or wrong exchange copy) just after leaving the inner split and returning to the parent split.

In the test case, we split a file by comma in a parent split (Block split), then by line separator in inner split (Line Split). 
We expect 2 files in output, each of them containing the respective Blocks.

However, once inner split is complete, each thread is supposed to add a 11th line in the result(i).txt file saying split(i) is complete.  
Bug is that one of the thread ends up with parent split Exchange (copy?) from the other thread, and appends wrong information into the wrong file.

Expected:
---------
(result0.txt)
Block1 Line 1:Status=OK
Block1 Line 2:Status=OK
Block1 Line 0:Status=OK
Block1 Line 4:Status=OK
Block1 Line 3:Status=OK
Block1 Line 8:Status=OK
Block1 Line 5:Status=OK
Block1 Line 6:Status=OK
Block1 Line 7:Status=OK
Block1 Line 9:Status=OK
0 complete

(result1.txt)
Block2 Line 0:Status=OK
Block2 Line 3:Status=OK
Block2 Line 1:Status=OK
Block2 Line 2:Status=OK
Block2 Line 6:Status=OK
Block2 Line 4:Status=OK
Block2 Line 7:Status=OK
Block2 Line 9:Status=OK
Block2 Line 5:Status=OK
Block2 Line 8:Status=OK
1 complete

Actual:
-------
(result0.txt)
Block1 Line 1:Status=OK
Block1 Line 2:Status=OK
Block1 Line 0:Status=OK
Block1 Line 4:Status=OK
Block1 Line 3:Status=OK
Block1 Line 8:Status=OK
Block1 Line 5:Status=OK
Block1 Line 6:Status=OK
Block1 Line 7:Status=OK
Block1 Line 9:Status=OK
0 complete0 complete

(result1.txt)
Block2 Line 0:Status=OK
Block2 Line 3:Status=OK
Block2 Line 1:Status=OK
Block2 Line 2:Status=OK
Block2 Line 6:Status=OK
Block2 Line 4:Status=OK
Block2 Line 7:Status=OK
Block2 Line 9:Status=OK
Block2 Line 5:Status=OK
Block2 Line 8:Status=OK


This issue exist in 2.8.x, and probably in 2.10.x as well.
This is a Splitter/MulticastProcessor or Pipeline issue but not quite familiar with the code, I am having hard time tracking it. ","java version ""1.6.0_35""
Java(TM) SE Runtime Environment (build 1.6.0_35-b10-428-11M3811)
Java HotSpot(TM) 64-Bit Server VM (build 20.10-b01-428, mixed mode)

MacOsX 10.7.5

URL: https://svn.apache.org/repos/asf/camel/branches/camel-2.9.x
Repository Root: https://svn.apache.org/repos/asf
Repository UUID: 13f79535-47bb-0310-9956-ffa450edef68
Revision: 1396229
Node Kind: directory
Schedule: normal
Last Changed Author: dkulp
Last Changed Rev: 1396218
Last Changed Date: 2012-10-09 21:36:47 +0200 (Tue, 09 Oct 2012)
",,,,,,,,,,,,CAMEL-6771,,,,,,,,14/Oct/12 19:11;gill3s;FileSplitInSplitTest.java;https://issues.apache.org/jira/secure/attachment/12549083/FileSplitInSplitTest.java,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-10-16 14:06:57.54,,,no_permission,,Unknown,,,,,,,,,,,248578,,,Tue Oct 16 14:06:57 UTC 2012,,,,,,,0|i09w5z:,55652,,,,,,,,,"16/Oct/12 14:06;njiang;The issue is caused by when exchange copy, it doesn't do the deep copy on the map property, and it will cause some side effect on the MulticastProcessor's setAggregationStrategyOnExchange. 
It can be resolve by creating a new map when calling the setAggregationStrategyOnExchange.",,,,,,,,,,,,,,,,,,,,,,,
Cannot install feature camel-spring-redis,CAMEL-6778,12669930,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,muellerc,muellerc,22/Sep/13 20:10,22/Sep/13 20:41,13/Mar/19 22:19,22/Sep/13 20:41,2.11.2,,,,,,,,,2.11.3,,,,karaf,,,,,,0,,,,,,,,,"{noformat}
cmueller$ ./karaf clean
        __ __                  ____
       / //_/____ __________ _/ __/
      / ,<  / __ `/ ___/ __ `/ /_
     / /| |/ /_/ / /  / /_/ / __/
    /_/ |_|\__,_/_/   \__,_/_/

  Apache Karaf (2.3.2)

Hit '<tab>' for a list of available commands
and '[cmd] --help' for help on a specific command.
Hit '<ctrl-d>' or type 'osgi:shutdown' or 'logout' to shutdown Karaf.

karaf@root> features:chooseurl camel 2.11.2
adding feature url mvn:org.apache.camel.karaf/apache-camel/2.11.2/xml/features
karaf@root> features:install camel-spring-redis
Error executing command: Could not start bundle mvn:org.springframework/spring-context/3.1.4.RELEASE in feature(s) spring-3.1.4.RELEASE, camel-spring-redis-2.11.2: Unresolved constraint in bundle org.springframework.context [70]: Unable to resolve 70.0: missing requirement [70.0] osgi.wiring.package; (&(osgi.wiring.package=org.springframework.beans)(version>=3.1.4)(!(version>=3.1.5)))
{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,349764,,,Sun Sep 22 20:41:25 UTC 2013,,,,,,,0|i1ob4n:,350062,,,,,,,,,22/Sep/13 20:41;muellerc;A workaround is installing all features/bundles except mvn:org.springframework/spring-context/3.1.4.RELEASE.,,,,,,,,,,,,,,,,,,,,,,,
loss of data on xpath after cxf (payload-mode) ,CAMEL-6440,12651647,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,rene avontuur,rene avontuur,07/Jun/13 09:06,18/Sep/13 06:28,13/Mar/19 22:19,18/Sep/13 06:28,2.11.0,2.12.0,,,,,,,,2.11.2,2.12.1,2.13.0,,camel-cxf,,,,,,0,,,,,,,,,"Applying an xpath expression to a message containing a CxfPayload may lead to loss of data. 
A unit test to demonstrate this, has been written.

A work around is converting the CxfPayload to a String, followed by applying xpath to the String.

The unit test fails on current snapshot-version:

testMessageWithIncreasingSize(org.apache.camel.component.cxf.CxfConsumerPayloadXPathTest)  Time elapsed: 1.357 sec  <<< FAILURE!
java.lang.AssertionError: Lengths of testMessage and receiveMessage should be equal (body is CxfPayload), expected:<10000> but was:<3805>
	at org.junit.Assert.fail(Assert.java:88)
	at org.junit.Assert.failNotEquals(Assert.java:743)
	at org.junit.Assert.assertEquals(Assert.java:118)
	at org.junit.Assert.assertEquals(Assert.java:555)
	at org.apache.camel.component.cxf.CxfConsumerPayloadXPathTest.execTest(CxfConsumerPayloadXPathTest.java:131)
	at org.apache.camel.component.cxf.CxfConsumerPayloadXPathTest.testMessageWithIncreasingSize(CxfConsumerPayloadXPathTest.java:109)


",,,,,,,,,,,,,,,,,,,,,09/Sep/13 09:08;rene avontuur;CxfConsumerPayloadXPathTest.java;https://issues.apache.org/jira/secure/attachment/12602112/CxfConsumerPayloadXPathTest.java,07/Jun/13 09:07;rene avontuur;CxfConsumerPayloadXPathTest.java;https://issues.apache.org/jira/secure/attachment/12586685/CxfConsumerPayloadXPathTest.java,09/Sep/13 13:56;rene avontuur;DomConverter.patch.txt;https://issues.apache.org/jira/secure/attachment/12602137/DomConverter.patch.txt,,,,3.0,,,,,,,,,,,,,,,,,,,2013-07-23 09:30:05.271,,,no_permission,,Unknown,,,,,,,,,,,331973,,,Wed Sep 18 06:28:26 UTC 2013,,,,,,,0|i1l9qf:,332302,,,,,,,,,07/Jun/13 09:07;rene avontuur;the failing unit test,23/Jul/13 09:30;davsclaus;You need to enable stream caching,"13/Aug/13 07:07;rene avontuur;adding .StreamCaching() to the route in the unit test has no effect.

Even, in the case stream caching would be the remedy, I think it is still a problem.
The risk is too high that during acceptance testing of such a route no issue is detected, while once in production a few users experience corrupted data. It will then be hard to find the cause.",09/Sep/13 09:08;rene avontuur;The observed data loss is most likely due to the inability of Camel's DomConverter/XmlConverter to handle linked lists of text nodes correctly. See latest version of the added unit tests for more details.,"09/Sep/13 13:56;rene avontuur;Added a patch that solves THIS issue.

The method: 
private static void append(StringBuilder buffer, Node node) 
probably has a simular issue.

It would be helpful first having more unit tests in DomConverterTest","13/Sep/13 07:59;njiang;Hi Rene,

I just have quick run with the test and patch.
I found the patch doesn't fix the old version of CxfConsumerPayloadXPathTest, and new version of CxfConsumerPayloadXPathTest is passed if I don't apply the patch.

Can you double check it?

Regards,

Willem","16/Sep/13 08:10;rene avontuur;Hello Willem,

Regarding the new version of CxfConsumerPayloadXPathTest:
- The annotation above size10000XPathTest() expresses the current behavior, which is not the desired behavior.
For the desired behavior, please change '@Test(expected = ComparisonFailure.class)' into '@Test'.
- The test 'size10000DomFirstOneOnlyTest()' may be removed completely. As it only shows what happens if one does not process all DOM-nodes.

Regarding the old version of CxfConsumerPayloadXPathTest:
- after line 77: receivedMessageByDom = textnode.getNodeValue();  
in order to process all nodes, add:
textnode = (Text) textnode.getNextSibling();
while (textnode != null) {
   //the textnode appears to have siblings!
   receivedMessageByDom = receivedMessageByDom + textnode.getNodeValue();
   textnode = (Text) textnode.getNextSibling();
}

René

","18/Sep/13 06:28;njiang;Applied patch into master, camel-2.12.x and camel-2.11.x branches with thanks to Rene.",,,,,,,,,,,,,,,,
The creation of the UnitOfWork should be done after the exchange is populated so that the notification sent contains meaningful data,CAMEL-6731,12668066,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gnt,gnt,gnt,11/Sep/13 15:23,17/Sep/13 09:50,13/Mar/19 22:19,17/Sep/13 09:50,2.12.0,,,,,,,,,2.12.1,2.13.0,,,camel-cxf,camel-jetty,camel-netty,camel-servlet,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-09-16 08:36:27.652,,,no_permission,,Unknown,,,,,,,,,,,348001,,,Mon Sep 16 08:36:27 UTC 2013,,,,,,,0|i1o09b:,348297,,,,,,,,,"16/Sep/13 08:36;davsclaus;Guillaume, are you working on this? Would be great to have fixed this week.",,,,,,,,,,,,,,,,,,,,,,,
HttpConnectionManagerParams doesn't take effect when it is set to HttpComponent,CAMEL-6762,12668955,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,17/Sep/13 07:28,17/Sep/13 07:46,13/Mar/19 22:19,17/Sep/13 07:46,2.12.0,,,,,,,,,2.12.1,2.13.0,,,camel-http,,,,,,0,,,,,,,,,"Here is [the user complain|http://camel.465427.n5.nabble.com/Camel-V2-12-HttpConnectionParams-tp5739596.html].
It is caused by the patch of CAMEL-6296 which override the setting of HttpConnectionManagerParams.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,348887,,,Tue Sep 17 07:46:09 UTC 2013,,,,,,,0|i1o5pz:,349185,,,,,,,,,17/Sep/13 07:46;njiang;Applied the patch into trunk and camel-2.12.x branches.,,,,,,,,,,,,,,,,,,,,,,,
Memory leak SoapOutInterceptor.writeSoapEnvelopeStart with security headers,CAMEL-6690,12666440,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,31/Aug/13 01:38,16/Sep/13 15:37,13/Mar/19 22:19,16/Sep/13 15:37,2.10.6,2.11.1,,,,,,,,2.11.2,2.12.1,2.13.0,,camel-cxf,,,,,,0,,,,,,,,,"When proxying the WS-Security request through camel route with CXF_MESSAGE data format, we will get the endless loop that eat up the memory.

{code}
""qtp967241364-210"" prio=10 tid=0x00007f1de4306800 nid=0x1c9f runnable [0x00007f1d8d451000]
   java.lang.Thread.State: RUNNABLE
	at org.apache.cxf.staxutils.W3CDOMStreamWriter.writeCharacters(W3CDOMStreamWriter.java:292)
	at org.apache.cxf.staxutils.DelegatingXMLStreamWriter.writeCharacters(DelegatingXMLStreamWriter.java:91)
	at org.apache.cxf.staxutils.StaxUtils.copy(StaxUtils.java:588)
	at org.apache.cxf.staxutils.StaxUtils.copy(StaxUtils.java:564)
	at org.apache.cxf.staxutils.StaxUtils.copy(StaxUtils.java:542)
	at org.apache.cxf.binding.soap.interceptor.SoapOutInterceptor.writeSoapEnvelopeStart(SoapOutInterceptor.java:160)
	at org.apache.cxf.binding.soap.interceptor.SoapOutInterceptor.handleMessage(SoapOutInterceptor.java:81)
	at org.apache.cxf.binding.soap.interceptor.SoapOutInterceptor.handleMessage(SoapOutInterceptor.java:61)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:262)
	- locked <0x00000000e28af4a0> (a org.apache.cxf.phase.PhaseInterceptorChain)
	at org.apache.cxf.endpoint.ClientImpl.doInvoke(ClientImpl.java:530)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:456)
	at org.apache.camel.component.cxf.CxfProducer.process(CxfProducer.java:112)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:122)
	at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:298)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:117)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)
	at org.apache.camel.processor.interceptor.HandleFaultInterceptor.process(HandleFaultInterceptor.java:41)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.fabric.FabricTraceProcessor.process(FabricTraceProcessor.java:81)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:334)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:220)
	at org.apache.camel.processor.interceptor.StreamCachingInterceptor.process(StreamCachingInterceptor.java:52)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:308)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:117)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)
	at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73)
	at org.apache.camel.component.cxf.CxfConsumer$1.asyncInvoke(CxfConsumer.java:93)
	- locked <0x00000000e2533d18> (a org.apache.cxf.transport.http_jetty.continuations.JettyContinuationWrapper)
	at org.apache.camel.component.cxf.CxfConsumer$1.invoke(CxfConsumer.java:72)
	at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:58)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
	at java.util.concurrent.FutureTask.run(FutureTask.java:166)
	at org.apache.cxf.workqueue.SynchronousExecutor.execute(SynchronousExecutor.java:37)
	at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:107)
	- locked <0x00000000e28af958> (a org.apache.cxf.interceptor.ServiceInvokerInterceptor$2)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:262)
	- locked <0x00000000e26edb48> (a org.apache.cxf.phase.PhaseInterceptorChain)
	at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:121)
	at org.apache.cxf.transport.http.AbstractHTTPDestination.invoke(AbstractHTTPDestination.java:236)
	at org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:214)
	at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:194)
	at org.apache.cxf.transport.servlet.CXFNonSpringServlet.invoke(CXFNonSpringServlet.java:130)
	at org.apache.cxf.transport.servlet.AbstractHTTPServlet.handleRequest(AbstractHTTPServlet.java:221)
	at org.apache.cxf.transport.servlet.AbstractHTTPServlet.doPost(AbstractHTTPServlet.java:141)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:713)
	at org.apache.cxf.transport.servlet.AbstractHTTPServlet.service(AbstractHTTPServlet.java:197)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.ops4j.pax.web.service.internal.HttpServiceStarted$1.invoke(HttpServiceStarted.java:182)
	at org.ops4j.pax.web.service.internal.$Proxy6.service(Unknown Source)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:652)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:447)
	at org.ops4j.pax.web.service.jetty.internal.HttpServiceServletHandler.doHandle(HttpServiceServletHandler.java:70)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:137)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:534)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:227)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1038)
	at org.ops4j.pax.web.service.jetty.internal.HttpServiceContext.doHandle(HttpServiceContext.java:117)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:374)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:189)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:972)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:135)
	at org.ops4j.pax.web.service.jetty.internal.JettyServerHandlerCollection.handle(JettyServerHandlerCollection.java:75)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:116)
	at org.eclipse.jetty.server.Server.handle(Server.java:363)
	at org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:483)
	at org.eclipse.jetty.server.AbstractHttpConnection.content(AbstractHttpConnection.java:931)
	at org.eclipse.jetty.server.AbstractHttpConnection$RequestHandler.content(AbstractHttpConnection.java:992)
	at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:856)
	at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:235)
	at org.eclipse.jetty.server.AsyncHttpConnection.handle(AsyncHttpConnection.java:82)
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:627)
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:51)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:608)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:543)
	at java.lang.Thread.run(Thread.java:724)
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,346379,,,2013-08-31 01:38:34.0,,,,,,,0|i1nqaf:,346680,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Using @Simple (or others) bean parameter binding for boolean type should eval as predicate,CAMEL-6743,12668432,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,13/Sep/13 07:54,13/Sep/13 08:47,13/Mar/19 22:19,13/Sep/13 08:47,2.11.1,2.12.0,,,,,,,,2.10.7,2.11.2,2.12.1,2.13.0,camel-core,,,,,,0,,,,,,,,,"For example
{code}
        public void read(String body, @Simple(""${header.foo} != null"") boolean foo) {
{code}

The foo parameter is a boolean and thus the @Simple expression should be evaluated as a predicate and not as an Expression which happens today.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,348366,,,2013-09-13 07:54:00.0,,,,,,,0|i1o2hz:,348663,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
XML Signature Component: Stream not closed in XmlSignerHelper.getXslTransform(String path),CAMEL-6727,12667983,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,forsthofer,forsthofer,11/Sep/13 05:09,13/Sep/13 07:11,13/Mar/19 22:19,13/Sep/13 07:10,2.12.0,,,,,,,,,2.12.1,2.13.0,,,,,,,,,0,,,,,,,,,Component camel-xmlsecurity: InputStream is not closed after it is read in method XmlSignerHelper.getXslTransform(String path),,,,,,,,,,,,,,,,,,,,,11/Sep/13 05:11;forsthofer;0001-XML-Signature-component-not-closed-stream.patch;https://issues.apache.org/jira/secure/attachment/12602526/0001-XML-Signature-component-not-closed-stream.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-09-13 07:10:25.551,,,no_permission,,Unknown,,,,,,,,,,,347918,,,Fri Sep 13 07:10:25 UTC 2013,,,Patch Available,,,,0|i1nzqv:,348214,,,,,,,,,13/Sep/13 07:10;njiang;Applied the patch into master and camel-2.12.x branches with thanks to Franz.,,,,,,,,,,,,,,,,,,,,,,,
Upgrade to hadoop 1.2.1,CAMEL-6741,12668320,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,janstey,janstey,12/Sep/13 18:06,12/Sep/13 18:13,13/Mar/19 22:19,12/Sep/13 18:13,,,,,,,,,,2.12.1,2.13.0,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,348254,,,2013-09-12 18:06:51.0,,,,,,,0|i1o1tb:,348550,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-netty - RequestTimeout should not trigger if we read data,CAMEL-6730,12668058,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,11/Sep/13 14:35,11/Sep/13 14:37,13/Mar/19 22:19,11/Sep/13 14:37,2.11.1,2.12.0,,,,,,,,2.11.2,2.12.1,2.13.0,,camel-netty,,,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Netty-and-requestTimeout-tp5738341p5738533.html",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,347993,,,2013-09-11 14:35:13.0,,,,,,,0|i1o07j:,348289,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RegistryBean.getBean()  is not thread safe,CAMEL-5468,12600165,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,25/Jul/12 13:57,10/Sep/13 11:59,13/Mar/19 22:19,26/Jul/12 06:56,2.10.0,2.7.5,2.8.6,2.9.2,,,,,,2.10.1,2.11.0,2.9.3,,camel-core,,,,,,0,,,,,,,,,"Here is the mail thread[1] of it.

[1]http://camel.465427.n5.nabble.com/ClassCastException-using-cxf-bean-td5599810.html#a5716454",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,241340,,,Thu Jul 26 06:56:37 UTC 2012,,,,,,,0|i0279r:,10779,,,,,,,,,"26/Jul/12 06:56;njiang;Applied patch into trunk, camel-2.10.x and camel-2.9.x branch.",,,,,,,,,,,,,,,,,,,,,,,
Message history - Possible ArrayIndexOutOfBoundsException,CAMEL-6723,12667763,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,10/Sep/13 08:30,10/Sep/13 09:09,13/Mar/19 22:19,10/Sep/13 09:09,2.12.0,,,,,,,,,2.12.1,2.13.0,,,camel-core,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,347699,,,Tue Sep 10 08:49:16 UTC 2013,,,,,,,0|i1nyev:,347998,,,,,,,,,"10/Sep/13 08:49;davsclaus;ava.lang.ArrayIndexOutOfBoundsException: 11
	at java.util.ArrayList.add(ArrayList.java:412)
	at org.apache.camel.processor.CamelInternalProcessor$MessageHistoryAdvice.before(CamelInternalProcessor.java:684)
	at org.apache.camel.processor.CamelInternalProcessor$MessageHistoryAdvice.before(CamelInternalProcessor.java:665)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:139)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:118)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:291)
	at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:200)
	at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:147)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:724)
[) thread #3 - seda://hotDrinks] SedaConsumer                   WARN  Error processing exchange. Exchange[Message: hot 4 shot CAPPUCCINO]. Caused by: [java.lang.ArrayIndexOutOfBoundsException - 10]",,,,,,,,,,,,,,,,,,,,,,,
Installation of camel-stomp feature fails ,CAMEL-6714,12667445,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,muellerc,muellerc,07/Sep/13 11:23,08/Sep/13 12:53,13/Mar/19 22:19,08/Sep/13 12:53,2.12.0,,,,,,,,,2.12.1,2.13.0,,,,,,,,,0,,,,,,,,,"{noformat}
Christians-MacBook-Pro:bin cmueller$ ./karaf clean
        __ __                  ____
       / //_/____ __________ _/ __/
      / ,<  / __ `/ ___/ __ `/ /_
     / /| |/ /_/ / /  / /_/ / __/
    /_/ |_|\__,_/_/   \__,_/_/

  Apache Karaf (2.3.2)

Hit '<tab>' for a list of available commands
and '[cmd] --help' for help on a specific command.
Hit '<ctrl-d>' or type 'osgi:shutdown' or 'logout' to shutdown Karaf.

karaf@root> features:chooseurl camel 2.12.0
adding feature url mvn:org.apache.camel.karaf/apache-camel/2.12.0/xml/features
karaf@root> features:install camel-stomp
Error executing command: Could not start bundle mvn:org.apache.geronimo.specs/geronimo-jms_1.1_spec/1.1.1 in feature(s) spring-jms-3.1.4.RELEASE, camel-spring-ws-2.12.0, spring-jms-3.2.3.RELEASE, spring-jms-3.0.7.RELEASE, camel-jms-2.12.0, camel-bam-2.12.0, camel-stomp-2.12.0, camel-sjms-2.12.0, camel-jpa-2.12.0: Unresolved constraint in bundle org.apache.geronimo.specs.geronimo-jms_1.1_spec [62]: Unable to resolve 62.0: missing requirement [62.0] osgi.wiring.package; (osgi.wiring.package=javax.transaction.xa)
{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,347382,,,Sun Sep 08 11:04:31 UTC 2013,,,,,,,0|i1nwgf:,347681,,,,,,,,,"08/Sep/13 11:04;muellerc;installing the Geronimo JTA spec before resolves this issue (with the original jre.properties settings from Karaf):

{code}
install mvn:org.apache.geronimo.specs/geronimo-jta_1.1_spec/1.1.1
{code}",,,,,,,,,,,,,,,,,,,,,,,
Camel-5676 introduced a regression for JMX with spring/blueprint,CAMEL-6693,12666457,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,31/Aug/13 11:07,05/Sep/13 14:10,13/Mar/19 22:19,31/Aug/13 11:15,2.12.0,,,,,,,,,2.12.0,,,,camel-blueprint,camel-spring,jmx,,,,0,,,,,,,,,"See
http://camel.465427.n5.nabble.com/VOTE-Release-Apache-Camel-2-12-0-tp5738140.html

Scott found a regressions, and pointed out the fix.",,,,,,,,,,,,,,,,,,,,,05/Sep/13 12:02;scranton;CAMEL-6693.diff;https://issues.apache.org/jira/secure/attachment/12601598/CAMEL-6693.diff,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-09-05 12:02:55.368,,,no_permission,,Unknown,,,,,,,,,,,346396,,,Thu Sep 05 14:10:09 UTC 2013,,,,,,,0|i1nqe7:,346697,,,,,,,,,"05/Sep/13 12:02;scranton;I've pulled the Unit Test from https://github.com/CamelCookbook/camel-cookbook-examples/blob/master/camel-cookbook-monitoring/src/test/java/org/camelcookbook/monitoring/managed/ManagedSpringTest.java that originally caught the regression, but now that its part of the normal camel build it does not react to the addition or removal of those two lines. I'm guessing I need to run a test with jmx disabled, and then run a spring test with it enabled to catch this case.

Feel free to add these test cases as it does exercise ManagedResource.",05/Sep/13 14:10;davsclaus;Thanks for the tests I will add them.,,,,,,,,,,,,,,,,,,,,,,
camel-yammer - Endpoint yammer:current throwns JsonMappingException exception ,CAMEL-6709,12667106,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,janstey,janstey,05/Sep/13 13:58,05/Sep/13 14:03,13/Mar/19 22:19,05/Sep/13 14:03,2.12.0,,,,,,,,,2.12.1,,,,,,,,,,0,,,,,,,,,"Getting 

org.codehaus.jackson.map.JsonMappingException: Can not deserialize instance of java.util.ArrayList out of START_OBJECT token

when trying to return the current user using yammer:current. Workaround is to just add ?useJson=true and do marshaling manually. Fixing on master shortly.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,347043,,,Thu Sep 05 14:03:41 UTC 2013,,,,,,,0|i1nudb:,347342,,,,,,,,,05/Sep/13 14:03;janstey;Fixed with https://git-wip-us.apache.org/repos/asf?p=camel.git;a=commit;h=420ab5d2 No need to hold up 2.12 release for this as you can still get the raw info of the current user via useJson=true.,,,,,,,,,,,,,,,,,,,,,,,
camel-http4 - In bridge mode should use noop cookie store to not eat memory,CAMEL-6702,12666677,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,03/Sep/13 10:38,03/Sep/13 11:16,13/Mar/19 22:19,03/Sep/13 11:16,,,,,,,,,,2.11.2,2.12.0,,,camel-http,,,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/CookieStore-tp5737517.html",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,346615,,,Tue Sep 03 11:16:57 UTC 2013,,,,,,,0|i1nrqn:,346916,,,,,,,,,03/Sep/13 11:16;davsclaus;Expired cookies is now removed by default. And a noop cookie store is using when bridging. Also made it easy to configure a custom cookie store.,,,,,,,,,,,,,,,,,,,,,,,
camel-blueprint - Using <endpoint> and referrring to SSLContextParameters with property placeholders can lead to CircularDependencyException,CAMEL-6700,12666662,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,03/Sep/13 08:30,03/Sep/13 10:18,13/Mar/19 22:19,03/Sep/13 10:18,2.11.0,,,,,,,,,2.10.7,2.11.2,2.12.0,,camel-blueprint,,,,,,0,,,,,,,,,"Configuring a blueprint xml file with
{code}
    <endpoint id=""myNettyServer"" uri=""netty-http:http://0.0.0.0:{{port}}/foo?ssl=true&amp;sslContextParameters=#mySsl""/>
{code}


Can lead to ciruclar exceptions
{code}
Caused by: org.apache.aries.blueprint.di.CircularDependencyException: [BeanRecipe[name='mySsl'], BeanRecipe[name='.camelBlueprint.factory.mySsl'], BeanRecipe[name='camel-4'], BeanRecipe[name='myNettyServer'], BeanRecipe[name='mySsl']]
	at org.apache.aries.blueprint.container.BlueprintRepository.push(BlueprintRepository.java:343)[7:org.apache.aries.blueprint.core:1.1.0]
	at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:71)[7:org.apache.aries.blueprint.core:1.1.0]
	at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:245)[7:org.apache.aries.blueprint.core:1.1.0]
	at org.apache.aries.blueprint.container.BlueprintRepository.createInstance(BlueprintRepository.java:230)[7:org.apache.aries.blueprint.core:1.1.0]
	at org.apache.aries.blueprint.container.BlueprintRepository.create(BlueprintRepository.java:145)[7:org.apache.aries.blueprint.core:1.1.0]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.getComponentInstance(BlueprintContainerImpl.java:746)[7:org.apache.aries.blueprint.core:1.1.0]
	at org.apache.camel.blueprint.BlueprintContainerRegistry.lookupByNameAndType(BlueprintContainerRegistry.java:54)
	at org.apache.camel.impl.CompositeRegistry.lookupByNameAndType(CompositeRegistry.java:52)
	... 125 more
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,346600,,,Tue Sep 03 08:54:01 UTC 2013,,,,,,,0|i1nrnb:,346901,,,,,,,,,"03/Sep/13 08:54;davsclaus;The problem is only when you define a SSLContextParameters which you refer to from <endpoint>

{code}
  <camel:sslContextParameters id=""mySsl"">
    <camel:serverParameters clientAuthentication=""REQUIRE""/>
    <camel:keyManagers keyPassword=""changeit"">
      <camel:keyStore resource=""etc/localhost.ks"" password=""changeit""/>
    </camel:keyManagers>
    <camel:trustManagers>
      <camel:keyStore resource=""etc/localhost.ks"" password=""changeit""/>
    </camel:trustManagers>
  </camel:sslContextParameters>
{code}

And with endpoint
{code}
    <endpoint id=""myNettyServer"" uri=""netty-http:http://0.0.0.0:{{port}}/foo?ssl=true&amp;sslContextParameters=#mySsl""/>
{code}",,,,,,,,,,,,,,,,,,,,,,,
camel-cxf should not setup the holder and wrapperClass interceptors in CXF_MESSAGE data format,CAMEL-6696,12666557,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,02/Sep/13 09:38,03/Sep/13 02:01,13/Mar/19 22:19,03/Sep/13 02:01,2.10.6,2.11.1,,,,,,,,2.10.7,2.11.2,2.12.0,,camel-cxf,,,,,,0,,,,,,,,,"When we specify the serviceClass attribute of cxfEndpoint with CXF_MESSAGE dataformat, camel-cxf will setup the WrapperClass{In|Out}Interceptor and Holder{In|Out}Interceptor for the endpoint, but these interceptors are useless and throw some exceptions because camel-cxf doesn't consume under layer message at all and it cannot setup right information for these interceptor to use.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,346495,,,Tue Sep 03 02:01:58 UTC 2013,,,,,,,0|i1nr07:,346796,,,,,,,,,"03/Sep/13 02:01;njiang;Applied the patch into master, camel-2.12.x, camel-2.11.x and camel-2.10.x branches.",,,,,,,,,,,,,,,,,,,,,,,
camel-blueprint - Using routeContextRef to refer to a RouteBuilder in another bundle causes ClassCastException,CAMEL-6699,12666582,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,02/Sep/13 13:35,02/Sep/13 15:48,13/Mar/19 22:19,02/Sep/13 15:42,2.11.0,,,,,,,,,2.10.7,2.11.2,2.12.0,,camel-blueprint,,,,,,1,,,,,,,,,"See
http://camel.465427.n5.nabble.com/Referencing-OSGi-services-with-RouteBuilder-classes-for-use-in-CamelContext-tp5734660.html

I can reproduce with stacktrace
{code}
Caused by: java.lang.ClassCastException: Proxyfdf03102_b8fa_4caf_b44c_fa565998bb6e cannot be cast to org.apache.camel.builder.RouteBuilder
	at org.apache.camel.model.RouteBuilderDefinition.createRouteBuilder(RouteBuilderDefinition.java:64)
	at org.apache.camel.core.xml.AbstractCamelContextFactoryBean.installRoutes(AbstractCamelContextFactoryBean.java:727)
	at org.apache.camel.core.xml.AbstractCamelContextFactoryBean.setupRoutes(AbstractCamelContextFactoryBean.java:299)
	at org.apache.camel.blueprint.CamelContextFactoryBean.afterPropertiesSet(CamelContextFactoryBean.java:300)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)[:1.7.0_25]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)[:1.7.0_25]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)[:1.7.0_25]
	at java.lang.reflect.Method.invoke(Method.java:606)[:1.7.0_25]
	at org.apache.aries.blueprint.utils.ReflectionUtils.invoke(ReflectionUtils.java:297)[7:org.apache.aries.blueprint.core:1.1.0]
	at org.apache.aries.blueprint.container.BeanRecipe.invoke(BeanRecipe.java:958)[7:org.apache.aries.blueprint.core:1.1.0]
	at org.apache.aries.blueprint.container.BeanRecipe.runBeanProcInit(BeanRecipe.java:712)[7:org.apache.aries.blueprint.core:1.1.0]
	... 40 more
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-09-02 15:46:22.156,,,no_permission,,Unknown,,,,,,,,,,,346520,,,Mon Sep 02 15:48:49 UTC 2013,,,,,,,0|i1nr5r:,346821,,,,,,,,,02/Sep/13 15:43;davsclaus;Remember to expose the RouteBuilder class using its interface which is org.apache.camel.RoutesBuilder. eg notice the S in Route***s***Builder.,"02/Sep/13 15:46;stibi;ah, ok :) that's it! Thanks, I'll try.","02/Sep/13 15:48;davsclaus;Ah there was still a bug in camel-core-xml which I have fixed. Though it may be a common mistake for end users to expose a route builder as osgi service using its class name, I made that mistake at first. ",,,,,,,,,,,,,,,,,,,,,
camel-dozer - Does not work well in OSGi Blueprint,CAMEL-6683,12666130,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,29/Aug/13 13:29,02/Sep/13 09:15,13/Mar/19 22:19,02/Sep/13 09:15,2.12.0,,,,,,,,,2.12.0,,,,,,,,,,0,,,,,,,,,"Dozer doesnt work to well in OSGi. It seems to work with spring, but fails with OSGi blueprint.

{code}
2013-08-29 14:44:51,302 | ERROR | l Console Thread | BlueprintContainerImpl           | container.BlueprintContainerImpl  393 | 7 - org.apache.aries.blueprint.core - 1.1.0 | Unable to start blueprint container for bundle blue
org.osgi.service.blueprint.container.ComponentDefinitionException: Error when instantiating bean dozerMapper of class class org.dozer.DozerBeanMapper
	at org.apache.aries.blueprint.container.BeanRecipe.getInstance(BeanRecipe.java:333)[7:org.apache.aries.blueprint.core:1.1.0]
	at org.apache.aries.blueprint.container.BeanRecipe.internalCreate2(BeanRecipe.java:806)[7:org.apache.aries.blueprint.core:1.1.0]
	at org.apache.aries.blueprint.container.BeanRecipe.internalCreate(BeanRecipe.java:787)[7:org.apache.aries.blueprint.core:1.1.0]
	at org.apache.aries.blueprint.di.AbstractRecipe$1.call(AbstractRecipe.java:79)[7:org.apache.aries.blueprint.core:1.1.0]
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)[:1.7.0_25]
	at java.util.concurrent.FutureTask.run(FutureTask.java:166)[:1.7.0_25]
	at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:88)[7:org.apache.aries.blueprint.core:1.1.0]
	at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:245)[7:org.apache.aries.blueprint.core:1.1.0]
	at org.apache.aries.blueprint.container.BlueprintRepository.createAll(BlueprintRepository.java:183)[7:org.apache.aries.blueprint.core:1.1.0]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.instantiateEagerComponents(BlueprintContainerImpl.java:668)[7:org.apache.aries.blueprint.core:1.1.0]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:370)[7:org.apache.aries.blueprint.core:1.1.0]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:261)[7:org.apache.aries.blueprint.core:1.1.0]
	at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:259)[7:org.apache.aries.blueprint.core:1.1.0]
	at org.apache.aries.blueprint.container.BlueprintExtender.modifiedBundle(BlueprintExtender.java:222)[7:org.apache.aries.blueprint.core:1.1.0]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:500)[11:org.apache.aries.util:1.1.0]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:433)[11:org.apache.aries.util:1.1.0]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$AbstractTracked.track(BundleHookBundleTracker.java:725)[11:org.apache.aries.util:1.1.0]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.bundleChanged(BundleHookBundleTracker.java:463)[11:org.apache.aries.util:1.1.0]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$BundleEventHook.event(BundleHookBundleTracker.java:422)[11:org.apache.aries.util:1.1.0]
	at org.apache.felix.framework.util.SecureAction.invokeBundleEventHook(SecureAction.java:1103)[org.apache.felix.framework-4.0.3.jar:]
	at org.apache.felix.framework.util.EventDispatcher.createWhitelistFromHooks(EventDispatcher.java:695)[org.apache.felix.framework-4.0.3.jar:]
	at org.apache.felix.framework.util.EventDispatcher.fireBundleEvent(EventDispatcher.java:483)[org.apache.felix.framework-4.0.3.jar:]
	at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:4244)[org.apache.felix.framework-4.0.3.jar:]
	at org.apache.felix.framework.Felix.startBundle(Felix.java:1923)[org.apache.felix.framework-4.0.3.jar:]
	at org.apache.felix.framework.Felix.updateBundle(Felix.java:2235)[org.apache.felix.framework-4.0.3.jar:]
	at org.apache.felix.framework.BundleImpl.update(BundleImpl.java:962)[org.apache.felix.framework-4.0.3.jar:]
	at org.apache.felix.framework.BundleImpl.update(BundleImpl.java:949)[org.apache.felix.framework-4.0.3.jar:]
	at org.apache.karaf.shell.osgi.UpdateBundle.doExecute(UpdateBundle.java:37)[43:org.apache.karaf.shell.osgi:2.3.2]
	at org.apache.karaf.shell.osgi.BundleCommand.doExecute(BundleCommand.java:42)[43:org.apache.karaf.shell.osgi:2.3.2]
	at org.apache.karaf.shell.console.OsgiCommandSupport.execute(OsgiCommandSupport.java:38)[14:org.apache.karaf.shell.console:2.3.2]
	at org.apache.felix.gogo.commands.basic.AbstractCommand.execute(AbstractCommand.java:35)[14:org.apache.karaf.shell.console:2.3.2]
	at org.apache.felix.gogo.runtime.CommandProxy.execute(CommandProxy.java:78)[14:org.apache.karaf.shell.console:2.3.2]
	at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:474)[14:org.apache.karaf.shell.console:2.3.2]
	at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:400)[14:org.apache.karaf.shell.console:2.3.2]
	at org.apache.felix.gogo.runtime.Pipe.run(Pipe.java:108)[14:org.apache.karaf.shell.console:2.3.2]
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:183)[14:org.apache.karaf.shell.console:2.3.2]
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:120)[14:org.apache.karaf.shell.console:2.3.2]
	at org.apache.felix.gogo.runtime.CommandSessionImpl.execute(CommandSessionImpl.java:89)[14:org.apache.karaf.shell.console:2.3.2]
	at org.apache.karaf.shell.console.jline.Console.run(Console.java:173)[14:org.apache.karaf.shell.console:2.3.2]
	at java.lang.Thread.run(Thread.java:724)[:1.7.0_25]
Caused by: org.dozer.MappingException: java.lang.ClassNotFoundException: org.dozer.util.DefaultClassLoader
	at org.dozer.util.MappingUtils.throwMappingException(MappingUtils.java:82)
	at org.dozer.util.DefaultClassLoader.loadClass(DefaultClassLoader.java:38)
	at org.dozer.DozerInitializer.loadBeanType(DozerInitializer.java:115)
	at org.dozer.DozerInitializer.initialize(DozerInitializer.java:97)
	at org.dozer.DozerInitializer.init(DozerInitializer.java:74)
	at org.dozer.DozerBeanMapper.init(DozerBeanMapper.java:173)
	at org.dozer.DozerBeanMapper.<init>(DozerBeanMapper.java:99)
	at org.dozer.DozerBeanMapper.<init>(DozerBeanMapper.java:94)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)[:1.7.0_25]
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)[:1.7.0_25]
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)[:1.7.0_25]
	at java.lang.reflect.Constructor.newInstance(Constructor.java:526)[:1.7.0_25]
	at org.apache.aries.blueprint.utils.ReflectionUtils.newInstance(ReflectionUtils.java:329)[7:org.apache.aries.blueprint.core:1.1.0]
	at org.apache.aries.blueprint.container.BeanRecipe.newInstance(BeanRecipe.java:962)[7:org.apache.aries.blueprint.core:1.1.0]
	at org.apache.aries.blueprint.container.BeanRecipe.getInstance(BeanRecipe.java:331)[7:org.apache.aries.blueprint.core:1.1.0]
	... 39 more
Caused by: java.lang.ClassNotFoundException: org.dozer.util.DefaultClassLoader
	at java.net.URLClassLoader$1.run(URLClassLoader.java:366)[:1.7.0_25]
	at java.net.URLClassLoader$1.run(URLClassLoader.java:355)[:1.7.0_25]
	at java.security.AccessController.doPrivileged(Native Method)[:1.7.0_25]
	at java.net.URLClassLoader.findClass(URLClassLoader.java:354)[:1.7.0_25]
	at java.lang.ClassLoader.loadClass(ClassLoader.java:424)[:1.7.0_25]
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:308)[:1.7.0_25]
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)[:1.7.0_25]
	at java.lang.Class.forName0(Native Method)[:1.7.0_25]
	at java.lang.Class.forName(Class.java:270)[:1.7.0_25]
	at org.apache.commons.lang3.ClassUtils.getClass(ClassUtils.java:823)
	at org.apache.commons.lang3.ClassUtils.getClass(ClassUtils.java:889)
	at org.apache.commons.lang3.ClassUtils.getClass(ClassUtils.java:872)
	at org.dozer.util.DefaultClassLoader.loadClass(DefaultClassLoader.java:36)
	... 52 more
{code}

",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,346069,,,Mon Sep 02 09:15:07 UTC 2013,,,,,,,0|i1noe7:,346370,,,,,,,,,"30/Aug/13 08:07;davsclaus;You should configure dozer using org.apache.camel.converter.dozer.DozerBeanMapperConfiguration as shown on: https://cwiki.apache.org/confluence/display/CAMEL/Dozer+Type+Conversion

Dozer 5.5 works better in OSGi as it also has an OSGi Activator. So when this version is released we can upgrade and have Dozer work better with OSGi Blueprint.","30/Aug/13 08:31;davsclaus;I asked about a 5.5.0 release of Dozer at
https://groups.google.com/forum/?fromgroups=#!topic/dozer-mapper/jDfxFW4pkqY",02/Sep/13 09:15;davsclaus;It works better now. Though upgrading to Dozer 5.5.0 works even better. Though Dozer 5.5.0 has not been released yet.,,,,,,,,,,,,,,,,,,,,,
seda - queue size compare should use equals,CAMEL-6691,12666454,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,31/Aug/13 09:38,02/Sep/13 08:55,13/Mar/19 22:19,31/Aug/13 10:57,2.11.1,,,,,,,,,2.11.2,2.12.0,,,camel-core,,,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Camel-2-11-1-SedaComponent-issues-with-Queue-size-tp5738258.html

",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,346393,,,2013-08-31 09:38:32.0,,,,,,,0|i1nqdj:,346694,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-cxf RAW message data format doesn't support MTOM,CAMEL-6684,12666240,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,30/Aug/13 02:40,02/Sep/13 08:54,13/Mar/19 22:19,30/Aug/13 12:13,2.10.6,2.11.1,,,,,,,,2.11.2,2.12.0,,,camel-cxf,,,,,,0,,,,,,,,,"As camel-cxf RAW message dataformat doesn't pass the content-type header rightly, the request which route by the camel router cannot accept by the server. ",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,346179,,,Fri Aug 30 12:13:00 UTC 2013,,,,,,,0|i1np2n:,346480,,,,,,,,,"30/Aug/13 12:13;njiang;Applied the patch into master, camel-2.12.x, camel-2.11.x and camel-2.10.x.",,,,,,,,,,,,,,,,,,,,,,,
Multiple consumers exists on the same JMS endpoint uri and if you remove a consumer the other active consumers do not receive any messages anymore.,CAMEL-6093,12633400,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ladislav.lengyel,ladislav.lengyel,21/Feb/13 14:24,02/Sep/13 08:53,13/Mar/19 22:19,31/Aug/13 10:05,2.10.3,2.11.1,,,,,,,,2.10.7,2.11.2,2.12.0,,camel-jms,,,,,,0,,,,,,,,,"same issue as CAMEL-4194, but here it is for queues.
https://issues.apache.org/jira/browse/CAMEL-4194

description and unit test for reproduction
http://camel.465427.n5.nabble.com/Removing-routes-programmatically-td4556741.html#a5727523

see post on Feb 13, 2013; 4:41pm

thanks",,,,,,,,,,,,,,,,,,,,,26/May/13 12:18;davsclaus;TwoConsumerOnTheSameQueueTest.java;https://issues.apache.org/jira/secure/attachment/12584866/TwoConsumerOnTheSameQueueTest.java,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-08-06 23:48:42.849,,,no_permission,,Unknown,,,,,,,,,,,313895,,,Fri Aug 30 15:06:41 UTC 2013,,,,,,,0|i1i61z:,314240,,,,,,,,,"06/Aug/13 23:48;saltnlight5;Hi,

I have looked at this issue, and it appeared that simple fix is to make JmsEndpoint#isSingle() to return false for both Queue and Topic cases. But if we do this, we will not able to manage the Queue endpoint through JMX because in DefaultManagementObjectStrategy#getManagedObjectForEndpoint() it will return null for non-singleton endpoint. Is this intended? If yes, what's a suggested solution for it? I will be happy to help come up with a patch if you guys can give some advise here.

Zemian","12/Aug/13 22:34;saltnlight5;Hi, would anyone from Camel team can advise on my comment above?","25/Aug/13 20:23;muellerc;I think this is a serious issue.

With commit 'ea325e3..5721e40', I added the attached (polished) unit test which shows this issue. Could some ActiveMQ expert have a look into it please!?","26/Aug/13 22:27;saltnlight5;Hi Christian,

I don't see how this issue is related to ActiveMQ specific. The problem I see is that we allowing Queue to be singleton JmsEndpoint, and thus we are only creating one threadpool service for jmsMessageListenerContainer. Thus when user remove one consumer, the single threadpool will shutdown, and thus other active consumers who share same single Endpoint will not receive message anymore.

If we do intended for Queue to be non-singleton as JmsEndpoint with same URI string, then, I said, the fix is simply make JmsEndpoint#isSingle() to return false. The only drawback now is that once you do this, you will not able to see Queue stats through JMX because we don't expose non-single Endpoints on JMX (there is a unit test case that verify this)

Please let me know if my diagnosis is incorrect.","30/Aug/13 12:19;davsclaus;The problem is only if the endpoints is 100% identical. You can consume from same queue with different endpoints.

And having 2+ routes from the same jms queue is very unusual, as you would have 1 route and use concurrent consumers if you need concurrency.
","30/Aug/13 12:25;davsclaus;I wonder if the best solution is to let JmsEndpoint not be singleton so its not shared at all. And then introduce a new option on Endpoint to indicate that it should be enlisted in JMX, even if its not singleton. The trick is that you may have JmsEndpoints in JMX that would have the same ObjectName but would be different instances. To make the MBean names unique we would need to add the identity hashcode of the endpoint instance to the MBean name which then makes them look a bit ugly

""jms:queue:foo(0x12de45)""
""jms:queue:foo(0x0a1348)""
",30/Aug/13 12:35;davsclaus;Using this approach the test from mueller passes.,30/Aug/13 15:06;davsclaus;.. though another test hangs. I have founder a better solution that I am testing.,,,,,,,,,,,,,,,,
Custom HttpClientConfigurer makes Basic Authentication and Proxy settings ineffective,CAMEL-6605,12661425,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,drasil,drasil,02/Aug/13 16:30,26/Aug/13 15:14,13/Mar/19 22:19,26/Aug/13 15:14,2.11.1,,,,,,,,,2.11.2,2.12.0,,,camel-http,,,,,,0,,,,,,,,,"When custom HttpClientConfigurer is defined for http4-based endpoint as described in the component documantation, the basic authentication and proxy settings are ignored. I am not sure whether this is a bug or feature, but it should be either fixed or documented.

The reason is, that basic authentication and proxy settings are also realized using HttpClientConfigurer and the custom one overrides this one in org.apache.camel.component.http4.HttpComponent.createEndpoint():
1.) Custom HttpClientConfigurer is detected in the parameters map and the parameter is removed from the map (line 188)
2.) Compound HttpClientConfigurer for Basic authentication and Proxy settings is created by the createHttpClientConfigurer() method (line 218). The method tries to detect also the custom HttpClientConfigurer, but its declaration was already removed from the parameters map.
3.) New HttpEndpoint instance is created using the compound HttpClientConfigurer for Basic authentication and Proxy settings (line 221)
4.) Custom HttpClientConfigurer is set to the endpoint instance which overrides the original one (line 277)",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-08-26 15:10:35.41,,,no_permission,,Unknown,,,,,,,,,,,341614,,,Mon Aug 26 15:10:35 UTC 2013,,,,,,,0|i1mwzb:,341921,,,,,,,,,26/Aug/13 15:10;davsclaus;Yeah that seems wrong.,,,,,,,,,,,,,,,,,,,,,,,
<routeContext> can't be reused in multiple contexts when propertly placeholder resolution is used,CAMEL-6291,12642747,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,tivv,tivv,16/Apr/13 14:45,26/Aug/13 09:50,13/Mar/19 22:19,26/Aug/13 09:50,2.10.0,,,,,,,,,2.11.2,2.12.0,,,camel-core,,,,,,0,,,,,,,,,"Currently <routeContext> is a list of RouteDefinitions with ProcessorDefinitions inside. 
When ProcessorDefinition is asked  to makeProcessor, it calls resolvePropertyPlaceHolder that replaces any placeholder with current routeContext data. This makes it impossible to futher use such ProcessorDefinition with any other routeContext with different placeholder resolution data.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-08-26 09:50:28.096,,,no_permission,,Unknown,,,,,,,,,,,323161,,,Mon Aug 26 09:50:28 UTC 2013,,,,,,,0|i1jr7z:,323506,,,,,,,,,"26/May/13 16:35;tivv;http://camel.apache.org/configuring-camel.html says: ""Reusable routes
The routes defined in <routeContext/> can be reused by multiple <camelContext/>.""
So, this is a bug in documented feature. If you think, it's an enhancement, the page should be corrected.",26/Aug/13 09:50;davsclaus;Thanks for reporting.,,,,,,,,,,,,,,,,,,,,,,
Loop EIP doesn't honour copy option in some circumstances,CAMEL-6667,12665418,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,raulvk,raulvk,raulvk,25/Aug/13 14:24,25/Aug/13 14:42,13/Mar/19 22:19,25/Aug/13 14:42,2.12.0,,,,,,,,,2.10.7,2.11.2,2.12.0,,camel-core,,,,,,0,loop,,,,,,,,"Happens when the Async Routing Engine variant of the Loop logic kicks in, and there are more than two processors in the loop body, e.g. 
\\
\\
{code:java}
.loop(3)
  .to(""activemq:queue:abc?exchangePattern=InOut"")
  .to(""activemq:queue:def?exchangePattern=InOut"")
.end()
{code}

The wrong inflight Exchange is copied (instead of the original one), and since the implicit Pipeline has copied the OUT message from the 1st endpoint to the IN message, the original IN message is lost fully.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,345358,,,2013-08-25 14:24:55.0,,,,,,,0|i1nk07:,345659,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"When restart camel, lucene index folder always by empty",CAMEL-6606,12661862,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,terrymanu,terrymanu,05/Aug/13 10:42,23/Aug/13 10:34,13/Mar/19 22:19,23/Aug/13 10:34,2.11.1,,,,,,,,,2.11.2,2.12.0,,,,,,,,,0,,,,,,,,,"When restart camel, lucene index folder always be empty.
I check the source code. It is in class LuceneIndexer line 145, method openIndexWriter. It seems when camel start, will create a new lucene index folder. Because the variable ""indexCreated"" cannot set by outside. ",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-08-23 10:34:54.884,,,no_permission,,Unknown,,,,,,,,,,,341866,,,Fri Aug 23 10:34:54 UTC 2013,,,,,,,0|i1myj3:,342172,,,,,,,,,"23/Aug/13 10:34;davsclaus;The indexer should now use create or append, so it ought to reuse existing index if already exists.",,,,,,,,,,,,,,,,,,,,,,,
AbstractListAggregationStrategy does not work with batch completion strategy,CAMEL-6557,12658255,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,mumrah,mumrah,17/Jul/13 13:24,23/Aug/13 09:30,13/Mar/19 22:19,23/Aug/13 09:30,2.11.1,,,,,,,,,2.11.2,2.12.0,,,camel-core,,,,,,0,,,,,,,,,"When my aggregator extends AbstractListAggregationStrategy, I never get aggregator completions from the batch consumer.

If I change my aggregator to be something like:

{code}
    Foo foo = newExchange.getIn().getBody(Foo.class);
    List<Foo> list = null;
    Exchange outExchange;
    if (oldExchange == null) {
      list = new LinkedList<Foo>();
      list.add(foo);
      newExchange.getIn().setBody(list);
      outExchange = newExchange;
    } else {
      list = oldExchange.getIn().getBody(List.class);
      list.add(foo);
      outExchange = oldExchange;
    }
    return outExchange;
{code}

then it works fine.

I'm guessing this is has something to do with AbstractListAggregationStrategy messing with properties or wrapping the actual exchanges (since the batch completion is triggered based on Exchange.BATCH_SIZE property)",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-08-23 09:30:00.794,,,no_permission,,Unknown,,,,,,,,,,,338449,,,Fri Aug 23 09:30:00 UTC 2013,,,,,,,0|i1mdjr:,338769,,,,,,,,,23/Aug/13 09:30;davsclaus;Thanks for reporting.,,,,,,,,,,,,,,,,,,,,,,,
camel-ftp module loses starting characters of path for root dir logins,CAMEL-6018,12629684,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,jeffmaher,jeffmaher,29/Jan/13 13:30,23/Aug/13 08:02,13/Mar/19 22:19,23/Aug/13 08:02,2.10.2,2.11.1,,,,,,,,2.10.7,2.11.2,2.12.0,,camel-ftp,,,,,,0,,,,,,,,,"When a SFTP Camel route is established and the user's home directory is the root dir (i.e. when the user logs in, they are put at / because it is their home), the first character in the path is accidentally removed . While this is okay for users that login to a '~' based path (or have '~' as their home), for the root, it means that the '/' is prematurely removed.

This problem happens in SftpOperations. Originally found in 2.10.2 (attached: SftpOperations.java, includes fix). Patch file (SftpOperations.java.patch) is for 2.11-SNAPSHOT (the current trunk).","Camel app ran on: Java 6 u 38
FTP Server: UNIX-based",,,,,,,,,,,,,,,,,,,,29/Jan/13 13:33;jeffmaher;SftpOperations.java;https://issues.apache.org/jira/secure/attachment/12566950/SftpOperations.java,29/Jan/13 15:28;jeffmaher;SftpOperations.java.patch;https://issues.apache.org/jira/secure/attachment/12566988/SftpOperations.java.patch,,,,,2.0,,,,,,,,,,,,,,,,,,,2013-01-30 03:30:25.85,,,no_permission,,Novice,,,,,,,,,,,310180,,,Fri Aug 23 08:02:13 UTC 2013,,,Patch Available,,,,0|i1hj4v:,310525,,,,,,,,,29/Jan/13 13:31;jeffmaher;Attaching patched file: See lines 400 or diff against 2.10.2 tag.,29/Jan/13 13:32;jeffmaher;I'm checking out the current trunk (I think it's 2.11-SNAPSHOT) right now and will confirm if the patched file is still relevant.,29/Jan/13 15:28;jeffmaher;Attaching the patch for 2.11-SNAPSHOT (Attached: SftopOperations.java.patch is for 2.11-SNAPSHOT) (SftpOperations.java is the 2.10.2 patched file),"30/Jan/13 03:30;njiang;Hi Jeff,

Thanks for  the patch, do you mind to add an unit test for it to avoid the regression issue.","31/Jan/13 13:16;jeffmaher;Hi Willem - I tried to create a unit test, but a few things prevent this from being easy:

# The method under test does not return a value ({{public void changeCurrentDirectory(String path)}})
** Even though the method under test doesn't return a value, {{getCurrentDirectory()}} can be used
# The method under test requires a lot of external infrastructure to setup. Mocking all the dependencies is a significant effort (otherwise, I suppose it's not a *unit* test)
# I noticed that most of the test cases are not true unit test (integration tests) by inheriting from {{SftpServerTestSupport}}. I tried this approach too, but to perform the test, the {{sshd}} object in {{SftpServerTestSupport}} needs to be able to use the root dir ('/') as the home directory. I suspect that this would be an access violation on whatever continuous integration environment is used (i.e. I doubt root access is available on Apache's CI machine -- it'd be scary if it was)

Could you advise, particularly on point #3 (as I think the first two can be worked around easily by using the getter mentioned and making it an integration test)?",23/Aug/13 08:02;davsclaus;Should be fixed in recent code. Try upcoming releases.,,,,,,,,,,,,,,,,,,
camel-example-loan-broker - is broken on master,CAMEL-6658,12664991,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,22/Aug/13 07:05,23/Aug/13 06:39,13/Mar/19 22:19,23/Aug/13 06:39,2.12.0,,,,,,,,,2.12.0,,,,examples,,,,,,0,,,,,,,,,"mvn clean install -rf :camel-example-loan-broker

fails testing this example. 

{code}
Caused by: org.apache.camel.InvalidPayloadException: No body available of type: org.apache.camel.Exchange but has value: [[ssn:SSN bank:bank1 rate:3.9542535426930447]] of type: org.apache.cxf.message.MessageContentsList on: Message: [[ssn:SSN bank:bank1 rate:3.9542535426930447]]. Caused by: No type converter available to convert from type: org.apache.cxf.message.MessageContentsList to the required type: org.apache.camel.Exchange with value [[ssn:SSN bank:bank1 rate:3.9542535426930447]]. Exchange[Message: [[ssn:SSN bank:bank1 rate:3.9542535426930447]]]. Caused by: [org.apache.camel.NoTypeConversionAvailableException - No type converter available to convert from type: org.apache.cxf.message.MessageContentsList to the required type: org.apache.camel.Exchange with value [[ssn:SSN bank:bank1 rate:3.9542535426930447]]]
	at org.apache.camel.impl.MessageSupport.getMandatoryBody(MessageSupport.java:101)
	at org.apache.camel.builder.ExpressionBuilder$38.evaluate(ExpressionBuilder.java:936)
	... 12 more
Caused by: org.apache.camel.NoTypeConversionAvailableException: No type converter available to convert from type: org.apache.cxf.message.MessageContentsList to the required type: org.apache.camel.Exchange with value [[ssn:SSN bank:bank1 rate:3.9542535426930447]]
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.mandatoryConvertTo(BaseTypeConverterRegistry.java:181)
	at org.apache.camel.impl.MessageSupport.getMandatoryBody(MessageSupport.java:99)
	... 13 more
...
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,344932,,,Fri Aug 23 06:39:38 UTC 2013,,,,,,,0|i1nhdz:,345233,,,,,,,,,23/Aug/13 06:39;davsclaus;It was due a mistake in CAMEL-6650 in multicast EIP.,,,,,,,,,,,,,,,,,,,,,,,
endChoice() has no effect in nested choice definition,CAMEL-6447,12652166,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,syberyan,syberyan,11/Jun/13 07:22,22/Aug/13 20:42,13/Mar/19 22:19,22/Aug/13 20:38,2.11.0,,,,,,,,,2.11.2,2.12.0,,,camel-core,,,,,,2,,,,,,,,,"I just upgraded from 2.10.4 to 2.11.0 and noticed that nested choice definitions started acting strangely. For example:

{code:java}
            .choice()
                .when(header(Exchange.EXCEPTION_CAUGHT).isNotNull())
                    // 1
                    .setBody(exceptionMessage().append(SystemUtils.LINE_SEPARATOR).append(exceptionStackTrace()))
                    .choice()
                        .when(header(HEADER_CONTROLLER_ID).isNotNull())
                            // 1a
                            .setHeader(Exchange.FILE_NAME, simple(AUDIT_CONTROLLER_FAILED_FILENAME + "".error.log""))
                            .to(ENDPOINT_AUDIT_DIR)
                        .otherwise()
                            // 1b
                            .setHeader(Exchange.FILE_NAME, simple(AUDIT_FAILED_FILENAME + "".error.log""))
                            .to(ENDPOINT_AUDIT_DIR)
                            // INSERTING .end() here solves the issue
                        .endChoice()
                    .log(LoggingLevel.WARN, ""DLQ written: ${in.header.CamelExceptionCaught}""
                .otherwise()
                    // 2
                    .log(LoggingLevel.WARN, ""DLQ written"" + MESSAGE_LOG_FORMAT)
                .end()
{code}

I have a test that is supposed to go through 1 and 1a. However it now passes through 1 and 2!
It looks like the endChoice() in 1b has no effect and the otherwise() in 2 is executed instead of 1b. Inserting and end() statement as shown seems to solve the issue, but it looks suspicious.

It's probably a regression introduced by the fix for CAMEL-5953, but I'm not 100% sure. ",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-08-12 09:59:08.91,,,no_permission,,Unknown,,,,,,,,,,,332490,,,Thu Aug 22 20:42:16 UTC 2013,,,,,,,0|i1lcwf:,332819,Regression,,,,,,,,"12/Aug/13 09:59;robinbezuijen;It looks like this issue was introduced in 2.10.4

The problem is that adding the end() before the endChoice() will only work for 2.10.4 and above because it will break when using 2.10.3 with the following exception:

{code}
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'test-route': Invocation of init method failed; nested exception is java.lang.ClassCastException: org.apache.camel.model.RouteDefinition cannot be cast to org.apache.camel.model.ChoiceDefinition
	at org.apache.camel.model.ProcessorDefinition.endChoice(ProcessorDefinition.java:1256)
{code}


","20/Aug/13 14:19;dalewking;I see a slightly different but probably related problem. Here is a simple route to test it:

{noformat}
    <route>
        <from uri=""timer://myTimer?period=1&amp;repeatCount=1"" />
        <setHeader headerName=""test"">
            <constant>1</constant>
        </setHeader>
        <choice>
            <when>
                <simple>${header.test} &gt; 0</simple>
                <choice>
                    <when>
                        <simple>${header.test} &gt; 5</simple>
                        <log message=""Should not get here"" />
                    </when>
                    <otherwise>
                        <log message=""Should get here"" />
                    </otherwise>
                </choice>
            </when>
            <otherwise>
                <log message=""Why do I get here???"" />
            </otherwise>
        </choice>
    </route>
{noformat}

The output is:

{noformat}
    Should get here 
    Why do I get here???
{noformat}

So it executes both otherwise clauses, which is definitely wrong. I realize that the nesting is not necessary in this simple example, but where I found it, the inner choice was within a split and could not be eliminated. The outer choice was to actually handle the case for when the split would have nothing to split.","22/Aug/13 20:42;davsclaus;The problem mentioned by Dale, was caused by CAMEL-6364] and only affected trunk (eg 2.12). This has been fixed now.

The endChoice has been fixed on both trunk and 2.11 branch.",,,,,,,,,,,,,,,,,,,,,
camel-sap-netweaver throws JsonParseException when using json=false option,CAMEL-6663,12665078,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,janstey,janstey,22/Aug/13 17:12,22/Aug/13 17:14,13/Mar/19 22:19,22/Aug/13 17:14,,,,,,,,,,2.12.0,,,,,,,,,,0,,,,,,,,,"If you set json=false like:

{code}
sap-netweaver:https://sapes1.sapdevcenter.com/sap/opu/odata/IWFND/RMTSAMPLEFLIGHT/?username=USER&amp;password=PASS&amp;json=false
{code}

It will try and parse the body as JSON because jsonAsMap is still true. This is the result:

{code}
org.codehaus.jackson.JsonParseException: Unexpected character ('<' (code 60)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
 at [Source: java.io.StringReader@343eb53f; line: 1, column: 2]
	at org.codehaus.jackson.JsonParser._constructError(JsonParser.java:1433)[51:jackson-core-asl:1.9.10]
	at org.codehaus.jackson.impl.JsonParserMinimalBase._reportError(JsonParserMinimalBase.java:521)[51:jackson-core-asl:1.9.10]
	at org.codehaus.jackson.impl.JsonParserMinimalBase._reportUnexpectedChar(JsonParserMinimalBase.java:442)[51:jackson-core-asl:1.9.10]
	at org.codehaus.jackson.impl.ReaderBasedParser._handleUnexpectedValue(ReaderBasedParser.java:1198)[51:jackson-core-asl:1.9.10]
	at org.codehaus.jackson.impl.ReaderBasedParser.nextToken(ReaderBasedParser.java:485)[51:jackson-core-asl:1.9.10]
	at org.codehaus.jackson.map.ObjectMapper._initForReading(ObjectMapper.java:2770)[53:jackson-mapper-asl:1.9.10]
	at org.codehaus.jackson.map.ObjectMapper._readMapAndClose(ObjectMapper.java:2718)[53:jackson-mapper-asl:1.9.10]
	at org.codehaus.jackson.map.ObjectMapper.readValue(ObjectMapper.java:1863)[53:jackson-mapper-asl:1.9.10]
	at org.apache.camel.component.sap.netweaver.NetWeaverProducer.process(NetWeaverProducer.java:61)[237:org.apache.camel.camel-sap-netweaver:2.12.0.redhat-610030]
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)[131:org.apache.camel.camel-core:2.12.0.redhat-610030]
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:110)[131:org.apache.camel.camel-core:2.12.0.redhat-610030]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)[131:org.apache.camel.camel-core:2.12.0.redhat-610030]
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:163)[131:org.apache.camel.camel-core:2.12.0.redhat-610030]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398)[131:org.apache.camel.camel-core:2.12.0.redhat-610030]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:192)[131:org.apache.camel.camel-core:2.12.0.redhat-610030]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:118)[131:org.apache.camel.camel-core:2.12.0.redhat-610030]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)[131:org.apache.camel.camel-core:2.12.0.redhat-610030]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:192)[131:org.apache.camel.camel-core:2.12.0.redhat-610030]
	at org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:352)[131:org.apache.camel.camel-core:2.12.0.redhat-610030]
	at org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:199)[131:org.apache.camel.camel-core:2.12.0.redhat-610030]
	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:165)[131:org.apache.camel.camel-core:2.12.0.redhat-610030]
	at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:152)[131:org.apache.camel.camel-core:2.12.0.redhat-610030]
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:102)[131:org.apache.camel.camel-core:2.12.0.redhat-610030]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)[:1.7.0_25]
	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:351)[:1.7.0_25]
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:178)[:1.7.0_25]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:178)[:1.7.0_25]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)[:1.7.0_25]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)[:1.7.0_25]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)[:1.7.0_25]
	at java.lang.Thread.run(Thread.java:724)[:1.7.0_25]
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,345019,,,Thu Aug 22 17:14:45 UTC 2013,,,,,,,0|i1nhxb:,345320,,,,,,,,,22/Aug/13 17:14;janstey;http://git-wip-us.apache.org/repos/asf/camel/commit/922ea959,,,,,,,,,,,,,,,,,,,,,,,
camel-yammer - don't share requestor between different endpoint types,CAMEL-6662,12665065,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,janstey,janstey,22/Aug/13 16:05,22/Aug/13 16:17,13/Mar/19 22:19,22/Aug/13 16:17,,,,,,,,,,2.12.0,,,,,,,,,,0,,,,,,,,,This means that the same API connection info is used for say a messages consumer and users consumer - which is bad because they are supposed to connect to different yammer APIs.,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,345006,,,Thu Aug 22 16:17:15 UTC 2013,,,,,,,0|i1nhuf:,345307,,,,,,,,,22/Aug/13 16:17;janstey;https://git-wip-us.apache.org/repos/asf?p=camel.git;a=commit;h=bb4f2e5b,,,,,,,,,,,,,,,,,,,,,,,
spring-batch - Looses headers,CAMEL-6656,12664786,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,davsclaus,davsclaus,21/Aug/13 07:19,22/Aug/13 13:08,13/Mar/19 22:19,22/Aug/13 13:08,2.11.1,,,,,,,,,2.11.2,2.12.0,,,camel-spring-batch,,,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/camel-spring-batch-2-11-1-breaks-previous-working-routes-tp5737426.html",,,,,,,,,,,,,,,,,,,,,21/Aug/13 18:05;gardellajuanpablo;CAMEL-6656-testcase.zip;https://issues.apache.org/jira/secure/attachment/12599236/CAMEL-6656-testcase.zip,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-08-21 18:05:51.962,,,no_permission,,Unknown,,,,,,,,,,,344729,,,Wed Aug 21 18:05:51 UTC 2013,,,,,,,0|i1ng4n:,345029,,,,,,,,,21/Aug/13 18:05;gardellajuanpablo;I've attached a file with a test case that it works with camel 2.11.0,,,,,,,,,,,,,,,,,,,,,,,
Validation using JAXB format is not thread safe,CAMEL-6630,12663379,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,ales_d,ales_d,13/Aug/13 09:32,20/Aug/13 21:34,13/Mar/19 22:19,20/Aug/13 21:34,2.11.1,,,,,,,,,2.11.2,2.12.0,,,camel-core,,,,,,0,,,,,,,,,"I'm using JAXB format for unmarshaling. It is defined like this:

<dataFormats>
  <jaxb id=""kofax"" contextPath=""com.indracompany.telefonica.assignmanager""
      schema=""classpath:DocumentsDataForAssignManager.xsd""/>
</dataFormats>

And used in route like this:

<unmarshal ref=""kofax""/>

Sometimes however I get following exception:

org.xml.sax.SAXException: FWK005 parse may not be called while parsing.
	at com.sun.org.apache.xerces.internal.jaxp.validation.Util.toSAXException(Util.java:65) ~[na:1.7.0_21]
	at com.sun.org.apache.xerces.internal.jaxp.validation.XMLSchemaFactory.newSchema(XMLSchemaFactory.java:244) ~[na:1.7.0_21]
	at org.apache.camel.converter.jaxb.JaxbDataFormat.createUnmarshaller(JaxbDataFormat.java:347) ~[camel-jaxb-2.11.1.jar:2.11.1]
	at org.apache.camel.converter.jaxb.JaxbDataFormat.unmarshal(JaxbDataFormat.java:171) ~[camel-jaxb-2.11.1.jar:2.11.1]
	at org.apache.camel.processor.UnmarshalProcessor.process(UnmarshalProcessor.java:57) ~[camel-core-2.11.1.jar:2.11.1]

Seems that the problem is same as in CAMEL-1565. That ticket was however related to <validate> element.

Right now I have disabled validation on the jaxb format used for unmarshalling and put extra <validate> in the route. It would be however fine to have this issue fixed as well.",,14400,14400,,0%,14400,14400,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-08-16 22:13:53.233,,,no_permission,,Moderate,,,,,,,,,,,343380,,,Tue Aug 20 21:21:03 UTC 2013,,,,,,,0|i1n7uf:,343684,,,,,,,,,"16/Aug/13 22:13;muellerc;The reason is, the [SchemaFactory|http://download.java.net/jdk7/archive/b123/docs/api/javax/xml/validation/SchemaFactory.html] is not thread safe. WTF...","20/Aug/13 21:21;muellerc;I created an unit test which shows this issue.

The current implementation needs 9.9 seconds on my machine to unmarshall and 5.8 seconds to marshall 10000 sample xml strings/java objects (single threaded). Of course is fails in the multi threaded case...

By implementing the simplest solution (creating a new SchemaFactory instance per exchange), we got a performance penalty by 20% - 30%.
Because of this, I solved this by pooling the SchemaFactory instances using a LinkedBlockingQueue like we do it already in org.apache.camel.converter.jaxp.StaxConverter.",,,,,,,,,,,,,,,,,,,,,,
CXF FailoverFeature does not take effect when camel-cxf producer uses async invocation,CAMEL-6609,12661997,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,05/Aug/13 23:42,19/Aug/13 03:09,13/Mar/19 22:19,19/Aug/13 03:09,2.10.6,2.11.1,,,,,,,,2.10.7,2.11.2,2.12.0,,camel-cxf,,,,,,0,,,,,,,,,"CAMEL-6602 shows an user case which using the CXF failover feature within camel-cxf, the CXF failover feature doesn't work when the CxfProducer uses the async invocation.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,342001,,,Mon Aug 19 03:09:02 UTC 2013,,,,,,,0|i1mzcv:,342306,,,,,,,,,"19/Aug/13 03:09;njiang;Applied patch into master and camel-2.11.x and camel-2.10.x branches.

The code should be updated once we move to new version of CXF which has the local fix.",,,,,,,,,,,,,,,,,,,,,,,
potential NPE in CxfConsumer if the PAYLOAD not match the ServiceModel,CAMEL-6625,12663150,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ffang,ffang,ffang,12/Aug/13 06:59,15/Aug/13 06:49,13/Mar/19 22:19,15/Aug/13 06:49,,,,,,,,,,2.10.7,2.11.2,2.12.0,,camel-cxf,,,,,,0,,,,,,,,,"currently in CxfConsumer we have code like
{code}
                BindingOperationInfo boi = cxfExchange.getBindingOperationInfo();
                // make sure the ""boi"" is remained as wrapped in PAYLOAD mode
                if (dataFormat == DataFormat.PAYLOAD && boi.isUnwrapped()) {
                    boi = boi.getWrappedOperation();
                    cxfExchange.put(BindingOperationInfo.class, boi);
                }

{code}
however, the boi could be NULL if the message PAYLOAD not match the ServiceModel, which means can't determine the operation from the PAYLOAD, should add a NPE guarder before boi.isUnwrapped to avoid the NPE",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,343151,,,2013-08-12 06:59:14.0,,,,,,,0|i1n6fj:,343455,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Search critera for toSentDate throws NPE,CAMEL-6626,12663169,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,ales_d,ales_d,12/Aug/13 08:45,13/Aug/13 07:16,13/Mar/19 22:19,13/Aug/13 07:16,2.11.1,,,,,,,,,2.11.2,2.12.0,,,camel-mail,,,,,,0,easyfix,,,,,,,,"Use of searchTerm.toSentDate=now-24h (to poll only mails older than 24 hours) throws NPE. This is because MailConverters#toSearchTerm tries to build ""toSentDate"" criteria from ""fromSentDate"" value:

        if (simple.getToSentDate() != null) {
            String s = simple.getFromSentDate();
            if (s.startsWith(""now"")) {

The middle line should be:

            String s = simple.getToSentDate();
",,1800,1800,,0%,1800,1800,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-08-12 13:27:22.009,,,no_permission,,Novice,,,,,,,,,,,343170,,,Tue Aug 13 07:16:32 UTC 2013,,,,,,,0|i1n6jr:,343474,,,,,,,,,"12/Aug/13 08:55;ales_d;Looking at the code I see that other search criteria are wrong as well - namely:

toSentDate
fromReceivedDate
toReceivedDate

The problem is same in all cases - variable s is initialized from ""fromSentDate"".

The critera were probably created with ""copy-paste"" and the copied code not fixed.

Ales

","12/Aug/13 13:27;davsclaus;Ales, thanks for reporting.

Are you working on a patch to fix this?

We love contributions
http://camel.apache.org/contributing.html",12/Aug/13 14:28;davidkarlsen@gmail.com;https://github.com/apache/camel/pull/39,"12/Aug/13 15:45;ales_d;The pull request still contains one error left:

        if (simple.getFromReceivedDate() != null) {
            String s = simple.getFromSentDate();
            if (s.startsWith(""now"")) {",12/Aug/13 18:24;davidkarlsen@gmail.com;I've updated the branch.,13/Aug/13 07:16;njiang;Applied the patch into master and camel-2.11.x branches with thanks to Ales.,,,,,,,,,,,,,,,,,,
Splitter should close iterator if there was an exception and stopOnException enabled,CAMEL-6627,12663206,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,12/Aug/13 12:41,12/Aug/13 13:26,13/Mar/19 22:19,12/Aug/13 13:26,,,,,,,,,,2.10.7,2.11.2,2.12.0,,camel-core,eip,,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/moveFailed-is-failing-when-streaming-is-on-tp5737065.html

We should ensure the splitter iterator is closed when we are done with splitting due to an exception. The current logic only closes at the end, which you we wont reach if stopOnException is enabled.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,343207,,,2013-08-12 12:41:36.0,,,,,,,0|i1n6rz:,343511,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-cxf ClassCastException when use cxf FailoverFeature,CAMEL-6602,12661341,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,avina,avina,02/Aug/13 06:58,08/Aug/13 02:50,13/Mar/19 22:19,08/Aug/13 02:50,2.9.7,,,,,,,,,2.10.7,2.11.2,2.12.0,,camel-cxf,,,,,,0,,,,,,,,,"With PAYLOAD data format used, the first element in argument is casted to a CxfPayload instance and the argument is changed into a List<DOMSource> instance by the method ""setParameters"" in class org.apache.camel.component.cxf.CxfEndpoint.
Then FailoverFeature calls retry, the class-cast action throws a ClassCastException.
btw: ""message.remove(DataFormat.class)"" at the end of the method ""setParameters"" dosn't work. The method ""remove"" is inherited from Map, and a new message with data format PAYLOAD is created when retry.
",,,,,,,,,,,,,,,,,,,,,03/Aug/13 00:13;avina;test.zip;https://issues.apache.org/jira/secure/attachment/12595707/test.zip,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-08-02 08:13:27.616,,,no_permission,,Unknown,,,,,,,,,,,341530,,,Wed Aug 07 00:50:33 UTC 2013,,,,,,,0|i1mwgn:,341837,,,,,,,,,02/Aug/13 08:13;njiang;Can you submit a simple test case for us to dig the issue?,03/Aug/13 00:13;avina;a test case,"05/Aug/13 01:11;avina;About the test case:
I compared PAYLOAD with POJO. Both tests failed when the ""synchronous"" property set to ""false"". That's another problem I found. 
With ""synchronous=true"", POJO test passed but PAYLOAD test stuck.
A ClassCastException was thrown at line 869 in CxfEndpoint.java .
Detail:
 javax.xml.transform.dom.DOMSource cannot be cast to org.apache.camel.component.cxf.CxfPayload","05/Aug/13 12:56;njiang;I just fixed the ClassCastException, but it may take me some time to fix the synchronous issue.","07/Aug/13 00:50;njiang;Applied the patch into master, camel-2.11.x and camel-2.10.x branches.
Please check out the latest snapshot for verification.",,,,,,,,,,,,,,,,,,,
Always got IndexOutOfBoundsException when customized id of wireTap component,CAMEL-6610,12662074,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,gangliu,gangliu,06/Aug/13 09:12,08/Aug/13 02:46,13/Mar/19 22:19,08/Aug/13 00:50,2.11.1,2.11.2,,,,,,,,2.10.7,2.11.2,2.12.0,,camel-core,,,,,,0,,,,,,,,,"when I'm tring to execute below route:
{code}
from(""timer:foo"").wireTap(""direct:a"").id(""wiretap_1"").to(""log:a"");
from(""direct:a"").to(""log:b"");
{code}
I always got IndexOutOfBoundsException:
{color:red}
Exception in thread ""main"" java.lang.IndexOutOfBoundsException: Index: -1
	at java.util.Collections$EmptyList.get(Collections.java:3212)
	at org.apache.camel.model.ProcessorDefinition.id(ProcessorDefinition.java:1025)
	at org.talend.esb.liugang.camel.wiretap.TestWiretap$1.configure(TestWiretap.java:14)
	at org.apache.camel.builder.RouteBuilder.checkInitialized(RouteBuilder.java:322)
	at org.apache.camel.builder.RouteBuilder.configureRoutes(RouteBuilder.java:276)
	at org.apache.camel.builder.RouteBuilder.addRoutesToCamelContext(RouteBuilder.java:262)
	at org.apache.camel.impl.DefaultCamelContext.addRoutes(DefaultCamelContext.java:650)
	at org.talend.esb.liugang.camel.wiretap.TestWiretap.main(TestWiretap.java:10)
{color}
I tried on 2.11.1, 2.11.2-SNAPSHOT, both of them have the same problem (not sure 2.12-SNAPSHOT).",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-08-08 00:50:45.008,,,no_permission,,Unknown,,,,,,,,,,,342078,,,Thu Aug 08 02:46:29 UTC 2013,,,,,,,0|i1mztz:,342383,,,,,,,,,"08/Aug/13 00:50;njiang;Applied the patch into master, camel-2.11.x and camel-2.10.x.","08/Aug/13 02:46;gangliu;Great, Thanks.",,,,,,,,,,,,,,,,,,,,,,
RabbitMQConsumer doesn't put the body into message,CAMEL-6617,12662523,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,08/Aug/13 00:43,08/Aug/13 00:51,13/Mar/19 22:19,08/Aug/13 00:51,,,,,,,,,,2.12.0,,,,,,,,,,0,,,,,,,,,camel-rabbitmq component doesn't pass the body of the message down the line.,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,342526,,,Thu Aug 08 00:51:44 UTC 2013,,,,,,,0|i1n2lb:,342831,,,,,,,,,08/Aug/13 00:51;njiang;Applied the patch into master branch.,,,,,,,,,,,,,,,,,,,,,,,
Inserting JSON like data with sql component cause a java.lang.StackOverflowError,CAMEL-6561,12658514,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,saltnlight5,saltnlight5,18/Jul/13 13:06,07/Aug/13 10:05,13/Mar/19 22:19,07/Aug/13 10:05,2.11.0,,,,,,,,,2.11.2,2.12.0,,,camel-sql,,,,,,0,,,,,,,,,"I have a simple route use case like this:

{code}
<camel:camelContext id=""camel-server"" xmlns=""http://camel.apache.org/schema/spring"">
		<template id=""producerTemplate""/>
        <route>
			<from uri=""direct:SEND_MEMQ""/>
			<to uri=""sql:INSERT INTO CAMEL_TEST(MSG) VALUES(#)?dataSource=testdbDataSource""/>
			<to uri=""log:camel.demos.throughputtest.tcp.Stat?level=INFO&amp;groupSize=100""/>
        </route>
    </camel:camelContext>
{code}

The DB table is simple one like this:
{code}
/* H2Database */
DROP TABLE CAMEL_TEST;
CREATE TABLE CAMEL_TEST ( 
  ID BIGINT PRIMARY KEY AUTO_INCREMENT,
  MSG VARCHAR(10240),
  CREATE_TS TIMESTAMP DEFAULT NOW()
);
{code}

And then I use the producerTemplate to send a sample JSON content like data message (see attachment) into the ""direct:SEND_MEMQ"" (I read the full file and send it as String), and it produced the following severe error:

{code}
2013-07-18 08:34:00,593 ERROR pool-1-thread-1 [org.apache.camel.processor.DefaultErrorHandler] - Failed delivery for (MessageId: ID-L328BDS002012US-56371-1374150839469-0-1 on ExchangeId: ID-L328BDS002012US-56371-1374150839469-0-2). Exhausted after delivery attempt: 1 caught: org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[Message: {""web-app"": {
... 
... [Body clipped after 1000 chars, total length is 3467]]
        at org.apache.camel.util.ObjectHelper.wrapCamelExecutionException(ObjectHelper.java:1354)
        at org.apache.camel.impl.DefaultExchange.setException(DefaultExchange.java:272)
        at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:64)
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
        at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:122)
        at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:298)
        at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:117)
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
        at org.apache.camel.processor.interceptor.BacklogTracerInterceptor.process(BacklogTracerInterceptor.java:84)
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
        at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
        at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:390)
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:273)
        at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46)
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
        at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:335)
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:117)
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
        at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46)
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
        at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:122)
        at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48)
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
        at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:60)
        at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)
        at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:99)
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:86)
        at org.apache.camel.processor.UnitOfWorkProducer.process(UnitOfWorkProducer.java:63)
        at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:366)
        at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:337)
        at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:233)
        at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:337)
        at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:175)
        at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:111)
        at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:124)
        at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:131)
        at throughputtest.FileSampleProducer$1.run(FileSampleProducer.java:64)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:895)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:918)
        at java.lang.Thread.run(Thread.java:662)
Caused by: java.lang.StackOverflowError
        at java.util.regex.Pattern$GroupHead.match(Pattern.java:4168)
        at java.util.regex.Pattern$Loop.match(Pattern.java:4295)
        at java.util.regex.Pattern$GroupTail.match(Pattern.java:4227)
        at java.util.regex.Pattern$BranchConn.match(Pattern.java:4078)
        at java.util.regex.Pattern$CharProperty.match(Pattern.java:3345)
        at java.util.regex.Pattern$Branch.match(Pattern.java:4114)
        at java.util.regex.Pattern$GroupHead.match(Pattern.java:4168)
        at java.util.regex.Pattern$Loop.match(Pattern.java:4295)
        at java.util.regex.Pattern$GroupTail.match(Pattern.java:4227)
        at java.util.regex.Pattern$BranchConn.match(Pattern.java:4078)
        at java.util.regex.Pattern$CharProperty.match(Pattern.java:3345)
        at java.util.regex.Pattern$Branch.match(Pattern.java:4114)
        at java.util.regex.Pattern$GroupHead.match(Pattern.java:4168)
        at java.util.regex.Pattern$Loop.match(Pattern.java:4295)
        at java.util.regex.Pattern$GroupTail.match(Pattern.java:4227)

{code}",,,,,,,,,,,,,,,,,,,,,18/Jul/13 13:10;saltnlight5;sample1.json;https://issues.apache.org/jira/secure/attachment/12592967/sample1.json,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-07-22 15:35:56.634,,,no_permission,,Unknown,,,,,,,,,,,338708,,,Wed Aug 07 09:43:03 UTC 2013,,,,,,,0|i1mf5b:,339028,,,,,,,,,18/Jul/13 13:10;saltnlight5;Sample data that cause the error.,"19/Jul/13 02:41;saltnlight5;Hi,

I see where the problem is now. Since I send input message as plain String, the ""sql"" component automatically converts it to Iterator type for SQL parameters bindings. What's hidden is that default converter will also use a delimiter to parse the string! (I see this in ObjectHelper.java line 601, which uses a RegExp that happens to cause StackOverflowError with the input I give.

I can work around this by actually just send an Iterator type (List<String>) as message type instead of String. It then works as intended and not get the StackOverflowError problem. I should have done this in first place anyway since my input is large and not typical.

If you guys don't see this as problem to fix or improve, then please close it.

Thanks,
Zemian Deng","22/Jul/13 15:35;davsclaus;Yeah we could possible add a new option which tells the sql component to not iterate the body but use it as is, when you have only 1 parameter etc.","22/Jul/13 15:36;davsclaus;Zemian, do you want to work on a patch for such a new option?

Maybe the option is just named {{useIterator}} and is default {{true}}. Then ppl can turn that off.","23/Jul/13 02:48;saltnlight5;Sure Claus,

But before I add new option you suggested, I've discovered couple things that I would like to discuss first:

1) It looks like the latest code in master has a change in DefaultSqlPrepareStatementStrategy.java line  129 that prevented my test case to generate StackOverflowError. With this, it went and parsed the input into array and obviously give error because the size is mismatch to SQL binding parameters count. Which is expected.

However I see that DefaultSqlPrepareStatementStrategy did not check for this String input type when query has namedParameters (starting line 68) though. Is this intended?

2) As I hinted in previous comment, the StackOverflowError is really comes from ObjectHelper class. This is more concern to me. You can duplicate this bug by the following simple test case:
{code}

    @Test
    public void testCreateIteratorWithJsonThatBreakDelimiter() throws Exception {
        String input = readFromClasspath(""sample1.json"");
        Iterator<Object> result = ObjectHelper.createIterator(input);
        Assert.assertEquals(input, result.next());
    }
{code}

That means whoever calls any of these creatIterator() with bad input could potential get into StackOverflowError. The root cause is from ObjectHelper.java line 601. It parses input with some fancy regexp. Since its part of Camel Core, this is too risky and a bad error to expose to users by simply having bad inputs. I would recommend NOT to use that regexp but keep it minimal, fixed delimiter String to avoid this. What's your thought on this?

Zemian","30/Jul/13 10:30;davsclaus;Ad 2)
Working as designed, read the javadoc of the API

Ad 1)
Yes intended as named parameters requires Map like structure (key=value).","30/Jul/13 21:07;saltnlight5;Hi Claus,

For 1) Okay I see. Thanks for clarifying.

For 2) Do you mean to read the inline comment in ObjectHelper.java line 591-601, or the ObjectHelper#createIterator() method javadoc. I read both cases, and it doesn't indicate to me that it might throws StackOverflowError if input is String.

Well, I don't want to beat this defect to death. As I said, what changes you guys have in master branch already prevented this StackOverflowError when used with camel-sql in my particular case. Thus you may close this issue as it intended. 

However, I would just like to point out the ObjectHelper#createIterator() could still give StackOverflowError if user give a certain String as input.","07/Aug/13 09:43;davsclaus;If the expected parameters == 1 then we will use the body as is. This will fix this problem.
",,,,,,,,,,,,,,,,
Tokenize XML does not support child elements with names similar to their parent,CAMEL-6607,12661890,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,pjwalstrom,pjwalstrom,05/Aug/13 14:11,06/Aug/13 23:17,13/Mar/19 22:19,06/Aug/13 23:17,2.11.1,,,,,,,,,2.10.7,2.11.2,2.12.0,,camel-core,,,,,,2,,,,,,,,,"This XML will not split on Trip, as Trip has a child which starts with Trip
<Trip>
<Triptype>
</Triptype>
</Trip>

The bug was introduced in https://issues.apache.org/jira/browse/CAMEL-6004
I believe the regex in TokenXMLExpressionIterator needs to be fixed

see enclosed test",,,,,,,,,,,,,,,,,,,,,05/Aug/13 14:12;pjwalstrom;TokenizerTest.java;https://issues.apache.org/jira/secure/attachment/12596120/TokenizerTest.java,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-08-06 06:01:23.559,,,no_permission,,Unknown,,,,,,,,,,,341894,,,Tue Aug 06 23:17:31 UTC 2013,,,,,,,0|i1mypb:,342200,,,,,,,,,"06/Aug/13 06:01;njiang;Yeah, it's a bug of SCAN_BLOCK_TOKEN_REGEX_TEMPLATE, it should make sure it skip the validate xml token.
I will commit the code after running the whole tests.","06/Aug/13 23:17;njiang;Applied the patch into master, camel-2.11.x and camel-2.10.x branches.",,,,,,,,,,,,,,,,,,,,,,
Invalid javadoc for org.apache.camel.spi.ShutdownStrategy#setTimeout,CAMEL-6592,12660696,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,antoine.dessaigne,antoine.dessaigne,30/Jul/13 16:06,05/Aug/13 23:29,13/Mar/19 22:19,05/Aug/13 23:29,2.11.1,2.11.2,,,,,,,,2.10.7,2.11.2,2.12.0,,camel-core,,,,,,0,javadoc,,,,,,,,"The javadoc of {{org.apache.camel.spi.ShutdownStrategy#setTimeout}} is invalid.

It says that it's possible to set a negative or 0 value but the default implementation {{org.apache.camel.impl.DefaultShutdownStrategy#setTimeout}} will throw an {{IllegalArgumentException}}",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-07-31 03:25:03.38,,,no_permission,,Novice,,,,,,,,,,,340886,,,Wed Jul 31 03:25:03 UTC 2013,,,,,,,0|i1msjz:,341204,,,,,,,,,31/Jul/13 03:25;njiang;The IlleagelArgumentException is set by CAMEL-6341. I will go ahead and update the java doc.,,,,,,,,,,,,,,,,,,,,,,,
Routing slip and dynamic router EIP - Stream caching not working,CAMEL-6604,12661371,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,02/Aug/13 09:59,03/Aug/13 07:46,13/Mar/19 22:19,03/Aug/13 07:46,2.10.6,2.11.1,,,,,,,,2.10.7,2.11.2,2.12.0,,camel-core,,,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/stream-caching-to-HTTP-end-point-tp5736608.html",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,341560,,,2013-08-02 09:59:14.0,,,,,,,0|i1mwnb:,341867,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-netty-http - Must include HOST header in client and server must validate HOST header exists,CAMEL-6599,12661123,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,01/Aug/13 12:56,01/Aug/13 12:57,13/Mar/19 22:19,01/Aug/13 12:57,2.12.0,,,,,,,,,2.12.0,,,,camel-netty,,,,,,0,,,,,,,,,"The HTTP 1.1 spec requires a HOST header
http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html

The client should include the host
And the server should validate and send back http code 400 if HOST header is missing.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,341312,,,2013-08-01 12:56:27.0,,,,,,,0|i1mv6n:,341630,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix a potential NPE,CAMEL-6576,12659885,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,muellerc,muellerc,25/Jul/13 20:37,30/Jul/13 14:30,13/Mar/19 22:19,30/Jul/13 14:30,2.11.1,,,,,,,,,2.10.7,2.11.2,2.12.0,,camel-core,,,,,,0,,,,,,,,,"org.apache.camel.example.pojo_messaging.CamelContextTest.testCheckFiles

Stacktrace
java.lang.NullPointerException: null
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1626)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1540)
	at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:179)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1508)
	at org.apache.camel.test.junit4.CamelTestSupport.startCamelContext(CamelTestSupport.java:476)
	at org.apache.camel.test.junit4.CamelTestSupport.doSetUp(CamelTestSupport.java:310)
	at org.apache.camel.test.junit4.CamelTestSupport.setUp(CamelTestSupport.java:216)
	at org.apache.camel.example.pojo_messaging.CamelContextTest.setUp(CamelContextTest.java:32)


See [Jenkins build output|https://builds.apache.org/view/A-D/view/Camel/job/Camel.trunk.fulltest.spring3.1/229/org.apache.camel$camel-example-pojo-messaging/testReport/junit/org.apache.camel.example.pojo_messaging/CamelContextTest/testCheckFiles/] for details.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-07-27 10:05:22.174,,,no_permission,,Unknown,,,,,,,,,,,340077,,,Tue Jul 30 14:30:38 UTC 2013,,,,,,,0|i1mnkv:,340395,,,,,,,,,"27/Jul/13 10:05;davsclaus;See CAMEL-6485

We need to find a solution that has the performance improvements from CAMEL-6485 and avoids the NPE","30/Jul/13 08:23;davsclaus;I think I found a solution, doing some testing now.","30/Jul/13 14:30;davsclaus;Okay the JMX initialization logic was a bit more elaborate and thus decided to keep it on master only, to keep existing branches stable as is.",,,,,,,,,,,,,,,,,,,,,
adjust to the changed behavior in ehcache's CacheManager instance creation,CAMEL-6573,12659619,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ay,ay,ay,24/Jul/13 16:55,30/Jul/13 13:33,13/Mar/19 22:19,30/Jul/13 13:33,2.10.6,2.11.1,,,,,,,,2.10.7,2.11.2,2.12.0,,camel-cache,,,,,,0,,,,,,,,,"ehcache changed its cache manager creation behavior from version 2.5.1 to 2.5.2 and up. The previously used method no longer creates a new instance in the later version but simply returns a singlton instance. So this change needs to be accommodated in camel-cache.
",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,339812,,,2013-07-24 16:55:10.0,,,,,,,0|i1mly7:,340131,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Sftp cannot change to parent directory in a stepwise fashion,CAMEL-6335,12646164,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ay,rodehav,rodehav,06/May/13 07:08,30/Jul/13 07:42,13/Mar/19 22:19,30/Jul/13 07:42,2.10.2,2.10.3,2.10.4,2.11.0,2.9.4,2.9.5,2.9.6,2.9.7,,2.10.7,2.11.2,2.12.0,,camel-ftp,,,,,,0,,,,,,,,,"The problem occurs when using the sftp protocol with the stepwise option enabled and when polling a subdirectory.

When Camel has finished polling the subdirectory, it attempts to change directory back to the home directory in a stepwise fashion: Doing ""cd .."" one step at a time. This logic has a bug that causes it to try to change to a non-existing directory.

This has been discussed on the user mailing list:

http://mail-archives.apache.org/mod_mbox/camel-users/201305.mbox/%3CCAJ0TPGJ6gdaEuYgjpKG42HR-ozbyC0e5Z=mi2xRDmnonBtY0Eg@mail.gmail.com%3E
",,,,,,,,,,,,,,,,,,,,,07/May/13 11:07;rodehav;SftpOperations.java.patch;https://issues.apache.org/jira/secure/attachment/12582074/SftpOperations.java.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-05-27 09:40:59.472,,,no_permission,,Unknown,,,,,,,,,,,326522,,,Tue Jul 30 07:42:29 UTC 2013,,,,,,,0|i1kbxz:,326867,,,,,,,,,07/May/13 11:07;rodehav;Patch for removing the faulty code.,07/May/13 11:08;rodehav;I attached a patch for removing the code where I found the bug. It works for me but someone need to check why that code was created in the first place. It might have been for a good reason.,"07/May/13 11:18;rodehav;Browsing through SVN I noticed that the bug was introduced in version 1382039 on 2012-09-07. Cross referencing with the releases announced in the news feed, it means that the following versions all are affected by this bug:

* 2.9.4
* 2.9.5
* 2.9.6
* 2.9.7
* 2.10.2
* 2.10.3
* 2.10.4
* 2.11.0
","27/May/13 09:40;ay;i think simply removing the code will reintroduce old issues. The code was solving the normal stepwise operations in which we ensure the stepwise traversal moves the path upwards from the current directory to where it started without touching its upper directory where you may not have authorization to access.
CAMEL-5574

however, it appears that this code doesn't not work when the path is at the root (i.e., when the path is ""/"").
in that case, this code needs to be skipped as this special traversal is not needed.

regards, aki","24/Jun/13 18:02;rodehav;Sorry for the late comment. Aki, I don't understand why it is better to ""move the path upwards"" one directory at a time to avoid authorization problems. In fact, you will get more authorization problems if you change to every intermediate directory instead of changing directory ""in one go"". You might not be authorized to access the intermediate directories at all. This really does not make sense to me.","25/Jun/13 10:05;ay;Bengt,
The assumption is, if your ftp server requires stepwise traversal, you will anyway need access right to the segment you traverse.

While going down the path from the starting point using stepwise traversal, you can certainly go up stepwise to the starting point because you have accessed those segment before. The original stepwise traveral jumped to the root while going back and from there going down to the starting point. This can touch the segment outside of the previously accessed segment and resulted in the access error mentioned. And as I mentioned in my previous comment, this code must be skipped if the path is at the root but otherwise, it is needed.

regards, aki
","25/Jun/13 14:12;rodehav;Point well taken - if you are allowed to go down stepwise you are most likely allowed to go back up stepwise. I guess you want to go back up stepwise for the same reason you want to go down stepwise. I just have never understood what situations the stepwise functionality actually remedies. What ftp server does not allow you to change directory directly (""CD subdirA/subdirB"") but requires you to stop att every intermediate directory (""CD subdirA"" then ""CD subdirB"")? What does actually happen?

I'm not opposed to the stepwise functionality but I have never found a situation where I have needed it and I'm just curious abou this since stepwise has been chosen as the default option for Camel.

Anyway, I guess all that is needed is to fix the code according to your suggestion. Then we'll have the best of both worlds (stepwise and not).","25/Jun/13 14:16;rodehav;BTW, Aki, isn't the stepwise stepping up functionality also needed for ftp/ftps? For some reason this functionality is only added to sftp and not to ftp/ftps.","19/Jul/13 08:26;ay;Hi Bengt,
I committed the fix to trunk, 2.11.x, and 2.10.x. If you could try it out, that would be appreciated. 

Regarding the consolidation/refactoring of the ftp and sftp part of the code, you are right. This needs to be done. But for clarity, we should handle this explicitly in another ticket, as it will involve more changes.

thanks.
regards, aki",29/Jul/13 13:14;rodehav;Just back from vacation will test as soon as I can.,30/Jul/13 07:02;rodehav;I tested version 2.11.2-SNAPSHOT built on July 24. My test case that fails with version 2.11.0 now works. Good job!,"30/Jul/13 07:42;ay;Thanks to Bengt for his testing the patch.
",,,,,,,,,,,,
camel-cxf should shutdown the bus when the endpoint is stopped.,CAMEL-6585,12660327,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,29/Jul/13 06:29,29/Jul/13 07:26,13/Mar/19 22:19,29/Jul/13 07:26,2.10.6,2.11.1,,,,,,,,2.10.7,2.11.2,2.12.0,,camel-cxf,,,,,,0,,,,,,,,,"If the bus is create by cxfEndpoint itself, cxfEndpoint should shutdown it when the endpoint is stopped.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,340519,,,Mon Jul 29 07:26:05 UTC 2013,,,,,,,0|i1mqaf:,340837,,,,,,,,,"29/Jul/13 07:26;njiang;Applied the patch into master, camel-2.11.x and camel-2.10.x.",,,,,,,,,,,,,,,,,,,,,,,
Validator component - Loading resource on classpath with relative paths doesnt work in OSGi,CAMEL-6572,12659560,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,davsclaus,davsclaus,24/Jul/13 12:59,26/Jul/13 14:39,13/Mar/19 22:19,26/Jul/13 14:39,,,,,,,,,,2.11.2,2.12.0,,,camel-core,,,,,,0,,,,,,,,,"When loading a resource on the classpath with the validator component that uses xsd that imports other xsd's, and they import xsd using relative paths with ../.. to go back in the path, then that fails

an example
{code}
Caused by: java.io.FileNotFoundException: Cannot find resource in classpath for URI: schema/../../../structures/2.0/structures.xsd
	at org.apache.camel.util.ResourceHelper.resolveMandatoryResourceAsInputStream(ResourceHelper.java:106)
{code}

",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-07-25 02:38:23.674,,,no_permission,,Unknown,,,,,,,,,,,339753,,,Fri Jul 26 14:39:45 UTC 2013,,,,,,,0|i1mll3:,340072,,,,,,,,,24/Jul/13 15:03;davsclaus;Darn some more work is needed.,24/Jul/13 16:02;davsclaus;Could be CAMEL-5837 causing this regression,25/Jul/13 02:38;njiang;CAMEL-5837 is trying to build the relative path by looking up the baseURI from the SystemId. There is a object member relatedURI to trace the relative path. I guess this may cause some issue when the import xsd using relative paths which is related to the root of class path.,"26/Jul/13 08:35;njiang;This issue is caused by when the schema are imported more than once, the DefaultLSResourceResolver doesn't keeping tracking the resourceURI rightly.
","26/Jul/13 14:39;njiang;Applied the patch into trunk, camel-2.11.x branches.",,,,,,,,,,,,,,,,,,,
xslt component with saxon=true does not work in OSGi,CAMEL-6569,12659321,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,23/Jul/13 12:26,23/Jul/13 12:40,13/Mar/19 22:19,23/Jul/13 12:40,,,,,,,,,,2.11.2,2.12.0,,,camel-core,,,,,,0,,,,,,,,,"This is because camel-core does not import net.sf.saxon optionally where the saxon factory for xslt is located.

",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,339514,,,2013-07-23 12:26:42.0,,,,,,,0|i1mk4f:,339834,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ReplyManager holds a reference to the first calling Bundle classloader,CAMEL-6459,12652864,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,hbmann,hbmann,14/Jun/13 11:54,23/Jul/13 07:19,13/Mar/19 22:19,23/Jul/13 07:19,2.10.4,,,,,,,,,2.10.7,2.11.2,2.12.0,,camel-jms,,,,,,0,,,,,,,,,"h3. Source
The initialization of the ReplyManager is triggerd by the first processInOut method call at the JmsProducer.

The concrete instance of the ReplyManager creates on startup an AbstractMessageListenerContainer. The concrete listener container is generally a DefaultMessageListenerContainer which starts a new AsyncMessageListenerInvoker Thread. 

h3. OSGI Scenario
In an osgi envrironment this AsyncMessageListenerInvoker Thread has a class loader reference to the bundle who is triggerd by the first processInOut method call at the JmsProducer.

Let the calling bundle (A) be another bundle as bundle (B) which contains the JmsProducer the AsyncMessageListenerInvoker Thread holds a class loader reference to bundle (A).

Scenario:
* Bundle (A) calls a java service of Bundle (B) 
* Bundle (B) sends a jms message
* Bundle (B) receives a response of the jms message
* Bundle (B) returns the java service call to Bundle (A)

h3. Problem
At this point everything is alright but when Bundle (A) is undeployed and another Bundle (C) calls a java service of Bundle (B) the AsyncMessageListenerInvoker Thread has a class loader problem.



h3. StackTrace
BundleImpl.loadClass(String) line: 926
BundleClassLoader.findClass(String) line: 176
BundleClassLoader.loadClass(String, boolean) line: 194
BundleClassLoader(ClassLoader).loadClass(String) line: 248
Class<T>.forName0(String, boolean, ClassLoader) line: not available [native method]
Class<T>.forName(String, boolean, ClassLoader) line: 247
ClassLoadingAwareObjectInputStream.load(String, ClassLoader...) line: 77
ClassLoadingAwareObjectInputStream.resolveClass(ObjectStreamClass) line: 46
ClassLoadingAwareObjectInputStream(ObjectInputStream).readNonProxyDesc(boolean) line: 1574
ClassLoadingAwareObjectInputStream(ObjectInputStream).readClassDesc(boolean) line: 1495
ClassLoadingAwareObjectInputStream(ObjectInputStream).readOrdinaryObject(boolean) line: 1731
ClassLoadingAwareObjectInputStream(ObjectInputStream).readObject0(boolean) line: 1328
ClassLoadingAwareObjectInputStream(ObjectInputStream).readObject() line: 350
ActiveMQObjectMessage.getObject() line: 185
ActiveMQObjectMessage.toString() line: 226
MessageFormatter.safeObjectAppend(StringBuffer, Object) line: 304
MessageFormatter.deeplyAppendParameter(StringBuffer, Object, Map) line: 276
MessageFormatter.arrayFormat(String, Object[]) line: 230
MessageFormatter.format(String, Object, Object) line: 152
Slf4jLogger.debug(String, Object, Object) line: 300
PersistentQueueReplyManager(ReplyManagerSupport).onMessage(Message) line: 110
ExclusivePersistentQueueMessageListenerContainer(AbstractMessageListenerContainer).doInvokeListener(MessageListener, Message) line: 560
ExclusivePersistentQueueMessageListenerContainer(AbstractMessageListenerContainer).invokeListener(Session, Message) line: 498
ExclusivePersistentQueueMessageListenerContainer(AbstractMessageListenerContainer).doExecuteListener(Session, Message) line: 467
ExclusivePersistentQueueMessageListenerContainer(AbstractPollingMessageListenerContainer).doReceiveAndExecute(Object, Session, MessageConsumer, TransactionStatus) line: 325
ExclusivePersistentQueueMessageListenerContainer(AbstractPollingMessageListenerContainer).receiveAndExecute(Object, Session, MessageConsumer) line: 263
DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener() line: 1058
DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop() line: 1050
DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run() line: 947
Thread.run() line: 662 

h3. JMS Error
<suppressedExceptions class=""java.util.Collections$UnmodifiableRandomAccessList"" resolves-to=""java.util.Collections$UnmodifiableList""><c class=""list""/><list reference=""../c""/></suppressedExceptions><undeclaredThrowable class=""org.apache.camel.InvalidPayloadException""><detailMessage>No body available of type: TransactionServiceResponse but has value: [B@7b9554f9 of type: byte[] on: Message: &lt;?xml version='1.0' encoding='UTF-8'?>&lt;org.apache.camel.component.bean.BeanInvocation>&",Apache karaf 2.3.1,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-07-23 07:19:38.173,,,no_permission,,Unknown,,,,,,,,,,,333187,,,Tue Jul 23 07:19:38 UTC 2013,,,,,,,0|i1lh6v:,333515,,,,,,,,,23/Jul/13 07:19;davsclaus;Thanks for reporting.,,,,,,,,,,,,,,,,,,,,,,,
camel-quartz - Stateful job - Redeploying bundle/war and having changed endpoint uri issue,CAMEL-6461,12653140,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,17/Jun/13 07:28,22/Jul/13 15:32,13/Mar/19 22:19,22/Jul/13 15:32,2.10.4,,,,,,,,,2.10.7,2.11.2,2.12.0,,camel-quartz,,,,,,0,,,,,,,,,"See
http://camel.465427.n5.nabble.com/In-came-quartz-route-after-bundle-update-jobs-are-not-triggred-tp5734196.html

In these situations we should use job.name to name the job unique so when you change the endpoint uri and redeploy the apps/bundles, then camel-quartz can find the old job in the quartz persistent store.

There may be logic needed to lookup using job.name as the unique name in these situations, and then allow endpoint uri options to change over time, such as the cron trigger etc. Which should be adjusted accordingly as well.",,,,,,,,,,,,,,,,,,,,,20/Jul/13 17:52;saltnlight5;CAMEL-6461-v2.patch;https://issues.apache.org/jira/secure/attachment/12593354/CAMEL-6461-v2.patch,20/Jul/13 05:50;saltnlight5;CAMEL-6461.patch;https://issues.apache.org/jira/secure/attachment/12593321/CAMEL-6461.patch,,,,,2.0,,,,,,,,,,,,,,,,,,,2013-07-19 21:33:48.885,,,no_permission,,Unknown,,,,,,,,,,,333463,,,Mon Jul 22 15:32:38 UTC 2013,,,,,,,0|i1liw7:,333791,,,,,,,,,"19/Jul/13 21:33;saltnlight5;Hello Claus,

I can confirm this problem. Further more, this problem only occur if we enabled Quartz clustering. For non-cluster config, the quartz endpoint will remove the job data upon restart.

I also tried by given job.name unique name, but still same problem.

I would propose to look up the endpoint by trigerName and avoid to store the endpointUri into the jobDetail dataMap to avoid this kind of mismatched problem.","20/Jul/13 05:50;saltnlight5;I have a patch (git diff) that changed the lookup of endpoint by trigger name and group. This is done in CamelJob.java

Also I have to change QuartzComponent.java on how to handle existing trigger. It didn't set the correct job name/group before. So the patch will do that properly.","20/Jul/13 14:04;saltnlight5;I noticed my patch has cause this test to fail: QuartzCronRouteWithSmallCacheTest

I am not familiar with the endpoint caching. Would anyone know how exactly does the endpoints are removed and should be recreated when caching is full? What methods are called on QuartzEndpoint when this happens?
 ","20/Jul/13 17:52;saltnlight5;Okay, I see my own mistake in my patch now (I retrieved the wrong group name during lookup.), so I have uploaded second patch: CAMEL-6461-v2.path

This time all tests in camel-quartz passed.",22/Jul/13 15:32;davsclaus;Thanks for the patch.,,,,,,,,,,,,,,,,,,,
[JDBC Component] ResultMetaData as a header value - IndexOutOfBoundsException,CAMEL-6560,12658473,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,rkraus,rkraus,18/Jul/13 08:44,22/Jul/13 12:53,13/Mar/19 22:19,18/Jul/13 11:45,2.11.1,,,,,,,,,2.11.2,,,,camel-jdbc,,,,,,0,,,,,,,,,"The {{java.lang.IndexOutOfBoundsException: Index: 0, Size: 0}} exception is thrown, if select statement returns empty result.

The correction is already made in version 2.12.0, see issue [CAMEL-6157|https://issues.apache.org/jira/browse/CAMEL-6157], but this 'Parametrized queries in JDBC component' issue looks as more complex. 

It will be nice to fix only this exception in version 2.11.2. I attached the extended {{JdbcRSMetaDataTest.java}} and fixed {{JdbcProducer.java}} as patch (based on tag {{camel-2.11.1}}). 
",,,,,,,,,,,,CAMEL-6566,,CAMEL-5383,CAMEL-6157,,,,,,18/Jul/13 08:45;rkraus;camel-jdbc-result-metada.patch;https://issues.apache.org/jira/secure/attachment/12592937/camel-jdbc-result-metada.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-07-18 11:45:36.62,,,no_permission,,Novice,,,,,,,,,,,338667,,,Thu Jul 18 11:45:36 UTC 2013,,,Patch Available,,,,0|i1mew7:,338987,,,,,,,,,18/Jul/13 11:45;davsclaus;Thanks for the patch.,,,,,,,,,,,,,,,,,,,,,,,
FileUtil.getDefaultTempDir() causes a classloader leak in webapps,CAMEL-6452,12652556,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,sanjayd,sanjayd,13/Jun/13 04:29,17/Jul/13 11:41,13/Mar/19 22:19,17/Jul/13 11:41,2.10.4,,,,,,,,,2.10.7,2.11.2,2.12.0,,camel-core,,,,,,0,,,,,,,,,"FileUtil.getDefaultTempDir() registers a JVM shutdown hook to delete the temporary directory it creates. We are using camel in a web application in Tomcat that gets dynamically reloaded as updates are available, so the JVM is normally never shut down. This is causing 'camel-tmp-*' directories to linger in $CATALINA_HOME/temp, and - more importantly - classloader leaks, which are a major problem for us.

If the thread that gets registered as the shutdown hook were stored in a class variable, I could unregister it when the application is being unloaded.","tomcat 7, spring 3.2",,,,,,,,,,,,,,,,,,,,13/Jun/13 21:57;sanjayd;0001-Fixed-CAMEL-6452-by-adding-a-cleanup-routine-to-remo.patch;https://issues.apache.org/jira/secure/attachment/12587716/0001-Fixed-CAMEL-6452-by-adding-a-cleanup-routine-to-remo.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-06-14 00:35:56.978,,,no_permission,,Unknown,,,,,,,,,,,332880,,,Wed Jul 17 11:41:53 UTC 2013,,,Patch Available,,,,0|i1lfan:,333208,,,,,,,,,13/Jun/13 21:57;sanjayd;Patch to fix issue,"14/Jun/13 00:35;njiang;Hi Sanjay,

I just have a quick look of the path, it looks like you add a cleanup to the FileUtil, but I didn't found the place where you call it. 
Can you give us more detail about unload the application?

Willem","14/Jun/13 02:34;sanjayd;Hey Willem,

I had planned on leaving it up to the application to call this method when it is unloaded from the app container. I suppose it could also be called from the shutdown routine of a CamelContext, but then that assumes that the app only has one context.

The problem I'm running into is basically that any webapp that runs in an app container and expects to be periodically reloaded will register a new shutdown hook in the same JVM each time the app is loaded. Unless these hooks are removed when each instance is unloaded, all the classloaders will remain in memory and the app container will eventually run out of PermGen space.

Adding this optional cleanup method will enable apps that run in an app container to remove their shutdown hook on their own so their classloaders can be garbage collected, and the app container can continue on. Those apps who expect the JVM to terminate when they are finished executing won't have to call it, and they will continue working as they do now.

Thanks!

Sanjay","14/Jun/13 06:22;davsclaus;First thanks for reporting this issue with the leak.

I think a better approach is to add a UtilService class in the util package. This class should extends ServiceSupport from the support package. Then we register this as a service to DefaultCamelContext in its doStartCamel() method.

Then we have callbacks for doStart / doStop in the UtilService class where we can do out needed logic, when Camel is starting / stopping.

This also means the default temp dir logic should be *per CamelContext* instead of *per JVM*. This also works much better in WAR containers / OSGi containers et all; where people can hot and redeploy apps. Having JVM hooks and static classes that are initialized with a == null check is (becoming) a bad practice IMHO.

","14/Jun/13 06:50;davsclaus;Well even better this FileUtil temp dir logic is only used when stream caching is enabled. We should ideally IMHO have StreamCaching setup its temp dir it want to use, and cleanup it as well. And remove the logic from the FileUtil so its not required to delete using a JVM shutdown hook.

Then we should also make configuring this on stream caching easier and more ""Camelish"" as today you set some properties on CamelContext. Instead of using a <streamCache tempDir=""xxx"" threshold=""64mb"" xxx/> or something. And then we should expose this in JMX so people can see StreamCacheService in JMX and how its configured. And maybe even reconfigured it at runtime etc.","15/Jun/13 16:24;sanjayd;Awesome - that gives me a lot more context and definitely sounds like the way to go. I like the per-context or per-streamcache temp dir that gets removed when the context or cache shuts down.

In the meantime, in case anyone else runs into this issue, here's the workaround (i.e. hack) that I added to the cleanup routine of our project:

{code}
    public void cleanShutdownHook() throws Exception {
        Class<?> klass = Class.forName(""java.lang.ApplicationShutdownHooks"");
        Field field = klass.getDeclaredField(""hooks"");
        field.setAccessible(true);

        @SuppressWarnings(""unchecked"")
        Map<Thread, Thread> hooks = (Map<Thread, Thread>) field.get(null);
        Thread target = null;
        for(Thread thread: hooks.values()) {
            if (thread.getClass().getName().equals(""org.apache.camel.util.FileUtil$1"")) {
                target = thread;
                break;
            }
        }

        if (target != null) {
            Runtime.getRuntime().removeShutdownHook(target);
        }
    }
{code}","17/Jul/13 11:41;davsclaus;Thanks for the patch.

There is a static shutdown method on FileUtil you can use to cleanup this in 2.11 and 2.10 releases.

For Camel 2.12 we introduce StreamCachingStrategy that handles this out of the box, and avoid using static stuff etc. So it becomes per CamelContext instead.",,,,,,,,,,,,,,,,,
Installation of camel-leveldb feature fails,CAMEL-6547,12657582,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,muellerc,muellerc,13/Jul/13 11:18,14/Jul/13 20:31,13/Mar/19 22:19,14/Jul/13 20:31,2.11.1,,,,,,,,,2.11.2,,,,karaf,,,,,,0,,,,,,,,,"{noformat}
cmueller$ ./karaf clean
        __ __                  ____
       / //_/____ __________ _/ __/
      / ,<  / __ `/ ___/ __ `/ /_
     / /| |/ /_/ / /  / /_/ / __/
    /_/ |_|\__,_/_/   \__,_/_/

  Apache Karaf (2.3.1)

Hit '<tab>' for a list of available commands
and '[cmd] --help' for help on a specific command.
Hit '<ctrl-d>' or type 'osgi:shutdown' or 'logout' to shutdown Karaf.

karaf@root> features:chooseurl camel 2.11.1
adding feature url mvn:org.apache.camel.karaf/apache-camel/2.11.1/xml/features
karaf@root> features:install camel-leveldb
Error executing command: Could not start bundle wrap:mvn:org.fusesource.leveldbjni/leveldbjni-all/1.6$Bundle-Version=1.6&Export-Package=*;-noimport:=true;version=""1.6"" in feature(s) camel-leveldb-2.11.1: Unresolved constraint in bundle org.fusesource.leveldbjni.leveldbjni-all [62]: No matching native libraries found.
{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,337803,,,2013-07-13 11:18:24.0,,,,,,,0|i1m9kv:,338125,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Installation of camel-mybatis feature fails,CAMEL-6546,12657581,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,muellerc,muellerc,13/Jul/13 11:16,14/Jul/13 20:05,13/Mar/19 22:19,14/Jul/13 20:05,2.11.1,,,,,,,,,2.11.2,2.12.0,,,karaf,,,,,,0,,,,,,,,,"{noformat}
cmueller$ ./karaf clean
        __ __                  ____
       / //_/____ __________ _/ __/
      / ,<  / __ `/ ___/ __ `/ /_
     / /| |/ /_/ / /  / /_/ / __/
    /_/ |_|\__,_/_/   \__,_/_/

  Apache Karaf (2.3.1)

Hit '<tab>' for a list of available commands
and '[cmd] --help' for help on a specific command.
Hit '<ctrl-d>' or type 'osgi:shutdown' or 'logout' to shutdown Karaf.

karaf@root> features:chooseurl camel 2.11.1
adding feature url mvn:org.apache.camel.karaf/apache-camel/2.11.1/xml/features
karaf@root> features:install camel-mybatis
Error executing command: Could not start bundle mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.commons-dbcp/1.4_3 in feature(s) camel-quartz-2.11.1, camel-jpa-2.11.1, camel-bam-2.11.1, camel-mybatis-2.11.1, camel-ibatis-2.11.1: Unresolved constraint in bundle org.apache.servicemix.bundles.commons-dbcp [64]: Unable to resolve 64.0: missing requirement [64.0] osgi.wiring.package; (osgi.wiring.package=javax.transaction)
{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,337802,,,Sun Jul 14 20:05:37 UTC 2013,,,,,,,0|i1m9kn:,338124,,,,,,,,,14/Jul/13 20:05;muellerc;A work around for Camel 2.11.1 is to install camel-spring before.,,,,,,,,,,,,,,,,,,,,,,,
camel-test-blueprint - Using isMockEndpointsAndSkip doesnt work,CAMEL-6524,12656868,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,09/Jul/13 14:42,10/Jul/13 10:21,13/Mar/19 22:19,10/Jul/13 10:21,,,,,,,,,,2.11.2,2.12.0,,,camel-test,osgi,,,,,0,,,,,,,,,"Reported here:
http://fusesource.com/forums/thread.jspa?threadID=4835&tstart=0

Works with Spring but fails with blueprint.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,337091,,,2013-07-09 14:42:00.0,,,,,,,0|i1m57b:,337414,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-mina and camel-mina2 fail when configured with Spring or blueprint,CAMEL-6516,12656560,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,viecili,viecili,08/Jul/13 06:35,10/Jul/13 09:29,13/Mar/19 22:19,10/Jul/13 06:06,2.10.4,2.11.0,,,,,,,,2.10.7,2.11.1,2.12.0,,camel-mina,camel-mina2,,,,,0,,,,,,,,,"A user following the documentation at http://camel.apache.org/mina.html#MINA-ConfiguringMinaendpointsusingSpringbeanstyle will face an IllegalArgumentException because org.apache.camel.component.mina2.Mina2Component.createEndpoint(Mina2Configuration) calls createEndpoint(null, config) and does not implement/override org.apache.camel.impl.DefaultEndpoint.createEndpointUri()
 


Stack Trace:
java.lang.IllegalArgumentException: endpointUri is not specified and org.apache.camel.component.mina2.Mina2Endpoint does not implement createEndpointUri() to create a default value
        at org.apache.camel.impl.DefaultEndpoint.getEndpointUri(DefaultEndpoint.java:154)
(...)


Workaround: define the endpoint inline with mina:tcp://[host]...",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-07-08 07:11:49.839,,,no_permission,,Novice,,,,,,,,,,,336783,,,Wed Jul 10 06:06:03 UTC 2013,,,,,,,0|i1m3av:,337106,,,,,,,,,"08/Jul/13 07:11;njiang;You can workaround it by applying the endpoint uri parameter yourself when creating the mina endpoint.
{code}
<bean id=""myMinaEndpoint""
      factory-bean=""myMinaFactory""
      factory-method=""createEndpoint"">
    <!-- pass the endpoint uri into the createEndpoint method -->
    <constructor-arg index=""0"" val=""mina://myMinaConfig"" />
    <!-- and here we can pass it our configuration -->
    <constructor-arg index=""1"" ref=""myMinaConfig""/>
</bean>
{code} ","08/Jul/13 08:02;njiang;I just did a simple test on the camel trunk, the endpointUri will be set with the endpoint name like ""myMinaEndpoint"". I will updated the code by using the endpoint uri which can reflects the config setting. ",08/Jul/13 12:57;viecili;bare in mind the method taking these 2 arguments is 'protected' as it may affect other injection frameworks,10/Jul/13 06:06;njiang;Applied the patch into master and camel-2.11.x and camel-2.10.x branches.,,,,,,,,,,,,,,,,,,,,
Copy of GenericFileMessage returns NULL from toString,CAMEL-6499,12655315,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,akarpe,ales_d,ales_d,28/Jun/13 12:16,02/Jul/13 03:48,13/Mar/19 22:19,02/Jul/13 03:48,2.11.0,,,,,,,,,2.12.0,,,,camel-core,,,,,,0,,,,,,,,,"CAMEL-3060 changed GenericFileMessage#toString to output just file name instead of it's content. However copies of message do not have file field set and thus return null from toString method. In my application actually all routed messages are copies and thus I see just ""null"" in my logs files.

The copies are created by constructor: org.apache.camel.impl.DefaultUnitOfWork.DefaultUnitOfWork(Exchange exchange, Logger logger). The code seems like ""dirty hack"" in sense that it treats JmsMessage specially and all other messages handle by:

this.originalInMessage = exchange.getIn().copy();

There is no override of copy() method (provided by MessageSupport) in GenericFileMessage. This leads to lose of value of the internal file property.

---

I'm not sure if the problem missing override of copy() method or if it is pretty ""legal"" to have GenericFileMessage without file.

I'm, on the other hand, pretty sure that returning NULL from toString() is BAD practise. The method should stick to java.lang.Object behavior if it does not know what to print:

    @Override
    public String toString() {
        // only output the filename as body can be big
        if (file != null) {
            return file.getFileName();
        }
        return getClass().getName() + ""@"" + Integer.toHexString(hashCode());
    }


Ales",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-07-02 03:48:00.447,,,no_permission,,Novice,,,,,,,,,,,335592,,,Tue Jul 02 03:48:00 UTC 2013,,,,,,,0|i1lvyn:,335916,,,,,,,,,"02/Jul/13 03:48;akarpe;Fixed issue, added unit test, verified against checkstyle and committed in Git trunk as commit id  7b002c732f021f624eb404965f54ac313afd82a3

",,,,,,,,,,,,,,,,,,,,,,,
Karaf features file points to wrong CXF features version,CAMEL-6492,12654912,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,gertvanthienen,gertvanthienen,26/Jun/13 11:27,27/Jun/13 21:24,13/Mar/19 22:19,27/Jun/13 21:24,2.10.5,,,,,,,,,2.10.6,,,,karaf,,,,,,0,,,,,,,,,"The https://repository.apache.org/content/repositories/releases/org/apache/camel/karaf/apache-camel/2.10.5/apache-camel-2.10.5-features.xml file refers to version 2.6.6.1 of the CXF features descriptor, while the Camel 2.10.5 is actually using the CXF 2.6.8 version instead.",,,,,,,,,,,,CAMEL-6496,,SMX4-1486,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,335189,,,2013-06-26 11:27:38.0,,,,,,,0|i1lthb:,335513,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Deadlock in camel netty while sending messages to multiple tcp endpoints in single route,CAMEL-6449,12652326,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,kiranreddykasa,kiranreddykasa,12/Jun/13 06:29,14/Jun/13 17:01,13/Mar/19 22:19,14/Jun/13 13:34,2.10.4,2.11.0,,,,,,,,2.10.5,2.11.1,2.12.0,,camel-netty,,,,,,0,,,,,,,,,"we are getting the following exception when trying to use more than two netty endpoints in a single route. 

java.lang.IllegalStateException: await*() in I/O thread causes a dead lock or sudden performance drop. Use addListener() instead or call await*() from a different thread. 

Sample route : 

                                             from(""netty:tcp://localhost:7000textline=true"")                               .bean(DummyProcessor.class) 
.to(""netty:tcp://localhost:7001?textline=true"")                                 .bean(DummyProcessor.class) 
.to(""netty:tcp://localhost:7002?textline=true"") 
.bean(DummyProcessor.class) 
.to(""netty:tcp://localhost:7003?textline=true"") 
.bean(DummyProcessor.class) 
.to(""netty:tcp://localhost:7004?textline=true"") 
.bean(DummyProcessor.class); 

camel version : 2.11 
netty 3.6.5

The same is working in 2.10.3 version. ",,,,,,,,,,,,,,CAMEL-6442,,,,,,,12/Jun/13 06:43;kiranreddykasa;MainCamelTest.zip;https://issues.apache.org/jira/secure/attachment/12587386/MainCamelTest.zip,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-06-14 16:26:00.122,,,no_permission,,Unknown,,,,,,,,,,,332650,,,Fri Jun 14 17:01:24 UTC 2013,,,,,,,0|i1ldvr:,332979,,,,,,,,,12/Jun/13 06:43;kiranreddykasa;Test case for simulating the same.It is failing with both 2.10.4 and 2.11.0,"14/Jun/13 16:26;njiang;Hi kiran,
As you know this issue is fixed last week. Can you check out the last camel 2.12-SNAPSHOT to verify the fix?",14/Jun/13 17:01;kiranreddykasa;Ya i have tested with 2.12-SNAPSHOT and it's working.,,,,,,,,,,,,,,,,,,,,,
camel-netty-http route throws java.lang.IllegalStateException,CAMEL-6442,12651849,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,08/Jun/13 08:53,14/Jun/13 13:34,13/Mar/19 22:19,09/Jun/13 02:02,2.10.4,2.11.0,,,,,,,,2.10.5,2.11.1,2.12.0,,camel-netty,,,,,,0,,,,,,,,,"I just create a simple proxy route by using camel-netty-http component like this
{code}
        <route id=""front"">
            <from uri=""netty-http:http://0.0.0.0:9001/test"" />
            <to uri=""netty-http:http://localhost:9090/foo"" />
        </route>

        <route id=""back"">
            <from uri=""netty-http:http://0.0.0.0:9090/foo"" />
            <transform>
              <simple>hello world</simple>
            </transform>
        </route>

{code}

When I send the get request to http://localhost:9001/test, I got below exception
{code}
java.lang.IllegalStateException: await*() in I/O thread causes a dead lock or sudden performance drop. Use addListener() instead or call await*() from a different thread.
	at org.jboss.netty.channel.DefaultChannelFuture.checkDeadLock(DefaultChannelFuture.java:342)
	at org.jboss.netty.channel.DefaultChannelFuture.await0(DefaultChannelFuture.java:306)
	at org.jboss.netty.channel.DefaultChannelFuture.awaitUninterruptibly(DefaultChannelFuture.java:285)
	at org.apache.camel.component.netty.NettyProducer.openChannel(NettyProducer.java:402)
	at org.apache.camel.component.netty.NettyProducer$NettyProducerPoolableObjectFactory.makeObject(NettyProducer.java:473)
	at org.apache.camel.component.netty.NettyProducer$NettyProducerPoolableObjectFactory.makeObject(NettyProducer.java:468)
	at org.apache.commons.pool.impl.GenericObjectPool.borrowObject(GenericObjectPool.java:1188)
	at org.apache.camel.component.netty.NettyProducer.process(NettyProducer.java:210)
	at org.apache.camel.component.netty.http.NettyHttpProducer.process(NettyHttpProducer.java:49)
	at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:123)
	at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:298)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:118)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:388)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:189)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:189)
	at org.apache.camel.component.netty.handlers.ServerChannelHandler.processAsynchronously(ServerChannelHandler.java:118)
	at org.apache.camel.component.netty.handlers.ServerChannelHandler.messageReceived(ServerChannelHandler.java:102)
	at org.apache.camel.component.netty.http.handlers.HttpServerChannelHandler.messageReceived(HttpServerChannelHandler.java:97)
	at org.jboss.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:70)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)
	at org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendUpstream(DefaultChannelPipeline.java:791)
	at org.jboss.netty.handler.codec.http.HttpChunkAggregator.messageReceived(HttpChunkAggregator.java:145)
	at org.jboss.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:70)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)
	at org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendUpstream(DefaultChannelPipeline.java:791)
	at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:296)
	at org.jboss.netty.handler.codec.frame.FrameDecoder.unfoldAndFireMessageReceived(FrameDecoder.java:459)
	at org.jboss.netty.handler.codec.replay.ReplayingDecoder.callDecode(ReplayingDecoder.java:536)
	at org.jboss.netty.handler.codec.replay.ReplayingDecoder.messageReceived(ReplayingDecoder.java:435)
	at org.jboss.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:70)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:559)
	at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:268)
	at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:255)
	at org.jboss.netty.channel.socket.nio.NioWorker.read(NioWorker.java:88)
	at org.jboss.netty.channel.socket.nio.AbstractNioWorker.process(AbstractNioWorker.java:109)
	at org.jboss.netty.channel.socket.nio.AbstractNioSelector.run(AbstractNioSelector.java:312)
	at org.jboss.netty.channel.socket.nio.AbstractNioWorker.run(AbstractNioWorker.java:90)
	at org.jboss.netty.channel.socket.nio.NioWorker.run(NioWorker.java:178)
	at org.jboss.netty.util.ThreadRenamingRunnable.run(ThreadRenamingRunnable.java:108)
	at org.jboss.netty.util.internal.DeadLockProofWorker$1.run(DeadLockProofWorker.java:42)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:895)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:918)
	at java.lang.Thread.run(Thread.java:680)
{code}
",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,332173,,,Sun Jun 09 02:02:19 UTC 2013,,,,,,,0|i1lay7:,332502,,,,,,,,,"09/Jun/13 02:02;njiang;Applied the patch and unit test into trunk.
Here is the [blog|http://nitschinger.at/Never-await-Uninterruptibly-on-Netty-Channels] which helped me to resolve the issue.",,,,,,,,,,,,,,,,,,,,,,,
AdviceWith doesn't work with doTry,CAMEL-6300,12643838,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,pjuza,pjuza,21/Apr/13 19:50,09/Jun/13 20:20,13/Mar/19 22:19,22/Apr/13 15:10,2.10.4,,,,,,,,,2.10.5,2.11.1,2.12.0,,tests,,,,,,0,,,,,,,,,"I have the following route definition:
{code}
        from(""direct:billing_"" + operation)
                .routeId(getRouteId(operation))
                .errorHandler(noErrorHandler()) // propagate exceptions to the parent route

                .validate(body().isInstanceOf(
                        com.cleverlance.cleverbss.integration.modules.in.customer.model.Customer.class))

                .beanRef(BILLING_CUSTOMER_ROUTE_BEAN, ""createRequestFor"" + WordUtils.capitalize(operation))

                 // SetCustomer -> XML
                .marshal(jaxbIn)

                .doTry()
                    .to(uri + ""?messageSender=#billingSender"").id(""toURI"")
                .doCatch(AlreadyExistsException.class)
                    .setProperty(exPropertyName, property(Exchange.EXCEPTION_CAUGHT))
                .end()

                .choice()
                    .when(property(exPropertyName).isNull())

                    // XML -> SetCustomerResponse
                    .unmarshal(jaxbOut)
                .endChoice();
{code}

And I would like to replace TO in the tests:
{code}
        getCamelContext().getRouteDefinition(BillingCustomerRoutes.ROUTE_ID_UPDATE_CUSTOMER)
                .adviceWith(getCamelContext(), new AdviceWithRouteBuilder() {
                    @Override
                    public void configure() throws Exception {                        
                        weaveByType(ToDefinition.class).replace().process(new Processor() {
                            @Override
                            public void process(Exchange exchange) throws Exception {
                                throw new AlreadyExistsException(""msg"", new AlreadyExists());
                            }
                        });
                    }
                });
{code}

When I use weaveById(""toURI"") or weaveByToString(), it doesn't work neither.","Java 6, macos",,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-04-22 14:46:36.25,,,no_permission,,Unknown,,,,,,,,,,,324205,,,Sun Jun 09 20:20:43 UTC 2013,,,,,,,0|i1jxnz:,324550,,,,,,,,,21/Apr/13 19:53;pjuza;Similar problems - http://camel.465427.n5.nabble.com/Mocking-an-endpoint-within-a-try-catch-block-td5727081.html,22/Apr/13 14:46;davsclaus;Need to merge to 2.11 branch when its setup,"09/Jun/13 20:20;pjuza;Please, is any workaround for this bug? 
We aren't able to test every route where we use doTry-doCatch ...",,,,,,,,,,,,,,,,,,,,,
baseResource of Jetty ServletContextHandler does not work when project deployed as a bundle,CAMEL-6432,12651268,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,cmoulliard,cmoulliard,cmoulliard,06/Jun/13 05:16,07/Jun/13 13:16,13/Mar/19 22:19,07/Jun/13 13:16,2.11.0,2.12.0,,,,,,,,,,,,camel-websocket,,,,,,0,,,,,,,,,"If we package a camel websocket route (""websocket://0.0.0.0:9090/newsTopic?sendToAll=true&staticResources=classpath:webapp"") as a bundle and set the staticResources as parameter (classpath:webapp), then the pages cannot be accessed from the browser

Code should be 

{code}
            if (resources[0].equals(""classpath"")) {
                URL url = this.getCamelContext().getClassResolver().loadResourceAsURL(resources[1]);
                context.setBaseResource(Resource.newResource(url));
            } else if (resources[0].equals(""file"")) {
                context.setBaseResource(Resource.newResource(resources[1]));
            }
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,331594,,,Fri Jun 07 13:16:51 UTC 2013,,,,,,,0|i1l7en:,331925,,,,,,,,,"07/Jun/13 13:16;cmoulliard;Code committed for 2.12-SNAPSHOT, 2.11.1-SNAPSHOT",,,,,,,,,,,,,,,,,,,,,,,
The configAdminFileName property does not be picked up when run command: mvn camel:run,CAMEL-6434,12651287,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,xiaohui.wu,xiaohui.wu,06/Jun/13 08:19,06/Jun/13 13:51,13/Mar/19 22:19,06/Jun/13 13:51,,,,,,,,,,2.12.0,,,,tooling,,,,,,0,,,,,,,,,"When running command: mvn camel:run, I know that the config file name and PID can be passed through the configuration in pom.xml like :

			<plugin>
				<groupId>org.apache.camel</groupId>
				<artifactId>camel-maven-plugin</artifactId>
				<version>${camel.version}</version>
				<configuration>
					<useBlueprint>true</useBlueprint>
					<configAdminPid>ConfigApp</configAdminPid>
					<configAdminFileName>/opt/jboss-fuse/jboss-fuse-6.0.0.redhat-024/deploy/ConfigApp.cfg</configAdminFileName>
				</configuration>
			</plugin>
But when I tried to run the command: mvn camel:run to get the content from the config file, I found that only configAdminPid is recognized, while the configAdminFileName did not been picked up.

The stack trace is:
[ERROR] Error occurred while running main from: org.apache.camel.test.blueprint.Main
[ERROR] 
java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.camel.maven.RunMojo$1.run(RunMojo.java:486)
	at java.lang.Thread.run(Thread.java:662)
Caused by: java.lang.IllegalArgumentException: The persistent file should not be null
	at org.apache.camel.test.blueprint.CamelBlueprintHelper.setPersistentFileForConfigAdmin(CamelBlueprintHelper.java:176)
	at org.apache.camel.test.blueprint.Main.doStart(Main.java:103)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.main.MainSupport.run(MainSupport.java:148)
	at org.apache.camel.main.MainSupport.run(MainSupport.java:343)
	at org.apache.camel.test.blueprint.Main.main(Main.java:81)","Fedora16,JDK1.6,",,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-06-06 13:51:07.333,,,no_permission,,Unknown,,,,,,,,,,,331613,,,Thu Jun 06 13:51:07 UTC 2013,,,,,,,0|i1l7iv:,331944,,,,,,,,,"06/Jun/13 13:51;njiang;Applied the patch into master.

It's caused by the property comment of RunMojo, it should start with one star, not two star. ",,,,,,,,,,,,,,,,,,,,,,,
Graceful shutdown with maximum redeliveries enabled from seda route may hang,CAMEL-6421,12650827,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,04/Jun/13 07:05,04/Jun/13 07:49,13/Mar/19 22:19,04/Jun/13 07:49,2.10.4,2.11.0,,,,,,,,2.10.5,2.11.1,2.12.0,,camel-core,,,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Graceful-shutdown-not-working-tp5733697.html

The method getErrorHandlerExecutorService from DefaultCamelContext should use a private lock to avoid this problem.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,331154,,,2013-06-04 07:05:44.0,,,,,,,0|i1l4pb:,331487,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JettyToCxfRs proxy doesn't work,CAMEL-6253,12641533,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,09/Apr/13 07:10,03/Jun/13 09:19,13/Mar/19 22:19,03/Jun/13 09:19,2.10.4,2.11.0,,,,,,,,2.11.0,,,,,,,,,,0,,,,,,,,,"I'm working a testcase which is using Jetty component and CXFRS component to proxy the rest request just like this
{code}
<from uri=""jetty://http://localhost:{{CXFTestSupport.port5}}/CxfRsRouterTest/route?matchOnUriPrefix=true&amp;bridgeEndpoint=true""/>
       <!-- We can remove this configure as the CXFRS producer is using the HttpAPI by default -->
       <setHeader headerName=""CamelCxfRsUsingHttpAPI"">
         <constant>True</constant>        
       </setHeader>
       <to uri=""cxfrs://bean://rsClient""/>
{code}

CXFRS producer is leverage the Exchange.HTTP_PATH to setup the request URL just like the Http producer does. But the Exchange.HTTP_PATH header which is set by http component is a full request path, which is not a relative path as the CXFRS producer wants. So JettyToCxfRs proxy doesn't work.

To Fix this issue, we need aline the definition of Exchange.HTTP_PATH across the CAMEL components, and it could save us lots of time to build up a right HTTP request url if the header just means a relative path. BTW user can get the full request path by looking up the header with Exchange.HTTP_URI.",,,,,,,,,,,,,,,,,,,,,09/Apr/13 07:14;njiang;CAMEL-6253.patch;https://issues.apache.org/jira/secure/attachment/12577736/CAMEL-6253.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,321949,,,Mon Jun 03 09:19:49 UTC 2013,,,,,,,0|i1jjqv:,322294,,,,,,,,,09/Apr/13 07:14;njiang;As we are in the middle of camel 2.11.0 release. I just attached the patch for review.,03/Jun/13 09:19;njiang;Applied the patch into trunk. It should be a part of camel 2.11.0.,,,,,,,,,,,,,,,,,,,,,,
Validator Component Fails on XSD with Classpath Relative Imports,CAMEL-5321,12558702,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,sully6768,sully6768,30/May/12 23:55,01/Jun/13 19:18,13/Mar/19 22:19,31/May/12 03:15,2.10.0,,,,,,,,,2.10.0,2.9.3,,,,,,,,,0,,,,,,,,,"When using the Validator Component with an XSD file from a Jar that contains a relative import, the component will throw a FileNotFoundException.

This is due to the ObjectHelper.loadResourceAsStream(String) operation attempting to load the classpath resource using file path semantics that will not resolve canonically.

Test case and patch to follow.

[Thread Reference|http://camel.465427.n5.nabble.com/org-apache-camel-RuntimeCamelException-java-io-FileNotFoundException-Cannot-find-resource-in-classpaI-td5713557.html]

Best Regards,
Scott England-Sullivan
http://fusesource.com",,,,,,,,,,,,,,CAMEL-6412,,,,,,,31/May/12 00:08;sully6768;CAMEL-5321.patch;https://issues.apache.org/jira/secure/attachment/12530304/CAMEL-5321.patch,31/May/12 00:02;sully6768;camel-validator-test.tar.gz;https://issues.apache.org/jira/secure/attachment/12530303/camel-validator-test.tar.gz,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-05-31 03:15:28.115,,,no_permission,,Unknown,,,,,,,,,,,241194,,,Thu May 31 09:57:53 UTC 2012,,,,,,,0|i026db:,10633,,,,,,,,,31/May/12 00:02;sully6768;Test Case Project,31/May/12 00:08;sully6768;ObjectHelper and unit test patch,"31/May/12 03:15;njiang;Applied patch into trunk and 2.9.x branch with thanks to Scott.
BTW, I took the test resources which are not included in the patch from the test resource jars.
 ","31/May/12 03:41;sully6768;Willem,

For the test to be accurate you have to leave the resources in the jar file.  When the files are in the source path they are resolved as a file and as such will pass regardless.  It is only when the files are resolved with a ""jar"" protocol that the error can occur.  I wasn't sure how that should be applied in the patch which is why I left it out pending a discussion.

Let me know if you have any further questions.

Scott ES
http://fusesource.com","31/May/12 06:25;njiang;After went through the thread reference and debugging the code, I found we still need to let validator to load the resource from jar file. I will commit a quick fix for that shortly.",31/May/12 06:28;njiang;We need to find a way to do the test without introduce the system scope dependency to the camel-core. Maybe I should move the test to the integration testsuit. ,"31/May/12 09:48;bvahdat;The removal of the XSD files through:

http://svn.apache.org/viewvc?view=revision&revision=1344597

Now causes the following test:

{code}
mvn test -Dtest=ValidatorSchemaImportTest
{code}

to fail with:

{code}
...
Caused by: java.io.FileNotFoundException: Cannot find resource in classpath for URI: org/apache/camel/component/validator/relativeparent/child/child.xsd
	at org.apache.camel.util.ResourceHelper.resolveMandatoryResourceAsInputStream(ResourceHelper.java:92)
	at org.apache.camel.component.validator.ValidatorComponent.createEndpoint(ValidatorComponent.java:44)
...
{code}
","31/May/12 09:57;njiang;@Babak,
Sorry I forgot to remove the ValidatorSchemaImportTest, I will commit a patch shortly.",,,,,,,,,,,,,,,,
Validator component fails on XSD with indirect relative import,CAMEL-6013,12629203,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,petercgrant,petercgrant,25/Jan/13 01:42,01/Jun/13 19:18,13/Mar/19 22:19,01/Feb/13 15:14,2.10.3,,,,,,,,,2.10.4,2.11.0,,,camel-core,,,,,,0,,,,,,,,,"When using the validator component with an XSD that references a second XSD on a different path, and where the second XSD references a third XSD using a relative path, the path of the third XSD is resolved relative to the first schema rather than relative to the second.  This looks similar to [CAMEL-5321], but the schemas that trigger this issue necessarily involve an additional layer of includes.

I will include a test case that I rolled into the tarball from [CAMEL-5321].",,,,,,,,,,,,,,CAMEL-6412,,,,,,,25/Jan/13 01:47;petercgrant;camel-validator-test.tar.gz;https://issues.apache.org/jira/secure/attachment/12566434/camel-validator-test.tar.gz,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-01-25 03:53:56.184,,,no_permission,,Unknown,,,,,,,,,,,309047,,,Fri Feb 01 15:14:37 UTC 2013,,,,,,,0|i1dymn:,289707,,,,,,,,,25/Jan/13 01:47;petercgrant;Test case (broken) that triggers the issue.,"25/Jan/13 03:53;njiang;The test case is very handy, I managed to fix the issue by letting the DefaultLSResourceResolver checking the states of relative path.
I will commit the quick fix shortly.
","29/Jan/13 19:13;davsclaus;Willem, are you working on getting this backported to 2.10 branch?",01/Feb/13 15:14;njiang;Applied the patch into trunk and camel-2.10.x branches.,,,,,,,,,,,,,,,,,,,,
"Bindy does not handle separator at the end of quoted field, appends next field",CAMEL-6041,12631088,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,zinksl,zinksl,06/Feb/13 16:25,31/May/13 11:20,13/Mar/19 22:19,31/May/13 11:20,,,,,,,,,,2.10.5,2.11.0,,,camel-bindy,,,,,,0,maven,patch,test,,,,,,"Address fields quite often contain comma at the end of an addressLine1 field.\\ Example - ""PROBLEM SOLVER"",""8506 SIX FORKS ROAD,"",""SUITE 104"",""RALEIGH"",""NC"",""27615"",""US""\\
Bindy will append next field to such one shifting all others to the left.",,,,,,,,,,,,,,,,,,,,,06/Feb/13 16:50;zinksl;bindy-cvsissue-patch.txt;https://issues.apache.org/jira/secure/attachment/12568247/bindy-cvsissue-patch.txt,06/Feb/13 16:29;zinksl;bindy-cvsissue-test.zip;https://issues.apache.org/jira/secure/attachment/12568244/bindy-cvsissue-test.zip,,,,,2.0,,,,,,,,,,,,,,,,,,,2013-05-26 12:12:43.707,,,no_permission,,Unknown,,,,,,,,,,,311584,,,Fri May 31 11:20:56 UTC 2013,,,,,,,0|i1hrsn:,311930,,,,,,,,,"06/Feb/13 16:29;zinksl;Test project with suggested patch(for version 2.10.3). 
Situations with separator at the beginning of field still requires attention. Though in real life such use cases are probably rare.",26/May/13 12:12;davsclaus;Thanks for the patch. Willem can you take a look?,31/May/13 11:20;njiang;Applied the patch into trunk and merged back into camel-2.10.x branch.,,,,,,,,,,,,,,,,,,,,,
 Route with suspended SedaConsumer can't be stopped correctly,CAMEL-6390,12649112,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,tivv,tivv,23/May/13 12:58,30/May/13 09:12,13/Mar/19 22:19,30/May/13 09:12,2.10.0,,,,,,,,,2.11.1,2.12.0,,,,,,,,,0,,,,,,,,,"Route with suspended SedaConsumer can't be stopped correctly. Here is test:
{code}
 @Test
    public void testOriginalSedaShutdownSuspended() throws Exception {
        SedaEndpoint endpoint = context().getEndpoint(""seda:test"", SedaEndpoint.class);
        context().addRouteDefinition(new RouteDefinition()
                .id(""testRoute"")
                .from(endpoint)
                .to(""log:body"")
        );
        Set<SedaConsumer> consumers = endpoint.getConsumers();
        Assert.assertFalse(consumers.isEmpty());
        for (SedaConsumer sedaConsumer: consumers) {
            sedaConsumer.suspend();
        }
        Assert.assertTrue(context().stopRoute(""testRoute"", 2, TimeUnit.SECONDS, true));
    }
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-05-25 07:28:57.812,,,no_permission,,Unknown,,,,,,,,,,,329439,,,Thu May 30 09:12:29 UTC 2013,,,,,,,0|i1ku53:,329774,,,,,,,,,25/May/13 07:28;davsclaus;Works fine. Even if its suspended it may need more than 2 sec to stop properly.,"27/May/13 08:48;tivv;It does not work. Original test does not send any message.
Your test also does not work if it either: 
1) Does not send any message
2) Sleep 2000ms after suspension. (that is better as ""do not send"" works on some timing clash, see below)

To be clear:
a) 2000ms is used since default poll timeout is 1000ms. For real test, poll timeout can be lowered down and sleep after suspension used.
b) you test works because it does not have time to exit from queue.pool to really suspend polling thread. 
c) The actual problem is that SedaConsumer first check isSuspending/isSuspended and go for next circle if it is. Shutdown check is done later (after queue.poll), so when suspended it never reaches this shutdown check.","27/May/13 08:49;tivv;The committed test do not show the problem, see my previous comment",30/May/13 09:12;davsclaus;Thanks I have added additional check,,,,,,,,,,,,,,,,,,,,
camel-solr - Should close its resources when stopping,CAMEL-6396,12649436,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,25/May/13 05:26,25/May/13 06:38,13/Mar/19 22:19,25/May/13 06:38,,,,,,,,,,2.11.1,2.12.0,,,camel-solr,,,,,,0,,,,,,,,,"See SO
http://stackoverflow.com/questions/16667720/connections-are-hanging-in-close-wait-even-after-successful-shutdown-of-camel-co",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,329763,,,2013-05-25 05:26:22.0,,,,,,,0|i1kw53:,330098,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BigDecimalFormat can't deal with the number with big precision,CAMEL-6358,12647436,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,14/May/13 03:03,22/May/13 03:15,13/Mar/19 22:19,22/May/13 03:15,2.11.0,,,,,,,,,2.11.1,2.12.0,,,,,,,,,0,,,,,,,,,"You will get the below error when
{code}
Non-terminating decimal expansion; no exact representable decimal result.
caused by
java.math.BigDecimal.divide(BigDecimal.java:1616)
org.apache.camel.dataformat.bindy.format.BigDecimalFormat.parse(BigDecimalFormat.java:38)
org.apache.camel.dataformat.bindy.format.BigDecimalFormat.parse(BigDecimalFormat.java:23)
{code}

When parasering the String 00000123567 with the below model.
{code}
@DataField(pos = 1, precision = 10, length = 11, impliedDecimalSeparator = true) 
private BigDecimal	 foobar;
{code}

Here is the discussion about the issue.
http://camel.465427.n5.nabble.com/impliedDecimalSeparator-not-working-for-numbers-starting-with-0-tp5732448.html",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,327792,,,Wed May 22 03:15:34 UTC 2013,,,,,,,0|i1kk1r:,328136,,,,,,,,,22/May/13 03:15;njiang;Applied the patch into trunk and camel-2.11.x.,,,,,,,,,,,,,,,,,,,,,,,
CXF Example OSGi fail in Karaf,CAMEL-6257,12641698,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,muellerc,muellerc,09/Apr/13 19:31,17/May/13 14:01,13/Mar/19 22:19,17/May/13 14:01,2.10.4,,,,,,,,,2.10.5,2.11.1,2.12.0,,examples,,,,,,0,,,,,,,,,See http://camel.465427.n5.nabble.com/CXF-Example-OSGi-td5730551.html,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-04-13 10:56:13.067,,,no_permission,,Unknown,,,,,,,,,,,322113,,,Fri May 17 14:01:56 UTC 2013,,,,,,,0|i1jkrb:,322458,,,,,,,,,12/Apr/13 17:13;muellerc;This example works in Camel 2.11.0.,"12/Apr/13 17:18;muellerc;The camel-example-cxf-blueprint example works, but not the camel-example-cxf-osgi example with Camel 2.11.0","13/Apr/13 10:56;sobkowiak;I have just tested the latest snaphost form (from the 2.10.x branch) containing both the import of META-INF/cxf/cxf.xml and import of META-INF.cxf in the OSGi manifest and it works on SMX. There is another problem with test cases.

Afetr removing the both imports the example works too. The original issue was that the spring context imported the META-INF/cxf/cxf.xml but META-INF.cxf was not included in Manifest imports. ",14/Apr/13 20:33;muellerc;Thanks Krzysztof Sobkowiak for reporting and the suggested solution. I fixed it in camel-2.10.x accordingly.,"16/Apr/13 20:06;muellerc;Willem, could you please have a look at this issues? It's the last example which blocks the new Camel 2.11.0 RC.","17/Apr/13 02:51;njiang;I just have a quick check of the example, it looks like the exposed cxf endpoint cannot be found by the CXF servlet. If I changed the address to use the jetty engine, I can access the service without any trouble.
I will keep digging the issue.","17/Apr/13 02:59;njiang;It should be a bug of CXF 2.7.4, when I switch CXF version to 2.7.3, the example is working without any issue.
As we cannot wait for the new version of CXF release, I suggest we mark it as know issue, and fix it in Camel 2.11.1.
","19/Apr/13 13:54;njiang;This issue is fixed in CXF-4970, we can close this issue when camel upgrades to new released CXF version.",17/May/13 14:01;davsclaus;We have upgraded to newer CXF versions,,,,,,,,,,,,,,,
Headers are not set correctly in some situation,CAMEL-6375,12648139,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,clement tamisier,clement tamisier,17/May/13 08:27,17/May/13 13:14,13/Mar/19 22:19,17/May/13 13:14,2.10.4,,,,,,,,,2.11.1,2.12.0,,,,,,,,,2,,,,,,,,,"If I define a route like this: 

from(""<MyUrl>/test"") 
.setHeader(Exchange.HTTP_RESPONSE_CODE, simple(""400"")); 
my http client get a 200 response code. 

If a add something else on the route like: 
from(""<MyUrl>/test"") 
.setHeader(Exchange.HTTP_RESPONSE_CODE, simple(""400"")) 
.log(""400"").
my http client get a 400 response code as expected. 

forum :
http://camel.465427.n5.nabble.com/route-http-code-td5732728.html",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-05-17 08:56:08.595,,,no_permission,,Unknown,,,,,,,,,,,328495,,,Fri May 17 13:14:02 UTC 2013,,,,,,,0|i1kodz:,328839,,,,,,,,,"17/May/13 08:56;njiang;What's your from(""<MyUrl>/test"")  looks like, which kind of camel component are you using?
After check the code of DefaultHttpBinding, I didn't found anything wrong.
I just did a quick test on the camel trunk, camel-2.10.x branch, I cannot reproduce the error.","17/May/13 09:05;clement tamisier;I am using ""servlet"" component.
and it works if I use setOutHeader (which is deprecated).
I'll provide soon a test case.","17/May/13 11:36;davsclaus;Ah we have fixed this in the http/servlet/jetty component recently.

Though ideally the org.apache.camel.builder.ProcessorBuilder should check for OUT vs IN; currently looking into that.",17/May/13 12:21;njiang;This issue should be resolved in CAMEL-6349.,17/May/13 13:14;davsclaus;Fixed the DSL with the setHeader / removeHeaders EIPs to work correctly on OUT or IN,,,,,,,,,,,,,,,,,,,
Removing route stops other routes from the same producer,CAMEL-6373,12648126,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ikoblik,ikoblik,17/May/13 07:36,17/May/13 11:18,13/Mar/19 22:19,17/May/13 11:18,2.11.0,,,,,,,,,2.11.1,2.12.0,,,camel-core,,,,,,0,,,,,,,,,"If there are 2 routes from the same source, e.g.:
{code}
CamelContext camelContext = new DefaultCamelContext();
final PrinterBean bean1 = new PrinterBean(""bean1"");
final PrinterBean bean2 = new PrinterBean(""bean2"");
RouteBuilder builder = new RouteBuilder(camelContext) {
    @Override
    public void configure() throws Exception {
        from(""vm:producer?multipleConsumers=true"").routeId(""route1"").bean(bean1);
    }

};
RouteBuilder builder2 = new RouteBuilder(camelContext) {
    @Override
    public void configure() throws Exception {
        from(""vm:producer?multipleConsumers=true"").routeId(""route2"").bean(bean2);
    }
};
camelContext.addRoutes(builder);
camelContext.addRoutes(builder2);
{code}

And if after starting the context {{camelContext.start();}} I stop and remove one of the routes the other one will stop working as well.

{code}
camelContext.stopRoute(""route2"");
camelContext.removeRoute(""route2"");
{code}

These messages will not be delivered to bean1:
{code}
System.out.println(""Sending message"");
ProducerTemplate producerTemplate = camelContext.createProducerTemplate();
for (int i = 0; i < 100; i++) {
    producerTemplate.sendBody(""vm:producer?multipleConsumers=true"", i);
}
{code}

----
When debugging I noticed that in {{SedaEndpoint}} on line 144 it stops shared MulticastProcessor used by the both routes.

Please see this post to get the entire source file:
http://camel.465427.n5.nabble.com/Removing-route-stops-other-routes-from-the-same-producer-td5732616.html",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-05-17 11:18:06.215,,,no_permission,,Unknown,,,,,,,,,,,328482,,,Fri May 17 11:18:06 UTC 2013,,,,,,,0|i1kob3:,328826,,,,,,,,,17/May/13 11:18;davsclaus;Thanks for reporting.,,,,,,,,,,,,,,,,,,,,,,,
vm component - Stopping a route when using multipleConsumers should not stop MP if there is other routes using it,CAMEL-6374,12648129,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,17/May/13 07:49,17/May/13 11:17,13/Mar/19 22:19,17/May/13 11:17,2.11.0,,,,,,,,,2.11.1,2.12.0,,,camel-core,,,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Removing-route-stops-other-routes-from-the-same-producer-tp5732616.html",,,,,,,,,,,,CAMEL-6373,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,328485,,,2013-05-17 07:49:52.0,,,,,,,0|i1kobr:,328829,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SecurityException in HDFS producer/consumer when no security configuration is present,CAMEL-6348,12646909,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,mumrah,mumrah,09/May/13 22:58,10/May/13 13:44,13/Mar/19 22:19,10/May/13 13:44,2.11.0,,,,,,,,,2.10.5,2.11.1,2.12.0,,camel-hdfs,,,,,,0,,,,,,,,,"In the HdfsProducer and HdfsConsumer classes, there are calls to get the current security configuration

{code}
Configuration auth = Configuration.getConfiguration();
{code}
 
in order to later reset them after HDFS tramples the system with its own config. However, if no security configuration was set, this throws a SecurityException like:

{code}
Exception in thread ""main"" org.apache.camel.FailedToCreateProducerException: Failed to create Producer for endpoint: Endpoint[hdfs://localhost:50001/tmp/camel/?splitStrategy=MESSAGES%3A4]. Reason: java.lang.SecurityException: Unable to locate a login configuration
{code}

My current workaround is to set the system property ""java.security.auth.login.config"" to an empty file. 

It seems like the code should check if a configuration exists before fetching it.",,,,,,,,,,,,,,,,,,,,,10/May/13 13:04;mumrah;CAMEL-6348.patch;https://issues.apache.org/jira/secure/attachment/12582618/CAMEL-6348.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-05-10 12:14:26.127,,,no_permission,,Unknown,,,,,,,,,,,327266,,,Fri May 10 13:44:12 UTC 2013,,,,,,,0|i1kgsv:,327610,,,,,,,,,10/May/13 12:14;davsclaus;Are you working on a patch?,"10/May/13 13:04;mumrah;Not sure how you guys prefer patches. This was generated with ""git diff --no-prefix HEAD"" from the camel-hdfs directory. Let me know if you prefer something else.",10/May/13 13:06;mumrah;This patch basically swallows SecurityExceptions thrown from Configuration.getConfiguration. I consolidated this code into two static methods in HdfsComponent: getJAASConfiguration and setJAASConfiguration.,10/May/13 13:44;davsclaus;Thanks for the patch.,,,,,,,,,,,,,,,,,,,,
Simple expression and predicate have different behaviors when used along with properties,CAMEL-6328,12645443,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,antoine.dessaigne,antoine.dessaigne,30/Apr/13 14:36,08/May/13 08:42,13/Mar/19 22:19,08/May/13 08:42,2.10.3,,,,,,,,,2.10.5,2.11.1,2.12.0,,camel-core,,,,,,1,,,,,,,,,"The following simple expression doesn't behave the same way whether it's used as expression or predicate:
{noformat}
'{{foo}}' == 'bar'
{noformat}

When used in an expression, it works perfectly.

When used in a predicate the given expression is thrown:
{noformat}
org.apache.camel.language.simple.types.SimpleIllegalSyntaxException: functionEnd has no matching start token at location 7
'{{foo}}' == 'bar'
       *

	at org.apache.camel.language.simple.SimplePredicateParser.parsePredicate(SimplePredicateParser.java:69)
	at org.apache.camel.language.simple.SimpleLanguage.createPredicate(SimpleLanguage.java:136)
	at org.apache.camel.builder.SimpleBuilder.matches(SimpleBuilder.java:73)
	at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:66)
...
{noformat}

You'll find attached the source code that shows the error",,,,,,,,,,,,,,,,,,,,,30/Apr/13 14:37;antoine.dessaigne;CamelTest.java;https://issues.apache.org/jira/secure/attachment/12581161/CamelTest.java,07/May/13 09:54;antoine.dessaigne;properties_everywhere.patch;https://issues.apache.org/jira/secure/attachment/12582069/properties_everywhere.patch,,,,,2.0,,,,,,,,,,,,,,,,,,,2013-05-08 08:42:18.07,,,no_permission,,Unknown,,,,,,,,,,,325805,,,Wed May 08 08:42:18 UTC 2013,,,,,,,0|i1k7iv:,326150,,,,,,,,,07/May/13 09:54;antoine.dessaigne;Here a patch that fixes this issue. The properties are now processed everywhere.,"08/May/13 08:42;davsclaus;Thanks for the patch and unit test.

I went for a less dramatic solution as we want to avoid the recursive resolve which also end up resolving the same instances multiple times.

And fixed the problem elsewhere.",,,,,,,,,,,,,,,,,,,,,,
camel-http - When bridging endpoints then there may be double parameter values if client sends uri parameters,CAMEL-6173,12637552,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,18/Mar/13 15:31,02/May/13 02:30,13/Mar/19 22:19,18/Mar/13 15:49,2.10.4,,,,,,,,,2.10.5,2.11.0,,,camel-http,camel-jetty,,,,,0,,,,,,,,,"If you have a jetty/http bridge endpoint, and the caller sends in a parameter with a value that has url encodings, then you may have double values when calling the bridge.

eg calling
{code}
http://localhost:23001/jettyTestRouteA?param1=%2B447777111222
{code}

And having a jetty -> http bridge, you can end up with double values.
{code}
Caused by: java.lang.AssertionError: expected:< 447777111222> but was:<[+447777111222, +447777111222]>
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,318043,,,2013-03-18 15:31:57.0,,,,,,,0|i1ivmf:,318384,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE when using the imap mail component with quartz or the timer and pollEnrich,CAMEL-6154,12636324,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,sven 88,sven 88,11/Mar/13 09:34,02/May/13 02:30,13/Mar/19 22:19,21/Mar/13 13:37,2.10.3,2.10.4,,,,,,,,2.10.5,2.11.0,,,camel-mail,camel-quartz,,,,,0,imap,pollenrich,quartz,timer,,,,,"There is a NPE when using the imap mail component with quartz or the timer and pollEnrich as dicussed here:
http://camel.465427.n5.nabble.com/Schedule-file-mail-endpoint-td3356666.html#a3357538

I reproduced it on version 2.10.3 and 2.10.4 with
 <route id=""myTest"">
     <from uri=""timer://foo?fixedRate=true&amp;period=10000""/>
     <pollEnrich uri=""imap://userName@hostName?password=***""/> 
     <to uri=""log:testroute?showAll=true&amp;level=INFO""/>
  </route>

We need to use it with the quartz component (so we can use a cron expression), but get the same error
 <route id=""myTest"">
     <from uri=""quartz://testTimer?cron=0+*+*+*+*+?""/>
     <pollEnrich uri=""imap://userName@hostName?password=***""/> 
     <to uri=""log:testroute?showAll=true&amp;level=INFO""/>
  </route>

11/03/2013 10:32:04 [DefaultQuartzScheduler-context_Worker-1] ERROR org.apache.camel.processor.DefaultErrorHandler  - Failed delivery for (MessageId: ID-W7-009430-52415-1362994261595-0-3 on ExchangeId: ID-W7-009430-52415-1362994261595-0-2). Exhausted after delivery attempt: 1 caught: org.apache.camel.CamelExchangeException: Error occurred during aggregation. Exchange[Message: [Body is null]]. Caused by: [org.apache.camel.RuntimeCamelException - Failed to extract body due to: null. Exchange: Exchange[MailMessage: com.sun.mail.imap.IMAPMessage@411a3fe4]. Message: com.sun.mail.imap.IMAPMessage@411a3fe4]
org.apache.camel.CamelExchangeException: Error occurred during aggregation. Exchange[Message: [Body is null]]. Caused by: [org.apache.camel.RuntimeCamelException - Failed to extract body due to: null. Exchange: Exchange[MailMessage: com.sun.mail.imap.IMAPMessage@411a3fe4]. Message: com.sun.mail.imap.IMAPMessage@411a3fe4]
	at org.apache.camel.processor.PollEnricher.process(PollEnricher.java:194)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:334)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:220)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:308)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:117)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.processor.loadbalancer.QueueLoadBalancer.process(QueueLoadBalancer.java:44)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:99)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.processor.loadbalancer.QueueLoadBalancer.process(QueueLoadBalancer.java:71)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.component.quartz.QuartzEndpoint.onJobExecute(QuartzEndpoint.java:113)[camel-quartz-2.10.4.jar:2.10.4]
	at org.apache.camel.component.quartz.CamelJob.execute(CamelJob.java:61)[camel-quartz-2.10.4.jar:2.10.4]
	at org.quartz.core.JobRunShell.run(JobRunShell.java:216)[quartz-1.8.5.jar:]
	at org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:549)[quartz-1.8.5.jar:]","Windows, Tomcat 7.0.32, java 7, Spring 3.1.4",,,,,,,,,,,,,,,,,,,,21/Mar/13 13:19;sven 88;error log.txt;https://issues.apache.org/jira/secure/attachment/12574793/error+log.txt,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-03-21 10:25:39.281,,,no_permission,,Unknown,,,,,,,,,,,316816,,,Thu Mar 21 13:37:59 UTC 2013,,,,,,,0|i1io27:,317158,,,,,,,,,"21/Mar/13 10:25;davsclaus;The NPE was burried in the mail binding. Which I have added a fix for.

If you have the time then it would be good to try out 2.10.5 SNAPSHOT to see if that fixes your problem.

Is there something special about the mail you consume? eg if you just do <from uri=""imap:...""> can you consume the mails then also?","21/Mar/13 11:17;sven 88;It don't work, I have added the error log.

As a workarround i use the CronScheduledRoutePolicy with a start and stop time and this works as expected (see the code below)

        from(the mail uri)
        .noAutoStartup()
        .routePolicy(routePolicy)
        .bean(MailAttachmentsHandler.class);

the MailAttachmentsHandler:
 public void process(Exchange exchange) throws Exception {
        CamelContext context = exchange.getContext();
        ProducerTemplate producer = context.createProducerTemplate();

        for (String name : exchange.getIn().getAttachmentNames()) {
            if (name.matches(regex)) {
                DataHandler attachment = exchange.getIn().getAttachment(name);
                byte[] data = context.getTypeConverter().convertTo(byte[].class, attachment.getInputStream());

                Map<String, Object> headers = new HashMap<String, Object>();
                // used to write to file
                headers.put(Exchange.FILE_NAME, name);
                producer.sendBodyAndHeaders(queueEndpointUri, data, headers);
            }
        }
        producer.stop();
    }","21/Mar/13 12:59;davsclaus;If you are using log4j, then can you check if you have enabled 
{code}
log4j.throwableRenderer=org.apache.log4j.EnhancedThrowableRenderer
{code}

That option has a bug not logging the caused stacktraces, so the actual NPE you now have is not in the error.log.

If so can you try again. Disabling that log4j option. So we can have the caused stacktrace, to track down the NPE in camel-mail?",21/Mar/13 13:19;sven 88;updated the error log,"21/Mar/13 13:22;davsclaus;Ah thanks, I can see the problem is that the mail folder gets closed and the mail message is accessed on-demand afterwards.

You can set closeFolder=false to fix that problem.","21/Mar/13 13:31;sven 88;Thanks, now it works.",21/Mar/13 13:37;davsclaus;Okay I logged CAMEL-6193 to fix this better.,,,,,,,,,,,,,,,,,
Endpoint URI normalization: information in path is lost,CAMEL-4857,12537080,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,azarov,azarov,03/Jan/12 17:08,02/May/13 02:29,13/Mar/19 22:19,25/Sep/12 06:48,2.9.0,,,,,,,,,2.11.0,,,,camel-core,,,,,,0,,,,,,,,,"A project with a test case is here: https://github.com/alaz/camel290_uri

The test case with the problem description (the problem occured during migration of camel-beanstalk https://github.com/osinka/camel-beanstalk component onto 2.9.0):

{code:title=UriTest.java}
package camel290.uri;

import java.util.Map;
import org.apache.camel.Consumer;
import org.apache.camel.Endpoint;
import org.apache.camel.Processor;
import org.apache.camel.Producer;
import org.apache.camel.impl.DefaultComponent;
import org.apache.camel.impl.DefaultEndpoint;
import org.apache.camel.test.CamelTestSupport;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

public class UriTest extends CamelTestSupport {

  /**
   * An URI of Camel Beanstalk component consists of a hostname, port and a list
   * of tube names. Tube names are separated by ""+"" character (which is more or less
   * usualy used on the Web to make lists), but every tube name may contain URI special
   * characters like ? or +
   */

  class MyEndpoint extends DefaultEndpoint {
    String uri = null;
    String remaining = null;

    public MyEndpoint(final String uri, final String remaining) {
      this.uri = uri;
      this.remaining = remaining;
    }

    public Producer createProducer() throws Exception {
      throw new UnsupportedOperationException(""Not supported yet."");
    }

    public Consumer createConsumer(Processor prcsr) throws Exception {
      throw new UnsupportedOperationException(""Not supported yet."");
    }

    public boolean isSingleton() {
      return true;
    }
  }

  class MyComponent extends DefaultComponent {
    @Override
    protected Endpoint createEndpoint(final String uri, final String remaining, final Map<String, Object> parameters) throws Exception {
      return new MyEndpoint(uri, remaining);
    }
  }

  @Before
  @Override
  public void setUp() throws Exception {
    super.setUp();
    context.addComponent(""my"", new MyComponent());
  }

  @Test
  public void testExclamationInUri() {
    /**
     * %3F is not an ?, it's part of tube name.
     */
    MyEndpoint endpoint = context.getEndpoint(""my:host:11303/tube1+tube%2B+tube%3F"", MyEndpoint.class);
    assertNotNull(""endpoint"", endpoint);
  }

  @Test
  public void testPath() {
    /**
     * Here a tube name is ""tube+"" and written in URI as ""tube%2B"", but it gets
     * normalized, so that an endpoint sees ""tube1+tube+""
     */
    MyEndpoint endpoint = context.getEndpoint(""my:host:11303/tube1+tube%2B"", MyEndpoint.class);
    assertEquals(""Path contains several tube names, every tube name may have + or ? characters"", ""host:11303/tube1+tube%2B"", endpoint.remaining);
  }
}
{code} ",,,,,,,,,,,,,,,,,,,,,14/Sep/12 10:57;davsclaus;CAMEL-4857.patch;https://issues.apache.org/jira/secure/attachment/12545133/CAMEL-4857.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-01-04 08:55:14.162,,,no_permission,,Unknown,,,,,,,,,,,222590,,,Tue Sep 25 06:48:43 UTC 2012,,,,,,,0|i023in:,10171,,,,,,,,,"04/Jan/12 08:55;njiang;The issue is caused by CAMEL-4425, now camel is try to turn the encoded uri string to be a normalized one. That is why the ""%2B"" is changed to ""+"", ""%3F"" is changed to ""?"" at the end.

It think we need to find a way to resolve the issue of using unsafe uri code in camel uri. 

Willem

","19/Jan/12 06:33;davsclaus;CAMEL-4256 is the real cause. It is too restrictive in terms of URI flexibility. We need to open up this so the component writers have the power back again, and can totally decide how to handle uri's in their components.","19/Jan/12 08:05;davsclaus;I noticed that CAMEL-4256 or thereabouts also broke some previous URI validation. For example we have a check for double ampersand, that is now being normalized into an empty parameter """" -> null. ","04/Jun/12 19:18;hadrian;I beg to differ.

The question is not if Camel is too restrictive, but rather if camel uses URIs or not. What a URI is and isn't is clearly defined by a spec. The changes for CAMEL-4256 were intended to still support the invalid uris we now use in Camel and provide a migration path for 3.0. If some scenarios were missed, that can be fixed.

However the question still remains, does Camel use URIs or not? Today, I wouldn't know how to define the concept of URI flexibility. I totally agree that that component writers should have complete control on how to handle URIs but those should be URIs to start with. That's not the case today, is it?","04/Jun/12 21:01;bvahdat;IMHO the *CORE* question should not be if Camel uses URIs correctly or not but more important than that if Camel is *REALLY* 100% backward-compatible by it's minor releases which to my understanding is much much more important than to be 100% IETF RFC_XYZ complaint.

In this concrete case the user reporting this issue (on Jan. 3rd) was struggling to upgrade to a newer Camel version a day before (on Jan. 2nd) which then ended up with:
https://plus.google.com/103504600126086444972/posts/5q1aFtYLryi

@Alexander please correct me if I'm wrong.

Anyway, I think this's really sad :-(","04/Jun/12 21:51;hadrian;@Babak,

Although we never were 100% backward compatible in minor releases, the intent is to be 100% backwards compatible. The incompatibility only crept in, I believe, because there are no unit tests for enough variations of URIs. When the changes got committed all the tests passed and it's not like existing tests were deleted or we introduced incompatibilities on purpose. We do strive to be 100% backwards compatible on patch releases though and we are, with very rare exceptions.

I was the one publishing that release, and believe it or not, vanity wasn't among the reasons. Sad? Maybe. I have a long list myself. 

That said, I totally agree that the the camel-core should be more stable and less incompatibilities should be introduced on minor releases. We can discuss on dev@ if and how this could be achieved.
","05/Jun/12 07:30;azarov;[~bvahdat], please do not build your proofs based on my old emotions. In the end of a day, I'm rational in my decisions.

I perfectly understand every release may bring some bugs. [~hadrian] explains there were incomplete test coverage of URIs.

I still wonder why no Camel users have been affected by the same issue, since URI is the main transport of transmitting settings into Camel components. Anyway (a) the number of camel-beanstalk component users is very small and no one complained; (b) the number of voters/watchers of this issue shows no significant interest. Hence, if nobody needs it, it seems logical to postpone the fix.","05/Jun/12 09:14;bvahdat;@Alexander I'm absolutely aware of the fact that through providing that link I did abash you, I'm REALLY sorry for that and please accept my apologies  :-(

However my ONLY INTENTION was to show how frustrating an update could be, that's it! IMHO we had better postponed these URI issues and discussions for the Camel 3 roadmap to AVOID taking any risks and also breaking the existing behaviour given through the minor releases.",07/Jun/12 22:04;muellerc;I will go through this until end of this week...,"14/Sep/12 10:57;davsclaus;A patch which allows component writers to control if the uri should be raw or encoded (default as now). 
",25/Sep/12 06:48;davsclaus;Introduced {{useRawUri}} method to {{Component}} which gives component writers full power.,,,,,,,,,,,,,
JMS connection leak with request/reply producer on temporary queues,CAMEL-5683,12610112,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,mpilone,mpilone,03/Oct/12 17:37,02/May/13 02:29,13/Mar/19 22:19,07/Oct/12 06:39,2.10.0,,,,,,,,,2.10.2,2.11.0,2.9.4,,camel-jms,,,,,,0,,,,,,,,,"Over time I see the number of temporary queues in ActiveMQ slowly climb. Using JMX information and memory dumps in MAT, I believe the cause is a connection leak in Apache Camel.

My environment contains 2 ActiveMQ brokers in a network of brokers configuration. There are about 15 separate applications which use Apache Camel to connect to the broker using the ActiveMQ/JMS component. The various applications have different load profiles and route configurations.

In the more active client applications, I found that ActiveMQ was listing 300+ consumers when, based on my configuration, I would expect no more than 75. The vast majority of the consumers are sitting on a temporary queue. Over time, the 300 number increments by one or two over about a 4 hour period.

I did a memory dump on one of the more active client applications and found about 275 DefaultMessageListenerContainers. Using MAT, I can see that some of the containers are referenced by JmsProducers in the ProducerCache; however I can also see a large number of listener containers that are no longer being referenced at all. I was also able to match up a soft-references producer/listener endpoint with an unreferenced listener which means a second producer was created at some point.

Looking through the ProducerCache code, it looks like the LRU cache uses soft-references to producers, in my case a JmsProducer. This seems problematic for two reasons:
- If memory gets constrained and the GC cleans up a producer, it is never properly stopped.
- If the cache gets full and the map removes the LRU producer, it is never properly stopped.

What I believe is happening, is that my application is sending a few request/reply messages to a JmsProducer. The producer creates a TemporaryReplyManager which creates a DefaultMessageListenerContainer. At some point, the JmsProducer is claimed by the GC (either via the soft-reference or because the cache is full) and the reply manager is never stopped. This causes the listener container to continue to listen on the temporary queue, consuming local resources and more importantly, consuming resources on the JMS broker.

I haven't had a chance to write an application to reproduce this behavior, but I will attach one of my route configurations and a screenshot of the MAT analysis looking at DefaultMessageListenerContainers. If needed, I could provide the entire memory dump for analysis (although I rather not post it publicly). The leak depends on memory usage or producer count in the client application because the ProducerCache must have some churn. Like I said, in our production system we see about 12 temporary queues abandoned per client per day.

Unless I'm missing something, it looks like the producer cache would need to be much smarter to support stopping a producer when the soft-reference is reclaimed or a member of the cache is ejected from the LRU list.

","Apache Camel 2.10.0
ActiveMQ 5.6.0
Spring 3.2.1.RELEASE
Java 1.6.0_27
SunOS HOST 5.10 Generic_144488-09 sun4v sparc SUNW,SPARC-Enterprise-T5220",,,,,,,,,,,,,,,,,,,CAMEL-5688,05/Oct/12 14:00;mpilone;CamelConnectionLeak-ProducerTemplate.zip;https://issues.apache.org/jira/secure/attachment/12547978/CamelConnectionLeak-ProducerTemplate.zip,04/Oct/12 16:45;mpilone;CamelConnectionLeak.zip;https://issues.apache.org/jira/secure/attachment/12547781/CamelConnectionLeak.zip,03/Oct/12 17:45;mpilone;Consumer List.txt;https://issues.apache.org/jira/secure/attachment/12547567/Consumer+List.txt,03/Oct/12 17:40;mpilone;MAT Snapshot.png;https://issues.apache.org/jira/secure/attachment/12547565/MAT+Snapshot.png,03/Oct/12 17:45;mpilone;Route Configuration.txt;https://issues.apache.org/jira/secure/attachment/12547566/Route+Configuration.txt,,5.0,,,,,,,,,,,,,,,,,,,2012-10-04 20:53:16.7,,,no_permission,,Unknown,,,,,,,,,,,240495,,,Tue Oct 09 12:40:36 UTC 2012,,,,,,,0|i0120v:,4094,,,,,,,,,03/Oct/12 17:40;mpilone;Attached screenshot from MAT analysis.,"03/Oct/12 17:45;mpilone;Attached the route configuration for the JMS client application being analyzed.

Attached the list of consumers as ActiveMQ sees it for the client application being analyzed.","04/Oct/12 16:45;mpilone;I attached a test case which reproduces the problem. The test case has 3 JMS request/reply routes. It runs in a loop, sending a message, consuming a bunch of memory, then sending another message. As the GC starts to run, the producer on route 2 is reclaimed and a consumer is leaked. Instructions for running it are in the LeakMain class.","04/Oct/12 16:46;mpilone;It would be great to get a work-around for this. As of now, we have to restart our services every couple of days to keep them from exhausting ActiveMQ resources with hundreds of temporary queues.","04/Oct/12 20:53;raulvk;Michael,

Many thanks for such a detailed description, test case and bug report!

Have you tried setting the size of the ProducerCache to zero? Check [1] for instructions on how to do this. Beware I haven't tested it, it's just a suggestion for a workaround. If you have static endpoint URIs, then I don't think you should experience any churn or performance hit by having a non-existent ProducerCache. 

Regards,
Raúl.

[1] http://camel.apache.org/how-do-i-configure-the-default-maximum-cache-size-for-producercache-or-producertemplate.html","05/Oct/12 01:36;mpilone;Raul, thanks for the suggestion. I gave it a try but it didn't work. I set a few breakpoints and found that the configuration of my test case creates the ProducerCache in SendProcessor.java line 152. The cache is hard coded to a size of 1.

If you then set a breakpoint in ProducerCache.java line 385 where the producer is created using the endpoint, you can see that the producer is occasionally no longer in the cache and must be recreated which means it must have been reclaimed via a GC soft-reference.",05/Oct/12 07:33;davsclaus;Yeah it does not make so much sense to use a producer cache in the send processor as its a single producer based. So if we just store the Producer as a strong reference then there is no issue like this.,"05/Oct/12 08:56;davsclaus;I have committed a fix on trunk, and backporting to 2.10 and 2.9 branches.
You are welcome to give those a try.","05/Oct/12 13:18;mpilone;Claus, thanks for the quick fix. I'll try building the source and verifying the fix. Your change in the SendProcessor looks like it will solve my problem but doesn't the problem still exist if I was using the DefaultProducerTemplate? I could probably hack my test case to use the template rather than a gateway proxy and route configuration and I think Camel would continue to leak listeners.

For example, the sample documentation for ProducerTemplate shows:
{quote}
ProducerTemplate template;
// send to default endpoint
template.sendBody(""<hello>world!</hello>"");
// send to a specific queue
template.sendBody(""activemq:MyQueue"", ""<hello>world!</hello>"");
{quote}

The second send to ActiveMQ, if it was request/reply, would put a JmsProducer in the ProducerCache with a listener/consumer which could/would later leak.
","05/Oct/12 13:23;raulvk;Maybe we need to override the {{finalize()}} method of the JmsProducer (and review all other producers), but take a look at this post which suggests another approach: http://stackoverflow.com/questions/1638859/gracefully-finalizing-the-softreference-referent.","05/Oct/12 13:59;mpilone;I compiled the code from the 2.10.x branch and confirmed that your change does appear to fix the issue when using the SendProducer. However I also confirmed my previous comment that the problem still exists when using the DefaultProducerTemplate (or any other code that uses the ProducerCache with the LRU map implementation). I'll attach an update test case which uses the ProducerTemplate to reproduce the problem. The current cache implementation is going to be a problem with any producer that requires a stop call to properly cleanup.

You might want to look at modifying the ProducerCache to support a ReferenceQueue with the SoftReferences. Then the ProducerCache could drain the queue and stop all the reclaimed producers before creating a new producer.

Even with that fix, it might be a good idea to have an easy way (e.g. via a context property) to disable the soft-references in the cache and rely only on max cache size. If I know I'm only going to have 3 or 4 producers but a lot of memory churn, it would be nice to know that my producers would stay in the cache until I completely fill it. This could be really valuable if producer construction/teardown were expensive.",05/Oct/12 14:00;mpilone;Reopening because the problem still exists when using the ProducerTemplate (or anything else using the ProducerCache).,05/Oct/12 14:00;mpilone;Attached an updated test case that shows the same problem when using the ProducerTemplate.,"05/Oct/12 14:11;mpilone;Raul, I agree. I need to refresh my page before commenting :)

The more I think about it the trickier the problem gets. Using the ReferenceQueue on the SoftReferences would help cleanup producers in the GC case, but you would need to make sure the cache also handles the case where the LRU item is evicted when the capacity is reached. In the eviction case, there is no ReferenceQueue to hold the item for later cleanup.

It might make sense to remove the SoftReference support and just keep the LRU/capacity behavior. Then add a listener interface or ""evicted queue"" to the LRU hashmap to collect items (i.e. producers) that have been evicted and are pending cleanup. It seems like the use of SoftReferences undermines the LRU concept because the GC is deciding when to collect it rather than letting the map track the last used time. In theory the GC is supposed to be bias against SoftRef collection but it seems pretty aggressive from my simple tests. 

Something like java.util.LinkedHashMap gives you a removeEldestEntry method which would be a nice place to hook in producer shutdown code and avoids these problems.","05/Oct/12 15:15;raulvk;Beware that the LRU and the cleanup of the SoftReferences kick in at different times. They cater for different situations:

- LRU logic is valuable when your recipientList can generate many, many different producers. In a hypothetical case, if there are 2000 users and each user has a dedicated JMS topic where you want to publish messages to from your Camel route, you may end up with 2000 items in the ProducerCache, even if 1000 users are no longer active. The LRU allows Camel to vacuum potentially irrelevant producers. There is a max. producer cache size you can set to control the threshold.

- SoftReferences are valuable in near-OOM situations. It allows the JVM to 'intelligently' dispose of objects that can be recreated later, once the memory exhaustion subsides. 

Both functionalities are thus valuable. We just need to address the memory leak in SoftReferences perhaps by using finalize().","05/Oct/12 16:04;mpilone;I can understand the need for the two different mechanisms, but I'd suggest that you find an approach where both the ReferenceQueue from collected SoftRef and the LRU evictions end up in the same place to support producer shutdown. Maybe the LRU evictions could be put on the same reference queue.

Using finalizers means that each stateful producer needs to properly implement a finalizer and ensure that it is safe to call it even if the producer was properly stopped previously. This seems like you're asking for trouble given the number of disparate producer implementations. Because you already have an API/mechanism for stopping producers, you just want to make sure the cache uses that mechanism in all automatic cache removal cases. Just my opinion though. ","06/Oct/12 07:07;davsclaus;The DefaultProducerTemplate constructor allows you to pass in your own map cache, so you can just pass in the LRUCache (not the soft) or use a unlimited cache etc.",06/Oct/12 14:03;davsclaus;The LRUCache now stops the service when evicting the entry.,"06/Oct/12 14:08;davsclaus;1)
I think it may make sense to let the DefaultProducerTemplate / DefaultConsumerTemplate uses a non soft cache (eg just LRUCache) as they are created by end users, and thus they would be able to control this. For example they can lower the cache size to reduce memory occupation if using a lot of different producers. And now the elements that gets evicted will be stopped as well.

2)
Then there is some internal caches in Camel such as some based on Class/Method introspections which can safely be soft/weak based, as there is no ""stop"" logic needed.

3)
Whether some of the EIPs which uses a ProducerCache should be non-soft based; we can take a look. It may make sense. 
","07/Oct/12 06:38;davsclaus;I have committed a fix for 1+2+3, so we use a non-soft cache for the producer/consumer caches in Camel. And they are stopped on eviction as well.

Michael, fell free to give it a test run.","09/Oct/12 12:40;mpilone;I ran 2.10.2-SNAPSHOT through my test cases and everything looks good. Thanks for your attention to the matter and a good, complete solution. Now I just need to decide if I want to run with a SNAPSHOT in production or wait for 2.10.2 final!",,,
Camel transforms relative uri in a bad way,CAMEL-5420,12597473,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,gnt,gnt,04/Jul/12 15:23,02/May/13 02:29,13/Mar/19 22:19,25/Sep/12 06:51,2.10.0,,,,,,,,,2.11.0,,,,,,,,,,0,,,,,,,,,"When defining an endpoint with a relative uri such as 
{code}
   protocol:mypath1/mypath2
{code}
camel transforms the given uri into the following:
{code}
   protocol://mypath1/mypath2
{code}

Note that this transformation is performed before the component is given the uri as it is done in DefaultCamelContext#getEndpoint() in the call to normalizeEnpointUri().

This has the big problem that mypath1 is not considered the path anymore, but rather the authority (host:port).

So if a component wants to support both relative and absolute uris, it has no real way to know if the original uri contained an authority or not.
It is possible to support absolute uris with no authority though, as
{code}
   protocol:/mypath1/mypath2
{code}
is converted to
{code}
   protocol:///mypath1/mypath2
{code}

I'm not sure why relative uris are transformed into absolute uris, which does not really seem like a good idea to me.
",,,,,,,,,,,,,,,,,,,,CAMEL-4857,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-09-25 06:51:40.101,,,no_permission,,Unknown,,,,,,,,,,,241293,,,Tue Sep 25 06:51:40 UTC 2012,,,,,,,0|i026zb:,10732,,,,,,,,,25/Sep/12 06:51;davsclaus;Components now support using raw uris.,,,,,,,,,,,,,,,,,,,,,,,
URI normalization - Should detect already percent encoded values,CAMEL-5357,12560154,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,11/Jun/12 11:39,02/May/13 02:29,13/Mar/19 22:19,12/Jun/12 09:27,,,,,,,,,,2.10.0,,,,camel-core,,,,,,0,,,,,,,,,"If an uri has a percent encoded value, eg using %20, %25 etc, then the normalization logic in Camel should detect this and keep the value as is.

Currently it would end up double encoding %25, that becomes %2525, and so forth.

Its the code in UnsafeUriCharactersEncoder that has the bug",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,241230,,,Tue Jun 12 08:32:13 UTC 2012,,,,,,,0|i026lb:,10669,,,,,,,,,"12/Jun/12 08:09;davsclaus;Now we detect the % sign and only encodes if it needs to be, eg not already encoded, eg if you have %20, %25 etc. Then thats already encoded.

There is some good details about url encode from wikipedia
http://en.wikipedia.org/wiki/Url_encode","12/Jun/12 08:32;davsclaus;This bug has been partly fixed by CAMEL-4425, but failed to encode % itself to %25.
Albeit using the % sign is seldom used. However can be used by the SQL component.

So the fix is to detect the % sign and check if its already decimal encoded or not.",,,,,,,,,,,,,,,,,,,,,,
On shutdown JmsConsumer doesn't shut down direct subroutes properly and loops forever,CAMEL-4949,12540200,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,dragisak,dragisak,27/Jan/12 21:45,02/May/13 02:29,13/Mar/19 22:19,29/Jan/12 11:08,2.9.0,,,,,,,,,2.10.0,,,,camel-jms,camel-spring,,,,,2,shutdown,,,,,,,,"Our route looks like this:

{code}
from(""activemq:start"")
   .to(""direct:dir"")
{code}

On shutdown, if there is a message in the direct: route, Camel will wait indefinitely for the message to finish. Regardless of the shutdown strategy.

See attached unit test.",,,,,,,,,,,,,,,,,,,,CAMEL-4950,27/Jan/12 21:47;dragisak;CAMEL-4949.patch;https://issues.apache.org/jira/secure/attachment/12512233/CAMEL-4949.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-01-28 13:43:09.673,,,no_permission,,Unknown,,,,,,,,,,,225615,,,Sun Jan 29 11:08:34 UTC 2012,,,,,,,0|i0242f:,10260,,,,,,,,,"28/Jan/12 13:43;davsclaus;You have redelivery happening forever, this is really not a good idea.

There is already JIRA ticket to have redelivery error handler support breaking out redelivery attempts during graceful shutdown.","28/Jan/12 15:09;davsclaus;I created a new ticket as the other JIRA ticket is to interrupt/cancel delayed redeliveries, which is a bit harder to do.","29/Jan/12 03:27;dragisak;As shown in the unit test, SedaConsumer does this correctly. It's only the JMS that keeps retrying even when the shutdown is in progress. If your direct route is set to retry for a long time (exponential backoff, many redeliveries etc.), system shutdown can take forever. Infinite redelivery is set here just as an example. ",29/Jan/12 11:08;davsclaus;Thanks for reporting. Is fixed by CAMEL-4950.,,,,,,,,,,,,,,,,,,,,
Camel 2.9.0 SNAPSHOT not start on OSGI apache karaf,CAMEL-4658,12530999,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,alexey-s,alexey-s,10/Nov/11 13:49,02/May/13 02:29,13/Mar/19 22:19,11/Nov/11 12:07,,,,,,,,,,2.8.3,2.9.0,,,karaf,,,,,,0,,,,,,,,,"Compiling my project is done using maven pluggins
maven-dependency-plugin and features-maven-plugin.
First unpack apache-karaf-2.2.3.zip.
The second component uses mvn:org.apache.camel.karaf/apache-camel/${ camel-version }/xml/features

karaf-version = 2.2.3
camel-version = 2.9.0-SNAPSHOT (build 2011-11-10)

Establish the following set of components
{code}
<feature version='${karaf-version}'>ssh</feature>
<feature version='${karaf-version}'>config</feature>
<feature version='${karaf-version}'>webconsole</feature>
<feature version='${karaf-version}'>wrapper</feature>

<feature version='${camel-version}'>camel-blueprint</feature>
<feature version='${camel-version}'>camel-ftp</feature>
<feature version='${camel-version}'>camel-http</feature>
<feature version='${camel-version}'>camel-http4</feature>
<feature version='${camel-version}'>camel-quartz</feature>
{code}
After starting karaf error log ${karaf.data}/log/karag.log
{code}
2011-11-10 16:19:51,128 | ERROR | Thread-6                                                           | FeaturesServiceImpl              | s.internal.Features
ServiceImpl$1  977 | 11 - org.apache.karaf.features.core - 2.2.3 | Error installing boot features
java.lang.Exception: Could not start bundle mvn:org.apache.camel.karaf/camel-karaf-commands/2.9.0-SNAPSHOT in feature(s) camel-core-2.9.0-SNAPSHOT: Unresolve
d constraint in bundle org.apache.camel.karaf.camel-karaf-commands [95]: Unable to resolve 95.0: missing requirement [95.0] package; (&(package=org.apache.fe
lix.gogo.commands)(version>=0.10.0)(!(version>=1.0.0)))
        at org.apache.karaf.features.internal.FeaturesServiceImpl.installFeatures(FeaturesServiceImpl.java:353)[11:org.apache.karaf.features.core:2.2.3]
        at org.apache.karaf.features.internal.FeaturesServiceImpl$1.run(FeaturesServiceImpl.java:975)[11:org.apache.karaf.features.core:2.2.3]
Caused by: org.osgi.framework.BundleException: Unresolved constraint in bundle org.apache.camel.karaf.camel-karaf-commands [95]: Unable to resolve 95.0: miss
ing requirement [95.0] package; (&(package=org.apache.felix.gogo.commands)(version>=0.10.0)(!(version>=1.0.0)))
{code}
We must add a dependency on a component in a file features.xml

Camel 2.8.1 and 2.7.0 to work correctly.",,,,,,,,,,,,,,,,,,,,CAMEL-4659,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,216737,,,2011-11-10 13:49:44.0,,,,,,,0|i022an:,9973,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Open the range when importing org.apache.fe lix.gogo.commands package,CAMEL-4659,12531001,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,gnt,gnt,10/Nov/11 13:53,02/May/13 02:29,13/Mar/19 22:19,11/Nov/11 11:56,2.8.2,,,,,,,,,2.8.3,2.9.0,,,karaf,,,,,,0,,,,,,,,,"We need to import the package with [0.6,1) instead of [0.10,1) to be able to deploy on oder karaf versions (< 2.2.4)",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-11-11 09:31:07.293,,,no_permission,,Unknown,,,,,,,,,,,216739,,,Fri Nov 11 11:56:26 UTC 2011,,,,,,,0|i022av:,9974,,,,,,,,,"11/Nov/11 09:31;davsclaus;The imports is now
{code}
Import-Package: javax.management,jline.console.completer;version=""[2.5
 ,3)"",org.apache.camel;version=""[2.9,3)"",org.apache.camel.model;versio
 n=""[2.9,3)"",org.apache.camel.spi;version=""[2.9,3)"",org.apache.felix.g
 ogo.commands;version=""[0.6,1)"",org.apache.felix.service.command;versi
 on=""[0.10,1)"";status=provisional,org.apache.karaf.shell.console;versi
 on=""[2.2,3)"",org.osgi.framework;version=""[1.5,2)"",org.osgi.service.bl
 ueprint;version=""[1.0.0,2.0.0)"",org.slf4j;version=""[1.6,2)""
{code}

I wonder if the org.apache.felix.service.command should also be [0.6,1) range as well?","11/Nov/11 09:32;davsclaus;A patch
{code}
Index: pom.xml
===================================================================
--- pom.xml	(revision 1200770)
+++ pom.xml	(working copy)
@@ -71,7 +71,7 @@
           <instructions>
             <Import-Package>
               org.apache.felix.service.command,
-              org.apache.felix.gogo.commands,
+              org.apache.felix.gogo.commands;version=""[0.6,1)"",
               org.apache.karaf.shell.console,
               *
             </Import-Package>
{code}","11/Nov/11 10:40;njiang;@Claus
I think you need to specify the version range of org.apache.felix.service.command.
If you doesn't specify it, the bundle plugin will pickup the version range according to meta-info of the bundle which is managed by the pom dependencies.","11/Nov/11 11:05;davsclaus;Thanks Willem, here is MANIFEST.MF after the change
{code}
Import-Package: javax.management,jline.console.completer;version=""[2.5
 ,3)"",org.apache.camel;version=""[2.9,3)"",org.apache.camel.model;versio
 n=""[2.9,3)"",org.apache.camel.spi;version=""[2.9,3)"",org.apache.felix.g
 ogo.commands;version=""[0.6,1)"",org.apache.felix.service.command;versi
 on=""[0.6,1)"";status=provisional,org.apache.karaf.shell.console;versio
 n=""[2.2,3)"",org.osgi.framework;version=""[1.5,2)"",org.osgi.service.blu
 eprint;version=""[1.0.0,2.0.0)"",org.slf4j;version=""[1.6,2)""
{code}","11/Nov/11 11:06;davsclaus;Before the change the bundle plugin appended status=provisional to the import.
{code}
org.apache.felix.service.command;version=""[0.10,1)"";status=provisional
{code}

Should we do that as well?","11/Nov/11 11:25;njiang;Here are some information about the provisional[1], I think it is introduced by felix bundle itself.
[1]http://felix.apache.org/site/provisional-osgi-api-policy.html",11/Nov/11 11:56;njiang;Applied the patch into trunk and camel 2.8.x branch.,,,,,,,,,,,,,,,,,
Camel XSLT does not work when used with camel-blueprint,CAMEL-3934,12506023,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,iocanel,iocanel,03/May/11 05:41,02/May/13 02:29,13/Mar/19 22:19,30/May/11 15:55,2.3.0,2.4.0,2.5.0,2.6.0,2.7.0,2.7.1,,,,2.8.0,,,,camel-xslt,,,,,,0,,,,,,,,,"camel-xslt cannot found the xslt document when used with camel-blueprint, do to FileNotFoundException.
Apparently, the component uses spring resource abstraction, which is not applicable when used with camel-blueprint.",,,,,,,,,,,,,,,,,,,,CAMEL-4031,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-05-16 14:02:31.364,,,no_permission,,,,,,,,,,,,,14006,,,Mon May 16 14:02:31 UTC 2011,,,,,,,0|i01xtr:,9249,,,,,,,,,"16/May/11 14:02;rodehav;I seem to have a very similar problem. The xsl file cannot be found although it's included in the bundle itself. It resides in the subfolder ""resources/xslt"". I don't use Spring DSL or blueprint. I use normal java DSL, like this:

{code}
from(""file:..."").to(""xslt:resources/xslt/claes-basis2esb-basis.xsl"");
{code}

Can someone verify if it's the same problem? Is there any progress? Also, is there a workaround I can use to get this to work in Karaf?

I'm using Camel 2.7.1 under Karaf 2.2.0 and I get the following exception:

{code}
2011-05-16 15:40:52,706 | ERROR | 76-dc962f8a57fe) | daq                              | ?                                   ? | [ERROR] null : [trs.route.daq.b07e8bfd-cff2-49b0-a376-dc962f8a57fe] The callback method start has thrown an exception : Camel context failed to start (TRS data acquisition route)
java.lang.RuntimeException: Camel context failed to start (TRS data acquisition route)
	at se.digia.connect.core.service.RouteServiceBase.doStart(RouteServiceBase.java:70)
	at se.digia.connect.core.service.ServiceBase.start(ServiceBase.java:46)
	at se.digia.trs.route.daq.DaqService.__start(DaqService.java:77)
	at se.digia.trs.route.daq.DaqService.start(DaqService.java)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)[:1.6.0_21]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)[:1.6.0_21]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)[:1.6.0_21]
	at java.lang.reflect.Method.invoke(Method.java:597)[:1.6.0_21]
	at org.apache.felix.ipojo.util.Callback.call(Callback.java:237)[68:org.apache.felix.ipojo:1.6.8]
	at org.apache.felix.ipojo.util.Callback.call(Callback.java:193)[68:org.apache.felix.ipojo:1.6.8]
	at org.apache.felix.ipojo.handlers.lifecycle.callback.LifecycleCallback.call(LifecycleCallback.java:86)[68:org.apache.felix.ipojo:1.6.8]
	at org.apache.felix.ipojo.handlers.lifecycle.callback.LifecycleCallbackHandler.__stateChanged(LifecycleCallbackHandler.java:162)[68:org.apache.felix.ipojo:1.6.8]
	at org.apache.felix.ipojo.handlers.lifecycle.callback.LifecycleCallbackHandler.stateChanged(LifecycleCallbackHandler.java)[68:org.apache.felix.ipojo:1.6.8]
	at org.apache.felix.ipojo.InstanceManager.setState(InstanceManager.java:455)[68:org.apache.felix.ipojo:1.6.8]
	at org.apache.felix.ipojo.InstanceManager.start(InstanceManager.java:336)[68:org.apache.felix.ipojo:1.6.8]
	at org.apache.felix.ipojo.InstanceManager.reconfigure(InstanceManager.java:1184)[68:org.apache.felix.ipojo:1.6.8]
	at org.apache.felix.ipojo.IPojoFactory.reconfigure(IPojoFactory.java:481)[68:org.apache.felix.ipojo:1.6.8]
	at org.apache.felix.ipojo.IPojoFactory.updated(IPojoFactory.java:648)[68:org.apache.felix.ipojo:1.6.8]
	at org.apache.felix.cm.impl.ConfigurationManager$UpdateConfiguration.run(ConfigurationManager.java:1567)[5:org.apache.felix.configadmin:1.2.8]
	at org.apache.felix.cm.impl.UpdateThread.run(UpdateThread.java:104)[5:org.apache.felix.configadmin:1.2.8]
	at java.lang.Thread.run(Thread.java:619)[:1.6.0_21]
Caused by: org.apache.camel.FailedToCreateRouteException: Failed to create route route15 at: >>> To[xslt:resources/xslt/claes-basis2esb-basis.xsl] <<< in route: Route[[From[file:C:\dev\connect\common/data/interfaces/daq?m... because of Failed to resolve endpoint: xslt://resources/xslt/claes-basis2esb-basis.xsl due to: class path resource [resources/xslt/claes-basis2esb-basis.xsl] cannot be opened because it does not exist class path resource [resources/xslt/claes-basis2esb-basis.xsl]
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:815)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:165)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:706)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:1643)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1432)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1336)
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:67)
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:54)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1314)
	at se.digia.connect.core.service.RouteServiceBase.doStart(RouteServiceBase.java:54)
	... 20 more
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: xslt://resources/xslt/claes-basis2esb-basis.xsl due to: class path resource [resources/xslt/claes-basis2esb-basis.xsl] cannot be opened because it does not exist class path resource [resources/xslt/claes-basis2esb-basis.xsl]
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:450)
	at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:47)
	at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:180)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:110)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:116)
	at org.apache.camel.model.SendDefinition.resolveEndpoint(SendDefinition.java:61)
	at org.apache.camel.model.SendDefinition.createProcessor(SendDefinition.java:55)
	at org.apache.camel.model.ProcessorDefinition.makeProcessor(ProcessorDefinition.java:410)
	at org.apache.camel.model.ProcessorDefinition.addRoutes(ProcessorDefinition.java:181)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:812)
	... 29 more
Caused by: javax.xml.transform.TransformerConfigurationException: class path resource [resources/xslt/claes-basis2esb-basis.xsl] cannot be opened because it does not exist class path resource [resources/xslt/claes-basis2esb-basis.xsl]
	at org.apache.camel.component.xslt.XsltComponent.loadResource(XsltComponent.java:160)
	at org.apache.camel.component.xslt.XsltComponent.createEndpoint(XsltComponent.java:132)
	at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:75)
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:432)
	... 38 more
Caused by: java.io.FileNotFoundException: class path resource [resources/xslt/claes-basis2esb-basis.xsl] cannot be opened because it does not exist
	at org.springframework.core.io.ClassPathResource.getInputStream(ClassPathResource.java:158)
	at org.apache.camel.component.xslt.XsltComponent.loadResource(XsltComponent.java:156)
	... 41 more

{code}",,,,,,,,,,,,,,,,,,,,,,,
debugBefore() and debugAfter() not called if unit test extends CamelBlueprintTestSupport,CAMEL-6305,12644067,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,tmielke,tmielke,23/Apr/13 07:55,27/Apr/13 09:53,13/Mar/19 22:19,27/Apr/13 09:53,2.11.0,,,,,,,,,2.10.5,2.11.1,2.12.0,,camel-core,camel-test,,,,,0,,,,,,,,,A test that extends CamelBlueprintTestSupport does not get its debugBefore() and debugAfter() methods called.,,,,,,,,,,,,,,,,,,,,,23/Apr/13 07:59;tmielke;CAMEL-6305.diff;https://issues.apache.org/jira/secure/attachment/12579993/CAMEL-6305.diff,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-04-23 13:16:31.874,,,no_permission,,Unknown,,,,,,,,,,,324434,,,Sat Apr 27 09:53:21 UTC 2013,,,,,,,0|i1jz2f:,324779,,,,,,,,,"23/Apr/13 07:59;tmielke;Attaching slightly modified version of DebugBlueprintTest.java in CAMEL-6305.diff that can serve as unit test for this bug.
 ","23/Apr/13 13:16;njiang;This issue is caused by BlueprintCamelContext is started before the setUp() is called.
We need to introduce a mechanism to avoid staring the BlueprintCamelContext when loading the bundle.","24/Apr/13 10:05;njiang;It's hard to block the starting process of BlueprintCamelContext before the bundle is start, because CamelContext will be publish as OSGi service after the BlueprintCamelContext is started. And CamelBlueprintTestSupport is looking up the CamelContext from the OSGi service registry. 

I finally find a way to fix this issue by just stop the CamelContext in the setUp method if we need the debug feature.","27/Apr/13 09:53;njiang;Applied the patch into trunk, camel-2.11.x and camel-2.10.x branches.",,,,,,,,,,,,,,,,,,,,
Regression in validator component in 2.10.3,CAMEL-5860,12623149,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,davidkarlsen@gmail.com,davidkarlsen@gmail.com,10/Dec/12 14:23,26/Apr/13 09:29,13/Mar/19 22:19,07/Mar/13 19:15,2.10.3,,,,,,,,,2.10.4,2.11.0,2.9.6,,camel-validator,,,,,,0,,,,,,,,,"I get:

{code}
CaughtExceptionType:java.lang.NullPointerException, CaughtExceptionMessage:null, StackTrace:java.lang.NullPointerException  at 
org.apache.camel.converter.jaxp.XmlConverter.toStreamSource(XmlConverter.java:516)   at 
org.apache.camel.converter.jaxp.XmlConverter.toSAXSource(XmlConverter.java:399)      at 
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)  at 
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)        at 
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)        at 
java.lang.reflect.Method.invoke(Method.java:601)     at 
org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:923)       at 
org.apache.camel.impl.converter.InstanceMethodTypeConverter.convertTo(InstanceMethodTypeConverter.java:66)   
at org.apache.camel.support.TypeConverterSupport.convertTo(TypeConverterSupport.java:34)        at 
org.apache.camel.processor.validation.ValidatingProcessor.getSource(ValidatingProcessor.java:343)    at 
org.apache.camel.processor.validation.ValidatingProcessor.process(ValidatingProcessor.java:100)      at 
org.apache.camel.impl.ProcessorEndpoint.onExchange(ProcessorEndpoint.java:101)       at 
org.apache.camel.impl.ProcessorEndpoint$1.process(ProcessorEndpoint.java:71) at 
org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)   at
org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)     at 
org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:122) at 
org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:298)        at 
org.apache.camel.processor.SendProcessor.process(SendProcessor.java:117)     at 
org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)     at 
org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)        

\
{code}

when I upgrade camel to 2.10.3 and use the validator component:

{noformat}
<camel:to uri=""validator:META-INF/xsd/transactiongatetransfertransaction.xsd"" />

{noformat}

this did not happen in 2.10.2 or versions before that.",schema on classpath in src/main/resources,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-12-11 08:07:08.603,,,no_permission,,Unknown,,,,,,,,,,,296748,,,Wed Apr 24 19:40:32 UTC 2013,,,,,,,0|i14h1z:,234226,Regression,,,,,,,,"11/Dec/12 08:07;njiang;Can you submit a small test case for us the reproduce the error?
It could be more easy for us to trace the issue.",11/Dec/12 15:53;raulvk;This also happens with the XSLT component. I think it's a severe bug. I'll open another ticket and describe what's going on.,"12/Dec/12 03:14;njiang;Hi Raul,

Yes, XSLT and Validate are failed at the same place that the exchange is passed into the converter. I will fix it and adding some unit test to avoid the regression failure.",12/Dec/12 03:22;njiang;This issue can be workaround by change the message body into InputStream or other class type than Byte[].,"14/Dec/12 10:09;njiang;Applied the patch into trunk, camel-2.10.x, camel-2.9.x branches.","27/Feb/13 08:59;davidkarlsen@gmail.com;It now (in 2.10.4) fails on IBM java 1.6 JDK with:

{noformat}
Caused by: javax.xml.transform.TransformerException: Can't transform a Source of type javax.xml.transform.stax.StAXSource
	at com.sun.org.apache.xerces.internal.jaxp.validation.StAXValidatorHelper.validate(StAXValidatorHelper.java:107)
	at com.sun.org.apache.xerces.internal.jaxp.validation.ValidatorImpl.validate(ValidatorImpl.java:154)
	at org.apache.camel.processor.validation.ValidatingProcessor.process(ValidatingProcessor.java:127)
	at org.apache.camel.impl.ProcessorEndpoint.onExchange(ProcessorEndpoint.java:101)
	at org.apache.camel.impl.ProcessorEndpoint$1.process(ProcessorEndpoint.java:71)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:122)
	at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:298)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:117)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:163)
	at org.apache.camel.processor.interceptor.StreamCachingInterceptor.process(StreamCachingInterceptor.java:52)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:308)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:117)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:122)
	at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:61)
	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:86)
	at org.apache.camel.processor.UnitOfWorkProducer.process(UnitOfWorkProducer.java:63)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:366)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:337)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:233)
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:337)
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:175)
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:111)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBodyAndHeader(DefaultProducerTemplate.java:150)
	... 169 more

{noformat}

Failing on JDK:

/opt/ibm/ibm-java-x86_64-60/bin/java -version
java version ""1.6.0""
Java(TM) SE Runtime Environment (build pxa6460sr12-20121025_01(SR12))
IBM J9 VM (build 2.4, JRE 1.6.0 IBM J9 2.4 Linux amd64-64 jvmxa6460sr12-20121024_126067 (JIT enabled, AOT enabled)
J9VM - 20121024_126067
JIT  - r9_20120914_26057
GC   - 20120928_AA)
JCL  - 20121014_01


Suceeding on JDKs:
 /opt/ibm/ibm-java-x86_64-70/bin/java -version
java version ""1.7.0""
Java(TM) SE Runtime Environment (build pxa6470sr3-20121025_01(SR3))
IBM J9 VM (build 2.6, JRE 1.7.0 Linux amd64-64 20121024_126071 (JIT enabled, AOT enabled)
J9VM - R26_Java726_SR3_20121024_1635_B126071
JIT  - r11.b02_20120924_26343a
GC   - R26_Java726_SR3_20121024_1635_B126071
J9CL - 20121024_126071)
JCL - 20121019_01 based on Oracle 7u6-b17


java -version
java version ""1.7.0_15""
Java(TM) SE Runtime Environment (build 1.7.0_15-b03)
Java HotSpot(TM) 64-Bit Server VM (build 23.7-b01, mixed mode)

/opt/jdk1.6.0_39-x64/bin/java -version
java version ""1.6.0_39""
Java(TM) SE Runtime Environment (build 1.6.0_39-b04)
Java HotSpot(TM) 64-Bit Server VM (build 20.14-b01, mixed mode)
",07/Mar/13 19:15;davsclaus;Its a problem in the IBM JDK which you would need to update.,"24/Apr/13 19:40;davidkarlsen@gmail.com;Are you sure about that? Since it worked just fine on IBM JDK prior to the camel upgrade?
And it does raise a specific exception due to a specific check inside the jdk class (which is xerces internalized):
Caused by: javax.xml.transform.TransformerException: Can't transform a Source of type javax.xml.transform.stax.StAXSource
	at com.sun.org.apache.xerces.internal.jaxp.validation.StAXValidatorHelper.validate(StAXValidatorHelper.java:107)
	at com.sun.org.apache.xerces.internal.jaxp.validation.ValidatorImpl.validate(ValidatorImpl.java:154)",,,,,,,,,,,,,,,,
Mina UDP default codec should keep the data as byte[] ,CAMEL-6302,12643980,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,tterm001,tterm001,22/Apr/13 19:06,26/Apr/13 09:01,13/Mar/19 22:19,26/Apr/13 09:01,2.10.4,,,,,,,,,2.10.5,2.11.1,2.12.0,,camel-mina,camel-mina2,,,,,0,,,,,,,,,"The MinaUdpProtocolCodecFactory on the consumer side decodes data from an udp datagram to a byte[].

    byte[] bytes = context.getTypeConverter().convertTo(byte[].class, in);

On the provider side where it gets back to the wire it gets converted to a string:

    String value = context.getTypeConverter().convertTo(String.class, message);

and then set to the ByteBuffer with the given charset.

The result is that the original datagram is not valid anymore. The default codec should the data convert to a byte array or keep the data as byte array. 

",,,,,,,,,,,,,,,,,,,,,22/Apr/13 19:19;tterm001;camel-mina.patch;https://issues.apache.org/jira/secure/attachment/12579887/camel-mina.patch,24/Apr/13 19:16;tterm001;camel-mina2.patch;https://issues.apache.org/jira/secure/attachment/12580350/camel-mina2.patch,,,,,2.0,,,,,,,,,,,,,,,,,,,2013-04-26 09:01:19.991,,,no_permission,,Unknown,,,,,,,,,,,324347,,,Fri Apr 26 09:01:19 UTC 2013,,,Patch Available,,,,0|i1jyjj:,324692,,,,,,,,,"22/Apr/13 19:08;tterm001;Attached is a patch with the changes for the codec and a test which results currently in an error. After the fix it will be successful.
",24/Apr/13 19:16;tterm001;camel-mina2 need also the fix for the udp codec.,24/Apr/13 19:16;tterm001;Patch for camel-mina2,26/Apr/13 09:01;davsclaus;Thanks for the patches.,,,,,,,,,,,,,,,,,,,,
DeadLetterChannel - When messages sent to DLQ it should always regard it as handled = true,CAMEL-6311,12644399,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,24/Apr/13 17:44,25/Apr/13 07:56,13/Mar/19 22:19,25/Apr/13 07:56,2.10.4,2.11.0,,,,,,,,2.10.5,2.11.1,2.12.0,,camel-core,camel-jms,,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/DeadLetterChanel-does-not-handle-exception-tp5731073.html

You may have a situation when using DeadLetterChannel, and it handles an exception. Then afterwards in the consumer, they should see the Exchange being regarded as handled, with no exception if they call getException.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,324766,,,Thu Apr 25 07:32:59 UTC 2013,,,,,,,0|i1k14f:,325112,,,,,,,,,"25/Apr/13 07:32;davsclaus;This problem is only if you use a custom onException that do *not* have handled=true, then that overrides the handling on the DLC which was the bug.",,,,,,,,,,,,,,,,,,,,,,,
Commands doesn't support a custom JMX Agent,CAMEL-6297,12643418,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,mpriess,mpriess,18/Apr/13 21:11,23/Apr/13 02:27,13/Mar/19 22:19,22/Apr/13 15:25,2.10.4,,,,,,,,,2.10.5,2.11.1,,,karaf,,,,,,0,,,,,,,,,"Hi, 

the latest implementation used the fixed default domain which doesn't work if you specify a custom agent. I removed the fixed default domain name and used the method ManagementAgent.getMBeanObjectDomainName() instead.

In addition I added the attribute InflightExchanges to the route-info command because I really missed it. Would be great if the patch could be integrated into 2.12.

Cheers,

Michael",,3600,3600,,0%,3600,3600,,,,,,,,,,,,,,18/Apr/13 21:13;mpriess;agent_bug.diff;https://issues.apache.org/jira/secure/attachment/12579419/agent_bug.diff,18/Apr/13 21:13;mpriess;route.xml;https://issues.apache.org/jira/secure/attachment/12579418/route.xml,,,,,2.0,,,,,,,,,,,,,,,,,,,2013-04-19 13:23:45.29,,,no_permission,,Novice,,,,,,,,,,,323785,,,Tue Apr 23 02:27:51 UTC 2013,,,Patch Available,,,,0|i1jv2n:,324130,,,,,,,,,18/Apr/13 21:13;mpriess;Appended the patch and a small example to reproduce the problem.,"19/Apr/13 13:23;njiang;Committed the patch into trunk with thanks to Michael, I will back port it into other branches once Camel 2.11.0 is out.",22/Apr/13 15:27;davsclaus;Maybe this should be patched on the 2.10 branch as well?,"23/Apr/13 02:27;njiang;Merged the patch into trunk, camel-2.11.x and camel-2.10.x branches.",,,,,,,,,,,,,,,,,,,,
camel:run in blueprint is broken,CAMEL-6244,12641179,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,06/Apr/13 05:57,06/Apr/13 06:43,13/Mar/19 22:19,06/Apr/13 06:43,2.11.0,,,,,,,,,2.11.0,,,,tooling,,,,,,0,,,,,,,,,"Due the Aries blueprint upgrade then the blueprint extenders may run 2+ due classpath issues.
",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,321595,,,Sat Apr 06 06:43:56 UTC 2013,,,,,,,0|i1jhk7:,321940,,,,,,,,,"06/Apr/13 06:43;davsclaus;All deps on camel-blueprint for blueprint stuff should be provided scope so they wont conflict when running with camel:run or testing. 

Also made sure camel:run dont have duplicate jars in the classpath by using a set / and made the classpath logging per line so its easier to read.",,,,,,,,,,,,,,,,,,,,,,,
Krati component - Should preserve headers,CAMEL-6242,12641038,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,05/Apr/13 12:58,05/Apr/13 13:10,13/Mar/19 22:19,05/Apr/13 13:10,,,,,,,,,,2.10.5,2.11.0,,,camel-krati,,,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Krati-Component-isn-t-preserving-headers-tp5730374.html",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,321454,,,2013-04-05 12:58:13.0,,,,,,,0|i1jgov:,321799,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TransferExchage InOut ActiveMQ Exception,CAMEL-6218,12639290,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,raulvk,alanfoster,alanfoster,27/Mar/13 12:07,03/Apr/13 21:34,13/Mar/19 22:19,03/Apr/13 00:38,2.10.4,,,,,,,,,2.10.5,2.11.0,,,,,,,,,0,,,,,,,,,"The scnearios are :

    - when using the transferExchange option only on the producer, I don't get the body back, but not the header.
    - When I use the transferExchange option on both producer and consumer, I get the headers back, but not the body. And instead I get the following exception

{code:java}
[ryQueueReplyManager[temporary]] TemporaryQueueReplyManager     WARN  Execution of JMS message listener failed. Caused by: [java.lang.NullPointerException - null]
java.lang.NullPointerException
	at org.apache.camel.impl.DefaultExchangeHolder.unmarshal(DefaultExchangeHolder.java:107)
	at org.apache.camel.component.jms.JmsBinding.extractBodyFromJms(JmsBinding.java:128)
	at org.apache.camel.component.jms.JmsMessage.createBody(JmsMessage.java:214)
	at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:41)
	at org.apache.camel.component.jms.reply.ReplyManagerSupport.processReply(ReplyManagerSupport.java:136)
	at org.apache.camel.component.jms.reply.TemporaryQueueReplyHandler.onReply(TemporaryQueueReplyHandler.java:54)
	at org.apache.camel.component.jms.reply.TemporaryQueueReplyManager.handleReplyMessage(TemporaryQueueReplyManager.java:71)
	at org.apache.camel.component.jms.reply.ReplyManagerSupport.onMessage(ReplyManagerSupport.java:113)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:560)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:498)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:467)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:325)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:263)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1058)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1050)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:947)
	at java.lang.Thread.run(Thread.java:662)
{code}
",,,,,,,,,,,,,,,,,,,,,27/Mar/13 12:08;alanfoster;camel-6214-transferExchange.java;https://issues.apache.org/jira/secure/attachment/12575692/camel-6214-transferExchange.java,31/Mar/13 17:50;alanfoster;camel-6218-test-project.rar;https://issues.apache.org/jira/secure/attachment/12576293/camel-6218-test-project.rar,31/Mar/13 17:27;muellerc;org.apache.cmueller.camel.zip;https://issues.apache.org/jira/secure/attachment/12576292/org.apache.cmueller.camel.zip,,,,3.0,,,,,,,,,,,,,,,,,,,2013-03-27 12:24:04.571,,,no_permission,,Unknown,,,,,,,,,,,319760,,,Wed Apr 03 21:34:38 UTC 2013,,,,,,,0|i1j67z:,320101,,,,,,,,,27/Mar/13 12:08;alanfoster;Example of the failing test attached,27/Mar/13 12:24;davsclaus;What Camel version do you use?,"27/Mar/13 12:46;muellerc;Can you try not to use inner classes!?
And can you assign serialVersionUID to your classes!?","27/Mar/13 14:21;alanfoster;[~davsclaus] Sorry, I forgot to post that information here

I am running this on windows 2008 r2 with the following dependencies

- Camel 2.10
- activemq-camel 5.7

[~muellerc] Apologies, I have just tried this now. After adding them to separate classes and giving them both a serialVersionUID and I still get an exception","27/Mar/13 14:31;alanfoster;I have also just tried this with the newer versions, and I still get this exception :(

- Camel 2.11-SNAPSHOT
- activemq-camel 5.8","27/Mar/13 14:36;alanfoster;Out of interest I have also tried running it with activemq-camel 5.9-SNAPSHOT, but that caused all 3 tests to fail with the following stack trace for each

{code}
org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[Message: foo.Request@6c43da1b]
	at org.apache.camel.util.ObjectHelper.wrapCamelExecutionException(ObjectHelper.java:1347)
	at org.apache.camel.impl.DefaultExchange.setException(DefaultExchange.java:272)
	at org.apache.camel.component.jms.JmsProducer.process(JmsProducer.java:137)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:122)
	at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:298)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:117)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.BacklogTracerInterceptor.process(BacklogTracerInterceptor.java:84)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:390)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:273)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:335)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:117)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:122)
	at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:60)
	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:86)
	at org.apache.camel.processor.UnitOfWorkProducer.process(UnitOfWorkProducer.java:63)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:366)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:337)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:233)
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:337)
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:175)
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:111)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:124)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:342)
	at foo.ActiveMQTest.testActiveMQInOutBodyResponse(ActiveMQTest.java:48)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:46)
	at org.junit.rules.RunRules.evaluate(RunRules.java:18)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:69)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:48)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:292)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:76)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:195)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:63)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:120)
Caused by: java.lang.NoSuchMethodError: org.apache.camel.util.ObjectHelper.notNull(Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)V
	at org.apache.camel.component.jms.reply.ReplyManagerSupport.doStart(ReplyManagerSupport.java:212)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:64)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:54)
	at org.apache.camel.component.jms.JmsProducer.createReplyManager(JmsProducer.java:503)
	at org.apache.camel.component.jms.JmsProducer.initReplyManager(JmsProducer.java:94)
	at org.apache.camel.component.jms.JmsProducer.processInOut(JmsProducer.java:164)
	at org.apache.camel.component.jms.JmsProducer.process(JmsProducer.java:129)
	... 77 more
{code}


","29/Mar/13 15:00;alanfoster;I noticed that Camel 2.11 offers camel-sjms, is this the preferred component to use over activemq-camel?

Could someone please confirm if this jira is indeed a bug please, or am I simply misunderstanding the documentation for the transferExchange option?
Thanks!","30/Mar/13 09:21;muellerc;No, for your fist question. It's the simple/springless JMS component. It will may become the preferred JMS component in the future, but not in 2.11.

I will have a look into this JIRA. If you could attach a complete project or a patch to an existin project in the future, it will take less time to verify the issue you have.","30/Mar/13 09:36;muellerc;Ok, it works for me. I can attach my simple project later...","31/Mar/13 10:40;davsclaus;Well the NPE should be fixed in camel-core, that is a bug.

Either we should handle that null, or thrown some other kind of exception saying something is wrong.","31/Mar/13 10:42;davsclaus;Alan, what exact Camel version was that stacktrace from? eg was it 2.10.0, 2.10.1, etc. We need that so we know exactly which code line the NPE is triggered from.","31/Mar/13 10:48;davsclaus;I assume its 2.10.0, then we can see that the NPE is because payload is null
http://svn.apache.org/viewvc/camel/tags/camel-2.10.0/camel-core/src/main/java/org/apache/camel/impl/DefaultExchangeHolder.java?view=markup","31/Mar/13 17:27;muellerc;I created a test which shows it fails with Camel 2.11-SNAPSHOT. It also fails with Camel 2.10.4. The exchange is transfered to the second route, but the response is not transfered back to the first route.",31/Mar/13 17:28;muellerc;We should fix this before 2.11.0 in my opinion.,31/Mar/13 17:50;alanfoster;I've just added an example project which has the previously included test failing now. I haven't had any luck tracking down the actual issue yet sadly :(,"31/Mar/13 17:57;alanfoster;Ah, thank you for including an example project [~muellerc], I see you beat me to it! :)

I also have seen some other bugs related in this area; The most important one seems to be a race condition with using InOut + ActiveMQ Component. I'll try making a sample project to show this bug ASAP.","31/Mar/13 18:50;raulvk;[~alanfoster], I fixed a few bugs and race conditions in camel-jms recently. Take a look if any of [these issues|https://issues.apache.org/jira/issues/?jql=project%20%3D%20CAMEL%20AND%20component%20%3D%20camel-jms%20AND%20status%20in%20(Resolved%2C%20Closed)%20AND%20assignee%20in%20(currentUser())] could match your findings.","31/Mar/13 20:52;alanfoster;[~raulvk] Nice work on fixing a lot of those bugs! 

The test i'm writing is having a lot of issues, I am getting a lot of blueprint apache aries ComponentDefinitionExceptions when it attempts to start the org.apache.cxf.cxf-rt-transports-http bundle in JUnit for reason...

I have been able to deploy the route to Karaf just fine however! The exception thrown when inside Karaf is {{Caused By javax.jms.InvalidDestinationException Cannot publish to a deleted Destination: temp-queue://ID:my-computer-1234-etc-etc}} - I'll keep trying to make an actual JUnit test for this though","02/Apr/13 16:42;muellerc;Regarding to my attached project. The strange thing is, if I set transferExchange=true to both ActiveMQ endpoints (producer and consumer), the first route ""ignore"" the response of the second one. If I set transferExchange=false on the second route, the correct body is received but not the header (because it's and serialized object).",02/Apr/13 17:03;muellerc;Thanks Raul for looking into it!,"03/Apr/13 00:38;raulvk;Resolved in r1463799.

The JmsBinding is designed to be ""pull-based"", but the Exchange <=> OUT Message relationship was being set too late: after invoking the JmsBinding. Therefore, the latter wasn't able to populate body, headers and properties from the DefaultExchangeHolder in time.

As a side-effect, we now also set the OUT message when the {{transferException}} option is enabled (aside from also setting the Exception, of course). Before we only used to set the exception, but it's a chicken-or-egg situation to be honest.

This is harmless – and even better than before if you ask me, because now there's more context information in the Exchange. All JMS tests pass locally.",03/Apr/13 21:34;muellerc;Thanks for resolving it!,,
"CXF cosumer should set Exchange's charset name, if content type provides one",CAMEL-6188,12637977,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,fhoeben,fhoeben,20/Mar/13 13:20,28/Mar/13 02:25,13/Mar/19 22:19,28/Mar/13 02:25,2.10.4,,,,,,,,,2.11.0,,,,camel-cxf,,,,,,0,,,,,,,,,"The CXF consumer copies the content-type http header to the camel exchange. This header may indicate the character set used in the request (for instance ""text/xml;charset=UTF-8""), and if so this should be made available in the normal place for Camel (i.e. a property in the exchange called 'CamelCharsetName').

This may (of course) be done in each route by a separate processor, but it simplifies life if this is done by default. (org.apache.camel.component.cxf.DefaultCxfBinding.populateExchangeFromCxfRequest() seems the logical place)


Sample processor that performs this job.
{code}
import java.nio.charset.Charset;
import org.apache.camel.Exchange;
import org.apache.camel.Processor;
import org.apache.camel.util.ExchangeHelper;
import org.apache.http.entity.ContentType;

/**
 * Processor to ensure the exchange's charset name property is in sync with
 * its content type.
 */
public class CharsetProcessor implements Processor {
    @Override
    public void process(Exchange exchange) throws Exception {
        String contentTypeHeader = ExchangeHelper.getContentType(exchange);
        if (contentTypeHeader != null) {
            ContentType contentType = ContentType.parse(contentTypeHeader);
            if (contentType != null) {
                Charset charset = contentType.getCharset();
                exchange.setProperty(Exchange.CHARSET_NAME, charset.name());
            }
        }
    }
}
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-03-28 02:25:58.934,,,no_permission,,Novice,,,,,,,,,,,318455,,,Thu Mar 28 02:25:58 UTC 2013,,,,,,,0|i1iy5z:,318796,,,,,,,,,28/Mar/13 02:25;njiang;Applied the patch into trunk.,,,,,,,,,,,,,,,,,,,,,,,
Using route policy to start and stop routes can cause RouteContextProcessor to be added multiple times,CAMEL-6220,12639386,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,27/Mar/13 16:45,27/Mar/13 18:00,13/Mar/19 22:19,27/Mar/13 18:00,2.10.4,2.9.6,,,,,,,,2.10.5,2.11.0,2.9.7,,camel-core,,,,,,0,,,,,,,,,"For example using a quartz route policy to keep starting and stopping a route may lead to unnecessary processors being wrapped.

A log snippet where we have wrapped 4 times
{code}
2013-03-27 17:43:10,004 [amel-1_Worker-4] DEBUG RouteService                   - Starting child service on route: started-and-stopped-route -> RouteContextProcessor[RouteContextProcessor[RouteContextProcessor[RouteContextProcessor[RouteContextProcessor[RouteContextProcessor[Pipeline[[Channel[Log(started-and-stopped-route)[ ${body}]], Channel[Wrap[org.apache.camel.routepolicy.quartz.StartStopCronRoutePolicyIssueTest$2@20091e0a] -> org.apache.camel.routepolicy.quartz.StartStopCronRoutePolicyIssueTest$2@20091e0a]]]]]]]]]
2013-03-27 17:43:10,005 [amel-1_Worker-4] DEBUG RouteService                   - Starting child service on route: started-and-stopped-route -> RouteContextProcessor[RouteContextProcessor[RouteContextProcessor[RouteContextProcessor[RouteContextProcessor[Pipeline[[Channel[Log(started-and-stopped-route)[ ${body}]], Channel[Wrap[org.apache.camel.routepolicy.quartz.StartStopCronRoutePolicyIssueTest$2@20091e0a] -> org.apache.camel.routepolicy.quartz.StartStopCronRoutePolicyIssueTest$2@20091e0a]]]]]]]]
2013-03-27 17:43:10,005 [amel-1_Worker-4] DEBUG RouteService                   - Starting child service on route: started-and-stopped-route -> RouteContextProcessor[RouteContextProcessor[RouteContextProcessor[RouteContextProcessor[Pipeline[[Channel[Log(started-and-stopped-route)[ ${body}]], Channel[Wrap[org.apache.camel.routepolicy.quartz.StartStopCronRoutePolicyIssueTest$2@20091e0a] -> org.apache.camel.routepolicy.quartz.StartStopCronRoutePolicyIssueTest$2@20091e0a]]]]]]]
2013-03-27 17:43:10,006 [amel-1_Worker-4] DEBUG RouteService                   - Starting child service on route: started-and-stopped-route -> RouteContextProcessor[RouteContextProcessor[RouteContextProcessor[Pipeline[[Channel[Log(started-and-stopped-route)[ ${body}]], Channel[Wrap[org.apache.camel.routepolicy.quartz.StartStopCronRoutePolicyIssueTest$2@20091e0a] -> org.apache.camel.routepolicy.quartz.StartStopCronRoutePolicyIssueTest$2@20091e0a]]]]]]
2013-03-27 17:43:10,007 [amel-1_Worker-4] DEBUG RouteService                   - Starting child service on route: started-and-stopped-route -> RouteContextProcessor[RouteContextProcessor[Pipeline[[Channel[Log(started-and-stopped-route)[ ${body}]], Channel[Wrap[org.apache.camel.routepolicy.quartz.StartStopCronRoutePolicyIssueTest$2@20091e0a] -> org.apache.camel.routepolicy.quartz.StartStopCronRoutePolicyIssueTest$2@20091e0a]]]]]
2013-03-27 17:43:10,008 [amel-1_Worker-4] DEBUG RouteService                   - Starting child service on route: started-and-stopped-route -> RouteContextProcessor[Pipeline[[Channel[Log(started-and-stopped-route)[ ${body}]], Channel[Wrap[org.apache.camel.routepolicy.quartz.StartStopCronRoutePolicyIssueTest$2@20091e0a] -> org.apache.camel.routepolicy.quartz.StartStopCronRoutePolicyIssueTest$2@20091e0a]]]]
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,319856,,,2013-03-27 16:45:34.0,,,,,,,0|i1j6tb:,320197,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Moving files on FTP not working,CAMEL-6056,12631438,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,csch,csch,08/Feb/13 12:23,25/Mar/13 16:54,13/Mar/19 22:19,16/Mar/13 10:06,2.10.3,2.10.4,2.11.0,,,,,,,2.10.5,2.11.0,,,camel-ftp,,,,,,8,file,ftp,move,,,,,,"Moving files stored on a ftp server to another directory specified by the move parameter is not working in camel versions 2.10.3, 2.10.4-SNAPSHOT and 2.11-SNAPSHOT.
(The ftp user got write permission.)
Whereas the file is moved as expected when using version 2.10.2

*The stacktrace I got when executing the test on camel version 2.10.3:*
{quote}
11:04:56,822 WARN  [org.apache.camel.component.file.GenericFileOnCompletion] (Camel (camel-1) thread #1 - ftp://myftp.com) Caused by: [org.apache.camel.component.file.GenericFileOperationFailedException - File operation failed: 550 Failed to change directory.
 Cannot change directory to: \\. Code: 550]: org.apache.camel.component.file.GenericFileOperationFailedException: File operation failed: 550 Failed to change directory.
 Cannot change directory to: \\. Code: 550
	at org.apache.camel.component.file.remote.FtpOperations.doChangeDirectory(FtpOperations.java:704) [camel-ftp-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.component.file.remote.FtpOperations.changeCurrentDirectory(FtpOperations.java:660) [camel-ftp-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.component.file.remote.FtpOperations.buildDirectory(FtpOperations.java:284) [camel-ftp-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.component.file.strategy.GenericFileProcessStrategySupport.renameFile(GenericFileProcessStrategySupport.java:100) [camel-core-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy.commit(GenericFileRenameProcessStrategy.java:86) [camel-core-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.component.file.GenericFileOnCompletion.processStrategyCommit(GenericFileOnCompletion.java:134) [camel-core-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.component.file.GenericFileOnCompletion.onCompletion(GenericFileOnCompletion.java:82) [camel-core-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.component.file.GenericFileOnCompletion.onComplete(GenericFileOnCompletion.java:53) [camel-core-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.util.UnitOfWorkHelper.doneSynchronizations(UnitOfWorkHelper.java:55) [camel-core-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.impl.DefaultUnitOfWork.done(DefaultUnitOfWork.java:226) [camel-core-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.processor.UnitOfWorkProcessor.doneUow(UnitOfWorkProcessor.java:199) [camel-core-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.processor.UnitOfWorkProcessor.processSync(UnitOfWorkProcessor.java:139) [camel-core-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:115) [camel-core-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48) [camel-core-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) [camel-core-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) [camel-core-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) [camel-core-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) [camel-core-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72) [camel-core-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:336) [camel-core-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.component.file.remote.RemoteFileConsumer.processExchange(RemoteFileConsumer.java:92) [camel-ftp-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:189) [camel-core-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:155) [camel-core-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:142) [camel-core-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:92) [camel-core-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:439) [rt.jar:1.6.0_37]
	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317) [rt.jar:1.6.0_37]
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150) [rt.jar:1.6.0_37]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98) [rt.jar:1.6.0_37]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:180) [rt.jar:1.6.0_37]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:204) [rt.jar:1.6.0_37]
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) [rt.jar:1.6.0_37]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) [rt.jar:1.6.0_37]
	at java.lang.Thread.run(Thread.java:662) [rt.jar:1.6.0_37]
{quote}


*The anonymized test case:*

{quote}
    @Test
    public void testFTPMove() throws Exception{
        context.addRoutes(new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                from(""ftp://user@ftpserver.com:21"" +
                        ""/folder/subfolder/"" +
                        ""?password=mypassword"" +
                        ""&ftpClient.dataTimeout=30000"" +
                        ""&binary=true"" +
                        ""&move=.success"" +
                        ""&antInclude=file*.txt"")
                .log(""${body}"");
            }
        });
        Thread.sleep(3000);
        context.stop();
    }
{quote}


",,,,,,,,,,CAMEL-5989,,,,,,,,,,,14/Mar/13 19:19;rlu;CAMEL-6056.zip;https://issues.apache.org/jira/secure/attachment/12573754/CAMEL-6056.zip,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-03-14 19:04:09.55,,,no_permission,,Unknown,,,,,,,,,,,311934,,,Mon Mar 25 16:52:18 UTC 2013,,,,,,,0|i1hty7:,312280,,,,,,,,,"08/Feb/13 12:45;csch;CAMEL-5989 could be related to this Issue, whereas in CAMEL-5989 it worked with 2.10.4-SNAPSHOT (referring to comments) which is not the case in this issue.",14/Mar/13 19:04;supbrah;Any ETA on this? Really hampering my development.,14/Mar/13 19:14;mukraker;I cannot move forward with the time-critical work I need to accomplish without a fix for this issue. Hope it gets resolved soon.,14/Mar/13 19:19;rlu;Patch for wrong separator handling when client and server are running on different os,"14/Mar/13 19:28;rlu;There are 2 discussions in camel-user mailing list referring to this issue:
 * Files cannot be moved on FTP
 * camel-ftp 2.10.4 fails to connect on windows","15/Mar/13 10:08;davsclaus;The patch breaks unit tests on Windows when applied to the trunk. 
Its generally best if you would run the unit tests of the component before submitting patches.",15/Mar/13 10:52;davsclaus;Okay I think I got that fixed as well for all the unit test failures on Windows.,"16/Mar/13 10:06;davsclaus;Thanks for the patches et all. The codebase has been a mix with this patch and backporting the code to what we used in Camel 2.10.2 to have a working solution.

It would be good if people could give the SNAPSHOT of the upcoming 2.10 or 2.11 releases at test spin in your environment to see if it works for you now.","19/Mar/13 09:25;rlu;i have tested 2.10.5-SNAPSHOT and 2.11-SNAPSHOT on windows client against RHEL FTP server. The exception is gone, but files are not moved.

Working with windows client and ftp server still works as expected.","20/Mar/13 12:45;rlu;in my opinion the issue is _not_ fixed for 2.11.0
Tests using: camel-ftp-2.11-20130320.060217-416 NOK
             camel-ftp-2.10.5-20130315.195808-8 OK",20/Mar/13 14:39;0jeff0;Same problem with sftp ,"20/Mar/13 15:08;fbalicchia;summarizing file is not move in the following env
with both ftp and ftps

* client windows -> RHEL FTP server   KO
* client windows -> Apache Ftp (Linux e windows)   OK

* client unixLike -> RHEL FTP server   Ok
* client unixLike -> Apache Ftp (Linux e windows) Ok

Is it correct ?","20/Mar/13 16:02;davsclaus;I have not been able to reproduce any kind of problem. 

For Camel 2.11 I have added a new camel-example-ftp that can be used to test this in the future as well.

I have an Windows XP box with a FileZilla FTP server, and I can upload and download files from my osx laptop without problems.
I have tried with both 2.10.2 and 2.11-SNAPSHOT.

Though I am adding an extra check in the codebase for that double slash that was reported initially in this ticket.",20/Mar/13 16:07;davsclaus;I have committed a fix on 2.11 and 2.10 branch for the double slash issue. Fell free to give that a test spin.,"21/Mar/13 11:33;0jeff0;Hey all ! 

I have made a test with the camel-ftp-2.11-20130320.060217-416.jar;
My client    : Windows 7 ( JRE jdk1.7.0_10)
My FTPServer : Solaris( SunOS 5.10 via /usr/lib/ssh/sftp-server)

It works fine only with double quote :

from(""sftp://but@XXX.XXX.XXX.XXX//tmp/JFL/?password=secret"")
   .log(""File=>${file:name}"")
.end();

With no need to &separator=UNIX&stepwise=false

JF

","25/Mar/13 16:52;rlu;i have tested it with camel-2.10.5-20130315.195808-8.jar and it work as expected. Thanks!

    client windows -> RHEL FTP server OK
    client windows -> Apache Ftp (windows) OK
",,,,,,,,
"An AWS key with ""+"" gets stripped out by DefaultCamelContext.normalizeEndointUri  and URISupport.parseQuery for at least the SQS Component",CAMEL-5453,12599134,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,whaley,whaley,17/Jul/12 16:38,25/Mar/13 16:20,13/Mar/19 22:19,25/Mar/13 16:20,2.10.0,,,,,,,,,2.11.0,,,,camel-aws,camel-core,,,,,0,,,,,,,,,"When defining a camel route that includes an endpoint for the SQS component that includes the accessKey and secretKey as parameters, such as the following:

{code}
aws-sqs://queue-name?accessKey=ABCDEFGHIJKLMNOP&secretKey=ABCDEFGHI+JK
{code}

if the secretKey contains a + then that + is stripped out in URISupport.parseQuery and the parameters received by SqsComponent.createEndpoint has a space where the + used to be in the secretKey, thus making calls to SQS by the SqsComponent fail.  

Even if the endpoint URI string is URL encoded such that secretKey=ABCDEFGHI%2BJK, then DefaultCamelContext.normalizeEndointUri will decode the %2B to a ""+"" earlier in the call stack before URISupport.parseQuery is called (which then removes it).

A ""+"" is a valid and common character in generated AWS secret keys and thus needs to be left alone when it is placed in the parameter Map<String,Object> received in SqsComponent.createEndpoint, or replaced with custom parsing in SqsComponent.createEndpoint.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-07-17 20:15:28.279,,,no_permission,,Unknown,,,,,,,,,,,241326,,,Mon Mar 25 16:20:03 UTC 2013,,,,,,,0|i0276n:,10765,,,,,,,,,"17/Jul/12 17:22;whaley;This can be worked around by adding an AmazonSQSClient to the registry with the following (which is hinted at in the documentation for other edge cases, but not this one):
{code}
            
AmazonSQSClient sqsClient = new AmazonSQSClient(new BasicAWSCredentials(accessKeyId,secretKey));
JndiContext jndiContext = new JndiContext();
jndiContext.bind(""amazonSQSClient"", sqsClient;

CamelContext camelContext = new DefaultCamelContext(jndiContext);
camelContext.addRoutes(new RouteBuilder() {
    @Override
    public void configure() throws Exception {
        from(""direct:whatever"").to(""aws-sqs://queue-name?amazonSQSClient=#amazonSQSClient"");
        //... other routes here
    }
});            
camelContext.start();   
{code}","17/Jul/12 20:15;muellerc;Yes, it's a bug. It worked for me in the past. Now, I get an exception that the signature does not match.
Another workaround is to generate a new key at: https://portal.aws.amazon.com/gp/aws/securityCredentials
","17/Jul/12 21:14;muellerc;This is a bit tricky here. To send a '\+' sign to AWS, we have to encode it to '%2B', because otherwise the '\+' sign is interpreted as ' ' sign.
But because Camel use (quasi / so called) URI's, we have to encode it twice. This means we have to encode the '+' sign to '%252B'.
Camel should decode it to '%2B' which should be send to AWS.

Line 109 of [URISupport.java|https://svn.apache.org/repos/asf/camel/trunk/camel-core/src/main/java/org/apache/camel/util/URISupport.java] prevents this.

running
{code}
git blame camel-core/src/main/java/org/apache/camel/util/URISupport.java
{code}

show that this change was done by Hadrian at 3rd of February:
{code}
04066a8e (Hadrian Zbarcea   2012-02-03 07:14:21 +0000 109)                         String value = URLDecoder.decode(parameter.substring(p + 1).replaceAll(""%"", ""%25""), CHARSET);
{code}

This change belongs to [CAMEL-4954|https://issues.apache.org/jira/browse/CAMEL-4954]","17/Jul/12 21:17;muellerc;Hadrian, could you please have a look at it? I know you like the URI encoding/decoding stuff... ;-)",25/Mar/13 16:20;davsclaus;Fixed by CAMEL-6176,,,,,,,,,,,,,,,,,,,
"multiple decoding Endpoint Parameters containing urlchars: '+'. '?', '&'",CAMEL-6037,12630842,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,rlu,rlu,05/Feb/13 09:49,25/Mar/13 16:17,13/Mar/19 22:19,25/Mar/13 16:17,2.10.3,,,,,,,,,2.11.0,,,,camel-ftp,,,,,,0,,,,,,,,,"ftpClientParameters are already (partially) urldecoded in method FtpEndpoint.createRemoteFileOperations when calling for IntrospectionSupport.setProperties, this results in wrong password strings. for example uri=ftp://ftp2.server/path?fileName=testfile.txt&username=user&password=se%2Bcure 
'se+cure' -> 'se cure' 


I think it is caused by DefaultCamelContext.normalizeEndpointUri ",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-03-25 16:17:13.217,,,no_permission,,Unknown,,,,,,,,,,,311338,,,Mon Mar 25 16:17:13 UTC 2013,,,,,,,0|i1hq9z:,311684,,,,,,,,,25/Mar/13 16:17;davsclaus;Fixed by CAMEL-6176,,,,,,,,,,,,,,,,,,,,,,,
camel-blueprint - registry lookup by name should return null if not found,CAMEL-6200,12638515,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,22/Mar/13 14:34,22/Mar/13 14:37,13/Mar/19 22:19,22/Mar/13 14:37,2.10.4,,,,,,,,,2.10.5,2.11.0,,,camel-blueprint,,,,,,0,,,,,,,,,"The contract should be to return null if not found.

lookupByName should be similar to lookupByNameAndType which has a try .. catch.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,318991,,,2013-03-22 14:34:47.0,,,,,,,0|i1j1h3:,319332,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jms - When removing a route the jms consumer should shutdown any private thread pool the listener container may have been using,CAMEL-6199,12638487,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,22/Mar/13 10:48,22/Mar/13 12:23,13/Mar/19 22:19,22/Mar/13 12:23,2.10.0,,,,,,,,,2.10.5,2.11.0,,,camel-jms,,,,,,0,,,,,,,,,"For example when you add / remove routes dynamically to a Camel app that starts from a JMS endpoint. Then the jms consumer may use a private thread pool for the listener container. That thread pool is enlisted in JMX.

We should ensure the thread pool is shutdown and removed from JMX when the route is removed.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,318963,,,2013-03-22 10:48:05.0,,,,,,,0|i1j1av:,319304,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FTP Upload fails due to wrong path separator used in FtpOperations,CAMEL-6181,12637879,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,schlaufuchs,schlaufuchs,20/Mar/13 02:10,21/Mar/13 16:16,13/Mar/19 22:19,21/Mar/13 16:16,2.10.3,,,,,,,,,2.10.5,,,,camel-ftp,,,,,,0,,,,,,,,,"I try to send files via FTP to a remote server. During the upload sequence it checks if the remote directory exists by changing the current work directory to the target, then tries to go back to the current work directory (method FtpOperations#buildDirectory). the call at line 284 fails ( {{changeCurrentDirectory(originalDirectory)}} because in that method at line 654 {{path = FileUtil.compactPath(path);)) is called, which replaces the all forward slashes with File.SEPARATOR - by doing this it also ignores the separator setting in the endpoint uri. The returned directory is not valid on the remote server which then throws a 550 at me.

To fix it line 654 must use the correlated method accepting a separator char produced from the endpoint settings. Or the path needs to be separator-fixed later in the call stack.",Windows,14400,14400,,0%,14400,14400,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-03-21 16:16:06.858,,,no_permission,,Novice,,,,,,,,,,,318359,,,Thu Mar 21 16:16:06 UTC 2013,,,,,,,0|i1ixkn:,318700,,,,,,,,,21/Mar/13 16:16;davsclaus;Can you try with 2.10.5-SNAPSHOT as we have fixed the camel-ftp.,,,,,,,,,,,,,,,,,,,,,,,
Problem with nested schema imports when upgrading from 2.8.6 to 2.10.2,CAMEL-5837,12618308,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,hutchkintoot,hutchkintoot,30/Nov/12 11:58,21/Mar/13 10:46,13/Mar/19 22:19,21/Mar/13 10:46,2.10.2,,,,,,,,,2.10.5,2.11.0,,,camel-core,,,,,,1,,,,,,,,,"Hello

I'm experiencing trouble with the validiator component when upgrading from 2.8.6 to 2.10.2. 

The problem seems to be related to imported schemas that does additional imports (all using relative paths). XSD A importing XSD B works fine. But if B in turn imports XSD C. That import seems to be resolved with the base path of A. 

All works fine in 2.8.6 but breaks when upgrading to 2.10.2.

I will attach an example project where you can just switch version to verify the scenario.  ","MacOS X, java 7",,,,,,,,,,,,,,,,,,,,30/Nov/12 12:00;hutchkintoot;xsd-import_example 2.zip;https://issues.apache.org/jira/secure/attachment/12555499/xsd-import_example+2.zip,15/Mar/13 09:23;hutchkintoot;xsd-import_example-reopen.zip;https://issues.apache.org/jira/secure/attachment/12573852/xsd-import_example-reopen.zip,15/Mar/13 09:27;hutchkintoot;xsd_import_problem.png;https://issues.apache.org/jira/secure/attachment/12573853/xsd_import_problem.png,,,,3.0,,,,,,,,,,,,,,,,,,,2012-12-03 06:44:46.154,,,no_permission,,Unknown,,,,,,,,,,,292939,,,Wed Mar 20 12:26:40 UTC 2013,,,,,,,0|i0sgj3:,164155,,,,,,,,,30/Nov/12 12:00;hutchkintoot;run this project altering the version from 2.8.6 to 2.10.2 to verify the issue. ,"03/Dec/12 06:44;njiang;Camel doesn't use spring to load the schema since 2.9.x, now it only support to resolve the schema from the class path.
You test can be worked around by adding the relative path health into the health.xsd.
{code}
<xs:import schemaLocation=""health/common/common.xsd"" namespace=""org.health.check.common""/>
{code}","03/Dec/12 07:10;hutchkintoot;Hi, yes that works but it would make the health.xsd file invalid when working with it stand-alone in an ide like Oxygen or Intellij. Our components have been reading nested schemas from the class-path (we package it in a war-file) before. But perhaps spring did some magic and read it from the filesystem?

Is there anyway to get the old behavior back and still upgrade to 2.10.2?

regards,
Johan",03/Dec/12 07:13;hutchkintoot;Another interesting note is that nested xslt-imports/includes works without problems in 2.10.2. Is the URIResolver logic different between the validation- and xslt-component?,"03/Dec/12 07:52;njiang;Xslt component doesn't use the DefaultLSResourceResolver as the resource resolver.
I just checked the code of Spring ResourceLocator, it will use the URLResolver directly if the import resource is not start with classpath. But I doesn't find a good way to find the resource from file by using the baseURI or SystemId.","03/Dec/12 14:15;hutchkintoot;From Camels point of view, is this new behavior (since 2.9.x), considered to be a bug or an accepted limitation of the new implementation? We are using xml-schema imports extensively and this causes a lot of trouble for us. I can imagine ways we could get around these problems but not without extensive refactoring of our current projects. 

regards,
Johan","03/Jan/13 20:54;tranchida;Hi, 

Same problem for me. For my point of view, this a bug or a regression.

Any workaround with a custom LSResourceResolver ?

Regards
Giampaolo
","11/Jan/13 07:27;njiang;Hi Giampaolo,

This issue should be resolved from the new released Camel 2.11.0.
I already committed the patch into camel trunk.

Willem",12/Jan/13 18:36;muellerc;I think we can close this issue. We have two unit test classes and multiple tests which make sure this works now.,12/Jan/13 19:13;hutchkintoot;Great news! Thank you. Looking forward to the next release. ,01/Feb/13 15:15;njiang;CAMEL-6013 has a better solution to fix this kind of issue.,"15/Mar/13 09:22;hutchkintoot;Hello

I tried to upgrade to 2.10.4 but it still have problems resolving my imports. 

I can confirm that the first test-case works. But when i try it with a more complex import structure it fails.

I have compiled a new example project that i will attach to the issue that shows when the error occurs. I will also attach a picture showing the folder and import structure.","15/Mar/13 09:27;hutchkintoot;This picture shows the imports and the order they occur in. relatedURI property extracted from debugger.

!xsd_import_problem.png!","17/Mar/13 08:59;njiang;
I just did a quick fix for this issue and committed the patch into trunk, please verify it with latest camel 2.11-SNAPSHOT.","18/Mar/13 08:32;hutchkintoot;Thanks Willem, i just tried it with 2.11-SNAPSHOT but the import still fails on 4.xsd.","18/Mar/13 08:37;hutchkintoot;Checked my local maven repo and the pom for camel-core is dated the 16th of march. So i guess your fix is not pushed to the snapshot repo yet. 

camel-core-2.11-20130316.163847-415.pom

/j","19/Mar/13 13:45;hutchkintoot;Managed to build from 2.11-SNAPSHOT from source and managed to start the route successfully. When trying against my live-code however the fault persisted. I then discovered that the schema import structure in the example wasn't quite right. In my live-code and in the attached image both 1.xsd and 2.xsd imports 4.xsd. When i corrected 2.xsd to reflect this in the example code it refused to run.

To fix 2.xsd please replace it's content with the following code:
{code:xml}
<?xml version=""1.0"" encoding=""UTF-8""?>
<xs:schema 
    xmlns:xs=""http://www.w3.org/2001/XMLSchema"" 
    elementFormDefault=""qualified""
    targetNamespace=""example.2"">
    
    <xs:import schemaLocation=""../../common/3.xsd"" namespace=""example.3""/>
    <xs:import schemaLocation=""../common/4.xsd"" namespace=""example.4""/>
    
</xs:schema>

{code}


When debugging this i found that the baseURI, used as key in the relatedURIMap, is not correct (the start and end of the path is correct but it is lacking path elements in the middle). I'm not sure if this is the cause of the problem.  

  ","20/Mar/13 03:42;njiang;Hi Johan,

I just did a quick fix for the issue that you found yesterday. 
Please feel free to check it out for verification.

Willem","20/Mar/13 12:26;hutchkintoot;Hi Willem,

That fix resolved my problems in the original project. Thank you for all your help!

Regards,
Johan",,,,,
Camel stream producer never close the stream of file ,CAMEL-6155,12636532,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,12/Mar/13 07:57,21/Mar/13 01:26,13/Mar/19 22:19,13/Mar/13 07:26,2.10.4,2.9.6,,,,,,,,2.10.5,2.11.0,2.9.7,,camel-stream,,,,,,0,,,,,,,,,"When I was working on CAMEL-6147, I found the file stream is never closed, even it met the close condition. ",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,317024,,,Wed Mar 13 07:26:02 UTC 2013,,,,,,,0|i1ipc7:,317365,,,,,,,,,"13/Mar/13 07:26;njiang;Applied the patch into trunk, camel-2.10.x and camel-2.9.x branches.",,,,,,,,,,,,,,,,,,,,,,,
Camel cache: CamelCacheCheck and expiry on cached elements,CAMEL-6189,12637990,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,hefiso,hefiso,20/Mar/13 14:23,20/Mar/13 15:09,13/Mar/19 22:19,20/Mar/13 15:09,2.10.0,2.11.0,,,,,,,,2.10.5,2.11.0,,,camel-cache,,,,,,0,cache,,,,,,,,"The operation CamelCacheCheck does not check to see if the cache element is expired before setting the header CamelCacheElementWasFound. This is due to the way isKeyInCache() from EHCache works. 

I believe the bug/quirk has existed since the very beginning of the camel-cache component. The patch is made against 2.11.0-SNAPSHOT.

The patch uses getQuiet() instead of isKeyInCache(). getQuiet() checks for element expiry before returning the element from the cache. getQuiet does not alter the cache element in any way (usage statistics etc) but removes the element from the cache if it is expired.

See the thread on Camel User Forum: http://camel.465427.n5.nabble.com/Camel-cache-CamelCacheCheck-and-expiry-on-cached-elements-td5729404.html

",Windows,,,,,,,,,,,,,,,,,,,,20/Mar/13 14:25;hefiso;cacheCheckHonorsExpiry.patch;https://issues.apache.org/jira/secure/attachment/12574549/cacheCheckHonorsExpiry.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-03-20 15:09:27.95,,,no_permission,,Novice,,,,,,,,,,,318468,,,Wed Mar 20 15:09:27 UTC 2013,,,Patch Available,,,,0|i1iy8v:,318809,,,,,,,,,20/Mar/13 15:09;davsclaus;Thanks for the patch.,,,,,,,,,,,,,,,,,,,,,,,
CamelSpringJUnit4ClassRunner ignores annotation based context configurations.,CAMEL-6160,12636847,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,webdaford,webdaford,13/Mar/13 20:01,15/Mar/13 02:42,13/Mar/19 22:19,15/Mar/13 02:42,2.10.4,,,,,,,,,2.11.0,,,,camel-test,,,,,,1,test,,,,,,,,"In a Camel/Spring JUnit4 test case, if you specify:

@RunWith(CamelSpringJUnit4ClassRunner.class)
@ContextConfiguration(classes = { FooCamelConfig.class })

then the context configuration (including the definition of CamelContext) defined in FooCamelConfig.java, using Java Annotations, will be ignored.  If you change to use SpringJUnit4ClassRunner, then the configuration will be processed.

The problem is in the two implementations of the method ""loadBeanDefintions()""  in the class CamelSpringTestContextLoader.  They both exclusively use XmlBeanDefinitionReader to load bean definitions into the context, so no beans defined using annotations are ever read/loaded.

If you use the SpringJUnit4ClassRunner, then it includes the use of AnnotationConfigContextLoader which, in turn, uses AnnotatedBeanDefinitionReader to read/load beans defined with annotations.


","Windows 7, Java 1.7.0_17, Spring 3.2.1",,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-03-14 08:17:39.882,,,no_permission,,Moderate,,,,,,,,,,,317339,,,Fri Mar 15 02:42:50 UTC 2013,,,,,,,0|i1ir9z:,317680,,,,,,,,,"14/Mar/13 08:17;njiang;CAMEL-5494 provides an solution for it, because CamelSpringDelegatingTestContextLoader doesn't support the ExcludeRoutes annotation, I didn't switch the default TestContextLoader of CamelSpringJUnit4ClassRunner to CamelSpringDelegatingTestContextLoader. You need to specify the loader with CamelSpringDelegatingTestContextLoader.class if you want to use it.
{code}

@RunWith(CamelSpringJUnit4ClassRunner.class)
@ContextConfiguration(classes =
{ FooCamelConfig.class }
loader = CamelSpringDelegatingTestContextLoader.class
)
{code}","14/Mar/13 12:50;webdaford;Ok, thanks.  I see that the solution offered by CAMEL-5494 isn't available until 2.11.0, I'll have to wait for that.  The bug would then appear to be in the documentation.  This page http://camel.apache.org/testing.html only mentions JavaConfigContextLoader, and doesn't mention any of its limitations.  Also, after a search on google, it would appear that the existence of CamelSpringDelegatingTestContextLoader is not documented anywhere other than the CAMEL-5494 bug and the SVN commit message.

Would there be a problem with switching to use CamelSpringDelegatingTestContextLoader in the future?  I found it extremely confusing, not to mention time consuming to figure out, that CamelSpringJUnit4ClassRunner changes the semantics of @ContextConfiguration from what its superclass SpringJUnit4ClassRunner supports.  I expect a continuous parade of developers will trudge down the same path I did.","14/Mar/13 13:49;njiang;JavaConfigContextLoader doesn't support the some camel annotation as the CamelSpringDelegatingTestContextLoader does.
I'm will update the wiki page with new added CamelSpringDelegatingTestContextLoader tomorrow before I close this issue.",15/Mar/13 02:42;njiang;Update the camel test wiki page.,,,,,,,,,,,,,,,,,,,,
Simple language - bean function - issue when parameter value has comma,CAMEL-6129,12635373,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,05/Mar/13 17:09,12/Mar/13 20:55,13/Mar/19 22:19,12/Mar/13 20:51,2.10.3,2.9.2,,,,,,,,2.10.5,2.11.0,,,camel-core,,,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Prolems-with-parametrized-bean-method-call-via-simple-tp5728319.html

",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,315866,,,2013-03-05 17:09:58.0,,,,,,,0|i1ii7b:,316209,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-xmlrpc: dataformat not included in jar,CAMEL-6138,12635772,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,sothach,sothach,07/Mar/13 11:08,07/Mar/13 19:05,13/Mar/19 22:19,07/Mar/13 19:05,2.11.0,,,,,,,,,2.11.0,,,,extra,,,,,,0,build,xmlrpc,,,,,,,Building the camel-xmlrpc component via Maven: {{mvn install}} will create a .jar without the {{dataformat}} package included; this seems to be because the property {{camel.osgi.export.pkg}} only specifies the {{compoenent}} package,"java version ""1.7.0_02""
Apache Maven 3.0.4 (r1232337; 2012-01-17 08:44:56+0000)
OS: Windows 7",,,,,,,,,,,,,,,,,,,,07/Mar/13 11:10;sothach;pom.patch;https://issues.apache.org/jira/secure/attachment/12572524/pom.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-03-07 19:05:51.555,,,no_permission,,Novice,,,,,,,,,,,316264,,,Thu Mar 07 19:05:51 UTC 2013,,,Patch Available,,,,0|i1iknr:,316607,,,,,,,,,07/Mar/13 11:10;sothach;Patches the pom.xml build file to fix missing package problem,07/Mar/13 19:05;davsclaus;Thanks for reporting and providing patches.,,,,,,,,,,,,,,,,,,,,,,
camel-xmlrpc: In message headers not preserved,CAMEL-6136,12635768,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,sothach,sothach,07/Mar/13 10:26,07/Mar/13 13:02,13/Mar/19 22:19,07/Mar/13 13:02,2.11.0,,,,,,,,,2.11.0,,,,extra,,,,,,0,,,,,,,,,"When processing an XMLRPC request in Async mode, the original In message headers are not preserved (copied to the Out message)
This works correctly for sync mode, but the async callback handler does not copy the message headers as the XmlRpcProducer.processor() method does,","java version ""1.7.0_02""
OS: Windows 7",,,,,,,,,,,,,,,,,,,,07/Mar/13 10:28;sothach;XmlRpcAsyncCallback.patch;https://issues.apache.org/jira/secure/attachment/12572519/XmlRpcAsyncCallback.patch,07/Mar/13 10:31;sothach;XmlRpcComponentTest.patch;https://issues.apache.org/jira/secure/attachment/12572520/XmlRpcComponentTest.patch,,,,,2.0,,,,,,,,,,,,,,,,,,,2013-03-07 13:02:58.455,,,no_permission,,Unknown,,,,,,,,,,,316260,,,Thu Mar 07 13:02:58 UTC 2013,,,Patch Available,,,,0|i1ikmv:,316603,,,,,,,,,07/Mar/13 10:28;sothach;Patches XmlRpcAsyncCallBack.java to fix issue CAMEL-6136,07/Mar/13 10:31;sothach;Adds two test cases to XmlRpcComponentTest.java to verify header preservation,07/Mar/13 13:02;njiang;Applied the patch into trunk with thanks to Roy.,,,,,,,,,,,,,,,,,,,,,
CompositeRegistry should catch the exception when it lookup the component across the registry,CAMEL-6135,12635570,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,06/Mar/13 13:46,07/Mar/13 12:59,13/Mar/19 22:19,07/Mar/13 12:59,2.10.4,,,,,,,,,2.10.5,2.11.0,2.9.6,,camel-core,,,,,,0,,,,,,,,,"CompositeRegistry#lookup just lookups iterating the registries it has. it should catch the exception to make sure it go through all the registries.

Here is the mail thread about it.
http://camel.465427.n5.nabble.com/Catch-NoSuchComponentException-in-org-apache-camel-impl-CompositeRegistry-lookup-td5728645.html",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,316063,,,Thu Mar 07 12:59:06 UTC 2013,,,,,,,0|i1ijf3:,316406,,,,,,,,,"07/Mar/13 12:59;njiang;Applied the patch into trunk, camel-2.10.x and camel-2.9.x branches.",,,,,,,,,,,,,,,,,,,,,,,
JAXB fallbackConveter unmarshal falls with XStreamReader,CAMEL-6128,12635291,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,05/Mar/13 08:02,05/Mar/13 11:50,13/Mar/19 22:19,05/Mar/13 11:50,2.10.0,2.10.1,2.10.2,2.10.3,2.10.4,,,,,2.10.5,2.11.0,,,,,,,,,0,,,,,,,,,"When using Get the request object from the CxfPayload Message, we will get this kind of error.

Caused by: javax.xml.bind.UnmarshalException
 - with linked exception:
[javax.xml.bind.UnmarshalException: Namespace URIs and local names to the unmarshaller needs to be interned.]
        at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl.handleStreamException(UnmarshallerImpl.java:425)[158:org.apache.servicemix.bundles.jaxb-impl:2.2.1.1_2]
        at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl.unmarshal0(UnmarshallerImpl.java:362)[158:org.apache.servicemix.bundles.jaxb-impl:2.2.1.1_2]
        at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl.unmarshal(UnmarshallerImpl.java:332)[158:org.apache.servicemix.bundles.jaxb-impl:2.2.1.1_2]
        at org.apache.camel.converter.jaxb.FallbackTypeConverter.unmarshal(FallbackTypeConverter.java:253)[236:org.apache.camel.camel-jaxb:2.10.0]
        at org.apache.camel.converter.jaxb.FallbackTypeConverter.unmarshall(FallbackTypeConverter.java:165)[236:org.apache.camel.camel-jaxb:2.10.0]
        at org.apache.camel.converter.jaxb.FallbackTypeConverter.convertTo(FallbackTypeConverter.java:90)[236:org.apache.camel.camel-jaxb:2.10.0]
        ... 48 more
Caused by: javax.xml.bind.UnmarshalException: Namespace URIs and local names to the unmarshaller needs to be interned.
        at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.handleEvent(UnmarshallingContext.java:642)[158:org.apache.servicemix.bundles.jaxb-impl:2.2.1.1_2]
        at com.sun.xml.bind.v2.runtime.unmarshaller.Loader.reportError(Loader.java:254)[158:org.apache.servicemix.bundles.jaxb-impl:2.2.1.1_2]
        at com.sun.xml.bind.v2.runtime.unmarshaller.Loader.reportError(Loader.java:249)[158:org.apache.servicemix.bundles.jaxb-impl:2.2.1.1_2]
        at com.sun.xml.bind.v2.runtime.unmarshaller.Loader.reportUnexpectedChildElement(Loader.java:114)[158:org.apache.servicemix.bundles.jaxb-impl:2.2.1.1_2]
        at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext$DefaultRootLoader.childElement(UnmarshallingContext.java:1049)[158:org.apache.servicemix.bundles.jaxb-impl:2.2.1.1_2]
        at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext._startElement(UnmarshallingContext.java:478)[158:org.apache.servicemix.bundles.jaxb-impl:2.2.1.1_2]
        at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.startElement(UnmarshallingContext.java:459)[158:org.apache.servicemix.bundles.jaxb-impl:2.2.1.1_2]
        at com.sun.xml.bind.v2.runtime.unmarshaller.StAXStreamConnector.handleStartElement(StAXStreamConnector.java:242)[158:org.apache.servicemix.bundles.jaxb-impl:2.2.1.1_2]
        at com.sun.xml.bind.v2.runtime.unmarshaller.StAXStreamConnector.bridge(StAXStreamConnector.java:176)[158:org.apache.servicemix.bundles.jaxb-impl:2.2.1.1_2]
        at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl.unmarshal0(UnmarshallerImpl.java:360)[158:org.apache.servicemix.bundles.jaxb-impl:2.2.1.1_2]
        ... 52 more",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,315784,,,Tue Mar 05 11:50:52 UTC 2013,,,,,,,0|i1ihp3:,316127,,,,,,,,,05/Mar/13 11:50;njiang;Applied patch into trunk and 2.10.x-fixes branch.,,,,,,,,,,,,,,,,,,,,,,,
Its impossible to inject a custom InflightRepository due to a copy-and-paste bug,CAMEL-6127,12635157,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,philippj,philippj,04/Mar/13 16:26,04/Mar/13 16:44,13/Mar/19 22:19,04/Mar/13 16:44,2.10.3,,,,,,,,,2.10.5,2.11.0,2.9.6,,camel-blueprint,camel-spring,,,,,0,,,,,,,,,"We wanted to inject/autowire (with a Spring context.xml) a custom InflightRepository as described here http://camel.apache.org/advanced-configuration-of-camelcontext-using-spring.html
but this is not possible due to an obvious copy-and-past bug in 
org.apache.camel.core.xml.AbstractCamelContextFactoryBean.afterPropertiesSet()


Line 182

InflightRepository inflightRepository = getBeanForType(InflightRepository.class);
        if (delayer != null) {
            LOG.info(""Using custom InflightRepository: "" + inflightRepository);
            getContext().setInflightRepository(inflightRepository);
        }


is:
""if (delayer != null)"" 

should be:
""if (inflightRepository != null)""
",Windows7 64bit jdk7 camel 2.10.3,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-03-04 16:40:02.667,,,no_permission,,Novice,,,,,,,,,,,315650,,,Mon Mar 04 16:40:02 UTC 2013,,,,,,,0|i1igvb:,315993,,,,,,,,,04/Mar/13 16:40;davsclaus;Thanks for reporting. Will get this fixed soon.,,,,,,,,,,,,,,,,,,,,,,,
CXFEndpoint blueprint config having binding element may lead to NPE,CAMEL-6089,12633153,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,ay,ay,20/Feb/13 08:29,04/Mar/13 06:26,13/Mar/19 22:19,28/Feb/13 05:35,2.10.3,,,,,,,,,2.10.5,2.11.0,2.9.6,,camel-cxf,,,,,,0,,,,,,,,,"There seems to be  an error in the EndpointpointDefinitionParser in parsing the binding element. Concretely speaking, that element is not parsed from the right element but wrongly from its parent element.

So, when you have something like

  <camel-cxf:cxfEndpoint id=""routerEndpoint"" ...>
    ...
    <camel-cxf:binding>
      <soap:soapBinding mtomEnabled=""true"" version=""1.2""/>
    </camel-cxf:binding>
  </camel-cxf:cxfEndpoint>

you may get an NPE, as shown in:

java.lang.NullPointerException: null
	at org.apache.aries.blueprint.container.RecipeBuilder.getValue(RecipeBuilder.java:335) ~[na:na]
	at org.apache.aries.blueprint.container.RecipeBuilder.createBeanRecipe(RecipeBuilder.java:258) ~[na:na]
	at org.apache.aries.blueprint.container.RecipeBuilder.createRecipe(RecipeBuilder.java:106) ~[na:na]
	at org.apache.aries.blueprint.container.RecipeBuilder.createRepository(RecipeBuilder.java:89) ~[na:na]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.getRepository(BlueprintContainerImpl.java:438) ~[na:na]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:288) ~[na:na]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:230) ~[na:na


Fixing this line in EndpointDefinitionParser will fix this issue.
",,,,,,,,,,,,,,,,,,,,,20/Feb/13 08:31;ay;trunk-camel-cxf-20130220.diff;https://issues.apache.org/jira/secure/attachment/12570096/trunk-camel-cxf-20130220.diff,20/Feb/13 16:59;ay;trunk-tests-camel-blueprint-cxf-test-20130220.diff;https://issues.apache.org/jira/secure/attachment/12570151/trunk-tests-camel-blueprint-cxf-test-20130220.diff,20/Feb/13 17:23;ay;trunk-tests-camel-blueprint-cxf-test-20130220b.diff;https://issues.apache.org/jira/secure/attachment/12570156/trunk-tests-camel-blueprint-cxf-test-20130220b.diff,,,,3.0,,,,,,,,,,,,,,,,,,,2013-02-21 02:51:16.485,,,no_permission,,Unknown,,,,,,,,,,,313649,,,Mon Mar 04 06:26:38 UTC 2013,,,Patch Available,,,,0|i1i4jb:,313994,,,,,,,,,20/Feb/13 08:32;ay;I can also provide a unit test.,20/Feb/13 16:59;ay;unit test,"20/Feb/13 17:04;ay;i just noticed that somehow the pmd setting was not working and the test class contains several unneeded imports.
i'll clean it up.
sorry.",20/Feb/13 17:23;ay;cleaned up the unneeded imports from the test class.,"21/Feb/13 02:51;njiang;Applied the patch with thanks to Aki, and I also fixed some similar issues on the other cxf blueprint parser.
","01/Mar/13 17:34;ay;I think this didn't go into 2.10.4, as the fix was integrated into 2.10.x on 2/21, whereas 2.10.4 was cut on 2/20.
",04/Mar/13 06:26;njiang;This patch just missed the release train of camel 2.10.4.,,,,,,,,,,,,,,,,,
Cache endpoint lazy initialization is not thread safe,CAMEL-6101,12634128,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,agattiker,agattiker,26/Feb/13 12:16,01/Mar/13 14:37,13/Mar/19 22:19,01/Mar/13 12:46,2.10.3,,,,,,,,,2.10.4,2.11.0,2.9.5,,camel-cache,,,,,,0,,,,,,,,,"Similar to CAMEL-5950, but only occurs at lazy cache initialization.

{code}
net.sf.ehcache.ObjectExistsException: Cache sampleCache already exists
    at net.sf.ehcache.CacheManager.addCacheNoCheck(CacheManager.java:1294) ~[org.apache.servicemix.bundles.ehcache-2.5.2_1.jar:na]
    at net.sf.ehcache.CacheManager.addCache(CacheManager.java:1184) ~[org.apache.servicemix.bundles.ehcache-2.5.2_1.jar:na]
    at org.apache.camel.component.cache.CacheEndpoint.initializeCache(CacheEndpoint.java:137) ~[camel-cache-2.10.3.jar:2.10.3]
{code}

Workaround:

{code}
		for (Endpoint endpoint : context.getEndpoints()) {
			if (endpoint instanceof CacheEndpoint) {
				CacheEndpoint ce = (CacheEndpoint) endpoint;
				ce.initializeCache();
			}
		}
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-02-26 13:29:28.517,,,no_permission,,Unknown,,,,,,,,,,,314621,,,Fri Mar 01 14:37:52 UTC 2013,,,,,,,0|i1iaj3:,314965,,,,,,,,,"26/Feb/13 13:29;njiang;CAMEL-5950 also address the thread safe issue of the CacheConsumer.
Can you verify it with latest released Camel 2.10.4?",01/Mar/13 12:46;njiang;This issue should be resolved with CAMEL-5950.,01/Mar/13 14:37;agattiker;Confirm this is fixed in version 2.10.4. Sorry for the disturbance and thank you for a great product.,,,,,,,,,,,,,,,,,,,,,
<to/> step in a <doCatch/> block runs when the <doTry/> tag is closed in the wrong place,CAMEL-6109,12634502,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,mattrpav,mattrpav,27/Feb/13 22:23,28/Feb/13 14:38,13/Mar/19 22:19,28/Feb/13 07:04,2.10.3,,,,,,,,,2.11.0,,,,camel-core,,,,,,0,,,,,,,,,"Example route:

<doTry>
   <to ... >
</doTry>

<doCatch>
    <exception>java.lang.Exception</exception>
    <to uri=""log.... ""/>
</doCatch>


The <to uri=""log...""/> line will execute every time, regardless if there is an exception or not.

I believe the preferred behavior would be that the route should fails to load/validate.  Alternatively, the <to uri=""log.."" /> should not run when there is not an exception.

Thanks!",Windows dev,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-02-28 05:23:07.586,,,no_permission,,Unknown,,,,,,,,,,,314995,,,Thu Feb 28 14:38:02 UTC 2013,,,,,,,0|i1icu7:,315339,,,,,,,,,"28/Feb/13 05:23;davsclaus;The doCatch should be *inside* the doTry, as documented in its documentation: http://camel.apache.org/try-catch-finally.html",28/Feb/13 06:32;davsclaus;On 2nd though lets add validation to the Camel model so we can detect the mis configuration of having doCatch outside doTry etc. Then we can tell the end user about this mis configuration so they can fix it.,"28/Feb/13 14:38;mattrpav;Thanks, Claus. The syntax check to alert users to the incorrect configuration was what I was hoping for. 

It can be a little confusing since for users coming from a plain Java coding background. When programming plain Java code the try {} closes before the catch {} opens.

Thanks!",,,,,,,,,,,,,,,,,,,,,
camel-test-blueprint - May parse blueprint xml file concurrently and start 2 Camels,CAMEL-6111,12634578,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,28/Feb/13 08:46,28/Feb/13 10:38,13/Mar/19 22:19,28/Feb/13 10:38,2.11.0,,,,,,,,,2.11.0,,,,camel-blueprint,camel-test,,,,,0,,,,,,,,,"Argh Aries Blueprint may parse the same blueprint xml file concurrently. Assume its the influence of pojosr that may trigger this. As running Camel on Karaf has not seen started the same XML file twice.

See nabble
http://camel.465427.n5.nabble.com/camel-blueprint-test-issues-tp5728260.html",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,315071,,,Thu Feb 28 10:38:46 UTC 2013,,,,,,,0|i1idb3:,315415,,,,,,,,,28/Feb/13 10:38;davsclaus;This issue is only on 2.11,,,,,,,,,,,,,,,,,,,,,,,
SOAP over JMS does not work with camel-cxf endpoint,CAMEL-6084,12632703,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,cmoulliard,cmoulliard,16/Feb/13 08:54,28/Feb/13 05:32,13/Mar/19 22:19,28/Feb/13 05:32,2.10.0,,,,,,,,,2.10.4,2.11.0,2.9.6,,camel-cxf,,,,,,0,,,,,,,,,"If we would like to use SOAP over JMS using CXF & Camel (2.10),that fails.

The CXF endpoint receives well the incoming request from the JMS queue

{code}
[aultMessageListenerContainer-1] HelloWorldServicePortType INFO  Inbound Message
----------------------------
ID: 1
Content-Type: text/xml
Headers: {JMSMessageType=[text]}
Payload: <soapenv:Envelope xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:hel=""http://helloworld.mycompany.redhat.com"">
   <soapenv:Header/>
   <soapenv:Body>
      <hel:sayHello>
         <hel:name>fred</hel:name>
      </hel:sayHello>
   </soapenv:Body>
</soapenv:Envelope>

--------------------------------------
[aultMessageListenerContainer-1] route1 INFO  SOAP Request received message
[aultMessageListenerContainer-1] route1 INFO  Mock service replied

{code}

but the response is not returned by CXF neither published in a (reply) queue.

{code}
Here is the Camel Route

    @Override
    public void configure() throws Exception {

from(""cxf:bean:endpoint.service.worklist?dataFormat=MESSAGE"")
                .convertBodyTo(String.class)
                .log(""SOAP Request received message"")
.setHeader(""JMSReplyTo"").constant(""supervisorworklist.response"")
                .transform().constant(response) // RESPONSE = SOAP MESSAGE
                .log(""Mock service replied"");

    }

{code}

& Config

{code}
<?xml version=""1.0"" encoding=""UTF-8""?>
<beans xmlns=""http://www.springframework.org/schema/beans""
       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
       xmlns:camel=""http://camel.apache.org/schema/spring""
       xmlns:osgi=""http://www.springframework.org/schema/osgi""
       xmlns:cxf=""http://camel.apache.org/schema/cxf""
       xmlns:jms=""http://cxf.apache.org/transports/jms""
       xsi:schemaLocation=""
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/osgi http://www.springframework.org/schema/osgi/spring-osgi.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
       http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf-2.10.0-spring.xsd
       http://cxf.apache.org/transports/jms http://cxf.apache.org/schemas/configuration/jms.xsd"">


    <bean id=""jms.connectionFactory"" class=""org.apache.activemq.ActiveMQConnectionFactory"">
       <!-- <property name=""brokerURL"" value=""vm://myEmbeddedBroker?broker.persistent=false"" />-->
        <property name=""brokerURL"" value=""tcp://localhost:61616""/>
    </bean>

    <bean id=""jms.config.service"" class=""org.apache.cxf.transport.jms.JMSConfiguration"">
        <property name=""connectionFactory"" ref=""jms.connectionFactory"" />
        <property name=""targetDestination"" value=""supervisorworklist"" />
        <property name=""replyDestination"" value=""supervisorworklist.response""/>
    </bean>

    <bean id=""logginOutInterceptor"" class=""org.apache.cxf.interceptor.LoggingOutInterceptor""/>
    <bean id=""logginInInterceptor"" class=""org.apache.cxf.interceptor.LoggingInInterceptor""/>

    <!--  Producer Endpoint -->
    <cxf:cxfEndpoint id=""endpoint.service.worklist""
                     address=""jms://""
serviceClass=""com.redhat.mycompany.helloworld.HelloWorldService""
                     serviceName=""s:HelloWorldService""
                     endpointName=""s:HelloWorldOverJms""
                     xmlns:s=""http://helloworld.atos.redhat.com"">

        <cxf:features>
            <bean xmlns=""http://www.springframework.org/schema/beans""
class=""org.apache.cxf.transport.jms.JMSConfigFeature"">
                <property name=""jmsConfig"" ref=""jms.config.service"" />
            </bean>
        </cxf:features>

         <cxf:inInterceptors>
             <ref bean=""logginInInterceptor""/>
         </cxf:inInterceptors>

         <cxf:outInterceptors>
             <ref bean=""logginOutInterceptor""/>
         </cxf:outInterceptors>
    </cxf:cxfEndpoint>


    <camelContext xmlns=""http://camel.apache.org/schema/spring"">
        <package>com.redhat.mycompany.cxf</package>
    </camelContext>

</beans>
{code}
",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-02-18 04:15:23.717,,,no_permission,,Unknown,,,,,,,,,,,313199,,,Mon Feb 18 08:48:22 UTC 2013,,,,,,,0|i1i1rj:,313545,,,,,,,,,"16/Feb/13 09:25;cmoulliard;wsdl used

{code}
<?xml version=""1.0"" encoding=""UTF-8"" standalone=""no""?>
<wsdl:definitions
        xmlns:impl=""http://helloworld.mycompany.redhat.com""
        xmlns:jms=""http://cxf.apache.org/transports/jms""
        xmlns:wsdl=""http://schemas.xmlsoap.org/wsdl/""
        xmlns:wsdlsoap=""http://schemas.xmlsoap.org/wsdl/soap/""
        xmlns:xsd=""http://www.w3.org/2001/XMLSchema""
        xmlns:soapjms=""http://www.w3.org/2010/soapjms/""
        targetNamespace=""http://helloworld.mycompany.redhat.com"">
    <wsdl:types>
        <schema xmlns=""http://www.w3.org/2001/XMLSchema""
                elementFormDefault=""qualified""
                targetNamespace=""http://helloworld.mycompany.redhat.com"">

            <element name=""sayHello"">
                <complexType>
                    <sequence>
                        <element name=""name"" type=""xsd:string""/>
                    </sequence>
                </complexType>
            </element>

            <element name=""sayHelloResponse"">
                <complexType>
                    <sequence>
                        <element name=""sayHelloReturn"" type=""xsd:string""/>
                    </sequence>
                </complexType>
            </element>
        </schema>
    </wsdl:types>

    <wsdl:message name=""sayHelloResponse"">
        <wsdl:part element=""impl:sayHelloResponse"" name=""parameters"">
        </wsdl:part>
    </wsdl:message>

    <wsdl:message name=""sayHelloRequest"">
        <wsdl:part element=""impl:sayHello"" name=""parameters"">
        </wsdl:part>
    </wsdl:message>

    <wsdl:portType name=""HelloWorld"">
        <wsdl:operation name=""sayHello"">
            <wsdl:input message=""impl:sayHelloRequest"" name=""sayHelloRequest"">
            </wsdl:input>
            <wsdl:output message=""impl:sayHelloResponse"" name=""sayHelloResponse"">
            </wsdl:output>
        </wsdl:operation>
    </wsdl:portType>

    <wsdl:binding name=""HelloWorldSoapBinding"" type=""impl:HelloWorld"">
        <wsdlsoap:binding style=""document"" transport=""http://schemas.xmlsoap.org/soap/http""/>
        <wsdl:operation name=""sayHello"">
            <wsdlsoap:operation soapAction=""""/>
            <wsdl:input name=""sayHelloRequest"">
                <wsdlsoap:body use=""literal""/>
            </wsdl:input>

            <wsdl:output name=""sayHelloResponse"">
                <wsdlsoap:body use=""literal""/>
            </wsdl:output>
        </wsdl:operation>
    </wsdl:binding>

    <wsdl:binding name=""HelloWorldSoap_JMS_Binding"" type=""impl:HelloWorld"">
        <wsdlsoap:binding style=""document"" transport=""http://cxf.apache.org/transport/jms""/>
        <wsdl:operation name=""sayHello"">
            <wsdlsoap:operation soapAction=""""/>
            <wsdl:input name=""sayHelloRequest"">
                <wsdlsoap:body use=""literal""/>
            </wsdl:input>

            <wsdl:output name=""sayHelloResponse"">
                <wsdlsoap:body use=""literal""/>
            </wsdl:output>
        </wsdl:operation>
    </wsdl:binding>

    <wsdl:service name=""HelloWorldService"">
        <wsdl:port binding=""impl:HelloWorldSoapBinding"" name=""HelloWorld"">
            <wsdlsoap:address location=""http://localhost:8080/WebService/services/HelloWorld""/>
        </wsdl:port>

        <wsdl:port binding=""impl:HelloWorldSoap_JMS_Binding"" name=""HelloWorldOverJms"">
            <jms:address
                    destinationStyle=""queue""
                    jndiConnectionFactoryName=""ConnectionFactory""
                    jndiDestinationName=""dynamicQueues/test.soap.jmstransport.queue"">
                <jms:JMSNamingProperty name=""java.naming.factory.initial""
                                       value=""org.apache.activemq.jndi.ActiveMQInitialContextFactory""/>
                <jms:JMSNamingProperty name=""java.naming.provider.url"" value=""vm://localhost""/>
            </jms:address>
        </wsdl:port>
    </wsdl:service>
</wsdl:definitions>

{code}","18/Feb/13 04:15;njiang;Hi Charles,

I just wrote a simple test case by using the jms transport as you did. I can reproduce the error when I use the JMS URI or not. 
It looks like there are something wrong with the jms continuation which the cxf consumer is used by default.
You can work around it by using the synchronous=true on the camel-cxf endpoint like this
{code}
from(""cxf:bean:jmsEndpoint?synchronous=true"")...
{code}

I will keep on digging that.

Willem","18/Feb/13 08:21;njiang;The JMSContinuation doesn't support to be called suspend and consume at the same thread. It is in the old design of cxf 2.2.x, which means you cannot called continuation suspend method before you setup the callback when continuation is ready.
Before I find a way to enhance the feature from CXF side, we should not support to use JMSContinuation anymore. I will commit the code to let CxfConsumer switch to sync invocation mode when it find the JMSContinuation is used. ","18/Feb/13 08:41;cmoulliard;Hi Willem,

Thx. Do you mean that until now SOAP over JMS should not be used anymore (till next change) and we use by example this camel route to support same feature ?

{code}
from(""jms:queue:input"").setExchangePattern(ExchangePattern.InOnly).unmarshal(soap).to(""bean:callBackend"").marshal(soap).to(""jms:queue.replyQueue);
{code}","18/Feb/13 08:48;njiang;Hi Charles,

You can keep use the SOAP over JMS by setting the option of synchronous=true, it will force the cxf consumer use the sync invocation to wrok around the issue that we meet. 

I just want to say we can not use JMSContinuation which is key point to camel-cxf async invocation any more before we find a good solution in CXF.",,,,,,,,,,,,,,,,,,,
ClassNotFoundException: weblogic.jndi.WLInitialContextFactory when starting the route via Karaf start-route(camel:route-start) command.,CAMEL-5968,12627405,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,chris@die-schneider.net,kckcs,kckcs,14/Jan/13 09:55,27/Feb/13 14:06,13/Mar/19 22:19,27/Feb/13 14:06,2.9.2,,,,,,,,,2.10.5,2.11.0,2.9.6,,camel-core,camel-jms,karaf,,,,0,,,,,,,,,"We have a simple camel route definied in Java DSL:

from(""wmq:queue:ESB_TEST_IN"").routeId(""IN"").
autoStartup(true).
log(""${body}"");

This route receives JMS messages from a WebLogicJMS queue with name ESB_TEST_IN and logs the body to the log file.
The route works fine when autoStartup is set to true. But when autoStartup is set to false then the creation of the WebLogic InitialContext failed because of an ClassNotFoundException regarding weblogic.jndi.WLInitialContextFactory and the following message is written to the karaf log file:

2012-12-07 12:03:21,502 WARN : DefaultJmsMessageListenerContainer | Setup of JMS message listener invoker failed for destination 'ESB_TEST_IN' - trying to recover. Cause: Destination [ESB_TEST_IN] not found in JNDI; nested exception is javax.naming.NoInitialContextException: Cannot instantiate class: weblogic.jndi.WLInitialContextFactory [Root exception is java.lang.ClassNotFoundException: weblogic.jndi.WLInitialContextFactory] [org.springframework.jms.listener.DefaultMessageListenerContainer | mer[ESB_TEST_IN] | org.springframework.jms.3.0.7.RELEASE(id=135)]


This issue's related to https://jira.talendforge.org/browse/TESB-7884",Camel-core(2.9.2) in Karaf(2.2.6),,,,,,,,,,,,,,,,,,,,21/Jan/13 14:05;chris@die-schneider.net;CAMEL-5968-1.patch;https://issues.apache.org/jira/secure/attachment/12565786/CAMEL-5968-1.patch,21/Jan/13 14:54;chris@die-schneider.net;CAMEL-5968-2.patch;https://issues.apache.org/jira/secure/attachment/12565791/CAMEL-5968-2.patch,,,,,2.0,,,,,,,,,,,,,,,,,,,2013-01-14 17:26:24.332,,,no_permission,,Unknown,,,,,,,,,,,304189,,,Wed Feb 27 14:06:55 UTC 2013,,,,,,,0|i17jzz:,252209,,,,,,,,,14/Jan/13 17:26;chris@die-schneider.net;I used Weblogic to access ejbs in a POC some time ago. There we had to use the dynamic import feature for the weblogic jars to make it work. So that may be something to try here.,"15/Jan/13 09:05;kckcs;Can you please elaborate on the dynamic import feature usage. Currently the project includes maven-bundle-plugin with configuration->instructions set to 

<Import-Package>*, weblogic.jndi</Import-Package>
<DynamicImport-Package>*</DynamicImport-Package>","15/Jan/13 09:27;chris@die-schneider.net;Hi Krishnan, your setup look fine. You probably do not even need the Dynamic-Import. I overlooked that you use the karaf command to start the route. I guess the problem is that a different classloader is used when starting the route with the karaf command.","15/Jan/13 10:27;chris@die-schneider.net;I just looked into the camel karaf commands code but found no classloader stuff there. Can you get me a weblogic jms Installation? Then I will try to debug this.
","15/Jan/13 11:37;kckcs;Hi Christian,

I have emailed you the weblogic installation info. 

Thanks","18/Jan/13 08:59;chris@die-schneider.net;I tested with the example provided in the TESB issue (unfortunately private). 
When I set the route to autotstart it works. When I start it by hand I get this error:

- retrying in 5000 ms. Cause: JndiObjectTargetSource failed to obtain new target object; nested exception is javax.naming.NoInitialContextException: Cannot instantiate class: weblogic.jndi.WLInitialContextFactory [Root exception is java.lang.ClassNotFoundException: weblogic.jndi.WLInitialContextFactory]

I did a second setup with a second route that feeds messages into the queue and is auto started. When I then start the main route by hand I get a different exception.
On first call or route-start I get the exception on second call no exception happens but it does not work anyway.

2013-01-18 09:52:12,497 | INFO  | l Console Thread | Console                          | 13 - org.apache.karaf.shell.console - 2.2.10 | Exception caught while executing command
java.lang.AssertionError: Class does not implement remote interface
	at weblogic.utils.Debug.assertion(Debug.java:67)
	at weblogic.rmi.internal.StubGenerator.<init>(StubGenerator.java:128)
	at weblogic.rmi.internal.StubGenerator.<init>(StubGenerator.java:85)
	at weblogic.rmi.internal.StubGenerator.hotCodeGenClass(StubGenerator.java:782)
	at weblogic.rmi.internal.StubGenerator.getStubClass(StubGenerator.java:766)
	at weblogic.rmi.internal.StubGenerator.generateStub(StubGenerator.java:793)
	at weblogic.rmi.internal.StubGenerator.generateStub(StubGenerator.java:786)
	at weblogic.rmi.extensions.StubFactory.getStub(StubFactory.java:74)
	at weblogic.rmi.extensions.server.ServerHelper.exportObject(ServerHelper.java:227)
	at weblogic.rmi.internal.wls.CEReferenceHelperImpl.exportObject(CEReferenceHelperImpl.java:20)
	at weblogic.rmi.extensions.PortableRemoteObject.exportObject(PortableRemoteObject.java:34)
	at weblogic.messaging.dispatcher.DispatcherImpl.export(DispatcherImpl.java:85)
	at weblogic.messaging.dispatcher.DispatcherManager.export(DispatcherManager.java:74)
	at weblogic.jms.dispatcher.JMSDispatcherManager.exportLocalDispatcher(JMSDispatcherManager.java:229)
	at weblogic.jms.client.JMSConnectionFactory.setupJMSConnection(JMSConnectionFactory.java:214)
	at weblogic.jms.client.JMSConnectionFactory.createConnectionInternal(JMSConnectionFactory.java:285)
	at weblogic.jms.client.JMSConnectionFactory.createConnection(JMSConnectionFactory.java:191)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)[:1.6.0_37]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)[:1.6.0_37]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)[:1.6.0_37]
	at java.lang.reflect.Method.invoke(Method.java:597)[:1.6.0_37]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:309)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:196)
	at $Proxy72.createConnection(Unknown Source)
	at org.springframework.jms.support.JmsAccessor.createConnection(JmsAccessor.java:184)
	at org.springframework.jms.listener.AbstractJmsListeningContainer.createSharedConnection(AbstractJmsListeningContainer.java:403)
	at org.springframework.jms.listener.AbstractJmsListeningContainer.establishSharedConnection(AbstractJmsListeningContainer.java:371)
	at org.springframework.jms.listener.DefaultMessageListenerContainer.establishSharedConnection(DefaultMessageListenerContainer.java:749)
	at org.springframework.jms.listener.AbstractJmsListeningContainer.doStart(AbstractJmsListeningContainer.java:278)
	at org.springframework.jms.listener.AbstractJmsListeningContainer.start(AbstractJmsListeningContainer.java:263)
	at org.springframework.jms.listener.DefaultMessageListenerContainer.start(DefaultMessageListenerContainer.java:555)
	at org.apache.camel.component.jms.JmsConsumer.startListenerContainer(JmsConsumer.java:85)
	at org.apache.camel.component.jms.JmsConsumer.prepareAndStartListenerContainer(JmsConsumer.java:150)
	at org.apache.camel.component.jms.JmsConsumer.doStart(JmsConsumer.java:134)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)
	at org.apache.camel.impl.DefaultCamelContext.startService(DefaultCamelContext.java:1723)
	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRouteConsumers(DefaultCamelContext.java:2014)
	at org.apache.camel.impl.DefaultCamelContext.doStartRouteConsumers(DefaultCamelContext.java:1950)
	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:1878)
	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:1891)
	at org.apache.camel.impl.DefaultCamelContext.startRouteService(DefaultCamelContext.java:1773)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:733)
	at org.apache.camel.karaf.commands.RouteStart.doExecute(RouteStart.java:54)
	at org.apache.karaf.shell.console.OsgiCommandSupport.execute(OsgiCommandSupport.java:38)[13:org.apache.karaf.shell.console:2.2.10]
	at org.apache.felix.gogo.commands.basic.AbstractCommand.execute(AbstractCommand.java:35)[13:org.apache.karaf.shell.console:2.2.10]
	at org.apache.felix.gogo.runtime.CommandProxy.execute(CommandProxy.java:78)[13:org.apache.karaf.shell.console:2.2.10]
	at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:474)[13:org.apache.karaf.shell.console:2.2.10]
	at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:400)[13:org.apache.karaf.shell.console:2.2.10]
	at org.apache.felix.gogo.runtime.Pipe.run(Pipe.java:108)[13:org.apache.karaf.shell.console:2.2.10]
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:183)[13:org.apache.karaf.shell.console:2.2.10]
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:120)[13:org.apache.karaf.shell.console:2.2.10]
	at org.apache.felix.gogo.runtime.CommandSessionImpl.execute(CommandSessionImpl.java:89)[13:org.apache.karaf.shell.console:2.2.10]
	at org.apache.karaf.shell.console.jline.Console.run(Console.java:173)[13:org.apache.karaf.shell.console:2.2.10]
	at java.lang.Thread.run(Thread.java:662)[:1.6.0_37]
2013-01-18 09:52:37,813 | INFO  | l Console Thread | OsgiSpringCamelContext           | 65 - org.apache.camel.camel-core - 2.10.0 | Route: IN started and consuming from: Endpoint[wmq://queue:QueueBJNDI]
","18/Jan/13 09:14;kckcs;We'd then tried to load the classes(connectionfactory,desitinationresolver) invoking within the route's config method to resolve ""Cause: JndiObjectTargetSource failed..""

private void initResolver() {
try { ConnectionFactory cf = (ConnectionFactory) getContext().getRegistry().lookup(""jndiFactoryBean""); Connection con = cf.createConnection(); Session session = con.createSession(false, Session.AUTO_ACKNOWLEDGE); DestinationResolver resolver = (DestinationResolver) getContext().getRegistry().lookup(""jndiDestinationResolver""); resolver.resolveDestinationName(session, ""QueueBJNDI"", false); session.close(); con.close(); } catch (JMSException e) { e.printStackTrace(); }
}

But this workaround is possible only when the server  <property name=""cache"" value=""true"" /> cache's enabled. Also when the server disconnects and reconnects (may be a shutdown or network issue), route doesn't work.",18/Jan/13 17:16;chris@die-schneider.net;I can confirm now that the problem should be the thread context classloader. When setting this to an invalid classloader I am able to reproduce the problem even outside OSGi. So the solution should be to set the thread context classloader to the classloader of the user bundle before executing the route start in the camel command.,21/Jan/13 12:06;chris@die-schneider.net;I have developed a patch to the camel commands that solves this problem. Will fine tune it a bit and then add to this issue.,"21/Jan/13 14:05;chris@die-schneider.net;Add a thread context classloader with the bundle classloader in the start command.

The patch is a little larger as I needed to change other methods in CamelController to retrieve the BundleContext.

I also changed the pom to enable deployment with camel 2.9.2 and karaf 2.2.6. These changes would not go into trunk.","21/Jan/13 14:54;chris@die-schneider.net;Switched to camelContext.getApplicationContextClassLoader() to get hold of the bundle classloader like proposed by Claus. Added the context classloader to stop and resume. 
","21/Jan/13 16:00;chris@die-schneider.net;http://svn.apache.org/viewvc?view=revision&revision=1436431
http://svn.apache.org/viewvc?view=revision&revision=1436432
","21/Jan/13 16:27;chris@die-schneider.net;backported to 2.9.x:
http://svn.apache.org/viewvc?view=revision&revision=1436456","27/Feb/13 14:06;chris@die-schneider.net;Found that I forgot part of the merge for 2.10.4. I fixed the issue on the 2.10.x branch and marked the issue as solved for 2.10.5.
",,,,,,,,,,
Service Shutdown logic may execute N times,CAMEL-6072,12631948,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,raulvk,raulvk,raulvk,12/Feb/13 14:21,12/Feb/13 17:06,13/Mar/19 22:19,12/Feb/13 17:06,2.10.3,2.9.5,,,,,,,,2.10.4,2.11.0,2.9.6,,,,,,,,0,,,,,,,,,"ServiceSupport#shutdown should return immediately to avoid executing service shutdown logic twice, which could easily cause problems in the state of components, endpoints, consumers, etc.",,,,,,,,,,,,,,,,CAMEL-6073,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,312444,,,Tue Feb 12 17:06:24 UTC 2013,,,,,,,0|i1hx3j:,312790,,,,,,,,,"12/Feb/13 17:06;raulvk;Committed in r1445263 (trunk), r1445265 (2.10.x branch), 1445266 (2.9.x branch).",,,,,,,,,,,,,,,,,,,,,,,
Pairs of VM producer-consumer disconnect when OSGi bundle is restarted,CAMEL-6073,12631949,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,raulvk,raulvk,raulvk,12/Feb/13 14:23,12/Feb/13 17:05,13/Mar/19 22:19,12/Feb/13 17:05,2.10.3,2.9.5,,,,,,,,2.10.4,2.11.0,2.9.6,,,,,,,,0,,,,,,,,,See http://camel.465427.n5.nabble.com/VM-Queues-Disconnected-after-Karaf-Bundle-Update-tt5727205.html.,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,312445,,,Tue Feb 12 17:05:48 UTC 2013,,,,,,,0|i1hx3r:,312791,,,,,,,,,"12/Feb/13 17:05;raulvk;Committed in r1445263 (trunk), r1445265 (2.10.x branch), 1445266 (2.9.x branch).",,,,,,,,,,,,,,,,,,,,,,,
Wire Tap onPrepare should process new Exchange,CAMEL-6064,12631718,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,scranton,scranton,11/Feb/13 13:00,12/Feb/13 09:10,13/Mar/19 22:19,12/Feb/13 09:10,,,,,,,,,,2.10.4,2.11.0,2.9.6,,camel-core,,,,,,0,,,,,,,,,"As scenario for Wire Tap onPrepare is deep cloning the message body, I'd expect original instance to stay with main route, and deep copy to go to specified Wire Tap endpoint. This would require onPrepare to process the new Exchange.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-02-12 09:10:47.845,,,no_permission,,Unknown,,,,,,,,,,,312214,,,Tue Feb 12 09:10:47 UTC 2013,,,Patch Available,,,,0|i1hvof:,312560,,,,,,,,,11/Feb/13 13:03;scranton;Fix and updated Unit Test in Github.com pull request - https://github.com/apache/camel/pull/12,12/Feb/13 09:10;davsclaus;Thanks Scott for the patch.,,,,,,,,,,,,,,,,,,,,,,
CamelBlueprintContext may be wrongly started and this may lead to a deadlock,CAMEL-6068,12631809,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ay,ay,11/Feb/13 20:53,12/Feb/13 09:04,13/Mar/19 22:19,12/Feb/13 09:04,2.10.3,,,,,,,,,2.10.4,2.11.0,2.9.6,,camel-blueprint,,,,,,0,,,,,,,,,"We observed a deadlock situation that seems to be caused by the change that came in with CAMEL-5712, which changed the way how CamelBlueprintContext is started to solve another issue.

The current code listens to the service registered event for org.osgi....BlueprintContainer (supposedly for its associated BP container) and decides to start itself if not started. From the description of the ticket, this change was intended to make sure the starting of the context occurs after its BP container is registered. 

In that case, should it be checking whether the received event belongs to the same bundle? This checking is missing in the current code and consequently, it may wrongly react to the event from another bundle's container registration event. When this happens under some specific timing situation, it may also lead to a deadlock.

So, should we be checking the event source in CamelBlueprintContext's serviceChanged method?

Regards, aki

Stack trace from 2.10.3
========================================================================
Name: Blueprint Extender: 3
State: BLOCKED on java.lang.Object@9064b42 owned by: Blueprint Extender: 2
Total blocked: 13  Total waited: 38

Stack trace:
 org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:212)
org.apache.aries.blueprint.container.BlueprintRepository.createInstance(BlueprintRepository.java:198)
org.apache.aries.blueprint.container.BlueprintRepository.create(BlueprintRepository.java:137)
org.apache.aries.blueprint.container.BlueprintContainerImpl.getComponentInstance(BlueprintContainerImpl.java:709)
org.apache.camel.blueprint.BlueprintContainerRegistry.lookup(BlueprintContainerRegistry.java:41)
org.apache.camel.impl.CompositeRegistry.lookup(CompositeRegistry.java:68)
org.apache.camel.impl.PropertyPlaceholderDelegateRegistry.lookup(PropertyPlaceholderDelegateRegistry.java:49)
org.apache.camel.blueprint.BlueprintComponentResolver.resolveComponent(BlueprintComponentResolver.java:39)
org.apache.camel.impl.DefaultCamelContext.getComponent(DefaultCamelContext.java:314)
   - locked java.util.HashMap@1660de94org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:456)
org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:50)
org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:186)
org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:108)
org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:114)
org.apache.camel.model.FromDefinition.resolveEndpoint(FromDefinition.java:72)
org.apache.camel.impl.DefaultRouteContext.getEndpoint(DefaultRouteContext.java:90)
org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:851)
org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:171)
org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:722)
org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:1789)
org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1575)
org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1444)
   - locked org.apache.camel.blueprint.BlueprintCamelContext@5011bafaorg.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)
org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1412)
org.apache.camel.blueprint.BlueprintCamelContext.maybeStart(BlueprintCamelContext.java:127)
org.apache.camel.blueprint.BlueprintCamelContext.serviceChanged(BlueprintCamelContext.java:96)
org.eclipse.osgi.internal.serviceregistry.FilteredServiceListener.serviceChanged(FilteredServiceListener.java:104)
org.eclipse.osgi.framework.internal.core.BundleContextImpl.dispatchEvent(BundleContextImpl.java:861)
org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:230)
org.eclipse.osgi.framework.eventmgr.ListenerQueue.dispatchEventSynchronous(ListenerQueue.java:148)
org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.publishServiceEventPrivileged(ServiceRegistry.java:819)
org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.publishServiceEvent(ServiceRegistry.java:771)
org.eclipse.osgi.internal.serviceregistry.ServiceRegistrationImpl.register(ServiceRegistrationImpl.java:130)
org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.registerService(ServiceRegistry.java:214)
org.eclipse.osgi.framework.internal.core.BundleContextImpl.registerService(BundleContextImpl.java:433)
org.apache.aries.blueprint.container.BlueprintContainerImpl.registerService(BlueprintContainerImpl.java:410)
org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:346)
org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:230)
   - locked java.util.concurrent.atomic.AtomicBoolean@3cb3ada
   - locked java.util.concurrent.atomic.AtomicBoolean@31b4d206
java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
java.util.concurrent.FutureTask.run(FutureTask.java:138)
java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:98)
java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:206)
java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
java.lang.Thread.run(Thread.java:722)


========================================================================
Name: Blueprint Extender: 2
State: BLOCKED on
org.apache.camel.blueprint.BlueprintCamelContext@5011bafa owned by: Blueprint Extender: 3
Total blocked: 24  Total waited: 58

Stack trace:
 org.apache.camel.impl.DefaultCamelContext.getTypeConverter(DefaultCamelContext.java:1053)
org.apache.camel.util.EndpointHelper.setProperties(EndpointHelper.java:249)
org.apache.camel.impl.DefaultComponent.setProperties(DefaultComponent.java:222)
org.apache.camel.component.file.GenericFileComponent.createEndpoint(GenericFileComponent.java:64)
org.apache.camel.component.file.GenericFileComponent.createEndpoint(GenericFileComponent.java:36)
org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:91)
org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:461)
org.apache.camel.core.xml.AbstractCamelEndpointFactoryBean.getObject(AbstractCamelEndpointFactoryBean.java:46)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
java.lang.reflect.Method.invoke(Method.java:597)
org.apache.aries.blueprint.utils.ReflectionUtils.invoke(ReflectionUtils.java:226)
org.apache.aries.blueprint.container.BeanRecipe.invoke(BeanRecipe.java:824)
org.apache.aries.blueprint.container.BeanRecipe.getInstance(BeanRecipe.java:234)
org.apache.aries.blueprint.container.BeanRecipe.internalCreate(BeanRecipe.java:706)
org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:64)
   - locked java.lang.Object@9064b42
org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:219)
   - locked java.lang.Object@9064b42
org.apache.aries.blueprint.container.BlueprintRepository.createAll(BlueprintRepository.java:147)
org.apache.aries.blueprint.container.BlueprintContainerImpl.instantiateEagerComponents(BlueprintContainerImpl.java:631)
org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:337)
org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:230)
   - locked java.util.concurrent.atomic.AtomicBoolean@53b00227
   - locked java.util.concurrent.atomic.AtomicBoolean@5648a168
java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
java.util.concurrent.FutureTask.run(FutureTask.java:138)
java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:98)
java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:206)
java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
java.lang.Thread.run(Thread.java:722)
",,,,,,,,,,,,,,,,,,,,,11/Feb/13 20:55;ay;trunk-components-camel-blueprint-20130211.diff;https://issues.apache.org/jira/secure/attachment/12568885/trunk-components-camel-blueprint-20130211.diff,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-02-12 09:04:12.459,,,no_permission,,Unknown,,,,,,,,,,,312305,,,Tue Feb 12 09:04:12 UTC 2013,,,Patch Available,,,,0|i1hw8n:,312651,,,,,,,,,12/Feb/13 09:04;davsclaus;Thanks for the patch.,,,,,,,,,,,,,,,,,,,,,,,
Camel SFTP endpoint throws exception when running camel route on Windows OS,CAMEL-5989,12628577,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,jluo,jluo,21/Jan/13 16:36,08/Feb/13 12:45,13/Mar/19 22:19,24/Jan/13 16:53,2.10.3,,,,,,,,,2.10.4,2.11.0,,,camel-ftp,,,,,,0,,,,,,,,,"I have a rather simple camel route involving sftp endpoints:
from(""sftp://jluo@192.168.0.196/outbox?password=******&binary=true&autoCreate=true&move=.done"").to(""sftp://jluo@192.168.0.196/inbox?password=******&autoCreate=true&binary=true"");

The camel sftp consumer and producer endpoints are pointing to my Mac OSX host (192.168.0.196). When I ran the camel route on Windows machine (here I was using Windows 7 Pro 64-bit OS) to try to use sftp to consume and produce files from/to Mac OSX machine, I got following error:
 15:46:59,941 | INFO  | 168.0.196/outbox | SftpOperations                   |  -  -  | JSCH -> SSH_MSG_NEWKEYS received
15:46:59,941 | INFO  | 168.0.196/outbox | SftpOperations                   |  -  -  | JSCH -> SSH_MSG_SERVICE_REQUEST sent
15:46:59,941 | INFO  | 168.0.196/outbox | SftpOperations                   |  -  -  | JSCH -> SSH_MSG_SERVICE_ACCEPT received
15:46:59,941 | INFO  | 168.0.196/outbox | SftpOperations                   |  -  -  | JSCH -> Authentications that can continue: publickey,keyboard-interactive,password
15:46:59,941 | INFO  | 168.0.196/outbox | SftpOperations                   |  -  -  | JSCH -> Next authentication method: publickey
15:46:59,941 | INFO  | 168.0.196/outbox | SftpOperations                   |  -  -  | JSCH -> Authentications that can continue: keyboard-interactive,password
15:46:59,941 | INFO  | 168.0.196/outbox | SftpOperations                   |  -  -  | JSCH -> Next authentication method: keyboard-interactive
15:47:00,003 | INFO  | 168.0.196/outbox | SftpOperations                   |  -  -  | JSCH -> Authentication succeeded (keyboard-interactive).
15:47:00,003 | TRACE | 168.0.196/outbox | SftpOperations                   |  -  -  | Channel isn't connected, trying to recreate and connect.
15:47:00,003 | TRACE | 168.0.196/outbox | SftpOperations                   |  -  -  | Connecting use connectTimeout: 10000 ...
15:47:00,034 | INFO  | 168.0.196/outbox | SftpOperations                   |  -  -  | Connected to sftp://jluo@192.168.0.196:22
15:47:00,034 | INFO  | 168.0.196/outbox | SftpConsumer                     |  -  -  | Connected and logged in to: sftp://jluo@192.168.0.196:22
15:47:00,034 | TRACE | 168.0.196/outbox | SftpOperations                   |  -  -  | getCurrentDirectory()
15:47:00,034 | TRACE | 168.0.196/outbox | SftpConsumer                     |  -  -  | doPollDirectory from absolutePath: outbox, dirName: null
15:47:00,034 | TRACE | 168.0.196/outbox | SftpOperations                   |  -  -  | changeCurrentDirectory(outbox)
15:47:00,034 | TRACE | 168.0.196/outbox | SftpOperations                   |  -  -  | getCurrentDirectory()
15:47:00,034 | TRACE | 168.0.196/outbox | SftpOperations                   |  -  -  | Changing directory: outbox
15:47:00,034 | TRACE | 168.0.196/outbox | SftpConsumer                     |  -  -  | Polling directory: outbox
15:47:00,034 | TRACE | 168.0.196/outbox | SftpOperations                   |  -  -  | listFiles(.)
15:47:00,050 | TRACE | 168.0.196/outbox | SftpConsumer                     |  -  -  | Found 3 in directory: outbox
15:47:00,050 | TRACE | 168.0.196/outbox | SftpOperations                   |  -  -  | changeCurrentDirectory(/Users/jluo)
15:47:00,050 | TRACE | 168.0.196/outbox | SftpOperations                   |  -  -  | getCurrentDirectory()
15:47:00,050 | TRACE | 168.0.196/outbox | SftpOperations                   |  -  -  | Changing directory: \
15:47:00,050 | WARN  | 168.0.196/outbox | eFilePollingConsumerPollStrategy |  -  -  | Trying to recover by disconnecting from remote server forcing a re-connect at next poll: sftp://jluo@192.168.0.196:22
15:47:00,050 | DEBUG | 168.0.196/outbox | SftpConsumer                     |  -  -  | Disconnecting from: sftp://jluo@192.168.0.196:22
15:47:00,050 | INFO  | 168.0.196/outbox | SftpOperations                   |  -  -  | JSCH -> Disconnecting from 192.168.0.196 port 22
15:47:00,066 | INFO  | 68.0.196 session | SftpOperations                   |  -  -  | JSCH -> Caught an exception, leaving main loop due to socket closed
15:47:00,066 | WARN  | 168.0.196/outbox | SftpConsumer                     |  -  -  | Consumer Consumer[sftp://jluo@192.168.0.196/outbox?autoCreate=true&binary=true&move=.done&password=******] failed polling endpoint: Endpoint[sftp://jluo@192.168.0.196/outbox?autoCreate=true&binary=true&move=.done&password=******]. Will try again at next poll. Caused by: [org.apache.camel.component.file.GenericFileOperationFailedException - Cannot change directory to: \]
org.apache.camel.component.file.GenericFileOperationFailedException: Cannot change directory to: \
	at org.apache.camel.component.file.remote.SftpOperations.doChangeDirectory(SftpOperations.java:434)[camel-ftp-2.10.3.jar:2.10.3]
	at org.apache.camel.component.file.remote.SftpOperations.changeCurrentDirectory(SftpOperations.java:407)[camel-ftp-2.10.3.jar:2.10.3]
	at org.apache.camel.component.file.remote.SftpConsumer.pollDirectory(SftpConsumer.java:52)[camel-ftp-2.10.3.jar:2.10.3]
	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:107)[camel-core-2.10.3.jar:2.10.3]
	at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:142)[camel-core-2.10.3.jar:2.10.3]
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:92)[camel-core-2.10.3.jar:2.10.3]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)[:1.6.0_33]
	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)[:1.6.0_33]
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)[:1.6.0_33]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98)[:1.6.0_33]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:180)[:1.6.0_33]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:204)[:1.6.0_33]
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)[:1.6.0_33]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)[:1.6.0_33]
	at java.lang.Thread.run(Thread.java:662)[:1.6.0_33]


I tried to run the same camel route on my Mac OSX host (so it was from Mac OSX -> Mac OSX) and everything worked fine. In another word, running the camel route on an Unix like OS, it worked fine. It looks like a bug was introduced from 2.9.x to 2.10 that relates to Windows since I also tested on Camel 2.9.2 version and when I run the same route on Windows machine with camel 2.9.2, it worked fine though. 
",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-01-22 12:56:25.501,,,no_permission,,Unknown,,,,,,,,,,,306666,,,Thu Jan 24 16:52:49 UTC 2013,,,,,,,0|i19z7b:,266337,,,,,,,,,21/Jan/13 16:41;jluo;It looks like very similar as CAMEL-5970 and they might be the same issue though.,22/Jan/13 12:56;davsclaus;CAMEL-5564 causes this regression.,"24/Jan/13 00:08;ay;Hi Claus,
this issue seems to be unrelated to CAMEL-5574, as it is occurring with no-stepwise mode and when trying to go back to root ""/"" (but incorrectly to ""\""). Whereas CAMEL-5574 only changed the stepwise traversal behavior in 2.10.2. I suspect, if Joe uses the stepwise mode (and likely also with the non-stepwise mode), it will work with 2.10.2 but unfortunately not with 2.10.3 because of rev 1410217 in trunk that changed FileUtil.java. This change interferes with the directory path comparison in SFTPOperations's. And this mismatch was fixed with rev 1424437 in trunk and the current 2.10.4-SNAPSHOT should contains the fix.

Hi Joe,
I may be wrong with my assumption, but can you try your scenario with 2.10.4-SNAPSHOT to see if the problem is resolved? (I think 2.10.2 will also work for you). 

regards, aki
","24/Jan/13 13:48;jluo;Hi, Aki

Yeah, you are right. I tried 2.10.2 and 2.10.4-SNAPSHOT, both versions worked fine on Windows OS. As well as both ""stepwise"" modes ""true|false"" worked fine too on Windows now.

Thanks for the help!

Cheers,
/Joe
","24/Jan/13 16:52;davsclaus;Thanks Aki for digging into this, much appreciated.

",,,,,,,,,,,,,,,,,,,
sftp: noop=true&idempotent=false doesn't work,CAMEL-6046,12631264,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,jaakko.salmela@aalto.fi,jaakko.salmela@aalto.fi,07/Feb/13 14:14,07/Feb/13 15:17,13/Mar/19 22:19,07/Feb/13 15:17,2.8.1,,,,,,,,,2.10.4,2.11.0,2.9.6,,camel-ftp,,,,,,0,,,,,,,,,"Forcing idempotent=false doesn't seem to work with ftp-endpoint
{code}
<from uri=""sftp://user@server.aalto.fi//payments?password=*****&amp;connectTimeout=20000&amp;stepwise=false&amp;idempotent=false&amp;noop=true&amp;delay=60000""/>
{code}
Will copy files with a same name only once.

However it works with file-endpoint
{code}
<from uri=""file:/payments?idempotent=false&amp;noop=true&amp;delay=60000""/>
{code}
the files are copied every time, like they should be.



",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-02-07 15:17:25.975,,,no_permission,,Unknown,,,,,,,,,,,311760,,,Thu Feb 07 15:17:25 UTC 2013,,,,,,,0|i1hsvr:,312106,,,,,,,,,07/Feb/13 15:17;davsclaus;Thanks for reporting.,,,,,,,,,,,,,,,,,,,,,,,
Different servlets interfere with each other,CAMEL-5206,12552091,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,chris@die-schneider.net,chris@die-schneider.net,23/Apr/12 07:18,07/Feb/13 14:03,13/Mar/19 22:19,07/Feb/13 14:03,2.9.2,,,,,,,,,2.11.0,,,,camel-servlet,,,,,,0,,,,,,,,,"See http://java.dzone.com/articles/gotcha-when-using-camel

If using two wars with one servlet in each with the same name then servlet endpoints may end up on the wrong servlet. I think this should not happen with pure war deploys. Trying to check if camel is in a shared lib folder.

In any case this behaviour is not what people expect naively so we should try to fix that so that each war has its own combinaation of servlets and servlet endpoints that do not interfere with others.
",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-02-07 14:03:50.92,,,no_permission,,Unknown,,,,,,,,,,,236828,,,Thu Feb 07 14:03:50 UTC 2013,,,,,,,0|i025nr:,10518,,,,,,,,,"07/Feb/13 14:03;davsclaus;We now detect the duplicate servlet name and fail starting the servlet. Then people will detect this quicker and can remedy by using unique servlet names.

This applies only when they use a shared lib to share Camel JARs in the container.",,,,,,,,,,,,,,,,,,,,,,,
Upon connection cd fails,CAMEL-5970,12627595,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,yaytul,yaytul,15/Jan/13 05:29,05/Feb/13 19:16,13/Mar/19 22:19,25/Jan/13 08:44,2.10.3,2.9.5,,,,,,,,2.10.4,2.9.6,,,camel-ftp,,,,,,0,,,,,,,,,"cd fails on successful connection with 2.10.3 or 2.9.5

sftp endpoint [sftp://sftp-user@127.0.0.1/incoming?disconnect=true&privateKeyFile=sftp-user.ppk&privateKeyFilePassphrase=******]
 
Below log excerpt is with 2.8.0, cd works and sftp cd command successfully goes into '/home/sftp-user' directory

{quote} 
20130114 18:42:52,956 INFO  [Camel (camel-1) thread #0 - sftp://user@host/outgoing] RemoteFileConsumer[133]: Connected and logged in to: sftp://user@host:22
20130114 18:42:52,956 TRACE [Camel (camel-1) thread #0 - sftp://user@host/outgoing] SftpOperations[339]: getCurrentDirectory()
20130114 18:42:52,959 TRACE [Camel (camel-1) thread #0 - sftp://user@host/outgoing] SftpConsumer[68]: doPollDirectory from absolutePath: outgoing, dirName: null
20130114 18:42:52,959 TRACE [Camel (camel-1) thread #0 - sftp://user@host/outgoing] SftpOperations[348]: changeCurrentDirectory(outgoing)
20130114 18:42:52,959 TRACE [Camel (camel-1) thread #0 - sftp://user@host/outgoing] SftpOperations[389]: Changing directory: outgoing
20130114 18:42:52,966 TRACE [Camel (camel-1) thread #0 - sftp://user@host/outgoing] SftpConsumer[81]: Polling directory: outgoing
20130114 18:42:52,966 TRACE [Camel (camel-1) thread #0 - sftp://user@host/outgoing] SftpOperations[415]: listFiles(.)
20130114 18:42:52,982 TRACE [Camel (camel-1) thread #0 - sftp://user@host/outgoing] SftpConsumer[94]: Found 2 in directory: outgoing
20130114 18:42:52,982 TRACE [Camel (camel-1) thread #0 - sftp://user@host/outgoing] SftpOperations[348]: changeCurrentDirectory(/home/sftp-user)
20130114 18:42:52,982 TRACE [Camel (camel-1) thread #0 - sftp://user@host/outgoing] SftpOperations[389]: Changing directory: /
20130114 18:42:52,988 TRACE [Camel (camel-1) thread #0 - sftp://user@host/outgoing] SftpOperations[389]: Changing directory: home
20130114 18:42:52,994 TRACE [Camel (camel-1) thread #0 - sftp://user@host/outgoing] SftpOperations[389]: Changing directory: sftp-user
20130114 18:42:53,000 DEBUG [Camel (camel-1) thread #0 - sftp://user@host/outgoing] GenericFileConsumer[84]: Took 0.044 seconds to poll: outgoing
{quote}

Same route fails with 2.95. or 2.10.3 cd command fails.

{quote}
20130114 19:15:53,530 INFO  [Camel (camel-1) thread #0 - file://../test_outbound/] RemoteFileProducer[193]: Connected and logged in to: Endpoint[sftp://user@host/incoming?disconnect=true&knownHostsFile=env%2FunitTest%2Fknown_hosts&privateKeyFile=env%2FunitTest%2Fkeys%2Fsftp-user.ppk&privateKeyFilePassphrase=******&separator=Auto]
20130114 19:15:53,530 TRACE [Camel (camel-1) thread #0 - file://../test_outbound/] SftpOperations[305]: buildDirectory(incoming,false)
20130114 19:15:53,530 TRACE [Camel (camel-1) thread #0 - file://../test_outbound/] SftpOperations[372]: getCurrentDirectory()
20130114 19:15:53,670 TRACE [Camel (camel-1) thread #0 - file://../test_outbound/] SftpOperations[381]: changeCurrentDirectory(/home/sftp-user)
20130114 19:15:53,670 TRACE [Camel (camel-1) thread #0 - file://../test_outbound/] SftpOperations[372]: getCurrentDirectory()
20130114 19:15:53,670 TRACE [Camel (camel-1) thread #0 - file://../test_outbound/] SftpOperations[430]: Changing directory: \
20130114 19:15:53,749 TRACE [Camel (camel-1) thread #0 - file://../test_outbound/] SftpOperations[430]: Changing directory: home
20130114 19:15:53,796 WARN  [Camel (camel-1) thread #0 - file://../test_outbound/] RemoteFileProducer[71]: Writing file failed with: Cannot change directory to: home
{quote}

Looks like separator is bad but I tried all 3 options (Windows,Unix,Auto)... none worked. ",,,,,,,,,,,,,,,,,,,,,16/Jan/13 06:14;yaytul;camel_test.log;https://issues.apache.org/jira/secure/attachment/12565083/camel_test.log,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-01-22 12:56:55.158,,,no_permission,,Unknown,,,,,,,,,,,304379,,,Tue Feb 05 19:16:38 UTC 2013,,,,,,,0|i17m4v:,252555,,,,,,,,,16/Jan/13 06:14;yaytul;Complete test log file (some names are obfuscated),22/Jan/13 12:56;davsclaus;CAMEL-5564 caused this regression.,22/Jan/13 12:57;davsclaus;If you use Camel 2.9.3 or older then it ought to work.,25/Jan/13 08:44;davsclaus;Should be fixed in upcoming releases.,04/Feb/13 19:26;yaytul;Thanks for taking care of this so quickly.,"05/Feb/13 19:16;pant_deepak;Can you please tell me if this could happen in Apache Camel 2.8.4 or 2.8.5 bundled with Apache Service Mix 4.4.1 and 4.4.2 respectively. My routes work most of the times and then once every few days I would see following information logged in the log files.

org.apache.camel.component.file.GenericFileOperationFailedException: Cannot change directory to: /home/msftpusr
	at org.apache.camel.component.file.remote.SftpOperations.doChangeDirectory(SftpOperations.java:423)[156:org.apache.camel.camel-ftp:2.8.4]
	at org.apache.camel.component.file.remote.SftpOperations.changeCurrentDirectory(SftpOperations.java:388)[156:org.apache.camel.camel-ftp:2.8.4]
	at org.apache.camel.component.file.remote.SftpOperations.buildDirectory(SftpOperations.java:335)[156:org.apache.camel.camel-ftp:2.8.4]
	at org.apache.camel.component.file.GenericFileProducer.writeFile(GenericFileProducer.java:243)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.component.file.GenericFileProducer.processExchange(GenericFileProducer.java:156)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.component.file.remote.RemoteFileProducer.process(RemoteFileProducer.java:51)[156:org.apache.camel.camel-ftp:2.8.4]
	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:50)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:114)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:284)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:109)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:69)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:90)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:318)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:209)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:306)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:80)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:69)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:90)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:318)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:209)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:306)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:116)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:79)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:139)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:106)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:69)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:353)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:176)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:137)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:138)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:90)[91:org.apache.camel.camel-core:2.8.4]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)[:1.6.0_31]
	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)[:1.6.0_31]
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)[:1.6.0_31]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98)[:1.6.0_31]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:180)[:1.6.0_31]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:204)[:1.6.0_31]
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)[:1.6.0_31]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)[:1.6.0_31]
	at java.lang.Thread.run(Thread.java:662)[:1.6.0_31]
Caused by: 4: 
	at com.jcraft.jsch.ChannelSftp.cd(ChannelSftp.java:285)[158:org.apache.servicemix.bundles.jsch:0.1.44.2]
	at org.apache.camel.component.file.remote.SftpOperations.doChangeDirectory(SftpOperations.java:421)[156:org.apache.camel.camel-ftp:2.8.4]
	... 60 more
Caused by: java.io.IOException: Pipe closed
	at java.io.PipedInputStream.read(PipedInputStream.java:291)[:1.6.0_31]
	at java.io.PipedInputStream.read(PipedInputStream.java:361)[:1.6.0_31]
	at com.jcraft.jsch.ChannelSftp.fill(ChannelSftp.java:2333)[158:org.apache.servicemix.bundles.jsch:0.1.44.2]
	at com.jcraft.jsch.ChannelSftp.header(ChannelSftp.java:2359)[158:org.apache.servicemix.bundles.jsch:0.1.44.2]
	at com.jcraft.jsch.ChannelSftp._realpath(ChannelSftp.java:1819)[158:org.apache.servicemix.bundles.jsch:0.1.44.2]
	at com.jcraft.jsch.ChannelSftp.cd(ChannelSftp.java:268)[158:org.apache.servicemix.bundles.jsch:0.1.44.2]
	... 61 more
",,,,,,,,,,,,,,,,,,
Java DSL: unmarshal() inside choice() blocks adding more conditions,CAMEL-5953,12627020,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,raulvk,raulvk,10/Jan/13 20:57,04/Feb/13 08:13,13/Mar/19 22:19,04/Feb/13 08:13,2.10.3,,,,,,,,,2.10.4,2.11.0,,,,,,,,,0,,,,,,,,,"This routing code leads to the exception below:

{code}
from(""direct:abc"")
    .choice()
        .when(simple(""${body} == 'Please do not fail'""))
            .to(""log:test"")
            .unmarshal().xstream().endChoice()
        .otherwise()
            .to(""log:test"")
        .end();
{code}

Exception:

{code}
Caused by: java.lang.ClassCastException: org.apache.camel.model.RouteDefinition cannot be cast to org.apache.camel.model.ChoiceDefinition
	at org.apache.camel.model.ProcessorDefinition.endChoice(ProcessorDefinition.java:1256)
	at com.mycompany.MyRoute.configure(MyRoute.java:40)
	at org.apache.camel.builder.RouteBuilder.checkInitialized(RouteBuilder.java:322)
	at org.apache.camel.builder.RouteBuilder.configureRoutes(RouteBuilder.java:276)
	at org.apache.camel.builder.RouteBuilder.addRoutesToCamelContext(RouteBuilder.java:262)
	[...]
{code}

Also happens if we try to add another when instead of an otherwise.

Tried using end(), endParent(), but they all lead to the same exception. ",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-01-11 20:17:14.134,,,no_permission,,Unknown,,,,,,,,,,,303713,,,Sun Feb 03 12:26:06 UTC 2013,,,,,,,0|i17dzr:,251236,,,,,,,,,"11/Jan/13 20:17;bvahdat;I just quickly looked at this and IMHO it's a regression caused by CAMEL-4044. For example if you would revert one of the changes made there for {{ProcessorDefinition}} (line 1215 on trunk) where:

{code}
if (defn instanceof TryDefinition) {
{code}

has been changed to:

{code}
if (defn instanceof TryDefinition || defn instanceof ChoiceDefinition) {
{code}

Then your route would be fine without any nasty {{ClassCastException}}. However it's not that easy as this change would cause some existing {{camel-core}} tests to fail, *mainly* at the places where the code has been changed through CAMEL-4044 itself. As Claus has already mentioned there that fix has a poor code coverage.","12/Jan/13 03:29;njiang;To workaround this issue, you can use the direct endpoint to break the main route to some smaller routes.
{code}
from(""direct:abc"")
    .choice()
        .when(simple(""${body} == 'Please do not fail'""))
            .to(""direct:unmarshal"")
        .otherwise()
            .to(""log:test"")
        .end();

from(""direct:unmarshal"").to(""log:test"")
            .unmarshal().xstream();
{code}","12/Jan/13 12:25;davsclaus;See this FAQ
http://camel.apache.org/why-can-i-not-use-when-or-otherwise-in-a-java-camel-route.html

You can do this
{code}
from(""direct:abc"")
    .choice()
        .when(simple(""${body} == 'Please do not fail'""))
            .to(""log:test"")
            .unmarshal(new XStreamDataFormat())
        .otherwise()
            .to(""log:test"")
        .end();
{code}",03/Feb/13 12:26;davsclaus;I found a possible solution.,,,,,,,,,,,,,,,,,,,,
Camel feature file doesn't validate,CAMEL-5965,12627344,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,muellerc,muellerc,13/Jan/13 15:57,03/Feb/13 11:57,13/Mar/19 22:19,03/Feb/13 11:57,2.10.4,2.9.6,,,,,,,,2.10.4,2.9.6,,,karaf,,,,,,0,,,,,,,,,"{noformat}
christian-muellers-macbook-pro:features cmueller$ mvn install -Pvalidate
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF-8
[INFO] Scanning for projects...
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: Platforms :: Apache Karaf :: Features 2.10.4-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
...
[INFO]     OK: imports resolved for camel-jmx
[INFO]     OK: imports resolved for camel-ahc
[INFO]     OK: imports resolved for camel-amqp
[INFO]     OK: imports resolved for camel-apns
[WARNING] Failed to validate feature camel-atom
[WARNING] No export found to match org.apache.james.mime4j (imported by mvn:org.apache.abdera/abdera-parser/1.1.3)
[WARNING] No export found to match org.apache.james.mime4j (imported by mvn:org.apache.ws.commons.axiom/axiom-api/1.2.14)
[WARNING] No export found to match org.apache.james.mime4j.stream (imported by mvn:org.apache.ws.commons.axiom/axiom-api/1.2.14)
[WARNING] No export found to match org.apache.james.mime4j.stream (imported by mvn:org.apache.abdera/abdera-parser/1.1.3)
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-02-03 11:57:29.564,,,no_permission,,Unknown,,,,,,,,,,,304117,,,Sun Feb 03 11:57:29 UTC 2013,,,,,,,0|i17jhb:,252125,,,,,,,,,13/Jan/13 18:09;muellerc;Same issue on 2.9.6-SNAPSHOT,03/Feb/13 11:57;davsclaus;Fixed both 2.9 and 2.10 branches.,,,,,,,,,,,,,,,,,,,,,,
Camel Transformer using inconsistent sources,CAMEL-6020,12629838,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,30/Jan/13 05:21,01/Feb/13 15:13,13/Mar/19 22:19,01/Feb/13 15:13,2.10.3,,,,,,,,,2.10.4,2.11.0,2.9.6,,camel-core,,,,,,0,,,,,,,,,"
I have a simple xml transformer:
{code}
<camel:camelContext id=""camelContext"" trace=""true"">

<camel:route id=""testRoute"">
<camel:from uri=""direct:testEndpoint"" />
<camel:process ref=""testProcessor"" />
<camel:marshal>
<camel:jaxb fragment=""true"" partClass=""test.Talk"" contextPath=""test""
partNamespace=""{http://test/}talk""/>
</camel:marshal>

<camel:to uri=""log:TEST-AFTER-MARSHALL"" />

<camel:to uri=""xslt:xslt/transform.xsl?transformerFactory=saxonTransformerFactory"" />

<camel:to uri=""log:TEST-AFTER-XSL"" />

</camel:route>

</camel:camelContext>
{code}

The xslt is very simple then:
{code}
<xsl:template match=""/"">
<afterXlst>
<xsl:value-of select=""test:talk/text"" />
</afterXlst>
</xsl:template>
{code}
With this example run multiple times (3 in the cases below), I'm seeing inconsistent inconsistent transformers being used with 2.10.3 and also 2.11 SNAPSHOT:
{code}
wildflower:test-bundle $ tail -f output.log | grep ""XsltBuilder TRACE Using""
2013-01-17 11:37:59,201 [ main] XsltBuilder TRACE Using BytesSource[
2013-01-17 11:37:59,201 [ main] XsltBuilder TRACE Using BytesSource[
2013-01-17 11:37:59,201 [ main] XsltBuilder TRACE Using BytesSource[
2013-01-17 11:38:18,664 [ main] XsltBuilder TRACE Using javax.xml.transform.stream.StreamSource@4af6fd54 as source
2013-01-17 11:38:18,664 [ main] XsltBuilder TRACE Using javax.xml.transform.stream.StreamSource@4af6fd54 as source
2013-01-17 11:38:18,664 [ main] XsltBuilder TRACE Using javax.xml.transform.stream.StreamSource@4af6fd54 as source
2013-01-17 11:38:38,241 [ main] XsltBuilder TRACE Using javax.xml.transform.stax.StAXSource@23f95cce as source
2013-01-17 11:38:38,241 [ main] XsltBuilder TRACE Using javax.xml.transform.stax.StAXSource@23f95cce as source
2013-01-17 11:38:38,241 [ main] XsltBuilder TRACE Using javax.xml.transform.stax.StAXSource@23f95cce as source
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,310334,,,Fri Feb 01 15:13:14 UTC 2013,,,,,,,0|i1hk33:,310679,,,,,,,,,"30/Jan/13 05:39;njiang;The issue is caused by there are bunches of type converter which can turn a byte into a Source. The result could be StreamSource or StaxSource or ByteSource.
Because these converters are loaded in different sequence when camel is loading the converter, so we hit this kind of issue.

To fix the issue, I just changed the type converter calling sequence to make sure we get the exact Source object we want first.","01/Feb/13 15:13;njiang;Applied the patch into trunk, camel-2.10.x and camel-2.9.x branches.",,,,,,,,,,,,,,,,,,,,,,
HdfsOutputStream is not closing,CAMEL-5971,12627641,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,jluo,jluo,15/Jan/13 13:13,01/Feb/13 11:47,13/Mar/19 22:19,01/Feb/13 11:47,2.10.3,,,,,,,,,2.10.4,2.11.0,,,camel-hdfs,,,,,,0,,,,,,,,,"I have a simple camel route that takes file from a camel-file consumer endpoint and sends to a camel-hdfs producer endpoint:

<from uri=""file:/local/workspace/inbox?delete=true""/>
<to uri=""hdfs://localhost:9000/local/workspace/outbox/file1""/>

However, my Hadoop server only creates a zero length file ""file1.opened"" unless I stop camel route or a splitting condition is met with a ""splitStratedy"" option added to URI. In above cases, a file called ""file1"" is created with proper contents and the ""file1.opened"" is disappeared.  

It looks like that close() function of HdfsOutputStream is never called unless the camel route/context is stopping or we are splitting the file by looking at source code.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-01-15 15:00:56.538,,,no_permission,,Unknown,,,,,,,,,,,304427,,,Wed Jan 30 07:50:20 UTC 2013,,,,,,,0|i17mg7:,252606,,,,,,,,,"15/Jan/13 15:00;njiang;It's not a effective to write the hdfs is we close the stream every time.
Maybe we can consider to add a option to make sure the camel-hdfs producer to close the stream once the producer is finished the processing.","16/Jan/13 09:43;davsclaus;There is some idle task in the hdfs producer. I would assume that ought to close the stream if the producer is not busy.

Though camel-hdfs is a bit odd. I would have liked it was implemented more like camel-file etc. In fact we have another JIRA ticket about that.","17/Jan/13 07:04;njiang;Yeah, from the usage of the user, it looks like we need to change the file name dynamically. 
I think most people uses HDFS to store the large size file, so we didn't hit this kind of request before.
","22/Jan/13 08:21;davsclaus;Why is closing a stream not efficient? 

Is the idea to keep the stream open just in case there is a lot of writes to HDFS?
But even if the stream is open, the data must be flushed at some point? Or does HDFS only let ""other parties"" see the file when the stream is closed.
So you can write to the stream 1000 times and only when you close its visibile for other parties?

I dont see a point of keeping the stream open, when the end user has no way of closing it after usage.
Either we should
- always close the stream after writing in the producer
- use some background task to close the stream if idle for more than X
- allow people to explicit close the stream in some way
- add new option: closeStream=true|false which people can turn off|on to have old behavior etc

","30/Jan/13 07:50;njiang;It's not a common practice that we close the HDFS OutputStream and try to append the data later.
It could more easy to make the data is consistent if we just make sure the file is visible for the other parties when the stream is closed.
Here is a page[1] to explain this.
I think when we provide the option of closeStream, I don't think we need to check the append option at the same time.

[1]http://blog.cloudera.com/blog/2009/07/file-appends-in-hdfs/  ",,,,,,,,,,,,,,,,,,,
"camel-blueprint - Using blueprint-cm with .cfg files, which triggers bundle reload on .cfg file change, does not startup Camel as expected",CAMEL-6023,12629867,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,30/Jan/13 10:14,30/Jan/13 13:24,13/Mar/19 22:19,30/Jan/13 13:24,2.10.3,,,,,,,,,2.10.4,2.11.0,,,karaf,,,,,,0,,,,,,,,,"See ARIES-1010

If you do a restart of a Camel application from the shell
restart 123

Then it works fine. But if you change a .cfg file then it wont startup Camel again.

The workaround is to stop the bundle first, change the .cfg file, and then start the bundle again.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,310363,,,2013-01-30 10:14:06.0,,,,,,,0|i1hk9j:,310708,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RestletComponent component is not removing added route from routers list although route is removed from Context.,CAMEL-5999,12628782,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,amit1000,amit1000,22/Jan/13 20:11,29/Jan/13 16:54,13/Mar/19 22:19,26/Jan/13 11:47,2.10.3,,,,,,,,,2.10.4,2.11.0,,,camel-restlet,,,,,,0,,,,,,,,,"In RestletComponent class add entry to instance variable ""private final Map<String, MethodBasedRouter> routers = new HashMap<String, MethodBasedRouter>()"" map while invoking getMethodRouter method, but it never remove in disconnect method, also disconnect method has local variable with same name as instance variable ""routes"".

Camel Development Forums
=========================
http://camel.465427.n5.nabble.com/Camel-Restlet-2-10-3-RestletComponent-component-does-not-remove-added-route-form-routers-although-ro-td5726000.html





",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-01-23 07:39:07.43,,,no_permission,,Unknown,,,,,,,,,,,308260,,,Tue Jan 29 16:54:45 UTC 2013,,,,,,,0|i1b1cn:,272517,,,,,,,,,"23/Jan/13 07:39;davsclaus;Thanks for reporting.

Are you working on a patch for this?","25/Jan/13 03:56;amit1000;After I made the following changes to RestletComonent, RestletRestartRouteTest does not pass.

I updated RestletComonent disconnect method as below. Look like server.stop() method is not working properly. I need your help to resolve this issue.


public void disconnect(RestletConsumer consumer) throws Exception {
        RestletEndpoint endpoint = consumer.getEndpoint();

        List<MethodBasedRouter> methodBasedRouters = new ArrayList<MethodBasedRouter>();

        String pattern = decodePattern(endpoint.getUriPattern());
        if (pattern != null && !pattern.isEmpty()) {
            methodBasedRouters.add(getMethodRouter(pattern));
        }

        if (endpoint.getRestletUriPatterns() != null) {
            for (String uriPattern : endpoint.getRestletUriPatterns()) {	
                methodBasedRouters.add(getMethodRouter(uriPattern));
              
            }
        } 
  
        for (MethodBasedRouter methodBasedRouter : methodBasedRouters) {
            if (endpoint.getRestletMethods() != null) {
                Method[] methods = endpoint.getRestletMethods();
                for (Method method : methods) {
                    methodBasedRouter.removeRoute(method);
                }
            } else {
                methodBasedRouter.removeRoute(endpoint.getRestletMethod());
            }

           
           //remove route form routers Map 
           routers.remove(methodBasedRouter.getUriPattern());
                     
           String key = buildKey(endpoint);    
           Server server = servers.get(key);
           component.getServers().remove(server);
           server.stop();
           servers.remove(key);
           if (methodBasedRouter.hasBeenAttached()) {
               component.getDefaultHost().detach(consumer.getRestlet());
              
           }
          
             
            System.out.println(""After remove""+ routers.toString());
            if (LOG.isDebugEnabled()) {
                LOG.debug(""Detached restlet uriPattern: {} method: {}"", methodBasedRouter.getUriPattern(),
                          endpoint.getRestletMethod());
            }
        }
        
        
    }
",26/Jan/13 11:47;davsclaus;I took a look and found a way to better deattach restlet routers when they are no longer in use.,29/Jan/13 16:46;amit1000;Thanks for your Help! I tested the changes and it works as expected.,29/Jan/13 16:54;davsclaus;Thanks for taking the time to test the changes.,,,,,,,,,,,,,,,,,,,
multicase shareUnitOfWork just throw one exception in the first time,CAMEL-6005,12629008,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,24/Jan/13 07:14,24/Jan/13 20:53,13/Mar/19 22:19,24/Jan/13 20:53,,,,,,,,,,2.10.4,2.11.0,2.9.6,,camel-core,,,,,,0,,,,,,,,,"Here is the mail thread[1] for it.
[1]http://camel.465427.n5.nabble.com/Possible-bug-with-multicast-shareUnitOfWork-tp5726103.html",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,308626,,,2013-01-24 07:14:36.0,,,,,,,0|i1cqtz:,282478,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-sftp's stepwise behavior to walk up and down relatively to avoid potential traversal issues,CAMEL-5574,12606484,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,ay,ay,06/Sep/12 20:57,24/Jan/13 16:54,13/Mar/19 22:19,24/Jan/13 16:54,2.10.1,,,,,,,,,2.10.2,2.11.0,2.9.4,,camel-ftp,,,,,,0,,,,,,,,,"I am having a directory traversal problem using the stepwise mode of camel-sftp at the producer side. Basically, it can walk down the path from the starting directory to the walking directory, but it cannot go back correctly to the original starting directly. The server is SSH-2.0-Cleo VLProxy/3.0.1 SSH FTP server.
I saw a related JIRA issue CAMEL-3309 that describes some issues in the stepwise traversal and some background to this related problem.

My question is on the part that changes the working directory back to the original starting folder. I am wondering why we are using stepwise traversal from the ancestor directory towards the starting child directory, instead of moving upwards relatively from the working directory back to the starting directory. This reverse traversal does not require accessing the ancestry path above the staring directory (hence, not affected by the accessing problem). And in fact, I think this reverse stepwise traversal seems more natural order than doing stepwise traversal each time from top down. How do you think?

I have made a change that implements this reverse stepwise traversal in SftpOperations and also made a few minor improvement changes.
This changed version passes all the existing tests and works also against the above server.

I am attaching a patch file for this change. I would appreciate if you can comment on it.

Thanks.
regards, aki
",,,,,,,,,,,,,,CAMEL-3309,,,,,,,06/Sep/12 20:58;ay;trunk-camel-ftp.diff;https://issues.apache.org/jira/secure/attachment/12544109/trunk-camel-ftp.diff,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-09-17 07:09:42.328,,,no_permission,,Unknown,,,,,,,,,,,241447,,,Thu Jan 24 16:54:48 UTC 2013,,,Patch Available,,,,0|i027xj:,10886,,,,,,,,,"17/Sep/12 07:09;njiang;Applied patch into with thanks to Aki into trunk, camel-2.10.x and camel-2.9.x branches.","22/Jan/13 12:42;davsclaus;-1 to this patch.

The code in ftp/sftp/ftps should be similar as we keep the code in sync between the various FTP protocols. This code is only done at sftp and not the others.

And it causes a regression bug logged as CAMEL-5989

About the logic for stepwise. It is as it was designed, and its better to be consistent across the FTP protocols, and hence why the code is identical in the xxxOperations source code.

If there is a better algorithm for stepwise then it has to be done across all FTP protocols and be consistent.","22/Jan/13 13:29;ay;Hi Claus,
I can work on the modified patch along your suggestion.

Regarding CAMEL-5989, I am not sure why it is causing an windows related issue, as I was also using windows and thought the directory path was normalized at that place. (by the way, you linked the wrong ticket from CAMEL-5989 in your comment there, 5564 instead of 5574). 

regards, aki
","22/Jan/13 14:03;davsclaus;Aki,

Yeah its important that the code is similar between ftp and s-ftp. eg the code in FtpOperations and SftpOperations is the same, except for when they use the native ftp client. This ensures that functionality works the same. As well when we change/add new options etc then its easier to implement in both as its the same. Also the regular ftp tests will sort-of test sftp as well, as the code is following the same pattern.

In the early days we did not have a Java SFTP library to test against, so we did not have any SFTP tests. But recently we have a SFTP library now (though not sure if it works as well as a real SFTP server). And therefore we got a bit of sftp tests also.

Also in the earlier days the SFTP tests caused the CI servers to hang. But just recently we enabled the tests again. And it seems the SFTP library is more stable and allow CI servers to not hang anymore.

","22/Jan/13 14:06;davsclaus;Also the ftp component is a bit complicated as people use different OS'es and different FTP servers. And depending on if they are client or server etc. connecting to another OS etc. It gets a bit complicated with the / or \ handling of path separators. As well how the FTP server accepts traversing file paths. Some servers require you to CD into a dir, before you can GET or PUT. Where as others do not so you can GET foo/bar/myfile.dat etc.

The world would have been easier if the windows guys just had used the same path separator as the rest of the world. :(","22/Jan/13 15:39;davsclaus;I agree the stepwise and directory traversal could be better.
Though its problematic when people use absolute or relative starting directories as well.

Also the logic for changing to parent directory could possible in sftp operations be using "".."" which we would assume should be supported by the ftp client as a valid input to change dir command.","24/Jan/13 12:58;ay;Hi Claus,
As I commented in CAMEL-5989, it looks like the original patch made in 2.10.2 worked for unix and windows as jsch consistently used the absolute path with ""/"" as delimiter and FileUtils.compactPath was not converting this path into the windows syntax on windows.

FileUtils.compachPath in 2.10.3 converted this path into the windows syntax on windows. And rev 1424437 changed SFTPOperations to call FileUtils.compactPath with the explicit delimiter.

To unify the processing in ftp and sftp, which have different behaviors, we need to make some of these underlining assumption detectable or if not, additionally configurable. Do you think it makes sense to use this ticket to do this refactoring or create a new one and refer to this ticket? 

How do you think?

Thanks.
regards, aki

","24/Jan/13 16:54;davsclaus;Aki, yeah you found the solution.

That said, I still think the stepwise code can be improved and how sftp changes to parent directory etc.
I will open a new ticket, and then we can consider improving this in a future release or even 2.11 if we got the time.
",,,,,,,,,,,,,,,,
Classloader mixup in Direct VM component,CAMEL-5748,12613768,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,raulvk,raulvk,raulvk,27/Oct/12 18:03,21/Jan/13 12:44,13/Mar/19 22:19,21/Jan/13 12:44,2.10.2,,,,,,,,,2.10.4,2.11.0,,,camel-core,osgi,,,,,0,,,,,,,,,"The Direct VM component allows routes in different Camel Contexts to communicate with each other with all the benefits of the Direct endpoint (namely thread-sharing, thus enabling transaction to propagate across Camel Contexts).

However, the TCCL of the consumer route still remains the TCCL of the producer route. See CAMEL-5722 for a similar case.

I suggest fixing this by introducing a proxy processor at the consumer that sets the appropriate classloader, and sets it back when done. Note: remember to take into account exception scenarios, i.e. we should catch exceptions from the forward call to .process(), reset the classloader and rethrow the exception.
",,,,,,,,,,,,,,CAMEL-5722,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-10-29 10:01:20.718,,,no_permission,,Unknown,,,,,,,,,,,252523,,,Mon Jan 21 12:44:48 UTC 2013,,,,,,,0|i0ctkn:,72735,,,,,,,,,"29/Oct/12 10:01;davsclaus;I wonder if there is anywhere in OSGi spec that says that the TCCL must be the classloader from the current bundle? 

When you use OSGi service registry and invoke services across bundles, what is the TCCL then?",29/Oct/12 10:13;davsclaus;I assume camel-quartz may have this issue as well as the quartz scheduler is shared in osgi land.,"29/Oct/12 11:27;raulvk;That's a good point. Just searching on Google for ""thread context classloader osgi"" shows that Camel is not the only project in pain due to possible under-specification from OSGi... http://apache-felix.18485.n6.nabble.com/Can-the-thread-context-classloader-issue-be-solved-at-all-td4835872.html#a30704352","21/Jan/13 12:21;davsclaus;I think this makes sense to implement in direct-vm as its intended for cross application in same JVM. So the direct VM consumer code should have logic to set/revert the TCCL.
",21/Jan/13 12:44;davsclaus;I implemented the suggestion from Raul.,,,,,,,,,,,,,,,,,,,
Camel-syslog dataformat broken with netty transport,CAMEL-5951,12626970,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,codingismy11to7,codingismy11to7,10/Jan/13 16:30,19/Jan/13 06:55,13/Mar/19 22:19,19/Jan/13 06:55,2.10.2,2.10.3,,,,,,,,2.10.4,2.11.0,2.9.6,,,,,,,,0,,,,,,,,,"in Rfc3164SyslogDataFormat, the remoteAddress of the SyslogMessage is set from the Mina or Netty headers. There's a copy/paste error for Netty: it correctly checks for the existence of the CamelNettyRemoteAddress header, but then attempts to set the remoteAddress from a CamelMinaRemoteAddress header.

(there's no camel-syslog component in JIRA)",,300,300,,0%,300,300,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-01-11 03:19:56.203,,,no_permission,,Novice,,,,,,,,,,,303663,,,Sat Jan 19 06:40:37 UTC 2013,,,,,,,0|i17djz:,251165,,,,,,,,,"11/Jan/13 03:19;njiang;Applied the patch into trunk, camel-2.10.x and camel-2.9.x branches.",16/Jan/13 16:03;codingismy11to7;Another copy/paste error - set the message.remoteAddress instead of localAddress from the NETTY_LOCAL_ADDRESS (at least on 2.10.x branch where I was looking),"16/Jan/13 16:05;codingismy11to7;actually, looking at the camel-netty code in 2.10...it looks like netty doesn't provide any local address info (see NettyConstants and NettyEndpoint.createExchange)","18/Jan/13 01:49;njiang;Hi Steven,

Did you have chance to checkout the latest camel-2.10.x branch?
I backported the patch of CAMEL-5955 into 2.10.x branches. You should be able to get the  NETTY_LOCAL_ADDRESS from message header. Can you double check it?

Willem","18/Jan/13 16:35;codingismy11to7;Sorry, I didn't know CamelNettyLocalAddress got added - I was looking at 2.10.2, not the latest code

the ""message.setRemoteAddress(exchange.getIn().getHeader(""CamelNettyLocalAddress"", String.class));"" typo still applies though

thanks!","18/Jan/13 17:52;davsclaus;Steven, is there still a problem with the latest code on the 2.10 branch?","18/Jan/13 17:53;codingismy11to7;yes

https://fisheye6.atlassian.com/browse/camel/trunk/components/camel-syslog/src/main/java/org/apache/camel/component/syslog/Rfc3164SyslogDataFormat.java?r=1431820

line 57: the remote address of the message is set from the netty local address instead of the message's local address","18/Jan/13 17:55;codingismy11to7;I linked to trunk, but the same line is in 2.10.x and 2.9.x","19/Jan/13 06:40;njiang;Hi Steven,

It's my bad, I didn't update the code after I copy past it.
I just commit a quick fix for it, please feel free to check out the code and verify it.
",,,,,,,,,,,,,,,
Bug with completionSize on AggregatorProcessor,CAMEL-5957,12627169,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,breilhes,breilhes,11/Jan/13 13:26,18/Jan/13 16:13,13/Mar/19 22:19,18/Jan/13 16:13,2.10.3,,,,,,,,,2.10.4,2.11.0,2.9.6,,camel-core,eip,,,,,0,,,,,,,,,"See nabble :
http://camel.465427.n5.nabble.com/Bug-with-completionSize-on-AggregatorProcessor-td5725364.html",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-01-12 12:21:59.66,,,no_permission,,Unknown,,,,,,,,,,,303938,,,Fri Jan 18 16:13:51 UTC 2013,,,,,,,0|i17gzz:,251723,,,,,,,,,"12/Jan/13 12:21;davsclaus;Benoit, thanks for reporting. Are you working on a patch?",18/Jan/13 16:13;davsclaus;Thanks for reporting.,,,,,,,,,,,,,,,,,,,,,,
NPE when jaxb fallback converter is used with RequestEntityConverter,CAMEL-5890,12624405,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,18/Dec/12 03:59,18/Jan/13 01:54,13/Mar/19 22:19,18/Jan/13 01:54,2.10.2,2.10.3,2.9.4,2.9.5,,,,,,2.10.4,2.11.0,2.9.6,,,,,,,,0,,,,,,,,,"As the RequestEntityConverter.toRequestEntity(String str, Exchange exchange) doesn't has check if the exchange is null, it caused the NPE as the user complain in camel user mailing list[1]

[1]http://camel.465427.n5.nabble.com/Content-Enrich-Error-when-upgrading-Apache-Camel-from-2-9-2-to-any-higher-version-td5724244.html

Here is the stack trace.
{code}
CaughtExceptionType:org.apache.camel.TypeConversionException, CaughtExceptionMessage:Error during type conversion from type: com.ecc.DamBean to the required type: org.apache.commons.httpclient.methods.RequestEntity with value com.ecc.DamBean@8811a59 due Error during type conversion from type: java.lang.String to the required type: org.apache.commons.httpclient.methods.RequestEntity with value ... 
The complete Stack Trace : 
Exchange[ExchangePattern:InOnly, BodyType:String, Body:, CaughtExceptionType:org.apache.camel.TypeConversionException, CaughtExceptionMessage:Error during type conversion from type: com.ecc.DamBean to the required type: org.apache.commons.httpclient.methods.RequestEntity with value com.ecc.DamBean@8811a59 due Error during type conversion from type: java.lang.String to the required type: org.apache.commons.httpclient.methods.RequestEntity with value due java.lang.NullPointerException, StackTrace:org.apache.camel.TypeConversionException: Error during type conversion from type: com.ecc.DamBean to the required type: org.apache.commons.httpclient.methods.RequestEntity with value com.ecc.DamBean@8811a59 due Error during type conversion from type: java.lang.String to the required type: org.apache.commons.httpclient.methods.RequestEntity with value due java.lang.NullPointerException	at org.apache.camel.converter.jaxb.FallbackTypeConverter.convertTo(FallbackTypeConverter.java:98)	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:289)	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:111)	at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:72)	at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:47)	at org.apache.camel.component.http.HttpProducer.createRequestEntity(HttpProducer.java:390)	at org.apache.camel.component.http.HttpProducer.createMethod(HttpProducer.java:343)	at org.apache.camel.component.http.HttpProducer.process(HttpProducer.java:91)	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.Enricher.process(Enricher.java:114)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:334)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:220)	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:61)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:148)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:61)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)	at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:57)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:275)	at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:185)	at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:139)	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:909)	at java.lang.Thread.run(Thread.java:662)Caused by: org.apache.camel.TypeConversionException: Error during type conversion from type: java.lang.String to the required type: org.apache.commons.httpclient.methods.RequestEntity with value due java.lang.NullPointerException	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:126)	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:98)	at org.apache.camel.converter.jaxb.FallbackTypeConverter.marshall(FallbackTypeConverter.java:222)	at org.apache.camel.converter.jaxb.FallbackTypeConverter.convertTo(FallbackTypeConverter.java:94)	... 44 moreCaused by: org.apache.camel.RuntimeCamelException: java.lang.NullPointerException	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1271)	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:927)	at org.apache.camel.impl.converter.StaticMethodTypeConverter.convertTo(StaticMethodTypeConverter.java:47)	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:253)	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:111)	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:98)	at org.apache.camel.converter.jaxb.FallbackTypeConverter.marshall(FallbackTypeConverter.java:222)	at org.apache.camel.converter.jaxb.FallbackTypeConverter.convertTo(FallbackTypeConverter.java:94)	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:289)	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:111)	at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:72)	at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:47)	at org.apache.camel.component.http.HttpProducer.createRequestEntity(HttpProducer.java:390)	at org.apache.camel.component.http.HttpProducer.createMethod(HttpProducer.java:343)	at org.apache.camel.component.http.HttpProducer.process(HttpProducer.java:91)	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.Enricher.process(Enricher.java:114)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:334)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:220)	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:117)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)	at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:275)	at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:183)	at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:139)	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)	... 1 moreCaused by: java.lang.NullPointerException	at org.apache.camel.component.http.RequestEntityConverter.toRequestEntity(RequestEntityConverter.java:51)	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)	at java.lang.reflect.Method.invoke(Method.java:597)	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:923)	... 50 more]
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,299244,,,Fri Jan 18 01:54:22 UTC 2013,,,,,,,0|i160hr:,243212,,,,,,,,,"18/Jan/13 01:54;njiang;Applied the patch into trunk, camel-2.10.x and camel-2.9.x branches.",,,,,,,,,,,,,,,,,,,,,,,
camel-jmx - Does not work in OSGi if XML output,CAMEL-5975,12627805,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,16/Jan/13 10:43,16/Jan/13 10:54,13/Mar/19 22:19,16/Jan/13 10:54,2.10.0,2.9.0,,,,,,,,2.10.4,2.11.0,2.9.6,,camel-jmx,osgi,,,,,0,,,,,,,,,"For example installing camel-example-jmx in Apache Karaf you get this exception

{code}
Caused by: javax.xml.bind.JAXBException: ""org.apache.camel.component.jmx.jaxb"" doesnt contain ObjectFactory.class or jaxb.index
	at com.sun.xml.internal.bind.v2.ContextFactory.createContext(ContextFactory.java:186)[:1.6.0_37]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)[:1.6.0_37]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)[:1.6.0_37]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)[:1.6.0_37]
	at java.lang.reflect.Method.invoke(Method.java:597)[:1.6.0_37]
	at javax.xml.bind.ContextFinder.newInstance(ContextFinder.java:143)
	at javax.xml.bind.ContextFinder.find(ContextFinder.java:310)
	at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:412)
	at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:375)
	at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:279)
	at org.apache.camel.component.jmx.NotificationXmlFormatter.getMarshaller(NotificationXmlFormatter.java:158)
	at org.apache.camel.component.jmx.NotificationXmlFormatter.format(NotificationXmlFormatter.java:130)
	... 48 more
{code}

",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,304593,,,2013-01-16 10:43:41.0,,,,,,,0|i17nkn:,252788,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Custom URIResolve not used to load XSTL script,CAMEL-5942,12626569,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,t.gueldner,t.gueldner,08/Jan/13 16:03,14/Jan/13 07:25,13/Mar/19 22:19,12/Jan/13 14:37,2.10.3,,,,,,,,,2.10.4,2.11.0,,,camel-xslt,,,,,,0,,,,,,,,,"My problem is to load a XSLT script from database or provided as byte array but not as file in classpath or http.

A custom uri resolver would do the job. XsltEndpoint uses a ResourceHelper to load the XSTL resource instead of a given custom uri resolver.

{code}
    private synchronized void loadResource(XsltBuilder xslt, String resourceUri) throws TransformerConfigurationException, IOException {
        LOG.trace(""{} loading schema resource: {}"", this, resourceUri);
        // prefer to use URL over InputStream as it loads better with http
        URL url = ResourceHelper.resolveMandatoryResourceAsUrl(getCamelContext().getClassResolver(), resourceUri);
        xslt.setTransformerURL(url);
        // now loaded so clear flag
        cacheCleared = false;
    }
{code}

The ResourceHelper or this method should use the same URIResolver as XsltBuilder.

Another way would be to make the method above protected to be able to overwrite the behaviour.","Windows, Java 1.6",,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-01-12 12:32:04.898,,,no_permission,,Unknown,,,,,,,,,,,303176,,,Mon Jan 14 07:25:51 UTC 2013,,,,,,,0|i178gn:,250339,,,,,,,,,"12/Jan/13 12:32;davsclaus;This is already possible. You can configure a custom uri resolver on the component / endpoint.
http://camel.apache.org/xslt


See this unit test in the source code: XsltCustomizeURIResolverTest


",12/Jan/13 12:37;davsclaus;Ah yeah the xslt endpoint loads the resource the 1st time without the customer resolver. Lets fix that.,12/Jan/13 14:37;davsclaus;Thanks for reporting. Now the uri resolver is always used.,"14/Jan/13 07:25;t.gueldner;You are really fast. ;) Thank you.

I will try it next time.",,,,,,,,,,,,,,,,,,,,
Cache producer is not thread safe,CAMEL-5950,12626956,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,agattiker,agattiker,10/Jan/13 15:13,11/Jan/13 07:17,13/Mar/19 22:19,11/Jan/13 07:13,2.10.3,,,,,,,,,2.10.4,2.11.0,2.9.6,,camel-cache,,,,,,0,,,,,,,,,"{code}
		from(""direct:causeFailure"")
		.split().body().parallelProcessing()
		.setHeader(CacheConstants.CACHE_OPERATION, constant(CacheConstants.CACHE_OPERATION_DELETEALL))
		.to(""cache://MyTestCache"");
{code} 


{code}
 		String[] body = new String[] { ""a"", ""b"" };
		template.sendBody(body);
{code} 

{noformat}
net.sf.ehcache.ObjectExistsException: Cache MyTestCache already exists
	at net.sf.ehcache.CacheManager.addCacheNoCheck(CacheManager.java:1294)
	at net.sf.ehcache.CacheManager.addCache(CacheManager.java:1184)
	at org.apache.camel.component.cache.CacheEndpoint.initializeCache(CacheEndpoint.java:137)
	at org.apache.camel.component.cache.CacheProducer.process(CacheProducer.java:56)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:122)
	at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:298)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:117)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:334)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:220)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:334)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:220)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:99)
	at org.apache.camel.processor.MulticastProcessor.doProcessParallel(MulticastProcessor.java:709)
	at org.apache.camel.processor.MulticastProcessor.access$200(MulticastProcessor.java:80)
	at org.apache.camel.processor.MulticastProcessor$1.call(MulticastProcessor.java:290)
	at org.apache.camel.processor.MulticastProcessor$1.call(MulticastProcessor.java:275)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
	at java.util.concurrent.FutureTask.run(FutureTask.java:166)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
	at java.lang.Thread.run(Thread.java:722)
{noformat} 
",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-01-11 07:13:31.632,,,no_permission,,Unknown,,,,,,,,,,,303648,,,Fri Jan 11 07:17:56 UTC 2013,,,,,,,0|i17dgf:,251149,,,,,,,,,"11/Jan/13 07:13;njiang;Applied the patch into trunk, camel-2.10.x and camel-2.9.x branches.",11/Jan/13 07:17;agattiker;That was super fast. Thank you very much!,,,,,,,,,,,,,,,,,,,,,,
axiom 1.2.12 can't work with abdera 1.1.2,CAMEL-5109,12547333,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ffang,ffang,ffang,21/Mar/12 05:19,10/Jan/13 08:48,13/Mar/19 22:19,14/Dec/12 08:17,2.8.4,2.9.1,,,,,,,,2.10.0,2.8.5,2.9.2,,,,,,,,0,,,,,,,,,"CAMEL-4192 upgrade to axiom 1.2.12, and we have camel-atom feature which use latest axiom 1.2.12 and abdera 1.1.2 together, however, actually abdera 1.1.2  need work with axiom 1.2.10.

In org.apache.abdera.parser.stax.util.FOMExtensionIterator(abdera code), it need use a field currentChild which inherit from org.apache.axiom.om.impl.traverse.OMAbstractIterator(axiom code),  but field currentChild was removed from axiom 1.2.12, so that we can see exception like
java.lang.NoSuchFieldError: currentChild
	at org.apache.abdera.parser.stax.util.FOMExtensionIterator.hasNext(FOMExtensionIterator.java:74)
	at org.apache.abdera.parser.stax.util.FOMList.buffer(FOMList.java:60)
	at org.apache.abdera.parser.stax.util.FOMList.size(FOMList.java:77)


As abdera 1.1.2 already the latest version so that I think we need rollback to axiom 1.2.10 utill next abdera version which can work with axiom 1.2.12

Btw I believe this is the reason that why CXF still use axiom 1.2.10.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-12-12 20:39:01.47,,,no_permission,,Unknown,,,,,,,,,,,232491,,,Thu Dec 13 11:10:03 UTC 2012,,,,,,,0|i02527:,10421,,,,,,,,,"21/Mar/12 08:20;ffang;commit fix
http://svn.apache.org/viewvc?rev=1303301&view=rev for trunk
http://svn.apache.org/viewvc?rev=1303304&view=rev for 2.9.x branch
http://svn.apache.org/viewvc?rev=1303306&view=rev for 2.8.x branch","12/Dec/12 20:39;ben.truitt;This appears to be broken again in Camel 2.10.2.  The change the re-introduced this issue was revision 1356481:
http://svn.apache.org/viewvc/camel/trunk/parent/pom.xml?r1=1356480&r2=1356481&diff_format=h","13/Dec/12 02:34;ffang;Hi,

Thanks for pointing out this issue.
Sent an alarm mail around to community.

Freeman",13/Dec/12 11:10;ffang;reopen it as this issue get introduced again,,,,,,,,,,,,,,,,,,,,
Update SqsConsumer to extend Visibility Timeout correctly,CAMEL-5761,12614061,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,carlosroman,carlosroman,30/Oct/12 18:09,09/Jan/13 00:44,13/Mar/19 22:19,02/Nov/12 07:08,2.10.2,,,,,,,,,2.10.3,2.11.0,,,camel-aws,,,,,,0,aws,patch,sqs,,,,,,"Currently SqsConsumer will scheduled a future to happen start occruing 1/2 the visibility timeout, and reoccur again at the visibility timeout period. Because of the way SQS works, when you request a ChangeMessageVisibility timeout it does not add that to the time remaining on the message visibility. Instead it will set the message visibility to the time out given. This means that what actually happens in the camel code is that:
* we request the ChangeMessageVisibility timeout to be set to X seconds from now after X/2 seconds
* then every X seconds after that we we request the ChangeMessageVisibility timeout to be set to X from now

This means that our message will become visible every now and again as the ChangeMessageVisibility timeout is not updated in time as period between successive executions is the same as the timeout period we request.

I've attached two patches which would fix this issue.

* ""aws_sqs_visibility_timeout_simple.patch"" - This patch changes the way we set up the future. The delay and period are now the same so that we call ChangeMessageVisibility every X/2 after the message has been pulled. 

* ""aws_sqs_visibility_timeout_phased_timeout.patch"" - This one keeps the delay to 1/2 the period and requests ChangeMessageVisibility every period. This time though it requests the visibility to be 1.5 * the period. This means that it behaves as originally planned, as if it was adding duration to the visibility duration left. This means we call Amazon less times and still keep the message hidden as expected.



This was looked at with Alex Hutter (both working on same project).",,,,,,,,,,,,,,CAMEL-5306,,,,,,,30/Oct/12 18:10;carlosroman;aws_sqs_visibility_timeout_phased_timeout.patch;https://issues.apache.org/jira/secure/attachment/12551394/aws_sqs_visibility_timeout_phased_timeout.patch,30/Oct/12 18:10;carlosroman;aws_sqs_visibility_timeout_simple.patch;https://issues.apache.org/jira/secure/attachment/12551395/aws_sqs_visibility_timeout_simple.patch,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-11-02 07:08:51.013,,,no_permission,,Unknown,,,,,,,,,,,253186,,,Fri Nov 02 07:08:51 UTC 2012,,,Patch Available,,,,0|i0dcav:,75922,,,,,,,,,30/Oct/12 18:10;carlosroman;Two possible patches to solve the problem.,02/Nov/12 07:08;njiang;Applied the patch of aws_sqs_visibility_timeout_phased_timeout.patch into trunk and camel-2.10.x with thanks to Carlos.,,,,,,,,,,,,,,,,,,,,,,
NullPointerException in RouteContextProcessor,CAMEL-5925,12625887,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,lombart,lombart,03/Jan/13 18:20,05/Jan/13 07:41,13/Mar/19 22:19,05/Jan/13 07:41,2.10.3,,,,,,,,,2.10.4,2.11.0,2.9.6,,camel-core,,,,,,0,,,,,,,,,"I am trying to implement a fork/join process where work is read by a single thread, distributed to several parallel threads then joined back to another single thread. I am using Camel SEDA components for interfacing between threads. The single thread at the end must process the messages in the correct order which is why I add a stream resequencer in the route.

I have built a small prototype that works correctly with a small number of messages (1000 messages, 10 threads in parallel). However if I increase the number of messages (10000 messages, 10 threads) I start getting null pointer exceptions:
01:35:49.719 [Camel (camel-1) thread #0 - Resequencer Delivery] WARN  o.a.c.processor.StreamResequencer - Caused by: [java.lang.NullPointerException - null]
java.lang.NullPointerException: null
        at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:42) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:99) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:290) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.processor.StreamResequencer.sendElement(StreamResequencer.java:185) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.processor.StreamResequencer.sendElement(StreamResequencer.java:65) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.processor.resequencer.ResequencerEngine.deliverNext(ResequencerEngine.java:261) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.processor.resequencer.ResequencerEngine.deliver(ResequencerEngine.java:225) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.processor.StreamResequencer$Delivery.run(StreamResequencer.java:242) ~[camel-core-2.10.3.jar:2.10.3]

I have tried adjusting the resequencer time-out and capacity without any result. My CPU is only lightly loaded as there is plenty of sleep in the dummy processor. If anybody could tell me what I am doing wrong I would be very grateful. Here is the complete code of my prototype class:

package camelTest;

import org.apache.camel.CamelContext;
import org.apache.camel.Exchange;
import org.apache.camel.Processor;
import org.apache.camel.ProducerTemplate;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.impl.DefaultCamelContext;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * Simulation of a fork / join parallel processing.
 *
 * Work is created by the main method, distributed (seda:fork) to several
 * parallel workers, joined back to a single queue (seda:join) and resequenced.
 *
 */
public class MainApp {

        private static final Logger LOG = LoggerFactory.getLogger(MainApp.class);
        private static final int NUMBER_OF_MESSAGES = 10000;

        public static void main(String... args) throws Exception {
                CamelContext context = new DefaultCamelContext();
                context.addRoutes(new MyRouteBuilder());
                context.start();

                LOG.info(""Started"");

                ProducerTemplate template = context.createProducerTemplate();
                for (int i = 0; i < NUMBER_OF_MESSAGES; i++) {
                        template.sendBodyAndHeader(""seda:fork"", ""Test Message: "" + i,
                                        ""seqnum"", new Long(i));
                }

                long expectedTime = NUMBER_OF_MESSAGES
                                * (RandomSleepProcessor.MAX_PROCESS_TIME + RandomSleepProcessor.MIN_PROCESS_TIME)
                                / 2 / MyRouteBuilder.CONCURRENCY + MyRouteBuilder.TIMEOUT;
                LOG.info(""Expected time: {}"", expectedTime);
                Thread.sleep(expectedTime);
                LOG.info(""Stopping"");
                context.stop();
                LOG.info(""Stopped"");

        }

        public static class MyRouteBuilder extends RouteBuilder {
                // Number of concurrent processing threads
                public static final int CONCURRENCY = 10;

                // Additional resequencer time-out above theoretical time-out
                public static final long SAFETY_TIMEOUT = 100;

                // Additional resequencer capacity above theoretical capacity
                public static final int SAFETY_CAPACITY = 10;

                // Resequencer time-out
                public static final long TIMEOUT = SAFETY_TIMEOUT
                                + (RandomSleepProcessor.MAX_PROCESS_TIME - RandomSleepProcessor.MIN_PROCESS_TIME);

                // Resequencer capacity
                public static final int CAPACITY = SAFETY_CAPACITY
                                + (int) (CONCURRENCY * TIMEOUT / RandomSleepProcessor.MIN_PROCESS_TIME);

                public void configure() {
                        LOG.info(""Number of processor threads: {}"", CONCURRENCY);
                        LOG.info(""Resequencer time-out: {}"", TIMEOUT);
                        LOG.info(""Resequencer capacity: {}"", CAPACITY);
                        Processor myProcessor = new RandomSleepProcessor();
                        from(""seda:fork?concurrentConsumers="" + CONCURRENCY).process(
                                        myProcessor).to(""seda:join"");
                        from(""seda:join"").resequence(header(""seqnum"")).stream()
                                        .capacity(CAPACITY).timeout(TIMEOUT).to(""mock:result"");
                }

        }

        /**
         * Simulation processor that sleeps a random time between MIN_PROCESS_TIME
         * and MAX_PROCESS_TIME milliseconds.
         *
         */
        public static class RandomSleepProcessor implements Processor {
                public static final long MIN_PROCESS_TIME = 5;
                public static final long MAX_PROCESS_TIME = 50;

                @Override
                public void process(Exchange arg0) throws Exception {
                        long processTime = (long) (MIN_PROCESS_TIME + Math.random()
                                        * (MAX_PROCESS_TIME - MIN_PROCESS_TIME));
                        LOG.debug(""Process time: {}"", processTime);
                        Thread.sleep(processTime);
                }

        }

}

And here is the full log of a run:
01:35:45.632 [main] INFO  camelTest.MainApp - Number of processor threads: 10
01:35:45.635 [main] INFO  camelTest.MainApp - Resequencer time-out: 145
01:35:45.635 [main] INFO  camelTest.MainApp - Resequencer capacity: 300
01:35:45.674 [main] INFO  o.a.camel.impl.DefaultCamelContext - Apache Camel 2.10.3 (CamelContext: camel-1) is starting
01:35:45.733 [main] INFO  o.a.c.m.ManagementStrategyFactory - JMX enabled.
01:35:45.938 [main] INFO  o.a.c.i.c.DefaultTypeConverter - Loaded 172 type converters
01:35:46.333 [main] INFO  o.a.camel.impl.DefaultCamelContext - Route: route1 started and consuming from: Endpoint[seda://fork?concurrentConsumers=10]
01:35:46.348 [main] INFO  o.a.camel.impl.DefaultCamelContext - Route: route2 started and consuming from: Endpoint[seda://join]
01:35:46.348 [main] INFO  o.a.c.m.DefaultManagementLifecycleStrategy - StatisticsLevel at All so enabling load performance statistics
01:35:46.360 [main] INFO  o.a.camel.impl.DefaultCamelContext - Total 2 routes, of which 2 is started.
01:35:46.360 [main] INFO  o.a.camel.impl.DefaultCamelContext - Apache Camel 2.10.3 (CamelContext: camel-1) started in 0.688 seconds
01:35:46.360 [main] INFO  camelTest.MainApp - Started
01:35:48.061 [main] INFO  camelTest.MainApp - Expected time: 27645
01:35:49.719 [Camel (camel-1) thread #0 - Resequencer Delivery] WARN  o.a.c.processor.StreamResequencer - Caused by: [java.lang.NullPointerException - null]
java.lang.NullPointerException: null
        at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:42) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:99) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:290) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.processor.StreamResequencer.sendElement(StreamResequencer.java:185) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.processor.StreamResequencer.sendElement(StreamResequencer.java:65) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.processor.resequencer.ResequencerEngine.deliverNext(ResequencerEngine.java:261) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.processor.resequencer.ResequencerEngine.deliver(ResequencerEngine.java:225) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.processor.StreamResequencer$Delivery.run(StreamResequencer.java:242) ~[camel-core-2.10.3.jar:2.10.3]
01:36:02.994 [Camel (camel-1) thread #0 - Resequencer Delivery] WARN  o.a.c.processor.StreamResequencer - Caused by: [java.lang.NullPointerException - null]
java.lang.NullPointerException: null
        at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:42) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:99) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:290) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.processor.StreamResequencer.sendElement(StreamResequencer.java:185) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.processor.StreamResequencer.sendElement(StreamResequencer.java:65) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.processor.resequencer.ResequencerEngine.deliverNext(ResequencerEngine.java:261) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.processor.resequencer.ResequencerEngine.deliver(ResequencerEngine.java:225) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.processor.StreamResequencer$Delivery.run(StreamResequencer.java:242) ~[camel-core-2.10.3.jar:2.10.3]
01:36:10.913 [Camel (camel-1) thread #0 - Resequencer Delivery] WARN  o.a.c.processor.StreamResequencer - Caused by: [java.lang.NullPointerException - null]
java.lang.NullPointerException: null
        at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:42) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:99) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:290) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.processor.StreamResequencer.sendElement(StreamResequencer.java:185) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.processor.StreamResequencer.sendElement(StreamResequencer.java:65) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.processor.resequencer.ResequencerEngine.deliverNext(ResequencerEngine.java:261) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.processor.resequencer.ResequencerEngine.deliver(ResequencerEngine.java:225) ~[camel-core-2.10.3.jar:2.10.3]
        at org.apache.camel.processor.StreamResequencer$Delivery.run(StreamResequencer.java:242) ~[camel-core-2.10.3.jar:2.10.3]
01:36:15.706 [main] INFO  camelTest.MainApp - Stopping
01:36:15.706 [main] INFO  o.a.camel.impl.DefaultCamelContext - Apache Camel 2.10.3 (CamelContext: camel-1) is shutting down
01:36:15.707 [main] INFO  o.a.c.impl.DefaultShutdownStrategy - Starting to graceful shutdown 2 routes (timeout 300 seconds)
01:36:16.778 [Camel (camel-1) thread #14 - ShutdownTask] INFO  o.a.c.impl.DefaultShutdownStrategy - Route: route2 shutdown complete, was consuming from: Endpoint[seda://join]
01:36:16.779 [Camel (camel-1) thread #14 - ShutdownTask] INFO  o.a.c.impl.DefaultShutdownStrategy - Route: route1 shutdown complete, was consuming from: Endpoint[seda://fork?concurrentConsumers=10]
01:36:16.779 [main] INFO  o.a.c.impl.DefaultShutdownStrategy - Graceful shutdown of 2 routes completed in 1 seconds
01:36:16.784 [main] INFO  o.a.c.i.c.DefaultTypeConverter - TypeConverterRegistry utilization[attempts=264380, hits=264380, misses=0, failures=0] mappings[total=172, misses=0]
01:36:16.786 [main] INFO  o.a.camel.impl.DefaultCamelContext - Apache Camel 2.10.3 (CamelContext: camel-1) is shutdown in 1.079 seconds. Uptime 31.114 seconds.
01:36:16.786 [main] INFO  camelTest.MainApp - Stopped

Vincent ","Ubuntu Linux 12.04 (amd64), openjdk 6 (6b24-1.11.5-0ubuntu1~12.04.1)",,,,,,,,,,,,,,,,,,,,04/Jan/13 16:06;taariql;CAMEL-5925_NullPointerException_in_RouteContextProcessor.patch;https://issues.apache.org/jira/secure/attachment/12563306/CAMEL-5925_NullPointerException_in_RouteContextProcessor.patch,04/Jan/13 16:05;taariql;CAMEL-5925_NullPointerException_in_RouteContextProcessor.patch;https://issues.apache.org/jira/secure/attachment/12563304/CAMEL-5925_NullPointerException_in_RouteContextProcessor.patch,,,,,2.0,,,,,,,,,,,,,,,,,,,2013-01-04 15:52:22.421,,,no_permission,,Unknown,,,,,,,,,,,302468,,,Sat Jan 05 07:41:43 UTC 2013,,,,,,,0|i173dr:,249515,,,,,,,,,04/Jan/13 15:52;taariql;Attaching a possible patch,"04/Jan/13 16:05;taariql;Possible patch, see Nabble http://camel.465427.n5.nabble.com/Fork-join-with-resequencing-td5724727.html

The unit test provided is based on Vincent's main class and demonstrates the issue once every couple of runs, often the test will pass.
With the attached patch the error no longer occurs and the test always passes.
All camel-core tests also pass.

Any other implications? And should the unit of work from line 41 be reused at 49?",04/Jan/13 16:52;davsclaus;Yeah ideally we should use the same UoW in the done logic. ,"05/Jan/13 07:41;davsclaus;Vincent thanks for reporting, and Taariq for the patch.

I fixed some checkstyle errors which you can run as documented here (eg about code formatting, import ordering etc)
http://camel.apache.org/building.html

And as well reuse the UoW in the done as suggested.",,,,,,,,,,,,,,,,,,,,
"Websocket consumer cannot be started, because of NPE",CAMEL-5908,12625137,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,azarny,azarny,23/Dec/12 08:53,29/Dec/12 10:31,13/Mar/19 22:19,25/Dec/12 06:48,2.10.3,,,,,,,,,2.10.4,2.11.0,,,camel-websocket,,,,,,0,,,,,,,,,"Websocket consumer cannot be started for simple route 
        <camel:route>
            <camel:from uri=""websocket://localhost:9998/cnt""/>
            <camel:to uri=""stream:out""/>
        </camel:route>

Root cause:

Websoket component has not serlvet object. 

WebsoketComponent#line:170
// Don't provide a Servlet object as Producer/Consumer will create them later on
connectorRef = new ConnectorRef(server, connector, null);


WebsoketComponent#line:190
if (prodcon instanceof WebsocketConsumer) {
      // connect websocket consumer, to servlet
      connectorRef.servlet.connect((WebsocketConsumer) prodcon);
}


Stack trace is:
Caused by: java.lang.NullPointerException
        at org.apache.camel.component.websocket.WebsocketComponent.connect(WebsocketComponent.java:192)
        at org.apache.camel.component.websocket.WebsocketEndpoint.connect(WebsocketEndpoint.java:90)
        at org.apache.camel.component.websocket.WebsocketConsumer.start(WebsocketConsumer.java:36)
        at org.apache.camel.impl.DefaultCamelContext.startService(DefaultCamelContext.java:1763)
        at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRouteConsumers(DefaultCamelContext.java:2059)
        at org.apache.camel.impl.DefaultCamelContext.doStartRouteConsumers(DefaultCamelContext.java:1995)
        at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:1923)
        at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:1702)
        at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1583)
        at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1444)
        at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:179)
        at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)
        at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1412)
        at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:228)
        at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:118)",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-12-25 06:48:09.085,,,no_permission,,Unknown,,,,,,,,,,,301673,,,Tue Dec 25 06:48:09 UTC 2012,,,,,,,0|i16vfr:,248225,,,,,,,,,25/Dec/12 06:48;njiang;Applied the patch into trunk and 2.10.x branch.,,,,,,,,,,,,,,,,,,,,,,,
Unable to parse CSV if a field has a ' (single quote) at it's begining ,CAMEL-5871,12623687,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,nexus6b,nexus6b,13/Dec/12 08:46,22/Dec/12 15:47,13/Mar/19 22:19,22/Dec/12 15:47,2.10.0,2.11.0,2.8.0,2.9.0,,,,,,2.11.0,,,,camel-bindy,,,,,,0,,,,,,,,,"Bindy is unable to parse correctly a CSV file if a field begin with a ' (single quote).

This case is valid for foreign names/words or french apostrophe:

{code:title=order.csv}
10,A9,Patric,'T jo,ISIN,XD12345678,BUY,Share,2500.45,USD,08-01-2009
{code}",,,,,,,,,,,,,,,,,,,,,13/Dec/12 08:54;nexus6b;camel-bindy-single-quote-start-word-csv-fix.patch;https://issues.apache.org/jira/secure/attachment/12560736/camel-bindy-single-quote-start-word-csv-fix.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-12-13 12:00:26.925,,,no_permission,,Unknown,,,,,,,,,,,297416,,,Sat Dec 22 15:47:02 UTC 2012,,,Patch Available,,,,0|i14oi7:,235435,,,,,,,,,"13/Dec/12 08:54;nexus6b;Patch against the latest trunk.

The bug is due to the quoting characters being hard coded into the unmarshaller and doesn't take the quote char provided via the annotations.

To solve that, we set a default quoting character ('""' double quote) and make it accessible to the unmarshaller. We add a flag for the marshaler to produce or note a quoted csv file with the provided quoted character.","13/Dec/12 12:00;njiang;Hi Antonie,
Thanks for the patch, I just noticed that you ignore the test of BindyUnmarshalCommaIssueTest.testBindyUnmarshalSingleQuoteCommaIssueTwo.  
As this feature break the old behavior, We can just only apply the patch into the trunk.",22/Dec/12 15:47;davsclaus;Cannot backport as it breaks old behavior.,,,,,,,,,,,,,,,,,,,,,
Unexpected behavior when combining onException and multiple adviceWith in camel-core,CAMEL-5887,12624297,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,lleclerc,lleclerc,17/Dec/12 15:13,22/Dec/12 15:34,13/Mar/19 22:19,22/Dec/12 15:34,2.10.3,,,,,,,,,2.10.4,2.11.0,,,camel-core,,,,,,0,,,,,,,,,"Here is the unit test with 3 tests (expected results and the strange behavior) : http://pastebin.com/JUnLFy70

A second adviceWith() on a second route will change the behavior from the first route during an Exception.

adviceWith is only used once per route, as suggested in the recommendation : http://camel.apache.org/advicewith.html
""It is recommended to only advice a given route once (you can of course advice multiple routes). If you do it multiple times, then it may not work as expected, especially when any kind of error handling is involved. The Camel team plan for Camel 3.0 to support this as internal refactorings in the routing engine is needed to support this properly.""",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-12-22 15:34:45.506,,,no_permission,,Unknown,,,,,,,,,,,299070,,,Sat Dec 22 15:34:45 UTC 2012,,,,,,,0|i15ydr:,242870,,,,,,,,,"22/Dec/12 15:34;davsclaus;Thanks for reporting, and providing a test case.",,,,,,,,,,,,,,,,,,,,,,,
camel-netty - Producer should avoid blocking while waiting for connection,CAMEL-5899,12624667,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,19/Dec/12 16:38,20/Dec/12 10:04,13/Mar/19 22:19,20/Dec/12 10:04,2.10.0,,,,,,,,,2.10.4,2.11.0,,,camel-netty,,,,,,0,,,,,,,,,We should at most wait for the connection timeout to trigger.,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,300492,,,2012-12-19 16:38:03.0,,,,,,,0|i168n3:,244532,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Sporadic Source Conversion issues with CxfPayload,CAMEL-5877,12623943,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dkulp,ay,ay,14/Dec/12 12:01,19/Dec/12 19:52,13/Mar/19 22:19,18/Dec/12 21:15,2.10.3,,,,,,,,,2.10.4,,,,camel-cxf,,,,,,0,,,,,,,,,"There is one concrete issue to report and there is an additional point that I would like to bring up.

First, the concrete issue is that CxfEndpoints' findName does not currently handle SAXSource. Consequently, the it fails to find the element name when the payload source is of SAXSource.

This issue can be observed sporadically, as there is a chance the Source could be SAXSource. Because of the nature of this problem explained below, this issue may be observed non-deterministically and consequently it is not often observed.

What is happening is that, when a conversion to CxfPayload is triggered, CxfPayloadConverter's convertTo method arbitrarily picks a converter that can convert the input to Source. The code goes into BaseTypeConverterRegistry and searches for a matching converter in its type mappings' entry set. As this set has no deterministic ordering and there are several matching converters, an arbitrary converter is picked up. THe chance of getting the SAXSource converter is small but not zero. Therefore, when this happens, CxfEndpoint's findName is not finding the element name as there is no handling for SAXSource. Interestingly, the DOMSource converter is the most frequently picked converter, followed by the StaxSource converter.

So, SAXSource handling needs to be added in CXFEndpoint's findName method.

The second point is about the preferred Source held in CxfPayload. I think for jdk 1.6 or above, StAXSource could be the preferred source. In that case, we can use the StAXSource converter instead of arbitrarily picking one of the Source converters. We can adjust CxfPayloadConverter's convertTo method to look up for the StAXSource converter first.

I am attaching a proposed patch (the correction for the first issue and the suggestion regarding the second point, assuming StAXSource is preferred.). Could you review it and comment on it?

Thanks.

Regards, aki


",,,,,,,,,,,,,,,,,,,,,14/Dec/12 12:02;ay;camel-cxf-payload-source-20121214.patch;https://issues.apache.org/jira/secure/attachment/12560958/camel-cxf-payload-source-20121214.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-12-18 21:15:54.718,,,no_permission,,Unknown,,,,,,,,,,,297842,,,Wed Dec 19 19:52:46 UTC 2012,,,Patch Available,,,,0|i14vkf:,236579,,,,,,,,,14/Dec/12 12:02;ay;from trunk,"18/Dec/12 21:15;dkulp;
I've done some heavy modifications to the patch and committed a fix.  For the most part, if the incoming object/message is in a form that we can directly create a Source for it, I did that to avoid any of the ""magic"".   For some things (like xalan or Saxon) that may prefer a StreamSource, the may allow it to remain as a StreamSource.  If it's already a DOM, it can use a DOMSource as well.  Can you give that a look and see if that works better for your use case?","19/Dec/12 19:52;ay;Hi Dan,
it looks very good.
thanks.
regards, aki
",,,,,,,,,,,,,,,,,,,,,
Nullcheck missing in CxfPayloadConverter,CAMEL-5897,12624503,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,raulvk,raulvk,raulvk,18/Dec/12 17:58,18/Dec/12 21:20,13/Mar/19 22:19,18/Dec/12 21:20,2.10.3,,,,,,,,,2.10.4,2.9.6,,,camel-cxf,,,,,,0,,,,,,,,,"There's a null-check missing in CxfPayloadConverter which triggers a NPE if the payload is the result from a SOAP Fault, in which case the CxfPayload object contains no body sources at all.

Stack trace, in this case what triggers type converters is Stream Caching, but it could happen in other cases where the FallbackConverter is utilized.

{code}
Exception in thread ""default-workqueue-3"" org.apache.camel.TypeConversionException: Error during type conversion from type: org.apache.camel.component.cxf.CxfPayload to the required type: org.apache.camel.StreamCache with value org.apache.camel.component.cxf.CxfPayload headers: []body: null due java.lang.NullPointerException
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:126)
	at org.apache.camel.core.osgi.OsgiTypeConverter.convertTo(OsgiTypeConverter.java:102)
	at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:72)
	at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:47)
	at org.apache.camel.processor.interceptor.StreamCachingInterceptor.process(StreamCachingInterceptor.java:46)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303)
[...]
        at org.apache.camel.component.cxf.CxfClientCallback.handleException(CxfClientCallback.java:82)
	at org.apache.cxf.interceptor.ClientOutFaultObserver.onMessage(ClientOutFaultObserver.java:59)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream$1.run(HTTPConduit.java:1540)
	at org.apache.cxf.workqueue.AutomaticWorkQueueImpl$3.run(AutomaticWorkQueueImpl.java:426)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at org.apache.cxf.workqueue.AutomaticWorkQueueImpl$AWQThreadFactory$1.run(AutomaticWorkQueueImpl.java:351)
	at java.lang.Thread.run(Thread.java:680)
Caused by: org.apache.camel.RuntimeCamelException: java.lang.NullPointerException
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1271)
	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:927)
	at org.apache.camel.impl.converter.StaticMethodFallbackTypeConverter.convertTo(StaticMethodFallbackTypeConverter.java:50)
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:289)
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:111)
	... 56 more
Caused by: java.lang.NullPointerException
	at org.apache.camel.component.cxf.converter.CxfPayloadConverter.convertTo(CxfPayloadConverter.java:150)
	at sun.reflect.GeneratedMethodAccessor191.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:923)
	... 59 more
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,300324,,,Tue Dec 18 18:06:30 UTC 2012,,,,,,,0|i1677z:,244302,,,,,,,,,"18/Dec/12 18:06;raulvk;The bug was not introduced in r1376523 as suggested initially, it was there before.",,,,,,,,,,,,,,,,,,,,,,,
Pass Exchange param to TypeConverter.convertTo calls where possible,CAMEL-5866,12623521,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,raulvk,raulvk,raulvk,12/Dec/12 10:44,18/Dec/12 00:15,13/Mar/19 22:19,18/Dec/12 00:14,2.10.3,,,,,,,,,2.10.4,2.11.0,2.9.6,,camel-core,,,,,,0,,,,,,,,,"Where the Exchange object is available, pass it to TypeConverter.convertTo.

Currently, when Camel happens to pick a Type Converter requiring the Exchange, conversion may fail (as there's no check for this situation).

See CAMEL-5864 as an example.",,,,,,,,,,,,,,,,CAMEL-5864,CAMEL-5860,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,297230,,,2012-12-12 10:44:54.0,,,,,,,0|i14n8f:,235229,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Pre-XSLT and Validator Type Conversions from byte[] may easily fail,CAMEL-5864,12623403,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,raulvk,raulvk,11/Dec/12 16:08,18/Dec/12 00:15,13/Mar/19 22:19,12/Dec/12 06:19,2.10.3,,,,,,,,,2.10.4,2.11.0,2.9.6,,camel-core,camel-xslt,,,,,0,,,,,,,,,"XsltBuilder.getSource(Exchange e, Object o) tries to convert the payload to a Source. 

If you have a byte[] payload, then the following type converter will likely be picked:

{code}
InstanceMethodTypeConverter: public javax.xml.transform.sax.SAXSource 
org.apache.camel.converter.jaxp.XmlConverter.toSAXSource(byte[],org.apache.camel.Exchange) 
throws java.io.IOException,org.xml.sax.SAXException,javax.xml.transform.TransformerException
{code}

This type converter requires the Exchange (InstanceMethodTypeConverter.useExchange == true), but line 461 of XsltBuilder doesn't pass it on.

Therefore, a NullPointerException happens because the conversion method tries to access the Exchange.",,,,,,,,,,,,,,,,CAMEL-5860,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-12-12 06:19:15.81,,,no_permission,,Unknown,,,,,,,,,,,297100,,,Wed Dec 12 06:19:15 UTC 2012,,,,,,,0|i14ldj:,234927,Regression,,,,,,,,"12/Dec/12 06:19;njiang;Applied the patch into trunk, camel-2.10.x and camel-2.9.x branches.",,,,,,,,,,,,,,,,,,,,,,,
AdviceWith not working with weaveFirst/weaveLast because of delayed camelContext start due to using isUseAdviceWith.,CAMEL-5875,12623830,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,lleclerc,lleclerc,13/Dec/12 21:13,17/Dec/12 14:49,13/Mar/19 22:19,14/Dec/12 10:04,2.10.3,,,,,,,,,2.10.4,2.11.0,2.9.6,,camel-core,,,,,,0,,,,,,,,,"It is the second bug I found related to AdviceWith, we might want to copy/paste all the test, to make sure AdviceWith can be used before the CamelContext is started with all it's functionality.

http://camel.465427.n5.nabble.com/Bug-AdviceWith-not-working-with-weaveAddFirst-weaveAddLast-td5724054.html",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-12-14 10:04:00.597,,,no_permission,,Unknown,,,,,,,,,,,297550,,,Mon Dec 17 14:49:10 UTC 2012,,,,,,,0|i14rbz:,235893,,,,,,,,,"14/Dec/12 10:04;njiang;Applied patch into trunk, camel-2.10.x and camel-2.9.x branches.","17/Dec/12 14:49;lleclerc;I confirm that it works in 2.10.4-SNAPSHOT.
Thanks!",,,,,,,,,,,,,,,,,,,,,,
camel-jetty - Always creates a default http client even if not needed,CAMEL-5867,12623551,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,12/Dec/12 13:58,15/Dec/12 13:37,13/Mar/19 22:19,15/Dec/12 13:37,2.10.0,,,,,,,,,2.10.4,2.11.0,2.9.6,,camel-jetty,,,,,,0,,,,,,,,,"The jetty component creates a default jetty http client, even if its not needed.
",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,297261,,,2012-12-12 13:58:09.0,,,,,,,0|i14nfz:,235263,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
adviceWith() just needs to start the route when the camel context is started,CAMEL-5854,12622875,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,07/Dec/12 08:01,13/Dec/12 15:04,13/Mar/19 22:19,13/Dec/12 15:04,2.10.3,2.9.5,,,,,,,,2.10.4,2.11.0,2.9.6,,camel-core,,,,,,0,,,,,,,,,"An user complains the adviceWith doesn't work well with the camel-http4 component[1].
After digging the code a while, I found the NPE is thrown because the camel-http4 endpoint is created before camel-http4 component is started. It is caused by the adviceWith() try to start the route after it finished the work. 

We need to make sure the adviceWith doesn't start the route when the camel context is not started yet to avoid the NPE.

[1]http://camel.465427.n5.nabble.com/Test-Intercept-with-adviceWith-and-http-td5723473.html",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-12-07 08:06:53.931,,,no_permission,,Unknown,,,,,,,,,,,296449,,,Thu Dec 13 15:04:56 UTC 2012,,,,,,,0|i149gv:,232997,,,,,,,,,"07/Dec/12 08:06;davsclaus;See the green box at
http://camel.apache.org/advicewith.html

This is the practice ppl should follow.","13/Dec/12 15:04;njiang;Applied the patch into trunk, camel-2.10.x and camel-2.9.x.",,,,,,,,,,,,,,,,,,,,,,
CxfConsumer should not populate the cxf response with the original input message if the cxfExchange is oneway,CAMEL-5823,12617599,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,ay,ay,26/Nov/12 12:34,29/Nov/12 11:07,13/Mar/19 22:19,29/Nov/12 11:07,2.10.2,,,,,,,,,2.10.3,2.11.0,2.9.5,,camel-cxf,,,,,,0,,,,,,,,,"When you have a camel route from a CXF oneway endpoint to some endpoint, cxfConsumer currently uses the input message to fill the cxf's response message at the cxf endpoint. This can lead to a problem in CXF as there can be an exception raised during this step.

To avoid this issue, I think we should not fill the cxf response if the cxf's exchange is set to oneway.

I have attached a test case and a possible fix for this issue.

There is also one question regarding this part of the processing in CxfConsumer. I noticed that there are no exception handling in that part in camel and therefore the exception is not visible in camel. I was not sure if this was intentional or if we should be setting the exception to camel's exchange in that case so that this exception is also picked up by camel.

",,,,,,,,,,,,,,,,,,,,,26/Nov/12 12:51;ay;camel-cxf-oneway-route-20121126.patch;https://issues.apache.org/jira/secure/attachment/12554844/camel-cxf-oneway-route-20121126.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-11-27 08:42:36.06,,,no_permission,,Unknown,,,,,,,,,,,292102,,,Tue Nov 27 12:46:22 UTC 2012,,,Patch Available,,,,0|i0rrsv:,160148,,,,,,,,,26/Nov/12 12:51;ay;from trunk,"27/Nov/12 08:42;njiang;This issue is introduced by the fix of CAMEL-5810. Thanks for the Aki quick patch.

For the exception handling on the CxfConsumer side, we don't intend to let CxfConsumer to do further work.
As the exception is came from camel processor chain which should be handled by the camel error handler.
In this Cxf Consumer just need to marshal the exception to the client side.","27/Nov/12 10:16;ay;Hi Willem,
Thanks for the quick update.

I thought the issue was indirectly related to CAMEL-4030, which earlier caused another issue CAMEL-4452.

But regarding these two old issues, I am fine with the current model of the inonly processing to stick to the in-message, which, I originally thought at the time of CAMEL-4452, could lead to confusion at the cxf consumer and therefore should provide an option to override this behavior.

regards, aki","27/Nov/12 12:46;njiang;After revisit the issues I think you new patch makes things clear.
BTW, I just commit the patch into trunk and merged them back to camel-2.10.x and camel-2.9.x branches.",,,,,,,,,,,,,,,,,,,,
Apache Camel 2.9 Splitter with tokenize dont work with namespaces,CAMEL-5826,12617792,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,rnewcomb,shrishs,shrishs,27/Nov/12 14:05,29/Nov/12 11:06,13/Mar/19 22:19,29/Nov/12 11:06,2.9.0,,,,,,,,,2.10.3,2.11.0,2.9.5,,camel-core,,,,,,0,,,,,,,,,"when trying to tokenize a stream having namespaces, no tokens are produced with inheritNamespaceTagName property.

-------------------------------------------------------------------

<route id=""hrp.connectorsCtxt.sddRcvFile2"">
<from
                           uri=""file:C:\Temp\esb\sdd\in?recursive=true&amp;preMove=.processing&amp;move=../.processed"" />
                    <camel:split streaming=""true"">
                           <tokenize token=""suiviDemande"" inheritNamespaceTagName=""suivisDemandes"" xml=""true""/>
                           <log message=""${header.CamelSplitIndex} : ${in.body}"" />
                    </camel:split>
             </route>

-------------------------------------------------------------------
",Windows,,,,,,,,,,,,,,,,,,,,28/Nov/12 10:18;rnewcomb;CAMEL-5826.patch;https://issues.apache.org/jira/secure/attachment/12555146/CAMEL-5826.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-11-28 10:18:22.424,,,no_permission,,Unknown,,,,,,,,,,,292355,,,Thu Nov 29 11:06:17 UTC 2012,,,Patch Available,,,,0|i0rxen:,161056,,,,,,,,,"28/Nov/12 10:18;rnewcomb;The attached patch provides a solution for the issue that was reported on this ticket.  The XML Tokenizer was not parsing nodes that have namespace prefixes.  This was true for the ""inherit namespaces"" node as well as all explicitly-prefixed nodes that would otherwise match a non-prefixed token tag.  The issue occurs primarily when non-prefixed node names are configured on a tokenizer that is used to parse XML documents containing fully-qualified nodes.

The patch addresses this issue by matching node names for the configured token and the namespace provider without respect to the prefix value.  This loose-matching behavior occurs unless an explicit prefix value is specified.  The explicit namespace value will still be used for matching if it is provided.

It should be noted that this treatment of XML namespaces is a little loose.  Issues can occur if two different elements (in different namespaces) share a non-qualified name that matches the token tag.  Also, the use of explicit namespace prefixes (e.g. ns1,  ns2, etc.) is only beneficial if all documents that will be parsed by the tokenizer use the exact same namespace prefix values. 

It may be possible to expand the tokenizer to include more robust namespace matching.  For example, explicit namespace values could be specified as part of the tokenizer configuration, and logic could be written to match parsed nodes against those values.   I will be happy to investigate that route if there is interest.

I will update documentation, etc as appropriate once this patch is committed.","28/Nov/12 17:23;davsclaus;Yes Rich is right. The streaming based tokenizer is not a full solution for all namespace combos that you can throw at it. There is some other solution that supports that, such as camel-stax, camel-vtdxml, or god forbid the xpath from the JDK (though it loads it all in memory).

Anyway thanks to Rich we have a patch that should fix your use-case as well.

Rich fell free to work on the docs.",29/Nov/12 11:06;davsclaus;Marking this as fixed so Hadrian wont stop cutting a release because its listed as unresolved. The doc update is most likely only to add something to release notes etc.,,,,,,,,,,,,,,,,,,,,,
NullPointerException in DefaultCamelContext::stopRouteService,CAMEL-5830,12617943,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,kramer,kramer,28/Nov/12 08:17,28/Nov/12 17:17,13/Mar/19 22:19,28/Nov/12 17:17,2.10.2,,,,,,,,,2.10.3,2.11.0,2.9.5,,camel-core,,,,,,0,,,,,,,,,"When an exception occures during the startup of a route Route::getConsumer() might return null.
During the shutdown of this route the logging in DefaultCamelContext::stopRouteService yields to a NullPointerException:

log.info(""Route: "" + route.getId() + "" stopped, was consuming from: "" + route.getConsumer().getEndpoint())","Debian Squeeze, Java 1.6.0_26, Apache Camel 2.10.2",,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Novice,,,,,,,,,,,292526,,,2012-11-28 08:17:44.0,,,,,,,0|i0s3fz:,162034,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Splitter does not allow errorhandler to handle exception in the splitter-expression,CAMEL-5818,12617435,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,chris889,chris889,23/Nov/12 13:56,25/Nov/12 10:58,13/Mar/19 22:19,25/Nov/12 10:58,2.10.0,2.10.1,2.10.2,2.9.4,,,,,,2.10.3,2.11.0,2.9.5,,camel-core,,,,,,0,,,,,,,,,"This might relate to CAMEL-5024


The following route works ok in camel 2.9.3 
{code}

from(""direct:sampleUri"")
  .errorHandler(deadLetterChannel(""direct:errorhandler"").disableRedelivery())
  .multicast()
    .stopOnException()
    .split(simple(""${body.list}""))
      .streaming()
      .stopOnException()
      .process(new Processor() {
        @Override
	public void process(Exchange exchange) throws Exception {

	
	}
	
     }).end()
    .end()
    .to(""direct:somewhere_else_1"")
    .to(""direct:somewhere_else_2"")
.end();
{code}

-> if an exception is thrown by body.list the errorhandler kicks in and the
message is handled by ""direct:errorhandler"". Since 2.9.4 (and also with the latest version, 2.10.2) the errorhandler is no longer
active.",,,,,,,,,,,,,,CAMEL-5024,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-11-24 18:28:30.494,,,no_permission,,Unknown,,,,,,,,,,,291876,,,Sun Nov 25 10:58:27 UTC 2012,,,,,,,0|i0rh93:,158438,,,,,,,,,"24/Nov/12 18:28;davsclaus;I think I have fixed the side effects from CAMEL-5024, can you try with SNAPSHOT code?",25/Nov/12 10:58;davsclaus;This works now again.,,,,,,,,,,,,,,,,,,,,,,
EventNotifiers don't work under Blueprint,CAMEL-5299,12556894,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,raulvk,raulvk,22/May/12 18:11,23/Nov/12 21:22,13/Mar/19 22:19,23/May/12 15:56,2.9.2,,,,,,,,,2.10.0,2.9.3,,,camel-blueprint,camel-core,,,,,0,blueprint,events,,,,,,,"EventNotifiers don't work with Blueprint Camel Contexts. Testing on latest 2.10-SNAPSHOT, updated on 22 May 16:45 GMT.

After some debugging, it looks like the bean lookup performed on line 202 of {{AbstractCamelContextFactoryBean.afterPropertiesSet()}} triggers the initialization of the CamelContext as part of the lookup. 

As part of the init, all services are started, including the ManagementContext and its EventNotifiers (which we were just looking up).

EventNotifiers are then added but never started because they came in late.",,,,,,,,,,,,,SMX4-1281,SMX4-1281,,,,,,,22/May/12 18:13;raulvk;blueprint-eventnotifier-bug.xml;https://issues.apache.org/jira/secure/attachment/12528628/blueprint-eventnotifier-bug.xml,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-05-23 10:17:49.109,,,no_permission,,Unknown,,,,,,,,,,,241172,,,Wed May 23 11:26:39 UTC 2012,,,,,,,0|i0268f:,10611,,,,,,,,,22/May/12 18:13;raulvk;Attaching a test Blueprint file.,"23/May/12 10:17;davsclaus;Its the PublishEventNotifier that seems to cause this catch-22 issue.

If you use LoggingEventNotifier instead then it works fine.","23/May/12 10:45;davsclaus;The issue is if the bean implements CamelContextAware, when then triggers a catch-22 situation.",23/May/12 11:26;raulvk;It only happens with Blueprint DSL though; I was unable to reproduce in Spring DSL.,,,,,,,,,,,,,,,,,,,,
Streaming splitter ignores exception handling,CAMEL-5024,12543482,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,rludvig,rludvig,21/Feb/12 13:22,23/Nov/12 13:59,13/Mar/19 22:19,22/Feb/12 03:39,2.8.3,2.8.4,2.9.0,,,,,,,2.10.0,2.8.5,2.9.1,,camel-core,,,,,,0,,,,,,,,,"If an exception occurs on the next() call of an Iterator in a streaming splitter, the exception is never propagated to the exception or the error handler. This will lead to improper route termination, and inifite rollback/retry cycles.

I attached the minimal test case demonstrating the issue.","Ubuntu Linux
Java version ""1.6.0_24""",,,,,,,,,,,,,,,CAMEL-5681,,,,,21/Feb/12 13:24;rludvig;SplitExceptionHandlingTest.java;https://issues.apache.org/jira/secure/attachment/12515355/SplitExceptionHandlingTest.java,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-02-22 03:39:05.39,,,no_permission,,Unknown,,,,,,,,,,,228728,,,Wed Feb 22 03:39:05 UTC 2012,,,,,,,0|i024j3:,10335,,,,,,,,,"22/Feb/12 03:39;njiang;Applied patch into trunk, camel-2.9.x and camel-2.8.x branches.",,,,,,,,,,,,,,,,,,,,,,,
Camel stream makes Karaf console hang,CAMEL-5426,12597762,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,chris@die-schneider.net,chris@die-schneider.net,06/Jul/12 12:36,23/Nov/12 08:49,13/Mar/19 22:19,23/Nov/12 08:49,2.10.0,,,,,,,,,2.10.3,2.11.0,2.9.5,,camel-stream,,,,,,0,,,,,,,,,"features:chooseurl camel 2.10.0
features:install camel-blueprint camel-stream

Deploy the following file into the deploy folder
https://github.com/cschneider/Karaf-Tutorial/blob/master/camel/simple-blueprint/simple-camel-blueprint.xml
Undeploy the file again

Now the karaf shell hangs

@Hadrian
I think this may be caused by as the issue does not happen with camel 2.9.1
https://fisheye6.atlassian.com/changelog/camel?cs=1339933

Could you take a look at it?
",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-11-23 08:49:10.12,,,no_permission,,Unknown,,,,,,,,,,,241299,,,Fri Nov 23 08:49:10 UTC 2012,,,,,,,0|i0270n:,10738,,,,,,,,,"23/Nov/12 08:49;davsclaus;Fixing this as I am looking at the unresolved bugs, and this was fairly easy to fix.",,,,,,,,,,,,,,,,,,,,,,,
CXF + Code first + No recipient list + doCatch = route returns null,CAMEL-5810,12616943,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,maxence.dewil,maxence.dewil,20/Nov/12 14:28,22/Nov/12 09:53,13/Mar/19 22:19,22/Nov/12 05:55,2.10.2,,,,,,,,,2.10.3,2.11.0,2.9.5,,,,,,,,0,,,,,,,,,"See this topic for the description: 
http://camel.465427.n5.nabble.com/doCatch-returns-null-td5722851.html",,,,,,,,,,,,,,,,,,,,,20/Nov/12 14:35;maxence.dewil;codefirst-webservice-try-catch.zip;https://issues.apache.org/jira/secure/attachment/12554347/codefirst-webservice-try-catch.zip,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-11-22 05:55:12.616,,,no_permission,,Unknown,,,,,,,,,,,258833,,,Thu Nov 22 09:53:19 UTC 2012,,,,,,,0|i0l4of:,121408,,,,,,,,,"20/Nov/12 14:35;maxence.dewil;The problem is reproduced in the attached Maven project.

How to reproduce:
1. Do a mvn package to generate the war.
2. Deploy the war on a servlet container (ex: Tomcat on port 8083)
3. Open src\test\soapUI\MyWebService-soapui-project.xml in soapUI","20/Nov/12 14:41;maxence.dewil;Workarounds:

1. Use the 'recipientList' idiom as describred in the doc : http://camel.apache.org/cxf-tomcat-example.html .
2. Move the logic outside of the doTry/doCatch statements.","22/Nov/12 05:55;njiang;Applied the patch into trunk, camel-2.10.x and camel-2.9.x branches.",22/Nov/12 09:53;maxence.dewil;That was quick! Thank you!,,,,,,,,,,,,,,,,,,,,
The combination of the transacted DSL together with the <setHeader> or <setBody> prohibits to resolve the properties properly.,CAMEL-5796,12616415,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,bvahdat,bvahdat,bvahdat,16/Nov/12 14:52,18/Nov/12 19:11,13/Mar/19 22:19,18/Nov/12 19:11,2.10.2,,,,,,,,,2.10.3,2.11.0,2.9.5,,camel-core,,,,,,0,,,,,,,,,"Given the property {{myKey}} defined as:
{code}
myKey=myValue
{code}

Then consider the following trivial route:
{code:xml}
<route>
  <from uri=""activemq:queue:okay"" />
    <transacted />
    <setHeader headerName=""myHeader"">
      <constant>{{myKey}}</constant>
    </setHeader>
  <to uri=""mock:test"" />
</route>
{code}

Because of the usage of the {{transacted}} DSL the property placeholder {{{{myKey}}}} will not be resolved to {{myValue}} properly. This behaviour would disappear if you would remove the {{transacted}} DSL. And I'm observing the same behaviour using the {{setBody}} DSL as well.
",,,,,,,,,,,,,,,,,,,,,18/Nov/12 12:42;davsclaus;CAMEL-5796-fix.patch;https://issues.apache.org/jira/secure/attachment/12554063/CAMEL-5796-fix.patch,18/Nov/12 12:00;bvahdat;CAMEL-5796.patch;https://issues.apache.org/jira/secure/attachment/12554061/CAMEL-5796.patch,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-11-18 12:42:10.216,,,no_permission,,Unknown,,,,,,,,,,,258196,,,Sun Nov 18 19:11:20 UTC 2012,,,,,,,0|i0knp3:,118656,,,,,,,,,16/Nov/12 18:08;bvahdat;Tried this through all the 2.10.x as well as the 2.9.x releases and it doesn't work. So concluding no regression being broken.,"18/Nov/12 12:00;bvahdat;Attaching a potential patch which would resolve this (including unit-test).

Would appreciate any feedback the experienced riders would give about this.

Right now with this patch in place on my workspace I'm running a full build to verify no potential side-effect.","18/Nov/12 12:42;davsclaus;The patch is a good attempt in the correct file to fix this issue. Though as you have noticed it worked fine without the transacted policy.

The issue is that when you use transacted/policy, it wraps the outputs, and then its a bit different logic that creates the child processors, than if the transacted was not there. And that part of the code was missing logic that pre-prepares the definitions before the processors is created.

I am attaching a better patch with this fix.

Also we can have unit test in camel-core, as you can use policy instead of transacted. They are the same.","18/Nov/12 15:19;davsclaus;Babak, I suggest you mix our patches. So its the fix from my patch in the core, and then add your additional unit tests as well. Then we have the optional fix for this.",18/Nov/12 15:19;davsclaus;The workaround is to use <simple>${properties:myKey}</simple> instead.,"18/Nov/12 16:06;bvahdat;O.K. thanks for your support. :-)

Just give me please a bit time then I'll commit the fix and close this ticket (hopefully tomorrow).
","18/Nov/12 19:11;bvahdat;Still added another test using the bridgePropertyPlaceholder Camel Bean to make sure this variant would work as well, but only applied on the trunk & the 2.10.x branch (available since 2.10.0). Thanks to Claus for providing a better patch.  ",,,,,,,,,,,,,,,,,
.camelLock is deleted by another camel instance,CAMEL-5776,12615168,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,dave.larsson,dave.larsson,07/Nov/12 15:25,16/Nov/12 15:19,13/Mar/19 22:19,16/Nov/12 15:19,2.10.2,,,,,,,,,2.10.3,2.11.0,2.9.5,,camel-core,,,,,,0,,,,,,,,,"When camel file component tries to aquire a readLock, e.g. readLock=changed, and a camelLock already exists (aquired by another camel instance), the method MarkerFileExclusiveReadLockStrategy.acquireExclusiveReadLock fails (correct).

Then in GenericFileConsumer.processExchange, row 291 processStrategy.abort is called. That will delete the camelLock which another camel instance owns.

I don't know if abort should call exclusiveReadLockStrategy.releaseExclusiveReadLock() or if we have to remember if we own the lock or not.

",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-11-08 06:15:19.944,,,no_permission,,Unknown,,,,,,,,,,,255764,,,Fri Nov 16 15:19:42 UTC 2012,,,,,,,0|i0fup3:,90571,,,,,,,,,"08/Nov/12 06:15;njiang;Hi David
It should be easy for the MarkerFileExclusiveReadLockStrategy to remember it has the lock or not by adding header to tell if it has to lock or not.
Now my question is how did you hit this kind of issue, it could be helpful for me to wrote a test for it.

Willem","08/Nov/12 13:16;dave.larsson;I noticed this when I created the lock file manually and had trace logging on. I saw that camel deleted the lock file and then consumed the file in the next polling...

I think the test could be built like this:

1) Create a lock file (/files/test.camelLock)
2) Create a file (/files/test)
3) Start camel file consumer
4) Check that camel doesn't delete lock file when polling files directory (this fails for camel 2.10.2 but works for camel 2.8.3)
5) Remove lock file
6) Make sure file is consumed on next polling

Regards David","16/Nov/12 15:19;njiang;Applied the patch into trunk, camel-2.10.x and camel-2.9.x branches.",,,,,,,,,,,,,,,,,,,,,
camel-jms consumer doesn't send back a reply in all cases,CAMEL-5464,12599998,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,raulvk,raulvk,24/Jul/12 13:01,07/Nov/12 10:30,13/Mar/19 22:19,07/Nov/12 10:30,2.10.0,2.8.6,2.9.2,,,,,,,2.10.3,2.11.0,2.9.5,,camel-activemq,camel-jms,,,,,0,,,,,,,,,"In a very simple route consuming from a Camel JMS endpoint receiving InOut exchanges (i.e. JMSReplyTo header present), the endpoint will not send back replies.

This happens because Camel JMS only returns a reply if the OUT message is set. But if the route looks like: consumer => processor, and Camel doesn't find the need to ""weave in"" an implicit Pipeline processor, no one will implicitly take care of mapping the IN message to an OUT message (unless the user knows about these internal aspects - but we shouldn't expect them too).

As a result, these routes DON'T WORK...

{code}
<route>
   <from uri=""timer:foo?fixedRate=true&amp;period=10000"" />
   <setBody><constant>Hello Raul</constant></setBody>
   <to uri=""log:SendingRequest?showAll=true"" />
   <inOut uri=""activemq:queue:test1?requestTimeout=1000"" />
   <to uri=""log:ReceivedReply?showAll=true"" />
</route>
        
<route>
   <from uri=""activemq:queue:test1"" />
   <to uri=""log:ReceivedRequest?showAll=true"" />
</route>
{code}

... but just by adding an additional log endpoint to the second route (or any other thing, for that matter), it starts to work because Camel weaves in the Pipeline processor.

Other workarounds that work:
* -explicitly wrapping the log endpoint in a <pipeline> DSL-
* <setBody><simple>${in.body}</simple></setBody>

Or simply introducing anything that will force Camel to insert a Pipeline processor.

IMHO, there are two solutions to avoid this issue:
# Always weave in a Pipeline processor (adds overhead in simple routes and may cause regressions)
# Adapt EndpointMessageListener to pick the IN message when the exchange is out capable and expectation of a reply exists

I'm happy to work on a patch for Camel 2.10.1.

*EDIT:* Just wrapping the single endpoint in <pipeline /> doesn't function as a workaround.",,,,,,,,,,,,,,,,,,,,,28/Aug/12 02:21;jwcarman;CAMEL-5464.patch;https://issues.apache.org/jira/secure/attachment/12542712/CAMEL-5464.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-08-13 11:31:10.556,,,no_permission,,Unknown,,,,,,,,,,,241336,,,Wed Nov 07 10:30:32 UTC 2012,,,,,,,0|i0278v:,10775,,,,,,,,,"13/Aug/12 11:31;davsclaus;Yes #2 should be the case, as that is how the other components would have to do, eg cxf consumer etc.

",28/Aug/12 02:21;jwcarman;Here's a patch that implements option #2.  Let me know if you see any regressions.  I can't get the full Maven build working on my computer right now.,"31/Aug/12 07:56;njiang;The patch broke some tests of the camel-jms. After digging the tests, I found the tests keep the out message null to no send the response back. It can be fixed easily by changing the MEP to InOnly.
As this feature break the backward compatibility, I don't plan to merge the patch back to other branch. ",31/Aug/12 08:27;njiang;Applied patch with thanks to James.,"31/Aug/12 13:40;jwcarman;Okay, cool!  Sorry about the regression.  I was (and still am) having a terrible time getting the build to run locally on my machine.  I'll keep tinkering.  This is my first Mac laptop, so getting used to Java development on here is somewhat of a chore.  Perhaps I'll just switch to a VM or something

Are we going to update the fix versions/status?","10/Sep/12 14:20;njiang;Applied the patch into trunk, as it breaks the behavior of old Camel version, I don't want to port it back to other branches.","07/Nov/12 09:40;davsclaus;I think this fix is more important, than those odd unit-tests that was needed to change.

If you do request/reply over JMS, then you would expect Camel to send back the reply always - also if the route, only do a single step like
from JMS
  to bean

So I am working on backporting this to older branches.",07/Nov/12 10:30;davsclaus;Backported to 2.10 and 2.9 branches.,,,,,,,,,,,,,,,,
camel-twitter streaming consumer broken,CAMEL-5773,12614905,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,3riverdev,3riverdev,06/Nov/12 06:19,06/Nov/12 08:00,13/Mar/19 22:19,06/Nov/12 08:00,2.10.1,,,,,,,,,2.10.3,2.11.0,,,camel-twitter,,,,,,0,,,,,,,,,CAMEL-5529 was an incomplete fix and broke the streaming consumer.  Patch attached.,,,,,,,,,,,,,,,,,,,,,06/Nov/12 06:20;3riverdev;CAMEL-5773.patch;https://issues.apache.org/jira/secure/attachment/12552217/CAMEL-5773.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-11-06 08:00:51.25,,,no_permission,,Unknown,,,,,,,,,,,255417,,,Tue Nov 06 08:00:51 UTC 2012,,,Patch Available,,,,0|i0ert3:,84267,,,,,,,,,06/Nov/12 08:00;davsclaus;Thanks for the patch.,,,,,,,,,,,,,,,,,,,,,,,
Configuring jetty component with a different name dont work with jetty consumer,CAMEL-5766,12614499,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,02/Nov/12 11:40,02/Nov/12 12:10,13/Mar/19 22:19,02/Nov/12 12:10,2.10.0,2.9.0,,,,,,,,2.10.3,2.11.0,2.9.5,,camel-jetty,,,,,,0,,,,,,,,,"For example if you do
{code}
		<route>
			<from uri=""jetty2:http://localhost:9090/myapp""/>
			<transform>
				<simple>Hello ${body}</simple>
			</transform>
		</route>
{code}

Then it fails with
{code}
java.net.SocketException: Unresolved address
	at sun.nio.ch.Net.translateToSocketException(Net.java:58)
	at sun.nio.ch.Net.translateException(Net.java:84)
	at sun.nio.ch.Net.translateException(Net.java:90)
	at sun.nio.ch.ServerSocketAdaptor.bind(ServerSocketAdaptor.java:61)
	at org.eclipse.jetty.server.nio.SelectChannelConnector.open(SelectChannelConnector.java:187)
	at org.eclipse.jetty.server.AbstractConnector.doStart(AbstractConnector.java:316)
	at org.eclipse.jetty.server.nio.SelectChannelConnector.doStart(SelectChannelConnector.java:265)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.Server.doStart(Server.java:286)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.apache.camel.component.jetty.JettyHttpComponent.connect(JettyHttpComponent.java:315)
	at org.apache.camel.component.http.HttpEndpoint.connect(HttpEndpoint.java:149)
	at org.apache.camel.component.http.HttpConsumer.doStart(HttpConsumer.java:56)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)
...
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,253974,,,Fri Nov 02 11:56:14 UTC 2012,,,,,,,0|i0edrz:,81994,,,,,,,,,02/Nov/12 11:56;davsclaus;Caused by CAMEL-4425,,,,,,,,,,,,,,,,,,,,,,,
camel-cdi - Adding duplicate route builder beans to internal list,CAMEL-5741,12613280,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,24/Oct/12 13:32,30/Oct/12 14:55,13/Mar/19 22:19,30/Oct/12 14:55,2.11.0,,,,,,,,,2.11.0,,,,camel-cdi,,,,,,0,,,,,,,,,"The camel-itest-cdi fails. So I took a look, and notice that duplicate beans is added to CamelContextConfig from camel-cdi.

So I made a patch to fix that, and the test got a bit further.

I am attaching the patch here then the ppl working on the new camel-cdi module can take a look.",,,,,,,,,,,,,,,,,,,,,24/Oct/12 13:33;davsclaus;CAMEL-5741.patch;https://issues.apache.org/jira/secure/attachment/12550627/CAMEL-5741.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,250765,,,Tue Oct 30 14:55:26 UTC 2012,,,,,,,0|i0b19r:,62318,,,,,,,,,30/Oct/12 14:55;davsclaus;Applied the patch.,,,,,,,,,,,,,,,,,,,,,,,
"OSGi resolvers for component, dataformat and language should check if service object is assignable before casting",CAMEL-5756,12613878,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,iocanel,iocanel,iocanel,29/Oct/12 12:13,29/Oct/12 18:51,13/Mar/19 22:19,29/Oct/12 18:51,,,,,,,,,,2.10.3,2.11.0,2.9.5,,osgi,,,,,,0,,,,,,,,,"Currently, the OSGi resolvers, get all services for the target component, dataformat and language and then cast the first service object to the type of choice.

This can be problematic if for any reason multiple version of a component is installed inside the container.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,252756,,,Mon Oct 29 18:51:16 UTC 2012,,,,,,,0|i0d7fb:,74979,,,,,,,,,29/Oct/12 18:51;iocanel;committed to trunk and merged to 2.10 and 2.9 branches,,,,,,,,,,,,,,,,,,,,,,,
Queue is Full in DefaultServicePool,CAMEL-5490,12602129,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,philippe.suray,philippe.suray,08/Aug/12 07:14,24/Oct/12 15:40,13/Mar/19 22:19,24/Oct/12 15:40,2.10.0,,,,,,,,,2.10.3,2.11.0,,,camel-netty,,,,,,0,,,,,,,,,"I use a Netty endPoint to forward messages to a client. These messages come from an another Netty endPoint.

After several forwarded messages, an error occurs on every forwarded message:
DEBUG 2012-08-06 15:30:06,482 [New I/O  worker #27] org.apache.camel.component.netty.handlers.ClientChannelHandler - Closing channel as an exception was thrown from Netty
java.lang.IllegalStateException: Queue full
        at java.util.AbstractQueue.add(AbstractQueue.java:71)
        at java.util.concurrent.ArrayBlockingQueue.add(ArrayBlockingQueue.java:209)
        at org.apache.camel.impl.DefaultServicePool.release(DefaultServicePool.java:96)
        at org.apache.camel.impl.ProducerCache$1.done(ProducerCache.java:304)
        at org.apache.camel.processor.SendProcessor$2$1.done(SendProcessor.java:125)
        at org.apache.camel.component.netty.handlers.ClientChannelHandler.messageReceived(ClientChannelHandler.java:162)
        at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:296)
        at org.jboss.netty.handler.codec.frame.FrameDecoder.unfoldAndFireMessageReceived(FrameDecoder.java:423)
        at org.jboss.netty.handler.codec.replay.ReplayingDecoder.callDecode(ReplayingDecoder.java:538)
        at org.jboss.netty.handler.codec.replay.ReplayingDecoder.messageReceived(ReplayingDecoder.java:437)
        at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:268)
        at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:255)
        at org.jboss.netty.channel.socket.nio.NioWorker.read(NioWorker.java:91)
        at org.jboss.netty.channel.socket.nio.AbstractNioWorker.processSelectedKeys(AbstractNioWorker.java:373)
        at org.jboss.netty.channel.socket.nio.AbstractNioWorker.run(AbstractNioWorker.java:247)
        at org.jboss.netty.channel.socket.nio.NioWorker.run(NioWorker.java:35)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
        at java.lang.Thread.run(Thread.java:662)
",,,,,,,,,,,,,,,,,,,,,08/Aug/12 07:16;philippe.suray;NettyTest.java;https://issues.apache.org/jira/secure/attachment/12539786/NettyTest.java,09/Aug/12 06:47;njiang;NettyTest.java.new;https://issues.apache.org/jira/secure/attachment/12539974/NettyTest.java.new,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-08-09 06:47:39.631,,,no_permission,,Unknown,,,,,,,,,,,241362,,,Wed Oct 24 15:40:50 UTC 2012,,,,,,,0|i027en:,10801,,,,,,,,,08/Aug/12 07:16;philippe.suray;Here is a small test case.,08/Aug/12 07:16;philippe.suray;See also http://camel.465427.n5.nabble.com/Error-in-DefaultServicePool-on-Netty-Producer-Queue-is-full-td5716882.html,"09/Aug/12 06:47;njiang;I just played with the test case and found the Exception can be fixed by using the Processor directly instead of create AsyncProcessor.
Please check out the patched NettyTest.java.new","09/Aug/12 08:43;philippe.suray;Thank you for your response.
In fact in the test case, the second tcp endpoint simulate the tcp listener of one of our client who receive the forwarding messages.
Unfortunately, I have no possible action on this application.
What can I do?
","09/Aug/12 11:56;njiang;Did you run the test directly with the tcp listener of your client?

I think you can add some flue control[1] on your route to work around this kind of issue, if there are so many messages to forward. 

[1]http://camel.apache.org/throttler.html
","09/Aug/12 12:08;philippe.suray;Unfortunately, I cannot run the test against the server of the client.
I will try to add the throttler in the route, I'll keep you informed.
Thank you for your help.",24/Oct/12 15:40;davsclaus;This has been fixed in camel-netty. We are now using commons-pool to poll Netty Channel's. This is more efficient and dont have any upper limitations.,,,,,,,,,,,,,,,,,
HttpConnectionManager configuration is not injected correctly when using blueprint ,CAMEL-5738,12613129,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,nikosd23,nikosd23,23/Oct/12 12:53,24/Oct/12 08:10,13/Mar/19 22:19,24/Oct/12 08:10,2.10.1,,,,,,,,,2.10.3,2.11.0,,,camel-http,,,,,,0,,,,,,,,,"The creation of HttpEndpoint is done with the default HttpConnectionManager. As a consequence, the http configuration concerning max connections, soTimeouts, etc is overridden by the default params. Attached you can find a unit test using camel-test-blueprint that identifies the issue. The problem is not replicated using spring-dm. ",,,,,,,,,,,,,,,,,,,,,23/Oct/12 12:54;nikosd23;blueprint-conf-http-endpoint-unit-test.txt;https://issues.apache.org/jira/secure/attachment/12550449/blueprint-conf-http-endpoint-unit-test.txt,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-10-24 06:19:56.629,,,no_permission,,Unknown,,,,,,,,,,,250557,,,Wed Oct 24 08:08:40 UTC 2012,,,,,,,0|i0az9r:,61992,,,,,,,,,23/Oct/12 12:54;nikosd23;Added a unit test that identifies the issue reported.,"24/Oct/12 06:19;njiang;@Nickolaos
I just run the test in the camel-2.10.x and trunk, I cannot reproduce the error.
Not sure if it is fixed in camel-2.10.2, can you double check it?
","24/Oct/12 07:37;nikosd23;Hi Willem,
Just run the test using 2.10.2 tag. Same behavior, unit test fails.
Nevertheless, using trunk 2.11.SNAPSHOT the problem is not reproduced.","24/Oct/12 08:08;njiang;Hi Nikolaos,

I checked the change log and verified Calus already fix this issue in CAMEL-5712.
I will closed this as the test is already fixed.

Willem",,,,,,,,,,,,,,,,,,,,
camel-ftp - LocalWorkDir option did not work as expected,CAMEL-5737,12613124,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,23/Oct/12 11:38,23/Oct/12 12:24,13/Mar/19 22:19,23/Oct/12 12:24,,,,,,,,,,2.10.3,2.11.0,2.9.5,,camel-ftp,,,,,,0,,,,,,,,,"There is a flaw when using from ftp -> to file. And using the localWorkDirectory option. 

See nabble
http://camel.465427.n5.nabble.com/camel-ftp-option-localWorkDirectory-doesn-t-work-properly-on-windows-tp5721438.html",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,250533,,,2012-10-23 11:38:59.0,,,,,,,0|i0az5j:,61968,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException with SpringBatchProducer and null header value,CAMEL-5733,12613000,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,vanackej,vanackej,22/Oct/12 17:15,23/Oct/12 07:42,13/Mar/19 22:19,23/Oct/12 07:42,2.10.2,,,,,,,,,2.10.3,2.11.0,,,camel-spring-batch,,,,,,0,,,,,,,,,"A NullPointerException occurs in SpringBatchProducer line 60 when a header with a null value exists.

Null headers should just be ignored or perhaps be added in jobParameters with a null value. I don't known what is the best strategy.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-10-23 07:42:14.156,,,no_permission,,Unknown,,,,,,,,,,,250373,,,Tue Oct 23 07:42:14 UTC 2012,,,,,,,0|i0axyn:,61775,,,,,,,,,"22/Oct/12 17:18;vanackej;By the way : camel-spring-batch component does not exists in JIRA, you should add it.",23/Oct/12 07:42;njiang;Applied patch with an unit test into trunk and 2.10.x branches with thanks to Johann.,,,,,,,,,,,,,,,,,,,,,,
SqsConsumer receive thread is tightly coupled to extendMessageVisiblity's scheduled task,CAMEL-5730,12612962,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,alexhutter,alexhutter,22/Oct/12 13:13,22/Oct/12 13:37,13/Mar/19 22:19,22/Oct/12 13:37,2.10.0,,,,,,,,,2.10.3,2.11.0,,,camel-aws,,,,,,0,,,,,,,,,"When I made the patch file for CAMEL-5306 I made a mistake and coupled the cancelling of the visibility extending scheduled task with the thread that receives the message inside SqsConsumer.  This causes issues when try to write Processors that delegate the completion of an exchange to another thread.

Actually the cancelling of the scheduled task should have been handled via exchange.addOnCompletion(), the same way the the overall SQS transaction is completed.

The attached patch fixes this issue.",,,,,,,,,,,,,,,,,,,,,22/Oct/12 13:15;alexhutter;fix-SQS-timeout-extender.patch;https://issues.apache.org/jira/secure/attachment/12550269/fix-SQS-timeout-extender.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-10-22 13:37:21.971,,,no_permission,,Novice,,,,,,,,,,,250313,,,Mon Oct 22 13:37:21 UTC 2012,,,Patch Available,,,,0|i0ax1r:,61627,,,,,,,,,22/Oct/12 13:15;alexhutter;I give permission for Apache to own the copyright on the attach file: fix-SQS-timeout-extender.patch,22/Oct/12 13:37;davsclaus;Thanks for the patch.,,,,,,,,,,,,,,,,,,,,,,
camel-crypto - Signer producer should close input stream after usage,CAMEL-5729,12612935,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,22/Oct/12 10:18,22/Oct/12 10:28,13/Mar/19 22:19,22/Oct/12 10:28,2.10.1,,,,,,,,,2.10.3,2.11.0,2.9.5,, camel-crypto,,,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/The-file-is-not-deleted-if-it-is-submitted-to-digital-signature-end-point-crypto-sign-td5721377.html",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,250282,,,Mon Oct 22 10:19:47 UTC 2012,,,,,,,0|i0awsn:,61586,,,,,,,,,"22/Oct/12 10:19;davsclaus;A workaround is to convert the message prior to the crypto, for example to byte arrays
<convertBodyTo type=""byte[]""/>
",,,,,,,,,,,,,,,,,,,,,,,
Enricher with async routing not handling exceptions thrown from AggregationStrategy,CAMEL-5636,12608688,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,raulvk,raulvk,raulvk,21/Sep/12 20:07,20/Oct/12 16:47,13/Mar/19 22:19,25/Sep/12 21:44,2.10.1,2.9.3,,,,,,,,2.10.2,2.11.0,2.9.4,,camel-core,,,,,,0,,,,,,,,,"The Enricher does not handle exceptions thrown from the AggregationStrategy when the async routing engine has kicked in. It leads to the following thread dump, callback thread remains blocked forever.

{code}
""Camel (context) thread #10 - JmsConsumer[queue]"" daemon prio=5 tid=103666000 nid=0x113c25000 waiting on condition [113c24000]
   java.lang.Thread.State: WAITING (parking)
        at sun.misc.Unsafe.park(Native Method)
        - parking to wait for  <7fd4a8de0> (a java.util.concurrent.CountDownLatch$Sync)
        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:156)
        at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:811)
        at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedInterruptibly(AbstractQueuedSynchronizer.java:969)
        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1281)
        at java.util.concurrent.CountDownLatch.await(CountDownLatch.java:207)
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:120)
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:85)
        at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:91)
        at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:560)
        at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:498)
        at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:467)
        at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:325)
        at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:263)
        at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1058)
        at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1050)
        at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:947)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
        at java.lang.Thread.run(Thread.java:680)
{code}

",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-09-22 08:26:02.044,,,no_permission,,Unknown,,,,,,,,,,,241508,,,Sat Oct 20 16:47:18 UTC 2012,,,,,,,0|i028b3:,10947,,,,,,,,,"22/Sep/12 08:26;davsclaus;Its not the jms consumer that is the problem. Its the async routing engine that waits for a reply that is not coming back. Are you using any custom components. 

And as always upgrade your Camel version to see if its fixed, eg Camel 2.8.0 is an old release.","25/Sep/12 21:23;raulvk;I didn't have time to investigate as soon as I found this issue, so I just shoved it in JIRA to keep track of it. As you suggested, it has nothing to do with the JMS consumer, but rather with the Enricher processor not treating unhandled exceptions thrown from the AggregationStrategy when the async routing engine has kicked in. On the other hand, synchronous routing is handled properly.

Changing the summary and description of the ticket to match the real situation.","25/Sep/12 21:45;raulvk;Fixed in trunk, camel-2.10.x and camel-2.9.x.","26/Sep/12 06:07;davsclaus;Raul, do you mind double checking the other EIPs that use an AggregationStrategy, which may thrown an exception as well? For example there is also a PollEnricher, WireTap etc. We may have a flaw in one of them as well.","20/Oct/12 16:47;raulvk;Hey Claus,

Checked the following EIPs which reference {{AggregationStrategy}}:
* Splitter
* Recipient list
* Poll Enrich
* Multicast
* Aggregate

All clear.

Regards,
Raúl.",,,,,,,,,,,,,,,,,,,
Rest route returns response with http Status code 500 Internal Server Error when response has Last-Modified or Header-expires in header as string. ,CAMEL-5710,12612349,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,amit1000,amit1000,18/Oct/12 01:02,18/Oct/12 16:39,13/Mar/19 22:19,18/Oct/12 05:36,2.10.1,,,,,,,,,2.10.3,2.11.0,2.9.5,,camel-restlet,,,,,,0,,,,,,,,,"Rest route returns Response with http Status code 500 Internal Server Error and expected response headers/body when response has Last-Modified or Header-expires in header as string. 

I found the issue in below code it try to convert string Wed, 31 Dec 1969 18:00:00 CS to Date and it fails. Is it posible to convert String Date without knowing Date format?


DefaultRestletBinding
=======================



 if (header.equalsIgnoreCase(HeaderConstants.HEADER_LAST_MODIFIED)) {
                if (value instanceof Calendar) {
                    message.getEntity().setModificationDate(((Calendar) value).getTime());
                } else if (value instanceof Date) {
                    message.getEntity().setModificationDate((Date) value);
                } else {
                    Date date = exchange.getContext().getTypeConverter().mandatoryConvertTo(Date.class, value); //  Here it try to convert String to Date it throws No type converter available to convert from type: java.lang.String to the required type: java.util.Date with value Wed, 31 Dec 1969 18:00:00 CS
                    message.getEntity().setModificationDate(date);
                }
            }

Stack trace
===========

7 Oct 2012 08:28:06,010 WARN org.restlet.Component.StatusFilter - Exception or error caught in status service
org.apache.camel.RuntimeCamelException: Cannot process request
        at org.apache.camel.component.restlet.RestletConsumer$1.handle(RestletConsumer.java:62)
        at org.apache.camel.component.restlet.MethodBasedRouter.handle(MethodBasedRouter.java:54)
        at org.restlet.routing.Filter.doHandle(Filter.java:159)
        at org.restlet.routing.Filter.handle(Filter.java:206)
        at org.restlet.routing.Router.doHandle(Router.java:500)
        at org.restlet.routing.Router.handle(Router.java:740)
        at org.restlet.routing.Filter.doHandle(Filter.java:159)
        at org.restlet.routing.Filter.handle(Filter.java:206)
        at org.restlet.routing.Router.doHandle(Router.java:500)
        at org.restlet.routing.Router.handle(Router.java:740)
        at org.restlet.routing.Filter.doHandle(Filter.java:159)
        at org.restlet.engine.application.StatusFilter.doHandle(StatusFilter.java:154)
        at org.restlet.routing.Filter.handle(Filter.java:206)
        at org.restlet.routing.Filter.doHandle(Filter.java:159)
        at org.restlet.routing.Filter.handle(Filter.java:206)
        at org.restlet.engine.ChainHelper.handle(ChainHelper.java:114)
        at org.restlet.Component.handle(Component.java:391)
        at org.restlet.Server.handle(Server.java:491)
        at org.restlet.engine.ServerHelper.handle(ServerHelper.java:75)
        at org.restlet.engine.http.HttpServerHelper.handle(HttpServerHelper.java:153)
        at org.restlet.ext.servlet.ServerServlet.service(ServerServlet.java:1031)
        at org.apache.shiro.grails.SavedRequestFilter.doFilter(SavedRequestFilter.java:56)
        at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:360)
        at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:276)
        at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
        at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
        at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:344)
        at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:272)
        at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:81)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:909)
        at java.lang.Thread.run(Thread.java:662)
Caused by: org.apache.camel.NoTypeConversionAvailableException: No type converter available to convert from type: java.lang.String to the required type: java.util.Date with value Wed, 31 Dec 1969 18:00:00 CST
        at org.apache.camel.impl.converter.BaseTypeConverterRegistry.mandatoryConvertTo(BaseTypeConverterRegistry.java:169)
",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-10-18 05:12:48.191,,,no_permission,,Unknown,,,,,,,,,,,249454,,,Thu Oct 18 16:39:38 UTC 2012,,,,,,,0|i0ael3:,58636,,,,,,,,,"18/Oct/12 05:12;davsclaus;Yes that date should be parsed in RFC 2822 format accordingly to:
http://en.wikipedia.org/wiki/List_of_HTTP_header_fields",18/Oct/12 05:36;davsclaus;Thanks for reporting.,18/Oct/12 16:39;amit1000;When are you planning to release 2.11.0?,,,,,,,,,,,,,,,,,,,,,
Validator component - Lock file on windows if input is file based and an validation failed occurred,CAMEL-5608,12607457,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,13/Sep/12 13:23,17/Oct/12 17:14,13/Mar/19 22:19,17/Oct/12 17:14,2.10.0,2.9.0,,,,,,,,2.10.3,2.11.0,2.9.5,,camel-core,,,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Validator-component-onException-tp5717756.html

We should ensure the input stream gets closed in all accounts with the validator component.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-09-26 10:49:36.088,,,no_permission,,Unknown,,,,,,,,,,,241481,,,Wed Oct 17 15:39:06 UTC 2012,,,,,,,0|i02853:,10920,,,,,,,,,"26/Sep/12 10:49;bvahdat;Using WIN-XP I could not reproduce the problem and [asked the user|http://camel.465427.n5.nabble.com/Validator-component-onException-tp5717756p5719718.html] to provide more details however got no response til now.

Also given the route the user has provided @ the forum I don't think file renaming will be invoked at all, because he makes use of {{DirectConsumer}} and not {{FileConsumer}} so there's no reason why {{FileUtil.renameFile}} should kick-in!","17/Oct/12 15:39;davsclaus;There may be another route that is picking up files.

I am adding some of the logic we have from xslt/xpath builders that also work with the various XML types / sources et all. And they have logic to ensure any input stream gets closed etc.",,,,,,,,,,,,,,,,,,,,,,
Using recipient list in a doTry ... doCatch situation dont work properly,CAMEL-5681,12610094,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,03/Oct/12 16:21,06/Oct/12 06:19,13/Mar/19 22:19,06/Oct/12 06:19,2.10.0,2.9.0,,,,,,,,2.10.2,2.11.0,2.9.4,,camel-core,,,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Issue-with-doTry-doCatch-not-routing-correctly-tp5720325.html

The end user would expect that doTry .. doCatch will overrule. However it gets a bit further more complicated if the try block routes to other routes and using EIPs such as recipient list.
",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,240686,,,Wed Oct 03 16:31:30 UTC 2012,,,,,,,0|i014nz:,4525,,,,,,,,,03/Oct/12 16:31;davsclaus;CAMEL-5024 changed behavior. The fix is IMHO wrong.,,,,,,,,,,,,,,,,,,,,,,,
Stopping and starting a seda consumer leaks a thread each time,CAMEL-5677,12609974,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,janstey,janstey,02/Oct/12 20:15,03/Oct/12 11:26,13/Mar/19 22:19,03/Oct/12 11:25,,,,,,,,,,2.10.2,2.11.0,2.8.7,2.9.4,,,,,,,0,,,,,,,,,"Just did something like this:

        for (int i = 0; i < 1000; i++) {
            context.stopRoute(""sedaToMock"");
            context.startRoute(""sedaToMock"");	        
        }      

and yeah, I had over 1000 threads in my JVM... not good :)",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,240207,,,Tue Oct 02 20:16:47 UTC 2012,,,,,,,0|i00ygv:,3516,,,,,,,,,"02/Oct/12 20:16;janstey;Running tests on this solution now:

{code}
[janstey@duffman camel-core (trunk)]$ git diff
diff --git a/camel-core/src/main/java/org/apache/camel/component/seda/SedaConsumer.java b/camel-core/src/main/java/org/apache/camel/component/seda/SedaConsumer.java
index a21ab36..cbe23ac 100644
--- a/camel-core/src/main/java/org/apache/camel/component/seda/SedaConsumer.java
+++ b/camel-core/src/main/java/org/apache/camel/component/seda/SedaConsumer.java
@@ -300,6 +300,13 @@ public class SedaConsumer extends ServiceSupport implements Consumer, Runnable,
 
     protected void doStop() throws Exception {
         endpoint.onStopped(this);
+        
+        // need to shutdown executor here as well or each time this endpoint is 
+        // started a new thread will be created
+        if (executor != null) {
+            endpoint.getCamelContext().getExecutorServiceManager().shutdownNow(executor);
+            executor = null;
+        }
     }
 
     @Override
{code}",,,,,,,,,,,,,,,,,,,,,,,
Context scoped exception clauses incorrectly applying across RouteBuilders,CAMEL-5456,12599590,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,andreaja,andreaja,20/Jul/12 07:42,30/Sep/12 12:12,13/Mar/19 22:19,30/Sep/12 12:12,2.10.0,,,,,,,,,2.10.2,2.11.0,2.9.4,,camel-core,,,,,,0,,,,,,,,,"The attached patch shows a bug in the DefaultExceptionPolicyStrategy or the way ExceptionPolicys are added to a RouteBuilder's errorhandler.

In ContextScopedOnExceptionMultipleRouteBuildersReverseTest, the ordering of the routes causes the onException(IllegalArgumentException.class) to added to the ExceptionProcessors for the direct:foo-RouteBuilder. When the route is run, the OnExceptionDefinition matches exactly on the exception-type, despite this OnExceptionDefiniton being registered on a different RouteBuilder. As far as we can tell, the processor is later ignored because it's identified as being from a different route-context.

We have attached corresponding tests for camel-spring that show that the issue is tied to alphabetical ordering of RouteBuilders when using contextscan.
",,,,,,,,,,,,,,,,,,,,,20/Jul/12 07:42;andreaja;camel-core-context-scope-bug.patch;https://issues.apache.org/jira/secure/attachment/12537315/camel-core-context-scope-bug.patch,20/Jul/12 07:42;andreaja;camel-spring-context-scope-bug.patch;https://issues.apache.org/jira/secure/attachment/12537316/camel-spring-context-scope-bug.patch,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-08-22 04:59:04.683,,,no_permission,,Unknown,,,,,,,,,,,241329,,,Sat Sep 29 13:05:47 UTC 2012,,,,,,,0|i0277b:,10768,,,,,,,,,"22/Aug/12 04:59;njiang;Hi Andreas,

If you are using Context scoped exception clause，the error handler will be affect across the CamelContext, as the JAVA DSL onException() is called one by one in the two different route builder, the route will be effected different if the onException is called in different sequences. I don't think there is way to fix it in JAVA DSL, unless we setup the context scoped exception in one RouteBuilders or using the route scoped exception clauses.

The error the test can be fixed by setting the onException to be route scoped like the one I just committed a fixed test[1] into the trunk.

[1] http://svn.apache.org/viewvc?rev=1375896&view=rev
",22/Aug/12 06:01;andreaja;It can't possibly be correct that route-context-scoped exception clauses are dependent on the order of the routes they are tied to. That's insane. ,"22/Aug/12 09:53;njiang;That is caused by the onException() are called in different sequence in RouteBuilder.configure method.
If you are using the spring DSL, you will never have this kind of issue.
{code}
   <camel>
      <onException>...</onException>
      <onException>...</onException>
      <route> ... </route>
      <route> ... </route>
   </camel>
{code} ",22/Aug/12 10:05;andreaja;So we've correctly identified a bug in the Java DSL then?,"29/Sep/12 13:05;davsclaus;Yes this issue is related to Java DSL. It has a slightly different initialization logic than XML DSL etc.

",,,,,,,,,,,,,,,,,,,
Camel proxies should not forward hashCode() method invocations,CAMEL-5571,12606232,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,hwellmann,hwellmann,05/Sep/12 12:28,28/Sep/12 14:02,13/Mar/19 22:19,28/Sep/12 14:02,2.10.1,,,,,,,,,2.10.2,2.11.0,2.9.4,,camel-core,,,,,,0,,,,,,,,,"Given a Camel proxy for an @InOnly service interface, and a route from the proxy to a JMS endpoint, calling hashCode() on the proxy throws an exception, either immediately or after a number of retries, depending on the route configuration.

See the attached test case for different scenarios.

The reason is that hashCode() is forwarded by the CamelInvocationHandler to the remote endpoint, which does not make sense in this case.
",,,,,,,,,,,,,,,,,,,,,05/Sep/12 12:28;hwellmann;camel-proxy-bug.zip;https://issues.apache.org/jira/secure/attachment/12543842/camel-proxy-bug.zip,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-09-28 14:02:17.614,,,no_permission,,Unknown,,,,,,,,,,,241444,,,Fri Sep 28 14:02:17 UTC 2012,,,,,,,0|i027wv:,10883,,,,,,,,,28/Sep/12 14:02;davsclaus;Thanks for reporting. Your test cases now passes.,,,,,,,,,,,,,,,,,,,,,,,
camel-hbase producer should be able to perform get with just the id as a header,CAMEL-5653,12609327,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,iocanel,iocanel,iocanel,27/Sep/12 00:36,27/Sep/12 18:43,13/Mar/19 22:19,27/Sep/12 18:43,2.10.0,2.10.1,,,,,,,,2.10.2,2.11.0,,,camel-hbase,,,,,,0,,,,,,,,,"In many cases the user would specify the families/columns of interest as part of the uri and then just specify the row id as part of the headers.

The way it currently works, it requires at least one family/column along with the row id as part of the headers.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,241525,,,Thu Sep 27 18:43:34 UTC 2012,,,,,,,0|i028ev:,10964,,,,,,,,,27/Sep/12 18:43;iocanel;Committed to trunk and 2.10.x branch.,,,,,,,,,,,,,,,,,,,,,,,
CXF Transport loses HTTP Matrix parameters,CAMEL-5405,12596121,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,sergey_beryozkin,sergey_beryozkin,27/Jun/12 17:24,27/Sep/12 12:17,13/Mar/19 22:19,27/Sep/12 12:17,2.9.2,,,,,,,,,2.10.1,2.11.0,2.9.3,,camel-cxf,,,,,,0,,,,,,,,,"DefaultCxfMesssageMapper (note the typo - to be fixed in a follow-up JIRA) wrongly initializes CXF Message Message.REQUEST_URI property with the value of Camel Exchange.HTTP_PATH, even though Camel Exchange.HTTP_URI is available.

The net effect is that the HTTP matrix parameters if any attached to the last HTTP path segment are lost. Another side-effect is that Exchange.HTTP_PATH will contain the decoded value (done at HTTPServletRequest level) which can lead to the matching issues at the JAX-RS level.

A simple patch is attached",,,,,,,,,,,,,,,,,,,,,27/Jun/12 17:26;sergey_beryozkin;camel5405.diff;https://issues.apache.org/jira/secure/attachment/12533678/camel5405.diff,08/Aug/12 10:14;sergey_beryozkin;camel5405_2.diff;https://issues.apache.org/jira/secure/attachment/12539802/camel5405_2.diff,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-06-29 06:05:51.656,,,no_permission,,Novice,,,,,,,,,,,241278,,,Thu Sep 27 11:40:04 UTC 2012,,,Patch Available,,,,0|i026vz:,10717,,,,,,,,,"29/Jun/12 06:05;njiang;Applied patch into trunk, 2.9.x and 2.8.x branch with thanks to Sergey.
I also added ASL header for the test file.","08/Aug/12 10:12;sergey_beryozkin;Propagating the actual Request URI causes the mis-match at the CXF level when Camel Servlet is also used. For example, Camel Servlet will set Request URI as ""/webapp/HelloWorld"", but also set the base URI as ""servlet:///HelloWorld"". 
To calculate the base address, CXF needs HttpServletRequest propagated too","08/Aug/12 10:14;sergey_beryozkin;HttpServletRequest and HttpServletResponse are also propagated, without introducing CXF HTTP Transport or Servlet API dependencies ","08/Aug/12 14:25;njiang;@Sergey,

I just applied the patch into the trunk, it could be great if you can provide an integration test to show the whole story :).","09/Aug/12 07:53;sergey_beryozkin;Hi Willem - thanks for applying it. This will fix one of our failing demos. 
I can promise here I'll take an action and work on creating an integration test. It may take a bit of time - I'm mostly offline till the end of next week, but I'll get it done.
Cheers","09/Aug/12 07:58;sergey_beryozkin;Btw, propagating servlet request/response will also make sure that they can be injected as JAX-RS Context objects or accessed as JAX-WS properties, so the fix is good :-)","09/Aug/12 08:08;njiang;Hi Sergey,

I will keep this issue open until we get the integration test committed :).",27/Sep/12 11:19;davsclaus;Any update on this. If a new test is needed then create a new ticket as we need this ticket to be in the changelog for upcoming releases.,"27/Sep/12 11:40;sergey_beryozkin;I'll get the test done asap, still committed to it; I'm not sure it is needed though for this issue, propagating HTTP Servlet references is needed for some of our demos to work but it is useful irrespectively of that; please feel free to close this issue.",,,,,,,,,,,,,,,
Camel Endpoint ignores camelContextId property in Spring configuration,CAMEL-5655,12609372,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,koscejev,koscejev,27/Sep/12 10:02,27/Sep/12 11:40,13/Mar/19 22:19,27/Sep/12 11:40,2.10.1,,,,,,,,,2.10.2,2.11.0,2.9.4,,camel-blueprint,camel-spring,,,,,0,camelContextId,endpoint,spring,,,,,,"Camel Endpoint, if configured outside camelContext element in Spring configuration, ignores camelContextId property. 

Steps to reproduce: Configure two contexts in spring configuration. Then in the same config file configure two  endpoints outside camelContext, but with camelContextId specified. Both endpoints will be created pointing to the same (first) camel context, despite being configured to different contexts. Attempting to use them by reference results in failure, as endpoint camelContext doesn't match the expected one.",,,,,,,,,,,,,,,,,,,,,27/Sep/12 11:11;koscejev;CAMEL-5655.zip;https://issues.apache.org/jira/secure/attachment/12546846/CAMEL-5655.zip,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-09-27 10:52:03.948,,,no_permission,,Unknown,,,,,,,,,,,241527,,,Thu Sep 27 11:40:16 UTC 2012,,,,,,,0|i028fb:,10966,,,,,,,,,27/Sep/12 10:52;davsclaus;Can you post a sample.,27/Sep/12 11:10;davsclaus;Thanks I have the issue reproduced,"27/Sep/12 11:11;koscejev;Attached a test suite. It fails to create ApplicationContext (not on assert). Proxy requests an endpoint by reference, which is found in Spring ApplicationContext, but with a different CamelContext specified.",27/Sep/12 11:40;davsclaus;Thanks for reporting.,,,,,,,,,,,,,,,,,,,,
JettyHttpProducer should close the input stream when the exception is throw,CAMEL-5621,12607886,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,17/Sep/12 10:24,27/Sep/12 11:18,13/Mar/19 22:19,27/Sep/12 11:18,2.10.1,2.9.3,,,,,,,,2.10.2,2.11.0,2.9.4,,camel-jetty,,,,,,0,,,,,,,,,"User complains about there are lots of file is open when sending the input stream and getting the exception.
Here is the mail thread[1] is talking about it.
[1]http://camel.465427.n5.nabble.com/To-many-opened-files-td5719451.html ",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,241494,,,2012-09-17 10:24:50.0,,,,,,,0|i0287z:,10933,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
EIPs using custom aggregation strategy should fail if not possible to find in registry,CAMEL-5647,12608979,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,25/Sep/12 07:37,25/Sep/12 11:36,13/Mar/19 22:19,25/Sep/12 11:36,2.10.0,2.9.0,,,,,,,,2.10.2,2.11.0,2.9.4,,camel-core,eip,,,,,0,,,,,,,,,"Some EIPs support using a custom aggregations strategy. And if you use XML DSL to refer to a custom strategy, then you may have typo, or the strategy do not implement the interface.

What we should do is to ensure to fail if the custom strategy could not be looked up. 

Some EIPs such as the content enricher will fallback and use a default strategy. This is wrong.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,241519,,,2012-09-25 07:37:16.0,,,,,,,0|i028dj:,10958,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"ObjectHelper.resolveUriPath is broken, can not handle:  '../../' correctly",CAMEL-5632,12608620,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,poker_jocke,poker_jocke,21/Sep/12 13:00,22/Sep/12 09:44,13/Mar/19 22:19,22/Sep/12 09:44,2.10.1,,,,,,,,,2.10.2,2.11.0,2.9.4,,camel-core,,,,,,0,,,,,,,,,"In my xsl-files I have imports and includes that resides in folders a few levels up.

Ex:  

<xsl:include href=""../../common/myfunctions.xsl""/>

When camel starts up and tries to resolve the paths it crashes because of the current implementation in ObjectHelper.resolveUriPath(..)


Made a simple testcase that demonstrates my problem.




{code}
public void testResolveUriPath() throws Exception {
        assertEquals(""xslt/"", ObjectHelper.resolveUriPath(""xslt/one/../""));         //  OK
        assertEquals(""xslt/"", ObjectHelper.resolveUriPath(""xslt/one/../two/../""));  // OK
        assertEquals(""xslt/"", ObjectHelper.resolveUriPath(""xslt/""));                // OK
        assertEquals("""", ObjectHelper.resolveUriPath(""./""));                        // OK
        assertEquals(""xslt/"", ObjectHelper.resolveUriPath(""xslt/one/two/../../""));  // Fails, gives 'xslt/one/.'
        assertEquals(""xslt/"", ObjectHelper.resolveUriPath(""xslt/one/two/../.././""));// Fails, gives 'xslt/one/.'
    }
{code}","Mac os x 10.8.1
Java 1.7.0_07",,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-09-22 08:33:19.581,,,no_permission,,Unknown,,,,,,,,,,,241505,,,Sat Sep 22 09:44:51 UTC 2012,,,,,,,0|i028af:,10944,,,,,,,,,22/Sep/12 08:33;davsclaus;This is a regression introduce by CAMEL-5321,"22/Sep/12 09:44;davsclaus;Also fixed an issue with using multiple back paths, eg ""../../../foo""",,,,,,,,,,,,,,,,,,,,,,
Share properties configuration between CDI and CamelContext,CAMEL-5616,12607664,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,splatch,splatch,14/Sep/12 15:39,21/Sep/12 07:05,13/Mar/19 22:19,20/Sep/12 00:30,,,,,,,,,,2.11.0,,,,camel-cdi,,,,,,0,,,,,,,,,"Apache DeltaSpike provides convenient way to inject configuration using @ConfigProperty value.
In ideal world @ConfigProperty injected by deltaspike should be same as configuration property visible from Camel Context.",,,,,,,,,,,,,,,,,,DELTASPIKE-273,,,19/Sep/12 15:07;splatch;CAMEL-5616-component.patch;https://issues.apache.org/jira/secure/attachment/12545741/CAMEL-5616-component.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-09-19 01:22:53.556,,,no_permission,,Unknown,,,,,,,,,,,241489,,,Fri Sep 21 07:05:15 UTC 2012,,,,,,,0|i0286v:,10928,,,,,,,,,14/Sep/12 15:47;splatch;Proposed solution.,18/Sep/12 21:37;splatch;New version of patch with null check.,19/Sep/12 01:22;hadrian;Thanks Lukasz for patch,"19/Sep/12 06:14;davsclaus;Lukasz, does DeltaSpike supports resolving multiple properties in the same text?

The API on CamelContext supports resolving placeholders intermixed withe regular text (eg hence the name ending with ...s, and as stated in its javadoc, which maybe could be emphasized a bit on that part). An example would be a camel endpoint uri, eg
{code}
""ftp:{{myServer}}:{{port}}/foo/bar""
{code}
Then it resolves the 2 placeholders, myServer and port, returning lets say
{code}
""ftp:someserver.com:21/foo/bar""
{code}

If DeltaSpike cannot do that, then the patch is wrong; which I suspect is the case. 

You should integrate this on the component level instead. There is a PropertiesComponent that supports pluggable property resolver, that lookup a single property at a time. This is how we eg do it with blueprint. Take a look in camel-blueprint. 
","19/Sep/12 08:31;splatch;Claus,
Way how the properties component is glued with context is one huge hack. PropertiesResolver API does not match CDI cases, it's influenced by spring property placeholder stuff (it was replacement for it so I'm not surprised it looks like original). In CDI you don't care about config location, whatever it is because config sources are automatically registered by cdi extension. You ask just about property to resolve (no access from API to grab all properties with names). Thus even if you will pass location of properties you would like to load nobody knows what to with it.","19/Sep/12 08:40;davsclaus;Yeah that may be the case, but the patch is IMHO wrong if CDI does not support the mixed resolution which is that the API on CamelContext is *all* about. That API is not for a single property lookup by its key. 

To lookup by key, then use the properties component, not the CamelContext API.

If config location doesn't matter in CDI, then its simple to configure as you would set the location to ""cdi"", eg as we have for ""blueprint"" etc.

What you need to hook is the PropertiesParser so you can do your CDI lookup there. The java.util.Properties parameter will just be null in this case. Just as its not used in the camel-blueprint implementation.",19/Sep/12 09:10;splatch;After extending deltaspike API we'll be able to implement custom properties resolver.,19/Sep/12 15:07;splatch;Solution with custom properties component overriding PropertiesParser.,"20/Sep/12 00:30;hadrian;Patch using custom PropertiesParser applied. Thanks Lukasz, keep them coming.","21/Sep/12 07:05;davsclaus;Lukasz

Yeah the current API is based on the needs back them for people to use placeholders with Spring and Camel. Later spring-dm and blueprint as well. 
It may be that in Camel 3.0 the property placeholder API could warrant an API in the spi package instead of being based on a Camel component.

Though a Camel component comes very natural to Camel, after all there is 100+ in the box. And for example the bean component could maybe have been implemented as a EIP instead as a service activator etc.

Lukasz, do you mind helping with documentation as well? I guess a few spots to add some details about this could be at:
- http://camel.apache.org/cdi
- http://camel.apache.org/properties
- http://camel.apache.org/using-propertyplaceholder.html",,,,,,,,,,,,,,
camel-zookeeper endpoints should not share the configuration ,CAMEL-5627,12608190,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,19/Sep/12 03:40,19/Sep/12 13:50,13/Mar/19 22:19,19/Sep/12 13:50,2.10.1,2.9.3,,,,,,,,2.10.2,2.11.0,2.9.4,,camel-zookeeper,,,,,,0,,,,,,,,,"User complains that  ""The URI parameters on my consumer endpoint seem to be affecting the behaviour of my producer endpoint."" If he has two zookeeper endpoint with different uri configuration in the different routes. 
You can find more information in this thread[1]
[1]http://camel.465427.n5.nabble.com/URI-parameters-for-one-Zookeeper-endpoint-are-contaminating-another-endpoint-td5719559.html",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-09-19 06:23:11.831,,,no_permission,,Unknown,,,,,,,,,,,241500,,,Wed Sep 19 13:50:46 UTC 2012,,,,,,,0|i0289b:,10939,,,,,,,,,"19/Sep/12 06:23;davsclaus;In some of the other Camel components that have a Configuration class (assuming its the same case here), we do a copy of it beforehand (using clone) in the createEndpoint method. I think we should do the same. See for example the MailComponent.","19/Sep/12 13:50;njiang;Apply the patch into trunk, camel-2.10.x and camel-2.9.x branches.",,,,,,,,,,,,,,,,,,,,,,
http4 component should not assume the scheme by looking up the request address,CAMEL-5595,12607180,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,12/Sep/12 06:05,17/Sep/12 07:03,13/Mar/19 22:19,17/Sep/12 07:03,2.9.3,,,,,,,,,2.10.2,2.11.0,2.9.4,,,,,,,,0,,,,,,,,,,"There is an user complains the camel-http4 component doesn't work rightly behind a proxy when endpoint address is start with http4s[1].

 I just checked the code of camel-http4, it will try to setup the proxy schema to be https4 when the real address is start from https. That is not right. User should be able to define the scheme for the proxy himself.

[1]http://camel.465427.n5.nabble.com/Using-the-HTTP4-component-to-make-a-HTTPS-call-behinf-proxy-sever-tp5719105.html",,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,241468,,,Mon Sep 17 07:03:59 UTC 2012,,,,,,,0|i02827:,10907,,,,,,,,,"17/Sep/12 07:03;njiang;Applied patch into trunk, camel-2.10.x and camel-2.9.x branches.",,,,,,,,,,,,,,,,,,,,,,,
camel-hl7 bundle should specify the mina version ,CAMEL-5610,12607546,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,13/Sep/12 23:57,14/Sep/12 08:50,13/Mar/19 22:19,14/Sep/12 08:50,2.10.1,2.9.3,,,,,,,,2.10.2,2.11.0,2.9.4,,,,,,,,0,,,,,,,,,"As there could be different version of mina or mina2 exist in the OSGi platform, we need to specify the right version rang on camel-hl7 which has the dependency on the mina.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,241483,,,Fri Sep 14 08:50:04 UTC 2012,,,,,,,0|i0285j:,10922,,,,,,,,,"14/Sep/12 08:50;njiang;Applied the patch into trunk, camel-2.10.x and camel-2.9.x branches.",,,,,,,,,,,,,,,,,,,,,,,
In ScheduledRoutePolicy a suspended route cannot be started,CAMEL-5555,12605770,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,apejavar,apejavar,31/Aug/12 18:47,10/Sep/12 14:57,13/Mar/19 22:19,10/Sep/12 14:57,2.10.0,,,,,,,,,2.10.2,2.11.0,2.9.4,,camel-quartz,,,,,,0,,,,,,,,,"If a route is suspended using the ScheduledRoutePolicy and its subclasses (CronScheduledRoutePolicy), it cannot be resumed or started.

Looking at the code in ScheduledRoutePolicy.onJobExecute(), on start/resume actions, the route status is first checked and must be stopped or suspended before any actions is taken.

Suspension of a route, only suspends the consumer and not the route, and hence the start/resume after a suspend does nothing.

One solution could be to also check the status of the consumer on start/resume. This would require adding a isSuspended() to serviceHelper and should be relatively straightforward.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-09-10 14:57:12.016,,,no_permission,,Unknown,,,,,,,,,,,241427,,,Mon Sep 10 14:57:12 UTC 2012,,,,,,,0|i027t3:,10866,,,,,,,,,"10/Sep/12 14:57;njiang;Applied the patch into trunk, camel-2.9.x and camel-2.10.x branches.",,,,,,,,,,,,,,,,,,,,,,,
HazelcastIdempotentRepository is not thread safe,CAMEL-5556,12605869,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,krishy,krishy,01/Sep/12 23:14,10/Sep/12 14:27,13/Mar/19 22:19,10/Sep/12 14:27,2.8.6,,,,,,,,,2.10.2,2.11.0,2.9.4,,camel-hazelcast,,,,,,0,,,,,,,,,"The Hazelcast idempotent repository does not add and confirm messages in a thread safe manner.

Patch attached to handle that.",,,,,,,,,,,,,,,,,,,,,01/Sep/12 23:15;krishy;Ensure_thread-safe_access.patch;https://issues.apache.org/jira/secure/attachment/12543451/Ensure_thread-safe_access.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-09-10 14:27:31.732,,,no_permission,,Unknown,,,,,,,,,,,241428,,,Mon Sep 10 14:27:31 UTC 2012,,,Patch Available,,,,0|i027tb:,10867,,,,,,,,,01/Sep/12 23:15;krishy;Use putifAbsent for add and slightly safe semantics for confirm.,10/Sep/12 14:27;njiang;Applied patch into trunk and camel-2.9.x and camel-2.10.x branches with thanks to Krishna.,,,,,,,,,,,,,,,,,,,,,,
"Multiple restlet routes of the same restlet URI but different VERBs does not work in Apache Camel 2.10.0 , both routes work in Apache Camel 2.9.1.  ",CAMEL-5535,12604449,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,amit1000,amit1000,22/Aug/12 15:35,10/Sep/12 14:18,13/Mar/19 22:19,10/Sep/12 14:18,2.10.0,,,,,,,,,2.10.2,2.11.0,2.9.4,,camel-restlet,,,,,,0,,,,,,,,,"Multiple restlet routes of the same restlet URI but different VERBs does not work in Apache Camel 2.10.0 , both routes work in Apache Camel 2.9.1.  

Reproduce Steps:
-----------------
1) Add a restlet route with a from uri of restlet:///nimbus/hello.restlet/1.0?restletMethods=get

<route xmlns=""http://camel.apache.org/schema/spring"" trace=""true"" >
      <from uri=""restlet:///nimbus/hello.restlet/1.0?restletMethods=get""/>
    <transform>
      <simple>Hello Restlet Method: ${header.CamelHttpMethod}  ID:${header.id}</simple>
    </transform>

  </route>


2) Add a restlet route with a from uri of restlet:///nimbus/hello.restlet/1.0?restletMethods=post

   <route xmlns=""http://camel.apache.org/schema/spring"" trace=""true"" >
      <from uri=""restlet:///nimbus/hello.restlet/1.0?restletMethods=post""/>
    <transform>
      <simple>Hello Restlet Method: ${header.CamelHttpMethod}  ID:${header.id}</simple>
    </transform>

  </route>

3)  route 1work fine, but #2 results in the following exception. both route work fine in Camel 2.9.1.

Exception:

012-07-27 10:29:20,646-0400 ERROR grails.app.service.nimbus.ComputeService localhost addRoute for hello.restletpost failed - Failed to start route nimbus.hello.restletpost.1.0 because of Multiple consumers for the same endpoint is not allowed: Endpoint[/nimbus/hello.restlet/1.0]
 Caused by: org.apache.camel.FailedToStartRouteException: Failed to start route nimbus.hello.restletpost.1.0 because of Multiple consumers for the same endpoint is not allowed: Endpoint[/nimbus/hello.restlet/1.0]
 at org.apache.camel.impl.DefaultCamelContext(doStartOrResumeRouteConsumers:1993) 


I've already posted on 
http://camel.465427.n5.nabble.com/Apache-Camel-2-10-0-multiple-restlet-routes-of-the-same-restlet-URI-but-different-VERBs-does-not-work-td5716556.html
 
",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-08-23 02:25:52.478,,,no_permission,,Unknown,,,,,,,,,,,241407,,,Mon Sep 10 14:18:06 UTC 2012,,,,,,,0|i027on:,10846,,,,,,,,,"23/Aug/12 02:25;njiang;I just tried you test case with Camel 2.10.0 and Camel 2.9.1, I got the same exception of ""Failed to start route route2 because of Multiple consumers for the same endpoint is not allowed."" And I checked the camel-restlet code it doesn't support to create multi endpoints as you just showed. ","23/Aug/12 19:24;amit1000;I did the unit test with Camel 2.10.0 and Camel 2.9.1 and i got same exception, but when I deploy same routes in spring XML DSL format into out application. It works fine with Camel 2.9.1. Both routes started successfully. I went to jconsole and collected dumpRouteAsXml. Below are the dumpRouteAsXml. Both routes has different route id but same URL. This feature is very critical to Restlet routes, so we can have different routes base on the restletMethods. Is anyway could you support this feature in next release?

  
<?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?>
<route trace=""true"" id=""nimbus.hello.restlet.1.0"" xmlns=""http://camel.apache.org/schema/spring"">
    <from uri=""restlet:///nimbus/hello.restlet/1.0?restletMethods=post""/>
    <transform id=""transform10"">
        <simple>Hello Restlet Method: ${header.CamelHttpMethod} ID:${header.id}</simple>
    </transform>
</route>



<?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?>
<route trace=""true"" id=""nimbus.hello.restletGet.1.0"" xmlns=""http://camel.apache.org/schema/spring"">
    <from uri=""restlet:///nimbus/hello.restlet/1.0?restletMethods=get""/>
    <transform id=""transform9"">
        <simple>Hello Restlet Method: ${header.CamelHttpMethod} ID:${header.id}</simple>
    </transform>
</route>

Thanks,
 ","24/Aug/12 12:31;njiang;Hi Amti,

It looks like there is no multi from endpont check when you use Sprint DSL to set up restlet route in Camel 2.9.1.

I found a way to fix it by setting up the endpoint uri with the restletMethods option and will commit the patch shortly.

Willem
",10/Sep/12 14:12;amit1000;I've tested with CAMEL-2.10.1 release and it works great. Please change the issue status to Resolved and update the release note. Thanks for you help!!!,"10/Sep/12 14:18;njiang;Applied the patch into trunk, camel-2.9.x and camel-2.10.x branches.",,,,,,,,,,,,,,,,,,,
Mina2 Consumer doesn't reliably work with SSL,CAMEL-5537,12604581,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,andrewlawrenson,andrewlawrenson,23/Aug/12 09:28,26/Aug/12 09:29,13/Mar/19 22:19,26/Aug/12 09:29,2.10.0,,,,,,,,,2.10.2,2.11.0,,,camel-mina2,,,,,,0,,,,,,,,,"I've been trying to write a service using Camel 2.10.0 which uses the mina2 component to expose a service, and which uses SSL, using an endpoint of:

mina2:tcp://localhost:6500?sync=true&filters=#hl7SslFilterFactory,#hl7CodecFilter&allowDefaultCodec=false

however, what I found was that the SSL handshake was failing quite often for no apparent reason.  Investigating further, it appeared that messages sent during the handshake were being processed out of order - specifically, when the client (which uses a standard java SSLSocket) sent a ""TLSv1 Change Cipher Spec"" followed by a ""TLSv1 Handshake"", the ""TLSv1 Handshake"" was being processed before the ""TLSv1 Change Cipher Spec"", breaking the process.

This appears to have been caused because when the the Mina2Consumer configures MINA for tcp (in Mina2Consumer.setupSocketProtocol), it is using a UnorderedThreadPoolExecutor - which allows messages to be processed in any order.  Switching this to use a OrderedThreadPoolExecutor instead has fixed the issue.

May I request that the use of UnorderedThreadPoolExecutor vs OrderedThreadPoolExecutor be configurable via endpoint parameters? (or OrderedThreadPoolExecutor is used when SSL if configured).  I'm assuming the reason for the use of UnorderedThreadPoolExecutor is simply for performance. ",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-08-26 09:29:19.762,,,no_permission,,Unknown,,,,,,,,,,,241409,,,Sun Aug 26 09:29:19 UTC 2012,,,,,,,0|i027p3:,10848,,,,,,,,,26/Aug/12 09:29;davsclaus;There is a new orderedThreadPoolExecutor option you can use to choose. By default is now ordered to ensure works reliable out of the box.,,,,,,,,,,,,,,,,,,,,,,,
CamelBlueprintTestSupport Cannot correctly delete target\bundles\routetest.jar,CAMEL-5507,12603496,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,alanfoster,alanfoster,14/Aug/12 19:37,20/Aug/12 14:03,13/Mar/19 22:19,20/Aug/12 14:03,2.10.0,,,,,,,,,2.10.1,2.11.0,,,camel-test,osgi,,,,,0,,,,,,,,,"When creating a new fuse project using the camel-blueprint archetype and  having multiple test methods it has problems deleting 'target\bundles\routetest.jar' in the setUp method of CamelBlueprintTestSupport

Reproduction steps:
- Create new fuse project from camel-blueprint archetype
- Open the RouteTest.java in (src/test/java/com/mycompany/camel/blueprint/RouteTest.java)
- Copy the 'testRoute()' method a couple of times and give it a different method name to best see this problem.
- Run the maven tests

The console will say this after the first test runs:
{code}
                    Thread-7] BlueprintCamelContext          INFO  Apache Camel 2.9.0.fuse-7-061 (CamelContext: blueprintContext) is shutdown in 0.005 seconds. Uptime 0.085 seconds.
[                          main] TestSupport                    WARN  Deletion of file: C:\FuseIDEEnterprise-2.1.462\workspace\camel-blueprint\target\bundles\routetest.jar failed
[                          main] TestSupport                    WARN  Deletion of file: C:\FuseIDEEnterprise-2.1.462\workspace\camel-blueprint\target\bundles failed
[                          main] TestSupport                    WARN  Deletion of file: C:\FuseIDEEnterprise-2.1.462\workspace\camel-blueprint\target\bundles\routetest.jar failed
[                          main] TestSupport                    WARN  Deletion of file: C:\FuseIDEEnterprise-2.1.462\workspace\camel-blueprint\target\bundles failed
[                          main] TestSupport                    WARN  Deletion of file: C:\FuseIDEEnterprise-2.1.462\workspace\camel-blueprint\target\bundles\routetest.jar failed
[                          main] TestSupport                    WARN  Deletion of file: C:\FuseIDEEnterprise-2.1.462\workspace\camel-blueprint\target\bundles failed
[                          main] TestSupport                    WARN  Deletion of file: C:\FuseIDEEnterprise-2.1.462\workspace\camel-blueprint\target\bundles\routetest.jar failed
[                          main] TestSupport                    WARN  Deletion of file: C:\FuseIDEEnterprise-2.1.462\workspace\camel-blueprint\target\bundles failed
[                          main] TestSupport                    WARN  Deletion of file: C:\FuseIDEEnterprise-2.1.462\workspace\camel-blueprint\target\bundles\routetest.jar failed
[                          main] TestSupport                    WARN  Deletion of file: C:\FuseIDEEnterprise-2.1.462\workspace\camel-blueprint\target\bundles failed
[                          main] CamelBlueprintHelper           INFO  Using Blueprint XML file: /C:/FuseIDEEnterprise-2.1.462/workspace/camel-blueprint/target/classes/OSGI-INF/blueprint/blueprint.xml
{code}

You can also also get PojoSR class loader issues when running the exact same project as JUnit tests, rather than maven tests. But these errors may be related so I won't raise a ticket for that.

I will however give the stack trace for this, in case it _isn't_ related
{code}
org.osgi.framework.BundleException: Unable to start bundle
	at de.kalpatec.pojosr.framework.PojoSRBundle.start(PojoSRBundle.java:144)
	at de.kalpatec.pojosr.framework.PojoSR.startBundles(PojoSR.java:405)
	at de.kalpatec.pojosr.framework.PojoSR.<init>(PojoSR.java:322)
	at de.kalpatec.pojosr.framework.PojoServiceRegistryFactoryImpl.newPojoServiceRegistry(PojoServiceRegistryFactoryImpl.java:51)
	at org.apache.camel.test.blueprint.CamelBlueprintHelper.createBundleContext(CamelBlueprintHelper.java:111)
	at org.apache.camel.test.blueprint.CamelBlueprintTestSupport.setUp(CamelBlueprintTestSupport.java:35)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:27)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
	at org.junit.rules.TestWatchman$1.evaluate(TestWatchman.java:48)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)
Caused by: java.lang.NoClassDefFoundError: org/eclipse/core/runtime/Plugin
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(Unknown Source)
	at java.security.SecureClassLoader.defineClass(Unknown Source)
	at java.net.URLClassLoader.defineClass(Unknown Source)
	at java.net.URLClassLoader.access$100(Unknown Source)
	at java.net.URLClassLoader$1.run(Unknown Source)
	at java.net.URLClassLoader$1.run(Unknown Source)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(Unknown Source)
	at java.lang.ClassLoader.loadClass(Unknown Source)
	at sun.misc.Launcher$AppClassLoader.loadClass(Unknown Source)
	at java.lang.ClassLoader.loadClass(Unknown Source)
	at de.kalpatec.pojosr.framework.PojoSRBundle.start(PojoSRBundle.java:130)
	... 30 more
Caused by: java.lang.ClassNotFoundException: org.eclipse.core.runtime.Plugin
	at java.net.URLClassLoader$1.run(Unknown Source)
	at java.net.URLClassLoader$1.run(Unknown Source)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(Unknown Source)
	at java.lang.ClassLoader.loadClass(Unknown Source)
	at sun.misc.Launcher$AppClassLoader.loadClass(Unknown Source)
	at java.lang.ClassLoader.loadClass(Unknown Source)
	... 43 more
{code}","Windows 7, Fuse IDE",,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-08-16 12:22:54.259,,,no_permission,,Unknown,,,,,,,,,,,241379,,,Mon Aug 20 14:03:35 UTC 2012,,,,,,,0|i027if:,10818,,,,,,,,,"16/Aug/12 12:22;davsclaus;Alan, Fuse issues should essentially be reported to FuseSource and not Apache.

I will try with the ASF Camel releases and see if I can reproduce the issue though, as the camel-test-blueprint is also part of ASF and it may have an issue on Windows. ","16/Aug/12 15:51;davsclaus;I have reproduced the WARN of deleting the file on my XP box, of the ASF trunk version of Camel. It could either be in the camel-test-blueprint, or in pojosr that has a open file handle to the file in question, which then cannot be deleted on windows.","17/Aug/12 18:21;alanfoster;Thanks for looking to this Claus

Would you happen to know of any quickfix for this? Or anything I could try to look into to find out the exact cause of the problem?","20/Aug/12 08:22;davsclaus;There is no easy quickfix. 

The issue is that something in pojosr/blueprint/etc. is keeping a file lock on that given JAR, which Windows then refuses to delete. Other OS such as linux/mac etc dont have this issue. And thus its only happens on windows.","20/Aug/12 14:03;davsclaus;The bundle JAR is now written in a separate directory, so we can cleanup the Karaf bundles.

On shutting down the tests there is no longer a 5 sec (+ WARN) on windows.

This is the best we can do so far.",,,,,,,,,,,,,,,,,,,
CamelContextId should be effected when there are more than two camel context in the spring configuration file ,CAMEL-5519,12603950,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,18/Aug/12 09:52,20/Aug/12 02:32,13/Mar/19 22:19,20/Aug/12 02:32,2.10.0,2.9.2,,,,,,,,2.10.1,2.11.0,2.9.3,,camel-spring,,,,,,0,,,,,,,,,,DefaultCamelBeanPostProcessor will try to set the CamelContext property when the bean is instance of CamelContextAware. It will mass up the CamelContext setting when the bean has the property of CamelContextId and there are more than one CamelContext in the Application Context. So We just need to make sure the CamelContextId take effect even the CamelContext is already set to the bean to fix this kind of issue.,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,241391,,,Mon Aug 20 02:32:38 UTC 2012,,,,,,,0|i027l3:,10830,,,,,,,,,"20/Aug/12 02:32;njiang;Applied patch into trunk, camel-2.10.x and camel-2.9.x branches.",,,,,,,,,,,,,,,,,,,,,,,
Multiple calls to CXF factory beans.getFeatures causing multiple logging features to be added,CAMEL-5517,12603859,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dkulp,dkulp,dkulp,17/Aug/12 13:54,17/Aug/12 14:11,13/Mar/19 22:19,17/Aug/12 14:11,,,,,,,,,,2.10.1,2.9.3,,,,,,,,,0,,,,,,,,,"
Each call to getFeatures() is adding another LoggingFeature into the array.  Would be better to add/remove the feature when it's configured.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,241389,,,2012-08-17 13:54:44.0,,,,,,,0|i027kn:,10828,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MQTT Endpoint does not correctly return the MQTT-Payload,CAMEL-5411,12596395,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,rajdavies,ralfkornberger,ralfkornberger,29/Jun/12 13:02,15/Aug/12 17:27,13/Mar/19 22:19,15/Aug/12 17:27,2.10.0,,,,,,,,,2.10.1,2.11.0,,,camel-mqtt,,,,,,0,,,,,,,,,"MQTT Endpoint does not correctly return the MQTT-Payload. It returns the whole MQTT Message (header + payload).

The bug is in line 89 of MQTTEndpoint.java (version 2.11, but also in 2.10)

 exchange.getIn().setBody(body.getData());

must become

 exchange.getIn().setBody(body.toByteArray()); 

because getData() ignores the offset (to skip the MQTT header) set in the body byte array.
","Linux 64bit, JDK 1.6, Mosquitto MQTT Broker",,,,,,,,,,,,,,,,,,,,29/Jun/12 13:05;ralfkornberger;MQTTEndpoint.java.patch;https://issues.apache.org/jira/secure/attachment/12533977/MQTTEndpoint.java.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-06-29 13:13:50.209,,,no_permission,,Moderate,,,,,,,,,,,241284,,,Wed Aug 15 17:27:54 UTC 2012,,,,,,,0|i026xb:,10723,,,,,,,,,29/Jun/12 13:05;ralfkornberger;Patch with bug fixed :-),"29/Jun/12 13:13;davsclaus;Isn't there some headers from MQTT, you would need to map into Camel Message Headers as well?","29/Jun/12 13:31;ralfkornberger;I use Camel to fetch a Message (XML, Protobuf, ...) from the Broker. Using Camel-MQTT, as it is, the message is fetched, but the body still includes the MQTT header (topic and binary stuff before) which I don't want. I only want the payload (=my xml or protobuf stuff). 
Here is an example:

I sent the String 'Test123' via MQTT to Camel. Using the example code from your website 


 from(""mqtt:bar?subscribeTopicName=test.mqtt.topic"").transform(body().convertToString()).bean (myProcessingBean);

I expect body to be 'Test123'. But instead body is something like '0�^C^@^Ktest.mqtt.topicTest123' (the stuff before test.mqtt.topic are nonprintable chars).
So the body is the whole MQTT message instead of just the payload. I makes no sense to have the full MQTT message as body here because you can't really decode/spilt it well
without going deeply into the MQTT implemenation of the the MQTT Client (from org.fusesource.mqtt-client in my case). 
But when you apply the patch, it (in my opinion) sets body corretly to 'Test123'.






","29/Jun/12 14:43;davsclaus;Ralf, yeah your patch makes sense. But then we may also want to map headers from MQTT to Camel Message Headers. So you get both body + headers from MQTT mapped to the Camel Message.

","29/Jun/12 14:43;davsclaus;Rob, can you take a look","13/Jul/12 09:42;rajdavies;Added fix in Subversion: Committed revision 1361126. There's still some weirdness (timing issue) with publishing, which should be addressed in next release of ActiveMQ",15/Aug/12 17:27;davsclaus;Merged to 2.10 branch as well.,,,,,,,,,,,,,,,,,
HBase component does not extract that table name in all cases and HBase runtime version issues.,CAMEL-5506,12603493,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ccorsi,ccorsi,14/Aug/12 19:06,15/Aug/12 15:20,13/Mar/19 22:19,15/Aug/12 15:20,2.10.0,,,,,,,,,2.10.1,2.11.0,,,,,,,,,0,camel-hbase,,,,,,,,"The current hbase component uses the URI getHost method to retrieve the table name but this method returns null if the host name does not conform to the requirements of this method.  For instance, it should include a '.' in the name, or is a ipv4 or ipv6 valid address string.  If the table name is a simple name then the getHost method will return null instead of the name of the table.  This will in turn cause a NPE exception.

The other issue is that if you are using 0.92.x or greater with the current implementation of the camel-hbase component.  An IllegalArgumentException is generated because of an incompatible host:port pair.  This is caused by the fact that the current hbase integration uses 0.90.5 and this will conflict with those versions.

I have a patch that solves both issues but in the second case.  It will require that the user define the specific hbase client version that they need to use.

btw, the camel-hbase component is not available as an option for the Component/s drop down list.
",Any,,,,,,,,,,,,,,,,,,,,14/Aug/12 19:07;ccorsi;hbase.diffs;https://issues.apache.org/jira/secure/attachment/12540924/hbase.diffs,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-08-15 13:57:44.366,,,no_permission,,Novice,,,,,,,,,,,241378,,,Wed Aug 15 15:20:27 UTC 2012,,,Patch Available,,,,0|i027i7:,10817,,,,,,,,,"14/Aug/12 19:07;ccorsi;This is the patch that contains the fixes required for this issue.
","14/Aug/12 19:23;ccorsi;BTW:  This issue has the following workaround.

The table name should include at the very least a '.' in the name.

If using hbase 0.92.x or greater than they need to add the following to their pom file.

{noformat}
	<dependency>
	    <groupId>org.apache.camel</groupId>
	    <artifactId>camel-hbase</artifactId>
            <exclusions>
              <exclusion>
                <groupId>org.apache.hbase</groupId>
                <artifactId>hbase</artifactId>
              </exclusion>
            </exclusions>
	</dependency>

        <dependency>
          <groupId>org.apache.hbase</groupId>
          <artifactId>hbase</artifactId>
          <version>${hbase-version}</version>
        </dependency>
{noformat}

Where base.version is defined.

Note that the patch that I have attached forces the users to define the required hbase client version. 
This might not be necessary in this case since the package will not include the hbase client and the users will need to include the runtime.  Come to think about it, you can just ignore that part of the patch and apply the rest.  Instead, state on the web site that trying to use the default hbase client with 0.92.x or greater will cause an exception.
","15/Aug/12 13:57;davsclaus;Claudio, thanks for the patch.

The pom.xml code above, is that an information if people would upgrade to a newer hbase version that shipped with Camel?
I assume you patch can be applied to the ASF Camel trunk code.

We may be able to upgrade hbase version but i wonder if there was some osgi issues with newer release?","15/Aug/12 14:08;ccorsi;The pom.xml update is only required for users that have a maven project and want to test using camel:run against an already running hbase system.  If the service is using 0.92.x or greater, then the camel:run will produce the illegal argument exception with the not a host:port pair.  Adding the above update to their maven project pom file will resolve that issue.

The original patch that includes changing the hbase to provided is not required in general since the api using the 0.90.5 hbase is the same as the latest version of hbase.

","15/Aug/12 14:33;iocanel;Regarding the provided scope I agree, as it seems that unless there is an exact version match between the client and the server, then there will be problems.

Regarding the getHost() thing, I am not sure I understand what exactly is the problem. AFAIK it doesn't have issues working with simple names too. In fact in the unit tests simple names have been used and they do work fine. Maybe I misunderstood the problem?","15/Aug/12 14:54;davsclaus;Oh we should remember to upon up the osgi feature so it uses a range of [0.9,1)",15/Aug/12 15:20;davsclaus;osgi range widen as well,,,,,,,,,,,,,,,,,
Bridging http endpoints with spaces in content path causes problem when forwarding request,CAMEL-5504,12603429,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,14/Aug/12 10:20,14/Aug/12 10:46,13/Mar/19 22:19,14/Aug/12 10:46,2.10.0,2.9.2,,,,,,,,2.10.1,2.11.0,2.9.3,,camel-ahc,camel-http,camel-jetty,,,,0,,,,,,,,,"Having spaces in the content path in the <from> jetty endpoint that is being bridged causes problem when request is forwarded.

{code}
Caused by: org.apache.camel.RuntimeExchangeException: Cannot analyze the Exchange.HTTP_PATH header, due to: cannot find the right HTTP_BASE_URI on the exchange: Exchange[Message: [Body is instance of org.apache.camel.StreamCache]]
	at org.apache.camel.component.http.helper.HttpHelper.createURL(HttpHelper.java:195)
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,241376,,,2012-08-14 10:20:02.0,,,,,,,0|i027hr:,10815,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Can't unmarshal pgp messages encrypted with ElGamal.,CAMEL-5475,12600548,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,scrybz,scrybz,28/Jul/12 03:52,13/Aug/12 12:26,13/Mar/19 22:19,13/Aug/12 12:26,2.10.0,,,,,,,,,2.10.1,2.11.0,2.9.3,, camel-crypto,,,,,,0,,,,,,,,,"Current strategy for finding the private key is to iterate the secret keychain and matching on the configured email address.  This is incorrect; the secret key chain should be searched by the key id found in the public key encrypted message. What happens now is the DSA signing key is matched instead of the ElGamal decryption key, and this throws java.security.InvalidKeyException.",All environments,14400,14400,,0%,14400,14400,,,,,,,CAMEL-4549,,,,,,,29/Jul/12 01:34;scrybz;patch.txt;https://issues.apache.org/jira/secure/attachment/12538262/patch.txt,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-07-31 08:37:43.195,,,no_permission,,Moderate,,,,,,,,,,,241347,,,Wed Aug 01 04:58:11 UTC 2012,,,Patch Available,,,,0|i027bb:,10786,,,,,,,,,"29/Jul/12 00:40;scrybz;The attached patch fixes the problem.  It passes all existing tests, and also includes tests I've added for ElGamal keys.",29/Jul/12 01:03;scrybz;This patch is cleaner.,"29/Jul/12 01:34;scrybz;My clean-ups on the previously uploaded patch introduced a possible bug where the encrypted stream wouldn't be rewound after finding the private key, but before the decryption.

This is my final answer. This is diffed against the 2.10.0 version, but these files don't seem to be updated in versions later than 2.10.0. ","31/Jul/12 08:37;njiang;@Bryan, 
Can you provide a test patch which shows the issue of looking up the ElGamal keys?
","01/Aug/12 04:58;scrybz;@Willem
The RSA keys used for the existing tests just need to be swapped out for ElGamal keys.

delete pubring.gpg and secring.gpg from  components/camel-crypto/src/test/resources/org/apache/camel/component/crypto/

Then with gnupg, regenerate the rings as ElGamal:
gpg --homedir components/camel-crypto/src/test/resources/org/apache/camel/component/crypto/ --gen-key

it will ask questions as gpg is an interactive program:
For type of key
Pick DSA/ElGamal
For bit length, 1024 is fine
Pick 0 to make the key never expire
confirm yes if asked
For Real Name, use ""Super""
For email, use ""sdude@nowhere.net""
For passphrase, use ""sdude""
Confirm with O for Okay

run the unit test and watch for some failures.
apply the patches I submitted to PGPDataFormat and PGPDataFormatUtil and watch all tests pass.

svn revert the keys, and watch it pass again with the old keys.",,,,,,,,,,,,,,,,,,,
Cxf fallback convert should return the Void.value instead of null,CAMEL-5499,12603162,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,13/Aug/12 02:08,13/Aug/12 03:47,13/Mar/19 22:19,13/Aug/12 03:47,2.10.0,2.9.2,,,,,,,,2.10.1,2.11.0,2.9.3,,camel-cxf,,,,,,0,,,,,,,,,"As Camel will unregister the fallback converter if it convert the value to be null, we should avoid unregistering the fallback converter by returning the Void.value.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,241371,,,Mon Aug 13 03:47:27 UTC 2012,,,,,,,0|i027gn:,10810,,,,,,,,,"13/Aug/12 03:47;njiang;Applied the patch into trunk, camel-2.10.x and camel-2.9.x branches.",,,,,,,,,,,,,,,,,,,,,,,
Replies with Incorrect CorrelationIDs Received After Reinstantiating a Route with ActiveMQ Endpoint and Exclusive Reply Queue,CAMEL-5309,12558157,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,npacemo,npacemo,25/May/12 18:29,09/Aug/12 15:59,13/Mar/19 22:19,04/Jun/12 08:20,2.9.2,,,,,,,,,2.10.0,2.9.3,,,camel-activemq,camel-jms,,,,,0,,,,,,,,,"When I first instantiate the following route, it works as expected. The Replies that come have the right correlation ids, just as Camel has assigned them.

{code}
from(""direct:fetchStateStart"")
.setExchangePattern(ExchangePattern.InOut)
.to(""activemq:queue:tasksQueue?replyTo=completionsQueue"" +
        ""&replyToType=Exclusive"" +
        ""&requestTimeout="" + FETCH_INDEX_TIMEOUT)
.threads(10)
.routeId(""route-001"");
{code}

When this route completes, it is stopped and removed from the camel context. 

When a similar route is instantiated:

{code}
from(""direct:processStateStart"")
.setExchangePattern(ExchangePattern.InOut)
.to(""activemq:queue:tasksQueue?replyTo=completionsQueue"" +
        ""&replyToType=Exclusive"" +
        ""&requestTimeout="" + PROCESS_INDEX_TIMEOUT)
.threads(10)
.routeId(""route-002"");
{code}

Half of the replies come as expected, while the other half results in the following warning: *Reply received for unknown correlationID*.

A workaround for this issues is to use a different *ReplyTo*-queue for each new instantiation of a similar route.

E.g. for the second route, it'll work if:
{code}
from(""direct:processStateStart"")
.setExchangePattern(ExchangePattern.InOut)
.to(""activemq:queue:tasksQueue?replyTo=processedIndecesQueue"" +
        ""&replyToType=Exclusive"" +
        ""&requestTimeout="" + PROCESS_INDEX_TIMEOUT)
.threads(10)
.routeId(""route-002"");
{code}","Java 1.6, ActiveMQ 5.6-SNAPSHOT (used in-memory within a Spring application)",,,,,,,,,,,,,,,CAMEL-5465,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-06-03 15:06:36.092,,,no_permission,,Unknown,,,,,,,,,,,241182,,,Sat Jun 09 10:43:52 UTC 2012,,,,,,,0|i026an:,10621,,,,,,,,,"03/Jun/12 15:06;davsclaus;Why are you doing .threads(10) that dont makes sense, if you dont do any further routing.

Also when you report an issue, then please include more details, and full stacktraces etc.
The Camel team have to spend a lot of time to track down and reproduce peoples issues. So do as much upfront work for us.
For example to create a sample unit test that demonstrates the issue.

","03/Jun/12 15:26;davsclaus;Okay I managed to track down an issue that the reply manager should be disposed when the route is stopped, so a new is re-created when you add the 2nd route using the same reply to queue.
","03/Jun/12 19:25;npacemo;Is .threads(10) makes more sense if the route is:

{code}
from(""direct:processStateStart"")
.setExchangePattern(ExchangePattern.InOut)
.to(""activemq:queue:tasksQueue?replyTo=processedIndecesQueue"" +
        ""&replyToType=Exclusive"" +
        ""&requestTimeout="" + PROCESS_INDEX_TIMEOUT)
.threads(10)
.to(""log:REPLY?level=DEBUG"")
.routeId(""route-002"")
{code}

As to how I reported the issue, I've tried to provide the minimum information that can describe the issue, and I was waiting to add more (e.g. a unit test) upon request. If you say you need it, I'm willing to invest the time to provide you what you need to ease the troubleshooting.","04/Jun/12 08:19;davsclaus;I have committed a fix and backported to 2.9 branch.

If you could give the 2.9 SNAPSHOT branch a test that would be great.","09/Jun/12 10:31;npacemo;I'm still reproducing the issue with 2.9-SNAPSHOT.

I expect 5 replies, but instead I receive 2 and 3 are with incorrect correlation IDs:
{code}
2012-06-09 12:51:56,231 [Camel (camel-1) thread #13 - PersistentQueueReplyManager[completionsQueue]-1] WARN  org.apache.camel.component.jms.reply.PersistentQueueReplyManager - Reply received for unknown correlationID [ID-Vladimir-Tsvetkovs-MacBook-Pro-local-57270-1339232420004-0-507]. The message will be ignored: ActiveMQTextMessage {commandId = 5, responseRequired = true, messageId = ID:Vladimir-Tsvetkovs-MacBook-Pro.local-57252-1339232410422-1:2:1:1:1, originalDestination = null, originalTransactionId = null, producerId = ID:Vladimir-Tsvetkovs-MacBook-Pro.local-57252-1339232410422-1:2:1:1, destination = queue://completionsQueue, transactionId = null, expiration = 0, timestamp = 1339235516008, arrival = 0, brokerInTime = 1339235516008, brokerOutTime = 1339235516011, correlationId = ID-Vladimir-Tsvetkovs-MacBook-Pro-local-57270-1339232420004-0-507, replyTo = queue://completionsQueue, persistent = true, type = null, priority = 4, groupID = null, groupSequence = 0, targetConsumerId = null, compressed = false, userID = null, content = null, marshalledProperties = org.apache.activemq.util.ByteSequence@300eff0c, dataStructure = null, redeliveryCounter = 0, size = 1248, properties = {breadcrumbId=ID-Vladimir-Tsvetkovs-MacBook-Pro-local-57270-1339232420004-0-500, CamelJmsDeliveryMode=2, taskType=processIndexTask}, readOnlyProperties = true, readOnlyBody = true, droppable = false, text = {""fiscalYear"":2011,""indexCompression"":""ZIP"",""...""quarter"":3}}
2012-06-09 13:06:29,605 [Camel (camel-1) thread #33 - Threads] INFO  PROCESS_INDICES_STATE.RESPONSE - Exchange[ExchangePattern:InOut, BodyType:String, Body:{""fiscalYear"":2011,""indexCompression"":""ZIP"",""indexType"":""COMPANY"",""quarter"":4}]
2012-06-09 13:16:48,811 [Camel (camel-1) thread #13 - PersistentQueueReplyManager[completionsQueue]-1] WARN  org.apache.camel.component.jms.reply.PersistentQueueReplyManager - Reply received for unknown correlationID [ID-Vladimir-Tsvetkovs-MacBook-Pro-local-57270-1339232420004-0-506]. The message will be ignored: ActiveMQTextMessage {commandId = 5, responseRequired = true, messageId = ID:Vladimir-Tsvetkovs-MacBook-Pro.local-57252-1339232410422-1:4:1:1:1, originalDestination = null, originalTransactionId = null, producerId = ID:Vladimir-Tsvetkovs-MacBook-Pro.local-57252-1339232410422-1:4:1:1, destination = queue://completionsQueue, transactionId = null, expiration = 0, timestamp = 1339237008806, arrival = 0, brokerInTime = 1339237008806, brokerOutTime = 1339237008809, correlationId = ID-Vladimir-Tsvetkovs-MacBook-Pro-local-57270-1339232420004-0-506, replyTo = queue://completionsQueue, persistent = true, type = null, priority = 4, groupID = null, groupSequence = 0, targetConsumerId = null, compressed = false, userID = null, content = null, marshalledProperties = org.apache.activemq.util.ByteSequence@482163cd, dataStructure = null, redeliveryCounter = 0, size = 1248, properties = {breadcrumbId=ID-Vladimir-Tsvetkovs-MacBook-Pro-local-57270-1339232420004-0-500, CamelJmsDeliveryMode=2, taskType=processIndexTask}, readOnlyProperties = true, readOnlyBody = true, droppable = false, text = {""fiscalYear"":2011,""indexCompression"":""ZIP"",""...""quarter"":2}}
2012-06-09 13:27:39,280 [Camel (camel-1) thread #34 - Threads] INFO  PROCESS_INDICES_STATE.RESPONSE - Exchange[ExchangePattern:InOut, BodyType:String, Body:{""fiscalYear"":2012,""indexCompression"":""ZIP"",""indexType"":""COMPANY"",""quarter"":1}]
2012-06-09 13:28:15,364 [Camel (camel-1) thread #13 - PersistentQueueReplyManager[completionsQueue]-1] WARN  org.apache.camel.component.jms.reply.PersistentQueueReplyManager - Reply received for unknown correlationID [ID-Vladimir-Tsvetkovs-MacBook-Pro-local-57270-1339232420004-0-508]. The message will be ignored: ActiveMQTextMessage {commandId = 5, responseRequired = true, messageId = ID:Vladimir-Tsvetkovs-MacBook-Pro.local-57252-1339232410422-1:6:1:1:1, originalDestination = null, originalTransactionId = null, producerId = ID:Vladimir-Tsvetkovs-MacBook-Pro.local-57252-1339232410422-1:6:1:1, destination = queue://completionsQueue, transactionId = null, expiration = 0, timestamp = 1339237695326, arrival = 0, brokerInTime = 1339237695327, brokerOutTime = 1339237695328, correlationId = ID-Vladimir-Tsvetkovs-MacBook-Pro-local-57270-1339232420004-0-508, replyTo = queue://completionsQueue, persistent = true, type = null, priority = 4, groupID = null, groupSequence = 0, targetConsumerId = null, compressed = false, userID = null, content = null, marshalledProperties = org.apache.activemq.util.ByteSequence@bd53277, dataStructure = null, redeliveryCounter = 0, size = 1248, properties = {breadcrumbId=ID-Vladimir-Tsvetkovs-MacBook-Pro-local-57270-1339232420004-0-500, CamelJmsDeliveryMode=2, taskType=processIndexTask}, readOnlyProperties = true, readOnlyBody = true, droppable = false, text = {""fiscalYear"":2011,""indexCompression"":""ZIP"",""...""quarter"":1}}
{code}
","09/Jun/12 10:43;davsclaus;Whats your timeout setting? 

And do you do anything to cancel the requests on the other party? If they send back old replies, then Camel logs that as WARN.",,,,,,,,,,,,,,,,,,
HttpProducer should close temporary file in CachedOutputStream when the IOException is thrown,CAMEL-5487,12601642,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,07/Aug/12 00:20,08/Aug/12 06:30,13/Mar/19 22:19,08/Aug/12 06:30,2.10.0,2.9.2,,,,,,,,2.10.1,2.11.0,2.9.3,,camel-http,,,,,,0,,,,,,,,,"Here is the mail thread about it.
 http://camel.465427.n5.nabble.com/HTTP4-HttpProducer-close-temporary-file-in-CachedOutputStream-tp5716885.html",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,241359,,,Wed Aug 08 06:30:34 UTC 2012,,,,,,,0|i027dz:,10798,,,,,,,,,"08/Aug/12 06:30;njiang;Applied the patch into trunk, camel-2.10.x and camel-2.9.x branches.",,,,,,,,,,,,,,,,,,,,,,,
camel-example-gae silently fails (needs updates to use latest CamelHttpTransportServlet),CAMEL-5454,12599325,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,jaysonraymond,jaysonraymond,18/Jul/12 19:17,02/Aug/12 08:16,13/Mar/19 22:19,02/Aug/12 08:16,2.10.0,,,,,,,,,2.10.1,2.11.0,2.9.3,,examples,,,,,,0,,,,,,,,,"Example silently fails.
It depends on CamelHttpTransportServlet which appears to have changed at 2.7 -  Spring context initializing RouteBuilder is never read.
Following steps were taken in 2.10 to get example to function again:

1) web.xml: needs CamelHttpTransportServlet configuration as it is on http://camel.apache.org/servlet-tomcat-example.html including adding Spring ContextLoaderListener.

2) pom.xml: Needs the following dependency added to access Spring ContextLoaderListener:

        <!-- we need spring web to read context -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-web</artifactId>
            <version>3.0.7.RELEASE</version>
        </dependency>

",All,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-07-26 09:17:29.441,,,no_permission,,Novice,,,,,,,,,,,241327,,,Thu Jul 26 09:17:29 UTC 2012,,,,,,,0|i0276v:,10766,Regression,,,,,,,,"26/Jul/12 09:17;njiang;I just committed a fix camel context loading issue of camel-example-gae. It also fix a log issue of camel-exmple-gae.
When I tested the example on the GAE, I found there is another issue CAMEL-5470 of GAE task. I will try to fix it shortly.",,,,,,,,,,,,,,,,,,,,,,,
camel-example-gae gtask doesn't work,CAMEL-5470,12600285,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,26/Jul/12 09:19,02/Aug/12 08:15,13/Mar/19 22:19,02/Aug/12 08:15,2.10.0,,,,,,,,,2.10.1,2.11.0,2.9.3,,camel-gae,,,,,,0,,,,,,,,,"I just checked the log and found the gtask doesn't work due to 
{code}
Caused by: java.lang.ClassNotFoundException: javax.xml.transform.stax.StAXSource
	at com.google.apphosting.runtime.security.UserClassLoader.loadClass(UserClassLoader.java:451)
{code}
",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-07-26 16:57:52.79,,,no_permission,,Unknown,,,,,,,,,,,241342,,,Fri Jul 27 04:14:00 UTC 2012,,,,,,,0|i027a7:,10781,,,,,,,,,26/Jul/12 10:37;njiang;Just work around this issue by doing the input stream to document transformation without using XmlConvertor.,"26/Jul/12 16:57;bvahdat;Not sure if the removal of the security-constraint inside web.xml was really intentional:

http://svn.apache.org/viewvc/camel/trunk/examples/camel-example-gae/src/main/webapp/WEB-INF/web.xml?r1=1365917&r2=1365916&pathrev=1365917","27/Jul/12 04:14;njiang;Sorry, it should be committed and I was change the web.xml only for test.
I will commit a quick fix for it shortly.
",,,,,,,,,,,,,,,,,,,,,
IOConverter.toInputStream opens a BufferReader which will never be closed,CAMEL-5461,12599983,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,funkmutterdekka,funkmutterdekka,24/Jul/12 12:16,26/Jul/12 07:18,13/Mar/19 22:19,26/Jul/12 07:18,2.10.0,,,,,,,,,2.10.1,2.11.0,2.9.3,,camel-core,,,,,,0,,,,,,,,,If called with a non-null charset IOConvert.toInputStream returns a InputStream which will never close the opened BufferedReader.,,,,,,,,,,,,,,,,,,,,,24/Jul/12 12:20;funkmutterdekka;camel-5461.patch;https://issues.apache.org/jira/secure/attachment/12537681/camel-5461.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-07-26 07:18:18.526,,,no_permission,,Novice,,,,,,,,,,,241334,,,Thu Jul 26 07:18:18 UTC 2012,,,Patch Available,,,,0|i0278f:,10773,,,,,,,,,24/Jul/12 12:20;funkmutterdekka;Patch to solve the issue.,"26/Jul/12 07:18;njiang;Applied the patch into trunk, camel-2.10.x branch and camel-2.9.x branch with thanks to Patrick. I also added the implementation of reset method.",,,,,,,,,,,,,,,,,,,,,,
mock endpoint should not add the expect header check task every time we call the expectedHeaderReceived(),CAMEL-5440,12598509,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,12/Jul/12 08:06,24/Jul/12 01:14,13/Mar/19 22:19,24/Jul/12 01:14,2.10.0,,,,,,,,,2.10.1,2.11.0,2.9.3,,camel-core,,,,,,0,,,,,,,,,"If the message header value can just be consumed once, the mockEndpoint will complain the header value is null in second check, even the header value is checked rightly once.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,241313,,,Tue Jul 24 01:14:56 UTC 2012,,,,,,,0|i0273r:,10752,,,,,,,,,"24/Jul/12 01:14;njiang;Applied patch into trunk, camel 2.10.x and camel 2.9.x branch.",,,,,,,,,,,,,,,,,,,,,,,
Camel error handler stop routing on original route when an exception occur in the splitter using jaxb marshalled objects ,CAMEL-5164,12550582,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,lfoppiano,lfoppiano,11/Apr/12 21:12,17/Jul/12 22:12,13/Mar/19 22:19,18/Apr/12 16:51,2.9.1,,,,,,,,,2.10.0,2.9.3,,,camel-core,camel-jaxb,,,,,0,,,,,,,,,"I've been digging into this problem for some time now and I haven't find why this is happening. I'm using camel 2.9.1. 
The whole problems is quite complicated to explain, I've created a test that reproduce the error that might be more useful.

I have a route that get some XML and transform it with a processor in an object generated from XSD with JAXB. After that the object (transported as XML) is then split based a certain logic. The route uses the deadLetterCHannel error handler to a 'reject' endpoint. 

Now, sometimes when I get some invalid character in the input file (0x10 eg.) (in my processor I don't polish them), the splitter will crash but, instead of detouring only the messages that contains errors to the deadLetterChanne, it will detour every message coming after the error occurs.

I know that I can fix the problem in the processor by removing the invalid characters, but in my opinion, camel should be more robust and doesn't block the entire processing for a ""non fatal"" error. Or I should use a different way for doing what I'm doing... 

Please have a look at the code and let me know, I think is a bug but I'm waiting for your opinion.

Thanks in advance ",,,,,,,,,,,,,,,,,,,,CAMEL-5172,13/Apr/12 06:09;lfoppiano;SplitterAndExceptionRouteTest.java;https://issues.apache.org/jira/secure/attachment/12522533/SplitterAndExceptionRouteTest.java,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-04-13 05:16:20.075,,,no_permission,,Unknown,,,,,,,,,,,235446,,,Tue Jul 17 22:12:41 UTC 2012,,,,,,,0|i025ef:,10476,,,,,,,,,"13/Apr/12 05:16;davsclaus;Luca thanks for reporting.

Do you mind re-attaching the test source code, and mark [x] in grant license to Apache. Then we can use that in Camel as an unit test and add to camel-jaxb so we can test against regressions.",13/Apr/12 06:28;davsclaus;I have re-produced the issue and am working on a fix.,15/Apr/12 12:19;davsclaus;CAMEL-5172 fixes this,"15/Apr/12 15:09;davsclaus;This is now fixed by CAMEL-5172. However CAMEL-5172 has an API change, which makes it more harder to backport to the 2.9 branch. We may consider doing this despite the API change as its mostly internal facing. And for people using 3rd party type converters they most often use the @Converter annotation that is not affected by the API change.

If not we would need to implement a special fix for this in the 2.9 branch.",18/Apr/12 16:51;davsclaus;Should be fixed in the next 2.9 release.,"17/Jul/12 22:12;lfoppiano;It has been implemented in 2.10.0. This fix made my day! :) 

cool stuff!",,,,,,,,,,,,,,,,,,
"CxfPayloadConverter converts to NodeList by default, affecting performance",CAMEL-5449,12598987,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dkulp,dkulp,dkulp,16/Jul/12 15:54,16/Jul/12 17:40,13/Mar/19 22:19,16/Jul/12 17:40,2.9.2,,,,,,,,,2.10.1,2.9.3,,,camel-cxf,,,,,,0,,,,,,,,,"
The first thing CxfPayloadConverter tries to do is convert the payload to a NodeList.  When used in combination of something like XSLT which would produce a ""String"", this results in a full DOM being created for the String.   With the streaming support in the CXF component, it should FIRST attempt to convert to ""Source"" and use that.   This can then be a StreamSource or similar that can be streamed directly.

",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,241322,,,2012-07-16 15:54:26.0,,,,,,,0|i0275r:,10761,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel-Blueprint should wait for camel-core to be started since there is a strong dependency,CAMEL-5451,12598996,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gnt,gnt,gnt,16/Jul/12 16:58,16/Jul/12 17:19,13/Mar/19 22:19,16/Jul/12 17:19,,,,,,,,,,2.10.1,2.11.0,2.9.3,,,,,,,,0,,,,,,,,,"When a camel/blueprint bundle is started without camel-core being started previously, there is a problem where the camel context factory bean tries to access the {{properties}} component, which is only available when {{camel-core}} is started.

We need to ensure that the blueprint definitions created by the namespace handler also contains the needed reference to the {{properties}} component in order to make sure that blueprint will always wait for {{camel-core}} to be started (and the properties component actually available) before initializing the camel context.
",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,241324,,,2012-07-16 16:58:46.0,,,,,,,0|i02767:,10763,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Dynamically added SEDA-route is not working,CAMEL-5432,12597991,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,bvahdat,hlang,hlang,09/Jul/12 08:05,09/Jul/12 16:12,13/Mar/19 22:19,09/Jul/12 16:12,2.10.0,,,,,,,,,2.10.1,2.11.0,2.9.3,,camel-core,,,,,,0,,,,,,,,,"Dynamically removing and adding a SEDA-route creates a not working route in Camel 2.10.0.
It is working in 2.9.2.

Test-Code:
{code}
public class DynamicRouteTest extends CamelTestSupport {

    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {

            @Override
            public void configure() throws Exception {
                from(""seda:in"").id(""sedaToMock"").to(""mock:out"");
            }
        };
    }
    
    @Test
    public void testDynamicRoute() throws Exception {
        MockEndpoint out = getMockEndpoint(""mock:out"");
        out.expectedMessageCount(1);
        
        template.sendBody(""seda:in"", ""Test Message"");
        
        out.assertIsSatisfied();
        
        CamelContext camelContext = out.getCamelContext();
        camelContext.stopRoute(""sedaToMock"");
        camelContext.removeRoute(""sedaToMock"");
        
        camelContext.addRoutes(createRouteBuilder());
        out.reset();
        out.expectedMessageCount(1);
        
        template.sendBody(""seda:in"", ""Test Message"");
        
        out.assertIsSatisfied();
        
    }
} 

{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-07-09 13:16:13.612,,,no_permission,,Unknown,,,,,,,,,,,241305,,,Mon Jul 09 16:12:27 UTC 2012,,,,,,,0|i0271z:,10744,,,,,,,,,09/Jul/12 13:16;bvahdat;CAMEL-5261 has broken the regression.,09/Jul/12 16:12;bvahdat;Thanks for reporting and providing the unit-test.,,,,,,,,,,,,,,,,,,,,,,
Simple does not handle empty values in predicates properly,CAMEL-5415,12597332,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,m0zgster,m0zgster,03/Jul/12 19:56,04/Jul/12 07:24,13/Mar/19 22:19,04/Jul/12 07:24,2.10.0,2.9.0,2.9.1,2.9.2,,,,,,2.10.1,2.9.3,,,camel-core,,,,,,0,,,,,,,,,"Example code:
{code:xml}
...
<choice>
    <when>
        <simple>${property.someProperty} == ''</simple>
        ...
    </when>
...
{code}

Error message: right must be specified",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-07-04 07:24:19.994,,,no_permission,,Unknown,,,,,,,,,,,241288,,,Wed Jul 04 07:24:19 UTC 2012,,,,,,,0|i026y7:,10727,,,,,,,,,04/Jul/12 07:24;davsclaus;Thanks for reporting.,,,,,,,,,,,,,,,,,,,,,,,
Scala Archetype with incorrect Maven Eclipse configuration,CAMEL-5417,12597356,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,bruno.borges,bruno.borges,03/Jul/12 22:17,04/Jul/12 01:52,13/Mar/19 22:19,04/Jul/12 01:52,2.10.0,,,,,,,,,2.10.1,2.11.0,,,camel-scala,,,,,,0,,,,,,,,,"The Scala archetype (camel-archetype-scala) has incorrect configuration for the Maven Eclipse Plugin to generate Eclipse files integrated with the Scala IDE.

classpath, nature and build commands 

Source: http://www.assembla.com/wiki/show/scala-ide/With_Maven_CLI",,,,,,,,,,,,,,,,,,,,,03/Jul/12 22:17;bruno.borges;patch.diff;https://issues.apache.org/jira/secure/attachment/12534994/patch.diff,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-07-04 01:52:08.043,,,no_permission,,Unknown,,,,,,,,,,,241290,,,Wed Jul 04 01:52:08 UTC 2012,,,Patch Available,,,,0|i026yn:,10729,,,,,,,,,04/Jul/12 01:52;njiang;Applied patch with thanks to Bruno.,,,,,,,,,,,,,,,,,,,,,,,
"ObjectAlreadyExistsException when ""redeploying"" routes that uses CronScheduledRoutePolicy",CAMEL-5412,12596403,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,pontus.ullgren,pontus.ullgren,29/Jun/12 13:44,29/Jun/12 15:01,13/Mar/19 22:19,29/Jun/12 15:01,2.10.0,2.9.2,,,,,,,,2.10.1,2.9.3,,,camel-quartz,,,,,,0,,,,,,,,,"When a route that has a CronScheduledRoutePolicy is removed it does not properly clean up the quartz jobs. 

The result (apart from possible memory leak) is that if the route is removed from the context and then readded with the same route id a ObjectAlreadyExistsException.


This is done using the following steps.
1. Stop the route
2. Remove the route (and it's endpoints) from the context.
3. (Re)add the route to the context using the same name.

Attached is a testcase that shows the problem.


I've solved this by adding my own implementation of onRemove (that calls doStop()) to CronScheduledRoutePolicy.
",,,,,,,,,,,,,,,,,,,,,29/Jun/12 13:45;pontus.ullgren;CAMEL-5412.zip;https://issues.apache.org/jira/secure/attachment/12533982/CAMEL-5412.zip,29/Jun/12 13:50;pontus.ullgren;CronScheduledRoutePolicy.patch;https://issues.apache.org/jira/secure/attachment/12533984/CronScheduledRoutePolicy.patch,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-06-29 15:01:21.646,,,no_permission,,Unknown,,,,,,,,,,,241285,,,Fri Jun 29 15:01:21 UTC 2012,,,Patch Available,,,,0|i026xj:,10724,,,,,,,,,29/Jun/12 13:45;pontus.ullgren;Unit testcase,"29/Jun/12 13:50;pontus.ullgren;Simple patch that ""works for me""(tm)",29/Jun/12 15:01;davsclaus;Thanks for the patch.,,,,,,,,,,,,,,,,,,,,,
Not all RoutePolicy callback methods are invoked,CAMEL-5401,12596063,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,arubtsov,arubtsov,27/Jun/12 09:48,29/Jun/12 11:46,13/Mar/19 22:19,29/Jun/12 11:46,2.10.0,2.9.2,,,,,,,,2.10.1,2.9.3,,,camel-core,camel-spring,,,,,0,,,,,,,,,"I am looking for a way to get notified when route is being stopped/started (resumed/suspended). I have implemented trivial logging _RoutePolicy_ (extending from _RoutePolicySupport_). However, during my tests I found that only _onInit_, _onExchangeBegin_ and _onExchangeDone_ methods are invoked. I tried both approaches - stopping/starting and suspending/resuming, but neither one worked.

Route state is being handled from another thread using ""CamelContext.*Route"" methods group. 

I am using SpringCamelApplicationContext. Route is configured using: _routePolicyRef_ attribute of _route_ tag.

I am fairly new to Camel. Let me know if I am missing something. Thanks.","Win 7 x64, jdk 7u4",,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-06-29 08:51:36.95,,,no_permission,,Unknown,,,,,,,,,,,241274,,,Fri Jun 29 08:51:36 UTC 2012,,,,,,,0|i026v3:,10713,,,,,,,,,"29/Jun/12 08:51;davsclaus;Thanks for reporting.

Yeah I just spotted a bug with the routePolicyRef not invoking certain callbacks.
It works in Java DSL though, so its an issue when using the routePolicyRef as you would do in Spring XML.",,,,,,,,,,,,,,,,,,,,,,,
MinaProducer does not disconnect on response timeouts,CAMEL-5404,12596086,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,thxmasj,thxmasj,27/Jun/12 13:33,29/Jun/12 08:29,13/Mar/19 22:19,29/Jun/12 08:28,2.9.2,,,,,,,,,2.10.1,2.8.6,2.9.3,,camel-mina,,,,,,0,,,,,,,,,"When MinaProducer is configured with {noformat}sync=true&disconnect=true&disconnectOnNoReply=true&timeout=X{noformat} and a timeout occurs, the connection is not disconnected.

First of all disconnectOnNoReply only applies to consumers, which can be (and was) very confusing. Allthough this is according to documentation.

Secondly this might (and did!) lead to wrong response messages set on an Exchange. The following scenario:
1. Client sends a request and waits for a response (InOut) on exchange A.
2. Client times out waiting for a response after X milliseconds.
3. Client sends another request on exchange B.
4. Server sends the response for exchange A.
5. Client gets response for exchange A on exchange B (disaster!).

This happens because the producer reuses exchange A's connection for exchange B, because it was not disconnected when exchange A timed out.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-06-29 08:28:52.099,,,no_permission,,Unknown,,,,,,,,,,,241277,,,Fri Jun 29 08:29:09 UTC 2012,,,,,,,0|i026vr:,10716,,,,,,,,,"29/Jun/12 08:28;davsclaus;Thanks for reporting.

Fell free to give the 2.9 branch a test spin on your system.",29/Jun/12 08:29;davsclaus;Applied fix to camel-mina2 on 2.10 branch as well.,,,,,,,,,,,,,,,,,,,,,,
Exchange's headers lost after pass through dynamicRouter if the consume from activemq,CAMEL-5381,12595207,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,somchaij,somchaij,20/Jun/12 05:05,25/Jun/12 10:16,13/Mar/19 22:19,20/Jun/12 07:57,2.10.0,2.8.5,2.9.2,,,,,,,2.10.0,2.8.6,2.9.3,,camel-activemq,,,,,,0,,,,,,,,,"Please see the unit test below, if consume from other endpoint such as direct, things work properly but does not when consume from activemq",,,,,,,,,,,,,,,,,,,,,20/Jun/12 05:05;somchaij;DynamicRoutersWithJMSMessageLostHeadersIssueTest.java;https://issues.apache.org/jira/secure/attachment/12532646/DynamicRoutersWithJMSMessageLostHeadersIssueTest.java,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-06-20 06:45:16.704,,,no_permission,,Unknown,,,,,,,,,,,241254,,,Mon Jun 25 10:16:57 UTC 2012,,,,,,,0|i026qn:,10693,,,,,,,,,20/Jun/12 06:45;davsclaus;Try with 2.9.3 or 2.10 as it should be fixed.,20/Jun/12 07:02;somchaij;I try this unit test over the trunk (2.10-SNAPSHOT) and it's failed,20/Jun/12 07:57;davsclaus;Fixed now,"20/Jun/12 07:58;davsclaus;A workaround is to convert the message to a String prior to setting the header, eg

.convertBodyTo(String.class)","20/Jun/12 08:37;somchaij;Can you also, give me the example on how this workaround being used ?","20/Jun/12 09:14;davsclaus;Yes just add the piece of code from above, before you do the .setHeader","20/Jun/12 09:31;somchaij;I try with version 2.9.2, does not seem to be the workaround., can you show me more of the example ? or explanation why convert the body to String class can help on this. :)","20/Jun/12 13:47;davsclaus;The convert will transform the message from JmsMessage to DefaultMessage. And the bug was in JmsMessage with the header lost, when using the dynamic eip pattern (also the routing slip eip as well).",20/Jun/12 14:01;davsclaus;Fixed this in jcr and spring-integration components as well.,"21/Jun/12 07:53;somchaij;Seem like ConvertBodyProcessor does not changes the Message type (from JMSMessage to DefaultMessage), then I found this workaround instead (used of class SetBodyProcessor)

.setBody(body(String.class))

Any mistakes please do correct me.",21/Jun/12 07:55;davsclaus;Convert body has been fixed to act like setBody in a later release,"25/Jun/12 10:12;somchaij;Just curios, will this actually be fixed in 2.10.0 (from your update of the ""Fix Version/s"" field) ? (did not see the source code from tag 2.10) (OR you will then update the tag of 2.10 to newer revision ?)","25/Jun/12 10:16;davsclaus;2.10 has not been released. There was a RC but its been cancelled, and a new RC is being cut later today/tomorrow. So yes this fix will be in the 2.10 release when its GA.",,,,,,,,,,,
specify Export-Package version for wrap:mvn:org.fusesource.leveldbjni,CAMEL-5391,12595734,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ffang,ffang,ffang,25/Jun/12 01:03,25/Jun/12 01:07,13/Mar/19 22:19,25/Jun/12 01:07,,,,,,,,,,2.10.0,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,241264,,,Mon Jun 25 01:07:52 UTC 2012,,,,,,,0|i026sv:,10703,,,,,,,,,"25/Jun/12 01:07;ffang;commit fix
http://svn.apache.org/viewvc?rev=1353371&view=rev",,,,,,,,,,,,,,,,,,,,,,,
Camel features file doesn't validate,CAMEL-5360,12560250,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,muellerc,muellerc,11/Jun/12 21:55,20/Jun/12 20:01,13/Mar/19 22:19,20/Jun/12 03:36,2.9.2,,,,,,,,,2.10.0,,,,karaf,,,,,,0,,,,,,,,,"If you execute
$camel/platforms/karaf>mvn clean install -Pvalidate

it fails in the feature definition validation for the following components:
camel-quickfix
camel-cxf
camel-cdi
",,,,,,,,,,,,,,,,,,KARAF-1564,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-06-12 02:47:08.793,,,no_permission,,Unknown,,,,,,,,,,,241233,,,Wed Jun 20 08:12:51 UTC 2012,,,,,,,0|i026lz:,10672,,,,,,,,,"12/Jun/12 02:47;njiang;camel-quickfix
quickfix 1.5.2_1 bundle is on the way, we could wait for it a while.

camel-cxf
Karaf features validate plugin cannot load the full features which was included. As the camel-itest-osgi can vaild the CXF related feature works, we can revisit it after fixing the issue of validate plugin.

camel-cdi
For the camel-cdi, current we don't have the cdi container works in OSGi,
I also checked the code of camel-cdi, it is related on Apache detaspike, we may need some time to get it work with other cdi container. ","12/Jun/12 11:15;davsclaus;Okay the validation now only fails on camel-cxf.
I guess the problem lies in Apache CXF itself, as we use the cxf and cxf-spec features.",17/Jun/12 07:02;njiang;I think we can resolve this issue as camel-cxf feature validation is do by camel-itest-osgi.,17/Jun/12 10:27;muellerc;I sent a mail to dev@ and asked JB and Dan to have a look into the CXF feature file and/or the maven-feature-plugin. The real issue should be solved (also if it's not a Camel issue) because we using it and it doesn't work anymore for us for the camel-cxf feature.,20/Jun/12 02:10;hadrian;The camel-cxf feature validation still fails and caused the release builds to fail. Looking into it.,"20/Jun/12 03:36;hadrian;Not sure why this issue was marked as fixed. Adding explicit dependencies to the relevant cxf features fixes the validation problem, although it shouldn't have been necessary. There may be an issue with transitive feature dependencies.","20/Jun/12 08:12;njiang;The validation issue is caused by the validate plugin, even you are using the latest patch karaf feature plugin. The CXF 2.6.1 feature work out of box.
I already fix the cxf feature validation issue in 2.6.2-SNAPSHOT this week against the patched karaf feature plugin.",,,,,,,,,,,,,,,,,
DefaultJettyHttpBinding should not convert binary HTTP body,CAMEL-5367,12560613,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,metatech,metatech,14/Jun/12 09:22,18/Jun/12 13:55,13/Mar/19 22:19,18/Jun/12 13:55,2.6.0,,,,,,,,,2.10.0,2.8.6,2.9.3,,camel-jetty,,,,,,0,,,,,,,,,"In class DefaultJettyHttpBinding, method ""extractResponseBody"", any non-Java HTTP body is considered as string.
This corrupts binary files such as images when camel-jetty is used as a proxy http://camel.apache.org/how-to-use-camel-as-a-http-proxy-between-a-client-and-server.html
Only bodies with MIME types of non-binary data should be converted to strings.
Method ""doWriteDirectResponse"" of class ""DefaultHttpBinding"" (in camel-http) converts it again, which corrupts it even more.
",,,,,,,,,,,,CAMEL-5274,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-06-15 07:16:40.706,,,no_permission,,Moderate,,,,,,,,,,,241240,,,Mon Jun 18 13:55:54 UTC 2012,,,,,,,0|i026nj:,10679,,,,,,,,,"15/Jun/12 07:16;davsclaus;Can you try with latest Camel releases as we say on the support page
http://camel.apache.org/support

Also what are the exact HTTP header / body you send to the Camel jetty endpoint? The HTTP headers need to indiciate its binary data.","15/Jun/12 09:53;metatech;Claus,

I created the following route :
        <route id=""proxy-console"">
            <from uri=""jetty:http://0.0.0.0:9007/console/system/console?matchOnUriPrefix=true&amp;chunked=true""/>
            <to uri=""jetty:http://localhost:8181/system/console?bridgeEndpoint=true&amp;throwExceptionOnFailure=false""/>
        </route>

And I call the following URL :
http://localhost:9007/console/system/console/res/flags/en.gif
which is corrupted.

The content-type is ""image/gif"".

CAMEL-5274 is probably the same problem.
",15/Jun/12 10:31;davsclaus;Can you try with chunked=false,"15/Jun/12 11:21;metatech;The original file (via direct URL) is 367 bytes.
With a camel-jetty proxy :
- chunked=false -> 358 bytes (1 character set conversion only)
- chunked=true -> 658 bytes (2 character set conversions)
","18/Jun/12 13:55;davsclaus;Now fixed when chunked=false as well.
This together with CAMEL-5274 fixes this all together.",,,,,,,,,,,,,,,,,,,
NPE when using bare SOAP parameter binding with payload mode,CAMEL-5331,12559267,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,gertvanthienen,gertvanthienen,04/Jun/12 20:35,15/Jun/12 21:47,13/Mar/19 22:19,15/Jun/12 21:47,2.10.0,2.8.5,2.9.2,,,,,,,2.10.0,2.8.6,2.9.3,,camel-cxf,,,,,,0,,,,,,,,,"When combining a webservice that uses bare SOAP parameter binding with payload mode in camel-cxf, you get this NullPointerException:

{noformat}
java.lang.NullPointerException
        at org.apache.camel.component.cxf.CxfEndpoint$CamelCxfClientImpl.setParameters(CxfEndpoint.java:877)
        at org.apache.cxf.endpoint.ClientImpl.doInvoke(ClientImpl.java:512)
        at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:457)
        at org.apache.camel.component.cxf.CxfProducer.process(CxfProducer.java:112)
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
...
{noformat}",,,,,,,,,,,,,,,,,,,,,04/Jun/12 20:38;gertvanthienen;0001-Fix-for-bare-SOAP-binding-camel-cxf-payload-mode-NPE.patch;https://issues.apache.org/jira/secure/attachment/12530855/0001-Fix-for-bare-SOAP-binding-camel-cxf-payload-mode-NPE.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-06-15 14:14:39.136,,,no_permission,,Unknown,,,,,,,,,,,241204,,,Fri Jun 15 21:47:26 UTC 2012,,,Patch Available,,,,0|i026fj:,10643,,,,,,,,,"04/Jun/12 20:38;gertvanthienen;I have added a unit test and a (very simplistic) fix for this problem ready in a local git branch, but because I'm not that familiar with the CXF and camel-cxf codebase, I'm attaching it to this issue first before committing it so other people can take a look or perhaps suggest a better solution.","15/Jun/12 14:14;njiang;@Gert,
The patch looks good, please go ahead to apply it into the trunk.","15/Jun/12 15:47;davsclaus;Willem, gert is on vacation. Can you commit this, so we get it in the 2.10 release that Hadrian is cutting early next week.",15/Jun/12 21:47;hadrian;Thanks Gert for the patch,,,,,,,,,,,,,,,,,,,,
Cannot find resource in classpath using OSGi blueprint,CAMEL-5223,12552807,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,tsh,tsh,26/Apr/12 07:46,15/Jun/12 15:46,13/Mar/19 22:19,15/Jun/12 15:46,2.9.2,,,,,,,,,2.10.0,2.9.3,,,camel-blueprint,,,,,,0,,,,,,,,,"I switched from Apache Camel version 2.8.4 (in ServiceMix 4.4.1) to the most recent version 2.9.2. Resource loading in 2.8.4 worked well, but not in the named release.

Find attached a small test case that uses XSLT and String-Template Endpoints. Neither of them can load their resource from the separate bundle.

# Install Apache ServiceMix 4.4.1
# Configure ServiceMix to use Apache Camel 2.9.2 (see {{etc/org.apache.karaf.features.cfg}})
# Start up ServiceMix
# Install feature 'camel-string-template'
# Build the attached test project using maven
# Copy/Link the built artifact into the {{deploy}} folder
# Copy/Link the route {{src/test/resources/camel-route}} into the {{deploy}} folder

The XSLT Component tries to load the resource eagerly. Therefore the route will not start and throws the following exception:
{noformat}
Caused by: java.io.FileNotFoundException: Cannot find resource in classpath for URI: com/basis06/apache/camel/HelloWorld.xslt
	at org.apache.camel.util.ResourceHelper.resolveMandatoryResourceAsUrl(ResourceHelper.java:122)
	at org.apache.camel.component.xslt.XsltEndpoint.loadResource(XsltEndpoint.java:67)
{noformat}

The same problem exists with the String-Template Component. But this component will fail not until it is called in the route.
","x86_64 GNU/Linux
Java 1.6.0_26
Apache ServiceMix 4.4.1",,,,,,,,,,,,,,,,,,,,26/Apr/12 07:47;tsh;test-classpath-resource.tar.gz;https://issues.apache.org/jira/secure/attachment/12524405/test-classpath-resource.tar.gz,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-04-26 12:02:18.621,,,no_permission,,Unknown,,,,,,,,,,,236811,,,Fri Jun 15 15:43:57 UTC 2012,,,,,,,0|i025rj:,10535,,,,,,,,,"26/Apr/12 12:02;davsclaus;Resource loading works fine for me.

I moved the XML file into the src/main/resources/OSGI-INF/blueprint directory, which is the standard for blueprint XML files.
I removed the string template endpoint, so the route only did the xstl.

I installed the application on Fuse ESB which supports offically Camel 2.9, and it worked fine
I copied a test file and it was processed and from the shell I can get details
{code}
FuseESB:karaf@root> camel:route-info helloWorld 
Camel Route helloWorld
	Camel Context: 165-camel-3

Properties
		id = helloWorld
		parent = 37fe883b

Statistics
	Exchanges Total: 1
	Exchanges Completed: 1
	Exchanges Failed: 0
	Min Processing Time: 62ms
	Max Processing Time: 62ms
	Mean Processing Time: 62ms
	Total Processing Time: 62ms
	Last Processing Time: 62ms
	Load Avg: 0.00, 0.00, 0.00
	First Exchange Date: 2012-04-26 14:01:03
	Last Exchange Completed Date: 2012-04-26 14:01:03

Definition
<?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?>
<route id=""helloWorld"" xmlns=""http://camel.apache.org/schema/spring"">
    <from uri=""file:data/in""/>
    <to uri=""xslt:com/basis06/apache/camel/HelloWorld.xslt"" id=""to1""/>
    <to uri=""file:data/out"" id=""to2""/>
</route>
{code}","26/Apr/12 12:10;davsclaus;I did get puzzled by the code that loads the resource in camel-core-osgi, so I have asked for the OSGi experts to chim in.
I posted on Camel @dev so keep an eye there.","26/Apr/12 12:58;tsh;Putting the blueprint xml into the bundle works, because they share the same bundle context then.

But my test case tries to use a classpath resource from another bundle. This works fine for classes exported by the bundle but not for resources.

Putting the blueprint xml into the deploy folder deploys that in its own bundle context that will dynamically import required packages (from other bundles).

You can extend the test case and successfully invoke the HelloWorld class inside the route. But you cannot access any resource from the bundle that provides the HelloWorld class.

","26/Apr/12 13:32;dkulp;
I ran into this same issue with CXF's WS-N server on Tuesday.   The xsd's are in the cxf-wsn-api bundle, but the cxf-wsn-core bundle could not load them even if importing the package.   The ONLY solutions I found were:

1) Make cxf-wsn-core use a Dynamic-Import for the package that contains the resources.  A normal import did not work, just the Dynamic-Import

2) Make cxf-wsn-core use a Require-Bundle: cxf-wsn-api

I'm not sure yet if this is a bug in the OSGi stuff.  (I also only checked with Felix, I need to also check to see if Equinox exhibits the same issue)


","15/Jun/12 14:43;hadrian;This is not really a Camel issue but an Aries/Karaf one. I think it's already fixed, but we're not gonna block the 2.10.0 and wait for new releases. I unset the fix version for now.","15/Jun/12 15:02;tsh;The 'OsgiClassResolver' in the camel-spring bundle contains the bug.
{code}
public URL loadResourceAsURL(String uri) {
    ObjectHelper.notEmpty(uri, ""uri"");
    return bundleContext.getBundle().getEntry(uri);
}
{code}

The call to {{getEntry}} does only look in the classpath of the bundle. Imported packages are not considered. {{getResource}} is the correct method to call.

See http://www.osgi.org/javadoc/r4v43/core/org/osgi/framework/Bundle.html#getEntry(java.lang.String)
See also http://www.osgi.org/javadoc/r4v43/core/org/osgi/framework/Bundle.html#getResource(java.lang.String)
","15/Jun/12 15:08;tsh;The {{OsgiClassResolver}} is now (in the trunk) located in {{camel-core-osgi}}. Same code, same problem.
","15/Jun/12 15:43;davsclaus;I tried your suggestion with Karaf 2.2.7, and Camel 2.10-SNAPSHOT, and got it working.

The route is processed and I got a hello world in the output directory.

{code}
davsclaus:/opt/apache-karaf-2.2.7$ mv sample.xml data/in
davsclaus:/opt/apache-karaf-2.2.7$ ls data/
cache/             in/                out/               tmp/               
generated-bundles/ log/               port               
davsclaus:/opt/apache-karaf-2.2.7$ ls data/in/.camel/sample.xml 
data/in/.camel/sample.xml
davsclaus:/opt/apache-karaf-2.2.7$ cat data/out/sample.xml 
""Hello World""davsclaus:/opt/apache-karaf-2.2.7$ 
{code}","15/Jun/12 15:43;davsclaus;karaf@root> camel:route-info helloWorld 
Camel Route helloWorld
	Camel Context: 79-camel-3

Properties
		id = helloWorld
		parent = 6c4f7b4c

Statistics
	Exchanges Total: 1
	Exchanges Completed: 1
	Exchanges Failed: 0
	Min Processing Time: 177ms
	Max Processing Time: 177ms
	Mean Processing Time: 177ms
	Total Processing Time: 177ms
	Last Processing Time: 177ms
	Load Avg: 0.00, 0.00, 0.00
	First Exchange Date: 2012-06-15 17:43:41
	Last Exchange Completed Date: 2012-06-15 17:43:41

Definition
<?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?>
<route id=""helloWorld"" xmlns=""http://camel.apache.org/schema/spring"">
    <from uri=""file:data/in""/>
    <to uri=""xslt:com/basis06/apache/camel/HelloWorld.xslt"" id=""to1""/>
    <to uri=""string-template:com/basis06/apache/camel/Quote.txt"" id=""to2""/>
    <to uri=""file:data/out"" id=""to3""/>
</route>",,,,,,,,,,,,,,,
Jetty client can corrupt streams if used in a bridge mode (proxy),CAMEL-5274,12555006,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,12/May/12 07:34,15/Jun/12 09:47,13/Mar/19 22:19,12/May/12 07:56,2.8.5,,,,,,,,,2.10.0,2.8.6,2.9.3,,camel-jetty,,,,,,0,,,,,,,,,"The jetty http producer should favor streams over Strings, which otherwise could cause the payload to be corrupted if doing a bridge mode, eg from jetty to jetty.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-05-12 10:11:03.278,,,no_permission,,Unknown,,,,,,,,,,,239260,,,Sat May 12 10:11:03 UTC 2012,,,,,,,0|i0262v:,10586,,,,,,,,,"12/May/12 10:11;njiang;@Claus,

I just found the DefaultJettyHttpBinding just try to take the response as String too.
We may need to update request and response side at the same time.

Willem",,,,,,,,,,,,,,,,,,,,,,,
Shaded concurrentlinkedhashmap-lru conflicts with existing jar,CAMEL-5342,12559629,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,belamiru,belamiru,07/Jun/12 01:33,14/Jun/12 13:25,13/Mar/19 22:19,14/Jun/12 13:25,2.9.2,,,,,,,,,2.10.0,2.9.3,,,camel-core,,,,,,0,,,,,,,,,"Package com.googlecode.concurrentlinkedhashmap:concurrentlinkedhashmap-lru is included/shaded inside the camel-core jar.

It is not very nice if concurrentlinkedhashmap-lru.jar is already on the path. It is a deal breaker, if their versions are different. For example cassandra-1.1.1 requires ConcurrentLinkedHashMap$Builder.maximumWeightedCapacity(), which is missing from the version included in camel.

It would be nice if concurrentlinkedhashmap-lru was included as a normal dependency. Comment in the pom.xml says ""Shade the googlecode stuff for OSGi"". Well, if that is strictly required, maybe it could be better included in camel-core-osgi package.

In any case, if it must be shaded at all, it would be safer to use relocation property of the maven-shade-plugin. In this case, camel could stay with the version it wants, without conflicting with explicit dependencies.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-06-08 04:57:44.558,,,no_permission,,Unknown,,,,,,,,,,,241215,,,Thu Jun 14 13:25:01 UTC 2012,,,,,,,0|i026hz:,10654,,,,,,,,,"08/Jun/12 04:57;ben.manes;CLHM v1.3 includes an OSGi manifest, if that helps.",14/Jun/12 13:25;njiang;Updated the shade plugin configure for it.,,,,,,,,,,,,,,,,,,,,,,
camel-netty psuedo proxy,CAMEL-5151,12550235,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,matt.narrell,matt.narrell,09/Apr/12 15:17,13/Jun/12 11:40,13/Mar/19 22:19,13/Jun/12 11:40,2.9.1,,,,,,,,,2.10.0,2.9.3,,,camel-netty,,,,,,1,,,,,,,,,"I have a route:

   from(""netty:tcp://somewhere:1234?..."")
     .to(""bean:myBean?method=callOut"")

Where the callOut method does several things, followed by a producerTemplate call to another netty endpoint:

   producerTemplate.sendBody(""netty:tcp://somewhereElse:6789..."", ExchangePattern.InOut, body);

I'm unable to proxy ""directly"" from/to the netty endpoints, and need to pass through this bean.  However, I receive the following exception:

   Caused by: java.lang.IllegalStateException: await*() in I/O thread causes a dead lock or sudden performance drop. Use addListener()    instead or call await*() from a different thread.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-04-29 07:34:19.418,,,no_permission,,Unknown,,,,,,,,,,,235100,,,Wed Jun 13 11:40:04 UTC 2012,,,,,,,0|i025br:,10464,,,,,,,,,"09/Apr/12 15:18;matt.narrell;This works fine with Mina, but chokes with Netty.",29/Apr/12 07:34;davsclaus;Can you try with 2.9 or 2.10 SNAPSHOT as camel-netty have had some changes.,"30/Apr/12 16:31;matt.narrell;Same exception with 2.10-SNAPSHOT:
{code}
Caused by: java.lang.IllegalStateException: await*() in I/O thread causes a dead lock or sudden performance drop. Use addListener() instead or call await*() from a different thread.
	at org.jboss.netty.channel.DefaultChannelFuture.checkDeadLock(DefaultChannelFuture.java:314) ~[netty-3.4.2.Final.jar:na]
	at org.jboss.netty.channel.DefaultChannelFuture.awaitUninterruptibly(DefaultChannelFuture.java:226) ~[netty-3.4.2.Final.jar:na]
	at org.apache.camel.component.netty.NettyProducer.openChannel(NettyProducer.java:314) ~[camel-netty-2.10-20120430.022021-100.jar:2.10-SNAPSHOT]
	at org.apache.camel.component.netty.NettyProducer.process(NettyProducer.java:175) ~[camel-netty-2.10-20120430.022021-100.jar:2.10-SNAPSHOT]
	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150) [camel-core-2.10-20120430.021826-100.jar:2.10-SNAPSHOT]
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117) [camel-core-2.10-20120430.021826-100.jar:2.10-SNAPSHOT]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:99) [camel-core-2.10-20120430.021826-100.jar:2.10-SNAPSHOT]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:86) [camel-core-2.10-20120430.021826-100.jar:2.10-SNAPSHOT]
	at org.apache.camel.processor.UnitOfWorkProducer.process(UnitOfWorkProducer.java:63) ~[camel-core-2.10-20120430.021826-100.jar:2.10-SNAPSHOT]
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:352) ~[camel-core-2.10-20120430.021826-100.jar:2.10-SNAPSHOT]
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:324) ~[camel-core-2.10-20120430.021826-100.jar:2.10-SNAPSHOT]
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:223) [camel-core-2.10-20120430.021826-100.jar:2.10-SNAPSHOT]
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:324) [camel-core-2.10-20120430.021826-100.jar:2.10-SNAPSHOT]
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:186) [camel-core-2.10-20120430.021826-100.jar:2.10-SNAPSHOT]
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:115) ~[camel-core-2.10-20120430.021826-100.jar:2.10-SNAPSHOT]
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:119) ~[camel-core-2.10-20120430.021826-100.jar:2.10-SNAPSHOT]
{code}","13/Jun/12 09:49;ainhab;This problem needs to be fixed, it is easily reproducable, This will also effect the camel load-balancing with NETTY.","13/Jun/12 11:40;davsclaus;Should work now, also without using a bean, just by having from -> to",,,,,,,,,,,,,,,,,,,
camel-netty can't distinguish between Sharable and Unsharable codecs,CAMEL-5225,12552870,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,edge,edge,26/Apr/12 16:03,13/Jun/12 09:33,13/Mar/19 22:19,08/Jun/12 15:30,2.9.2,,,,,,,,,2.10.0,2.9.3,,,camel-netty,,,,,,0,netty,,,,,,,,"Camel-netty uses general configuration model for referenced encoders/decoders for channel pipelines, see DefaultServerPipelineFactory. That is, create encoder/decoder objects at configuration parsing time and store them in a list, then use them when a pipeline is established. However, this will make encoder/decoder objects shared among different pipelines, that may cause data conflicts, when the encoder/decoder is not Sharable(has object status/not annotated as @Sharable), e.g. a LengthFieldBasedFrameDecoder.

Although we can avoid the problem by totally writing a new serverpipelinefactory for our apps, several problem still remains, please see detailed description and testcase for this bug at:

http://camel.465427.n5.nabble.com/camel-netty-bug-and-the-need-of-best-practice-for-creating-referenced-parameter-object-on-looking-up-td5627926.html",ALL,,,,,,,,,,,,,,,,,,,,27/Apr/12 17:06;edge;DefaultServerPipelineFactory.java.patch;https://issues.apache.org/jira/secure/attachment/12524889/DefaultServerPipelineFactory.java.patch,27/Apr/12 17:03;edge;UnsharableCodecsConflictsTest.java;https://issues.apache.org/jira/secure/attachment/12524888/UnsharableCodecsConflictsTest.java,26/Apr/12 17:22;edge;UnsharableCodecsConflictsTest.java;https://issues.apache.org/jira/secure/attachment/12524467/UnsharableCodecsConflictsTest.java,,,,3.0,,,,,,,,,,,,,,,,,,,2012-04-27 06:57:55.717,,,no_permission,,Advanced,,,,,,,,,,,236809,,,Wed Jun 13 09:33:13 UTC 2012,,,,,,,0|i025rz:,10537,,,,,,,,,"26/Apr/12 17:22;edge;here is the test for showing this bug, as mentioned in the post at nabble, you can get random results each time you run the testcase when this bug exists.","27/Apr/12 06:57;davsclaus;camel-netty have been improved for Camel 2.10.

And if you use decoders/encoders that cannot be shared with multiple consumers, then you need to enlist 2 in the registry etc.
This is *not* a bug, but how its designed. You as the end user must configure the endpoints/components correctly.

I have added your test to the source and it passes on trunk.","27/Apr/12 16:56;edge;Thank you very much for your response and adding my testcase to the trunk. However, your answer makes me aware of two things:

1.My testcase is very very misleading (so sorry for that), makes people think the problem is due to sharing decoders among consumers, but that's not the case, as I explained very clearly in the posts, it is because you share them among *pipelines*, not consumers.

2.Camel-netty in version 2.10 (as well as 2.9.2) introduced a new bug, severe than the one I reported, breaks netty's pipeline model more than before. Hence even I correct the implementation of DefaultServerPipelineFactory, the testcase still breaks.

So here I attach the correct testcase, and do some reference to show the problem I reported as well as the new bug introduced.

sorry again for the previous misleading testcase :)","27/Apr/12 17:10;edge;Here is the correct testcase and the patch to pass the testing. The patch simply creates a new decoder(by hard coding that matches the testcase) each time when getpipeline is called, when you run the testcase against patched 2.9.1 version of cammel-netty, you get it passed, but not for 2.9.2 and 2.10.","27/Apr/12 17:20;edge;Here are some references:

1.showing that unsharable decoders should not be shared among channels(pipelines)

http://stackoverflow.com/questions/9254800/is-framedecoder-not-safe-in-non-single-connection-situation

and of course the mentioned url:

http://netty.io/docs/stable/api/org/jboss/netty/channel/ChannelHandler.Sharable.html

2.the evidence showing the new bug

Line 183-185 of NettyConsumer.java in version 2.9.2 ant 2.10:
---------------------------------------------------------------------------------------------------
        // must get the pipeline from the factory when opening a new connection
        ChannelPipeline serverPipeline = pipelineFactory.getPipeline(this);
        serverBootstrap.setPipeline(serverPipeline);
---------------------------------------------------------------------------------------------------

The netty javadoc for ServerBootStrap.setPipeline:
---------------------------------------------------------------------------------------
public void setPipeline(ChannelPipeline pipeline)
Sets the default ChannelPipeline which is cloned when a new Channel is created. Bootstrap creates a new pipeline which has the same entries with the specified pipeline for a new channel.
Calling this method also sets the pipelineFactory property to an internal ChannelPipelineFactory implementation which returns a shallow copy of the specified pipeline.

Please note that this method is a convenience method that works only when 1) you create only one channel from this bootstrap (e.g. one-time client-side or connectionless channel) or 2) the ChannelPipelineCoverage of all handlers in the pipeline is ""all"". You have to use setPipelineFactory(ChannelPipelineFactory) if 1) your pipeline contains a ChannelHandler whose ChannelPipelineCoverage is ""one"" and 2) one or more channels are going to be created by this bootstrap (e.g. server-side channels).
----------------------------------------------------------------------------------------

So you are setting the pipeline to the serverbootstrap for netty consumer (which opens server-side channels), simply breaks the second situation when ""You have to use setPipelineFactory(ChannelPipelineFactory)"". However, the implementation in 2.9.1 and before is correct.

","08/Jun/12 15:30;davsclaus;Thanks for reporting.

I have refactored to use the pipeline factory, so we support stateful codecs","10/Jun/12 03:01;edge;Would you please adopt my revised UnsharableCodecsConflictsTest.java and run the test? I only saw the code somewhat reverted to version 2.9.1, but didn't solve the problem I reported. The problem exists as long as you use code like this(DefaultServerPipelineFactory.java):

        List<ChannelUpstreamHandler> decoders = consumer.getConfiguration().getDecoders();
        for (int x = 0; x < decoders.size(); x++) {
            channelPipeline.addLast(""decoder-"" + x, decoders.get(x));
        }

this configuration model causes the decoders(created and cached in consumer.getConfiguration().getDecoders()) to be shared among pinelines and then lead to conflicts on stateful codecs.",13/Jun/12 09:33;davsclaus;Okay I have further improved the code to support for shareable and non-shareable encoders/decoders.,,,,,,,,,,,,,,,,
camel-jms - Exception thrown from destination resolver should trigger Camel exception handling,CAMEL-5363,12560343,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,12/Jun/12 13:09,12/Jun/12 13:35,13/Mar/19 22:19,12/Jun/12 13:35,2.9.2,,,,,,,,,2.10.0,2.8.6,2.9.3,,camel-jms,,,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Camel-Error-handling-throwing-exception-not-moving-to-error-queue-tp5714076.html

The jms producer should catch unhandled exceptions from the Spring JMS, such as its destination resolver. And ensure the callback is invoked, to let Camel error handler be triggered.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,241236,,,2012-06-12 13:09:16.0,,,,,,,0|i026mn:,10675,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Spring-WS does neither set message body nor message headers if exchange is not outCapable,CAMEL-5234,12553389,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,bvahdat,benjamin.gniza,benjamin.gniza,30/Apr/12 17:15,11/Jun/12 21:10,13/Mar/19 22:19,08/Jun/12 16:22,2.7.5,2.8.4,2.9.2,,,,,,,2.10.0,2.9.3,,,camel-spring-ws,,,,,,0,in,out,out-capable,response,spring-ws,,,,"Spring-WS component does not behave as expected from pipes and filters pattern if exchange is not _outCapable_.
If _ExchangeHelper_._isOutCapable_ returns false for the given _exchange_ the IN-message is returned instead of the WS-Response.
Example:
{code:title=ExampleRoute}
        from(""timer://foo?fixedRate=true&period=1000"")//
                .setBody().simple(""<ex:getExampleResponse xmlns:ex=\""http://example.com/\"">"" //
                        + ""       <id>1</id>"" //
                        + ""     </ex:getExampleResponse>"")//
                .to(""spring-ws:http://localhost:9000/Example"")//
                .to(""file://responses"");
{code}

In the example above I would expect the WS-response written to the files in the responses directory. Currently (since 2.7.3) the IN message is written to the files.
This is caused by _SpringWebserviceProducer#process_ because it only sets headers and body for the OUT-message if _isOutCapable_ is _true_.

Workaround (maybe this has side effects!):
{code:title=ExampleRoute}
                from(""timer://foo?fixedRate=true&period=1000"")//
                .setExchangePattern(ExchangePattern.InOut) // <-- Override with InOut Pattern
                .setBody().simple(""<ex:getExampleResponse xmlns:ex=\""http://example.com/\"">"" //
                        + ""       <id>1</id>"" //
                        + ""     </ex:getExampleResponse>"")//
                .to(""spring-ws:http://localhost:9000/Example"")//
                .to(""file://responses"");
{code}

This behavior has been implemented to fix CAMEL-3974. From my point of view its counter intuitive since other processing-steps don't check the exchange's _outCapability_.
It took me several hours to find out why I always got the IN message back, although the webservice was called correctly and returned correct results.
Maybe an option should be provided to control this behavior. At least a log-message should be written to explain, that the webservice-reponse is thrown away.

",,,,,,,,,,,,,,,,,,,,,08/Jun/12 12:08;bvahdat;CAMEL-5234.patch;https://issues.apache.org/jira/secure/attachment/12531393/CAMEL-5234.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-05-01 09:40:51.604,,,no_permission,,Unknown,,,,,,,,,,,237544,,,Mon Jun 11 21:10:39 UTC 2012,,,,,,,0|i025tz:,10546,,,,,,,,,"01/May/12 09:40;bvahdat;This behavior is intended and not a bug!

So that if you need an InOut Exchange-Pattern then just say it using the DSL, that's instead of:

{code}
to(""spring-ws:http://..."")...
{code}

you could do:

{code}
...inOut(""spring-ws:http://..."")....
{code}

See also http://camel.465427.n5.nabble.com/VOTE-Release-Apache-Camel-2-8-0-td4584312i20.html#a4593321
","02/May/12 15:17;bvahdat;BTW as in the meanwhile inOut() has been already deprecated, then better make use of setExchangePattern(exchangePattern) API.
See the Javadoc of inOut() for more details. ","02/May/12 15:40;bvahdat;Just realized that you have already made use of setExchangePattern(ExchangePattern.InOut) API.

I do agree to put a log-message to warn that the webservice-response will be thrown away. Do you have any suggestion for a meaningful and well-understandable log message to be used here?","02/May/12 16:37;benjamin.gniza;Regarding your linked post:
Didn't you say there that this seems API-breaking for you? Providing such a change in a patch version shouldn't be done. (This behavior was introduced from 2.7.2 to 2.7.3).

Anyway, I think this may be intentional but is very confusing. Using the restlet-component (http://camel.apache.org/restlet.html) you don't have to change the Exchange-Pattern but can go with the following example (which is similiar to my first spring-ws example):
{code:title=Restlet Example}
from(""timer://foo?fixedRate=true&period=1000"")//
                .setHeader(""id"", new SimpleExpression(""1""))//
                .to(""restlet:http://localhost:9000/Example/{id}"")//
                .to(""file://responses"");
{code}
I think we agree that this inconsitent component behavior may confuse a lot of people.","02/May/12 17:03;bvahdat;Yes at that time it seemed / was API breaking to me as it happened in a patch version. And do agree that this could be confusing for people trying to upgrade.

I will try to get in touch with Richard Kettelerij who has denoted this component. Just wonder what he thinks about this.","02/Jun/12 18:39;davsclaus;Yes the response from Spring-WS should be used regardless of the MEP pattern. Only if the actual invoked web service method is a OneWay web service, then it should not use the response from the WS. eg bottom line its the nature of the WS method that dictates this, not the MEP flag in Camel.","03/Jun/12 09:26;muellerc;This means if the MEP is inOnly and the web service returns a response, we should put this into the in message (body and headers) after cleaning it from the request body and headers, right?","03/Jun/12 09:36;davsclaus;Yes.

Normally the response is set on the IN message if its NOT out capable.

if OUT capable
  set response OUT
else
  set response IN

But in the world of WS you can have OneWay which is a bit special WS. Normally they are request/reply over WS.

","03/Jun/12 10:04;bvahdat;Now I'm a bit confused :-(
Currently we have the following by SpringWebserviceProducer

{code}
if (ExchangeHelper.isOutCapable(exchange)) {
    exchange.getOut().copyFrom(exchange.getIn());
    exchange.getOut().setBody(body);
}
{code}

Now do you mean we should change this to

{code}
if (ExchangeHelper.isOutCapable(exchange)) {
    exchange.getOut().copyFrom(exchange.getIn());
    exchange.getOut().setBody(body);
} else {
    exchange.getIn().setBody(body);
}
{code}

And what about camel-restlet? Seems it doesn't care about MEP:
https://fisheye6.atlassian.com/browse/~br=trunk/camel/trunk/components/camel-restlet/src/main/java/org/apache/camel/component/restlet/DefaultRestletBinding.java?hb=true#to266

Also do we maybe have a documentation about these MEP rules somewhere where I can learn it from?","04/Jun/12 12:37;bvahdat;Also looking at camel-cxf it does the same way as camel-spring-ws (which is a *different behaviour* than camel-restlet :-():

https://fisheye6.atlassian.com/browse/camel/trunk/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducer.java?hb=true#to183
","04/Jun/12 12:59;muellerc;Babak, could you please start a general discussion about this on dev@.
My understanding is the following:
If a component provides integration for e.g. spring-ws and execute a request which will receive a respone, this component should check the MEP and put the respone into the out message if the MEP is ""put capable"" or replace the in message if not (and also the headers and attachments of course).","04/Jun/12 13:26;bvahdat;Done:
http://camel.465427.n5.nabble.com/About-what-to-do-with-the-Response-retrieved-through-a-Producer-when-the-Exchange-is-NOT-out-capable-td5713946.html",08/Jun/12 12:08;bvahdat;A potential patch for the review.,08/Jun/12 15:39;davsclaus;The patch seems fine,11/Jun/12 21:10;muellerc;Looks good for me too.,,,,,,,,,
RMI endpoint doesn't handle nested exception and raise CamelRuntimeException instead of RemoteException,CAMEL-5122,12548308,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,jbonofre,jbonofre,27/Mar/12 13:38,11/Jun/12 07:42,13/Mar/19 22:19,11/Jun/12 07:42,2.2.0,2.3.0,2.4.0,2.5.0,2.6.0,2.7.0,2.7.3,2.8.5,2.9.2,2.10.0,2.9.3,,,camel-rmi,,,,,,0,,,,,,,,,"When we have a route looking like:

<from uri=""rmi:...""/>
<to uri=""myBean""/>

if an exception is raised on myBean, the RMI endpoint ignores the exception described in the RemoteInterface and always raises a RuntimeCamelException nesting the original exceptions.

More over, RuntimeCamalException should not be raised by the RMI endpoint. It would make more sense to raise a RemoteException, as we are on a RMI endpoint.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-06-04 17:47:32.539,,,no_permission,,Unknown,,,,,,,,,,,233405,,,Mon Jun 04 17:47:32 UTC 2012,,,,,,,0|i0255b:,10435,,,,,,,,,"04/Jun/12 17:47;davsclaus;Any update on this? If you got a sample unit test, I may help.",,,,,,,,,,,,,,,,,,,,,,,
camel-solr feature missing the bundle for http4 client,CAMEL-5346,12559797,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,08/Jun/12 06:34,09/Jun/12 13:18,13/Mar/19 22:19,09/Jun/12 13:18,,,,,,,,,,2.10.0,,,,karaf,,,,,,0,,,,,,,,,Just found the solr bundle is the dependencies of http4 client by running the validation on the apache-camel feature.,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,241219,,,Fri Jun 08 06:38:06 UTC 2012,,,,,,,0|i026iv:,10658,,,,,,,,,"08/Jun/12 06:38;njiang;I just checked camel-2.9.x feature, as we are using the solr 3.5.x, it doesn't has the dependency of http4 client. We don't need to port this patch to camel 2.9.x.",,,,,,,,,,,,,,,,,,,,,,,
spring.schema is not up to date,CAMEL-5192,12551585,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,jbonofre,jbonofre,19/Apr/12 08:15,03/Jun/12 14:53,13/Mar/19 22:19,03/Jun/12 14:53,2.8.4,2.9.1,,,,,,,,2.8.6,2.9.3,,,camel-cxf,camel-spring,camel-spring-integration,,,,0,,,,,,,,,"The URI of the Spring schema has been updated in Camel 2.9.1 and 2.8.4:

http://camel.apache.org/schema/cxf/

We can see that starting from 2.9.1 and 2.8.4, we suffix the schema with -spring or -blueprint.

However, the spring.schema resource file has not been updated with this suffix.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-04-19 08:56:14.522,,,no_permission,,Unknown,,,,,,,,,,,236393,,,Thu Apr 19 08:56:14 UTC 2012,,,,,,,0|i025kn:,10504,,,,,,,,,19/Apr/12 08:56;chris@die-schneider.net;Looks like a bug .. I think we should also update the spring.schema file to reflect this change,,,,,,,,,,,,,,,,,,,,,,,
camel-jpa feature can not be installed out of box,CAMEL-5257,12554446,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,09/May/12 08:31,02/Jun/12 18:36,13/Mar/19 22:19,02/Jun/12 18:36,2.8.5,2.9.2,,,,,,,,2.10.0,2.8.6,2.9.3,,karaf,,,,,,0,,,,,,,,,"When I try to run the camel-itest-karaf, I found the camel-jpa feature can not be install out of box, as the servlet api cannot be resolved. ",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,238688,,,2012-05-09 08:31:57.0,,,,,,,0|i025z3:,10569,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-stream should not close stream after each write,CAMEL-5284,12556328,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,hadrian,hadrian,18/May/12 00:18,02/Jun/12 12:49,13/Mar/19 22:19,02/Jun/12 12:49,2.8.4,,,,,,,,,2.10.0,2.8.6,2.9.3,,camel-stream,,,,,,0,,,,,,,,,"The StreamProducer in camel-stream closes the stream after every write, which significantly affects performance.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,241157,,,Fri May 18 00:27:19 UTC 2012,,,,,,,0|i02653:,10596,,,,,,,,,"18/May/12 00:27;hadrian;We need to give users some control over when the stream would be closed. I will introduce a new option 'autoCloseCount' to specify the number of messages to process before closing the stream.

A value of 'autoCloseCount=0' means that the stream is never closed (well, it will be when the StreamProducer is stopped). A value of 'autoCloseCount=1' means close after every message, which is the current behavior. I am tempted to use '0' as the default value. A value of '1', although consistent with the current behavior is not what a user would expect. Another higher value just seems kinda random.",,,,,,,,,,,,,,,,,,,,,,,
NettyConverter throws NullPointerException when Exchange is not set,CAMEL-5317,12558432,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,splatch,splatch,splatch,29/May/12 14:08,29/May/12 14:50,13/Mar/19 22:19,29/May/12 14:50,,,,,,,,,,2.10.0,2.9.3,,,camel-netty,,,,,,0,netty,,,,,,,,In Camel TypeConverter API we have two ways to convert payload - with exchange or without. NettyConverter doesn't support ChannelBuffer -> toString conversion without exchange instance and throws NullPointerException.,,,,,,,,,,,,,,,,,,,,,29/May/12 14:14;splatch;CAMEL-5317.patch;https://issues.apache.org/jira/secure/attachment/12530043/CAMEL-5317.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-05-29 14:50:22.419,,,no_permission,,Unknown,,,,,,,,,,,241190,,,Tue May 29 14:50:22 UTC 2012,,,,,,,0|i026cf:,10629,,,,,,,,,29/May/12 14:14;splatch;Proposed patch contains fix with fallback to default String constructor if no exchange is set.,29/May/12 14:50;davsclaus;Thanks for the patch.,,,,,,,,,,,,,,,,,,,,,,
Camel-blueprint fails to install on Karaf 3 as it does not accept the version 1.0.0,CAMEL-5315,12558404,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,chris@die-schneider.net,chris@die-schneider.net,chris@die-schneider.net,29/May/12 09:51,29/May/12 10:02,13/Mar/19 22:19,29/May/12 10:02,2.9.2,,,,,,,,,2.10.0,2.8.6,2.9.3,3.0.0,,,,,,,0,,,,,,,,,"karaf@root()> feature:install camel-blueprint
Error executing command: Could not start bundle mvn:org.apache.camel/camel-blueprint/2.10-SNAPSHOT in feature(s) camel-blueprint-2.10-SNAPSHOT: Unresolved constraint in bundle org.apache.camel.camel-blueprint [171]: Unab
le to resolve 171.0: missing requirement [171.0] osgi.wiring.package; (&(osgi.wiring.package=org.apache.aries.blueprint)(version>=0.3.0)(!(version>=1.0.0)))

",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,241188,,,Tue May 29 10:02:37 UTC 2012,,,,,,,0|i026bz:,10627,,,,,,,,,29/May/12 10:02;chris@die-schneider.net;Fixed,,,,,,,,,,,,,,,,,,,,,,,
trim() in SimpleLanguage.createExpression strips new-lines from expression,CAMEL-5285,12556464,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,apejavar,apejavar,18/May/12 21:47,27/May/12 12:23,13/Mar/19 22:19,27/May/12 12:23,2.9.2,,,,,,,,,2.10.0,,,,camel-core,,,,,,0,,,,,,,,,"A newly added (since 2.8.3) expression.trim() in SimpleLanguage.createExpression(String expression) strips new-lines from the expression before evaluation.

I was using this feature to log exceptions to a status file in my camel route. I built the status message using a simple expression and terminated with &#10; in the spring-dsl route. With 2.9.2, the individual messages are no longer delimited by new-line because of the added expression.trim().",Spring DSL,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-05-20 08:14:11.344,,,no_permission,,Unknown,,,,,,,,,,,241158,,,Sun May 27 12:23:05 UTC 2012,,,,,,,0|i0265b:,10597,,,,,,,,,"20/May/12 08:14;davsclaus;Yeah I guess we got a situation here, whether its a good idea to trim or not.",20/May/12 08:15;davsclaus;CAMEL-4990 is the one that changed this behavior.,27/May/12 12:23;davsclaus;Fixed by CAMEL-5294,,,,,,,,,,,,,,,,,,,,,
InOut over seda/vm with multiple consumers can cause a timeout exception,CAMEL-5303,12557048,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,23/May/12 18:46,23/May/12 19:07,13/Mar/19 22:19,23/May/12 19:07,2.8.4,,,,,,,,,2.10.0,2.8.6,2.9.3,,camel-core,,,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/ExchangeTimedOutException-when-using-vm-seda-with-multipleConsumers-true-td5710951.html",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,241176,,,2012-05-23 18:46:24.0,,,,,,,0|i0269b:,10615,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The flatpack component is swallowing it's parsing errors,CAMEL-5300,12556930,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,geerzo,geerzo,22/May/12 21:59,23/May/12 14:46,13/Mar/19 22:19,23/May/12 09:59,2.9.2,,,,,,,,,2.10.0,2.8.6,2.9.3,,camel-flatpack,,,,,,0,,,,,,,,,"When flatpack parses the exchange any errors that are generated are stored in an error list in the parser. Currently, this list isn't being checked so the exchange is moving on even when there are errors generated.",,,,,,,,,,,,,,,,,,,,,22/May/12 22:44;geerzo;CAMEL-5300.patch;https://issues.apache.org/jira/secure/attachment/12528665/CAMEL-5300.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-05-23 09:59:12.048,,,no_permission,,Unknown,,,,,,,,,,,241173,,,Wed May 23 14:46:38 UTC 2012,,,Patch Available,,,,0|i0268n:,10612,,,,,,,,,22/May/12 22:44;geerzo;Patch against the 2.9.x branch,23/May/12 09:59;davsclaus;Thanks for the patch. I polished it a bit.,"23/May/12 14:46;geerzo;Claus,

Thanks for cleaning it up a bit. I did have a question regarding the change to the exception.

I had it that way originally but changed it because I didn't want to have to generate the message string every time getMessage() was called since that takes CPU cycles (especially if it's a large file with hundreds of errors), granted it's not a lot, and it is during exception processing. Would it be expected that getMessage() would only be called once during normal error processing so it doesn't' really matter?",,,,,,,,,,,,,,,,,,,,,
camel-restlet producer not passing along the Accept header ,CAMEL-5268,12554584,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,wtam,wtam,wtam,09/May/12 23:15,22/May/12 03:42,13/Mar/19 22:19,22/May/12 03:42,2.9.2,,,,,,,,,2.10.0,2.9.3,,,camel-restlet,,,,,,0,,,,,,,,,"Refer to the thread on user forum.
http://camel.465427.n5.nabble.com/camel-restlet-Accept-header-td5692917.html

DefaultRestletBinding.populateRestletRequestFromExchange() may be missing a Restlet API call to set the accepted media types the Request object.       

Request.getClientInfo().setAcceptedMediaTypes(acceptedMediaTypes)

",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-05-10 07:44:48.956,,,no_permission,,Unknown,,,,,,,,,,,238834,,,Tue May 22 03:41:59 UTC 2012,,,,,,,0|i0261j:,10580,,,,,,,,,10/May/12 07:44;davsclaus;William are you working on a patch?,21/May/12 19:27;wtam;@Claus.  Yes.,"21/May/12 22:10;wtam;Committed revision 1341227.  (trunk)

@Claus Could you please back merge to other branches if necessary?","22/May/12 03:41;davsclaus;Thanks William. Nice to see you back with a commit.

I have backported the fix to the 2.9 branch.",,,,,,,,,,,,,,,,,,,,
SEDA/VM requires completely same URI on producer and consumer side when consumer route is adviced,CAMEL-5261,12554453,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,thxmasj,thxmasj,09/May/12 09:15,20/May/12 19:57,13/Mar/19 22:19,20/May/12 19:57,2.9.1,2.9.2,,,,,,,,2.10.0,2.9.3,,,camel-core,,,,,,0,,,,,,,,,"The producer side and consumer side of the SEDA (and VM) component seems to require the completely same URI to be able to communicate. Completely same meaning that all URI options must be the same on both sides. The strange thing is that this only is required when I have adviced the consumer route. 2.9.0 does not have this problem.

Attached a unit test - the producerWithDifferentUri will fail on 2.9.1 and 2.9.2. If the advice is removed it will not.",,,,,,,,,,,,,,,,,,,,,09/May/12 11:50;thxmasj;CamelSedaTest.java;https://issues.apache.org/jira/secure/attachment/12526148/CamelSedaTest.java,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-05-09 09:25:21.756,,,no_permission,,Unknown,,,,,,,,,,,238695,,,Sun May 20 16:03:27 UTC 2012,,,,,,,0|i025zz:,10573,Regression,,,,,,,,"09/May/12 09:25;davsclaus;Thanks, can you re-attach the test case and mark [x] in grant license to Apache. Then we can use your code as an unit test in the source.",09/May/12 11:51;thxmasj;Done!,"20/May/12 15:06;davsclaus;You need to do as told on the wiki page
http://camel.apache.org/advicewith.html

eg in the tip: Telling Camel you are using adviceWith
",20/May/12 16:03;davsclaus;I have reproduced the issue and work on a fix.,,,,,,,,,,,,,,,,,,,,
Incorrect Content-Length returned for converted result objects with Unicode characters,CAMEL-5265,12554493,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,manuelh9r,manuelh9r,09/May/12 14:03,10/May/12 07:38,13/Mar/19 22:19,10/May/12 07:38,2.8.0,2.9.0,,,,,,,,2.10.0,2.8.6,2.9.3,,camel-servlet,,,,,,0,patch,,,,,,,,"The camel-servlet component responds with an incorrect http Content-Length header, causing the HTTP client to retreive a incomplete response, when the body of the out message is of a POJO type and is converted into a string that contains unicode characters.

For example, the following route returns ""Büe Wör"", but should return ""Büe Wörld"".
{quote}     
from(""servlet:///testUnicodeWithObjectResponse?matchOnUriPrefix=true"") 
   .process(new Processor() {
       public void process(Exchange exchange) throws Exception {                    
           String contentType = exchange.getIn().getHeader(Exchange.CONTENT_TYPE, String.class);
           exchange.getOut().setHeader(Exchange.CONTENT_TYPE, contentType + ""; charset=UTF-8"");  
    }})
    .transform(constant(
        new Object(){
            @Override
            public String toString() {
                return ""Büe Wörld"";
            }
        }
    ));
{quote}

The attached patch contains a fix for the problem and a test to reproduce the problem.",,,,,,,,,,,,,,,,,,,,,09/May/12 14:12;manuelh9r;patch.diff;https://issues.apache.org/jira/secure/attachment/12526162/patch.diff,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-05-10 07:38:52.91,,,no_permission,,Unknown,,,,,,,,,,,238743,,,Thu May 10 07:38:52 UTC 2012,,,Patch Available,,,,0|i0260v:,10577,,,,,,,,,09/May/12 14:12;manuelh9r;Patch with tests,"10/May/12 07:38;davsclaus;Thanks for the patch.

I used the \u0000 for the uni code chars, as people in eg China etc. will have trouble reading the source code. 

Also I am using the charset value from the exchange, which is what being used to convert the message to String.",,,,,,,,,,,,,,,,,,,,,,
Running camel:run with blueprint gets a java.lang.NoClassDefFoundError: org.osgi.vendor.framework property not set,CAMEL-5248,12554036,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,05/May/12 09:34,05/May/12 09:43,13/Mar/19 22:19,05/May/12 09:43,2.10.0,,,,,,,,,2.10.0,,,,osgi,tooling,,,,,0,,,,,,,,,"When running mvn camel:run with a blueprint app, you may get this exception.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,238255,,,2012-05-05 09:34:05.0,,,,,,,0|i025x3:,10560,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Make sure to close file input stream when converting file to string to avoid locking file on windows,CAMEL-5235,12553453,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,01/May/12 06:51,02/May/12 08:48,13/Mar/19 22:19,01/May/12 07:05,2.9.2,,,,,,,,,2.10.0,2.9.3,,,camel-core,,,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/File-Processor-Not-deleting-the-files-tp5670301.html

Need to explicit close the file input/output streams to avoid the files to be locked on windows.
",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-05-01 09:18:38.18,,,no_permission,,Unknown,,,,,,,,,,,237615,,,Wed May 02 08:48:42 UTC 2012,,,,,,,0|i025u7:,10547,,,,,,,,,"01/May/12 09:18;bvahdat;Claus, one stupid question of mine:

Why don't we simply remove these two static member classes EncodingFileReader as well as EncodingFileWriter and just make use of JDK's own InputStreamReader & OutputStreamWriter directly? To my understanding these two classes provide no added value other than trouble. And the JDK's own bridges (byte streams to character streams) are already *encoding aware* anyway!

So the two usage methods would simply become:

{code}
    public static BufferedReader toReader(File file, String charset) throws IOException {
        FileInputStream in = new FileInputStream(file);
        return IOHelper.buffered(new InputStreamReader(in, charset));
    }
{code}


{code}
    public static BufferedWriter toWriter(File file, boolean append, String charset) throws IOException {
        FileOutputStream os = new FileOutputStream(file, append);
        return IOHelper.buffered(new OutputStreamWriter(os, charset));
    }
{code}

They were both introduced by CAMEL-2056.","01/May/12 09:31;davsclaus;Maybe but dont you still have the the issue that the File input/output streams do not get closed when the InputStreamWriter/OutputStreamWriter gets closed.

With the current code we explicit close those now.","01/May/12 09:32;davsclaus;You are welcome to do some investigations and see if we can do as you suggests, but we need to make sure the file streams gets closed, to avoid locking issues with windows.","01/May/12 10:26;bvahdat;{quote}
Maybe but dont you still have the the issue that the File input/output streams do not get closed when the InputStreamWriter/OutputStreamWriter gets closed.
{quote}

No as that's done for ""free"" through the close() method magic, that's the call-chaining of the close() call by the underlying input/output streams. As an example when we look at BufferedReader.close() method we see that the close() call get's chained and the underlying stream (hopefully) does properly chain the call again and again, until the OS native stream gets properly closed. *But* that's the user's responsibility to
do that:


{code}
BufferedReader myReader = CamelContext.getTypeConverter().convertTo(BufferedReader.class, ...);
…
…
myReader.close(); // user should close the stream properly after the usage
{code}

The main ""problem"" is that we can't control if the user do *properly* close the Reader, Writer, In and Outputstream after the usage. And if they don't, then they will run into trouble and think something in Camel could be the reason for that.","01/May/12 14:48;davsclaus;Yeah if the user gets a reader/stream etc then he may need to close it after use.

But in this use-case it was converting to String or byte[] etc directly. And for that Camel must make sure to close the stream internally.","02/May/12 08:08;bvahdat;While trying to find some resources on the web describing what my *poor* english is talking about, I came along many of them but the best one was given through that *already dissappered real vendor* itself:

{quote}
Similarly, when closing chained streams, you only need to close the outermost stream class because the close() call is automatically trickled through all the chained classes; in the example above, you would simply call the close() method on the GZIPOutputStream class.
{quote}

When you look at the example there the inner most OutputStream is also a FileOutputStream, however there's no need of an explicit close call on that:

http://java.sun.com/developer/technicalArticles/Streams/ProgIOStreams/

There are plenty of other APIs having similar semantics (call-chaining) like when you close a JDBC Statement:

{quote}
Note:When a Statement object is closed, its current ResultSet object, if one exists, is also closed.
{quote}

http://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#close()

So why I still ask for your approval to get rid of those two obsolete static member classes.
","02/May/12 08:48;davsclaus;Yes they can possible be removed, just make sure the FileInputStream gets closed, as otherwise it can lock file handles on Windows.",,,,,,,,,,,,,,,,,
Strange warning appears: WARN  org.apache.camel.processor.DeadLetterChannel - Cannot determine current route from Exchange with id ,CAMEL-5193,12551589,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,syberyan,syberyan,19/Apr/12 08:56,29/Apr/12 16:04,13/Mar/19 22:19,29/Apr/12 16:04,2.9.1,,,,,,,,,2.10.0,2.9.3,,,camel-core,,,,,,0,,,,,,,,,"The warning gets printed but other than that, everything seems to work. (I hope)

{code}
12.04.19 10:34:26:463 [drisCamelContext JmsConsumer[dispatchHttpQueue] #4] WARN  org.apache.camel.processor.DeadLetterChannel - Cannot determine current route from Exchange with id: ID-dris-ixor-be-42350-1334569164986-0-1052464, will 
fallback and use first error handler.
12.04.19 10:34:26:463 [drisCamelContext JmsConsumer[dispatchHttpQueue] #4] WARN  distribution.kv78.dispatch - Failed delivery (attempt = 199) : org.apache.http.conn.HttpHostConnectException: Connection to http://81.82.232.183:9292 ref
used - 0299c1d9 - KV8passtimes - 81.82.232.183:9292 - queue_dispatchHttpQueue_ID_dris.ixor.be-36583-1334569163882-4_1_24_1_1007
{code}

When looking up the log statement in RedeliveryErrorHandler, I find this:

{code}
else if (!exceptionPolicy.getErrorHandlers().isEmpty()) {
                // note this should really not happen, but we have this code as a fail safe
                // to be backwards compatible with the old behavior
                log.warn(""Cannot determine current route from Exchange with id: {}, will fallback and use first error handler."", exchange.getExchangeId());
                processor = exceptionPolicy.getErrorHandlers().iterator().next();
            }
{code}

So it shouldn't happen but it happens after all...


Here is the route causing the warning. I think it started when I made the route transacted. 
As shown in the log snippet above, the warning is printed when the HTTP endpoint throws an IOException (route ENDPOINT_DISPATCH)
{code}        
        from(ENDPOINT_DISPATCH_QUEUE +
            ""?cacheLevelName=CACHE_CONSUMER&"" + // necessary for message groups to work
            ""concurrentConsumers={{hermes.dris.distribution.kv78.concurrentOutgoingHttpDispatchers}}&"" +
            ""maxConcurrentConsumers={{hermes.dris.distribution.kv78.maxConcurrentOutgoingHttpDispatchers}}"")
            .routeId(ROUTE_ID_DISPATCH_QUEUE)
            .onException(Throwable.class)
                // transacted routes override the default error handler
                // to avoid the message going to the the ActiveMQ DLQ, forward to our DLQ here
                .to(ENDPOINT_DLQ)
                .handled(true)
            .end()
            .transacted()
             // determine action
             // the timingPointSequencer will check what needs to happen with the message
            .beanRef(""timingPointSequencer"", ""handleDispatch"")
            .choice()
                 // normal situation, the message can be sent
                .when(header(TimingPointSequencer.HEADER_ACTION).isEqualTo(constant(TimingPointSequencer.ACTION_PROCEED)))
                    .to(ENDPOINT_DISPATCH)
                 // delay message, usually because of previous errors for this destination
                .when(header(TimingPointSequencer.HEADER_ACTION).isEqualTo(constant(TimingPointSequencer.ACTION_REENQUEUE)))
                    .log(LoggingLevel.INFO, ""Re-enqueuing"" + MESSAGE_LOG_FORMAT)
                    .to(ENDPOINT_DISPATCH_QUEUE)
                .otherwise()
                    .log(LoggingLevel.ERROR, ""No action header set ???"" + MESSAGE_LOG_FORMAT)
                    .to(ENDPOINT_DLQ)
                .end()
            .end();

        from(ENDPOINT_DISPATCH)
            .routeId(ROUTE_ID_DISPATCH)
            .onException(IOException.class)
                // in case of IO exceptions, the message is always re-enqueued
                // reschedule parameters are set by the timingPointSequencer
                .beanRef(""timingPointSequencer"", ""handleFailure"")
                .log(LoggingLevel.WARN, ""Failed delivery (attempt = ${in.header.tpSecAttempt}) : ${in.header.CamelExceptionCaught}"" + MESSAGE_LOG_FORMAT)
                .to(ENDPOINT_DISPATCH_QUEUE)
                .handled(true)
            .end()
             // clear http headers to avoid interference from other http endpoints
            .removeHeaders(""CamelHttp*"")
            .setHeader(Exchange.HTTP_URI, simple(""http://${header."" + HEADER_DESTINATION_ADDRESS + ""}""))
            .setHeader(Exchange.HTTP_PATH, simple(""${properties:hermes.dris.distribution.kv78.controller.urlpath}""))
            .setHeader(Exchange.CONTENT_TYPE, constant(""application/xml""))
            .setHeader(Exchange.CONTENT_ENCODING, constant(""gzip"")) // use gzip compression
            .log(verboseLoggingLevel, ""Sending request to ${in.header.CamelHttpUri}/${in.header.CamelHttpPath}"" + MESSAGE_LOG_FORMAT)
             // use multicast instead of a pipeline, or the audit log will contain the http response!
            .multicast()
                .stopOnException()
                .to(ENDPOINT_TIMINGPOINT_HTTP + ""?httpClientConfigurerRef=timingPointHttpClientConfigurer&headerFilterStrategy=#distributionHttpHeaderFilterStrategy"", ENDPOINT_AUDIT_OUTGOING)
            .end()
            .beanRef(""timingPointSequencer"", ""handleSuccess"");
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-04-29 14:22:13.917,,,no_permission,,Unknown,,,,,,,,,,,236397,,,Sun Apr 29 15:22:56 UTC 2012,,,,,,,0|i025kv:,10505,,,,,,,,,"29/Apr/12 14:22;davsclaus;In your multicast, you only have 1 processor (eg only 1 to). If you remove the multicast, then I would assume the WARN is removed.","29/Apr/12 14:27;davsclaus;For the various endpoints can you post the real values you are using, eg ENDPOINT_DISPATCH and so forth.","29/Apr/12 14:34;davsclaus;Ah you got 2 endpoints in the multicast, with the comma on the far right side.",29/Apr/12 15:22;davsclaus;Okay I can re-produce the issue now.,,,,,,,,,,,,,,,,,,,,
"split().tokenizeXML(""child"", ""parent"").streaming() does not work correctly when parent's namespace declarations are separated with new line",CAMEL-5212,12552317,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,belis,belis,24/Apr/12 14:00,29/Apr/12 13:36,13/Mar/19 22:19,29/Apr/12 13:36,2.9.1,,,,,,,,,2.10.0,2.9.3,,,camel-core,,,,,,0,split,tokenizeXML,,,,,,,"when I try to split a big XML file using split().tokenizeXML(""child"", ""parent"").streaming() and if the parent's namespace declaration are separated with new line in the XML file, child element does not inherit the namespace declarations. When all declarations are on the same line it works ok.

<?xml version=""1.0"" encoding=""UTF-8""?>
<parent xmlns:ns1=""ns1.url""
        xmlns:ns2=""ns2.url"">
  <child></child>
  <child></child>
</parent>

doesn't work but


<?xml version=""1.0"" encoding=""UTF-8""?>
<parent xmlns:ns1=""ns1.url"" xmlns:ns2=""ns2.url"">
  <child></child>
  <child></child>
</parent>

is OK",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-04-29 13:36:34.576,,,no_permission,,Unknown,,,,,,,,,,,236822,,,Sun Apr 29 13:36:34 UTC 2012,,,,,,,0|i025p3:,10524,,,,,,,,,"29/Apr/12 13:36;davsclaus;Thanks for reporting, and providing a sample XML showing a working and non working use-case",,,,,,,,,,,,,,,,,,,,,,,
"The done file got deleted, when using the file component even if noop property set to true",CAMEL-5224,12552825,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,edvicif,edvicif,26/Apr/12 10:10,29/Apr/12 12:51,13/Mar/19 22:19,29/Apr/12 12:51,2.9.1,,,,,,,,,2.10.0,2.9.3,,,camel-core,,,,,,0,camel-file,,,,,,,,"We are consuming a feed from a mounted windows network drive, where we have rw access.
During the download we shouldn't touch anything so other users see the directory intact.

However even if we turn noop=true the done file got deleted after successfull conumptions
","I was using Windows XP and working on windows directory, when discovered the issue.",36000,36000,,0%,36000,36000,,,,,,,,,,,,,,26/Apr/12 10:12;edvicif;DoneMoveTest.java;https://issues.apache.org/jira/secure/attachment/12524418/DoneMoveTest.java,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Moderate,,,,,,,,,,,236810,,,Thu Apr 26 10:17:56 UTC 2012,,,,,,,0|i025rr:,10536,,,,,,,,,"26/Apr/12 10:12;edvicif;I've attached a unit test, which reproduce the issue.","26/Apr/12 10:12;edvicif;Ticket were generated based on conversation:
http://camel.465427.n5.nabble.com/Prevent-done-file-deletion-after-file-consumption-td5665345.html#a5667144","26/Apr/12 10:17;edvicif;Note the documentation:
http://camel.apache.org/file2.html#File2-Usingdonefiles

After the first example box it is stated: ""Camel will automatically delete the done file when it's done consuming the files.""

Maybe this needs to be updated as well.",,,,,,,,,,,,,,,,,,,,,
Loop causes NullPointerException on error,CAMEL-5210,12552248,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,hynek,hynek,24/Apr/12 06:07,27/Apr/12 07:59,13/Mar/19 22:19,27/Apr/12 07:58,2.9.2,,,,,,,,,2.10.0,2.9.3,,,camel-core,,,,,,0,,,,,,,,,"The following context will cause NullPointerException.

    <routeContext id=""myCamelContext"" xmlns=""http://camel.apache.org/schema/spring"">    
        <route>
            <from uri=""jms:myQueue""/>
            <onException>
                <exception>org.xml.sax.SAXParseException</exception>
                <redeliveryPolicy maximumRedeliveries=""2""/>
                <handled><constant>true</constant></handled>
                <to uri=""log:camelfatal?showAll=true&amp;multiline=true&amp;level=ERROR""/> 
            </onException>
            <loop copy=""true"">
              <constant>3</constant>
              <inOnly uri=""smtp://you_can_leave_this_unchanged""/>
            </loop>
        </route>
    </routeContext>


The callstack on the NullPointerException:
Daemon Thread [Camel (appServerCamelContext) thread #1 - JmsConsumer[emailOutbox]] (Suspended (exception NullPointerException))	
	DefaultErrorHandler(RedeliveryErrorHandler).processErrorHandler(Exchange, AsyncCallback, RedeliveryErrorHandler$RedeliveryData) line: 262	
	DefaultErrorHandler(RedeliveryErrorHandler).process(Exchange, AsyncCallback) line: 223	
	RouteContextProcessor.processNext(Exchange, AsyncCallback) line: 45	
	RouteContextProcessor(DelegateAsyncProcessor).process(Exchange, AsyncCallback) line: 90	
	DefaultChannel.process(Exchange, AsyncCallback) line: 304	
	AsyncProcessorHelper.process(AsyncProcessor, Exchange, AsyncCallback) line: 73	
	LoopProcessor(DelegateAsyncProcessor).processNext(Exchange, AsyncCallback) line: 99	
	LoopProcessor.process(Exchange, AsyncCallback, AtomicInteger, AtomicInteger) line: 103	
	LoopProcessor.process(Exchange, AsyncCallback) line: 74	
	AsyncProcessorHelper.process(AsyncProcessor, Exchange, AsyncCallback) line: 73	
	InstrumentationProcessor(DelegateAsyncProcessor).processNext(Exchange, AsyncCallback) line: 99	
	InstrumentationProcessor(DelegateAsyncProcessor).process(Exchange, AsyncCallback) line: 90	
	InstrumentationProcessor.process(Exchange, AsyncCallback) line: 71	
	AsyncProcessorHelper.process(AsyncProcessor, Exchange, AsyncCallback) line: 73	
	TraceInterceptor(DelegateAsyncProcessor).processNext(Exchange, AsyncCallback) line: 99	
	TraceInterceptor(DelegateAsyncProcessor).process(Exchange, AsyncCallback) line: 90	
	TraceInterceptor.process(Exchange, AsyncCallback) line: 91	
	AsyncProcessorHelper.process(AsyncProcessor, Exchange, AsyncCallback) line: 73	
	DefaultErrorHandler(RedeliveryErrorHandler).processErrorHandler(Exchange, AsyncCallback, RedeliveryErrorHandler$RedeliveryData) line: 333	
	DefaultErrorHandler(RedeliveryErrorHandler).process(Exchange, AsyncCallback) line: 223	
	RouteContextProcessor.processNext(Exchange, AsyncCallback) line: 45	
	RouteContextProcessor(DelegateAsyncProcessor).process(Exchange, AsyncCallback) line: 90	
	DefaultChannel.process(Exchange, AsyncCallback) line: 304	
	RouteContextProcessor.processNext(Exchange, AsyncCallback) line: 45	
	RouteContextProcessor(DelegateAsyncProcessor).process(Exchange, AsyncCallback) line: 90	
	UnitOfWorkProcessor.processAsync(Exchange, AsyncCallback, UnitOfWork) line: 150	
	UnitOfWorkProcessor.process(Exchange, AsyncCallback) line: 117	
	RouteInflightRepositoryProcessor.processNext(Exchange, AsyncCallback) line: 50	
	RouteInflightRepositoryProcessor(DelegateAsyncProcessor).process(Exchange, AsyncCallback) line: 90	
	AsyncProcessorHelper.process(AsyncProcessor, Exchange, AsyncCallback) line: 73	
	InstrumentationProcessor(DelegateAsyncProcessor).processNext(Exchange, AsyncCallback) line: 99	
	InstrumentationProcessor(DelegateAsyncProcessor).process(Exchange, AsyncCallback) line: 90	
	InstrumentationProcessor.process(Exchange, AsyncCallback) line: 71	
	AsyncProcessorHelper.process(AsyncProcessor, Exchange) line: 99	
	InstrumentationProcessor(DelegateAsyncProcessor).process(Exchange) line: 86	
	EndpointMessageListener.onMessage(Message) line: 104	
	DefaultJmsMessageListenerContainer(AbstractMessageListenerContainer).doInvokeListener(MessageListener, Message) line: 560	
	DefaultJmsMessageListenerContainer(AbstractMessageListenerContainer).invokeListener(Session, Message) line: 498	
	DefaultJmsMessageListenerContainer(AbstractMessageListenerContainer).doExecuteListener(Session, Message) line: 467	
	DefaultJmsMessageListenerContainer(AbstractPollingMessageListenerContainer).doReceiveAndExecute(Object, Session, MessageConsumer, TransactionStatus) line: 325	
	DefaultJmsMessageListenerContainer(AbstractPollingMessageListenerContainer).receiveAndExecute(Object, Session, MessageConsumer) line: 263	
	DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener() line: 1058	
	DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop() line: 1050	
	DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run() line: 947	
	ThreadPoolExecutor$Worker.runTask(Runnable) line: 886	
	ThreadPoolExecutor$Worker.run() line: 908	
	Thread.run() line: 662	
",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-04-27 07:59:05.186,,,no_permission,,Unknown,,,,,,,,,,,236824,,,Fri Apr 27 07:59:05 UTC 2012,,,,,,,0|i025on:,10522,,,,,,,,,27/Apr/12 07:59;davsclaus;Thanks for reporting and with the stacktrace,,,,,,,,,,,,,,,,,,,,,,,
The file consumer should use the charset encoding when reading the file if configured,CAMEL-5222,12552800,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,26/Apr/12 06:49,26/Apr/12 07:29,13/Mar/19 22:19,26/Apr/12 07:29,,,,,,,,,,2.10.0,2.9.3,,,camel-core,,,,,,0,,,,,,,,,"See CAMEL-5215.

This applies to the consumer as well. We should tighten this up, to ensure the charset is always used if configured. Currently the charset option could be shadowed if you did a convertBodyTo and specified another charset etc.

Also we should tighten up to use the charset configuration on the file endpoints. And added DEBUG logging which charset is being used for reading/write the files.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,236812,,,2012-04-26 06:49:49.0,,,,,,,0|i025rb:,10534,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
initialDelay and idempotentRepository Endpoint URI parameters fail to be read from Camel context when Turkish language is set in host operating system.,CAMEL-5199,12551933,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,morenoisidro,morenoisidro,20/Apr/12 21:08,22/Apr/12 09:18,13/Mar/19 22:19,22/Apr/12 09:18,2.8.1,,,,,,,,,2.10.0,2.8.5,2.9.3,,camel-core,,,,,,0,"camel-core,",context,endpoint,spring,,,,,"org.apache.camel.util.ObjectHelper.capitalize() method uses native JAVA String.toUpperCase() method (without parameters), which performs capitalization according to operating system current language and regional settings configuration. When these are set to Turkish, a call to capitalize() method, with a String starting with ""i"" as parameter, returns Turkish dotted ""I"" as capitalized ""i"", which is wrong according to programmatic language and expected behavior.

This behaviour impacts, at least, in Endpoint URI parameters which names start with char ""i"", such as ""idempotentRepository"" and ""initialDelay"" URI parameters. When setter/getter methods lookup is performed for these parameters, wrong method names are returned due to ObjectHelper.capitalize() method. This method uses standard Java String.toUpperCase() function which returns a dotted ""I"" instead of dotless ""I"" for idempotentRepository and initialDelay parameters.

To solve this, the attached patch consists of refactoring ObjectHelper.capitalize() method. Instead of calling toUpperCase() method, it is called toUpperCase(Locale.ENGLISH) to enforce 'I' character (dotless) return.",CamelContext Spring configuration. Versions: Camel 2.8.1 / Spring 3.0.,,,,,,,,,,,,,,,,,,,,21/Apr/12 20:51;morenoisidro;ObjectHelper.java.patch;https://issues.apache.org/jira/secure/attachment/12523650/ObjectHelper.java.patch,21/Apr/12 20:51;morenoisidro;TurkishCapitalizationTest.java;https://issues.apache.org/jira/secure/attachment/12523651/TurkishCapitalizationTest.java,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-04-21 08:53:06.508,,,no_permission,,Unknown,,,,,,,,,,,236835,,,Sun Apr 22 09:18:15 UTC 2012,,,Patch Available,,,,0|i025m7:,10511,,,,,,,,,"20/Apr/12 21:20;morenoisidro;Set Regional settings to Turkish before running the test.

Operating System specific configuration:

Windows 7: just Turkish regional settings (not necesary Windows display language) is enough to make the test fail.

OSX 10.7.3: set Turkish as display language, not just regional settings.",21/Apr/12 08:53;davsclaus;Thanks for reporting. Do you mind re-attaching your files and mark [x] in grant license to Apache. Otherwise we cannot accept and use your patches in the source.,"21/Apr/12 20:54;morenoisidro;Sorry, I've just re-attached the files. Thanks to you.",22/Apr/12 09:18;davsclaus;Thanks I have fixed all the toUpperCase and toLowerCase in camel-core to use the english locale.,,,,,,,,,,,,,,,,,,,,
redelivery exhausted marker should be cleared by try catch EIP and when errorHandler handles the message,CAMEL-5201,12551989,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,21/Apr/12 14:42,21/Apr/12 14:55,13/Mar/19 22:19,21/Apr/12 14:55,,,,,,,,,,2.10.0,2.8.5,2.9.3,,camel-core,,,,,,0,,,,,,,,,"The logic which clear redelivery state should also clear the redelivery exhausted flag in try .. catch, and when the error handler handles the message.
",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,236833,,,2012-04-21 14:42:58.0,,,,,,,0|i025mn:,10513,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SftpChangedExclusiveReadLockStrategy does not check the correct field to determine if a file is changing,CAMEL-5196,12551742,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,steve_barham,steve_barham,20/Apr/12 08:22,20/Apr/12 09:41,13/Mar/19 22:19,20/Apr/12 09:41,2.8.0,,,,,,,,,2.10.0,2.8.5,2.9.3,,camel-ftp,,,,,,0,locking,patch,regression,sftp,,,,,"I have recently upgraded from Camel 2.7 to a more recent version. I can confirm that the bug is still in trunk. 

In Camel 2.7, there was a generic FileChangedExclusiveReadLockStrategy. This checked the modification time of the file using GenericFile.lastModified. This field was set by SftpComponent#asRemoteFile as file.getAttrs().getMTime() * 1000. 

In Camel 2.8 onwards, this behaviour is implemented by SftpChangedExclusiveReadLockStrategy. This incorrectly (to my mind) retrieves the timestamp on line 67 using: 

newLastModified = f.getAttrs().getATime();

Taking the atime of the file doesn't make a great deal of sense to me; on a POSIX compliant filesystem, the atime will be incremented every time the file is polled, meaning that this strategy will never be able to mark a file as unchanged. While some filesystems are mounted nowadays as noatime or relatime, the mtime is still absolutely the safest mechanism to determine if something is writing to a target file. 

The impact of this bug is that we cannot reliably poll files from a remote SFTP server. 
",,300,300,,0%,300,300,,,,,,,,,,,,,,20/Apr/12 08:22;steve_barham;Switch_to_modified_time_for_remote_timestamp_checks_for_SftpChangedExclusiveReadLockStrate.patch;https://issues.apache.org/jira/secure/attachment/12523464/Switch_to_modified_time_for_remote_timestamp_checks_for_SftpChangedExclusiveReadLockStrate.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-04-20 09:41:13.158,,,no_permission,,Novice,,,,,,,,,,,236549,,,Fri Apr 20 09:41:13 UTC 2012,,,Patch Available,,,,0|i025lj:,10508,Regression,,,,,,,,20/Apr/12 09:41;davsclaus;Thanks for the patch.,,,,,,,,,,,,,,,,,,,,,,,
 camel-cxfrs producer should keep the response detail when the exception is thrown,CAMEL-5158,12550375,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,10/Apr/12 14:00,11/Apr/12 05:03,13/Mar/19 22:19,11/Apr/12 05:03,2.6.0,2.7.0,2.8.0,2.9.0,,,,,,2.10.0,2.8.5,2.9.2,,camel-cxf,,,,,,0,,,,,,,,,"CxfRsProducer doesn't put the response detail message into the exception instead of just calling response.toString().
We should fix it by looking up the response from input stream of the response entity.
",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,235240,,,2012-04-10 14:00:43.0,,,,,,,0|i025db:,10471,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NettyProducer with user defined client pipeline factory ,CAMEL-4960,12540519,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,dmitrijz,dmitrijz,31/Jan/12 09:16,08/Apr/12 13:49,13/Mar/19 22:19,08/Apr/12 13:49,2.8.1,,,,,,,,,2.10.0,2.9.2,,,camel-netty,,,,,,0,,,,,,,,,"If user defined client pipeline factory is configured, Netty Producer shares the same instance of ClientPipelineFactory for all created connections. See code below:
  configuration.getClientPipelineFactory().setProducer(this);
  configuration.getClientPipelineFactory().setExchange(exchange);
  configuration.getClientPipelineFactory().setCallback(callback);
  clientPipeline = configuration.getClientPipelineFactory().getPipeline();

Which can cause an issue in multithreaded environment. Maybe it is better to create user defined client pipeline factory for each connection as it is done with DefaultClientPipelineFactory?",Windows 7,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-04-08 13:02:39.623,,,no_permission,,Unknown,,,,,,,,,,,225932,,,Sun Apr 08 13:35:23 UTC 2012,,,,,,,0|i0244v:,10271,,,,,,,,,08/Apr/12 13:02;davsclaus;This works as designed. When you use a custom factory then it's shared. Because a custom factory could be configured and whatnot. I will improved the docs a bit on this.,"08/Apr/12 13:35;davsclaus;I decided to make the factories stateless, then it works much better.",,,,,,,,,,,,,,,,,,,,,,
StAXConverter is not threadsafe when not using Woodstox,CAMEL-5142,12549742,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dkulp,dkulp,dkulp,05/Apr/12 15:38,06/Apr/12 14:34,13/Mar/19 22:19,06/Apr/12 14:34,2.9.1,,,,,,,,,2.8.5,2.9.2,,,camel-core,,,,,,0,,,,,,,,,"The StAXConverter uses singletons for the XMLInputFactory and XMLOutputFactory.   That works fine with woodstox where those implementations are threadsafe.   However, the sun parser built into the JDK is not thread safe.
",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,234733,,,2012-04-05 15:38:24.0,,,,,,,0|i0259r:,10455,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
interceptFrom() doesn't work with property placeholders,CAMEL-5129,12548495,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,raulvk,raulvk,28/Mar/12 13:48,05/Apr/12 10:31,13/Mar/19 22:19,05/Apr/12 10:31,2.8.0,,,,,,,,,2.10.0,2.9.2,,,,,,,,,0,,,,,,,,,"When using property placeholders in consumer endpoints, interceptFrom is not able to match the pattern against the Endpoint URI because the latter is passed unresolved. {{EndpointHelper.matchEndpoint(String uri, String pattern)}} receives the placeholder in the first parameter rather than the resolved value of the property.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,233592,,,2012-03-28 13:48:27.0,,,,,,,0|i0256v:,10442,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CxfDestination should copy the in message header to the out message when it sends the message back,CAMEL-5116,12547998,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,25/Mar/12 09:33,31/Mar/12 05:43,13/Mar/19 22:19,31/Mar/12 05:43,2.6.0,2.7.0,2.8.0,2.9.0,,,,,,2.10.0,2.8.5,2.9.2,,camel-cxf,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,233095,,,Sat Mar 31 05:43:54 UTC 2012,,,,,,,0|i0253z:,10429,,,,,,,,,"31/Mar/12 05:43;njiang;Applied the patch into trunk, 2.9.x and 2.8.x branches.",,,,,,,,,,,,,,,,,,,,,,,
CxfBeanDestination should copy the in message header to the out message,CAMEL-5115,12547997,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,25/Mar/12 09:29,31/Mar/12 05:42,13/Mar/19 22:19,31/Mar/12 05:42,2.6.0,2.7.0,2.8.0,2.9.0,,,,,,2.10.0,2.8.5,2.9.2,,camel-cxf,,,,,,0,,,,,,,,,"User complains about can not access any other headers after the cxfbean in this mail thread[1].
We should let the CxfBeanDestination copy the in message header before it sends the message back.

[1]http://camel.465427.n5.nabble.com/Camel-CXF-Drops-Headers-tt5590792.html ",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,233094,,,Sat Mar 31 05:42:26 UTC 2012,,,,,,,0|i0253j:,10427,,,,,,,,,25/Mar/12 09:32;njiang;We should do the same thing in the CXfDestination.,31/Mar/12 05:42;njiang;Applied patch into trunk， 2.9.x and 2.8.x branches.,,,,,,,,,,,,,,,,,,,,,,
camel-hdfs feature does not work as it refers to jetty-bundle-version which does not resolve,CAMEL-5131,12548662,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,chris@die-schneider.net,chris@die-schneider.net,chris@die-schneider.net,29/Mar/12 13:17,29/Mar/12 14:12,13/Mar/19 22:19,29/Mar/12 14:12,,,,,,,,,,2.9.2,,,,camel-hdfs,,,,,,0,,,,,,,,,"In the feature file the camel-hdfs feature loads the bundle:
<bundle>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.jetty/${jetty6-bundle-version}</bundle>

As jetty-bundle-version is not defined that does not work.

I see two possible solutions:
1. use jetty-version instead
2. Remove the bundle as the feature also loads the war feature which should load jetty

I will try to fix with variant 1. Does anyone know why we need the bundle if we have the war feature?
",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,233759,,,2012-03-29 13:17:15.0,,,,,,,0|i0257b:,10444,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Exchange.FAILURE_ENDPOINT header points to incorrect endpoint with multicast,CAMEL-5098,12546713,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,hadrian,hadrian,16/Mar/12 02:54,21/Mar/12 14:55,13/Mar/19 22:19,21/Mar/12 14:55,2.8.4,,,,,,,,,2.10.0,2.8.5,2.9.2,,,,,,,,0,,,,,,,,,"With multicast when an Exchange is sent to multiple endpoints, the FAILURE_ENDPOINT header points to the last endpoint hit, not the (last) one that actually caused the exception.

I have a fix for it, but I need to see if this happens for other EIPs as well.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Moderate,,,,,,,,,,,231871,,,Tue Mar 20 02:10:54 UTC 2012,,,,,,,0|i024zr:,10410,,,,,,,,,"20/Mar/12 02:10;hadrian;I have a few tests failing, looks like this will take one more day. There is a bit of inconsistency in the way exception handling is correlated with exchange properties.",,,,,,,,,,,,,,,,,,,,,,,
cxfrs producer should retain the message headers when it gets the response,CAMEL-5107,12547021,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,19/Mar/12 14:21,20/Mar/12 08:51,13/Mar/19 22:19,20/Mar/12 08:51,2.6.0,2.7.0,2.8.0,2.9.0,,,,,,2.10.0,2.8.5,2.9.2,,camel-cxf,,,,,,0,,,,,,,,,"Here is the discussion[1] about it.
[1]http://camel.465427.n5.nabble.com/CXFRS-producer-removing-JMS-headers-tp5568925p5574037.html",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,232179,,,Tue Mar 20 08:51:05 UTC 2012,,,,,,,0|i0251r:,10419,,,,,,,,,"20/Mar/12 08:51;njiang;Applied patch into trunk, camel-2.9.x and camel-2.8.x branches.",,,,,,,,,,,,,,,,,,,,,,,
Quartz component doesn't start with a persistent scheduler,CAMEL-4900,12538454,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,bryanck,bryanck,15/Jan/12 20:04,16/Mar/12 15:06,13/Mar/19 22:19,16/Mar/12 10:22,2.8.4,2.9.0,,,,,,,,2.10.0,2.8.5,2.9.2,,camel-quartz,,,,,,0,,,,,,,,,"I have scheduler persistence on but clustering is not turned on. When starting my app the first time, it starts OK. After shutting down and staring a second time, an exception is thrown and the app doesn't start up. This did not occur in 2.8.3. The following exception occurs:

Caused by: org.quartz.SchedulerException: Trigger's related Job's name cannot be null
	at org.quartz.Trigger.validate(Trigger.java:955) ~[quartz-1.8.5.jar:na]
	at org.quartz.core.QuartzScheduler.rescheduleJob(QuartzScheduler.java:982) ~[quartz-1.8.5.jar:na]
	at org.quartz.impl.StdScheduler.rescheduleJob(StdScheduler.java:302) ~[quartz-1.8.5.jar:na]
	at org.apache.camel.component.quartz.QuartzComponent.doAddJob(QuartzComponent.java:233) ~[camel-quartz-2.9.0.jar:2.9.0]

In 2.9.0, the code was changed here and this is where it craashes:
{code}
if (!isClustered()) {
    trigger.setStartTime(Calendar.getInstance().getTime());
    scheduler.rescheduleJob(trigger.getName(), trigger.getGroup(), trigger);
}
{code}

My component definition looks like this:

{code}
<endpoint id=""myschedule"" uri=""quartz://fmc/mycron=${myschedule.cron}&amp;stateful=true"" />
{code}

Again, this affects 2.9.0 but not 2.8.3. I have not found a workaround yet.
","Java 1.6.0_29 64-bit, Mac OS X 10.7 and CentOS 6",,,,,,,,,,,,,,,,,,,,22/Jan/12 13:47;bryanck;quartztest.zip;https://issues.apache.org/jira/secure/attachment/12511429/quartztest.zip,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-01-15 20:26:53.701,,,no_permission,,Unknown,,,,,,,,,,,223958,,,Fri Mar 16 15:06:24 UTC 2012,,,,,,,0|i023rr:,10212,,,,,,,,,"15/Jan/12 20:26;bvahdat;I *assume* this relates to the change done by CAMEL-4794 in QuartzComponent from:

{code}
if (!isClustered()) {
  scheduler.resumeTrigger(trigger.getName(), trigger.getGroup());
}
{code}

to:

{code}
if (!isClustered()) {
  trigger.setStartTime(Calendar.getInstance().getTime());
  scheduler.rescheduleJob(trigger.getName(), trigger.getGroup(), trigger);
}
{code}

","15/Jan/12 20:29;bvahdat;@Bryan
Sorry, just realized that you have pasted the same code-snippet by the Description field.","16/Jan/12 18:06;bryanck;Yes, I suspect that change is what is causing this. The call to rescheduleJob() validates that the trigger's job name is not null. But the job name IS null. I tried adding a job.name=xxx property to the endpoint URL, but that did not fix the problem.",17/Jan/12 08:26;bvahdat;@Bryan would you have the possibility to provide a unit-test demonstrating the regression failure you mentioned or provide maybe a snippet of your routing logic so that we can reproduce this regression failure on the trunk. ,"17/Jan/12 17:19;bryanck;I can put together a test program. It will have to wait until this weekend though as it will require a little work (needs a database for persistence, etc.)","22/Jan/12 13:47;bryanck;Here is a simple app that demonstrates the problem. It uses gradle (v1.0m7). Unzip and run ""gradle runClean"". This will run with a fresh database. Then run ""gradle run"" to run with the existing database. The exception will be thrown.","22/Jan/12 17:56;hadrian;Bryan, thanks for the test case. I am looking into it. Babak suggested that my changes may be the culprit.","22/Jan/12 18:10;bvahdat;Hadrian, 

Thanks alot for looking into it! As I now can silently leave my box and play a bit with my small kids, right now yelling at me :-)",02/Feb/12 21:51;bryanck;This also affects the newly released 2.8.4 now.,28/Feb/12 15:40;davsclaus;So what is the status of this? ,"16/Mar/12 08:05;davsclaus;Bryan thanks for your sample application.
I am adding unit tests based upon your work.

","16/Mar/12 08:41;davsclaus;Bryan which container do you run your app?
And how do you restart your app?","16/Mar/12 08:49;davsclaus;I can only reproduce this, if the ""restart"" does not run cleanly. Then upon starting again, then the trigger still exists, and causes that exception reported by Bryan.",16/Mar/12 10:22;davsclaus;Another way of reproducing was just to stop/start the route itself.,"16/Mar/12 10:50;bvahdat;Claus

Thanks for digging into this issue and resolving it.

Mange tak :-)",16/Mar/12 15:06;bryanck;I tested the latest 2.8.x branch. This fixed the issue for me. Thanks!,,,,,,,,
cometD component doesn't support multiple endpoints with different ports,CAMEL-5087,12546524,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,15/Mar/12 02:58,15/Mar/12 11:24,13/Mar/19 22:19,15/Mar/12 11:24,2.8.0,2.9.0,,,,,,,,2.10.0,2.8.5,2.9.2,,camel-cometd,,,,,,0,,,,,,,,,"Current camel-cometD component always use on server and it doesn't support to create multiples endpoints with different ports.

Here is the thread which discuss about it.
[1]http://camel.465427.n5.nabble.com/Error-with-multiple-CometD-components-td5562936.html",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,231682,,,Thu Mar 15 11:24:44 UTC 2012,,,,,,,0|i024xb:,10399,,,,,,,,,"15/Mar/12 11:24;njiang;Committed the patch into trunk, camel-2.8.x and camel-2.9.x branches.",,,,,,,,,,,,,,,,,,,,,,,
Failover EIP - Should use defensive copy of exchange before failover to avoid side effects,CAMEL-5085,12546403,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,14/Mar/12 14:52,15/Mar/12 10:44,13/Mar/19 22:19,15/Mar/12 10:44,2.8.1,,,,,,,,,2.10.0,2.8.5,2.9.2,,camel-core,,,,,,0,,,,,,,,,"When using the failover load balancer, it works directly on the given exchange, and in case of a failover, it clears the exception state etc.

However this does not work too well as if you use a processor directly then you can mutate the message before failover, which mean when the exchange is failed over, then its a 100% copy of the input message, but the previously mutated message.

We should do like the other EIPs by doing a defensive copy of the exchange.

",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,231561,,,2012-03-14 14:52:34.0,,,,,,,0|i024wv:,10397,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Error when mocking all endpoints and using cxf,CAMEL-5084,12546398,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,hefiso,hefiso,14/Mar/12 14:31,15/Mar/12 08:57,13/Mar/19 22:19,15/Mar/12 08:57,2.9.1,,,,,,,,,2.9.2,,,,camel-cxf,,,,,,0,,,,,,,,,"When upgrading from Apache Camel 2.9.0 to 2.9.1 I suddently get an error when using camel-cxf endpoints. When running my JUnit tests (extending CamelSpringTestSupport) I get this exception:

Caused by: java.lang.NullPointerException
	at org.apache.camel.component.cxf.CxfProducer.getBindingOperationInfo(CxfProducer.java:331)
	at org.apache.camel.component.cxf.CxfProducer.prepareBindingOperation(CxfProducer.java:202)
	at org.apache.camel.component.cxf.CxfProducer.process(CxfProducer.java:141)
	at org.apache.camel.impl.SynchronousDelegateProducer.process(SynchronousDelegateProducer.java:61)
	at org.apache.camel.impl.InterceptSendToEndpoint$1.process(InterceptSendToEndpoint.java:144)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:99)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:56)
When I debug my test I see that the method doStart() in CxfProducer is never called, resulting in client being null (hence the NullPointerException in CxfProducer.java:331 ). 

I suspect the mocking all endpoints with the InterceptSendToEndpoint, 
short-circut the startup procedure to not delegate the start call to 
the intercepted endpoint. Or there abouts. 

See discussion in camel user forum: http://camel.465427.n5.nabble.com/Error-using-apache-cxf-w-Camel-2-9-1-tc5560906.html

",Generic windows,,,,,,,,,,,,,,,,,,,,14/Mar/12 14:33;hefiso;hefiso-test.zip;https://issues.apache.org/jira/secure/attachment/12518328/hefiso-test.zip,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-03-15 06:57:39.015,,,no_permission,,Unknown,,,,,,,,,,,231556,,,Thu Mar 15 08:57:51 UTC 2012,,,,,,,0|i024wn:,10396,,,,,,,,,14/Mar/12 14:33;hefiso;Example showing the error. Downgrade to version 2.9.0 removes the error.,"15/Mar/12 06:57;njiang;I just debugged the code with the test case, I found the InterceptSendToEndpoint doesn't sart the producer which it created.
After updated the code for it, the test passed.
",15/Mar/12 07:35;njiang;This issue should be resolved by CAMEL-5089.,"15/Mar/12 08:57;njiang;It should be resolve in camel 2.9.2, before that you can applied the patch of CAMEL-5089 yourself.",,,,,,,,,,,,,,,,,,,,
InterceptSendToMockEndpoint doesn't start or stop the producer which is intercepted,CAMEL-5089,12546534,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,15/Mar/12 07:25,15/Mar/12 08:55,13/Mar/19 22:19,15/Mar/12 08:55,2.7.0,2.8.0,2.9.0,,,,,,,2.10.0,2.8.5,2.9.2,,camel-core,,,,,,0,,,,,,,,,The producer which is intercepted by the InterceptSendToMockEndpoint should manage the lifecycle of  the delegate producer otherwise the delegate producer will complain about it.,,,,,,,,,,,,,,CAMEL-5084,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,231692,,,Thu Mar 15 08:55:35 UTC 2012,,,,,,,0|i024xr:,10401,,,,,,,,,"15/Mar/12 08:55;njiang;Applied patch into trunk, camel 2.9.x and camel 2.8.x branches.",,,,,,,,,,,,,,,,,,,,,,,
Message Loss when using Weighted Round Robin LoadBalancer,CAMEL-5070,12545675,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,akarpe,nikosd23,nikosd23,08/Mar/12 16:48,10/Mar/12 09:25,13/Mar/19 22:19,09/Mar/12 19:25,2.9.1,,,,,,,,,2.10.0,2.8.5,2.9.2,,camel-core,,,,,,0,,,,,,,,,"chooseProcessor method accesses resources in a non synchronized fashion. This leads in errors during loadbalancing and as a result messages are lost. I have created a project that provides an integration test (using karaf 2.2.5 and a custom command to check messages of the activemq broker) with a custom weighted round robin loadbalancer that ""seems"" to solve the issue of lost messages.
 
The problem with the provided solution is that when messages are dequeued from the second stage of queues (queues1, 2 and 3) in custom-loadbalancer-route subproject the jmsconsumer threads also block (checked this using profiler). I would expect only the jmsconsumer threads of the first queue (initial.queue) to block waiting for the synchronized chooseProcessor method. Any clues on why this happens?",,,,,,,,,,,,,,,,,,,,,08/Mar/12 16:49;nikosd23;loadbalancer-itest.zip;https://issues.apache.org/jira/secure/attachment/12517574/loadbalancer-itest.zip,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-03-09 14:21:27.712,,,no_permission,,Unknown,,,,,,,,,,,230858,,,Sat Mar 10 09:25:11 UTC 2012,,,,,,,0|i024tj:,10382,,,,,,,,,"08/Mar/12 16:49;nikosd23;Attaching the maven project that contains the camel route, the custom activemq commands and the itest subproject",08/Mar/12 17:14;nikosd23;You can reproduce the problem by uncommenting the weightedRoundRobin line in the custom-loadbalancer-route subproject (and commenting of course the custom). The custom karaf command that was implemented (queue:broker-info) provides the following information QName|QConsumerCount|QSize|QEnqueueCount|QDequeueCount.,"09/Mar/12 14:21;davsclaus;Which jms consumer is blocked?
And what is your problem exactly?

Can you post some more details. ","09/Mar/12 14:44;nikosd23;Weighted Round Robin Loadbalancer should be synchronized. The custom loadbalancer provided in the integration test does exactly this. It solves the problem of the index out of bound exception:

Caused by: java.lang.ArrayIndexOutOfBoundsException: 3
        at java.util.concurrent.CopyOnWriteArrayList.get(CopyOnWriteArrayList.java:343)[:1.6.0_20]
        at org.apache.camel.processor.loadbalancer.WeightedRoundRobinLoadBalancer.chooseProcessor(WeightedRoundRobinLoadBalancer.java:52)[71:org.apache.camel.camel-core:2.9.0]
        at org.apache.camel.processor.loadbalancer.QueueLoadBalancer.process(QueueLoadBalancer.java:39)[71:org.apache.camel.camel-core:2.9.0]
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)[71:org.apache.camel.camel-core:2.9.0]
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)[71:org.apache.camel.camel-core:2.9.0]

Nevertheless, if you follow this approach jms consumers of queue1, queue2 and queue3 block. If you try to loadbalance a large amount of messages from the first queue to the other 3, using the synchronized weighted round robin loadbalancer, then you will see that the queues (queue1,2 and 3) are growing without obvious to me reason. The second route is only from jms to log.","09/Mar/12 15:40;akarpe;Hi Nikos,

I can see the scenario you are mentioning happening under load where the counter and/or runtimeWeight may get out of synch under load...

I am however unclear on the queues growing without reason issue. Do you mean there are additional messages being created and dispatched to the queues.

Can you remove the synchronized on the chooseProcessor() method and synchronize just the counter and runtimeWeight and see if there is a change in behavior. 

Cheers,

Ashwin...","09/Mar/12 18:27;nikosd23;Hi Ashwin,

The provided sync load balancer solves the issue of lost messages. If you check the itest subproject you will see that the number of messages enqueued to initial route is the same as the sum of the messages dequeued from the three queues. I am not implying that additional messages are being created and dispatched to queues.

I believe that the whole process of chooseprocessor should be atomic not just the access to counter shared resource or weights, that is why I synched the whole method.

I have profiled the plain weighted round robin loadbalancer and experienced the same behaviour in terms of blocking jmsconsumer threads of all queues, so maybe this is the normal behavior. Sorry for not having done this before.

Thanks,
Nikos","09/Mar/12 18:41;akarpe;Hi Nikos,

Excellent... I will make the fix right away, test, and check it in.

Thanks for your help in identifying the issue and providing the patch...

Cheers,

Ashwin...","09/Mar/12 18:41;akarpe;Hi Nikos,

Excellent... I will make the fix right away, test, and check it in.

Thanks for your help in identifying the issue and providing the patch...

Cheers,

Ashwin...","09/Mar/12 19:24;akarpe;Hi Nikos,

I have applied the fix to the trunk... 

https://svn.apache.org/viewvc?view=revision&revision=1298993

Thanks for identifying the issue and offering a patch for it.

Cheers,

Ashwin...","09/Mar/12 19:25;akarpe;Applied fix to trunk as revision r1298993.

Thanks to Nikolaos Dimos for providing the patch.

- Ashwin...","10/Mar/12 08:57;davsclaus;See the asyncConsumer option on the JMS component
http://camel.apache.org/jms",10/Mar/12 09:25;nikosd23;Thanks Ashwin and Claus.,,,,,,,,,,,,
Bug: Unique Endpoints Leaking in DefaultInflightRepository,CAMEL-5058,12544960,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,zilatica,zilatica,02/Mar/12 16:35,08/Mar/12 16:08,13/Mar/19 22:19,07/Mar/12 22:19,2.9.0,,,,,,,,,2.10.0,2.9.2,,,camel-core,,,,,,0,,,,,,,,,"If you have an endpoint protocol which uses unique URIs you will leak Strings in the HashMap stored in the DefaultInflightRepository (org.apache.camel.impl.DefaultInflightRepository)

It seems there is a reference counting scheme in place, but it doesn't do a remove until the ""stop"" method is called to shut the system down.  We are running XMPP endpoints, which use a protocol like xmpp://someaccount@domain/password?to=someOtherAccount
When there are 10 million accounts, not all of which are active, but all of which may message at some time or another, no references are removed to the endpointCount.

When the count becomes 0, the reference should be removed and the size method will still return the appropriate result.

Please be careful in the implementation to synchronize on some object (perhaps the AtomicInteger) reflecting a read/write lock on the endpoint count modification.",,86400,86400,,0%,86400,86400,,,,,,,,,,,,,,07/Mar/12 14:39;zilatica;fixLeak.diff;https://issues.apache.org/jira/secure/attachment/12517403/fixLeak.diff,06/Mar/12 22:25;zilatica;fixLeak.diff;https://issues.apache.org/jira/secure/attachment/12517321/fixLeak.diff,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-03-03 11:22:17.284,,,no_permission,,Unknown,,,,,,,,,,,230146,,,Thu Mar 08 16:08:59 UTC 2012,,,,,,,0|i024qv:,10370,,,,,,,,,"03/Mar/12 11:22;davsclaus;The inflight registry should be route based instead of endpoint, as that is what the graceful shutdown really needs. 
So instead of being endpoint based, we can switch to be route id, based instead.

Can you post some more details about your use-case, I wonder why you get so many unique endpoints in the registry, as its consumer based. Are you adding a lot of new routes or the likes?","03/Mar/12 16:10;davsclaus;I have committed a fix that removes entries from the registry when removing a route.

We need to keep it endpoint key based due producer template setup a UoW which essentially is a exchange created outside a route, and therefore we do not have a routeId at this given moment.","03/Mar/12 17:04;bvahdat;Just for the sake of not losing the revision history:

trunk: http://svn.apache.org/viewvc?view=revision&revision=1296653
2.9.x: http://svn.apache.org/viewvc?view=revision&revision=1296655 ",04/Mar/12 07:12;davsclaus;Ah I was 1000 numbers behind in the commit message :),"05/Mar/12 14:04;zilatica;We construct endpoints at runtime to send a message to the XMPP subsystem.  It isn't ideal, but it works for us.  With the memory leak, however, it has to be restarted once a week or so.

Thanks for the fast fix!","05/Mar/12 20:00;zilatica;I'm not quite sure this fixes our problem.  We aren't creating a true route.  We are using a ProducerTemplate to send a Message to an Endpoint, and the Endpoint is unique, created at runtime, and would essentially create a new entry in the ConcurrentHashMap stored in the DefaultInflightRepository.

Ideally, when remove is called with an Exchange, if the reference count becomes 0, then the entry is removed from the Map.","06/Mar/12 08:02;davsclaus;Zach,

Yes I suspected there was still a problem for you. But I didn't have a chance to ask how you send the messages. So just to be sure, you use a producer template to send to dynamic endpoint uris.
","06/Mar/12 10:24;davsclaus;Notice ideally the inflight registry would just track for routes only. But the producer template uses an UoW as well for some reason we had to do a while ago. So it will also enlist itself in the inflight registry (well its in fact also an inflight message you may say).

So we can either ensure to remove from the inflight map if it become zero as you suggest. This may require a bit of locking, as you need to remove and compare.

Alternative, as the map, does not need to be removed in real time, we can have a background thread, doing the cleanup in a scheduled fashion.","06/Mar/12 13:03;zilatica;Claus, that is correct that I'm using the producer template to send the messages.  I actually have a solution that I'm currently testing, but I've got to wait for our legal department to review the change to submit back to the community (we've got a big process I have to follow).

Hopefully I will be able to submit the patch, including a unit test, to validate the change.","06/Mar/12 22:25;zilatica;The diff to fix the leak.  Note the unit test runs 2,000,000 operations to validate the fix.  It runs in 1 second on my computer, so the bottleneck due to the synchronized is limited.","07/Mar/12 07:26;davsclaus;Zach thanks for the patch. Can you re-attach the patch and make sure the mark [x] in grant license to ASF in the file attachment wizard. We need this to be able to accept your patch.
",07/Mar/12 14:39;zilatica;Re-attaching code with agreement to allow the Apache License,07/Mar/12 14:39;zilatica;Done,07/Mar/12 22:19;davsclaus;Thanks for the patch.,"08/Mar/12 10:14;bvahdat;I did polish the provided unit-test a bit mostly because of the required visibility of the failed flag (volatile keyword).
Especially required while running tests on the multi-core boxes.","08/Mar/12 13:39;zilatica;Yea, my bad.  I remembered I had some cleanup to do on that hack-n-slash unit test last night.  Ugly, ugly unit test...


Thanks for the cleanup Babak!","08/Mar/12 16:08;davsclaus;I improved this to avoid the synchronization in CAMEL-5057. As well only to track in flight per routes, as per endpoint is not needed.",,,,,,,
Parameter binding not working with BeanExpression,CAMEL-4894,12538387,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,hadrian,hadrian,14/Jan/12 04:27,01/Mar/12 17:33,13/Mar/19 22:19,01/Mar/12 17:33,2.9.0,,,,,,,,,2.10.0,2.9.1,,,camel-core,,,,,,0,,,,,,,,,The parameter [binding options|http://camel.apache.org/bean-binding.html] available in camel-2.9.0 do not work for BeanExpression. The reason is the fake ognl parser that gets confused about the syntax. We need to align the two scenarios and probably replace the ognl like parsing.,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-01-15 16:49:52.873,,,no_permission,,Unknown,,,,,,,,,,,223893,,,Sun Jan 15 16:49:52 UTC 2012,,,,,,,0|i023qv:,10208,,,,,,,,,"15/Jan/12 16:49;davsclaus;I took a look, its a minor bug in the OgnlHelper.splitOgnl method which did not take into account the new parameter binding syntax, which allows end users to specify methods having parenthesis defining the parameter binding. 

Fixing that makes the test work, (there is a error in the unit test as the method name is bar, not foo)
As well the expected result was wrong, so I simplified the unit test to return a fixed reply, and assert the input values.

Committed to trunk in rev 1231704, will backport to the 2.9 branch as well.",,,,,,,,,,,,,,,,,,,,,,,
Using a custom thread pool profile does not work with EIP,CAMEL-5053,12544578,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,29/Feb/12 08:54,29/Feb/12 12:26,13/Mar/19 22:19,29/Feb/12 12:26,2.9.0,,,,,,,,,2.10.0,2.9.1,,,camel-core,,,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/ThreadPoolProfile-and-multicast-tp5524245p5524245.html
",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,229764,,,Wed Feb 29 10:40:31 UTC 2012,,,,,,,0|i024pr:,10365,,,,,,,,,29/Feb/12 09:05;davsclaus;The problem is CAMEL-4244 which broke this,"29/Feb/12 10:40;davsclaus;Some of the EIPs works. 

However the code wasn't consistent, as all EIPs that support thread pools should use ProcessorDefinitionHelper which have helper methods to configure the thread pool accordingly, which not all was doing after the refactoring in 2.9.0.",,,,,,,,,,,,,,,,,,,,,,
Memory leak when adding/removing a lot of routes with JMX enabled,CAMEL-5045,12544171,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,26/Feb/12 14:42,27/Feb/12 07:12,13/Mar/19 22:19,27/Feb/12 07:10,2.8.4,2.9.0,,,,,,,,2.10.0,2.8.5,2.9.1,,camel-core,jmx,,,,,0,,,,,,,,,"If you add and remove a lot of routes to CamelContext and have JMX enabled, then the DefaultManagementLifecycleStrategy will accumulate a map of provisional JMX performance counters for the route mbeans. The map should be cleared after usage, as the map is no longer needed.

Memory will accumulate as the map has reference to old objects which cannot be GC.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,229408,,,Mon Feb 27 07:12:49 UTC 2012,,,,,,,0|i024nz:,10357,,,,,,,,,"26/Feb/12 15:33;davsclaus;Also CAMEL-4500 introduced a leak as well, in terms of ManagedTracer being kept around in a separate Map. We need to remove not needed tracer from that map as well.",27/Feb/12 07:12;davsclaus;I created CAMEL-5046 to track the leak from CAMEL-4500 with ManagedTracer as it only affects 2.9 onwards.,,,,,,,,,,,,,,,,,,,,,,
Camel route with bean element sends on startup invalid message to target route that is represented by a proxy who exposes route,CAMEL-5036,12543970,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,sburkard,sburkard,24/Feb/12 09:44,24/Feb/12 15:43,13/Mar/19 22:19,24/Feb/12 15:43,2.2.0,,,,,,,,,2.10.0,2.9.1,,,camel-core,,,,,,0,,,,,,,,,"I expose a Camel route with a direct endpoint defined in an OSGi bundle with the <camel:proxy> and <osgi:service> tags. The reason for this is to be able to call this direct-route in other routes (defined in other bundles) as a ""sub-route"" directly as bean [.bean(routeproxy, ""method"")]. This works as expected.

But on route startup the toString method is called on the route (for a description) which is propagated to the elements of the route. Therefore my bean-element (which is the direct-route-proxy) receives the toString call and the CamelInvocationHandler converts this toString call to a message and sends it to the direct-route. This more or less empty message is of course not valid for the target route and produces an error on bundle startup.  

Shouldn't the toString call be suppressed by the proxy, since toString is not part of the Interface the proxy represents? Or is my approach a not recommended or problematic approach?


Parts of stacktrace to show the way from route startup to the produced message

=> route receives ""empty"" message
[omitted]
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:45)
	at org.apache.camel.component.bean.CamelInvocationHandler.invoke(CamelInvocationHandler.java:65)
	at $Proxy568.toString(Unknown Source)
	at sun.reflect.GeneratedMethodAccessor406.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
=> toString call is converted to message and sent to route

[omitted]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:171)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:204)
	at $Proxy583.toString(Unknown Source)
	at org.apache.camel.component.bean.ConstantBeanHolder.toString(ConstantBeanHolder.java:48)
=> toString called on bean-element in route (bean is a proxy for a route) 

[omitted]
	at java.lang.String.valueOf(String.java:2826)
	at java.lang.StringBuilder.append(StringBuilder.java:115)
	at org.apache.camel.impl.EventDrivenConsumerRoute.toString(EventDrivenConsumerRoute.java:46)
	at org.apache.camel.management.mbean.ManagedRoute.<init>(ManagedRoute.java:41)
	at org.apache.camel.management.DefaultManagementLifecycleStrategy.onRoutesAdd(DefaultManagementLifecycleStrategy.java:368)
	at org.apache.camel.impl.RouteService.doStart(RouteService.java:109)
=> Route startup",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-02-24 15:43:58.565,,,no_permission,,Unknown,,,,,,,,,,,229208,,,Fri Feb 24 15:43:58 UTC 2012,,,,,,,0|i024lz:,10348,,,,,,,,,24/Feb/12 15:43;davsclaus;Changed the toString to avoid calling toString on the bean,,,,,,,,,,,,,,,,,,,,,,,
camel-file: file is renamed but error handling continues.,CAMEL-5021,12543404,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,szhemzhitsky,szhemzhitsky,20/Feb/12 21:28,24/Feb/12 06:56,13/Mar/19 22:19,23/Feb/12 08:57,2.8.1,,,,,,,,,2.10.0,2.8.5,2.9.1,,camel-core,,,,,,0,camel-file,,,,,,,,"Symptoms: 
# Exception is thrown from the child route with NoErrorHandler configured.
# Parent and child routes are linked with async. endpoints (seda, vm, nmr, etc.), which are configured to behave *synchronously* (attribute *waitForTaskToComplete=Always* in seda, vm-endpoints and attribute *synchronous=true* in nmr-endpoint).

The behavior with nmr endpoint is almost the same except for the next file is picked up before the lock on the previous one is released.

Here is a unit test to reproduce the issue:

{code:java|title=org.foo.bar.FileRedeliveryWithoutErrorHandlerTest.java}
package org.foo.bar;

import org.apache.camel.LoggingLevel;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.mock.MockEndpoint;
import org.apache.camel.impl.JndiRegistry;
import org.apache.camel.processor.RedeliveryPolicy;
import org.apache.camel.test.junit4.CamelTestSupport;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.io.File;

import static org.hamcrest.CoreMatchers.equalTo;

public class FileRedeliveryWithoutErrorHandlerTest extends CamelTestSupport {

    private File newFile;
    private File errorFile;
    
    @Before
    @SuppressWarnings(""ResultOfMethodCallIgnored"")
    public void createFile() throws Exception {
        newFile = new File(""target/files/in/newFile.txt"");
        newFile.createNewFile();
        errorFile = new File(""target/files/in/.error/newFile.txt"");
    }
    
    @After
    @SuppressWarnings(""ResultOfMethodCallIgnored"")
    public void deleteFile() throws Exception {
        newFile.delete();
        errorFile.delete();
    }
    
    @Test
    public void testFileRedeliveryWithoutErrorHandler() throws Exception {
        MockEndpoint result = getMockEndpoint(""mock:result"");
        result.setExpectedMessageCount(1);

        result.assertIsNotSatisfied();
        
        // created file have to exist because redelivery attempts are not completed
        assertThat(newFile.exists(), equalTo(true));
        assertThat(errorFile.exists(), equalTo(false));
    }

    @Override
    protected JndiRegistry createRegistry() throws Exception {
        JndiRegistry registry = super.createRegistry();

        RedeliveryPolicy policy = new RedeliveryPolicy();
        policy.setAsyncDelayedRedelivery(false);
        policy.setLogRetryStackTrace(true);
        policy.setMaximumRedeliveries(100);
        policy.setMaximumRedeliveryDelay(30000);
        policy.setRedeliveryDelay(1000);
        policy.setUseExponentialBackOff(false);
        policy.setRetryAttemptedLogLevel(LoggingLevel.WARN);
        registry.bind(""redeliveryPolicy"", policy);

        return registry;
    }

    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                errorHandler(defaultErrorHandler())
                    .onException(Exception.class)
                    .redeliveryPolicyRef(""redeliveryPolicy"")
                    .log(LoggingLevel.ERROR, ""Error"");

                from(""file:target/files/in?initialDelay=100&delay=100&move=.backup&moveFailed=.error"")
                    .to(""seda:async?waitForTaskToComplete=Always&size=1"")
                    .to(""mock:result"");
                from(""seda:async"")
                    .errorHandler(noErrorHandler())
                    .delay(1000)
                    .throwException(new RuntimeException(""Hello World!""));
            }
        };
    }
}
{code}",,,,,,,,,,,,,,,,,,CAMEL-5033,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-02-23 08:58:43.734,,,no_permission,,Unknown,,,,,,,,,,,228650,,,Fri Feb 24 06:56:18 UTC 2012,,,,,,,0|i024if:,10332,,,,,,,,,23/Feb/12 08:58;davsclaus;Will be fixed by CAMEL-5033,"24/Feb/12 06:56;szhemzhitsky;Hello Claus,

Thanks a lot.",,,,,,,,,,,,,,,,,,,,,,
CxfProducer should release the CXF when the Producer is stopped.,CAMEL-5035,12543950,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,24/Feb/12 04:30,24/Feb/12 06:18,13/Mar/19 22:19,24/Feb/12 06:18,2.6.0,2.7.5,2.8.4,2.9.0,,,,,,2.10.0,2.8.5,2.9.1,,camel-cxf,,,,,,0,,,,,,,,,"CXF ClientImpl has the requestContext need to be cleaned when the CxfProducer is stopped.
If we don't call the Client.destory() method, the requestContext will cause the memory leak.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,229188,,,Fri Feb 24 06:18:09 UTC 2012,,,,,,,0|i024lr:,10347,,,,,,,,,"24/Feb/12 06:18;njiang;Committed the patch into trunk, camel2.9.x and camel-2.8.x branches.",,,,,,,,,,,,,,,,,,,,,,,
Problems with Simple language,CAMEL-4988,12541628,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,dcondevigo,dcondevigo,07/Feb/12 14:08,23/Feb/12 12:14,13/Mar/19 22:19,23/Feb/12 12:14,2.9.0,,,,,,,,,2.10.0,2.9.1,,,camel-core,,,,,,0,,,,,,,,,"If you don't use a simple expresion that falls back to the SimpleBackwardsCompatibleParser, the simple language doesn't seem to work. If I override the start and end token with an explicit definition of the simplelanguage everything works well.

  <bean id=""simple"" class=""org.apache.camel.language.simple.SimpleLanguage"">
      <constructor-arg name=""functionStartToken"" value=""${""/>
      <constructor-arg name=""functionEndToken"" value=""}""/>
  </bean> 

It seems that org.apache.camel.language.simple.SimpleExpressionParser.SimpleExpressionParser(String) fails to create an expression because startToken and endToken are ""automagically"" changed for strange Strings. It seems that when exchange.getContext().resolveLanguage(""simple"") tries to resolve the languaje it doesn't use the default construtor and injects a strange start and end token in the constructor SimpleLanguage(String functionStartToken, String functionEndToken).",Standalone application with Spring context and routes defined in XML.,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-02-08 05:00:38.279,,,no_permission,,Unknown,,,,,,,,,,,226915,,,Thu Feb 23 11:37:21 UTC 2012,,,,,,,0|i024b3:,10299,,,,,,,,,08/Feb/12 05:00;davsclaus;Can you provide more details what you problem is?,"08/Feb/12 07:45;dcondevigo;The problem is that I upgraded my application to Camel 2.9.0 from Camel 2.8.0 and all the routes with simple expressions started to fail. All the other routes seem to work as usual, Camel is an great framework!

I debugged the application and the source of the problem seems to be in the simple expressions. The parsers allways fails (sometimes silently) because the start and end tokens are strange strings (like ""97830e4816280eb7"") instead of the usual strings ""${"", ""}"".

Debugging the application with a breakpoint in the SimpleLanguage constructor ""public SimpleLanguage(String functionStartToken, String functionEndToken)"" I found that Camel automatically replaces the standard tokens with these strange strings (I copy the stacktrace at the end of the comment). It seems that in the SimpleLanguage initialization the SpringInjector chooses the wrong constructor instead of the default one.

If I declare a bean with de SimpleLanguage an set explicitly the tokens everything works fine.

Thread [DefaultQuartzScheduler-camel-7_Worker-1] (Suspended (breakpoint at line 110 in SimpleLanguage))	
	SimpleLanguage.<init>(String, String) line: 110	
	NativeConstructorAccessorImpl.newInstance0(Constructor, Object[]) line: not available [native method]	
	NativeConstructorAccessorImpl.newInstance(Object[]) line: 39	
	DelegatingConstructorAccessorImpl.newInstance(Object[]) line: 27	
	Constructor<T>.newInstance(Object...) line: 513	
	BeanUtils.instantiateClass(Constructor<T>, Object...) line: 126	
	CglibSubclassingInstantiationStrategy(SimpleInstantiationStrategy).instantiate(RootBeanDefinition, String, BeanFactory, Constructor<?>, Object[]) line: 108	
	ConstructorResolver.autowireConstructor(String, RootBeanDefinition, Constructor[], Object[]) line: 280	
	DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).autowireConstructor(String, RootBeanDefinition, Constructor[], Object[]) line: 1003	
	DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).createBeanInstance(String, RootBeanDefinition, Object[]) line: 907	
	DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).doCreateBean(String, RootBeanDefinition, Object[]) line: 485	
	DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).createBean(String, RootBeanDefinition, Object[]) line: 456	
	DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).createBean(Class, int, boolean) line: 331	
	SpringInjector.newInstance(Class<T>) line: 39	
	DefaultLanguageResolver.resolveLanguage(String, CamelContext) line: 75	
	SpringCamelContext(DefaultCamelContext).resolveLanguage(String) line: 951	
	SimpleBuilder.createExpression(Exchange) line: 86	
	SimpleBuilder.evaluate(Exchange, Class<T>) line: 80	
	Splitter.createProcessorExchangePairs(Exchange) line: 102	
	Splitter(MulticastProcessor).process(Exchange, AsyncCallback) line: 208	
	Splitter.process(Exchange, AsyncCallback) line: 97	
	AsyncProcessorHelper.process(AsyncProcessor, Exchange, AsyncCallback) line: 73	
	InstrumentationProcessor(DelegateAsyncProcessor).processNext(Exchange, AsyncCallback) line: 99	
	InstrumentationProcessor(DelegateAsyncProcessor).process(Exchange, AsyncCallback) line: 90	
	InstrumentationProcessor.process(Exchange, AsyncCallback) line: 71	
	AsyncProcessorHelper.process(AsyncProcessor, Exchange, AsyncCallback) line: 73	
	TraceInterceptor(DelegateAsyncProcessor).processNext(Exchange, AsyncCallback) line: 99	
	TraceInterceptor(DelegateAsyncProcessor).process(Exchange, AsyncCallback) line: 90	
	TraceInterceptor.process(Exchange, AsyncCallback) line: 91	
	AsyncProcessorHelper.process(AsyncProcessor, Exchange, AsyncCallback) line: 73	
	DefaultErrorHandler(RedeliveryErrorHandler).processErrorHandler(Exchange, AsyncCallback, RedeliveryErrorHandler$RedeliveryData) line: 322	
	DefaultErrorHandler(RedeliveryErrorHandler).process(Exchange, AsyncCallback) line: 213	
	RouteContextProcessor.processNext(Exchange, AsyncCallback) line: 45	
	RouteContextProcessor(DelegateAsyncProcessor).process(Exchange, AsyncCallback) line: 90	
	DefaultChannel.process(Exchange, AsyncCallback) line: 303	
	AsyncProcessorHelper.process(AsyncProcessor, Exchange, AsyncCallback) line: 73	
	Pipeline.process(Exchange, Exchange, AsyncCallback, Iterator<Processor>, AsyncProcessor) line: 117	
	Pipeline.process(Exchange, AsyncCallback) line: 80	
	RouteContextProcessor.processNext(Exchange, AsyncCallback) line: 45	
	RouteContextProcessor(DelegateAsyncProcessor).process(Exchange, AsyncCallback) line: 90	
	UnitOfWorkProcessor.processAsync(Exchange, AsyncCallback, UnitOfWork) line: 150	
	UnitOfWorkProcessor.process(Exchange, AsyncCallback) line: 117	
	AsyncProcessorHelper.process(AsyncProcessor, Exchange, AsyncCallback) line: 73	
	InstrumentationProcessor(DelegateAsyncProcessor).processNext(Exchange, AsyncCallback) line: 99	
	InstrumentationProcessor(DelegateAsyncProcessor).process(Exchange, AsyncCallback) line: 90	
	InstrumentationProcessor.process(Exchange, AsyncCallback) line: 71	
	AsyncProcessorHelper.process(AsyncProcessor, Exchange, AsyncCallback) line: 73	
	RoundRobinLoadBalancer(QueueLoadBalancer).process(Exchange, AsyncCallback) line: 44	
	AsyncProcessorHelper.process(AsyncProcessor, Exchange) line: 99	
	RoundRobinLoadBalancer(QueueLoadBalancer).process(Exchange) line: 71	
	QuartzEndpoint.onJobExecute(JobExecutionContext) line: 112	
	CamelJob.execute(JobExecutionContext) line: 54	
	JobRunShell.run() line: 216	
	SimpleThreadPool$WorkerThread.run() line: 549	
",12/Feb/12 10:53;davsclaus;Can you paste your spring XML file so its easier for us to get started creating a test case that reproduces the issue you talk about.,"15/Feb/12 11:16;dcondevigo;It seems that if you have a bean of java.lang.String type, it uses it to autowire the start and end token of the SimpleLanguage. If you have a bean of this type you have to define a bean to configure SimpleLanguage to keep routes work as usual. For example this file works:

<?xml version=""1.0"" encoding=""UTF-8""?>
<beans xmlns=""http://www.springframework.org/schema/beans"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:p=""http://www.springframework.org/schema/p"" xmlns:camel=""http://camel.apache.org/schema/spring""
  xsi:schemaLocation=""http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd"">
	
  <bean id=""string"" class=""java.lang.String"" >
		<constructor-arg value=""Some text""/>
  </bean> 
	  
  <bean id=""simple"" class=""org.apache.camel.language.simple.SimpleLanguage"">
      <constructor-arg name=""functionStartToken"" value=""${""/>
      <constructor-arg name=""functionEndToken"" value=""}""/>
  </bean>	  
    
  <camelContext xmlns=""http://camel.apache.org/schema/spring"" useMDCLogging=""true"">
    <route>
      <from uri=""quartz://grupo/timer01?cron=*/10+*+*+*+*+?""/>
      <transform><constant>Text</constant></transform>
      <transform><simple>[${body}]</simple></transform>
      <to uri=""stream:out""/>
    </route>
  </camelContext>
</beans>

But this one doesn't work (it prints ""[${body}]"" instead of ""[Text]"")

<?xml version=""1.0"" encoding=""UTF-8""?>
<beans xmlns=""http://www.springframework.org/schema/beans"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:p=""http://www.springframework.org/schema/p"" xmlns:camel=""http://camel.apache.org/schema/spring""
  xsi:schemaLocation=""http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd"">
	
  <bean id=""string"" class=""java.lang.String"" >
		<constructor-arg value=""Some text""/>
  </bean> 	  
    
  <camelContext xmlns=""http://camel.apache.org/schema/spring"" useMDCLogging=""true"">
    <route>
      <from uri=""quartz://grupo/timer01?cron=*/10+*+*+*+*+?""/>
      <transform><constant>Text</constant></transform>
      <transform><simple>[${body}]</simple></transform>
      <to uri=""stream:out""/>
    </route>
  </camelContext>
</beans>",23/Feb/12 10:58;davsclaus;How often do you have a <bean> of type String? Whats the point? I have never seen the need for that.,23/Feb/12 11:33;davsclaus;But yeah I think autowiring by type is bad practice. Lets see if we can change the SpringInjector to only auto wire by name instead.,23/Feb/12 11:37;davsclaus;Related to CAMEL-1811,,,,,,,,,,,,,,,,,
Printer endpoint can only print a single job,CAMEL-5023,12543475,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,agattik,agattik,21/Feb/12 12:46,22/Feb/12 06:31,13/Mar/19 22:19,22/Feb/12 04:12,2.9.0,,,,,,,,,2.10.0,2.8.5,2.9.1,,camel-printer,,,,,,0,,,,,,,,,"The JavaDoc for javax.print.DocPrintJob.print(Doc, PrintRequestAttributeSet) reads:

""This method should only be called once for a given print job.""

However org.apache.camel.component.printer.PrinterOperations reuses the same DocPrintJob to print over and over again. This results in:

javax.print.PrintException: already printing
	at sun.print.UnixPrintJob.print(UnixPrintJob.java:286) ~[na:1.6.0_29]
	at org.apache.camel.component.printer.PrinterOperations.print(PrinterOperations.java:107) ~[camel-printer-2.9.0.jar:2.9.0]
	at org.apache.camel.component.printer.PrinterOperations.print(PrinterOperations.java:101) ~[camel-printer-2.9.0.jar:2.9.0]
	at org.apache.camel.component.printer.PrinterProducer.print(PrinterProducer.java:55) ~[camel-printer-2.9.0.jar:2.9.0]
	at org.apache.camel.component.printer.PrinterProducer.process(PrinterProducer.java:49) ~[camel-printer-2.9.0.jar:2.9.0]
","MacOSX, RAW printer",,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-02-22 04:12:53.977,,,no_permission,,Unknown,,,,,,,,,,,228721,,,Wed Feb 22 04:12:53 UTC 2012,,,,,,,0|i024iv:,10334,,,,,,,,,"22/Feb/12 04:12;njiang;Applied patch into trunk, camel-2.8.x and camel-2.9.x branches.",,,,,,,,,,,,,,,,,,,,,,,
Can't use the resourceClass Parameter of CXF-RS Component,CAMEL-5009,12542681,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,fribeiro,fribeiro,15/Feb/12 13:54,16/Feb/12 16:43,13/Mar/19 22:19,16/Feb/12 12:12,2.8.0,,,,,,,,,2.10.0,2.8.5,2.9.1,,camel-cxf,,,,,,0,,,,,,,,,"When I use the resourceClass parameter as described in the docs, I get an unexpected error:

import javax.ws.rs.Path;
import javax.ws.rs.PathParam;

@Path(""/sample/"")
public final class SampleResource {

  @Path(""/{param1}/{param2}"")
  public Object sampleOperation(@PathParam(""param1"") final String param1, @PathParam(""param2"") final String param2) {
    return null;
  }

}

import org.apache.camel.builder.RouteBuilder;

public final class SampleRouteBuilder extends RouteBuilder {

  @Override
  public void configure() {
    from(""cxfrs:http://0.0.0.0:8080?resourceClass=SampleResource"")...
  }

}

The workaround has been using the resourceClasses parameter instead.",All Camel environments.,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-02-16 12:12:06.95,,,no_permission,,Unknown,,,,,,,,,,,227967,,,Thu Feb 16 16:43:37 UTC 2012,,,,,,,0|i024fr:,10320,,,,,,,,,"16/Feb/12 12:12;njiang;Applied patch into trunk , camel-2.9.x, camel-2.8.x branches.","16/Feb/12 16:43;fribeiro;Thanks, Willem, I will keep the wiki updated accordingly.",,,,,,,,,,,,,,,,,,,,,,
Camel simple language wrong working with real number,CAMEL-5004,12542537,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,akudinov,akudinov,14/Feb/12 14:35,16/Feb/12 07:03,13/Mar/19 22:19,16/Feb/12 07:03,2.6.0,,,,,,,,,2.10.0,2.9.1,,,camel-core,,,,,,0,,,,,,,,,"I compute real number in route:
   <setBody>0.02</setBody>
After that I want to filter:
   <filter><simple>${body} > 0 </simple> ... </filter>
This expression return false for value in body = 0.02","linux, servicemix-4.3.1",,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-02-16 07:03:54.769,,,no_permission,,Unknown,,,,,,,,,,,227823,,,Thu Feb 16 07:03:54 UTC 2012,,,,,,,0|i024en:,10315,,,,,,,,,16/Feb/12 07:03;davsclaus;I have improved the simple language to work better with floating point numbers.,,,,,,,,,,,,,,,,,,,,,,,
Upgrade from 2.8.3 to 2.9.0 breaks the schema validation capability in the Camel Validation component ,CAMEL-4999,12542145,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,akarpe,akarpe,10/Feb/12 15:51,11/Feb/12 13:38,13/Mar/19 22:19,11/Feb/12 13:38,2.9.0,,,,,,,,,2.9.1,,,,camel-core,,,,,,0,,,,,,,,,"A Camel user reported the following in the Camel User Forum issue
http://camel.465427.n5.nabble.com/Validation-error-after-upgrade-from-Camel-2-8-3-to-2-9-0-td5472816.html

Details 
--------
I have a route that use 
http://camel.apache.org/validation.html


after upgrade Camel from 2.8.3 to 2.9.0 during validation I receive 
the following error 
by: org.xml.sax.SAXParseException: src-resolve: Cannot resolve the 
name 'ecc:PositionType' to a(n) 'type definition' component. 
        at org.apache.xerces.util.ErrorHandlerWrapper.createSAXParseException(Unknown 
Source)[:] 
        at org.apache.xerces.util.ErrorHandlerWrapper.error(Unknown Source)[:] 
        at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)[:] 
        at org.apache.xerces.impl.xs.traversers.XSDHandler.reportSchemaError(Unknown 
Source)[:] 
        at org.apache.xerces.impl.xs.traversers.XSDHandler.reportSchemaError(Unknown 
Source)[:] 
        at org.apache.xerces.impl.xs.traversers.XSDHandler.getGlobalDecl(Unknown 
Source)[:] 
        at org.apache.xerces.impl.xs.traversers.XSDElementTraverser.traverseNamedElement(Unknown 
Source)[:] 
        at org.apache.xerces.impl.xs.traversers.XSDElementTraverser.traverseLocal(Unknown 
Source)[:] 
        at org.apache.xerces.impl.xs.traversers.XSDHandler.traverseLocalElements(Unknown 
Source)[:] 
        at org.apache.xerces.impl.xs.traversers.XSDHandler.parseSchema(Unknown 
Source)[:] 
        at org.apache.xerces.impl.xs.XMLSchemaLoader.loadSchema(Unknown Source)[:] 
        at org.apache.xerces.impl.xs.XMLSchemaLoader.loadGrammar(Unknown Source)[:] 
        at org.apache.xerces.impl.xs.XMLSchemaLoader.loadGrammar(Unknown Source)[:] 
        at org.apache.xerces.jaxp.validation.XMLSchemaFactory.newSchema(Unknown 
Source)[:] 
        at javax.xml.validation.SchemaFactory.newSchema(SchemaFactory.java:524)[:] 
        at org.apache.camel.processor.validation.ValidatingProcessor.createSchema(ValidatingProcessor.java:231)[90:org.apache.camel.camel-core:2.9.0] 
        at org.apache.camel.processor.validation.ValidatingProcessor.loadSchema(ValidatingProcessor.java:105)[90:org.apache.camel.camel-core:2.9.0] 
        at org.apache.camel.component.validator.ValidatorComponent.createEndpoint(ValidatorComponent.java:55)[90:org.apache.camel.camel-core:2.9.0] 
        at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:91)[90:org.apache.camel.camel-core:2.9.0] 
        at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:432)[90:org.apache.camel.camel-core:2.9.0] 

",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-02-11 08:46:23.52,,,no_permission,,Unknown,,,,,,,,,,,227432,,,Sat Feb 11 13:38:40 UTC 2012,,,,,,,0|i024dj:,10310,,,,,,,,,"11/Feb/12 08:46;fbalicchia;After some unit test i see that the problem is fixed in version 2.10-SNAPSHOT.
The jira issue that fix the problem is: 
CAMEL-4877: Validator component now supports xs:import again.

The version of camel that has this from are 2.9.0 and 2.9.0-RC1.

From my point of view this iusse can be closed 

Thanks from help




",11/Feb/12 13:38;davsclaus;Already fixed,,,,,,,,,,,,,,,,,,,,,,
Error handler not called when recipient list has non existing endpoint,CAMEL-5000,12542227,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,11/Feb/12 12:16,11/Feb/12 13:19,13/Mar/19 22:19,11/Feb/12 13:19,2.8.4,2.9.0,,,,,,,,2.10.0,2.8.5,2.9.1,,camel-core,,,,,,0,,,,,,,,,"Given this route
{code}

                onException(Exception.class)
                        .handled(true)
                        .to(""mock:dead"");

                from(""direct:start"")
                    .recipientList(constant(""fail:endpoint""))
                    .to(""mock:result"");
{code}

You would assume the on exception will handle the exception from the recipient list with the non existing endpoint.
This is not the case. We should let recipient list detect and let the error handler handle it.",,,,,,,,,,,,,,,,,,,,CAMEL-5001,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,227514,,,2012-02-11 12:16:11.0,,,,,,,0|i024dr:,10311,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Spring security example does not work,CAMEL-4985,12541390,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,chris@die-schneider.net,chris@die-schneider.net,chris@die-schneider.net,06/Feb/12 10:36,10/Feb/12 05:25,13/Mar/19 22:19,06/Feb/12 10:39,2.8.4,2.9.0,,,,,,,,2.10.0,2.8.5,2.9.1,,examples,,,,,,0,,,,,,,,,"When you try to run the spring security example and access it from a browser you get 404. I debugged into it and the reason is that the camel context does not attach to the camel http servlet.
",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,226678,,,2012-02-06 10:36:47.0,,,,,,,0|i024af:,10296,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AnnotationTypeConverterLoader doesn't try all the classloaders to load the converter class,CAMEL-4322,12518429,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,10/Aug/11 11:21,10/Feb/12 02:59,13/Mar/19 22:19,10/Aug/11 13:45,2.8.0,,,,,,,,,2.8.1,2.9.0,,,camel-core,,,,,,0,,,,,,,,,"User complained about cannot start the camel context with web container[1], after digging the code of AnnotationTypeConverterLoader, I found that AnnotationTypeConverterLoader doesn't try all the classloader to load the converter class.

[1]http://camel.465427.n5.nabble.com/TypeConverterLoaderException-in-WebApplication-on-ContextLoad-td4684853.html",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,13809,,,Wed Aug 10 13:45:31 UTC 2011,,,,,,,0|i0207z:,9637,,,,,,,,,10/Aug/11 13:45;njiang;Applied patch into trunk and camel-2.8.x branch.,,,,,,,,,,,,,,,,,,,,,,,
DigitalSignatureEndpoint not clearing headers after verify,CAMEL-4996,12541919,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,hadrian,hadrian,09/Feb/12 03:31,09/Feb/12 03:51,13/Mar/19 22:19,09/Feb/12 03:51,2.8.4,,,,,,,,,2.10.0,,,, camel-crypto,,,,,,0,,,,,,,,,"The DigitalSignatureEndpoint has a clearHeaders option that is supposed to clear headers after a verify operation. However that is not working because the headers cleared are not the actual header values, but the name of the java String fields, which is irrelevant at runtime.

The default value of the clearHeaders should also be true, so that Camel does not leave debris in the Exchange after a verify operation.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Moderate,,,,,,,,,,,227206,,,Thu Feb 09 03:51:23 UTC 2012,,,,,,,0|i024cv:,10307,,,,,,,,,09/Feb/12 03:51;hadrian;Fixed. There is no workaround available.,,,,,,,,,,,,,,,,,,,,,,,
"Using custom expression in RecipientList EIP which throws exception, is not triggering onException",CAMEL-4484,12524512,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,24/Sep/11 11:07,08/Feb/12 06:01,13/Mar/19 22:19,25/Sep/11 07:45,,,,,,,,,,2.8.2,2.9.0,,,camel-core,,,,,,0,,,,,,,,,Similar issue as CAMEL-4482 but for the recipient list EIP,,,,,,,,,,,,,,CAMEL-4991,CAMEL-4485,,,,,,07/Feb/12 09:14;tmielke;CAMEL-4484-testcase.tgz;https://issues.apache.org/jira/secure/attachment/12513589/CAMEL-4484-testcase.tgz,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-02-07 09:14:21.718,,,no_permission,,Unknown,,,,,,,,,,,3480,,,Wed Feb 08 06:01:37 UTC 2012,,,,,,,0|i0217r:,9798,,,,,,,,,"07/Feb/12 09:14;tmielke;I would like to reopen this bug. 
Attached is a testcase CAMEL-4484-testcase.tgz that still fails.
This JUnit test loads a Camel route that uses a dynamic <recipientList>. If it fails to route the msg to an endpoint, the configured error handler is not called. 

",08/Feb/12 05:07;davsclaus;I am looking into this.,08/Feb/12 06:01;davsclaus;I created a new ticket as this ticket is not the same about the issue reported by Torsten.,,,,,,,,,,,,,,,,,,,,,
BindyDataFormat should not use the default encoding,CAMEL-4989,12541633,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,07/Feb/12 15:07,08/Feb/12 01:26,13/Mar/19 22:19,08/Feb/12 01:26,2.4.0,2.5.0,2.6.0,2.7.0,2.8.0,2.9.0,,,,2.10.0,2.8.5,2.9.1,,camel-bindy,,,,,,0,,,,,,,,,"Here is the mail thread[1] which discuss about it.
[1]http://camel.465427.n5.nabble.com/Bindy-CSV-parser-uses-default-encoding-tp5456136p5456136.html",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,226920,,,Wed Feb 08 01:26:27 UTC 2012,,,,,,,0|i024bb:,10300,,,,,,,,,"08/Feb/12 01:26;njiang;Applied patch into trunk, camel 2.9.x and camel 2.8.x branches.",,,,,,,,,,,,,,,,,,,,,,,
Problem Removing Endpoints ,CAMEL-4976,12541151,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,hadrian,hadrian,03/Feb/12 23:17,07/Feb/12 02:40,13/Mar/19 22:19,07/Feb/12 02:40,2.9.0,,,,,,,,,2.10.0,2.9.1,,,camel-core,,,,,,1,,,,,,,,,"(see context on the [users@|http://camel.465427.n5.nabble.com/Problem-Removing-Endpoints-td5455029.html] list)

When using removeEndpoints(String) with a pattern, some endpoints (like jms topics) are reported as removed but they are not.
",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Advanced,,,,,,,,,,,226503,,,Tue Feb 07 02:40:24 UTC 2012,,,,,,,0|i0248f:,10287,,,,,,,,,07/Feb/12 02:40;hadrian;Fixed on both trunk and camel-2.9.x. The problem was due to inconsistent way of computing endpoint keys for non singleton endpoints.,,,,,,,,,,,,,,,,,,,,,,,
Cannot use xquery predicate in filter after an xpath splitter.  ,CAMEL-4970,12540919,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,ltsall,ltsall,02/Feb/12 13:18,06/Feb/12 15:12,13/Mar/19 22:19,06/Feb/12 15:12,2.8.0,2.8.1,2.8.2,2.8.3,2.9.0,,,,,2.10.0,2.8.5,2.9.1,,camel-saxon,,,,,,0,xpath,xquery,,,,,,,"After upgrading from 2.5.0 to 2.9.0 using xqury predicate after an xpath filter throws  java.lang.ClassCastException: net.sf.saxon.tinytree.TinyElementImpl cannot be cast to net.sf.saxon.om.DocumentInfo . Attached unit test doesn't fail in camel 2.5.0.

from(""direct:xpath"") 
.split(xpathsplitter) 
.filter().xquery(""//record[type=2]"") 
.to(""mock:result"");    	

See nabble discussion http://camel.465427.n5.nabble.com/Unit-test-fails-after-upgrading-to-2-7-1-Cannot-use-xquery-expression-after-xpath-td4422582.html",,,,,,,,,,,,,,,,,,,,,02/Feb/12 13:18;ltsall;XqueryPredicateFilterTest.java;https://issues.apache.org/jira/secure/attachment/12512942/XqueryPredicateFilterTest.java,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-02-06 14:21:14.48,,,no_permission,,Unknown,,,,,,,,,,,226272,,,Mon Feb 06 15:12:39 UTC 2012,,,,,,,0|i02473:,10281,,,,,,,,,"06/Feb/12 14:21;njiang;This issue is introduced by the enhancement of the XmlConverter to support the stax API better. When turning the Element to a DOMSource, we should create a Document first and then create a DomSource based on the Document.","06/Feb/12 15:12;njiang;Applied patch into trunk, camel-2.9.x and camel-2.8.x branches.",,,,,,,,,,,,,,,,,,,,,,
Camel CXF Transport should update the content-type as other CXF transport does,CAMEL-4973,12541043,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,03/Feb/12 08:08,03/Feb/12 14:46,13/Mar/19 22:19,03/Feb/12 14:46,2.2.0,2.3.0,2.4.0,2.5.0,2.6.0,2.7.5,2.8.4,2.9.0,,2.10.0,2.8.5,2.9.1,,camel-cxf,,,,,,0,,,,,,,,,"If you want to leverage the camel transport for CXF to route the message with sub camel context, you may face an issue that camel transport doesn't setup the content type with the encoding information like this ""text/xml; charset=UTF-8""
It just sets the Content-Type like this ""text/xml"" which fails WS-I validation. 
",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,226395,,,Fri Feb 03 14:46:27 UTC 2012,,,,,,,0|i0247r:,10284,,,,,,,,,"03/Feb/12 14:46;njiang;Applied patch into trunk, camel-2.9.x and camel-2.8.x branches.",,,,,,,,,,,,,,,,,,,,,,,
CXF Producer calls done method of Camel callback several times,CAMEL-4945,12539895,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,stefanbo72,stefanbo72,26/Jan/12 13:38,01/Feb/12 09:00,13/Mar/19 22:19,01/Feb/12 09:00,2.8.3,2.9.0,,,,,,,,2.10.0,2.8.5,2.9.1,,camel-cxf,,,,,,0,,,,,,,,,"If the CXF Producer of Camel is called asynchronously for a WS-RM endpoint, Camel receives multiple final events, like ExchangeCompletedEvent and ExchangeFailedEvent. This leads also to negative JMX counters for inflight exchanges. The root cause is a bug in the handleResponse and handleException methods of org.apache.camel.component.cxf.CxfClientCallback. In those methods, which are called for WS-RM communication, although it is oneway, the done method of camelAsyncCallback is called also for oneway exchanges. However this callback method is already called in the process method of org.apache.camel.component.cxf.CxfProducer for oneway exchanges, which causes the mentioned effects.
The following changes in org.apache.camel.component.cxf.CxfClientCallback can fix this:
    public void handleResponse(Map<String, Object> ctx, Object[] res) {
        try {
            super.handleResponse(ctx, res);            
        } finally {
            // bind the CXF response to Camel exchange
            if (!boi.getOperationInfo().isOneWay()) {
                // copy the InMessage header to OutMessage header
                camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders());
                binding.populateExchangeFromCxfResponse(camelExchange, cxfExchange, ctx);
				camelAsyncCallback.done(false);
            }
            if (LOG.isDebugEnabled()) {
                LOG.debug(""{} calling handleResponse"", Thread.currentThread().getName());
            }
        }
    }
    
    public void handleException(Map<String, Object> ctx, Throwable ex) {
        try {
            super.handleException(ctx, ex);
            camelExchange.setException(ex);
        } finally {
            // copy the context information
            if (!boi.getOperationInfo().isOneWay()) {
                // copy the InMessage header to OutMessage header
                camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders());
                binding.populateExchangeFromCxfResponse(camelExchange, cxfExchange, ctx);
				camelAsyncCallback.done(false);
            }
            if (LOG.isDebugEnabled()) {
                LOG.debug(""{} calling handleException"", Thread.currentThread().getName());
            }
        }
    }        
",,,,,,,,,,,,,,,,,,,,,30/Jan/12 10:30;stefanbo72;CAMEL-4945.patch;https://issues.apache.org/jira/secure/attachment/12512399/CAMEL-4945.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-01-27 13:32:06.48,,,no_permission,,Novice,,,,,,,,,,,225398,,,Wed Feb 01 09:00:05 UTC 2012,,,Patch Available,,,,0|i0241j:,10256,,,,,,,,,"27/Jan/12 13:32;davsclaus;Thanks for reporting.

Is it possible for you to either create a
- patch with a proposed fix
- unit test demonstrating the issue

ASF requires that any contributed code is attached as files to a JIRA ticket and where you click [x] in grant license to Apache.
If not then we cannot accept your contribution.",30/Jan/12 10:30;stefanbo72;Proposed patch,"30/Jan/12 13:26;davsclaus;Thanks for the patch.

Would it be possible with an unit test as well? Or can you point to an existing unit-test in camel-cxf that would test your patch?","01/Feb/12 09:00;njiang;Applied patch into trunk, camel-2.9.x and camel-2.8.x branches.",,,,,,,,,,,,,,,,,,,,
ManagedBrowsableEndpoint are broken,CAMEL-4938,12539678,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,bvahdat,v_cheruvu@hotmail.com,v_cheruvu@hotmail.com,24/Jan/12 22:06,30/Jan/12 17:22,13/Mar/19 22:19,30/Jan/12 14:36,2.9.0,,,,,,,,,2.10.0,2.9.1,,,camel-core,jmx,,,,,0,,,,,,,,,"ManagedeBrowsableEndpoint are broken which means any component that inherit ManagedBrowsableEndpoint have errors as well. Please see the link below which will have error screen shot of queueSize JMX operations.


http://camel.465427.n5.nabble.com/JMX-queue-size-operation-fails-Camel-2-9-0-td5233089.html",,,,,,,,,,,,,,,,,,,,,30/Jan/12 13:49;davsclaus;CAMEL-4938.patch;https://issues.apache.org/jira/secure/attachment/12512416/CAMEL-4938.patch,30/Jan/12 15:16;bvahdat;org.apache.camel.component.jms.BrowsableQueueTest.jpg;https://issues.apache.org/jira/secure/attachment/12512423/org.apache.camel.component.jms.BrowsableQueueTest.jpg,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-01-25 18:09:58.985,,,no_permission,,Unknown,,,,,,,,,,,225181,,,Mon Jan 30 17:22:13 UTC 2012,,,,,,,0|i023zz:,10249,,,,,,,,,25/Jan/12 18:09;bvahdat;A dirty fix would be to duplicate the JMX operations already provided by ManagedBrowsableEndpoint on the SedaEndpoint as well. This seems to be also the case for JmsQueueEndpoint!,"30/Jan/12 13:22;davsclaus;Thanks for reporting.

We should add a specialized ManagedSedaEndpoint to combine the browsable with the custom seda operations, in one combined interface the JMX API can handle calling.

Also adding to the unit tests that it uses some of the JMX operations from browsable endpoint in the seda endpoint test.

I am running a test with a fix.","30/Jan/12 15:16;bvahdat;Claus,

thanks beforehand for providing & applying the patch which indeed resolved the problem, however the solution is to my understanding is not *generic* as we've now introduced SEDA Endpoint specific logic into DefaultManagementObjectStrategy:

{code}
        } else if (endpoint instanceof SedaEndpoint) {
            ManagedSedaEndpoint me = new ManagedSedaEndpoint((SedaEndpoint) endpoint);
            me.init(context.getManagementStrategy());
            return me;
{code}

And have also introduced a ManagedSedaEndpoint which is again *Endpoint specific*, IMHO not nice!

Another note: by enableing JMX on

{code}
org.apache.camel.component.jms.BrowsableQueueTest
{code}

I see that the JMX operations are enlisted twice, causing (almost) the same behaviour (see the attached screenshot).

Shouldn't we remove the ManagedResource & ManagedOperation annotations on JmsQueueEndpoint as well? The same as you did for SedaEndpoint?","30/Jan/12 17:08;davsclaus;Ah that single method is actually @deprecated and wasn't included on trunk.

There is no duplicate methods, just methods with the same name, but with different parameters (eg overloaded methods).",30/Jan/12 17:22;davsclaus;Yeah its a better idea to do like JMS endpoint. So I will fix that. Thanks.,,,,,,,,,,,,,,,,,,,
exchange.getIn().getBody(<SomeClass>.class) throws an exception for Jaxb model objects,CAMEL-4942,12539865,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,bvahdat,muellerc,muellerc,26/Jan/12 06:15,27/Jan/12 20:13,13/Mar/19 22:19,27/Jan/12 20:13,2.8.3,,,,,,,,,2.10.0,2.8.5,2.9.1,,camel-core,camel-jaxb,,,,,0,,,,,,,,,"{code}
exchange.getIn().getBody(Foo.class);
{code}

should return a Foo instance or null, if no suitable type converter is available. The java doc says: ""return the body of the message as the specified type, or <tt>null</tt> if not possible to convert""

If Foo is an Jaxb object model, this method call:
- throws an org.xml.sax.SAXParseException if the body content is a string
- throws a javax.xml.bind.UnmarshalException if the body content is another Jaxb model object

Please have a look on the attached sample eclipse project.",,,,,,,,,,,,,,,,,,,,,26/Jan/12 06:16;muellerc;test.zip;https://issues.apache.org/jira/secure/attachment/12511949/test.zip,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-01-26 16:29:03.175,,,no_permission,,Unknown,,,,,,,,,,,225368,,,Fri Jan 27 20:13:33 UTC 2012,,,,,,,0|i0240v:,10253,,,,,,,,,26/Jan/12 06:16;muellerc;Test which shows the issue,"26/Jan/12 16:29;bvahdat;Following my findings regarding the problem you've reported by this ticket:

- The problem raises *even if* you would use the trunk code as your Camel dependency, that's version 2.10-SNAPSHOT
- If you skip out your declared dependency to camel-jaxb then *ALL* of your tests would pass!
- The tests would also *ALL* pass if you would instead do
{code}
exchange.getContext().getTypeConverter().convertTo(Foo.class, exchange.getIn());
{code}

- IMHO the bug is the way the method

{code}
org.apache.camel.converter.jaxb.FallbackTypeConverter.convertTo(Class<T> type, Exchange exchange, Object value)
{code}

Has been implemented on line 90 & 91
 
{code}
if (isJaxbType(type)) {
  return unmarshall(type, exchange, value);
{code} 

Which doesn't take into account if the class of the *value* object is JAXB complaint as well, that's isJaxbType(value.getClass())

Notes:
- IMHO we should better skip 2.6.0 as a Affects Version by this ticket, as that version is not supported anymore!
- As I'm a newbie, let's see what others (Claus?) think about this behaviour.
- In the case I'm *not* wrong, we should better backport the fix both to the 2.8.x & 2.9.x branches.

All in one the workaround solution is to avoid the FallbackTypeConverter be enlisted into the TypeConverterRegistry, for example in that you skip the dependency to camel-jaxb because of:

https://svn.apache.org/repos/asf/camel/trunk/components/camel-jaxb/src/main/resources/META-INF/services/org/apache/camel/FallbackTypeConverter
","26/Jan/12 17:24;muellerc;Hi Babak!

Thanks for looking into this issue (I'm too busy at the moment)... :-(
This issue is not urgent for us, because our workaround at the moment looks like below:
{code}
Object body = exchange.getIn().getBody();
if (body instanceof Foo) {
  // process Foo
} else {
  // process Bar
}
{code}

But in my opinion it's a bug.
+1 for for fixing this in 2.10, 2.9 and 2.8.

Best,
Christian",26/Jan/12 21:55;bvahdat;I committed a patch into the trunk which I will double check using your provided test as soon as it reaches the snapshot repo.,27/Jan/12 08:24;bvahdat;I added your provided test route (FallbackTypeConverterDoesNotThrowExceptionTest) which verifies the fix.,27/Jan/12 11:56;muellerc;Thank you Babak! I will be the sponsor for your beer the next time we meet. :-),"27/Jan/12 12:10;muellerc;I think the fix version for the 2.8.x branch has to be 2.8.5, because 2.8.4 is already in vote...","27/Jan/12 12:26;bvahdat;Yeah you're right but I intended to do it the same way as CAMEL-4947 as the vote has not passed yet.

I see that the overhead for a new 2.8.4 release would be huge to be done by the release manager (Hadrian) but IMHO these two fixes are *really* important. I wait to see how the vote will end up and will do 2.8.4 => 2.8.5 change if it would pass!","27/Jan/12 15:45;muellerc;I don't think this issue is really urgent because:
- it exists at least since release 2.6.0
- our users has workarounds for this

So, let's fix it in 2.8.5 if there is no other reason to build a new release version for 2.8.4...",27/Jan/12 16:03;bvahdat;Did change the Fix Version/s as you recommended.,27/Jan/12 20:13;bvahdat;Back-ported to both 2.8.x & 2.9.x branches as well.,,,,,,,,,,,,,
HTTP TRACE should be disabled by default,CAMEL-4926,12539187,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,janstey,janstey,20/Jan/12 18:04,20/Jan/12 18:47,13/Mar/19 22:19,20/Jan/12 18:47,2.8.3,2.9.0,,,,,,,,2.10.0,2.8.4,2.9.1,,,,,,,,0,,,,,,,,,"Jetty, Apache HTTP, have HTTP TRACE disabled by default. We should also do this in Camel. ",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,224689,,,2012-01-20 18:04:28.0,,,,,,,0|i023xb:,10237,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
API-breaking changes in Validator-component,CAMEL-4877,12537768,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,hutchkintoot,hutchkintoot,09/Jan/12 14:55,19/Jan/12 07:13,13/Mar/19 22:19,19/Jan/12 05:35,2.9.0,,,,,,,,,2.10.0,2.9.1,,,camel-core,,,,,,1,,,,,,,,,"Hi, we tried to upgrade to 2.9.0 last week but ran into trouble when using the newly moved validator component. 

Before upgrading (running 2.8.0), having a root xsd that imported or included other xsd-files on the class-path was no problem for us. But upgrading to 2.9.0 breaks this functionality. Resulting in the following error 

{code}
...
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: validator://com/yyy/infra/applications/yyy-application/consumer/ws/consumer-report-request.xsd due to: src-resolve: Cannot resolve the name 'ns6:YyyReport' to a(n) 'element declaration' component.
...
{code}

I can see in the new documentation for the validator-component that there is an new property that you can set called *resourceResolver*. Given the name and the description of the interface LSResourceResolver my guess is that an implementation of that interface is required to get the old functionality back. 

I might be wrong, but to me this is API-breaking. It would be great if you could provide a ""defalut"" resourceResolver to mimic the old behavior since we rely a lot on the ability to compose schemas via includes or imports. 

",,,,,,,,,,,,,,,,,,,,,17/Jan/12 13:35;hutchkintoot;xsd-import_example.zip;https://issues.apache.org/jira/secure/attachment/12510837/xsd-import_example.zip,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-01-15 15:30:12.115,,,no_permission,,Unknown,,,,,,,,,,,223274,,,Thu Jan 19 07:13:17 UTC 2012,,,,,,,0|i023n3:,10191,,,,,,,,,"15/Jan/12 15:30;davsclaus;Can you attach a little example of this, such as the template file which refer to the other template. Just to be sure, so we can use that for an unit test.",16/Jan/12 11:40;hutchkintoot;attatched simple maven project. Just switch the pom-property camel.version between 2.9.0 and 2.8.0 to verify the difference in behaviour.,"17/Jan/12 13:20;davsclaus;Johan, can you re-attach the example, and grant [x] in give license to Apache (or what the checkbox says). We need this due legal, to be able to use any of your work/example for fixing this. 

The attached file should have an Apache feather at the icon logo.",17/Jan/12 13:35;hutchkintoot;Attached file again with flag.,19/Jan/12 05:35;davsclaus;Thanks for reporting. Your use-case works now in an unit test.,19/Jan/12 07:13;hutchkintoot;Thanks Claus! Looking forward to 2.9.1.,,,,,,,,,,,,,,,,,,
camel-blueprint - Using namespaces with xpath does not work as the namesapces is not parsed and injected into the camel model,CAMEL-4913,12538775,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,18/Jan/12 11:00,18/Jan/12 11:25,13/Mar/19 22:19,18/Jan/12 11:25,2.9.0,,,,,,,,,2.10.0,2.9.1,,,camel-blueprint,,,,,,0,,,,,,,,,"Using xpath predicates in a blueprint xml file does not work if you use custom namespaces, as the camel-blueprint component does not detect the custom namespaces, as camel-spring does.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,224278,,,2012-01-18 11:00:38.0,,,,,,,0|i023uf:,10224,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Route Info Command Exchange Date NPE,CAMEL-4872,12537624,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,sully6768,sully6768,07/Jan/12 04:45,17/Jan/12 15:14,13/Mar/19 22:19,17/Jan/12 15:14,2.10.0,2.8.3,2.9.0,,,,,,,2.10.0,2.9.1,,,karaf,,,,,,0,,,,,,,,,"Executing the camel:info-route/camel:route-info against a route that hasn't processed an exchange will throw an NPE due to First Exchange Date and Last Exchange Completed Date are null.

Patch is forthcoming.

Thanks,
Scott ES",,,,,,,,,,,,,,,,,,,,,17/Jan/12 14:22;sully6768;CAMEL-4872-trunk.patch;https://issues.apache.org/jira/secure/attachment/12510838/CAMEL-4872-trunk.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-01-09 13:59:18.016,,,no_permission,,Unknown,,,,,,,,,,,223130,,,Tue Jan 17 14:23:44 UTC 2012,,,,,,,0|i023lz:,10186,,,,,,,,,07/Jan/12 04:47;sully6768;Patch to check for nulls on exchange dates,07/Jan/12 05:53;sully6768;patch for 2.9.x,07/Jan/12 05:54;sully6768;patch for 2.8.x,"09/Jan/12 13:59;davsclaus;I wonder if we should not just print an empty string when there is no data?

I am just guessing here, what if people start hacking perl scripts that executes ssh to access karaf and invoke this command, and then grab the result stream, and then parse the text. All in the good spirit to gather stats from a non-Java world ;)


","17/Jan/12 13:21;davsclaus;Scott, if you got a bit of time, then a new patch would be nice. Would be good to have this fixed, before we start consider cutting a new release of any of the Camel branches.",17/Jan/12 14:22;sully6768;Updated patch for trunk with empty output per Claus.,"17/Jan/12 14:23;sully6768;Hey Claus,

I have uploaded a new patch with the changes you asked for.

Best Regards,
Scott ES
http://fusesource.com",,,,,,,,,,,,,,,,,
Timed out Exchanges should be removed from seda queues,CAMEL-4882,12538003,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,hadrian,hadrian,11/Jan/12 01:10,16/Jan/12 08:02,13/Mar/19 22:19,11/Jan/12 04:21,2.9.0,,,,,,,,,2.10.0,2.7.5,2.8.4,2.9.1,camel-core,,,,,,0,,,,,,,,,When the SedaProducer times out and stops waiting for an Exchange to be processed it should remove it from the queue as well. Same applies to the vm: component.,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,223509,,,2012-01-11 01:10:51.0,,,,,,,0|i023o7:,10196,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove ProducerCache from CamelContext service list when shutting down a route,CAMEL-4842,12536659,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,30/Dec/11 13:35,05/Jan/12 11:11,13/Mar/19 22:19,05/Jan/12 11:11,2.8.3,2.9.0,,,,,,,,2.10.0,2.8.4,2.9.1,,camel-core,,,,,,0,,,,,,,,,"If people add routes dynamic and remove the routes later on, we need to remove services which may have been added to the CamelContext services list. For example the ProducerCache by SendProcessor etc.

This will ensure that the ProducerCache can be GC'ed.
",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,222342,,,Thu Jan 05 10:09:26 UTC 2012,,,,,,,0|i023fb:,10156,,,,,,,,,"30/Dec/11 13:35;davsclaus;See nabble
http://camel.465427.n5.nabble.com/ProducerCache-memory-leak-tp5108206p5108206.html","04/Jan/12 14:07;davsclaus;When using route scoped onException in routes, then we should shutdown them as well, as they are route scoped to the given route being shutdown.",04/Jan/12 15:16;davsclaus;Fixed the route scoped onException issue,"05/Jan/12 10:09;davsclaus;When using route scoped onCompletion in routes, then we should shutdown them as well, as they are route scoped to the given route being shutdown.",,,,,,,,,,,,,,,,,,,,
xpath expression with $header with saxon may throw exception if header did not exist,CAMEL-4858,12537143,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,04/Jan/12 07:15,04/Jan/12 08:26,13/Mar/19 22:19,04/Jan/12 08:24,2.8.3,2.9.0,,,,,,,,2.7.5,2.8.4,2.9.1,,camel-core,camel-saxon,,,,,0,,,,,,,,,"See CAMEL-747

We should return an empty String instead of a Void.class, as this works with both JDK + Saxon XPathEngine.
Saxon does not work with the Void.class.

",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,222653,,,Wed Jan 04 08:26:36 UTC 2012,,,,,,,0|i023iv:,10172,,,,,,,,,"04/Jan/12 08:26;davsclaus;The workaround is to not use $headerName but a Camel function, using the Camel function namespace, to use the header function.

See details at: http://camel.apache.org/xpath",,,,,,,,,,,,,,,,,,,,,,,
BAM - database constraint violation when restaring application,CAMEL-4854,12537045,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,marcin84,marcin84,03/Jan/12 13:04,03/Jan/12 17:03,13/Mar/19 22:19,03/Jan/12 17:03,2.8.2,,,,,,,,,2.8.4,2.9.1,,,camel-bam,,,,,,0,,,,,,,,,"Take BAM example from http://camel.apache.org/bam-example.html  (or any other one, it doesn't matter).

Here is the one I'm using:

        ActivityBuilder request = activity(""eaiBroker:topic:SOME_TOPIC?concurrentConsumers=1"").name(""Request"")
                .correlate(xpath(""/MessageRequest/@Id"").stringResult());

        ActivityBuilder response = activity(""eaiBroker:topic:SOME_OTHER_TOPIC?concurrentConsumers=1"").name(""Response"")
                .correlate(xpath(""MessageResponse/@Id"").stringResult());

        response
                .starts().after(request.completes())
                .expectWithin(seconds(15))
                .errorIfOver(seconds(30))
                .to(""log:com.eai?level=error"");



 First run of the application and everything works. Restart application and try to activate one of BAM rules, there will be an exception that database constraint has been violated. Every time application is started, Camel tries to do following sql insert

insert into CAMEL_ACTIVITYDEFINITION (name, processDefinition_id, id) values (?, ?, ?)

but name columne must be unique in CAMEL_ACTIVITYDEFINITION .


Workaround for this is to purge BAM tables every time you want to restart the application, but it's not a solution.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-01-03 17:03:19.172,,,no_permission,,Unknown,,,,,,,,,,,222555,,,Tue Jan 03 17:03:19 UTC 2012,,,,,,,0|i023hz:,10168,,,,,,,,,"03/Jan/12 14:24;marcin84;I tried to solve on my own, and the problem occurs because of invalid XML configuration. The BAM example that is in binary distribution 

<bean id=""activities"" class=""org.apache.camel.example.bam.MyActivities"">
        <property name=""jpaTemplate"" ref=""jpaTemplate""/>
        <property name=""transactionTemplate"" ref=""transactionTemplate""/>
    </bean>

should be changed to 

<bean id=""activities"" class=""org.apache.camel.example.bam.MyActivities"">
        <constructor-arg><ref bean=""jpaTemplate""/></constructor-arg>
        <constructor-arg><ref bean=""transactionTemplate""/></constructor-arg>
    </bean>

Second version calls valid constructor for ProcessBuilder which creates ProcessName. The first one leaves process name as null.",03/Jan/12 17:03;davsclaus;I fixed the ProcessBuilder in camel-bam to create the processor name if not explicit configured.,,,,,,,,,,,,,,,,,,,,,,
camel-jibx/camel-xstream features required woodstox dependency,CAMEL-4819,12536208,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jbonofre,jbonofre,jbonofre,22/Dec/11 20:36,26/Dec/11 16:55,13/Mar/19 22:19,23/Dec/11 20:20,2.8.3,2.9.0,,,,,,,,2.8.4,2.9.0,,,camel-jibx,camel-xstream,karaf,,,,0,,,,,,,,,"The camel-jibx and camel-xstream features don't install out of the box:
Error executing command: Could not start bundle mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.dom4j/1.6.1_4 in feature(s) camel-xstream-2.9-SNAPSHOT, camel-jibx-2.9-SNAPSHOT: Unresolved constraint in bundle org.apache.servicemix.bundles.dom4j [65]: Unable to resolve 65.0: missing requirement [65.0] package; (&(package=javax.xml.stream)(version>=1.0.0)(!(version>=2.0.0)))

camel-jibx feature has a dependency to ServiceMix dom4j bundle.

This bundle requires javax.xml.stream (provided by woodstox).",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-12-24 10:46:05.18,,,no_permission,,Unknown,,,,,,,,,,,221891,,,Mon Dec 26 16:55:04 UTC 2011,,,,,,,0|i023a7:,10133,,,,,,,,,23/Dec/11 20:01;jbonofre;Fixed on trunk: revision 1222821.,23/Dec/11 20:17;jbonofre;Fixed on camel-2.8.x: revision 1222825.,"24/Dec/11 10:46;muellerc;I tested it with Karaf 2.2.4 and Camel 2.9 on MacOS and it works well (with the actual code in trunk):

Christian-Muellers-MacBook-Pro:bin cmueller$ ./karaf clean
karaf@root> features:addurl mvn:org.apache.camel.karaf/apache-camel/2.9-SNAPSHOT/xml/features
karaf@root> features:install camel-jibx

Christian-Muellers-MacBook-Pro:bin cmueller$ ./karaf clean
karaf@root> features:addurl mvn:org.apache.camel.karaf/apache-camel/2.9-SNAPSHOT/xml/features
karaf@root> features:install camel-xstream","24/Dec/11 13:48;muellerc;It also works with the latest 2.8.4-SNAPSHOT version on Karaf 2.2.4 and MacOS:


Christian-Muellers-MacBook-Pro:bin cmueller$ ./karaf clean
karaf@root> features:addurl mvn:org.apache.camel.karaf/apache-camel/2.8.4-SNAPSHOT/xml/features
karaf@root> features:install camel-jibx

Christian-Muellers-MacBook-Pro:bin cmueller$ ./karaf clean
karaf@root> features:addurl mvn:org.apache.camel.karaf/apache-camel/2.8.4-SNAPSHOT/xml/features
karaf@root> features:install camel-xstream ","26/Dec/11 16:55;muellerc;It works also with the brand new Karaf 2.2.5:

Christian-Muellers-MacBook-Pro:bin cmueller$ /Applications/apache-karaf-2.2.5/bin/karaf clean
        __ __                  ____      
       / //_/____ __________ _/ __/      
      / ,<  / __ `/ ___/ __ `/ /_        
     / /| |/ /_/ / /  / /_/ / __/        
    /_/ |_|\__,_/_/   \__,_/_/         

  Apache Karaf (2.2.5)

Hit '<tab>' for a list of available commands
and '[cmd] --help' for help on a specific command.
Hit '<ctrl-d>' or 'osgi:shutdown' to shutdown Karaf.

karaf@root> features:addurl mvn:org.apache.camel.karaf/apache-camel/2.9-SNAPSHOT/xml/features
karaf@root> features:install camel-jibx 



Christian-Muellers-MacBook-Pro:bin cmueller$ /Applications/apache-karaf-2.2.5/bin/karaf clean
        __ __                  ____      
       / //_/____ __________ _/ __/      
      / ,<  / __ `/ ___/ __ `/ /_        
     / /| |/ /_/ / /  / /_/ / __/        
    /_/ |_|\__,_/_/   \__,_/_/         

  Apache Karaf (2.2.5)

Hit '<tab>' for a list of available commands
and '[cmd] --help' for help on a specific command.
Hit '<ctrl-d>' or 'osgi:shutdown' to shutdown Karaf.

karaf@root> features:addurl mvn:org.apache.camel.karaf/apache-camel/2.9-SNAPSHOT/xml/features
karaf@root> features:install camel-xstream ",,,,,,,,,,,,,,,,,,,
camel-atom/camel-rss feature doesn't work,CAMEL-4815,12536166,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jbonofre,jbonofre,jbonofre,22/Dec/11 15:15,26/Dec/11 16:50,13/Mar/19 22:19,23/Dec/11 17:57,2.8.3,2.9.0,,,,,,,,2.8.4,2.9.0,,,camel-atom,camel-rss,karaf,,,,0,,,,,,,,,"camel-atom feature defines a dependency to abdera-core, which require woodstox dependency:

Error executing command: Could not start bundle mvn:org.apache.abdera/abdera-core/1.1.2 in feature(s) camel-atom-2.9.0, cxf-abdera-2.5.1: Unresolved constraint in bundle org.apache.abdera.core [62]: Unable to resolve 62.0: missing requirement [62.0] package; (&(package=javax.xml.stream)(version>=1.0.0)(!(version>=2.0.0)))
",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-12-24 10:41:18.442,,,no_permission,,Unknown,,,,,,,,,,,221849,,,Mon Dec 26 16:50:21 UTC 2011,,,,,,,0|i0239b:,10129,,,,,,,,,23/Dec/11 17:35;jbonofre;Fixed on trunk: revision 1222765.,23/Dec/11 17:57;jbonofre;Fixed on camel-2.8.x: revision 1222769.,"24/Dec/11 10:41;muellerc;I tested it with Karaf 2.2.4 and Camel 2.9 on MacOS and it works well (with the actual code in trunk):

Christian-Muellers-MacBook-Pro:bin cmueller$ ./karaf clean
karaf@root> features:addurl mvn:org.apache.camel.karaf/apache-camel/2.9-SNAPSHOT/xml/features
karaf@root> features:install camel-atom

Christian-Muellers-MacBook-Pro:bin cmueller$ ./karaf clean
karaf@root> features:addurl mvn:org.apache.camel.karaf/apache-camel/2.9-SNAPSHOT/xml/features
karaf@root> features:install camel-atom","24/Dec/11 13:44;muellerc;It also works with the latest 2.8.4-SNAPSHOT version on Karaf 2.2.4 and MacOS:

Christian-Muellers-MacBook-Pro:bin cmueller$ ./karaf clean
karaf@root> features:addurl mvn:org.apache.camel.karaf/apache-camel/2.8.4-SNAPSHOT/xml/features
karaf@root> features:install camel-atom

Christian-Muellers-MacBook-Pro:bin cmueller$ ./karaf clean
karaf@root> features:addurl mvn:org.apache.camel.karaf/apache-camel/2.8.4-SNAPSHOT/xml/features
karaf@root> features:install camel-rss","26/Dec/11 16:50;muellerc;It works also with the brand new Karaf 2.2.5:

Christian-Muellers-MacBook-Pro:bin cmueller$ /Applications/apache-karaf-2.2.5/bin/karaf clean
        __ __                  ____      
       / //_/____ __________ _/ __/      
      / ,<  / __ `/ ___/ __ `/ /_        
     / /| |/ /_/ / /  / /_/ / __/        
    /_/ |_|\__,_/_/   \__,_/_/         

  Apache Karaf (2.2.5)

Hit '<tab>' for a list of available commands
and '[cmd] --help' for help on a specific command.
Hit '<ctrl-d>' or 'osgi:shutdown' to shutdown Karaf.

karaf@root> features:addurl mvn:org.apache.camel.karaf/apache-camel/2.9-SNAPSHOT/xml/features
karaf@root> features:install camel-atom


Christian-Muellers-MacBook-Pro:bin cmueller$ /Applications/apache-karaf-2.2.5/bin/karaf clean
        __ __                  ____      
       / //_/____ __________ _/ __/      
      / ,<  / __ `/ ___/ __ `/ /_        
     / /| |/ /_/ / /  / /_/ / __/        
    /_/ |_|\__,_/_/   \__,_/_/         

  Apache Karaf (2.2.5)

Hit '<tab>' for a list of available commands
and '[cmd] --help' for help on a specific command.
Hit '<ctrl-d>' or 'osgi:shutdown' to shutdown Karaf.

karaf@root> features:addurl mvn:org.apache.camel.karaf/apache-camel/2.9-SNAPSHOT/xml/features
karaf@root> features:install camel-rss",,,,,,,,,,,,,,,,,,,
camel-hdfs/camel-soap features require JAXB definition,CAMEL-4818,12536205,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jbonofre,jbonofre,jbonofre,22/Dec/11 20:11,26/Dec/11 16:47,13/Mar/19 22:19,23/Dec/11 16:21,2.8.3,2.9.0,,,,,,,,2.8.4,2.9.0,,,camel-hdfs,karaf,,,,,0,,,,,,,,,"The camel-hdfs and camel-soap features don't install out of the box:

Error executing command: Could not start bundle mvn:org.apache.servicemix.specs/org.apache.servicemix.specs.jaxws-api-2.2/1.9.0 in feature(s) camel-soap-2.9-SNAPSHOT, camel-hdfs-2.9-SNAPSHOT, cxf-specs-2.5.1: Unresolved constraint in bundle org.apache.servicemix.specs.jaxws-api-2.2 [88]: Unable to resolve 88.0: missing requirement [88.0] package; (&(package=javax.xml.bind)(version>=2.2.0))

The ServiceMix JAXWS specs require a JAXB 2.2.x implementation available.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-12-22 23:24:13.425,,,no_permission,,Unknown,,,,,,,,,,,221888,,,Mon Dec 26 16:47:50 UTC 2011,,,,,,,0|i0239z:,10132,,,,,,,,,"22/Dec/11 23:24;muellerc;It's a indirect dependency from camel-hdfs, it's a direct dependency from camel-soap on which camel-hdfs depends.",23/Dec/11 15:57;jbonofre;Fixed on trunk: revision 1222709.,23/Dec/11 16:20;jbonofre;Fixed on camel-2.8.x: revision 1222723.,"24/Dec/11 10:56;muellerc;I tested it with Karaf 2.2.4 and Camel 2.9 on MacOS and it works well (with the actual code in trunk):

Christian-Muellers-MacBook-Pro:bin cmueller$ ./karaf clean
karaf@root> features:addurl mvn:org.apache.camel.karaf/apache-camel/2.9-SNAPSHOT/xml/features
karaf@root> features:install camel-hdfs 


Christian-Muellers-MacBook-Pro:bin cmueller$ ./karaf clean
karaf@root> features:addurl mvn:org.apache.camel.karaf/apache-camel/2.9-SNAPSHOT/xml/features
karaf@root> features:install camel-soap","24/Dec/11 13:50;muellerc;It also works with the latest 2.8.4-SNAPSHOT version on Karaf 2.2.4 and MacOS:

Christian-Muellers-MacBook-Pro:bin cmueller$ ./karaf clean
karaf@root> features:addurl mvn:org.apache.camel.karaf/apache-camel/2.8.4-SNAPSHOT/xml/features
karaf@root> features:install camel-soap 

Christian-Muellers-MacBook-Pro:bin cmueller$ ./karaf clean
karaf@root> features:addurl mvn:org.apache.camel.karaf/apache-camel/2.8.4-SNAPSHOT/xml/features
karaf@root> features:install camel-hdfs","26/Dec/11 16:47;muellerc;It works also with the brand new Karaf 2.2.5:

Christian-Muellers-MacBook-Pro:bin cmueller$ /Applications/apache-karaf-2.2.5/bin/karaf clean
        __ __                  ____      
       / //_/____ __________ _/ __/      
      / ,<  / __ `/ ___/ __ `/ /_        
     / /| |/ /_/ / /  / /_/ / __/        
    /_/ |_|\__,_/_/   \__,_/_/         

  Apache Karaf (2.2.5)

Hit '<tab>' for a list of available commands
and '[cmd] --help' for help on a specific command.
Hit '<ctrl-d>' or 'osgi:shutdown' to shutdown Karaf.

karaf@root> features:addurl mvn:org.apache.camel.karaf/apache-camel/2.9-SNAPSHOT/xml/features
karaf@root> features:install camel-soap



Christian-Muellers-MacBook-Pro:bin cmueller$ /Applications/apache-karaf-2.2.5/bin/karaf clean
        __ __                  ____      
       / //_/____ __________ _/ __/      
      / ,<  / __ `/ ___/ __ `/ /_        
     / /| |/ /_/ / /  / /_/ / __/        
    /_/ |_|\__,_/_/   \__,_/_/         

  Apache Karaf (2.2.5)

Hit '<tab>' for a list of available commands
and '[cmd] --help' for help on a specific command.
Hit '<ctrl-d>' or 'osgi:shutdown' to shutdown Karaf.

karaf@root> features:addurl mvn:org.apache.camel.karaf/apache-camel/2.9-SNAPSHOT/xml/features
karaf@root> features:install camel-hdfs 
2011-12-26 17:43:29.653:INFO:oejs.Server:jetty-7.5.4.v20111024
2011-12-26 17:43:29.672:INFO:oejs.AbstractConnector:Started SelectChannelConnector@0.0.0.0:8181 STARTING
2011-12-26 17:43:29.805:INFO:oejsh.ContextHandler:started HttpServiceContext{httpContext=DefaultHttpContext{bundle=org.apache.karaf.deployer.features [34]}}

",,,,,,,,,,,,,,,,,,
xml-spec-api feature should reference woodstox bundle,CAMEL-4828,12536312,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jbonofre,jbonofre,jbonofre,23/Dec/11 20:25,24/Dec/11 06:56,13/Mar/19 22:19,24/Dec/11 06:56,2.8.3,,,,,,,,,2.8.4,2.9.0,,,karaf,,,,,,0,,,,,,,,,"Several Camel features uses javax.xml.stream. If ServiceMix Spec provides the API, it doesn't provide an implementation.

The xml-specs-api feature should ship an implementation, woodstox.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,221995,,,Sat Dec 24 06:56:05 UTC 2011,,,,,,,0|i023c7:,10142,,,,,,,,,24/Dec/11 06:33;jbonofre;Fixed on trunk: revision 1222919.,24/Dec/11 06:56;jbonofre;Fixed on camel-2.8.x: revision 1222924.,,,,,,,,,,,,,,,,,,,,,,
camel-servlet feature doesn't work,CAMEL-4812,12536086,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,jbonofre,muellerc,muellerc,21/Dec/11 21:02,22/Dec/11 15:53,13/Mar/19 22:19,22/Dec/11 15:53,2.8.3,2.9.0,,,,,,,,2.8.4,2.9.0,,,camel-servlet,karaf,osgi,,,,0,,,,,,,,,"Christian-Muellers-MacBook-Pro:bin cmueller$ ./karaf clean

karaf@root> features:addurl mvn:org.apache.camel.karaf/apache-camel/2.9.0/xml/features
karaf@root> features:install camel-servlet
Error executing command: Could not start bundle mvn:org.apache.camel/camel-servlet/2.9.0 in feature(s) camel-servlet-2.9.0: Unresolved constraint in bundle org.apache.camel.camel-servlet [80]: Unable to resolve 80.0: missing requirement [80.0] package; (&(package=org.osgi.service.http)(version>=1.2.0)(!(version>=2.0.0)))


We have to install the Karaf http feature first.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-12-22 08:35:33.141,,,no_permission,,Unknown,,,,,,,,,,,221769,,,Thu Dec 22 15:53:08 UTC 2011,,,,,,,0|i0238n:,10126,,,,,,,,,22/Dec/11 08:35;njiang;we could add the dependency of karaf http feature to resolved this kind of issue.,"22/Dec/11 09:32;jbonofre;+1, we should add a feature dependency to Karaf http.","22/Dec/11 09:52;muellerc;+1
This is what I proposed in my issue description.",22/Dec/11 15:49;jbonofre;Willem fixed it on trunk: revision 1222139.,22/Dec/11 15:53;jbonofre;And Dan merged it on camel-2.8.x: revision 1222282.,,,,,,,,,,,,,,,,,,,
After restarting route a camel-quartz component fires right away (and it shouldn't),CAMEL-4794,12535649,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,hadrian,hadrian,19/Dec/11 03:43,20/Dec/11 00:52,13/Mar/19 22:19,20/Dec/11 00:52,2.8.3,,,,,,,,,2.8.4,2.9.0,,,camel-quartz,,,,,,0,,,,,,,,,"I am adding a new QuartzRouteRestartTest that demonstrates this issue. Not only a message is fired right after restart, but the scheduled times are messed up as well. I tried to keep the fire interval as low as possible, but it has to be large enough to demonstrate the problem. So I went down to 0/5 (fire every five sec), but it's more obvious with 0/10 or 0/15, the trigger starts firing at the wrong time.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-12-19 13:01:43.306,,,no_permission,,Unknown,,,,,,,,,,,221333,,,Tue Dec 20 00:52:41 UTC 2011,,,,,,,0|i0234n:,10108,,,,,,,,,"19/Dec/11 13:01;bvahdat;The newly introduced QuartzRouteRestartTest unit-test breaks the checkstyle (the checkstyle-error-messages on my box are in german and not english):

{code}
[INFO] Starting audit...
D:\Data\eclipse-workspace\camel\components\camel-quartz\src\test\java\org\apache\camel\component\quartz\QuartzRouteRestartTest.java:61:41: 'DONE' entspricht nicht dem Muster '^[a-z][a-zA-Z0-9]*$'.
D:\Data\eclipse-workspace\camel\components\camel-quartz\src\test\java\org\apache\camel\component\quartz\QuartzRouteRestartTest.java:61:41: Variable 'DONE' wird explizit mit 'false' initialisiert (Defaultwert für ihren Typ).
Audit done.
{code}",20/Dec/11 00:52;hadrian;Checkstyle fixed as well,,,,,,,,,,,,,,,,,,,,,,
Using the CamelContext.stopRoute(routeId) should not remove the route from context,CAMEL-4790,12535559,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,17/Dec/11 08:03,19/Dec/11 13:21,13/Mar/19 22:19,19/Dec/11 13:21,2.8.3,,,,,,,,,2.8.4,2.9.0,,,camel-core,,,,,,0,,,,,,,,,"Christian reported a camel route stop issue few months ago[1], I found this bug by running the unit test he submit.
{code}
public class RouteRemoveTest extends ContextTestSupport {
 
+    public void testStopRouteOnContext() throws Exception {
+        assertEquals(ServiceStatus.Started, ((DefaultRoute) context.getRoute(""foo"")).getStatus());
+        assertEquals(ServiceStatus.Started, context.getRouteStatus(""foo""));
+        
+        context.stopRoute(""foo"");
+        
+        assertEquals(ServiceStatus.Stopped, ((DefaultRoute) context.getRoute(""foo"")).getStatus());
+        assertEquals(ServiceStatus.Stopped, context.getRouteStatus(""foo""));
+    }
{code}

The route foo should not be removed from the camelContext.
[1] http://camel.465427.n5.nabble.com/Stop-a-route-for-unit-testing-tt4724550.html#a5011082

",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-12-17 14:16:52.739,,,no_permission,,Unknown,,,,,,,,,,,221243,,,Mon Dec 19 13:21:10 UTC 2011,,,,,,,0|i0233r:,10104,,,,,,,,,17/Dec/11 14:16;davsclaus;Willem is this an issue in Camel 2.8.x as well? If so please backport the fix.,17/Dec/11 14:41;njiang;committed the patch into trunk and 2.8.x branch.,"17/Dec/11 14:42;njiang;@Claus,
I just committed the backport fix of Camel 2.8.x after resolving some network connect issue.","17/Dec/11 18:12;muellerc;I added the second unit test I provided and it still fails:

{code:java}
public void testStopRouteOnRoute() throws Exception {
    assertEquals(ServiceStatus.Started, ((DefaultRoute) context.getRoute(""foo"")).getStatus());
    assertEquals(ServiceStatus.Started, context.getRouteStatus(""foo""));

    ((DefaultRoute) context.getRoute(""foo"")).stop();

    assertEquals(ServiceStatus.Stopped, ((DefaultRoute) context.getRoute(""foo"")).getStatus());
    assertEquals(ServiceStatus.Stopped, context.getRouteStatus(""foo""));
}
{code}

Do I something stupid?","18/Dec/11 00:49;njiang;Hi Christian

I was planing to send a mail for the second unit test but it takes me too much time to merge the patch due to the network issue.

Here is my explanation for it, because Camel is using the RouteService to delegate the life cycle invocation, it is also in charge of do some clean up work with the CamelContext. If you just stop the route directly without through the CamelContext API, you will face a issue that the RouteService can not has the same status of the Route.
So my suggestion is you should use the CamelContext API instead of stop the route directly.

We should consider not expose the Route itself to client to use in Camel 3.0.
  
","18/Dec/11 07:49;davsclaus;I have added javadoc notes to the API to document how to properly control the lifecycle of the routes, eg use the API from CamelContext.","18/Dec/11 12:29;muellerc;Should we deprecate the methods (context.getRoute(String), context.getRoutes(), ...)?","19/Dec/11 13:21;davsclaus;No we should not deprecate those methods, as end users should be able to get the Route instance if they need.

Its just the lifecycle of the routes is best handled using the API from CamelContext to ensure graceful shutdown, and whatnot.",,,,,,,,,,,,,,,,
Throttler and Delay EIP will invoke done callback twice if using async delayed,CAMEL-4795,12535669,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,19/Dec/11 08:50,19/Dec/11 12:39,13/Mar/19 22:19,19/Dec/11 12:39,2.7.4,2.8.3,,,,,,,,2.7.5,2.8.4,2.9.0,,camel-core,,,,,,0,,,,,,,,,"If using async delayed on Throttler or Delay EIP, then a 2nd done on the callback is invoked, which should not happen. As the Camel routing engine, is invoking the done as well.

The 2nd done can cause what would appear as a routing error as a NPE occurs in the error handler, as the exchange is already done, and some cleanup work have occurred.
{code}
java.lang.NullPointerException
	at org.apache.camel.processor.RedeliveryErrorHandler.processAsyncErrorHandler(RedeliveryErrorHandler.java:387)
	at org.apache.camel.processor.RedeliveryErrorHandler$1.done(RedeliveryErrorHandler.java:336)
	at org.apache.camel.processor.interceptor.Debug$1$1.done(Debug.java:56)
	at org.apache.camel.processor.interceptor.TraceInterceptor$1.done(TraceInterceptor.java:188)
	at org.apache.camel.impl.ProducerCache$1.done(ProducerCache.java:307)
...
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,221353,,,2011-12-19 08:50:11.0,,,,,,,0|i0234v:,10109,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-aws can allow SNAPSHOT transitive dependencies,CAMEL-4785,12535394,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,janstey,janstey,16/Dec/11 00:20,17/Dec/11 08:58,13/Mar/19 22:19,16/Dec/11 00:21,2.9.0,,,,,,,,,2.9.0,,,,,,,,,,0,,,,,,,,,The camel-aws component depends on aws-java-sdk which has several dependencies defined using version ranges. The problem with version ranges is that they can introduce SNAPSHOT versions if they are available on your system which is not so good... in my case I had this http://download.java.net/maven/2/com/sun/mail/javax.mail/1.4.5-SNAPSHOT/javax.mail-1.4.5-SNAPSHOT.jar jar in my local repo so camel-aws promptly used that SNAPSHOT lib.,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,221078,,,Fri Dec 16 00:21:37 UTC 2011,,,,,,,0|i0232n:,10099,,,,,,,,,"16/Dec/11 00:21;janstey;[janstey@duffman camel-aws]$ svn ci -m ""CAMEL-4785 - lock down versions of dependencies coming from aws sdk""
Sending        camel-aws/pom.xml
Transmitting file data .
Committed revision 1215000.
",,,,,,,,,,,,,,,,,,,,,,,
Camel Hazelcast Map consumer does not properly create an Exchange.,CAMEL-4776,12535118,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,iocanel,iocanel,iocanel,14/Dec/11 09:02,14/Dec/11 10:08,13/Mar/19 22:19,14/Dec/11 10:08,,,,,,,,,,2.9.0,,,,,,,,,,0,,,,,,,,,"The Hazelcast map consumer, when creating an Exchange fills the out message, instead of the in message.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,220802,,,2011-12-14 09:02:43.0,,,,,,,0|i0230n:,10090,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DynamicRouter EIP with bean endpoint should support method parameter with OGNL,CAMEL-4773,12534925,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,13/Dec/11 10:47,13/Dec/11 14:27,13/Mar/19 22:19,13/Dec/11 14:27,2.9.0,,,,,,,,,2.9.0,,,,camel-core,,,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Dynamic-Routing-tp5068570p5068570.html",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,220609,,,2011-12-13 10:47:46.0,,,,,,,0|i022zz:,10087,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-castor feature is invalid,CAMEL-4771,12534833,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,muellerc,muellerc,12/Dec/11 20:59,13/Dec/11 09:34,13/Mar/19 22:19,13/Dec/11 09:34,2.8.4,,,,,,,,,2.8.4,,,,osgi,,,,,,0,,,,,,,,,"Christian-Muellers-MacBook-Pro:karaf cmueller$ mvn clean install -Pvalidate
[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Build Order:
[INFO] 
[INFO] Camel :: Platforms :: Apache Karaf
[INFO] Camel :: Platforms :: Apache Karaf :: Commands
[INFO] Camel :: Platforms :: Apache Karaf :: Features
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
...
Downloaded: http://repository.apache.org/snapshots/org/apache/camel/camel-castor/2.8.4-SNAPSHOT/camel-castor-2.8.4-20111212.023754-18.jar (17 KB at 21.9 KB/sec)
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Summary:
[INFO] 
[INFO] Camel :: Platforms :: Apache Karaf ................ SUCCESS [2.195s]
[INFO] Camel :: Platforms :: Apache Karaf :: Commands .... SUCCESS [7.749s]
[INFO] Camel :: Platforms :: Apache Karaf :: Features .... FAILURE [29.685s]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 40.617s
[INFO] Finished at: Mon Dec 12 21:54:41 CET 2011
[INFO] Final Memory: 16M/81M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.karaf.tooling:features-maven-plugin:2.2.4:validate (validate) on project apache-camel: Unable to validate /Users/cmueller/workspaceCamel/camel/platforms/karaf/features/target/classes/features.xml: mvn:commons-io/commons-io/1.3.2 is not an OSGi bundle -> [Help 1]",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,220517,,,2011-12-12 20:59:41.0,,,,,,,0|i022zj:,10085,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel feature is invalid,CAMEL-4772,12534837,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,muellerc,muellerc,12/Dec/11 21:19,13/Dec/11 06:33,13/Mar/19 22:19,13/Dec/11 06:33,2.7.5,,,,,,,,,2.7.5,,,,osgi,,,,,,0,,,,,,,,,"Christian-Muellers-MacBook-Pro:karaf cmueller$ mvn clean install -Pvalidate
[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Build Order:
[INFO] 
[INFO] Camel :: Platforms :: Apache Karaf
[INFO] Camel :: Platforms :: Apache Karaf :: Features
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: Platforms :: Apache Karaf 2.7.5-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
...
Downloading: http://repo1.maven.org/maven2/org/apache/servicemix/bundles/org.apache.servicemix.bundles.commons-pool/${commons-pool-bundle-version}/org.apache.servicemix.bundles.commons-pool-${commons-pool-bundle-version}.jar
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Summary:
[INFO] 
[INFO] Camel :: Platforms :: Apache Karaf ................ SUCCESS [2.066s]
[INFO] Camel :: Platforms :: Apache Karaf :: Features .... FAILURE [1:17.335s]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 1:20.222s
[INFO] Finished at: Mon Dec 12 22:12:52 CET 2011
[INFO] Final Memory: 12M/81M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.karaf.tooling:features-maven-plugin:2.2.2:validate (validate) on project apache-camel: Unable to validate /Users/cmueller/workspaceCamel/camel/platforms/karaf/features/target/classes/features.xml: Could not find artifact org.apache.servicemix.bundles:org.apache.servicemix.bundles.commons-pool:jar:${commons-pool-bundle-version} in central (http://repo1.maven.org/maven2)
[ERROR] ",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-12-13 06:33:43.316,,,no_permission,,Unknown,,,,,,,,,,,220521,,,Tue Dec 13 06:33:43 UTC 2011,,,,,,,0|i022zr:,10086,,,,,,,,,13/Dec/11 06:33;njiang;Applied patch into camel-2.7.x.,,,,,,,,,,,,,,,,,,,,,,,
thread safety issue with Exchange.getUnitOfWork(),CAMEL-4447,12522947,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,dgtombs,dgtombs,13/Sep/11 20:30,12/Dec/11 17:31,13/Mar/19 22:19,05/Oct/11 07:13,2.8.1,,,,,,,,,2.8.2,2.9.0,,,camel-core,,,,,,0,,,,,,,,,"I'm having a somewhat rare issue with NullPointerExceptions in a multithreaded route. It seems that there is a race condition between one thread operating on the UnitOfWork and another removing it. I have gotten the following stacktraces so far:

{noformat}
ERROR [Camel0 - Resequencer Delivery] o.a.c.p.StreamResequencer - Caused by: [java.lang.NullPointerException - null]
java.lang.NullPointerException: null
	at org.apache.camel.processor.DefaultChannel$1.done(DefaultChannel.java:309) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:349) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:209) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:305) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:116) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:79) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:104) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:59) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.processor.StreamResequencer.sendElement(StreamResequencer.java:165) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.processor.StreamResequencer.sendElement(StreamResequencer.java:61) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.processor.resequencer.ResequencerEngine.deliverNext(ResequencerEngine.java:254) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.processor.resequencer.ResequencerEngine.deliver(ResequencerEngine.java:218) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.processor.StreamResequencer$Delivery.run(StreamResequencer.java:212) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
{noformat}

And:

{noformat}
ERROR [Camel0 - Resequencer Delivery] o.a.c.p.StreamResequencer - Caused by: [java.lang.NullPointerException - null]
java.lang.NullPointerException: null
	at org.apache.camel.impl.DefaultExchange.isTransacted(DefaultExchange.java:331) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:57) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:116) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:79) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:104) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:59) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.processor.StreamResequencer.sendElement(StreamResequencer.java:165) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.processor.StreamResequencer.sendElement(StreamResequencer.java:61) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.processor.resequencer.ResequencerEngine.deliverNext(ResequencerEngine.java:254) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.processor.resequencer.ResequencerEngine.deliver(ResequencerEngine.java:218) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.processor.StreamResequencer$Delivery.run(StreamResequencer.java:212) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
{noformat}

Looking at the source, both NullPointerExceptions were thrown by code like:

{code}
return getUnitOfWork() != null && getUnitOfWork().isTransacted();
{code}

Oddly, I've only seen this happen soon after startup and only once per run.

The actual route is company confidential, but it's basically:

JMS -> Stream Resequencer -> Bean",JDK 1.6.0_20 on Linux x86_64,,,,,,,,,,,,,,,,,,,,22/Sep/11 16:27;davsclaus;CAMEL-4447.patch;https://issues.apache.org/jira/secure/attachment/12496131/CAMEL-4447.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-09-14 03:14:27.984,,,no_permission,,Unknown,,,,,,,,,,,13761,,,Mon Dec 12 17:31:58 UTC 2011,,,,,,,0|i020zj:,9761,,,,,,,,,"14/Sep/11 03:14;njiang;I just check the code of Camel 2.8.x, there are some change on the DefaultChannel. 
Can you try the latest released Camel 2.8.1, not the 2.8.1-SNAPSHOT to see if the bug is still there?
",14/Sep/11 13:26;dgtombs;Is 2.8.1 released? I don't see it on the site.,"14/Sep/11 13:57;njiang;Camel 2.8.1 is promoted to the maven central repo two days ago, you can try it now :)
","19/Sep/11 20:20;dgtombs;OK, I tested with 2.8.1. Still got the same Exceptions, still very soon after startup.","22/Sep/11 13:55;dgtombs;Upon further testing, I get 1-5 of these exceptions within 6 minutes of startup both on Solaris and Linux.",22/Sep/11 15:32;davsclaus;David do you mind posting your Camel route?,22/Sep/11 16:27;davsclaus;A patch with a potential fix. David you can try this patch on the Camel 2.8.1 source code  (eg from the 2.8.1 tag).,"22/Sep/11 18:19;dgtombs;Hi Claus, thanks for the patch but are you sure it applies against Camel 2.8.1? It seems DefaultChannel was moved and a couple other changes made.","23/Sep/11 05:15;davsclaus;Yeah you would need to adjust the patch accordingly.

Or take a look at the backport to the 2.8 branch
http://svn.apache.org/viewvc?view=revision&revision=1174248
",28/Sep/11 06:39;davsclaus;David any update?,"12/Dec/11 16:02;dgtombs;Sorry for the delay, working on a different project now. I did just test with 2.8.2, and got a similar exception:

{noformat}
12-Dec 10:51:51 ERROR [Camel0 - Resequencer Delivery] o.a.c.p.StreamResequencer - Caused by: [java.lang.NullPointerException - null]
java.lang.NullPointerException: null
        at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:302) ~[camel-core-2.8.2.jar:2.8.2]
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78) ~[camel-core-2.8.2.jar:2.8.2]
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:116) ~[camel-core-2.8.2.jar:2.8.2]
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:79) ~[camel-core-2.8.2.jar:2.8.2]
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:104) ~[camel-core-2.8.2.jar:2.8.2]
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:59) ~[camel-core-2.8.2.jar:2.8.2]
        at org.apache.camel.processor.StreamResequencer.sendElement(StreamResequencer.java:165) ~[camel-core-2.8.2.jar:2.8.2]
        at org.apache.camel.processor.StreamResequencer.sendElement(StreamResequencer.java:61) ~[camel-core-2.8.2.jar:2.8.2]
        at org.apache.camel.processor.resequencer.ResequencerEngine.deliverNext(ResequencerEngine.java:254) ~[camel-core-2.8.2.jar:2.8.2]
        at org.apache.camel.processor.resequencer.ResequencerEngine.deliver(ResequencerEngine.java:218) ~[camel-core-2.8.2.jar:2.8.2]
        at org.apache.camel.processor.StreamResequencer$Delivery.run(StreamResequencer.java:212) ~[camel-core-2.8.2.jar:2.8.2]
{noformat}

I will test with 2.8.3 later.",12/Dec/11 17:31;dgtombs;I haven't gotten any exceptions with 2.8.3 while running a few tests.,,,,,,,,,,,,
ClassNotFoundException thrown by hawtbuf codec decode in OSGi,CAMEL-4709,12532577,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,hadrian,hadrian,24/Nov/11 04:58,09/Dec/11 15:09,13/Mar/19 22:19,09/Dec/11 15:09,,,,,,,,,,2.9.0,,,,camel-hawtdb,,,,,,0,,,,,,,,,"When running the HawtDBAggregateRouteTest from camel-itest-osgi, the following stack trace results. Looks like hawtdb is not instantiate object during readObject from an ObjectIndputStream.

{code}

Caused by: java.io.IOException: org.apache.camel.impl.DefaultExchangeHolder
        at org.fusesource.hawtbuf.codec.ObjectCodec.createIOException(ObjectCodec.java:57)
        at org.fusesource.hawtbuf.codec.ObjectCodec.decode(ObjectCodec.java:52)
        at org.apache.camel.component.hawtdb.HawtDBCamelCodec.unmarshallExchange(HawtDBCamelCodec.java:74)
        at org.apache.camel.component.hawtdb.HawtDBAggregationRepository.get(HawtDBAggregationRepository.java:161)
        ... 57 more
{code}

I am disabling the test for now.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-11-24 12:39:01.557,,,no_permission,,Unknown,,,,,,,,,,,218310,,,Fri Dec 09 15:09:27 UTC 2011,,,,,,,0|i022lz:,10024,,,,,,,,,"24/Nov/11 12:39;njiang;The test in the camel 2.8.x does not has this kind of problem.
It was caused by the hawtbuf doesn't use the dynamic imports * any more, which makes the ObjectStream can't load the class which it needs. ",09/Dec/11 15:09;njiang;Applied patch into trunk.,,,,,,,,,,,,,,,,,,,,,,
camel-test will through NPE when setting the system property of skipStartingCamelContext to be true,CAMEL-4756,12534426,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,09/Dec/11 03:58,09/Dec/11 14:56,13/Mar/19 22:19,09/Dec/11 14:56,2.8.2,2.8.3,,,,,,,,2.8.4,2.9.0,,,camel-test,,,,,,0,,,,,,,,,"We will get a NPE error when setting skipStartingCamelContext system property to be true.
{code}
      java.lang.NullPointerException
        at org.apache.camel.spring.SpringCamelContext.springCamelContext(SpringCamelContext.java:75)
        at org.apache.camel.test.junit4.CamelSpringTestSupport.createCamelContext(CamelSpringTestSupport.java:180)
        at org.apache.camel.test.junit4.CamelTestSupport.doSetUp(CamelTestSupport.java:197)
        at org.apache.camel.test.junit4.CamelTestSupport.setUp(CamelTestSupport.java:167)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)

{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,220148,,,Fri Dec 09 14:56:59 UTC 2011,,,,,,,0|i022w7:,10070,,,,,,,,,09/Dec/11 14:56;njiang;Applied patch into trunk and camel-2.8.x branch.,,,,,,,,,,,,,,,,,,,,,,,
camel-netty component requires a URI parameter to set receiveBufferSizePredictorFactory for UDP consumers,CAMEL-4737,12533684,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,geemang,geemang,02/Dec/11 20:27,04/Dec/11 14:46,13/Mar/19 22:19,04/Dec/11 14:46,2.8.3,Future,,,,,,,,2.8.4,2.9.0,,,camel-netty,,,,,,0,camel-netty,,,,,,,,"The Netty UDP consumer truncates received messages that are larger than 768 bytes. A number of higher level protocols and data-formatters have message sizes larger than 768. E.g. Syslog 1024 bytes

NOTE: There is a difference between receiveBufferSize receiveBufferSizePredictor see: http://lists.jboss.org/pipermail/netty-users/2010-January/001958.html  ",Mac OSX Lion,,,,,,,,,,,,,,,,,,,,02/Dec/11 20:29;geemang;camel-netty-patch.txt;https://issues.apache.org/jira/secure/attachment/12505928/camel-netty-patch.txt,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-12-04 13:58:11.66,,,no_permission,,Novice,,,,,,,,,,,219411,,,Sun Dec 04 14:46:46 UTC 2011,,,Patch Available,,,,0|i022s7:,10052,,,,,,,,,"04/Dec/11 13:58;njiang;Applied patch with thanks to Martin.
I also fixed some check style errors (changed tabs to spaces) and set default the receiveBufferSizePredictor to be 0.",04/Dec/11 14:46;njiang;Applied patch into trunk and 2.8.x branch.,,,,,,,,,,,,,,,,,,,,,,
Dumping route to XML created by Java DSL using an expression with Transform EIP may not output the actual used expression,CAMEL-4733,12533588,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,02/Dec/11 09:55,03/Dec/11 08:26,13/Mar/19 22:19,03/Dec/11 08:26,2.8.2,,,,,,,,,2.8.4,2.9.0,,,camel-core,,,,,,0,,,,,,,,,"Given this route
{code}
                from(""direct:start"").routeId(""myRoute"")
                    .transform(constant(""Hello World""))
                    .to(""mock:result"");
{code}

Will be dumped as XML as:
{code:xml}
<route group=""org.apache.camel.util.DumpModelAsXmlTransformRouteTest$1"" id=""myRoute"" xmlns=""http://camel.apache.org/schema/spring"">
    <from uri=""direct:start""/>
    <transform id=""transform1"">
        <expressionDefinition/>
    </transform>
    <to uri=""mock:result"" id=""to1""/>
</route>
{code}

The <transform> is wrong as it should contain the expression definition properly.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,219316,,,Fri Dec 02 13:50:08 UTC 2011,,,,,,,0|i022rb:,10048,,,,,,,,,"02/Dec/11 09:58;davsclaus;Another example
{code}

                from(""direct:start"").routeId(""myRoute"")
                    .filter(simple(""${body} > 10""))
                        .to(""mock:result"");
{code}","02/Dec/11 13:50;davsclaus;Frist part fixed when using expression clause builder such as:

{code}
from(""direct:start"").routeId(""myRoute"")
 .transform().constant(""Hello World"")
 .to(""mock:result"");
{code}",,,,,,,,,,,,,,,,,,,,,,
PropertiesComponent in vm:// uri,CAMEL-4724,12533102,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,akudrevatych,akudrevatych,29/Nov/11 11:49,02/Dec/11 12:46,13/Mar/19 22:19,02/Dec/11 12:46,2.8.3,2.9.0,,,,,,,,2.8.4,2.9.0,,,camel-core,,,,,,0,,,,,,,,,"when using vm:// uri and sender and receiver in different contexts properties searched in sender, but supposed to search in receiver, where route is defined.

[discussion|http://camel.465427.n5.nabble.com/using-vm-with-different-camelContexts-and-property-parser-td5022731.html]",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-12-02 12:46:03.692,,,no_permission,,Unknown,,,,,,,,,,,218830,,,Fri Dec 02 12:46:03 UTC 2011,,,,,,,0|i022pb:,10039,,,,,,,,,02/Dec/11 12:46;njiang;Applied patch into trunk and camel-2.8.x branch.,,,,,,,,,,,,,,,,,,,,,,,
camel-example-reportincident-wssecurity shouldn't import org.apache.cxf.transport.http_osgi package anymore,CAMEL-4718,12532890,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ffang,ffang,ffang,28/Nov/11 10:56,28/Nov/11 11:34,13/Mar/19 22:19,28/Nov/11 11:34,,,,,,,,,,2.8.4,2.9.0,,,,,,,,,0,,,,,,,,,org.apache.cxf.transport.http_osgi package won't exist since cxf 2.4,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,218623,,,Mon Nov 28 11:34:59 UTC 2011,,,,,,,0|i022nz:,10033,,,,,,,,,"28/Nov/11 11:34;ffang;commit fix
http://svn.apache.org/viewvc?rev=1207068&view=rev for trunk
http://svn.apache.org/viewvc?rev=1207082&view=rev for 2.8.x branch",,,,,,,,,,,,,,,,,,,,,,,
"Using custom expression in Splitter EIP which throws exception, is not triggering onException",CAMEL-4482,12524509,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,24/Sep/11 07:49,27/Nov/11 14:25,13/Mar/19 22:19,24/Sep/11 09:49,,,,,,,,,,2.8.2,2.9.0,,,camel-core,,,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Global-exception-not-invoked-in-case-of-Exception-fired-while-iterating-through-File-Splitter-td4826097.html

We should detect exceptions occurred during evaluation of the expression, and then cause the splitter EIP to fail asap.",,,,,,,,,,,,CAMEL-4483,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-11-27 14:25:16.413,,,no_permission,,,,,,,,,,,,,13758,,,Sun Nov 27 14:25:16 UTC 2011,,,,,,,0|i0217b:,9796,,,,,,,,,"27/Nov/11 14:25;nilsoni;Hi Clause,
It seems that this issue is not yet resolved. Can you please try the code uploaded by me in the nabble http://camel.465427.n5.nabble.com/Global-exception-not-invoked-in-case-of-Exception-fired-while-iterating-through-File-Splitter-td4826097.html Try the file SplitInProgress.java


The exception is still uncaught by the clause
onException(Throwable.class)
.process(customMoveFailed());
",,,,,,,,,,,,,,,,,,,,,,,
can't use same quartz scheduled route policy on two routes,CAMEL-4692,12531949,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,julian.cable,julian.cable,18/Nov/11 15:09,22/Nov/11 22:53,13/Mar/19 22:19,22/Nov/11 18:51,2.8.2,,,,,,,,,2.8.4,2.9.0,,,camel-quartz,,,,,,0,,,,,,,,,"The following XML DSL defines two routes using the same route policy:

<beans xmlns=""http://www.springframework.org/schema/beans""
       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
       xmlns:camel=""http://camel.apache.org/schema/spring""
       xsi:schemaLocation=""
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd"">

  <camel:camelContext xmlns=""http://camel.apache.org/schema/spring"">
    <camel:propertyPlaceholder id=""properties"" location=""file:///etc/camel/css.properties""/>

    <camel:package>cdp_test</camel:package>
    <camel:route id=""r1"" routePolicyRef=""pol1"">
      <camel:from uri=""file://data/1""/>
      <camel:to uri=""stream:out""/>
    </camel:route>
    <camel:route id=""r2"" routePolicyRef=""pol1"">
      <camel:from uri=""file://data/2""/>
      <camel:to uri=""stream:out""/>
    </camel:route>

  </camel:camelContext>

  <bean id=""pol1"" class=""org.apache.camel.routepolicy.quartz.CronScheduledRoutePolicy"">
    <property name=""routeStartTime"" value=""00,30 * * * * ? *""/>
    <property name=""routeStopTime""  value=""10,40 * * * * ? *""/>
  </bean>

</beans>

This is the logging output. r2 does not follow the policy:

[pache.camel.spring.Main.main()] StdSchedulerFactory            INFO  Quartz scheduler 'DefaultQuartzScheduler-camel-1' initialized from an externally provided properties instance.
[pache.camel.spring.Main.main()] StdSchedulerFactory            INFO  Quartz scheduler version: 1.8.4
[pache.camel.spring.Main.main()] ScheduledRoutePolicy           INFO  Scheduled trigger: triggerGroup-r1.trigger-START-r1 for action: START on route:
[pache.camel.spring.Main.main()] ScheduledRoutePolicy           INFO  Scheduled trigger: triggerGroup-r1.trigger-STOP-r1 for action: STOP on route:
[pache.camel.spring.Main.main()] SpringCamelContext             INFO  Route: r1 started and consuming from: Endpoint[file://data/1]
[pache.camel.spring.Main.main()] SpringCamelContext             INFO  Route: r2 started and consuming from: Endpoint[file://data/2]
[pache.camel.spring.Main.main()] QuartzComponent                INFO  Starting Quartz scheduler: DefaultQuartzScheduler-camel-1
[pache.camel.spring.Main.main()] QuartzScheduler                INFO  Scheduler DefaultQuartzScheduler-camel-1_$_NON_CLUSTERED started.
[pache.camel.spring.Main.main()] SpringCamelContext             INFO  Total 2 routes, of which 2 is started.
[pache.camel.spring.Main.main()] SpringCamelContext             INFO  Apache Camel 2.8.2 (CamelContext: camel-1) started in 0.596 seconds
hello 1
[artzScheduler-camel-1_Worker-2] DefaultShutdownStrategy        INFO  Starting to graceful shutdown 1 routes (timeout 10000 milliseconds)
[el-1) thread #2 - ShutdownTask] DefaultShutdownStrategy        INFO  Route: r1 shutdown complete, was consuming from: Endpoint[file://data/1]
[artzScheduler-camel-1_Worker-2] DefaultShutdownStrategy        INFO  Graceful shutdown of 1 routes completed in 0 seconds
[artzScheduler-camel-1_Worker-2] SpringCamelContext             INFO  Route: r1 stopped, was consuming from: Endpoint[file://data/1]
hello 2
hello 2
[artzScheduler-camel-1_Worker-3] SpringCamelContext             INFO  Route: r1 started and consuming from: Endpoint[file://data/1]
hello 2
[artzScheduler-camel-1_Worker-4] DefaultShutdownStrategy        INFO  Starting to graceful shutdown 1 routes (timeout 10000 milliseconds)
[el-1) thread #2 - ShutdownTask] DefaultShutdownStrategy        INFO  Route: r1 shutdown complete, was consuming from: Endpoint[file://data/1]
[artzScheduler-camel-1_Worker-4] DefaultShutdownStrategy        INFO  Graceful shutdown of 1 routes completed in 0 seconds
[artzScheduler-camel-1_Worker-4] SpringCamelContext             INFO  Route: r1 stopped, was consuming from: Endpoint[file://data/1]

If I use two separate identical route policies it works as I expect.",tomcat6,,,,,,,,,,,,,,,,,,,,22/Nov/11 15:57;bibryam;routePolicy.diff;https://issues.apache.org/jira/secure/attachment/12504765/routePolicy.diff,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-11-22 09:58:28.582,,,no_permission,,Unknown,,,,,,,,,,,217685,,,Tue Nov 22 22:53:24 UTC 2011,,,,,,,0|i022i7:,10007,,,,,,,,,22/Nov/11 09:58;davsclaus;Is the problem also when starting? eg the log above shows that only r1 is stopped.,"22/Nov/11 10:20;julian.cable;Hi Claus, in the example, r1 will start and stop on schedule whereas r2 stays active always.

Julian","22/Nov/11 15:57;bibryam;ScheduledRoutePolicy was working only with one route (the first one assigned) at a time. I tried to fix that by introducing a map (a little bit refactoring) to store the routes using the same policy.

Julian, can you give it a try?",22/Nov/11 18:51;davsclaus;Thanks Bilgin for the patch. Keep up the good work. Its been noticed you great work for the community.,"22/Nov/11 22:53;julian.cable;Fantastic, Thanks guys. I'll put a dev build together and try it.

Julian",,,,,,,,,,,,,,,,,,,
NPE when using SEDA route and attaching an extra consumer,CAMEL-4650,12530849,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,tarjei@scanmine.com,tarjei@scanmine.com,09/Nov/11 10:47,18/Nov/11 01:44,13/Mar/19 22:19,15/Nov/11 12:08,2.8.2,,,,,,,,,2.8.3,2.9.0,,,camel-core,,,,,,0,,,,,,,,,"I'm trying to construct a system for moving some seda queues over to
ActiveMQ during system shutdown. What I did was create a Route that
connects to some of my seda queues and then drains the queue to activemq.

Basicly I got two routes, the drainer:

from(""seda:"" + sedaId + ""?size=1000"")
                    .routeId(routeName +
sedaIs).noAutoStartup().to(activeMQFailuresQueue);


And the main route:

from(""seda:"" + sedaId + ""?size=1000"")
                    .routeId(routeName + sedaIs).to(SomeProcessor);

Now, sometimes the main route stalls for various reasons I need to
restart the jvm process it is running in, so I start the first route.
But when trying this in production, I got:

 java.lang.NullPointerException
    at
org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)
    at
org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:210)
    at
org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:155)
    at
org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:129)
    at
java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
    at
java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
    at java.lang.Thread.run(Thread.java:619)


Bvahdat added a comment:
just a very tiny pointer:

Looking at the source it seems that  the
SedaEndpoint.getConsumerMulticastProcessor() method returns 'null' causing
the NPE, as the condition:

multicastStarted == false || consumerMulticastProcessor == null

is true.
","Java 6, Camel 2.8.2, Centos 4.",,,,,,,,,,,,,CAMEL-4680,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-11-09 11:40:46.882,,,no_permission,,Unknown,,,,,,,,,,,216587,,,Tue Nov 15 12:08:24 UTC 2011,,,,,,,0|i02293:,9966,,,,,,,,,"09/Nov/11 11:40;bvahdat;I did a typo in the user forum about the condition which holds, causing the NPE. Correctly it's:

{code}
multicastStarted == true || consumerMulticastProcessor == null
{code}

Looking at SedaConsumer.sendToConsumers() it's:

{code}
    protected void sendToConsumers(Exchange exchange) throws Exception {
        int size = endpoint.getConsumers().size();

        // if there are multiple consumers then multicast to them
        if (size > 1) {

            if (LOG.isDebugEnabled()) {
                LOG.debug(""Multicasting to {} consumers for Exchange: {}"", endpoint.getConsumers().size(), exchange);
            }
           
            // use a multicast processor to process it
            MulticastProcessor mp = endpoint.getConsumerMulticastProcessor();

            // and use the asynchronous routing engine to support it
            AsyncProcessorHelper.process(mp, exchange, new AsyncCallback() {
                public void done(boolean doneSync) {
                    // noop
                }
            });
        } else {
            // use the regular processor and use the asynchronous routing engine to support it
            AsyncProcessorHelper.process(processor, exchange, new AsyncCallback() {
                public void done(boolean doneSync) {
                    // noop
                }
            });
        }
    }
{code}

Which as you see does call:
{code}
endpoint.getConsumerMulticastProcessor();
{code}

But doesn't take into the account that the returned reference (of type MulticastProcessor) could be null. In your case it *was* null, as apparently the condition I mentioned in user forum holds.  

I would love to provide a patch for this, but the SedaEndpoint is to me one of those non-trivial camel's endpoint (concurrency was / is never trivial :-().

If some camel riders could give me a hint, I would assign the ticket to myself and would provide a patch (including a unit-test) proving the fix.","09/Nov/11 13:33;bvahdat;@Tarjei, could you please give me some hints:

Are your both routes (you called them the main & the drainer one) in the same camel context? If so I wonder how it should work *at all* as you would consume twice using exactly the same seda uri in the same camel context as soon as you start the drainer route (for example through jmx)! IMHO the camel behaviour in this case would be undefined / unpredictable when a new message would arrive at this time to the seda endpoint.

The Java-DSL doesn't inhibit you to do that and the code would of course compile but at runtime using the from() clause you would *concurrently* consume twice using the same seda endpoint java object, again the uri by both routes seems to me to be exactly the same:

{code}
from(""seda:"" + sedaId + ""?size=1000"")
{code}

I propose to use the try/catch or onException clause to send the failed messsages (the not processed ones) to some endpoints (for example ""direct:failed"") and as soon as you start the drainer route you would consume from that endpoint in drainer route instead of consuming *concurrently* from the seda endpoint together with the main route at *the same time*.

What do you think?","10/Nov/11 08:34;tarjei@scanmine.com;Hi Babak,

1. Yes both routes are in the same context.

2. Yes the point is to consume from the same seda endpoint. Think of this endpoint as a buffer between processes that take differing amounts of time and should not happen sequentially. 

3. I got an errorhandler for shorter errors like this:

.onException(java.net.ConnectException.class, SolrServerException.class, SolrException.class)
	.log(LoggingLevel.ERROR,routeName+ "":Connection down"")
				.maximumRedeliveries(4)
				.backOffMultiplier(1)
				.redeliveryDelay(redeliveryDelay)
				.to(""log:SolrRouteError?showAll=true&showStackTrace=true&showHeaders=true&showException=true"")
				.to(getSolrFailuresQueue())
				.handled(true)
				.end()

The problem is that on some errors the time it takes for a request can be quite long so the seda queue builds up.

Maybe I should shut down the consuming route before starting the drainer - would that help?
","10/Nov/11 08:51;bvahdat;Yeah try stopping the main route first before starting the drainer one and see if you can still reproduce the NPE. And before starting the drainer route make sure that the main route is *really* stopped.

For example with a JMX client like JConsole you can check it through the getState() operation of the main route, of course I assume you have not disabled the Camel's JMX support, see:

http://camel.apache.org/camel-jmx.html#CamelJMX-UsingJMXtomanageApacheCamel","10/Nov/11 17:14;bvahdat;I could reproduce your issue on the trunk through a 2 liner change of [1] as the following:

{code}
public class SedaConcurrentConsumersTest extends ContextTestSupport {

    public void testSendToSeda() throws Exception {
        MockEndpoint mock = getMockEndpoint(""mock:result"");
        mock.expectedBodiesReceived(""Hello World"");

        template.sendBody(""seda:foo?concurrentConsumers=5"", ""Hello World"");

        assertMockEndpointsSatisfied();
        
        context.getRoutes().get(0).getConsumer().start();
        template.sendBody(""seda:foo?concurrentConsumers=5"", ""Claus absence today is a showstopper!"");
    }

    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                from(""seda:foo?concurrentConsumers=5"").noAutoStartup().to(""mock:result"");
                
                from(""seda:foo?concurrentConsumers=5"").to(""mock:result"");
            }
        };
    }
}
{code}

Which blows up with a NPE exactly on the same place as yours:

{code}
2011-11-10 17:58:42,108 [main           ] INFO  DefaultCamelContext            - Apache Camel  (CamelContext: camel-1) is starting
2011-11-10 17:58:42,155 [main           ] INFO  AnnotationTypeConverterLoader  - Found 3 packages with 15 @Converter classes to load
2011-11-10 17:58:42,217 [main           ] INFO  LazyLoadingTypeConverter       - Loaded 163 core type converters (total 163 type converters)
2011-11-10 17:58:42,327 [main           ] INFO  DefaultCamelContext            - Cannot start route route1 as its configured with autoStartup=false
2011-11-10 17:58:42,327 [main           ] INFO  DefaultCamelContext            - Route: route2 started and consuming from: Endpoint[seda://foo?concurrentConsumers=5]
2011-11-10 17:58:42,327 [main           ] INFO  DefaultCamelContext            - Total 2 routes, of which 1 is started.
2011-11-10 17:58:42,327 [main           ] INFO  DefaultCamelContext            - Apache Camel  (CamelContext: camel-1) started in 0.282 seconds
2011-11-10 17:58:42,358 [main           ] INFO  MockEndpoint                   - Asserting: Endpoint[mock://result] is satisfied
2011-11-10 17:58:42,358 [main           ] INFO  DefaultCamelContext            - Apache Camel  (CamelContext:camel-1) is shutting down
2011-11-10 17:58:42,358 [main           ] INFO  DefaultShutdownStrategy        - Starting to graceful shutdown 1 routes (timeout 10 seconds)
2011-11-10 17:58:42,374 [#1 - seda://foo] ERROR SedaConsumer                   - Error processing exchange. Exchange[Message: Second Hello World]. Caused by: [java.lang.NullPointerException - null]
java.lang.NullPointerException
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)[file:/D:/Data/eclipse-workspace/camel/camel-core/target/classes/:]
	at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:210)[file:/D:/Data/eclipse-workspace/camel/camel-core/target/classes/:]
	at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:155)[file:/D:/Data/eclipse-workspace/camel/camel-core/target/classes/:]
	at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:129)[file:/D:/Data/eclipse-workspace/camel/camel-core/target/classes/:]
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)[:1.6.0_29]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)[:1.6.0_29]
	at java.lang.Thread.run(Thread.java:662)[:1.6.0_29]
2011-11-10 17:58:43,374 [ - ShutdownTask] INFO  DefaultShutdownStrategy        - Route: route2 shutdown complete, was consuming from: Endpoint[seda://foo?concurrentConsumers=5]
2011-11-10 17:58:43,374 [main           ] INFO  DefaultShutdownStrategy        - Graceful shutdown of 1 routes completed in 1 seconds
2011-11-10 17:58:43,374 [main           ] INFO  DefaultInflightRepository      - Shutting down with no inflight exchanges.
2011-11-10 17:58:43,374 [main           ] INFO  DefaultCamelContext            - Uptime: 1.329 seconds
2011-11-10 17:58:43,374 [main           ] INFO  DefaultCamelContext            - Apache Camel  (CamelContext: camel-1) is shutdown in 1.016 seconds
{code}

This is a clear evidence for me that while you start the drainer route, the main route is *still* running causing the NPE as a side effect.

Again IMHO you misuse the Camel's provided Java-DSL. See my previous comments on this ticket for a possible fix of it.

I leave the closing of this ticket to you, as to my understanding it's definitely *not* a bug but just a side effect of the API-misusage.

Good luck
Babak 





[1] https://svn.apache.org/repos/asf/camel/trunk/camel-core/src/test/java/org/apache/camel/component/seda/SedaConcurrentConsumersTest.java","10/Nov/11 18:50;tarjei@scanmine.com;Babak, thank you for working on this issue. 

As it stands, it is an api misuse, and I will close the bug.

T",10/Nov/11 18:50;tarjei@scanmine.com;Closed as API misuse. ,"15/Nov/11 10:16;davsclaus;Regardless if its an API misuse etc. then Camel should shield itself better and report a IllegalArgumentException or IllegalStateException etc. with a better error description what is wrong.

We should generally avoid any NPE being thrown inside Camel code.",15/Nov/11 10:26;bvahdat;Absolutely agree on that.,"15/Nov/11 11:12;davsclaus;The unit test above can be fixed if you start the route correctly using the startRoute method form CamelContext
",15/Nov/11 11:14;davsclaus;Ah sorry I can still reproduce the NPE. Will try to add some configuration check.,"15/Nov/11 11:59;bvahdat;I think that the problem/challenge resides in the fact that camel-core doesn't realize that there's already another route consuming from the same URI (in this case the Seda consumer with multipleConsumers *not* enabled) if one of the routes is not autoEnabled and the other one is already up and consuming and one starts that not-autoEnabled route afterwards through the provided API.

However if both routes are already autoEnabled (which is the default) then this case gets caught correctly at the startup of the camel context:

{code}
org.apache.camel.FailedToStartRouteException: Failed to start route route2 because of Multiple consumers for the same endpoint is not allowed: Endpoint[seda://foo?concurrentConsumers=5]
	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRouteConsumers(DefaultCamelContext.java:1916)
	at org.apache.camel.impl.DefaultCamelContext.doStartRouteConsumers(DefaultCamelContext.java:1892)
	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:1820)
	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:1604)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1494)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1381)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1359)
	at org.apache.camel.ContextTestSupport.startCamelContext(ContextTestSupport.java:171)
	at org.apache.camel.ContextTestSupport.setUp(ContextTestSupport.java:114)
	at junit.framework.TestCase.runBare(TestCase.java:132)
	at org.apache.camel.TestSupport.runBare(TestSupport.java:59)
	at junit.framework.TestResult$1.protect(TestResult.java:110)
	at junit.framework.TestResult.runProtected(TestResult.java:128)
	at junit.framework.TestResult.run(TestResult.java:113)
	at junit.framework.TestCase.run(TestCase.java:124)
	at junit.framework.TestSuite.runTest(TestSuite.java:232)
	at junit.framework.TestSuite.run(TestSuite.java:227)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:83)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)
{code}","15/Nov/11 12:08;davsclaus;The NPE is now fixed and an error message is reported.

I created a new ticket for the check if multiple consumers is supported when manually starting a route.",,,,,,,,,,,
Camel IRC component password and port configuration properties do not work,CAMEL-4679,12531390,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davaleri,davaleri,davaleri,15/Nov/11 00:40,15/Nov/11 16:19,13/Mar/19 22:19,15/Nov/11 16:19,2.8.1,,,,,,,,,2.9.0,,,,camel-irc,,,,,,0,,,,,,,,,"If one sets a password in the URI for this component, the password is concatenated with the username when the URI is ""sanitized"" by IrcConfiguration#sanitize and is not properly parsed when reread by the IrcConfiguration#configure operation.

The result is that the concatenated combo is sent as the username and the colon is an illegal character.  The user's secret is also sent with their username and may inadvertently end up in log files.

If one specifies a port in the URI for this component, the port is not a URI parameter and is not handled by the IrcConfiguration#configure method.  The port is ignored and the default port range of 6667-6669 is attempted.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,217126,,,2011-11-15 00:40:28.0,,,,,,,0|i022fb:,9994,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The javax.xml.tranform.stax imported package should be optional,CAMEL-4670,12531177,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gnt,gnt,gnt,11/Nov/11 20:56,14/Nov/11 16:07,13/Mar/19 22:19,14/Nov/11 16:07,2.8.2,,,,,,,,,2.8.3,2.9.0,,,camel-core,,,,,,0,,,,,,,,,"It forbids camel to be deployed on 1.5, which can be problematic when using an OSGi container with some packages hidden.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-11-12 10:43:36.78,,,no_permission,,Unknown,,,,,,,,,,,216914,,,Sat Nov 12 15:20:01 UTC 2011,,,,,,,0|i022db:,9985,,,,,,,,,"12/Nov/11 10:43;davsclaus;Camel requires JDK6+.

The code uses JDK6+ only API so its not possible to run camel-core on JDK1.5 or older.
","12/Nov/11 15:20;gnt;Yeah, I'm not deploying on JDK 1.5, but rahter on a JDK 1.6 with hidden packages.  The reason to hide those packages is if you want to provide your own implementation of JAXB, STAX, JAXWS or any other specs.  In such a case, you need to hide the packages and it's quite easy to make sure camel can support this use case.",,,,,,,,,,,,,,,,,,,,,,
"Can't find splitter bean in registry using multiple camel contexts with ""vm"" endpoint",CAMEL-4542,12526990,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,berndfischer63,berndfischer63,13/Oct/11 08:38,14/Nov/11 15:35,13/Mar/19 22:19,14/Oct/11 11:14,2.8.0,2.8.1,,,,,,,,2.8.3,2.9.0,,,camel-core,,,,,,0,newbie,test-patch,,,,,,,"The splitter component can use a bean with a ""split method"". It seems that this ""split bean"" is handled as expression and resolved lately using Camel Context from current exchange.

If I send an exchange using a separate CamelContext (""client"")

<camelContext id=""client"" xmlns=""http://camel.apache.org/schema/spring"">
</camelContext>

to a route defined in another CamelContext (""server"") using in-memory transport like ""direct"" or ""vm""

<camelContext id=""server"" xmlns=""http://camel.apache.org/schema/spring"">

   <route id=""route02"" trace=""false"" streamCache=""false"">
     <from uri=""vm:route02""/>
     <split>
       <method bean   =""stringLineSplitter"" method=""split""/>
       <log    message=""before sending: ${body}""/>
       <inOut  uri    =""vm:route04""/>
       <log    message=""after sending""/>
     </split>
     <to uri=""mock:route02""/>
   </route>

</camelContext>

the test fails with 

""Cannot find class: stringLineSplitter"" (Camel 2.8.0). 
""org.apache.camel.NoSuchBeanException - No bean could be found in the registry for: stringLineSplitter"" (Camel 2.9-SNAPSHOT)

If I understood Camel right it fails
because it tries to resolve this bean based on client Camel Context
which is still set at the current exchange send from ""client"" to ""server"" but it
doesn't contain the bean.

If I send an exchange using same ""client"" CamelContext to another route in
""server"" CamelContext involving ""external"" components like ""jms"" (ActiveMQ)

<camelContext id=""server"" xmlns=""http://camel.apache.org/schema/spring"">

   <route id=""route03"" trace=""false"" streamCache=""false"">
     <from uri=""jms:queue:route03""/>
     <split>
       <method bean   =""stringLineSplitter"" method=""split""/>
       <log    message=""before sending: ${body}""/>
       <inOut  uri    =""vm:route04""/>
       <log    message=""after sending""/>
     </split>
     <to uri=""mock:route03""/>
   </route>

</camelContext>

the test passed successfully. It seems that ""jms"" component creates a
new exchange using ""server"" CamelContext.
","OS    - Windows XP 32 Bit
Java  - Sun 1.6_26
Camel - 2.8.0/2.8.1/2.9-SNAPSHOT",,,,,,,,,,,,,,,,,,,,13/Oct/11 08:43;berndfischer63;MethodCallExpression.java.diff;https://issues.apache.org/jira/secure/attachment/12498862/MethodCallExpression.java.diff,13/Oct/11 08:43;berndfischer63;testcase.zip;https://issues.apache.org/jira/secure/attachment/12498861/testcase.zip,,,,,2.0,,,,,,,,,,,,,,,,,,,2011-10-14 13:05:59.516,,,no_permission,,Unknown,,,,,,,,,,,85304,,,Fri Oct 14 13:05:59 UTC 2011,,,Patch Available,,,,0|i021l3:,9858,,,,,,,,,13/Oct/11 08:43;berndfischer63;unit test (mvn project) and patch hopefully solving the problem,14/Oct/11 13:05;njiang;Applied patch with thanks to Bernd and added a new unit test for it.,,,,,,,,,,,,,,,,,,,,,,
JpaConsumer - Should rollback if processing of an exchange failed,CAMEL-4668,12531128,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,11/Nov/11 12:46,13/Nov/11 13:53,13/Mar/19 22:19,12/Nov/11 09:48,2.7.4,2.8.2,,,,,,,,2.7.5,2.8.3,2.9.0,,camel-jpa,,,,,,1,,,,,,,,,"If a JPA consumer pickup X messages and then one of those messages fails to be processed and throws an exception, then the JPA consumer should detect this and mark the TX as rollback.

Currently there is a flaw which causes the JPA consumer to commit the batch.

See nabble
http://camel.465427.n5.nabble.com/Misleading-jmx-statistics-on-jpa-component-tp4960503p4960503.html",,,,,,,,,,,,,,,,,,,,,12/Nov/11 23:14;bvahdat;JpaTXRollbackTest.patch;https://issues.apache.org/jira/secure/attachment/12503507/JpaTXRollbackTest.patch,13/Nov/11 10:54;preben;JpaTXRollbackTest2.patch;https://issues.apache.org/jira/secure/attachment/12503529/JpaTXRollbackTest2.patch,,,,,2.0,,,,,,,,,,,,,,,,,,,2011-11-11 13:56:39.317,,,no_permission,,Unknown,,,,,,,,,,,216866,,,Sun Nov 13 13:53:27 UTC 2011,,,,,,,0|i022cv:,9983,,,,,,,,,"11/Nov/11 13:56;bvahdat;There's something baffling me here, which I like to understand/learn how it's possible that it works!

Looking at [1] there's no try/catch or onException(....).handled(true) or the likes on the route, so sending the payload SendEmail(""kaboom@beer.org"") should blow up with a CamelExecutionException wrapping the thrown IllegalArgumentException(""Forced"") through the usage of the template on the client side (in this case the test method testTXRollback()) but it doesn't!!!

For sure I'm missing some pieces of this tricky puzzle...


[1] https://svn.apache.org/repos/asf/camel/trunk/components/camel-jpa/src/test/java/org/apache/camel/processor/jpa/JpaTXRollbackTest.java","11/Nov/11 14:04;davsclaus;Its 2 different things:
1: The template send 3 messages to INSERT data into the database.
2: Then the route is started, which starts the consumer, it then pickup the 3 messages. And fail processing the last message. Which forces all 3 to rollback. So when it poll again, it find the 3 messages, and try again etc.
","11/Nov/11 14:13;bvahdat;But if I start the route as the first step in the test method it *still* passes:

{code}
    @Test
    public void testTXRollback() throws Exception {
        // start route
        context.startRoute(""foo"");

        // first create three records
        template.sendBody(""jpa://"" + SendEmail.class.getName(), new SendEmail(""foo@beer.org""));
        template.sendBody(""jpa://"" + SendEmail.class.getName(), new SendEmail(""bar@beer.org""));
        template.sendBody(""jpa://"" + SendEmail.class.getName(), new SendEmail(""kaboom@beer.org""));

        // should rollback the entire
        MockEndpoint mock = getMockEndpoint(""mock:result"");
        // we should retry and try again
        mock.expectedMinimumMessageCount(4);

        assertMockEndpointsSatisfied();

        assertTrue(""Should be >= 2, was: "" + foo.intValue(), foo.intValue() >= 2);
        assertTrue(""Should be >= 2, was: "" + bar.intValue(), bar.intValue() >= 2);
    }

{code}

And what I've learned is that the call at the line:
{code}
template.sendBody(""jpa://"" + SendEmail.class.getName(), new SendEmail(""kaboom@beer.org""));
{code}

should at the latest by now blow up with a CamelExecutionException but still it doesn't!","12/Nov/11 09:50;davsclaus;Sending to JPA does *not* fail. So the 3 template code lines works fine.

Its the Camel route that fails. The JPA consumer is scheduled, so it will poll again later (after 2sec). And it will keep failing due that hardcoded exception being thrown. But foo and bar records will be fine, but as they are part of the same TX, they will also rollback. So the foo and bar counter will keep incrementing.","12/Nov/11 12:17;preben;@Claus

Regarding the jmx statistics I added this to your test:

        MBeanServer mBeanServer = context.getManagementStrategy().getManagementAgent().getMBeanServer();
        Set<ObjectName> objNameSet = mBeanServer.queryNames(new ObjectName(""org.apache.camel:type=routes,name=\""foo\"",*""), null);
        ObjectName managedObjName = new ArrayList<ObjectName>(objNameSet).get(0);
        Long exchangesCompleted = (Long) mBeanServer.invoke(managedObjName, ""getExchangesCompleted"", null, null);
        Long exchangesFailed = (Long) mBeanServer.invoke(managedObjName, ""getExchangesFailed"", null, null);
     
        assertTrue(""Should be 0 since they are rolled back, was : "" + exchangesCompleted, 0 == exchangesCompleted);
        assertTrue(""Should be >=2, was: "" + exchangesFailed , exchangesFailed >= 2);

Now the test fails since there are completed exchanges. Shouldn't the jmx statistics reflect that the exchange actual did not complete (rolled back) as the test implies ?

","12/Nov/11 23:14;bvahdat;@Claus,

As Preben tries to push his JMX expectations I insist on my Routing expectations. Really not an easy job for you, but I really appreciate your contribution.

You said:

2: Then the route is started, which starts the consumer, it then pickup the 3 messages. And fail processing the last message. Which forces all 3 to rollback. So when it poll again, it find the 3 messages, and try again etc.

However a slight modification of this test case by me (see the attachment) proves the opposite, that is, after routing is completed there're *3* rows in the table! I've a suspection that somewhere along the way the thrown IllegalArgumentException(""Forced"") is simply swallowed!

Again my expectation is that the call to

{code}
template.sendBody(""jpa://"" + SendEmail.class.getName(), new SendEmail(""kaboom@beer.org""));
{code}

Should blow up with a CamelExecutionException, but that's another story which I still don't understand :-(","13/Nov/11 10:53;preben;@Babak

When you send using the template the records are inserted in its own tx so they should be committed as base for the test to run, and not rolled back. See attached patch.

I'm still not happy about the jmx stats though. ","13/Nov/11 12:07;bvahdat;@Prebsen,

thanks for you comment, but the patch you attached reveals exactly the same behaviour as my attached patch also does, as you added the following assertion:

{code}
List<?> foundSendEmails = jpaTemplate.find(SELECT_ALL_STRING);
assertTrue(""Expect table 3 elements in SendEmail, was: "" + foundSendEmails.size(), foundSendEmails.size() == 3);
{code}

And this is *exactly* what I do *NOT* expect. Apparently according to what Claus said, the transaction should have been *rollbacked*. So after the routing of those 3 payloads completes the transaction through the spring's JpaTransactionManager should have been *rollbacked*, *but it's NOT*, as there're three rows on that table having the addresses 'foo@beer.org', 'bar@beer.org', and 'kaboom@beer.org'.

Maybe it's because of my poor english why I don't get the point. Anyone available who could explain it to me in german, or may be even better in my mother tongue persian :-)

Thanks anyway.",13/Nov/11 13:53;bvahdat;O.K. it took long for me to get the point but now I've got it! Sorry for my misapprehension. ,,,,,,,,,,,,,,,
Bindy does not support quoted value with separator char in CSV datasource,CAMEL-4655,12530968,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,olivierursushorribilis,olivierursushorribilis,10/Nov/11 07:35,12/Nov/11 14:11,13/Mar/19 22:19,12/Nov/11 14:11,2.8.2,,,,,,,,,2.8.3,2.9.0,,,camel-bindy,,,,,,0,,,,,,,,,"i'm currently writing a tuto on Camel (2.8.2).

Showing HTTP4 component usage by downloading US Gov public data, i found a problem :


                from(""quartz://dataTimer?cron=0+*+*+*+*+?"").to(""direct:datas"");

                from(""direct:datas"")
                .to(""http4://earthquake.usgs.gov/earthquakes/catalogs/eqs7day-M1.txt"")
                .unmarshal(new BindyCsvDataFormat(""net.thejeearchitectcookbook.camel.earthquake""))
                .process(new Processor() {

                        public void process(Exchange exchange) throws Exception {

                                Message message = exchange.getIn();

                                // ...
                        }
                });

The data format is like and my separator char is "","":

nc,71678421,0,""Wednesday, November  9, 2011 14:53:13 UTC"",37.5727,-118.8170,1.3,6.60,14,""Central California""

I want to get all datas as java.lang.String but the date value raises exception :

java.lang.IllegalArgumentException: No position 11 defined for the field: 14, line: 2 must be specified]

My separator is "","" but some values are nested inside "" "". Unfortunately there are "","" inside the "" "".

Bindy get lost !
 
How can i get String values nested inside "" "" and containing "","" ?

I can note that Camel CSV component deals with it without any problems.


Here is my pojo :


package net.thejeearchitectcookbook.camel.earthquake;

import java.io.Serializable;


import org.apache.camel.dataformat.bindy.annotation.CsvRecord;
import org.apache.camel.dataformat.bindy.annotation.DataField;


@CsvRecord( separator = "","")
public class EarthquakeInfos implements Serializable {
   
        @DataField(pos = 1)
    private String src;
       
        @DataField(pos = 2)
    private String eqid;
       
        @DataField(pos = 3)
    private String version;
       
    @DataField(pos = 4)
    private String datetime;
   
        @DataField(pos = 5)
    private String lat;
       
        @DataField(pos = 6)
    private String lon;
   
    @DataField(pos = 7)
    private String magnitude;
   
        @DataField(pos = 8)
    private String depth;
       
        @DataField(pos = 9)
    private String nst;
       
    @DataField(pos = 10)
    private String place;
   



    public String getSrc() {
                return src;
        }

        public void setSrc(String src) {
                this.src = src;
        }

        public String getEqid() {
                return eqid;
        }

        public void setEqid(String eqid) {
                this.eqid = eqid;
        }

        public String getVersion() {
                return version;
        }

        public void setVersion(String version) {
                this.version = version;
        }

        public String getLat() {
                return lat;
        }

        public void setLat(String lat) {
                this.lat = lat;
        }

        public String getLon() {
                return lon;
        }

        public void setLon(String lon) {
                this.lon = lon;
        }

        public String getDepth() {
                return depth;
        }

        public void setDepth(String depth) {
                this.depth = depth;
        }

        public String getNst() {
                return nst;
        }

        public void setNst(String nst) {
                this.nst = nst;
        }

        public String getDatetime() {
        return datetime;
    }

    public void setDatetime(String datetime) {
        this.datetime = datetime;
    }

    public String getMagnitude() {
        return magnitude;
    }

    public void setMagnitude(String magnitude) {
        this.magnitude = magnitude;
    }

    public String getPlace() {
        return place;
    }

    public void setPlace(String place) {
        this.place = place;
    }
} 

I can find that CSV Camel component performs well with the same datasource :

from(""direct:datas"")
.to(""http4://earthquake.usgs.gov/earthquakes/catalogs/eqs7day-M1.txt"")
.unmarshal().csv().process(new Processor() {

	public void process(Exchange exchange) throws Exception {

		Message message = exchange.getIn();
		List<List<String>> datas = (List<List<String>>) message.getBody();
		// Skip header
		datas = datas.subList(1, datas.size() - 1);
		// Process my data
		for (List<String> row : datas) {
			// Process Row
			String datetime = row.get(3);
			String region = row.get(9);
			String magnitude = row.get(6);
					
		}
	}
});
","Mac Snow Leopard
Java(TM) SE Runtime Environment (build 1.6.0_26-b03-384-10M3425)
Java HotSpot(TM) 64-Bit Server VM (build 20.1-b02-384, mixed mode)
Maven 3.0.1",,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-11-12 14:11:51.49,,,no_permission,,Unknown,,,,,,,,,,,216706,,,Sat Nov 12 14:11:51 UTC 2011,,,,,,,0|i0229z:,9970,,,,,,,,,12/Nov/11 14:11;davsclaus;Thanks for reporting.,,,,,,,,,,,,,,,,,,,,,,,
Using static queue as a reply queue in InOut pattern causes memory leak,CAMEL-2740,12484698,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,qingyi,qingyi,19/May/10 18:22,09/Nov/11 17:29,13/Mar/19 22:17,09/Nov/11 14:36,2.2.0,,,,,,,,,2.7.5,2.8.3,2.9.0,,camel-jms,,,,,,0,,,,,,,,,"I am running JBoss, ActiveMQ and Camel for my application.   In the InOut pattern,  I am using a predefined static queue as a reply queue.   After running for a while,  the memory usage of JBoss keeps growing and growing until it hits outOfMemory error and app server is totally hung.   I monitor the thread in jconsole,  I can see the jms connection/session keeps growing and growing.   

But once I switch to use temp queue for InOut pattern,  this problem goes away.

",Originally reported on Windows 2003 server and recently confirmed on OSX in a stand alone unit test.,,,,,,,,,,,,,,,,,,,,08/Nov/11 22:36;davaleri;ASF.LICENSE.NOT.GRANTED--CAMEL-2740 Memory Usage.jpg;https://issues.apache.org/jira/secure/attachment/12502976/ASF.LICENSE.NOT.GRANTED--CAMEL-2740+Memory+Usage.jpg,08/Nov/11 22:55;davaleri;CAMEL-2740.tar.gz;https://issues.apache.org/jira/secure/attachment/12502981/CAMEL-2740.tar.gz,,,,,2.0,,,,,,,,,,,,,,,,,,,2010-05-21 14:40:26.728,,,no_permission,,,,,,,,,,,,,76448,,,Wed Nov 09 17:29:27 UTC 2011,,,,,,,0|i01qfr:,8052,,,,,,,,,"21/May/10 14:40;davsclaus;Could you post more details, eg what Camel route do you use?

And how have you setup ActiveMQ?","21/May/10 14:40;davsclaus;And what versions of the various software are you using? eg JBoss, AMQ, JDK etc.","21/May/10 20:30;qingyi;Here is the version of software.

JBoss 4.2.2
AMQ 5.3.1
JDK  1.5.0_22
Camel 2.2.0","21/May/10 20:59;qingyi;Here are some more details.

AMQ:  I have two activemq and there is one network connector between them.  See config below.

<networkConnector name=""server1"" uri=""static://(https://localhost:61617?proxyHost=server1&proxyPort=80)"" duplex=""true"">
     <!-- limit store and forward to specific queues -->
     <dynamicallyIncludedDestinations>
         <queue physicalName=""TO_SERVER1.>""/>
         <queue physicalName=""TO_SCA.>""/>
     </dynamicallyIncludedDestinations>
     <staticallyIncludedDestinations>
		<queue physicalName=""TO_SERVER1.SYNC_RESP""/>
		<queue physicalName=""TO_SCA.SSO.SYNC_REQ""/>
     </staticallyIncludedDestinations>
  </networkConnector>

Camel Route on consumer side:
		from(""jms:queue:TO_SCA.SSO.SYNC_REQ?concurrentConsumers=25"")
			.choice()
				.when(header(JMS_HEADER_TYPE).isEqualTo(""TYPE1""))
					.beanRef(""service1"")
				.when(header(JMS_HEADER_TYPE).isEqualTo(""TYPE2""))
					.beanRef(""service2"")
				.otherwise()
					.beanRef(""unknownService"")
			.end();

On producer side:

	        HashMap<String, Object> reqHeaders = new HashMap<String, Object>();
	        reqHeaders.put(""JMSType"", ""TYPE1"");
			
			
		 // Options
	        StringBuffer options = new StringBuffer();
	        options.append(""?"");
	        options.append(""replyTo"");
	        options.append(""="");
	        options.append(""TO_EC.SERVER1.SYNC_RESP"");

	        
	        // Send Message
	        String outMsg = (String)camelTemplate.sendBodyAndHeaders(""jms:queue:TO_SCA.SSO.SYNC_REQ""+options.toString(), 
	        														 ExchangePattern.InOut, 
	        														 inMsg, 
	        														 reqHeaders);			


",27/May/10 13:55;davsclaus;Can you crete a small project and attach a zip file with it? Then its easier to use to look into this.,"25/Jul/10 12:22;davsclaus;See this FAQ about the correct way of using templates
http://camel.apache.org/why-does-camel-use-too-many-threads-with-producertemplate.html

And also try Camel 2.5 because the request-reply logic over JMS have been refactored a bit to cater for async routing engine.",12/Aug/10 08:21;davsclaus;User doesn't respond,24/Apr/11 09:58;davsclaus;Closing all resolved tickets from 2010 or older,"08/Nov/11 23:10;davaleri;I have attached a screen shot showing memory usage for the attached test case.  The attached test case uses a simple JUnit test to throw a bunch of small messages at JMS with the InOut MEP.  The test case uses the asynch capabilities of the ProducerTemplate to easily ramp up the traffic.  It doesn't wait for the generated Futures so it isn't really usable for correctness testing, it is just intended to reproduce the issue.  Also note that killing the build will likely not terminate the forked JVM.

It takes less than 8K messages to consume the available memory.  The test crawls along for a bit after this point and eventually runs out of memory and crashes somewhere in the low 8K message range.  It only takes a couple minutes to reach this point.  Based on real world observation, it would appear that the issue is not driven by message frequency but by message numbers.  That is, it can take a minute or a week to encounter enough messages, but eventually you run out of memory.

The heap is occupied mostly by character arrays that appear to contain message IDs / correlation IDs.  I did not traverse the object graph in the heap, but it would appear that there is some sort of issue with JMS filters or connections not getting cleaned up.  I did not attach the heap dump as it is trivial to generate from the attached test code.

Removing the replyTo URI parameter and using a temp destination for replies resolves the issue.  Memory usage stays in an acceptable range and message throughput is relatively constant, although does appear to slow slightly over time for a currently unknown reason.","08/Nov/11 23:29;davaleri;Also, the attached test uses 2.9-RC1.  The steady slowdown with a temporary reply destination was due to Eclipse's console window slowing down the logging activities when running the test in Eclipse.  Once Eclipse was out of the mix, using a temporary reply destination performed flawlessly in a 30 minute test run.",09/Nov/11 09:45;davsclaus;David please create a new ticket instead of opening old tickets. We prefer this way. You may link the new ticket to the old ticket.,"09/Nov/11 11:42;davsclaus;Okay I can reproduce the issue (at about 8000 msgs) and have a patch which improves this, but I hit a OOME at 100000 msg now.
","09/Nov/11 12:32;davsclaus;Okay I was using the default maven surefire memory settings which of course is low. 

So I increased the memory setting and have the test be able to run all 1000000 messages

{code}

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <argLine>-Xmx1024m -XX:MaxPermSize=512m</argLine>
        </configuration>
      </plugin>
    </plugins>
  </build>
{code}",09/Nov/11 14:36;davsclaus;Thanks for the sample project to reproduce the issue.,"09/Nov/11 17:29;davsclaus;Well the sample project from David itself also causes high memory occupation as it creates 1.000.000 tasks on the executor service pool, which is stored in memory. For example using a sample with for example 50.000 tasks does not take up so much memory.
",,,,,,,,,
NPE from DefaultCxfBinding when <soap:Body/> is null ,CAMEL-4649,12530844,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,xldai,xldai,09/Nov/11 10:18,09/Nov/11 13:42,13/Mar/19 22:19,09/Nov/11 13:42,2.8.2,,,,,,,,,2.7.5,2.8.3,2.9.0,,camel-cxf,,,,,,0,,,,,,,,,"when got soap message from CXF component like this:
<soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/"">
<soap:Header>
......
</soap:Header>
<soap:Body/>
</soap:Envelope>

the NPE will be thrown: 

18:04:51,255 | WARN  | tp1212500935-153 | ache.cxf.common.logging.LogUtils  372 |  -  -  | Interceptor for {http://airportsoap.sopera.de}airport#{http://airportsoap.sopera.de}getAirportInformationByISOCountryCode has thrown exception, unwinding now
java.lang.NullPointerException
	at org.apache.camel.component.cxf.DefaultCxfBinding.getResponsePayloadList(DefaultCxfBinding.java:395)[163:org.apache.camel.camel-cxf:2.8.2]
	at org.apache.camel.component.cxf.DefaultCxfBinding.populateCxfResponseFromExchange(DefaultCxfBinding.java:318)[163:org.apache.camel.camel-cxf:2.8.2]
	at org.apache.camel.component.cxf.CxfConsumer$1.setResponseBack(CxfConsumer.java:176)[163:org.apache.camel.camel-cxf:2.8.2]
	at org.apache.camel.component.cxf.CxfConsumer$1.asyncInvoke(CxfConsumer.java:103)[163:org.apache.camel.camel-cxf:2.8.2]
	at org.apache.camel.component.cxf.CxfConsumer$1.invoke(CxfConsumer.java:68)[163:org.apache.camel.camel-cxf:2.8.2]
	at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:58)[141:org.apache.cxf.bundle:2.5.0]
	at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:93)[141:org.apache.cxf.bundle:2.5.0]
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:263)[141:org.apache.cxf.bundle:2.5.0]
	at org.apache.cxf.phase.PhaseInterceptorChain.resume(PhaseInterceptorChain.java:232)[141:org.apache.cxf.bundle:2.5.0]
	at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:80)[141:org.apache.cxf.bundle:2.5.0]
	at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.serviceRequest(JettyHTTPDestination.java:323)[141:org.apache.cxf.bundle:2.5.0]
	at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.doService(JettyHTTPDestination.java:289)[141:org.apache.cxf.bundle:2.5.0]
	at org.apache.cxf.transport.http_jetty.JettyHTTPHandler.handle(JettyHTTPHandler.java:72)[141:org.apache.cxf.bundle:2.5.0]
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:939)[59:org.eclipse.jetty.server:7.4.5.v20110725]
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:875)[59:org.eclipse.jetty.server:7.4.5.v20110725]
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:117)[59:org.eclipse.jetty.server:7.4.5.v20110725]
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:185)[59:org.eclipse.jetty.server:7.4.5.v20110725]
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:110)[59:org.eclipse.jetty.server:7.4.5.v20110725]
	at org.eclipse.jetty.server.Server.handleAsync(Server.java:391)[59:org.eclipse.jetty.server:7.4.5.v20110725]
	at org.eclipse.jetty.server.HttpConnection.handleRequest(HttpConnection.java:594)[59:org.eclipse.jetty.server:7.4.5.v20110725]
	at org.eclipse.jetty.server.HttpConnection.handle(HttpConnection.java:393)[59:org.eclipse.jetty.server:7.4.5.v20110725]
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:535)[54:org.eclipse.jetty.io:7.4.5.v20110725]
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:40)[54:org.eclipse.jetty.io:7.4.5.v20110725]
	at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:529)[53:org.eclipse.jetty.util:7.4.5.v20110725]
	at java.lang.Thread.run(Thread.java:662)[:1.6.0_24]


Looking into the source codes, before the line 395 of DefaultCxfBinding, the elements variable shoulde be checked if it's null.","Win 7, JDK1.6",,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-11-09 13:42:35.431,,,no_permission,,Unknown,,,,,,,,,,,216582,,,Wed Nov 09 13:42:35 UTC 2011,,,,,,,0|i0228v:,9965,,,,,,,,,09/Nov/11 13:42;njiang;Applied patch with thanks to Xilai.,,,,,,,,,,,,,,,,,,,,,,,
Simple expression does not find method toString(),CAMEL-4647,12530741,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,romanstumm,romanstumm,08/Nov/11 17:36,09/Nov/11 10:19,13/Mar/19 22:19,09/Nov/11 10:19,2.8.0,,,,,,,,,2.8.3,2.9.0,,,camel-core,,,,,,0,,,,,,,,,"In a route builder, we have a log definition: 

from(""direct:testSimple"")
 .log(""${body.toString}"");

The body contains an object, that implements a public toString() method. But the problem is, that the simple-expression does not find the method toString() and route processing stops without throwing an exception.

The funny thing is, that when we just rename the method, e.g. toInfoString(), then it works:
from(""direct:testSimple"")
 .log(""${body.toInfoString}"");

Why does simple expression have a problem with a method named ""toString""?
",camel 2.8.0,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-11-09 09:31:04.514,,,no_permission,,Unknown,,,,,,,,,,,216479,,,Wed Nov 09 09:31:04 UTC 2011,,,,,,,0|i0228f:,9963,,,,,,,,,"09/Nov/11 09:31;davsclaus;Just do .log(""${body}"") as Camel will convert the body to a String which then triggers a type conversion -> String.

When using the OGNL support in the simple language it leverages it from the bean component, which excludes the methods from java.lang.Object by default. We should possible include the toString() method.",,,,,,,,,,,,,,,,,,,,,,,
Camel FTP component fails to process multiple files at once from a specified folder,CAMEL-4010,12508205,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,tricasoft,tricasoft,24/May/11 15:16,06/Nov/11 11:57,13/Mar/19 22:19,06/Nov/11 11:57,2.6.0,,,,,,,,,2.8.3,2.9.0,,,camel-ftp,,,,,,0,,,,,,,,,"Camel FTP component fails to process multiple files at once from a specified folder (let's assume the folder is /in).
When the consumer connects to a ftp account and finds a list of, let's say, 3 files, it will try to retrieve them in parallel but this is not handled properly.

As you can see from the below FTP server log, this is what Camel FTP does:
- it changes the current directory to /in
- retrieves the file
- it changes the current directory to /
- the second (probably) thread changes the directory to /in
- retreives the second file
- the first (probably) thread sends a delete command but it sends it as if it were in the root folder but it is actually in the /in folder
- the FTP gives an error that the file doesn't exist
- somehow the FTP Component blocks itself on the first file...

See my comments in the following log starting with *****

(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)> 257 ""/"" is current directory.
(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)> CWD in
(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)> 250 CWD successful. ""/in"" is current directory.
(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)> PASV
(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)> 227 Entering Passive Mode (192,168,0,25,228,206)
(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)> RETR WS_1001_1.xml
(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)> 150 Connection accepted
(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)> SSL connection for data connection established
(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)> 226 Transfer OK
(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)> CWD /
(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)> 250 CWD successful. ""/"" is current directory.
(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)> PWD
(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)> 257 ""/"" is current directory.
(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)> CWD in
(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)> 250 CWD successful. ""/in"" is current directory.
(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)> PASV
(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)> 227 Entering Passive Mode (192,168,0,25,228,207)
(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)> RETR WS_1001_2.xml
(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)> 150 Connection accepted
(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)> DELE in/WS_1001_1.xml    ***** The location is already /in, should be DELE WS_1001_1.xml
(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)> 550 File not found
(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)> PASV
(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)> 227 Entering Passive Mode (192,168,0,25,228,208)
(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)> NLST in
(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)> 550 Directory not found
(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)> PWD
(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)> 257 ""/in"" is current directory.
(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)> CWD in            ***** Current directory is already /in
(002386)5/20/2011 17:07:03 PM - sftp-test (192.168.0.194)> 550 CWD failed. ""/in/in"": directory not found.

For the whole FTP server logs go here: http://pastie.org/private/kknnkxpbyzqmai7gsm8z5g
For the Servicemix/Camel(Trace) log: http://pastie.org/private/eulookxiepan3nkjyu41a

A workaround that seems to work is to use the maxMessagesPerPoll=1 option.","Camel 2.6.0-fuse-0.1-0.9
Running in ServiceMix
Java 1.6",,,,,,,,,,,,,,,,,,,CAMEL-4625,25/May/11 13:19;tricasoft;test-camel-ftp.zip;https://issues.apache.org/jira/secure/attachment/12480407/test-camel-ftp.zip,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-05-29 12:21:51.929,,,no_permission,,,,,,,,,,,,,76188,,,Sat Nov 05 13:11:38 UTC 2011,,,,,,,0|i01yan:,9325,,,,,,,,,"25/May/11 13:19;tricasoft;Sample test case using Camel Nmr in combination with Camel FTP.

You need to do:
- unzip and enter the folder
- mvn install
- copy the .zip file from /sa/target to ServiceMix deploy folder
- put more than 3 files at once on the input FTP",29/May/11 12:21;davsclaus;Cannot be critical as there is a workaround,"05/Nov/11 13:11;davsclaus;The ftp consumer is not thread safe, we should possible force the ftp consumer to run synchronously.",,,,,,,,,,,,,,,,,,,,,
Camel ftp read file after close connection,CAMEL-4605,12529819,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,alexey-s,alexey-s,02/Nov/11 07:21,05/Nov/11 12:56,13/Mar/19 22:19,05/Nov/11 12:56,2.8.1,,,,,,,,,2.8.3,2.9.0,,,camel-ftp,,,,,,0,,,,,,,,,"There is an error with ftp server. 
Many files on the server. All files have no time to be processed. 
When the processing of the next file, the process stops. 
Error - The request is a file after closing the connection. 

Camel config route: 
{code}
<?xml version=""1.0"" encoding=""UTF-8""?>
<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0""
  xmlns:cm=""http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.0.0""
  xmlns:camel=""http://camel.apache.org/schema/blueprint""
  xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
  default-activation=""lazy"">

  <cm:property-placeholder persistent-id=""ccwe.exchange.oos"">
    <cm:default-properties>
      <cm:property name=""ftp.doc.url"" value=""ftp://mail01.zakupki.gov.ru/auto/organization/all/""/>
      <cm:property name=""ftp.doc.add_params"" value=""""/>
    </cm:default-properties>
  </cm:property-placeholder>
  
  <bean id=""readProcess"" class=""mypackage.docread.ReadProcess""/>

  <bean id=""routePolicy"" 
    class=""org.apache.camel.routepolicy.quartz.CronScheduledRoutePolicy"">
    <property name=""routeStartTime"" value=""* 0/10 * * * ?""/>
    <property name=""routeStopTime"" value=""* 4/10 * * * ?""/>
  </bean>

  <camelContext id=""exchange-read"" 
     xmlns=""http://camel.apache.org/schema/blueprint"" autoStartup=""false"">
     
    <threadPoolProfile id=""fooProfile"" 
       poolSize=""2"" maxPoolSize=""2"" maxQueueSize=""-1""/>
       
    <route id=""readRoute"" 
      routePolicyRef=""routePolicy""
      shutdownRunningTask= ""CompleteAllTasks"">
      
      <from uri=""{{ftp.doc.url}}?noop=true&amp;binary=true{{ftp.doc.add_params}}""/>
      <to uri=""bean:readProcess""/>
    </route>
  </camelContext>
</blueprint>
{code}

We have two streams
bq. <threadPoolProfile id=""fooProfile"" poolSize=""2"" maxPoolSize=""2"" maxQueueSize=""-1""/>


The first thread (thread#0) reading file from ftp server
{code}
2011-11-02 09:13:57,376 | TRACE | Camel (exchange-read) thread #0 - ftp://mail01.zakupki.gov.ru/auto/organization/all/ | FtpConsumer                      | mponent.file.GenericFileConsumer  261 | 94 - org.apache.camel.camel-core - 2.8.1 |
     Processing file: GenericFile[organization_all_20111023_010003_33.xml.zip]
2011-11-02 09:13:57,376 | TRACE | Camel (exchange-read) thread #0 - ftp://mail01.zakupki.gov.ru/auto/organization/all/ | FtpConsumer                      | mponent.file.GenericFileConsumer  293 | 94 - org.apache.camel.camel-core - 2.8.1 |
     Retrieving file: auto/organization/all/organization_all_20111023_010003_33.xml.zip from: Endpoint[ftp://mail01.zakupki.gov.ru/auto/organization/all/?
binary=true&connectTimeout=10000&delay=600000&disconnect=true&localWorkDirectory=%2Fhome%2Fuser%2Ftemp&noop=true&passiveMode=true&soTimeout=10000&timeout=15000]
{code}

The second stream (thread#1) is stopped
{code}
2011-11-02 09:14:00,004 | DEBUG | Camel (exchange-read) thread #1 - ShutdownTask | ScheduledPollConsumer            | camel.impl.ScheduledPollConsumer  265 | 94 - org.apache.camel.camel-core - 2.8.1 | 
     This consumer is stopping, so cancelling scheduled task: java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask@2bf8d0a4
2011-11-02 09:14:00,005 | DEBUG | Camel (exchange-read) thread #1 - ShutdownTask | FtpConsumer                      | pache.camel.impl.DefaultConsumer   83 | 94 - org.apache.camel.camel-core - 2.8.1 | 
     Stopping consumer: FtpConsumer[ftp://mail01.zakupki.gov.ru/auto/organization/all/?binary=true&connectTimeout=10000&delay=600000&disconnect=true&localWorkDirectory=%2Fhome%2Fuser%2Ftemp&noop=true&passiveMode=true&soTimeout=10000&timeout=15000]
2011-11-02 09:14:00,007 | DEBUG | Camel (exchange-read) thread #1 - ShutdownTask | ProcessorEndpoint$1              | pache.camel.impl.DefaultProducer   76 | 94 - org.apache.camel.camel-core - 2.8.1 | 
     Stopping producer: Producer[bean://readProcess]
2011-11-02 09:14:00,010 | DEBUG | Camel (exchange-read) thread #1 - ShutdownTask | FtpConsumer                      | t.file.remote.RemoteFileConsumer  102 | 94 - org.apache.camel.camel-core - 2.8.1 | 
     Disconnecting from: ftp://anonymous@mail01.zakupki.gov.ru:21
{code}

Warning!!!! ftp close connection. Completed method FTPClient.disconnect(). Parament _controlInput_ = null.

{code}
2011-11-02 09:14:03,182 | INFO  | Camel (exchange-read) thread #1 - ShutdownTask | DefaultShutdownStrategy          | ultShutdownStrategy$ShutdownTask  460 | 94 - org.apache.camel.camel-core - 2.8.1 | 
     Route: readRoute shutdown complete, was consuming from: Endpoint[...]
2011-11-02 09:14:03,182 | INFO  | DefaultQuartzScheduler-exchange-read_Worker-1 | DefaultShutdownStrategy          | mel.impl.DefaultShutdownStrategy  158 | 94 - org.apache.camel.camel-core - 2.8.1 | 
     Graceful shutdown of 1 routes completed in 3 seconds
{code}

The first thread (thread#0) continues reading the file [organization_all_20111023_010003_33.xml.zip].
{code}
2011-11-02 09:14:04,172 | ERROR | Camel (exchange-read) thread #0 - ftp://mail01.zakupki.gov.ru/auto/organization/all/ | FtpConsumer                      | ache.camel.processor.CamelLogger  232 | 94 - org.apache.camel.camel-core - 2.8.1 | Caused by: [java.lang.NullPointerException - null]
java.lang.NullPointerException
	at org.apache.commons.net.ftp.FTP.__getReply(FTP.java:295)[97:org.apache.commons.net:2.2]
	at org.apache.commons.net.ftp.FTP.getReply(FTP.java:622)[97:org.apache.commons.net:2.2]
	at org.apache.commons.net.ftp.FTPClient.completePendingCommand(FTPClient.java:1408)[97:org.apache.commons.net:2.2]
	at org.apache.commons.net.ftp.FTPClient.retrieveFile(FTPClient.java:1467)[97:org.apache.commons.net:2.2]
	at org.apache.camel.component.file.remote.FtpOperations.retrieveFileToFileInLocalWorkDirectory(FtpOperations.java:406)[99:org.apache.camel.camel-ftp:2.8.1]
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-11-04 10:27:02.87,,,no_permission,,Unknown,,,,,,,,,,,215678,,,Sat Nov 05 08:38:30 UTC 2011,,,,,,,0|i021z3:,9921,,,,,,,,,"03/Nov/11 13:00;alexey-s;Redefine the creation of a method of FTPClient FTPClient createFtpClient () class FtpEndpoint.
Add to the method displays the message
{code}
LOGGER.info(""create FTPClient {}"", client);
{code}

{code}
public class FTPClientTest extends FTPClient {
    private static final Logger LOGGER = LoggerFactory.getLogger(FTPClientTest.class);

    public FTPClientTest() {
        super();
    }

    @Override
    public void disconnect() throws IOException {
        LOGGER.info(""FTPClient disconnect {}"", this);
        super.disconnect();
    }

    @Override
    protected Socket _openDataConnection_(int command, String arg) throws IOException {
        LOGGER.info(""FTPClient _openDataConnection_ {}"", this);
        return super._openDataConnection_(command, arg);
    }

    @Override
    protected void _connectAction_() throws IOException {
        LOGGER.info(""FTPClient _connectAction_ {}"", this);
        super._connectAction_();
    }
}
{code}

We observe the creation of two FTPClient
{code}
2011-11-03 15:22:00,862 | INFO  | Blueprint Extender: 2 | FtpEndpointExt | t.file.remote.ext.FtpEndpointExt   55 | 115 - org.apache.camel.c
amel-ftp - 2.8.1 | create FTPClient org.apache.camel.component.file.remote.ext.FTPClientTest@2e81d81e
{code}
...
{code}
2011-11-03 15:22:01,213 | INFO  | Blueprint Extender: 1 | FtpEndpointExt | t.file.remote.ext.FtpEndpointExt   55 | 115 - org.apache.camel.c
amel-ftp - 2.8.1 | create FTPClient org.apache.camel.component.file.remote.ext.FTPClientTest@738e7a09
{code}

Last post by FTPClient
{code}
2011-11-03 15:28:01,543 | INFO  | Camel (exchange-read) thread #0 - ftp://mail01.zakupki.gov.ru/auto/organization/all/ | FTPClientTest| nt.file.remote.ext.FTPClientTest   25 | 115 - org.apache.camel.camel-ftp - 2.8.1 | 
    FTPClient _openDataConnection_ org.apache.camel.component.file.remote.ext.FTPClientTest@2e81d81e
{code}
Note the number of object *FTPClientTest@2e81d81e*.

Begins to stop the second process (thread # 1):
{code}
2011-11-03 15:28:09,010 | INFO  | Camel (exchange-read) thread #1 - ShutdownTask | DefaultShutdownStrategy          | ultShutdownStrategy$ShutdownTask  425 | 94 - org.apache.camel.camel-core - 2.8.1 | 
    Waiting as there are still 56 inflight and pending exchanges to complete, timeout in 291 seco
nds.
2011-11-03 15:28:10,004 | WARN  | DefaultQuartzScheduler-exchange-read_Worker-1 | DefaultShutdownStrategy          | mel.impl.DefaultShutdownStrategy  143 | 94 - org.apache.camel.camel-core - 2.8.1 | 
    Timeout occurred. Now forcing the routes to be shutdown now.
2011-11-03 15:28:10,004 | WARN  | Camel (exchange-read) thread #1 - ShutdownTask | DefaultShutdownStrategy | ultShutdownStrategy$ShutdownTask  433 | 94 - org.apache.camel.camel-core - 2.8.1 | 
    Interrupted while waiting during graceful shutdown, will force shutdown now.
{code}

Completing the process (thread # 0):
{code}
2011-11-03 15:28:10,011 | TRACE | DefaultQuartzScheduler-exchange-read_Worker-1 | ServiceHelper | .apache.camel.util.ServiceHelper  103 | 94 - org.apache.camel.camel-core - 2.8.1 | 
    Service already stopped: org.apache.camel.impl.SharedProducerServicePool@50ec2522
2011-11-03 15:28:10,011 | TRACE | DefaultQuartzScheduler-exchange-read_Worker-1 | ServiceHelper | .apache.camel.util.ServiceHelper  108 | 94 - org.apache.camel.camel-core - 2.8.1 | 
    Stopping service DefaultErrorHandler[TraceInterceptor[To[bean:readProcess]]]
2011-11-03 15:28:10,011 | DEBUG | DefaultQuartzScheduler-exchange-read_Worker-1 | FtpConsumer | t.file.remote.RemoteFileConsumer  102 | 94 - org.apache.camel.camel-core - 2.8.1 | 
    Disconnecting from: ftp://anonymous@mail01.zakupki.gov.ru:21
2011-11-03 15:28:12,908 | INFO  | DefaultQuartzScheduler-exchange-read_Worker-1 | FTPClientTest | nt.file.remote.ext.FTPClientTest   19 | 115 - org.apache.camel.camel-ftp - 2.8.1 | 
    FTPClient disconnect org.apache.camel.component.file.remote.ext.FTPClientTest@2e81d81e
{code}
As you can see, the system is stopped *FTPClientTest@2e81d81e*. This object belongs to the first thread (thread # 0).
","04/Nov/11 10:27;davsclaus;The FTPClient library is not threads safe.

Where do you use that thread pool profile?","05/Nov/11 08:38;davsclaus;See nabble
http://camel.465427.n5.nabble.com/Camel-ftp-read-next-file-after-close-connection-tp4952369p4952369.html",,,,,,,,,,,,,,,,,,,,,
source jars missing in 2.9.0-RC1,CAMEL-4611,12530085,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,janstey,janstey,03/Nov/11 17:26,03/Nov/11 17:40,13/Mar/19 22:19,03/Nov/11 17:40,,,,,,,,,,2.9.0,,,,,,,,,,0,,,,,,,,,"There are no source jars in the latest staged release https://repository.apache.org/content/repositories/orgapachecamel-137/org/apache/camel/camel-core/2.9.0-RC1/

Found this warning in the logs

{code}
[INFO] --- maven-source-plugin:2.1.2:jar-no-fork (attach-sources) @ camel-core ---
[WARNING] NOT adding sources to artifacts with classifier as Maven only supports one classifier per artifact. Current artifact [org.apache.camel:camel-core:bundle:2.9-SNAPSHOT] has a [] classifier.
{code}

which led me to FELIX-3058. Gonna back our maven-bundle-plugin version down to 2.3.4 shortly which resolves the issue. ",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,215944,,,Thu Nov 03 17:40:21 UTC 2011,,,,,,,0|i0220f:,9927,,,,,,,,,03/Nov/11 17:40;janstey;Will be fixed when we actually cut the 2.9.0 release.,,,,,,,,,,,,,,,,,,,,,,,
Using Saxon to do XML split and xpath evaluation causes XPathExpression exception,CAMEL-4594,12529231,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,28/Oct/11 11:02,28/Oct/11 14:14,13/Mar/19 22:19,28/Oct/11 14:14,2.8.2,,,,,,,,,2.8.3,2.9.0,,,camel-saxon,,,,,,0,,,,,,,,,"If you do a route like
{code}
                from(""direct:start"")
                    .split().xpath(""/persons/person"")
                    .choice()
                        .when().xpath(""person/city = 'London'"")
                            .to(""mock:london"")
                        .when().xpath(""person/city = 'Paris'"")
                            .to(""mock:paris"")
                        .otherwise()
                            .to(""mock:other"");
{code}

Then Saxon throws this exception
{code}
Caused by: javax.xml.xpath.XPathExpressionException: Supplied node must be built using the same or a compatible Configuration
	at net.sf.saxon.xpath.XPathExpressionImpl.evaluate(XPathExpressionImpl.java:284)
	at org.apache.camel.builder.xml.XPathBuilder.doInEvaluateAs(XPathBuilder.java:677)
	... 77 more
{code}

",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,215091,,,2011-10-28 11:02:26.0,,,,,,,0|i021wn:,9910,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
XPath will lock File input in case of an exception during xpath evaluation,CAMEL-4591,12529036,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,27/Oct/11 11:54,27/Oct/11 13:23,13/Mar/19 22:19,27/Oct/11 13:23,2.8.2,,,,,,,,,2.8.3,2.9.0,,,camel-core,,,,,,0,,,,,,,,,"We have a similar issue with XPath, as we had with XSLT and XQuery.

If the message is a java.io.File and an exception occurs during evaluation, then that file is locked on Windows platforms.
We need to close the FileInputStream to unlock the file, and allow Windows to access the file.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,214896,,,Thu Oct 27 13:13:01 UTC 2011,,,,,,,0|i021vz:,9907,,,,,,,,,27/Oct/11 13:13;davsclaus;btw workaround is to convert the body to String.class beforehand.,,,,,,,,,,,,,,,,,,,,,,,
Add option on XSLT to allow StAX,CAMEL-4579,12528659,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,25/Oct/11 12:22,25/Oct/11 13:21,13/Mar/19 22:19,25/Oct/11 13:04,2.8.2,,,,,,,,,2.8.3,2.9.0,,,camel-core,,,,,,0,,,,,,,,,"With the new StAX converters you may convert to a StAXSource which is not supported by the XSLT transformer, and you get this exception

Caused by: org.apache.xml.dtm.DTMException: Not supported: javax.xml.transform.stax.StAXSource@14d556e
	at org.apache.xml.dtm.ref.DTMManagerDefault.getDTM(DTMManagerDefault.java:477)
	at org.apache.xalan.transformer.TransformerImpl.transform(TransformerImpl.java:699)
	at org.apache.xalan.transformer.TransformerImpl.transform(TransformerImpl.java:1273)
	at org.apache.xalan.transformer.TransformerImpl.transform(TransformerImpl.java:1251)
	at org.apache.camel.builder.xml.XsltBuilder.process(XsltBuilder.java:107)

We should add option on XSLT component to explicit enable StAX if the end user wants it.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,214519,,,Tue Oct 25 13:21:48 UTC 2011,,,,,,,0|i021tb:,9895,,,,,,,,,25/Oct/11 13:21;davsclaus;This also fixes a bug in 2.8.2 where you may see this exception.,,,,,,,,,,,,,,,,,,,,,,,
SLF4JLog does not work with JdbcDriver for Quickfix/J,CAMEL-4568,12528139,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,eliotc,eliotc,21/Oct/11 04:52,25/Oct/11 08:07,13/Mar/19 22:19,24/Oct/11 13:57,2.8.0,,,,,,,,,2.8.3,2.9.0,,,,,,,,,0,Quickfix,,,,,,,,"I discovered that to use SLF4J log, JdbcDriver cannot be present in the Quickfix/J config file. Otherwise, the default LogFactory - ScreenLogFactory will be used. We need JdbcDriver setting as it is used for persisting FIX messages into database for FIX session management.

After debugging the code, I found out that this could be fixed by swapping those two lines in QuickfixjEngine.java

298: isJdbcLog(settings, impliedLogFactories);
299: isSL4JLog(settings, impliedLogFactories);

Can we please have this fixed for the next release?",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-10-21 08:45:40.283,,,no_permission,,Unknown,,,,,,,,,,,97521,,,Tue Oct 25 08:07:19 UTC 2011,,,,,,,0|i021qv:,9884,,,,,,,,,"21/Oct/11 08:45;njiang;Hi,

I just checked the code, it looks like Quickfix doesn't supports to let you configure two logger at the same time.
Which means even you switch the code let the JdbcDriver work, you still can't get the SLF4jLog work for you at the same time.
How about you just update configuration instead of changing the code.
","24/Oct/11 13:57;njiang;Now the jdbcLog will be set when there is a setting on the JdbcSetting.SETTING_LOG_EVENT_TABLE.
If there more than one logFactory is configured, the QuickfixjEngine will throw a configuration exception for it.","24/Oct/11 23:40;eliotc;Hi Willem,

Thanks for looking into this.

I don't think I have made our requirements clear.  What we need is being able to use SLF4JLog as the logFactory and at the same time use Jdbc as the MessageStoreFactory (we do NOT want to use jdbc logFactory).

The code intends to, as you mentioned, allow configuration of ONE logFactory and ONE MessageStoreFactory (defines where messages are persisted for session management). That is actually in line with what we want. 

However, because both logFactory and MessageStoreFactory share the same settings - JdbcDriver, it assumes that we intend to use jdbc logFactory even though the intention was to use jdbc for MessageStore hence it skipped the SLF4J setting (refer to isSL4JLog() method).

From what I observed, it does not throw an exception when more than one logFactoies are configured, it just skipped the logFactory setting once there is already one logFactory configured (see inferLogFactory() method).

That is why I proposed to switch those two lines in the code 

298: isJdbcLog(settings, impliedLogFactories);
299: isSL4JLog(settings, impliedLogFactories);

By switching those two lines, SL4J setting will be picked up as logFactory and jdbc setting will be ignored. However, jdbc setting will still be picked up as the MessageStoreFactory. Another solution is to have different jdbc setting for logFactory and MessageStoreFactory.
","25/Oct/11 06:08;njiang;@Eliot

I already update the code and you can configure ONE logFactory with SL4JLog or ScreenLog with ONE MessageStoreFactory with jdbcDriver by default.

If you don't specify the JdbcSetting.SETTING_LOG_EVENT_TABLE,  QuickfixjEngine will not create a JdbcLogFactory for you.

","25/Oct/11 06:27;eliotc;@Willem

Thanks for that! This fix will be in the next camel release, right?

Cheers,

Eliot","25/Oct/11 08:07;njiang;Yes, it will be a part of camel-2.8.3 and camel-2.9.0.",,,,,,,,,,,,,,,,,,
camel-bindy BindyFixedLength parser is not Thread Safe while marshalling.,CAMEL-4573,12528347,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,surya108,surya108,22/Oct/11 02:32,22/Oct/11 08:41,13/Mar/19 22:19,22/Oct/11 08:41,2.8.1,,,,,,,,,2.8.3,2.9.0,,,camel-bindy,,,,,,0,patch,,,,,,,,"Camel Fixed Length Parser. Not Threadsafe, as instance variable private Map<Integer, List<String>> results; is being used while marshalling/unbinding. Inconsistencies in multithreaded environment causing data from different threads being used.

Very similar to BUG 4311 ( for KeyValuePair Parser)","linux, windows",,,,,,,,,,,,,,,,,,,,22/Oct/11 02:36;surya108;camel_bindy_patch_4573;https://issues.apache.org/jira/secure/attachment/12500279/camel_bindy_patch_4573,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-10-22 08:41:50.547,,,no_permission,,Advanced,,,,,,,,,,,113483,,,Sat Oct 22 08:41:50 UTC 2011,,,Patch Available,,,,0|i021rz:,9889,,,,,,,,,"22/Oct/11 02:36;surya108;Fixed the Code, Changed instance variable to local one so that it is thread safe.",22/Oct/11 08:41;davsclaus;Thanks for the patch. I fixed the same issue in the CSV as well. So all three is now fixed.,,,,,,,,,,,,,,,,,,,,,,
camel-file component does not close a file when it's used with camel-xslt,CAMEL-4560,12527722,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,szhemzhitsky,szhemzhitsky,19/Oct/11 10:04,21/Oct/11 18:31,13/Mar/19 22:19,21/Oct/11 18:31,2.8.1,,,,,,,,,2.8.3,2.9.0,,,camel-core,camel-xslt,,,,,0,camel-file,,,,,,,,"Here are the steps to reproduce:

# Create the directory target/in.
# Put the file ""file.xml"" into the directory target/in. Note: the end tag in this file is not closed properly.
# Run the test.
# The test should fail.
# The file ""file.xml"" remains in the target/in but it should not.

{code:java|title=FileLockedTest.java}
package org.apache.camel;

import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.mock.MockEndpoint;
import org.apache.camel.test.junit4.CamelTestSupport;
import org.junit.Test;

public class FileLockedTest extends CamelTestSupport {

    @Test
    public void testFileLocked() throws Exception {
        MockEndpoint result = getMockEndpoint(""mock:result"");
        result.setAssertPeriod(10000);
        result.expectedMessageCount(1);
        result.assertIsSatisfied();
    }

    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                from(""file:target/in?delay=100&moveFailed=.error"")
                    .onException(Throwable.class)
                        .to(""mock:result"")
                    .end()
                    .to(""xslt:FileLockedTest.xsl"");
            }
        };
    }

}
{code}

{code:xml|title=FileLockedTest.xsl}
<?xml version=""1.0"" encoding=""UTF-8""?>
<xsl:stylesheet
    xmlns:xsl=""http://www.w3.org/1999/XSL/Transform""
    xmlns=""http://schemas.computershare.ru/codex/2011/08/""
    version=""1.0"">

    <xsl:output method=""xml"" encoding=""UTF-8"" omit-xml-declaration=""yes"" />
    <xsl:preserve-space elements=""*""/>

    <xsl:template match=""/"">
        <xsl:apply-templates />
    </xsl:template>

    <xsl:template match=""@* | node()"">
        <xsl:copy>
            <xsl:apply-templates select=""@* | node()"" />
        </xsl:copy>
    </xsl:template>

</xsl:stylesheet>
{code}
{code:xml|title=file.xml; Note: the end tag is not closed properly}
<root></root
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-10-19 12:32:17.628,,,no_permission,,Unknown,,,,,,,,,,,89200,,,Fri Oct 21 18:31:46 UTC 2011,,,,,,,0|i021p3:,9876,,,,,,,,,19/Oct/11 12:32;davsclaus;What JDK and OS are you using?,"19/Oct/11 13:11;szhemzhitsky;Win7 x64 Enterprise

java version ""1.6.0_21""
Java(TM) SE Runtime Environment (build 1.6.0_21-b07)
Java HotSpot(TM) Client VM (build 17.0-b17, mixed mode, sharing)",21/Oct/11 14:53;davsclaus;Thanks for reporting. I have coded a fix on my windows box. Running tests in camel-core before committing.,21/Oct/11 18:31;davsclaus;Thanks for reporting with such a a detail error report.,,,,,,,,,,,,,,,,,,,,
Recipient List cannot vary destination by changing property in an expression,CAMEL-4503,12525193,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,janstey,janstey,29/Sep/11 14:50,21/Oct/11 09:42,13/Mar/19 22:19,21/Oct/11 09:42,2.8.1,,,,,,,,,2.8.3,2.9.0,,,,,,,,,0,,,,,,,,,"This is probably due to producers being cached based on unresolved endpoint URI, rather than the resolved endpoint URI. Haven't tested this theory out though.

See message on user list http://markmail.org/message/sdysp6sspq5lomf4",,,,,,,,,,,,,,,,,,,,CAMEL-4561,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-10-05 07:29:13.179,,,no_permission,,Unknown,,,,,,,,,,,40003,,,Fri Oct 21 09:42:24 UTC 2011,,,,,,,0|i021c7:,9818,,,,,,,,,"29/Sep/11 14:59;janstey;IRC chat on this here http://irclogs.dankulp.com/logs/irclogger_log/karaf?date=2011-09-29,Thu&sel=335#l331","05/Oct/11 07:29;achim_nierbeck;Unfortunately I just realized that the mentioned workaround doesn't work :(

I'm investigating why it isn't I'm down to the following right now: 

answer = endpoints.get(getEndpointKey(uri));

in DefaultCamelContext does give me the wrong Endpoint, at least it's bound to the wrong URI. 

it's called from 

endpoint = resolveEndpoint(exchange, recipient);

in RecipientListProcessor.createProcessorExchangePairs(...)

The following scenario doesn't work right now for the workaround, this might be a different bug though: 
- Recipient A is resolved the way it should work and can be called
- if Recipient B is questioned it also works and can be used. 
- if Recipient A is questioned from the cache again, Recipient B is provided and therefore the requests end up 
  on the wrong host. 

I also added a comment to the mailing-list about this. ","19/Oct/11 15:52;davsclaus;Okay the bug seems to be in camel-cxf, in CxfComponent.createEndpoint. As it return the same endpoint instance even though the ?address is different.","19/Oct/11 16:09;davsclaus;CAMEL-4139 causes this problem, it will lookup existing bean by its id, and reuse that as CxfEndpoint.
Even if CxfComponent is creating a new CxfEndpoint.

It seems the problem is that if you omit the address in the <cxf:cxfEndpoint> in the XML file.
And then you want to use that <cxf:cxfEndpoint> bean but specific the address at runtime. Then CxfComponent
will still hand out a shared CxfEndpoint. 

It guess the tricky part is that with cxf:bean:xxx you refer to a bean, and then you *also* provide additional configurations which should override.
This seems a hard path to support. Maybe cxf:bean:xxx should be made to not accept any parameters at all, if that makes sense.

Alternative the cxf:bean:xxx should be sort of a template, and then being able to create ""clones"" of itself.","20/Oct/11 05:04;njiang;In most case the configure of cxfEndpoint bean will not be changed, it should be OK if you just reuse the bean endpoint.
If there are some parameter which can be used to override the configuration in the endpoint uri, we could clone a new endpoint to use.","20/Oct/11 07:47;davsclaus;Willem I have committed an unit tests that reproduces the issue
tests/camel-itest/src/test/java/org/apache/camel/itest/greeter/RecipientListCxf2Test.java

With your recent fix on trunk (eg the clone) the problem with picking up the wrong bean is resolved as far.
But we get a NPE exception later.

{code}
Caused by: java.lang.NullPointerException
	at org.apache.camel.component.cxf.CxfProducer.prepareRequest(CxfProducer.java:168)
	at org.apache.camel.component.cxf.CxfProducer.process(CxfProducer.java:89)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:321)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:212)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:102)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:575)
{code}

The CxfBinding is null on the endpoint. So I guess a little more fix is needed. Do you mind digging into this?","20/Oct/11 08:13;njiang;@Claus
That's my bad, I will update the copy method of CxfEndpoint by setting the list reference with a deep copy one.","20/Oct/11 09:02;njiang;The NPE is caused by the clone method of CxfEndpoint, as you know CxfEndpoint extends the ServiceSupport object which has lots of AutomBoolean objects.
If the CxfEndpoint instance is started, the cloned CxfEndpoint will not start again.
It looks like calling the clone method is not a idea way to resolve such issue. I'm still looking for a good solution. ",21/Oct/11 09:42;njiang;This is fixed by CAMEL-4561,,,,,,,,,,,,,,,
CxfComponent should create a new CxfEndpoint instance if the instance is lookup from configuration registry,CAMEL-4561,12527878,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,20/Oct/11 06:11,20/Oct/11 15:02,13/Mar/19 22:19,20/Oct/11 15:02,,,,,,,,,,2.8.3,2.9.0,,,,,,,,,0,,,,,,,,,"CAMEL-4503 shows the bug, when we have uri parameters which can override the configuration of cxfEndpoint, the instance of cxfEndpoint from the configuration file could be changed with the uri parameters if the CxfComponnet doesn't return a new instance of the cxfEndpoint.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-10-20 07:49:52.172,,,no_permission,,Unknown,,,,,,,,,,,92192,,,Thu Oct 20 15:02:08 UTC 2011,,,,,,,0|i021pb:,9877,,,,,,,,,"20/Oct/11 07:49;davsclaus;When you do a .clone() then it copies the List as a reference. So you could potentially make changes in one instance, that reflects the parent instance.

So when you clone then you need to do a deep-clone of the List etc. So its fully independent. See for example
https://svn.apache.org/repos/asf/camel/trunk/components/camel-mail/src/main/java/org/apache/camel/component/mail/MailConfiguration.java
","20/Oct/11 10:39;dkulp;
Haven't looked at the config reg stuff, but could the namespace parser set the bean as prototype?  Then spring would create a new one each lookup.  Does that work with Camel?","20/Oct/11 12:29;njiang;Hi Dan

Setting the bean scope to be prototype works great, now the tests are passed.
BTW, we can do the same setting in the blueprint parser.
","20/Oct/11 13:18;dkulp;Willem,   cool.  Glad that works.   It really does make more sense.   the cxfEndpoint stuff in Camel is really more of a ""configuration of an endpoint"", not really an endpoint itself (like it is in CXF).  Thus, setting to prototype does make more sense.   I like the fix.  :-)

Dan",20/Oct/11 15:02;njiang;Applied the patch into trunk and 2.8.x branch.,,,,,,,,,,,,,,,,,,,
camel-cxf endpoint should be able to determine soap version from incoming message,CAMEL-4553,12527443,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,ffang,ffang,ffang,17/Oct/11 12:43,20/Oct/11 10:02,13/Mar/19 22:19,20/Oct/11 10:02,,,,,,,,,,2.8.3,2.9.0,,,camel-cxf,,,,,,0,,,,,,,,,"more details from
http://camel.465427.n5.nabble.com/Camel-CXF-component-SOAP-1-1-amp-1-2-support-td4909456.html",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,88147,,,Thu Oct 20 10:02:01 UTC 2011,,,,,,,0|i021nj:,9869,,,,,,,,,"20/Oct/11 10:02;ffang;commit fix
http://svn.apache.org/viewvc?rev=1185978&view=rev for trunk
http://svn.apache.org/viewvc?rev=1186705&view=rev for 2.8.x branch",,,,,,,,,,,,,,,,,,,,,,,
"[WebConsole Archetype] Unable to run with ""mvn jetty:run""",CAMEL-4545,12527191,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,cexbrayat,cexbrayat,14/Oct/11 13:08,19/Oct/11 12:55,13/Mar/19 22:19,19/Oct/11 12:55,2.9.0,,,,,,,,,2.8.3,2.9.0,,,tooling,,,,,,0,maven,patch,,,,,,,"If you install the camel-archetype-webconsole from the trunk (2.9-SNAPSHOT actually), and create a new project with it (""mvn archetype:generate -DarchetypeGroupId=org.apache.camel.archetypes -DarchetypeArtifactId=camel-archetype-webconsole -DarchetypeVersion=2.9-SNAPSHOT""), you can't run ""mvn jetty:run"".
There are conflicts with slf4j-api binding as you can see in the following logs

{code:xml} 
...
[main] ContextLoader ERROR Context initialization failed
java.lang.NoSuchMethodError: org.slf4j.helpers.MessageFormatter.format(Ljava/lang/String;Ljava/lang/Object;)Lorg/slf4j/helpers/FormattingTuple;
        at org.slf4j.impl.Log4jLoggerAdapter.info(Log4jLoggerAdapter.java:323)[slf4j-log4j12-1.6.1.jar:1.6.1]
...
{code} 

Running ""mvn dependencies:tree"" show that two versions of slf4j are loaded.

You can find with this issue a patch that exclude slf4j for activemq-camel, which solve the problem. 

But you then ran in the following problem

{code:xml}
... 
java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:/mypath/.m2/repository/org/apache/camel/camel-web/2.9-SNAPSHOT/camel-web-2.9-SNAPSHOT.war!/WEB-INF/classes/
...
{code} 

Which can be solved by updating jetty-version to a more recent one (7.5.3.v20111011) in the parent pom ( issue [CAMEL-4544|https://issues.apache.org/jira/browse/CAMEL-4544] with patch)
",,,,,,,,,,,,,,,,,,,,,19/Oct/11 07:12;cexbrayat;webconsole-archetype-issue.patch;https://issues.apache.org/jira/secure/attachment/12499649/webconsole-archetype-issue.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-10-14 13:41:30.808,,,no_permission,,Novice,,,,,,,,,,,85576,,,Wed Oct 19 12:55:50 UTC 2011,,,Patch Available,,,,0|i021lr:,9861,Regression,,,,,,,,"14/Oct/11 13:10;cexbrayat;To completely resolve this issue, 4544 needs to be fixed",14/Oct/11 13:41;davidkarlsen@gmail.com;Could it be an idea to control the slf4j version for all camel modules via the dependencyManagement section in the topmost pom?,"19/Oct/11 09:38;njiang;I just did some test by adding the dependency of sl4j-api in the archetype pom, the webconsole can be started without any trouble.
so I created a new JIRA CAMEL-4559 to updated all other camel archetype.",19/Oct/11 12:55;njiang;This issue is fixed by CAMEL-4559.,,,,,,,,,,,,,,,,,,,,
Need to specify the sl4j-api version in the camel maven archetypes,CAMEL-4559,12527718,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,19/Oct/11 09:36,19/Oct/11 12:54,13/Mar/19 22:19,19/Oct/11 12:54,2.8.0,2.8.1,,,,,,,,2.8.3,2.9.0,,,tooling,,,,,,0,,,,,,,,,"There are some third part dependencies will introduce other version of sl4j-api as CAMEL-4545 shows, we need to specify the sl4j-api in the pom.xml resource.",,,,,,,,,,,,,,CAMEL-4545,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,89195,,,Wed Oct 19 12:54:44 UTC 2011,,,,,,,0|i021ov:,9875,,,,,,,,,19/Oct/11 12:54;njiang;applied patch into trunk and 2.8.x branch.,,,,,,,,,,,,,,,,,,,,,,,
camel-archerype-blueprint creates the blueprint file with a wrong name space location,CAMEL-4557,12527546,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,cmoulliard,cmoulliard,cmoulliard,18/Oct/11 06:26,18/Oct/11 07:40,13/Mar/19 22:19,18/Oct/11 07:40,,,,,,,,,,2.8.2,2.9.0,,,tooling,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-10-18 07:40:56.01,,,no_permission,,Unknown,,,,,,,,,,,88757,,,Tue Oct 18 07:40:56 UTC 2011,,,,,,,0|i021of:,9873,,,,,,,,,18/Oct/11 07:40;davsclaus;Backported to 2.8.2 as well.,,,,,,,,,,,,,,,,,,,,,,,
Unable to convert jms textmessage to bytemessage,CAMEL-4540,12526884,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,preben,preben,12/Oct/11 18:00,15/Oct/11 10:57,13/Mar/19 22:19,15/Oct/11 10:57,2.8.1,,,,,,,,,2.8.2,2.9.0,,,camel-jms,,,,,,0,,,,,,,,,"When receiving a jms textmessage and just forward it to a another queue as a jms bytemessage the original textmessage is sendt without being converted to a jms bytemessage. 

JmsBinding.makeJmsMessage seems to use the exchange headers to determine of a new jms message should be created or the original send.
Exchange headers seems to be populated if you do routing or set a dummy header.

See http://camel.465427.n5.nabble.com/Convert-jms-message-from-textmessage-to-bytemessage-tc4895362.html

/preben","Linux, Windowns",,,,,,,,,,,,,,,,,,,,14/Oct/11 15:38;preben;jmsbug.zip;https://issues.apache.org/jira/secure/attachment/12499051/jmsbug.zip,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-10-15 09:31:31.578,,,no_permission,,Unknown,,,,,,,,,,,74252,,,Sat Oct 15 09:43:21 UTC 2011,,,,,,,0|i021kn:,9856,,,,,,,,,14/Oct/11 15:38;preben;testcase showing the problem,15/Oct/11 09:31;davsclaus;What is your use-case as its a really odd to pickup a TextMessage and route it directly as a BytesMessage.,"15/Oct/11 09:43;preben;Year I know this case is unusual.

We have a hub and spokes design integrating different systems.
One component is responsible for taking events/messages from system A -> put it on the hub (jms queue/topic), and one outbound component is responsible for picking up from the hub queue -> sending to system B,C ...

In this case the outbound component receives a textmessage on the hub and just have to send a bytemessage to the receiving system B's bytemessage queue without doing any routing. ",,,,,,,,,,,,,,,,,,,,,
HttpProduder should not ignore the query part of HTTP_URI header,CAMEL-4526,12526324,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,08/Oct/11 13:43,10/Oct/11 13:44,13/Mar/19 22:19,10/Oct/11 13:44,2.5.0,,,,,,,,,2.8.2,2.9.0,,,camel-http,,,,,,0,,,,,,,,,"Here is the mail thread discusses about it.
http://camel.465427.n5.nabble.com/Query-part-of-HTTP-URI-header-ignored-td4880040.html",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,50591,,,Mon Oct 10 13:44:43 UTC 2011,,,,,,,0|i021hj:,9842,,,,,,,,,10/Oct/11 13:44;njiang;Applied patch into trunk and camel-2.8.x branch.,,,,,,,,,,,,,,,,,,,,,,,
Header not set after dead letter queue handles unmarshal error,CAMEL-4509,12525539,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,roytruelove@gmail.com,roytruelove@gmail.com,03/Oct/11 15:37,05/Oct/11 09:46,13/Mar/19 22:19,05/Oct/11 09:46,2.8.1,,,,,,,,,2.8.2,2.9.0,,,camel-core,,,,,,0,,,,,,,,,"We have a route which unmarshals a soap msg into an object.  On that route is a dead letter queue error handler.  That DLQ sets headers on the message used later for error reporting.

If the error is thrown by the marshaller, the *first header* that we try to set is wiped out.  The 2nd header is set with no problem.  If an error is thrown by something other than the marshaller, the correct headers are set.

See attached project with failed test case (canSetHeadersOnBadXmlDeadLetter)","Java version: 1.6.0_11, vendor: Sun Microsystems Inc.
OS name: ""windows xp"", version: ""5.1"", arch: ""x86"", family: ""windows""
",,,,,,,,,,,,,,,,,,,,03/Oct/11 15:38;roytruelove@gmail.com;marshalBug.zip;https://issues.apache.org/jira/secure/attachment/12497477/marshalBug.zip,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-10-05 09:46:50.861,,,no_permission,,Unknown,,,,,,,,,,,43812,,,Wed Oct 05 09:46:50 UTC 2011,,,,,,,0|i021dj:,9824,,,,,,,,,03/Oct/11 15:38;roytruelove@gmail.com;Added full maven project with failing unit test,03/Oct/11 16:36;roytruelove@gmail.com;WORKAROUND:  have the first step in the DLQ route set a header that's not intended for use.  This will 'reset' the exchange and the next header will be set.,"05/Oct/11 09:46;davsclaus;The work around is either to set the header 2 times, or have a noop operation at first, such as a log, or an empty processor.",,,,,,,,,,,,,,,,,,,,,
Exceptions are not propagated to the parent route when endpoint cannot be resolved in the RoutingSlip EIP,CAMEL-4486,12524543,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,szhemzhitsky,szhemzhitsky,25/Sep/11 00:12,25/Sep/11 17:39,13/Mar/19 22:19,25/Sep/11 17:39,2.8.1,,,,,,,,,2.8.2,2.9.0,,,camel-core,,,,,,0,,,,,,,,,"Here is the unit test to reproduce the issue

{code}
package org.test;

import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.mock.MockEndpoint;
import org.apache.camel.test.junit4.CamelTestSupport;
import org.junit.Test;

public class RecipientListTest extends CamelTestSupport {

    public static class Router {
        public String findEndpoint() {
            return ""unresolved://endpoint"";
        }
    }

    @Test
    public void recipientList() throws Exception {
        MockEndpoint endpoint = getMockEndpoint(""mock://error"");
        endpoint.expectedMessageCount(1);

        sendBody(""direct://parent"", ""Hello World!"");

        assertMockEndpointsSatisfied();
    }

    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                from(""direct://parent"")
                    .onException(Throwable.class)
                        .to(""mock://error"")
                    .end()
                    .to(""direct://child"");

                from(""direct://child"")
                    .errorHandler(noErrorHandler())
                    .routingSlip(bean(Router.class));
            }
        };
    }

}
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-09-25 17:39:20.932,,,no_permission,,Unknown,,,,,,,,,,,3455,,,Sun Sep 25 17:39:20 UTC 2011,,,,,,,0|i02187:,9800,,,,,,,,,25/Sep/11 17:39;davsclaus;Thanks for reporting and having a re-produceable unit test,,,,,,,,,,,,,,,,,,,,,,,
Unable to use XA JMS trabsaction on WebLogic,CAMEL-4240,12514409,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,ciand7,ciand7,18/Jul/11 08:34,23/Sep/11 13:49,13/Mar/19 22:19,23/Sep/11 13:49,,,,,,,,,,2.8.2,2.9.0,,,camel-jms,,,,,,0,,,,,,,,,"There is problem with camel-jms component deployed on WebLogic 10.3.X and XA connection factory. 

As spring developers suggests, if we use XA transaction on WebLogic we must set SessionTransacted to false and specify transactionManager. See http://ourcraft.wordpress.com/2008/10/22/the-mysteriously-necessary-sessiontransactedtrue/ comment #9 by Juergen Hoeller.

But camel-jms setup transactionManager for MessageListener only when ""transacted"" property is true. So, it is not possible to use XA transactions with WebLogic JMS.
",,,,,,,,,,,,,,,,,,,,,22/Sep/11 07:03;ciand7;camel-jms-r1173278-CAMEL-4240-light.diff;https://issues.apache.org/jira/secure/attachment/12496072/camel-jms-r1173278-CAMEL-4240-light.diff,22/Sep/11 07:03;ciand7;camel-jms-r1173278-CAMEL-4240.diff;https://issues.apache.org/jira/secure/attachment/12496071/camel-jms-r1173278-CAMEL-4240.diff,,,,,2.0,,,,,,,,,,,,,,,,,,,2011-07-26 14:59:12.656,,,no_permission,,,,,,,,,,,,,13762,,,Fri Sep 23 13:49:48 UTC 2011,,,,,,,0|i01zpj:,9554,,,,,,,,,26/Jul/11 14:59;davsclaus;Andrey do you care to work on a patch and test it to see if works on WebLogic?,"27/Jul/11 08:19;ciand7;Hi Claus,

Yes, of course. I can try to create patch and check it on WebLogic 10.3.3. I can do it next weekend.
",20/Sep/11 15:06;davsclaus;Andrey any update on this?,"22/Sep/11 07:03;ciand7;Hi Claus,
I attach two versions of patch for this issue. 

First - camel-jms-r1173278-CAMEL-4240.diff - contains significant changes in transaction settings behavior.

Main point is to have identical meaning of 'transactionManager' and 'sessionTransacted' properties between JMS component and Spring MessageListenerContainer.

1. If 'transacted'==false && tm==null && lazyCreateTransactionManager==false, then do nothing with transaction in MessageListenerContainer.
2. If 'transacted'==false && tm==null && lazyCreateTransactionManager==true, then create and setup own tm (imho it is not good idea).
3. If 'transacted'==false && tm!=null, then setup only tm in MessageListenerContainer.
4. If 'transacted'==true && tm==null && lazyCreateTransactionManager==false, then setup only sessionTransacted in MessageListenerContainer.
5. If 'transacted'==true && tm==null && lazyCreateTransactionManager==true, then set sessionTransacted, create and setup own tm.
6. If 'transacted'==true && tm!=null, then set sessionTransacted and tm in MessageListenerContainer.

Case 3 corresponds to typical J2EE configuration with XA tm. 

But I would like to do more tests with WebLogic and ActiveMQ.

===
Second patch version -  ""light"" - camel-jms-r1173278-CAMEL-4240-light.diff.
It only allow setup tm without 'transacted' property. It is almost identical to current implementation and safer.
",23/Sep/11 13:49;davsclaus;Thanks. I applied the light patch.,,,,,,,,,,,,,,,,,,,
Camel splitter/aggregator 2x slower in 2.8.1 vs 2.7.3,CAMEL-4476,12524221,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,bryanck,bryanck,22/Sep/11 00:12,22/Sep/11 13:42,13/Mar/19 22:19,22/Sep/11 13:42,2.8.1,,,,,,,,,2.8.2,2.9.0,,,camel-core,,,,,,0,,,,,,,,,"I noticed a sharp decline in the performance of my application when I upgraded from Camel 2.7.3 to 2.8.1. I discovered that the splitter/aggregator had become the bottleneck in my app. I have created a sample app that demonstrates the issue. The aggregator uses a lock, and I suspect lock contention may be at the root of this, but didn't notice any changes around that in the code diff between the versions.

I uploaded the sample app to http://www.vancameron.net/CamelPerf.zip. It uses gradle. Unzip to a directory then run ""gradle"" from the command line. To change the version from 2.8.1 to 2.7.3, edit the build.gradle file and run again.

The app loads 10 files with 100k lines each. It prints the current time in msec per batch.
","Oracle JDK 1.6.0_26 64-bit, CentOS 6 64-bit",,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-09-22 12:47:54.623,,,no_permission,,Unknown,,,,,,,,,,,13767,,,Thu Sep 22 13:42:55 UTC 2011,,,,,,,0|i0215z:,9790,Regression,,,,,,,,22/Sep/11 06:42;bryanck;This looks like it was caused by using <simple>xxx</simple> expressions for the completion timeout and completion size. It seems that the expression is being evaluated for each batch in 2.8 but that was not the behavior in 2.7. That caused the performance degradation. Changing to <constant> expressions fixed the performance problem I was having.,"22/Sep/11 07:55;bryanck;Though I uncovered a problem. When using a constant expression, there is no way to inject a property value. So if I want the batch size configurable, it seems the only way to do this is to use a ""simple"" expression. But using the ""simple"" expression causes the aforementioned performance issue.","22/Sep/11 12:47;davsclaus;With constant: Time taken 68040 ms
With simple: Time taken 100913 ms","22/Sep/11 12:56;davsclaus;Okay got it optimized so its as fast again:
With simple: Time taken 68876 ms","22/Sep/11 13:42;davsclaus;Thanks for reporting. 

I added a test AggregateSimpleExpressionIssueTest which is similar to yours. It can be run manually. And the test now runs as fast for constant/simple language.",,,,,,,,,,,,,,,,,,,
Unable to use cxf:binding configuration for the endpoint,CAMEL-4473,12523857,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,szhemzhitsky,szhemzhitsky,21/Sep/11 12:54,22/Sep/11 07:05,13/Mar/19 22:19,22/Sep/11 07:05,2.8.1,,,,,,,,,2.8.2,2.9.0,,,camel-cxf,,,,,,0,,,,,,,,,"Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'service': Error setting property val
ues; nested exception is org.springframework.beans.NotWritablePropertyException: Invalid property 'bindingConfig' of bean class [org.ap
ache.camel.component.cxf.CxfSpringEndpoint]: Bean property 'bindingConfig' is not writable or has an invalid setter method. Does the pa
rameter type of the setter match the return type of the getter?
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBean
Factory.java:1361)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory
.java:1086)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory
.java:517)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.j
ava:456)
        at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:291)
        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:288)
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:190)
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.jav
a:580)
        at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.ja
va:895)
        at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:425)
        at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:84)
        at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:1)
        at org.springframework.test.context.TestContext.loadApplicationContext(TestContext.java:280)
        at org.springframework.test.context.TestContext.getApplicationContext(TestContext.java:304)
        ... 30 more
Caused by: org.springframework.beans.NotWritablePropertyException: Invalid property 'bindingConfig' of bean class [org.apache.camel.com
ponent.cxf.CxfSpringEndpoint]: Bean property 'bindingConfig' is not writable or has an invalid setter method. Does the parameter type o
f the setter match the return type of the getter?
        at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:1024)
        at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:900)
        at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:76)
        at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:58)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBean
Factory.java:1358)
        ... 44 more",,,,,,,,,,,,,,,,,,,,,21/Sep/11 17:40;szhemzhitsky;camel-cxf-binding-failure-test.zip;https://issues.apache.org/jira/secure/attachment/12495409/camel-cxf-binding-failure-test.zip,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-09-22 07:05:47.931,,,no_permission,,Unknown,,,,,,,,,,,41573,,,Thu Sep 22 07:05:47 UTC 2011,,,,,,,0|i0215b:,9787,,,,,,,,,21/Sep/11 12:55;szhemzhitsky;Unit test has been attached,21/Sep/11 17:40;szhemzhitsky;Valid camel-cxf-binding-failure-test.zip zip archive with unit test has been attached. The old one has been deleted.,22/Sep/11 07:05;njiang;Just commit a quick fix in trunk and camel 2.8.x branch.,,,,,,,,,,,,,,,,,,,,,
HazelcastComponentHelper. copyHeaders() creates an Out message,CAMEL-4472,12523851,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,tmrkus,tmrkus,21/Sep/11 12:05,21/Sep/11 15:52,13/Mar/19 22:19,21/Sep/11 15:52,,,,,,,,,,2.8.2,2.9.0,,,camel-hazelcast,,,,,,0,,,,,,,,,"Due to lazy creation of Out message in DefaultExchange.getOut() implementation, HazelcastComponentHelper.copyHeaders() method inadvertently creates an Out message if one has not been set yet, which then creates problems in CamelInvocationHandler.getBody() which then returns null as a result. 

There should be a check in copyHeaders() to see if Out exists, e.g.: 

{code}
// set out headers 
if (ex.hasOut()) { 
    ex.getOut().setHeaders(headers); 
} 
{code}",,,,,,,,,,,,,,,,,,,,,21/Sep/11 12:07;tmrkus;CAMEL-4472.patch;https://issues.apache.org/jira/secure/attachment/12495348/CAMEL-4472.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-09-21 15:47:23.174,,,no_permission,,Unknown,,,,,,,,,,,59907,,,Wed Sep 21 15:47:23 UTC 2011,,,Patch Available,,,,0|i02153:,9786,,,,,,,,,21/Sep/11 15:47;davsclaus;The copyHeaders is only used by the producers as a mean to preserve headers after sending a message to hazelcast. So we should be okay with this patch.,,,,,,,,,,,,,,,,,,,,,,,
"Scheduled poll consumer from pollEnrich should not be polling when route starts, but on demand",CAMEL-4318,12518293,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,09/Aug/11 08:13,19/Sep/11 17:51,13/Mar/19 22:19,09/Aug/11 10:01,2.8.0,,,,,,,,,2.8.2,2.9.0,,,camel-core,,,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Overriding-ScheduledPollConsumer-tp4676752p4676752.html

The problem is that the file consumer is started when the route starts
{code}
2011-08-09 10:11:05,648 [main           ] INFO  DefaultCamelContext            - Apache Camel  (CamelContext: camel-1) started in 0.284 seconds
2011-08-09 10:11:06,628 [rget/pollenrich] DEBUG FileConsumer                   - Took 0.000 seconds to poll: target/pollenrich
2011-08-09 10:11:07,130 [rget/pollenrich] DEBUG FileConsumer                   - Took 0.000 seconds to poll: target/pollenrich
2011-08-09 10:11:07,632 [rget/pollenrich] DEBUG FileConsumer                   - Took 0.000 seconds to poll: target/pollenrich
2011-08-09 10:11:08,133 [rget/pollenrich] DEBUG FileConsumer                   - Took 0.000 seconds to poll: target/pollenrich
2011-08-09 10:11:08,634 [rget/pollenrich] DEBUG FileConsumer                   - Took 0.000 seconds to poll: target/pollenrich
2011-08-09 10:11:09,135 [rget/pollenrich] DEBUG FileConsumer                   - Took 0.000 seconds to poll: target/pollenrich
2011-08-09 10:11:09,637 [rget/pollenrich] DEBUG FileConsumer                   - Took 0.000 seconds to poll: target/pollenrich
{code}

Instead it should only be polling on demand",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Moderate,,,,,,,,,,,13813,,,Fri Sep 02 09:25:17 UTC 2011,,,,,,,0|i02073:,9633,,,,,,,,,09/Aug/11 10:00;davsclaus;If using 0 as timeout on pollEnrich with a scheduled polling consumer (using EventDrivenPollingConsumer to poll) then Camel now ensures there is given time for at least one scheduled poll run. Otherwise the scheduler would not be able to poll within a 0 timeout,02/Sep/11 09:25;davsclaus;Cannot backport to 2.8.1 as it has API changes.,,,,,,,,,,,,,,,,,,,,,,
Wrong exception uri when an HTTP error code is returned,CAMEL-4325,12518450,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,cedric.delaunois,cedric.delaunois,10/Aug/11 14:20,19/Sep/11 17:45,13/Mar/19 22:19,02/Sep/11 09:21,2.6.0,2.7.0,2.8.0,,,,,,,2.8.2,2.9.0,,,camel-restlet,,,,,,0,,,,,,,,,"When a REST service returns an HTTP error code (e.g. 404), the URI property of the exception is incorrect.
The URI is the URI of the origin endpoint of the route.
It should be instead the URI of the endpoint that threw the exception.

For instance, in the following route :
{code:xml}
<route id=""restproxy"">           
    <from uri=""restlet:http://localhost:9080/oe/ws/offre/{id}""/>           
    <doTry>
        <to uri=""restlet:http://bla.dot.com:8080/oe/ws/offre/{id}""/>
        <doCatch>
            <exception>org.apache.camel.CamelException</exception>
            <log message=""URI=${exception.uri}""/>
        </doCatch>
    </doTry>
</route>
{code}

The logged URI is ""restlet:http://localhost:9080/oe/ws/offre/{id}"" but should be instead the real URI used, e.g. ""restlet:http://bla.dot.com:8080/oe/ws/offre/1"".

This bug might be fixed by the following code change in class org.apache.camel.component.restlet.RestletProducer, method populateRestletProducerException() :
   - String uri = exchange.getFromEndpoint().getEndpointUri();
   + String uri = response.getRequest().getResourceRef()

",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-08-13 11:17:24.912,,,no_permission,,Novice,,,,,,,,,,,60192,,,Fri Sep 02 09:21:21 UTC 2011,,,,,,,0|i0208n:,9640,,,,,,,,,13/Aug/11 11:17;davsclaus;Thanks for reporting Cedric do you want to try to work on a patch? with an unit test that reproduces the issue and proves the fix works as expected?,02/Sep/11 09:21;njiang;Applied patch with unit test into the trunk.,,,,,,,,,,,,,,,,,,,,,,
Synchronized code causes long delays and hangs for big applications especially with Blueprint,CAMEL-4345,12519240,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,jgenender,jgenender,18/Aug/11 05:18,19/Sep/11 17:44,13/Mar/19 22:19,19/Aug/11 00:58,2.8.0,,,,,,,,,2.8.2,2.9.0,,,camel-core,,,,,,0,,,,,,,,,"The DefaultCamelContext uses synchronized ""endpoints"" which ends up ultimately extending a LinkedHashMap through the LRUCache.  The LinkedHashMap is obviously not thread safe, so it requires synchronized guards when accessing the endpoints object.  This especially happens in the getEndpoint(s) calls in the DefaultCamelContext.  In large systems with lots of routes and on multicore systems, dynamically created routes (and many routes) can cause long delays and hang for long times since route creation and the starting of the camel route can occur in unison with synchronization.  In a blueprint container, such as Karaf, this can cause timeouts on the bundle and camel routes will appear to hang indefinately.  Thread dumps show the hangs occur on the synchronized call in getEndpoint(s).  The fix for this is to use concurrent apis as much as possible and remove the synchronized code.  I refactored the LRUCache/LRUSoftCache to use Google's ConcurrentLinkedHashMap (ASL2 License http://code.google.com/p/concurrentlinkedhashmap) and removed the synchronized code that locks the endpoints object.  This should remove the hangs since the locks are no longer required.  Since COncurrentLinkedHashmap is not OSGi ready, I have shaded the classes in core.  On my executions, all unit tests pass with this refactoring using the concurrent code.  This should speed up Camel on multicore systems that have lots of routes.",Linux and Mac multicore machines,,,,,,,,,,,,,,,,,,,,18/Aug/11 05:28;jgenender;CAMEL-4345.patch;https://issues.apache.org/jira/secure/attachment/12490756/CAMEL-4345.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-08-18 13:27:38.762,,,no_permission,,Unknown,,,,,,,,,,,13796,,,Fri Aug 19 12:26:01 UTC 2011,,,Patch Available,,,,0|i020d3:,9660,,,,,,,,,18/Aug/11 05:28;jgenender;Patch attached against TRUNK as of r1158987,"18/Aug/11 13:27;davsclaus;Nice patch.

By shading it into camel-core I like the fact that the camel-core dependency don't change.
However are there people who would not like shading this into camel-core?

And are there any Apache policy that would discourage this fact?
eg the JAR contains .class files which are not from Apache ?

If just the JDK had this class already. Even JDK7 dont have it, right?","18/Aug/11 15:55;joed;At least the google code is ASF License, would that help some?","18/Aug/11 16:00;davsclaus;Yeah the ASL license sure does :)

I think back in the days Spring framework included the aop alliance JAR in the Spring JAR directly as well.

","18/Aug/11 16:07;dkulp;
I have no problem shading it in, but does it need to be exported from the bundle in OSGi?

Since it's completely an internal field, I don't think it does.   I'd definitely prefer it didn't get exported so if some other project has a bundle with it, we don't conflict and such.","18/Aug/11 17:29;ben.manes;Please open an issue to OSGi-ify CLHM and I'll do it for the next release (no timeframe).

As Google Guava is OSGi ready and I helped port the algorithm into MapMaker, that may also be a reasonable choice if it becomes a concern.

I'll be meeting up with Doug Lea in Sept. to discuss caching for JDK8, so maybe we'll see something in the standard libs eventually.

Cheers,
Ben
(CLHM author, Googler)

P.S. Don't you love Google Alerts? ;)","18/Aug/11 17:47;hadrian;@Ben, thanks for the offer and welcome to the Camel community :).","19/Aug/11 00:44;hadrian;Patch applied in r1159457 with thanks to Jeff. Jeff, we expect more from you :).
There are a few checkstyle issues in the patch I will correct in the next hour or so and mark this issue as resolved.","19/Aug/11 00:58;hadrian;Fixed checkstyle and also removed the OSGi export of the google stuff. The intent I believe was to make it accessible to components, but we can do that via a utility factory if/when needed.

Thanks Jeff!","19/Aug/11 08:21;davsclaus;The osgi manifest contains import of the google code
{code}
Import-Package: com.googlecode.concurrentlinkedhashmap,javax.activatio
 n;resolution:=optional,javax.management,javax.management.modelmbean,j
 avax.management.remote,javax.naming,javax.naming.spi,javax.net.ssl,ja
 vax.xml.bind;resolution:=optional,javax.xml.bind.annotation;resolutio
 n:=optional,javax.xml.bind.annotation.adapters;resolution:=optional,j
 avax.xml.namespace,javax.xml.parsers,javax.xml.stream;resolution:=opt
 ional,javax.xml.transform,javax.xml.transform.dom,javax.xml.transform
 .sax,javax.xml.transform.stream,javax.xml.validation,javax.xml.xpath,
 org.apache.xalan.xsltc.trax;resolution:=optional,org.osgi.framework;v
 ersion=""[1.4,2)"",org.slf4j;version=""[1.6,2)"",org.w3c.dom,org.xml.sax
{code}

I cannot see that its being exported, so I would assume we are almost okay.

What if another bundle exports com.googlecode.concurrentlinkedhashmap,
then camel-core could potential pickup that instead from itself, or am I mistaking?","19/Aug/11 08:21;davsclaus;Did anyone create a ticket at Google CLHM to ask for osgify the distribution, as Ben said we should do?","19/Aug/11 11:34;jgenender;Claus, yes I opened an issue to OSGI-ify ConcurrentLinkedHashMap.

Good catch on the import... it should not be in there.... clearly the Felix runs before the shade ;-)  

The fix is in the camel-core pom, right under the <camel.osgi.import>, add this:

{code}
!com.googlecode.concurrentlinkedhashmap,
{code}
    
That will fix it.",19/Aug/11 12:26;davsclaus;I have applied that last change in osgi imports. And ran the osgi tests. All seems fine. Even camel-cxf which uses LRUCache from camel-core. It works also in osgi with that change above.,,,,,,,,,,,
NullPointerException when unmarshalling using serialization data format,CAMEL-4449,12523019,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,incubos,incubos,14/Sep/11 09:34,17/Sep/11 19:26,13/Mar/19 22:19,17/Sep/11 11:24,2.8.0,,,,,,,,,2.8.2,2.9.0,,,camel-core,,,,,,0,,,,,,,,,"Spring configuration:
{code:xml}
    <!-- A custom CamelContext -->
    <camel:camelContext id=""camel"">
        <!-- JSON data format marshalling -->
        <camel:dataFormats>
            <camel:serialization id=""serialization""/>
        </camel:dataFormats>

        <!-- RawOffer input route -->
        <camel:route>
            <camel:from uri=""kestrel://etl01f/feeds""/>
            <camel:unmarshal ref=""serialization""/>
            <camel:to uri=""bean:shard?method=consume""/>
        </camel:route>
    </camel:camelContext>
{code}

Exception:
{code:java}
run:
     [java] log4j:WARN No appenders could be found for logger (org.springframework.context.support.ClassPathXmlApplicationContext).
     [java] log4j:WARN Please initialize the log4j system properly.
     [java] log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
     [java] 13:28:07.587 [main] INFO  o.a.c.s.h.CamelNamespaceHandler - OSGi environment not detected.
     [java] 13:28:09.028 [main] INFO  o.a.camel.spring.SpringCamelContext - Apache Camel 2.8.0 (CamelContext: camel) is starting
     [java] 13:28:09.028 [main] INFO  o.a.camel.spring.SpringCamelContext - JMX enabled. Using ManagedManagementStrategy.
     [java] 13:28:09.415 [main] INFO  o.a.c.i.c.AnnotationTypeConverterLoader - Found 3 packages with 14 @Converter classes to load
     [java] 13:28:09.489 [main] INFO  o.a.c.i.c.DefaultTypeConverter - Loaded 153 core type converters (total 153 type converters)
     [java] 13:28:09.528 [main] INFO  o.a.c.i.c.DefaultTypeConverter - Loaded additional 0 type converters (total 153 type converters) in 0.003 seconds
     [java] 13:28:09.730 [main] INFO  o.a.c.c.kestrel.KestrelComponent - Creating endpoint for queue ""feeds"" on etl01f, parameters={}
     [java] 13:28:09.967 [main] INFO  o.a.c.c.kestrel.KestrelComponent - Creating MemcachedClient for etl01f/feeds
     [java] 2011-09-14 13:28:10.073 INFO net.spy.memcached.MemcachedConnection:  Added {QA sa=etl01f/95.108.229.218:22133, #Rops=0, #Wops=0, #iq=0, topRop=null, topWop=null, toWrite=0, interested=0} to connect queue
     [java] 2011-09-14 13:28:10.084 INFO net.spy.memcached.MemcachedConnection:  Connection state changed for sun.nio.ch.SelectionKeyImpl@711b50a1
     [java] 13:28:10.293 [main] INFO  o.a.c.c.kestrel.KestrelConsumer - Starting consumer for kestrel://etl01f/feeds
     [java] 13:28:10.302 [main] INFO  o.a.camel.spring.SpringCamelContext - Route: route1 started and consuming from: Endpoint[kestrel://etl01f/feeds]
     [java] 13:28:10.318 [main] INFO  o.a.camel.spring.SpringCamelContext - Total 1 routes, of which 1 is started.
     [java] 13:28:10.318 [main] INFO  o.a.camel.spring.SpringCamelContext - Apache Camel 2.8.0 (CamelContext: camel) started in 1.291 seconds
     [java] 13:28:12.858 [Camel (camel) thread #0 - Poller-kestrel://etl01f/feeds] ERROR o.a.c.processor.DefaultErrorHandler - Failed delivery for exchangeId: ID-incubos-osx-local-51787-1315992488896-0-1. Exhausted after delivery attempt: 1 caught: java.lang.NullPointerException
     [java] java.lang.NullPointerException: null
     [java] 	at org.apache.camel.impl.SerializationDataFormat.unmarshal(SerializationDataFormat.java:57) ~[camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.processor.UnmarshalProcessor.process(UnmarshalProcessor.java:56) ~[camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:50) ~[camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78) [camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98) [camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89) [camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:69) [camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78) [camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98) [camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89) [camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99) ~[camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78) [camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:318) [camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:209) [camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:305) [camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78) [camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.processor.Pipeline.process(Pipeline.java:116) [camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.processor.Pipeline.process(Pipeline.java:79) [camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:102) [camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78) [camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98) [camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89) [camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:69) [camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:104) [camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:85) [camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.component.kestrel.KestrelConsumer$Poller.run(KestrelConsumer.java:230) [camel-kestrel-2.8.0.jar:2.8.0]
     [java] 	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441) [na:1.6.0_26]
     [java] 	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303) [na:1.6.0_26]
     [java] 	at java.util.concurrent.FutureTask.run(FutureTask.java:138) [na:1.6.0_26]
     [java] 	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) [na:1.6.0_26]
     [java] 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) [na:1.6.0_26]
     [java] 	at java.lang.Thread.run(Thread.java:680) [na:1.6.0_26]
{code}

It seems that {{ExchangeHelper.convertToType()}} method returned {{null}} because {{camelContext.getTypeConverter()}} returned {{null}}. ","MacOS X 10.6.8
Java 1.6.0_26
Apache Camel 2.8.0
Consuming from remote Kestrel queue (XStream marshalling/unmarshalling works just fine)",,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-09-15 18:04:12.241,,,no_permission,,Novice,,,,,,,,,,,60309,,,Sat Sep 17 13:45:08 UTC 2011,,,,,,,0|i020zz:,9763,,,,,,,,,"15/Sep/11 18:04;davsclaus;We love contributions, so patches is welcome.",16/Sep/11 10:40;incubos;I would be glad to but I don't have enough time now to produce a patch myself. :(,"16/Sep/11 13:05;mrlalonde;XStream can serialize classes even if they don't implement Serializable.  Did the the class for you message body implement Serializable?  If not, then it was suppose to fail so the resolution might just be to give a more descriptive error message and perhaps a more meaningful exception?!",17/Sep/11 11:24;davsclaus;Fixed the potential NPE,"17/Sep/11 13:45;incubos;My message body class implements {{Serializable}}. It has Scala {code:java}Tuple2[String, java.util.List[String]]{code} type.


",,,,,,,,,,,,,,,,,,,
CAMEL-4407 has caused a regression in the features.xml,CAMEL-4459,12523384,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dkulp,dkulp,dkulp,16/Sep/11 20:09,17/Sep/11 04:30,13/Mar/19 22:19,16/Sep/11 20:33,2.8.1,,,,,,,,,2.8.2,2.9.0,,,osgi,,,,,,0,,,,,,,,,"
The scriptengine things that were added as part of CAMEL-4407 have made doing a features:install camel-script in a ""plain"" Karaf instance not work as those dependencies are not available in Central.   Thus, setups that worked in the past that did not need those no longer work.

Propose moving those three deps to a ""camel-script-optional"" feature that would not be pulled in by default.   If a user needs them, they would need to configure Karaf to pull from another repo.

",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-09-17 04:30:35.348,,,no_permission,,Unknown,,,,,,,,,,,60337,,,Sat Sep 17 04:30:35 UTC 2011,,,,,,,0|i02127:,9773,Regression,,,,,,,,"17/Sep/11 04:30;ffang;Hi Dan,

I think camel-script feature by default should contain those scriptengines which make this feature working out of the box.
How about we address it using the way like
<bundle>mvn:http://scriptengines.googlecode.com/svn/m2-repo/!com.google.code.scriptengines/scriptengines-groovy/${scriptengines.version}</bundle>
<bundle>mvn:http://scriptengines.googlecode.com/svn/m2-repo/!com.google.code.scriptengines/scriptengines-javascript/${scriptengines.version}</bundle>
<bundle>mvn:http://scriptengines.googlecode.com/svn/m2-repo/!com.google.code.scriptengines/scriptengines-jruby/${scriptengines.version}</bundle>

in the feature descriptor we can indicate mvn repo url which isn't the Central one, and by this way we needn't configure karaf org.ops4j.pax.url.mvn.cfg. camel-restlet feature already use this way so I think camel-script can do it as well.

Freeman",,,,,,,,,,,,,,,,,,,,,,,
CXFConsumer may extract the request message as the response message and this can lead to problems,CAMEL-4452,12523162,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,ay,ay,15/Sep/11 08:03,16/Sep/11 11:39,13/Mar/19 22:19,16/Sep/11 06:31,2.8.0,,,,,,,,,2.8.2,2.9.0,,,camel-cxf,,,,,,0,,,,,,,,,"CAMEL-4030 with Revision 1129070 in trunk changed the way how the response message is retrieved from the exchange and this is causing some issue.

In particular, the changed code may retrieve the request message as the response message when the call is oneway (when the condition camelExchange.getPattern().isOutCapable() is false).

Subsequently, this is leading to an NPE when the output operation is used to extract the payload body from this request message because there is no output operations in the oneway case at:

        for (MessagePartInfo partInfo : boi.getOutput().getMessageParts()) {

and resulting in:

java.lang.NullPointerException
	at org.apache.camel.component.cxf.DefaultCxfBinding.getResponsePayloadList(DefaultCxfBinding.java:394)
	at org.apache.camel.component.cxf.DefaultCxfBinding.populateCxfResponseFromExchange(DefaultCxfBinding.java:318)
	at org.apache.camel.component.cxf.CxfConsumer$1.setResponseBack(CxfConsumer.java:176)
	at org.apache.camel.component.cxf.CxfConsumer$1.syncInvoke(CxfConsumer.java:126)
	at org.apache.camel.component.cxf.CxfConsumer$1.invoke(CxfConsumer.java:71)
	at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:58)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
	at java.util.concurrent.FutureTask.run(FutureTask.java:138)
	at org.apache.cxf.workqueue.SynchronousExecutor.execute(SynchronousExecutor.java:37)
	at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:106)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:263)
	at org.apache.cxf.phase.PhaseInterceptorChain.resume(PhaseInterceptorChain.java:232)
	at org.apache.cxf.interceptor.OneWayProcessorInterceptor$1.run(OneWayProcessorInterceptor.java:130)
	at org.apache.cxf.workqueue.AutomaticWorkQueueImpl$2.run(AutomaticWorkQueueImpl.java:353)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:662)


I see this change was introduced with CAMEL-4030 to support some sort of wire-tap short-cut:

from(""cxf:xxx"").inonly(""jms:xxx"").to(""xxx"")

I am not sure how this inbound/outbound switching operation relates to this use case.

But in any case, this new behavior can lead to this problem and  I think the old behavior (skipping the response message part if there is no response) should be reinstated.

I have a simple test case that can reproduce this problem, but the exception is thrown in an executor thread and only written to the log and the original test caller thread doesn't see the exception. So, it's not a useful automatic test case. Maybe, there is a way. Let me know, how you think.

thanks.
regards, aki


",,,,,,,,,,,,,,,,,,,,,15/Sep/11 14:46;ay;test.tar.gz;https://issues.apache.org/jira/secure/attachment/12494627/test.tar.gz,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-09-15 13:49:21.648,,,no_permission,,Unknown,,,,,,,,,,,13766,,,Fri Sep 16 11:39:06 UTC 2011,,,,,,,0|i0210n:,9766,,,,,,,,,"15/Sep/11 13:49;njiang;Hi Aki,

I checked the code of NPE, I don't think it relates to the change of CAMEL-4030.
The camelExchange is not same with the cxfExchange, I don't think the oneway invocation can cause the NPE that you mentioned.
I guess there are some thing wrong with the boi.getOutput() checking.

Can  you submit the test case into this JIRA to let me have a look?

Willem","15/Sep/11 14:46;ay;Hi Willem,
thanks for looking into this.

Attached is a tar.gz file containing a test case (analogue to the other GreeterTest in camel-cxf) but using the wsdl and no service class.

The logging for the camel cxf component needs to be activated to see the exception stack trace (org.apache.camel.component.cxf.level=INFO
). 

The exception comes from the greeter.greetMeOneWay when it tries to extract the response payload out of the request message.


thanks.
regards, aki
","16/Sep/11 06:17;njiang;I found the NPE are thrown from other GreeterPayLoad tests, it can be fix by adding an NP checking on the boi.getOutput incase of the boi is oneway operation.

I will commit the fix shortly.
",16/Sep/11 06:31;njiang;Applied the patch into trunk and 2.8.x branch.,"16/Sep/11 11:39;ay;Hi Willem,
Checking boi.getOutput() != null, as you patched, will avoid the NPE for this oneway case. But I think this solution may lead to some unexpected result in those cases when the getOutput() isn't null but for some reason the response message is not available, no? 

I still find it strange to automatically take the request message for the response message.

Or am I missing some point?

regards, aki  ",,,,,,,,,,,,,,,,,,,
Wrong slash in FTP component for doneFile,CAMEL-4444,12522736,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,oliches,oliches,12/Sep/11 13:39,13/Sep/11 11:34,13/Mar/19 22:19,13/Sep/11 11:34,2.8.0,,,,,,,,,2.8.2,2.9.0,,,camel-ftp,,,,,,0,,,,,,,,,"I tried to use the doneFile with FTP component.
When I used it to my FTP on my windows machine everything goes fine.
When I tried to act the same with a FTP host on a Linux machine, I got an issue.

I sniff the packet to see what goes wrong and I see this :
the doneFile 
DELE public/Test/in\myFile.txt  
the file to process
DELE public/Test/in/myFile.xml


After a Quick look on the code:
org.apache.camel.component.file.GenericFileEndpoint 
line 682

 String answer = pattern;
        if (ObjectHelper.isNotEmpty(path) && ObjectHelper.isNotEmpty(pattern)) {
            // done file must always be in same directory as the real file name
            answer = path + File.separator + pattern;
        }

        if (getConfiguration().needToNormalize()) {
            // must normalize path to cater for Windows and other OS
            answer = FileUtil.normalizePath(answer);
        }

We use the ""File.Separator"" but in this case, it should get a kind of ""FTP.Separator"" or the FTP component should return true to the needToNormalize method and change the narmalizePath method to manage this case.




",,,,,,,,,,,,,,,,,,,,,13/Sep/11 10:59;oliches;CAMEL-4444.patch;https://issues.apache.org/jira/secure/attachment/12494213/CAMEL-4444.patch,13/Sep/11 10:07;oliches;CAMEL-4444.patch;https://issues.apache.org/jira/secure/attachment/12494203/CAMEL-4444.patch,,,,,2.0,,,,,,,,,,,,,,,,,,,2011-09-13 08:24:52.39,,,no_permission,,Unknown,,,,,,,,,,,13776,,,Tue Sep 13 11:34:29 UTC 2011,,,,,,,0|i020yv:,9758,,,,,,,,,13/Sep/11 08:24;davsclaus;There is a {{separator}} option you can use to explicit configure the separator style.,"13/Sep/11 09:34;oliches;Thanks, 

I think the last thing to fix, it's to replace the 

File.separator on line 685 of the org.apache.camel.component.file.GenericFileEndpoint class by getFileSeparator()

and it will be fine.",13/Sep/11 10:07;oliches;Here is a potential patch,"13/Sep/11 10:54;davsclaus;Olivier can you re-attach the patch and this time make sure to [x] in Grant license to Apache, as we cannot accept patches otherwise.",13/Sep/11 11:34;davsclaus;Thanks for the patch,,,,,,,,,,,,,,,,,,,
camel-jpa can't find entities when using blueprint in OSGi,CAMEL-4213,12513774,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,,ljb,ljb,12/Jul/11 10:18,12/Sep/11 06:09,13/Mar/19 22:19,12/Sep/11 06:09,2.7.2,,,,,,,,,2.9.0,,,,camel-jpa,osgi,,,,,0,,,,,,,,,"When using the following simple route, the entity classes can't be found:
{code}
public void configure() throws Exception {
    from(""direct:test-in"").to(""jpa:mypackage.MyEntity1"");
    from(""jpa:mypackage.MyEntity2"").to(""log:test-out"");
}
{code}
The error message is:
09:43:55,417 | WARN  | rint Extender: 3 | ObjectHelper                     | g.apache.camel.util.ObjectHelper  698 | 78 - org.apache.camel.camel-core - 2.7.2 | Cannot find class: mypackage.MyEntity1
09:43:55,467 | WARN  | rint Extender: 3 | ObjectHelper                     | g.apache.camel.util.ObjectHelper  698 | 78 - org.apache.camel.camel-core - 2.7.2 | Cannot find class: mypackage.MyEntity2

followed by many warnings about that the entityType is not known for the consumer.

The errors only occur when using blueprint to bootstrap the route. When using spring-dm everything works fine. The entity classes are located in the same bundle as the route. My guess is that it uses the wrong classloader.

JPA works fine otherwise. It is only the camel-jpa component I have problems with. camel-jpa is a very spring-centric module, using a spring TransactionManager and all, so I hope that my use case makes sense.

For completeness here is my blueprint-file:
{code}
<?xml version=""1.0"" encoding=""UTF-8""?>
<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0""
	default-activation=""eager"" xmlns:jpa=""http://aries.apache.org/xmlns/jpa/v1.1.0"">

	<camelContext xmlns=""http://camel.apache.org/schema/blueprint"">
		<package>mypackage</package>
	</camelContext>

	<bean id=""jpa"" class=""org.apache.camel.component.jpa.JpaComponent"">
		<property name=""entityManagerFactory"" ref=""entityManagerFactory"" />
		<property name=""transactionManager"" ref=""transactionManager"" />
	</bean>

	<bean id=""transactionManager"" class=""org.springframework.orm.jpa.JpaTransactionManager"">
		<property name=""entityManagerFactory"" ref=""entityManagerFactory"" />
	</bean>

	<reference id=""entityManagerFactory"" interface=""javax.persistence.EntityManagerFactory"" filter=""(osgi.unit.name=myunit)"" />

</blueprint>
{code}
The EntityManagerFactory is created by Aries Jpa, but it shouldn't be relevant for the question.",Apache Karaf 2.2.2,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-08-30 06:33:01.344,,,no_permission,,,,,,,,,,,,,60913,,,Mon Sep 12 06:09:43 UTC 2011,,,,,,,0|i01zjj:,9527,,,,,,,,,"30/Aug/11 06:33;davsclaus;Can you attach the configuration of the EntityManagerFactory if possible. In essence a complete example is desirable to create an unit test in osgi blueprint that reproduces the issue, which then helps verify the fix implemented.","30/Aug/11 07:01;iocanel;ObjectHelper is using the Thread Context Class loader in order to resolve the class. Spring DM sets the Thread Context Class Loader to the class loader of the bundle that created the context, while blueprint does not.

I think that the problem could be solved if the OsgiClassResolver would use the bundle class loader in order to resolve classes.

I could work on a patch, if you like. ",30/Aug/11 07:40;davsclaus;I think Gert fixed camel-blueprint to set the TCCL as well.,"30/Aug/11 07:41;davsclaus;A patch is of course welcome, but an osgi blueprint unit tests in camel-itest-osgi would be great.","05/Sep/11 20:20;iocanel;@Claus: Indeed the TCCL is set (at least in the trunk) and its enough to properly load the classes, when using the blueprint. I did a test project using openjpa, aries jpa & camel-blueprint and I didn't have any issues (using the trunk). 


@Jonas: Can you try again using the trunk (version 2.9-SNAPSHOT)?","06/Sep/11 09:44;ljb;It works with 2.9-SNAPSHOT! I also tried the same test on 2.7.3 which failed, so it seems that the bug has been fixed.",06/Sep/11 14:12;njiang;This issue may be fixed by CAMEL-4347.,12/Sep/11 06:09;davsclaus;Already fixed as part of another ticket.,,,,,,,,,,,,,,,,
OnException using redeliveryPolicyRef from another XML file may not pickup that policy,CAMEL-4438,12522672,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,11/Sep/11 09:12,12/Sep/11 06:06,13/Mar/19 22:19,12/Sep/11 06:06,2.8.0,,,,,,,,,2.8.2,2.9.0,,,camel-core,,,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/redeliveryPolicyProfile-and-onException-redeliveryPolicyRef-tp4738408p4738408.html
",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,13778,,,2011-09-11 09:12:14.0,,,,,,,0|i020xj:,9752,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE when sending the SMS message less than 255.,CAMEL-4422,12521532,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,07/Sep/11 03:07,07/Sep/11 04:22,13/Mar/19 22:19,07/Sep/11 04:22,2.8.0,,,,,,,,,2.8.2,2.9.0,,,camel-smpp,,,,,,0,,,,,,,,,"User complain about the NPE, when using the camel-smpp component to send the message which length is less than 255.
Here is the mail thread about it.
 http://camel.465427.n5.nabble.com/SMPP-2-8-component-null-pointers-tp4776354p4776354.html",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,13772,,,Wed Sep 07 04:22:49 UTC 2011,,,,,,,0|i020tz:,9736,,,,,,,,,07/Sep/11 04:22;njiang;Applied patch into trunk and 2.8.x branch.,,,,,,,,,,,,,,,,,,,,,,,
Connection to sftp server occasionally don't want to come back,CAMEL-4269,12515383,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,marekni,marekni,26/Jul/11 11:53,02/Sep/11 09:49,13/Mar/19 22:19,26/Jul/11 13:25,2.7.2,2.7.3,,,,,,,,2.8.1,2.9.0,,,camel-ftp,,,,,,0,,,,,,,,,"Problem appear if somebody kill logged on user on sftp server while you are connected with consumer.
Camel is not able to reconnect on next poll even if it says that it will do this.
RemoteFileConsumer is not connected but it thinks that it is still logged in.

I think ""loggedIn"" flag should be down after each disconnecting action like in attached patch.

{quote}
2011-07-24 22:35:14,848 WARN  [RemoteFilePollingConsumerPollStrategy:37] Trying to recover by disconnecting from remote server forcing a re-connect at next poll: sftp://test@host 
2011-07-24 22:35:14,849 WARN  [RemoteFilePollingConsumerPollStrategy:52] Consumer Consumer[sftp://test@host/test?delay=60000&delete=true&localWorkDirectory=%2Fvar%2Ftest%2Ftemp&password=xxxx&throwExceptionOnConnectFailed=true] could not poll endpoint: sftp://test@host/test?delay=60000&delete=true&localWorkDirectory=%2Fvar%2Ftest%2Ftemp&password=xxxx&throwExceptionOnConnectFailed=true caused by: Cannot change directory to: test 
org.apache.camel.component.file.GenericFileOperationFailedException: Cannot change directory to: test
	at org.apache.camel.component.file.remote.SftpOperations.doChangeDirectory(SftpOperations.java:408)
	at org.apache.camel.component.file.remote.SftpOperations.changeCurrentDirectory(SftpOperations.java:393)
	at org.apache.camel.component.file.remote.SftpConsumer.doPollDirectory(SftpConsumer.java:77)
	at org.apache.camel.component.file.remote.SftpConsumer.pollDirectory(SftpConsumer.java:49)
	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:83)
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:97)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:180)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:204)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:662)
Caused by: 4: 
	at com.jcraft.jsch.ChannelSftp.cd(ChannelSftp.java:285)
	at org.apache.camel.component.file.remote.SftpOperations.doChangeDirectory(SftpOperations.java:406)
	... 14 more
Caused by: java.io.IOException: Pipe closed
	at java.io.PipedInputStream.read(PipedInputStream.java:291)
	at java.io.PipedInputStream.read(PipedInputStream.java:361)
	at com.jcraft.jsch.ChannelSftp.fill(ChannelSftp.java:2333)
	at com.jcraft.jsch.ChannelSftp.header(ChannelSftp.java:2359)
	at com.jcraft.jsch.ChannelSftp._realpath(ChannelSftp.java:1819)
	at com.jcraft.jsch.ChannelSftp.cd(ChannelSftp.java:268)
	... 15 more
{quote}
","windows, linux",,,,,,,,,,,,,,,,,,,,26/Jul/11 11:55;marekni;Camel-4269-RemoteFileConsumerPatch.txt;https://issues.apache.org/jira/secure/attachment/12487816/Camel-4269-RemoteFileConsumerPatch.txt,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-07-26 13:25:39.951,,,no_permission,,,,,,,,,,,,,13832,,,Tue Jul 26 13:25:39 UTC 2011,,,Patch Available,,,,0|i01zw7:,9584,,,,,,,,,26/Jul/11 13:25;davsclaus;Thanks Marek for the patch.,,,,,,,,,,,,,,,,,,,,,,,
camel-aws won't build offline,CAMEL-4287,12515914,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,janstey,janstey,janstey,01/Aug/11 13:12,02/Sep/11 09:42,13/Mar/19 22:19,01/Aug/11 13:13,2.8.0,,,,,,,,,2.8.1,2.9.0,,,,,,,,,0,,,,,,,,,"If you build camel-aws in Maven's offline mode (-o), you may get the following error:

No versions available for org.codehaus.jackson:jackson-core-asl:jar:[1.4,) within specified range

This will occur even if you have the libs locally. This is happening because Maven cannot download the remote metadata to get a list of versions for jackson-core-asl. Specifying a hard version for this (not a range) gets around the issue. Committing a fix shortly.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,13827,,,Mon Aug 01 13:13:20 UTC 2011,,,,,,,0|i02007:,9602,,,,,,,,,"01/Aug/11 13:13;janstey;janstey@duffman:/x1/asf/camel/trunk/components/camel-aws$ svn ci -m ""CAMEL-4287 - get AWS component building offline""
Sending        camel-aws/pom.xml
Transmitting file data .
Committed revision 1152755.
",,,,,,,,,,,,,,,,,,,,,,,
@Bean method name is ignored,CAMEL-4293,12516889,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,vmathon,vmathon,02/Aug/11 09:05,02/Sep/11 09:39,13/Mar/19 22:19,03/Aug/11 19:35,2.8.0,,,,,,,,,2.8.1,2.9.0,,,camel-core,,,,,,0,,,,,,,,,"Since 2.8.0 Exchange.BEAN_METHOD_NAME is always used instead of @Bean method name (see BeanInfo.createInvocation(Object pojo, Exchange exchange)). As a consequence, the wrong method is choosen when I use a beanref invokation on a method that uses @Bean 
parameter binding.

I built a simple test case as a zip file containing an Eclipse Helios maven project (see attachment). The test fails with camel 2.8.0 and succeeds with 2.7.3 and earlier (at least until 2.6.0).

regards 
Vincent MATHON","Win7, Java 1.6_25, Eclipse Helios, m2Eclipse, maven 3.x",,,,,,,,,,,,,,,,,,,,02/Aug/11 09:07;vmathon;camel-bug-2.8.0.zip;https://issues.apache.org/jira/secure/attachment/12488869/camel-bug-2.8.0.zip,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-08-03 17:44:14.152,,,no_permission,,,,,,,,,,,,,13818,,,Wed Aug 03 19:35:12 UTC 2011,,,,,,,0|i0201j:,9608,Regression,,,,,,,,"03/Aug/11 17:44;davsclaus;The *header* always takes precedence. This is by design, and older Camel releases had this as a bug.","03/Aug/11 17:47;davsclaus;I can see your issue as you use @Bean in the method signature, and thus it uses the method name that was used to invoke itself. That of course is not expected. 

However if you do route to a bean, and provide a header with a method name, then that header is being used.",03/Aug/11 18:38;davsclaus;Thanks Vincent. I have reproduced your issue. The problem is that you do a bean invocation inside another bean invocation (eg since you use @Bean on the bean you invoke). And thus the @Bean sees the header which is should not affect it.,03/Aug/11 19:35;davsclaus;Thanks for reporting and providing a sample to demonstrate the issue.,,,,,,,,,,,,,,,,,,,,
header added using an EventNotifier is not present at AggregationStrategy for http endpoints,CAMEL-4354,12519401,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,crive,crive,19/Aug/11 11:24,02/Sep/11 09:15,13/Mar/19 22:19,19/Aug/11 17:01,2.8.0,,,,,,,,,2.8.1,2.9.0,,,camel-core,,,,,,0,,,,,,,,,"A new header added using an EventNotifier is not present when the exchange is aggregated with an AggregationStrategy.
This is happening only if the enpoint type is http, ftp doesn't have this issue.

This was working with an early version of 2.8.0-SNAPSHOT

Following the EventNotifier code used.

{code:title=ExchangeSentEventNotifier.java|borderStyle=solid}
public class ExchangeSentEventNotifier extends EventNotifierSupport {

	@Override
	protected void doStart() throws Exception {
        /*
         *  filter out unwanted events
         *  we are interested only in ExchangeSentEvent
         */
        setIgnoreCamelContextEvents(true);
        setIgnoreServiceEvents(true);
        setIgnoreRouteEvents(true);
        setIgnoreExchangeCreatedEvent(true);
        setIgnoreExchangeCompletedEvent(true);
        setIgnoreExchangeFailedEvents(true);
        setIgnoreExchangeSentEvents(false);		
	}

	@Override
	protected void doStop() throws Exception {

	}

	@Override
	public boolean isEnabled(EventObject event) {
		return event instanceof ExchangeSentEvent;
	}

	@Override
	public void notify(EventObject event) throws Exception {
    	if(event.getClass() == ExchangeSentEvent.class){
            ExchangeSentEvent eventSent = (ExchangeSentEvent)event;
            
            log.debug(""Took "" + eventSent.getTimeTaken() + "" millis to send to: "" + eventSent.getEndpoint());

            //storing time taken to the custom header            
            eventSent.getExchange().getIn().setHeader(""x-time-taken"", eventSent.getTimeTaken());
            
    	}
		
	}

}
{code} ",linux/windows,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-08-19 11:30:31.009,,,no_permission,,Unknown,,,,,,,,,,,13793,,,Mon Aug 22 07:36:28 UTC 2011,,,,,,,0|i020f3:,9669,,,,,,,,,"19/Aug/11 11:30;davsclaus;This is actually a miss usage of the EventNotifer as the idea it is a read-only event notification mechanism.
Any changes on headers is not meant to guaranteed to be preserved etc. ","19/Aug/11 11:34;davsclaus;Also make sure you set the header on the correct IN or OUT. See
http://camel.apache.org/using-getin-or-getout-methods-on-exchange.html

The exchange may very well have an OUT message already, so you should populate it correctly. Storing the detail directly on the Exchange as a property will always preserve it.","19/Aug/11 13:00;crive;fixed by making use of exchange property

{code:java}
eventSent.getExchange().setProperty(""x-time-taken"", eventSent.getTimeTaken());
{code}","19/Aug/11 15:15;davsclaus;Marco which http component did you use? http4 or the regular http, or the jetty http producer?","19/Aug/11 15:23;davsclaus;Okay the ExchangeSentEvent is being fired to early for async routing engine. For synchronous routing, the event is emitted *after* the producer has completed. For async routing is emitted just after the producer have send, but not waiting for until its done. To keep it consistent we ought to fire the event when the producer is done. Then its the same for sync and async.",19/Aug/11 17:01;davsclaus;ExchangeSentEvent is now emitted when producer is done for both sync/async routing.,22/Aug/11 07:36;crive;shall we consider a better practice using an exchange property instead of an header?,,,,,,,,,,,,,,,,,
The routeContext stack of DefaultUnitOfWork should be thread safe,CAMEL-4264,12515233,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,muellerc,njiang,njiang,25/Jul/11 10:02,30/Aug/11 00:04,13/Mar/19 22:19,26/Aug/11 01:59,2.7.3,2.8.0,,,,,,,,2.8.1,2.9.0,,,camel-core,,,,,,3,,,,,,,,,"Here is the stack trace
{code}
java.util.EmptyStackException
        at java.util.Stack.peek(Stack.java:85)
        at java.util.Stack.pop(Stack.java:67)
        at 
org.apache.camel.impl.DefaultUnitOfWork.popRouteContext(DefaultUnitOfWork.java:226)
        at 
org.apache.camel.processor.DefaultChannel$1.done(DefaultChannel.java:260)
        at 
org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:330)
        at 
org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208)
        at 
org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:256)
        at 
org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:143)
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:78)
        at 
org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:113)
        at 
org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:91)
        at 
org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:85)
        at 
org.apache.camel.processor.aggregate.AggregateProcessor$1.run(AggregateProcessor.java:397)
        at 
java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
        at 
java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
        at java.util.concurrent.FutureTask.run(FutureTask.java:138)
        at 
java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
        at 
java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
        at java.lang.Thread.run(Thread.java:619)

{code}
You can find more information in this mail thread[1]
[1]http://camel.465427.n5.nabble.com/EmptyStackException-in-DefaultUnitOfWork-popRouteContext-td4630106.html",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-07-25 11:17:54.038,,,no_permission,,,,,,,,,,,,,13834,,,Tue Aug 30 00:04:37 UTC 2011,,,,,,,0|i01zuv:,9578,,,,,,,,,"25/Jul/11 11:17;muellerc;I saw this exception also from time to time in Camel 2.3.0, only when we enable tracing on the Camel context.",25/Jul/11 12:45;njiang;Applied patch into trunk.,"25/Jul/11 14:20;mkolev;Hi Willem,
is it really necessary to synchronize on the {{routeContext}} param
in {code}public void pushRouteContext(RouteContext routeContext){code}?

There are also other synchronization issues that concern the other memeber variables of the class, (e.g. {{synchronizations}} and {{subUnitOfWorks}}). Is synchrnonization really (not)needed for those memebers?","25/Jul/11 14:42;schmidtm;Hi Willem, could you please add the number 2.5.0 to the list of affected versions?",26/Jul/11 10:11;muellerc;pushRouteContext() should also synchronize on routeContextStack instead of routeContext. Thanks Matthias for pointing this out.,"26/Jul/11 10:23;muellerc;Committed r1151054
Thanks Matthias for pointing this out.",26/Jul/11 10:31;muellerc;Added to the 2.9.0 release notes,25/Aug/11 18:24;dgtombs;This issue is biting my organization hard in a critical route where we can't drop any messages. Would it be possible to target this for 2.8.1 or some kind of bugfix release? Thanks.,"26/Aug/11 01:57;njiang;Merged the patch into camel 2.8.x branch.
","30/Aug/11 00:04;dgtombs;Excellent, thank you!",,,,,,,,,,,,,,
StreamResequencer logs unhandled Exceptions at DEBUG level,CAMEL-4383,12520141,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,dgtombs,dgtombs,25/Aug/11 18:50,30/Aug/11 00:04,13/Mar/19 22:19,27/Aug/11 08:02,2.7.1,,,,,,,,,2.8.1,2.9.0,,,camel-core,,,,,,0,,,,,,,,,"If an unhandled Exception is caught by StreamResequencer.run(), it effectively logs the Exception at DEBUG level. A thrown Exception can indicate that a delivered message was not fully processed (as is the case in my route), so this means a message is dropped with a notification in the log only at DEBUG level. This is highly undesirable in a critical route.

It should at least be logged at WARN level, and preferably should be handled using the configured ErrorHandler for the route.",Linux JDK 1.6.0_20,,,,,,,,,,,,,CAMEL-4264,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-08-27 07:24:23.469,,,no_permission,,Unknown,,,,,,,,,,,13785,,,Tue Aug 30 00:04:16 UTC 2011,,,,,,,0|i020lj:,9698,,,,,,,,,25/Aug/11 18:52;dgtombs;I'm encountering an Exception here due to CAMEL-4264.,27/Aug/11 07:24;davsclaus;See CAMEL-3783,27/Aug/11 08:02;davsclaus;Thanks for reporting. Should be logging at ERROR level now.,30/Aug/11 00:04;dgtombs;Thanks for the quick fix!,,,,,,,,,,,,,,,,,,,,
DefaultExchange.copy always creates a DefaultMessage even if the source exchange had a custom Message type,CAMEL-4385,12520255,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,chris@die-schneider.net,chris@die-schneider.net,chris@die-schneider.net,26/Aug/11 14:42,29/Aug/11 15:51,13/Mar/19 22:19,29/Aug/11 15:51,2.8.0,,,,,,,,,2.9.0,,,,camel-core,,,,,,0,,,,,,,,,"We have a exchange with a custom MyMessage type as in message.
exchange.copy() creates an exchange with an in message of type DefaultMessage. 

Correct would be if the in message of the dest exchange would be of type MyMessage. 

I will first commit a test case that shows the problem and currently will fail.
",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,63364,,,2011-08-26 14:42:16.0,,,,,,,0|i020lz:,9700,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Exeptions cannot be propagated to the parent route when using LogEIP,CAMEL-4388,12520430,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,szhemzhitsky,szhemzhitsky,27/Aug/11 10:52,27/Aug/11 16:31,13/Mar/19 22:19,27/Aug/11 16:31,2.7.1,,,,,,,,,2.8.1,2.9.0,,,camel-core,,,,,,0,,,,,,,,,"Here is unit test that demonstrates the problem.
For the unit test pass successfully it's necessary to delete LogEIP from the route.

{code}
package org.apache.camel.impl;

import org.apache.camel.Exchange;
import org.apache.camel.Processor;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.test.junit4.CamelTestSupport;
import org.junit.Test;

public class PropagateExceptionTest extends CamelTestSupport {

    @Test
    public void failure() throws Exception {
        getMockEndpoint(""mock:handleFailure"").whenAnyExchangeReceived(new Processor() {
            @Override
            public void process(Exchange exchange) throws Exception {
                throw new RuntimeException(""TEST EXCEPTION"");
            }
        });

        getMockEndpoint(""mock:exceptionFailure"").expectedMessageCount(1);
        sendBody(""direct:startFailure"", ""Hello World"");
        assertMockEndpointsSatisfied();
    }

    @Test
    public void success() throws Exception {
        getMockEndpoint(""mock:handleSuccess"").whenAnyExchangeReceived(new Processor() {
            @Override
            public void process(Exchange exchange) throws Exception {
                throw new RuntimeException(""TEST EXCEPTION"");
            }
        });

        getMockEndpoint(""mock:exceptionSuccess"").expectedMessageCount(1);
        sendBody(""direct:startSuccess"", ""Hello World"");
        assertMockEndpointsSatisfied();
    }

    @Override
    protected RouteBuilder[] createRouteBuilders() throws Exception {
        return new RouteBuilder[] {
                new RouteBuilder() {
                    public void configure() throws Exception {
                        from(""direct:startFailure"")
                            .onException(Throwable.class)
                                .to(""mock:exceptionFailure"")
                                .end()
                            .to(""direct:handleFailure"")
                            .to(""mock:resultFailure"");

                        from(""direct:handleFailure"")
                            .errorHandler(noErrorHandler())
                            .log(""FAULTY LOG"")
                            .to(""mock:handleFailure"");
                    }
                },

                new RouteBuilder() {
                    public void configure() throws Exception {
                        from(""direct:startSuccess"")
                            .onException(Throwable.class)
                                .to(""mock:exceptionSuccess"")
                                .end()
                            .to(""direct:handleSuccess"")
                            .to(""mock:resultSuccess"");

                        from(""direct:handleSuccess"")
                            .errorHandler(noErrorHandler())
                            .to(""mock:handleSuccess"");
                    }
                }
        };
    }
}
{code}",,,,,,,,,,,,,,,,,,,,,27/Aug/11 14:23;szhemzhitsky;LogProcessor.patch;https://issues.apache.org/jira/secure/attachment/12491960/LogProcessor.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-08-27 16:03:23.302,,,no_permission,,Unknown,,,,,,,,,,,13784,,,Sat Aug 27 16:03:23 UTC 2011,,,,,,,0|i020mn:,9703,,,,,,,,,27/Aug/11 14:23;szhemzhitsky;Patch has been attached,27/Aug/11 16:03;davsclaus;Thanks for reporting and the patch. Yeah the callback must be invoked in the async method. We will get this fixed.,,,,,,,,,,,,,,,,,,,,,,
FilterCreateCamelContextPerClassTest is wrong configured,CAMEL-4375,12519949,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,akuhtz,akuhtz,24/Aug/11 11:58,26/Aug/11 10:19,13/Mar/19 22:19,26/Aug/11 10:19,2.8.0,,,,,,,,,2.8.1,2.9.0,,,camel-test,,,,,,0,,,,,,,,,The FilterCreateCamelContextPerClassTest is wrong configured. The isCreateCamelContextPerClass() should return true as written in the comment but currently returns false. ,,,,,,,,,,,,,,,,,,,,,24/Aug/11 11:58;akuhtz;camel-4375.patch;https://issues.apache.org/jira/secure/attachment/12491469/camel-4375.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,13783,,,2011-08-24 11:58:10.0,,,Patch Available,,,,0|i020jr:,9690,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
It's hardly possible to use all expression of the Simple language to create file names in the file component,CAMEL-4370,12519790,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,szhemzhitsky,szhemzhitsky,23/Aug/11 06:17,24/Aug/11 08:49,13/Mar/19 22:19,24/Aug/11 08:49,2.7.1,,,,,,,,,2.8.1,2.9.0,,,camel-core,,,,,,0,camel-file,,,,,,,,"Sometimes it can be necessary to use custom headers to create a file name.

For example, I declare my file endpoint in the following manner:

{code}
<route id=""fileReader"">
    <from uri=""file://rootFolder?move=.backup&amp;moveFailed=.error/${header.CustomHeader}"" />
    <to uri=""file://out""/>
</route>
{code}

The header ""CustomHeader"" cannot be read because of the following snippets of code in the org.apache.camel.component.file.GenericFile

{code}
/**
 * Bind this GenericFile to an Exchange
 */
public void bindToExchange(Exchange exchange) {
    exchange.setProperty(FileComponent.FILE_EXCHANGE_FILE, this);
    GenericFileMessage<T> in = new GenericFileMessage<T>(this);
    exchange.setIn(in);
    populateHeaders(in);
}

/**
 * Populates the {@link GenericFileMessage} relevant headers
 *
 * @param message the message to populate with headers
 */
public void populateHeaders(GenericFileMessage<T> message) {
    if (message != null) {
        message.setHeader(Exchange.FILE_NAME_ONLY, getFileNameOnly());
        message.setHeader(Exchange.FILE_NAME, getFileName());
        message.setHeader(""CamelFileAbsolute"", isAbsolute());
        message.setHeader(""CamelFileAbsolutePath"", getAbsoluteFilePath());

        if (isAbsolute()) {
            message.setHeader(Exchange.FILE_PATH, getAbsoluteFilePath());
        } else {
            // we must normalize path according to protocol if we build our own paths
            String path = normalizePathToProtocol(getEndpointPath() + File.separator + getRelativeFilePath());
            message.setHeader(Exchange.FILE_PATH, path);
        }

        message.setHeader(""CamelFileRelativePath"", getRelativeFilePath());
        message.setHeader(Exchange.FILE_PARENT, getParent());

        if (getFileLength() >= 0) {
            message.setHeader(""CamelFileLength"", getFileLength());
        }
        if (getLastModified() > 0) {
            message.setHeader(Exchange.FILE_LAST_MODIFIED, new Date(getLastModified()));
        }
    }
}
{code}

As you can see a new ""in"" message is created and not all the headers from the original message are copied to it.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-08-24 08:49:18.328,,,no_permission,,Unknown,,,,,,,,,,,13790,,,Wed Aug 24 08:49:18 UTC 2011,,,,,,,0|i020in:,9685,,,,,,,,,24/Aug/11 08:49;davsclaus;Thanks for reporting.,,,,,,,,,,,,,,,,,,,,,,,
Exception thrown during JAXB marshalling will cause SedaConsumer to break,CAMEL-4359,12519470,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,dragisak,dragisak,19/Aug/11 20:59,20/Aug/11 10:52,13/Mar/19 22:19,20/Aug/11 10:52,2.8.0,,,,,,,,,2.8.1,2.9.0,,,camel-jaxb,,,,,,1,,,,,,,,,"Error handler tries to add message body to error log. If it tries to use JAXB type converter and marshalling throws exception, the exception is thrown all the way back to SedaConsumer. SedaConsumer will then retry to create error message in the same way until the point where exception is not handled any more and SedaConsumer loop breaks off.

One single bad message can stop Seda route.",,,,,,,,,,,,,,,,,,,,,19/Aug/11 21:02;dragisak;CAMEL-4359.patch;https://issues.apache.org/jira/secure/attachment/12491002/CAMEL-4359.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-08-20 10:52:05.011,,,no_permission,,Unknown,,,,,,,,,,,13792,,,Sat Aug 20 10:52:05 UTC 2011,,,,,,,0|i020g7:,9674,,,,,,,,,19/Aug/11 21:02;dragisak;I am adding unit test that demonstrates the problem.,20/Aug/11 10:52;davsclaus;Thanks for the unit test.,,,,,,,,,,,,,,,,,,,,,,
Camel CXF Endpoint creates incomplete WSDL,CAMEL-4294,12516924,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,herriot1,herriot1,02/Aug/11 13:19,15/Aug/11 23:10,13/Mar/19 22:19,04/Aug/11 08:26,2.8.0,,,,,,,,,2.8.1,2.9.0,,,camel-cxf,,,,,,1,,,,,,,,,"The dynamically created WSDL for a cxf:cxfEndpoint declaration is malformed when using a complex type as parameter.

Please see as well the discussion here.

http://camel.465427.n5.nabble.com/Camel-CXF-Endpoint-creating-incomplete-WSDL-td4642433.html

Use attached test project to run mvn test with version 2.8.0 and 2.7.2, this should show the error.",,,,,,,,,,,,,,CXF-3707,CAMEL-4251,,,,,,02/Aug/11 13:19;herriot1;camel-cxf-test.zip;https://issues.apache.org/jira/secure/attachment/12488888/camel-cxf-test.zip,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-08-04 08:26:14.296,,,no_permission,,,,,,,,,,,,,13822,,,Fri Aug 05 17:33:43 UTC 2011,,,,,,,0|i0201r:,9609,,,,,,,,,04/Aug/11 08:26;njiang;Applied patch into the camel trunk.,"04/Aug/11 17:18;toddjr;Hello,

  We are trying to upgrade our application to Camel 2.8.0/CXF 2.4.1 and this bug is also biting us.  Thanks for the quick turn-around on resolution first and foremost, but is there anyway to back port the fix to Camel 2.8 and CXF 2.4.1?  If not, what is the timeline for the release of Camel 2.9?

Thanks,
John","04/Aug/11 17:23;dkulp;
CXF 2.4.2 will likely be released in a couple weeks.   Since it contains a bunch of fixes for things that Camel users have been encountering, I would expect a Camel 2.8.1 to be released shortly after that to update to 2.4.2.
","04/Aug/11 18:12;toddjr;I see a branch for CXF 2.4.x fixes and the fix was applied to trunk as well as the branch for CXF.  For Camel, I only see the fix applied to the trunk.  Hopefully there will be a Camel 2.8.1 release or 2.9 release soon.

Thanks,
John","04/Aug/11 22:24;muellerc;Hello John!
We just started to work on Camel 2.9. It will take approximately 3 month to see Camel 2.9.
But starting with Camel 2.7 we provide again patch releases. If this patch can be applied to the 2.8 branch, I'm sure you will see a 2.8.1 release much earlier. But at present I don't have an idea when.
Best,
Christian","05/Aug/11 03:35;njiang;Hi John,

The patches of this issue are fixed from camel and cxf separately. You don't need these two patches at the same time.
If you are using camel 2.8.0, you just need to upgrade the CXF version to 2.4.2.

Willem",05/Aug/11 04:01;njiang;Also merged the patch into 2.8.x branch.,"05/Aug/11 17:33;toddjr;Excellent.

Thanks much,
John",,,,,,,,,,,,,,,,
Username/password ignored when connectionFactory is set in JMS component,CAMEL-4329,12518681,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,anydoby,anydoby,12/Aug/11 09:28,13/Aug/11 08:47,13/Mar/19 22:19,13/Aug/11 08:47,2.8.0,,,,,,,,,2.8.1,2.9.0,,,camel-jms,,,,,,0,,,,,,,,,"There is a conflict between 2 properties: connectionFactory and username/password. If I set both the connectionFactory wins and jms endpoint uses connection factory that is unaware of username/password specified for the endpoint. 
We need to use both - we have different systems and use different connections factories with different username/passwords.

Let's assume I have a setup with 2 connection factories jmsConnectionFactory1 and jmsConnectionFactory2 and an endpoint jms:queue:myQueue?connectionFactory=jmsConnectionFactory2&username=myuser&password=secret, here is what happens:

I see that in JmsComponent:133 you retrieve the first ConnectionFactory (jmsConnectionFactory1) found in Spring.
Then in JmsComponent:414 you create a delegating ConnectionFactory which always uses username/password (with jmsConnectionFactory1) and set it to the endpoint.
Then in JmsComponent:434 you finally set the right ConnectionFactory (jmsConnectionFactory2) to the endpoint, though the username/password are lost forever.

I have solved it for our project by implementing a clone of JmsComponent with overriden createEndpoint. Move line 434 [setProperties(endpoint.getConfiguration(), parameters);] a the line immediately after 407 [String password = getAndRemoveParameter(parameters, ""password"", String.class);]
",irrelevant,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-08-13 08:47:53.039,,,no_permission,,Unknown,,,,,,,,,,,13803,,,Sat Aug 13 08:47:53 UTC 2011,,,,,,,0|i0209j:,9644,,,,,,,,,13/Aug/11 08:47;davsclaus;Thanks for the detailed report,,,,,,,,,,,,,,,,,,,,,,,
The cxfbean-component no longer works in OSGI (failure to auto create and NullPointerException),CAMEL-4299,12517769,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,ljb,ljb,03/Aug/11 09:05,09/Aug/11 14:29,13/Mar/19 22:19,09/Aug/11 14:29,2.8.0,,,,,,,,,2.8.1,2.9.0,,,camel-cxf,osgi,,,,,0,,,,,,,,,"Camel fails to auto create the cxfbean-component. I have tried both with blueprint and Spring-DM. For Spring-DM i get the following error:
Cannot auto create component: cxfbean

My Spring XML-file:
{code}
<?xml version=""1.0"" encoding=""UTF-8""?>
<beans xmlns=""http://www.springframework.org/schema/beans""
	xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:camel=""http://camel.apache.org/schema/spring""
	xsi:schemaLocation=""http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd"">

	<camel:camelContext>
		<camel:route>
			<camel:from uri=""jetty:http://0.0.0.0:8080?matchOnUriPrefix=true"" />
			<camel:to uri=""cxfbean:myBean"" />
		</camel:route>
	</camel:camelContext>

	<bean id=""myBean"" class=""mypackage.MyJaxRsAnnotatedBean"" />

</beans>
{code}

I have both the camel-cxf and camel-cxf-transport bundles installed and it seems that both of them  have a ComponentResolver for cxfbean published in the OSGI-registry. I can get my bundle to start if I create the cxfbean-component explicity in my Spring- or blueprint-XML file:
{code}
<bean id=""cxfbean"" class=""org.apache.camel.component.cxf.cxfbean.CxfBeanComponent"" />
{code}
But then I will get a NullPointerException when I visit a URL handled by my JAXRS-annotated bean:
java.lang.NullPointerException
	at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:96)
	at org.apache.camel.component.cxf.cxfbean.CxfBeanDestination.process(CxfBeanDestination.java:83)
	at org.apache.camel.impl.ProcessorEndpoint.onExchange(ProcessorEndpoint.java:102)
	at org.apache.camel.impl.ProcessorEndpoint$1.process(ProcessorEndpoint.java:72)
	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:50)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)
	at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:114)
	at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:286)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:109)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:69)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:318)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:209)
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:305)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:102)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:69)
	at org.apache.camel.component.jetty.CamelContinuationServlet.service(CamelContinuationServlet.java:109)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:806)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:538)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1352)
	at org.eclipse.jetty.servlets.MultiPartFilter.doFilter(MultiPartFilter.java:97)
	at org.apache.camel.component.jetty.CamelMultipartFilter.doFilter(CamelMultipartFilter.java:41)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1323)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:476)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:937)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:406)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:871)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:117)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:110)
	at org.eclipse.jetty.server.Server.handle(Server.java:346)
	at org.eclipse.jetty.server.HttpConnection.handleRequest(HttpConnection.java:589)
	at org.eclipse.jetty.server.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:1048)
	at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:601)
	at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:214)
	at org.eclipse.jetty.server.HttpConnection.handle(HttpConnection.java:411)
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:535)
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:40)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:529)
	at java.lang.Thread.run(Thread.java:680)
",Karaf 2.2.0 (with a jre.properties modified to work with cxf),,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-08-09 14:28:47.855,,,no_permission,,Unknown,,,,,,,,,,,13811,,,Tue Aug 09 14:28:47 UTC 2011,,,,,,,0|i0202v:,9614,,,,,,,,,"09/Aug/11 14:28;njiang;The NPE is caused by the cxf bus can not be loaded rightly without setting a right TCCL.
I also fixed the issue that camel-cxf and camel-cxf-transport both of them have a ComponentResolver for cxfbean published in the OSGI-registry.

The patched are committed into camel trunk and camel 2.8.x branch.
Please checkout the latest camel 2.9-SNAPSHOT for verification.
",,,,,,,,,,,,,,,,,,,,,,,
camel-cxf bundle should not ship the camel-cxf-transport packages.,CAMEL-4316,12518277,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,09/Aug/11 02:57,09/Aug/11 14:22,13/Mar/19 22:19,09/Aug/11 14:22,2.8.0,,,,,,,,,2.8.1,2.9.0,,,camel-cxf,,,,,,0,,,,,,,,,"Camel-cxf bundle of camel 2.8.0 ships and exports the packages of camel-transport, it could cause some trouble when we install the camel-transport and camel-cxf bundles at the same time.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,13815,,,Tue Aug 09 14:22:33 UTC 2011,,,,,,,0|i0206n:,9631,,,,,,,,,09/Aug/11 14:22;njiang;Applied patch into trunk and camel-2.8.x branch.,,,,,,,,,,,,,,,,,,,,,,,
Properties component - Cached locations may add duplicates,CAMEL-4261,12514999,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,22/Jul/11 07:15,08/Aug/11 18:02,13/Mar/19 22:19,22/Jul/11 09:19,2.8.0,,,,,,,,,2.8.1,2.9.0,,,camel-core,,,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/LRUCache-memory-leak-when-using-camel-properties-file-tp4621357p4621357.html

The internal cache should be a soft cache and we should use a key holder to ensure equals/hashCode",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,13843,,,2011-07-22 07:15:15.0,,,,,,,0|i01zu7:,9575,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-spring-ws bundle specify a wrong version of spring package,CAMEL-4295,12516936,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,02/Aug/11 14:35,05/Aug/11 09:00,13/Mar/19 22:19,02/Aug/11 14:44,2.8.0,,,,,,,,,2.8.1,2.9.0,,,camel-spring-ws,,,,,,0,,,,,,,,,"Spring-ws bundle version is 2.0.2 but camel-spring-ws bundle imports spring package with the rang of [3,4).
So camel-spring-ws feature can not be installed rightly.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,13824,,,Fri Aug 05 09:00:12 UTC 2011,,,,,,,0|i0201z:,9610,,,,,,,,,02/Aug/11 14:44;njiang;Applied patch into trunk.,05/Aug/11 09:00;njiang;Merged the patch into 2.8.x branch.,,,,,,,,,,,,,,,,,,,,,,
ProducerTemplate/MockEndpoint does not seem to trigger context exception handling.,CAMEL-4234,12514185,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,xbbrck,xbbrck,15/Jul/11 09:20,18/Jul/11 14:07,13/Mar/19 22:19,18/Jul/11 14:07,2.7.0,2.7.1,2.7.2,,,,,,,2.8.0,,,,camel-core,,,,,,0,,,,,,,,,"Hello,

I have a camel route that has ""onException"" clause.  When I run it on Tomcat it works pefectly, but in my integration test (JUnit4 + Spring Tests) the exception handling isn't triggered.  The unit tests uses a producer template and mock endpoint, so it seems that it is in one of those.

I'll try to reproduce it in a small test case.

Kind regards,
Bryan. ","JUnit4 Spring tests, Spring DSL",,,,,,,,,,,,,,,,,,,,18/Jul/11 12:27;xbbrck;CAMEL-4234.zip;https://issues.apache.org/jira/secure/attachment/12486861/CAMEL-4234.zip,18/Jul/11 06:26;xbbrck;routes.xml;https://issues.apache.org/jira/secure/attachment/12486795/routes.xml,,,,,2.0,,,,,,,,,,,,,,,,,,,2011-07-18 06:34:27.953,,,no_permission,,,,,,,,,,,,,13846,,,Mon Jul 18 14:06:58 UTC 2011,,,,,,,0|i01zo7:,9548,,,,,,,,,"18/Jul/11 06:25;xbbrck;Hello,

It doesn't seem to be easy to replicate the issue, but I did get some extra information.

I do get the following log entry:
TRACE [org.apache.camel.processor.exceptionpolicy.DefaultExceptionPolicyStrategy] - The type is scoped for route: userWs.getUser however Exchange is at route: userWs.listUsers

Which explains why the onException isn't triggerd.  But what is strange, is that the onException is defined on context level and the route thas is executed is userWS.getUsers.

I'll include my routing config, and keep working on a simple example.",18/Jul/11 06:34;davsclaus;What version of Camel do you exactly use?,18/Jul/11 06:37;xbbrck;The 2.8-SNAPSHOT of https://repository.apache.org/content/repositories/snapshots/,"18/Jul/11 12:27;xbbrck;Added a simple example that causes the error.

There are 2 routes, both with there own input but both use the same output.  In my test cases I mock the output.  The test case fails because the exception isn't caught.

Do you have an idea about the issue?  Is there a workaround?

Kind regards.
Bryan.","18/Jul/11 12:33;xbbrck;The same error exists from version 2.7.0, it worked until 2.6.0.",18/Jul/11 13:02;davsclaus;Can you make sure you use the latest source code. There has been a fix to ensure <onException>s is being enlisted with the correct context/route scope.,"18/Jul/11 13:30;xbbrck;I tested with 2.9-SNAPSHOT and it does work. Any idea when the final version will be released?

Kind regards,
Bryan.","18/Jul/11 14:06;davsclaus;Camel 2.8 is being cut later today/tomorrow. So this ticket is included.

I added an unit test based to verify it works in both java and xml dsl.",,,,,,,,,,,,,,,,
camel-http4 component does not support proxy settings for HTTPS,CAMEL-4176,12512937,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,doffe,doffe,06/Jul/11 06:59,17/Jul/11 07:35,13/Mar/19 22:19,17/Jul/11 07:35,2.8.0,,,,,,,,,2.8.0,,,,camel-http,,,,,,0,,,,,,,,,"Camel-http4 does not support http proxy configuration for HTTPS (https4:// endpoints).

Scenario 1:

Camel -- HTTP --> Proxy -- HTTPS4 --> Destination

http.proxyHost & http.proxyPort are specified and recognized:

		String _authUsername=""WS_P2P_INTERNAL"";
		String _authPassword=""WS_P2P_INTERNAL"";
		
		from(""servlet:///proxy?matchOnUriPrefix=true"")
		.removeHeader(Exchange.HTTP_URI)
		.removeHeader(Exchange.HTTP_PATH)
		.removeHeader(Exchange.HTTP_QUERY)
		
		.to(""https4://aupdc-osb01d:9002/P2P_Creditors/P2P_CreditorWS?wsdl&authUsername=""+_authUsername+""&authPassword=""+_authPassword+""&x509HostnameVerifier=AllowAllVerifier&proxyAuthHost=aupdc00-revprx01t&proxyAuthPort=9001"");


Getting exception:

java.lang.IllegalStateException: Scheme 'http' not registered.
	at org.apache.http.conn.scheme.SchemeRegistry.getScheme(SchemeRegistry.java:71)
	at org.apache.http.impl.conn.DefaultClientConnectionOperator.openConnection(DefaultClientConnectionOperator.java:127)

Attaching the whole log - http_exception.log


Scenario 2:


Camel -- HTTPS --> Proxy -- HTTPS4 --> Destination

Camel does not seem top recognize and accept https.proxyHost and https.proxyPort settings:

getContext().getProperties().put(""https.proxyHost"", ""aupdc00-revprx01d"");
getContext().getProperties().put(""https.proxyPort"", ""9001"");



","Win 7 x64
JDK 1.6.0 25",,,,,,,,,,,,,,,,,,,,15/Jul/11 10:42;davsclaus;CAMEL-4176.patch;https://issues.apache.org/jira/secure/attachment/12486586/CAMEL-4176.patch,15/Jul/11 14:53;davsclaus;camel-core-2.9-SNAPSHOT.jar;https://issues.apache.org/jira/secure/attachment/12486624/camel-core-2.9-SNAPSHOT.jar,15/Jul/11 15:00;davsclaus;camel-http4-2.9-SNAPSHOT.jar;https://issues.apache.org/jira/secure/attachment/12486626/camel-http4-2.9-SNAPSHOT.jar,06/Jul/11 07:00;doffe;http_exception.log;https://issues.apache.org/jira/secure/attachment/12485381/http_exception.log,15/Jul/11 10:00;doffe;out.log;https://issues.apache.org/jira/secure/attachment/12486576/out.log,15/Jul/11 11:20;doffe;out2.log;https://issues.apache.org/jira/secure/attachment/12486588/out2.log,6.0,,,,,,,,,,,,,,,,,,,2011-07-07 06:30:41.336,,,no_permission,,,,,,,,,,,,,13853,,,Fri Jul 15 15:01:34 UTC 2011,,,,,,,0|i01zbb:,9490,Regression,,,,,,,,07/Jul/11 06:30;davsclaus;Ah sorry there is special support for those as properties on the CamelContext. This is very uncommon.,"07/Jul/11 06:56;davsclaus;Ah I debugged a bit and discovered the issue is likely because your http proxy has scheme: http. eg http client will default and use http scheme if you dont specify that.
","07/Jul/11 06:57;davsclaus;Also in scenario 2 you should use ""http"" and not ""https"" as documented
http://camel.apache.org/http4

{code}
getContext().getProperties().put(""http.proxyHost"", ""aupdc00-revprx01d"");
getContext().getProperties().put(""http.proxyPort"", ""9001"");
{code}",07/Jul/11 07:00;davsclaus;Okay I think ProxyHttpClientConfigurer should support scheme from the proxyHost. It current dont and thus it default to http.,"07/Jul/11 07:11;davsclaus;We should probably add an option to configure the proxy scheme so you can do:

{code}
to(""https4://aupdc-osb01d:9002/P2P_Creditors/P2P_CreditorWS?wsdl&authUsername=""_authUsername""&authPassword=""_authPassword""&x509HostnameVerifier=AllowAllVerifier&proxyAuthHost=aupdc00-revprx01t&proxyAuthPort=9001&proxyAuthScheme=https4"");
{code}

eg notice the new proxyAuthScheme.

For scenario 2 you can then do:
{code}
getContext().getProperties().put(""http.proxyHost"", ""aupdc00-revprx01d"");
getContext().getProperties().put(""http.proxyPort"", ""9001"");
getContext().getProperties().put(""http.proxyScheme"", ""https4"");
{code}
","07/Jul/11 07:13;davsclaus;We can also default and use the same scheme as the producer if the proxyAuthScheme option has not been explicit set.

Then it ought to work in the original reported use-case, as Camel will fallback and use the https4",07/Jul/11 07:38;davsclaus;I have committed a fix on trunk. Can you try with updated source code from trunk?,"08/Jul/11 10:44;doffe;Run the tests.

When proxy settings are defined in the endpoint URL, it works. If the proxyAuthScheme is defined it is used, otherwise falls back to http4.

But when the proxy setting are defined globally using getContext().getProperties().put() - it does not. When ""http.proxyScheme"" is defined it is used. But when it is not the same issue presents itself - camel falls back to http.

","08/Jul/11 13:33;davsclaus;Don thanks for testing. I have just commited a new fix for that scenario with the getProperties on the CamelContext.
Can you test again on your system?","09/Jul/11 10:00;doffe;Run the tests again.

I can confirm that the component uses proxy scheme correctly: if defined explicitly, it is used, if not - the system falls back to the endpoint scheme.

Work for both, the endpoint and global params.

Thanks a lot. nicely done!","09/Jul/11 10:08;davsclaus;Don, thanks for reporting and testing.","15/Jul/11 01:01;doffe;I'm testing against the Release Candidate from the repo:

https://repository.apache.org/content/repositories/orgapachecamel-023

I'm not sure what went wrong, but the issue seem to be back.

When 
proxyAuthScheme=http4 
or 
getContext().getProperties().put(""http.proxyScheme"", ""http4"");

are specified on a https4 endpoint I get following exception on invocation:

java.lang.IllegalStateException: Scheme 'http4' not registered.
	at org.apache.http.conn.scheme.SchemeRegistry.getScheme(SchemeRegistry.java:71)
	at org.apache.http.impl.conn.DefaultClientConnectionOperator.openConnection(DefaultClientConnectionOperator.java:127)
	at org.apache.http.impl.conn.AbstractPoolEntry.open(AbstractPoolEntry.java:149)



","15/Jul/11 08:41;davsclaus;Can you post your Camel route. Do you also use plain http4 scheme, (eg not https)","15/Jul/11 09:07;doffe;from(""servlet:///proxy?matchOnUriPrefix=true"")
		.removeHeader(Exchange.HTTP_URI)
		.removeHeader(Exchange.HTTP_PATH)
		.removeHeader(Exchange.HTTP_QUERY)
		.to(""https4://aupdc-osb01d:9002/P2P_Creditors/P2P_CreditorWS?wsdl"" +
				""&authUsername=WS_P2P_INTERNAL""+
				""&authPassword=WS_P2P_INTERNAL""+
				""&proxyAuthHost=aupdc00-revprx01d""+
				""&proxyAuthPort=9001""+
				""&proxyAuthScheme=http4""+
				""&x509HostnameVerifier=AllowAllHostnameVerifier""
				);

No other endpoint uses http4.The plan was to use http4 only for communication to proxy.
","15/Jul/11 09:28;davsclaus;What runtime container do you use?
",15/Jul/11 09:28;davsclaus;And can you post the full stracktrace?,"15/Jul/11 10:00;doffe;For the time being it is jetty (for testing)

mvn jetty:run

Attaching out.log","15/Jul/11 10:22;davsclaus;Ah so you proxy is plain http on port 9001. 
And you use https on port 9002.","15/Jul/11 10:30;davsclaus;Don, can you try with the attached JAR. Just renamed it to 2.8.0 and override your existing JAR.",15/Jul/11 10:42;davsclaus;The last patch,"15/Jul/11 11:20;doffe;I'm getting nullpointer exception.

I'm attaching the latest log.

out2.log

p.s. if you'd like you can reach me directly - forrestline at gmail dt com",15/Jul/11 14:53;davsclaus;Ah I forgot there is a minor fix in camel-core. So you need to use this JAR also. ,15/Jul/11 15:00;davsclaus;Updated camel-http4 with a minor fix needed as well,15/Jul/11 15:01;davsclaus;Don you need to use the updated attached camel-core and camel-http4 components. You can just rename them to 2.8.0 and override existing JARs
CamelBlueprint2Test  testErrorHandler test is failed.,CAMEL-4235,12514199,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,15/Jul/11 11:10,15/Jul/11 12:35,13/Mar/19 22:19,15/Jul/11 12:35,2.8.0,,,,,,,,,2.8.0,,,,camel-blueprint,osgi,,,,,0,,,,,,,,,"org.apache.camel.itest.osgi.blueprint.CamelBlueprint2Test.testErrorHandler failed dure to the CircularDependencyException.

{code}
[Blueprint Extender: 1] ERROR org.apache.aries.blueprint.container.BlueprintContainerImpl - Unable to start blueprint container for bundle CamelBlueprintTestBundle14
org.osgi.service.blueprint.container.ComponentDefinitionException: Unable to intialize bean camel-1
	at org.apache.aries.blueprint.container.BeanRecipe.runBeanProcInit(BeanRecipe.java:638)
        at org.apache.aries.blueprint.container.BeanRecipe.internalCreate(BeanRecipe.java:724)
	at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:64)
	at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:219)

......
Caused by: org.apache.camel.FailedToCreateRouteException: Failed to create route route1 at: >>> To[mock:result] <<< in route: Route[[From[direct:start]] -> [To[mock:result]]] because of org.apache.aries.blueprint.di.CircularDependencyException: [BeanRecipe[name='dlc'], BeanRecipe[name='.camelBlueprint.bean.factory.dlc'], BeanRecipe[name='camel-1'], BeanRecipe[name='dlc']]
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:794)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:165)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:705)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:1659)
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-07-15 11:12:47.371,,,no_permission,,,,,,,,,,,,,13855,,,Fri Jul 15 12:35:00 UTC 2011,,,,,,,0|i01zof:,9549,,,,,,,,,"15/Jul/11 11:12;davsclaus;The work around is to use <bean> for error handlers, eg
{code:xml}
<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0"">

  <bean id=""dlc"" class=""org.apache.camel.builder.DeadLetterChannelBuilder"">
    <property name=""deadLetterUri"" value=""mock:dead""/>
  </bean>

    <camelContext xmlns=""http://camel.apache.org/schema/blueprint"">

        <!--<errorHandler id=""dlc"" deadLetterUri=""mock:dead"" type=""DeadLetterChannel""/>-->

        <route errorHandlerRef=""dlc"">
            <from uri=""direct:start""/>
            <to uri=""mock:result""/>
        </route>

    </camelContext>

</blueprint>
{code}",15/Jul/11 12:35;njiang;I just committed a quick fix for it.,,,,,,,,,,,,,,,,,,,,,,
URISupport - Normalize URI should support parameters with same key,CAMEL-4211,12513761,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,12/Jul/11 07:09,12/Jul/11 09:23,13/Mar/19 22:19,12/Jul/11 09:23,2.7.2,,,,,,,,,2.8.0,,,,camel-core,,,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Problems-with-jetty-component-and-posts-with-more-then-one-value-for-a-field-tp4576908p4576908.html

The end user is using jetty producer component to send a HTTP POST/GET to some external client. In the endpoint uri he have the parameters, and there are 2 times {{to}} as parameter key. Currently Camel loses the 2nd {{to}} parameter. ",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,13867,,,2011-07-12 07:09:28.0,,,,,,,0|i01zj3:,9525,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The camel-blueprint does not register blueprint dependencies correctly,CAMEL-4174,12512731,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gnt,gnt,gnt,04/Jul/11 16:13,07/Jul/11 18:20,13/Mar/19 22:19,07/Jul/11 18:20,,,,,,,,,,2.8.0,,,,camel-blueprint,,,,,,0,,,,,,,,,It means that components are not waited for correctly in OSGi and the start of camel context can fail if some components aren't available at that time.,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,13895,,,Mon Jul 04 16:15:57 UTC 2011,,,,,,,0|i01zav:,9488,,,,,,,,,"04/Jul/11 16:15;gnt;I think that's a regression since 2.6.0, but it has to be verified.",,,,,,,,,,,,,,,,,,,,,,,
The ProcessorFactory interface isn't usable in scala,CAMEL-4187,12513169,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,gnt,gnt,gnt,07/Jul/11 18:17,07/Jul/11 18:19,13/Mar/19 22:19,07/Jul/11 18:19,,,,,,,,,,2.8.0,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,13883,,,2011-07-07 18:17:22.0,,,,,,,0|i01zdr:,9501,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
LoanBroker example have some issues when it is deployed into osgi container like ServiceMix,CAMEL-4165,12512323,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,30/Jun/11 13:13,30/Jun/11 13:46,13/Mar/19 22:19,30/Jun/11 13:46,2.6.0,2.7.0,2.7.1,2.7.2,,,,,,2.8.0,,,,examples,,,,,,0,,,,,,,,,"When you deploy the camel-example-loanbroker bundle into OSGi container, the osgi container only load the WebService route because there are some confliction of the bean ids.
 ",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,13890,,,Thu Jun 30 13:46:32 UTC 2011,,,,,,,0|i01z8v:,9479,,,,,,,,,30/Jun/11 13:46;njiang;Applied patch into the trunk.,,,,,,,,,,,,,,,,,,,,,,,
camel-example-cxf-osgi can't be deployed with CXF 2.4.x,CAMEL-4138,12511212,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,22/Jun/11 09:12,22/Jun/11 12:32,13/Mar/19 22:19,22/Jun/11 12:29,,,,,,,,,,2.8.0,,,,examples,,,,,,0,,,,,,,,,"As CXF 2.4.x remove the org.apache.cxf.transport.http_osgi package due to the refactoring of cxf http transport, current camel-example-cxf-osgi cannot be deployed into ServiceMix with CXF 2.4.x.
",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-06-22 11:11:57.293,,,no_permission,,,,,,,,,,,,,13938,,,Wed Jun 22 12:32:50 UTC 2011,,,,,,,0|i01z2v:,9452,,,,,,,,,22/Jun/11 11:11;chris@die-schneider.net;Can you go into more details what happens? I have successfully run camel-cxf services in osgi at least using the camel transport for cxf. ,"22/Jun/11 12:25;njiang;It relates to the OSGi import package of ""org.apache.cxf.transport.http_osgi"", you can find more information with my commit[1].
[1]http://svn.apache.org/viewvc?rev=1138350&view=rev
",22/Jun/11 12:32;chris@die-schneider.net;Ah .. so it just could not resolve the package. In my examples I typically use require bundle for the cxf dependency. This is more stable atthe moment... well until we refactor cxf to use more fine granular bundles. ,,,,,,,,,,,,,,,,,,,,,
XMLSecurity component does not decode element-level encrypted content,CAMEL-4063,12509417,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,rnewcomb,rnewcomb,07/Jun/11 04:52,16/Jun/11 13:53,13/Mar/19 22:19,16/Jun/11 13:53,2.7.1,,,,,,,,,2.8.0,,,,,,,,,,0,,,,,,,,,The camel-xmlsecurity component does not decode element-level encrypted data.,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-06-16 13:53:14.789,,,no_permission,,,,,,,,,,,,,71113,,,Thu Jun 16 13:53:14 UTC 2011,,,,,,,0|i01ymf:,9378,,,,,,,,,07/Jun/11 04:53;rnewcomb;CAMEL-4061 includes a potential fix for this defect.,16/Jun/11 13:53;hadrian;Done.,,,,,,,,,,,,,,,,,,,,,,
Camel XMLSecurity encryption fails with a client-specified passPhrase,CAMEL-4062,12509416,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,rnewcomb,rnewcomb,07/Jun/11 04:44,16/Jun/11 13:52,13/Mar/19 22:19,16/Jun/11 13:52,2.7.1,,,,,,,,,2.8.0,,,,camel-core,,,,,,0,,,,,,,,,"Camel XMLSecurity produces an NPE when a client-provided passPhrase is included as a marshal().secureXml() parameter.

java.lang.NullPointerException
        at javax.crypto.spec.DESedeKeySpec.<init>(DashoA13*..)
        at javax.crypto.spec.DESedeKeySpec.<init>(DashoA13*..)
        at org.apache.camel.dataformat.xmlsecurity.XMLSecurityDataFormat.generateEncryptionKey(XMLSecurityDataFormat.java:176)
        at org.apache.camel.dataformat.xmlsecurity.XMLSecurityDataFormat.marshal(XMLSecurityDataFormat.java:94)
        at org.apache.camel.processor.MarshalProcessor.process(MarshalProcessor.java:57)
",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-06-16 13:52:10.494,,,no_permission,,,,,,,,,,,,,71115,,,Thu Jun 16 13:52:10 UTC 2011,,,,,,,0|i01ym7:,9377,,,,,,,,,07/Jun/11 04:47;rnewcomb;CAMEL-4061 includes a potential fix for this defect.,16/Jun/11 13:52;hadrian;Done.,,,,,,,,,,,,,,,,,,,,,,
Error using multiple error handlers and onException (java.lang.IllegalStateException: SendProcessor has not been started),CAMEL-4107,12510434,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,nikosd23,nikosd23,15/Jun/11 12:49,15/Jun/11 14:58,13/Mar/19 22:19,15/Jun/11 14:22,2.7.2,,,,,,,,,2.8.0,,,,camel-core,camel-test,,,,,1,,,,,,,,,"When we use more than one errorHandler in our routes and onException, we face test failures with the following exception:
java.lang.IllegalStateException: SendProcessor has not been started: sendTo(Endpoint[mock://custom])
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:94)[camel-core-2.7.2.jar:2.7.2]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[camel-core-2.7.2.jar:2.7.2]
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[camel-core-2.7.2.jar:2.7.2]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[camel-core-2.7.2.jar:2.7.2]
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99)[camel-core-2.7.2.jar:2.7.2]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[camel-core-2.7.2.jar:2.7.2]
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:299)[camel-core-2.7.2.jar:2.7.2]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208)[camel-core-2.7.2.jar:2.7.2]
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:269)[camel-core-2.7.2.jar:2.7.2]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[camel-core-2.7.2.jar:2.7.2]
	at org.apache.camel.processor.RedeliveryErrorHandler.deliverToFailureProcessor(RedeliveryErrorHandler.java:621)[camel-core-2.7.2.jar:2.7.2]
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:242)[camel-core-2.7.2.jar:2.7.2]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208)[camel-core-2.7.2.jar:2.7.2]
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:269)[camel-core-2.7.2.jar:2.7.2]
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:109)[camel-core-2.7.2.jar:2.7.2]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[camel-core-2.7.2.jar:2.7.2]
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[camel-core-2.7.2.jar:2.7.2]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[camel-core-2.7.2.jar:2.7.2]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)[camel-core-2.7.2.jar:2.7.2]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[camel-core-2.7.2.jar:2.7.2]
	at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:189)[camel-core-2.7.2.jar:2.7.2]
	at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:121)[camel-core-2.7.2.jar:2.7.2]
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)[:1.6.0_20]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)[:1.6.0_20] ",,,,,,,,,,,,,,,,,,,,,15/Jun/11 13:25;nikosd23;unit-test-multiple-error-handlers.zip;https://issues.apache.org/jira/secure/attachment/12482664/unit-test-multiple-error-handlers.zip,15/Jun/11 12:59;nikosd23;unit-test-multiple-error-handlers.zip;https://issues.apache.org/jira/secure/attachment/12482663/unit-test-multiple-error-handlers.zip,,,,,2.0,,,,,,,,,,,,,,,,,,,2011-06-15 13:10:05.484,,,no_permission,,,,,,,,,,,,,13963,,,Wed Jun 15 14:58:19 UTC 2011,,,,,,,0|i01yvz:,9421,,,,,,,,,"15/Jun/11 12:59;nikosd23;Attached you can find two unit tests that instantiate two different camel contexts. One contains routes that reference one errorHandler and the other contains routes that reference two error handlers. The tests of the first camel context pass, while the tests of the second fail with the aforementioned exception.","15/Jun/11 13:10;davsclaus;Can you re-attach the file, and this time mark [x] in grant license to Apache.",15/Jun/11 13:25;nikosd23;Attaching again the file with Grant licence to ASF,15/Jun/11 14:22;davsclaus;This issue is fixed on trunk.,15/Jun/11 14:58;nikosd23;Thanks for your reply.,,,,,,,,,,,,,,,,,,,
onException definition ignored when using route/@errorHandlerRef with the xml dsl,CAMEL-3989,12507623,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,hadrian,hadrian,18/May/11 14:50,10/Jun/11 13:57,13/Mar/19 22:19,10/Jun/11 13:57,2.7.1,,,,,,,,,2.8.0,,,,camel-spring,,,,,,0,,,,,,,,,"When using a route definition like below:

{code}
<camelContext xmlns=""http://camel.apache.org/schema/spring"">
  <onException>
    <exception>org.apache.camel.MyException</exception>
    <handled><constant>false</constant></handled>
  </onException>
  <route errorHandlerRef=""errorHandler"">
    <from uri=""direct:start""/>
[...]
{code}

the onException definition is not propagated to the ref'd DLC and hence it will be ignored.",,,,,,,,,,,,CAMEL-4022,,,,,,CAMEL-4058,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-06-06 12:07:20.967,,,no_permission,,,,,,,,,,,,,71446,,,Fri Jun 10 13:57:08 UTC 2011,,,,,,,0|i01y5z:,9304,,,,,,,,,06/Jun/11 12:07;davsclaus;I cannot reproduce this issue with the source code on trunk. Hadrian do you have an example that fails?,"06/Jun/11 12:11;davsclaus;Ah okay the issue you have is that the onException doesn't do anything.
{code:xml}

<beans xmlns=""http://www.springframework.org/schema/beans""
       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
       xsi:schemaLocation=""
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
    "">

  <bean id=""myFail"" class=""java.lang.IllegalArgumentException"">
    <constructor-arg index=""0"" value=""Damn""/>
  </bean>

  <camelContext xmlns=""http://camel.apache.org/schema/spring"">

    <errorHandler type=""DeadLetterChannel"" id=""myDLC"" deadLetterUri=""mock:dead""/>

    <onException>
      <exception>java.lang.IllegalArgumentException</exception>
      <handled>
        <constant>false</constant>
      </handled>
    </onException>

    <route errorHandlerRef=""myDLC"">
      <from uri=""direct:start""/>
      <to uri=""mock:a""/>
      <throwException ref=""myFail""/>
    </route>
  </camelContext>

</beans>
{code}

So with that above, it gets into the DLC. And in your case you would expect it to be not handled at all, and the Exchange to fail?","06/Jun/11 12:33;davsclaus;Okay this ticket is in fact invalid. The source code is correct.

When you do
{code:xml}
 <onException>
    <exception>org.apache.camel.MyException</exception>
    <handled><constant>false</constant></handled>
  </onException>
{code}

Its a bit unusual behavior and we may have to throw some error on startup stating this is a mis-configuration. You cannot have <handled> without any child outputs.

So you have to add some logic what to do:
{code:xml}
 <onException>
    <exception>org.apache.camel.MyException</exception>
    <handled><constant>false</constant></handled>
    <log message=""Damn something went wrong, and I will just fail""/>
  </onException>
{code}

However the <onException> can also be used to have per exception specific redelivery policy, for example. You may have a a DLC error handler with a pre configured redelivery policy:
{code:xml}
    <errorHandler type=""DeadLetterChannel"" id=""myDLC"" deadLetterUri=""mock:dead"">
      <redeliveryPolicy maximumRedeliveries=""5"" redeliveryDelay=""1000"" useCollisionAvoidance=""true""/>
    </errorHandler>
{code}

And then in case of a special MyException we want to use a different redelivery policy, so we can ""override"" this:
{code:xml}
 <onException>
    <exception>org.apache.camel.MyException</exception>
    <redeliveryPolicy maximumRedeliveries=""3"" redeliveryDelay=""5000""/>
  </onException>
{code}

So what happens is that the DLC is being used, but in case of a MyException is being thrown it will use the <redeliveryPolicy> settings defined in the <onException> instead of its default (well in fact it does an overlay).

So in this example, so even after 3 redelivery attempts, the exchange is exhausted, and is handled by the error handler (the DLC) in this case. So the exchange is moved into the dead letter queue.

So what we need to do is to add a check in OnException that it fail on startup if it has been misconfigured.","06/Jun/11 13:51;davsclaus;That said. There is one interresting aspect when doing a
{code:xml}
<errorHandler type=""DeadLetterChannel"" id=""myDLC"" deadLetterUri=""mock:dead"">
      <redeliveryPolicy maximumRedeliveries=""5"" redeliveryDelay=""1000"" useCollisionAvoidance=""true""/>
    </errorHandler>

  <onException>
    <exception>org.apache.camel.MyException</exception>
    <handled><constant>false</constant></handled>
  </onException>
{code}

eg we set handled=false, in the OnException for MyException. If the intention is to say that
a) okay by default use the Dead Letter Channel to handle exceptions
b) but for this special exception MyException, then *dont* use DLC but just regard it as not handled (eg its failed on the Exchange).

In case b (which I can see a good point for end user to expect) then there is a bug in trunk. However that's fairly easy to fix. I think we should change this in Camel to act like that. So if you have configured handled or any outputs on the <onException> then the DLC will not kick in.",10/Jun/11 13:57;davsclaus;Is fixed with those recent error handler fixes/improvements.,,,,,,,,,,,,,,,,,,,
HttpProducer drops authentification parameters.,CAMEL-3779,12501095,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,ben@micromata.de,ben@micromata.de,11/Mar/11 01:36,09/Jun/11 08:48,13/Mar/19 22:19,09/Jun/11 08:48,2.6.0,,,,,,,,,2.8.0,,,,camel-http,,,,,,0,,,,,,,,,"Hi, 

I run into the following problem with Camel 2.6.0:

An HTML file contain an URI lists of files to be downloaded from a web server to the local file system.
The HTML file is parsed via a Java Bean Splitter. The Java Bean Splitter produces a Set of URI strings.
These files should be downloaded from a web server to the local file system. The files are protected with BASIC authentification.

The extraction and the splitting of the download URIs works quite well with the Java Bean Splitter.
The Java Bean Splitter produces URI like: 
{code}http4://download.acme.com/file_1.txt?username=foo&password=baa{code}

Here's the setup:
{code}
<route>
   <from uri=""file:///tmp/files_to_retrieve/"" />
   <method bean=""prepareDownLoadUri"" method=""parseIndexHtml"" />
   <setHeader headerName=""CamelHttpMethod"">
     <constant>GET</constant>
   </setHeader> 
   <setHeader headerName=""CamelHttpUri"">
     <simple>${body}</simple>
   </setHeader>
   <to uri=""http4://download.acme.com/"" />
   <to uri=""bean:saveFileProcessor"" />
</route>
<bean id=""prepareDownLoadUri"" class=""com.acme.PrepareDownLoadUri"" />
<bean id=""saveFileProcessor"" class=""com.acme.SaveFileProcessor"" />
{code}
The injection of the URIs from the Splitter into the HttpProducer, works quite well. 
I debugged into the HttpProducer and it seems, that the HttpProducer does not provide the unterlying http client (in this case Apache HttpClient 4) with  the authentification settings from the URI.

At first, the queryString is extracted from the Exchange-Header (if provided)
{code:title=HttpProducer.createMethod(), line 273}
String url = HttpHelper.createURL(exchange, getEndpoint());
{code}
The url string contains the URI produces by the splitter including the authentification parameters: 
{code}http4://download.acme.com/file_1.txt?username=foo&password=baa{code}

Then the HttpProducer assembles a new URI for the requests. The new URI is assembled from parts of the string url (line 273)  
and other parameters from the Exchange Header: 
{code:title=HttpProducer.createMethod(), lines 285-300}
        // is a query string provided in the endpoint URI or in a header (header overrules endpoint)
        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class);
        if (queryString == null) {
            queryString = getEndpoint().getHttpUri().getRawQuery();
        }

        StringBuilder builder = new StringBuilder(uri.getScheme()).append(""://"").append(uri.getHost());

        if (uri.getPort() != -1) {
            builder.append("":"").append(uri.getPort());
        }

        if (uri.getPath() != null) {
            builder.append(uri.getRawPath());
        }

        if (queryString != null) {
            builder.append('?');
            builder.append(queryString);
        }

        HttpRequestBase httpRequest = methodToUse.createMethod(builder.toString());
{code}

The problem is, in the assembling of the new URI, the authentification parameters are dropped.  

One possible solution could be: 
# check for authentification parameters in the url (line 273) and extract them.
# build the credentials, AuthScheme and provide it to the underlying http client.

thanks in advance,
ben


",,,,,,,,,,,,,,CAMEL-4056,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-03-11 04:57:40.33,,,no_permission,,,,,,,,,,,,,13975,,,Thu Jun 09 08:48:46 UTC 2011,,,,,,,0|i01wuf:,9090,,,,,,,,,"11/Mar/11 04:57;davsclaus;Is username and password parameters you must send to the remote server?
Or part of authentication using eg BASIC on the http client?

Can you try with camel-http instead of camel-http4 component?
And try with latest code from trunk, eg Camel 2.7.

And please use the mailing list first to get help, and then only later open a JIRA ticket, as stated here:
http://camel.apache.org/support

","11/Mar/11 11:07;ben@micromata.de;Hi Claus, 

thanks for the fast reply. 

{quote}
Is username and password parameters you must send to the remote server?
Or part of authentication using eg BASIC on the http client?
{quote}

The username and password parameters are needed for BASIC authentication via the http client. 

{quote}
Can you try with camel-http instead of camel-http4 component?
{quote}
Yes, with the same result: no authentification scheme is provided with the request. 

Is there any way to provide this information into the http client? 
What do you think about provide auth. information via addional header information from the Exchange?
The HttpProducer extract the information and set the auth. scheme in the http client.
In the style of the HttpConfiguration of camel-http, we could introduce the following header parameters:
||Name||Description||
|Exchange.HTTP_AUTHTIFICATION_SCHEMA| Basic, Digest, Ntml|
|Exchange.HTTP_USENAME | the username for the HTTP request |
|Exchange.HTTP_PASSWORD| the password for the HTTP request|
|Exchange.HTTP_Domain| for NTML authentication |
|Exchange.HTTP_AUTH_HOST| Optional host for NTML authentication |
|Exchange.HTTP_PROXY_HOST | the proxy to use |
|Exchange.HTTP_PROXY_AUTH_METHOD | the auth. scheme for the proxy |
|Exchange.HTTP_PROXY_USERNAME | the username for the proxy |
|Exchange.HTTP_PROXY_PASSWORD |the password for the proxy |

If you like, I can implement such a solution. 

thanks,
ben 
","11/Mar/11 11:16;davsclaus;The camel-http4 component is not as good as the camel-http. Especially the http client 4.0.x was not so good. We recommend to use camel-http until Http Client 4.1.x shapes up. Which it seems to be doing.

The auth parameters for camel-http is slighly different as you would see
http://camel.apache.org/http

eg you should use authUsername, authPassword and authMethod.

In fact camel-http4 should use the *same* options as camel-http so its easy to migrate. I can see from the codebase that camel-http4 hasn't done that for some parameters so I will create a JIRA.

See the unit test HttpBasicAuthTest in camel-jetty source code for examples.

","11/Mar/11 12:25;ben@micromata.de;Hi Claus, 

thanks for your prompt answer. 
In the meantime, I found the following work around: I wrote a small ProcessorBean
that simply creates the HTTP Authorization Header  and stores HTTP Authorization Header
in the message header: 
{code}
final String userPassword = ""foo"" + "":"" + ""bar"";
final byte[] encodeBase64 = Base64.encodeBase64(userPassword.getBytes());
final String encoding = new String(encodeBase64);
final String authParameter = ""Basic "" + encoding;
msg.setHeader(""Authorization"", authParameter);{code}

This solution works with camel-http and camel-http4, because both implementations of the HttpProducer,
the Header information of the message is passed through request, see HttpProducer.java from camel-http4 in the lines 87-93:
{code}
        // propagate headers as HTTP headers
        for (Map.Entry<String, Object> entry : in.getHeaders().entrySet()) {
            String headerValue = in.getHeader(entry.getKey(), String.class);
            if (strategy != null && !strategy.applyFilterToCamelHeaders(entry.getKey(), headerValue, exchange)) {
                method.addRequestHeader(entry.getKey(), headerValue);
            }
        }
{code}

The route is now:
{code}
<route>
   <from uri=""file:///tmp/files_to_retrieve/"" />
   <split>
     <method bean=""prepareDownLoadUriSplitter"" method=""parseIndexHtml"" />
     <!-- provide the HTTP auth. scheme -->
     <to uri=""authorizeWebRequestProcessor"" />
     <to uri=""http://download.acme.com/"" />
     <to uri=""bean:saveFileProcessor"" />
   </split>
</route>
<bean id=""prepareDownLoadUriSplitter"" class=""com.acme.PrepareDownLoadUriSplitter"" />
<bean id=""authorizeWebRequestProcessor"" class=""com.acme.AuthorizeWebRequestProcessor"" />
<bean id=""saveFileProcessor"" class=""com.acme.SaveFileProcessor"" />
{code}

best regards,
ben


",12/Mar/11 10:09;davsclaus;Ben you talk about a splitter? But the route you post don't have any splitter. How is that?,12/Mar/11 10:10;davsclaus;This problem would be in both camel-http and camel-http4,"12/Mar/11 18:15;ben@micromata.de;Hi Claus, 

Sorry, I'd corrected the above route.

best regards,
ben","05/Jun/11 22:40;rkettelerij;@ben. I've been debugging {{camel-http}}(*) and found no issues with authentication credentials being dropped. I did however encountered a case where the credentials aren't sent to the server because the server doesn't explicitly asks for it. This may very well apply to your situation as well. I've filled CAMEL-4056 to improve on this.

(*) I haven't checked {{camel-http4}}, but you reported that the issue also applied to {{camel-http}} so I've limited my search to {{camel-http}} for now.","09/Jun/11 08:29;njiang;Hi Ben,

Can you try the latest Camel 2.8-SNAPSHOT which has the patch of CAMEL-3780 ?
I think the option of username=foo&password=baa will not be dropped any more, because camel-http4 will not treat those options as its endpoint options.

","09/Jun/11 08:48;njiang;I just added a test for it in camel trunk.
It looks like the problem has be fixed.",,,,,,,,,,,,,,
javax.script dependency in camel-core,CAMEL-4047,12509215,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,dkulp,dkulp,dkulp,03/Jun/11 17:56,08/Jun/11 03:05,13/Mar/19 22:19,08/Jun/11 03:05,2.8.0,,,,,,,,,2.8.0,,,,camel-core,,,,,,0,,,,,,,,,"
The OSGi imports for camel-core ends up with a non-optional dependency on javax.script due to it being used in the Activator.    However, the karaf feature for camel-core doesn't have a dependency on org.apache.servicemix.specs.scripting-api-1.0 .

One of two things should be done:
1) mark javax.script as optional.  This MAY require some updates to the Activator to work when it's not available.

2) Update the karaf features file to add:
{code:xml}
<bundle dependency=""true"">mvn:org.apache.servicemix.specs/org.apache.servicemix.specs.scripting-api-1.0/${servicemix-specs-version}</bundle>
{code}
",,,,,,,,,,,,,,,,,,,,,06/Jun/11 17:38;dkulp;CAMEL-4047.patch;https://issues.apache.org/jira/secure/attachment/12481593/CAMEL-4047.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-06-03 18:02:45.276,,,no_permission,,,,,,,,,,,,,13985,,,Wed Jun 08 03:05:35 UTC 2011,,,Patch Available,,,,0|i01yiv:,9362,,,,,,,,,"03/Jun/11 18:02;hadrian;Dan, thanks for reporting this!
I don't see 2) as being an option and have a strong preference towards 1).","03/Jun/11 18:55;dkulp;
Actually, #2 is really the correct solution to this.  In OSGi, the smx scripting-api jar is really the version of the API jar with  the factory (ScriptEngineMaker) that works in OSGi.   You cannot really use the in-jdk versions.   This is the same as all the other api jars we use.

Thus, we need to make sure we depend on that version up front in the features file.  Otherwise, you can end up with a path like:
{code}
features:install ....camel-core...
{code}
which would depend on the in-jdk version.  Then, later, I install something like camel-bean-validator or something else that would pull in the smx api version.   Any scripting engine installed after that will result in classcasts in camel as the javax.script classes will be different as the new bundles will get the smx version and Camel will expect the in-jdk version.

","03/Jun/11 20:56;hadrian;More I think about it, more my head spins... I agree 2) would completely solve the problem, but it is the right solution?

We cannot use the jre version of the ScriptEngineFactory in an OSGi deployment, that much is clear. Both 1) and 2) do not have *any* impact on non-OSGi deployments, so we're good there.

Assumption (*): There is a fair percentage of deployments that do *not* need/use a script engine (say x%).

Solution 2) brings the extra feature dependency for the camel-core on all *osgi* deployments. If x is relatively small e.g. x <= 20, I don't think it's a big problem, especially given the meager 32k the extra bundle is bringing.

If x is larger, say x >= 80, would it make sense to make the dependency optional? Of course we then have the problem Dan explained. We can get activation to fail for things like camel-bean-validator if camel-core was using the jre version of the ScriptEngine. 3rd party component writers would have to be aware of that too.

I don't know it may be overkill for just the 32k... On the plus side, we should be able to reach a consensus quickly on this though.

","03/Jun/11 21:01;jbonofre;My preference is more on the 2/ because I think it's the most secure way.

It requires:
- to exclude javax.script from the system package (by tuning the jre.properties file)
- add the ServiceMix Specs bundle in the feature

Like this, we can guarantee that it works, which is more hazardous just flagging the javax.script package as optional.","03/Jun/11 21:21;dkulp;
The other option MAY be to move all  the javax.script stuff into the camel-script component.  It already has a bundle Activator in there that could handle this.   

That said, I'm not 100% sure if that's acceptable as there COULD be use cases of the script things without camel-script.   Thoughts?
","04/Jun/11 01:12;hadrian;+1. This sounds great, camel-script SHOULD be used with jsr-223 languages.","06/Jun/11 17:38;dkulp;
May need to use ""git apply"" to apply the patch due to the removal of a file.

I've tested a bit in a standalone OSGi container (TSF) installing the camel-script feature and such.   However, I haven't been able to run the camel-ittest-osgi stuff yet due to them being broken.","08/Jun/11 01:02;hadrian;@Dan, patch looks good. I started a full test and will commit when done (could take a while...). Thanks for the contribution.",08/Jun/11 03:05;hadrian;Fixed in r1133232. Thanks Dan for patch and keep them coming.,,,,,,,,,,,,,,,
Test failure in camel-spring-ws actual results come with windows line endings and the comparison fails,CAMEL-4068,12509489,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,chris@die-schneider.net,chris@die-schneider.net,chris@die-schneider.net,07/Jun/11 17:32,07/Jun/11 17:34,13/Mar/19 22:19,07/Jun/11 17:34,2.7.2,,,,,,,,,2.8.0,,,,camel-spring-ws,,,,,,0,,,,,,,,,"Several tests like org.apache.camel.component.spring.ws.ConsumerEndpointMappingResponseHandlingRouteTest.testRootQName
fail with ComparisonFailure as the expected result has unix file endings and the actual result has windows file endings on windows",Windows,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,13982,,,2011-06-07 17:32:41.0,,,,,,,0|i01ynj:,9383,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
XPath namespaces not present when <xpath> element inside a <routeContext> element,CAMEL-4025,12508603,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,pegli,pegli,27/May/11 22:49,29/May/11 13:49,13/Mar/19 22:19,29/May/11 13:49,2.6.0,2.7.1,,,,,,,,2.8.0,,,,camel-spring,,,,,,0,,,,,,,,,"I have a route that is inside a {{<routeContext>}} element which uses XPath as part of a filter and a choice.  The input document has a default namespace that is not blank.  When I try to run a message through the route, I see the following error in the logs:

{code:none}
com.sun.org.apache.xpath.internal.domapi.XPathStylesheetDOM3Exception: Prefix must resolve to a namespace: foo
{code}

Adding the namespace declaration to the {{beans}} element as is done in the unit tests for camel-spring doesn't fix the problem, and neither does adding it to the {{<camelContext>}} element as described in the documentation.  I copied the {{SpringXPathFilterWithNamespaceTest}} class and created an input route configuration that uses a {{routeContext}}, and was able to reproduce the issue.","OSX 10.6.7
java version ""1.6.0_24""
Java(TM) SE Runtime Environment (build 1.6.0_24-b07-334-10M3326)
Java HotSpot(TM) 64-Bit Server VM (build 19.1-b02-334, mixed mode)
",,,,,,,,,,,,,,,,,,,,27/May/11 22:52;pegli;SpringXPathFilterWithNamespaceOnRouteContextTest.java;https://issues.apache.org/jira/secure/attachment/12480714/SpringXPathFilterWithNamespaceOnRouteContextTest.java,27/May/11 22:51;pegli;xpathFilterWithNamespaceOnRouteContext.xml;https://issues.apache.org/jira/secure/attachment/12480713/xpathFilterWithNamespaceOnRouteContext.xml,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,14012,,,Fri May 27 22:52:25 UTC 2011,,,,,,,0|i01ydz:,9340,,,,,,,,,27/May/11 22:51;pegli;Route definition with an XPath filter inside a route context.  Place in src/test/resources/org/apache/camel/spring/processor,27/May/11 22:52;pegli;unit test that reproduces bug; requires route definition xml file also attached to this isuse.,,,,,,,,,,,,,,,,,,,,,,
Dumping route to XML created by Java DSL using an expression may not output the actual used expression,CAMEL-3971,12507106,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,13/May/11 10:18,18/May/11 09:41,13/Mar/19 22:19,18/May/11 09:41,2.7.0,,,,,,,,,2.8.0,,,,camel-core,,,,,,0,,,,,,,,,"See this unit test
ManagedCamelContextDumpRoutesAsXmlTest

The route in Java DSL
{code}
                from(""seda:bar"").routeId(""myOtherRoute"")
                    .filter().header(""bar"")
                        .to(""mock:bar"")
                    .end();
{code}

And the output in XML
{code:xml}
  <route group=""org.apache.camel.management.ManagedCamelContextDumpRoutesAsXmlTest$1"" id=""myOtherRoute"">
        <from uri=""seda:bar""/>
        <filter id=""filter1"">
            <expressionDefinition/>
            <to uri=""mock:bar"" id=""to2""/>
        </filter>
    </route>
{code}

The same example created by Spring XML, outputs the XML correct


",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,14032,,,2011-05-13 10:18:11.0,,,,,,,0|i01y1z:,9286,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SpringTestSupport - debugBefore does not work,CAMEL-3959,12506644,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,davsclaus,davsclaus,09/May/11 18:21,09/May/11 18:45,13/Mar/19 22:19,09/May/11 18:45,2.7.0,,,,,,,,,2.8.0,,,,camel-test,,,,,,0,,,,,,,,,"You cannot use the debugBefore / debugAfter when using CamelSpringTestSupport from camel-test. The problem is that the Spring Framework triggers Camel to start before the unit test have setup the debugger and whatnot.

We should align this so it works like without spring, so its the CamelTestSupport that invokes start on CamelContext

See nabble
http://camel.465427.n5.nabble.com/CamelSpringTestSupport-and-debugBefore-tp4382259p4382259.html",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,14070,,,2011-05-09 18:21:23.0,,,,,,,0|i01xzb:,9274,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Archtype components don't import into eclipse without errors,CAMEL-3915,12505798,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,dkulp,dkulp,29/Apr/11 15:17,29/Apr/11 15:57,13/Mar/19 22:19,29/Apr/11 15:57,,,,,,,,,,2.8.0,,,,tooling,,,,,,0,,,,,,,,,"

The archetypes are importing into eclipse as ""java"" projects which is trying to invoke the java compiler on them. That's generating issues with the templates and such.  They should have the ""javanature"" turned off on them so they are pretty much just plain projects.",,,,,,,,,,,,,,,,,,,,,29/Apr/11 15:17;dkulp;archtype-eclipse.patch;https://issues.apache.org/jira/secure/attachment/12477801/archtype-eclipse.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-04-29 15:57:14.747,,,no_permission,,,,,,,,,,,,,14092,,,Fri Apr 29 15:57:14 UTC 2011,,,Patch Available,,,,0|i01xpj:,9230,,,,,,,,,29/Apr/11 15:57;hadrian;Patch applied with thanks to Dan Kulp. Looking for more from you :).,,,,,,,,,,,,,,,,,,,,,,,
Move the org.apache.camel.language.SpEL.java into camel-core to avoid export package org.apache.camel.language twice in camel-spring,CAMEL-3885,12504789,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,20/Apr/11 13:43,20/Apr/11 14:11,13/Mar/19 22:19,20/Apr/11 14:11,2.7.0,2.7.1,,,,,,,,2.8.0,,,,camel-core,camel-spring,,,,,0,,,,,,,,,"camel-spring and camel-core both export the org.apache.camel.language package which will cause some truble when OSGi resolve the bundle which imports this package. 
As the SpEL.java is not import any spring related class, an simple fixing is moving the SpEL.java into camel-core.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,14128,,,Wed Apr 20 14:11:01 UTC 2011,,,,,,,0|i01xhz:,9196,,,,,,,,,20/Apr/11 14:11;njiang;Applied patch into trunk.,,,,,,,,,,,,,,,,,,,,,,,
camel-spring doesn't import into eclipse,CAMEL-3881,12504714,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,hadrian,dkulp,dkulp,19/Apr/11 21:04,20/Apr/11 03:04,13/Mar/19 22:19,20/Apr/11 03:04,2.8.0,,,,,,,,,2.8.0,,,,camel-spring,,,,,,0,,,,,,,,,"
camel-spring no longer imports into eclipse as OsgiSpringCamelContext references OsgiTypeConverter which implements ServiceTrackerCustomizer.   The org.osgi.compendium jar isn't a dependency of camel-spring so the class cannot be found and eclipse gives an error.

Simple fix is to add a dependency to the pom:

{code:xml}
    <dependency>
      <groupId>org.osgi</groupId>
      <artifactId>org.osgi.compendium</artifactId>
      <scope>provided</scope>
      <optional>true</optional>
    </dependency>
{code}



",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-04-20 03:04:01.443,,,no_permission,,,,,,,,,,,,,14108,,,Wed Apr 20 03:04:42 UTC 2011,,,Patch Available,,,,0|i01xh3:,9192,,,,,,,,,"20/Apr/11 03:04;hadrian;Dan, thanks for reporting and for the patch.
",20/Apr/11 03:04;hadrian;Patch applied in r1095258 with thanks to Dan Kulp.,,,,,,,,,,,,,,,,,,,,,,
camel-jms default cache level should be CACHE_NONE when transaction is enabled,CAMEL-3828,12503160,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,davsclaus,gnt,gnt,01/Apr/11 18:40,08/Apr/11 14:01,13/Mar/19 22:19,08/Apr/11 14:01,2.6.0,2.7.0,,,,,,,,2.8.0,,,,camel-jms,,,,,,0,,,,,,,,,"I lost a huge amount of time chasing the problem as the default value just screw the whole transaction (the session is created outside the transaction and cached, so usually not enlisted in the tx).
",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-04-08 11:41:57.346,,,no_permission,,,,,,,,,,,,,14183,,,Fri Apr 08 11:41:57 UTC 2011,,,,,,,0|i01x5b:,9139,,,,,,,,,"08/Apr/11 11:41;davsclaus;Yeah we should use CACHE_AUTO by default as spring-jms will pickup CACHE_NONE if a transaction manager has been specified, and CACHE_CONSUMER otherwise.",,,,,,,,,,,,,,,,,,,,,,,
ArrayIndexOutOfBoundsException in DefaultHttpBinding,CAMEL-3816,12502668,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,davsclaus,davsclaus,29/Mar/11 06:54,30/Mar/11 08:52,13/Mar/19 22:19,30/Mar/11 08:52,2.4.0,2.6.0,,,,,,,,2.8.0,,,,camel-http,,,,,,0,,,,,,,,,"See nabble
http://servicemix.396122.n5.nabble.com/http-post-to-camel-jetty-smx-4-3-ArrayIndexOutOfBoundsException-tp4258334p4258334.html",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-03-30 07:44:39.404,,,no_permission,,,,,,,,,,,,,14176,,,Wed Mar 30 07:44:39 UTC 2011,,,,,,,0|i01x2n:,9127,,,,,,,,,"29/Mar/11 06:56;davsclaus;The end user is using curl to do a HTTP POST which seems to not send any HTTP headers at all, which often is unlikely and thus not seen this issue before.",29/Mar/11 06:57;davsclaus;Remember to fix this in camel-http4 as well.,"30/Mar/11 07:44;njiang;I just did some test on the issue, and found out it was caused by the request message was not right. 

As the Http Request was sending with application/x-www-form-urlencoded, which means the message body should be some string like ""file.name=file.xml"", but with the ""curl -v -d file.xml 'http://localhost:4443/to2-service/sendMessage"", the message body became ""file.xml"", and DefaultHttpBinding throw the exception like that.

And it has nothing to do with the Null Http header.

I just did a quick fix for in Camel trunk, please check out latest Camel 2.8-SNAPSHOT to verify the fix.",,,,,,,,,,,,,,,,,,,,,
Camel should reset the stream cache if the useOriginalInMessage option is true,CAMEL-3791,12501926,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Major,Fixed,njiang,njiang,njiang,21/Mar/11 07:58,28/Mar/11 00:18,13/Mar/19 22:19,28/Mar/11 00:18,2.5.0,2.6.0,2.7.0,,,,,,,2.8.0,,,,camel-core,,,,,,0,,,,,,,,,"{code}
--- src/main/java/org/apache/camel/processor/RedeliveryErrorHandler.java	(revision 1083672)
+++ src/main/java/org/apache/camel/processor/RedeliveryErrorHandler.java	(working copy)
@@ -591,18 +591,23 @@
         // is the a failure processor to process the Exchange
         if (processor != null) {
 
-            // reset cached streams so they can be read again
-            MessageHelper.resetStreamCache(exchange.getIn());
-
             // prepare original IN body if it should be moved instead of current body
             if (data.useOriginalInMessage) {
                 if (log.isTraceEnabled()) {
                     log.trace(""Using the original IN message instead of current"");
                 }
                 Message original = exchange.getUnitOfWork().getOriginalInMessage();
                 exchange.setIn(original);
             }

+            // reset cached streams so they can be read again
+            MessageHelper.resetStreamCache(exchange.getIn());
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-03-27 10:37:52.347,,,no_permission,,,,,,,,,,,,,14186,,,Mon Mar 28 00:18:00 UTC 2011,,,,,,,0|i01wx3:,9102,,,,,,,,,27/Mar/11 10:37;davsclaus;Have you committed this? If so mark this ticket as resolved.,28/Mar/11 00:18;njiang;The patch is already committed into the trunk.,,,,,,,,,,,,,,,,,,,,,,
Property placeholder optimization broke placeholders in Spring camelContext configuration,CAMEL-6313,12644477,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,sdanig,sdanig,24/Apr/13 23:12,13/May/17 06:27,13/Mar/19 22:19,25/Apr/13 08:58,2.10.1,2.11.0,,,,,,,,2.10.5,2.11.1,2.12.0,,camel-spring,,,,,,0,,,,,,,,,"We are upgrading from 2.10.0 to 2.11.0, and are getting an error on startup.

Example Spring configuration:

{code:xml}<camelContext id=""camel"" handleFault=""true"" autoStartup=""{{autoStartup}}"" xmlns=""http://camel.apache.org/schema/spring"">
    <contextScan />
    <jmxAgent id=""camelAgent"" createConnector=""true"" registryPort=""{{jmxPort}}"" />
</camelContext>

<bean id=""properties"" class=""org.apache.camel.component.properties.PropertiesComponent"">
    <property name=""location"" value=""classpath:foo.properties""/>
</bean>
{code}

As you can see, we use the Camel properties component to configure Camel auto-startup, JMX port, etc.

This is the error we're getting on startup:

{code}org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'properties' defined in class path resource [org/apache/camel/component/properties/SpringPropertiesComponentTest.xml]: Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'camel-1': Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: PropertiesComponent with name properties must be defined in CamelContext to support property placeholders.
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:527)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:607)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:925)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:472)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:139)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:83)
	at org.apache.camel.component.properties.SpringPropertiesComponentTest.createApplicationContext(SpringPropertiesComponentTest.java:30)
	at org.apache.camel.spring.SpringTestSupport.setUp(SpringTestSupport.java:52)
	at junit.framework.TestCase.runBare(TestCase.java:139)
	at org.apache.camel.TestSupport.runBare(TestSupport.java:58)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'camel-1': Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: PropertiesComponent with name properties must be defined in CamelContext to support property placeholders.
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1455)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1109)
	at org.apache.camel.spring.CamelBeanPostProcessor$1.getOrLookupCamelContext(CamelBeanPostProcessor.java:69)
	at org.apache.camel.impl.DefaultCamelBeanPostProcessor.postProcessBeforeInitialization(DefaultCamelBeanPostProcessor.java:85)
	at org.apache.camel.spring.CamelBeanPostProcessor.postProcessBeforeInitialization(CamelBeanPostProcessor.java:148)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:394)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1448)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519)
	... 27 more
Caused by: java.lang.IllegalArgumentException: PropertiesComponent with name properties must be defined in CamelContext to support property placeholders.
	at org.apache.camel.impl.DefaultCamelContext.resolvePropertyPlaceholders(DefaultCamelContext.java:1063)
	at org.apache.camel.util.CamelContextHelper.parseBoolean(CamelContextHelper.java:337)
	at org.apache.camel.core.xml.AbstractCamelContextFactoryBean.initCamelContext(AbstractCamelContextFactoryBean.java:543)
	at org.apache.camel.core.xml.AbstractCamelContextFactoryBean.afterPropertiesSet(AbstractCamelContextFactoryBean.java:266)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1514)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1452)
	... 40 more{code}

I believe this is a side-effect of the optimization introduced in CAMEL-5508, which was incorporated into 2.10.1 and 2.11.0.

I'll attach a small patch that modifies one of the unit tests in the camel-spring component to reproduce the issue.",,,,,,,,,,,,,,CAMEL-11271,,,,,,,24/Apr/13 23:14;sdanig;camel-6313-test.patch;https://issues.apache.org/jira/secure/attachment/12580411/camel-6313-test.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-04-25 08:58:48.082,,,no_permission,,Unknown,,,,,,,,,,,324844,,,Thu Apr 25 08:58:48 UTC 2013,,,,,,,0|i1k1lr:,325190,Regression,,,,,,,,25/Apr/13 08:58;davsclaus;Thanks for reporting and the little patch.,,,,,,,,,,,,,,,,,,,,,,,
QuartzComponent with custom Scheduler and multiple contexts requires JMX to be enabled,CAMEL-7132,12688635,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,ndjensen,ndjensen,13/Jan/14 23:21,27/Aug/16 14:33,13/Mar/19 22:19,28/Jan/14 13:20,2.11.2,,,,,,,,,2.12.3,2.13.0,,,camel-quartz,,,,,,0,,,,,,,,,"If you have a custom Scheduler set on the QuartzComponent and multiple camel contexts per scheduler, then you must have JMX enabled for it work right.  Ideally, it should not require JMX to be enabled to work correctly.  Specifically, QuartzComponent.onCamelContextStarted(CamelContext, boolean) will make a map key that depends on the context's managementName, which is not set if JMX is not enabled.  Without a managementName, all contexts with quartz routes end up with a key named CamelQuartzCamelContext - null, and then when the CamelJob executes it will retrieve the wrong context.

Note we worked around this by injecting a custom LifecycleStrategy that sets the managementName in onContextStart().  But ideally we shouldn't have to do that.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-01-28 13:20:02.401,,,no_permission,,Unknown,,,,,,,,,,,367654,,,Sat Aug 27 14:33:32 UTC 2016,,,,,,,0|i1rde7:,367961,,,,,,,,,28/Jan/14 13:20;davsclaus;Thanks for reporting.,"24/Aug/16 08:51;githubbot;GitHub user YoshikiHigo opened a pull request:

    https://github.com/apache/camel/pull/1137

    Followup to CAMEL-7132

    This commit is a small followup to CAMEL-7132 (ca124fd2906071db794e6f539379be637144110a).
    
    Yoshiki, Shinpei, Hideaki, and Mei

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/YoshikiHigo/camel fix05

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1137.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1137
    
----
commit 098468ebda766dda500bd0f525787db80da7c083
Author: Yoshiki Higo <yoshiki.higo@gmail.com>
Date:   2016-08-24T08:45:45Z

    Followup to CAMEL-7132

----
","27/Aug/16 14:33;githubbot;Github user YoshikiHigo closed the pull request at:

    https://github.com/apache/camel/pull/1137
",,,,,,,,,,,,,,,,,,,,,
camel-bindy - Marshaling using CSV will insert wrong char separator if using an escaped separator char such as a pipe,CAMEL-4446,12522919,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,13/Sep/11 16:13,24/Jun/16 22:42,13/Mar/19 22:19,13/Sep/11 16:17,2.8.0,,,,,,,,,2.8.2,2.9.0,,,camel-bindy,,,,,,0,,,,,,,,,"When using bindy in CSV format with a separator in the model as ""\\|"" to denote a pipe character, then it does not work consistent for marshal and unmarshal. In marshal it will insert \ as separator, but it should use | instead.

See nabble
http://camel.465427.n5.nabble.com/bindy-different-behavior-between-marshal-and-unmarshal-with-pipe-separator-tp4798488p4798488.html",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-06-24 19:40:10.735,,,no_permission,,Unknown,,,,,,,,,,,13775,,,Fri Jun 24 19:40:10 UTC 2016,,,,,,,0|i020zb:,9760,,,,,,,,,"24/Jun/16 19:40;tlandich;With version:2.15.2, the bug remains.  The escape characters are still added into the Header Columns when marshaling back the object. 
e.g. 
   Separator = \ \ |

Output: 
   Header 1 \ | Header2 \ |... 

Pls. advise when we can expect the fix.  

Thanks.

",,,,,,,,,,,,,,,,,,,,,,,
Extra request parameters sent by the camel-http4 component,CAMEL-4768,12534751,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,xverges,xverges,12/Dec/11 09:01,16/Jun/16 13:08,13/Mar/19 22:19,13/Dec/11 08:42,2.8.3,,,,,,,,,2.7.5,2.8.4,2.9.0,,camel-http,,,,,,0,,,,,,,,,"Described in http://camel.465427.n5.nabble.com/Extra-Request-Params-sent-in-camel-HTTP-component-GET-request-td5042808.html

Route 
{code}
from(""jetty:http://0.0.0.0:8080/myapp/myservice"") 
.to(""http4://www.google.com/?q=camel&bridgeEndpoint=true&throwExceptionOnFailure=false""); 
{code}
sends to the server the {{bridgeEndpoint=true&throwExceptionOnFailure=false}} parameters,
while route 
{code}
from(""jetty:http://0.0.0.0:8080/myapp/myservice"") 
.to(""http://www.google.com/?q=camel&bridgeEndpoint=true&throwExceptionOnFailure=false""); 
{code}
behaves properly and removes them",jdk1.6.0_29; Windows XP,,,,,,,,,,,,,CAMEL-10064,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-12-13 08:42:47.964,,,no_permission,,Unknown,,,,,,,,,,,220435,,,Tue Dec 13 08:42:47 UTC 2011,,,,,,,0|i022yv:,10082,,,,,,,,,"13/Dec/11 08:42;njiang;Applied patch into trunk, 2.8.x and 2.7.x branch.",,,,,,,,,,,,,,,,,,,,,,,
Camel xmpp dynamic router is not sending incoming messages to openfire upon first failed groupchatroom join,CAMEL-6256,12641635,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,pshetty.kateel,pshetty.kateel,09/Apr/13 14:57,28/Apr/16 14:05,13/Mar/19 22:19,28/Apr/16 14:05,2.10.3,,,,,,,,,2.16.4,2.17.1,2.18.0,,camel-xmpp,,,,,,0,connection,groupchat,xmpp,,,,,,"Reference : http://camel.465427.n5.nabble.com/Camel-xmpp-dynamic-router-is-not-connecting-to-openfire-td5730506.html#a5730537

{code:xml} 
<camel:route id=""eventSubscriber"">
                        <camel:from uri=""ref:eventReceiverUri"" />
                         <camel:dynamicRouter>                  
                    <camel:method ref=""eventRouterBean"" method=""processEvent""/>
                </camel:dynamicRouter>
                </camel:route> 
{code}

In eventRouterBean's processEvent method, we are building xmpp groupchat room url depending upon the message and forwading the same message into respective groupchatrooms. 
If resulting groupchat room is not existing, it will log message 
WARN 2013-04-05 17:55:48,190 (UnitOfWorkProcessor.java processAsync:162) - Caught unhandled exception while processing ExchangeId: ID-INGBTCPIC8NB038-63130-1365164745141-0-3 
org.apache.camel.FailedToCreateProducerException: Failed to create Producer for endpoint: Endpoint[xmpp://<ip>:5222/?password=******&resource=zone_4fc100e4-d004-4a0b-a7e2-7cf910585af6_51&room=zone_4fc100e4-d004-4a0b-a7e2-7cf910585af6_51%40conference.test.com&serviceName=ispf.com&user=messagepublisher%40test.com]. Reason: not-allowed(405) 
        at org.apache.camel.impl.ProducerCache.doGetProducer(ProducerCache.java:395) 
        at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:278) 
        at org.apache.camel.processor.RoutingSlip.processExchange(RoutingSlip.java:280) 
        at org.apache.camel.processor.RoutingSlip.doRoutingSlip(RoutingSlip.java:205) 
        at org.apache.camel.processor.RoutingSlip.process(RoutingSlip.java:135) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
and ...... 
Caused by: not-allowed(405) 
        at org.jivesoftware.smackx.muc.MultiUserChat.join(MultiUserChat.java:501) 
        at org.apache.camel.component.xmpp.XmppGroupChatProducer.doStart(XmppGroupChatProducer.java:84) 
        at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60) 
        at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:62) 
        at org.apache.camel.impl.ProducerCache.doGetProducer(ProducerCache.java:393) 
        ... 40 more 

This is still fine. 
But issue is if I create a groupchat room in openfire, it should forward new incoming message to same groupchat room. But it is not forwarding.
It is keep on logging error message as 'Not connected to the server' repeatedly for all messages.

But if I restart the camel context, then it starts working. 
Looks like it is caching url and its connection as not allowed in dynamic router. 
What will be the solution? 
And even the exception is thowing at ProducerCache.doGetProducer().. 
So how to clear cache for failed connections?

",camel xmpp routing with openfire xmpp server.  Used groupchat configurations,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-04-16 15:17:10.338,,,no_permission,,Moderate,,,,,,,,,,,322051,,,Thu Apr 28 14:05:32 UTC 2016,,,,,,,0|i1jkdj:,322396,,,,,,,,,"09/Apr/13 15:01;pshetty.kateel;I just debugged using source code. 
It looks like bug in XmppEndpoint.createConnection method. 

If no groupchat room is avalilable, then XmppGroupChatProducer's method doStart;  chat.join() statement will throw exception. 
Upon this exception, ServiceSupport.stop() is trggered. This triggers XmppGroupChatProducer's doStop() method.  Here it disconnects the connection and sets to null. Till here pretty much ok. 
But XmppEndpoint's connection variable still holds the old connection object and it is in disconnected and unauthorised state. 

For next successive messages, XmppEndpoint.createConnection will return the old connection object, but it is in disconnected state.
Because of this, always we will have connection with disconnected and unauthenticated state. 
So I feel 'createConnection' not only need to check  for null, but also it should also check for connected state and authenticated state. 


If anyone feels 'XmppEndpoint.createConnection' is very much correct, then we need to modify XMPPGroupChatProducer's doStart() or doStop() method. 

I still feel need to correct XmppEndpoint.createConnection  method changes. 

---
Exception is thrown for 2nd and later messages at  chat = new MultiUserChat(connection, room); statement of XmppGroupChatProducer's doStart() method. 
Exception says 'Not connected to the server'. So It means that we need to reconnect and authenticate it if disconnected from earlier unit of work.

","16/Apr/13 11:39;pshetty.kateel;I just observed the codebase at head vesrion of  https://svn.apache.org/repos/asf/camel/trunk.

Here I can see the code changes as below.

File : org.apache.camel.component.xmpp.XmppEndpoint
Method : public synchronized XMPPConnection createConnection()
Changes : if (connection != null && connection.isConnected()) {       FROM     if (connection != null) {

Looks like, this change will fix this defect, I feel.   Need to test more.

Will this changes  go for Camel 2.11.0 release?
I tried to download src from http://apache.techartifact.com/mirror/camel/apache-camel/2.11.0/apache-camel-2.11.0-src.zip to verify the inclusion of this changes.
But link is not working yet.



","16/Apr/13 15:17;njiang;Hi Prakash

I just checked the change log of XmppEndpoint, the change is introduced by the patch of CAMEL-4224.
This change will be part of camel 2.11.0.
","17/Apr/13 07:03;pshetty.kateel;Thanks Willem for update.

I took only org.apache.camel.component.xmpp.XmppEndpoint class and testing my application.  It works fine and it is getting reconnected successfully and I can send messages 2nd time onwards.

But one more issue poped up.
On restarting of Openfire XMPP server and recreation of same group chat room, the connection is not re-joining to the particular groupchat room, but connection is really connected and authenticated.

I can see the following error code in Openfire server.
 <error code=""406"" type=""modify""><not-acceptable xmlns=""urn:ietf:params:xml:ns:xmpp-stanzas""/></error></message>
This comes generally, when user is not joined the groupchatroom.

I debuged the code.  Following is the observation:
In ProducerCache's doGetProducer method, it will return old 'XmppGroupCHatProducer' through statement Producer answer = producers.get(key);
It is always not null even after XMPP restart.  So it wont create new producer and it wont call ServiceHelper.startService(answer);  So XmppGroupCHatProducer's doStart() wont be called.
One more strange thing is org.jivesoftware.smackx.muc.MultiUserChat's isJoined is always true, event if connection is no joined the room. So we cannot use this flag also to rejoin.

I am not sure how to solve this.
This issue is on 2.10.3

I feel, I need to check with whole new 2.11.0 codebase.

Or I probably need to raise one more defect..


","17/Apr/13 07:15;pshetty.kateel;Also note that, on restarting of Openfire, we are deleting groupchat rooms.  I mean we are creating non-Persistent chat rooms. So it goes off on restart and our application will recreate based on user request dynamically. 
That is the reason we are using dynamic router and also creating dynamic resource for same user in xmpp connection url to avoid 'Already logged in' error.","28/Apr/16 14:05;davsclaus;The stale connection is not kept anymore, but only a working connection is set to be used.",,,,,,,,,,,,,,,,,,
SoapJaxbDataFormat not handling correctly SOAP action with request wrapper element,CAMEL-6720,12667585,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,c0stra,c0stra,09/Sep/13 14:04,28/Apr/16 12:46,13/Mar/19 22:19,28/Apr/16 12:46,2.12.0,,,,,,,,,2.16.4,2.17.1,2.18.0,,camel-soap,,,,,,2,,,,,,,,,"If an interface to be used as SOAP service interface is configured to have parameters wrapped in a request wrapper element (eg. using @RequestWrapper),
then an attempt to invoke a its method will throw NPE:

{code}
java.lang.NullPointerException
	at org.apache.camel.dataformat.soap.name.ServiceInterfaceStrategy.findQNameForSoapActionOrType(ServiceInterfaceStrategy.java:207)
	at org.apache.camel.dataformat.soap.SoapJaxbDataFormat.createContentFromObject(SoapJaxbDataFormat.java:208)
	at org.apache.camel.dataformat.soap.Soap11DataFormatAdapter.doMarshal(Soap11DataFormatAdapter.java:77)
	at org.apache.camel.dataformat.soap.SoapJaxbDataFormat.marshal(SoapJaxbDataFormat.java:141)
	at org.apache.camel.processor.MarshalProcessor.process(MarshalProcessor.java:59)
{code}

The reason for this is sequence of following:
# The ServiceInterfaceStrategy is creating a mapping of methods to MethodInfo.
# In case of RequestWrapper, the wrapper class is used as a single input TypeInfo, and no TypeInfo is being held for the real parameters.
# At method invocation, it tries to lookup the TypeInfo in the MethodInfo, but for the real parameter class, and it only contains mapping for the request wrapper. So it fails with NPE.",,,,,,,,,,,,,,,,,,,,,12/Feb/14 12:27;movees;ServiceInterfaceStrategy.java;https://issues.apache.org/jira/secure/attachment/12628473/ServiceInterfaceStrategy.java,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-09-11 08:23:18.253,,,no_permission,,Unknown,,,,,,,,,,,347522,,,Thu Apr 28 12:46:36 UTC 2016,,,,,,,0|i1nxbj:,347821,,,,,,,,,11/Sep/13 08:23;davsclaus;An unit test to demonstrate this bug would be great. And as usual patches is welcome to fix this as well.,12/Feb/14 12:27;movees;Patched ServiceInterfaceStrategy,"12/Feb/14 12:27;movees;The problem seems to be fixed by commenting out the following line 99, method ""private List<TypeInfo> getInInfo(Method method)"":

//typeInfos.add(new TypeInfo(null, null));

I've been using the patched jar for a while without noticing problems. Is the TypeInfo(null, null) required in other methods?

Sorry I'm not submitting a proper patch, I'm new in Jira.","12/Feb/14 12:31;c0stra;I'm currently out of office. I'll return on Wendesday 2nd January.


",10/Feb/15 10:59;PSPaul;This bug is still happening to me in Camel 2.14.1. Is there or will there be any fix?,16/Feb/15 19:42;davsclaus;It would help if the people who uses this component dive in and help with this issue. ,28/Apr/16 12:46;davsclaus;Thanks Movee for the idea for the fix.,,,,,,,,,,,,,,,,,
camel cdi uses postconstruct to inject in cdi beans,CAMEL-6336,12646237,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,romain.manni-bucau,romain.manni-bucau,06/May/13 15:56,20/Nov/15 18:08,13/Mar/19 22:19,10/Jul/15 10:01,2.11.0,,,,,,,,,2.16.0,,,,camel-cdi,,,,,,0,,,,,,,,,org.apache.camel.cdi.internal.CamelExtension#onInjectionTarget uses InjectionTarget#postConstruct instead of inject() to inject camel injections. That's not really consistent since postconstruct is done once injections are done because they can be used in post construct methods.,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-03-02 11:31:35.606,,,no_permission,,Unknown,,,,,,,,,,,326595,,,Fri Jul 10 10:01:17 UTC 2015,,,,,,,0|i1kce7:,326940,,,,,,,,,02/Mar/14 11:31;davsclaus;Patches is welcome,10/Jul/15 10:01;davsclaus;Thanks for the suggestion,,,,,,,,,,,,,,,,,,,,,,
DefaultShutdownStrategy shutdown timeout of 0 will never timeout and go in negative time,CAMEL-6341,12646433,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,lleclerc,lleclerc,07/May/13 16:09,06/Oct/15 20:37,13/Mar/19 22:19,17/May/13 13:50,2.11.0,,,,,,,,,2.10.5,2.11.1,2.12.0,,camel-core,,,,,,0,,,,,,,,,"A timeout of 0 won't timeout in the instant, the time will go negative. 

camelcontext.stopRoute(routeId, 0, TimeUnit.SECONDS, false); 

[org.apache.camel.impl.DefaultShutdownStrategy] : Waiting as there are still 3 inflight and pending exchanges to complete, timeout in -1 seconds.
[org.apache.camel.impl.DefaultShutdownStrategy] : Waiting as there are still 3 inflight and pending exchanges to complete, timeout in -2 seconds.
[org.apache.camel.impl.DefaultShutdownStrategy] : Waiting as there are still 3 inflight and pending exchanges to complete, timeout in -3 seconds. 

Found a post related to it there : http://camel.465427.n5.nabble.com/Forcefully-shutting-down-routes-td5722447.html",,,,,,,,,,,,,,,,,,,,,08/May/13 15:28;lleclerc;shutdownStrategy8may2013.patch;https://issues.apache.org/jira/secure/attachment/12582305/shutdownStrategy8may2013.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-05-08 06:05:32.457,,,no_permission,,Novice,,,,,,,,,,,326791,,,Tue Oct 06 09:53:45 UTC 2015,,,,,,,0|i1kdlj:,327136,,,,,,,,,"08/May/13 06:05;davsclaus;Luc, do you want to work on a patch? We should possible validate that the timeout option is a positive number, and not allow 0 or negative values.",08/May/13 15:28;lleclerc;patch (not tested),"09/May/13 01:48;njiang;I just checked the code, as there is some inflight exchange, the ShutdownTask will keep waiting for it.
I think we need to check the timeout value before trying to wait for the inflight exchanges are clean.","09/May/13 07:10;davsclaus;I think its better to require the timeout value to be positive, eg > 0.
Then you don't need that special if its 0 check etc.","17/May/13 13:47;davsclaus;Working on a bit better fix so we always require a timeout value, as using 0 do not make sense. And when the timeout was hit, and the task was stuck in that while loop with the (there are still X) then we detect the timeout now, and leave the loop and force shutdown the consumers and remainder part. Which otherwise was only done if we interrupted the sleep thread.","06/Oct/15 09:53;mykolap;Issue marked as fixed but I'm using 2.15.3 and still have this problem

12:48:59,864 INFO  [org.apache.camel.impl.DefaultShutdownStrategy] (Camel (interprocCamelContext) thread #56904 - timer://InteractiveAppRetryProcessor) Waiting as there are still 1 inflight and pending exchanges to complete, timeout in -25754 seconds. Inflights per route: [InteractiveProcessor_Retry_4 = 1]
12:49:00,865 INFO  [org.apache.camel.impl.DefaultShutdownStrategy] (Camel (interprocCamelContext) thread #56904 - timer://InteractiveAppRetryProcessor) Waiting as there are still 1 inflight and pending exchanges to complete, timeout in -25755 seconds. Inflights per route: [InteractiveProcessor_Retry_4 = 1]
12:49:01,865 INFO  [org.apache.camel.impl.DefaultShutdownStrategy] (Camel (interprocCamelContext) thread #56904 - timer://InteractiveAppRetryProcessor) Waiting as there are still 1 inflight and pending exchanges to complete, timeout in -25756 seconds. Inflights per route: [InteractiveProcessor_Retry_4 = 1]
12:49:02,866 INFO  [org.apache.camel.impl.DefaultShutdownStrategy] (Camel (interprocCamelContext) thread #56904 - timer://InteractiveAppRetryProcessor) Waiting as there are still 1 inflight and pending exchanges to complete, timeout in -25757 seconds. Inflights per route: [InteractiveProcessor_Retry_4 = 1]
12:49:03,866 INFO  [org.apache.camel.impl.DefaultShutdownStrategy] (Camel (interprocCamelContext) thread #56904 - timer://InteractiveAppRetryProcessor) Waiting as there are still 1 inflight and pending exchanges to complete, timeout in -25758 seconds. Inflights per route: [InteractiveProcessor_Retry_4 = 1]
12:49:04,866 INFO  [org.apache.camel.impl.DefaultShutdownStrategy] (Camel (interprocCamelContext) thread #56904 - timer://InteractiveAppRetryProcessor) Waiting as there are still 1 inflight and pending exchanges to complete, timeout in -25759 seconds. Inflights per route: [InteractiveProcessor_Retry_4 = 1]
12:49:05,867 INFO  [org.apache.camel.impl.DefaultShutdownStrategy] (Camel (interprocCamelContext) thread #56904 - timer://InteractiveAppRetryProcessor) Waiting as there are still 1 inflight and pending exchanges to complete, timeout in -25760 seconds. Inflights per route: [InteractiveProcessor_Retry_4 = 1]

When using hawtio it simply hangs when I try to view properties of Camel Contexts

I am using camel with activemq, but there are no inflight messages in activemq...
",,,,,,,,,,,,,,,,,,
File consumer - When using done file name then delete the file when batch is complete,CAMEL-5883,12624242,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,davsclaus,davsclaus,17/Dec/12 08:51,27/Apr/15 14:53,13/Mar/19 22:19,17/Jul/13 08:47,2.10.0,2.9.0,,,,,,,,2.10.7,2.11.2,2.12.0,2.9.7,camel-core,,,,,,0,,,,,,,,,"When using doneFileName then the file is deleted on each completion of files in the batch. And you get WARN logs about the done file cannot be deleted, because the 1st already deleted the file.

We should defer and only delete the done file on the last in the batch.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-07-11 02:08:12.905,,,no_permission,,Unknown,,,,,,,,,,,299006,,,Mon Apr 27 14:53:36 UTC 2015,,,,,,,0|i15xx3:,242795,,,,,,,,,"11/Jul/13 02:08;njiang;The patch doesn't take the dynamic done file into consideration. 
Here is a [discussion|http://camel.465427.n5.nabble.com/Done-file-not-deleted-tp5735497.html] about it.
","27/Apr/15 14:53;dornseif;There is a real issue with multiple done files that needs addressed.  Only removing the last done file is not an acceptable solution in every case.  This discussion http://camel.465427.n5.nabble.com/Done-file-not-deleted-td5735497.html#a5766387 indicated this jira would be re-opened.  Could you please review and maybe as part of the fix add a boolean to allow deleting multiple done files?  I think the concept of multiple done files is a real world case.

Tom
",,,,,,,,,,,,,,,,,,,,,,
java.io.IOException: Permission denied from MarkerFileExclusiveReadLockStrategy.acquireExclusiveReadLock on NAS,CAMEL-6069,12631881,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,andersmholmgren,andersmholmgren,12/Feb/13 04:19,18/Feb/15 11:14,13/Mar/19 22:19,12/Feb/13 08:47,2.10.3,,,,,,,,,2.10.4,2.11.0,,,camel-core,,,,,,0,,,,,,,,,"We recently upgraded to 2.10.x and discovered that the file poller no longer works on our NAS. We have hit similar issues with other open source libraries in the past.

The problem occurs when MarkerFileExclusiveReadLockStrategy.acquireExclusiveReadLock is called and tries to create the new file. This actually works but also results in a Permission denied IOException (strange but true). 

A simple fix for this is to change the acquireExclusiveReadLock method as follows. 

{code}
    public boolean acquireExclusiveReadLock(GenericFileOperations<File> operations,
                                            GenericFile<File> file, Exchange exchange) throws Exception {
        String lockFileName = getLockFileName(file);
        LOG.trace(""Locking the file: {} using the lock file name: {}"", file, lockFileName);

        // create a plain file as marker filer for locking (do not use FileLock)
        File lock = new File(lockFileName);
        boolean acquired = false;
        try
        {
            acquired = lock.createNewFile();
        }
        catch (IOException e)
        {
            if (lock.exists())
            {
                acquired = true;
            }
            else
            {
                throw e;
            }
        }

        return acquired;
    }
{code}

Note the same problem occurring with Spring Batch can be found [here|https://jira.springsource.org/browse/BATCH-1659] ",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-02-12 08:47:09.476,,,no_permission,,Unknown,,,,,,,,,,,312377,,,Wed Feb 18 11:14:26 UTC 2015,,,,,,,0|i1hwon:,312723,,,,,,,,,12/Feb/13 08:47;davsclaus;Thanks for reporting.,14/Feb/13 03:29;andersmholmgren;thanks Claus,"18/Feb/15 11:14;barisacar;[~andersmholmgren] - are you _certain_ that it was the thread/process that raised the exception that created the file, and not some other process?

We are having problems with the current implementation as per your proposal, as it introduces race conditions into the locking mechanism, and allows multiple threads or processes to lock the same file at once.
See http://camel.465427.n5.nabble.com/FileUtil-createNewFile-race-condition-issue-td5762853.html#a5762897",,,,,,,,,,,,,,,,,,,,,
Wrong <property /> type definition in camel-spring.xsd,CAMEL-7094,12686307,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,o_nix,o_nix,24/Dec/13 15:28,05/Feb/15 14:56,13/Mar/19 22:19,05/Feb/15 14:56,2.12.2,,,,,,,,,2.15.0,,,,camel-blueprint,camel-spring,,,,,0,,,,,,,,,"It defines *<property />* as following:

{code:xml}
<xs:element name=""property"" nillable=""true"" type=""xs:anyType""/>
{code}

via

{code:xml}
<xs:complexType name=""propertiesDefinition"">
  <xs:sequence>
    <xs:element ref=""tns:property"" minOccurs=""0"" maxOccurs=""unbounded""/>
  </xs:sequence>
</xs:complexType>
{code}

but I believe that it should be a link to the existing

{code:xml}
<xs:complexType name=""propertyDefinition"">
  <xs:sequence/>
  <xs:attribute name=""key"" type=""xs:string"" use=""required""/>
  <xs:attribute name=""value"" type=""xs:string"" use=""required""/>
</xs:complexType>
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-01-04 08:55:08.771,,,no_permission,,Unknown,,,,,,,,,,,365287,,,Thu Feb 05 08:54:14 UTC 2015,,,,,,,0|i1qynz:,365590,,,,,,,,,"04/Jan/14 08:55;davsclaus;The schema is auto generated and JAXB has a problem when there is multiple classes with the same type name (eg ""property""). So we will look into this in Camel 3.0 where the schema can be adjusted.

The <properties> still work fine, for end users, if they set the tags as documented.",23/Jul/14 08:50;davsclaus;Yeah I think we need to slight adjust the xsd so setting properties for CamelContext should use a different name so there is no clash.,05/Feb/15 08:54;davsclaus;We have a chance to get this fixed now,,,,,,,,,,,,,,,,,,,,,
Message headers with uppercase letters not matched by jxpath,CAMEL-6807,12671565,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,pjanata,pjanata,01/Oct/13 12:24,30/Nov/14 16:53,13/Mar/19 22:19,30/Nov/14 16:53,2.10.4,,,,,,,,,2.15.0,,,,,,,,,,0,,,,,,,,,"{{DefaultMessage}} uses {{CaseInsensitiveMap}} for storing headers. If header name contains uppercase characters, then jxpath expression with correct case will not match.

E.g. header named _fooBarBaz_ on ""in"" message will not be matched by following jxpath expression:
{code:xml}
<jxpath>/in/headers/fooBarBaz = something</jxpath>
{code}
JXPath evaluates nodes that match the fooBarBaz name and uses the keySet() to obtain candidates. The problem is that CaseInsensitiveMap.keySet() returns the converted internal keys, instead of the original keys.

*Is it possible to override the keySet() method of CaseInsensitiveMap to return the original keys?* Then a user will not be unpleasantly surprised that his key is not in the key set.

{code:title=CaseInsensitiveMap.java|borderStyle=solid}
@Override
public Set<String> keySet()
{
    return originalKeys.values();
}
{code}


There are two workarounds possible but neither of them is nice in my eyes.
# use only lowercase header names
# register custom DynamicPropertyHandler in JXPath

Ad 1. this probably wasn't the intention. User must rely on implementation of private method {{CaseInsensitiveMap.assembleKey()}}. This then defeats the purpose of case insensitiveness.

Ad 2. custom property handler must be registered via {{JXPathIntrospector.registerDynamicClass()}} ""in the start"", e.g. before anybody calls {{JXPathIntrospector.getBeanInfo()}}. In our projects it was enough to declare an extra eagerly-instantiated singleton Spring bean.
{code:xml}
<bean class=""CaseInsensitiveMapPropertyHandler""
		init-method=""init""
		autowire-candidate=""false""
		lazy-init=""false"" />
{code}",JXPath used as Expression language,,,,,,,,,,,,,,,,,,,CAMEL-8095,01/Oct/13 12:29;pjanata;CaseInsensitiveMapPropertyHandler.java;https://issues.apache.org/jira/secure/attachment/12606092/CaseInsensitiveMapPropertyHandler.java,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-10-03 10:30:18.998,,,no_permission,,Unknown,,,,,,,,,,,351275,,,Sun Nov 30 16:53:03 UTC 2014,,,Patch Available,,,,0|i1okef:,351567,,,,,,,,,03/Oct/13 10:30;davsclaus;Thanks for reporting. Do you mind working on an unit test as well?,"03/Oct/13 10:33;davsclaus;We should work on a better solution so you do not need to do anything special, 
so having an unit test would be nice. ",30/Nov/14 16:53;davsclaus;Got a solution for #1,,,,,,,,,,,,,,,,,,,,,
camel-smpp - fails to correctly send messages that require UCS-2 encoding,CAMEL-7224,12695932,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,daniel.pocock,daniel.pocock,19/Feb/14 11:44,07/Nov/14 03:14,13/Mar/19 22:19,07/Nov/14 03:14,2.12.2,,,,,,,,,2.13.4,2.14.1,2.15.0,,camel-smpp,,,,,,0,,,,,,,,,"If I try to send a string without any config options or headers to indicate alphabet/data coding/encoding, it appears to be sent using an 8 bit character set even if a 16 bit UCS-2 encoding is required.

If I try to set CamelSmppAlphabet=-1 (for unknown) as a header, an invalid message is sent to the SMPP peer and it is rejected with SMPP error code 00000401

If I try to set alphabet=-1 in the endpoint config though and if I also set CamelSmppDataCoding=8 then it correctly sends a UCS-2 message.

Looking at the code (particularly the method SmppSmCommand.determineCharset()), it seems that it can ONLY send UCS-2 if alphabet == UNKNOWN_ALPHABET.  Using the value UNKNOWN_ALPHABET (-1) as a header triggers the problem with the SMPP peer so I can only set that value in the endpoint config.  This determineCharset() method should also recognise alphabet == ALPHA_UCS2
",any,,,,,,,,,,,,,,,,,,,,06/Nov/14 14:32;daniel.pocock;determineCharset_fix.patch;https://issues.apache.org/jira/secure/attachment/12679843/determineCharset_fix.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-03-05 21:00:15.49,,,no_permission,,Unknown,,,,,,,,,,,374410,,,Fri Nov 07 03:14:06 UTC 2014,,,Patch Available,,,,0|i1sirj:,374710,,,,,,,,,"05/Mar/14 21:00;muellerc;Daniel, do you consider to provide a patch for it?","27/Apr/14 10:20;daniel.pocock;The patch submitted for the related issue CAMEL-7225 may help in working around this.

It would be really helpful if the documentation on the camel-smpp page explained the difference between alphabet and coding attributes as they are different attributes that relate to the same thing.  This would make it easier for somebody to contribute a patch.",27/Apr/14 17:21;muellerc;There is no patch attached to [CAMEL-7225 |https://issues.apache.org/jira/browse/CAMEL-7225].,"29/Apr/14 05:30;davsclaus;Daniel you are welcome to help improve the docs. See
http://camel.apache.org/contributing

Or attach a .txt file to this JIRA ticket with your doc improvement suggestion, and we can grab that and add to the docs.",26/Jun/14 18:24;davsclaus;Assume implemented by CAMEL-7225,"06/Nov/14 14:21;daniel.pocock;This is not the same as the other issue, I have developed a separate patch for it.","06/Nov/14 14:40;daniel.pocock;I would suggest applying this patch on 2.14, 2.13 and 2.12 as it is very trivial patch that fixes a definite bug without changing any API or risking any other regression.","07/Nov/14 03:14;njiang;Applied the patch into camel master, camel-2.14.x and camel-2.13.x with thanks to Daniel.",,,,,,,,,,,,,,,,
ServiceInterfaceStrategy fails to create with interface containing multiple methods without parameters,CAMEL-6716,12667544,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,c0stra,c0stra,09/Sep/13 10:56,20/May/14 06:09,13/Mar/19 22:19,13/May/14 14:24,2.12.0,,,,,,,,,2.12.4,2.13.2,2.14.0,,camel-soap,,,,,,0,,,,,,,,,"I you attempt to create a ServiceInterfaceStrategy with interface containing multiple methods without parameters, you get NullPointerException.

It's due to following code:
ServiceInterfaceStrategy.java:161
{code}
155    private void analyzeServiceInterface(Class<?> serviceInterface) {
156        Method[] methods = serviceInterface.getMethods();
157        for (Method method : methods) {
158            MethodInfo info = analyzeMethod(method);
159            for (int i = 0; i < info.getIn().length; i++) {
160                TypeInfo ti = info.getIn()[i];
161                if (inTypeNameToQName.containsKey(ti.getTypeName())
162                    && (!(ti.getTypeName().equals(""javax.xml.ws.Holder"")))
163                    && (!(inTypeNameToQName.get(ti.getTypeName()).equals(ti.getElName())))) {
164                    LOG.warn(""Ambiguous QName mapping. The type [ ""
165                                                    + ti.getTypeName()
166                                                    + "" ] is already mapped to a QName in this context."");
167                    continue;
168                }
169                inTypeNameToQName.put(ti.getTypeName(), ti.getElName());
170            }
171            if (info.getSoapAction() != null && !"""".equals172(info.getSoapAction())) {
172                soapActionToMethodInfo.put(info.getSoapAction(), info);
173            }
174
175            outTypeNameToQName.put(info.getOut().getTypeName(), info.getOut().getElName());
176
177            addExceptions(method);
178        }
179    }
{code}

For the second method without parameters, the null value is already in the inTypeNameToQName, so it tries to evaluate this: !(ti.getTypeName().equals(""javax.xml.ws.Holder""), which fails with NPE.

The question here is, why method without parameters still needs an array of types containing one element with those null values.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-09-11 08:23:52.955,,,no_permission,,Novice,,,,,,,,,,,347481,,,Tue May 20 06:09:50 UTC 2014,,,,,,,0|i1nx2f:,347780,,,,,,,,,11/Sep/13 08:23;davsclaus;Patches is welcome,"10/May/14 20:15;githubbot;GitHub user ancosen opened a pull request:

    https://github.com/apache/camel/pull/147

    [CAMEL-6716] ServiceInterfaceStrategy fails to create with interface containing multiple methods without parameters

    Hi all,
    
    This pull requeste is related to:
    https://issues.apache.org/jira/browse/CAMEL-6716
    
    I've added a second method without parameter in the customerservice.wsdl and add an assert in the **testServiceInterfaceStrategyWithClient** method of **ServiceInterfaceStrategyTest** Test class.
    
    Hope this should be useful and it will be merged.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ancosen/camel camel-6716-serviceinterfacestrategyfix

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/147.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #147
    
----
commit 7b96bde38f16b4c42af543d9a3d4b94913af26f3
Author: ancosen <ancosen@gmail.com>
Date:   2014-05-09T10:06:02Z

    Added new Properties Component Test related to concatenation of properties. First test fails because of unsupported parsing properties.

commit 8fe696c02738baaf4d299a01386a4018c1e0c6e4
Author: ancosen <ancosen@gmail.com>
Date:   2014-05-09T10:14:56Z

    Reload Pom.xml

commit 6e59877da99ef208e699284c05221f0c318e1c33
Author: ancosen <ancosen@gmail.com>
Date:   2014-05-10T15:48:13Z

    Fixes Camel-6716: ServiceInterfaceStrategy fails to create with interface containing multiple methods without parameters

commit d551e36d0c484d6e8603fda73da0d08aea7618e3
Author: ancosen <ancosen@gmail.com>
Date:   2014-05-10T20:06:34Z

    Fixes 6716: ServiceInterfaceStrategy fails to create with interface containing multiple methods without parameters

----
","10/May/14 21:08;githubbot;Github user ancosen closed the pull request at:

    https://github.com/apache/camel/pull/147
","10/May/14 21:09;githubbot;GitHub user ancosen opened a pull request:

    https://github.com/apache/camel/pull/148

    Fixes 6716: ServiceInterfaceStrategy fails to create with interface containing multiple methods without parameters

    Hi all,
    
    This pull requeste is related to:
    https://issues.apache.org/jira/browse/CAMEL-6716
    
    I've added a second method without parameter in the customerservice.wsdl and add an assert in the **testServiceInterfaceStrategyWithClient** method of **ServiceInterfaceStrategyTest** Test class.
    
    Hope this should be useful and it will be merged.
    
    P.S.: I've closed the other pull request and submitted this new one.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ancosen/camel camel-6716-serviceinterfacestrategy

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/148.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #148
    
----
commit 493d725ed30b012590622e812cab9d0282e60964
Author: ancosen <ancosen@gmail.com>
Date:   2014-05-09T10:06:02Z

    Fixes 6716: ServiceInterfaceStrategy fails to create with interface containing multiple methods without parameters

----
","10/May/14 21:11;ancosen;Sorry for this two pull request. I've close the first one, and submitted a new one.

Hope it should be helpful.","13/May/14 14:24;njiang;Applied the patch into camel master, camel-2.13.x and camel-2.12.x branches with thanks to Andrea","20/May/14 06:09;githubbot;Github user ancosen closed the pull request at:

    https://github.com/apache/camel/pull/148
",,,,,,,,,,,,,,,,,
Timer component - Should defer scheduling tasks during startup of CamelContext,CAMEL-5542,12605050,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,27/Aug/12 08:51,18/Mar/14 11:46,13/Mar/19 22:19,27/Aug/12 09:15,2.10.0,,,,,,,,,2.10.2,2.11.0,2.9.4,,camel-core,,,,,,0,,,,,,,,,We should defer scheduling timer tasks during startup of CamelContext. As they may fire very fast. We should defer this using a StartupListener just as we do with quartz component etc.,,,,,,,,,,,,,,CAMEL-7308,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-03-17 16:17:30.415,,,no_permission,,Unknown,,,,,,,,,,,241414,,,Mon Mar 17 16:17:30 UTC 2014,,,,,,,0|i027q7:,10853,,,,,,,,,"27/Aug/12 09:05;davsclaus;It was easier to check in the consumer if camel context status is started, to allow running.

I have also change the delay default from 0 to 1000, to wait 1 sec before firing as well. Just in case to not fire out of the box too fast.","27/Aug/12 09:15;davsclaus;Fixed the timer firing during startup of Camel.

The default value of {{delay}} has only been changed in Camel 2.11.","17/Mar/14 16:17;metatech;For the record, this changes creates a regression for our routes when migrating from ServiceMix 4.4 to ServiceMix 4.5.
The secondary route in which we use this timer populates a cache, which must be initialized before other primary routes in the bundle can use it, otherwise requests sent to these other routes will generate errors.
In our ServiceMix installation with all the other bundles, the bundle with the timer can take from 1 second to 30 seconds to start-up, depending on the machine speed and the number of other bundles which are installed/started at the same time.  
It is therefore very difficult to estimate the time to define for the ""delay"" variable.  If set too low, the first fire will be ignored and the other primary routes will generate errors until the timer second fire. If set too high, the other primary routes will generate errors until the timer first fire.  
Normally the timer period is set to refresh the cache every several minutes, which leaves a large window where requests end with an error in case the cache failed to initialize.
A solution with a StartupListener would effectively reduce the window of errors to a fraction of a second.
Also, it would help to debug these kind of problems if a ""warn"" log is added when the first timer fire is ignored.
Can you suggest any ""wise"" way to solve this problem ?
Thanks.",,,,,,,,,,,,,,,,,,,,,
IAE with calling String.replaceAll via simple expression in Karaf,CAMEL-7262,12698404,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,joni.nousiainen,joni.nousiainen,03/Mar/14 11:58,14/Mar/14 04:27,13/Mar/19 22:19,04/Mar/14 06:15,2.12.2,2.12.3,,,,,,,,2.11.5,2.12.4,2.13.0,,camel-core,karaf,,,,,0,,,,,,,,,"I have a Camel route along which I do something like this:

{code}
<setHeader headerName=""CamelHttpPath"">
  <simple>/resource/${headers.RESOURCE_ID.replaceAll(""/"", ""%2F"")}</simple>
</setHeader>
{code}

The header _RESOURCE_ID_ is a String. I have JUnit test set up for the route and it passes OK. But when I deploy my bundle to Karaf I get the following exception:

{code}
org.apache.camel.language.bean.RuntimeBeanExpressionException: Failed to invoke method: .replaceAll(""/"", ""%2F"") on null due to: org.apache.camel.language.bean.RuntimeBeanExpressionException: Failed to invoke method: replaceAll(""/"", ""%2F"") on null due to: java.lang.IllegalArgumentException: name must be specified and not empty
	at org.apache.camel.language.bean.BeanExpression.evaluate(BeanExpression.java:117)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.language.bean.BeanExpression.evaluate(BeanExpression.java:132)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.model.language.ExpressionDefinition.evaluate(ExpressionDefinition.java:121)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.model.language.ExpressionDefinition.evaluate(ExpressionDefinition.java:113)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.builder.ExpressionBuilder$KeyedOgnlExpressionAdapter.evaluate(ExpressionBuilder.java:1814)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.support.ExpressionAdapter.evaluate(ExpressionAdapter.java:36)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.builder.ExpressionBuilder$58.evaluate(ExpressionBuilder.java:1381)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.support.ExpressionAdapter.evaluate(ExpressionAdapter.java:36)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.builder.SimpleBuilder.evaluate(SimpleBuilder.java:83)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.builder.ProcessorBuilder$4.process(ProcessorBuilder.java:103)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:163)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:118)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:51)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:110)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:163)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:573)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:506)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.MulticastProcessor.process(MulticastProcessor.java:215)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:163)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:118)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:573)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:506)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.MulticastProcessor.process(MulticastProcessor.java:215)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.Splitter.process(Splitter.java:98)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:163)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:573)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:506)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.MulticastProcessor.process(MulticastProcessor.java:215)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:163)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:118)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:573)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:506)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.MulticastProcessor.process(MulticastProcessor.java:215)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.Splitter.process(Splitter.java:98)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:163)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:51)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:110)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:163)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.FilterProcessor.process(FilterProcessor.java:58)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:163)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:118)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:401)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:201)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:165)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:187)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:114)[73:org.apache.camel.camel-core:2.12.2]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)[:1.7.0_51]
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:304)[:1.7.0_51]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:178)[:1.7.0_51]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)[:1.7.0_51]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)[:1.7.0_51]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)[:1.7.0_51]
	at java.lang.Thread.run(Thread.java:744)[:1.7.0_51]
Caused by: org.apache.camel.language.bean.RuntimeBeanExpressionException: Failed to invoke method: replaceAll(""/"", ""%2F"") on null due to: java.lang.IllegalArgumentException: name must be specified and not empty
	at org.apache.camel.language.bean.BeanExpression$OgnlInvokeProcessor.process(BeanExpression.java:285)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.language.bean.BeanExpression.evaluate(BeanExpression.java:114)[73:org.apache.camel.camel-core:2.12.2]
	... 90 more
Caused by: java.lang.IllegalArgumentException: name must be specified and not empty
	at org.apache.camel.util.ObjectHelper.notEmpty(ObjectHelper.java:331)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.core.osgi.OsgiClassResolver.doLoadClass(OsgiClassResolver.java:87)[76:org.apache.camel.camel-spring:2.12.2]
	at org.apache.camel.core.osgi.OsgiClassResolver.resolveClass(OsgiClassResolver.java:47)[76:org.apache.camel.camel-spring:2.12.2]
	at org.apache.camel.component.bean.BeanHelper.isAssignableToExpectedType(BeanHelper.java:121)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.component.bean.MethodInfo$2.evaluateParameterValue(MethodInfo.java:515)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.component.bean.MethodInfo$2.evaluate(MethodInfo.java:472)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.component.bean.MethodInfo.createMethodInvocation(MethodInfo.java:239)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.component.bean.BeanInfo.createInvocation(BeanInfo.java:278)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.component.bean.BeanInfo.createInvocation(BeanInfo.java:180)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:148)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:105)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:67)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.language.bean.BeanExpression$InvokeProcessor.process(BeanExpression.java:189)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.language.bean.BeanExpression$OgnlInvokeProcessor.process(BeanExpression.java:281)[73:org.apache.camel.camel-core:2.12.2]
	... 91 more
{code}

The notable difference seems to be that the JUnit test uses {{DefaultClassResolver}} instead of {{OsgiClassResolver}} which is used in Karaf.","Karaf version: 2.3.3
JDK/JRE: Oracle JDK 1.7.0_51
OS: Windows 7 Pro",,,,,,,,,,,,,CAMEL-7294,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-03-04 06:14:30.719,,,no_permission,,Unknown,,,,,,,,,,,376762,,,Tue Mar 04 06:14:30 UTC 2014,,,,,,,0|i1sx8f:,377057,,,,,,,,,"04/Mar/14 06:14;njiang;I just committed a patch into camel master, camel-2.12.x and camel-2.11.x branches to fix the NPE issue in the OsgiClassResolver.",,,,,,,,,,,,,,,,,,,,,,,
onException should enable backoff if backOffMultiplier is in use - just as errorHandler does,CAMEL-7282,12699827,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,10/Mar/14 18:32,11/Mar/14 07:16,13/Mar/19 22:19,11/Mar/14 07:16,,,,,,,,,,2.13.0,,,,camel-core,,,,,,0,,,,,,,,,"Lets keep this change on the new release only.

See nabble
http://camel.465427.n5.nabble.com/diagnosing-onException-problem-tp5748474.html",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,378173,,,2014-03-10 18:32:15.0,,,,,,,0|i1t5w7:,378465,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-quartz - use of management name to provide default scheduler name breaks context isolation,CAMEL-7276,12699151,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,ukcrpb6,ukcrpb6,06/Mar/14 13:41,09/Mar/14 07:33,13/Mar/19 22:19,09/Mar/14 07:33,2.12.3,,,,,,,,,2.12.4,2.13.0,,,camel-quartz,,,,,,0,,,,,,,,,"When using the camel-quartz component in an unmanged context with multiple camel contexts, for example in a JUnit test case, causes the scheduler to be created with the instance name ""DefaultQuartzScheduler"" which is then shared across all camel context's within the same jvm.

This is in contradiction of the previous behaviour that uses `getCamelContext.getName()` which isolates the scheduler by denoting that the default instance is specific to the camel context.

{code}
package org.apache.camel.component.quartz;

import org.apache.camel.CamelContext;
import org.apache.camel.impl.DefaultCamelContext;
import org.apache.camel.management.JmxSystemPropertyKeys;
import org.junit.Test;
import org.quartz.Scheduler;
import org.quartz.SchedulerException;

import static org.junit.Assert.assertNotEquals;
import static org.junit.Assert.assertNotSame;

/**
 * Test regression of camel-context isolation of default scheduler instance introduced in CAMEL-7034.
 */
public class QuartzComponentCamelContextSchedulerIsolationTest {

  @Test
  public void testSchedulerIsolation_unmanaged() throws Exception {
    disableJMX();
    testSchedulerIsolation();
  }

  @Test
  public void testSchedulerIsolation_managed() throws Exception {
    enableJMX();
    testSchedulerIsolation();
  }

  private void testSchedulerIsolation() throws Exception {
    CamelContext context = createCamelContext();
    context.start();

    CamelContext anotherContext = createCamelContext();
    assertNotEquals(anotherContext.getName(), context.getName());
    assertNotEquals(anotherContext, context);

    assertNotSame(getDefaultScheduler(context), getDefaultScheduler(anotherContext));
  }

  /**
   * Create a new camel context instance.
   */
  private DefaultCamelContext createCamelContext() {
    return new DefaultCamelContext();
  }

  /**
   * Get the quartz component for the provided camel context.
   */
  private QuartzComponent getQuartzComponent(CamelContext context) {
    return context.getComponent(""quartz"", QuartzComponent.class);
  }

  /**
   * Get the default scheduler for the provided camel context.
   */
  private Scheduler getDefaultScheduler(CamelContext context) throws SchedulerException {
    return getQuartzComponent(context).getFactory().getScheduler();
  }

  /**
   * Disables the JMX agent.
   */
  private void disableJMX() {
    System.setProperty(JmxSystemPropertyKeys.DISABLED, ""true"");
  }

  /**
   * Enables the JMX agent.
   */
  private void enableJMX() {
    System.setProperty(JmxSystemPropertyKeys.DISABLED, ""false"");
  }

}
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,377498,,,2014-03-06 13:41:37.0,,,,,,,0|i1t1rb:,377792,Regression,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[cxfrs] Producer override bean bus,CAMEL-7229,12696259,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,amarkevich,amarkevich,20/Feb/14 14:44,03/Mar/14 10:06,13/Mar/19 22:19,03/Mar/14 10:06,2.12.1,,,,,,,,,2.11.5,2.12.4,2.13.0,,camel-cxf,,,,,,0,,,,,,,,,"Bean configuration:
org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean cf_cCXFRS_1 = new org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean();
cf_cCXFRS_1.setBus(customBus);

Route:
.to(""cxfrs://bean://cCXFRS_1"")

But at
org.apache.camel.component.cxf.jaxrs.CxfRsProducer.invokeHttpClient(Exchange)
cfb.setBus(((CxfRsEndpoint)getEndpoint()).getBus());",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-02-26 11:11:56.463,,,no_permission,,Unknown,,,,,,,,,,,374735,,,Mon Mar 03 10:06:28 UTC 2014,,,,,,,0|i1skrr:,375035,,,,,,,,,"26/Feb/14 11:11;sergey_beryozkin;Hi Willem, can we just remove this call where the custom producer bus is lost ?

If this may be done for a reason to take care of some scenarios (where using the thread default bus is not OK), can we, in CxfRsProducer do something like:

{code:java}

private static class ProducerJAXRSClientFactoryBean extends JAXRSClientFactoryBean {

   public isBusSet() {
       return super.bus != null;
   }
}
{code}

and use ProducerJAXRSClientFactoryBean instead of JAXRSClientFactoryBean within the producer code and then

{code:java}

if (!cfb.isBusSet()) {
    cfb.setBus(((CxfRsEndpoint)getEndpoint()).getBus());
}

{code}

Introducing the custom bean may be the safest bet...

What do you think ?
Sergey","26/Feb/14 11:58;sergey_beryozkin;If the custom bean is introduced then it can be dropped once CXF-5579 is resolved, we'd check ""if (cxf.getBus(false) == null)""","27/Feb/14 08:50;njiang;Hi Sergey,

The below code of CxfRsProducer just make sure the bus setting on the cxfrs endpoint can take effect.
{code}
 cfb.setBus(((CxfRsEndpoint)getEndpoint()).getBus());
{code}
Current work around of setting custom bus is using option of ""bus=#MyBus"" for the cxfrs enpdoint the URI. 
If we check the ""if (cxf.getBus(false) == null)"", we may lost the control of setting the custom bus from the URI.

I think the better solution is we set the cfb bus when the cxfrs enpdoint is not using the default bus.
Any thought?

Willem
","27/Feb/14 11:28;sergey_beryozkin;Hi Willem 

May be ""If cxfrs endpoint is not using the default bus and if the client bean has either null or the default bus"" ?

This way if we have a case where someone sets a custom, non-default bus on the client bean then it will not be overridden, but if it is null or it is a default bus then we can safely copy the custom cxfrs endpoint bus ?

Cheers, Sergey

",27/Feb/14 11:55;amarkevich;Same time Consumer works as expected (I used preconfigured beans),"28/Feb/14 03:00;njiang;Hi Sergey, 

In camel-cxf we prefer the rule that the URI option can override the spring or blueprint configuration.
As the client bean's getBus can provides the default bus by default, we don't need to do anything on the client bean if the cxfrs endpoint is not set with a customer bus.

Regards,

Willem

","28/Feb/14 03:02;njiang;Hi Alexey,

I just checked the code and found we don't override the bus setting of the server bean. I will clean up the code once we come to an agreement on the CxfRsProducer.

Regards,

Willem","28/Feb/14 10:11;sergey_beryozkin;Hi Willem

Sure, the idea in your original comment above [1] sounds OK. So,

1. If the route sets a custom bus on the client bean then it will still be protected/kept in place as long as the the endpoint uses a default bus or the same custom bus.
(this will work after your proposed fix)

2. If we have the client bean using the default bus and we have the endpoint using a custom bus as in ""bus=#MyBus"" then the custom bus will be set on the client bean, as per the camel-cxf rules, this is fine too.
(this works now and will work after your proposed fix)

There's only one case I'm concerned about:
3. The client and the server have both custom but different buses. 

That is why I thought that the rule "" (a)Set the client bus only if the cxfrs endpoint is not using the default bus and (b) the client bean has the default bus"" will ensure 1. and 2. cases are still supported as expected today, but we the client does set its own unique bus then this bus is protected. It will probably make sense for WS producers too...
Note (a) - is what you propose, which is good, and (b) is what I propose to add...

Do you think it makes sense to keep the non-default custom buses on the client bean ? We have it working right now by extending the client bean and blocking the overriding of the bus, so if 3, is not implemented then it won't be an issue for us, but I wonder, does it makes sense to preserve the custom client buses or not

Thanks, Sergey




","28/Feb/14 10:16;sergey_beryozkin;Yes, we've confirmed we a client and a server using their own, different custom bus instances, this is why it can be handy to have the client custom bus preserved; should be useful for the WS producer too IMHO.

Thanks, Sergey","03/Mar/14 09:43;njiang;Hi Sergey,

Thanks for you comments, I just remove the default bus creation in the CxfRsEndpoint, so we don't need to setup the default bus to the JAXRSClientFactoryBean or JAXRSServerFactoryBean any more.
In this way, the bus setting of JAXRSClientFactoryBean and JAXRSServerFactoryBean won't be override if we don't set up customer bus on the CxfRsEndpoint.

Regards,

Willem","03/Mar/14 10:06;njiang;Applied the patch into master, camel-2.12.x and camel-2.11.x branches.",,,,,,,,,,,,,
org.apache.camel.model.dataformat.XmlJsonDataFormat settings assignments are misplaced.,CAMEL-7258,12697918,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,raulvk,alexlomov,alexlomov,28/Feb/14 12:59,28/Feb/14 19:46,13/Mar/19 22:19,28/Feb/14 19:29,2.12.2,2.12.3,,,,,,,,2.11.5,2.12.4,2.13.0,,camel-core,,,,,,0,patch,,,,,,,,"""elementName"" value is assigned to ""encoding"" field, ""arrayName"" is assigned to ""elementName"" field when using XmlJsonDataFormat(Map<String, String> options) constructor.",Any,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-02-28 13:33:48.158,,,no_permission,,Novice,,,,,,,,,,,376392,,,Fri Feb 28 19:46:24 UTC 2014,,,,,,,0|i1suyf:,376688,,,,,,,,,"28/Feb/14 13:33;githubbot;GitHub user alexlomov opened a pull request:

    https://github.com/apache/camel/pull/105

    CAMEL-7258 fix.

    CAMEL-7258 fix for XmlJsonDataFormat.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/alexlomov/camel CAMEL-7258_XmlJsonDataFormat

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/105.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #105
    
----
commit 23f5a1d6038a8002308e893c35db2e7f80a780f9
Author: Alexander Lomov <alexandr.lomov@gmail.com>
Date:   2014-02-28T13:26:58Z

    CAMEL-7258 fix.

----
","28/Feb/14 19:28;raulvk;Many thanks for the patch! Applied to master (2.13.x), 2.12.x and 2.11.x branches. 

[~alexlomov] - I forgot to quote your name and thank you in the commit message, but GitHub will hopefully pick up the closure of the pull request, so it will be credited to you!",28/Feb/14 19:29;raulvk;Also added 2 unit tests for JSON arrays marshalling and unmarshalling.,"28/Feb/14 19:46;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/105
",,,,,,,,,,,,,,,,,,,,
System property org.apache.camel.jmx.createRmiConnector is ignored with spring xml,CAMEL-6740,12668304,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,ssogabe,ssogabe,12/Sep/13 17:17,25/Feb/14 23:39,13/Mar/19 22:19,14/Sep/13 10:31,2.11.1,2.12.0,,,,,,,,2.10.7,2.11.2,2.12.1,2.13.0,camel-spring,,,,,,0,jmx,,,,,,,,"Specifying system property ""-Dorg.apache.camel.jmx.createRmiConnector=false"" to diable JmxConenctor is ignored with the following spring xml.

       <camelContext xmlns=""http://camel.apache.org/schema/spring"">
           <jmxAgent id=""jmxAgent"" />
           :
           :



","camel git master, camel-spring",,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-09-14 10:31:51.196,,,no_permission,,Unknown,,,,,,,,,,,348238,,,Tue Feb 25 23:39:31 UTC 2014,,,Patch Available,,,,0|i1o1pr:,348534,,,,,,,,,12/Sep/13 17:42;ssogabe;created https://github.com/apache/camel/pull/43,14/Sep/13 10:31;davsclaus;Thanks for the patch. I kept the default value as-is in camel-core to not change that.,"25/Feb/14 23:39;githubbot;Github user ssogabe closed the pull request at:

    https://github.com/apache/camel/pull/43
",,,,,,,,,,,,,,,,,,,,,
Incorrect implementation of the method StringHelper.hasStartToken(),CAMEL-7155,12691648,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,trohovsky,trohovsky,28/Jan/14 15:04,21/Feb/14 14:43,13/Mar/19 22:19,17/Feb/14 08:08,2.12.2,,,,,,,,,2.12.3,2.13.0,,,camel-core,,,,,,0,,,,,,,,,"From the semantic point of view the method hasStartToken() should return false in case of an expression without language specified, i.e. starting with ""${"". 

However, it is correct to return true in current usage of hasStartToken() in camel-core, i.e. checking if an expression is in simple language, since if the expression does not contain the language token, then it is a simple expression.

The method calls for checking of simple language should be replaced with a newly created method isSimpleLanguage(String expression) that would check if the language is a simple expression, i.e. hasStartToken(expression, ""simple"") || expression.indexOf(""${"") >= 0.
",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-02-03 14:17:59.787,,,no_permission,,Novice,,,,,,,,,,,370393,,,Mon Feb 17 08:08:42 UTC 2014,,,,,,,0|i1ru93:,370714,,,,,,,,,"03/Feb/14 14:17;davsclaus;Thomas, are you working on a patch?",17/Feb/14 08:08;njiang;Applied the patch into camel-2.12.x and master branches.,,,,,,,,,,,,,,,,,,,,,,
CxfRsEndpoint should accept in/out interceptors and properties,CAMEL-7207,12695259,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,sergey_beryozkin,sergey_beryozkin,14/Feb/14 18:29,21/Feb/14 14:43,13/Mar/19 22:19,18/Feb/14 13:22,,,,,,,,,,2.12.3,2.13.0,,,,,,,,,0,,,,,,,,,"CXF interceptors can be reused quite well with CXFRS, they can also be shared between RS & WS endpoints; contextual properties can be very useful too ",,,,,,,,,,,,,,,,,,,,,17/Feb/14 13:07;sergey_beryozkin;camel7207.txt;https://issues.apache.org/jira/secure/attachment/12629374/camel7207.txt,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-02-18 12:43:49.179,,,no_permission,,Unknown,,,,,,,,,,,373767,,,Wed Feb 19 12:14:21 UTC 2014,,,,,,,0|i1set3:,374067,,,,,,,,,"17/Feb/14 13:07;sergey_beryozkin;CxfRsEndpoint updated to have a shared code for setting the common server & client properties (providers, features, interceptors and properties)
- two tests added so far to validate the custom properties get injected; the test is failing and the help on getting them fixed will be appreciated; more tests will be added afterwards","18/Feb/14 12:43;njiang;The failed test is caused by AbstractCxfBeanDefinitionParser puts the beanId into properties map by default.
Applied the patch into camel master branch with thanks to Sergey.
",19/Feb/14 12:14;sergey_beryozkin;thanks,,,,,,,,,,,,,,,,,,,,,
tokenizeXml fails when attributes have a / in them,CAMEL-7125,12688278,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,mattnathan,mattnathan,10/Jan/14 16:57,21/Feb/14 14:43,13/Mar/19 22:19,07/Feb/14 09:38,2.12.2,,,,,,,,,2.11.4,2.12.3,2.13.0,,camel-core,,,,,,0,,,,,,,,,"{{tokenizeXml}} does not work or produce value xml output when attributes contain a {{/}}.

The test below will fail under 2.12.2

{code:java}
import org.apache.camel.EndpointInject;
import org.apache.camel.Produce;
import org.apache.camel.ProducerTemplate;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.mock.MockEndpoint;
import org.apache.camel.test.junit4.CamelTestSupport;
import org.junit.Test;

public class CamelTokenizeXmlTest extends CamelTestSupport {

  @EndpointInject(uri = ""mock:result"")
  protected MockEndpoint resultEndpoint;
  @Produce(uri = ""direct:start"")
  protected ProducerTemplate template;

  @Test
  public void testXmlWithSlash() throws Exception {
    String message = ""<parent><child attr='/' /></parent>"";
    resultEndpoint.expectedBodiesReceived(""<child attr='/' />"");
    template.sendBody(message);
    resultEndpoint.assertIsSatisfied();
  }

  @Override
  protected RouteBuilder createRouteBuilder() {
    return new RouteBuilder() {
      @Override
      public void configure() {
        from(""direct:start"").split().tokenizeXML(""child"").to(""mock:result"");
      }
    };
  }
}
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-02-06 14:33:37.823,,,no_permission,,Unknown,,,,,,,,,,,367297,,,Fri Feb 07 09:38:02 UTC 2014,,,,,,,0|i1rb7r:,367606,,,,,,,,,"10/Jan/14 17:08;mattnathan;Fails in the same way (no message received) under: 2.12.2, 2.12.1, 2.12.0, 2.11.2, 2.11.1

Fails with the following error under 2.11.0:

{noformat}
java.lang.AssertionError: mock://result Body of message: 0. Expected: <<child attr='/' />> but was: <<child attr='/' /></parent></child>>
	at org.apache.camel.component.mock.MockEndpoint.fail(MockEndpoint.java:1318)
	at org.apache.camel.component.mock.MockEndpoint.assertEquals(MockEndpoint.java:1300)
	at org.apache.camel.component.mock.MockEndpoint$5.run(MockEndpoint.java:613)
	at org.apache.camel.component.mock.MockEndpoint.doAssertIsSatisfied(MockEndpoint.java:383)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:351)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:339)
{noformat}",06/Feb/14 14:33;davsclaus;The regular expression used by the parser may need to take this into account. To deal with skipping / in quoted strings.,"07/Feb/14 09:38;njiang;Applied the patch into master, camel-2.12.x and camel-2.11.x branches.",,,,,,,,,,,,,,,,,,,,,
Language endpoint with constant cannot load from classpath,CAMEL-7219,12695730,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,18/Feb/14 16:43,21/Feb/14 14:42,13/Mar/19 22:19,18/Feb/14 17:36,2.12.2,,,,,,,,,2.11.5,2.12.3,2.13.0,,camel-core,,,,,,0,,,,,,,,,"A route as
{code}
                from(""direct:start"")
                    .to(""language:constant:resource:classpath:org/apache/camel/component/language/hello.txt"")
                    .to(""mock:result"");
{code}

does not work as expected.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,374238,,,2014-02-18 16:43:51.0,,,,,,,0|i1shpb:,374538,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
getComponentDocumentation does not work if component name has dash in name,CAMEL-7210,12695404,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,16/Feb/14 13:53,21/Feb/14 14:41,13/Mar/19 22:19,16/Feb/14 14:13,2.12.0,,,,,,,,,2.12.3,2.13.0,,,camel-core,,,,,,0,,,,,,,,,"For example if component is direct-vm we cannot load the component docs. Also the ftp components has special location.
",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,373912,,,2014-02-16 13:53:19.0,,,,,,,0|i1sfp3:,374212,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wrong package for PollingConsumerPollStrategy in documentation,CAMEL-7232,12696495,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,agdula,agdula,21/Feb/14 10:44,21/Feb/14 12:34,13/Mar/19 22:19,21/Feb/14 12:33,2.12.2,,,,,,,,,,,,,documentation,,,,,,0,,,,,,,,,"description of *pollStrategy* of File2 endpoint and Polling Consumer parameter is documentet to be an instance of *org.apache.camel.PollingConsumerPollStrategy*. There is no such class. It should be  *org.apache.camel.spi.PollingConsumerPollStrategy*




",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-02-21 12:33:20.04,,,no_permission,,Unknown,,,,,,,,,,,374971,,,Fri Feb 21 12:33:20 UTC 2014,,,,,,,0|i1sm7z:,375270,,,,,,,,,"21/Feb/14 12:33;hekonsek;Thanks Andrew. Well spotted :) . I've just fixed it - the changes should be visible on the page within next 24 hours.

Cheers.",,,,,,,,,,,,,,,,,,,,,,,
Find component names should discover all available components in OSGi,CAMEL-7202,12694949,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,13/Feb/14 09:49,13/Feb/14 10:26,13/Mar/19 22:19,13/Feb/14 10:26,2.12.0,,,,,,,,,2.12.3,2.13.0,,,camel-core,osgi,,,,,0,,,,,,,,,We only discover the currently in used components. But if other components has been installed (but not in use) we should be able to discover them as well.,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,373457,,,Thu Feb 13 10:26:27 UTC 2014,,,,,,,0|i1scwf:,373757,,,,,,,,,13/Feb/14 10:26;davsclaus;See also CAMEL-7188.,,,,,,,,,,,,,,,,,,,,,,,
"AbstractListAggregationStrategy : at the end of the split, the body is not replaced by the agregated list",CAMEL-7167,12693101,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,yvesdm,yvesdm,04/Feb/14 13:10,05/Feb/14 11:57,13/Mar/19 22:19,05/Feb/14 11:57,2.12.1,,,,,,,,,2.12.3,2.13.0,,,camel-core,,,,,,0,,,,,,,,,"Using a class that extends AbstractListAggregationStrategy to rebuild a List after the completion of the split cause the body not to be replaced by the agregated list at the end of the split.

In other words (AbstractListAggregationStrategy.onCompletion(Exchange exchange) is never called.


Here is what I do :

from(HANDLE_A_LIST)//
            .split(body(), new ListAggregationStrategy())// body is an arrayList of String
            .to(""log:foo"")//
            .end()// end split
            // the body is a string instead of a List
            .end()// end route

   
class ListAggregationStrategy extends AbstractListAggregationStrategy<String>
    {

        @Override
        public String getValue(Exchange exchange)
        {
            return exchange.getIn().getBody();
        }
    }

As workaround, I use .setBody(property(Exchange.GROUPED_EXCHANGE)) after the end of the split.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-02-05 11:11:47.328,,,no_permission,,Unknown,,,,,,,,,,,371687,,,Wed Feb 05 11:11:47 UTC 2014,,,,,,,0|i1s227:,371987,,,,,,,,,05/Feb/14 11:11;davsclaus;Thanks for reporting. Yeah the onCompletion was currently only in use with the aggregate eip. Should do the same for split and the others as well.,,,,,,,,,,,,,,,,,,,,,,,
Default value on jmxAgent createConnector should be 'false',CAMEL-7173,12693313,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,preben,preben,05/Feb/14 09:55,05/Feb/14 10:46,13/Mar/19 22:19,05/Feb/14 10:44,2.12.2,,,,,,,,,2.13.0,,,,camel-blueprint,camel-spring,jmx,,,,0,,,,,,,,,"The defalult value is set to true. Should have been false

see http://camel.465427.n5.nabble.com/disabeling-loadStatistics-td5746709.html",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-02-05 10:14:14.587,,,no_permission,,Unknown,,,,,,,,,,,371898,,,Wed Feb 05 10:46:14 UTC 2014,,,,,,,0|i1s3cn:,372202,,,,,,,,,"05/Feb/14 10:14;davsclaus;Its a flag change which could break stuff for people in patch upgrades, so doing this on 2.13 onwards only.","05/Feb/14 10:46;davsclaus;Ah well the docs so its optional, and thus indicates its false by default. So lets consider this as a bug, despite the default value is in the XSD.",,,,,,,,,,,,,,,,,,,,,,
camel-netty - Some options in netty configuration do not support # lookup,CAMEL-7172,12693305,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,05/Feb/14 09:11,05/Feb/14 10:09,13/Mar/19 22:19,05/Feb/14 10:09,2.12.2,,,,,,,,,2.12.3,2.13.0,,,camel-netty,,,,,,0,,,,,,,,,"For example passphrase does not support passphrase=#myPassword, to lookup a bean with that id that produces the password to use.

There is a few others as well.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,371890,,,2014-02-05 09:11:39.0,,,,,,,0|i1s3av:,372194,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
XmlConverter cannot convert from ElementNSImpl to Document,CAMEL-6922,12677019,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,arseniy,arseniy,01/Nov/13 07:57,29/Jan/14 05:07,13/Mar/19 22:19,28/Jan/14 16:27,2.11.2,,,,,,,,,2.11.4,2.12.3,2.13.0,,camel-core,,,,,,1,converter,dom,xml,,,,,,"XmlConvertor cannot convert from org.apache.xerces.dom.ElementNSImpl to org.w3c.dom.Document. Class ElementNSImpl implements both interfaces org.w3c.dom.Node and org.w3c.dom.NodeList. While type converter lookup iterates from ElementNSImpl through it's superclasses and implemented interfaces, it reaches NodeList first. Therefore the
{color:green}
Node toDOMNodeFromSingleNodeList(NodeList)
{color}

method is selected for conversion. However this method returns null for any NodeList with more than one node. This leads to null in a message's body.
This issue is not detected on Linux, because on Oracle JDK lookup reaches Node before NodeList and the
{color:green}
Document toDOMDocument(Node)
{color}

method is selected for conversion.","HP-UX, JDK 6.14, 7.06",,,,,,,,,,,,,,,,,,,,18/Dec/13 22:23;rene avontuur;NodeListToDocumentTest.java;https://issues.apache.org/jira/secure/attachment/12619422/NodeListToDocumentTest.java,19/Dec/13 22:32;rene avontuur;patchfile.txt;https://issues.apache.org/jira/secure/attachment/12619679/patchfile.txt,,,,,2.0,,,,,,,,,,,,,,,,,,,2013-11-10 10:19:59.074,,,no_permission,,Novice,,,,,,,,,,,356395,,,Wed Jan 29 05:07:46 UTC 2014,,,,,,,0|i1pfuv:,356683,,,,,,,,,"10/Nov/13 10:19;davsclaus;What JDK are you using?

The Oracle JDK on osx, the ElementNSImpl class only implements Node (does NOT implement NodeList)",10/Nov/13 10:20;davsclaus;And do you have a sample unit test or something to use?,"18/Dec/13 22:23;rene avontuur;I wrote a unit test for this issue, which is attached as NodeListToDoumentTest.java.
It shows that ElementNSImpl implements the NodeList interface, the responsible superclass is NodeImpl.
This unit test passes on my machine, running an Oracle JDK.

The same unit test fails, after making the following change in
class BaseTypeConverterRegistry:

            // try the interfaces (in reverse order)
            for (int i=fromType.getInterfaces().length-1;i>=0;i--) {
                Class<?> type = fromType.getInterfaces()[i];

instead of:
            // try the interfaces
            for (Class<?> type : fromType.getInterfaces()) 

This may explain why a different JDK may have an issue with this conversion.","19/Dec/13 22:32;rene avontuur;I added a patch file (patchfile.txt), which will most likely solve this issue.
After this patch, if toDOMDocumentFromSingleNodeList(Nodelist) is selected for conversion, then a second try using toDOMDocument(Node) will occur if applicable.
The attached unit test is not really fit for inclusion in the camel-core project, but helpful for debugging purposes.",28/Jan/14 16:27;davsclaus;Thanks for reporting and the patch.,29/Jan/14 05:07;arseniy;Did you have a chance to test the fix on HP-UX Java? On Oracle Java the issue does not occur.,,,,,,,,,,,,,,,,,,
CsvDataFormat unmarshal overwrites delimiter in static CSVStrategy strategies,CAMEL-7142,12689565,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,bvahdat,johnsdouglass,johnsdouglass,17/Jan/14 20:08,18/Jan/14 12:15,13/Mar/19 22:19,18/Jan/14 12:15,2.12.2,,,,,,,,,2.11.4,2.12.3,2.13.0,,camel-csv,,,,,,0,easyfix,,,,,,,,"The unmarshal function in CsvDataFormat contains the following line:

{code}
strategy.setDelimiter(config.getDelimiter());
{code}

This can cause problems when multiple CsvDataFormats are used which rely on the default CSVStrategy or one of the other static CSVStrategy objects.

Here is sample code to demonstrate the problem:
 
{code}
final CsvDataFormat csv = new CsvDataFormat();
final CsvDataFormat tsv = new CsvDataFormat();
tsv.setDelimiter(""\t"");

context.addRoutes(new RouteBuilder() {
    @Override
    public void configure() throws Exception {
        from(""file:///tmp/?include=.*.csv"")
                .unmarshal(csv)
                .process(new MyProcessor());
        from(""file:///tmp/?include=.*.tsv"")
                .unmarshal(tsv)
                .process(new MyProcessor());
    }
});
{code}

Running the code above with several files with 2 lines, 9 columns per line and comma or tab delimiters returns the following (the exact values may be different from run to run):

{code}
File: 0.tsv, lines: 2
  Line 1 columns: 9
  Line 2 columns: 9
File: 0.csv, lines: 2
  Line 1 columns: 1
  Line 2 columns: 1
File: 1.csv, lines: 2
  Line 1 columns: 2
  Line 2 columns: 1
File: 1.tsv, lines: 2
  Line 1 columns: 9
  Line 2 columns: 9
{code}

These should all show 9 columns.

Adding the following lines corrects the problem, because each DataFormat has its own CSVStrategy:

{code}
csv.setStrategy(new CSVStrategy(',', '""', '#'));
tsv.setStrategy(new CSVStrategy('\t', '""', '#'));
{code}

The suggested fix would be for the CsvDataFormat to have its own copy of its CSVStrategy instead of using what amounts to a pointer to another CSVStrategy. Perhaps setStrategy should be changed to do that. This is tedious because CSVStrategy has no copy constructor and has many properties, but would be a defensive way to do it.

Note also that the example at http://camel.apache.org/csv.html under ""Unmarshalling with a pipe as delimiter"" actually alters the CSVStrategy.DEFAULT_STRATEGY, so any subsequent CsvDataFormat objects created would have a pipe as the delimiter.
",,3600,3600,,0%,3600,3600,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-01-18 11:43:36.957,,,no_permission,,Novice,,,,,,,,,,,368532,,,Sat Jan 18 12:15:35 UTC 2014,,,,,,,0|i1riqn:,368836,,,,,,,,,"18/Jan/14 11:43;bvahdat;Luckily {{CSVStrategy}} has widen the visibility of {{Object#clone()}} method from {{protected}} to {{public}}, so that we can easily make a safe copy of a given {{CSVStrategy}} object when necessary.",18/Jan/14 12:15;bvahdat;Thanks for reporting.,,,,,,,,,,,,,,,,,,,,,,
NullPointerException on BindyFixedLengthFactory.unbind(),CAMEL-7120,12688155,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,jreagan,jreagan,09/Jan/14 22:46,10/Jan/14 09:29,13/Mar/19 22:19,10/Jan/14 09:29,2.12.0,,,,,,,,,2.11.4,2.12.3,2.13.0,,camel-bindy,,,,,,0,,,,,,,,,"The Camel Bindy component throws a NullPointerException on unbind when you've specified a header, but no footer. It looks like there was a simple copy/paste error in the marshal method. When generating the models, it checks the headerRow for null and then adds the headerRow. It then checks the headerRow (not the footerRow) for null and then adds the footerRow. Later down the chain, the BindyFixedLengthFactory throws a null exception when it tries to call getName() on the model Class.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-01-10 09:29:40.143,,,no_permission,,Novice,,,,,,,,,,,367175,,,Fri Jan 10 09:29:40 UTC 2014,,,,,,,0|i1ragn:,367484,,,,,,,,,10/Jan/14 09:29;davsclaus;Thanks for reporting.,,,,,,,,,,,,,,,,,,,,,,,
camel-facebook - Error when calling endpoint with options from header and configuration bean,CAMEL-6822,12672303,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,ebondu,ebondu,04/Oct/13 08:51,04/Jan/14 13:35,13/Mar/19 22:19,04/Jan/14 13:35,2.12.1,,,,,,,,,2.12.3,2.13.0,,,camel-facebook,,,,,,0,,,,,,,,,"When the camel-facebook endpoint is called with a set of options from headers and configuration bean, an NPE is throwed.

Here an example route :

<bean id=""facebook"" class=""org.apache.camel.component.facebook.config.FacebookConfiguration"">
  <property name=""oAuthAppId"" value=""**********""/>
  <property name=""oAuthAppSecret"" value=""******************""/>
</bean>
<route id=""consumeFacebookPage"">
         <from uri=""direct:consumeFacebookPage""/>
         <setHeader headerName=""CamelFacebook.query"">
          <simple>SELECT page_id FROM page WHERE name='Apache Camel'</simple>
         </setHeader>
                 
         <to uri=""facebook://executeFQL""/>
</route>",,,,,,,,,,,,,,,,,,,,,04/Oct/13 08:53;ebondu;camel.patch;https://issues.apache.org/jira/secure/attachment/12606759/camel.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-10-21 13:45:49.324,,,no_permission,,Unknown,,,,,,,,,,,351929,,,Sat Jan 04 13:35:57 UTC 2014,,,Patch Available,,,,0|i1ooen:,352217,,,,,,,,,04/Oct/13 08:53;ebondu;Here the patch.,"21/Oct/13 13:45;davsclaus;Do you have the stacktrace when this error happens?

And if its possible to create an unit test that reproduces the issue and passes with the fix, then that would be great","21/Oct/13 18:44;ebondu;This is the stacktrace  :

Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: facebook://executeFQL due to: null
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:528)
	at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:63)
	at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:192)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:106)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:112)
	at org.apache.camel.model.SendDefinition.resolveEndpoint(SendDefinition.java:61)
	at org.apache.camel.model.SendDefinition.createProcessor(SendDefinition.java:55)
	at org.apache.camel.model.ProcessorDefinition.createProcessor(ProcessorDefinition.java:460)
	at org.apache.camel.model.ProcessorDefinition.createOutputsProcessor(ProcessorDefinition.java:429)
	at org.apache.camel.model.ProcessorDefinition.createOutputsProcessor(ProcessorDefinition.java:159)
	at org.apache.camel.model.ProcessorDefinition.createChildProcessor(ProcessorDefinition.java:178)
	at org.apache.camel.model.FilterDefinition.createFilterProcessor(FilterDefinition.java:72)
	at org.apache.camel.model.FilterDefinition.createProcessor(FilterDefinition.java:66)
	at org.apache.camel.model.FilterDefinition.createProcessor(FilterDefinition.java:34)
	at org.apache.camel.model.ProcessorDefinition.makeProcessor(ProcessorDefinition.java:500)
	at org.apache.camel.model.ProcessorDefinition.addRoutes(ProcessorDefinition.java:213)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:909)
	... 47 more
Caused by: java.lang.NullPointerException
	at java.lang.String.startsWith(String.java:1421)
	at java.lang.String.startsWith(String.java:1450)
	at org.apache.camel.util.IntrospectionSupport.setProperties(IntrospectionSupport.java:410)
	at org.apache.camel.util.IntrospectionSupport.setProperties(IntrospectionSupport.java:424)
	at org.apache.camel.component.facebook.FacebookComponent.copyComponentProperties(FacebookComponent.java:66)
	at org.apache.camel.component.facebook.FacebookComponent.createEndpoint(FacebookComponent.java:56)
	at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:120)
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:508)
	... 63 more

I will try to provide you a unit test ASAP.",04/Jan/14 13:35;davsclaus;Thanks for reporting. I spotted the NPE mistake in the facebook component.,,,,,,,,,,,,,,,,,,,,
Tokenize XML does not support self-closing XML tokens,CAMEL-6004,12628991,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,gheidorn,gheidorn,24/Jan/13 02:22,03/Jan/14 10:35,13/Mar/19 22:19,23/Jun/13 08:26,2.10.2,,,,,,,,,2.10.6,2.11.1,2.12.0,,camel-core,,,,,,0,,,,,,,,,Tokenize creates non-well-formed XML when handling self-closing XML tokens.  Tokenize should support parsing tokens that are either have a closing tag or are self-closing.,,,,,,,,,,,,,,CAMEL-6940,,CAMEL-6607,,,,,24/Jan/13 02:23;gheidorn;GenericTokenizeTest.java;https://issues.apache.org/jira/secure/attachment/12566239/GenericTokenizeTest.java,21/Jun/13 17:54;ay;camel-6004.patch;https://issues.apache.org/jira/secure/attachment/12589112/camel-6004.patch,,,,,2.0,,,,,,,,,,,,,,,,,,,2013-01-24 04:39:40.407,,,no_permission,,Moderate,,,,,,,,,,,308609,,,Fri Jan 03 10:35:27 UTC 2014,,,,,,,0|i1cqq7:,282461,,,,,,,,,24/Jan/13 02:23;gheidorn;JUnit that illustrates how tokenizeXML falls down when the tokens are self-closing.,"24/Jan/13 04:39;njiang;Hi,

I just checked the code of Tokenize, it only works after setting the startToken and endToken. So it is not strange that it doesn't support the self-closing XML. As it doesn't has the pair startToken and endToken.

If you want to make your route support the those XML at the same time, you make consider to use the xpath expression like this
{code}
 protected RouteBuilder createRouteBuilder() {
        return new RouteBuilder() {
            public void configure() {
                from(""direct:start"").split().xpath(""//child"").to(""mock:result"");
            }
        };
    }
{code}

You will get the result like this in you two test case, as you can see the result is unified. 
{code}
<child anotherAttr="""" some_attr=""""/>
{code}

","24/Jan/13 07:18;muellerc;Greg is using tokenizeXML instead of XPath. I guess because XPath load the entire XML in memory (this was the intention of creating the tokenizeXML). So, may this is not a solution for him...","24/Jan/13 22:02;gheidorn;I swapped tokenizeXML for XPath and it worked well as expected.  Christian's memory concern is valid, however, in my case, it is an acceptable risk (I don't expect very large files).  I would, however, like to still see tokenizeXML operate on both tokens with closing tags and tokens that are self-closing.  I will think about how to approach a patch proposal that meets that requirement.  Willem, thanks for the reminder to xpath on split!",30/May/13 12:07;muellerc;I added the attached test to the Camel test suite. I annotated the failing test with @Ignore until somebody fixed it. Thanks Greg for the test case!,"12/Jun/13 08:14;ay;Hi,
I have a question to the camel team.

I got distracted to this cute regex-based xml tokenizer and I made it work for both cases.

However, the original approach itself has several inherent limitation in parsing a tree structure, namely handling of the same named elements appearing at different depths or extracting namespace declarations at several ancestor depths (the current approach only allows the extraction of additional namespace declarations from one particular depth specified by the inheritNamespaceToken parameter). So, it works perfect for those cases where the input document is constrained so that the splitting elements do not appear at different depths in hierarchy and any additional namespace declarations needed in the split elements come from one ancestor depth. But it does not work for more general cases.

As long as the input document fits to the constraint, this regex-based approach is more efficient as it does not need to construct those xml artifacts that need to be serialized into a token. However, for other cases, it would be more practical to use a stax based tokenizer to build the valid namespace context and serialize the content into a token instead of purely relying on the regex based parsing.

I don't know how typical use cases look and whether we can stay with or at least keep the regex-based approach or move to a stax based approach.

regards, aki
","21/Jun/13 17:54;ay;As commented in my previous reply, attached is a suggested fix that also works for empty elements.

It passes the existing tokenizing tests and a few other new tests that are included in the patch file.

I didn't directly change TokenXMLPairExpressionIterator but added its replacement TokenXMLExressionIterator and made ExpressionBuilder to use this new one instead. 

I was not sure if I should reuse TokenPairExpressionIterator by passing a dummy end pair tag and overwrite only the necessary methods, or not use it because the end-pairing logic could suggest an arbitrary start and end tag pairing which does not fit to xml tokenizing. I decided to the latter approach. We could add a neutral abstract class that has those commonly used methods and both can be extended from it. But in any case, you can see a regex-based approach to handle normal and empty xml elements.

I would appreciate if you can review it.
thanks.
regards, aki
","23/Jun/13 08:25;davsclaus;Thanks Aki, for the patch. This is great.

The old class has been marked as @deprecated. ","30/Dec/13 16:58;subrata1106;Hi,

I am using service mix 4.5.3. Is this fixed in this release? If not please let me know how to install the patch.

I am getting a similar issues where there are child nodes which are self closing and the tokenizer is creating malformed xml. I am hoping this will fix the issue I am getting also.

Thanks","01/Jan/14 12:22;muellerc;Apache ServiceMix comes with Camel 2.10.7 [1]. This means this issue should be fixed in this version.

[1] http://servicemix.apache.org/downloads/servicemix-4.5.3","02/Jan/14 12:01;subrata1106;Hi,

Actually service mix 4.5.3 does not resolve this issue fully. Please see the sample input and output below when we have self closing tag. There seems to be a problem still {color:red}if the first child element has self closing tag{color}. Note - this does not seems to be an issue if any other child node has self closing tag except the first one.
*Input XML*:
<?xml version=""1.0"" encoding=""UTF-8""?>
<orders>
    <order RECORDID=""1"">
        <name/>
        <description>asdasd</description>
        <price>7000</price>
        <remark>testing</remark>
    </order>
    <order RECORDID=""2"">
        <name/>
        <description>adasd</description>
        <price>7000</price>
        <remark>testing</remark>
    </order>
</orders>

*Camel XML*:
        <camelContext xmlns=""http://camel.apache.org/schema/blueprint"">
		<route>
			<from uri=""file:camel/XMLInput""/>
			<split streaming=""true"">
				<tokenize token=""order"" xml=""true""/>
				<to uri=""file:camel/XMLOutput?fileName=RECORDID.xml""/>
			</split>
		</route>
	</camelContext>

*OUTPUT Generated*: (malformed XML)
<order RECORDID=""2"">
        <name/>","03/Jan/14 03:32;ay;Hi subrata,
The issue which you are observing has been solved with CAMEL-6940.
Concretely, CAMEL-6004 did not handle some cases when child elements of the split target element are self-terminated and this particular issue was fixed in CAMEL-6940.

regards, aki",03/Jan/14 10:35;subrata1106;Thanks Aki. The current service mix is using Version 2.10.7 of Camel. So I guess we need to wait for the next service mix release.,,,,,,,,,,,
The ObjectHelper#createIterator utility should properly adhere the java.util.Iterator contract,CAMEL-7096,12686420,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,bvahdat,bvahdat,bvahdat,26/Dec/13 14:56,26/Dec/13 15:08,13/Mar/19 22:19,26/Dec/13 15:08,2.12.2,,,,,,,,,2.11.3,2.12.3,2.13.0,,camel-core,,,,,,0,,,,,,,,,"According to the {{java.util.Iterator#next()}} contract the implementation should throw {{NoSuchElementException}} if the iteration has no more elements. However this is currently not the case by the different anonymous class implemetations of this interface through {{ObjectHelper#createIterator()}}.

The side effect of this is that currently this could end up with {{IndexOutOfBoundsException}} and what not if one would iterate over the {{Node}}(s) of a DOM {{NodeList}}. Another example is that calling {{next()}} on the {{Iterator}} returned for an empty String *repeatedly* doesn't throw  any {{NoSuchElementException}} *although* it's {{hasNext()}} method returns false!

We should better provide guards for the condition when there's no more elements available in which case a {{NoSuchElementException}} should be thrown.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,365409,,,2013-12-26 14:56:59.0,,,,,,,0|i1qzev:,365711,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ZooKeeperProducer should shutdown the ConnectionManager when it is closed,CAMEL-7085,12685750,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,njiang,njiang,20/Dec/13 05:41,22/Dec/13 02:55,13/Mar/19 22:19,22/Dec/13 02:55,,,,,,,,,,,,,,camel-zookeeper,,,,,,0,,,,,,,,,"We got a pull request in the github for it.
https://github.com/apache/camel/pull/72",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,364825,,,Sun Dec 22 02:55:53 UTC 2013,,,,,,,0|i1qvsn:,365125,,,,,,,,,"22/Dec/13 02:55;njiang;Applied the patch with some enhancement into master, camel-2.12.x and camel-2.11.x branches. Thank to Klaus for the patch.",,,,,,,,,,,,,,,,,,,,,,,
Graceful shutdown of RabbitMQConsumer requires channel.close(),CAMEL-7042,12682908,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,FergusN,FergusN,05/Dec/13 13:56,20/Dec/13 18:08,13/Mar/19 22:19,20/Dec/13 18:08,,,,,,,,,,2.12.3,2.13.0,,,camel-rabbitmq,,,,,,0,,,,,,,,,"doStop on the RabbitMQConsumer does not close the channel correctly. This doesn't cause any problems on Jetty, but on Tomcat7 it prevented my app from shutting down gracefully. I suggest the doStop method on the consumer should match that of the producer

 protected void doStop() throws Exception {
        super.doStop();
        log.info(""Stopping RabbitMQ consumer"");
        if (channel != null) {
            log.debug(""Closing channel: {}"", channel);
            channel.close();
        }
        if (conn != null) {
            try {
                conn.close();
            } catch (Exception ignored) {
                // ignored
            }
        }

        channel = null;
        conn = null;

        if (executor != null) {
            if (getEndpoint() != null && getEndpoint().getCamelContext() != null) {
                getEndpoint().getCamelContext().getExecutorServiceManager().shutdownNow(executor);
            } else {
                executor.shutdownNow();
            }
        }
        executor = null;
    }",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-12-20 18:08:44.902,,,no_permission,,Novice,,,,,,,,,,,362165,,,Fri Dec 20 18:08:44 UTC 2013,,,,,,,0|i1qffz:,362460,,,,,,,,,20/Dec/13 18:08;davsclaus;Thanks for reporting,,,,,,,,,,,,,,,,,,,,,,,
Issue with password having double &&,CAMEL-7057,12683840,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,crive,crive,10/Dec/13 14:27,14/Dec/13 09:29,13/Mar/19 22:19,14/Dec/13 09:29,2.12.2,,,,,,,,,2.11.3,2.12.3,2.13.0,,,,,,,,0,,,,,,,,,"there is an issue with handling password with double && even when wrapping it into RAW() constraint 

For instance the use of URI 

http://hostname/script.php?authMethod=Basic&authPassword=RAW(pa&&word)&authUsername=usr

throws the exception: 

org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: http://hostname/script.php?authMethod=Basic&authPassword=RAW(pa&&word)&authUsername=usr due to: Invalid uri syntax: Double && marker found. Check the uri and remove the duplicate & marker. ",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-12-11 06:56:12.794,,,no_permission,,Unknown,,,,,,,,,,,362912,,,Wed Dec 11 06:56:12 UTC 2013,,,,,,,0|i1qk33:,363218,,,,,,,,,"11/Dec/13 06:56;njiang;You can work around this issue by apply the password directly on the HttpComponent just like this
{code}
                HttpConfiguration config = new HttpConfiguration();
                config.setAuthMethod(AuthMethod.Basic);
                config.setAuthUsername(""myUser"");
                config.setAuthPassword(""myPassword"");
                // to avoid NTLM
                config.setAuthMethodPriority(""Basic,Digest"");

                HttpComponent http = context.getComponent(""http"", HttpComponent.class);
                http.setHttpConfiguration(config);
{code}",,,,,,,,,,,,,,,,,,,,,,,
camel-sql - Setting SQL_ROW_COUNT header is not updated if the header already exists,CAMEL-7058,12683846,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,10/Dec/13 14:49,10/Dec/13 14:58,13/Mar/19 22:19,10/Dec/13 14:58,2.12.2,,,,,,,,,2.12.3,2.13.0,,,camel-sql,,,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/bug-sql-SQL-Component-cannot-change-SQL-ROW-COUNT-header-value-tp5744350.html",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,362918,,,2013-12-10 14:49:05.0,,,,,,,0|i1qk4f:,363224,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BacklogTracer - dumpTracedMessages should check for route id as well,CAMEL-7045,12683083,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,06/Dec/13 09:42,06/Dec/13 09:59,13/Mar/19 22:19,06/Dec/13 09:59,2.12.2,,,,,,,,,2.11.3,2.12.3,2.13.0,,camel-core,jmx,,,,,0,,,,,,,,,"The api is for matching node id or route id, so you can grab all the traced messages for a route.

Currently it only check for the node id. ",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,362335,,,2013-12-06 09:42:21.0,,,,,,,0|i1qghj:,362629,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
tooling - Using the embedded goal of the Camel Maven Plugin ends up with a NPE,CAMEL-7028,12682113,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,bvahdat,bvahdat,bvahdat,02/Dec/13 11:27,04/Dec/13 13:43,13/Mar/19 22:19,02/Dec/13 11:40,2.12.2,,,,,,,,,2.11.3,2.12.3,2.13.0,,tooling,,,,,,0,,,,,,,,,"{code}
~/dev/workspace/camel/examples/camel-example-spring>mvn -e camel:embedded
[INFO] Error stacktraces are turned on.
[INFO] Scanning for projects...
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: Example :: Spring 2.13-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] >>> camel-maven-plugin:2.13-SNAPSHOT:embedded (default-cli) @ camel-example-spring >>>
[INFO] 
[INFO] --- maven-bundle-plugin:2.3.7:cleanVersions (versions) @ camel-example-spring ---
[INFO] 
[INFO] --- maven-remote-resources-plugin:1.4:process (default) @ camel-example-spring ---
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ camel-example-spring ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 5 resources
[INFO] Copying 3 resources
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default) @ camel-example-spring ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 5 resources
[INFO] Copying 3 resources
[INFO] 
[INFO] --- maven-compiler-plugin:2.5.1:compile (default-compile) @ camel-example-spring ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ camel-example-spring ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /Users/bvahdat/dev/workspace/camel/examples/camel-example-spring/src/test/resources
[INFO] Copying 3 resources
[INFO] 
[INFO] --- maven-compiler-plugin:2.5.1:testCompile (default-testCompile) @ camel-example-spring ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] <<< camel-maven-plugin:2.13-SNAPSHOT:embedded (default-cli) @ camel-example-spring <<<
[INFO] 
[INFO] --- camel-maven-plugin:2.13-SNAPSHOT:embedded (default-cli) @ camel-example-spring ---
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 2.420s
[INFO] Finished at: Mon Dec 02 12:19:20 CET 2013
[INFO] Final Memory: 23M/982M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.camel:camel-maven-plugin:2.13-SNAPSHOT:embedded (default-cli) on project camel-example-spring: Failed: org.apache.maven.plugin.MojoExecutionException: Failed: java.lang.NullPointerException -> [Help 1]
org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.camel:camel-maven-plugin:2.13-SNAPSHOT:embedded (default-cli) on project camel-example-spring: Failed: org.apache.maven.plugin.MojoExecutionException: Failed: java.lang.NullPointerException
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:217)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)
Caused by: org.apache.maven.plugin.MojoExecutionException: Failed: org.apache.maven.plugin.MojoExecutionException: Failed: java.lang.NullPointerException
	at org.apache.camel.maven.EmbeddedMojo.execute(EmbeddedMojo.java:117)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
	... 19 more
Caused by: org.apache.maven.plugin.MojoExecutionException: Failed: java.lang.NullPointerException
	at org.apache.camel.maven.EmbeddedMojo.runCamel(EmbeddedMojo.java:226)
	at org.apache.camel.maven.EmbeddedMojo.executeWithoutWrapping(EmbeddedMojo.java:127)
	at org.apache.camel.maven.EmbeddedMojo.execute(EmbeddedMojo.java:115)
	... 21 more
Caused by: java.lang.NullPointerException
	at org.apache.camel.main.MainSupport$5.doProcess(MainSupport.java:122)
	at org.apache.camel.main.MainSupport$ParameterOption.doProcess(MainSupport.java:532)
	at org.apache.camel.main.MainSupport$Option.processOption(MainSupport.java:492)
	at org.apache.camel.main.MainSupport.parseArguments(MainSupport.java:227)
	at org.apache.camel.main.MainSupport.run(MainSupport.java:351)
	at org.apache.camel.spring.Main.main(Main.java:73)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.camel.maven.EmbeddedMojo.runCamel(EmbeddedMojo.java:223)
	... 23 more
[ERROR] 
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException
2013-12-02 12:19:20,786 [Thread-1       ] INFO  MainSupport$HangupInterceptor  - Received hang up - stopping the main instance.
2013-12-02 12:19:20,788 [Thread-1       ] INFO  MainSupport                    - Apache Camel 2.13-SNAPSHOT stopping
~/dev/workspace/camel/examples/camel-example-spring>
{code}
",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,361370,,,Mon Dec 02 11:40:01 UTC 2013,,,,,,,0|i1qakn:,361669,,,,,,,,,"02/Dec/13 11:40;bvahdat;The current workaround for the users is to make use of the {{run}} goal, that's:

{code}
mvn camel:run
{code}
",,,,,,,,,,,,,,,,,,,,,,,
tooling - Using the embedded and run goals of the Juice Maven Plugin ends up with a NPE,CAMEL-7037,12682658,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,bvahdat,bvahdat,bvahdat,04/Dec/13 11:31,04/Dec/13 11:39,13/Mar/19 22:19,04/Dec/13 11:39,2.12.2,,,,,,,,,2.11.3,2.12.3,2.13.0,,tooling,,,,,,0,,,,,,,,,Exactly the same as CAMEL-7028.,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,361915,,,2013-12-04 11:31:53.0,,,,,,,0|i1qdwf:,362210,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JMX - Update route from xml on route mbean should update current route only,CAMEL-7016,12681515,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,27/Nov/13 08:45,27/Nov/13 08:50,13/Mar/19 22:19,27/Nov/13 08:50,,,,,,,,,,2.11.3,2.12.3,2.13.0,,camel-core,jmx,,,,,0,,,,,,,,,"If you do not have id of the route in the XML then Camel thinks its a new route to be added. We should ensure we handle that, and only update current route as that is the intend of this operation.

If you want to add new routes use mbean operation on camelcontext instead.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,360780,,,2013-11-27 08:45:29.0,,,,,,,0|i1q6xz:,361079,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Upgrade CXF version to 2.7.7,CAMEL-7011,12681213,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,njiang,njiang,26/Nov/13 05:54,26/Nov/13 07:35,13/Mar/19 22:19,26/Nov/13 07:35,,,,,,,,,,2.12.3,2.13.0,,,,,,,,,0,,,,,,,,,"CXF 2.7.8 is released, we should consider to upgrade the version.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,360478,,,Tue Nov 26 07:35:19 UTC 2013,,,,,,,0|i1q533:,360777,,,,,,,,,26/Nov/13 07:35;njiang;Applied the patch into master and camel-2.12.x branches.,,,,,,,,,,,,,,,,,,,,,,,
camel-stream - stream in requires 2 x enter to react in console demo,CAMEL-7005,12680926,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,24/Nov/13 11:21,24/Nov/13 11:34,13/Mar/19 22:19,24/Nov/13 11:34,2.12.2,,,,,,,,,2.11.3,2.12.3,2.13.0,,camel-stream,examples,,,,,0,,,,,,,,,"There is a little regression in 2.12.2 about the camel-stream component, requiring x2 ENTER to read

{code}
Enter something: hello

HELLO
{code}

",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,360191,,,2013-11-24 11:21:54.0,,,,,,,0|i1q3br:,360490,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel load balancers should be restartable,CAMEL-6994,12680544,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,metatech,metatech,21/Nov/13 15:44,21/Nov/13 20:31,13/Mar/19 22:19,21/Nov/13 20:31,2.8.5,,,,,,,,,2.11.3,2.12.2,2.13.0,,camel-core,,,,,,0,,,,,,,,,"When a route containing a load balancer is restarted, after the restart, the route does not contain any processors within the load balancer.
This is because the processors are removed in ""doStop"", rather than in ""doShutdown"" in LoadBalancerSupport.
Here is a patch that fixes the problem.",ServiceMix 4.4.2,,,,,,,,,,,,,,,,,,,,21/Nov/13 15:54;metatech;camel_load_balancer_restartable.patch;https://issues.apache.org/jira/secure/attachment/12615140/camel_load_balancer_restartable.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-11-21 20:31:19.408,,,no_permission,,Unknown,,,,,,,,,,,359809,,,Thu Nov 21 20:31:19 UTC 2013,,,Patch Available,,,,0|i1q0zb:,360108,,,,,,,,,21/Nov/13 20:31;davsclaus;Thanks for reporting and the patch.,,,,,,,,,,,,,,,,,,,,,,,
"Missing ""throw"" statements in CdiCamelContext",CAMEL-6996,12680564,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,natasha,natasha,21/Nov/13 18:06,21/Nov/13 19:57,13/Mar/19 22:19,21/Nov/13 19:57,2.12.1,,,,,,,,,2.11.3,2.12.2,2.13.0,,camel-cdi,,,,,,0,,,,,,,,,"Hi everybody,

please have a look into file ""CdiCamelContext.java"":
In the methods ""start"" and ""stop"" ""throw"" statements are missing (see below).
This error suppresses proper error handling and error information in case that the cdi camel context cannot be started (for example due to invalid endpoint uris).

Thanks a lot in advance for the quick fix.

Bye
Natasha

    @PostConstruct
    @Override
    public void start() {
        try {
            super.start();
        } catch (Exception e) {
            ObjectHelper.wrapRuntimeCamelException(e); // <= Missing throw statement
        }
    }

    @PreDestroy
    @Override
    public void stop() {
        try {
            super.stop();
        } catch (Exception e) {
            ObjectHelper.wrapRuntimeCamelException(e); // <= Missing throw statement
        }
    }",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-11-21 19:57:08.213,,,no_permission,,,,,,,,,,,,,359829,,,Thu Nov 21 19:57:08 UTC 2013,,,Patch Available,,,,0|i1q13r:,360128,,,,,,,,,21/Nov/13 19:57;davsclaus;Thanks for reporting and with the patch.,,,,,,,,,,,,,,,,,,,,,,,
JMX - browseMessageAsXml for files does not work if includeBody is enabled,CAMEL-6987,12680303,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,20/Nov/13 15:04,20/Nov/13 15:43,13/Mar/19 22:19,20/Nov/13 15:43,,,,,,,,,,2.11.3,2.12.2,2.13.0,,camel-core,jmx,,,,,0,,,,,,,,,"If you use the JXM API to browse file endpoints and want to load the file content with includeBody = true, then the file is not loaded.

There is a little bug in MessgeHelper",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,359568,,,2013-11-20 15:04:42.0,,,,,,,0|i1pzi7:,359867,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-cxf-transport component does not include Content-Type in the map of headers,CAMEL-6878,12674715,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,hadrian,sergey_beryozkin,sergey_beryozkin,20/Oct/13 21:25,19/Nov/13 18:46,13/Mar/19 22:19,19/Nov/13 18:46,2.12.1,,,,,,,,,2.11.3,2.12.2,2.13.0,,camel-cxf,,,,,,0,,,,,,,,,"See http://camel.465427.n5.nabble.com/CFX-Bean-headers-access-Issue-tt5741312.html#a5741691

Content-Type is HTTP header like all other headers are, CXF typically has it in the headers map and also as a dedicated message property.

At the moment Camel CXF sets Content-Type only as a message property and not adds it to the list of the headers. This is not consistent with the default CXF HTTP processing.
 ",,,,,,,,,,,,,,,,,,,,,29/Oct/13 17:39;sergey_beryozkin;camel6878.txt;https://issues.apache.org/jira/secure/attachment/12610872/camel6878.txt,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-11-19 18:46:06.77,,,no_permission,,Unknown,,,,,,,,,,,354337,,,Tue Nov 19 18:46:06 UTC 2013,,,,,,,0|i1p36n:,354627,,,,,,,,,"19/Nov/13 18:46;hadrian;Fixed. Thanks Sergey for patch.

Branch: refs/heads/master
Commit: 4f06ebaecf85a748eb6812afb4d231b80aba5318
Branch: refs/heads/camel-2.12.x
Commit: cffe20373b6de0038c5d9dcf1902b424e6407b29
Branch: refs/heads/camel-2.11.x
Commit: 1fbee5b6d19e8472a0b238bbac6c03393faa6167",,,,,,,,,,,,,,,,,,,,,,,
Karaf Command 'camel:route-list' throws NullpointerException,CAMEL-5543,12605201,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,laeubi,laeubi,28/Aug/12 11:14,19/Nov/13 13:10,13/Mar/19 22:19,01/Sep/12 07:36,2.10.0,,,,,,,,,2.10.2,2.11.0,2.9.4,,karaf,,,,,,0,,,,,,,,,"Sometimes I get an NPE when listing routes in Karaf:
2012-08-28 12:20:01,734 | INFO  | l Console Thread | Console                          | 36 - org.apache.karaf.shell.console - 2.2.8 | Exception caught while executing command
java.lang.NullPointerException
        at org.apache.camel.karaf.commands.RouteList.doExecute(RouteList.java:65)[129:org.apache.camel.karaf.camel-karaf-commands:2.10.0]
        at org.apache.karaf.shell.console.OsgiCommandSupport.execute(OsgiCommandSupport.java:38)[36:org.apache.karaf.shell.console:2.2.8]
        at org.apache.felix.gogo.commands.basic.AbstractCommand.execute(AbstractCommand.java:35)[36:org.apache.karaf.shell.console:2.2.8]
        at org.apache.felix.gogo.runtime.CommandProxy.execute(CommandProxy.java:78)[36:org.apache.karaf.shell.console:2.2.8]
        at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:474)[36:org.apache.karaf.shell.console:2.2.8]
        at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:400)[36:org.apache.karaf.shell.console:2.2.8]
        at org.apache.felix.gogo.runtime.Pipe.run(Pipe.java:108)[36:org.apache.karaf.shell.console:2.2.8]
        at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:183)[36:org.apache.karaf.shell.console:2.2.8]
        at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:120)[36:org.apache.karaf.shell.console:2.2.8]
        at org.apache.felix.gogo.runtime.CommandSessionImpl.execute(CommandSessionImpl.java:89)[36:org.apache.karaf.shell.console:2.2.8]
        at org.apache.karaf.shell.console.jline.Console.run(Console.java:166)[36:org.apache.karaf.shell.console:2.2.8]
        at java.lang.Thread.run(Thread.java:662)[:1.6.0_24]
",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-09-01 07:36:07.118,,,no_permission,,Unknown,,,,,,,,,,,241415,,,Tue Nov 19 13:10:19 UTC 2013,,,,,,,0|i027qf:,10854,,,,,,,,,01/Sep/12 07:36;davsclaus;Thanks for reporting.,"19/Nov/13 13:10;metatech;This exception can happen when multiple CamelContext have the same ID. The CamelController class makes the assumption that CamelContext IDs are unique keys.  This is not true in an OSGi container, where several CamelContexts can be deployed in distinct bundles, which do not know each other.    
",,,,,,,,,,,,,,,,,,,,,,
Problem with trunking idempotent filestore when parent directory not exists,CAMEL-6967,12679375,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,agdula,agdula,15/Nov/13 11:18,18/Nov/13 10:49,13/Mar/19 22:19,18/Nov/13 10:49,2.12.1,,,,,,,,,2.11.3,2.12.2,2.13.0,,camel-core,,,,,,0,,,,,,,,,"I've tried to test some route with JUnit test declared like below
{code}
@RunWith(CamelSpringJUnit4ClassRunner.class)
@ContextConfiguration(classes = CoreRouterConfiguration.class, loader = CamelSpringDelegatingTestContextLoader.class)
@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD)
public class RouteTestBase {
    @Produce
    protected ProducerTemplate producerTemplate;

    @Autowired
    protected ModelCamelContext context;

}
{code}

Camel context starts and then it's beeing shutdown. It there's a FileIdempotentRepository with nonexisting path then camel contexf fails to shutdown with exception
{code}
Caused by: java.io.FileNotFoundException: .\TempData\meta\mrdf-idempotent.dat (The system cannot find the path specified)
	at java.io.FileOutputStream.open(Native Method) ~[na:1.7.0_40]
	at java.io.FileOutputStream.<init>(FileOutputStream.java:221) ~[na:1.7.0_40]
	at java.io.FileOutputStream.<init>(FileOutputStream.java:171) ~[na:1.7.0_40]
	at org.apache.camel.processor.idempotent.FileIdempotentRepository.trunkStore(FileIdempotentRepository.java:256) ~[camel-core-2.12.1.jar:2.12.1]
	... 50 common frames omitted
{code}

I guess it could be fixed like in a workaround below
{code}
public class FileIdempotentRepositoryEx extends FileIdempotentRepository {
   @Override
    protected void trunkStore() {
        if(getFileStore().exists()){
            super.trunkStore();
        }
    }
}
{code}",windows 7,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-11-18 10:49:13.177,,,no_permission,,Unknown,,,,,,,,,,,358736,,,Mon Nov 18 10:49:13 UTC 2013,,,,,,,0|i1puaf:,359026,,,,,,,,,18/Nov/13 10:49;davsclaus;Thanks for reporting.,,,,,,,,,,,,,,,,,,,,,,,
Specify the import package version range for camel-lucene ,CAMEL-6963,12679166,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,njiang,njiang,14/Nov/13 06:53,14/Nov/13 07:47,13/Mar/19 22:19,14/Nov/13 07:47,,,,,,,,,,2.13.0,,,,osgi,,,,,,0,,,,,,,,,"As the lucene are not OSGi bundle, the maven bundle plugin  cannot specify the version range for it, and it cause some trouble if there are more than one version of lucene installed in OSGi platform.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,358531,,,Thu Nov 14 07:47:13 UTC 2013,,,,,,,0|i1pt0v:,358821,,,,,,,,,14/Nov/13 06:56;njiang;We have the same issue in camel-solr.,14/Nov/13 07:47;njiang;Applied the patch into master branches.,,,,,,,,,,,,,,,,,,,,,,
Documentation for file2 contains a Bug,CAMEL-6956,12678781,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,agdula,agdula,12/Nov/13 12:02,13/Nov/13 02:50,13/Mar/19 22:19,13/Nov/13 02:50,2.12.1,,,,,,,,,,,,,documentation,,,,,,0,,,,,,,,,"Documentation of *Filter* using org.apache.camel.component.file.GenericFileFilter refers to 

<!-- define our *sorter* as a plain spring bean -->
 <bean id=""myFilter"" class=""com.mycompany.*MyFileSorter*""/>

which should probably be changed to 

<!-- define our *filter* as a plain spring bean -->
 <bean id=""myFilter"" class=""com.mycompany.*MyFileFilter*""/>",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-11-13 02:50:53.521,,,no_permission,,Unknown,,,,,,,,,,,358148,,,Wed Nov 13 02:50:53 UTC 2013,,,,,,,0|i1pqnr:,358438,,,,,,,,,13/Nov/13 02:50;njiang;I just updated the file2 wiki page with thanks to Andrzej.,,,,,,,,,,,,,,,,,,,,,,,
Language option not working for twitter streaming event filter,CAMEL-6107,12634426,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,kevintelford,kevintelford,27/Feb/13 15:57,12/Nov/13 10:35,13/Mar/19 22:19,12/Nov/13 10:35,2.11.0,,,,,,,,,2.11.3,2.12.2,2.13.0,,camel-twitter,,,,,,0,,,,,,,,,"The filter seemed to be working when the streaming filter type was userids, but that could have just been happenstance.  Either way, when running a streaming event filter with a language option set I observe tweets coming in that are from users who have their language preferences set to other than the specified language.  I'm only assuming here this is what they are/should be matching against so this could be moot.

Example route code:
{code}
    @Override
    public void configure() throws Exception {
        String keywords = ""lol""; // any language-neutral term should work
        fromF(""twitter://streaming/filter?type=event&lang=en&keywords=%s""
                + ""&consumerKey=%s&consumerSecret=%s&accessToken=%s&accessTokenSecret=%s"", 
                    keywords, consumerKey, consumerSecret, accessToken, accessTokenSecret)
                .process(new Processor() {
                    @Override
                    public void process(Exchange exchange) throws Exception {
                        String json = exchange.getIn().getBody().toString();
                        if (json.contains(""lang='en'"")) {
                            System.out.println(""Correct"");
                        } else {
                            System.out.println(json);
                        }
                    }})
                .end();
    }
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-03-29 17:51:46.645,,,no_permission,,Unknown,,,,,,,,,,,314919,,,Tue Nov 12 10:35:53 UTC 2013,,,,,,,0|i1icdb:,315263,,,,,,,,,"29/Mar/13 17:51;aynalem;Feature wasn't previously supported by twitter streaming api, added recently(https://dev.twitter.com/blog/introducing-new-metadata-for-tweets). Added to twitter4j library via(https://github.com/yusuke/twitter4j/commit/02043253906022c2c9c5e8b04943ca6313c7aedd). (currently part of 3.0.4-SNAPSHOT)","29/Mar/13 20:41;kevintelford;Thank you Matthew.  I'll keep an eye out, hopefully they will release twitter4j 3.0.4 soon so that it can make it into a Camel release.",26/Aug/13 17:46;davsclaus;This would be fixed when we upgrade to twitter4j 3.0.4+.,12/Nov/13 10:35;davsclaus;Upgraded to twitter4j 3.0.5,,,,,,,,,,,,,,,,,,,,
Unmarshal from ActiveMQ yields warning if message has been marshalled before enqueue and contains BigDecimal or BigInteger,CAMEL-6086,12632755,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,ralfsteppacher,ralfsteppacher,17/Feb/13 16:53,11/Nov/13 11:55,13/Mar/19 22:19,11/Nov/13 11:55,2.10.3,2.9.1,,,,,,,,2.11.2,2.12.0,,,camel-activemq,,,,,,0,,,,,,,,,"Using activemq-camel version 5.8.0 and starting with Camel version 2.9.1 unmarshalling from ActiveMQ yields a warning if 

- the exchange body is an object containing a java.math.BigInteger or BigDecimal or
- the exchange body is an object containing a hierarchy of objects, one of which contains a BigInteger or BigDecimal 

and

- the exchange body has been explicitely marshalled using Java serialization

The warning:

""WARN  ObjectHelper - Cannot find class: [B""


Example route config:

<camel:route id=""writeToQueue"">
	<camel:from uri=""trigger"" />
	<!-- Put bean with BigDecimal or BigInteger into exchange body. -->
	<camel:process ref=""myProcessor"" />
	<camel:convertBodyTo type=""com.rs.TheBean""/>
	<camel:marshal ref=""javaSerialization"" />
	<camel:to ref=""queueTo"" />
</camel:route>

<camel:route id=""receiveFromQueue"">
	<!-- Yields warning. -->
	<camel:from uri=""queueFrom"" />
	<camel:unmarshal ref=""javaSerialization"" />
	<camel:convertBodyTo type=""com.rs.TheBean""/>
	<camel:log message=""Received message: ${in.body}"" loggingLevel=""INFO"" logName=""route:receiveFromQueue"" />
</camel:route>

Despite the warning, un-marshalling the message works.

I have not tried other versions of activemq-camel.
ActiveMQ Server is version 5.8.0",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-05-26 12:16:14.485,,,no_permission,,Unknown,,,,,,,,,,,313251,,,Mon Nov 11 11:55:44 UTC 2013,,,,,,,0|i1i22v:,313596,,,,,,,,,26/May/13 12:16;davsclaus;Is there not more logging in the WARN ? eg a stacktrace or some more details.,29/May/13 07:33;ralfsteppacher;All I had in the logs was the warning.,"01/Jun/13 06:03;davsclaus;When using java serialization make sure your objects is fully serializable. 
Are you sure TheBean is really that?

And you dont need the marshal/unmarshal as sending over JMS is object message by default.","03/Jun/13 10:30;ralfsteppacher;The problem is reproducible with a bean that implements Serializable and contains a BigDecimal or BigInteger as its only class member.

Yes, I realized that I do not have to have an explicit serialization step if I wanted to use object serialization as the wire format. The step was in my routes because previously I used JAXB serialization so I could look at the message via the ActiveMQ web frontend. ","20/Sep/13 20:46;ceposta;So I cannot reproduce this. Ralf, if you can post your test-case that shows this, we can take a closer look. Or, you can have a look at my test case here:

camelContext:
https://github.com/christian-posta/camel-sandbox/blob/master/activemq-things/src/test/resources/META-INF/spring/unmarshal-warn-context.xml

testDriver:
https://github.com/christian-posta/camel-sandbox/blob/master/activemq-things/src/test/java/posta/UnmarshalActivemqTest.java","30/Oct/13 03:18;ceposta;Ralf, can you try on a more recent version of Camel, or at least take a look at the tests I've published and let us know if this is still a problem?

Thanks!","11/Nov/13 07:45;rsteppac;Christian, I looked at your test context and to me it looks like you should be able to reproduce the problem with it. Maybe there is a difference between running the context in the unit test and running it ""natively"" that influences the behavior? 

I am able to reproduce the problem with Camel 2.10.5 but not with 2.11.2.",11/Nov/13 11:55;davsclaus;Marking as resolved as its fixed in 2.11.2 onwards.,,,,,,,,,,,,,,,,
ProducerCache should not only stop non-singelton Producers but also shutdown them afterwards as well if the given Producer is a ShutdownableService,CAMEL-6948,12678312,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,bvahdat,bvahdat,bvahdat,08/Nov/13 20:33,09/Nov/13 15:18,13/Mar/19 22:19,09/Nov/13 15:18,2.12.1,,,,,,,,,2.11.3,2.12.2,2.13.0,,camel-core,,,,,,0,,,,,,,,,"Currently because of this bug the {{doShutdown}} hook of the following non-singleton Producers doesn't kick in at all:

- {{JpaProducer}}
- {{Mina2Producer}}

Which could cause resources leaking.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,357687,,,Sat Nov 09 14:53:44 UTC 2013,,,,,,,0|i1pntr:,357977,,,,,,,,,09/Nov/13 14:53;bvahdat;Ah there're bunch of other places of {{ProducerCache}} where this should be fixed as well so why reopening the ticket.,,,,,,,,,,,,,,,,,,,,,,,
ConcurrentModificationException while shutting down camel,CAMEL-6941,12677746,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,kaaveland,kaaveland,06/Nov/13 09:43,08/Nov/13 14:51,13/Mar/19 22:19,08/Nov/13 14:51,2.11.0,,,,,,,,,2.11.3,2.12.2,2.13.0,,camel-core,,,,,,0,,,,,,,,,"Observed the following stacktrace while shutting down camel:
{code}
   org.apache.camel.impl.DefaultExecutorServiceManager.awaitTermination()#401: Waited 4.017 seconds for ExecutorService: java.util.concurrent.ThreadPoolExecutor@33c4bcda to terminate...
   org.apache.camel.impl.DefaultExecutorServiceManager.awaitTermination()#401: Waited 6.027 seconds for ExecutorService: java.util.concurrent.ThreadPoolExecutor@33c4bcda to terminate...
   org.apache.camel.impl.DefaultExecutorServiceManager.awaitTermination()#401: Waited 8.037 seconds for ExecutorService: java.util.concurrent.ThreadPoolExecutor@33c4bcda to terminate...
   org.apache.camel.impl.DefaultExecutorServiceManager.awaitTermination()#401: Waited 10.008 seconds for ExecutorService: java.util.concurrent.ThreadPoolExecutor@33c4bcda to terminate...
g   org.apache.camel.impl.DefaultExecutorServiceManager.doShutdown()#301: Forcing shutdown of ExecutorService: java.util.concurrent.ThreadPoolExecutor@33c4bcda due first await termination elapsed.
   org.apache.camel.impl.DefaultExecutorServiceManager.awaitTermination()#401: Waited 2.008 seconds for ExecutorService: java.util.concurrent.ThreadPoolExecutor@33c4bcda to terminate...
   org.apache.camel.impl.DefaultExecutorServiceManager.awaitTermination()#401: Waited 4.018 seconds for ExecutorService: java.util.concurrent.ThreadPoolExecutor@33c4bcda to terminate...
   org.apache.camel.impl.DefaultExecutorServiceManager.awaitTermination()#401: Waited 6.028 seconds for ExecutorService: java.util.concurrent.ThreadPoolExecutor@33c4bcda to terminate...
   org.apache.camel.impl.DefaultExecutorServiceManager.awaitTermination()#401: Waited 8.039 seconds for ExecutorService: java.util.concurrent.ThreadPoolExecutor@33c4bcda to terminate...
   org.apache.camel.impl.DefaultExecutorServiceManager.awaitTermination()#401: Waited 10.008 seconds for ExecutorService: java.util.concurrent.ThreadPoolExecutor@33c4bcda to terminate...
g   org.apache.camel.impl.DefaultExecutorServiceManager.doShutdown()#305: Cannot completely force shutdown of ExecutorService: java.util.concurrent.ThreadPoolExecutor@33c4bcda due second await termination elapsed.
   org.apache.camel.impl.DefaultExecutorServiceManager.doShutdown()#318: Shutdown of ExecutorService: java.util.concurrent.ThreadPoolExecutor@33c4bcda is shutdown: true and terminated: false took: 20.018 seconds.
g   org.apache.camel.impl.DefaultCamelContext.shutdownServices()#1771: Error occurred while shutting down service: org.apache.camel.impl.DefaultExecutorServiceManager@37285252. This exception will be ignored.
g   Caused by java.util.ConcurrentModificationException - null
g      at java.util.AbstractList$Itr.checkForComodification(AbstractList.java:372)
g      at java.util.AbstractList$Itr.next(AbstractList.java:343)
g      at org.apache.camel.impl.DefaultExecutorServiceManager.doShutdown(DefaultExecutorServiceManager.java:442)
g      at org.apache.camel.support.ServiceSupport.shutdown(ServiceSupport.java:158)
g      at org.apache.camel.util.ServiceHelper.stopAndShutdownService(ServiceHelper.java:166)
g      at org.apache.camel.impl.DefaultCamelContext.shutdownServices(DefaultCamelContext.java:1766)
g      at org.apache.camel.impl.DefaultCamelContext.doStop(DefaultCamelContext.java:1681)
g      at org.apache.camel.support.ServiceSupport.stop(ServiceSupport.java:92)
g      at org.apache.camel.core.xml.AbstractCamelContextFactoryBean.destroy(AbstractCamelContextFactoryBean.java:432)
g      at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:211)
g      at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:500)
g      at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:476)
g      at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:445)
g      at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1090)
g      at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1064)
g      at org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:1010)
g      at org.apache.camel.spring.Main.doStop(Main.java:152)
g      at org.apache.camel.support.ServiceSupport.stop(ServiceSupport.java:92)
g      at org.apache.camel.main.MainSupport$HangupInterceptor.run(MainSupport.java:82)
   org.apache.camel.impl.DefaultCamelContext.doStop()#1695: Uptime 35 days 23 hours
   org.apache.camel.impl.DefaultCamelContext.doStop()#1696: Apache Camel 2.11.0 (CamelContext: camel-activemq) is shutdown in 51.196 seconds
{code}

I haven't seen this before but it seems to me that there must be more than one thread doing something to DefaultExecutorServiceManager.executorServices (ArrayList) at the same time.",jdk-1.7.0_45,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,357121,,,2013-11-06 09:43:29.0,,,,,,,0|i1pkbz:,357411,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"The ""dns.server"" is not optional.",CAMEL-6932,12677371,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,kuro,kuro,04/Nov/13 13:22,06/Nov/13 14:00,13/Mar/19 22:19,06/Nov/13 14:00,2.12.1,,,,,,,,,2.11.3,2.12.2,2.13.0,,camel-dns,,,,,,0,,,,,,,,,"The ""dns.server"" is not optional.
http://camel.465427.n5.nabble.com/bug-dns-component-td5740962.html

The following code does not work.
{code}
Map<String, Object> headers = exchange.getIn().getHeaders(); 
headers.put(""dns.name"", ""www.example.com""); 
headers.put(""dns.type"", ""TXT""); 
ProducerTemplate template = context.createProducerTemplate(); 
Exchange respExchange = template.send(""dns://dig"", exchange); 
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-11-05 07:58:11.884,,,no_permission,,Unknown,,,,,,,,,,,356746,,,Wed Nov 06 14:00:43 UTC 2013,,,Patch Available,,,,0|i1pi13:,357036,,,,,,,,,"05/Nov/13 07:58;njiang;Hi Dai,

Can you submit the patch file to this JIRA?
We can have some legal issue if we just merge the patch from github pull request.

BTW, the patch looks good.

Willem","06/Nov/13 14:00;njiang;Applied the patch into master, camel-2.12.x and camel-2.11.x branches.",,,,,,,,,,,,,,,,,,,,,,
"ContentType does not returns ""multipart/form-data;boundary=---------------------------j2radvtrk""",CAMEL-6926,12677055,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,amit1000,amit1000,01/Nov/13 13:35,06/Nov/13 13:59,13/Mar/19 22:19,06/Nov/13 13:59,2.11.2,,,,,,,,,2.11.3,2.12.2,2.13.0,,camel-http4,,,,,,0,,,,,,,,,"I found the issue in camel-http4 component. The HttpProducer.createRequestEntity method has been changed to parse the  contentType. The ContentType.parse method returns ""multipart/form-data"" 
instead of ""multipart/form-data;boundary=---------------------------j2radvtrk"". If you  change HttpProducer.createRequestEntity to use ContentType.create method it works fine. 


http://camel.465427.n5.nabble.com/Camel-HTTP4-2-11-2-ContentType-does-not-returns-quot-multipart-form-data-boundary-j2radvtrk-quot-tc5742407.html

",,,,,,,,,,,,,,,,,,,,,01/Nov/13 13:44;amit1000;HttpProducerPatch;https://issues.apache.org/jira/secure/attachment/12611586/HttpProducerPatch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-11-06 13:59:00.184,,,no_permission,,Unknown,,,,,,,,,,,356431,,,Wed Nov 06 13:59:00 UTC 2013,,,Patch Available,,,,0|i1pg2v:,356719,,,,,,,,,"06/Nov/13 13:59;njiang;Applied the patch into master, camel-2.12.x and camel-2.11.x branches with thanks to Amit.
I also added an unit test to verify the patch.",,,,,,,,,,,,,,,,,,,,,,,
camel-jetty - jetty producer misses a colon in the getUrl of HttpOperationFailedException,CAMEL-6915,12676830,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,31/Oct/13 10:13,31/Oct/13 10:14,13/Mar/19 22:19,31/Oct/13 10:14,2.11.2,2.12.1,,,,,,,,2.11.3,2.12.2,2.13.0,,camel-jetty,,,,,,0,,,,,,,,,"A colon is missing so the getUrl can return
{code}
http//localhost:23000/test
{code}

Which should be
{code}
http://localhost:23000/test
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,356206,,,2013-10-31 10:13:29.0,,,,,,,0|i1peov:,356494,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Null Pointer exception when removing SjmsComponent,CAMEL-6758,12668853,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,matriv,matriv,16/Sep/13 19:27,30/Oct/13 13:35,13/Mar/19 22:19,16/Sep/13 20:11,2.12.0,,,,,,,,,2.11.2,2.12.1,2.13.0,,camel-sjms,,,,,,0,,,,,,,,,"NullPointer exception in SjmsComponent when trying to remove it from camel context:

2013-09-16 11:51:54,201 [WARN] org.apache.camel.impl.DefaultCamelContext.removeComponent(DefaultCamelContext.java:388):org.apache.camel.spring.SpringCamelContext: Error stopping component org.apache.camel.component.sjms.SjmsComponent@232560ec. This exception will be ignored.
java.lang.NullPointerException
	at org.apache.camel.component.sjms.SjmsComponent.doStop(SjmsComponent.java:143)
	at org.apache.camel.support.ServiceSupport.stop(ServiceSupport.java:102)
	at org.apache.camel.util.ServiceHelper.stopService(ServiceHelper.java:116)
	at org.apache.camel.impl.DefaultCamelContext.stopServices(DefaultCamelContext.java:1902)
	at org.apache.camel.impl.DefaultCamelContext.removeComponent(DefaultCamelContext.java:386)",Development,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-09-16 20:11:22.323,,,no_permission,,Unknown,,,,,,,,,,,348787,,,Mon Sep 16 20:11:22 UTC 2013,,,,,,,0|i1o53r:,349085,,,,,,,,,16/Sep/13 20:11;muellerc;Thanks for reporting Marios!,,,,,,,,,,,,,,,,,,,,,,,
xslt endpoint - JMX attributes for state and camelId not available,CAMEL-6910,12676123,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,28/Oct/13 14:21,28/Oct/13 14:28,13/Mar/19 22:19,28/Oct/13 14:28,,,,,,,,,,2.11.3,2.12.2,2.13.0,,camel-core,jmx,,,,,0,,,,,,,,,"See ticket
https://github.com/hawtio/hawtio/issues/682

And screenshot attached this ticket",,,,,,,,,,,,,,,,,,,,,28/Oct/13 14:21;davsclaus;Screen Shot 2013-10-28 at 3.21.00 PM.png;https://issues.apache.org/jira/secure/attachment/12610563/Screen+Shot+2013-10-28+at+3.21.00+PM.png,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,355620,,,2013-10-28 14:21:25.0,,,,,,,0|i1pb33:,355908,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The XmlSignatureProcessor only supports the Santuario SecurityProvider,CAMEL-6881,12674799,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,sbo13,sbo13,21/Oct/13 14:38,22/Oct/13 11:25,13/Mar/19 22:19,22/Oct/13 11:25,2.12.1,,,,,,,,,2.12.2,2.13.0,,,extra,,,,,,1,,,,,,,,,"The problem is in the component camel-xmlsecurity

In the static initializer of the org.apache.camel.component.xmlsecurity.processor.XmlSignatureProcessor throws an ClassNotFoundException if the provider is not in the classpath.

I wanted to use the default implementation since the provided one seemed to caue problems with our application server, but unfortunately classes of the implementation are used in the initialization-code which makes it impossible to use with another security provider.
",,,,,,,,,,,,,,,,,,,,,21/Oct/13 14:40;sbo13;IgnoreMissingProvider.patch;https://issues.apache.org/jira/secure/attachment/12609438/IgnoreMissingProvider.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-10-22 11:25:25.576,,,no_permission,,Unknown,,,,,,,,,,,354421,,,Tue Oct 22 11:25:25 UTC 2013,,,Patch Available,,,,0|i1p3pb:,354711,,,,,,,,,21/Oct/13 14:41;sbo13;BTW: If you are interested I wouldn't mind to provide a changeset that makes the provider configurable by a parameter,22/Oct/13 11:25;njiang;Applied patch into master and camel-2.12.x branches with thanks to Sebastian,,,,,,,,,,,,,,,,,,,,,,
Log compenent removes line separators from logged message,CAMEL-6871,12674317,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,smikhalevski,smikhalevski,17/Oct/13 14:03,21/Oct/13 14:02,13/Mar/19 22:19,21/Oct/13 14:02,2.10.6,,,,,,,,,2.12.2,2.13.0,,,camel-core,,,,,,0,,,,,,,,,"*Steps*
# Send exchange with input body equal to {{""1"" + LS + ""2"" + LS + ""3""}}, where {{LS}} is a system dependent line separator.
# Log exchange input body with Camel log component:
{code}<to uri=""log:logger_name?level=INFO"" />{code}

*Expected*
Exchange input body is logged with {{LS}} charcters preserved:
{code}1
2
3{code}

*Observed*
Exchange is logged without {{LS}} characters:
{code}123{code}

*Workaround*
Use log EIP instead:
{code}<log loggingLevel=""INFO"" logName=""logger_name"" message=""${body}"" />{code}",,,,,,,,,,,,,,,,,,,,,17/Oct/13 14:03;smikhalevski;camel-log-formatter-test.zip;https://issues.apache.org/jira/secure/attachment/12608934/camel-log-formatter-test.zip,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-10-21 13:32:07.273,,,no_permission,,Novice,,,,,,,,,,,353939,,,Mon Oct 21 13:32:07 UTC 2013,,,,,,,0|i1p0rr:,354231,,,,,,,,,"21/Oct/13 13:32;davsclaus;Adding option {{skipBodyLineSeparator}} so people can configure if they want to skip the LS or not. This preserves current behavior as default.

For example if your message body is a large XML message with LS you may not want this to log over 50+ lines etc.",,,,,,,,,,,,,,,,,,,,,,,
came-netty-http - Content-Type may have optional action parameter,CAMEL-6872,12674360,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,17/Oct/13 18:00,17/Oct/13 18:36,13/Mar/19 22:19,17/Oct/13 18:36,2.12.1,,,,,,,,,2.12.2,2.13.0,,,camel-netty-http,,,,,,0,,,,,,,,,"For example with SOAP 1.2 HTTP messages there may be an optional action parameter on a Content-Type header.
http://www.w3.org/TR/2002/CR-soap12-part2-20021219/#ietf-action

So we should cater for that when we extract the charset from content-type",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,353982,,,Thu Oct 17 18:36:47 UTC 2013,,,,,,,0|i1p11b:,354274,,,,,,,,,17/Oct/13 18:36;davsclaus;Also polished camel-jetty,,,,,,,,,,,,,,,,,,,,,,,
Target name with underscores and cron expression throws Exception in QuartzComponent.createEndpoint,CAMEL-6851,12673172,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,tcunning,tcunning,10/Oct/13 04:53,12/Oct/13 10:05,13/Mar/19 22:19,12/Oct/13 10:05,2.10.0,,,,,,,,,2.11.3,2.12.2,2.13.0,,camel-quartz,,,,,,0,,,,,,,,,"I think a fix went in for CAMEL-4769 that fixed up group names with underscores, but it seems to only have fixed group names if there is a trigger specified, and not group names with underscores if a cron expression is specified in the URI.        

I'm attaching a small app that reproduces this issue and a patch.","sh% sw_vers
ProductName:	Mac OS X
ProductVersion:	10.8.5
bananastand:bin tcunning$ java -version
java version ""1.6.0_51""
Java(TM) SE Runtime Environment (build 1.6.0_51-b11-456-11M4508)
Java HotSpot(TM) 64-Bit Server VM (build 20.51-b01-456, mixed mode)",,,,,,,,,,,,,,,,,,,,10/Oct/13 04:55;tcunning;0001-foo.patch;https://issues.apache.org/jira/secure/attachment/12607738/0001-foo.patch,10/Oct/13 04:59;tcunning;quartzexample.tar.gz;https://issues.apache.org/jira/secure/attachment/12607739/quartzexample.tar.gz,,,,,2.0,,,,,,,,,,,,,,,,,,,2013-10-12 10:05:20.083,,,no_permission,,Unknown,,,,,,,,,,,352795,,,Sat Oct 12 10:05:20 UTC 2013,,,Patch Available,,,,0|i1otpz:,353082,,,,,,,,,10/Oct/13 04:55;tcunning;Patch with fix,10/Oct/13 04:59;tcunning;Reproducible test case,"10/Oct/13 05:00;tcunning;To run the test: 

mvn clean install
mvn exec:java",12/Oct/13 10:05;davsclaus;Thanks for reporting and the patch.,,,,,,,,,,,,,,,,,,,,
Jetty component should remove httpClientMinThreads & httpClientMinThreads from parameters during endpoint creation,CAMEL-6825,12672323,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,matihost,matihost,04/Oct/13 12:01,07/Oct/13 16:48,13/Mar/19 22:19,07/Oct/13 16:48,2.12.1,,,,,,,,,2.11.3,2.12.2,2.13.0,,camel-jetty,,,,,,0,,,,,,,,,"Jetty component doesn't remove httpClientMinThreads & httpClientMinThreads from parameters during endpoint creation

JettyHttpComponent:166 adds these parameters to the result URL when specified - but the URL shouldn't contain these parameters.",,3600,3600,,0%,3600,3600,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Novice,,,,,,,,,,,351949,,,2013-10-04 12:01:53.0,,,,,,,0|i1ooiv:,352237,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bean Component/BeanBinding: Body as InputStream parametr (specified as ${body} in route),CAMEL-6810,12671717,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,rkraus,rkraus,02/Oct/13 06:35,04/Oct/13 09:10,13/Mar/19 22:19,04/Oct/13 09:10,2.11.2,2.12.1,,,,,,,,2.11.3,2.12.2,2.13.0,,camel-core,,,,,,0,,,,,,,,,"I discovered following problem (which was already shortly discussed in [Camel user forum|http://camel.465427.n5.nabble.com/Bean-component-Bean-Binding-Body-as-InputStream-parametr-specified-as-body-in-route-td5740656.ht]).

I have a ""streamBodyBindingBean"" bean with this method:
{code}
public void bodyBinding(InputStream in) throws IOException {
  int byteCount = 0;
  int c;
  while((c = in.read()) != -1)
    byteCount++;
  System.out.println(""ByteCount: "" + byteCount);
}
{code}

And this route:
{code}
<route id="""" trace=""true"">
  <from uri=""direct://body-input-stream-binding-in""/>
  <to uri=""bean://streamBodyBindingBean?method=bodyBinding(${body})""/>
  <!-- to uri=""bean://isBodyBindingBean""/--> 
  <to uri=""mock://body-input-stream-binding-out""/>
</route>
{code}

And here is a way how I send exchange from test stuff:
{code}
ByteArrayInputStream in = new ByteArrayInputStream(
  ""Small body, which I want to bind as InputStream"".getBytes(""UTF-8"")
);
Exchange exchange = createExchangeWithBody(in);
exchange.setPattern(ExchangePattern.InOnly);
template.send(""direct://body-input-stream-binding-in"", exchange); 
{code}

In this case I got a sysout message: {{ByteCount: 0}}, but when I used the commented variant in the route, I got expected result: {{ByteCount: 47""}}.

When I change the route and use bean component 2 times (both variant of bean method invocation), then I got:

{noformat}
2013-10-01 12:26:37.259 DEBUG {main} [SendProcessor] >>>> Endpoint[bean://isBodyBindingBean?method=bodyBinding%28%24%7Bbody%7D%29] Exchange[Message: [Body is instance of org.apache.camel.StreamCache]]
ByteCount: 0
2013-10-01 12:26:37.289 DEBUG {main} [SendProcessor] >>>> Endpoint[bean://isBodyBindingBean] Exchange[Message: [Body is instance of org.apache.camel.StreamCache]]
ByteCount: 47
2013-10-01 12:26:37.307 DEBUG {main} [SendProcessor] >>>> Endpoint[mock://body-input-stream-binding-out] Exchange[Message: [Body is instance of org.apache.camel.StreamCache]] 
{noformat}

The strange for me is {{MethodInfo}} class, line 526:
{code}
// the parameter value was not already valid, but since the simple language have evaluated the expression
// which may change the parameterValue, so we have to check it again to see if its now valid
exp = exchange.getContext().getTypeConverter().convertTo(String.class, parameterValue);
// String values from the simple language is always valid
if (!valid) {
  ...
}
{code}

The line after comment caused that my ""InputStream"" is transformed into String, what can be a problem in case of ""big"" InputStream.

I know that I can use only second variant of ""bean method invocation"", which is enough for my need, but I only want to point out to this situation.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-10-04 09:10:39.994,,,no_permission,,Unknown,,,,,,,,,,,351427,,,Fri Oct 04 09:10:39 UTC 2013,,,,,,,0|i1olbj:,351716,,,,,,,,,04/Oct/13 09:10;davsclaus;Thanks for reporting,,,,,,,,,,,,,,,,,,,,,,,
BeanInfo prioritizes single non-annotated method over multiple methods with method annotations,CAMEL-6808,12671580,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,larryhan,larryhan,01/Oct/13 14:12,03/Oct/13 10:54,13/Mar/19 22:19,03/Oct/13 10:54,2.11.0,2.12.0,,,,,,,,2.11.3,2.12.2,2.13.0,,camel-core,,,,,,0,,,,,,,,,"If a class has multiple methods annotated with custom camel annotations, and 1 non-annotated method, camel will invoke the non-annotated method instead of picking the correct custom annotated method.",,600,600,,0%,600,600,,,,,,,,,,,,,,01/Oct/13 14:14;larryhan;CAMEL-6808__Fix_incorrect_behavior_in_BeanInfo_for_single_non-annotated_methods.patch;https://issues.apache.org/jira/secure/attachment/12606107/CAMEL-6808__Fix_incorrect_behavior_in_BeanInfo_for_single_non-annotated_methods.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-10-03 10:29:17.248,,,no_permission,,Novice,,,,,,,,,,,351290,,,Thu Oct 03 10:29:17 UTC 2013,,,Patch Available,,,,0|i1okhr:,351582,,,,,,,,,"01/Oct/13 14:15;larryhan;I've attached a patch for this issue. Could someone direct me to the test that I need to change as well?

Thanks","03/Oct/13 10:29;davsclaus;Thanks for the patch. I created an unit test to reproduce this, and indeed there is a bug.",,,,,,,,,,,,,,,,,,,,,,
Multiple NPE during unmarshal with PGPDateFormat,CAMEL-6817,12671930,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,milan.baran,milan.baran,02/Oct/13 14:12,03/Oct/13 10:19,13/Mar/19 22:19,03/Oct/13 10:19,2.12.1,,,,,,,,,2.12.2,2.13.0,,, camel-crypto,,,,,,0,,,,,,,,,"Current behavior:

1. Try to unmarshal (PGPDateFormat) not encrypted file, just plain text.
2. You will get NPE exception.

1. Try to unmarshal (PGPDateFormat) encrypted file with different keys
2. You will get NPE exception.

Expected behavior:

1. Try to unmarshal (PGPDateFormat) not encrypted file, just plain text.
2. You will get PGPException says ""input is not encrypted"" 

1. Try to unmarshal (PGPDateFormat) encrypted file with different keys
2. You will get PGPException says ""wrong keys used""","Win 7, 64bit, Oracle JDK 1.6, bouncycastle.",,,,,,,,,,,,,,,,,,,,02/Oct/13 14:23;milan.baran;CAMEL-6817__Multiple_NPE_during_unmarshalling_with_PGPDateFormat.patch;https://issues.apache.org/jira/secure/attachment/12606363/CAMEL-6817__Multiple_NPE_during_unmarshalling_with_PGPDateFormat.patch,02/Oct/13 14:23;milan.baran;CAMEL-6817__Multiple_NPE_during_unmarshalling_with_PGPDateFormat.patch.asc;https://issues.apache.org/jira/secure/attachment/12606364/CAMEL-6817__Multiple_NPE_during_unmarshalling_with_PGPDateFormat.patch.asc,,,,,2.0,,,,,,,,,,,,,,,,,,,2013-10-03 10:19:27.698,,,no_permission,,Unknown,,,,,,,,,,,351556,,,Thu Oct 03 10:19:27 UTC 2013,,,,,,,0|i1om47:,351845,,,,,,,,,"02/Oct/13 14:23;milan.baran;Well, I prepared fix for my purposes. All tests passes. So, if there is no other problem you can include the patch to next release.",03/Oct/13 10:19;davsclaus;Thanks for the patch.,,,,,,,,,,,,,,,,,,,,,,
camel-facebook - Problem with jsonStoreEnabled option,CAMEL-6804,12671515,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,01/Oct/13 06:49,01/Oct/13 06:58,13/Mar/19 22:19,01/Oct/13 06:53,2.12.0,,,,,,,,,2.12.2,2.13.0,,,camel-facebook,,,,,,0,,,,,,,,,option jsonStoreEnabled=true doesn't enable to call DataObjectFactory.getRawJSON,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,351225,,,2013-10-01 06:49:11.0,,,,,,,0|i1ok3b:,351517,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-quartz2 - The test SpringQuartzConsumerTwoAppsClusteredFailoverTest fails and the same test passes well by camel-quartz,CAMEL-6797,12671243,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,bvahdat,bvahdat,bvahdat,29/Sep/13 06:36,30/Sep/13 09:43,13/Mar/19 22:19,30/Sep/13 09:43,2.12.0,,,,,,,,,2.12.2,2.13.0,,,camel-quartz2,,,,,,0,,,,,,,,,There seems to be a divergence in the behaviour of the {{camel-quartz}} and {{camel-quartz2}} components regarding [this test|https://github.com/apache/camel/blob/master/components/camel-quartz2/src/test/java/org/apache/camel/component/quartz2/SpringQuartzConsumerTwoAppsClusteredFailoverTest.java].,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,350949,,,Sun Sep 29 06:42:19 UTC 2013,,,,,,,0|i1oidr:,351240,,,,,,,,,29/Sep/13 06:42;bvahdat;On the other hand the other clustering test [SpringQuartzTwoAppsClusteredFailoverTest|https://github.com/apache/camel/blob/master/components/camel-quartz2/src/test/java/org/apache/camel/routepolicy/quartz2/SpringQuartzTwoAppsClusteredFailoverTest.java] works well for both {{camel-quartz}} as well as {{camel-quartz2}} components. However that test makes use of {{CronScheduledRoutePolicy}} instead of {{QuartzConsumer}} to trigger the routes.,,,,,,,,,,,,,,,,,,,,,,,
Competing Consumers fails for jms queue using AdviceWith,CAMEL-5510,12603638,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,wjmcdonald,wjmcdonald,15/Aug/12 20:36,19/Sep/13 05:44,13/Mar/19 22:19,19/Sep/13 05:44,2.9.2,,,,,,,,,2.11.2,2.12.1,2.13.0,,camel-test,,,,,,0,,,,,,,,,"I was trying to test two routes that start from the same endpoint.  The endpoint is a jms queue, so it should be able to have multiple consumers attach to it.  When I use the standard CamelTestSupport methodology and let it create and start my context, mock my out points, etc. everything passes (see CompetingConsumersWorks.java).  However when I try and use the strategy of not letting the junit support create everything, ie. 
        public boolean isUseRouteBuilder() { return false; } 
        public boolean isUseAdviceWith() { return true; } 
and try and use AdviceWithRouteBuilder to mock out routes the test doesn't pass (see CompetingConsumersDoesNotWork.java).  I can actually get it to work, but only if I start the context before adding the second set of routes to the context (see comments in code).   ",Windows7 x64 Juno Eclipse,,,,,,,,,,,,,,,,,,,,15/Aug/12 20:36;wjmcdonald;CompetingConsumersBase.java;https://issues.apache.org/jira/secure/attachment/12541123/CompetingConsumersBase.java,15/Aug/12 20:36;wjmcdonald;CompetingConsumersDoesNotWork.java;https://issues.apache.org/jira/secure/attachment/12541124/CompetingConsumersDoesNotWork.java,15/Aug/12 20:36;wjmcdonald;CompetingConsumersWorks.java;https://issues.apache.org/jira/secure/attachment/12541125/CompetingConsumersWorks.java,,,,3.0,,,,,,,,,,,,,,,,,,,2013-07-29 18:45:23.174,,,no_permission,,Unknown,,,,,,,,,,,241382,,,Wed Sep 18 21:49:52 UTC 2013,,,,,,,0|i027j3:,10821,,,,,,,,,"29/Jul/13 18:45;ceposta;Hey Bill,

Is this still a problem? I've just tried on the latest release (2.11) and both tests (...Works.java and ...DoesNotWork.java) seem to work just fine and pass the unit test.

Can you give it a try on your end with the latest release?","29/Jul/13 20:01;wjmcdonald;Not sure - I've been off on other things.  I don't know if I'll get back 
to it any time soon, but if I do, I'll let you know.

William McDonald
Sr. Software Developer   |  TransCentra, Inc.
Office: 1-602-635-5910  |   Mobile: 1-602-741-3664  | 
william.mcdonald@transcentra.com   |   www.TransCentra.com
Regulus Group and J&B Software are now TransCentra

This email message is intended for the named recipient only and may be 
privileged and/or confidential. If you are not the intended or named 
recipient or have received this email in error then you should delete this 
email and you should not copy, forward or disclose it to any other person. 
The views and opinions expressed in this email are those of the sender and 
may not represent the views and opinions of TransCentra



From:   ""Christian Posta (JIRA)"" <jira@apache.org>
To:     william.mcdonald@transcentra.com, 
Date:   07/29/2013 11:44 AM
Subject:        [jira] [Commented] (CAMEL-5510) Competing Consumers fails 
for jms queue using AdviceWith




    [ 
https://issues.apache.org/jira/browse/CAMEL-5510?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&focusedCommentId=13722817#comment-13722817 
] 

Christian Posta commented on CAMEL-5510:
----------------------------------------

Hey Bill,

Is this still a problem? I've just tried on the latest release (2.11) and 
both tests (...Works.java and ...DoesNotWork.java) seem to work just fine 
and pass the unit test.

Can you give it a try on your end with the latest release?
 
CompetingConsumersDoesNotWork.java, CompetingConsumersWorks.java
endpoint is a jms queue, so it should be able to have multiple consumers 
attach to it.  When I use the standard CamelTestSupport methodology and 
let it create and start my context, mock my out points, etc. everything 
passes (see CompetingConsumersWorks.java).  However when I try and use the 
strategy of not letting the junit support create everything, ie. 
doesn't pass (see CompetingConsumersDoesNotWork.java).  I can actually get 
it to work, but only if I start the context before adding the second set 
of routes to the context (see comments in code). 

--
This message is automatically generated by JIRA.
If you think it was sent incorrectly, please contact your JIRA 
administrators
For more information on JIRA, see: http://www.atlassian.com/software/jira

","18/Sep/13 21:21;ceposta;I can confirm these tests pass on master.

I think we should close this and reopen if reporter can reproduce on latest snapshots.","18/Sep/13 21:49;wjmcdonald;I can't get to it now, so if you think you can close it that's fine.  If 
it comes up again, we can always readdress it then.

William McDonald
Sr. Software Developer   |  TransCentra, Inc.
Office: 1-602-635-5910  |   Mobile: 1-602-741-3664  | 
william.mcdonald@transcentra.com   |   www.TransCentra.com
Regulus Group and J&B Software are now TransCentra

This email message is intended for the named recipient only and may be 
privileged and/or confidential. If you are not the intended or named 
recipient or have received this email in error then you should delete this 
email and you should not copy, forward or disclose it to any other person. 
The views and opinions expressed in this email are those of the sender and 
may not represent the views and opinions of TransCentra



From:   ""Christian Posta (JIRA)"" <jira@apache.org>
To:     william.mcdonald@transcentra.com, 
Date:   09/18/2013 02:19 PM
Subject:        [jira] [Commented] (CAMEL-5510) Competing Consumers fails 
for jms queue using AdviceWith




    [ 
https://issues.apache.org/jira/browse/CAMEL-5510?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&focusedCommentId=13771252#comment-13771252 
] 

Christian Posta commented on CAMEL-5510:
----------------------------------------

I can confirm these tests pass on master.

I think we should close this and reopen if reporter can reproduce on 
latest snapshots.
 
CompetingConsumersDoesNotWork.java, CompetingConsumersWorks.java
endpoint is a jms queue, so it should be able to have multiple consumers 
attach to it.  When I use the standard CamelTestSupport methodology and 
let it create and start my context, mock my out points, etc. everything 
passes (see CompetingConsumersWorks.java).  However when I try and use the 
strategy of not letting the junit support create everything, ie. 
doesn't pass (see CompetingConsumersDoesNotWork.java).  I can actually get 
it to work, but only if I start the context before adding the second set 
of routes to the context (see comments in code). 

--
This message is automatically generated by JIRA.
If you think it was sent incorrectly, please contact your JIRA 
administrators
For more information on JIRA, see: http://www.atlassian.com/software/jira

",,,,,,,,,,,,,,,,,,,,
scp task does not respect StrictHostKeyChecking option,CAMEL-6757,12668812,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,guy127917,guy127917,16/Sep/13 16:37,17/Sep/13 07:47,13/Mar/19 22:19,17/Sep/13 07:47,2.11.1,,,,,,,,,2.11.2,2.12.1,2.13.0,,camel-jsch,,,,,,0,,,,,,,,,"The SCP component does not currently do anything with the StrictHostKeyChecking option, as documented. The attached patch fixes this (no test case I'm afraid).

",,,,,,,,,,,,,,,,,,,,,16/Sep/13 16:39;guy127917;StrictHostKeyChecking.scp.patch;https://issues.apache.org/jira/secure/attachment/12603363/StrictHostKeyChecking.scp.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-09-17 03:16:46.659,,,no_permission,,Novice,,,,,,,,,,,348746,,,Tue Sep 17 07:47:00 UTC 2013,,,Patch Available,,,,0|i1o4un:,349044,,,,,,,,,"17/Sep/13 03:16;njiang;I just did quick search about the StrictHostKeyChecking
{code}
StrictHostKeyChecking: ask | yes | no
default: ask
  If this property is set to ``yes'', jsch will never automatically add
  host keys to the $HOME/.ssh/known_hosts file, and refuses to connect
  to hosts whose host key has changed.  This property forces the user
  to manually add all new hosts.  If this property is set to ``no'', 
  jsch will automatically add new host keys to the user known hosts
  files.  If this property is set to ``ask'', new  host keys will be
  added to the user known host files only after the user has confirmed 
  that is what they really want to do, and jsch will refuse to connect 
  to hosts whose host key has changed.
{code}","17/Sep/13 07:47;njiang;Applied the patch into master, camel-2.12.x and camel-2.11.x branches.",,,,,,,,,,,,,,,,,,,,,,
readLock=fileLock causes GenericFileOperationFailedException,CAMEL-6750,12668680,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,mariusz kow,mariusz kow,15/Sep/13 10:55,16/Sep/13 15:36,13/Mar/19 22:19,16/Sep/13 15:36,2.11.1,2.12.0,,,,,,,,2.11.2,2.12.1,2.13.0,,camel-core,,,,,,0,,,,,,,,,"Camel throws GenericFileOperationFailedException for example route:

 <route>
 <from uri=""file:source?delete=true&amp;readLock=fileLock""/>
 <process ref=""processor""/>
 </route>

See on forum:
http://camel.465427.n5.nabble.com/GenericFileOperationFailedException-for-file-deletion-td5739382.html",Windows only,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-09-16 15:36:48.596,,,no_permission,,Unknown,,,,,,,,,,,348614,,,Mon Sep 16 15:36:48 UTC 2013,,,,,,,0|i1o413:,348911,,,,,,,,,16/Sep/13 15:36;davsclaus;Thanks for reporting. The fileLock is now released eager so the file can be deleted.,,,,,,,,,,,,,,,,,,,,,,,
File consumer - Race condition for markerFile read lock strategy,CAMEL-6413,12650493,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,02/Jun/13 07:27,16/Sep/13 14:56,13/Mar/19 22:19,02/Jun/13 10:33,2.10.4,2.11.0,,,,,,,,2.11.1,2.12.0,,,camel-core,,,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/File-markerFile-strategy-race-condition-tp5733561.html

We should delete the .camelLock file last, as currently we move the processed file first. And there is a very tiny tiny window where another process could potential see the file and pickup it.",,,,,,,,,,,,,,,,CAMEL-6750,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,330820,,,2013-06-02 07:27:41.0,,,,,,,0|i1l2nb:,331153,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bean binding to covariant methods throws AmbiguousMethodCallException,CAMEL-6752,12668699,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,guy127917,guy127917,15/Sep/13 19:02,16/Sep/13 07:37,13/Mar/19 22:19,16/Sep/13 07:37,2.11.1,,,,,,,,,2.11.2,2.12.1,2.13.0,,camel-core,,,,,,0,,,,,,,,,"Attached is a patch and test case for an issue in the bean binding code which prevents binding to an overloaded method with a covariant return type from the base class. 

The fix is to check for method covariance at the last moment before throwing AmbiguousMethodCallException. If all methods remaining are covariant, any one of them can be called. Unfortunately this happens in 3 places in the code- if we pre-filtered the list of methods then we could lose annotations on either of the method signature which could be problematic depending on the resolution type. ",,,,,,,,,,,,,,,,,,,,,15/Sep/13 20:07;guy127917;bean-binding-covariant-methods.patch;https://issues.apache.org/jira/secure/attachment/12603250/bean-binding-covariant-methods.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-09-16 07:37:38.331,,,no_permission,,Novice,,,,,,,,,,,348633,,,Mon Sep 16 07:37:38 UTC 2013,,,Patch Available,,,,0|i1o45b:,348930,,,,,,,,,"15/Sep/13 19:18;guy127917;Apologies- initial patch had failing tests, will post correct one shortly.","16/Sep/13 07:37;njiang;Applied patch into master, camel-2.12.x and camel-2.11.x branches with thanks to Guy.",,,,,,,,,,,,,,,,,,,,,,
Camel-Redis: Serializer passed through URI is used only on consumer,CAMEL-6726,12667818,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,bibryam,mynos_main@yahoo.it,mynos_main@yahoo.it,10/Sep/13 14:43,12/Sep/13 09:42,13/Mar/19 22:19,12/Sep/13 09:42,2.11.1,,,,,,,,,2.11.2,2.12.1,2.13.0,,,,,,,,0,,,,,,,,,"*Please add camel-redis component*

The serializer passed through URI is used only on consumer and not on producer. Beside been unexpected and undocumented I think it can cause problems on interacting with the Redis DB if the same serializer is not used in both ways.

You can find the example and discussion of this problem on this thread on the forum:

http://camel.465427.n5.nabble.com/camel-redis-strings-serialization-td5738994.html

I put as minor because from the discussion it looks like it is possible to have a workaround using a RedisTemplate.


",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Novice,,,,,,,,,,,347754,,,2013-09-10 14:43:52.0,,,,,,,0|i1nyr3:,348053,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Mail component does not work as expected (Email Deletion is partially broken et Disconnect does not work well),CAMEL-5376,12594930,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,alexiskinsella,alexiskinsella,18/Jun/12 12:38,04/Sep/13 09:05,13/Mar/19 22:19,26/Aug/13 18:02,2.10.3,2.9.5,,,,,,,,2.11.2,2.12.0,,,camel-mail,,,,,,0,,,,,,,,,"The way disconnect is implemented causes issues with some other options of the consumer. For instance ""disconnect"" option is not compatible with ""delete"" option.

The delete action is done in completion action (processCommit: line 185). On line 305, processCommit method checks if folder is open, but ""disconnect"" option force folder at null value at the end of poll method (Line 149).

I guess disconnect method should be called on completion after any other completion actions occured: It is not possible to make completion actions if connection to mail server is closed.

The result of the usage of disconnect option and delete option is a NullPointerException on test: ""if (!folder.isOpen())"" statement on line 308.

Issue should be always reproductible.

I let you fix the priority of the issue, but it is an annoying issue even if there is a workaround by disabling disconnect option ..."," - Exchange, but should happen with any mail server, since it is not directly related to (See above)
 - Apache James Server 3.X",,,,,,,,,,,,,,,,,,,,18/Apr/13 09:33;alexiskinsella;MailConsumer.diff;https://issues.apache.org/jira/secure/attachment/12579297/MailConsumer.diff,17/Dec/12 14:33;alexiskinsella;MailConsumer.java;https://issues.apache.org/jira/secure/attachment/12561291/MailConsumer.java,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-06-19 05:15:04.151,,,no_permission,,Moderate,,,,,,,,,,,241249,,,Mon Aug 26 18:02:36 UTC 2013,,,,,,,0|i026pj:,10688,,,,,,,,,"19/Jun/12 05:15;davsclaus;Can you post more details, such as the route you use? And the stacktrace as well.","24/Jun/12 10:06;davsclaus;Alexis, any update on this, so we can help you?","24/Jun/12 11:01;alexiskinsella;Hello, I will have some time this week to provide some basic example for this issue. In the meantime, I found some workaround by avoiding disconnection from mail server.","14/Dec/12 14:59;alexiskinsella;Hi, here are some news about this issue.

Let me restart some explanations about some issues on mail consumer.

First problem:

 * When you consume mails with delete option enabled, mails consumed will be marked with DELETED flag on completion callback. Not sure, but I guess completion is async since it happens at the end of exchange processing. Anyway, mail deletion is effective on folder close. 

Folder close action is triggered in method _poll_, just after _processBatch_ method call which is in charge of processing mails. Therefore message completion, which mark messages as deleted, may happen after folder close which is in charge of sending deleted information back to the mail server.

As a consequence some messages may remain deleted in inflight messages, but instruction is never sent back to mail server. 

Folder close (and deletion of messages) should happen after completion of last message. If you try to stop a route with inflight messages, you get a gracefull shutdown with 300 seconds to wait.

Do you think process of mail deletion can be improved ? -> Is it possible to safely close folder after completion of messages ?

Or can you let open folder as long as connection is open or something like that ?

In case you want to ease your tests, I developped some tooling to bootstrap an in memory pop3 server based on Apache James Server. You can easily check behaviors of each sides. Source code is here: https://github.com/akinsella/mock-servers (pop3 and imap4 mock servers are stable, others are experimental)

My testing protocol is the following : 
 - Start pop3 mock server with 100 mails injected in mail box: 
 - Start a Camel context that consume 5 mails at a time, mail is sent on some simple route forwarding message to some ActiveMQ JMS queue.
 from(""pop3://jode@localhost:9110?debugMode=true&fetchSize=5&delete=true&consumer.delay=1000&connectionTimeout=20000&mapMailMessage=false"")
   .to(""activemq:queue:someQueue"");
 - On first poll, you can check with debug of MailConsumer that usualy at least one message is not deleted on server (Server receives 4 delete commands instead of 5 expected), and therefore one message stay inflight

disconnect=true option is also broken due to the sync close of folder and connection  and async process of message deletion.

You can mail me if you have any question.

Best regards,

Alexis
","17/Dec/12 14:33;alexiskinsella;Hi, I tried to find some nice workaround, but it is a little bit tricky due to the way pop3 messages are deleted through close of the folder.

I ended by fixing the issue with a CountDownLatch on the number of exchanges to process before closing resources. CountDownLatch is decremented on completion of exchange
At the end of poll the countdownlatch timeouts if await time is not over, and therefore never locks the consumer. 
I added a timeout having for duration the delay of the timer, maybe there should be a new configuration property dedicated to this new value.

By the way, all messages are correctly deleted on each poll, and the fix rely mainly on the fact that release of resources is done after completion of the process of last message.

I added some guarding on countdownlatch to avoid poll if countdownlatch is not null, it should not happen since countdownlatch is nulled on finally clause.

I hope it will help to improve mail components. 

Best regards,

Aleixs",22/Jan/13 13:21;davsclaus;Please do *not* change priority level. ,"22/Jan/13 13:52;alexiskinsella;Ok, my mistake.","22/Jan/13 13:54;alexiskinsella;By the way, is there a change to fix this issue in 2.9.X or 2.10.X versions ?","22/Jan/13 19:03;muellerc;Yes, both branches are still supported. It depends when we fix this issue.","27/Mar/13 10:43;muellerc;Alexis, can you attach a patch instead of the new implementation. This makes it much more easier for us to review what you changed (http://camel.apache.org/contributing.html).
And we also have to have a unit test which show the issue which is resolved after applying the patch. Do you also consider to provide an unit test?
This all will speed up applying your proposed change...","18/Apr/13 09:35;alexiskinsella;Hi,

I provided the change as a patch based on git diff command between the patched source code and original 2.9.4 version.

Sorry, there is no test to validate the change.",26/Aug/13 18:02;davsclaus;mail consumer commit/rollback logc do not allow handover to ensure running on same thread as polling to use the same mail session.,,,,,,,,,,,,
mbeansRegistered in DefaultManagementAgent isn't ThreadSafe,CAMEL-6695,12666546,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,achim_nierbeck,achim_nierbeck,02/Sep/13 06:51,03/Sep/13 11:51,13/Mar/19 22:19,03/Sep/13 11:51,2.10.6,2.11.1,,,,,,,,2.10.7,2.11.2,2.12.0,,,,,,,,0,,,,,,,,,"This is more or less a ""corner-case"" I stumbled upon, though
the HashSet/HashMap (2.5/2.10 camel versions) in the DefaultManagementAgent containing the registered Mbean _mbeansRegistered_ isn't Thread-Safe. 
This has been an issue for us while using the ProducerTemplate in a wrongful way, by instantiating the ProducerTemplate during every Route run. 
As this might be a common mistake by users I'd suggest to improve the _mbeansRegistered_ by using a Synchronized Map.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,346484,,,2013-09-02 06:51:51.0,,,,,,,0|i1nqxr:,346785,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RabbitMQConsumer doesn't call the queueDeclare rightly,CAMEL-6672,12665657,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,njiang,njiang,27/Aug/13 06:53,27/Aug/13 10:08,13/Mar/19 22:19,27/Aug/13 10:08,2.12.0,,,,,,,,,2.12.0,,,,,,,,,,0,,,,,,,,,"When using the camel-rabbitmq to consume the message, we need to make sure the exchange and queue declare with the same configuration.
Here is the [discussion|http://camel.465427.n5.nabble.com/Camel-RabbitMQ-from-2-12-snapshot-missing-parameter-type-direct-tp5738013.html] about it.

",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,345597,,,2013-08-27 06:53:11.0,,,,,,,0|i1nlhb:,345898,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
http4 component should default to charset based on content type,CAMEL-6187,12637961,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,fhoeben,fhoeben,20/Mar/13 12:01,26/Aug/13 17:40,13/Mar/19 22:19,26/Aug/13 17:40,2.10.4,,,,,,,,,2.11.2,2.12.0,,,camel-http,,,,,,0,,,,,,,,,"HttpProducer determines the charset of an outgoing StringEntity based on an Exchange property (Exchange.CHARSET_NAME), using null if that property is not set. It also sets the content-type based on the content-type of the camel message (this may also contain a character encoding). 
If these two don't match the receiver of the http request will probably not be able to parse the message. 

It would be better if the charset of the StringEntity would by default match the charset specified in the content-type. Matching these two is done when receiving response messages (in HttpProducer.extractResponseBody())...

Suggested fix (in HttpProducer.createRequestEntity()), you could of course also do something like org.apache.camel.component.http4.helper.HttpHelper.setCharsetFromContentType() but my approach uses org.apache.http.entity.ContentType and java.nio.charset.Charset instead of trying to determine the correct charset itself):

{code}
// be a bit careful with String as any type can most likely be converted to String
// so we only do an instanceof check and accept String if the body is really a String
// do not fallback to use the default charset as it can influence the request
// (for example application/x-www-form-urlencoded forms being sent)
String charset = IOHelper.getCharsetName(exchange, false);
if (charset == null && contentType != null)
{
    ContentType ct = ContentType.parse(contentType);
    if (ct != null) {
        Charset cs = ct.getCharset();
        if (cs != null)
        {
            charset = cs.name();
        }
    }
}
StringEntity entity = new StringEntity((String) data, charset);
entity.setContentType(contentType);
answer = entity;
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-08-26 17:40:23.482,,,no_permission,,Unknown,,,,,,,,,,,318439,,,Mon Aug 26 17:40:23 UTC 2013,,,,,,,0|i1iy2f:,318780,,,,,,,,,26/Aug/13 17:40;davsclaus;Thanks for reporting and providing a solution.,,,,,,,,,,,,,,,,,,,,,,,
Resolving endpoints before route start leads to JMX registration failure,CAMEL-6652,12664567,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,avina,avina,20/Aug/13 05:57,23/Aug/13 08:25,13/Mar/19 22:19,23/Aug/13 08:25,2.11.1,,,,,,,,,2.12.0,,,,camel-core,jmx,,,,,0,,,,,,,,,"If resolve endpoint before route start, MBeans for component & endpoint can't be found in jconsole.

Example code:
public void configure() {
  from(xxx).to(yyy);
  ...
  endpoint(xxx); // resolve the endpoint before start
}

Or:
camelContext.getEndpoint(xxx); // resolve the endpoint before start
...
camelContext.start()

",,,,,,,,,,,,,,,,,,,,,20/Aug/13 06:02;avina;test.zip;https://issues.apache.org/jira/secure/attachment/12598911/test.zip,20/Aug/13 06:02;avina;test.zip;https://issues.apache.org/jira/secure/attachment/12598910/test.zip,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,344510,,,Tue Aug 20 06:02:08 UTC 2013,,,,,,,0|i1nesf:,344810,,,,,,,,,20/Aug/13 06:02;avina;a test case,,,,,,,,,,,,,,,,,,,,,,,
Predicates from java dsl are not dumped to xml correctly,CAMEL-6593,12660890,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davidkeen,davidkeen,31/Jul/13 11:37,23/Aug/13 07:52,13/Mar/19 22:19,23/Aug/13 07:52,2.11.1,,,,,,,,,2.11.2,2.12.0,,,camel-core,,,,,,0,,,,,,,,,"Predicates defined in the java dsl are not dumped to xml when using jmx.

Eg, this java dsl route:
{code}
from(""seda:a"").choice().when(header(""test"").isNotNull()).log(""not null"").end().to(""mock:a"");
{code}

Will be dumped as this:
{code}
<?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?>
<route group=""com.example.TestRoute"" id=""route1"" xmlns=""http://camel.apache.org/schema/spring"">
    <from uri=""seda:a""/>
    <choice id=""choice23"">
        <when id=""when24"">
            <expressionDefinition/>
            <log message=""not null"" id=""log20""/>
        </when>
    </choice>
    <to uri=""mock:a"" id=""to17""/>
</route>
{code}

The <expressionDefinition> element should contain the expression.

This seems similar to CAMEL-4733.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-08-23 07:09:10.768,,,no_permission,,Unknown,,,,,,,,,,,341079,,,Fri Aug 23 07:52:20 UTC 2013,,,,,,,0|i1mtqv:,341397,,,,,,,,,"31/Jul/13 11:46;davidkeen;Also seems to affect setting properties. Eg:
{code}
.setProperty(""foo"").constant(""bar"")
{code}

Gets dumped with an empty expressionDefinition tag as well.","23/Aug/13 07:09;davsclaus;This is expected as these builders cannot be represented in plain text, such as simple etc can do.

Though in the future we may be able to map these to a simple text expression we can use to dump eg
{code}
<simple>${header.test} != null</simple>
{code}
",23/Aug/13 07:52;davsclaus;We now dump the predicate in the model though its just a toString representation of the predicate that the ValuerBuilder has built. But at least you can see some information now.,,,,,,,,,,,,,,,,,,,,,
JMX - browsable endpoints such as seda has some attributes listed as unavaiable,CAMEL-6586,12660339,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,29/Jul/13 09:09,22/Aug/13 13:24,13/Mar/19 22:19,22/Aug/13 13:21,2.10.6,2.11.1,,,,,,,,2.10.7,2.11.2,2.12.0,,camel-core,jmx,,,,,0,,,,,,,,,"See screenshot

The problem is related to extending a ManagedEndpoint then some options is shown as unavaiable in JMX consoles.",,,,,,,,,,,,,,,,,,,,,22/Aug/13 03:53;saltnlight5;CAMEL-6586.patch;https://issues.apache.org/jira/secure/attachment/12599350/CAMEL-6586.patch,22/Aug/13 04:24;saltnlight5;CAMEL-6586v2.patch;https://issues.apache.org/jira/secure/attachment/12599353/CAMEL-6586v2.patch,29/Jul/13 09:09;davsclaus;Screen Shot 2013-07-29 at 11.07.33 AM.png;https://issues.apache.org/jira/secure/attachment/12594651/Screen+Shot+2013-07-29+at+11.07.33+AM.png,,,,3.0,,,,,,,,,,,,,,,,,,,2013-08-22 03:53:30.992,,,no_permission,,Unknown,,,,,,,,,,,340531,,,Thu Aug 22 13:21:46 UTC 2013,,,,,,,0|i1mqd3:,340849,,,,,,,,,"22/Aug/13 03:53;saltnlight5;Patch attached.

The bug seems to be caused by SedaEndpoint.java has explicitly added a {{@ManagedResource(description = ""Managed SedaEndpoint"")}} on class declaration that prevented the normal {{BrowsableEndpoint}} to be registered in JMX. I presume it's added by mistake originally, and the fix is simply to remove it. 

The fix will now shows {{seda}} endpoint with typical browsable endpoint attributes.","22/Aug/13 04:24;saltnlight5;Patch v2 attached.

Actually, on second thought, I do see that there are many properties in {{SedaEndpoint.java}} are annotated as managed attributes. So it's not an mistake to have the @ManageResource then. If this is the case, then I have a second patch, which is to override the two ""Unavialable"" attributes to properly return correct values.","22/Aug/13 04:43;saltnlight5;Despite the patch v2 fixed the problem, but having these two managed attribute methods added directly into SedaEndpoint.java class seems not clean. There is probably a more correct place to add these. It's late now, so I will leave it for another night to look further into.",22/Aug/13 13:11;davsclaus;Yeah its on purpose - its just that when having custom attributes/operations and also wanting to inheirt the default attributes/operations then JMX doesnt cope with that too well.,22/Aug/13 13:21;davsclaus;Thanks for the patch.,,,,,,,,,,,,,,,,,,,
SJMS component throws class cast error when used with IBM Webshpere MQ,CAMEL-6641,12663864,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,muellerc,nigell,nigell,15/Aug/13 15:19,15/Aug/13 21:54,13/Mar/19 22:19,15/Aug/13 21:54,2.11.1,,,,,,,,,2.11.2,2.12.0,,,camel-sjms,,,,,,0,,,,,,,,,"When using the IBM MQ JMS classes and pub/sub over a TOPIC the JmsObjectFactory.createMessageConsumer method throws a cast class exception. The session is being cast to a TopicSession which for MQ it is not.
Using pure jms this cast is not required as the session class is aware of the destination type.",Windows 7,,,,,,,,,,,,,,,,,,,,15/Aug/13 15:21;nigell;patchfile.txt;https://issues.apache.org/jira/secure/attachment/12598228/patchfile.txt,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-08-15 21:53:58.517,,,no_permission,,Unknown,,,,,,,,,,,343865,,,Thu Aug 15 21:53:58 UTC 2013,,,Patch Available,,,,0|i1natr:,344167,,,,,,,,,15/Aug/13 15:21;nigell;Created a patch that fixes it on my desktop.,15/Aug/13 21:53;muellerc;Thanks Nigel for the patch! It's applied into the master and the camel-2.11.x maintenance branch.,,,,,,,,,,,,,,,,,,,,,,
quartz consumer - Suspend and resume does not work,CAMEL-6614,12662314,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,07/Aug/13 08:37,07/Aug/13 08:43,13/Mar/19 22:19,07/Aug/13 08:43,,,,,,,,,,2.10.7,2.11.2,2.12.0,,camel-quartz,,,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/How-to-Pause-Quartz-Componenent-tp5736101.html",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,342318,,,Wed Aug 07 08:43:55 UTC 2013,,,,,,,0|i1n1b3:,342623,,,,,,,,,07/Aug/13 08:43;davsclaus;You can use stop/start instead.,,,,,,,,,,,,,,,,,,,,,,,
camel-rss and camel-atom - Should includes feeds with same pub timestamp as it okay,CAMEL-6436,12651394,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,06/Jun/13 17:40,30/Jul/13 14:29,13/Mar/19 22:19,30/Jul/13 14:29,,,,,,,,,,2.11.2,2.12.0,,,camel-atom,camel-rss,,,,,0,,,,,,,,,"See SO
http://stackoverflow.com/questions/16948288/apache-camel-rss-feed-processor-skips-with-feeds-of-same-pubdate?noredirect=1#comment24503558_16948288
",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Novice,,,,,,,,,,,331720,,,2013-06-06 17:40:51.0,,,,,,,0|i1l86n:,332051,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wrong InputStream reference is used in method storeFile of class ScpOperations,CAMEL-6571,12659547,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,,andeng,andeng,24/Jul/13 10:43,27/Jul/13 17:17,13/Mar/19 22:19,27/Jul/13 17:17,2.11.0,,,,,,,,,2.10.7,2.11.2,2.12.0,,camel-jsch,,,,,,0,,,,,,,,,"In method {{storeFile(String name, Exchange exchange)}} of class {{org.apache.camel.component.jsch.ScpOperations}} the wrong reference of the required input stream is used (line 131). Should be 

{{write(channel, file, is, cfg);}} 

instead of 

{{write(channel, file, exchange.getIn().getMandatoryBody(InputStream.class), cfg);}}",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-07-27 17:17:08.65,,,no_permission,,Unknown,,,,,,,,,,,339740,,,Sat Jul 27 17:17:08 UTC 2013,,,,,,,0|i1mli7:,340059,,,,,,,,,27/Jul/13 17:17;davsclaus;Thanks for reporting this.,,,,,,,,,,,,,,,,,,,,,,,
Exception in service start (when before start it was in stopped state) leaves service in starting state,CAMEL-6441,12651716,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,tivv,tivv,07/Jun/13 15:16,23/Jul/13 09:26,13/Mar/19 22:19,23/Jul/13 09:26,2.10.0,,,,,,,,,2.10.7,2.11.2,2.12.0,,camel-core,,,,,,0,,,,,,,,,"Currently if service start produces an exception, stop is called to clear flags. But stop() is noop if service was in stopped state before. This leaves service in starting+stopped unusable state.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-07-23 09:26:05.349,,,no_permission,,Unknown,,,,,,,,,,,332041,,,Tue Jul 23 09:26:05 UTC 2013,,,,,,,0|i1la4v:,332370,,,,,,,,,23/Jul/13 09:26;davsclaus;Thanks for reporting.,,,,,,,,,,,,,,,,,,,,,,,
DefaultUnitOfWork's headers for the original message are the same object as the in message headers,CAMEL-6541,12657290,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,uvapalmer,uvapalmer,11/Jul/13 16:51,18/Jul/13 08:25,13/Mar/19 22:19,11/Jul/13 21:01,2.8.6,,,,,,,,,2.10.7,2.11.2,2.12.0,,camel-core,camel-jms,,,,,0,,,,,,,,,"For jms messages, the useOriginalMessage does not work when headers are changed during the route because the DefaultUnitOfWork's headers are the same object as the in message's headers.

In DefaultUnitOfWork, this.originalInMessage.setHeaders(exchange.getIn().getHeaders()); should be changed to create a copy of the headers instead of directly assigning.

Maybe changed to this.originalInMessage.setHeaders((Map<String,Object>) new CaseInsensitiveMap(exchange.getIn().getHeaders()));",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-07-11 17:10:05.541,,,no_permission,,Novice,,,,,,,,,,,337512,,,Thu Jul 11 17:10:05 UTC 2013,,,,,,,0|i1m7sf:,337835,,,,,,,,,11/Jul/13 17:10;davsclaus;Well spotted,,,,,,,,,,,,,,,,,,,,,,,
StringQuoteHelper should skip the separate character,CAMEL-6544,12657561,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,njiang,njiang,13/Jul/13 03:01,17/Jul/13 08:46,13/Mar/19 22:19,17/Jul/13 08:46,2.11.0,,,,,,,,,2.11.2,2.12.0,,,camel-core,,,,,,0,,,,,,,,,"The StringQuoteHelper.splitSafeQuote can not split the invocation string like this
""*, '', 'arg3'""
The third parameter should be ""arg3"" but camel 2.11.0 treat it as "",arg3"".
Here is [the mail thread| http://camel.465427.n5.nabble.com/Bean-Method-Invocation-regression-in-2-11-tp5735576.html] which discuses about it. ",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,337782,,,2013-07-13 03:01:16.0,,,,,,,0|i1m9g7:,338104,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ManagedBacklogTracer implements an incorrectly named ManagedTracerBacklogMBean interface,CAMEL-6549,12657630,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,marekw,marekw,14/Jul/13 09:33,16/Jul/13 06:45,13/Mar/19 22:19,16/Jul/13 06:45,2.11.0,,,,,,,,,2.12.0,,,,jmx,,,,,,0,,,,,,,,,"The MBean interface for ManagedBacklogTracer should be named ManagedBacklogTracerMBean rather than ManagedTracerBacklogMBean (see the order  of words) to be compatible with standard MBean naming conventions.

This issue causes problems with some JMX implementations.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,337850,,,2013-07-14 09:33:47.0,,,,,,,0|i1m9vb:,338172,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
XQueryBuilder will override any saxon Configuration provided,CAMEL-6548,12657599,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,niels.bertram,niels.bertram,13/Jul/13 17:47,14/Jul/13 08:50,13/Mar/19 22:19,14/Jul/13 08:50,2.11.2,,,,,,,,,2.11.2,2.12.0,,,camel-saxon,,,,,,0,,,,,,,,,"Sometimes one wants to register a custom extension function {{net.sf.saxon.lib.ExtensionFunctionDefinition}} in the saxon xquery engine context.

When providing {{XQueryBuilder.setConfiguration(Configuration configuration)}} with such configuration, the method will set the context and also set the initialise flag to false (line 378). This will cause {{XQueryBuilder.initialize(Exchange exchange)}} to run next time the builder is used.

Unfortunately the initialize method on line 639 it will create a new saxon Configuration regardless of what was set in the {{XQueryBuilder.setConfiguration()}} and renders this function pretty much useless.

The obvious solution to this problem is to check if the configuration is null before creating a new saxon configuration.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-07-14 08:19:08.366,,,no_permission,,Novice,,,,,,,,,,,337820,,,Sun Jul 14 08:50:25 UTC 2013,,,Patch Available,,,,0|i1m9on:,338142,,,,,,,,,13/Jul/13 17:57;niels.bertram;Sent a patch together with a unit test as pull request to apache:camel-2.11.x on GitHub. Otherwise the commit on my fork is https://github.com/bertramn/camel/commit/52f26be2d2bf43b8bb35b88cc3984bc2548ddab6.,"14/Jul/13 08:19;davsclaus;Willem I am working on this, there is some changes needed on trunk the patch doesn't work with.",14/Jul/13 08:23;njiang;Claus already started to work on this issue.,"14/Jul/13 08:50;davsclaus;Thanks for the patch.

Saxon has changed its API in latest release so had to do a few changes.",,,,,,,,,,,,,,,,,,,,
camel-netty - Add option to enrich Camel message with client certificate details to make it easy to get these details,CAMEL-6540,12657283,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,11/Jul/13 16:02,11/Jul/13 16:07,13/Mar/19 22:19,11/Jul/13 16:07,,,,,,,,,,2.12.0,,,,camel-netty,,,,,,0,,,,,,,,,"Adding a new option {{sslClientCertHeaders}} which can be set to true, and then Camel Netty consumer will enrich the Message with headers that has the client certificate information out of the box.

This allows end users to get this details a bit easier, for example to be used in content based routing without having to code to get the details.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,337505,,,2013-07-11 16:02:28.0,,,,,,,0|i1m7qv:,337828,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE in validator component if no classpath prefix,CAMEL-6538,12657221,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,11/Jul/13 08:54,11/Jul/13 08:57,13/Mar/19 22:19,11/Jul/13 08:57,,,,,,,,,,2.10.7,2.11.2,2.12.0,,camel-core,,,,,,0,,,,,,,,,"There is a potentail NPE in validator component
{code}
Caused by: java.lang.NullPointerException
        at org.apache.camel.component.validator.DefaultLSResourceResolver.resolveResource(DefaultLSResourceResolver.java:73)
        at com.sun.org.apache.xerces.internal.util.DOMEntityResolverWrapper.resolveEntity(DOMEntityResolverWrapper.java:109)
        at com.sun.org.apache.xerces.internal.impl.XMLEntityManager.resolveEntity(XMLEntityManager.java:1056)
...
{code}

When the resource loader tries to load the XSD, I get a null pointer exception thrown as there is no path before the file name and the DefaultLSResourceResolver trying to call intern() on a null value.  ",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,337443,,,2013-07-11 08:54:42.0,,,,,,,0|i1m7d3:,337766,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SFTP: NPE if no private key file is supplied,CAMEL-6514,12656379,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,joerg,joerg,05/Jul/13 14:10,10/Jul/13 16:39,13/Mar/19 22:19,10/Jul/13 16:39,2.10.4,2.11.0,,,,,,,,2.10.7,2.11.1,2.12.0,,camel-ftp,,,,,,0,,,,,,,,,"Hi,
a NPE is thrown if no private key file is supplied in the configuration for SFTP. The error is
Caused by: java.lang.NullPointerException: while trying to get the length of an array loaded from local variable 'foo'
at com.jcraft.jsch.Buffer.putString(Buffer.java:59)
I have analysed the code a bit and found that the problem is caused
by the class SftpOperations. The method createSession sets the userInfo for the seesion by an inline class. Here the method promptKeyboardInteractive does not work correctly if no private key file is supplied. In that case JSCH switches to user/pw authorization and this method is called. But since there is no password maintained the configation object returns NULL. The present implementation adds it to the string array causing the error in JSCH. JSCH either wants a NULL string array or an empty string array (I have tested both). So the code should look e.g. as follows:

            public String[] promptKeyboardInteractive(String destination, String name, String instruction, String[] prompt, boolean[] echo) {
                String password = configuration.getPassword();
                if (password == null) {
                    return new String[0];
                } else {
                    return new String[] { password };
                }
            }
With that change JSCH returns
Caused by: java.io.FileNotFoundException: ./data/ssh/id_rsa (No such file or directory)
	at java.io.FileInputStream.open(Native Method)

and that is the real cause of the error 

Best Regards,

Jörg 
",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-07-10 16:39:23.112,,,no_permission,,Unknown,,,,,,,,,,,336602,,,Wed Jul 10 16:39:23 UTC 2013,,,,,,,0|i1m26n:,336925,,,,,,,,,10/Jul/13 16:39;davsclaus;Thanks for reporting and with the solution.,,,,,,,,,,,,,,,,,,,,,,,
Routing slip EIP - Does not send ExchangeSentEvent notifications,CAMEL-6537,12657069,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,10/Jul/13 13:31,10/Jul/13 14:10,13/Mar/19 22:19,10/Jul/13 14:10,2.10.0,,,,,,,,,2.10.7,2.11.1,2.12.0,,camel-core,eip,,,,,0,,,,,,,,,"When using routing slip eip, then we only get the ExchangeSendingEvent, what we miss is the ExchangSentEvent.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,337292,,,2013-07-10 13:31:42.0,,,,,,,0|i1m6fj:,337615,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
LOG-Eip log an ERROR by evaluating Simple Language expression,CAMEL-6414,12650531,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,muellerc,muellerc,02/Jun/13 20:51,09/Jul/13 08:03,13/Mar/19 22:19,09/Jul/13 08:03,2.11.0,,,,,,,,,2.11.1,2.12.0,,,camel-core,,,,,,0,,,,,,,,,See http://camel.465427.n5.nabble.com/Camel-Error-even-when-everything-seems-to-be-working-fine-but-log-shows-errors-td5733536.html,,,,,,,,,,,,,,,,,,,,,02/Jun/13 20:52;muellerc;simple-language-test.zip;https://issues.apache.org/jira/secure/attachment/12585778/simple-language-test.zip,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-07-09 06:18:41.43,,,no_permission,,Unknown,,,,,,,,,,,330858,,,Tue Jul 09 06:18:41 UTC 2013,,,,,,,0|i1l2vr:,331191,,,,,,,,,02/Jun/13 20:52;muellerc;Added a unit test which shows the issue.,"09/Jul/13 06:18;davsclaus;Its the unary operator -- that influences this.
",,,,,,,,,,,,,,,,,,,,,,
ScriptBuilder Some scripting are exception lost ,CAMEL-6416,12650573,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,fkocik,fkocik,03/Jun/13 07:50,03/Jul/13 02:22,13/Mar/19 22:19,03/Jun/13 08:43,2.10.4,,,,,,,,,2.10.7,2.11.1,2.12.0,,camel-script,,,,,,0,,,,,,,,,"Hello, 

A little bug in *ScriptBuilder* class cause some script errors to be lost and replaced by a *NullPointerException* : 

{code:title=Encountered Exception}
Caused by: java.lang.NullPointerException
	at org.apache.camel.builder.script.ScriptBuilder.createScriptEvaluationException(ScriptBuilder.java:418)
	at org.apache.camel.builder.script.ScriptBuilder.evaluateScript(ScriptBuilder.java:348)
	at org.apache.camel.builder.script.ScriptBuilder.evaluate(ScriptBuilder.java:92)
	at org.apache.camel.builder.script.ScriptBuilder.evaluate(ScriptBuilder.java:96)
{code}

The problem occurs in *evaluateScript* method (line 336 to 352) :
{code:title=ScriptBuilder.evaluateScript}
    protected synchronized Object evaluateScript(Exchange exchange) {
        try {
            getScriptContext();
            populateBindings(getEngine(), exchange);
            addScriptEngineArguments(getEngine(), exchange);
            Object result = runScript(exchange);
            LOG.debug(""The script evaluation result is: {}"", result);
            return result;
        } catch (ScriptException e) {
            if (LOG.isDebugEnabled()) {
                LOG.debug(""Script evaluation failed: "" + e.getMessage(), e);
            }
            throw createScriptEvaluationException(e.getCause());
        } catch (IOException e) {
            throw createScriptEvaluationException(e);
        }
    }
{code}


We can see the following line (348) : 
{{throw createScriptEvaluationException(e.getCause());}}

In some cases, the exception cause is null and the error message become very unclear.

A simple workaround would be to write something like this :
{code:}
if (e.getCause() == null) {
    throw createScriptEvaluationException(e);
} else {
    throw createScriptEvaluationException(e.getCause());
}
{code}

I don't have some GIT software, so I could not provide a patch, sorry for that ;-)

Regards",,3600,3600,,0%,3600,3600,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-06-03 08:43:27.867,,,no_permission,,Novice,,,,,,,,,,,330900,,,Mon Jun 03 08:43:27 UTC 2013,,,,,,,0|i1l353:,331233,,,,,,,,,"03/Jun/13 08:43;njiang;Applied the patch into master, camel-2.11.x and camel-2.10.x branches with thanks to Fabien.",,,,,,,,,,,,,,,,,,,,,,,
org.apache.camel.main.Main#doStop() throws java.lang.IndexOutOfBoundsException,CAMEL-6504,12655732,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,svenb,svenb,02/Jul/13 08:55,03/Jul/13 02:22,13/Mar/19 22:19,03/Jul/13 02:22,2.10.4,,,,,,,,,2.10.7,2.11.2,2.12.0,,camel-core,,,,,,0,,,,,,,,,"When calling a Camel application with parameter -h all parameters are printed an the program exits.
But it is no clean exit; it throws an java.lang.IndexOutOfBoundsException.

The reason for this is the expression in doStop():
+
----
getCamelContexts().get(0).stop();
----

get(0) returns null, if no context is initialized yet.

See camel-users mailinglist, thread ""Bug in org.apache.camel.main.Main#doStop() ?""
",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-07-03 02:22:14.451,,,no_permission,,Novice,,,,,,,,,,,336007,,,Wed Jul 03 02:22:14 UTC 2013,,,,,,,0|i1lyiv:,336331,,,,,,,,,"03/Jul/13 02:22;njiang;Applied the patch into master, camel-2.11.x and camel-2.10.x.",,,,,,,,,,,,,,,,,,,,,,,
camel-cxf-transport's blueprint/camel.xsd xml schema is invalid,CAMEL-6501,12655560,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,dkulp,ay,ay,01/Jul/13 09:39,01/Jul/13 21:13,13/Mar/19 22:19,01/Jul/13 21:13,2.11.0,,,,,,,,,2.11.2,,,,camel-cxf,,,,,,0,,,,,,,,,"camel.xsd has the following fragment:

    33      <xsd:element name=""destination"">
    34          <xsd:complexType>
    35              <xsd:complexContent>
    36                  <xsd:extension base=""beans:Tcomponent""/>
    37                  <!-- here we need to specify the CamelContext reference -->
    38                  <xsd:attribute name=""camelContextId"" type=""xsd:string"" />
    39              </xsd:complexContent>
    40          </xsd:complexType>
    41      </xsd:element>


The ""attribute"" element appears in complexContent, which is not allowed according to the xml schema spec, consequently when using the schema, it results in the following validation error.

org.xml.sax.SAXParseException; systemId: jar:file:/C:/maven/repo/org/apache/camel/camel-cxf-transport/2.12-SNAPSHOT/camel-cxf-transport-2.12-SNAPSHOT.jar!/schema/blueprint/camel.xsd; lineNumber: 38; columnNumber: 74; s4s-elt-invalid-content.1: The content of '#AnonType_destination' is invalid.  Element 'attribute' is invalid, misplaced, or occurs too often.


I think the correct schema should include this attribute element inside the extension element, as shown in
    <xsd:element name=""destination"">
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base=""beans:Tcomponent"">
                    <!-- here we need to specify the CamelContext reference --> 
                    <xsd:attribute name=""camelContextId"" type=""xsd:string"" />
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>

thanks.",,,,,,,,,,,,,,,,,,,,,01/Jul/13 09:54;ay;camel-cxf-transport-6501.diff;https://issues.apache.org/jira/secure/attachment/12590237/camel-cxf-transport-6501.diff,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-07-01 21:13:02.994,,,no_permission,,Unknown,,,,,,,,,,,335835,,,Mon Jul 01 21:13:02 UTC 2013,,,Patch Available,,,,0|i1lxgn:,336159,,,,,,,,,"01/Jul/13 09:54;ay;modified:
components/camel-cxf-transport/src/main/resources/schema/blueprint/camel.xsd",01/Jul/13 21:13;dkulp;This doesn't affect 2.10.5 as that version doesn't have a blueprint version of camel.xsd.,,,,,,,,,,,,,,,,,,,,,,
camel-aws - Possible concurrent modification exception,CAMEL-6252,12641383,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,muellerc,davsclaus,davsclaus,08/Apr/13 15:42,27/Jun/13 21:55,13/Mar/19 22:19,27/Jun/13 21:55,2.10.4,2.11.0,,,,,,,,2.10.6,2.11.1,2.12.0,,camel-aws,tests,,,,,0,,,,,,,,,"Noticed this from CI test servers

{code}
Stacktrace

java.util.ConcurrentModificationException
	at java.util.ArrayList$Itr.checkForComodification(ArrayList.java:819)
	at java.util.ArrayList$Itr.next(ArrayList.java:791)
	at org.apache.camel.component.aws.sqs.SqsExtendMessageVisibilityTest.longReceiveExtendsMessageVisibility(SqsExtendMessageVisibilityTest.java:61)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:601)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:30)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:47)
	at org.junit.rules.RunRules.evaluate(RunRules.java:18)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:30)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:53)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:119)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:101)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:601)
	at org.apache.maven.surefire.booter.ProviderFactory$ClassLoaderProxy.invoke(ProviderFactory.java:103)
	at com.sun.proxy.$Proxy0.invoke(Unknown Source)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:150)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcess(SurefireStarter.java:91)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:69)
Standard Output

@SLTests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.032 sec
@SLRunning org.apache.camel.component.aws.sqs.SqsExtendMessageVisibilityTest
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,321799,,,2013-04-08 15:42:09.0,,,,,,,0|i1jitj:,322144,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TestNG test cases not working correctly with groups,CAMEL-6478,12654262,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,mumrah,mumrah,21/Jun/13 22:46,23/Jun/13 09:12,13/Mar/19 22:19,23/Jun/13 07:28,2.11.0,,,,,,,,,2.10.6,2.11.1,2.12.0,,camel-test,,,,,,0,,,,,,,,,"When using the Camel TestNG integration, tests work fine when no -groups are specified, but fail if a group is selected. 

This is due to the default behavior of TestNG's annotations. @BeforeClass, @AfterClass, etc need a ""alwaysRun = true"" argument in order to still run when groups are selected.

This is really a peculiarity in the way TestNG works, but nonetheless, the Camel support classes do not work with TestNG groups",,,,,,,,,,,,,,,,,,,,,21/Jun/13 22:50;mumrah;0001-CAMEL-6478-Add-alwaysRun-true-to-TestNG-annotations.patch;https://issues.apache.org/jira/secure/attachment/12589179/0001-CAMEL-6478-Add-alwaysRun-true-to-TestNG-annotations.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-06-23 07:04:41.492,,,no_permission,,Unknown,,,,,,,,,,,334539,,,Sun Jun 23 07:04:41 UTC 2013,,,,,,,0|i1lpiv:,334865,,,,,,,,,23/Jun/13 07:04;davsclaus;Thanks for the patch.,,,,,,,,,,,,,,,,,,,,,,,
Bean component - Calling a bean with method name with () as empty parameter - Better error message if method does not exists,CAMEL-6455,12652735,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,13/Jun/13 19:48,20/Jun/13 15:58,13/Mar/19 22:19,20/Jun/13 15:58,2.11.0,,,,,,,,,2.12.0,,,,camel-core,,,,,,0,,,,,,,,,"Calling a bean from a route like
{code}
                from(""direct:start"")
                    .to(""bean:myBean?method=doSomething()"")
                    .to(""mock:result"");
{code}

Notice the method has () as parameters. Which would refer to a method with no-args. 

But if the method has 1 arg like
{code}
        public static void doSomething(Exchange exchange) {
            exchange.getIn().setHeader(""foo"", ""bar"");
        }
{code}

We get this error about some type converter probem
{code}
Caused by: org.apache.camel.NoTypeConversionAvailableException: No type converter available to convert from type: java.lang.String to the required type: org.apache.camel.Exchange with value 
{code}

We should have a better error message.

If removing () then Camel can call the method as it can do parameter matching.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,333059,,,2013-06-13 19:48:28.0,,,,,,,0|i1lgef:,333387,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Shorthand usage of property placeholders in onException does not work.,CAMEL-6429,12651095,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,adam.wehner,adam.wehner,05/Jun/13 11:45,06/Jun/13 17:34,13/Mar/19 22:19,06/Jun/13 17:34,2.10.1,,,,,,,,,2.10.4,2.11.0,,,,,,,,,0,,,,,,,,,"The syntax {{propName}} does not resolve in the onException block and the header is set with the value {{propName}}. The syntax ${properties:propName} does work as expected. Further the shorthand syntax also works correctly in the usual route.

<camel:onException>
  <camel:exception>java.lang.Exception</camel:exception>
  <camel:setHeader headerName=""anyHeaderName"">
    <camel:simple>{{myPropName}}</camel:simple>
  </camel:setHeader>				
  ..
</camel:onException>",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-06-05 13:17:41.036,,,no_permission,,Unknown,,,,,,,,,,,331421,,,Thu Jun 06 17:34:06 UTC 2013,,,,,,,0|i1l6cf:,331753,,,,,,,,,"05/Jun/13 13:17;davsclaus;Can you try upgrade to newer release and as well test with SNAPSHOT. We have fixed property placeholder resolution recently for nested elements, and thus very likely fixed this also.",06/Jun/13 10:12;adam.wehner;Okay. The issue is fixed in 2.10.4 and 2.11.0. Thanks. From my point of view this issue can be closed.,06/Jun/13 17:34;davsclaus;Thanks for testing and reporting back,,,,,,,,,,,,,,,,,,,,,
BridgePropertyPlaceholderConfigurer does not support nested Spring properties from System variables,CAMEL-6326,12645224,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,hefiso,hefiso,29/Apr/13 12:50,25/May/13 14:51,13/Mar/19 22:19,25/May/13 14:51,2.11.0,,,,,,,,,2.10.5,2.11.1,2.12.0,,camel-spring,,,,,,1,,,,,,,,,"Some work has been done in order to make BridgePropertyPlaceholderConfigurer work with nested spring-style properties (see CAMEL-6233).

However, the fix does not allow using nested spring-style properties for system variables; here only camel-style is supported. For example: 

inCamelSystem=${${environment}.inCamelSystem} does not work when ""environment"" has been set as a system variable (e.g. set to ""junit"").

inCamelSystem={{{{environment}}.inCamelSystem}} works, however.

Camel test case is attached.",Windows 7,,,,,,,,,,,,,CAMEL-5978,,,,,,,29/Apr/13 12:51;hefiso;BridgePropertyPlaceholderConfigurer-problem.zip;https://issues.apache.org/jira/secure/attachment/12580964/BridgePropertyPlaceholderConfigurer-problem.zip,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-05-25 10:28:57.216,,,no_permission,,Unknown,,,,,,,,,,,325586,,,Sat May 25 11:16:33 UTC 2013,,,,,,,0|i1k667:,325931,,,,,,,,,25/May/13 10:28;davsclaus;Thanks for the test case. I got it fixed now.,25/May/13 11:16;preben;Seems related issues,,,,,,,,,,,,,,,,,,,,,,
"bean language - Should always use ?method= as preferred way for specifying the method name, can cause problems with the old dot style",CAMEL-6395,12649338,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,24/May/13 14:59,24/May/13 15:27,13/Mar/19 22:19,24/May/13 15:27,2.10.4,2.11.0,,,,,,,,2.10.5,2.11.1,2.12.0,,camel-core,,,,,,0,,,,,,,,,"This expression should work out of the box
{code}
                    .setHeader(""goto"").simple(""${bean:myBean?method=whereToMate('MyAppV1.2.3', 'blah')}"")
{code}

",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,329665,,,2013-05-24 14:59:18.0,,,,,,,0|i1kvjb:,330000,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Multiple http4 components modify each other port setting,CAMEL-6078,12632179,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,lorenzo,lorenzo,13/Feb/13 10:25,23/May/13 09:32,13/Mar/19 22:19,23/May/13 09:32,2.10.3,,,,,,,,,2.10.5,2.11.1,2.12.0,,,,,,,,1,,,,,,,,,"
This works:

from(""timer://foo?fixedRate=true&delay=0&period=5000"")
  .to(""http4:www.google.com/search?q=Camel"")
  .to(""log:root"");

This does not

from(""timer://foo?fixedRate=true&delay=0&period=5000"")
 .to(""http4:www.google.com/search?q=Camel"")
 .to(""log:root"")
 .to(""http4:192.168.172.41:8092/MyService/?wsdl"");

A netstat shows this (173.194.35.145 is a google ip)

tcp6       0      1 10.4.5.107:42627        173.194.35.145:8092     SYN_SENT


It looks like the second http4 declaration modified the port of the first one.

Setting explicitly the port fixes the problem, like this

from(""timer://foo?fixedRate=true&delay=0&period=5000"")
 .to(""http4:www.google.com:80/search?q=Camel"")
 .to(""log:root"")
 .to(""http4:192.168.172.41:8092/MyService/?wsdl"");

Even this works fine

from(""timer://foo?fixedRate=true&delay=0&period=5000"")
 .to(""http4:www.google.com/search?q=Camel"")
 .to(""log:root"")
 .to(""http4:192.168.172.41:8092/MyService/?wsdl"")
 .to(""http4:www.yahoo.com:80/search?q=Camel"");

camel-http does NOT have this issue (BTW camel-http4 is missing from the form component list). 

I do not think this is by design, anyway it is very confusing to debug, because suddenly a previously working route stops to work just ""freezing"".


","java version ""1.6.0_26""
Linux 3.2.0-4-amd64 #1 SMP Debian 3.2.32-1 x86_64 GNU/Linux

",,,,,,,,,,,,,,,,,,,,22/May/13 13:46;rene avontuur;HTTPComponent.patch;https://issues.apache.org/jira/secure/attachment/12584302/HTTPComponent.patch,22/May/13 13:46;rene avontuur;HttpDefaultPortNumberTest.java;https://issues.apache.org/jira/secure/attachment/12584303/HttpDefaultPortNumberTest.java,,,,,2.0,,,,,,,,,,,,,,,,,,,2013-05-22 13:19:53.432,,,no_permission,,Unknown,,,,,,,,,,,312675,,,Thu May 23 09:32:35 UTC 2013,,,,,,,0|i1hyiv:,313021,,,,,,,,,"22/May/13 13:19;fhoeben;The name of issue is misleading. The problem is not multiple http4 components, but multiple ENDPOINTS (which will be far more common).",22/May/13 13:46;rene avontuur;patch for solving this issue and unit tests,23/May/13 09:32;davsclaus;Thanks for reporting and the patch,,,,,,,,,,,,,,,,,,,,,
GsonDataFormat doesn't use given Gson instance anymore,CAMEL-6369,12647913,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,wd_dietmar,wd_dietmar,16/May/13 08:35,17/May/13 06:50,13/Mar/19 22:19,17/May/13 06:50,2.11.0,,,,,,,,,2.11.1,2.12.0,,,camel-gson,,,,,,0,,,,,,,,,"Before 2.11.0 it was possible to configure GsonDataFormat to use an externally created and configured Gson instance. (Which was especially necessary since it was not possible to configure via GsonDataFormat.) But in 2.11.0 GsonDataFormat implements ServiceSupport which breaks this. Because doStart _always_ creates a new Gson instance although one has been given by a constructor call.

Probably a 

{code}
if (this.gson == null) {
  // ... old doStart body ...
}
{code}

could do in doStart method.
",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-05-17 06:11:26.987,,,no_permission,,Novice,,,,,,,,,,,328269,,,Fri May 17 06:50:34 UTC 2013,,,,,,,0|i1kmzr:,328613,,,,,,,,,"17/May/13 06:11;davsclaus;Thanks for reporting. 

Would you work on a patch to fix this?","17/May/13 06:31;wd_dietmar;You're welcome.

Patch... not really... :| but following workaround works, so I'm pretty sure it's just the above mentioned if which is missing.

{code:java}
package org.apache.camel.component.gson;

import com.google.gson.Gson;

// Workaround for https://issues.apache.org/jira/browse/CAMEL-6369
public class WorkaroundGsonDataFormat extends GsonDataFormat {

  Gson gson;

  public WorkaroundGsonDataFormat(Gson gson, Class<?> unmarshalType) {
    super(gson, unmarshalType);
    this.gson = gson;
  }

  @Override
  protected void doStart() throws Exception {
    if (this.gson == null) {
      super.doStart();
    }
  }

}
{code}",17/May/13 06:50;davsclaus;Thanks for reporting,,,,,,,,,,,,,,,,,,,,,
Simple expression and predicate behaviors are different when accessing to map with a space in the key,CAMEL-6191,12638226,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,xfournet,xfournet,21/Mar/13 12:59,17/May/13 06:10,13/Mar/19 22:19,17/May/13 06:10,2.10.3,2.10.4,,,,,,,,2.10.5,2.11.1,2.12.0,,camel-core,,,,,,0,,,,,,,,,"{noformat}
The simple langage permit to access to a map element by specifying the key between [], ie ${body[key]}
When the key contains a space the behavior is not the same for a simple expression or a simple predicate:
* expression ${body[my key]} will access to the ""my key"" element -> correct
* expression ${body['my key']} will access to the ""my key"" element -> correct
* predicate ${body[my key]} == 'value' will access to the ""mykey"" element -> incorrect
* predicate ${body['my key']} == 'value' will access to the ""my key"" element -> correct
{noformat}

See attached testcase, the current ouput is
{noformat}
618 [main] INFO route1 - VALUE1
624 [main] INFO route1 - VALUE1
629 [main] INFO route1 - VALUE2
633 [main] INFO route1 - VALUE2
641 [main] INFO route1 - test1 is false
648 [main] INFO route1 - test2 is true
652 [main] INFO route1 - test3 is true
657 [main] INFO route1 - test4 is false
{noformat}

but it should be
{noformat}
618 [main] INFO route1 - VALUE1
624 [main] INFO route1 - VALUE1
629 [main] INFO route1 - VALUE2
633 [main] INFO route1 - VALUE2
641 [main] INFO route1 - test1 is true
648 [main] INFO route1 - test2 is true
652 [main] INFO route1 - test3 is false
657 [main] INFO route1 - test4 is false
{noformat}
",,,,,,,,,,,,,,,,,,,,,16/May/13 11:42;antoine.dessaigne;CAMEL-6191-Simple-expression-and-predicate-behaviors.patch;https://issues.apache.org/jira/secure/attachment/12583466/CAMEL-6191-Simple-expression-and-predicate-behaviors.patch,21/Mar/13 12:59;xfournet;CamelTest.java;https://issues.apache.org/jira/secure/attachment/12574792/CamelTest.java,,,,,2.0,,,,,,,,,,,,,,,,,,,2013-03-21 15:56:01.385,,,no_permission,,Unknown,,,,,,,,,,,318702,,,Fri May 17 06:10:26 UTC 2013,,,Patch Available,,,,0|i1izov:,319043,,,,,,,,,"21/Mar/13 15:56;davsclaus;Well it would be best practice to use quotes in the key name, eg 'my key', then that works fine","21/Mar/13 16:10;davsclaus;I added a note on the simple page.

When your keys have spaces, then you must use enclose the key in single quotes.","21/Mar/13 18:21;xfournet;Humm... not convainced with the resolution ""Not a problem"".
I'm not very fan of the best practice you recommend since it is just redundant with the [].
Anyway even with that, if it is not enforced it could be still a problem for an user that is not aware of it. We spend a lot of time to track this problem so it could be avoided for others user if this issue is fixed either by:
* parse the predicate in the same way than the expression. While debugging I see that the problem is located in org.apache.camel.language.simple.SimplePredicateParser#removeIgnorableWhiteSpaceTokens that transforms the tokens field from $\{body[Header Key]\} == 'VALUE1' to $\{body[HeaderKey]\}=='VALUE1' 
* enforce the ""must"" in the documentation and reject the expression that use an unquoted key with space in order to avoid strange behaviors
","22/Mar/13 13:15;muellerc;[~davsclaus]: Is there a constraint why we cannot offer the same behavior for predicates and expressions? I agree with Xavier that ['key with space'] is a bit cumbersome compared with [key with space] (I know, it's only two chars, but could save some time for people who are lazy in reading the java doc ;-) ).","02/Apr/13 12:42;davsclaus;Sorry the notification mail got lost for me somehow.

Its very common to use quotes for strings when it contains a space when passing that in as a single argument, such as on the command shell, java parameter, other programming languages.

So IMHO requiring to use a quoted string when it has a space is valid for me.

Though I agree we should look into improving the parser to see if we can parse the expression or predicate as much alike as possible.","16/May/13 11:43;antoine.dessaigne;Hi, I've just added a patch that fixes this issue.",17/May/13 06:10;davsclaus;Thanks for the patch.,,,,,,,,,,,,,,,,,
StringQuoteHelper not able to handle single quote inside double quote,CAMEL-6333,12645934,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,nikolaj.torring,nikolaj.torring,03/May/13 08:46,14/May/13 07:26,13/Mar/19 22:19,14/May/13 07:26,2.11.0,,,,,,,,,2.11.1,2.12.0,,,camel-core,,,,,,0,,,,,,,,,"The StringQuoteHelper does not handle single quotes inside double quotes correctly, as these should be seen as part of the content inside the double quote and not an actual single quote start.

This means that a route containing a simple transform like this will fail:

{code:xml} 
<transform>  
  <simple>${in.body.replace(""'UNH+"", ""'\nUNH+"")}</simple>
</transform>
{code} 

",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-05-14 07:26:18.343,,,no_permission,,Unknown,,,,,,,,,,,326293,,,Tue May 14 07:26:18 UTC 2013,,,,,,,0|i1kaj3:,326638,,,,,,,,,14/May/13 07:26;davsclaus;Thanks for reporting.,,,,,,,,,,,,,,,,,,,,,,,
camel-shiro - Should detect new username if always reauthenticate is false,CAMEL-6352,12647198,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,12/May/13 08:25,12/May/13 08:39,13/Mar/19 22:19,12/May/13 08:39,2.10.4,,,,,,,,,2.10.5,2.11.1,2.12.0,,,,,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/camel-shiro-security-policy-with-alwaysReauthenticate-set-to-false-doesn-t-detect-seperate-user-loggn-td5732043.html",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,327555,,,2013-05-12 08:25:46.0,,,,,,,0|i1kil3:,327899,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-http / servlet - Should set response correctly on Exchange depending on has out or not,CAMEL-6350,12647154,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,11/May/13 08:10,11/May/13 08:19,13/Mar/19 22:19,11/May/13 08:19,,,,,,,,,,2.10.5,2.11.1,2.12.0,,camel-http,camel-jetty,camel-servlet,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Setting-Body-in-restlet-route-without-to-does-not-work-tp5732285.html

Same problem we noticed in camel-restlet is in camel-servlet ",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,327511,,,2013-05-11 08:10:30.0,,,,,,,0|i1kibb:,327855,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-restlet - Should set response correctly on Exchange depending on has out or not,CAMEL-6349,12647015,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,10/May/13 14:26,10/May/13 14:29,13/Mar/19 22:19,10/May/13 14:29,2.10.0,2.11.0,,,,,,,,2.10.5,2.11.1,2.12.0,,camel-restlet,,,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Setting-Body-in-restlet-route-without-to-does-not-work-tp5732285.html",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,327372,,,2013-05-10 14:26:33.0,,,,,,,0|i1khgf:,327716,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-fop - Does not propagate headers,CAMEL-6284,12642560,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,bvahdat,davsclaus,davsclaus,15/Apr/13 16:31,02/May/13 06:11,13/Mar/19 22:19,01/May/13 15:23,,,,,,,,,,2.10.5,2.11.1,2.12.0,,,,,,,,1,,,,,,,,,"See
http://stackoverflow.com/questions/15977012/apache-camel-fop-component-not-propagating-headers

Patches is welcome from the community.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-05-01 15:06:20.588,,,no_permission,,Novice,,,,,,,,,,,322974,,,Wed May 01 15:23:25 UTC 2013,,,,,,,0|i1jq2f:,323319,,,,,,,,,"01/May/13 15:06;bvahdat;The {{FopProducer}} doesn't adhere the MEP properly as it always calls {{Exchange#getOut()}} unconditionally to put the transformation result into the OUT message. However it should better do so *only* if the MEP is InOut and in case of InOnly the transformation result should be set as the body of IN Message.

Fixing this properly would cause regression by the existing tests, so let's keep this part the way it already is.",01/May/13 15:23;bvahdat;The fix is backported to the 2.11.x and 2.10.x branches as well.,,,,,,,,,,,,,,,,,,,,,,
StreamProducer does not close streams,CAMEL-6152,12636181,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,luzifer42,luzifer42,09/Mar/13 09:36,02/May/13 02:30,13/Mar/19 22:19,21/Mar/13 01:26,2.10.4,,,,,,,,,2.10.5,2.11.0,,,camel-stream,,,,,,0,,,,,,,,,"Steps to reproduce:
write a big content(whiche exceeds any write buffer) to the route
.setHeader(""stream"").constant(new File(""test.txt"")).to(""stream:header"");


The source code does not make sense here: org.apache.camel.component.stream.StreamProducer, line 183
{code}boolean systemStream = outputStream != System.out || outputStream != System.err;{code}
should be more like:
{code}boolean systemStream = outputStream == System.out || outputStream == System.err;{code}

By the way:
the line 168 is weird too:
{code}boolean expiredStream = force || headerStream || reachedLimit;  // evaluation order is important!{code}
this would (without this bug) always close header streams after every message.",,,,,,,,,,,,CAMEL-6155,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-03-21 01:26:17.245,,,no_permission,,Novice,,,,,,,,,,,316673,,,Thu Mar 21 01:26:17 UTC 2013,,,,,,,0|i1in6f:,317015,,,,,,,,,21/Mar/13 01:26;njiang;This issue was resolved by CAMEL-6155.,,,,,,,,,,,,,,,,,,,,,,,
camel-sql - Should support % sign in query,CAMEL-5355,12560150,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,11/Jun/12 10:58,02/May/13 02:29,13/Mar/19 22:19,12/Jun/12 09:29,2.8.5,2.9.2,,,,,,,,2.10.0,,,,camel-sql,,,,,,0,,,,,,,,,"See nabble


We should look into supporting the % sign in the sql component.
It should possible be less strict in uri validation as people can enter SQL queries. And to make it easy, they should just be able to dump in the SQL as is.

We should also consider adding an option to refer to a SQL that is enlisted in the registry.

Also people should be able to externalize their SQL in a .properties file and have Camel lookup that using the {{ }} notation",,,,,,,,,,,,,,,,,,,,CAMEL-5357,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-06-11 13:43:14.477,,,no_permission,,Unknown,,,,,,,,,,,241228,,,Wed Jun 13 14:15:16 UTC 2012,,,,,,,0|i026kv:,10667,,,,,,,,,"11/Jun/12 11:22;davsclaus;CAMEL-4425 broke this, as it changed UnsafeUriCharactersEncoder to exclude the % sign. 

The % sign should be percent encoded, if you want to use it as is, eg % should be %25 to indicate the % sign itself.
http://en.wikipedia.org/wiki/Url_encode

The % sign is otherwise used to escape values, such as space, becomes %20.",11/Jun/12 13:43;hadrian;URIs that configure endpoints should be valid URIs as defined by [RFC-2396|http://www.ietf.org/rfc/rfc2396.txt] or stop claiming that Camel uses URIs. Tools expect that and many components are unusable for that matter. Maybe we should have a serious discussion on dev@ about that because this issues comes back over and over again.,"12/Jun/12 09:29;davsclaus;The % sign is now supported if specified as %25 which is according to URI encoding rules.

Discussion opened on @dev","13/Jun/12 14:02;hadrian;I am not sure if this issue should be marked as fixed only in 2.10. As only tests were added, I'd say that camel works as designed in the already released 2.9.2 and 2.8.5, right?","13/Jun/12 14:13;davsclaus;CAMEL-5357 fixes this issue, by supporting using decimal encoding in uri.
","13/Jun/12 14:15;davsclaus;I added a link to CAMEL-5357 as that fixes this issue, by allowing end users to use the decimal encoded value of %25 to indicate the % sign, accordingly to the uri encoding rules.

At first I did not want to backport this to the previous branches (eg 2.9 and 2.8), without discussing on @dev.",,,,,,,,,,,,,,,,,,
camel-quickfix: QuickfixjEndpoint should adhere the InOut exchange pattern if you would ask for this MEP,CAMEL-5880,12624185,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,bvahdat,bvahdat,bvahdat,16/Dec/12 12:20,01/May/13 07:04,13/Mar/19 22:19,30/Apr/13 22:32,2.10.3,,,,,,,,,2.10.5,2.11.1,2.12.0,,camel-quickfix,,,,,,0,,,,,,,,,See http://camel.465427.n5.nabble.com/camel-quickfix-RequestReplyExample-java-io-IOException-td5723769.html,,,,,,,,,,,,,,CAMEL-4038,CAMEL-5861,,,,,,27/Feb/13 11:36;stevebate;requestreply-2.patch;https://issues.apache.org/jira/secure/attachment/12571180/requestreply-2.patch,27/Feb/13 02:16;stevebate;requestreply.patch;https://issues.apache.org/jira/secure/attachment/12571117/requestreply.patch,,,,,2.0,,,,,,,,,,,,,,,,,,,2013-02-27 02:16:59.228,,,no_permission,,Unknown,,,,,,,,,,,298914,,,Wed May 01 07:04:50 UTC 2013,,,,,,,0|i15wmn:,242586,,,,,,,,,"16/Dec/12 12:29;bvahdat;As the evidence consider running [this example|https://svn.apache.org/repos/asf/camel/trunk/components/camel-quickfix/src/test/java/org/apache/camel/component/quickfixj/examples/RequestReplyExample.java] and look at the log entry of the second route:

{code}
2012-12-16 13:23:04,198 [ssage Processor] INFO  OrderStatusRequestLog          - Exchange[
, Id:ID-Babaks-iMac-local-50218-1355660581337-0-24
, ExchangePattern:InOnly
, Properties:{CamelToEndpoint=log://OrderStatusRequestLog?multiline=true&showAll=true&showOut=true, CamelCreatedTimestamp=Sun Dec 16 13:23:04 CET 2012, CamelFilterMatched=true}
, Headers:{EventCategory=AppMessageReceived, breadcrumbId=ID-Babaks-iMac-local-50218-1355660581337-0-23, MessageType=H, SessionID=FIX.4.2:MARKET->TRADER}
, BodyType:quickfix.fix42.OrderStatusRequest
, Body:8=FIX.4.29=8235=H34=249=TRADER52=20121216-12:23:04.19456=MARKET11=XYZ37=abc54=155=GOOG10=145
, Out: null
]
{code}","16/Dec/12 13:41;bvahdat;Correspondingly what [the documentation|http://camel.apache.org/quickfix.html#Quickfix-Example] claims to be the case for [this example|https://svn.apache.org/repos/asf/camel/trunk/components/camel-quickfix/src/test/java/org/apache/camel/component/quickfixj/examples/RequestReplyExample.java] is wrong.
",27/Feb/13 02:16;stevebate;Patch to fix the RequestReplyExample.,"27/Feb/13 08:12;bvahdat;Applying the provided patch on trunk causes regression by {{QuickfixjConsumerTest}} and {{QuickfixjProducerTest}}:

{code}
~/dev/workspace/camel/components/camel-quickfix>svn st
M       src/test/java/org/apache/camel/component/quickfixj/examples/RequestReplyExample.java
M       src/main/java/org/apache/camel/component/quickfixj/MessagePredicate.java
M       src/main/java/org/apache/camel/component/quickfixj/converter/QuickfixjConverters.java
M       src/main/java/org/apache/camel/component/quickfixj/QuickfixjConsumer.java
M       src/main/java/org/apache/camel/component/quickfixj/QuickfixjEndpoint.java
~/dev/workspace/camel/components/camel-quickfix>mvn test
[INFO] Scanning for projects...
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: QuickFIX/J 2.11-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-bundle-plugin:2.3.7:cleanVersions (versions) @ camel-quickfix ---
[INFO] 
[INFO] --- maven-remote-resources-plugin:1.4:process (default) @ camel-quickfix ---
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ camel-quickfix ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 4 resources
[INFO] Copying 3 resources
[INFO] 
[INFO] --- maven-compiler-plugin:2.5.1:compile (default-compile) @ camel-quickfix ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] >>> camel-package-maven-plugin:2.11-SNAPSHOT:package (default) @ camel-quickfix >>>
[INFO] 
[INFO] --- maven-bundle-plugin:2.3.7:cleanVersions (versions) @ camel-quickfix ---
[INFO] 
[INFO] --- maven-remote-resources-plugin:1.4:process (default) @ camel-quickfix ---
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ camel-quickfix ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 4 resources
[INFO] Copying 3 resources
[INFO] Copying 3 resources
[INFO] 
[INFO] --- maven-compiler-plugin:2.5.1:compile (default-compile) @ camel-quickfix ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] <<< camel-package-maven-plugin:2.11-SNAPSHOT:package (default) @ camel-quickfix <<<
[INFO] 
[INFO] --- camel-package-maven-plugin:2.11-SNAPSHOT:package (default) @ camel-quickfix ---
[INFO] Generated /Users/bvahdat/dev/workspace/camel/components/camel-quickfix/target/classes/META-INF/services/org/apache/camel/component.properties containing the Camel component quickfix
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ camel-quickfix ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 4 resources
[INFO] Copying 3 resources
[INFO] 
[INFO] --- maven-compiler-plugin:2.5.1:testCompile (default-testCompile) @ camel-quickfix ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-surefire-plugin:2.13:test (default-test) @ camel-quickfix ---
[INFO] Surefire report directory: /Users/bvahdat/dev/workspace/camel/components/camel-quickfix/target/surefire-reports

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running org.apache.camel.component.quickfixj.QuickfixjComponentTest
<20130227-07:36:21, FIX.4.4:FOO->BAR, event> (Session FIX.4.4:FOO->BAR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130227-07:36:21, FIX.4.4:FOO->BAR, event> (Created session: FIX.4.4:FOO->BAR)
<20130227-07:36:21, FIX.4.4:FOO->BAR, error> (java.io.IOException: java.io.IOException: Endpoint unavailable: vm:1234 (Next retry in 30000 milliseconds))
<20130227-07:36:22, FIX.4.4:ACCEPTOR->INITIATOR, event> (Session FIX.4.4:ACCEPTOR->INITIATOR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130227-07:36:22, FIX.4.4:ACCEPTOR->INITIATOR, event> (Created session: FIX.4.4:ACCEPTOR->INITIATOR)
<20130227-07:36:22, FIX.4.4:INITIATOR->ACCEPTOR, event> (Session FIX.4.4:INITIATOR->ACCEPTOR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130227-07:36:22, FIX.4.4:INITIATOR->ACCEPTOR, event> (Created session: FIX.4.4:INITIATOR->ACCEPTOR)
<20130227-07:36:23, FIX.4.4:INITIATOR->ACCEPTOR, outgoing> (8=FIX.4.49=7235=A34=149=INITIATOR52=20130227-07:36:23.02956=ACCEPTOR98=0108=3010=004)
<20130227-07:36:23, FIX.4.4:ACCEPTOR->INITIATOR, incoming> (8=FIX.4.49=7235=A34=149=INITIATOR52=20130227-07:36:23.02956=ACCEPTOR98=0108=3010=004)
<20130227-07:36:23, FIX.4.4:ACCEPTOR->INITIATOR, event> (Accepting session FIX.4.4:ACCEPTOR->INITIATOR from anonymous(121165166))
<20130227-07:36:23, FIX.4.4:ACCEPTOR->INITIATOR, event> (Acceptor heartbeat set to 30 seconds)
<20130227-07:36:23, FIX.4.4:ACCEPTOR->INITIATOR, event> (Received logon)
<20130227-07:36:23, FIX.4.4:INITIATOR->ACCEPTOR, event> (Initiated logon request)
<20130227-07:36:23, FIX.4.4:ACCEPTOR->INITIATOR, outgoing> (8=FIX.4.49=7235=A34=149=ACCEPTOR52=20130227-07:36:23.03856=INITIATOR98=0108=3010=004)
<20130227-07:36:23, FIX.4.4:INITIATOR->ACCEPTOR, incoming> (8=FIX.4.49=7235=A34=149=ACCEPTOR52=20130227-07:36:23.03856=INITIATOR98=0108=3010=004)
<20130227-07:36:23, FIX.4.4:ACCEPTOR->INITIATOR, event> (Responding to logon request)
<20130227-07:36:23, FIX.4.4:INITIATOR->ACCEPTOR, event> (Received logon)
<20130227-07:36:23, FIX.4.4:ACCEPTOR->INITIATOR, outgoing> (8=FIX.4.49=8135=C34=249=ACCEPTOR52=20130227-07:36:23.04456=INITIATOR94=0147=Test164=ID10=166)
<20130227-07:36:23, FIX.4.4:INITIATOR->ACCEPTOR, incoming> (8=FIX.4.49=8135=C34=249=ACCEPTOR52=20130227-07:36:23.04456=INITIATOR94=0147=Test164=ID10=166)
<20130227-07:36:23, FIX.4.4:ACCEPTOR->INITIATOR, outgoing> (8=FIX.4.49=8135=C34=349=ACCEPTOR52=20130227-07:36:23.04556=INITIATOR94=0147=Test164=ID10=168)
<20130227-07:36:23, FIX.4.4:INITIATOR->ACCEPTOR, incoming> (8=FIX.4.49=8135=C34=349=ACCEPTOR52=20130227-07:36:23.04556=INITIATOR94=0147=Test164=ID10=168)
<20130227-07:36:23, FIX.4.4:FOO->BAR, event> (Session FIX.4.4:FOO->BAR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130227-07:36:23, FIX.4.4:FOO->BAR, event> (Created session: FIX.4.4:FOO->BAR)
<20130227-07:36:23, FIX.4.4:FOO->BAR, error> (java.io.IOException: java.io.IOException: Endpoint unavailable: vm:1234 (Next retry in 30000 milliseconds))
<20130227-07:36:23, FIX.4.4:FOO->BAR, event> (Session FIX.4.4:FOO->BAR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130227-07:36:23, FIX.4.4:FOO->BAR, event> (Created session: FIX.4.4:FOO->BAR)
<20130227-07:36:23, FIX.4.4:FOO->BAR, error> (java.io.IOException: java.io.IOException: Endpoint unavailable: vm:1234 (Next retry in 30000 milliseconds))
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.555 sec
Running org.apache.camel.component.quickfixj.QuickfixjConfigurationTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec
Running org.apache.camel.component.quickfixj.QuickfixjConsumerTest
Tests run: 4, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 0.176 sec <<< FAILURE!
processInOutExchange(org.apache.camel.component.quickfixj.QuickfixjConsumerTest)  Time elapsed: 0.171 sec  <<< FAILURE!
org.mockito.exceptions.verification.NeverWantedButInvoked: 
exchange.setException(
    isA(java.lang.Exception)
);
Never wanted here:
-> at org.apache.camel.component.quickfixj.QuickfixjConsumerTest.processInOutExchange(QuickfixjConsumerTest.java:134)
But invoked here:
-> at org.apache.camel.component.quickfixj.QuickfixjConsumerTest.processInOutExchange(QuickfixjConsumerTest.java:133)

	at org.apache.camel.component.quickfixj.QuickfixjConsumerTest.processInOutExchange(QuickfixjConsumerTest.java:134)

setExceptionOnInOutExchange(org.apache.camel.component.quickfixj.QuickfixjConsumerTest)  Time elapsed: 0.003 sec  <<< FAILURE!
org.mockito.exceptions.verification.junit.ArgumentsAreDifferent: 
Argument(s) are different! Wanted:
exchange.setException(
    isA(java.lang.IllegalStateException)
);
-> at org.apache.camel.component.quickfixj.QuickfixjConsumerTest.setExceptionOnInOutExchange(QuickfixjConsumerTest.java:114)
Actual invocation has different arguments:
exchange.setException(
    java.lang.NullPointerException
);
-> at org.apache.camel.component.quickfixj.QuickfixjConsumer.onExchange(QuickfixjConsumer.java:45)

	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:513)
	at org.apache.camel.component.quickfixj.QuickfixjConsumerTest.setExceptionOnInOutExchange(QuickfixjConsumerTest.java:114)

Running org.apache.camel.component.quickfixj.QuickfixjConvertersTest
<20130227-07:36:23, FIX.4.4:FOO->BAR, event> (Session FIX.4.4:FOO->BAR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130227-07:36:23, FIX.4.4:FOO->BAR, event> (Created session: FIX.4.4:FOO->BAR)
<20130227-07:36:23, FIX.4.4:FOO->BAR, event> (Session FIX.4.4:FOO->BAR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130227-07:36:23, FIX.4.4:FOO->BAR, event> (Created session: FIX.4.4:FOO->BAR)
<20130227-07:36:23, FIX.4.4:FOO->BAR, event> (Session FIX.4.4:FOO->BAR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130227-07:36:23, FIX.4.4:FOO->BAR, event> (Created session: FIX.4.4:FOO->BAR)
Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.628 sec
Running org.apache.camel.component.quickfixj.QuickfixjEngineTest
<20130227-07:36:23, FIX.4.4:FOO->BAR, event> (Session FIX.4.4:FOO->BAR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130227-07:36:23, FIX.4.4:FOO->BAR, event> (Created session: FIX.4.4:FOO->BAR)
<20130227-07:36:23, FIX.4.4:FOO->BAR, error> (java.io.IOException: java.io.IOException: Endpoint unavailable: vm:1234 (Next retry in 30000 milliseconds))
<20130227-07:36:23, FIX.4.2:MARKET->TRADER, event> (Session FIX.4.2:MARKET->TRADER schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130227-07:36:23, FIX.4.2:MARKET->TRADER, event> (Created session: FIX.4.2:MARKET->TRADER)
<20130227-07:36:23, FIX.4.2:TRADER->MARKET, event> (Session FIX.4.2:TRADER->MARKET schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130227-07:36:23, FIX.4.2:TRADER->MARKET, event> (Created session: FIX.4.2:TRADER->MARKET)
<20130227-07:36:24, FIX.4.2:TRADER->MARKET, outgoing> (8=FIX.4.29=6835=A34=149=TRADER52=20130227-07:36:24.99056=MARKET98=0108=12010=193)
<20130227-07:36:24, FIX.4.2:MARKET->TRADER, incoming> (8=FIX.4.29=6835=A34=149=TRADER52=20130227-07:36:24.99056=MARKET98=0108=12010=193)
<20130227-07:36:24, FIX.4.2:MARKET->TRADER, event> (Accepting session FIX.4.2:MARKET->TRADER from anonymous(1183562193))
<20130227-07:36:24, FIX.4.2:MARKET->TRADER, event> (Acceptor heartbeat set to 120 seconds)
<20130227-07:36:24, FIX.4.2:TRADER->MARKET, event> (Initiated logon request)
<20130227-07:36:24, FIX.4.2:MARKET->TRADER, event> (Received logon)
<20130227-07:36:24, FIX.4.2:MARKET->TRADER, outgoing> (8=FIX.4.29=6835=A34=149=MARKET52=20130227-07:36:24.99256=TRADER98=0108=12010=195)
<20130227-07:36:24, FIX.4.2:TRADER->MARKET, incoming> (8=FIX.4.29=6835=A34=149=MARKET52=20130227-07:36:24.99256=TRADER98=0108=12010=195)
<20130227-07:36:24, FIX.4.2:MARKET->TRADER, event> (Responding to logon request)
<20130227-07:36:24, FIX.4.2:TRADER->MARKET, event> (Received logon)
<20130227-07:36:24, FIX.4.2:TRADER->MARKET, outgoing> (8=FIX.4.29=9235=C34=249=TRADER52=20130227-07:36:24.99456=MARKET94=0147=Test164=ID33=158=Content10=146)
<20130227-07:36:24, FIX.4.2:MARKET->TRADER, incoming> (8=FIX.4.29=9235=C34=249=TRADER52=20130227-07:36:24.99456=MARKET94=0147=Test164=ID33=158=Content10=146)
<20130227-07:36:25, FIX.4.4:FOO->BAR, event> (Session FIX.4.4:FOO->BAR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130227-07:36:25, FIX.4.4:FOO->BAR, event> (Created session: FIX.4.4:FOO->BAR)
Tests run: 19, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.074 sec
Running org.apache.camel.component.quickfixj.QuickfixjProducerTest
Tests run: 5, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 5.048 sec <<< FAILURE!
processInOutExchangeSuccess(org.apache.camel.component.quickfixj.QuickfixjProducerTest)  Time elapsed: 5.036 sec  <<< FAILURE!
org.mockito.exceptions.verification.WantedButNotInvoked: 
Wanted but not invoked:
message.setBody(
    8=FIX.4.29=2535=C49=TARGET56=SENDER10=194
);
-> at org.apache.camel.component.quickfixj.QuickfixjProducerTest.processInOutExchangeSuccess(QuickfixjProducerTest.java:155)
Actually, there were zero interactions with this mock.

	at org.apache.camel.component.quickfixj.QuickfixjProducerTest.processInOutExchangeSuccess(QuickfixjProducerTest.java:155)

Running org.apache.camel.component.quickfixj.QuickfixjSpringTest
<20130227-07:36:30, FIX.4.2:ACCEPTOR->INITIATOR, event> (Session FIX.4.2:ACCEPTOR->INITIATOR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130227-07:36:30, FIX.4.2:ACCEPTOR->INITIATOR, event> (Created session: FIX.4.2:ACCEPTOR->INITIATOR)
<20130227-07:36:30, FIX.4.2:INITIATOR->ACCEPTOR, event> (Session FIX.4.2:INITIATOR->ACCEPTOR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130227-07:36:30, FIX.4.2:INITIATOR->ACCEPTOR, event> (Created session: FIX.4.2:INITIATOR->ACCEPTOR)
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.727 sec

Results :

Failed tests: 
  QuickfixjConsumerTest.processInOutExchange:134 
exchange.setException(
    isA(java.lang.Exception)
);
Never wanted here:
-> at org.apache.camel.component.quickfixj.QuickfixjConsumerTest.processInOutExchange(QuickfixjConsumerTest.java:134)
But invoked here:
-> at org.apache.camel.component.quickfixj.QuickfixjConsumerTest.processInOutExchange(QuickfixjConsumerTest.java:133)

  QuickfixjConsumerTest.setExceptionOnInOutExchange:114 
Argument(s) are different! Wanted:
exchange.setException(
    isA(java.lang.IllegalStateException)
);
-> at org.apache.camel.component.quickfixj.QuickfixjConsumerTest.setExceptionOnInOutExchange(QuickfixjConsumerTest.java:114)
Actual invocation has different arguments:
exchange.setException(
    java.lang.NullPointerException
);
-> at org.apache.camel.component.quickfixj.QuickfixjConsumer.onExchange(QuickfixjConsumer.java:45)

  QuickfixjProducerTest.processInOutExchangeSuccess:155 
Wanted but not invoked:
message.setBody(
    8=FIX.4.29=2535=C49=TARGET56=SENDER10=194
);
-> at org.apache.camel.component.quickfixj.QuickfixjProducerTest.processInOutExchangeSuccess(QuickfixjProducerTest.java:155)
Actually, there were zero interactions with this mock.


Tests run: 42, Failures: 3, Errors: 0, Skipped: 0

[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 12.834s
[INFO] Finished at: Wed Feb 27 08:36:30 CET 2013
[INFO] Final Memory: 13M/1011M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.13:test (default-test) on project camel-quickfix: There are test failures.
[ERROR] 
[ERROR] Please refer to /Users/bvahdat/dev/workspace/camel/components/camel-quickfix/target/surefire-reports for the individual test results.
[ERROR] -> [Help 1]
[ERROR] 
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException
{code}","27/Feb/13 11:36;stevebate;This is an updated patch with modifications for the unit tests. However, I'd wait to apply the patches until we've discussed the issue with the InOut MEP and the overwriting of the inbound message (which requires the new Exchange copy behavior in the patch).",29/Apr/13 10:01;stevebate;Any more updates on this issue?,"29/Apr/13 11:19;bvahdat;Please give me time to find some free cycle, then will dig into this and try to understand what exactly is going on.","30/Apr/13 10:43;bvahdat;Steve,

In the meanwhile the changes of CAMEL-5979 has been applied which is the following commit:

http://svn.apache.org/viewvc?view=revision&revision=r1455750

So apparently the way we retrieve the {{messageSessionID}} has been changed on the consumer side through that ticket. Now with your patch in place I end up with OOM while doing {{mvn clean install}} on this module, but this was not the case before CAMEL-5979! Have you got any idea what the conflict is.

Also your included patch contains the change by {{MessagePredicate}} where reversing the SessionID has been removed but the comment {{Reverse session ID for reply}} is still there. So which one should be correct, the code or the comment?

Fell free to comment on CAMEL-5979 as well if you as *QuickFIX/J Guru* think the changes of CAMEL-5979 were not appropriate or if there would be a better way to do that.
","30/Apr/13 15:28;bvahdat;This is what I get if I apply your patch. Actually all tests pass well, but then at the end get {{java.lang.OutOfMemoryError: PermGen space}}. On the other hand if {{@Ignore}} the Spring test {{org.apache.camel.component.quickfixj.QuickfixjSpringTest}} then the OOM disappears.

{code}
~/dev/workspace/camel/components/camel-quickfix>echo $MAVEN_OPTS
-Xms1024m -Xmx1024m -XX:MaxPermSize=1024m
~/dev/workspace/camel/components/camel-quickfix>mvn test
[INFO] Scanning for projects...
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: QuickFIX/J 2.12-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-bundle-plugin:2.3.7:cleanVersions (versions) @ camel-quickfix ---
[INFO] 
[INFO] --- maven-remote-resources-plugin:1.4:process (default) @ camel-quickfix ---
[INFO] 
[INFO] >>> camel-package-maven-plugin:2.12-SNAPSHOT:generate-components-list (default) @ camel-quickfix >>>
[INFO] 
[INFO] --- maven-bundle-plugin:2.3.7:cleanVersions (versions) @ camel-quickfix ---
[INFO] 
[INFO] --- maven-remote-resources-plugin:1.4:process (default) @ camel-quickfix ---
[INFO] 
[INFO] <<< camel-package-maven-plugin:2.12-SNAPSHOT:generate-components-list (default) @ camel-quickfix <<<
[INFO] 
[INFO] --- camel-package-maven-plugin:2.12-SNAPSHOT:generate-components-list (default) @ camel-quickfix ---
[INFO] Generated /Users/bvahdat/dev/workspace/camel/components/camel-quickfix/target/generated/camel/components/META-INF/services/org/apache/camel/component.properties containing the Camel component quickfix
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ camel-quickfix ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 4 resources
[INFO] Copying 3 resources
[INFO] Copying 1 resource
[INFO] 
[INFO] --- maven-compiler-plugin:2.5.1:compile (default-compile) @ camel-quickfix ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ camel-quickfix ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 4 resources
[INFO] Copying 3 resources
[INFO] 
[INFO] --- maven-compiler-plugin:2.5.1:testCompile (default-testCompile) @ camel-quickfix ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-surefire-plugin:2.14.1:test (default-test) @ camel-quickfix ---
[INFO] Surefire report directory: /Users/bvahdat/dev/workspace/camel/components/camel-quickfix/target/surefire-reports

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running org.apache.camel.component.quickfixj.QuickfixjComponentTest
<20130430-15:20:57, FIX.4.4:FOO->BAR, event> (Session FIX.4.4:FOO->BAR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130430-15:20:57, FIX.4.4:FOO->BAR, event> (Created session: FIX.4.4:FOO->BAR)
<20130430-15:20:57, FIX.4.4:FOO->BAR, error> (java.io.IOException: java.io.IOException: Endpoint unavailable: vm:1234 (Next retry in 30000 milliseconds))
<20130430-15:20:57, FIX.4.4:ACCEPTOR->INITIATOR, event> (Session FIX.4.4:ACCEPTOR->INITIATOR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130430-15:20:57, FIX.4.4:ACCEPTOR->INITIATOR, event> (Created session: FIX.4.4:ACCEPTOR->INITIATOR)
<20130430-15:20:57, FIX.4.4:INITIATOR->ACCEPTOR, event> (Session FIX.4.4:INITIATOR->ACCEPTOR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130430-15:20:57, FIX.4.4:INITIATOR->ACCEPTOR, event> (Created session: FIX.4.4:INITIATOR->ACCEPTOR)
<20130430-15:20:58, FIX.4.4:INITIATOR->ACCEPTOR, outgoing> (8=FIX.4.49=7235=A34=149=INITIATOR52=20130430-15:20:58.86856=ACCEPTOR98=0108=3010=011)
<20130430-15:20:58, FIX.4.4:ACCEPTOR->INITIATOR, incoming> (8=FIX.4.49=7235=A34=149=INITIATOR52=20130430-15:20:58.86856=ACCEPTOR98=0108=3010=011)
<20130430-15:20:58, FIX.4.4:ACCEPTOR->INITIATOR, event> (Accepting session FIX.4.4:ACCEPTOR->INITIATOR from anonymous(84419191))
<20130430-15:20:58, FIX.4.4:ACCEPTOR->INITIATOR, event> (Acceptor heartbeat set to 30 seconds)
<20130430-15:20:58, FIX.4.4:ACCEPTOR->INITIATOR, event> (Received logon)
<20130430-15:20:58, FIX.4.4:ACCEPTOR->INITIATOR, event> (Responding to Logon request)
<20130430-15:20:58, FIX.4.4:INITIATOR->ACCEPTOR, event> (Initiated logon request)
<20130430-15:20:58, FIX.4.4:ACCEPTOR->INITIATOR, outgoing> (8=FIX.4.49=7235=A34=149=ACCEPTOR52=20130430-15:20:58.87556=INITIATOR98=0108=3010=009)
<20130430-15:20:58, FIX.4.4:INITIATOR->ACCEPTOR, incoming> (8=FIX.4.49=7235=A34=149=ACCEPTOR52=20130430-15:20:58.87556=INITIATOR98=0108=3010=009)
<20130430-15:20:58, FIX.4.4:INITIATOR->ACCEPTOR, event> (Received logon)
<20130430-15:20:58, FIX.4.4:ACCEPTOR->INITIATOR, outgoing> (8=FIX.4.49=8135=C34=249=ACCEPTOR52=20130430-15:20:58.88056=INITIATOR94=0147=Test164=ID10=170)
<20130430-15:20:58, FIX.4.4:INITIATOR->ACCEPTOR, incoming> (8=FIX.4.49=8135=C34=249=ACCEPTOR52=20130430-15:20:58.88056=INITIATOR94=0147=Test164=ID10=170)
<20130430-15:20:58, FIX.4.4:ACCEPTOR->INITIATOR, outgoing> (8=FIX.4.49=8135=C34=349=ACCEPTOR52=20130430-15:20:58.88156=INITIATOR94=0147=Test164=ID10=172)
<20130430-15:20:58, FIX.4.4:INITIATOR->ACCEPTOR, incoming> (8=FIX.4.49=8135=C34=349=ACCEPTOR52=20130430-15:20:58.88156=INITIATOR94=0147=Test164=ID10=172)
<20130430-15:20:58, FIX.4.4:FOO->BAR, event> (Session FIX.4.4:FOO->BAR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130430-15:20:58, FIX.4.4:FOO->BAR, event> (Created session: FIX.4.4:FOO->BAR)
<20130430-15:20:58, FIX.4.4:FOO->BAR, error> (java.io.IOException: java.io.IOException: Endpoint unavailable: vm:1234 (Next retry in 30000 milliseconds))
<20130430-15:20:58, FIX.4.4:FOO->BAR, event> (Session FIX.4.4:FOO->BAR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130430-15:20:58, FIX.4.4:FOO->BAR, event> (Created session: FIX.4.4:FOO->BAR)
<20130430-15:20:58, FIX.4.4:FOO->BAR, error> (java.io.IOException: java.io.IOException: Endpoint unavailable: vm:1234 (Next retry in 30000 milliseconds))
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.455 sec
Running org.apache.camel.component.quickfixj.QuickfixjConfigurationTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec
Running org.apache.camel.component.quickfixj.QuickfixjConsumerTest
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.167 sec
Running org.apache.camel.component.quickfixj.QuickfixjConvertersTest
<20130430-15:20:59, FIX.4.4:FOO->BAR, event> (Session FIX.4.4:FOO->BAR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130430-15:20:59, FIX.4.4:FOO->BAR, event> (Created session: FIX.4.4:FOO->BAR)
<20130430-15:20:59, FIX.4.4:FOO->BAR, event> (Session FIX.4.4:FOO->BAR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130430-15:20:59, FIX.4.4:FOO->BAR, event> (Created session: FIX.4.4:FOO->BAR)
<20130430-15:20:59, FIX.4.4:FOO->BAR, event> (Session FIX.4.4:FOO->BAR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130430-15:20:59, FIX.4.4:FOO->BAR, event> (Created session: FIX.4.4:FOO->BAR)
Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.627 sec
Running org.apache.camel.component.quickfixj.QuickfixjEngineTest
<20130430-15:20:59, FIX.4.4:FOO->BAR, event> (Session FIX.4.4:FOO->BAR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130430-15:20:59, FIX.4.4:FOO->BAR, event> (Created session: FIX.4.4:FOO->BAR)
<20130430-15:20:59, FIX.4.4:FOO->BAR, error> (java.io.IOException: java.io.IOException: Endpoint unavailable: vm:1234 (Next retry in 30000 milliseconds))
<20130430-15:20:59, FIX.4.2:MARKET->TRADER, event> (Session FIX.4.2:MARKET->TRADER schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130430-15:20:59, FIX.4.2:MARKET->TRADER, event> (Created session: FIX.4.2:MARKET->TRADER)
<20130430-15:20:59, FIX.4.2:TRADER->MARKET, event> (Session FIX.4.2:TRADER->MARKET schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130430-15:20:59, FIX.4.2:TRADER->MARKET, event> (Created session: FIX.4.2:TRADER->MARKET)
<20130430-15:21:00, FIX.4.2:TRADER->MARKET, outgoing> (8=FIX.4.29=6835=A34=149=TRADER52=20130430-15:21:00.81756=MARKET98=0108=12010=174)
<20130430-15:21:00, FIX.4.2:MARKET->TRADER, incoming> (8=FIX.4.29=6835=A34=149=TRADER52=20130430-15:21:00.81756=MARKET98=0108=12010=174)
<20130430-15:21:00, FIX.4.2:MARKET->TRADER, event> (Accepting session FIX.4.2:MARKET->TRADER from anonymous(1620729172))
<20130430-15:21:00, FIX.4.2:MARKET->TRADER, event> (Acceptor heartbeat set to 120 seconds)
<20130430-15:21:00, FIX.4.2:TRADER->MARKET, event> (Initiated logon request)
<20130430-15:21:00, FIX.4.2:MARKET->TRADER, event> (Received logon)
<20130430-15:21:00, FIX.4.2:MARKET->TRADER, event> (Responding to Logon request)
<20130430-15:21:00, FIX.4.2:MARKET->TRADER, outgoing> (8=FIX.4.29=6835=A34=149=MARKET52=20130430-15:21:00.81956=TRADER98=0108=12010=176)
<20130430-15:21:00, FIX.4.2:TRADER->MARKET, incoming> (8=FIX.4.29=6835=A34=149=MARKET52=20130430-15:21:00.81956=TRADER98=0108=12010=176)
<20130430-15:21:00, FIX.4.2:TRADER->MARKET, event> (Received logon)
<20130430-15:21:00, FIX.4.2:TRADER->MARKET, outgoing> (8=FIX.4.29=9235=C34=249=TRADER52=20130430-15:21:00.82156=MARKET94=0147=Test164=ID33=158=Content10=118)
<20130430-15:21:00, FIX.4.2:MARKET->TRADER, incoming> (8=FIX.4.29=9235=C34=249=TRADER52=20130430-15:21:00.82156=MARKET94=0147=Test164=ID33=158=Content10=118)
<20130430-15:21:00, FIX.4.4:FOO->BAR, event> (Session FIX.4.4:FOO->BAR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130430-15:21:00, FIX.4.4:FOO->BAR, event> (Created session: FIX.4.4:FOO->BAR)
Tests run: 19, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.079 sec
Running org.apache.camel.component.quickfixj.QuickfixjProducerTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.088 sec
Running org.apache.camel.component.quickfixj.QuickfixjSpringTest
<20130430-15:21:01, FIX.4.2:ACCEPTOR->INITIATOR, event> (Session FIX.4.2:ACCEPTOR->INITIATOR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130430-15:21:01, FIX.4.2:ACCEPTOR->INITIATOR, event> (Created session: FIX.4.2:ACCEPTOR->INITIATOR)
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 4.529 sec
java.lang.OutOfMemoryError: PermGen space

Results :

Tests run: 42, Failures: 0, Errors: 0, Skipped: 0

[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 12.485s
[INFO] Finished at: Tue Apr 30 17:21:06 CEST 2013
[INFO] Final Memory: 14M/1011M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.14.1:test (default-test) on project camel-quickfix: Execution default-test of goal org.apache.maven.plugins:maven-surefire-plugin:2.14.1:test failed: The forked VM terminated without saying properly goodbye. VM crash or System.exit called ?
[ERROR] Command was/bin/sh -c cd /Users/bvahdat/dev/workspace/camel/components/camel-quickfix && /Library/Java/JavaVirtualMachines/1.6.0_32-b05-420.jdk/Contents/Home/bin/java -jar /Users/bvahdat/dev/workspace/camel/components/camel-quickfix/target/surefire/surefirebooter5621841200692637059.jar /Users/bvahdat/dev/workspace/camel/components/camel-quickfix/target/surefire/surefire8781436168046582511tmp /Users/bvahdat/dev/workspace/camel/components/camel-quickfix/target/surefire/surefire_08815624006783717081tmp
[ERROR] -> [Help 1]
[ERROR] 
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/PluginExecutionException
{code}","30/Apr/13 20:04;bvahdat;O.K. found a solution for now to make {{maven clean install}} work properly:

{code}
<build>
  <plugins>
    <plugin>
      <artifactId>maven-surefire-plugin</artifactId>
      <configuration>
        <!--
          TODO: should fork per test as otherwise the build would cause 'java.lang.OutOfMemoryError: PermGen space'.
          interestingly found a quick & dirty solution for this which would be to remove the <filter> tag inside the
          test resource QuickfixjSpringTest-context.xml then the build would run perfectly without a need to fork always!
        -->
        <forkMode>always</forkMode>
      </configuration>
    </plugin>
  </plugins>
</build>
{code}",30/Apr/13 22:32;bvahdat;Thanks for providing the patch which is backported to the 2.11.x as well as 2.10.x branches. Fixed CS and modified POM as well to avoid OOM for now while running the tests *all together* ({{mvn test}}).,01/May/13 07:04;bvahdat;See also [my answer|http://camel.465427.n5.nabble.com/camel-quickfix-RequestReplyExample-java-io-IOException-tp5723769p5731828.html] to your question @ user forum.,,,,,,,,,,,,
camel-example-cxf-osgi camel-example-cxf-blueprint have some warning when running the test,CAMEL-6322,12645012,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,njiang,njiang,27/Apr/13 09:51,28/Apr/13 08:48,13/Mar/19 22:19,28/Apr/13 08:48,2.10.4,2.11.0,,,,,,,,2.10.5,2.11.1,2.12.0,,,,,,,,0,,,,,,,,,I just found there are some warning message are thrown when running the test of these module or deploy the bundles into OSGi platform. ,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,325374,,,Sun Apr 28 08:48:22 UTC 2013,,,,,,,0|i1k4v3:,325719,,,,,,,,,"28/Apr/13 08:48;njiang;Applied the patch into trunk, camel-2.11.x and camel-2.10.x branches.",,,,,,,,,,,,,,,,,,,,,,,
Setting exceptionHandler on consumer from uri should work,CAMEL-6312,12644404,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,24/Apr/13 18:02,25/Apr/13 14:14,13/Mar/19 22:19,25/Apr/13 14:14,2.10.4,2.11.0,,,,,,,,2.11.1,2.12.0,,,camel-core,,,,,,0,,,,,,,,,"You should be able to set a custom {{ExceptionHandler}} on an endpoint, using {{consumer.exceptionHandler=#myHandler}}, such as from routes.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,324771,,,Thu Apr 25 11:11:42 UTC 2013,,,,,,,0|i1k15j:,325117,,,,,,,,,"25/Apr/13 11:11;davsclaus;When creating a consumer from endpoint.createConsumer, we need to make sure configureConsumer is also called so it can do the extra configuration needed.",,,,,,,,,,,,,,,,,,,,,,,
Regression in 2.11.0 bean invocation,CAMEL-6307,12644073,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davidkarlsen@gmail.com,davidkarlsen@gmail.com,23/Apr/13 09:12,24/Apr/13 17:16,13/Mar/19 22:19,24/Apr/13 17:16,2.11.0,,,,,,,,,2.11.1,2.12.0,,,camel-core,,,,,,0,argument,beaninvocation,parse,,,,,,"When upgradring from 2.10.2 to 2.11.0 I met this regression:

I have a step in my route which invokes a bean:
{noformat}
<camel:to uri=""bean:transferConverter?method=transferToMultimap( ${body} )"" />
{noformat}

after the upgrade it threw:
{noformat}
org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[Message: BeanInvocation public abstract com.mycomp.Transfer com.mycomp.TransferService.doTransfer(com.mycomp.Transfer) with [com.mycomp.Transfer@7e299629[.....]]]]

Caused by: org.apache.camel.NoTypeConversionAvailableException: No type converter available to convert from type: java.lang.String to the required type: com.mycomp.Transfer with value   
        at org.apache.camel.impl.converter.BaseTypeConverterRegistry.mandatoryConvertTo(BaseTypeConverterRegistry.java:181) ~[camel-core-2.11.0.jar:2.11.0]
        at org.apache.camel.impl.converter.BaseTypeConverterRegistry.mandatoryConvertTo(BaseTypeConverterRegistry.java:149) ~[camel-core-2.11.0.jar:2.11.0]
        at org.apache.camel.component.bean.MethodInfo$2.evaluateParameterValue(MethodInfo.java:540) ~[camel-core-2.11.0.jar:2.11.0]

{noformat}

If I change the route to:
{noformat}
<camel:to uri=""bean:transferConverter?method=transferToMultimap(${body})"" />
{noformat}
(notice if no whitespace before/after ${body} it works as before).

The problematic code seems to be in org.apache.camel.component.bean.MethodInfo",N/A,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-04-24 17:16:19.996,,,no_permission,,Unknown,,,,,,,,,,,324440,,,Wed Apr 24 17:16:19 UTC 2013,,,,,,,0|i1jz3r:,324785,Regression,,,,,,,,24/Apr/13 17:16;davsclaus;Thanks for reporting,,,,,,,,,,,,,,,,,,,,,,,
camel-cxf - Should detect existing User-Agent header to avoid adding duplicate,CAMEL-6171,12637424,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,davsclaus,davsclaus,17/Mar/13 09:12,28/Mar/13 02:31,13/Mar/19 22:19,28/Mar/13 02:31,,,,,,,,,,2.11.0,,,,camel-cxf,,,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/CXF-proxy-route-creates-multiple-two-user-agent-HTTP-headers-tp5729137.html",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-03-19 03:53:27.171,,,no_permission,,Unknown,,,,,,,,,,,317916,,,Thu Mar 28 02:30:48 UTC 2013,,,,,,,0|i1iuu7:,318257,,,,,,,,,"19/Mar/13 03:53;njiang;That is caused by the CXF is using this hard code to check the User-Agent
{code}
        if (!connection.getRequestProperties().containsKey(""User-Agent"")) {
            connection.addRequestProperty(""User-Agent"", Version.getCompleteVersionString());
        }
{code}

I will update the camel-cxf code for it.
","19/Mar/13 19:26;ay;Hi Willem,
you mean cxf's rt-transport-http, no?

or you want to add an workaround in camel-cxf?

i think we should fix this in cxf, by replacing the above if-line with this one:
if (connection.getRequestProperty(""User-Agent"") == null) {

regards, aki","19/Mar/13 19:35;dkulp;Actually, I think Camel should NOT be copying the User-Agent header over unless it's in RAW/MESSAGE mode.   The server may be using the User-Agent header to change how the response is sent or similar if it knows that a particular client type may have issues.  Thus, if CXF is going to be processing the response (POJO, CXF_MESSAGE, PAYLOAD), then the User-Agent should be set to CXF.   If in RAW/MESSAGE, then likely the original agent should be retained.","20/Mar/13 05:01;njiang;Hi Aki,

The code that I showed is from Headers.java in cxf-rt-transports-http, I will follow it and did some update on cxf code repository. 

","20/Mar/13 05:37;njiang;Hi Dan,

I agree with you and will commit a quick fix for it.","20/Mar/13 09:37;ay;Hi Dan,
I am not sure about that special automatic handling of the User-Agent header in camel.

When you are passing a CXF message over a camel route, you will typically need an explicit removeHeaders step in the root configuration to filter out those transport-specific headers that you don't want to forward to the second transparent leg (e.g., the accept gzip stuff, chunking option, maybe cookies, etc). So, we can leave it to the scenario designer to decide if the user-agent is removed or forwarded in this way. no?

regards, aki

",27/Mar/13 12:31;davsclaus;Whats the status. Is this resolved?,"28/Mar/13 02:30;njiang;I think we should let the user have the control of the User-Agent setting, I don't think we need to filter the User-Agent in POJO, CXF_MESSAGE, PAYLOAD by default, if the user doesn't want to use the default one or copy from the source, he can override it by setting the header in his route.
",,,,,,,,,,,,,,,,
Simple expression in spring XML not work if it come in multiple xml lines,CAMEL-6179,12637766,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,darwish,darwish,19/Mar/13 15:06,25/Mar/13 16:16,13/Mar/19 22:19,25/Mar/13 16:16,2.10.1,,,,,,,,,2.10.5,2.11.0,,,,,,,,,0,,,,,,,,,http://camel.465427.n5.nabble.com/Simple-expression-in-spring-XML-not-work-if-it-come-in-multiple-xml-line-td5729408.html,,,,,,,,,,,,,,,,,,,,,23/Mar/13 22:43;msvab;CAMEL-6179.patch;https://issues.apache.org/jira/secure/attachment/12575200/CAMEL-6179.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-03-23 22:43:04.64,,,no_permission,,Unknown,,,,,,,,,,,318246,,,Mon Mar 25 16:16:12 UTC 2013,,,,,,,0|i1iwvj:,318587,,,,,,,,,23/Mar/13 22:43;msvab;Attached a patch for this issue.,25/Mar/13 16:16;davsclaus;Thanks for the patch.,,,,,,,,,,,,,,,,,,,,,,
"loadResourceAsStream in ObjectHelper could not load resource with leading ""/""",CAMEL-6204,12638745,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,nannou9,nannou9,24/Mar/13 20:12,25/Mar/13 16:15,13/Mar/19 22:19,25/Mar/13 16:15,2.10.4,,,,,,,,,2.10.5,2.11.0,,,camel-core,,,,,,0,"camel-core,",load,ObjectHelper,resource,util,,,,"As i could not found any test for ObjectHelper.loadResourceAsStream and i have feced some unexpected behaviur I have created a simple unit test.

The expected result is to get all resources loaded.
Unfortunately ObjectHelper.loadResourceAsStream does no allow to load resource from relative path and for path with leading ""/"".
I my opinion it is a bug.

{code}
    public void testLoadResourceAsStream() {
        InputStream res1 = ObjectHelper.loadResourceAsStream(""org/apache/camel/util/ObjectHelperResourceTestFile.properties"");
        InputStream res2 = ObjectHelper.loadResourceAsStream(""/org/apache/camel/util/ObjectHelperResourceTestFile.properties"");

        assertNotNull(""Cannot load resource without leading \""/\"""", res1);
        assertNotNull(""Cannot load resource with leading \""/\"""", res2);
    }
{code}

",,,,,,,,,,,,,,,,,,,,,24/Mar/13 22:07;nannou9;CAMEL6204.diff;https://issues.apache.org/jira/secure/attachment/12575250/CAMEL6204.diff,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-03-25 02:44:32.632,,,no_permission,,Unknown,,,,,,,,,,,319220,,,Mon Mar 25 16:15:36 UTC 2013,,,Patch Available,,,,0|i1j2vz:,319561,,,,,,,,,"24/Mar/13 21:19;nannou9;Test result

Tests run: 4470, Failures: 0, Errors: 0, Skipped: 1

The above tests includes the new test for loadResourceAsStream.",24/Mar/13 21:32;nannou9;The loadResurceAsURL also need a patch so will reupload the patch in few moments.,"24/Mar/13 22:08;nannou9;Done.

Greetings,
Piotr",25/Mar/13 02:44;njiang;Applied the patch with thanks to Piotr after fixing the missing file issue of ObjectHelperResourceTestFile.properties.,25/Mar/13 16:15;davsclaus;Thanks for the patch.,,,,,,,,,,,,,,,,,,,
SQL component will not look for parameters in header when no body in message,CAMEL-6168,12637369,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,jonasf,jonasf,16/Mar/13 09:01,21/Mar/13 09:17,13/Mar/19 22:19,21/Mar/13 09:17,2.11.0,,,,,,,,,2.11.0,,,,camel-sql,,,,,,0,,,,,,,,,Line 60 in SqlProducer checks if the body is null. This will cause any parameters in header fields not to be populated into the prepared statement. Sample scenario is with a camel-jetty enriching a response using camel-sql. ,2.11-SNAPSHOT,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-03-20 17:23:43.538,,,no_permission,,Novice,,,,,,,,,,,317861,,,Thu Mar 21 09:17:05 UTC 2013,,,,,,,0|i1iuhz:,318202,,,,,,,,,"20/Mar/13 17:23;davsclaus;Can you be more precises what is the problem?

Line 60 is:
{code}
                            populateStatement(ps, i, expected);
{code}

It has nothing to do if body is null etc.","20/Mar/13 17:24;davsclaus;The sql component does not look for parameters in headers, only the body.","20/Mar/13 20:19;jonasf;I find line 60 to be:

{code:xml} 
                if (exchange.getIn().getBody() != null) {
{code}

As seen in the repository here:

https://svn.apache.org/repos/asf/camel/trunk/components/camel-sql/src/main/java/org/apache/camel/component/sql/SqlProducer.java

Also, I believe the documentation clearly states that the headers are searched for parameters and the code does actually do this. 

{quote}
""When using named parameters, Camel will lookup the names from, in the given precedence:
1. from message body if its a java.util.Map
2. from message headers"" 
{quote}
- http://camel.apache.org/sql-component.html

By just removing the if statement the code works. ","21/Mar/13 09:10;davsclaus;Ah I was looking at the camel-sql component for 2.10.

Yeah I am fixing this now on 2.11.",21/Mar/13 09:17;davsclaus;This bug only applies to 2.11,,,,,,,,,,,,,,,,,,,
camel-jetty - Issue when bridging with jetty http producer and uri query parameter has encoded value,CAMEL-6175,12637578,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,18/Mar/13 17:22,19/Mar/13 10:51,13/Mar/19 22:19,19/Mar/13 10:51,2.10.4,,,,,,,,,2.10.5,2.11.0,,,camel-jetty,,,,,,0,,,,,,,,,Related to CAMEL-6173 but the jetty http producer in camel-jetty has a problem as well.,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,318058,,,Mon Mar 18 17:48:34 UTC 2013,,,,,,,0|i1ivpr:,318399,,,,,,,,,18/Mar/13 17:48;davsclaus;Fixed on 2.10 branch. The 2.11/trunk needs some different work as the component has changed a bit in 2.11.,,,,,,,,,,,,,,,,,,,,,,,
Aggregate EIP - Completion from batch consumer should trigger first,CAMEL-6172,12637425,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,17/Mar/13 09:19,17/Mar/13 10:20,13/Mar/19 22:19,17/Mar/13 10:20,2.10.0,,,,,,,,,2.10.5,2.11.0,,,camel-core,eip,,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Issue-Aggregator2-BatchCompletion-disturbed-by-other-completions-and-fails-to-happen-when-it-probabl-tp5728850.html",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,317917,,,2013-03-17 09:19:11.0,,,,,,,0|i1iuuf:,318258,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bad link in dot file with Transform message (camel:dot goal) ,CAMEL-6141,12635788,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,acorbiere,acorbiere,07/Mar/13 13:45,07/Mar/13 13:56,13/Mar/19 22:19,07/Mar/13 13:56,2.10.0,,,,,,,,,2.10.5,2.11.0,,,camel-core,tooling,,,,,0,patch,,,,,,,,"To generate dot file for Transform message, there is a problem with the url link (http://camel.apache.org/message-translator.html and not http://camel.apache.org/message-transform.htm).",All,900,900,,0%,900,900,,,,,,,,,,,,,,07/Mar/13 13:47;acorbiere;NodeData.diff;https://issues.apache.org/jira/secure/attachment/12572533/NodeData.diff,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-03-07 13:56:12.73,,,no_permission,,,,,,,,,,,,,316280,,,Thu Mar 07 13:56:12 UTC 2013,,,Patch Available,,,,0|i1ikrb:,316623,,,,,,,,,07/Mar/13 13:56;davsclaus;Thanks for the patch.,,,,,,,,,,,,,,,,,,,,,,,
grails - class cast exception on startup,CAMEL-6079,12632345,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,kotkot,kotkot,14/Feb/13 10:02,16/Feb/13 09:37,13/Mar/19 22:19,16/Feb/13 09:37,2.10.3,,,,,,,,,2.10.4,2.11.0,2.9.6,,camel-core,jmx,,,,,0,,,,,,,,,"from time to time I get this exception on startup of my application. It doesn't happen every time but something like 1 out of 3 times.
I use camel with cxf+activemq as transport.


| Running Grails application
03:55:01.502 INFO  o.a.camel.spring.SpringCamelContext - Apache Camel 2.10.3 (CamelContext: camelContext) is starting
03:55:01.871 INFO  o.a.c.m.ManagementStrategyFactory - JMX enabled.
03:55:02.037 WARN  o.a.camel.spring.SpringCamelContext - Lifecycle strategy org.apache.camel.management.DefaultManagementLifecycleStrategy@4774ac6b failed starting CamelContext (camelContext) due java.lang.ClassCastException: sun.proxy.$Proxy93 cannot be cast to org.apache.camel.api.management.ManagedOperation
03:55:02.039 INFO  o.a.camel.spring.SpringCamelContext - Apache Camel 2.10.3 (CamelContext: camelContext) is shutting down
03:55:02.043 INFO  o.a.c.i.c.DefaultTypeConverter - TypeConverterRegistry utilization[attempts=0, hits=0, misses=0, failures=0] mappings[total=189, misses=0]
03:55:02.046 INFO  o.a.camel.spring.SpringCamelContext - Apache Camel 2.10.3 (CamelContext: camelContext) is shutdown in 0.005 seconds. Uptime 0.545 seconds.
03:55:02.071 ERROR o.c.g.g.w.c.GrailsContextLoader - Error executing bootstraps: java.lang.ClassCastException: sun.proxy.$Proxy93 cannot be cast to org.apache.camel.api.management.ManagedOperation
org.apache.camel.RuntimeCamelException: java.lang.ClassCastException: sun.proxy.$Proxy93 cannot be cast to org.apache.camel.api.management.ManagedOperation
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1271) ~[camel-core-2.10.3.jar:2.10.3]
	at org.apache.camel.management.DefaultManagementLifecycleStrategy.onContextStart(DefaultManagementLifecycleStrategy.java:184) ~[camel-core-2.10.3.jar:2.10.3]
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1512) ~[camel-core-2.10.3.jar:2.10.3]
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1444) ~[camel-core-2.10.3.jar:2.10.3]
	at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:179) ~[camel-spring-2.10.3.jar:2.10.3]
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60) ~[camel-core-2.10.3.jar:2.10.3]
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1412) ~[camel-core-2.10.3.jar:2.10.3]
	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:228) ~[camel-spring-2.10.3.jar:2.10.3]
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:118) ~[camel-spring-2.10.3.jar:2.10.3]
	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:280) ~[camel-spring-2.10.3.jar:2.10.3]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:97) ~[spring-context-3.1.2.RELEASE.jar:3.1.2.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:324) ~[spring-context-3.1.2.RELEASE.jar:3.1.2.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:934) ~[spring-context-3.1.2.RELEASE.jar:3.1.2.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:472) ~[spring-context-3.1.2.RELEASE.jar:3.1.2.RELEASE]
	at org.codehaus.groovy.grails.commons.spring.DefaultRuntimeSpringConfiguration.getApplicationContext(DefaultRuntimeSpringConfiguration.java:153) ~[grails-spring-2.1.3.jar:2.1.3]
	at org.codehaus.groovy.grails.commons.spring.GrailsRuntimeConfigurator.configure(GrailsRuntimeConfigurator.java:170) ~[grails-core-2.1.3.jar:2.1.3]
	at org.codehaus.groovy.grails.commons.spring.GrailsRuntimeConfigurator.configure(GrailsRuntimeConfigurator.java:127) ~[grails-core-2.1.3.jar:2.1.3]
	at org.codehaus.groovy.grails.web.context.GrailsConfigUtils.configureWebApplicationContext(GrailsConfigUtils.java:121) ~[grails-web-2.1.3.jar:2.1.3]
	at org.codehaus.groovy.grails.web.context.GrailsContextLoader.initWebApplicationContext(GrailsContextLoader.java:104) ~[grails-web-2.1.3.jar:2.1.3]
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:111) [spring-web-3.1.2.RELEASE.jar:3.1.2.RELEASE]
	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4791) [tomcat-embed-core-7.0.30.jar:7.0.30]
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5285) [tomcat-embed-core-7.0.30.jar:7.0.30]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150) [tomcat-embed-core-7.0.30.jar:7.0.30]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1559) [tomcat-embed-core-7.0.30.jar:7.0.30]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1549) [tomcat-embed-core-7.0.30.jar:7.0.30]
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334) [na:1.7.0_13]
	at java.util.concurrent.FutureTask.run(FutureTask.java:166) [na:1.7.0_13]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) [na:1.7.0_13]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) [na:1.7.0_13]
	at java.lang.Thread.run(Thread.java:722) [na:1.7.0_13]
Caused by: java.lang.ClassCastException: sun.proxy.$Proxy93 cannot be cast to org.apache.camel.api.management.ManagedOperation
	at org.apache.camel.management.MBeanInfoAssembler.doExtractAttributesAndOperations(MBeanInfoAssembler.java:164) ~[camel-core-2.10.3.jar:2.10.3]
	at org.apache.camel.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:97) ~[camel-core-2.10.3.jar:2.10.3]
	at org.apache.camel.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:118) ~[camel-core-2.10.3.jar:2.10.3]
	at org.apache.camel.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:105) ~[camel-core-2.10.3.jar:2.10.3]
	at org.apache.camel.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:105) ~[camel-core-2.10.3.jar:2.10.3]
	at org.apache.camel.management.MBeanInfoAssembler.getMBeanInfo(MBeanInfoAssembler.java:70) ~[camel-core-2.10.3.jar:2.10.3]
	at org.apache.camel.management.DefaultManagementMBeanAssembler.assemble(DefaultManagementMBeanAssembler.java:69) ~[camel-core-2.10.3.jar:2.10.3]
	at org.apache.camel.spring.spi.SpringManagementMBeanAssembler.assemble(SpringManagementMBeanAssembler.java:71) ~[camel-spring-2.10.3.jar:2.10.3]
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:227) ~[camel-core-2.10.3.jar:2.10.3]
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:217) ~[camel-core-2.10.3.jar:2.10.3]
	at org.apache.camel.management.ManagedManagementStrategy.manageNamedObject(ManagedManagementStrategy.java:75) ~[camel-core-2.10.3.jar:2.10.3]
	at org.apache.camel.management.ManagedManagementStrategy.manageObject(ManagedManagementStrategy.java:68) ~[camel-core-2.10.3.jar:2.10.3]
	at org.apache.camel.management.DefaultManagementLifecycleStrategy.manageObject(DefaultManagementLifecycleStrategy.java:772) ~[camel-core-2.10.3.jar:2.10.3]
	at org.apache.camel.management.DefaultManagementLifecycleStrategy.onContextStart(DefaultManagementLifecycleStrategy.java:180) ~[camel-core-2.10.3.jar:2.10.3]
	... 28 common frames omitted
03:55:02.205 INFO  o.c.g.g.c.s.GrailsWebApplicationContext - Closing org.codehaus.groovy.grails.commons.spring.GrailsWebApplicationContext@442c7c44: startup date [Thu Feb 14 03:54:20 CST 2013]; parent: Root WebApplicationContext
03:55:02.237 INFO  o.a.camel.spring.SpringCamelContext - No spring-event endpoint enabled to handle event: org.springframework.context.event.ContextClosedEvent[source=org.codehaus.groovy.grails.commons.spring.GrailsWebApplicationContext@442c7c44: startup date [Thu Feb 14 03:54:20 CST 2013]; parent: Root WebApplicationContext]","jdk 1.7.0_13
grails 2.1.3
osx 10.8.2
tomcat 7
",,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-02-16 09:37:28.293,,,no_permission,,Unknown,,,,,,,,,,,312841,,,Sat Feb 16 09:37:28 UTC 2013,,,,,,,0|i1hzjz:,313187,,,,,,,,,"16/Feb/13 09:13;kotkot;Ommited part of stacktrace:
""localhost-startStop-1@5558"" daemon prio=5 tid=0x1f nid=NA runnable
  java.lang.Thread.State: RUNNABLE
	  at org.apache.camel.management.MBeanInfoAssembler.doExtractAttributesAndOperations(MBeanInfoAssembler.java:128)
	  at org.apache.camel.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:97)
	  at org.apache.camel.management.MBeanInfoAssembler.getMBeanInfo(MBeanInfoAssembler.java:70)
	  at org.apache.camel.management.DefaultManagementMBeanAssembler.assemble(DefaultManagementMBeanAssembler.java:69)
	  at org.apache.camel.spring.spi.SpringManagementMBeanAssembler.assemble(SpringManagementMBeanAssembler.java:71)
	  at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:227)
	  at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:217)
	  at org.apache.camel.management.ManagedManagementStrategy.manageNamedObject(ManagedManagementStrategy.java:75)
	  at org.apache.camel.management.ManagedManagementStrategy.manageObject(ManagedManagementStrategy.java:68)
	  at org.apache.camel.management.DefaultManagementLifecycleStrategy.manageObject(DefaultManagementLifecycleStrategy.java:772)
	  at org.apache.camel.management.DefaultManagementLifecycleStrategy.onContextStart(DefaultManagementLifecycleStrategy.java:180)
	  at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1512)
	  at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1444)
	  - locked <0x2b10> (a org.apache.camel.spring.SpringCamelContext)
	  at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:179)
	  at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)
	  at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1412)
	  at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:228)
	  at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:118)
	  at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:280)
	  at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:97)
	  at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:327)
	  at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:941)
	  at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:475)
	  - locked <0x2b11> (a java.lang.Object)
	  at org.codehaus.groovy.grails.commons.spring.DefaultRuntimeSpringConfiguration.getApplicationContext(DefaultRuntimeSpringConfiguration.java:153)
	  at org.codehaus.groovy.grails.commons.spring.GrailsRuntimeConfigurator.configure(GrailsRuntimeConfigurator.java:170)
	  at org.codehaus.groovy.grails.commons.spring.GrailsRuntimeConfigurator.configure(GrailsRuntimeConfigurator.java:127)
	  at org.codehaus.groovy.grails.web.context.GrailsConfigUtils.configureWebApplicationContext(GrailsConfigUtils.java:121)
	  at org.codehaus.groovy.grails.web.context.GrailsContextLoader.initWebApplicationContext(GrailsContextLoader.java:104)
	  at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:111)
	  at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4791)
	  at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5285)
	  - locked <0x2b12> (a org.apache.catalina.core.StandardContext)
	  at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)
	  at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1559)
	  at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1549)
	  at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
	  at java.util.concurrent.FutureTask.run(FutureTask.java:166)
	  at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	  at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	  at java.lang.Thread.run(Thread.java:722)","16/Feb/13 09:37;davsclaus;Thanks for reporting.

We now skip proxy classes during JMX MBean assemble.",,,,,,,,,,,,,,,,,,,,,,
gzip dataformat - Ensure input stream is closed if exception thrown,CAMEL-6081,12632382,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,14/Feb/13 14:08,15/Feb/13 15:18,13/Mar/19 22:19,15/Feb/13 15:18,,,,,,,,,,2.10.4,2.11.0,,,,,,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/How-to-handle-error-when-Renaming-file-from-failed-due-cannot-delete-from-file-tp5727493.html

This cause problems on windows as it will lock the file etc.
",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,312878,,,2013-02-14 14:08:29.0,,,,,,,0|i1hzs7:,313224,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-rss and camel-atom - Not installable in Karaf,CAMEL-6059,12631583,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,09/Feb/13 14:24,09/Feb/13 14:32,13/Mar/19 22:19,09/Feb/13 14:32,2.11.0,,,,,,,,,2.10.4,2.11.0,2.9.6,,karaf,,,,,,0,,,,,,,,,"karaf@root> features:install camel-rss
Error executing command: Manifest not present in the first entry of the zip mvn:org.apache.ws.commons.axiom/axiom-impl/1.2.14

I think we got a JAR that is flawed 1.2.14",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,312079,,,Sat Feb 09 14:32:27 UTC 2013,,,,,,,0|i1huuf:,312425,,,,,,,,,09/Feb/13 14:32;davsclaus;Downgraded to the 1.2.12 that works in OSGi.,,,,,,,,,,,,,,,,,,,,,,,
"XML-files containing attributes called ""type"" does not get converted to json",CAMEL-6048,12631288,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,klodrik,klodrik,07/Feb/13 15:54,07/Feb/13 18:05,13/Mar/19 22:19,07/Feb/13 18:05,,,,,,,,,,2.10.4,2.11.0,,,,,,,,,0,xml,xmljson,,,,,,,"An XML-file with an attribute called type will not get converted to JSON, even if the TypeHintsEnum.NO is used. The problem is that the XMLSerializer in json-lib has typeHintsCompatibility=true as default. It should be explicitly set to false along with typeHintsEnabled. 
",,,,,,,,,,,,,,,,,,,,,07/Feb/13 15:55;klodrik;camel-xmljson.diff;https://issues.apache.org/jira/secure/attachment/12568426/camel-xmljson.diff,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-02-07 18:05:46.754,,,no_permission,,Novice,,,,,,,,,,,311784,,,Thu Feb 07 18:05:46 UTC 2013,,,Patch Available,,,,0|i1ht13:,312130,,,,,,,,,07/Feb/13 18:05;davsclaus;Thanks for the patch.,,,,,,,,,,,,,,,,,,,,,,,
Possible NPE is OSGi bundle has no symbolic name,CAMEL-6038,12630864,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,05/Feb/13 12:22,05/Feb/13 12:32,13/Mar/19 22:19,05/Feb/13 12:32,,,,,,,,,,2.10.4,2.11.0,,,osgi,,,,,,0,,,,,,,,,"See
http://fusesource.com/forums/thread.jspa?messageID=16745&#16745",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,311360,,,2013-02-05 12:22:06.0,,,,,,,0|i1hqev:,311706,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
interceptSendToEndpoint with a DelegateAsyncProcessor fails,CAMEL-6035,12630619,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,michael.wirth,michael.wirth,04/Feb/13 08:52,05/Feb/13 08:14,13/Mar/19 22:19,05/Feb/13 08:14,2.10.3,,,,,,,,,2.10.4,2.11.0,2.9.6,,camel-core,,,,,,0,,,,,,,,,"interceptSendToEndpoint with a DelegateAsyncProcessor fails.
The intercepted target processor don't implement the interave Service and therfore won't 'start' the target services.

Caused by: java.lang.IllegalStateException: SendProcessor has not been started: sendTo(Endpoint[log://foo])
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:109)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:86)
	at AdviceWithTest$ContainerWideInterceptor$1.process(AdviceWithTest.java:94)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:334)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:220)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:117)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:99)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:60)
	at org.apache.camel.impl.InterceptSendToEndpoint$1.process(InterceptSendToEndpoint.java:132)
","Windows XP
RAD 7.5.5.2
java version ""1.6.0""
Java(TM) SE Runtime Environment (build pwi3260sr8-20100409_01(SR8))
IBM J9 VM (build 2.4, JRE 1.6.0 IBM J9 2.4 Windows XP x86-32 jvmwi3260sr8-20100401_55940 (JIT enabled, AOT enabled)
J9VM - 20100401_055940
JIT  - r9_20100401_15339
GC   - 20100308_AA)
JCL  - 20100408_01
",,,,,,,,,,,,,,,,,,,,04/Feb/13 08:53;michael.wirth;AdviceWithTest.java;https://issues.apache.org/jira/secure/attachment/12567821/AdviceWithTest.java,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-02-04 17:41:01.994,,,no_permission,,Unknown,,,,,,,,,,,311115,,,Tue Feb 05 08:14:42 UTC 2013,,,,,,,0|i1howv:,311463,,,,,,,,,"04/Feb/13 17:41;davsclaus;Yeah you would need to use WrapProcessor instead of Processor to ensure the target processor gets started as expected.
{code}
    static class ContainerWideInterceptor implements InterceptStrategy {

        private static final transient Logger LOG = LoggerFactory.getLogger(ContainerWideInterceptor.class);
        private static int count;

        public Processor wrapProcessorInInterceptors(final CamelContext context, final ProcessorDefinition<?> definition,
                                                     final Processor target, final Processor nextTarget) throws Exception {

            return new DelegateAsyncProcessor(new WrapProcessor(new Processor() {

                public void process(Exchange exchange) throws Exception {
                    // we just count number of interceptions
                    count++;
                    LOG.info(""I am the container wide interceptor. Intercepted total count: "" + count);
                    nextTarget.process(exchange);
                }

                @Override
                public String toString() {
                    return ""ContainerWideInterceptor["" + target + ""]"";
                }
            }, target));
        }

        public int getCount() {
            return count;
        }
    }
{code}

We may want to add some API to make this easier for end users.",05/Feb/13 08:14;davsclaus;Thanks for reporting.,,,,,,,,,,,,,,,,,,,,,,
NoRedeliveryOnShutdown doesn't work for DeadLetterChannel,CAMEL-6033,12630535,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,muellerc,muellerc,02/Feb/13 17:28,04/Feb/13 17:33,13/Mar/19 22:19,04/Feb/13 16:39,2.11.0,,,,,,,,,2.11.0,,,,camel-core,,,,,,0,,,,,,,,,"See http://camel.465427.n5.nabble.com/Wrong-test-for-allowRedeliveryWhileStopping-possible-bug-td5726184.html for details.

The assumption is if we use ""allowRedeliveryWhileStopping(false)"" in an error handler definition which use a dead letter channel, the message should be send to the configured dead letter channel if we are in a delivery by stopping Camel (instead of dropping the message).",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-02-04 10:32:46.883,,,no_permission,,Unknown,,,,,,,,,,,311029,,,Mon Feb 04 17:33:26 UTC 2013,,,,,,,0|i1hod3:,311374,,,,,,,,,"02/Feb/13 17:38;muellerc;I added a (slightly modified) unit test to show the bug: http://svn.apache.org/viewvc?view=revision&revision=1441777
I added a @Ignore annotation so that the build will not fail.
It would be great if one of the key committer could have a look at it (I'm too busy with other tasks).","04/Feb/13 10:32;davsclaus;It was not designed to move the message to DLC, but reject redelivery during stopping/shutdown.

I will see what we can do to make this special case for DLC.",04/Feb/13 12:45;davsclaus;I have a potential solution. Though some tests in CXF now fails; will need to look into this. All other tests passes fine.,04/Feb/13 13:01;davsclaus;Okay it was the CXF test that was wrong.,04/Feb/13 14:42;davsclaus;allowRedeliveryWhileStopping is a new option in Camel 2.11,04/Feb/13 17:33;muellerc;Thanks Claus!,,,,,,,,,,,,,,,,,,
Folder closed too early when working asynchronously,CAMEL-5459,12599844,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,jamesclonk,jamesclonk,23/Jul/12 12:57,03/Feb/13 09:56,13/Mar/19 22:19,03/Feb/13 09:56,2.10.0,,,,,,,,,2.10.4,2.11.0,,,camel-mail,,,,,,0,patch,,,,,,,,"When using a MailConsumer connected with IMAP to a mailserver and routing the messages to SEDA or any other asynchronous endpoint, 
it can cause a com.sun.mail.util.FolderClosedIOException or javax.mail.FolderClosedException to happen if you are trying to process the mails/messages attachments.

This is because the IMAP folder gets closed at the end of each MailConsumer.poll()
I propose to add a new MailConfiguration option ""closeFolder"", which can override this behaviour.


Here's an example on how to reproduce the problem. (Scala code, sorry! But it should be self-explanatory)
You need a couple of mails with attachments in your mailbox to test this. 
~10 mails should be enough to cause the exceptions.



import javax.mail.internet.MimeMultipart
import org.apache.camel.impl.DefaultCamelContext
import org.apache.camel.scala.dsl.builder.RouteBuilder
import scala.io.Source

object Main { 
  def main(args: Array[String]): Unit = {
    val camelContext = new DefaultCamelContext
  
    val host = ""imap.gmail.com""
    val username = ""*****@gmail.com""
    val password = ""*****""
    
    // this will cause com.sun.mail.util.FolderClosedIOException or javax.mail.FolderClosedException
    val endpoint = ""imaps://""+host+""?password=""+password+""&username=""+username+""&folderName=INBOX&unseen=false&disconnect=false&mapMailMessage=true&connectionTimeout=60000""
    
    // with fix / new feature 'closeFolder' set to false
    //val endpoint = ""imaps://""+host+""?password=""+password+""&username=""+username+""&folderName=INBOX&unseen=false&disconnect=false&mapMailMessage=true&connectionTimeout=60000&closeFolder=false""
    
    camelContext.addRoutes(
      new RouteBuilder {
        endpoint
        .to(""seda:process"")
         
        from(""seda:process?concurrentConsumers=5"") ==> {
          process { ex => 
            val att = ex.getIn.getBody.asInstanceOf[MimeMultipart].getBodyPart(1)
            println(""Attachment Name:"" + att.getFileName)
            println(""Attachment Content:"" + att.getDataHandler.getContent)
            println(""Attachment Content:"" + Source.fromInputStream(att.getDataHandler.getInputStream).mkString)
            Thread.sleep(2500) // simulate some work being done here with the attachment, takes time..
          }
        }
      }
    )

    camelContext.start()
    Thread.sleep(45 * 1000)
    camelContext.stop()
  }
}
",IMAP connection to mailserver,,,,,,,,,,,,,,,,,,,,23/Jul/12 12:58;jamesclonk;camel-mail-closeFolder.patch;https://issues.apache.org/jira/secure/attachment/12537562/camel-mail-closeFolder.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-02-03 09:56:13.593,,,no_permission,,Novice,,,,,,,,,,,241332,,,Sun Feb 03 09:56:13 UTC 2013,,,Patch Available,,,,0|i0277z:,10771,,,,,,,,,23/Jul/12 12:58;jamesclonk;Patch for MailConsumer.java and MailConfiguration.java,03/Feb/13 09:56;davsclaus;Thanks for the patch.,,,,,,,,,,,,,,,,,,,,,,
ActiveMQ target endpoint with transferExchange=true does not work together with source File endpoint with preMove option set,CAMEL-5774,12614928,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,vvnick,vvnick,06/Nov/12 10:04,03/Feb/13 08:55,13/Mar/19 22:19,03/Feb/13 08:55,2.10.2,,,,,,,,,2.10.4,2.11.0,,,camel-activemq,camel-core,camel-jms,,,,0,,,,,,,,,"Got failure on a simple route reading from file and sending to ActiveMQ queue.
On source File endpoint set preMove option to some folder, and on target activemq endpoint set transferExchange=true.
It fails with FileNotFound exception, trying to read file from original location, not from temporary preMoved one.
Without preMove all works perfect.

Simplified Spring application context with Camel routes looks like this:

<?xml version=""1.0"" encoding=""UTF-8""?>
<beans xmlns=""http://www.springframework.org/schema/beans""
       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
       xsi:schemaLocation=""
         http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
         http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd"">

    <bean id=""brokerService"" class=""org.apache.activemq.broker.BrokerService"" init-method=""start"" destroy-method=""stop"">
        <property name=""brokerName"" value=""localhost"" />
        <property name=""useJmx"" value=""false"" />
        <property name=""transportConnectorURIs"">
            <list>
                <value>vm://localhost</value>
            </list>
        </property>
    </bean>
    
    <bean id=""jmsConnectionFactory"" class=""org.apache.activemq.ActiveMQConnectionFactory"" depends-on=""brokerService"">
        <property name=""brokerURL"" value=""vm://localhost""/>
        <property name=""redeliveryPolicy"" ref=""redeliveryPolicyConfigActiveMQ""/>
    </bean>
    
    <bean id=""pooledConnectionFactory"" class=""org.apache.activemq.pool.PooledConnectionFactory"" init-method=""start"" destroy-method=""stop"">
        <property name=""maxConnections"" value=""8"" />
        <property name=""maximumActive"" value=""500"" />
        <property name=""connectionFactory"" ref=""jmsConnectionFactory"" />
    </bean>
    
     <bean id=""redeliveryPolicyConfigActiveMQ"" class=""org.apache.activemq.RedeliveryPolicy"">
        <property name=""maximumRedeliveries"" value=""1""/>
        <property name=""redeliveryDelay"" value=""5000""/>
    </bean>
    
			
    <camelContext id=""testCustomer"" xmlns=""http://camel.apache.org/schema/spring"">
        
		<endpoint id=""sourceEndpoint"" uri=""file:e:/work/ids/testCustomer/input/?preMove=.tmp&amp;delay=1000&amp;readLock=rename&amp;copyAndDeleteOnRenameFail=false&amp;move=.archive&amp;moveFailed=.failed"" />
		<endpoint id=""destJms"" uri=""activemq:queue:source?transferExchange=true&amp;connectionFactory=#pooledConnectionFactory"" />

        <route id=""testRoute"">
            <from ref=""sourceEndpoint"" />
            <to ref=""destJms"" />
        </route>
    </camelContext>
</beans>


Exception trace:
org.apache.camel.TypeConversionException: Error during type conversion from type: java.io.File to the required type: byte[] with value e:\work\ids\testCustomer\input\payment.xml due java.io.FileNotFoundException: e:\work\ids\testCustomer\input\payment.xml (The system cannot find the file specified)
	at com.it.ids.exceptions.HandleException.process(HandleException.java:20)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:163)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:117)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.FatalFallbackErrorHandler.processNext(FatalFallbackErrorHandler.java:42)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.RedeliveryErrorHandler.deliverToFailureProcessor(RedeliveryErrorHandler.java:766)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:273)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:220)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)
	at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73)
	at org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:336)
	at org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:189)
	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:155)
	at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:142)
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:92)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:180)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:204)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:662)
Caused by: org.apache.camel.RuntimeCamelException: java.io.FileNotFoundException: e:\work\ids\testCustomer\input\payment.xml (The system cannot find the file specified)
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1270)
	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:926)
	at org.apache.camel.impl.converter.StaticMethodTypeConverter.convertTo(StaticMethodTypeConverter.java:47)
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:253)
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.mandatoryConvertTo(BaseTypeConverterRegistry.java:155)
	at org.apache.camel.component.file.FileBinding.loadContent(FileBinding.java:57)
	at org.apache.camel.component.file.GenericFileConverter.genericFileToInputStream(GenericFileConverter.java:123)
	at org.apache.camel.component.file.GenericFileConverter.genericFileToSerializable(GenericFileConverter.java:152)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:922)
	at org.apache.camel.impl.converter.StaticMethodTypeConverter.convertTo(StaticMethodTypeConverter.java:47)
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:253)
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:111)
	at org.apache.camel.impl.DefaultExchangeHolder.checkMapSerializableObjects(DefaultExchangeHolder.java:209)
	at org.apache.camel.impl.DefaultExchangeHolder.safeSetProperties(DefaultExchangeHolder.java:177)
	at org.apache.camel.impl.DefaultExchangeHolder.marshal(DefaultExchangeHolder.java:93)
	at org.apache.camel.impl.DefaultExchangeHolder.marshal(DefaultExchangeHolder.java:71)
	at org.apache.camel.component.jms.JmsBinding.createJmsMessage(JmsBinding.java:439)
	at org.apache.camel.component.jms.JmsBinding.makeJmsMessage(JmsBinding.java:287)
	at org.apache.camel.component.jms.JmsProducer$2.createMessage(JmsProducer.java:266)
	at org.apache.camel.component.jms.JmsConfiguration$CamelJmsTemplate.doSendToDestination(JmsConfiguration.java:215)
	at org.apache.camel.component.jms.JmsConfiguration$CamelJmsTemplate.access$100(JmsConfiguration.java:158)
	at org.apache.camel.component.jms.JmsConfiguration$CamelJmsTemplate$3.doInJms(JmsConfiguration.java:192)
	at org.springframework.jms.core.JmsTemplate.execute(JmsTemplate.java:466)
	at org.apache.camel.component.jms.JmsConfiguration$CamelJmsTemplate.send(JmsConfiguration.java:189)
	at org.apache.camel.component.jms.JmsProducer.doSend(JmsProducer.java:398)
	at org.apache.camel.component.jms.JmsProducer.processInOnly(JmsProducer.java:352)
	at org.apache.camel.component.jms.JmsProducer.process(JmsProducer.java:132)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:122)
	at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:298)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:117)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:163)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:334)
	... 28 more
Caused by: java.io.FileNotFoundException: e:\work\ids\testCustomer\input\payment.xml (The system cannot find the file specified)
	at java.io.FileInputStream.open(Native Method)
	at java.io.FileInputStream.<init>(FileInputStream.java:106)
	at org.apache.camel.converter.IOConverter.toInputStream(IOConverter.java:73)
	at org.apache.camel.converter.IOConverter.toByteArray(IOConverter.java:243)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:922)
	... 71 more
",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-11-07 06:43:28.92,,,no_permission,,Unknown,,,,,,,,,,,255441,,,Sun Feb 03 08:55:59 UTC 2013,,,,,,,0|i0eryv:,84295,,,,,,,,,"07/Nov/12 06:43;davsclaus;Post your Camel routes as well, this makes it much easier to look into with more details.",07/Nov/12 11:29;vvnick;Added routes in issue description.,"01/Feb/13 08:46;tvautrin;Hi,

You can fix this problem with following change in org.apache.camel.component.file.FileBinding (camel-core)

Replace line 57 :
     content = exchange.getContext().getTypeConverter().mandatoryConvertTo(byte[].class, exchange, file.getFile());
with :
     content = exchange.getContext().getTypeConverter().mandatoryConvertTo(byte[].class, exchange, file);

it works for us","02/Feb/13 18:59;davsclaus;You shouldn't really use transferExchange to transfer a java.io.File over JMS.
Camel will by default detect its a java.io.File and load the file content into memory and send the data over JMS as a bytes message, when you dont have transferExchange=true.



","03/Feb/13 08:55;davsclaus;Viktor, thanks for reporting.
And Thomas for the hint for the solution.

But there was other problems on the receiver side when using transferExchange=true and with files. So this is not supported any longer.",,,,,,,,,,,,,,,,,,,
NumberFormatException when using File over JMS,CAMEL-6025,12630047,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,wattsc3,wattsc3,31/Jan/13 00:24,01/Feb/13 16:42,13/Mar/19 22:19,01/Feb/13 16:42,2.10.2,,,,,,,,,2.10.4,2.11.0,,,camel-core,,,,,,0,,,,,,,,,"When using the FileConsumer to send a file to a JMS queue which is then consumed by the FileProducer I get the following error:
{noformat}
11:03:22,778 DEBUG [Camel (camel) thread #1 - JmsConsumer[queue1]] (MarkerIgnoringBase.java:72) - Failed delivery for (MessageId: queue_queue1_ID_xxxxxxxxx-1911-1359590595842-3_4_1_1_1 on ExchangeId: ID-xxxxxxxxx-1910-1359590595467-0-10). On delivery attempt: 0 caught: org.apache.camel.TypeConversionException: Error during type conversion from type: java.lang.String to the required type: java.lang.Long with value Thu Jan 31 11:03:22 EST 2013 due java.lang.NumberFormatException: For input string: ""Thu Jan 31 11:03:22 EST 2013""{noformat}

This is due to a Date being converted to a String when sending over JMS.

Propose that the following line in Generic file be changed from:
{code}            if (getLastModified() > 0) {
                message.setHeader(Exchange.FILE_LAST_MODIFIED, new Date(getLastModified()));
            }{code}

To:{code}            if (getLastModified() > 0) {
                message.setHeader(Exchange.FILE_LAST_MODIFIED, getLastModified());
            }{code}

As FileOperations can use it:
{code}    private void keepLastModified(Exchange exchange, File file) {
        if (endpoint.isKeepLastModified()) {
            Long last;
            Date date = exchange.getIn().getHeader(Exchange.FILE_LAST_MODIFIED, Date.class);
            if (date != null) {
                last = date.getTime();
            } else {
                // fallback and try a long
                last = exchange.getIn().getHeader(Exchange.FILE_LAST_MODIFIED, Long.class);
            }
            if (last != null) {
                boolean result = file.setLastModified(last);
                if (LOG.isTraceEnabled()) {
                    LOG.trace(""Keeping last modified timestamp: {} on file: {} with result: {}"", new Object[]{last, file, result});
                }
            }
        }
    }{code}


Sample route:
{code:xml}
<route>
	<from uri=""file:/tmp/input/""/>
	<to uri=""activemq:queue:test""/>
</route>
<route>
	<from uri=""activemq:queue:test""/>
	<to uri=""file:/tmp/output/?keepLastModified=true""/>
</route>
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-02-01 14:50:41.987,,,no_permission,,Novice,,,,,,,,,,,310543,,,Fri Feb 01 14:51:09 UTC 2013,,,,,,,0|i1hldj:,310888,,,,,,,,,"01/Feb/13 14:50;davsclaus;Chris, this is a good idea, to keep the modification date as just the long which we get from the java file API.",01/Feb/13 14:51;davsclaus;Though its not human readable as its just a long number :),,,,,,,,,,,,,,,,,,,,,,
camel-castor does not work in apache service mix modules,CAMEL-5358,12560223,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,jtv,jtv,11/Jun/12 18:44,21/Jan/13 16:10,13/Mar/19 22:19,21/Jan/13 16:10,2.8.5,2.9.2,,,,,,,,2.10.4,2.11.0,2.9.6,,osgi,,,,,,0,,,,,,,,,"Sorry for putting this in the wrong component but I did not see a camel-castor component.

By default, the castor org.exolab.castor.mapping.Mapping will use the class's class loader to resolve java classes declared in the castor mapping XML file.  However when the CastorDataFormat is used an a service mix OSGi module, the class loader the contains the Java classes is not the same as the class loader that loads the Mapping object.  Therefore it cannot load the mapping file because the Java classes cannot be resolved.  Instead the constructor that takes Classloader as an argument should be called when initializing the mapping object.  The classloader it should use is the same classloader used to resolve the castor mapping XML file.

The following change in AbstractCastorDataFormat seemed to resolve the problem.

public XMLContext getXmlContext(ClassResolver resolver) throws Exception {
        if (xmlContext == null) {
            xmlContext = new XMLContext();

            if (ObjectHelper.isNotEmpty(getMappingFile())) {
                Mapping xmlMap = new Mapping(
                		Thread.currentThread().getContextClassLoader());
                xmlMap.loadMapping(resolver.loadResourceAsURL(getMappingFile()));
                xmlContext.addMapping(xmlMap);
            }




","Apache Service Mix: MacOS, Linux, Windows",,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-06-12 15:23:13.906,,,no_permission,,Unknown,,,,,,,,,,,241231,,,Mon Jan 21 15:56:03 UTC 2013,,,,,,,0|i026lj:,10670,,,,,,,,,12/Jun/12 13:02;jtv;The code I have included isn't quite right.  Using the Thread.currentThread().getContextClassLoader() may not work if the java objects are defined in a different OSGi bundle then where the data format is declared.,"12/Jun/12 15:23;njiang;It is a common practice to use the TCCL to handle the issue that you faced, but when you need to load the classes from other bundle, you need to update your application bundle which holds the camel context to import the package which has the class from other bundle.","21/Jan/13 15:56;davsclaus;It should use the getContextClassLoader API from CamelContext, which in OSGi will be the classloader from the application bundle.",,,,,,,,,,,,,,,,,,,,,
Negative in-flight counter,CAMEL-5905,12624981,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,21/Dec/12 11:52,21/Jan/13 12:17,13/Mar/19 22:19,21/Jan/13 12:17,2.10.0,,,,,,,,,2.10.4,2.11.0,,,camel-core,,,,,,0,,,,,,,,,"I noticed a situation with a negative in-flight counter.

Seems related to situations with handling an exception. Will have to dig deeper. Just wanted to log a JIRA.",,,,,,,,,,,,,,,,,,,,,21/Dec/12 11:53;davsclaus;negative-in-flight.png;https://issues.apache.org/jira/secure/attachment/12562070/negative-in-flight.png,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,301506,,,Mon Jan 21 12:17:58 UTC 2013,,,,,,,0|i16u67:,248020,,,,,,,,,21/Jan/13 12:17;davsclaus;Fixed some issues recently. Lets see if this resurfaces.,,,,,,,,,,,,,,,,,,,,,,,
Using annotations DSL in beans may cause async callback to be called twice,CAMEL-5987,12628521,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,21/Jan/13 08:09,21/Jan/13 10:00,13/Mar/19 22:19,21/Jan/13 10:00,2.10.0,2.9.0,,,,,,,,2.10.4,2.11.0,2.9.6,,camel-core,eip,,,,,0,,,,,,,,,"The bean processor and bean invocation logic may in cases when the EIP annotations is used on beans, cause the callback to be called twice.

Noticed this problem during investigation of See CAMEL-5905
",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,306448,,,2013-01-21 08:09:45.0,,,,,,,0|i19uw7:,265639,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Property placeholder with both blueprint and jasypt seems not working,CAMEL-5973,12627684,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,15/Jan/13 16:24,15/Jan/13 17:07,13/Mar/19 22:19,15/Jan/13 17:07,,,,,,,,,,2.10.4,2.11.0,,,camel-blueprint,camel-core,osgi,,,,0,,,,,,,,,"Looking into an issue with property placeholder
{code}
    <propertyPlaceholder id=""properties"" location=""blueprint:myblueprint.placeholder"" propertiesParserRef=""jasypt""/>
{code}

",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,304471,,,2013-01-15 16:24:35.0,,,,,,,0|i17mqf:,252652,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ObjectHelper.createIterator() should properly handle the array of primitive types e.g. int[],CAMEL-5948,12626923,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,bvahdat,bvahdat,bvahdat,10/Jan/13 11:48,10/Jan/13 20:58,13/Mar/19 22:19,10/Jan/13 20:58,2.10.3,,,,,,,,,2.10.4,2.11.0,2.9.6,,camel-core,,,,,,0,,,,,,,,,"See the thread here:

http://camel.465427.n5.nabble.com/Question-camel-cxf-amp-CXF-MESSAGE-td5725227.html",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,303614,,,Thu Jan 10 20:58:51 UTC 2013,,,,,,,0|i17d73:,251107,,,,,,,,,10/Jan/13 20:58;bvahdat;The new behaviour now is (instead of a thrown {{ClassCastException}}) that the returned {{Iterator}} iterates over the corresponding Java primitive wrapper objects of the given elements inside the passed primitive type array object.,,,,,,,,,,,,,,,,,,,,,,,
XML DSL - Should not have default values in errorhandler ,CAMEL-5949,12626930,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,10/Jan/13 12:47,10/Jan/13 13:17,13/Mar/19 22:19,10/Jan/13 13:17,,,,,,,,,,2.10.4,2.11.0,2.9.6,,camel-blueprint,camel-spring,,,,,0,,,,,,,,,"We should not have default values for <errorHandler> in the XML DSL as when looking at the model at runtime, these values would be set, and appear as in use.

The <errorHandler> is a bit special as its for configuring all the error handlers. Which mean the default level = ERROR option will in the model be as if the end user configured level = ERROR which is only supported on the logging error handler, and not the others etc. Causing problem.

The logging error handler builder has already default values, so its safe to remove the redundant default value from the model.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,303621,,,2013-01-10 12:47:49.0,,,,,,,0|i17d8n:,251114,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"XPathBuilder is documented as being thread-safe, but it has thread-safety bugs.",CAMEL-5835,12618233,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,petesramka,petesramka,29/Nov/12 21:25,07/Jan/13 12:21,13/Mar/19 22:19,07/Jan/13 12:21,,,,,,,,,,2.10.4,2.11.0,2.9.6,,camel-core,,,,,,0,thread-safety,,,,,,,,"The javadoc for org.apache.camel.builder.xml.XPathBuilder states that it is thread-safe, but an inspection of the source code in the trunk reveals that there are thread-safety bugs.",This bug is not environment specific.,,,,,,,,,,,,,,,,,,,,29/Nov/12 22:32;petesramka;screenshot-1.jpg;https://issues.apache.org/jira/secure/attachment/12555422/screenshot-1.jpg,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-11-30 09:57:52.354,,,no_permission,,Advanced,,,,,,,,,,,292862,,,Fri Nov 30 17:31:43 UTC 2012,,,,,,,0|i0sg13:,164074,,,,,,,,,"29/Nov/12 22:21;petesramka;h4.Background
Java concurrency is a deep and subtle topic. I have found that knowledge of this topic is often lacking, even with very intelligent and experienced Java programmers. Consequently, there is much Java code in existence with concurrency bugs.

Concurrency in Java is intimately inter-twined with the Java Memory Model. The Java Memory Model was updated via _JSR 133: Java Memory Model and Thread Specification Revision_. Starting with Java 2 SE 5.0, all Java Virtual Machines are required to use this updated Java Memory Model. The results of _JSR 133_ are included in the Java Platform Standard Edition Documentation. This _JSR 133 (Java Memory Model) FAQ_ is a brief, but very well-written, synopsis of _JSR 133_: http://www.cs.umd.edu/~pugh/java/memoryModel/jsr-133-faq.html

A basic discussion of Java concurrency is contained in the _Essential Classes Trail_ within the _Trails Covering the Basics_ of _The Java Tutorials_: http://docs.oracle.com/javase/tutorial/essential/concurrency/index.html

This page from the _Essential Classes Trail_ briefly describes _Memory Consistency Errors_: http://docs.oracle.com/javase/tutorial/essential/concurrency/memconsist.html

For a more detailed discussion of Java concurrency, I highly recommend the book _Java Concurrency in Practice_, which was written by the primary members of the _JSR 166_ Expert Group (_Concurrency Utilities_): http://jcip.net/

Please be advised that there are many sources of so-called ""expert"" information about Java concurrency, including published books and lectures of prestigious university professors, that are filled with fundamental technical errors. Consequently, there are many smart Java programmers who believe certain things about Java concurrency that are just plain wrong. As an example, _The ""Double-Checked Locking is Broken"" Declaration_ exposes one widely-used, but flawed, technique: http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html
----
h4.Thread-Safe Classes
There are many techniques for writing thread-safe code, but one of the simplest and most effective is to write thread-safe classes. Here are a couple of excellent quotes from page 18 of _Java Concurrency in Practice_ (http://jcip.net/):

""A class is _thread-safe_ if it behaves correctly when accessed from multiple threads, regardless of the scheduling or interleaving of the execution of those threads by the runtime environment, and with no additional synchronization or other coordination on the part of the calling code.""

""Thread-safe classes encapsulate any needed synchronization so that clients need not provide their own.""

A class is ""accessed from multiple threads"" when:
* Any instance of that class is ""accessed from multiple threads""
or
* The class object itself -- the collection of all static fields and methods of the class -- is ""accessed from multiple threads"".

Note that the statements above do not include the phrase ""accessed from multiple threads _simultaneously_"". It is a widely-held, but incorrect belief, that if a class is never accessed by more than one thread at a time, then all thread-safety considerations may be safely ignored for that class. If a class is accessed from multiple threads, but not simultaneously, mutual exclusion is not a concern, but memory visibility is. For more information about memory visibility and the related topic of memory consistency errors, please refer to the previous section.

To determine if a particular class is thread-safe, all of the following must be analyzed:
* The source code of the class in question
* The source code of all classes that the class in question extends either directly or indirectly
* The source code of all interfaces that the class in question implements either directly or indirectly","29/Nov/12 22:37;petesramka;For example, shown here are all uses of the instance variable bodyFunction. Access to this variable is ""incorrectly synchronized,"" as defined by this _JSR 133 (Java Memory Model) FAQ_: http://www.cs.umd.edu/~pugh/java/memoryModel/jsr-133-faq.html
!screenshot-1.jpg!",30/Nov/12 09:57;davsclaus;There is no problem with the default functions as they dont share any state or whatsoever. They are just anonym inlined functions as shown in the code above.,30/Nov/12 10:00;davsclaus;The functions are now being forced created when starting the builder. So they will never be null anymore.,"30/Nov/12 14:59;petesramka;The changes made to the code did not make the class thread-safe. Perhaps it would help to:
1) Study the documentation that I presented in the comments section.
and/or
2) Get a Java thread-safety guru involved.","30/Nov/12 15:15;davsclaus;Peter

Maybe you provide a patch for the Camel team to review.","30/Nov/12 17:31;petesramka;I can create the patch fairly quickly. However, I have to get legal clearance from my employer before I can make a submission to Camel. It make take awhile. I apologize for the delay...",,,,,,,,,,,,,,,,,
Camel leaks memory on undeploy / redeploy in app server when JMX enabled and createConnector = true,CAMEL-5907,12625093,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,sdanig,sdanig,22/Dec/12 02:55,02/Jan/13 07:11,13/Mar/19 22:19,02/Jan/13 07:11,2.10.0,,,,,,,,,2.10.4,2.11.0,2.9.6,,camel-jmx,,,,,,0,,,,,,,,,"We have embedded Camel in an EAR that we deploy to Weblogic. The Camel context is configured via Spring:

{code}    <camelContext id=""camel"" handleFault=""true"" autoStartup=""{{autoStartup}}"" xmlns=""http://camel.apache.org/schema/spring"">
        <contextScan />
        <jmxAgent id=""camelAgent"" createConnector=""true"" registryPort=""{{jmxPort}}"" />
    </camelContext>{code}

You can see that we create a JMX connector to allow for remote management.

However, we have run into PermGen space issues, because our application is leaking class loaders when the application is undeployed or redeployed.

After digging around (and addressing some Jasper Reports ThreadLocal sloppiness), it appears that the only issue left is that the sun.rmi.transport.ObjectTable class maintains a static reference to all available RMI targets. Unfortunately, one of these targets is the JMX connector created by Camel, which was obviously loaded via our application's classloader.

Thus, ObjectTable has a static reference to the Camel JMX RMI target, which has a reference to the app's class loader, which in turn has references to all classes loaded (and generated) for that single deployment of the application -- and none of these classes can be GC'ed.

After digging through the code for Camel's DefaultManagementAgent, I'm inclined to believe that the fix is fairly simple:

# Update {{createJmxConnector(String)}} to cache the reference to the created {{Registry}} in an instance variable.

# Update {{doStop()}} to check if we have a cached {{Registry}} instance, and if we do, call {{UnicastRemoteObject.unexportObject(registry, true);}}

Some app servers have workarounds for this sort of leak (see ""RMI targets"" in Table 1 at [1]), but Weblogic doesn't seem to.

I'll also attach a screenshot of the memory analysis (more info at [2]).



[1] http://pic.dhe.ibm.com/infocenter/wasinfo/v8r5/index.jsp?topic=%2Fcom.ibm.websphere.express.doc%2Fae%2Fctrb_memleakdetection.html

[2] http://www.yourkit.com/docs/kb/class_loaders.jsp",,,,,,,,,,,,,,,,,,,,,24/Dec/12 04:42;sdanig;camel-5907.patch;https://issues.apache.org/jira/secure/attachment/12562307/camel-5907.patch,22/Dec/12 02:58;sdanig;leak.png;https://issues.apache.org/jira/secure/attachment/12562206/leak.png,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-12-22 11:33:31.712,,,no_permission,,Unknown,,,,,,,,,,,301629,,,Wed Jan 02 07:11:40 UTC 2013,,,,,,,0|i16v3z:,248172,,,,,,,,,"22/Dec/12 11:33;davsclaus;Thanks for reporting.

Would you be able to work on a patch with your suggested fix?

There is a bit information about how to create and contribute patches at:
http://camel.apache.org/contributing.html","24/Dec/12 04:41;sdanig;Yep, no problem. I've contributed a couple of patches before :-)

I'm including a unit test that verifies that the registry is cleaned up when the Camel context is stopped. The class that I added the test to doesn't really run the tests if you're on Windows, so watch out for that!",02/Jan/13 07:11;davsclaus;Thanks for the patch.,,,,,,,,,,,,,,,,,,,,,
camel-jms - JmsPollingConsumer use the constant fields from JmsTemplate for receiveNoWait etc,CAMEL-5917,12625479,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,29/Dec/12 10:44,29/Dec/12 11:56,13/Mar/19 22:19,29/Dec/12 11:53,2.10.0,2.9.0,,,,,,,,2.10.4,2.11.0,2.9.6,,camel-jms,,,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/JmsPollingConsumer-and-method-receiveNoWait-has-incorrect-timeout-value-tp5722817.html",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-12-29 11:56:47.658,,,no_permission,,Unknown,,,,,,,,,,,302021,,,Sat Dec 29 11:56:47 UTC 2012,,,,,,,0|i16y33:,248656,,,,,,,,,29/Dec/12 11:56;muellerc;I was too slow... ;-),,,,,,,,,,,,,,,,,,,,,,,
When call removeRouteDefinition the route doesn't removed from collection of route Definitions.,CAMEL-5888,12624342,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,gennady@buhsl.com,gennady@buhsl.com,17/Dec/12 20:10,21/Dec/12 13:51,13/Mar/19 22:19,21/Dec/12 13:51,2.10.2,,,,,,,,,2.10.4,2.11.0,,,camel-core,,,,,,0,,,,,,,,,"When I call removeRouteDefinition for DefaultCamelContext, the route doesn't removed from collection of routes.
   public synchronized void removeRouteDefinition(RouteDefinition routeDefinition) throws Exception {
        String id = routeDefinition.idOrCreate(nodeIdFactory);
        stopRoute(id);
        removeRoute(id);
    }
it is just remove it from running route service if context is running.
When we do restart context this route started again. 
Workaround for this issue is call  removeRouteDefinitions and wrap single route into collection.

But when I call removeRouteDefinitions - it is process correctly: remove from collections of definitions and after removed from running route services.
    public synchronized void removeRouteDefinitions(Collection<RouteDefinition> routeDefinitions) throws Exception {
        this.routeDefinitions.removeAll(routeDefinitions);
        for (RouteDefinition routeDefinition : routeDefinitions) {
            removeRouteDefinition(routeDefinition);
        }
    }

 
",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-12-21 13:20:39.195,,,no_permission,,Unknown,,,,,,,,,,,299181,,,Fri Dec 21 13:20:39 UTC 2012,,,,,,,0|i1603j:,243148,,,,,,,,,"21/Dec/12 13:20;davsclaus;Is your route properly stopped? It looks like if its not in stopped state the route is not removed.

",,,,,,,,,,,,,,,,,,,,,,,
camel-bindy - Honor precision when formatting a decimal number,CAMEL-5846,12618733,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,lb,lb,04/Dec/12 13:48,17/Dec/12 10:25,13/Mar/19 22:19,17/Dec/12 10:25,,,,,,,,,,2.11.0,,,,camel-bindy,,,,,,0,,,,,,,,,"Let's take the class org.apache.camel.dataformat.bindy.model.complex.generateheader.Order in which the field amount is defined as follow:

@DataField(pos = 9, precision = 2)
private BigDecimal amount;

This will properly un-marshall 10.00 and 10 but if I format it back I can only have 10 regardless of the precison. 

Patch available as part of the fix for CAMEL-5827",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Novice,,,,,,,,,,,295971,,,2012-12-04 13:48:18.0,,,,,,,0|i144cn:,232168,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
File consumer - When using doneFileName then avoid picking up files in middle of group if done file is written during scanning,CAMEL-5848,12618839,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,05/Dec/12 07:58,17/Dec/12 08:39,13/Mar/19 22:19,17/Dec/12 08:39,2.10.0,2.9.0,,,,,,,,2.10.4,2.11.0,2.9.6,,camel-core,,,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Files-not-Picked-up-with-doneFile-tp5723623.html

We need to use an internal cache we store whether a done file exists or not, when scanning a directory. Then we won't ""see"" a new done file being written during scanning a group of files. The cache is only needed per directory as doneFileName mandates the file to be in same dir.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,296098,,,2012-12-05 07:58:59.0,,,,,,,0|i1460n:,232438,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE is generated when using camel karaf command when JMX is disabled,CAMEL-5816,12617410,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,cmoulliard,cmoulliard,cmoulliard,23/Nov/12 11:25,11/Dec/12 11:49,13/Mar/19 22:19,23/Nov/12 15:07,,,,,,,,,,2.10.4,2.11.0,,,karaf,,,,,,0,,,,,,,,,NPE is generated when using camel karaf command and JMX is disabled,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,291850,,,2012-11-23 11:25:17.0,,,,,,,0|i0rh3b:,158412,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
LogFormatter throws a NPE when all elements are disabled,CAMEL-5699,12611207,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,raulvk,raulvk,raulvk,10/Oct/12 17:21,29/Nov/12 11:33,13/Mar/19 22:19,29/Nov/12 11:33,2.10.1,2.9.3,,,,,,,,2.10.3,2.11.0,2.9.5,,camel-core,,,,,,0,,,,,,,,,"There are perfectly valid cases where you may want to output a log message with no elements displayed, i.e. with showExchangeId=false, showBody=false, etc.

For example, when you want to print a ""signal"" log line for a particular transaction and you're already using MDC logging with breadcrumbs enabled. You may already have all the info you need: logging category, severity, breadcrumbId. You are not interested in anything else.

Currently, disabling all elements leads to a NPE.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-11-22 11:29:07.49,,,no_permission,,Unknown,,,,,,,,,,,247022,,,Thu Nov 29 11:33:10 UTC 2012,,,,,,,0|i07xzz:,44275,,,,,,,,,"22/Nov/12 11:29;davsclaus;Raul are you working on fixing this?

We want to cut new releases in near term, so either we need to fix or defer tickets,",29/Nov/12 11:33;davsclaus;Fixing known bugs before we cut releases soon.,,,,,,,,,,,,,,,,,,,,,,
xmljson dataformat should be added into marshall and unmarshal definition module,CAMEL-5794,12616363,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,njiang,njiang,16/Nov/12 08:02,18/Nov/12 16:25,13/Mar/19 22:19,18/Nov/12 16:25,2.10.0,2.10.1,2.10.2,,,,,,,2.10.3,2.11.0,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,258141,,,2012-11-16 08:02:51.0,,,,,,,0|i0kn9b:,118585,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JMX statistics problem with intercept(),CAMEL-5066,12545618,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,salever,salever,08/Mar/12 06:35,09/Nov/12 08:59,13/Mar/19 22:19,09/Mar/12 11:56,2.9.1,,,,,,,,,2.10.0,2.9.2,,,camel-core,jmx,,,,,0,,,,,,,,,"Here is the test class:

{noformat}
public class TestStatistics {
 
    public static void main(String[] args) throws Exception {
       DefaultCamelContext context = new DefaultCamelContext();
       context.addRoutes(new RouteBuilder() {
 
           @Override
           public void configure() throws Exception {
              	intercept().to(""log:intercept"");
		from(""timer://myTimer?period=2000"").setBody()
				.simple(""Current time is ${header.firedTime}"").to(""log:out"");
 
           }
       });
       context.start();
       Thread.sleep(500000);
       context.stop();
    }
}

{noformat}
The MBean [org.apache.camel/processors/XXX/to2/Attributes/ExchangesTotal] property has no value, therefore no statistics information can be accessed.

I used 2.9.2-SNAPSHOT.",,,,,,,,,,,,,,CAMEL-5780,,,,,,,08/Mar/12 06:36;salever;ASF.LICENSE.NOT.GRANTED--intercept-statistics-bug.jpg;https://issues.apache.org/jira/secure/attachment/12517531/ASF.LICENSE.NOT.GRANTED--intercept-statistics-bug.jpg,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,230801,,,Thu Mar 08 06:42:32 UTC 2012,,,,,,,0|i024sn:,10378,,,,,,,,,08/Mar/12 06:42;salever;Related talend JIRA issue: http://jira.talendforge.org/browse/TESB-5142,,,,,,,,,,,,,,,,,,,,,,,
Cold restart doesn't clear properties component cache,CAMEL-5747,12613734,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,sdanig,sdanig,26/Oct/12 23:28,30/Oct/12 14:59,13/Mar/19 22:19,30/Oct/12 14:59,2.10.2,,,,,,,,,2.10.3,2.11.0,,,camel-core,,,,,,0,,,,,,,,,"The properties component optionally (and by default) caches the property values that it resolves. However, the component does not clear the cache on stop, so the properties values are never refreshed after a cold restart of Camel (stop() + start()).",,,,,,,,,,,,,,,,,,,,,26/Oct/12 23:30;sdanig;properties-clear.patch;https://issues.apache.org/jira/secure/attachment/12551040/properties-clear.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Moderate,,,,,,,,,,,252482,,,2012-10-26 23:28:13.0,,,Patch Available,,,,0|i0ct9z:,72687,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WireTap will always copy the origin Message,CAMEL-5746,12613625,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,gangliu,gangliu,26/Oct/12 09:14,26/Oct/12 14:01,13/Mar/19 22:19,26/Oct/12 14:01,2.10.2,,,,,,,,,2.10.3,2.11.0,2.9.5,,camel-core,,,,,,0,,,,,,,,,"I found the wiretap will always copy the original exchange message after deprecated those methods like -wireTap(String uri, boolean copy, Expression body)- and -wireTap(String uri, boolean copy, Processor processor)- .

Checked the source code of *org.apache.camel.model.WireTapDefinition<Type>*, the *isCopy()* and *copy()* method are:
{code}
    public WireTapDefinition<Type> copy() {
        setCopy(true);
        return this;
    }

    public boolean isCopy() {
        // should default to true if not configured
        return copy != null ? copy : true;
    }
{code}
So, no matter, we use '.wireTap(""XX"")' or '.wireTap(""XX"").copy()' , it will always copy the original exchange message.
",Camel 2.10.2,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-10-26 12:40:12.614,,,no_permission,,Unknown,,,,,,,,,,,251217,,,Fri Oct 26 14:01:02 UTC 2012,,,,,,,0|i0b60n:,63087,,,,,,,,,26/Oct/12 12:40;njiang;We could add a fluent to set if camel copy the origin Message.,"26/Oct/12 14:01;njiang;Applied the patch into trunk, camel-2.10.x and camel-2.9.x branches.",,,,,,,,,,,,,,,,,,,,,,
Groovy language - classNotFoundException in OSGi environment,CAMEL-4171,12512458,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,szhemzhitsky,szhemzhitsky,01/Jul/11 12:00,22/Oct/12 12:44,13/Mar/19 22:19,22/Oct/12 12:44,2.7.2,,,,,,,,,2.10.3,2.11.0,2.9.5,,camel-core,camel-groovy,osgi,,,,0,camel-groovy,,,,,,,,"The problem is in the following method of the GroovyLanguage

@SuppressWarnings(""unchecked"")
protected Class<Script> parseExpression(String expression) {
    return new GroovyClassLoader().parseClass(expression);
}

It uses the default constructor to create GroovyClassLoader, which uses Thread context classloader, which may not be equal to the classloader of the bundle where the camel context is defined.



Caused by: java.lang.NoClassDefFoundError: groovy/lang/Script
	at java.lang.ClassLoader.defineClass1(Native Method)[:1.6.0_24]
	at java.lang.ClassLoader.defineClassCond(ClassLoader.java:632)[:1.6.0_24]
	at java.lang.ClassLoader.defineClass(ClassLoader.java:616)[:1.6.0_24]
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:141)[:1.6.0_24]
	at groovy.lang.GroovyClassLoader.access$300(GroovyClassLoader.java:55)
	at groovy.lang.GroovyClassLoader$ClassCollector.createClass(GroovyClassLoader.java:519)
	at groovy.lang.GroovyClassLoader$ClassCollector.onClassNode(GroovyClassLoader.java:536)
	at groovy.lang.GroovyClassLoader$ClassCollector.call(GroovyClassLoader.java:540)
	at org.codehaus.groovy.control.CompilationUnit$11.call(CompilationUnit.java:747)
	at org.codehaus.groovy.control.CompilationUnit.applyToPrimaryClassNodes(CompilationUnit.java:932)
	at org.codehaus.groovy.control.CompilationUnit.doPhaseOperation(CompilationUnit.java:509)
	at org.codehaus.groovy.control.CompilationUnit.processPhaseOperations(CompilationUnit.java:487)
	at org.codehaus.groovy.control.CompilationUnit.compile(CompilationUnit.java:464)
	at groovy.lang.GroovyClassLoader.doParseClass(GroovyClassLoader.java:306)
	at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:287)
	at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:267)
	at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:214)
	at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:224)
	at org.apache.camel.language.groovy.GroovyLanguage.parseExpression(GroovyLanguage.java:44)
	at org.apache.camel.language.groovy.GroovyLanguage.createExpression(GroovyLanguage.java:38)
	at org.apache.camel.language.groovy.GroovyLanguage.createExpression(GroovyLanguage.java:27)
	at org.apache.camel.component.language.LanguageProducer.process(LanguageProducer.java:41)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:50)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	... 92 more
Caused by: java.lang.ClassNotFoundException: groovy.lang.Script
	at java.net.URLClassLoader$1.run(URLClassLoader.java:202)[:1.6.0_24]
	at java.security.AccessController.doPrivileged(Native Method)[:1.6.0_24]
	at java.net.URLClassLoader.findClass(URLClassLoader.java:190)[:1.6.0_24]
	at java.lang.ClassLoader.loadClass(ClassLoader.java:307)[:1.6.0_24]
	at groovy.lang.GroovyClassLoader.loadClass(GroovyClassLoader.java:696)[134:groovy-all:1.7.5]
	at groovy.lang.GroovyClassLoader$InnerLoader.loadClass(GroovyClassLoader.java:449)
	at groovy.lang.GroovyClassLoader.loadClass(GroovyClassLoader.java:793)[134:groovy-all:1.7.5]
	at java.lang.ClassLoader.loadClass(ClassLoader.java:248)[:1.6.0_24]
	... 115 more
",,,,,,,,,,,,,,,,,,,,,19/Oct/12 10:59;amarkevich;camel-osgi.zip;https://issues.apache.org/jira/secure/attachment/12549971/camel-osgi.zip,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-07-01 18:28:18.873,,,no_permission,,,,,,,,,,,,,60760,,,Mon Oct 22 12:44:12 UTC 2012,,,,,,,0|i01za7:,9485,,,,,,,,,"01/Jul/11 18:28;davsclaus;Do you have a camel route or unit test etc. To reproduce this issue? 
And what osgi container are you using. And do you use felix or equionox?
","02/Jul/11 01:08;ffang;Hi, 

A quick question, does your customer bundle already import groovy.lang package?

Freeman","03/Jul/11 18:47;szhemzhitsky;Hi, I think that the problem is I'm using cxf and it sets thread context class loader somewhere.
I will prepare unit test to demonstrate the problem.","04/Jul/11 00:52;njiang;Which version of CXF are you using?
I think we fixed some issue of Jetty TCCL with CXF-3497 few month ago.

","07/Jul/11 07:46;szhemzhitsky;Hi, I'm using cxf 2.3.3.

CXF-3497 and CXF-3503 seem very similar to this issue.
",13/Sep/11 13:03;davsclaus;Can you try with the new Camel 2.8.1 release?,"13/Sep/11 13:04;davsclaus;And with OSGi do you use Blueprint or Spring-dm?
And what OSGi container do you run on? SMX, Karaf, something else?",05/Nov/11 13:09;davsclaus;Any update? Did you try with a later release or created an unit test?,"07/Nov/11 06:36;szhemzhitsky;Hello Claus,

Sorry for such a long answer,
I'm using ServiceMix + Spring DM and going to check it asap.

 ","07/Nov/11 07:29;szhemzhitsky;Hello Claus,

I can't reproduce this issue anymore with camel 2.8.0 and cxf 2.4.2.
I suppose this issue can be resolved as duplicate of CXF-3497 and CXF-3503 as those issues has already been fixed and they look very similar to this one.

Regards,
Sergey",07/Nov/11 07:31;davsclaus;Great to know its working now. Thanks for testing.,"19/Oct/12 10:59;amarkevich;camel 2.10.2:
- install feature 'camel-groovy';
- deploy attached sample: the same exception

","21/Oct/12 14:28;davsclaus;Well OSGi is often hard to use, and this is such a case.

Your application that uses groovy would in theory need to import all the osgi packages you application uses.  So what you can do is to instruct the bundle to use dynamic imports, then it works:
{code:xml}
                    <instructions>
                        <Bundle-SymbolicName>${project.artifactId}</Bundle-SymbolicName>
                        <Bundle-Description>${project.description}</Bundle-Description>
	  	        <DynamicImport-Package>*</DynamicImport-Package>
                        <Private-Package>org.apache.servicemix.examples.camel</Private-Package>
                    </instructions>
{code}

","22/Oct/12 12:44;davsclaus;We are now using GroovyShell to parse and evaluate the script.

The attached sample works on Karaf 2.2.9 now.",,,,,,,,,,
Aggregate EIP - Dynamic completion size should override fixed values if in exchange,CAMEL-5720,12612826,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,20/Oct/12 10:01,20/Oct/12 10:12,13/Mar/19 22:19,20/Oct/12 10:12,2.10.0,2.9.0,,,,,,,,2.10.3,2.11.0,2.9.5,,camel-core,eip,,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Bug-with-completionSize-on-AggregatorProcessor-tp5721307.html",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,250094,,,2012-10-20 10:01:33.0,,,,,,,0|i0aomf:,60262,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NotifyBuilder should be thread safe,CAMEL-5707,12612032,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,16/Oct/12 13:42,16/Oct/12 13:47,13/Mar/19 22:19,16/Oct/12 13:47,2.10.0,2.9.0,,,,,,,,2.10.3,2.11.0,2.9.5,,camel-core,,,,,,0,,,,,,,,,In high concurrent tests the NotifyBuilder may miss a counter.,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,248984,,,2012-10-16 13:42:11.0,,,,,,,0|i0a3af:,56806,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jms - Should also allow multiple consumers from multiple routes from the same queue,CAMEL-5694,12610940,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,09/Oct/12 07:18,09/Oct/12 07:41,13/Mar/19 22:19,09/Oct/12 07:41,2.10.0,,,,,,,,,2.10.2,2.11.0,2.9.4,,camel-jms,,,,,,0,,,,,,,,,"If having 2+ routes that consumes from the same queue, then that should be allowed.

Its a bit unusual though for queues in Camel as you most likely want to use the same route for the same queue. But there is nothing in the JMS spec that forbids this.

",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,245924,,,2012-10-09 07:18:27.0,,,,,,,0|i07e5r:,41060,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-smpp - Consumer error handling is not correct,CAMEL-5693,12610838,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,08/Oct/12 16:04,08/Oct/12 16:56,13/Mar/19 22:19,08/Oct/12 16:56,,,,,,,,,,2.10.2,2.11.0,2.9.4,,camel-smpp,,,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Problem-with-SMPP-Consumer-error-handling-tp5720516.html

",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,245579,,,Mon Oct 08 16:56:20 UTC 2012,,,,,,,0|i06btj:,34848,,,,,,,,,08/Oct/12 16:56;davsclaus;Now unhandled exceptions gets propagated back to the smpp library for it to deal with.,,,,,,,,,,,,,,,,,,,,,,,
camel-jetty - A soap fault should trigger http response code 500,CAMEL-5668,12609676,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,davsclaus,davsclaus,30/Sep/12 09:55,08/Oct/12 02:00,13/Mar/19 22:19,08/Oct/12 02:00,2.10.0,2.9.0,,,,,,,,2.10.2,2.11.0,2.9.4,,camel-jetty,,,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Help-with-nmr-cxf-endpoints-and-fault-handling-tp5719720.html

If a response is fault=true, then we should force the http response code to be 500. Which is what the SOAP 1.1 spec mandates.

See section 6.2 at: http://www.w3.org/TR/soap11/#_Ref477795996",,,,,,,,,,,,,,,,,,,,,01/Oct/12 02:12;jwcarman;CAMEL-5668.patch;https://issues.apache.org/jira/secure/attachment/12547191/CAMEL-5668.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-10-01 01:39:32.228,,,no_permission,,Unknown,,,,,,,,,,,241539,,,Mon Oct 08 02:00:53 UTC 2012,,,,,,,0|i028hz:,10978,,,,,,,,,01/Oct/12 01:39;jwcarman;I believe this is reported against the wrong component.  The issue actually lies within the HTTP component in the DefaultHttpBinding class.,"01/Oct/12 01:55;jwcarman;Here's a patch that implements what I think you're looking for.  I should probably add a test in the http component also, since that's where the actual code change takes place.",01/Oct/12 02:12;jwcarman;Here's another patch that patches both the http and http4 components.,01/Oct/12 02:14;jwcarman;We should really think about consolidating this code.  There are some value-adds in the http component that aren't in the http4 component.  They're virtually the same exact code.  There has to be a way to extract a superclass from this and create some abstract supermodule that they can both reference.,"01/Oct/12 02:41;njiang;@James,
Yes, we need to share these code in a common http module to avoid updating the code in camel-http and camel-http4 modules.","01/Oct/12 03:33;njiang;Applied the patch with thanks to James, I also fix the test errors of camel-jetty caused by this change.",01/Oct/12 18:06;jwcarman;Sorry about introducing the test failure.  I saw that late last night and didn't have time to fix it.  ,"08/Oct/12 02:00;njiang;Applied the patch into trunk, camel-2.10.x and camel-2.9.x branches.",,,,,,,,,,,,,,,,
camel-mqtt - Nullpointer Exception when disconnected from broker,CAMEL-5670,12609726,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,stefan.hudelmaier,stefan.hudelmaier,01/Oct/12 08:44,06/Oct/12 15:12,13/Mar/19 22:19,06/Oct/12 15:12,2.10.1,,,,,,,,,2.10.2,2.11.0,,,camel-mqtt,,,,,,0,,,,,,,,,"Hi, 

from time to time, we get the following exception when producing messages via camel-mqtt:

bq.
{code}
Caused by: java.lang.NullPointerException
	at org.fusesource.mqtt.client.CallbackConnection.publish(CallbackConnection.java:551)
	at org.fusesource.mqtt.client.CallbackConnection.publish(CallbackConnection.java:545)
	at org.apache.camel.component.mqtt.MQTTEndpoint.publish(MQTTEndpoint.java:166)
	at org.apache.camel.component.mqtt.MQTTProducer.doProcess(MQTTProducer.java:66)
	at org.apache.camel.component.mqtt.MQTTProducer.process(MQTTProducer.java:38)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
[...]
{code}

From looking at the source of both camel-mqtt and the fusesource mqtt client, it looks like that this is caused by the mqtt-client being disconnected and trying to invoke the onFailure method on the callback:

{code:title=CallbackConnection.java}
public void publish(UTF8Buffer topic, Buffer payload, QoS qos, boolean retain, Callback<Void> cb) {
        queue.assertExecuting();
        if( disconnected ) {
            cb.onFailure(createDisconnectedError());
            return;
        }
        PUBLISH command = new PUBLISH().qos(qos).retain(retain);
        command.topicName(topic).payload(payload);
        send(command, cb);
    }
{code}

camel-mqtt passes in null for the callback though. Wouldn't it be better if a more fitting exception were thrown, or if camel passed in a Callback in order to receive the onFailure event when disconnected from the broker?
",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-10-06 15:12:11.264,,,no_permission,,Unknown,,,,,,,,,,,241541,,,Sat Oct 06 15:12:11 UTC 2012,,,,,,,0|i028if:,10980,,,,,,,,,"06/Oct/12 15:12;davsclaus;Thanks for reporting. A callback is now provided. I also polished the code and added a bit bitter logging etc.

And also made the mqtt producer leverage the async routing engine.",,,,,,,,,,,,,,,,,,,,,,,
"possible NullPointerException in org.apache.camel.util.ObjectHelper.getCamelPropertiesWithPrefix(prefix, camelContext)",CAMEL-5682,12610096,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,ski309,ski309,03/Oct/12 16:30,05/Oct/12 12:41,13/Mar/19 22:19,05/Oct/12 07:19,2.10.0,,,,,,,,,2.10.2,2.11.0,2.9.4,,camel-core,,,,,,0,,,,,,,,,"If the camel context's properties contain an entry set with a null key, and ObjectHelper.getCamelPropertiesWithPrefix(prefix, camelContext) is called, a NullPointerException will be thrown at line 659.","Linux, Spring 3.1.1, Karaf 2.2.4",,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-10-05 07:19:03.572,,,no_permission,,Unknown,,,,,,,,,,,241551,,,Fri Oct 05 12:41:33 UTC 2012,,,,,,,0|i028kn:,10990,,,,,,,,,"05/Oct/12 07:19;davsclaus;Thanks for reporting.

Unlikely to happen as an end user would not store a property with a null key. That does not make sense.

But added a null check in the source code.",05/Oct/12 12:41;ski309;Definitely unlikely to happen.  I only found the error because I messed up a property in my context's xml-based setup that led to the code adding a property with a null key.  It might be a good idea to prohibit properties with null keys from being added to the context.,,,,,,,,,,,,,,,,,,,,,,
"While stopping, the QuickfixjEngine should unregister the MBean being registered for the Initiator at startup.",CAMEL-5686,12610553,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,bvahdat,bvahdat,bvahdat,05/Oct/12 12:21,05/Oct/12 12:36,13/Mar/19 22:19,05/Oct/12 12:36,2.10.1,,,,,,,,,2.10.2,2.11.0,2.9.4,,camel-quickfix,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,243014,,,2012-10-05 12:21:02.0,,,,,,,0|i035pb:,16357,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Logger Level is always at default level(""ERROR"") when error handler is LoggingErrorHandler",CAMEL-5592,12607166,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,mfshen,mfshen,12/Sep/12 03:22,28/Sep/12 13:05,13/Mar/19 22:19,28/Sep/12 13:05,2.10.1,2.9.3,,,,,,,,2.10.2,2.11.0,2.9.4,,camel-core,,,,,,0,,,,,,,,,"when logger level is set to other level (WARN, DEBUG or INFO) except for ERROR, but actually the log is always at ERROR level (it's the default level).",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-09-12 05:43:00.331,,,no_permission,,Unknown,,,,,,,,,,,241465,,,Fri Sep 28 13:05:49 UTC 2012,,,,,,,0|i0281j:,10904,,,,,,,,,12/Sep/12 05:43;davsclaus;Can you post your configuration of the logger error handler. And an example of what is being logged.,"12/Sep/12 08:41;mfshen;Please see the configuration of the logger error handler:
{noformat} 
routeBuilder = new org.apache.camel.builder.RouteBuilder() {
	public void configure() throws Exception {
		errorHandler(loggingErrorHandler().logName(
				""TestLoggingErrorHandler"").level(
				org.apache.camel.LoggingLevel.ERROR));
		from(uriMap.get(""Sender_cMessagingEndpoint_1""))
				.routeId(""Sender_cMessagingEndpoint_1"")
				.process(new org.apache.camel.Processor() {
					public void process(org.apache.camel.Exchange exchange) throws Exception {
						throw new java.lang.Exception(""This is specially generated java.lang.Exception exception"");
					}

				}).id(""cProcessor_1"");
	}
};
getCamelContexts().get(0).addRoutes(routeBuilder);
{noformat} 

BTW, about the urimap, please see below code.

protected void initUriMap() {
	uriMap = new java.util.HashMap<String, String>();
	uriMap.put(""Sender_cMessagingEndpoint_1"", ""timer:myTimer?repeatCount=1"");
}
",28/Sep/12 13:05;davsclaus;Thanks for reporting.,,,,,,,,,,,,,,,,,,,,,
camel-blueprint - Should add check for bean scope in bean injector,CAMEL-5663,12609517,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,28/Sep/12 09:49,28/Sep/12 09:54,13/Mar/19 22:19,28/Sep/12 09:54,,,,,,,,,,2.10.2,2.11.0,2.9.4,,camel-blueprint,,,,,,0,,,,,,,,,"This check is missing.

Which mean that prototype scoped bean would have been regarded as singleton by Camel.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,241535,,,2012-09-28 09:49:52.0,,,,,,,0|i028h3:,10974,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Recipient list EIP - Should shutdown thread pool if parallel mode enabled,CAMEL-5657,12609395,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,27/Sep/12 14:15,27/Sep/12 14:20,13/Mar/19 22:19,27/Sep/12 14:20,2.10.1,2.9.3,,,,,,,,2.10.2,2.11.0,2.9.4,,camel-core,eip,,,,,0,,,,,,,,,"We should shutdown the thread pool for recipient list if a pool was in use, and it can be shutdown.

The logic in doShutdown is missing that.

Camel would though have a fail-safe when it shutdown itself to shutdown that pool otherwise. But we should shutdown when the EIP is shutdown itself.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,241529,,,2012-09-27 14:15:09.0,,,,,,,0|i028fr:,10968,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Possible issue in camel-apns - Reported on user forum,CAMEL-5536,12604478,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,22/Aug/12 19:46,27/Sep/12 10:49,13/Mar/19 22:19,27/Sep/12 10:49,2.10.0,,,,,,,,,2.10.2,2.11.0,2.9.4,,,,,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Issue-with-ApnsServiceFactory-tp5717573.html",,,,,,,,,,,,,,,,,,,,,10/Sep/12 21:07;solimo;patch.txt;https://issues.apache.org/jira/secure/attachment/12544529/patch.txt,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-09-10 21:07:44.369,,,no_permission,,Novice,,,,,,,,,,,241408,,,Mon Sep 10 21:07:44 UTC 2012,,,,,,,0|i027ov:,10847,,,,,,,,,"10/Sep/12 21:07;solimo;Simple fix with default values and no destination override by setting certificates. 

What concern me are tests coverage, failures and assertions. As a result there can be more code that is not tested.",,,,,,,,,,,,,,,,,,,,,,,
JUnit ConverterTest testFileToString() fails,CAMEL-5620,12607831,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,alanfoster,alanfoster,16/Sep/12 20:11,24/Sep/12 10:53,13/Mar/19 22:19,24/Sep/12 10:53,,,,,,,,,,2.10.2,2.11.0,2.9.4,,tests,,,,,,0,,,,,,,,,The test fails on windows when there is a space in the folder structure,,,,,,,,,,,,,,,,,,,,,16/Sep/12 20:12;alanfoster;CAMEL-5620.patch;https://issues.apache.org/jira/secure/attachment/12545338/CAMEL-5620.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-09-24 10:53:28.471,,,no_permission,,Unknown,,,,,,,,,,,241493,,,Mon Sep 24 10:53:28 UTC 2012,,,Patch Available,,,,0|i0287r:,10932,,,,,,,,,16/Sep/12 20:12;alanfoster;Patch supplied,24/Sep/12 10:53;davsclaus;Thanks for the patch.,,,,,,,,,,,,,,,,,,,,,,
Bean component - Should use try conversion when choosing method based on parameter type matching,CAMEL-5644,12608835,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,24/Sep/12 08:41,24/Sep/12 09:05,13/Mar/19 22:19,24/Sep/12 09:05,2.10.0,2.9.0,,,,,,,,2.10.2,2.11.0,2.9.4,,camel-core,,,,,,0,,,,,,,,,"When the bean component has to pick among overloaded methods, then it does best matching on parameter types etc.

We should relax the type conversion to try attempt.
",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,241516,,,Mon Sep 24 08:43:03 UTC 2012,,,,,,,0|i028cv:,10955,,,,,,,,,"24/Sep/12 08:43;davsclaus;For example the replace overloaded method on java.lang.String, has changed order between java6 and 7.
Which causes Camel to try the char based types on java7 first, where as on java6 it was the string based parameters.

Running the SimpleTest demonstrates this on Java7
{code}
testBodyOgnlReplace(org.apache.camel.language.simple.SimpleTest): Failed to invoke method: .replace(""Kamel"", ""Camel"") on null due to: org.apache.camel.language.bean.RuntimeBeanExpressionException: Failed to invoke method: replace(""Kamel"", ""Camel"") on null due to: org.apache.camel.TypeConversionException: Error during type conversion from type: java.lang.String to the required type: char with value Kamel is a cool Kamel due java.lang.IllegalArgumentException: String must have exactly a length of 1: Kamel is a cool Kamel
{code}",,,,,,,,,,,,,,,,,,,,,,,
JmsToJmsTransactedSecurityTest in camel-jms fails every now and then,CAMEL-5626,12608169,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,raulvk,raulvk,raulvk,19/Sep/12 00:12,19/Sep/12 23:09,13/Mar/19 22:19,19/Sep/12 23:09,2.11.0,,,,,,,,,2.11.0,,,,camel-jms,,,,,,0,,,,,,,,,"Test {{JmsToJmsTransactedSecurityTest}} fails every now and then because of JMS message redelivery. When the entire test class is executed, it sometimes happens that the message that failed at {{testJmsSecurityFailure}} test method pops up in the assertions of {{testJmsSecurityOK}}. ",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,241499,,,Wed Sep 19 23:09:27 UTC 2012,,,,,,,0|i02893:,10938,,,,,,,,,19/Sep/12 23:09;raulvk;Resolved in r1387809. Test now consumes from the queue to remove the redelivered message before the method returns.,,,,,,,,,,,,,,,,,,,,,,,
camel-soap - Generates empty tag name if marshalling JAXB generated sources with no name in @XmlType,CAMEL-5615,12607660,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,14/Sep/12 15:18,14/Sep/12 15:27,13/Mar/19 22:19,14/Sep/12 15:27,2.10.0,2.9.0,,,,,,,,2.10.2,2.11.0,2.9.4,,camel-soap,,,,,,0,,,,,,,,,"This can cause camel soap to marshal to XML which contains an empty tag name, causing the XML to be invalid.
",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,241488,,,2012-09-14 15:18:06.0,,,,,,,0|i0286n:,10927,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
PGP data format doesn't close file input streams,CAMEL-5582,12606682,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,sdanig,sdanig,07/Sep/12 21:16,11/Sep/12 06:51,13/Mar/19 22:19,09/Sep/12 08:24,2.10.1,,,,,,,,,2.10.2,2.11.0,2.9.4,, camel-crypto,,,,,,0,,,,,,,,,"The following route doesn't work on Windows:

{code}from(""file:foo"").marshal().pgp(...).to(""ftp:blah""){code}

The reason is that PGPDataFormat.marshal() and PGPDataFormat.unmarshal() both use IOUtils.toByteArray() to read the incoming stream into a byte array, but neither of these two methods closes the streams after they have been read from. My understanding is that not closing these streams prevents Camel from subsequently renaming the file once the route has completed. I've attached a sample stack trace at the bottom.

The following seems to fix the issue for me:

Replacing the following code in {{org.apache.camel.converter.crypto.PGPDataFormat.marshal(...)}}:

{code}InputStream plaintextStream = ExchangeHelper.convertToMandatoryType(exchange, InputStream.class, graph);

byte[] compressedData = PGPDataFormatUtil.compress(IOUtils.toByteArray(plaintextStream),
        PGPLiteralData.CONSOLE, CompressionAlgorithmTags.ZIP);{code}

With this code:

{code}byte[] plaintextData;
InputStream plaintextStream = null;
try {
    plaintextStream = ExchangeHelper.convertToMandatoryType(exchange, InputStream.class, graph);
    plaintextData = IOUtils.toByteArray(plaintextStream);
} finally {
    IOUtils.closeQuietly(plaintextStream);
}

byte[] compressedData = PGPDataFormatUtil.compress(plaintextData, PGPLiteralData.CONSOLE, CompressionAlgorithmTags.ZIP);{code}

And replacing the following code in {{org.apache.camel.converter.crypto.PGPDataFormat.unmarshal(...)}}:

{code}InputStream in = new ByteArrayInputStream(IOUtils.toByteArray(encryptedStream));
in = PGPUtil.getDecoderStream(in);{code}

With this code:

{code}InputStream in;
try {
    byte[] encryptedData = IOUtils.toByteArray(encryptedStream);
    InputStream byteStream = new ByteArrayInputStream(encryptedData);
    in = PGPUtil.getDecoderStream(byteStream);
} finally {
    IOUtils.closeQuietly(encryptedStream);
}{code}

And here's the stack trace mentioned above:

{code}org.apache.camel.component.file.GenericFileOperationFailedException: Error renaming file from C:\opt\connect\just\a\test\lax\blah.txt to C:\opt\connect\just\a\test\lax\.sent\blah.txt
    at org.apache.camel.component.file.FileOperations.renameFile(FileOperations.java:72)
    at org.apache.camel.component.file.strategy.GenericFileProcessStrategySupport.renameFile(GenericFileProcessStrategySupport.java:107)
    at org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy.commit(GenericFileRenameProcessStrategy.java:86)
    at org.apache.camel.component.file.GenericFileOnCompletion.processStrategyCommit(GenericFileOnCompletion.java:132)
    at org.apache.camel.component.file.GenericFileOnCompletion.onCompletion(GenericFileOnCompletion.java:82)
    at org.apache.camel.component.file.GenericFileOnCompletion.onComplete(GenericFileOnCompletion.java:53)
    at org.apache.camel.util.UnitOfWorkHelper.doneSynchronizations(UnitOfWorkHelper.java:55)
    at org.apache.camel.impl.DefaultUnitOfWork.done(DefaultUnitOfWork.java:226)
    at org.apache.camel.processor.UnitOfWorkProcessor.doneUow(UnitOfWorkProcessor.java:199)
    at org.apache.camel.processor.UnitOfWorkProcessor.access$000(UnitOfWorkProcessor.java:37)
    at org.apache.camel.processor.UnitOfWorkProcessor$1.done(UnitOfWorkProcessor.java:157)
    at org.apache.camel.processor.RouteContextProcessor$1.done(RouteContextProcessor.java:56)
    at org.apache.camel.processor.Pipeline.process(Pipeline.java:106)
    at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
    at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
    at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)
    at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)
    at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48)
    at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
    at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
    at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
    at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
    at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73)
    at org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:336)
    at org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:189)
    at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:155)
    at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:139)
    at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:91)
    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
    at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)
    at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)
    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98)
    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:181)
    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:205)
    at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
    at java.lang.Thread.run(Thread.java:619)
Caused by: java.io.IOException: Renaming file from: C:\opt\connect\just\a\test\lax\blah.txt to: C:\opt\connect\just\a\test\lax\.sent\blah.txt failed due cannot delete from file: C:\opt\connect\just\a\test\lax\blah.txt after copy succeeded
    at org.apache.camel.util.FileUtil.renameFile(FileUtil.java:362)
    at org.apache.camel.component.file.FileOperations.renameFile(FileOperations.java:70)
    ... 36 more{code}",Windows XP,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-09-09 08:24:06.912,,,no_permission,,Moderate,,,,,,,,,,,241455,,,Tue Sep 11 06:51:38 UTC 2012,,,,,,,0|i027zb:,10894,,,,,,,,,"09/Sep/12 08:24;davsclaus;Thanks for reporting.

The workaround is to convert the payload to a String before the marshal

from -> convertTo(String) -> marshal","10/Sep/12 18:53;sdanig;Thanks for the hint! For binary files, would it be OK to convert to a byte[] instead?","11/Sep/12 06:51;davsclaus;Yeah byte[] is good as well, eg .convertBodyTo(byte[].class)",,,,,,,,,,,,,,,,,,,,,
The RowModel Data does not include the correct cell value type and some minor changes.,CAMEL-5580,12606673,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,ccorsi,ccorsi,07/Sep/12 20:54,09/Sep/12 08:42,13/Mar/19 22:19,09/Sep/12 08:42,2.10.1,,,,,,,,,2.10.2,2.11.0,,,camel-hbase,,,,,,0,camel-hbase,,,,,,,,"The hbase component create a row model from the passed endpoint configuration using the family/qualifier/etc information from the uri.  

This process currently does not extra the value type for value type n greater than 1.  It currently uses the value type from the one defined for value 1.  This is currently not a problem since this information is not being used within the hbase component but if we intend to use it the future this fix insures that it will extract the correct information for the row model.

The extracted CellMappingStrategy within the HBaseConsumer is always going to return the same instance throughout the for loop.  This has been moved outside of the for loop so that it is extract only once instead of multiple times.

Added a check to the setValueType method of the HBaseCell class to sure that the passed value is non-null else raise an exception.
",,,,,,,,,,,,,,,,,,,,,07/Sep/12 20:55;ccorsi;hbase-patch-2.diffs;https://issues.apache.org/jira/secure/attachment/12544288/hbase-patch-2.diffs,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-09-09 08:28:17.366,,,no_permission,,Novice,,,,,,,,,,,241453,,,Sun Sep 09 08:42:09 UTC 2012,,,Patch Available,,,,0|i027yv:,10892,,,,,,,,,07/Sep/12 20:55;ccorsi;Here is the patch that implements those aforementioned changes.,"09/Sep/12 08:28;davsclaus;Thanks for the patch. Mind that there was some checkstyle issues

You can check that with
{code}
mvn compile -Psourcecheck
{code}",09/Sep/12 08:42;davsclaus;Thanks for the patch.,,,,,,,,,,,,,,,,,,,,,
camel-beanio using beanio 2.0 should be using the 2012/03 beanio namespace,CAMEL-5562,12606061,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,ay,ay,04/Sep/12 11:46,07/Sep/12 06:17,13/Mar/19 22:19,07/Sep/12 06:17,2.10.1,,,,,,,,,2.10.2,2.11.0,,,camel-beanio,,,,,,0,,,,,,,,,"camel-beanio which uses beanio-2.0.x library should use the beanio 2.0's namepsace (http://www.beanio.org/2012/03) and not the 1.2 namespace ( http://www.beanio.org/2011/01) in its test cases.

The background to this is described in this mail thread.
http://camel.465427.n5.nabble.com/issue-with-camel-beanio-s-version-used-in-trunk-td5718596.html
",,,,,,,,,,,,,,,,,,,,,04/Sep/12 11:48;ay;trunk-camel-beanio.diff;https://issues.apache.org/jira/secure/attachment/12543658/trunk-camel-beanio.diff,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-09-07 06:17:32.272,,,no_permission,,Unknown,,,,,,,,,,,241434,,,Fri Sep 07 06:17:32 UTC 2012,,,Patch Available,,,,0|i027un:,10873,,,,,,,,,07/Sep/12 06:17;davsclaus;Thanks for the patch.,,,,,,,,,,,,,,,,,,,,,,,
maximumRedeliveries is inherited for other exceptions thrown while redelivering with maximumRedeliveries(-1),CAMEL-5570,12606219,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,oyvindio,oyvindio,05/Sep/12 09:06,05/Sep/12 13:52,13/Mar/19 22:19,05/Sep/12 13:52,2.10.0,2.9.0,,,,,,,,2.10.2,2.11.0,2.9.4,,camel-core,,,,,,0,,,,,,,,,"Given a route:

{code}
from(""direct:source"")
   .onException(FirstException.class)
         .handled(true)
         .maximumRedeliveries(-1)
    .end()
    .onException(SecondException.class)
        .handled(true)
        .to(""direct:error"")
    .end()
    .to(""direct:destination"");
{code}

If the consumer of direct:destination throws a FirstException, the message will be redelivered. Now if a SecondException is thrown while redelivering the message to direct:destination, it does NOT go to direct:error, as you would expect, but is redelivered again; using the same RedeliveryPolicy as for FirstException.

I have attached a test that illustrates this.

In OnExceptionDefinition.createRedeliveryPolicy, maximumRedeliveries is set to 0 if the OnExceptionDefinition has outputs and the parent RedeliveryPolicy has explicitly set maximumRedeliveries > 0. The latter check fails when maximumRedeliveries is -1 (infinite retries), and the parent RedeliveryPolicy is returned.

I have attached a patch that ensures that we don't inherit the parent maximumRedeliveries even if it is set to -1.",,,,,,,,,,,,,,,,,,,,,05/Sep/12 09:08;oyvindio;redeliverypolicy-on-exception-while-redelivering-fix.patch;https://issues.apache.org/jira/secure/attachment/12543833/redeliverypolicy-on-exception-while-redelivering-fix.patch,05/Sep/12 09:08;oyvindio;redeliverypolicy-on-exception-while-redelivering-test.patch;https://issues.apache.org/jira/secure/attachment/12543832/redeliverypolicy-on-exception-while-redelivering-test.patch,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-09-05 13:34:20.896,,,no_permission,,Unknown,,,,,,,,,,,241443,,,Wed Sep 05 13:34:20 UTC 2012,,,Patch Available,,,,0|i027wn:,10882,,,,,,,,,"05/Sep/12 13:34;davsclaus;Thanks for the patch. Will get it backported as well.

This only affect when using -1, you can use a very high number as a workaround instead of -1. Lowering to minor priority.",,,,,,,,,,,,,,,,,,,,,,,
Should shutdown management load task thread pool explicit,CAMEL-5564,12606086,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,04/Sep/12 14:07,05/Sep/12 12:16,13/Mar/19 22:19,05/Sep/12 12:16,2.10.1,2.9.3,,,,,,,,2.10.2,2.11.0,2.9.4,,camel-core,,,,,,0,,,,,,,,,"If using JMX with Camel there is a background thread, that gathers load stat periodically. We should shutdown this task/thread pool explicit.

This ensures cleaner shutdown.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,241436,,,Wed Sep 05 09:17:50 UTC 2012,,,,,,,0|i027v3:,10875,,,,,,,,,05/Sep/12 09:17;davsclaus;The default error handler thread pool should also be shutdown as well. Then we have a clean shutdown of all the pools when Camel is shutting down itself.,,,,,,,,,,,,,,,,,,,,,,,
Load balancing with “Random” policy is not halfway evenly distributed to endPoint with vast exchange ,CAMEL-5525,12604189,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,xlding,xlding,21/Aug/12 08:34,26/Aug/12 10:15,13/Mar/19 22:19,26/Aug/12 10:15,,,,,,,,,,2.10.2,2.11.0,2.9.4,,camel-core,,,,,,0,,,,,,,,,"Look the code about choosing processor in camel: http://camel.apache.org/maven/current/camel-core/apidocs/org/apache/camel/processor/loadbalancer/RandomLoadBalancer.html
{noformat} 
 protected synchronized Processor chooseProcessor(List<Processor> processors, Exchange exchange) {
        int size = processors.size();
        while (true) {
            int index = (int) Math.round(Math.random() * size);
            if (index < size) {
                return processors.get(index);
            }
        }
}
{noformat} 
For example, processors.size() = 3,
so, Math.random() * size = 0.0 .. 3.0,
So, index is either 0, or 1, or 2, or 3,
so there is four variants, while we are looking for three variants.
and, variant ""3"" is then thrown away in ""if"" comparison and re-selected.that is a source of uneveningness.when there are vast message exchange, the load radio for three endpoints are approach to 20%,40%,40%. it is unreasonable radio,should approach 33% allowing the amount of difference for each endpoint(smaller than 10%). 

For the above code, can replace ""int index = (int) Math.round(Math.random() * size)"" with ""int index = (int)Math.ceil(Math.random() * 3 - 1)""
",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-08-26 10:01:31.778,,,no_permission,,Unknown,,,,,,,,,,,241397,,,Sun Aug 26 10:15:12 UTC 2012,,,,,,,0|i027mf:,10836,,,,,,,,,"26/Aug/12 10:01;davsclaus;Thanks for reporting. I did a test run with a simpler new logic vs the old logic, by running 100000 in a foor loop with a size of 3.


New code
33255
33315
33430

Old code
19976
39819
40205


As you can see there is a flaw in the old code, pickup the last element more often.","26/Aug/12 10:15;davsclaus;Thanks for reporting.

I did a simpler fix by using Random that is easer to understand.",,,,,,,,,,,,,,,,,,,,,,
"""ThreadID is already used"" exception under heavy load",CAMEL-5526,12604190,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,asbestos,asbestos,21/Aug/12 08:58,26/Aug/12 09:47,13/Mar/19 22:19,26/Aug/12 09:47,2.10.0,2.11.0,2.8.6,2.9.2,,,,,,2.10.2,2.11.0,2.9.4,,camel-xmpp,,,,,,0,,,,,,,,,"In situations with heavy load or under load tests we rarely got exception:
{noformat} 
2012-08-21 12:28:02,620 [ool-26-thread-7] ERROR DefaultErrorHandler            - Failed delivery for (MessageId: ID-atitov-pc-60956-1345537671897-2-143205 on ExchangeId: ID-atitov-pc-60956-1345537671897-2-143206). Exhausted after delivery attempt: 1 caught: java.lang.IllegalArgumentException: ThreadID is already used
java.lang.IllegalArgumentException: ThreadID is already used
	at org.jivesoftware.smack.ChatManager.createChat(ChatManager.java:163)
	at org.apache.camel.component.xmpp.XmppPrivateChatProducer.getOrCreateChat(XmppPrivateChatProducer.java:97)
	at org.apache.camel.component.xmpp.XmppPrivateChatProducer.process(XmppPrivateChatProducer.java:65)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:120)
	at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:292)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:115)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:330)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:220)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:117)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:122)
	at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:61)
	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:86)
	at org.apache.camel.processor.UnitOfWorkProducer.process(UnitOfWorkProducer.java:63)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:360)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:1)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:227)
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:331)
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:169)
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:111)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:124)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:131)
	at org.apache.camel.component.xmpp.XmppProducerConcurrentTest$1.call(XmppProducerConcurrentTest.java:79)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
	at java.util.concurrent.FutureTask.run(FutureTask.java:138)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:662)
2012-08-21 12:28:02,621 [ool-26-thread-5] ERROR DefaultErrorHandler            - Failed delivery for (MessageId: ID-atitov-pc-60956-1345537671897-2-143207 on ExchangeId: ID-atitov-pc-60956-1345537671897-2-143208). Exhausted after delivery attempt: 1 caught: java.lang.IllegalArgumentException: ThreadID is already used
java.lang.IllegalArgumentException: ThreadID is already used
	at org.jivesoftware.smack.ChatManager.createChat(ChatManager.java:163)
	at org.apache.camel.component.xmpp.XmppPrivateChatProducer.getOrCreateChat(XmppPrivateChatProducer.java:97)
	at org.apache.camel.component.xmpp.XmppPrivateChatProducer.process(XmppPrivateChatProducer.java:65)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:120)
	at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:292)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:115)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:330)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:220)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:117)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:122)
	at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:61)
	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:86)
	at org.apache.camel.processor.UnitOfWorkProducer.process(UnitOfWorkProducer.java:63)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:360)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:1)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:227)
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:331)
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:169)
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:111)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:124)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:131)
	at org.apache.camel.component.xmpp.XmppProducerConcurrentTest$1.call(XmppProducerConcurrentTest.java:79)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
	at java.util.concurrent.FutureTask.run(FutureTask.java:138)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:662)

{noformat} 

After debugging and looking at source code we figured out, that smack use some sort of map with week references for chat cache. When memory is low java GC discards chat instances, but in Process() method they instantiated over and over again without synchronization:
{code:title=XmppPrivateChatProducer.java|borderStyle=solid}
 public void process(Exchange exchange) {
 .........................
	Chat chat = chatManager.getThreadChat(endpoint.getChatId());
	if (chat == null) {
		LOG.trace(""Creating new chat instance with thread ID {}"", endpoint.getChatId());
		chat = chatManager.createChat(getParticipant(), endpoint.getChatId(), new MessageListener() {
			public void processMessage(Chat chat, Message message) {
				// not here to do conversation
				if (LOG.isDebugEnabled()) {
					LOG.debug(""Received and discarding message from {} : {}"", getParticipant(), message.getBody());
				}
			}
		});
	}
 .........................
}
{code} 
But smack implementation prohibits chat instances with same chatId.",,,,,,,,,,,,,,,,,,,,,21/Aug/12 08:59;asbestos;XmppPrivateChatProducer.patch;https://issues.apache.org/jira/secure/attachment/12541732/XmppPrivateChatProducer.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-08-26 09:47:23.608,,,no_permission,,Unknown,,,,,,,,,,,241398,,,Sun Aug 26 09:47:23 UTC 2012,,,Patch Available,,,,0|i027mn:,10837,,,,,,,,,21/Aug/12 08:59;asbestos;I added simple patch. ,26/Aug/12 09:47;davsclaus;Thanks for the patch.,,,,,,,,,,,,,,,,,,,,,,
File consumer - NPE if configured to consume from root directory,CAMEL-5540,12604965,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,25/Aug/12 09:08,25/Aug/12 10:19,13/Mar/19 22:19,25/Aug/12 10:19,2.10.0,2.9.2,,,,,,,,2.10.2,2.11.0,2.9.4,,camel-core,,,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Setting-root-folder-as-endpoint-Could-not-poll-endpoint-NPE-tp5717845.html",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,241412,,,2012-08-25 09:08:48.0,,,,,,,0|i027pr:,10851,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unable to customize URIResolver in xslt component,CAMEL-5505,12603450,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,hadrian,asbestos,asbestos,14/Aug/12 13:33,22/Aug/12 16:03,13/Mar/19 22:19,22/Aug/12 16:03,2.10.0,2.11.0,,,,,,,,2.10.1,2.11.0,2.9.3,,camel-core,,,,,,0,"camel-core,",test,xslt,,,,,,"In xslt component we can't customize uriResolver For instance in route with uri ""xslt:org/apache/camel/component/xslt/include_not_existing_resource.xsl?uriResolver=#customURIResolver"" camel still uses default XsltUriResolver.",,,,,,,,,,,,,,,,,,,,,15/Aug/12 11:25;asbestos;camel-core-xslt-CustomURIResolver-checkstyle.patch;https://issues.apache.org/jira/secure/attachment/12541036/camel-core-xslt-CustomURIResolver-checkstyle.patch,14/Aug/12 13:35;asbestos;camel-core-xslt-CustomURIResolver.patch;https://issues.apache.org/jira/secure/attachment/12540879/camel-core-xslt-CustomURIResolver.patch,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-08-14 14:33:06.921,,,no_permission,,Novice,,,,,,,,,,,241377,,,Wed Aug 15 14:03:54 UTC 2012,,,Patch Available,,,,0|i027hz:,10816,,,,,,,,,14/Aug/12 13:35;asbestos;Test case with fix.,"14/Aug/12 14:33;hadrian;I am looking at your patch. A quick comment, the '#' should not be there. While it's used in some context to mean a reference, in a [URI|http://www.ietf.org/rfc/rfc2396.txt] that would indicate a fragment, so I would take it out.","14/Aug/12 14:37;davsclaus;The # is to denote a reference lookup in Camel, and is supported by any options in the URI. So Alexander is correct in his patch.

For example with the file component to use a custom filter, example on web page at
http://camel.apache.org/file2

","14/Aug/12 14:46;hadrian;@claus, two wrongs don't make a right! I strongly encourage you to try understanding the spec. In this particular case we have an opportunity to fix things as the [xslt component|http://camel.apache.org/xslt.html] doesn't document a requirement to use the '#'.","14/Aug/12 14:55;davsclaus;All the components support the # reference lookup. Its to make it easy to configure endpoints! It has been link this 4+ years. Any option can use that, even types that are String etc.

The # dont need to be documented in all options, as its a general idiom in Camel. There is logic in camel-core that handles this!

","14/Aug/12 17:22;asbestos;Hadrian, thanks for advice. Can you share some documentation or other reference about that?
I agree, that there is no documentation about '#' in xslt component. I studied souce code of camel-core, particularly EndpointHelper.resolveReferenceParameter and i see that in this version of camel all # signs replased with empty string. In samples from Camel in action book beans with # called reference beans. Maybe this book is old, or this information is outdated, or somthing like that. 

Despite this, proplem is in createEndpoint implementation of xslt component. Currently, after parameter is set in configureXslt, it is removed from parameters Map. URIResolver resolver = resolveAndRemoveReferenceParameter(parameters, ""uriResolver"", URIResolver.class) will allways return null, after configureXslt is called, and resolver will be always initialized to new XsltUriResolver.  ","14/Aug/12 20:56;hadrian;Alexander, I understand what you wanted to do and why. From one point of view Claus is somewhat right in his statement that you are ""correct in this patch"" in the sense that you followed the same pattern in use in Camel today. My statement was that the logic in camel-core is flawed and not using '#' means one less place to clean up in the future. As you point out, the 'logic' in camel-core is kinda random, replacing chars with other chars, thus creating undocumented and even unknown to us edge cases that pop up a lot lately. There are other flaws, like adding the extra '//' thus not allowing for urns at all, and others. The fact that it stayed like this for 4+ years is imho not an assurance that it's correct.
",15/Aug/12 02:10;hadrian;Patch applied. Will see tomorrow if I can improve the '#' usage.,"15/Aug/12 05:12;asbestos;Ahh, i got it. 
But how can we today set reference property (lookup in registry) in URI?
Without # i got exception:
org.apache.camel.FailedToCreateRouteException
..............
Caused by: java.lang.IllegalArgumentException: Could not find a suitable setter for property: uriResolver as there isn't a setter method with same type: java.lang.String nor type conversion possible: No type converter available to convert from type: java.lang.String to the required type: javax.xml.transform.URIResolver with value uriResolver
	at org.apache.camel.util.IntrospectionSupport.setProperty(IntrospectionSupport.java:347)
	at org.apache.camel.util.IntrospectionSupport.setProperty(IntrospectionSupport.java:367)
	at org.apache.camel.util.IntrospectionSupport.setProperties(IntrospectionSupport.java:297)
	at org.apache.camel.util.EndpointHelper.setProperties(EndpointHelper.java:249)
	at org.apache.camel.impl.DefaultComponent.setProperties(DefaultComponent.java:222)
	at org.apache.camel.component.xslt.XsltComponent.configureXslt(XsltComponent.java:145)
	at org.apache.camel.component.xslt.XsltComponent.createEndpoint(XsltComponent.java:124)
	at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:91)
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:450)
	... 33 more


I will look in other components to see, how i can lookup beans in registry. 

Thanks for help.
","15/Aug/12 06:26;davsclaus;The # is documented here
http://camel.apache.org/configuring-camel.html

And its a general idiom to refer to beans, such as Alex mention above. How can you configure a non trivial option? You cannot say for example:
{code}
?uriResolver=new MyCustomUriResolver()&bla=123
{code}

The # is similar to the ""ref"" attribute in Spring Bean style configuration
{code:xml}
<bean id=""myXsltEndpoint"" class=""..."">
  <property name=""uriResolver"" ref=""myCustomUriResolver""/>
  ...
{code}",15/Aug/12 06:27;davsclaus;Does this issue also apply to the 2.9 branch? ,"15/Aug/12 07:00;asbestos;Claus, as i can see from source code, no, it does not.
And thanks for link!
","15/Aug/12 09:56;bvahdat;@Alexander beforehand many thanks for your contribution.

The unit-test you've provided by your patch has got *34* checkstyle errors. Would it be possible for you to fix them and attach a patch for it:

{code}
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:38: member def modifier bei Einr?cktiefe 8 nicht an korrekter Einr?cktiefe 4
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:38:1: File contains tab characters (this is the first instance).
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:41: member def modifier bei Einr?cktiefe 8 nicht an korrekter Einr?cktiefe 4
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:41:30: 'EXPECTED_XML_CONSTANT' entspricht nicht dem Muster '^[a-z][a-zA-Z0-9]*$'.
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:43: method def modifier bei Einr?cktiefe 8 nicht an korrekter Einr?cktiefe 4
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:44: Kind von method def bei Einr?cktiefe 16 nicht an korrekter Einr?cktiefe 8
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:45: Kind von method def bei Einr?cktiefe 16 nicht an korrekter Einr?cktiefe 8
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:47: Kind von method def bei Einr?cktiefe 16 nicht an korrekter Einr?cktiefe 8
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:49: Kind von method def bei Einr?cktiefe 16 nicht an korrekter Einr?cktiefe 8
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:50: method def rcurly bei Einr?cktiefe 8 nicht an korrekter Einr?cktiefe 4
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:52: method def modifier bei Einr?cktiefe 8 nicht an korrekter Einr?cktiefe 4
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:53: method def modifier bei Einr?cktiefe 8 nicht an korrekter Einr?cktiefe 4
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:54: Kind von method def bei Einr?cktiefe 16 nicht an korrekter Einr?cktiefe 8
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:55: method def modifier bei Einr?cktiefe 24 nicht an korrekter Einr?cktiefe 20
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:56: method def modifier bei Einr?cktiefe 24 nicht an korrekter Einr?cktiefe 20
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:57: Kind von method def bei Einr?cktiefe 32 nicht an korrekter Einr?cktiefe 24
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:60: method def rcurly bei Einr?cktiefe 24 nicht an korrekter Einr?cktiefe 20
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:62: method def rcurly bei Einr?cktiefe 8 nicht an korrekter Einr?cktiefe 4
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:64: method def modifier bei Einr?cktiefe 8 nicht an korrekter Einr?cktiefe 4
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:65: Kind von method def bei Einr?cktiefe 16 nicht an korrekter Einr?cktiefe 8
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:67: method def modifier bei Einr?cktiefe 24 nicht an korrekter Einr?cktiefe 20
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:68: method def modifier bei Einr?cktiefe 24 nicht an korrekter Einr?cktiefe 20
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:69: method def throws bei Einr?cktiefe 40 nicht an korrekter Einr?cktiefe 24
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:70: Kind von method def bei Einr?cktiefe 32 nicht an korrekter Einr?cktiefe 24
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:73: Kind von method def bei Einr?cktiefe 32 nicht an korrekter Einr?cktiefe 24
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:74: method def rcurly bei Einr?cktiefe 24 nicht an korrekter Einr?cktiefe 20
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:76: method def rcurly bei Einr?cktiefe 8 nicht an korrekter Einr?cktiefe 4
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:78: method def modifier bei Einr?cktiefe 8 nicht an korrekter Einr?cktiefe 4
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:79: method def modifier bei Einr?cktiefe 8 nicht an korrekter Einr?cktiefe 4
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:80: Kind von method def bei Einr?cktiefe 16 nicht an korrekter Einr?cktiefe 8
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:81: Kind von method def bei Einr?cktiefe 16 nicht an korrekter Einr?cktiefe 8
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:82: Kind von method def bei Einr?cktiefe 16 nicht an korrekter Einr?cktiefe 8
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:83: Kind von method def bei Einr?cktiefe 16 nicht an korrekter Einr?cktiefe 8
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:84: method def rcurly bei Einr?cktiefe 8 nicht an korrekter Einr?cktiefe 4
{code}

You could run:

{code}
mvn -Psourcecheck,fastinstall clean install
{code}

to fix them. See also http://camel.apache.org/building.html if you need more details. Thanks!
",15/Aug/12 11:25;asbestos;Sorry for invalid code style. Fixed and patch included. ,"15/Aug/12 13:37;hadrian;@Claus,

This is a discussion we'll have (again) on dev@. But to give you a couple of short answers now:
1. There was absolutely no attention given to non-trivial configuration options 4+ years ago. That slowly slipped into the current situation. No one to blame but ourselves.
2. You yourself give an example in which a '#' is not present (ref=""myCustomUriResolver"")
3. When using the XML dsl, no one would argue about the need to encode to make the xml valid, yet in the URI case some seem to argue that there can be a gray area.
4. The Camel in Action book states that ""In Camel, you configure endpoints using URIs"", which as we now know, is not quite correct. The Camel api uses the term URI all over the place (getEndpointUri()), but that's not a (String representation of a) URI.
5. You seem to imply that the only alternative is to put Java code in the URI, bulking up that ridiculous notion with the fact that the Camel URIs are badly designed, probably in an attempt to dismiss both. 

If you were fair, you would have said that you can do either of:
?uriResolver=org.example.camel.MyCustomUriResolver&bla=123
?uriResolverRef=myCustomUriResolver&bla=123

But as I said, I am waiting for the days when we'll be able to have a decent discussion and solution to fix this mess on dev@. I am patient. That's the last thing I'll say on the topic in this jira.","15/Aug/12 13:54;davsclaus;Ad 5)
This is not possible. There is no xxxRef option.

For example adjusting the unit test from this ticket
{code}
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: xslt://org/apache/camel/component/xslt/include_not_existing_resource.xsl?uriResolverRef=customURIResolver due to: There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[{uriResolverRef=customURIResolver}]
	at org.apache.camel.impl.DefaultComponent.validateParameters(DefaultComponent.java:148)
{code}","15/Aug/12 14:03;hadrian;Am I aware that there is no xxxRef option? Yes.
Do I know that if you configure an option that doesn't exist endpoint creation fails? Yes.
Why isn't a xxxRef option there? Because we didn't put it.
Who stops us from putting it there? Nothing.
Would I put it there now? No. Not until we had a real discussion on dev@ and came up with a solution for all Endpoint.

Does it matter how an option is called? Not really. It's just to be descriptive to the user.
Would xxxRef options be a solution? Probably.
Would it be the only solution? No.
Could we use the xxx options without a '#' in the value (and no internal hacks)? Absolutely.

Claus, please stop wasting my time. ",,,,,,,
Maven archetype - Generates wrong plugin for surefire plugin,CAMEL-5527,12604198,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,21/Aug/12 10:13,21/Aug/12 10:34,13/Mar/19 22:19,21/Aug/12 10:34,2.10.0,,,,,,,,,2.10.1,2.11.0,,,tooling,,,,,,0,,,,,,,,,The blueprint archetype creates wrong pom.xml. The groupId for the surefire plugin is wrong.,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,241399,,,Tue Aug 21 10:34:23 UTC 2012,,,,,,,0|i027mv:,10838,,,,,,,,,21/Aug/12 10:34;davsclaus;This does not affect Camel 2.9.,21/Aug/12 10:34;davsclaus;I removed the surefire plugin as its no longer needed,,,,,,,,,,,,,,,,,,,,,,
"Jetty http consumer doesn't suppor the uri ""jetty:http://localhost:9000""",CAMEL-5509,12603591,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,njiang,njiang,15/Aug/12 14:39,20/Aug/12 02:30,13/Mar/19 22:19,20/Aug/12 02:30,2.10.0,2.9.2,,,,,,,,2.10.1,2.11.0,2.9.3,,camel-jetty,,,,,,0,,,,,,,,,"When you using ""jetty:http://localhost:9000"" as the jetty http consumer uri, you will get a complain of 404 when you using ""http://localhost:9000"" to access the service.
",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,241381,,,Mon Aug 20 02:30:49 UTC 2012,,,,,,,0|i027iv:,10820,,,,,,,,,"20/Aug/12 02:30;njiang;Applied patch into trunk, camel-2.10.x and camel-2.9.x branches.",,,,,,,,,,,,,,,,,,,,,,,
@XPath annotation should ensure cleanup after evaluation,CAMEL-5501,12603221,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,13/Aug/12 11:07,13/Aug/12 16:15,13/Mar/19 22:19,13/Aug/12 16:11,2.10.0,2.9.2,,,,,,,,2.10.1,2.11.0,2.9.3,,camel-core,,,,,,0,,,,,,,,,"See CAMEL-3813

Look into the @XPath bean parameter binding and ensure its resources is cleaned up after usage.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,241373,,,Mon Aug 13 16:15:09 UTC 2012,,,,,,,0|i027h3:,10812,,,,,,,,,13/Aug/12 13:27;davsclaus;Okay i have reproduce an issue when using ognl expressions on beans that use @XPath annoations,"13/Aug/12 14:13;davsclaus;Its CAMEL-1930 that introduced improved concurrency in xpath builder. I think we can improved that a bit to only use a thread local for the exchange. The variable resolver do not really need to be thread local as well. But just refer to the exchange as it does today. And then we can remove the thread local on each evaluation, instead of keeping it set on the thread.

This should more nicely cleanup the resources in all situations also when using @XPath annotations in ognl method calls and whatnot.","13/Aug/12 16:11;davsclaus;This also optimized xpath builder under load as there is less thread locals, and no on completion etc. And makes it for better GC as no thread locals is kept for a longer time.","13/Aug/12 16:15;davsclaus;On a very crude test on my laptop by sending 33333 messages in org.apache.camel.language.XPathRouteConcurrentBigTest, i get the test to go from 90 sec to 60 sec on my laptop. Notice this is a crude test by running it locally 5 times in a row, and taking the avg. time.",,,,,,,,,,,,,,,,,,,,
file endpoints on windows without volume name in the path url not working in some cases,CAMEL-5495,12602556,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,ay,ay,09/Aug/12 16:48,13/Aug/12 09:31,13/Mar/19 22:19,13/Aug/12 09:31,2.9.2,,,,,,,,,2.10.1,2.11.0,2.9.3,,camel-core,,,,,,0,,,,,,,,,"I am using file endpoints on Windows without the volume name just like the normal unix based paths look.
That means, I have something like  file:///tmp/file-in and file:///tmp/file-out

The funny thing that I noticed is that each endpoint itself works fine, but when a route is set up from one to the other, it fails because there seems to be an inconsistency in the way the windows path is handled in the camel-core's file component.

As mentioned, each file endpoint itself is working fine. For example, the consumer file endpoint configured in a route
from(""file:///tmp/file-in"").to(""mock:test"")
works fine.

Similarly, the produce file endpoint configured in a route
from(""direct:test"").to(""file:///tmp/file-out"")
works fine.

But when a route is setup to connect these two file endpoints, the producer endpoint fails to create the output file.
Concretely, there is the following code in GenericFileEndpoint.configureMessage that determines the file name.

             String name = file.isAbsolute() ? file.getAbsoluteFilePath() : file.getRelativeFilePath();

            // skip leading endpoint configured directory
            String endpointPath = getConfiguration().getDirectory() + getFileSeparator();

In this particular case, the name variable is set to ""C:\tmp\file-in\sample.xml"" while the endpointPath variable is set to ""\tmp\file-in"".
So, the subsequent code to extract the file name part, shown below, fails to match the path.

            if (ObjectHelper.isNotEmpty(endpointPath) && name.startsWith(endpointPath)) {
                name = ObjectHelper.after(name, endpointPath);
            }

As a result, the file name is not extracted as ""sample.xml"" but remain unchanged as ""C:\tmp\file-in\sample.xml"".
Consequently, when the file producer endpoint tries to write this file in the file system, it tries to write a file as ""/tmp/file-out/C:\tmp\file-in\sample.xml"", resulting in an error.

I modified FileComponent and FileEndpoint so that the endpoint path is stored correctly in this case to make the above extraction code find the file name part correctly.

Attached is this proposed patch and a test case which runs on windows and on non-windows but this issue can only be demonstrated under windows.

testRouteToFileOnly and testRouteFromFileOnly work without this patch while testRouteFileToFile fails without this patch on windows.

Thanks for looking into this issue.

Regards, Aki


",windows,,,,,,,,,,,,,,,,,,,,09/Aug/12 16:51;ay;trunk-camel-5495.diff;https://issues.apache.org/jira/secure/attachment/12540069/trunk-camel-5495.diff,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-08-13 09:31:30.006,,,no_permission,,Unknown,,,,,,,,,,,241367,,,Mon Aug 13 09:31:30 UTC 2012,,,Patch Available,,,,0|i027fr:,10806,,,,,,,,,"09/Aug/12 16:51;ay;patch for trunk
","13/Aug/12 09:31;njiang;Applied patch into trunk, camel-2.10.x and camel-2.9.x branches with thanks to Aki.",,,,,,,,,,,,,,,,,,,,,,
camel-testng - The spring base test class should use @AfterMethod on teardown as its parent does,CAMEL-5500,12603205,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,13/Aug/12 09:03,13/Aug/12 09:06,13/Mar/19 22:19,13/Aug/12 09:06,2.10.0,2.9.2,,,,,,,,2.10.1,2.11.0,2.9.3,,camel-test,,,,,,0,,,,,,,,,"See nabble

http://camel.465427.n5.nabble.com/Problem-with-testng-CamelSpringTestSupport-several-contexts-runs-simultaneously-tp5716447.html",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,241372,,,2012-08-13 09:03:08.0,,,,,,,0|i027gv:,10811,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-mybatis should do a proper transaction demarcation while reading/writing from/to database.,CAMEL-5485,12601467,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,bvahdat,bvahdat,bvahdat,04/Aug/12 21:12,04/Aug/12 21:57,13/Mar/19 22:19,04/Aug/12 21:57,2.10.0,,,,,,,,,2.10.1,2.11.0,2.9.3,,camel-mybatis,,,,,,0,,,,,,,,,"See http://camel.465427.n5.nabble.com/MyBatis-Component-Bug-consumer-onConsume-hits-error-transactions-are-committed-instead-of-rollback-td5716774.html

Other than DefaultMyBatisProcessingStrategy the same issue exists by MyBatisProducer as well.

Another thing which is currently missing completley is that there's no transaction demarcation by the Producer at all while *reading* from the database, e.g. by SelectOne or SelectList statement types.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,241357,,,2012-08-04 21:12:13.0,,,,,,,0|i027dj:,10796,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add support for batch consumer's empty messages to aggregator,CAMEL-5437,12598323,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,fuzebest,fuzebest,11/Jul/12 07:01,12/Jul/12 06:59,13/Mar/19 22:19,12/Jul/12 06:59,2.10.0,2.9.2,,,,,,,,2.10.1,2.11.0,2.9.3,,camel-core,,,,,,0,,,,,,,,,"Aggregator supports completion based on the batch consumer data (option completionFromBatchConsumer)

Some batch consumers (eg. File) can send an empty message if there is no input (option sendEmptyMessageWhenIdle for File consumer).

Aggregator is unable to handle such messages properly - the messages are aggregated, but Aggregator never completes.


Here is the relevant fragment from AggregateProcessor.isCompleted(String,
Exchange)

int size = exchange.getProperty(Exchange.BATCH_SIZE, 0, Integer.class);
if (size > 0 && batchConsumerCounter.intValue() >= size) {
    ....
}


Please add support for this combination of options.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-07-11 17:29:33.957,,,no_permission,,Unknown,,,,,,,,,,,241310,,,Wed Jul 11 17:29:33 UTC 2012,,,,,,,0|i02733:,10749,,,,,,,,,11/Jul/12 17:29;davsclaus;The empty message should have batch details so the EIPs can work with the message.,,,,,,,,,,,,,,,,,,,,,,,
Sending null in body when forcing JMS message type to Object throws an Exception,CAMEL-5429,12597867,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,bjpeter,bjpeter,07/Jul/12 00:36,08/Jul/12 08:49,13/Mar/19 22:19,08/Jul/12 08:49,2.9.0,,,,,,,,,2.10.1,2.9.3,,,camel-jms,,,,,,0,,,,,,,,,"I set ""jmsMessageType=Object"", and when I try to send a null in the body, I get an exception. See program and log.",,,,,,,,,,,,,,,,,,,,,07/Jul/12 00:49;bjpeter;Exception.txt;https://issues.apache.org/jira/secure/attachment/12535486/Exception.txt,07/Jul/12 00:48;bjpeter;TestCamelJmsWithNull.java;https://issues.apache.org/jira/secure/attachment/12535485/TestCamelJmsWithNull.java,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-07-07 08:49:57.399,,,no_permission,,Unknown,,,,,,,,,,,241302,,,Sun Jul 08 07:42:03 UTC 2012,,,,,,,0|i0271b:,10741,,,,,,,,,07/Jul/12 00:37;bjpeter;Test program.,07/Jul/12 08:49;davsclaus;Whats your use-case for sending JMS messages without any body?,"07/Jul/12 09:50;bjpeter;Before I used ""jmsMessageType=Object"", the application was sending null in a message, and it worked. However, I ran into a problem when I was trying to send a map of non-primitive, serialized objects. (See CAMEL-5293.) Using ""jmsMessageType=Object"" solved CAMEL-5293, but now I can no longer send null in a message as an exception will be thrown.","08/Jul/12 07:33;davsclaus;This is by design. 

We will add a new option {{allowNullBody}} you can configure to true, as in your use-case to allow sending messages with no message body.","08/Jul/12 07:42;davsclaus;And yes as we by default allow null bodies in the other message types, we should do that as well for Object message types. So I will fix that as well.",,,,,,,,,,,,,,,,,,,
@MockEndpointsAndSkip does not work,CAMEL-5424,12597663,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,msvab,msvab,05/Jul/12 22:25,06/Jul/12 12:47,13/Mar/19 22:19,06/Jul/12 12:47,2.10.0,,,,,,,,,2.10.1,,,,camel-test,,,,,,0,,,,,,,,,"Due to copy & paste error in CamelSpringTestContextLoader.handleMockEndpointsAndSkip @MockEndpointsAndSkip annotation is ignored and it looks for @MockEndpoints annotation. Test for this annotation is wrong as well, as it tries to mock {{mock:*}} endpoint that cannot be mocked again.

I've attached a patch that fixes both CamelSpringTestContextLoader and the test. In case I missed anything, I'm happy to improve the patch.",,,,,,,,,,,,,,,,,,,,,06/Jul/12 08:23;msvab;MockEndpointsAndSkip-did-not-work.patch;https://issues.apache.org/jira/secure/attachment/12535326/MockEndpointsAndSkip-did-not-work.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-07-06 07:50:03.487,,,no_permission,,Unknown,,,,,,,,,,,241297,,,Fri Jul 06 12:47:46 UTC 2012,,,,,,,0|i02707:,10736,,,,,,,,,"06/Jul/12 07:50;davsclaus;Michal, can you re-attach your patch and mark [x] in grant license to Apache. Otherwise we cannot accept your patch.","06/Jul/12 08:23;msvab;Doh, missed that one.",06/Jul/12 12:47;davsclaus;Thanks for the patch.,,,,,,,,,,,,,,,,,,,,,
camel-soap - Sets wrong namespace for faults,CAMEL-5419,12597445,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,04/Jul/12 12:03,04/Jul/12 13:36,13/Mar/19 22:19,04/Jul/12 13:36,2.10.0,2.9.2,,,,,,,,2.10.1,2.9.3,,,camel-soap,,,,,,0,,,,,,,,,"If there is an exception on the Exchange which gets marshalled then the namespace of the fault is not the same namespace as the envelope.

The namespace on soap 1.1 is: ""http://schemas.xmlsoap.org/soap/envelope/""
But the fault is using soap 1.2: ""http://www.w3.org/2003/05/soap-envelope""

We should use the same namespace so its consistent.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,241292,,,2012-07-04 12:03:24.0,,,,,,,0|i026z3:,10731,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Threads EIP hangs Junit4 tests using adviceWith,CAMEL-5406,12596144,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,egherardini,egherardini,27/Jun/12 19:12,30/Jun/12 17:31,13/Mar/19 22:19,30/Jun/12 17:31,2.10.0,2.9.1,,,,,,,,2.10.1,2.8.6,2.9.3,,camel-core,tests,,,,,0,,,,,,,,,"If the {code} threds() {code} DSL keyword is used in a route and a Junit4 test is performed, the test hangs indefenitely.

The issue is descibed here:

http://camel.465427.n5.nabble.com/Threads-EIP-hangs-Unit-Tests-JUnit4-td5715031.html

please find attached a self-consistent sample project to reproduce it.",,,,,,,,,,,,,,,,,,,,,27/Jun/12 19:14;egherardini;threads-eip-bug-advicewith.rar;https://issues.apache.org/jira/secure/attachment/12533693/threads-eip-bug-advicewith.rar,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-06-30 10:13:50.993,,,no_permission,,Unknown,,,,,,,,,,,241279,,,Sat Jun 30 10:13:50 UTC 2012,,,,,,,0|i026w7:,10718,,,,,,,,,27/Jun/12 19:14;egherardini;A sample project reproducing the issue. I apologize for the bad variable names but I had to heavely refactor code prior to publishing it.,27/Jun/12 19:26;egherardini;This reproduces also on 2.10-SNAPSHOT,30/Jun/12 10:13;davsclaus;Its the intercept mock to endpoints that didnt support the async routing engine properly. So this issue is only when unit testing and using that feature.,,,,,,,,,,,,,,,,,,,,,
Shutting down one of the contexts breaks async redeliveries in others: RedeliveryErrorHandler has static reference to a thread pool,CAMEL-5372,12560843,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,soboleiv,soboleiv,15/Jun/12 22:47,16/Jun/12 14:00,13/Mar/19 22:19,16/Jun/12 11:54,2.9.2,,,,,,,,,2.10.0,2.8.6,2.9.3,,camel-core,,,,,,0,,,,,,,,,"ErrorRedeliveryHandler has static reference to a thread pool used for scheduling retries, thus when it's stopped it stops a pool used by other handler instances(e.g. from other contexts), thus they now can't redeliver.",,,,,,,,,,,,,,,,,,,,,15/Jun/12 22:47;soboleiv;patch_redeliveries_threading_cleanup.txt;https://issues.apache.org/jira/secure/attachment/12532255/patch_redeliveries_threading_cleanup.txt,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-06-16 11:54:09.9,,,no_permission,,Novice,,,,,,,,,,,241245,,,Sat Jun 16 14:00:27 UTC 2012,,,Patch Available,,,,0|i026on:,10684,,,,,,,,,"16/Jun/12 11:54;davsclaus;Thanks for reporting and providing unit test.
I used the test and fixed the thread pool to be per camel context ",16/Jun/12 14:00;soboleiv;Thank you very much for the quick turnaround:) Looking forward to getting this released:),,,,,,,,,,,,,,,,,,,,,,
Uptime reported by Camel can be incorrect for values > 1 day.,CAMEL-5348,12559852,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,markwaller,markwaller,08/Jun/12 14:56,11/Jun/12 07:08,13/Mar/19 22:19,11/Jun/12 07:08,2.9.2,,,,,,,,,2.10.0,2.8.6,2.9.3,,camel-core,,,,,,0,,,,,,,,,Similar to issue KARAF-760 the context.getUptime() reports invalid durations - such as '19 days 54 hours'. Problem is in org/apache/camel/util/TimeUtils.java,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Novice,,,,,,,,,,,241221,,,2012-06-08 14:56:49.0,,,,,,,0|i026jb:,10660,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The camel aggregation example generates an error whenever the completion predicate is entered.,CAMEL-5333,12559335,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,05/Jun/12 07:59,05/Jun/12 08:02,13/Mar/19 22:19,05/Jun/12 08:02,2.8.5,2.9.3,,,,,,,,2.10.0,2.8.6,2.9.3,,examples,,,,,,0,,,,,,,,,"The camel aggregate example will generate an error every time that someone uses the completion predicate 'STOP'.

The issue is the type converter dont swallow conversion errors anymore.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,241206,,,2012-06-05 07:59:27.0,,,,,,,0|i026fz:,10645,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cometd component does not pass EnableSessionHeaders parameter to CometdBinding properly.,CAMEL-5263,12554465,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,jwatkins,jwatkins,09/May/12 10:55,10/May/12 01:34,13/Mar/19 22:19,10/May/12 01:34,,,,,,,,,,2.10.0,,,,camel-cometd,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,09/May/12 10:55;jwatkins;camelCometdBooleanAndSessionHeaderPatch.txt;https://issues.apache.org/jira/secure/attachment/12526138/camelCometdBooleanAndSessionHeaderPatch.txt,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-05-09 16:26:23.755,,,no_permission,,Unknown,,,,,,,,,,,238707,,,Thu May 10 01:34:57 UTC 2012,,,Patch Available,,,,0|i0260f:,10575,,,,,,,,,"09/May/12 10:57;jwatkins;I noticed that I had made an error and not brought over a change from my branch into the patch. The initial version didn't pass the property to the binding. I have added a fix as well as more unit tests to cover this. Additionally, I have added support for booleans as values for the session headers.","09/May/12 16:26;njiang;Applied patch with thanks to Joshua, I also fixed some check style errors at the same time.",10/May/12 01:34;njiang;Applied patch into the trunk.,,,,,,,,,,,,,,,,,,,,,
camel-blueprint - Should not set empty location for properties component,CAMEL-5229,12553102,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,27/Apr/12 07:47,27/Apr/12 07:55,13/Mar/19 22:19,27/Apr/12 07:55,,,,,,,,,,2.10.0,2.9.3,,,camel-blueprint,,,,,,0,,,,,,,,,"Property placeholders using blueprint, should avoid setting empty locations by default",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,237118,,,2012-04-27 07:47:29.0,,,,,,,0|i025sv:,10541,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The file producer should use the charset encoding when writing the file if configured,CAMEL-5215,12552541,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,25/Apr/12 09:49,25/Apr/12 11:31,13/Mar/19 22:19,25/Apr/12 11:31,,,,,,,,,,2.10.0,2.9.3,,,camel-core,,,,,,0,,,,,,,,,"When writing to a file, we offer the charset option on the endpoint, as well the charset property set on the exchange.
However in a route  that is optimized as
{code}
from file
 to file
{code}

Then we optimize to do a file move operation instead. We should detect the charset configured and then we would need to stream and write using the configured charset.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,236819,,,2012-04-25 09:49:30.0,,,,,,,0|i025pr:,10527,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Potential dead-lock when shutting down Camel with NotifyBuilder doing notication,CAMEL-5200,12551977,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,21/Apr/12 08:07,25/Apr/12 11:24,13/Mar/19 22:19,21/Apr/12 08:52,2.9.0,,,,,,,,,2.10.0,2.8.5,2.9.3,,camel-core,,,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Gracefull-shutdown-timeouts-due-to-NotifyBuilder-blocks-on-context-tp5654048p5654048.html

We should avoid the synchronized getRoutes method which is really not needed.",,,,,,,,,,,,,,,,,,,,,25/Apr/12 11:24;schmidtm;shutdown-testcase.tar.gz;https://issues.apache.org/jira/secure/attachment/12524173/shutdown-testcase.tar.gz,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-04-25 11:24:58.336,,,no_permission,,Unknown,,,,,,,,,,,236834,,,Wed Apr 25 11:24:58 UTC 2012,,,,,,,0|i025mf:,10512,,,,,,,,,25/Apr/12 11:24;schmidtm;Eclipse/Maven project exposing the bug everytime.,,,,,,,,,,,,,,,,,,,,,,,
XSLTUriResolver fails to include from classpath under windows,CAMEL-5195,12551629,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,juliengb,juliengb,19/Apr/12 14:50,20/Apr/12 16:01,13/Mar/19 22:19,20/Apr/12 16:01,2.9.0,,,,,,,,,2.10.0,2.9.3,,,camel-core,camel-xslt,,,,,0,xslt,,,,,,,,org.apache.camel.builder.xml.XsltUriResolver uses File.separator to separate classpath parts instead of simply '/'. This prevents <xsl:include /> to work under windows when the including xslt is located in a subfolder of the classpath.,Windows,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-04-20 14:58:40.131,,,no_permission,,Novice,,,,,,,,,,,236437,,,Fri Apr 20 16:01:48 UTC 2012,,,,,,,0|i025lb:,10507,,,,,,,,,"20/Apr/12 14:58;davsclaus;Can you post your xslt endpoint, and snippets from your xslt template where you use xsl:include.
Mind that if you do not specfify a scheme in xsl:include, then its interpreted as relative to the path from the xstl endpoint.
",20/Apr/12 15:03;davsclaus;I have committed a fix on trunk and 2.9 branch. You are welcome to give the SNAPSHOT a try on your system.,"20/Apr/12 15:27;juliengb;Thanks for the patch, it fixes the problem.

In case you still need the info, the endpoint:
{code:xml}
<to uri=""xslt:xslt/transform.xsl"" />
{code}

the include:
{code:xml}
<xsl:stylesheet [...]>
	<xsl:include href=""included.xsl"" />
[...]
{code}

Both transform.xsl and included.xsl are in the ""/xslt"" path of an OSGi bundle deployed to Fuse ESB/Apache Servicemix.
",20/Apr/12 16:01;davsclaus;Thanks,,,,,,,,,,,,,,,,,,,,
JMX issues on WebSphere,CAMEL-5187,12551223,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,christian.ohr,christian.ohr,17/Apr/12 13:18,18/Apr/12 08:00,13/Mar/19 22:19,18/Apr/12 08:00,2.9.1,,,,,,,,,2.10.0,2.9.3,,,camel-core,,,,,,0,,,,,,,,,"While setting up a Camel web application for WebSphere (7) I encountered two issues

1. Documentation: the Camel JMX docs proposes the following settings for WebSphere:
{code}
<camel:jmxAgent id=""agent"" createConnector=""true"" mbeanObjectDomainName=""org.yourname"" mbeanServerDefaultDomain=""WebSphere""/>
{code}

This registers the beans with the PlatformMbeanServer instead of the WebSphere MBean server. The following setup works better:
{code}
<camel:jmxAgent id=""agent"" createConnector=""false"" mbeanObjectDomainName=""org.yourname"" usePlatformMBeanServer=""false"" mbeanServerDefaultDomain=""WebSphere""/>
{code}

2. For each Camel route, the same Tracer and DefaultErrorHandler MBeans are tried to be registered over and over again. Because WebSphere changes the ObjectNames on registration, 

{{server.isRegistered(name);}} in {{DefaultManagementAgent#registerMBeanWithServer}} always returns false, which causes the MBean to be re-registered, which again cause Exceptions, e.g.

{code}
14:35:48,198 [WebContainer : 4] [] WARN  - DefaultManagementLifecycleStrategy.onErrorHandlerAdd(485) | Could not register error handler builder: ErrorHandlerBuilderRef[CamelDefaultErrorHandlerBuilder] as ErrorHandler MBean.
javax.management.InstanceAlreadyExistsException: org.apache.camel:cell=wdf-lap-0319Node01Cell,name=""DefaultErrorHandlerBuilder(ref:CamelDefaultErrorHandlerBuilder)"",context=wdf-lap-0319/camelContext,type=errorhandlers,node=wdf-lap-0319Node01,process=server1
	at com.sun.jmx.mbeanserver.Repository.addMBean(Repository.java:465)
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.internal_addObject(DefaultMBeanServerInterceptor.java:1496)
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerDynamicMBean(DefaultMBeanServerInterceptor.java:975)
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerObject(DefaultMBeanServerInterceptor.java:929)
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerMBean(DefaultMBeanServerInterceptor.java:324)
	at com.sun.jmx.mbeanserver.JmxMBeanServer.registerMBean(JmxMBeanServer.java:494)
	at com.ibm.ws.management.PlatformMBeanServer.registerMBean(PlatformMBeanServer.java:484)
	at org.apache.camel.management.DefaultManagementAgent.registerMBeanWithServer(DefaultManagementAgent.java:320)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:236)
...
{code}

The web application starts up, but with a lot of exceptions in the log.

Proposal:
Instead of using a Set<ObjectName> for mbeansRegistered, use a Map<ObjectName, ObjectName> where the key is the ""Camel"" ObjectName and the value is the actually deployed ObjectName.

I will provide a patch that illustrates the idea.
",WebSphere 7,,,,,,,,,,,,,,,,,,,,17/Apr/12 21:34;christian.ohr;CAMEL-5178.patch;https://issues.apache.org/jira/secure/attachment/12523027/CAMEL-5178.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-04-18 08:00:13.235,,,no_permission,,Moderate,,,,,,,,,,,236087,,,Wed Apr 18 08:00:13 UTC 2012,,,Patch Available,,,,0|i025jj:,10499,,,,,,,,,18/Apr/12 08:00;davsclaus;Thanks for the patch. I updated the doc as well.,,,,,,,,,,,,,,,,,,,,,,,
Backmerge CAMEL-5018 to the Bindy component for non-required fields,CAMEL-5180,12551105,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,magnuspalmer,magnuspalmer,16/Apr/12 17:51,17/Apr/12 07:57,13/Mar/19 22:19,17/Apr/12 07:57,2.9.1,,,,,,,,,2.9.3,,,,camel-bindy,,,,,,0,,,,,,,,,"The issue, originally reported via CAMEL-5133, is to backmerge the CAMEL-5018 fix into the 2.9.x branch.

I merged revision 1292164 into my local 2.9.x branch that I had updated with two new test cases.
Before merge one test failed, after merge all tests were successfull.
Attaching the updated model and tabtest.
--- 

Revision: 1292164
Author: ningjiang
Date: den 22 februari 2012 08:49:40
Message:
CAMEL-5018 support the set the default value on the field of bindy CVS
----
Modified : /camel/trunk/components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/BindyCsvFactory.java
Modified : /camel/trunk/components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/annotation/DataField.java
Modified : /camel/trunk/components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/csv/BindySimpleCsvUnmarshallTest.java
Modified : /camel/trunk/components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/model/simple/oneclass/Order.java
",,,,,,,,,,,,,,,,,,,,,16/Apr/12 17:58;magnuspalmer;BindyTabSeparatorTest.java;https://issues.apache.org/jira/secure/attachment/12522822/BindyTabSeparatorTest.java,16/Apr/12 17:58;magnuspalmer;PurchaseOrder.java;https://issues.apache.org/jira/secure/attachment/12522821/PurchaseOrder.java,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-04-17 07:57:30.214,,,no_permission,,Unknown,,,,,,,,,,,235969,,,Tue Apr 17 07:57:30 UTC 2012,,,,,,,0|i025hz:,10492,,,,,,,,,16/Apr/12 17:58;magnuspalmer;Think that I haven't configured the right settings in my Eclipse for formatting unfortunately.,"17/Apr/12 07:57;davsclaus;Thanks for the test cases.

I applied them to trunk and the 2.9 branch.
And backported CAMEL-5180 to 2.9 as well.",,,,,,,,,,,,,,,,,,,,,,
Message hasAttachments need to populate initial attachments,CAMEL-5157,12550364,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,10/Apr/12 12:34,11/Apr/12 09:47,13/Mar/19 22:19,11/Apr/12 09:47,2.9.1,,,,,,,,,2.10.0,2.9.2,,,camel-core,,,,,,0,,,,,,,,,"This is needed to ensure we answer the correct.

For example it may report false, before the attachments has been initial populated.
hasAttachments -> false
getAttachments.size -> 2

",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,235229,,,Tue Apr 10 12:43:43 UTC 2012,,,,,,,0|i025d3:,10470,,,,,,,,,"10/Apr/12 12:43;davsclaus;As attachments is seldom used, we could consider @deprecating {{hasAttacments}} as pople can just use {{getAttachments}}, then we can optimize logic in Camel to avoid creating an empty HashMap when copying a Message. We do this for example as defensive copy for the redelivery error handler etc.

",,,,,,,,,,,,,,,,,,,,,,,
If throttler or delayer expression evaluation throws exception then error handler is not used,CAMEL-5163,12550480,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,11/Apr/12 08:10,11/Apr/12 08:47,13/Mar/19 22:19,11/Apr/12 08:47,2.9.1,,,,,,,,,2.10.0,2.9.2,,,camel-core,,,,,,0,,,,,,,,,"If you use the throttler or delayer EIP and the expression evaluated at runtime throws an exception, then that is not caught and handled on the exchange, causing the error handler not to react.

See CAMEL-5126",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,235344,,,2012-04-11 08:10:54.0,,,,,,,0|i025e7:,10475,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
OnException - Handler or Continued predicate is invoked twice per exception,CAMEL-5162,12550474,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,11/Apr/12 06:23,11/Apr/12 07:16,13/Mar/19 22:19,11/Apr/12 07:16,2.9.1,,,,,,,,,2.10.0,2.9.2,,,camel-core,,,,,,0,,,,,,,,,"See CAMEL-5139

When using handled(predicate) or continued(predicate) those is evaluated twice per exception. We should only do this once, which is what the end user would normally except.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,235338,,,2012-04-11 06:23:40.0,,,,,,,0|i025dz:,10474,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Simple language - OGNL - Invoking explicit method with no parameters should not cause ambiguous exception for overloaded methods,CAMEL-5153,12550314,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,10/Apr/12 05:08,11/Apr/12 04:56,13/Mar/19 22:19,11/Apr/12 04:56,2.9.1,,,,,,,,,2.10.0,2.9.2,,,camel-core,,,,,,0,,,,,,,,,"If you want to invoke a method on a bean which is overloaded, such as a String with toUpperCase having
- toUpperCase()
- toUpperCase(Locale)

Then if you specify this in a simple ognl expression as follows
{code}
${body.toUpperCase()}
{code}

Then Camel bean component should pick the no-parameter method as specified.
",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,235179,,,2012-04-10 05:08:45.0,,,,,,,0|i025cf:,10467,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
simple predicate fails to introspect the exception in an onException clause using onWhen,CAMEL-4513,12525682,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,thomasgueze,thomasgueze,04/Oct/11 15:04,10/Apr/12 11:56,13/Mar/19 22:19,23/Oct/11 14:23,,,,,,,,,,2.8.3,2.9.0,,,camel-core,,,,,,0,,,,,,,,,"The bug occured in the 2.6.0 version of Camel I'm using. I haven't test it against the latest version but I've checked the sources and it doesn't seem to have change since.

Given a camel route, with a onException clause like this :

{code}
this.onException(MyException.class)
    .onWhen(simple(""${exception.myExceptionInfo.aValue} == true""))
    ...
{code}

MyException is a customed exception like this :

{code:title=MyException.java}
public class MyException extends Exception {
   ....
   public MyExceptionInfo getMyExceptionInfo() {
     ...
   }
}
{code}

What I've observed is that when BeanExpression.OgnlInvokeProcessor.process iterate through the methods to calls, it does :
{code}
                // only invoke if we have a method name to use to invoke
                if (methodName != null) {
                    InvokeProcessor invoke = new InvokeProcessor(holder, methodName);
                    invoke.process(resultExchange);

                    // check for exception and rethrow if we failed
                    if (resultExchange.getException() != null) {
                        throw new RuntimeBeanExpressionException(exchange, beanName, methodName, resultExchange.getException());
                    }

                    result = invoke.getResult();
                }
{code}

It successfully invoke the method : invoke.process(resultExchange);
But it checks for exception in the exchange. Since we are in an exception clause, there is an actual exception (thrown by the application, but unrelated with the expression language search) and it fails

There is a simple workaround for that : writing his own predicate class to test wanted conditions",,,,,,,,,,,,,,CAMEL-5156,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-10-23 14:23:54.995,,,no_permission,,Unknown,,,,,,,,,,,44381,,,Sun Oct 23 14:23:54 UTC 2011,,,,,,,0|i021en:,9829,,,,,,,,,23/Oct/11 14:23;davsclaus;Thanks for reporting.,,,,,,,,,,,,,,,,,,,,,,,
Simple language - OGNL - Invoking explicit method with no parameters should not cause ambiguous exception for overloaded methods,CAMEL-5154,12550315,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,10/Apr/12 05:08,10/Apr/12 06:07,13/Mar/19 22:19,10/Apr/12 06:07,2.9.1,,,,,,,,,2.10.0,2.9.2,,,camel-core,,,,,,0,,,,,,,,,"If you want to invoke a method on a bean which is overloaded, such as a String with toUpperCase having
- toUpperCase()
- toUpperCase(Locale)

Then if you specify this in a simple ognl expression as follows
{code}
${body.toUpperCase()}
{code}

Then Camel bean component should pick the no-parameter method as specified.
",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,235180,,,2012-04-10 05:08:45.0,,,,,,,0|i025c7:,10466,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NettyProducer creating new connection on every message,CAMEL-4556,12527524,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,maccamlc,maccamlc,18/Oct/11 00:49,08/Apr/12 12:55,13/Mar/19 22:19,08/Apr/12 12:55,2.8.1,,,,,,,,,2.10.0,2.9.2,,,camel-netty,,,,,,0,,,,,,,,,"Using a NettyProducer without the disconnect=true configuration is causing the route to block after 10 messages on the to(""netty://tcp...."") call.

It appears that a new socket connection is created for every message, and then after 10 connections no new connection is allowed (must be a default thread pool limit?).

Using the disconnect=true option fixes the problem as a socket is connected, message sent, then disconnected. But this does not seem viable for implementations where that overhead is undesirable or where more than one response is expected on a channel.

--

This is a small Unit Test that shows the problem (http://camel.465427.n5.nabble.com/Camel-Netty-Producer-creating-new-connection-on-every-message-td4844805.html#none) 



package netty; 

import java.util.Arrays; 
import java.util.Collection; 
import java.util.concurrent.TimeUnit; 
import java.util.concurrent.atomic.AtomicBoolean; 
import java.util.concurrent.atomic.AtomicInteger; 

import junit.framework.TestCase; 

import org.apache.camel.CamelContext; 
import org.apache.camel.Exchange; 
import org.apache.camel.ExchangePattern; 
import org.apache.camel.Processor; 
import org.apache.camel.builder.RouteBuilder; 
import org.apache.camel.impl.DefaultCamelContext; 
import org.junit.Before; 
import org.junit.BeforeClass; 
import org.junit.Test; 
import org.junit.runner.RunWith; 
import org.junit.runners.Parameterized; 
import org.junit.runners.Parameterized.Parameters; 
import org.slf4j.Logger; 
import org.slf4j.LoggerFactory; 

@RunWith(Parameterized.class) 
public class NettyTest extends TestCase 
{ 
    private final static Logger logger = LoggerFactory.getLogger(NettyTest.class); 
    private final static CamelContext serverContext = new DefaultCamelContext(); 

    private final CamelContext clientContext = new DefaultCamelContext(); 
    private final AtomicInteger responseCounter = new AtomicInteger(0); 
    private final AtomicBoolean passedTen = new AtomicBoolean(false); 

    private Boolean disconnectClient; 

    public NettyTest(Boolean disconnectClient) 
    { 
        this.disconnectClient = disconnectClient; 
    } 

    @Parameters 
    public static Collection<Object[]> configs() 
    { 
        return Arrays.asList(new Object[][] { { true }, { false } }); 
    } 

    @BeforeClass 
    public static void createServer() throws Exception 
    { 
        serverContext.addRoutes(new RouteBuilder() 
        { 
            @Override 
            public void configure() throws Exception 
            { 
                from(""netty:tcp://localhost:9000?sync=true&disconnectOnNoReply=false&allowDefaultCodec=true&tcpNoDelay=true&reuseAddress=true&keepAlive=false"") 
                        .setExchangePattern(ExchangePattern.InOut) 
                        .process(new Processor() { 

                            @Override 
                            public void process(Exchange exchange) throws Exception 
                            { 
                                Object body = exchange.getIn().getBody(); 
                                logger.info(""Request received : Value = {}"", body); 
                            } 
                            
                        }) 
                        .transform(constant(3)).stop(); 
            } 
        }); 

        serverContext.start(); 
    } 

    @Before 
    public void createClient() throws Exception 
    { 
        clientContext.addRoutes(new RouteBuilder() 
        { 
            @Override 
            public void configure() throws Exception 
            { 
                // Generate an Echo message and ensure a Response is sent 
                from(""timer://echoTimer?delay=1s&fixedRate=true&period=1s"") 
                        .setExchangePattern(ExchangePattern.InOut) 
                        .transform() 
                        .constant(2) 
                        .to(ExchangePattern.InOut, ""netty:tcp://localhost:9000?allowDefaultCodec=true&tcpNoDelay=true&reuseAddress=true&keepAlive=false&sync=true&disconnect="" + disconnectClient.toString()) 
                        .process(new Processor() 
                        { 
                            @Override 
                            public void process(Exchange exchange) throws Exception 
                            { 
                                Object body = exchange.getIn().getBody(); 
                                logger.info(""Response number {} : Value = {}"", 
                                        responseCounter.incrementAndGet(), body); 

                                if (responseCounter.get() > 10) { 
                                    passedTen.set(true); 
                                } 
                            } 

                        }).stop(); 
            } 
        }); 
    } 

    @Test 
    public void test() throws Exception 
    { 
        clientContext.getShutdownStrategy().setTimeout(1); 

        clientContext.start(); 

        logger.info(""Disconnect = {}"", this.disconnectClient); 

        Thread.sleep(TimeUnit.SECONDS.toMillis(15)); 

        clientContext.stop(); 

        assertTrue(""More than 10 responses have been received"", passedTen.get()); 
    } 
} ",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-04-08 12:48:40.021,,,no_permission,,Unknown,,,,,,,,,,,88722,,,Sun Apr 08 12:48:40 UTC 2012,,,,,,,0|i021o7:,9872,,,,,,,,,"08/Apr/12 12:48;davsclaus;This is now working on trunk where the connection will be re-used.

There is a slight API change, but I think it may be worthwhile to backport that to 2.9 branch. It only affects people who develop custom pipeline factories which should only be a few use-cases.",,,,,,,,,,,,,,,,,,,,,,,
"org.apache.camel.util.concurrent.ExecutorServiceHelper.getThreadName(String, String) method throws IllegalArgumentException when name parameter contains '$', ""${"" or '}'",CAMEL-4904,12538560,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,saucier,saucier,16/Jan/12 19:29,05/Apr/12 17:10,13/Mar/19 22:19,19/Jan/12 05:46,2.8.3,2.9.0,,,,,,,,2.8.4,2.9.1,,,camel-core,,,,,,0,,,,,,,,,"When the ""name"" parameter contains a '$', ""${"" or '}' substring, the getThreadName method will throw an erroneous IllegalArgumentException.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-01-17 06:26:40.523,,,no_permission,,Novice,,,,,,,,,,,224064,,,Thu Apr 05 17:10:18 UTC 2012,,,,,,,0|i023sn:,10216,,,,,,,,,"17/Jan/12 06:26;davsclaus;Thanks for reporting. I fixed that on trunk yesterday with CAMEL-4903.
Will have to manually backport a fix, for the older branches as the trunk changed. Basically you need to quote the names, so the replace works.","17/Jan/12 06:28;davsclaus;Stephen if you wish to work on a patch, then you can take a look at this commit
http://svn.apache.org/viewvc?rev=1232013&view=rev

Notice the quote replacement code.",17/Jan/12 08:21;bvahdat;Claus not that much important at all but I commented a svn-typo by CAMEL-4903 ,"17/Jan/12 13:10;davsclaus;Babak

In due time you will be able to make the commit log changes yourself :)

Its not really that important, and just risk something odd **** up with svn/git / syncing and whatnot.
So I would just leave it as is.",17/Jan/12 13:19;bvahdat;fair enough :-),19/Jan/12 05:46;davsclaus;Fixed on 2.8 branch as well.,"04/Apr/12 23:47;saucier;I am confused -- the bug details indicate that this fix should be present in 2.9.1 and 2.8.4, but as far as I can tell, it isn't in either. 

I am looking at
https://svn.apache.org/repos/asf/camel/tags/camel-2.8.4/camel-core/src/main/java/org/apache/camel/util/concurrent/ExecutorServiceHelper.java
and
https://svn.apache.org/repos/asf/camel/tags/camel-2.9.1/camel-core/src/main/java/org/apache/camel/util/concurrent/ThreadHelper.java

What is in trunk seems okay:
https://svn.apache.org/repos/asf/camel/trunk/camel-core/src/main/java/org/apache/camel/util/concurrent/ThreadHelper.java

Am I missing something? Testing with 2.9.1, my bug still exists.","05/Apr/12 06:52;davsclaus;
The fix works fine as we use this quote the matcher before using
{code}

    // must quote the names to have it work as literal replacement
        shortName = Matcher.quoteReplacement(shortName);
        longName = Matcher.quoteReplacement(longName);
{code}

However note that the syntax in Camel 2.10 has changed to use # instead of $ as tokens. This avoids any confusions with property placeholders, simple language etc. The 2.9 and older releases uses the $ to not break compatibility.","05/Apr/12 16:01;saucier;Could you please check again the links I posted previously? The code that is included in 2.8.4 and 2.9.1 does not quote the replacement, and still exhibits the issue as it is still checking after the replacement that that string does not contain a '}' character which my name does. This is working in trunk due to the use of a regular expression (and the fact that '#' is being used as the delimiter for placeholders, which are not contained in my particular names).",05/Apr/12 17:10;davsclaus;Then I suggest to not use { } in your thread names. Its very unusual.,,,,,,,,,,,,,,
Timer component does not suspend,CAMEL-5137,12549189,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,gordonkl,gordonkl,02/Apr/12 17:04,05/Apr/12 17:06,13/Mar/19 22:19,05/Apr/12 17:06,2.9.1,,,,,,,,,2.10.0,2.9.2,,,camel-core,,,,,,0,,,,,,,,,A route which begins with a Timer consumer does not suspend the consumer when the route is suspended.,Windows XP and RedHat Linux,,,,,,,,,,,,,,,,,,,,05/Apr/12 15:35;gordonkl;TimerTest.java;https://issues.apache.org/jira/secure/attachment/12521514/TimerTest.java,05/Apr/12 15:35;gordonkl;TimerTestOutput.txt;https://issues.apache.org/jira/secure/attachment/12521515/TimerTestOutput.txt,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-04-05 09:07:12.237,,,no_permission,,Unknown,,,,,,,,,,,234180,,,Thu Apr 05 17:06:43 UTC 2012,,,,,,,0|i0258n:,10450,,,,,,,,,"05/Apr/12 09:07;davsclaus;Can you provide more details?

The timer consumer will cancel the task, when the consumer is suspended or stopped
and therefore the timer tasks stops firing. This is the expected behavior.
","05/Apr/12 15:35;gordonkl;Here is a simple test case which has a route started by a timer every second and just logs a message.  After running a time or two, we suspend the CamelContext and wait as we observe the timer continues to fire and the route executes despite being suspended.","05/Apr/12 17:01;davsclaus;Ah thanks, we needed some logic in TimerConsumer to detect the suspend/resume.",05/Apr/12 17:06;davsclaus;Thanks for reporting.,,,,,,,,,,,,,,,,,,,,
bean component - @Handler should take precedence in a bean that implements Predicate,CAMEL-5140,12549663,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,05/Apr/12 10:55,05/Apr/12 11:37,13/Mar/19 22:19,05/Apr/12 11:37,2.9.1,,,,,,,,,2.10.0,2.9.2,,,camel-core,,,,,,0,,,,,,,,,"If you use a bean in a Camel route, and have not specified the method name to invoke. Then Camel has to scan for suitable methods to use. And for that we have the @Handler annotation which should take precedence in this process. However if the bean implements Predicate, or Processor, then Camel will use that. However the @Handler should be used instead, as this is what the end-user expects. And also what we tell in the docs.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,234654,,,2012-04-05 10:55:26.0,,,,,,,0|i0259b:,10453,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Using shareUnitOfWork with DeadLetterChannel sending message to a route doesnt work as expected,CAMEL-5110,12547443,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,21/Mar/12 19:15,21/Mar/12 20:30,13/Mar/19 22:19,21/Mar/12 20:30,2.9.0,,,,,,,,,2.10.0,2.9.2,,,camel-core,,,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Error-handling-issue-for-splitter-with-sharedUnitOfWork-and-stopOnException-td5550093.html

The issue is that the when the message is handled by the dead letter channel, then some state from the sub unit of work, should be cleared, to ensure the exchange can be processed by the dead letter channel. This becomes only an issue when the dead letter endpoint is another route.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,232601,,,2012-03-21 19:15:33.0,,,,,,,0|i0252f:,10422,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Archetype: camel-archetype-web retains loaded classes after redeployment, causing permgen space to fill up.",CAMEL-5086,12546425,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,drichelson,drichelson,14/Mar/12 16:53,20/Mar/12 06:39,13/Mar/19 22:19,20/Mar/12 05:54,2.9.1,,,,,,,,,2.10.0,2.9.2,,,camel-spring,,,,,,0,leak,memory,memory_leak,permgen,spring,tomcat,war,webapp,"Steps to reproduce:
1. Create a new camel web project (based on instructions here: http://camel.apache.org/camel-maven-archetypes.html ):

mvn archetype:generate -DarchetypeGroupId=org.apache.camel.archetypes -DarchetypeArtifactId=camel-archetype-web -DarchetypeVersion=2.9.1 -DarchetypeRepository=https://repository.apache.org/content/groups/snapshots-group

2. Build the new project:
mvn clean install

3. Copy .war file in target/ to tomcat's webapps directory.
4. Reload webapp (easiest way is to touch the .war file)
5. If you are using a profiler, you will see that the permgen space increases on every reload (the previous webapp's classes don't get unloaded)
6. Eventually the webapp container will crash with a permgen out of memory error.

Workaround: restarting the webapp container will reset the permgen space.
Removing the Spring nature of the project makes this go away, so it could be a problem with Spring itself.

This also happens when using Jetty7, so I don't think it is a problem with the container.

","Apache Tomcat 7.0.26
jdk 1.6.0_26
CentOS:
Linux version 2.6.18-238.el5",,,,,,,,,,,,,,,,,,,,20/Mar/12 05:50;davsclaus;tomcat.png;https://issues.apache.org/jira/secure/attachment/12519026/tomcat.png,20/Mar/12 05:52;davsclaus;tomcat2.png;https://issues.apache.org/jira/secure/attachment/12519027/tomcat2.png,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-03-20 05:41:36.607,,,no_permission,,Unknown,,,,,,,,,,,231583,,,Tue Mar 20 06:39:02 UTC 2012,,,,,,,0|i024x3:,10398,,,,,,,,,20/Mar/12 05:41;davsclaus;I suggest to attach jvisualvm to the tomcat container and try to see if you can spot any leaks?,"20/Mar/12 05:49;davsclaus;We have fixed a number of leaks on trunk. I suggest to try the upcoming 2.10 release. Or the 2.9.2 release.

I just tried with 2.10 and could not detect any leaks. I touched the web app 5 times
{code}
davsclaus:/opt/apache-tomcat-7.0.26/webapps$ touch bar-1.0-SNAPSHOT.war 
davsclaus:/opt/apache-tomcat-7.0.26/webapps$ touch bar-1.0-SNAPSHOT.war 
davsclaus:/opt/apache-tomcat-7.0.26/webapps$ touch bar-1.0-SNAPSHOT.war 
davsclaus:/opt/apache-tomcat-7.0.26/webapps$ touch bar-1.0-SNAPSHOT.war 
davsclaus:/opt/apache-tomcat-7.0.26/webapps$ touch bar-1.0-SNAPSHOT.war 
{code}

And memory usage was low. When performing a GC I get down to 7-8mb.","20/Mar/12 05:53;davsclaus;And my permgen, was not leaking, and getting down to 31mb - see tomcat2",20/Mar/12 06:03;davsclaus;I am trying with the 2.9-SNAPSHOT to see how it goes there.,20/Mar/12 06:39;davsclaus;Looks fine with the 2.9-SNAPSHOT (to be 2.9.2 release).,,,,,,,,,,,,,,,,,,,
npe in camel 2.9.1 validator,CAMEL-5063,12545354,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,preben,preben,06/Mar/12 15:27,19/Mar/12 19:04,13/Mar/19 22:19,18/Mar/12 11:27,2.9.1,,,,,,,,,2.10.0,2.9.2,,,camel-core,,,,,,1,,,,,,,,,"validator component seems broken in 2.9.1. Gives you a npe when loading xsd from classpath during unittesting.
See http://camel.465427.n5.nabble.com/npe-in-camel-2-9-1-validator-tc5540894.html
prefixing with classpath eg. <to uri=""validator:classpath:BroadcastMonitor.xsd""  /> doesn't help.","windows xp, jdk 6",,,,,,,,,,,,,,,,,,,,08/Mar/12 07:33;preben;validatortest.zip;https://issues.apache.org/jira/secure/attachment/12517536/validatortest.zip,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-03-19 13:09:39.31,,,no_permission,,Unknown,,,,,,,,,,,230540,,,Mon Mar 19 19:04:30 UTC 2012,,,,,,,0|i024rz:,10375,,,,,,,,,"08/Mar/12 07:32;preben;Did some investigation and found the course of the npe. The XSD used for validation is an old legacy xsd that imported a namespace without any ref. to a xsd. I have attached a testcase that shows the problem.
The validator component should handle this without throwing a npe, and warn about the inconsistency.",08/Mar/12 07:33;preben;validator testcase,"19/Mar/12 13:09;bvahdat;@Claus

There was a tiny typo by the XSD being referenced inside ValidatorIllegalImportTest: BroadCastMonitor.xsd instead of BroadcastMonitor.xsd making tests pass on Windows (case-insensitive) but not on CI-Server (Ubuntu), which is now fixed:

http://svn.apache.org/viewvc?view=revision&revision=1302393
http://svn.apache.org/viewvc?view=revision&revision=1302405

I should confess I was really surprised to see you using Windows!!!
","19/Mar/12 13:14;davsclaus;Yeah I am using Windows Vista, with a OS-X look and feel.",19/Mar/12 19:04;preben;doh - my bad.,,,,,,,,,,,,,,,,,,,
Incorrect feature definition for camel-fop,CAMEL-5097,12546711,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,hadrian,hadrian,hadrian,16/Mar/12 02:47,16/Mar/12 02:49,13/Mar/19 22:19,16/Mar/12 02:49,2.10.0,,,,,,,,,2.10.0,,,,,,,,,,0,,,,,,,,,,"Missing dependency in feature causes ""no export found"" error during feature validation:

{code}
[WARNING] Failed to validate feature camel-fop
[WARNING] No export found to match org.apache.avalon.framework.configuration (imported by mvn:org.apache.camel/camel-fop/2.10-SNAPSHOT)
{code}

The cause is a dependency on the non-bundle avalon jars.",,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Moderate,,,,,,,,,,,231869,,,2012-03-16 02:47:23.0,,,,,,,0|i024zj:,10409,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
camel-jt400 - Parameter length when doing Program Call issue,CAMEL-5080,12546272,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,janacleto,janacleto,13/Mar/12 18:14,15/Mar/12 12:44,13/Mar/19 22:19,15/Mar/12 12:44,2.8.0,,,,,,,,,2.10.0,2.8.5,2.9.2,,,,,,,,0,camel-jt400,components,ProgramCall,,,,,,"When the length of each parameter of a program.PGM is greater than the length of his values, the parameters are setted incorrectly.

Example:

Input of program.pgm:
param1 -> A5 (alphanumeric with length 5) 
param2 -> A5 (alphanumeric with length 5) 

When the String array is {""123"", ""456""} the values are setted on each parameter as:
param1 = 12345
param2 = 6

",,,,,,,,,,,,,,,,,,,,,15/Mar/12 10:55;janacleto;camel-jt400.patch;https://issues.apache.org/jira/secure/attachment/12518445/camel-jt400.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-03-15 10:43:44.358,,,no_permission,,Novice,,,,,,,,,,,231430,,,Thu Mar 15 12:44:55 UTC 2012,,,Patch Available,,,,0|i024vr:,10392,,,,,,,,,13/Mar/12 18:15;janacleto;Here the patch to correct the issue.,"15/Mar/12 10:43;davsclaus;Joao, can you re-attach your patch. And make sure to mark [x] in grant license to ASF. Otherwise we cannot accept your patch.",15/Mar/12 10:55;janacleto;Here is the attach with grant license to ASF. Thanks Claus.,15/Mar/12 12:44;davsclaus;Thanks for the patch.,,,,,,,,,,,,,,,,,,,,
"Request with Content-Type= application/x-www-form-urlencoded  throws ""Cannot read request parameters due Invalid parameter, expected to be a pair but was "" when body is empty.",CAMEL-4871,12537602,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,amit1000,amit1000,06/Jan/12 21:56,12/Mar/12 20:26,13/Mar/19 22:19,28/Feb/12 16:05,2.8.0,,,,,,,,,2.10.0,2.9.1,,,camel-http,,,,,,0,,,,,,,,,"ISSUE
-----------
When CAMEL Servlet component receiving request with Content-Type= application/x-www-form-urlencoded. as below it throws Cannot read request parameters due Invalid parameter, expected to be a pair but was "" when body is empty.

Request
------------
<html>
    </head>

    <body>
        <form method=""post"" action=""http://test/assertionConsumer/1.0"">
          <div>
            <input type=""hidden"" name=""ID"" value=""fim page"" />
            <input type=""hidden"" name=""RelayState"" value=""http://dev.ecosys.com?count=id-afc417c792b413bd0208e2f7454fd030"" />
            <input type=""hidden"" name=""SAMLResponse"" value=""PHNhbWxwOlJlc3="" />
          </div>
        </form>
        <span id=""user_msg""></span>
        <script type=""text/javascript"">sso();</script>
    </body>
</html>

RESOLUTION
-------------
Added defensive check, body is not null and not blank, to avoid Invalid parameter exception. I've updated org.apache.camel.component.http.DefaultHttpBinding class for that.


// Push POST form params into the headers to retain compatibility
			// with DefaultHttpBinding
			String body = message.getBody(String.class);
			//Added defensive check, body is not null and not blank, to avoid Invalid parameter exception. ( My changes)
			if (body != null && !body.equals("""")) {
				for (String param : body.split(""&"")) {
					String[] pair = param.split(""="", 2);
					if (pair.length == 2) {
						String name = URLDecoder.decode(pair[0], charset);
						String value = URLDecoder.decode(pair[1], charset);
						if (headerFilterStrategy != null
								&& !headerFilterStrategy
										.applyFilterToExternalHeaders(name,
												value, message.getExchange())) {
							HttpHelper.appendHeader(headers, name, value);
						}
					} else {
						throw new IllegalArgumentException(
								""Invalid parameter, expected to be a pair but was ""
										+ param);
					}
				}
			}

",,,,,,,,,,,,,,,,,,,,,12/Mar/12 20:20;amit1000;DefaultHttpBinding.java;https://issues.apache.org/jira/secure/attachment/12518075/DefaultHttpBinding.java,06/Jan/12 22:08;amit1000;DefaultHttpBinding.java;https://issues.apache.org/jira/secure/attachment/12509723/DefaultHttpBinding.java,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-02-24 15:52:45.009,,,no_permission,,Unknown,,,,,,,,,,,223108,,,Mon Mar 12 20:20:15 UTC 2012,,,,,,,0|i023lr:,10185,,,,,,,,,11/Jan/12 20:49;amit1000;We need new release to resolve this issue.,"24/Feb/12 15:52;davsclaus;Amit, can you re-attach the file attachments and mark [x] in grant license to Apache. Otherwise we cannot use your work.","28/Feb/12 16:05;davsclaus;I fixed this using not empty check, on the camel-http and camel-http4 components.",12/Mar/12 20:20;amit1000;Please find the re-attached file with mark[x] in grant license to Apache. Thanks for you help!!! ,,,,,,,,,,,,,,,,,,,,
"Removing a route with route scoped error handler, should remove the error handler from JMX",CAMEL-5041,12544161,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,26/Feb/12 09:03,02/Mar/12 13:26,13/Mar/19 22:19,02/Mar/12 13:26,,,,,,,,,,2.10.0,,,,camel-core,jmx,,,,,0,,,,,,,,,"A route scoped error handler should be removed if the route is removed from JMX.
Context scoped error handlers, should be kept.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,229398,,,Fri Mar 02 13:26:23 UTC 2012,,,,,,,0|i024n3:,10353,,,,,,,,,"28/Feb/12 12:59;davsclaus;I post on @dev about removing the error handler mbeans from JMX as it would be easier than trying to keep properly track of which error handler is context vs route scoped. And which may be used by other routes, and whatnot. 

And all together the error handler mbeans does not bring much value, and people have not talked about them on the @user. So they are most likely not in use as much.",28/Feb/12 13:00;davsclaus;http://camel.465427.n5.nabble.com/DISCSS-Remove-error-handler-mbeans-from-JMX-tp5521743p5521743.html,02/Mar/12 13:26;davsclaus;The route scoped error handlers is now removed from JMX when removing a route.,,,,,,,,,,,,,,,,,,,,,
Name Part of the Sender & the Recipient Email Addresses are not encoded with the Exchange charset,CAMEL-3985,12507541,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,karthz,karthz,17/May/11 23:09,29/Feb/12 14:15,13/Mar/19 22:19,29/Feb/12 14:15,2.7.1,,,,,,,,,2.10.0,2.9.1,,,camel-mail,,,,,,0,camel-mail,charset,encoding,,,,,,"The name part of an email address can have any character, and it needs to be encoded with the correct charset provided for the exchange. ",,,,,,,,,,,,,,,,,,,,,28/Feb/12 20:08;michal.warecki;MailBinding.diff;https://issues.apache.org/jira/secure/attachment/12516383/MailBinding.diff,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-02-28 20:08:21.978,,,no_permission,,Novice,,,,,,,,,,,76189,,,Wed Feb 29 14:15:37 UTC 2012,,,,,,,0|i01y53:,9300,,,,,,,,,28/Feb/12 20:08;michal.warecki;I attach patch for that bug. Could someone check this? :-),"29/Feb/12 14:15;davsclaus;Michael, thanks for the patch",,,,,,,,,,,,,,,,,,,,,,
Memory leak in TimerListener if JMX enabled,CAMEL-5049,12544421,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,28/Feb/12 13:29,28/Feb/12 13:34,13/Mar/19 22:19,28/Feb/12 13:34,2.9.0,,,,,,,,,2.10.0,2.9.1,,,camel-core,,,,,,0,,,,,,,,,"If adding and removing a lot of routes, and you have JMX enabled with load statistics, then it may leak memory, as the route listener is not properly removed when the route is removed, due invalid equals/hashCode.

",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,229658,,,2012-02-28 13:29:24.0,,,,,,,0|i024ov:,10361,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect caching type converter misses for NaN,CAMEL-4959,12540504,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,ciand7,ciand7,31/Jan/12 07:06,28/Feb/12 11:43,13/Mar/19 22:19,23/Feb/12 12:47,2.8.3,,,,,,,,,2.10.0,2.8.5,2.9.1,,camel-core,,,,,,0,,,,,,,,,"When converting Double or Float with value NaN, org.apache.camel.converter.ObjectConverter returns ""null"". But org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(Class, Exchange, Object) interpret this ""null"" as ""suitable conversion not found"" and cache misses. This lead to completely forgetting of conversion for given types.
For example, when conversing Double to Long, all works until Double is NaN. After that, conversion for ""Double-to-Long"" marked as misses. And  camel stop do any conversion for Double-to-Long until restart.

Possible solution is to modify ObjectConverter`s methods to return ""Void.TYPE"" instead of ""null"" for NaN.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-01-31 08:23:14.245,,,no_permission,,Novice,,,,,,,,,,,225917,,,Tue Feb 28 11:43:59 UTC 2012,,,,,,,0|i0244n:,10270,,,,,,,,,31/Jan/12 08:23;davsclaus;That is correct. Andrey can you provide a patch with unit test that test this fix?,"31/Jan/12 09:43;ciand7;Hi, Claus. 
Yes, I can try to make patch with unit test for ObjectConverter.

But suggested solution - return Void.TYPE from toXXXX() methods of ObjectConverter - is not correct :) ObjectConverter is converter, so that methods must declare return type correctly - Short, Long, Integer. It is not possible to return Void from toXXXX()...

May be it is correct to return 0 for NaN? 
At least JDK do it:
==
Double d = Double.NaN;
Float f = Float.NaN;
System.out.println(d.longValue() + "", "" + f.shortValue());
==
will print 
""0, 0""

","02/Feb/12 10:00;davsclaus;Yeah lets return 0 for the primitive types.

Patches is welcome, with unit tests.","26/Feb/12 13:01;bvahdat;I did ""Refactor to Method"" for the case if the to be converted value is NaN:

http://svn.apache.org/viewvc?view=revision&revision=1293828","27/Feb/12 20:31;bvahdat;IMHO the changes introduced by of this ticket causes regression failure. To avoid null values being misinterpreted as cache misses we do now convert e.g.

Float.NaN => (Byte) 0

which was not the case before.

Why not just simply *not* mark the conversion as miss *if* the conversion result is (Float.NaN / Double.NaN  ==> null). That's do *not* add any entry for such conversion results into the misses cache and revert back ObjectConverter to what it was before. Does this make sense to you?

And I simply don't get why the misses cache is a ConcurrentMap:

{code} 
protected final ConcurrentMap<TypeMapping, TypeMapping> misses = new ConcurrentHashMap<TypeMapping, TypeMapping>();
{code} 

To my understanding

{code} 
protected final List<TypeMapping> misses = new CopyOnWriteArrayList<TypeMapping>();
{code} 

would be just fine! Why do we need a Map to memorize the cache misses? Where we then do things like

{code} 
misses.put(key, key);
{code}

On it which is not really intuitive while reading the code, is this maybe because ideally we want to do lookup by the misses cache (misses.containsKey()) in O(1) instead of O(N)? 

See also:

http://camel.465427.n5.nabble.com/ObjectConverter-problem-td5517376.html","28/Feb/12 11:36;davsclaus;Yeah I have corrected the coverters to deal with NaN.

And yes we need to lookup fast in type converter registry as its used a lot in Camel, and it should be as fast as possible, as it can become a bottleneck.","28/Feb/12 11:43;bvahdat;Yeah dealing with NaN's directly in BaseTypeConverterRegistry itself was what I was looking for, Thanks!",,,,,,,,,,,,,,,,,
Memory leak in SedaComponent if adding and removing a lot of seda endpoints with different queue names,CAMEL-5048,12544376,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,28/Feb/12 05:40,28/Feb/12 09:20,13/Mar/19 22:19,28/Feb/12 09:20,2.9.0,,,,,,,,,2.10.0,2.9.1,,,camel-core,,,,,,0,,,,,,,,,"If you add and remove a lot of seda endpoints with different queue names, then the seda component may keep references to non used queues.
",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,229613,,,2012-02-28 05:40:43.0,,,,,,,0|i024on:,10360,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Memory leak when adding/removing a lot of routes with JMX enabled related to Tracer,CAMEL-5046,12544226,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,27/Feb/12 07:11,27/Feb/12 12:33,13/Mar/19 22:19,27/Feb/12 12:33,2.9.0,,,,,,,,,2.10.0,2.9.1,,,camel-core,jmx,,,,,0,,,,,,,,,"Related to CAMEL-5045 but this ticket is about CAMEL-4500 which introduced a leak on the 2.9 branch on, in relation to tracer.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,229463,,,Mon Feb 27 12:33:37 UTC 2012,,,,,,,0|i024o7:,10358,,,,,,,,,27/Feb/12 12:33;davsclaus;There was only a very minor leak.,,,,,,,,,,,,,,,,,,,,,,,
camel-http does not send header values that are empty strings,CAMEL-4984,12541384,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,falkmarcus,falkmarcus,06/Feb/12 09:32,27/Feb/12 09:00,13/Mar/19 22:19,24/Feb/12 17:11,2.9.0,,,,,,,,,2.10.0,2.9.1,,,camel-http,,,,,,0,,,,,,,,,"HttpProducer does not send HTTP header if header value from camel was an empty string.

This is because ObjectHelper.createIterator(headerValue, null) will produce an empty iteration if headerValue is an empty string!",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-02-24 16:18:57.226,,,no_permission,,Unknown,,,,,,,,,,,226672,,,Mon Feb 27 09:00:19 UTC 2012,,,,,,,0|i024a7:,10295,,,,,,,,,06/Feb/12 10:11;falkmarcus;There is a workarround: you can pass a list with an empty string as header value and than camel-http will send this header,24/Feb/12 16:18;davsclaus;I do not know when such a use-case is needed to send empty values as HTTP headers. When do you do that?,"27/Feb/12 08:48;falkmarcus;Actually, the backend service which we are calling via HTTP requires that all required headers are set, even if there are no value for it. 

Also to me such a policy seems to be awkward. 

",27/Feb/12 09:00;davsclaus;Well I could possible see a use-case if you want to reset a cache http header or the likes. Anyway its fixed now.,,,,,,,,,,,,,,,,,,,,
"Thread pools should not be enlisted in JMX if part of adding a new route, and JMX is disabled for new routes",CAMEL-5040,12544116,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,25/Feb/12 12:27,25/Feb/12 12:37,13/Mar/19 22:19,25/Feb/12 12:37,,,,,,,,,,2.10.0,2.9.1,,,camel-core,,,,,,0,,,,,,,,,"If you have configured registerNewRoutes=false for jmxAgent, then thread pools created during a route, such as a seda consumer, should not be enlisted in JMX.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,229354,,,2012-02-25 12:27:33.0,,,,,,,0|i024mv:,10352,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Timer endpoint should support multiple consumers ,CAMEL-5038,12543990,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,24/Feb/12 14:03,24/Feb/12 14:37,13/Mar/19 22:19,24/Feb/12 14:37,,,,,,,,,,2.10.0,2.9.1,,,camel-core,,,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Multiple-timers-with-same-name-in-same-context-td5505128.html

Basically you may have 2+ routes with the same timer endpoint, as you want to kick-off 2+ tasks at about the same time. The endpoint should just support multiple consumers by default, to let this happen.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,229228,,,2012-02-24 14:03:56.0,,,,,,,0|i024mf:,10350,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Seda producer should not handover completions if waiting for task to complete,CAMEL-5033,12543820,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,23/Feb/12 08:57,23/Feb/12 09:42,13/Mar/19 22:19,23/Feb/12 09:42,2.8.4,2.9.0,,,,,,,,2.10.0,2.8.5,2.9.1,,camel-core,,,,,,0,,,,,,,,,"See CAMEL-5021 which causes the file consumer to rollback the file to early

So if you link the seda producer to be synchronous by using the wait for task to complete, then the task should not have on completions handed over, as we are waiting for that task to complete, and copy its result back.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,229059,,,2012-02-23 08:57:05.0,,,,,,,0|i024l3:,10344,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JMX statistics problem with some components,CAMEL-5027,12543647,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,salever,salever,22/Feb/12 09:17,22/Feb/12 16:49,13/Mar/19 22:19,22/Feb/12 16:49,2.8.4,,,,,,,,,2.10.0,2.8.5,2.9.1,,camel-core,,,,,,0,,,,,,,,,"Here is the test class:
{noformat}
public class TestStatistics {
 
    public static void main(String[] args) throws Exception {
       DefaultCamelContext context = new DefaultCamelContext();
       context.addRoutes(new RouteBuilder() {
 
           @Override
           public void configure() throws Exception {
              from(""timer:foo?period=5000"").routeId(""timer"").loadBalance()
                     .roundRobin().id(""load_balance_1"").to(""log:one"")
                     .id(""log_one"").to(""log:two"").id(""log_two"").end();
 
           }
       });
       context.start();
       Thread.sleep(500000);
       context.stop();
    }
 
}
{noformat}

The MBean [org.apache.camel/processors/XXX/load_balancer_1/Attributes/ExchangesTotal] property has no value, therefore no statistics information can be accessed. The same problem exists in Intercept,Log.",,,,,,,,,,,,,,,,,,,,,22/Feb/12 09:29;salever;Camel-bug.jpg;https://issues.apache.org/jira/secure/attachment/12515566/Camel-bug.jpg,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-02-22 14:16:24.888,,,no_permission,,Unknown,,,,,,,,,,,228886,,,Wed Feb 22 14:16:24 UTC 2012,,,,,,,0|i024jr:,10338,,,,,,,,,22/Feb/12 09:29;salever;Details,"22/Feb/12 09:38;salever;For detail, refer to http://jira.talendforge.org/browse/TESB-3905","22/Feb/12 14:16;davsclaus;Thanks for reporting and with screenshot.

I have reproduced the issue, the load balancer does not record any stats.",,,,,,,,,,,,,,,,,,,,,
simple without embedded text results in an NPE,CAMEL-5005,12542549,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,achim_nierbeck,achim_nierbeck,14/Feb/12 15:08,15/Feb/12 15:00,13/Mar/19 22:19,15/Feb/12 15:00,2.9.0,,,,,,,,,2.10.0,2.9.1,,,camel-core,,,,,,0,,,,,,,,,"After switching to 2.9 

the following results in a NPE

{code}
<camel:setBody>
	<camel:simple></camel:simple>
</camel:setBody>
{code}

I'm not sure if it is now required to have something in the content of the simple element. 
I used it for setting the body element to an empty string before (worked with 2.8.1)",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-02-15 14:01:12.405,,,no_permission,,Unknown,,,,,,,,,,,227835,,,Wed Feb 15 14:01:12 UTC 2012,,,,,,,0|i024ev:,10316,,,,,,,,,15/Feb/12 14:01;davsclaus;Using <camel:constant/> ought to set an empty string as well.,,,,,,,,,,,,,,,,,,,,,,,
"camel-jms component,  request/reply results in NullPointer when JMSCorrelationID is set to empty string on inbound JMS message. ",CAMEL-5006,12542591,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,hadrian,pgfox,pgfox,14/Feb/12 20:17,15/Feb/12 01:36,13/Mar/19 22:19,15/Feb/12 01:36,2.9.0,,,,,,,,,2.10.0,2.8.5,2.9.1,,camel-jms,,,,,,0,,,,,,,,,"A request/reply invocation results in the following exception when JMSCorrelationID is set to empty String ("""") on the inbound JMS message. 

{code}
[JmsConsumer[myqueue]] DefaultErrorHandler ERROR Failed delivery for exchangeId: ID-myexchange-id. Exhausted after delivery attempt: 1 caught: java.lang.NullPointerException
java.lang.NullPointerException
at java.util.concurrent.ConcurrentHashMap.put(ConcurrentHashMap.java:882)[:1.6.0_30]
at org.apache.camel.util.DefaultTimeoutMap.put(DefaultTimeoutMap.java:99)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.component.jms.reply.CorrelationMap.put(CorrelationMap.java:68)[camel-jms-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.component.jms.reply.TemporaryQueueReplyManager.registerReply(TemporaryQueueReplyManager.java:42)[camel-jms-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.component.jms.JmsProducer$1.createMessage(JmsProducer.java:157)[camel-jms-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.component.jms.JmsConfiguration$CamelJmsTemplate.doSendToDestination(JmsConfiguration.java:199)[camel-jms-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.component.jms.JmsConfiguration$CamelJmsTemplate.access$100(JmsConfiguration.java:142)[camel-jms-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.component.jms.JmsConfiguration$CamelJmsTemplate$1.doInJms(JmsConfiguration.java:156)[camel-jms-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.springframework.jms.core.JmsTemplate.execute(JmsTemplate.java:466)[spring-jms-3.0.5.RELEASE.jar:3.0.5.RELEASE]
at org.apache.camel.component.jms.JmsConfiguration$CamelJmsTemplate.send(JmsConfiguration.java:153)[camel-jms-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.component.jms.JmsProducer.doSend(JmsProducer.java:343)[camel-jms-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.component.jms.JmsProducer.processInOut(JmsProducer.java:163)[camel-jms-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.component.jms.JmsProducer.process(JmsProducer.java:98)[camel-jms-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:114)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:284)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:109)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:69)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.fabric.FabricTraceProcessor.process(FabricTraceProcessor.java:59)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:318)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:209)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:306)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.processor.Pipeline.process(Pipeline.java:116)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.processor.Pipeline.process(Pipeline.java:79)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:139)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:106)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:69)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:104)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:85)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:91)[camel-jms-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:560)[spring-jms-3.0.5.RELEASE.jar:3.0.5.RELEASE]
at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:498)[spring-jms-3.0.5.RELEASE.jar:3.0.5.RELEASE]
at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:467)[spring-jms-3.0.5.RELEASE.jar:3.0.5.RELEASE]
at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:325)[spring-jms-3.0.5.RELEASE.jar:3.0.5.RELEASE]
at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:263)[spring-jms-3.0.5.RELEASE.jar:3.0.5.RELEASE]
at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1058)[spring-jms-3.0.5.RELEASE.jar:3.0.5.RELEASE]
at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1050)[spring-jms-3.0.5.RELEASE.jar:3.0.5.RELEASE]
at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:947)[spring-jms-3.0.5.RELEASE.jar:3.0.5.RELEASE]
at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)[:1.6.0_30]
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)[:1.6.0_30]
at java.lang.Thread.run(Thread.java:662)[:1.6.0_30]

{code}

I have also tested this against Trunk version 1239497 
",,,,,,,,,,,,,,,,,,,,,14/Feb/12 21:38;pgfox;JmsProducer.java.patch;https://issues.apache.org/jira/secure/attachment/12514552/JmsProducer.java.patch,14/Feb/12 21:38;pgfox;JmsRequestReplyCorrelationTest.java;https://issues.apache.org/jira/secure/attachment/12514553/JmsRequestReplyCorrelationTest.java,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-02-14 21:28:15.045,,,no_permission,,Unknown,,,,,,,,,,,227877,,,Wed Feb 15 01:36:57 UTC 2012,,,,,,,0|i024f3:,10317,,,,,,,,,"14/Feb/12 20:24;pgfox;Added another test method to JmsRequestReplyCorrelationTest.java to show the issue. 

Where JMSCorrelationID is set to empty String I would expect the same behavior as if it set to Null. ","14/Feb/12 20:46;pgfox;I have made a simple change in JmsProducer.java.patch which appears to resolve the junit test. Perhaps someone more familiar with the JMSCorrelationID logic could see a better approach?
 ","14/Feb/12 21:28;hadrian;Pat, we cannot include patches if you do not explicitly grant us the license to do so. There is a checkbox for that you need to check when you upload (if you are ok with us including your work). If that was your intention could you please remove the attachments and reattach with the grant option? Thanks.","14/Feb/12 21:38;pgfox;Thanks Hadrain, I have reattached and granted license.","14/Feb/12 21:44;hadrian;Thanks, looks good, testing now.","15/Feb/12 01:36;hadrian;Nice spot, good patch. Thanks Pat for the contribution.",,,,,,,,,,,,,,,,,,
ManagedPerformanceCounterMBean should extend ManagedCounterMBean,CAMEL-4986,12541405,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,bvahdat,eamelink,eamelink,06/Feb/12 13:02,07/Feb/12 16:07,13/Mar/19 22:19,07/Feb/12 16:05,2.9.0,,,,,,,,,2.10.0,2.9.1,,,camel-jmx,,,,,,0,,,,,,,,,"ManagedPerformanceCounterMBean does not extend ManagedCounterMBean, while ManagedPerformanceCounter does extend ManagedCounter.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-02-07 08:46:48.618,,,no_permission,,Novice,,,,,,,,,,,226693,,,Tue Feb 07 16:05:02 UTC 2012,,,,,,,0|i024an:,10297,,,,,,,,,"07/Feb/12 08:46;davsclaus;Babak, you got time to fix this? Seems easy, although running the unit tests on camel-core would be good to ensure the JMX tests still work as expected.","07/Feb/12 16:05;bvahdat;I verified the change by running all camel-core tests where they did all pass on trunk, however on the 2.9.x branch I got one failed test which has nothing to do with this change:

{code}
Failed tests:
  testShutdownGraceful(org.apache.camel.impl.PendingExchangesTwoRouteShutdownGracefulTest): mock://bar Received message count. Expected: <1> but was: <2>

Tests run: 4033, Failures: 1, Errors: 0, Skipped: 0
{code}",,,,,,,,,,,,,,,,,,,,,,
Delay using bean does not work in XML DSL,CAMEL-4947,12540028,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,27/Jan/12 11:48,27/Jan/12 13:19,13/Mar/19 22:19,27/Jan/12 13:19,2.9.0,,,,,,,,,2.10.0,2.8.4,2.9.1,,camel-core,camel-spring,,,,,0,,,,,,,,,"Reported on the user forum
",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-01-27 12:00:51.536,,,no_permission,,Unknown,,,,,,,,,,,225531,,,Fri Jan 27 12:00:51 UTC 2012,,,,,,,0|i0241z:,10258,,,,,,,,,"27/Jan/12 12:00;muellerc;I can confirm this. Yesterday I tried a few different configurations, but it didn't work.

{code:xml}
    <camelContext id=""camel"" xmlns=""http://camel.apache.org/schema/spring"">
        <route>
            <from uri=""direct:start"" />
            <delay>
            	<method bean=""delayer"" method=""sendAtTime""/> 
            	<to uri=""mock:end""/>
            </delay>
        </route>
    </camelContext>
{code}",,,,,,,,,,,,,,,,,,,,,,,
Twitter component fixes,CAMEL-4908,12538625,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,bibryam,bibryam,bibryam,17/Jan/12 13:21,24/Jan/12 08:45,13/Mar/19 22:19,19/Jan/12 04:38,2.10.0,,,,,,,,,2.10.0,,,,camel-twitter,,,,,,0,,,,,,,,,"Fix ConcurrentModificationException for StreamingConsumer.
Fix NPE for FilterConsumer
Use additional query parameters for FilterConsumer like userIds, keywords.
I didn't added tests for these fixes, because currently it seems like it connects to the internet and does real twitter queries. I will check this in a separate issue. ",,,,,,,,,,,,,,,,,,,,,17/Jan/12 13:21;bibryam;twitter.diff;https://issues.apache.org/jira/secure/attachment/12510834/twitter.diff,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-01-17 13:29:40.369,,,no_permission,,Unknown,,,,,,,,,,,224128,,,Tue Jan 24 08:38:16 UTC 2012,,,Patch Available,,,,0|i023tb:,10219,,,,,,,,,"17/Jan/12 13:29;davsclaus;Bilgin you may want to read about checkstyle, so you can run a test to run a report on the command line, which tells you if the source code is aligned as it should (eg indent, parenthesis, and whatnot)

See building with checkstyle here:
http://camel.apache.org/building.html

And btw I do not think you need to create a new ArrayList when you guard it as unmodified, as the caller will not be able to modify the list.
Or did I miss a point? If so please add a code comment in the source why this is done as is
return Collections.unmodifiableList(new ArrayList(receivedStatuses));
","17/Jan/12 14:41;bibryam;I will pay more attention to CS. My editor intelliJ orders the imports in different order and I don't know the order expected from CS, will spent some time there.

About:
return Collections.unmodifiableList(new ArrayList(receivedStatuses));

the caller is not able to modify the array, but while the caller is iterating the source array is modified with clear/add methods and that's causing the error mentioned previously","17/Jan/12 14:59;bvahdat;@Bilgin
Personally I do use eclipse but in your case applying [1] will do the trick. Please also check [2] just in the case you don't know how to apply it to your IntelliJ installation.

[1] https://svn.apache.org/repos/asf/camel/trunk/etc/idea/settings.jar
[2] http://musingsofaprogrammingaddict.blogspot.com/2010/03/import-code-style-settings-into.html","19/Jan/12 04:38;davsclaus;Thanks for the patch.

I have fixed CS.","24/Jan/12 01:52;bibryam;Thanks for the info Babak. I installed the settings following the instructions, but still have to do some formatting manually, like indenting ""throws"" statements at 8 spaces instead of 12. Is this expected behaviour or the IDE should do all the formatting automatically?","24/Jan/12 08:38;bvahdat;I've got no experience of using IntelliJ but the problem you are facing seems really odd to me if IntelliJ doesn't honor the given settings. I would expect any given IDE to do all the formattings automatically!

AFAIK Claus makes use of IntelliJ and maybe he can help you here.",,,,,,,,,,,,,,,,,,
ThreadsProcessor configured with ExecutorService with DiscardPolicy or DiscardOldestPolicy leaves inflight exchanges for discarded tasks unprocessed.,CAMEL-4925,12539115,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,szhemzhitsky,szhemzhitsky,20/Jan/12 10:02,23/Jan/12 17:00,13/Mar/19 22:19,23/Jan/12 12:44,2.8.0,,,,,,,,,2.10.0,,,,camel-core,,,,,,0,,,,,,,,,"ThreadsProcessor configured with ExecutorService with DiscardPolicy or DiscardOldestPolicy leaves inflight exchanges for discarded tasks unprocessed.

Here is the code from ThreadsProcessor. In case of DiscardPolicy or DiscardOldestPolicy executorService will no throw RejectedExecutionException, so exchange remains unprocessed and count of inflight exchanges will not be decremented for such discarded exchanges.

{code:java|title=ThreadsProcessor#process(Exchange, AsyncCallback)}
public boolean process(Exchange exchange, AsyncCallback callback) {
    if (shutdown.get()) {
        throw new IllegalStateException(""ThreadsProcessor is not running."");
    }

    ProcessCall call = new ProcessCall(exchange, callback);
    try {
        executorService.submit(call);
        // tell Camel routing engine we continue routing asynchronous
        return false;
    } catch (RejectedExecutionException e) {
        if (isCallerRunsWhenRejected()) {
            if (shutdown.get()) {
                exchange.setException(new RejectedExecutionException());
            } else {
                callback.done(true);
            }
        } else {
            exchange.setException(e);
        }
        return true;
    }
}
{code}

Unit test is attached.",,,,,,,,,,,,,,,,,,,,,21/Jan/12 16:55;szhemzhitsky;CAMEL-4925.patch;https://issues.apache.org/jira/secure/attachment/12511394/CAMEL-4925.patch,20/Jan/12 10:02;szhemzhitsky;CamelRoutingTest.java;https://issues.apache.org/jira/secure/attachment/12511245/CamelRoutingTest.java,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-01-20 11:15:38.458,,,no_permission,,Unknown,,,,,,,,,,,224617,,,Mon Jan 23 17:00:43 UTC 2012,,,,,,,0|i023x3:,10236,,,,,,,,,"20/Jan/12 11:15;davsclaus;We would need to wrap those 2 policies, and then remove the exchange from them inflight registry, when the rejectedExecutor callback is invoked.","20/Jan/12 11:44;szhemzhitsky;So if we wrap these two policies, how to know which exchange must be removed from the inflight repository?","20/Jan/12 12:25;davsclaus;Yeah we would need to check in ThreadsDefinition if you have configured Discard and DiscardOldest. And then wrap those policies with a custom policy, so we get the callback from the JDK when the task is rejected.

The discard, would possible not be needed, as I would assume the thread pool will reject it asap, when you try to submit it. But the discard oldest, is an existing task from the task queue, so that is a different story.

Then we need to provide this as a callback to the ThreadsProcessor, so it can do custom logic when the RejectedExecutionHandler#rejectedExecution is invoked. We can then from the Runnable parameter cast that to ProcessCall, and then get access to the Exchange. Then we can set on the Exchange a RejectedExecutionException as exception, and invoke its callback. Then Camel will take it from there to remove the exchange from inflight registry and whatnot.

Something along the lines of that. Its a shame the API of the ExecutorService do not have a 2nd optional runnable parameter for rejected execution. Then it would have been easier. As you just submit 2 runnable's. And the JDK will invoke the appropriate.","21/Jan/12 14:56;davsclaus;After looking into this for a bit, then the JDK does *not* offer good APIs for being able to do custom logic when rejected, by which you get access to the inner details of the runnable task you submitted to the thread pool. That means for DiscardOldest, you do *not* know which Exchange is to be discarded, as you cannot get access to the Exchange. The JDK ThreadPoolExecutor will wrap the runnable/FutureTask using an adapter, which does not expose API for you to get access to the Exchange.

Even if you create a custom FutureTask and submit that, then it's the adapter you get when the task is rejected. And the adapter does not allow to get you to your custom FutureTask.

So the best we can do is to deny supporting DiscardOldest, and then we can handle Abort and Discard in the ThreadsProcessor, where we can mark the exchange to stop routing, so the exchange will be done, which means that it will be unregistered from the inflight registry and whatnot.","21/Jan/12 17:14;szhemzhitsky;Hi Claus,
I noticed the same things you mentioned and attached a sample patch that can possibly be used to support correct rejection of submitted tasks. The idea is to provide our own _ThreadPoolExecutor_ and _ScheduledThreadPoolExecutor_ from _DefaultThreadPoolFactory_. These pools wrap submitted tasks with custom _FutureTask_ that supports rejection. _RejectedExecutionHandlers_ in the _ThreadPoolRejectedPolicy_ are also changed to check whether the discarded tasks can be rejected (I also added blocking policy into the _ThreadPoolRejectedPolicy_).

So if submitted tasks do not implement _Rejectable_ interface the behavior is exactly the same as with ordinary _ThreadPoolExecutor_ and _ScheduledThreadPoolExecutor_. If these tasks are _Rejectable_, their _reject()_ method will be called. 

The only problem is what to do if the user provides its own ExecutorService to configure the ThreadsProcessor. I suppose in that case this user should be fully responsible for handling rejections correctly (it should be mentions in camel docs or somewhere else).","22/Jan/12 11:06;davsclaus;Sergey,

Thanks for the patch. This seems promising. I am polishing this a bit
- discard and discard oldest = the exchange will not continue routing, done successfully
- abort = the exchange will not continue routing, an exception will be set, done with a failure

Then you can decide to use between abort or discard, to chose between whether the exchange should done with a failure or not.

I am removing the blocked policy, as its not tested, and we have no people asking for it. Don't give people robe to hang themselves.

And yeah if end user provide their own thread pool, then they are responsible for handling that situation. 
","22/Jan/12 15:33;szhemzhitsky;Claus, thanks a lot.

I've done some experiments with the blocking policy that seems rather dangerous, as threads in the pool may become timed out before the rejected task will be put into the queue. So you're right that this policy has to be removed.","23/Jan/12 12:33;davsclaus;Thanks for the contribution. I polished it a bit, and fixed CS. You may want to read about building with checkstyle here:
http://camel.apache.org/building.html

This outputs a report if the source code is not aligned with the checkstyle we have in place. eg checking for missing license headers, and code formatting and the likes.","23/Jan/12 17:00;szhemzhitsky;{quote}
I polished it a bit, and fixed CS. You may want to read about building with checkstyle here:
http://camel.apache.org/building.html
{quote}
Hi Claus, thanks for providing this useful link.",,,,,,,,,,,,,,,
PollEnrich in default mode should block,CAMEL-4920,12538967,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,19/Jan/12 13:49,19/Jan/12 19:39,13/Mar/19 22:19,19/Jan/12 15:58,2.9.0,,,,,,,,,2.10.0,2.9.1,,,camel-core,,,,,,0,,,,,,,,,"Currently it uses receiveNoWait, it should use receive (eg block). You should use timeout = -1 for receiveNoWait. This is also what we write in the documentation and javadoc.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-01-19 19:39:35.167,,,no_permission,,Unknown,,,,,,,,,,,224469,,,Thu Jan 19 19:39:35 UTC 2012,,,,,,,0|i023vz:,10231,,,,,,,,,"19/Jan/12 13:54;davsclaus;btw this issue causes the test failures on trunk
https://builds.apache.org/job/Camel.trunk.fulltest/663/#showFailuresLink

Which became apparent after the seda consumer does no longer poll during CamelContext is starting.","19/Jan/12 19:39;bvahdat;Well done :-)

Now all tests pass again [1] other than the one which has to do with CAMEL-4794 and the related one CAMEL-4900.

[1] https://builds.apache.org/job/Camel.trunk.fulltest/664/",,,,,,,,,,,,,,,,,,,,,,
Serialisation Data Format is unable to unmarshal in OSGi environment,CAMEL-4915,12538806,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,raulvk,raulvk,18/Jan/12 14:13,19/Jan/12 10:51,13/Mar/19 22:19,19/Jan/12 10:51,2.9.0,,,,,,,,,2.10.0,2.9.1,,,camel-core,,,,,,0,serialization,,,,,,,,"This happens because camel-core doesn't have access to custom classes. Maybe this data format should be isolated into it's own package and have DynamicImport-Package: * in its manifest headers. That way it will be able to access any class from the environment.

Another possibility is to dig deeper into what classloader is being used to resolve the class. It seems like the camel-core classloader is used rather than the TCCL. Possible culprit could be http://docs.oracle.com/javase/6/docs/api/java/io/ObjectInputStream.html#resolveClass(java.io.ObjectStreamClass).",Karaf 2.2.0 with Equinox 3.6.0.v20100517,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-01-18 14:17:19.396,,,no_permission,,Unknown,,,,,,,,,,,224309,,,Thu Jan 19 10:29:32 UTC 2012,,,,,,,0|i023uv:,10226,,,,,,,,,"18/Jan/12 14:17;davsclaus;Its the ObjectConvert.toClass that needs to use the ClassResolver API from CamelContext to load the class. Then it ought to work, as this is how we do load stuff in osgi with Camel.

","19/Jan/12 10:29;davsclaus;Committed a fix and added an osgi test for spring-dm.

",,,,,,,,,,,,,,,,,,,,,,
CamelContext autoStartup=false and starting context programmatically doesnt work,CAMEL-4892,12538331,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,13/Jan/12 15:41,13/Jan/12 15:46,13/Mar/19 22:19,13/Jan/12 15:46,2.9.0,,,,,,,,,2.10.0,2.9.1,,,camel-core,,,,,,0,,,,,,,,,If a <camelContext> is set to autoStartup=false and then later tried to start it via code or JMX doesn't start routes associated with it. ,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,223837,,,2012-01-13 15:41:28.0,,,,,,,0|i023qf:,10206,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Ftp consumer - NPE if using 2 slashes as starting directory,CAMEL-4850,12536787,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,02/Jan/12 10:08,02/Jan/12 10:51,13/Mar/19 22:19,02/Jan/12 10:51,2.8.3,2.9.0,,,,,,,,2.8.4,2.9.1,,,camel-ftp,,,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Continuation-of-NPE-for-FTP-endpoint-tp5107992p5107992.html

The workaround is to not use double slashes.

This may also affect using a root as absolute path for FTP consumer, as the starting directory will be interpreted as empty.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,222470,,,2012-01-02 10:08:21.0,,,,,,,0|i023h3:,10164,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
URISupport: URI normalization duplicates query if path is empty,CAMEL-4841,12536588,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,koscejev,koscejev,29/Dec/11 16:00,30/Dec/11 08:49,13/Mar/19 22:19,30/Dec/11 08:49,2.8.3,,,,,,,,,2.10.0,2.7.5,2.8.4,,camel-core,,,,,,0,,,,,,,,,"URI with empty path, but non-empty query part is not properly normalized. The query part is in fact duplicated. E.g, URI ""foobar://?foo=1&bar=2"" is incorrectly normalized to ""foobar://?foo=1&bar=2?bar=2&foo=1"".

This is caused by incorrect identification of the path part in org.apache.camel.util.URISupport.normalizeUri(String):
        int idx = path.indexOf('?');
        if (idx > 0) {
            path = path.substring(0, idx);
        }

The comparison of ""idx > 0"" is incorrect, because this way, if '?' is the first character, the path is not set to empty string. The correct comparison should be ""idx > -1"" or ""idx >= 0"" or even just ""idx != -1"" since that's the only value that String.indexOf returns when the character is not found.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-12-30 08:49:09.78,,,no_permission,,Novice,,,,,,,,,,,222271,,,Fri Dec 30 08:49:09 UTC 2011,,,,,,,0|i023f3:,10155,,,,,,,,,"30/Dec/11 08:49;njiang;Applied patch into trunk, camel-2.8.x, camel-2.7.x branch.",,,,,,,,,,,,,,,,,,,,,,,
Malformed URI fragment copied twice,CAMEL-4601,12529572,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,hadrian,hadrian,hadrian,31/Oct/11 22:15,22/Dec/11 15:49,13/Mar/19 22:19,27/Nov/11 03:27,2.8.2,,,,,,,,,2.8.4,2.9.0,,,camel-core,,,,,,0,,,,,,,,,"In URISupport.createURIWithQuery if the uri parameter contains a fragment but no query, the fragment is added a second time in the returned URI.

Fairly easy to fix if anybody wants to take a stab at it :).",,,,,,,,,,,,,,,,,,,,,24/Nov/11 20:01;bibryam;uri_fragment.diff;https://issues.apache.org/jira/secure/attachment/12505033/uri_fragment.diff,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-11-24 20:01:17.592,,,no_permission,,Novice,,,,,,,,,,,215432,,,Sun Nov 27 03:27:27 UTC 2011,,,,,,,0|i021y7:,9917,,,,,,,,,24/Nov/11 20:01;bibryam;A simple patch,"24/Nov/11 20:50;hadrian;Wasn't hard, was it? :)",27/Nov/11 03:27;hadrian;Patch applied with thanks to Bilgin.,,,,,,,,,,,,,,,,,,,,,
camel-quartz - Using underscore in group name does not work,CAMEL-4769,12534755,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,12/Dec/11 09:32,12/Dec/11 12:11,13/Mar/19 22:19,12/Dec/11 12:11,2.7.4,2.8.3,2.9.0,,,,,,,2.7.5,2.8.4,2.9.0,,camel-quartz,,,,,,0,,,,,,,,,"The group name is not properly resolved if people specify a invalid host name, such as with underscores.
If so we should fallback and grab the group name by grabbing the string until the first path separator char.

See nabble
http://camel.465427.n5.nabble.com/Camel-Quartz-consumer-doesn-t-allow-underscores-tp5063734p5063734.html",,,,,,,,,,,,,,,,,,,,,12/Dec/11 11:22;bibryam;quartz.diff;https://issues.apache.org/jira/secure/attachment/12506991/quartz.diff,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-12-12 11:22:49.317,,,no_permission,,Unknown,,,,,,,,,,,220439,,,Mon Dec 12 12:11:04 UTC 2011,,,,,,,0|i022z3:,10083,,,,,,,,,12/Dec/11 11:22;bibryam;simple fix,"12/Dec/11 12:11;davsclaus;Bilgin thanks for the patch. I already had it fixed, but ASF infra was not working well this morning, so I had to delay committing until it worked again",,,,,,,,,,,,,,,,,,,,,,
The onException clause should make use of the correct logger name given through the log DSL ,CAMEL-4754,12534359,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,bvahdat,bvahdat,08/Dec/11 16:25,12/Dec/11 05:48,13/Mar/19 22:19,12/Dec/11 05:48,2.8.3,,,,,,,,,2.9.0,,,,camel-core,,,,,,0,,,,,,,,,"See http://camel.465427.n5.nabble.com/global-onException-clause-wrongly-identifies-route-in-which-exception-occurs-log-name-td5058304.html
",,,,,,,,,,,,,,,,,,,,,09/Dec/11 22:55;bvahdat;CAMEL-4754-option-one.patch;https://issues.apache.org/jira/secure/attachment/12506807/CAMEL-4754-option-one.patch,09/Dec/11 22:56;bvahdat;CAMEL-4754-option-two.patch;https://issues.apache.org/jira/secure/attachment/12506808/CAMEL-4754-option-two.patch,08/Dec/11 17:45;bvahdat;debugger.jpg;https://issues.apache.org/jira/secure/attachment/12506624/debugger.jpg,,,,3.0,,,,,,,,,,,,,,,,,,,2011-12-09 10:07:36.153,,,no_permission,,Unknown,,,,,,,,,,,220081,,,Mon Dec 12 05:48:37 UTC 2011,,,,,,,0|i022vr:,10068,,,,,,,,,"08/Dec/11 17:55;bvahdat;Maybe just as a small hint, I attached a screenshot showing the cause of the problem: the LogProcessor gets (correctly) wired with the simple expression we've on log DSL, like:

{code}
onException(Exception.class)
    .log(""Error due ${exception.message}"");
{code}

But with the *wrong* CamelLoggger object which is to be used for the route 'bar'. Correctly it should be wired to the CamelLogger of the route 'foo'.","09/Dec/11 10:07;davsclaus;The workaround is to use route scoped onExceptions.

","09/Dec/11 10:12;davsclaus;Its a bug in the error handler when using context scoped onException.

When the routes is built, then the error handler is mixed in the routes (Camel 2.x architecture), and in this logic error handlers is build based on the given route built, and a reference is stored in the context scoped OnException. However that reference should have been keyed to the given created route. This ensures when Camel picks the OnException to handle the exception that occurred, it should pick the error handler that matches the current route. Beforehand it will pick the last created error handler from the last created route. All though the error handler reacts similar, it was only the Log DSL that uses the route id in the log process, and thus that route id was wrong, causing the Log processor to log the wrong id.
","09/Dec/11 12:41;davsclaus;This has API changes and a slightly bigger changes in the routing engine. So am a bit inclined to backport to a patch release, to only fix a route id in a log. And we have a known workaround.","09/Dec/11 15:06;bvahdat;@Claus,

I'm afraid that the test ContextScopedOnExceptionCorrectRouteContextTest doesn't really verify the fix, as we do swallow all the possible exceptions after the template.sendBody() call, so that using the processor DSL even if we would assert on:

{code}
assertEquals(""balabala"", routeId);
{code}

The tests would still pass well! as we swallow all kindes of the exceptions after the template.sendBody() calls (including a CamelExecutionException wrapping junit.framework.ComparisonFailure)

I went for another approach using a logger-name-recording-log4j-appender (see below) and removed the processor approach. If you think this would make more sense to you I would append the diff (tomorrow) into this ticket so that you can apply it into the trunk.

{code}
public class ContextScopedOnExceptionCorrectRouteContextTest extends ContextTestSupport {

    private LoggerNameRecordingAppender loggerNameRecordingAppender;

    @Override
    protected void setUp() throws Exception {
        super.setUp();

        // append our custom log4j Appender through which we want to verify the
        // logger name of the log messages
        loggerNameRecordingAppender = new LoggerNameRecordingAppender(""Error due Forced foo error"", ""Error due Forced bar error"");
        Logger.getRootLogger().addAppender(loggerNameRecordingAppender);
    }

    @Override
    protected void tearDown() throws Exception {
        // we're done, so remove our custom Appender from the root logger
        Logger.getRootLogger().removeAppender(loggerNameRecordingAppender);

        super.tearDown();
    }

    @Override
    public boolean isUseRouteBuilder() {
        return false;
    }

    public void testContextScopedOnExceptionLogRouteBarFail() throws Exception {
        context.addRoutes(new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                onException(Exception.class)
                    .log(""Error due ${exception.message}"");

                from(""direct:start"").routeId(""foo"")
                    .to(""mock:foo"")
                    .to(""direct:bar"")
                    .to(""mock:result"");

                from(""direct:bar"").routeId(""bar"")
                    .to(""mock:bar"")
                    .throwException(new IllegalArgumentException(""Forced bar error""));
            }
        });
        context.start();

        getMockEndpoint(""mock:foo"").expectedMessageCount(1);
        getMockEndpoint(""mock:bar"").expectedMessageCount(1);
        getMockEndpoint(""mock:result"").expectedMessageCount(0);
        
        try {
            template.sendBody(""direct:start"", ""Hello World"");
            fail(""Should have thrown exception"");
        } catch (Exception e) {
            // ignore
        }

        assertMockEndpointsSatisfied();

        // assert on the logger name through which we've logged the message
        // using the log dsl
        List<String> barHits = loggerNameRecordingAppender.getRecordedLoggerNamesFor(""Error due Forced bar error"");
        assertEquals(1, barHits.size());
        assertEquals(""bar"", barHits.get(0));

        List<String> fooHits = loggerNameRecordingAppender.getRecordedLoggerNamesFor(""Error due Forced foo error"");
        assertEquals(0, fooHits.size());
    }

    public void testContextScopedOnExceptionLogRouteFooFail() throws Exception {
        context.addRoutes(new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                onException(Exception.class)
                    .log(""Error due ${exception.message}"");

                from(""direct:start"").routeId(""foo"")
                    .to(""mock:foo"")
                    .throwException(new IllegalArgumentException(""Forced foo error""))
                    .to(""direct:bar"")
                    .to(""mock:result"");

                from(""direct:bar"").routeId(""bar"")
                    .to(""mock:bar"");

                from(""direct:killer"").routeId(""killer"")
                    .to(""mock:killer"");
            }
        });
        context.start();

        getMockEndpoint(""mock:foo"").expectedMessageCount(1);
        getMockEndpoint(""mock:bar"").expectedMessageCount(0);
        getMockEndpoint(""mock:result"").expectedMessageCount(0);

        try {
            template.sendBody(""direct:start"", ""Hello World"");
            fail(""Should have thrown exception"");
        } catch (Exception e) {
            // expected
        }

        assertMockEndpointsSatisfied();

        // assert on the logger name through which we've logged the message
        // using the log dsl
        List<String> fooHits = loggerNameRecordingAppender.getRecordedLoggerNamesFor(""Error due Forced foo error"");
        assertEquals(1, fooHits.size());
        assertEquals(""foo"", fooHits.get(0));

        List<String> barHits = loggerNameRecordingAppender.getRecordedLoggerNamesFor(""Error due Forced bar error"");
        assertEquals(0, barHits.size());
    }

    private static class LoggerNameRecordingAppender extends AppenderSkeleton {

        private final List<String> recordedLogMessages;
        private final Map<String, List<String>> recordedLoggerNames;

        LoggerNameRecordingAppender(String... logMessages) {
            this.recordedLogMessages = new ArrayList<String>(Arrays.asList(logMessages));
            this.recordedLoggerNames = new HashMap<String, List<String>>();
            for (String logMessage : logMessages) {
                recordedLoggerNames.put(logMessage, new ArrayList<String>());
            }
        }

        @Override
        protected void append(LoggingEvent event) {
            String logMessage = event.getRenderedMessage();
            if (recordedLogMessages.contains(logMessage)) {
                // add this hit to the list of the logger names we have got so far
                // for this log message
                List<String> actual = recordedLoggerNames.get(logMessage);
                actual.add(event.getLoggerName());
            }
        }

        List<String> getRecordedLoggerNamesFor(String logMessage) {
            return Collections.unmodifiableList(recordedLoggerNames.get(logMessage));
        }

        @Override
        public boolean requiresLayout() {
            return false;
        }

        @Override
        public void close() {
            // noop
        }
    }
}
{code}","09/Dec/11 15:25;davsclaus;The new unit tests has a inlined processor that checks the route id is the correct value.

However fell free to submit a patch with your logging appender ""trick"". You must attach a file to the JIRA and mark [x] in grant license to Apache. Otherwise we cannot accept your contribution.","09/Dec/11 15:33;bvahdat;But that check doesn't really work, because if you would do

{code}
assertEquals(""balabala"", routeId);
{code}

The test would still *pass*. The processor is O.K. the problem are those 2 catch blocks after the template.sendBody() calls. Maybe you want to give it a try with that ""balabala"" routeId to see what I mean.","09/Dec/11 23:06;bvahdat;Attached two potential fixes you may want to consider (either one *or* two, but not both)

- CAMEL-4754-option-one.patch: to remedy the potential exception swallowing on junit.framework.ComparisonFailure, I hope my pointer I tried to explain in my previous posts is clear by now

- CAMEL-4754-option-two.patch: how did you name it? Yeah, this's the one with that logging appender ""trick""

The decision is yours :-)","11/Dec/11 10:26;bvahdat;According to my previous post on this I reopened the ticket, so that we can remedy this ""false positive"" effect while unit-testing.
See the two provided patches for this.",12/Dec/11 05:48;davsclaus;Thanks for the patch. I went for number one and polished it a bit.,,,,,,,,,,,,,,
camel-guice osgi import version range in manifest.mf,CAMEL-4751,12534261,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,surya108,surya108,07/Dec/11 21:59,08/Dec/11 07:55,13/Mar/19 22:19,08/Dec/11 07:55,2.8.2,,,,,,,,,2.7.5,2.8.4,2.9.0,,camel-guice,,,,,,0,2.8.3,2.9.0,camel,,,,,,"in Camel-Guice component's pom.xml we have:
 <properties>    
    <camel.osgi.export.pkg>org.apache.camel.guice.*</camel.osgi.export.pkg>
    <camel.osgi.import.additional>
        com.google.inject*;version=""[2,3)""        
    </camel.osgi.import.additional>
  </properties>

i.e imported version of google-guice package is [2,3). Unfortunately this in not compatible with any of the releases from Google-Guice (version 2 or 3). Guice seems to maintain 'package' level versioning. ""com.google.inject;version=1.3""

Suggested:fix:
Change the lower version from 2 to 1.2 .
This bug is a showstopper for us to integrate and deploy solution with camel+guice+peaberry on to karaf osgi.


We have from guice 3:
guice 
----------
Manifest-Version = 1.0
Archiver-Version = Plexus Archiver
Built-By = mcculls
Build-Jdk = 1.6.0_24
Created-By = Apache Maven

Bundle-Vendor = Google, Inc.
Bundle-RequiredExecutionEnvironment = J2SE-1.5,JavaSE-1.6
Bundle-Name = guice
Bundle-Copyright = Copyright (C) 2006 Google Inc.
Bundle-DocURL = http://code.google.com/p/google-guice/
Bundle-Description = Guice is a lightweight dependency injection framework for J
ava 5 and above
Bundle-SymbolicName = com.google.inject
Bundle-Version = 3.0.0
Bundle-License = http://www.apache.org/licenses/LICENSE-2.0.txt
Bundle-ManifestVersion = 2

Import-Package =
        javax.inject,
        org.aopalliance.intercept
Export-Package =
        com.google.inject.matcher;version=1.3,
        com.google.inject.name;version=1.3,
        com.google.inject.spi;version=1.3,
        com.google.inject.binder;version=1.3,
        com.google.inject.util;version=1.3,
        com.google.inject;version=1.3
","windows, linux",,,,,,,,,,,,,,,,,,,,07/Dec/11 22:01;surya108;camel_guice_osgi_import_version_fix.patch;https://issues.apache.org/jira/secure/attachment/12506528/camel_guice_osgi_import_version_fix.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-12-08 07:55:23.364,,,no_permission,,Moderate,,,,,,,,,,,219983,,,Thu Dec 08 07:55:23 UTC 2011,,,Patch Available,,,,0|i022v3:,10065,,,,,,,,,07/Dec/11 22:01;surya108;changed properties in camel-guice pom.xml. to be compatible with versioning from google-guice jars.,08/Dec/11 07:55;davsclaus;Thanks for the patch.,,,,,,,,,,,,,,,,,,,,,,
camel-stream - Should close previous stream if re-initializing a new stream,CAMEL-4748,12534159,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,07/Dec/11 10:03,07/Dec/11 10:12,13/Mar/19 22:19,07/Dec/11 10:12,2.7.4,2.8.3,,,,,,,,2.7.5,2.8.4,2.9.0,,camel-stream,,,,,,0,,,,,,,,,"For example if scanStream=true then the previous stream should be closed, prior to re-initalizing a new stream.

For example on Windows this may cause a file to be locked by the JVM due the old InputStream is not closed.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,219881,,,2011-12-07 10:03:36.0,,,,,,,0|i022uf:,10062,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Tokenize pair - evaluated as predicate should close input stream,CAMEL-4742,12533868,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,05/Dec/11 11:58,05/Dec/11 12:37,13/Mar/19 22:19,05/Dec/11 12:37,2.9.0,,,,,,,,,2.9.0,,,,camel-core,,,,,,0,,,,,,,,,"If you read from a file and use the tokenize pair in a predicate such as a filter / content based router, then the input stream should be closed. Otherwise OS such as Windows keep a lock on the stream, and the file cannot be moved/deleted after processing is done.

See nabble
http://camel.465427.n5.nabble.com/Riding-on-org-apache-camel-language-TokenPairPredicateTest-tp5041981p5041981.html

Note that using tokenizePair as a predicate is must likely very unusual, as its meant for splitting a stream into tokens, and thus most often only used with the splitter EIP.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,219594,,,2011-12-05 11:58:18.0,,,,,,,0|i022t3:,10056,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"When a route is removed from camel, LifecycleStrategy is called twice ",CAMEL-4696,12532015,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,bibryam,bibryam,bibryam,18/Nov/11 23:49,28/Nov/11 13:26,13/Mar/19 22:19,26/Nov/11 10:02,2.8.3,,,,,,,,,2.8.4,2.9.0,,,camel-core,,,,,,0,,,,,,,,,"DefaultCamelContext.removeRoute method has these lines among others

 if (getRouteStatus(routeId).isStopped()) {
    routeService.setRemovingRoutes(true);
    shutdownRouteService(routeService);
    removeRouteDefinition(routeId);
    ServiceHelper.stopAndShutdownServices(routeService);

I think the last line from this snippet is not needed, because the route should be already stopped in order to pass the IF statement and then it is shutdown through this call shutdownRouteService(routeService);

 ServiceHelper.stopAndShutdownServices(routeService) tries to stops again the route if not stopped, but the worse is it shutdown the rout again.
It seems to me like a bug, other thoughts?


",,,,,,,,,,CAMEL-4514,,,,,,,,,,,18/Nov/11 23:52;bibryam;unnamed.patch;https://issues.apache.org/jira/secure/attachment/12504298/unnamed.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-11-26 09:58:22.609,,,no_permission,,Unknown,,,,,,,,,,,217751,,,Mon Nov 28 13:26:44 UTC 2011,,,Patch Available,,,,0|i022j3:,10011,,,,,,,,,18/Nov/11 23:52;bibryam;Here is a unit test showing the bug,"26/Nov/11 09:58;davsclaus;Thanks Bilgin for the unit test.

I have committed the patch and fixed it as you suggested in DefaultCamelContext.

I have upgraded your JIRA account so you can assign tickets, as you contribute many patches recently.
So by assigning the ticket we can see you are working on a patch. Keep up the good work.",28/Nov/11 13:26;bibryam;Thanks Claus. Jira perms will simplify my life a little more :),,,,,,,,,,,,,,,,,,,,,
Scala DSL does not support defining route-scoped error handlers,CAMEL-4698,12532104,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,rvalk,rvalk,20/Nov/11 22:35,21/Nov/11 07:52,13/Mar/19 22:19,21/Nov/11 07:52,2.8.2,2.9.0,,,,,,,,2.7.5,2.8.4,2.9.0,,camel-scala,,,,,,0,,,,,,,,,The Scala DSL does not allow for defining error handlers at the route scope. The 'errorHandler' method only sets the context-scoped error handler.,All (DSL limitation),86400,86400,,0%,86400,86400,,,,,,,,,,,,,,20/Nov/11 22:42;rvalk;camel-scala-route_error_handler.patch.tar.gz;https://issues.apache.org/jira/secure/attachment/12504447/camel-scala-route_error_handler.patch.tar.gz,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-11-21 07:52:53.259,,,no_permission,,Novice,,,,,,,,,,,217840,,,Mon Nov 21 07:52:53 UTC 2011,,,Patch Available,,,,0|i022jj:,10013,,,,,,,,,"20/Nov/11 22:42;rvalk;Patch for SRouteDefinition.scala.
Unit test suite for issue.","21/Nov/11 07:52;njiang;Applied patch into trunk, Camel 2.8.x  Camel 2.7.x branch with thanks to Robert.",,,,,,,,,,,,,,,,,,,,,,
"When stopping CamelContext should not clear lifecycleStrategies, to make restart safely possible",CAMEL-4682,12531456,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,15/Nov/11 13:14,18/Nov/11 01:43,13/Mar/19 22:19,15/Nov/11 13:19,2.7.4,2.8.2,,,,,,,,2.7.5,2.8.3,2.9.0,,camel-core,,,,,,0,,,,,,,,,"We should not clear the lifecycleStrategies on CamelContext when stop() is invoked, as if we restart by invoking start(), the lifecycle strategies should be in use again.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,217192,,,2011-11-15 13:14:15.0,,,,,,,0|i022fz:,9997,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bindy - CSV format - Should be able to marshal with quotes,CAMEL-4672,12531229,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,12/Nov/11 14:32,12/Nov/11 15:04,13/Mar/19 22:19,12/Nov/11 15:04,2.8.2,,,,,,,,,2.8.3,2.9.0,,,camel-bindy,,,,,,1,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Bindy-CSV-marshal-does-not-properly-quote-values-defined-by-the-CsvRecord-separator-td4809017.html

Its fairly common to marshal to/from with quotes in CSV format.
We should make this easier by adding an attribute to @CsvRecord where you can define a quote char to use, either single or double etc.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,216966,,,Sat Nov 12 15:04:26 UTC 2011,,,,,,,0|i022dr:,9987,,,,,,,,,12/Nov/11 15:04;davsclaus;There is now a {{quote}} attribute you can specify on @CsvRecord,,,,,,,,,,,,,,,,,,,,,,,
Hardcoded initial delay for completionInterval in AggregateProcessor,CAMEL-4660,12531004,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,okhofstad,okhofstad,10/Nov/11 14:33,11/Nov/11 09:13,13/Mar/19 22:19,11/Nov/11 09:13,2.8.2,,,,,,,,,2.8.3,2.9.0,,,camel-core,,,,,,0,Aggregation,,,,,,,,"When setting the completionInterval on an aggregator, the first completion will be triggered after 1000ms. The reason is the hardcoded initial delay in AggregateProcessor.

This behavior has not been documented and is not expected. The expected behavior is for the first completion to be triggered after the given interval. The first completion would then be triggered after completionInterval, the second after 2 * completionInterval, the third after 3 * completionInterval and so on.",,,,,,,,,,,,,,,,,,,,,10/Nov/11 14:37;okhofstad;initialCompletionInterval.patch;https://issues.apache.org/jira/secure/attachment/12503218/initialCompletionInterval.patch,10/Nov/11 15:40;okhofstad;initialCompletionIntervalTest.patch;https://issues.apache.org/jira/secure/attachment/12503240/initialCompletionIntervalTest.patch,,,,,2.0,,,,,,,,,,,,,,,,,,,2011-11-11 09:13:24.367,,,no_permission,,Unknown,,,,,,,,,,,216742,,,Fri Nov 11 09:13:24 UTC 2011,,,Patch Available,,,,0|i022b3:,9975,,,,,,,,,10/Nov/11 14:37;okhofstad;Patch which sets the initial delay to the same value as the completionInterval,10/Nov/11 15:40;okhofstad;Added patch with test to reproduce the problem,11/Nov/11 09:13;davsclaus;Thanks for the patch,,,,,,,,,,,,,,,,,,,,,
"Stop or shutdown a route with a custom timeout value, will still log using the default timeout in the logs",CAMEL-4619,12530418,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,05/Nov/11 11:19,05/Nov/11 11:32,13/Mar/19 22:19,05/Nov/11 11:32,2.8.2,,,,,,,,,2.8.3,2.9.0,,,camel-core,,,,,,0,,,,,,,,,"If you stop a route with a custom time out value, then the graceful shutdown strategy will still use the default timeout value in the logs, so that information is not correct. For example if you have a short default value, but provide a higher timeout value, then you can have the log show negative timeout values.

INFO  DefaultShutdownStrategy        - Waiting as there are still 2 inflight and pending exchanges to complete, timeout in -14 seconds.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,216156,,,2011-11-05 11:19:14.0,,,,,,,0|i02227:,9935,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE using seda (with concurrentConsumers) and stream endopoints,CAMEL-4581,12528669,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,llt,llt,25/Oct/11 13:03,27/Oct/11 12:19,13/Mar/19 22:19,27/Oct/11 12:19,2.8.1,,,,,,,,,2.7.5,2.8.3,2.9.0,,,,,,,,0,,,,,,,,,"I found an issue with seda and stream endpoints. 
Using more then 1 concurrent consumers for seda and using ""stream:out"" as destination endopoint , I sometimes receive some NullPointerExceptions. 

This is how to reproduce the problem: 

context.addRoutes(new RouteBuilder() { 
  @Override 
   public void configure() throws Exception { 
        from(""seda:sendRequest?concurrentConsumers=10"") 
        .to(""stream:out""); 
   } 
}); 
context.start(); 

for ( int i = 0; i < 50000; i++ ) { 
        producer.sendBody(""seda:sendRequest"", String.format(""Message %d"", i)); 
} 

And this is one of the exceptions: 

2011-10-25 10:12:36,550 ERROR  [org.apache.camel.processor.DefaultErrorHandler] - Failed delivery for exchangeId: ID-localhost-51879-1319530353835-0-48591. Exhausted after delivery attempt: 1 caught: java.lang.NullPointerException 
java.lang.NullPointerException: null 
        at java.io.Writer.<init>(Writer.java:71) ~[na:1.6.0_26] 
        at java.io.OutputStreamWriter.<init>(OutputStreamWriter.java:113) ~[na:1.6.0_26] 
        at org.apache.camel.component.stream.StreamProducer.writeToStream(StreamProducer.java:135) ~[camel-stream-2.8.1.jar:2.8.1] 
        at org.apache.camel.component.stream.StreamProducer.process(StreamProducer.java:83) ~[camel-stream-2.8.1.jar:2.8.1] 
        at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:50) ~[camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78) [camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:114) ~[camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:284) ~[camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:109) ~[camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78) [camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98) [camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89) [camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:69) [camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78) [camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98) [camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89) [camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99) ~[camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78) [camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:318) [camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:209) [camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:305) [camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:102) [camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78) [camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98) [camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89) [camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:69) [camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78) [camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:217) [camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:155) [camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:129) [camel-core-2.8.1.jar:2.8.1] 
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) [na:1.6.0_26] 
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) [na:1.6.0_26] 
        at java.lang.Thread.run(Thread.java:680) [na:1.6.0_26] 


Lorenzo",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-10-27 09:45:48.205,,,no_permission,,Unknown,,,,,,,,,,,214529,,,Thu Oct 27 12:19:03 UTC 2011,,,,,,,0|i021tr:,9897,,,,,,,,,"27/Oct/11 09:45;njiang;I just checked the code, the StreamProducer is the member object of outputStream, that is the key of NPE.
 ","27/Oct/11 12:19;njiang;Applied patch into trunk, camel-2.8.x, camel-2.7.x branch.",,,,,,,,,,,,,,,,,,,,,,
XQuery component does not work with StAXSource out of the box,CAMEL-4584,12528738,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,25/Oct/11 19:11,26/Oct/11 07:26,13/Mar/19 22:19,26/Oct/11 07:26,2.8.2,,,,,,,,,2.8.3,2.9.0,,,camel-saxon,,,,,,0,,,,,,,,,"The new STaXSource type converters cause camel-saxon to fail unit tests as reported by CI servers

Caused by: net.sf.saxon.trans.XPathException: Unknown source class
	at net.sf.saxon.Configuration.buildDocument(Configuration.java:2892)
	at net.sf.saxon.query.StaticQueryContext.buildDocument(StaticQueryContext.java:211)
	at org.apache.camel.component.xquery.XQueryBuilder.createDynamicContext(XQueryBuilder.java:474)

We should implement the same optimized logic as we did today in XSLT to convert to Source if StAX is allowed, as well to avoid leaking resources we need to ensure if InputStream is in use, we should ensure it gets closed.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,214598,,,Wed Oct 26 07:26:37 UTC 2011,,,,,,,0|i021uf:,9900,,,,,,,,,26/Oct/11 07:26;davsclaus;Backported to 2.8.x due the new StAX converters which caused this new exception,,,,,,,,,,,,,,,,,,,,,,,
Using AuthorizationPolicy on a Route prevents Processors from being exposed via JMX,CAMEL-4536,12526679,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,marcozapletal,marcozapletal,11/Oct/11 15:51,23/Oct/11 13:37,13/Mar/19 22:19,23/Oct/11 13:37,2.8.1,,,,,,,,,2.8.3,2.9.0,,,jmx,,,,,,0,,,,,,,,,"Using AuthorizationPolicy on a route (e.g., using .policy(myAuthPolicy) in a Java DSL) prevents that processors on this route are exposed via JMX. 

Steps to reproduce:

-) Start the Camel app in the attached test case (MyRouteBuilder)
-) Open JConsole
-) Connect to the corresponding local process
-) Under ""processors"" only the processors from the route without the policy are shown, but not the ones from the route where a policy is used","Windows 7, Java 1.6.0_23",,,,,,,,,,,,,,,,,,,,11/Oct/11 15:55;marcozapletal;ASF.LICENSE.NOT.GRANTED--JConsole screenshot showing only the processors of the route that does not use a policy.jpg;https://issues.apache.org/jira/secure/attachment/12498618/ASF.LICENSE.NOT.GRANTED--JConsole+screenshot+showing+only+the+processors+of+the+route+that+does+not+use+a+policy.jpg,11/Oct/11 15:52;marcozapletal;policy-jmx-test.zip;https://issues.apache.org/jira/secure/attachment/12498617/policy-jmx-test.zip,,,,,2.0,,,,,,,,,,,,,,,,,,,2011-10-23 13:37:55.901,,,no_permission,,Unknown,,,,,,,,,,,59317,,,Sun Oct 23 13:37:55 UTC 2011,,,,,,,0|i021jr:,9852,,,,,,,,,23/Oct/11 13:37;davsclaus;Thanks for reporting with sample application.,,,,,,,,,,,,,,,,,,,,,,,
NPE thrown when connection is null loses root cause,CAMEL-4533,12526511,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,jbonofre,stu.c,stu.c,10/Oct/11 20:34,12/Oct/11 07:48,13/Mar/19 22:19,12/Oct/11 07:48,2.8.1,,,,,,,,,2.8.2,2.9.0,,,camel-jdbc,,,,,,0,,,,,,,,,"When attempting to run a query against a datasource to which a connection could not be established, the attempt to rollback the transaction (which has not yet started) causes an NPE to be thrown which loses the root cause exception thrown by the driver",,,,,,,,,,,,,,,,,,,,,10/Oct/11 20:37;stu.c;camel-4533.txt;https://issues.apache.org/jira/secure/attachment/12498463/camel-4533.txt,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-10-12 07:47:58.787,,,no_permission,,Unknown,,,,,,,,,,,56967,,,Wed Oct 12 07:48:32 UTC 2011,,,Patch Available,,,,0|i021j3:,9849,,,,,,,,,12/Oct/11 07:47;jbonofre;Fixed on trunk: revision 1182244.,12/Oct/11 07:48;jbonofre;Fixed on camel-2.8.x: revision 1182245.,,,,,,,,,,,,,,,,,,,,,,
Jms endpiont - option maximumBrowseSize is not in use,CAMEL-4433,12522435,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,09/Sep/11 14:58,20/Sep/11 16:32,13/Mar/19 22:19,10/Sep/11 05:37,,,,,,,,,,2.8.2,2.9.0,,,camel-jms,,,,,,0,,,,,,,,,"The JmsEndpoint have a maximumBrowseSize option to limit the number of messages to browse back.
This option is not in use.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,59990,,,2011-09-09 14:58:34.0,,,,,,,0|i020wf:,9747,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
LifecycleStrategy should be started/stopped when CamelContext is starting/stopping,CAMEL-4467,12523700,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,20/Sep/11 12:09,20/Sep/11 12:16,13/Mar/19 22:19,20/Sep/11 12:16,,,,,,,,,,2.8.2,2.9.0,,,camel-core,,,,,,0,,,,,,,,,"The LifecycleStrategy strategies is not start/stopped if they are a Service, such as the DefaultManagementLifecycleStrategy",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,13771,,,2011-09-20 12:09:55.0,,,,,,,0|i0213z:,9781,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bindy Parser not handling Null values in KVP,CAMEL-4198,12513275,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,surya108,surya108,08/Jul/11 15:16,19/Sep/11 19:40,13/Mar/19 22:19,28/Jul/11 07:39,2.7.1,,,,,,,,,2.8.2,2.9.0,,,camel-bindy,,,,,,0,,,,,,,,,"Camel Bindy is not handling null values in KVP. It throws ArrayIndexOutOfBounds Exception.
From the source below if FIX message has a key value pair with null value i.e (eg: 43=1|63=|64=xyz) the key 63 has no value an while parsing it throws exception for keyValuePair[1].

           // Get KeyValuePair
            String[] keyValuePair = s.split(getKeyValuePairSeparator());

            // Extract Key
            int key = Integer.parseInt(keyValuePair[0]);

            // Extract key value
            String value = keyValuePair[1];",developement ,,,,,,,,,,,,,,,,,,,,28/Jul/11 02:49;surya108;BindyKeyValuePairFactory_patch_4198.patch;https://issues.apache.org/jira/secure/attachment/12488057/BindyKeyValuePairFactory_patch_4198.patch,25/Jul/11 01:19;surya108;BindyKeyValuePairFactory_patch_4198.patch;https://issues.apache.org/jira/secure/attachment/12487660/BindyKeyValuePairFactory_patch_4198.patch,28/Jul/11 02:49;surya108;fix.txt;https://issues.apache.org/jira/secure/attachment/12488056/fix.txt,25/Jul/11 02:18;surya108;fix.txt;https://issues.apache.org/jira/secure/attachment/12487666/fix.txt,,,4.0,,,,,,,,,,,,,,,,,,,2011-07-08 15:31:06.039,,,no_permission,,,,,,,,,,,,,13829,,,Thu Jul 28 07:39:09 UTC 2011,,,,,,,0|i01zg7:,9512,,,,,,,,,"08/Jul/11 15:31;davsclaus;Do you want to attempt to provide a patch with a fix?

It seems you may have to check the length of the keyValuePair is > 1 to avoid the NPE.

And if possible an unit test would be really good as well.","08/Jul/11 15:31;davsclaus;You can read about contributing here
http://camel.apache.org/contributing.html","08/Jul/11 15:37;surya108;Hi Claus,
 
Thanks for providing information on how to contribute, I will attempt to fix this one and keep posted.

Regards,",23/Jul/11 11:02;davsclaus;Any update on a patch?,"24/Jul/11 06:23;surya108;Just started working on it, will submit the patch once done.","25/Jul/11 01:19;surya108;Patch for Issue 4198 is attached.

Fix in file BindyKeyValuePairFactory.java in package org.apache.camel.dataformat.bindy.

Fix made to check KeyValuePair String[] length>1.

No Unit tests added or updated. Only updated input fix message used for testing in Unit Tests. Added new tag with no value for tag 55.
""file://src/test/data/fix?noop=true"";

Without patch unit tests would fail for problem stated in the jira description.

Fix now handles key:value in fix message with no 'value' populated as well.



",25/Jul/11 02:18;surya108;updated test file with tag 55 (no value).,"25/Jul/11 19:41;davsclaus;Surya

Can you re-attach the files and make sure to [x] in grant license to Apache, when you attach the files?
We cannot accept any patches if this is not done.

The file icon should have an Apache feather, when you have done the [x]","28/Jul/11 02:49;surya108;Reattaching files with ""Grant License to ASF"".",28/Jul/11 07:39;davsclaus;Thanks for the patch.,,,,,,,,,,,,,,
Response body lost when an HTTP error code is returned,CAMEL-4324,12518447,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,cedric.delaunois,cedric.delaunois,10/Aug/11 14:01,19/Sep/11 18:12,13/Mar/19 22:19,02/Sep/11 09:20,2.6.0,2.7.0,2.8.0,,,,,,,2.8.2,2.9.0,,,camel-restlet,,,,,,0,,,,,,,,,"When a REST service returns an HTTP error code (e.g. 404) with some content in the response body, this body is not correctly copied into the exception.
This results e.g. in ${exception.responseBody} having a value like ""org.restlet.data.Response@17bf0a7"" in the following route fragment :

<doTry>
    <to uri=""restlet:http://my.service.com/ws/{id}""/>
    <doCatch>
        <exception>org.apache.camel.CamelException</exception>
        <log message=""body is : ${exception.responseBody}""/>
    </doCatch>
</doTry>

The problem is probably due to the statement (class org.apache.camel.component.restlet.RestletProducer, method populateRestletProducerException) :
{code}
   String copy = response.toString();
{code}

that should be instead something like :
{code}
   String copy = null;
   if (response.getEntity() != null) {
       // get content text
       copy = response.getEntity().getText();
   }
{code}

",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-08-13 11:18:16.15,,,no_permission,,Novice,,,,,,,,,,,60185,,,Fri Sep 02 09:20:40 UTC 2011,,,,,,,0|i0208f:,9639,,,,,,,,,13/Aug/11 11:18;davsclaus;Thanks for reporting Cedric do you want to try to work on a patch? with an unit test that reproduces the issue and proves the fix works as expected?,"13/Aug/11 16:15;cedric.delaunois;Claus, I won't be able to work on this for the next 3 weeks. If it is ok for you to wait, then I will work on the patch.",02/Sep/11 09:20;njiang;Applied patch into trunk.,,,,,,,,,,,,,,,,,,,,,
dump as xml fails if message body is already xml,CAMEL-4283,12515781,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,29/Jul/11 14:43,19/Sep/11 18:09,13/Mar/19 22:19,29/Jul/11 14:57,2.8.0,,,,,,,,,2.8.2,2.9.0,,,camel-core,,,,,,0,,,,,,,,,MessageHelper.dumpAsXml has a problem if the message body is already xml.,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,13845,,,2011-07-29 14:43:39.0,,,,,,,0|i01zzb:,9598,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
XStreamDataFormat has NPE when marshalling route to XML,CAMEL-4460,12523421,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,17/Sep/11 10:04,17/Sep/11 10:36,13/Mar/19 22:19,17/Sep/11 10:36,,,,,,,,,,2.8.2,2.9.0,,,camel-core,,,,,,0,,,,,,,,,"You can get a NPE when marshalling a route to XML which has <xstream> in the route

Caused by: java.lang.NullPointerException
	at org.apache.camel.model.dataformat.XStreamDataFormat$ConvertersAdapter.marshal(XStreamDataFormat.java:170)
	at org.apache.camel.model.dataformat.XStreamDataFormat$ConvertersAdapter.marshal(XStreamDataFormat.java:165)
	at com.sun.xml.internal.bind.v2.runtime.reflect.AdaptedAccessor.get(AdaptedAccessor.java:61)
	... 55 more",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,13768,,,2011-09-17 10:04:19.0,,,,,,,0|i0212f:,9774,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StreamResequencer poisoned by bad Exchange,CAMEL-4401,12520947,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,dgtombs,dgtombs,31/Aug/11 17:15,14/Sep/11 09:31,13/Mar/19 22:19,13/Sep/11 15:43,2.7.1,,,,,,,,,2.9.0,,,,camel-core,,,,,,0,,,,,,,,,"If a StreamResequencer's configured Expression returns null for an Exchange (e.g., if a header does not exist) and the resequencer's pipeline is currently empty, the bad Exchange will be added to the pipeline. ResequencerEnginer.insert() succeeds in calling sequence.add() with the bad Exchange, but throws an Exception when calling sequence.successor(). This results in the message ending up at the Error Handler but the bad Exchange still in the Engine's sequence. Probably insert() should be probably be more transactional.

After this happens:
1) Trying to add a further exchange (even a ""good"" one) results in an Exception when calling sequence.add().
2) ResequencerEngine.deliverNext() results in an Exception so no further messages will be delievered.

I will attach a unit test to reproduce when I get a chance.","JDK 1.6.0_20, Linux x86_64",,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-09-13 13:02:17.436,,,no_permission,,Unknown,,,,,,,,,,,60679,,,Wed Sep 14 09:31:30 UTC 2011,,,,,,,0|i020pj:,9716,,,,,,,,,31/Aug/11 17:17;dgtombs;A possible kludge-fix could be to compare() every Exchange with itself before adding to the Engine's sequence. This should weed out un-comparable Exchanges.,13/Sep/11 13:02;davsclaus;David do you have an unit test reproducing this issue?,13/Sep/11 14:19;davsclaus;I can reproduce the issue and I am working on a fix.,13/Sep/11 15:43;davsclaus;Resequencer will now validate the incoming Exchange before enqueing. If invalid an exception is thrown. Added new option ignoreInvalidExchanges to ignore invalid exchanges.,"14/Sep/11 00:57;dgtombs;Thanks for the fix. Are you sure you don't want to just catch IllegalArugmentException in StreamResequencer.process(), though?","14/Sep/11 09:31;davsclaus;Thanks David, changed the code accordingly.",,,,,,,,,,,,,,,,,,
Error in camel-restlet feature definition,CAMEL-4439,12522701,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,gertvanthienen,gertvanthienen,gertvanthienen,12/Sep/11 07:01,12/Sep/11 07:20,13/Mar/19 22:19,12/Sep/11 07:20,2.8.0,,,,,,,,,2.8.2,2.9.0,,,,,,,,,0,,,,,,,,,"The current contents of the camel-features.xml file reads:

{code}
<feature name='camel-restlet' version='2.7.1-fuse-00-43' resolver='(obr)'>
  <feature version='2.7.1-fuse-00-43'>camel-core</feature>
  <bundle dependency=""true"">mvn:org.apache.camel/camel-restlet/2.7.1-fuse-00-43</bundle>
  <bundle>mvn:http://maven.restlet.org!org.restlet.jse/org.restlet/2.0.5</bundle>
</feature>
{code}

It actually should read http://fernandoribeiro.eti.br/2011/09/12/bug-in-fuse-4-4/ (Thanks to Fernando Ribeiro for the heads up!)",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-09-12 07:20:31.857,,,no_permission,,Unknown,,,,,,,,,,,13777,,,Mon Sep 12 07:20:31 UTC 2011,,,,,,,0|i020xr:,9753,,,,,,,,,"12/Sep/11 07:07;gertvanthienen;Fixed in trunk by Freeman (http://svn.apache.org/viewvc?view=revision&revision=1164544)
and marked the restlet jar as a dependency in OBR resolution in http://svn.apache.org/viewvc?view=revision&revision=1169620",12/Sep/11 07:20;davsclaus;Backported to 2.8 branch,,,,,,,,,,,,,,,,,,,,,,
CxfRsProducer clientFactoryBean's bus should be initialized,CAMEL-4436,12522539,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,wtam,wtam,wtam,10/Sep/11 03:12,10/Sep/11 16:30,13/Mar/19 22:19,10/Sep/11 05:20,2.8.0,,,,,,,,,2.8.2,2.9.0,,,camel-cxf,,,,,,0,,,,,,,,,"This defect only manifests itself if an application hosts more than one CamelContext.  The first CamelContext contained by a Spring application context that does not have a custom bus (e.g. any http conduit configurations) while the second Spring application/Camel context does have a custom bus.

The symptom is when the application sends an message to the cxfrs endpoint in the second context (that contains custom bus), the cxfrs endpoint picks up the wrong bus.  It picks up the default cxf in the first application context.

Furthermore, this defect only affects cxfrs producer using URI address format. E.g.
  <to uri=""cxfrs://https://localhost:8181/CxfRsProducerTest/""/>

It does not affect cxfrs addresses defined as a bean.  E.g.
  <to uri=""cxfrs://bean://rsClientHttps""/>
  <cxf:rsClient id=""rsClientHttps"" address=""https://localhost:8181/CxfRsProducerTest/""/>

 
",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,13770,,,Sat Sep 10 16:30:00 UTC 2011,,,,,,,0|i020x3:,9750,,,,,,,,,"10/Sep/11 05:20;wtam;Committed revision 1167448 - 2.9.0.x
Committed revision 1167458 - 2.8.2.x
","10/Sep/11 16:30;wtam;r1167555 - 2.9.0.x
r1167556 - 2.8.2.x",,,,,,,,,,,,,,,,,,,,,,
camel-ftp - Using tempFileName option should use the separator option to allow control of path separators in the generated file name,CAMEL-4252,12514759,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,20/Jul/11 08:20,02/Sep/11 09:55,13/Mar/19 22:19,20/Jul/11 16:18,2.7.2,2.8.0,,,,,,,,2.8.1,2.9.0,,,camel-ftp,,,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/FTP-temp-file-not-being-created-correctly-on-Windows-Camel-2-7-2-tp4591581p4591581.html",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,13842,,,2011-07-20 08:20:47.0,,,,,,,0|i01zs7:,9566,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TraceInterceptor does not work correctly for AsyncProcessing,CAMEL-4246,12514569,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,yaytay,yaytay,19/Jul/11 11:34,02/Sep/11 09:51,13/Mar/19 22:19,22/Jul/11 11:33,2.7.1,,,,,,,,,2.8.1,2.9.0,,,camel-core,,,,,,0,,,,,,,,,"TraceEventHandlers are not called correctly when a node is processed asynchronously.

From  org.apache.camel.processor.interceptor.TraceInterceptor:
            try {
                // special for interceptor where we need to keep booking how far we have routed in the intercepted processors
                if (node.getParent() instanceof InterceptDefinition && exchange.getUnitOfWork() != null) {
                    TracedRouteNodes traced = exchange.getUnitOfWork().getTracedRouteNodes();
                    traceIntercept((InterceptDefinition) node.getParent(), traced, exchange);
                }

                // process the exchange
                try {
                    sync = super.process(exchange, callback);
                } catch (Throwable e) {
                    exchange.setException(e);
                }
            } finally {
                // after (trace out)
                if (shouldLog && tracer.isTraceOutExchanges()) {
                    logExchange(exchange);
                    traceExchangeOut(exchange, traceState);
                }
            }

As it is this results in traceExchangeOut being called before the callback, which is wrong.
The call to super.process needs to wrap the callback to call traceExchangeOut (and the finally block shouldn't run if the process is asynch).

This isn't a regression, but the change to make more routes asynchronous makes it more noticeable.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,13838,,,2011-07-19 11:34:51.0,,,,,,,0|i01zqv:,9560,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MDCUnitOfWork behaviour incorrect with nested routes,CAMEL-4274,12515477,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,yaytay,yaytay,27/Jul/11 06:11,02/Sep/11 09:47,13/Mar/19 22:19,27/Jul/11 07:25,2.8.0,,,,,,,,,2.8.1,2.9.0,,,camel-core,,,,,,0,,,,,,,,,"MDCUnitOfWork.clear() removes any content set by MDCUnitOfWork from MDC.
If there are two separate exchange running at the same time in the same thread, as happens when a ProduceTemplate is used from Java, this is incorrect because the MDC of the parent is cleared after the child completes.
Conceptually the MDC should be a stack, but MDC only accepts strings so the simplest thing to do is for MDCUnitOfWork to replace the previous values in clear().",,,,,,,,,,,,,,,,,,,,,27/Jul/11 06:14;yaytay;Camel-MDC.patch;https://issues.apache.org/jira/secure/attachment/12487934/Camel-MDC.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-07-27 07:25:39.401,,,no_permission,,,,,,,,,,,,,13831,,,Wed Jul 27 07:25:39 UTC 2011,,,Patch Available,,,,0|i01zxb:,9589,,,,,,,,,27/Jul/11 06:14;yaytay;Patch to reset MDC back to original values in clear().,27/Jul/11 07:25;davsclaus;Thanks for the patch.,,,,,,,,,,,,,,,,,,,,,,
Fail to close stream in DefaultPropertiesResolver,CAMEL-4265,12515292,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,edge,edge,25/Jul/11 17:55,02/Sep/11 09:46,13/Mar/19 22:19,26/Jul/11 07:15,2.7.3,2.8.0,,,,,,,,2.8.1,2.9.0,,,camel-core,,,,,,0,,,,,,,,,"    protected Properties loadPropertiesFromFilePath(CamelContext context, String path) throws IOException {
        if (path.startsWith(""file:"")) {
            path = ObjectHelper.after(path, ""file:"");
        }
        InputStream is = new FileInputStream(path);
        Properties answer = new Properties();
        answer.load(is);
        return answer;
    }

    Stream not closed before return, as well as in another method: loadPropertiesFromClasspath.    ",Any,,,,,,,,,,,,,,,,,,,,26/Jul/11 06:24;edge;close_inputstream.patch;https://issues.apache.org/jira/secure/attachment/12487796/close_inputstream.patch,26/Jul/11 04:59;edge;close_inputstream.patch;https://issues.apache.org/jira/secure/attachment/12487791/close_inputstream.patch,,,,,2.0,,,,,,,,,,,,,,,,,,,2011-07-25 19:40:17.106,,,no_permission,,,,,,,,,,,,,13840,,,Fri Jul 29 14:28:42 UTC 2011,,,,,,,0|i01zvb:,9580,,,,,,,,,"25/Jul/11 19:40;davsclaus;Thanks for reporting. Do you want to try to provide a patch to fix this?

See more details here
http://camel.apache.org/contributing.html","26/Jul/11 04:59;edge;I attached a file, hope it's in needed format.

No test case could be provided since it is a simple close operation surrounded by try ... finally.","26/Jul/11 05:59;davsclaus;Edge, can you re-attach the patch and make sure to grant license to Apache. We cannot accept patches without the license.","26/Jul/11 06:24;edge;Didn't notice the license choice, this time would be ok.","26/Jul/11 07:15;davsclaus;Thanks for the patch.

I polished it a bit to use IOHelper to close the resource.","29/Jul/11 12:58;edge;Can I modify it's fixed version, to add 2.8.1？","29/Jul/11 13:01;davsclaus;Please dont change the fix versions as its only committers who does this, when he commits/backports.","29/Jul/11 13:24;davsclaus;When we are to cut a 2.8.1 release, we will look at all the bugs fixed for Camel 2.9 and backport the bugs that can be done and make sense. I am sure this bug will be backported. So just have patience.","29/Jul/11 14:28;edge;ok, thanks.",,,,,,,,,,,,,,,
xslt component - Cannot load xslt file from file system,CAMEL-4305,12517903,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,04/Aug/11 09:43,02/Sep/11 09:36,13/Mar/19 22:19,04/Aug/11 09:45,2.8.0,,,,,,,,,2.8.1,2.9.0,,,camel-spring,,,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/Custom-URIResolver-for-Camel-tp4665485p4665485.html

The Spring IO resource is a bit pants, as you ask for it to give an input stream, and then it fails doing that for a plain file url.
Instead it gives you an URL connection, and you get a unknown host exception.

",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Novice,,,,,,,,,,,13819,,,2011-08-04 09:43:34.0,,,,,,,0|i02047:,9620,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Camel Bindy Parser One to Many KvP Unmarshall Issue,CAMEL-4311,12518098,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,surya108,surya108,06/Aug/11 01:41,02/Sep/11 09:32,13/Mar/19 22:19,07/Aug/11 10:32,2.7.0,2.7.2,2.7.3,2.8.0,,,,,,2.8.1,2.9.0,,,camel-bindy,,,,,,0,,,,,,,,,"Bindy KvP unmarshall issue. 

While unmarshalling FIX messages, camel-bindy causing inconsistencies if the incoming fix messages are defined to map using 'OneToMany' annotations.

In a given route for eg:

 BindyKeyValuePairDataFormat kvpBindyDataFormat = new BindyKeyValuePairDataFormat(""org.apache.camel.dataformat.bindy.model.fix.complex.onetomany"");
        public void configure() {
            from(URI_DIRECT_START).unmarshal(kvpBindyDataFormat).to(URI_MOCK_RESULT);
        }

kvpBindyDataFormat is single instance for multiple threads and with in 'BindyKeyValuePairFactory' class instance varialbe  below is shared across multiple threads causing data inconsistencies.

private Map<String, List<Object>> lists = new HashMap<String, List<Object>>(); 

Values from previous thread/messages are retained in the current thread causing issues.

For eg in the test case: public class BindyComplexOneToManyKeyValuePairUnMarshallTest extends CommonBindyTest 

if we send another message  with no repeating groups are sent.

String message2 = ""8=FIX 4.19=2034=135=049=INVMGR56=BRKR"" + ""1=BE.CHM.00111=CHM0001-0158=this is a camel - bindy test"" 
        				  + ""10=220"";

The output message has repeating group data from message processed in earlier thread are pouplated causing data inconsistencies.

Please suggest the fix considering multi-threading scenario. I am willing to volunteer for the fix.

Regards,
Surya



 ","Windows, Linux ",,,,,,,,,,,,,,,,,,,,06/Aug/11 20:21;surya108;BindyComplexOneToManyKeyValuePairUnMarshallTest_patch_4311.txt;https://issues.apache.org/jira/secure/attachment/12489587/BindyComplexOneToManyKeyValuePairUnMarshallTest_patch_4311.txt,06/Aug/11 20:21;surya108;BindyKeyValuePairDataFormat_patch_4311.txt;https://issues.apache.org/jira/secure/attachment/12489588/BindyKeyValuePairDataFormat_patch_4311.txt,06/Aug/11 20:25;surya108;BindyKeyValuePairFactory_patch_4311.txt;https://issues.apache.org/jira/secure/attachment/12489590/BindyKeyValuePairFactory_patch_4311.txt,,,,3.0,,,,,,,,,,,,,,,,,,,2011-08-06 09:46:50.241,,,no_permission,,Moderate,,,,,,,,,,,62853,,,Sun Aug 07 10:32:13 UTC 2011,,,,,,,0|i0205j:,9626,,,,,,,,,06/Aug/11 09:46;davsclaus;You are welcome to try to fix this and work on a patch.,"06/Aug/11 20:20;surya108;changed few files to handle instance variable causing issues while parsing messages in multi threaded situation.

Changed instance variable to local.

added new method     
public void bind(List<String> data, Map<String, Object> model, int line, Map<String, List<Object>> lists) throws Exception {

Map<String, List<Object>> lists was instance variable root cause of bug.

patches for two java classes and 1 test case. Existing test case updated, sending multiple messages would cause test case to fail without the fix.

Please review and let me know if anything else need to be updated.

Regards,
Surya
",06/Aug/11 20:21;surya108;patch files for 4133.,06/Aug/11 20:25;surya108;update comments in patch file. ,07/Aug/11 10:32;davsclaus;Thanks for the patch. Keep 'em coming :),,,,,,,,,,,,,,,,,,,
"Ftp consumer using done file should cater for if stepwise has been enabled, and thus the done file path is to be calculated differently",CAMEL-4352,12519319,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,18/Aug/11 17:07,02/Sep/11 09:20,13/Mar/19 22:19,18/Aug/11 17:45,2.6.0,,,,,,,,,2.8.1,2.9.0,,,camel-ftp,,,,,,0,,,,,,,,,The workaround is to use ${file:onlyname} or not using stepwise.,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Moderate,,,,,,,,,,,13794,,,Thu Aug 18 17:07:46 UTC 2011,,,,,,,0|i020en:,9667,,,,,,,,,"18/Aug/11 17:07;davsclaus;See nabble
http://camel.465427.n5.nabble.com/doneFileName-doesn-t-seem-to-work-tp4704701p4704701.html",,,,,,,,,,,,,,,,,,,,,,,
"Camel-netty option ""encoder"" and ""decoder"" does not work",CAMEL-4367,12519740,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,szabi,szabi,22/Aug/11 21:49,26/Aug/11 14:03,13/Mar/19 22:19,26/Aug/11 14:03,2.4.0,2.5.0,2.6.0,2.7.0,2.7.1,2.7.2,2.7.3,2.8.0,,2.8.1,2.9.0,,,camel-netty,,,,,,0,,,,,,,,,"Contrary to the documentation, the ""encoder"" and ""decoder"" option is unusable as it's value is taken as-is instead of resolving the references using the registry.

This bug was introduced in the revision 960621 as part of CAMEL-2907.

Patch can be found at https://github.com/szabolcsberecz/camel/commit/b3bcc8dd284575c931048ea410c44577474e25dd",,,,,,,,,,,,,,,,,,,,,23/Aug/11 12:57;szabi;CAMEL-4367.patch;https://issues.apache.org/jira/secure/attachment/12491339/CAMEL-4367.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-08-23 00:47:07.539,,,no_permission,,Unknown,,,,,,,,,,,13789,,,Fri Aug 26 14:03:04 UTC 2011,,,Patch Available,,,,0|i020hz:,9682,Regression,,,,,,,,"23/Aug/11 00:47;njiang;Hi Szabolcs,

Thanks for the patch. 
Can you submit the patch to the JIRA and grant it with Apache license ?
So I can apply it into trunk.

Willem","23/Aug/11 07:48;edge;Hi, all

Actually I don't see it as a bug in this case, the documentation clearly says that when ""encoder"" and ""decoder"" is used, the property value should be a class' name inheriting org.jboss.netty.channel.ChannelDownStreamHandler/org.jboss.netty.channel.ChannelUpStreamHandler, if you need to resolve the class from registry, please use the ""encoders"" and ""decoders"".

Although it's a good idea that the ""encoder"" and ""decoder"" property can also be resolved from registry, please make sure that the call to 

    EndpointHelper.setReferenceProperties(component.getCamelContext(), this, parameters);

doesn't introduce any side-effects. ","23/Aug/11 08:16;szabi;Hi all,

It looks like I misunderstood the documentation. Anyway, if you think it's a good idea to use the registry for these two options, I will submit the patch.

Actually, the call to setReferenceProperties does introduce side-effects as it will try to resolve from registry every option value with a leading ""#"". The question is, do you see it as a bad thing?

If you would rather only have the ""encoder"" and ""decoder"" option resolved from registry, I will update the patch.

Szabolcs","23/Aug/11 08:23;njiang;I just checked the camel-netty wiki page, it said it supports the encoder and decoder option, the ""#"" is used for reference in camel by default, I don't think it is wrong.

@Szabolcs
I'm OK with your patch, once you submit the patch, I will be happy to apply it into trunk. ","23/Aug/11 17:58;edge;Well, as I said , I don't see the original implementation as a bug, so if all others accept the new way -- maybe as an improvement -- we will check to make sure the side-effects don't affect our current code. Of course as Jiang said, if one use ""#"" in property value for reference as default, there should be no harm.",26/Aug/11 14:03;njiang;Applied patch into trunk and 2.8.x branch.,,,,,,,,,,,,,,,,,,
Freemarker - Loading template from file system fails,CAMEL-4365,12519691,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,22/Aug/11 14:14,22/Aug/11 14:19,13/Mar/19 22:19,22/Aug/11 14:19,2.9.0,,,,,,,,,2.9.0,,,,camel-freemarker,,,,,,0,,,,,,,,,"This only affects Camel 2.9.

",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,39729,,,2011-08-22 14:14:12.0,,,,,,,0|i020hj:,9680,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CxfNamespaceHandler should not just set the TCCL and not set it back,CAMEL-4137,12511194,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,njiang,njiang,22/Jun/11 03:44,15/Aug/11 15:19,13/Mar/19 22:19,15/Aug/11 15:19,2.8.0,,,,,,,,,2.8.1,2.9.0,,,camel-cxf,,,,,,0,,,,,,,,,"Current CxfNamespaceHandler set the TCCL to parser the cxfEndpoint, but it never reset the TCCL back.
It will cause some trouble if there are lots of Blueprint Namespcehandlers are called by the same thread.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-06-22 04:10:01.263,,,no_permission,,,,,,,,,,,,,13799,,,Mon Aug 15 15:19:22 UTC 2011,,,,,,,0|i01z2n:,9451,,,,,,,,,22/Jun/11 03:51;njiang;Applied patch into trunk.,"22/Jun/11 04:10;joed;This breaks the wsdl service.

Caused by: java.lang.NullPointerException
	at org.apache.cxf.wsdl11.WSDLServiceFactory.<init>(WSDLServiceFactory.java:92)
	at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.buildServiceFromWSDL(ReflectionServiceFactoryBean.java:369)
	at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.initializeServiceModel(ReflectionServiceFactoryBean.java:499)
	at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.create(ReflectionServiceFactoryBean.java:241)
	at org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean.create(JaxWsServiceFactoryBean.java:202)
	at org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory.createEndpoint(AbstractWSDLBasedEndpointFactory.java:101)
	at org.apache.cxf.frontend.ServerFactoryBean.create(ServerFactoryBean.java:157)
	at org.apache.cxf.jaxws.JaxWsServerFactoryBean.create(JaxWsServerFactoryBean.java:202)
	at org.apache.camel.component.cxf.CxfConsumer.<init>(CxfConsumer.java:226)
	at org.apache.camel.component.cxf.CxfEndpoint.createConsumer(CxfEndpoint.java:132)
","23/Jun/11 14:36;njiang;I just did some work to find out we should set right ClassLoader for the BluepringBus.
Now I just create CXF-3615 for it.",27/Jun/11 09:10;davsclaus;Whats the status of this? Is there more work for Camel 2.8? We want to close down and cut a release.,"27/Jun/11 09:32;njiang;This issue need to a new release of CXF, Current solution just a workaround, it has some side effects.
I think we can post it to Camel 2.9.0, as we are closing to the Apache Camel 2.8.0 release.",28/Jun/11 08:17;davsclaus;Okay moving this to Camel 2.9 so Willem can fix it when CXF 2.4.x has been released that has the fix.,15/Aug/11 15:19;njiang;Applied patch into trunk and Camel 2.8.x after upgrading CXF to 2.4.2.,,,,,,,,,,,,,,,,,
NullPointerException when catching exceptions,CAMEL-4326,12518453,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,cedric.delaunois,cedric.delaunois,10/Aug/11 14:36,10/Aug/11 17:31,13/Mar/19 22:19,10/Aug/11 17:31,2.6.0,2.7.0,2.8.0,,,,,,,2.8.1,2.9.0,,,camel-core,,,,,,0,,,,,,,,,"The following (blueprint) route produces a NullPointerException :

{code:xml}
<route id=""restproxy"">           
    <from uri=""restlet:http://localhost:9080/oe/ws/offre/{id}""/>
    <doTry>
        <to uri=""restlet:http://bla.dot.com:8080/oe/ws/offre/{id}""/>
        <doCatch>
            <exception>org.apache.camel.component.restlet.RestletOperationException</exception>
        </doCatch>
    </doTry>
</route>
{code}

This happens for when catching any exception classes that does not belong to camel-core or to the classpath (in a OSGI environment).

The NullPointerException is caused by the following statement in class org.apache.camel.model.CatchDefinition, method createExceptionClasses() :
{code}
Class<Exception> type = CastUtils.cast(ObjectHelper.loadClass(name, getClass().getClassLoader()));
{code}
i.e. the class is not found by the class loader.

A work-around is to activate dev:dynamic-import on the camel-core bundle.
","ServiceMix 4.x (OSGI environment), Blueprint route definition.",,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,13810,,,2011-08-10 14:36:15.0,,,,,,,0|i0208v:,9641,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Camel does not work out of the box in Java webstart, due classpath scanning is not possible",CAMEL-4026,12508608,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,jn,jn,28/May/11 01:16,23/Jul/11 11:07,13/Mar/19 22:19,23/Jul/11 11:07,2.7.1,,,,,,,,,2.8.0,,,,camel-core,,,,,,0,webstart,,,,,,,,"This is a regression.  Worked fine for us in Camel 2.5.0, fails in Camel 2.7.1.  

Easy to reproduce.  Run the following code in a webstart-deployed application:

CamelContext context = new DefaultCamelContext();
context.getTypeConverterRegistry(); 

Which produces the following exception:

2011-05-26 16:52:57,550 [javawsApplicationMain] ERROR test.TestCamelContext - Failed
org.apache.camel.RuntimeCamelException: org.apache.camel.TypeConverterLoaderException: Failed to load type converters because of: Cannot find any type converter classes from the following packages: [org.apache.camel.component.file, org.apache.camel.component.bean, org.apache.camel.converter]
    at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1139)
    at org.apache.camel.impl.DefaultCamelContext.getTypeConverter(DefaultCamelContext.java:986)
    at org.apache.camel.impl.DefaultCamelContext.getTypeConverterRegistry(DefaultCamelContext.java:1001)
    at test.TestCamelContext.test(TestCamelContext.java:54)
    at test.TestCamelContext.main(TestCamelContext.java:48)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
    at java.lang.reflect.Method.invoke(Unknown Source)
    at com.sun.javaws.Launcher.executeApplication(Unknown Source)
    at com.sun.javaws.Launcher.executeMainClass(Unknown Source)
    at com.sun.javaws.Launcher.doLaunchApp(Unknown Source)
    at com.sun.javaws.Launcher.run(Unknown Source)
    at java.lang.Thread.run(Unknown Source)
Caused by: org.apache.camel.TypeConverterLoaderException: Failed to load type converters because of: Cannot find any type converter classes from the following packages: [org.apache.camel.component.file, org.apache.camel.component.bean, org.apache.camel.converter]
    at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.load(AnnotationTypeConverterLoader.java:79)
    at org.apache.camel.impl.converter.BaseTypeConverterRegistry.loadTypeConverters(BaseTypeConverterRegistry.java:395)
    at org.apache.camel.impl.converter.DefaultTypeConverter.doStart(DefaultTypeConverter.java:41)
    at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:67)
    at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:54)
    at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60)
    at org.apache.camel.impl.DefaultCamelContext.startServices(DefaultCamelContext.java:1613)
    at org.apache.camel.impl.DefaultCamelContext.addService(DefaultCamelContext.java:899)
    at org.apache.camel.impl.DefaultCamelContext.getTypeConverter(DefaultCamelContext.java:984)
    ... 12 more
",Windows 7,,,,,,,,,,,,,,,,,,,,31/May/11 20:10;jn;camel webstart trace.txt;https://issues.apache.org/jira/secure/attachment/12480989/camel+webstart+trace.txt,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-05-28 13:30:10.217,,,no_permission,,,,,,,,,,,,,67106,,,Sat Jul 23 11:07:07 UTC 2011,,,,,,,0|i01ye7:,9341,,,,,,,,,"28/May/11 01:34;jn;Some further information which might be useful.

This may be the same issue as CAMEL-522 (resolved in Camel 1.5.0).  In that issue, it was stated that using the version-based protocol (something like <jar href=""camel-core.jar"" version=""1.4.01""/>) fails, while including the version in the jar name  (something like <jar href=""camel-core-1.4.01.jar""/>) succeeds.  I have only tested the version-based protocol, and this is the case which fails for me.

Andreas Kuhtz suggested on the mailing list [1] that the issue is caused by the webstart classloader not returning the correct url for the jar.  This assessment seems correct to me, as I confirmed that a resource url for package ""test"" was returned from the classloader as:

jar:http://localhost:8080/camel-webstart/lib/camel-webstart.jar!/test/

when the jar actually originated from:

http://localhost:8080/camel-webstart/lib/camel-webstart__V2.21-20110527-e55f306.jar

... where 2.21-20110527-e55f306 is the version.

The classloader is of type com.sun.jnlp.JNLPClassLoader.  I haven't tested this, but it seems like method ""JarFile getJarFile(URL)"" might be used to convert from the url to the cached jar file.  Unfortunately, making use of this method would bind you to the internal com.sun implementation. :(

[1] http://camel.465427.n5.nabble.com/addTypeConverter-does-not-clear-misses-in-BaseTypeConverterRegistry-td4288871.html",28/May/11 01:39;jn;Reference mailing list thread at http://www.mail-archive.com/users@camel.apache.org/msg15125.html,"28/May/11 13:30;davsclaus;Its in fact not a regression. Java Web Start doesn't work with classpath scanning over http urls.
","28/May/11 19:52;jn;I guess whether or not it's a regression is a matter of perspective.  From my perspective, the camel context throws an exception when starting up in 2.7.1, whereas it started up fine with no exception in 2.5.0, and I would call that a regression.  Regardless of what you call it, Camel can't start up in webstart, and that's a problem for us. ",29/May/11 08:16;davsclaus;In the past Camel will silently ignore this issue and still startup. But the type converters wont be loaded properly. Now Camel detects this problem and fails starting. ,29/May/11 08:18;davsclaus;Can you try enabling TRACE logging on: org.apache.camel.impl.converter package. And then post the log + full stacktraces. Then we can take a look and maybe spot something we can fix.,"30/May/11 10:14;akuhtz;The problem can be solved easily if you use Spring to configure the CamelContext as described here: http://www.mail-archive.com/users@camel.apache.org/msg15126.html

Starting from Camel 2.8 you even no longer need to register the TypeConverters from the core package if I get this ticket right: https://issues.apache.org/jira/browse/CAMEL-3953

A step to solve this problem with pure java created CamelContext would be to check what happens in SpringCamelContext if a bean that implements PackageScanClassResolver is defined and check if this code can be used.","31/May/11 20:10;jn;As requested, Attaching log file with log level TRACE.","01/Jun/11 11:06;davsclaus;Jim do you have some simple Java code to start a Java application as Java Web Start? I would like to experiment with that a big, to dig up some ideas what we can do.
","01/Jun/11 21:56;jn;Claus, I'm not aware of any way to start a webstart app programmatically from Java.  I've been doing a full deployment for my testing.  This involves:  (1) building your code into a jar; (2) signing *all* jars (your jar and third party jars) with the *same* certificate; you can use a self-generated certificate for this; (3) creating a webstart descriptor file (*.jnlp) which points to your jars and main class; (4) configuring/deploying the JnlpDownloadServlet on a servlet container such as tomcat (this servlet is needed to support the version-based download protocol [1]); (5) deploying your jars and jnlp on the servlet container; (6) using a browser to request the jnlp file.

More info can be found in the webstart dev guide:
http://download.oracle.com/javase/1,5.0/docs/guide/javaws/developersguide/contents.html

Obviously this is a lot of work.  We have ant scripts that automate most of this for us, but they are tied to our build process (using ivy for pulling in dependencies, for example), so I can't just send that to you.

[1] Note that the problem I reproduced was with the version-based protocol.  I have not tried without the version-based protocol, but I suspect the problem might not exist without.
",02/Jun/11 13:00;davsclaus;Do you use any other camel JARs than camel-core in your webstart project? And if so which ones do you use?,"02/Jun/11 20:30;jn;The jars I'm using are camel-core, commons-management, slf4j-api, slf4j-log4j12, log4j, and the jar containing my test code.","05/Jun/11 11:07;davsclaus;Jms since you dont use any extra camel JARs then you didnt hit any issues with not being able to discover type converters on the classpath with java web start.

","05/Jun/11 23:53;jn;As far as I know, we're not using or relying on any type converters in our application.  The issue which impacts us is the fact that the DefaultCamelContext throws an exception during startup in our application, when deployed via webstart/jnlp.",23/Jul/11 11:07;davsclaus;Should be improved in Camel 2.8,,,,,,,,,
Running the camel-example-spring-javaconfig fails on startup,CAMEL-4219,12513891,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,13/Jul/11 08:57,13/Jul/11 09:09,13/Mar/19 22:19,13/Jul/11 09:09,,,,,,,,,,2.8.0,,,,examples,,,,,,0,,,,,,,,,This example fails when running mvn camel:run as stated in the readme.txt file.,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,13870,,,2011-07-13 08:57:53.0,,,,,,,0|i01zkv:,9533,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Using adviceWith 2 times or more in Java DSL with a context scoped onException causing the 1st advised route to not work as expected,CAMEL-4184,12513119,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,07/Jul/11 10:29,07/Jul/11 16:16,13/Mar/19 22:19,07/Jul/11 16:16,2.8.0,,,,,,,,,2.8.0,,,,camel-core,,,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/intercept-using-adviceWith-tp4520468p4520468.html

",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,13875,,,Thu Jul 07 13:38:19 UTC 2011,,,,,,,0|i01zd3:,9498,,,,,,,,,"07/Jul/11 13:38;davsclaus;Okay this is a bit trickier as when you do the advice on the existing routes, the previous context scoped OnException have been merged into the routes, as if they where route scoped. So when the merge is done, the OnException now appear as route scoped instead of context scoped.
",,,,,,,,,,,,,,,,,,,,,,,
Label of marshal and unmarshal processors do not appear in trace output,CAMEL-4167,12512343,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,cmoulliard,lucien.schmitz@ubs.com,lucien.schmitz@ubs.com,30/Jun/11 16:16,07/Jul/11 03:20,13/Mar/19 22:19,01/Jul/11 10:37,2.7.1,,,,,,,,,2.8.0,,,,camel-core,,,,,,0,,,,,,,,,"My route is defined as following:

        from(mqIn)
        .routeId(Helper.getRouteId(this.getClass().getName()))
        .errorHandler(deadLetterChannel(""log:DEAD"").maximumRedeliveries(1).retryAttemptedLogLevel(LoggingLevel.WARN))
        .onException(EAIException.class).maximumRedeliveries(0).handled(true).to(""bean:AuditBO?method=handleException"").end()
        //.transacted(""PROPAGATION_REQUIRES_NEW"")
        .setHeader(""UBS_ID"",new AuditId())
        .wireTap(""seda:auditNew"")
        .unmarshal(""SwiftDataFormat"")
        .setHeader(""MT"", getMT)
        .setHeader(""SWIFTAddress"", getSwiftAddress)
        .to(mqOut);

The tracing output is the following
[                          main] Tracer                         INFO  ID-w01b2bc3-3197-1309192772128-0-2 >>> (wmswift.in.IcgToCore) wireTap(seda://auditNew) -->  <<< Pattern:InOnly, Headers:{UBS_ID=5932bc56-2f7e-45cf-a2b4-ef851ff661d7}, BodyType:String, ...
[                          main] Tracer                         INFO  ID-w01b2bc3-3197-1309192772128-0-2 >>> (wmswift.in.IcgToCore)  --> setHeader[MT] <<< Pattern:InOnly, Headers:{UBS_ID=5932bc56-2f7e-45cf-a2b4-ef851ff661d7}, BodyType:com.ubs.eai.wmswift.SwiftDataMessage, Body:com.ubs.eai.wmswift.SwiftDataMessage@91b9b0
[                          main] Tracer                         INFO  ID-w01b2bc3-3197-1309192772128-0-2 >>> (wmswift.in.IcgToCore) setHeader[MT] --> setHeader[SWIFTAddress] <<< Pattern:InOnly, Headers:{MT=502, UBS_ID=5932bc56-2f7e-45cf-a2b4-ef851ff661d7}, BodyType:com.ubs.eai.wmswift.SwiftDataMessage, Body:com.ubs.eai.wmswift.SwiftDataMessage@91b9b0
[                          main] Tracer                         INFO  ID-w01b2bc3-3197-1309192772128-0-2 >>> (wmswift.in.IcgToCore) setHeader[SWIFTAddress] --> direct://core <<< Pattern:InOnly, Headers:{SWIFTAddress=ZYAMCHZ0XXXX, MT=502, UBS_ID=5932bc56-2f7e-45cf-a2b4-ef851ff661d7}, BodyType:com.ubs.eai.wmswift.SwiftDataMessage, Body:com.ubs.eai.wmswift.SwiftDataMessage@91b9b0
[                          main] Tracer                         INFO  ID-w01b2bc3-3197-1309192772128-0-2 >>> (wmswift.core.CoreToMQ) direct://core -->  <<< Pattern:InOnly, Headers:{SWIFTAddress=ZYAMCHZ0XXXX, MT=502, UBS_ID=5932bc56-2f7e-45cf-a2b4-ef851ff661d7}, BodyType:com.ubs.eai.wmswift.SwiftDataMessage, Body:com.ubs.eai.wmswift.SwiftDataMessage@91b9b0
[                          main] Tracer                         INFO  ID-w01b2bc3-3197-1309192772128-0-2 >>> (wmswift.core.CoreToMQ)  --> choice <<< Pattern:InOnly, Headers:{MT=502, UBS_ID=5932bc56-2f7e-45cf-a2b4-ef851ff661d7, SWIFTAddress=ZYAMCHZ0XXXX}, 

The bug I found is the missing label of the unmarshal processor.
","Eclipse on Windows XP, unsing Spring",,,,,,,,,,,,,,,,,,,,30/Jun/11 16:43;cmoulliard;Screen shot 2011-06-30 at 18.42.10.png;https://issues.apache.org/jira/secure/attachment/12484795/Screen+shot+2011-06-30+at+18.42.10.png,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-06-30 16:29:26.543,,,no_permission,,,,,,,,,,,,,13892,,,Thu Jul 07 03:20:44 UTC 2011,,,,,,,0|i01z9b:,9481,,,,,,,,,"30/Jun/11 16:29;cmoulliard;The getLabel() method of the DefaultRouteNode class returns """" when the processor is ""marshall"" or ""unmarshall"". This is why this is not displayed in the TRACE.","30/Jun/11 16:42;cmoulliard;What is strange is that the MarshallProcessor implements Traceable and in debug mode , this part of the code is skipped

{code}
    public String getLabel(Exchange exchange) {
        if (expression != null) {
            return expression.evaluate(exchange, String.class);
        }

        Processor target = processor;
        if (target != null) {
            // can be wrapped
            if (target instanceof InstrumentationProcessor) {
                target = ((InstrumentationProcessor) target).getProcessor();
            }

            if (target instanceof Traceable) { ---> by passed
                Traceable trace = (Traceable) target;
                return trace.getTraceLabel();
            }
        }

        // default then to definition
        return processorDefinition.getLabel();
    }
{code}

Is it because the processor returned is of type (see attachment)","01/Jul/11 18:22;davsclaus;Charles can you check your first commit in this link
http://svn.apache.org/viewvc?rev=1141866&view=rev

And ensure those test changes is reverter properly
",06/Jul/11 07:32;davsclaus;Okay I have fixed this. The tests has been reverted and the marshal/unmarshal is now in the tracer,"06/Jul/11 22:54;muellerc;ConvertBodyDefinition and my others have still the same issue. Should we reopen this ticket or create a new, more generic one, and check all XXXDefinitions?",07/Jul/11 03:20;davsclaus;I have created a ticket and linked to this,,,,,,,,,,,,,,,,,,
dependency:go-offline fails in tooling/maven pom,CAMEL-4177,12512968,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,janstey,janstey,janstey,06/Jul/11 11:31,06/Jul/11 11:35,13/Mar/19 22:19,06/Jul/11 11:35,,,,,,,,,,2.8.0,,,,,,,,,,0,,,,,,,,,"{code}
[INFO] Reactor Summary:
[INFO] 
[INFO] Camel :: Maven Plugins ............................ FAILURE [3.566s]
[INFO] Camel :: Maven Camel Plugin ....................... SKIPPED
[INFO] Camel :: Maven Guice Plugin ....................... SKIPPED
[INFO] Camel :: Html to Pdf Plugin ....................... SKIPPED
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 8.320s
[INFO] Finished at: Wed Jul 06 08:45:30 NDT 2011
[INFO] Final Memory: 10M/55M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-dependency-plugin:2.1:resolve-plugins (resolve-plugins) on project maven-plugins: Nested: Failure to find org.apache.maven.plugins:maven-plugin-plugin:jar:2.2.1 in http://repo1.maven.org/maven2 was cached in the local repository, resolution will not be reattempted until the update interval of central has elapsed or updates are forced
{code}","Apache Maven 3.0.2 (r1056850; 2011-01-08 21:28:10-0330)
Java version: 1.6.0_23, vendor: Sun Microsystems Inc.
Java home: /opt/jdk1.6.0_23/jre
Default locale: en_CA, platform encoding: UTF-8
OS name: ""linux"", version: ""2.6.32-27-generic"", arch: ""amd64"", family: ""unix""
",,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,13896,,,Wed Jul 06 11:35:29 UTC 2011,,,,,,,0|i01zbj:,9491,,,,,,,,,"06/Jul/11 11:33;janstey;maven-plugin-plugin 2.2.1 doesn't actually exist at central. The following link gives a 404

http://repo1.maven.org/maven2/org/apache/maven/plugins/maven-plugin-plugin/2.2.1/

Going to switch to another version shortly.","06/Jul/11 11:35;janstey;janstey@duffman:/x1/asf/camel/trunk/tooling/maven$ svn commit -m ""CAMEL-4177 - fix issue when using dependency:go-offline""
Sending        maven/camel-maven-plugin/pom.xml
Sending        maven/guice-maven-plugin/pom.xml
Sending        maven/pom.xml
Transmitting file data ...
Committed revision 1143353.
",,,,,,,,,,,,,,,,,,,,,,
Incorrect annotation parameter in examples,CAMEL-4018,12508452,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,njiang,stu.c,stu.c,26/May/11 16:41,27/May/11 01:15,13/Mar/19 22:19,27/May/11 01:15,,,,,,,,,,,,,,documentation,,,,,,0,,,,,,,,,"In the ""Parameter Binding Annotations"" page at http://camel.apache.org/parameter-binding-annotations.html, a number of the examples include lines like;

{{public void doSomething(@Header(name = ""JMSCorrelationID"") String correlationID, @Body String body) {}}

The correct annotation parameter for @Header is actually ""value"", rather than ""name"".",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-05-27 01:14:51.878,,,no_permission,,,,,,,,,,,,,76187,,,Fri May 27 01:15:21 UTC 2011,,,,,,,0|i01ycf:,9333,,,,,,,,,"27/May/11 01:14;njiang;Hi Stu

After digging the code change log, I find this issue is related to CAMEL-1378 which was fixed two years ago.
I just updated the wiki page for it, and thanks for your bug report.
",27/May/11 01:15;njiang;Updated the wiki page.,,,,,,,,,,,,,,,,,,,,,,
Inject custom package scan class resolver asap to ensure loading of classpath works,CAMEL-3967,12507016,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,davsclaus,davsclaus,davsclaus,12/May/11 16:59,12/May/11 17:10,13/Mar/19 22:19,12/May/11 17:10,2.7.0,,,,,,,,,2.8.0,,,,camel-spring,,,,,,0,,,,,,,,,"See nabble
http://camel.465427.n5.nabble.com/TypeConverter-loading-failes-in-JBoss-5-1-0-GA-tp4389726p4389726.html

The issue is when using JBoss and Camel 2.7

",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,,,,,,,,,,,,14052,,,2011-05-12 16:59:39.0,,,,,,,0|i01y13:,9282,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
maven eclipse goal failure,CAMEL-3799,12502126,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Minor,Fixed,hadrian,hadrian,hadrian,23/Mar/11 02:46,20/Apr/11 19:48,13/Mar/19 22:19,20/Apr/11 18:28,2.7.0,,,,,,,,,2.8.0,,,,tooling,,,,,,0,,,,,,,,,"The error is:

{code}
[ERROR] BUILD ERROR
[INFO] ------------------------------------------------------------------------
[INFO] Request to merge when 'filtering' is not identical. Original=resource src/main/resources: output=target/classes, include=[], exclude=[**/*.java], test=false, filtering=false, merging with=resource src/main/resources: output=target/classes, include=[**/archetype-metadata.xml], exclude=[**/*.java], test=false, filtering=true
{code}

and it seems to be resolved in the upcoming maven-eclipse-plugin:2.9.0 (see [MECLIPSE-576|http://jira.codehaus.org/browse/MECLIPSE-576]). An update to the new release of the plugin, once available, should resolve this.

",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-04-20 11:48:09.72,,,no_permission,,,,,,,,,,,,,14114,,,Wed Apr 20 19:48:59 UTC 2011,,,,,,,0|i01wyv:,9110,,,,,,,,,"20/Apr/11 11:48;davsclaus;Hadrian which Maven version are you using?

And end user reported it failed for him with 3.0.2. But after upgrading to 3.0.3 it worked
http://camel.465427.n5.nabble.com/Camel-release-2-8-td4305340.html#a4315571

PS: I wonder if we should consider having Maven 3.0.3+ being minimim for building Camel? But we can take that discussion on the @dev forum.","20/Apr/11 14:00;bvahdat;Claus,

I'm really sorry for the irritation I caused, as my answer to you on the user forum was just too speedy! Unfortunately I've got still exactly the same issue having the following setup:

D:\Data\eclipse-ws\camel-trunk>mvn --version
Apache Maven 3.0.3 (r1075438; 2011-02-28 18:31:09+0100)
Maven home: P:\My Documents\dev\env\apache-maven-3.0.3\bin\..
Java version: 1.6.0_24, vendor: Sun Microsystems Inc.
Java home: C:\Program Files\Java\jdk1.6.0_24\jre
Default locale: de_CH, platform encoding: Cp1252
OS name: ""windows xp"", version: ""5.1"", arch: ""x86"", family: ""windows""

So I tell you how I try to build and maybe you can tell me where I'm going wrong. I've checked out the camel trunk under ""D:\Data\eclipse-ws\camel-trunk"" and go through the following steps on this directory:

D:\Data\eclipse-ws\camel-trunk>mvn clean // just to make it sure that I've got no ""dead body"" hidden somewhere under the ""target"" directories

That goes well. Then as it's described @ http://camel.apache.org/building.html I do

set MAVEN_OPTS=-Xmx512m -XX:MaxPermSize=512m

That goes also well. Please note that I set the maximal heap size to just 512 and not 1024, as otherwise maven will fail to start (will not be able to allocate that much heap space on my machine). Then I do:

D:\Data\eclipse-ws\camel-trunk>mvn install -Pfastinstall

That goes smooth as well, but with that I just skipped the execution of the unit tests, so afterwards I simply do

D:\Data\eclipse-ws\camel-trunk>mvn test

That still fails as I've already reported here:

http://camel.465427.n5.nabble.com/Camel-release-2-8-tt4305340.html#a4305861#none

When I also try to do:

D:\Data\eclipse-ws\camel-trunk>mvn eclipse:clean eclipse:eclipse

It also fails with the effect I have already reported here:

https://issues.apache.org/jira/browse/CAMEL-3837

So I simply wonder how it's possible that all the steps above work on your box!!!

Again please accept my apologies for my speedy reply on the user forum...","20/Apr/11 14:07;davsclaus;Babak use the mailing list for discussing your build issue.

This JIRA ticket is about the mvn eclipse:eclipse goal failing due to an Eclipse bug.",20/Apr/11 14:10;davsclaus;Hmmm can people not just use an older version of the maven eclipse plugin? I recall you can add some parameters on the cmd line to specify the version. So maybe try with eclipse plugin v2.6 or 2.7 or whatever an older version that used to work.,20/Apr/11 14:13;hadrian;Some update on this. This is a known maven eclipse plugin issue. I think I have a workaround for this. Will get it in today or tomorrow if I don't run into other issues.,"20/Apr/11 14:23;hadrian;@Claus, the particular issue that caused this bug is fixed, but there is no released version of the plugin that contains the fix yet.","20/Apr/11 17:05;dkulp;
There is an easy fix for this that would work today.   In the pom, change to:

{code:xml}
<resources>
      <resource>
        <directory>src/main/resources</directory>
        <filtering>false</filtering>
      </resource> 
      <resource>
        <directory>src/main/resources-filtered</directory>
        <filtering>true</filtering>
      </resource>
    </resources>
{code}

and just move the archetype-metadata.xml file into src/main/resources-filtered.  CXF does this in several places and actually has src/main/resources-filtered defined in the parent pom to make it easy.



","20/Apr/11 17:06;dkulp;
BTW:  I'd submit a patch but file moves in an svn patch don't usually work very well.",20/Apr/11 18:28;hadrian;Fixed. Thanks to Dan Kulp for providing a solution.,20/Apr/11 19:48;bvahdat;That now also works for me (mvn eclipse:eclipse). Thanks for the fix.,,,,,,,,,,,,,,
NPE in Aggregator when completionSize = 1,CAMEL-7146,12690219,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,davsclaus,sburkard,sburkard,22/Jan/14 08:32,06/Feb/14 09:51,13/Mar/19 22:19,06/Feb/14 09:51,2.12.2,,,,,,,,,2.12.3,2.13.0,,,camel-core,,,,,,0,aggregator,,,,,,,,"A Camel aggregator with persistence repository cannot have a completionSize of 1. If this is configured, every message produces a NPE with the attached stacktrace. 

I have also attached a small example project that shows the Exception. As soon as the completionSize is > 1, it runs fine.

This is just a minor flaw, since I cannot think about a really useful case with completionSize 1, but it worked with earlier versions of Camel. 

As an alternative (if completionSize 1 should not be used), Camel could throw an error during Context startup when completionSize < 2.",,,,,,,,,,,,,,,,,,,,,22/Jan/14 08:37;sburkard;Camel-7146-example.tgz;https://issues.apache.org/jira/secure/attachment/12624303/Camel-7146-example.tgz,22/Jan/14 08:33;sburkard;Camel-7146-stacktrace.txt;https://issues.apache.org/jira/secure/attachment/12624302/Camel-7146-stacktrace.txt,,,,,2.0,,,,,,,,,,,,,,,,,,,2014-02-05 11:59:18.522,,,no_permission,,Unknown,,,,,,,,,,,369173,,,Wed Feb 05 11:59:18 UTC 2014,,,,,,,0|i1rmp3:,369478,,,,,,,,,22/Jan/14 08:33;sburkard;The NPE stacktrace,22/Jan/14 08:37;sburkard;Example project that shows the behaviour with completionSize = 1,"03/Feb/14 15:24;sburkard;I edited the description of the issue since I analyzed the issue in the Camel code. 

In the method ""doAggregation"" the aggregator evaluates if the aggregation is complete. With completionSize = 1 this is the case on every Exchange. Therefore the aggregator does not persist the Exchanges, but skips this part: 

{code:title=AggregateProcessor.java|borderStyle=solid}
...
if (complete == null) {
	doAggregationRepositoryAdd(newExchange.getContext(), key, originalExchange, answer);
	// we are not complete so the answer should be null
	answer = null;
} else {
...
{code}

On the other hand does the method ""onCompletion"" no such evaluation and tries to delete the Exchange in the Repository. Therefore the NPE.
","05/Feb/14 11:59;davsclaus;Yeah completion size = 1 doesnot so much sense, but you can also have a completion predicate that just returns true each time, and have the same situation with only 1 aggregated.",,,,,,,,,,,,,,,,,,,,
camel-cmis component: test packages have the wrong name,CAMEL-6595,12660938,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,njiang,mturatti,mturatti,31/Jul/13 17:00,01/Aug/13 04:19,13/Mar/19 22:19,01/Aug/13 04:19,2.12.0,,,,,,,,,2.11.2,2.12.0,,,,,,,,,0,cmis,test-patch,,,,,,,"Unit tests for camel-cmis are under package org.apache.camel.componenet instead of org.apache.camel.component

Actions:
1) Rename folder src/test/java/org/apache/camel/componenet to src/test/java/org/apache/camel/component/
2) Fix the package name in each unit test

Affected version: 2.12-SNAPSHOT and before",,3600,3600,,0%,3600,3600,,,,,,,,,,,,,,31/Jul/13 17:03;mturatti;patchfile.txt;https://issues.apache.org/jira/secure/attachment/12595211/patchfile.txt,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-08-01 04:19:19.572,,,no_permission,,Novice,,,,,,,,,,,341127,,,Thu Aug 01 04:19:19 UTC 2013,,,Patch Available,,,,0|i1mu1j:,341445,,,,,,,,,"31/Jul/13 17:03;mturatti;this is a patch generated with ""git diff --no-prefix > patchfile.txt"" on my own issue branch

I think you have to manually rename the test folder as mentioned in the issue description.",01/Aug/13 04:19;njiang;Applied patch with thanks to Maurizio.,,,,,,,,,,,,,,,,,,,,,,
setting DefaultShutdownStrategy.setTimeout(0L) may cause infinite timeout,CAMEL-6196,12638254,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,njiang,pjwalstrom,pjwalstrom,21/Mar/13 15:15,26/May/13 12:43,13/Mar/19 22:19,26/May/13 12:43,2.10.4,,,,,,,,,2.10.5,2.11.1,2.12.0,,camel-core,,,,,,0,shutdown,,,,,,,,"defaultShutdownStrategy.setTimeout(0L);

may give the following when shutting down and inflight exchanges do not complete

[Camel (camel) thread #2 - ShutdownTask] INFO org.apache.camel.impl.DefaultShutdownStrategy - Waiting as there are still 2 inflight and pending exchanges to complete, timeout in 0 seconds.
[Camel (camel) thread #2 - ShutdownTask] INFO org.apache.camel.impl.DefaultShutdownStrategy - Waiting as there are still 2 inflight and pending exchanges to complete, timeout in -1 seconds.
[Camel (camel) thread #2 - ShutdownTask] INFO org.apache.camel.impl.DefaultShutdownStrategy - Waiting as there are still 2 inflight and pending exchanges to complete, timeout in -2 seconds.
[...]
[Camel (camel) thread #2 - ShutdownTask] INFO org.apache.camel.impl.DefaultShutdownStrategy - Waiting as there are still 2 inflight and pending exchanges to complete, timeout in -323 seconds.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-03-21 15:43:32.82,,,no_permission,,Novice,,,,,,,,,,,318730,,,Fri Mar 22 07:56:35 UTC 2013,,,,,,,0|i1izv3:,319071,,,,,,,,,"21/Mar/13 15:43;davsclaus;Per are you working on a patch? Seems like we should either deny setting the timeout as 0 or negative (eg must be positive).
Or all to have unlimited timeout (I guess this can be a bit dangerous, as if a message is stuck, you would need to kill the processor or have trouble getting the Camel app stopped/killed)","22/Mar/13 06:26;pjwalstrom;I would love to submit a patch, how do I do that?

I suggest the following solution
1) if timeout == 0, the shutdown will be forced immediately
2) if timeout < 0, throw new IllegalArgumentException

you could argue in 2) that negative values should be treated as 0 (which probably would be the easiest solution), but I think this would be confusing. The user sets a negative number for some strange reason. He doesn't expect it silently to be substituted with a 0
","22/Mar/13 07:56;muellerc;Per, we love contributions. You can find more information how to contribute at http://camel.apache.org/contributing.html

Thanks in advance,
Christian",,,,,,,,,,,,,,,,,,,,,
"Camel dont set ID for ToDefinition object, when using validate in the route",CAMEL-6298,12643584,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,davsclaus,horyna,horyna,19/Apr/13 13:28,22/Apr/13 15:23,13/Mar/19 22:19,22/Apr/13 15:23,2.10.4,2.11.0,2.9.6,,,,,,,2.10.5,2.11.1,2.12.0,2.9.7,camel-core,,,,,,0,,,,,,,,,"{code}
from(uri) 
                .routeId(ROUTE_ID) 
                .validate(body().isInstanceOf(SomeClass.class)) 
                .beanRef(bean, ""someMethod"") 
                .marshal(jaxbIn) 
                .to(uri).id(""meID""); 
{code}

Studying Camel source (2.10.4) code i find, that method id(""meID"") is called on ValidateDefinition object and this return empty collection for outputs. 

http://camel.465427.n5.nabble.com/Camel-dont-set-ID-for-ToDefinition-object-td5731143.html",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-04-22 08:51:18.631,,,no_permission,,Unknown,,,,,,,,,,,323951,,,Mon Apr 22 09:23:28 UTC 2013,,,,,,,0|i1jw3j:,324296,,,,,,,,,22/Apr/13 08:51;davsclaus;This problem only applies to java dsl.,22/Apr/13 09:23;davsclaus;Need to merge to 2.11 branch when we have it setup,,,,,,,,,,,,,,,,,,,,,,
"Typo on the ""control bus"" site",CAMEL-5992,12628668,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,davsclaus,jhm,jhm,22/Jan/13 07:26,22/Jan/13 07:32,13/Mar/19 22:19,22/Jan/13 07:32,,,,,,,,,,2.11.0,,,,website,,,,,,0,,,,,,,,,"Page http://camel.apache.org/controlbus.html
Section ""Using Simple language""

The ""l"" is missing:
""Notice: its easier to use the route command to contro lifecycle of routes.""

s/to contro lifecycle/to control lifecycle/",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-01-22 07:32:50.996,,,no_permission,,Unknown,,,,,,,,,,,307193,,,Tue Jan 22 07:32:50 UTC 2013,,,,,,,0|i1ahtr:,269354,,,,,,,,,"22/Jan/13 07:32;davsclaus;Thanks Jan for reporting.
I am fixing the typo.

If you want to help with the docs, then take a look at
http://camel.apache.org/how-do-i-edit-the-website.html

And as well how to contribute in general such as code patches etc
http://camel.apache.org/contributing.html

",,,,,,,,,,,,,,,,,,,,,,,
SJMS component's pom.xml missing taskmanager package in camel.osgi.private.pkg,CAMEL-5928,12626071,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,davsclaus,earcam,earcam,04/Jan/13 17:50,05/Jan/13 07:44,13/Mar/19 22:19,05/Jan/13 07:44,2.11.0,,,,,,,,,2.11.0,,,,,,,,,,0,,,,,,,,,"Hi,

I know it's not out in the wild yet but with this tiny patch SJMS is usable in my spike project.

Sadly doesn't affect the number of passing/failing tests.

The pom's <camel.osgi.private.pkg> section is missing an entry for the org.apache.camel.component.sjms.taskmanager package.


thanks,
Caspar",,,,,,,,,,,,,,,,,,,,,04/Jan/13 17:52;earcam;camel-sjms.patch;https://issues.apache.org/jira/secure/attachment/12563326/camel-sjms.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-01-05 07:44:56.307,,,no_permission,,Novice,,,,,,,,,,,302654,,,Sat Jan 05 07:44:56 UTC 2013,,,Patch Available,,,,0|i174jj:,249704,,,,,,,,,05/Jan/13 07:44;davsclaus;Thanks for spotting this and the patch.,,,,,,,,,,,,,,,,,,,,,,,
SnsConfiguration's toString() uses amazonSQSClient as key string rather than amazonSNSClient,CAMEL-5735,12613053,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,njiang,rhowlett,rhowlett,22/Oct/12 21:46,23/Oct/12 07:45,13/Mar/19 22:19,23/Oct/12 07:40,2.10.2,,,,,,,,,2.10.3,2.11.0,2.9.5,,camel-aws,,,,,,0,patch,,,,,,,,"The toString() method in SnsConfiguration uses the incorrect string ""amazonSQSClient"" as the key for the AmazonSNSClient reference in the registry.",,300,300,,0%,300,300,,,,,,,,,,,,,,22/Oct/12 21:47;rhowlett;SnsConfiguration.patch;https://issues.apache.org/jira/secure/attachment/12550357/SnsConfiguration.patch,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-10-23 07:40:21.695,,,no_permission,,Novice,,,,,,,,,,,250450,,,Tue Oct 23 07:40:21 UTC 2012,,,Patch Available,,,,0|i0aylj:,61878,,,,,,,,,"22/Oct/12 21:47;rhowlett;Fixes the SnsConfiguration toString() method to use ""amazonSNSClient"" rather than ""amazonSQSClient"".","23/Oct/12 07:40;njiang;Committed the patch into trunk, 2.10.x and 2.9.x with thanks to Robin.",,,,,,,,,,,,,,,,,,,,,,
Timer endpoint getState does not work in JMX,CAMEL-5102,12546812,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,davsclaus,davsclaus,davsclaus,16/Mar/12 16:19,16/Mar/12 16:26,13/Mar/19 22:19,16/Mar/12 16:26,2.9.0,,,,,,,,,2.10.0,2.9.2,,,camel-core,jmx,,,,,0,,,,,,,,,The getState attribute does not work.,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,231970,,,2012-03-16 16:19:13.0,,,,,,,0|i0250n:,10414,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException when assigning a simple Object as final bean,CAMEL-5051,12544453,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,bvahdat,fabdouglas,fabdouglas,28/Feb/12 17:51,29/Feb/12 00:29,13/Mar/19 22:19,29/Feb/12 00:28,2.9.0,,,,,,,,,2.10.0,2.8.5,2.9.1,,camel-core,,,,,,0,,,,,,,,,"Considering this route :

from(""direct://myendpoint"").routeId(""myendpoint.route"").bean(new Object());

I get a NPE. I know, this is a very rare case that noone will reach again...
Anyway the fix is very simple, and is attached with it's test case.
","JSE6, Windows7",,,,,,,,,,,,,,,,,,,,28/Feb/12 18:00;fabdouglas;CAMEL-5051.patch;https://issues.apache.org/jira/secure/attachment/12516364/CAMEL-5051.patch,28/Feb/12 17:55;fabdouglas;MyRouteBuilder.java;https://issues.apache.org/jira/secure/attachment/12516363/MyRouteBuilder.java,28/Feb/12 17:53;fabdouglas;stacktrace.txt;https://issues.apache.org/jira/secure/attachment/12516361/stacktrace.txt,,,,3.0,,,,,,,,,,,,,,,,,,,2012-02-29 00:27:38.463,,,no_permission,,Novice,,,,,,,,,,,229690,,,Wed Feb 29 00:27:38 UTC 2012,,,,,,,0|i024pb:,10363,,,,,,,,,"28/Feb/12 17:53;fabdouglas;Relevant trace : 
{noformat} 
Caused by: java.lang.NullPointerException
	at org.apache.camel.component.bean.BeanInfo.collectParameterAnnotations(BeanInfo.java:386)
	at org.apache.camel.component.bean.BeanInfo.collectParameterAnnotations(BeanInfo.java:397)
	at org.apache.camel.component.bean.BeanInfo.collectParameterAnnotations(BeanInfo.java:380)
	at org.apache.camel.component.bean.BeanInfo.createMethodInfo(BeanInfo.java:323)
{noformat} ","29/Feb/12 00:27;bvahdat;Thanks for reporting, I did however change the patch your provided a bit as the intention is *not* to skip the java.lang.Object.toString() method. See the static block initializing the EXCLUDED_METHODS field.

Also added a tiny unit-test to verify the behaviour. ",,,,,,,,,,,,,,,,,,,,,,
Bad endpoint in examples in documentation JMS Component,CAMEL-4534,12526575,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,iocanel,kborgul,kborgul,11/Oct/11 08:24,11/Oct/11 13:41,13/Mar/19 22:19,11/Oct/11 13:41,,,,,,,,,,,,,,documentation,,,,,,0,,,,,,,,,"Adress: http://camel.apache.org/jms.html

In section: ""Request-reply over JMS and using a shared fixed reply queue""
is: .inOut().to(""activemq:queue:foo?replyTo=bar?receiveTimeout=250"")
should be: .inOut().to(""activemq:queue:foo?replyTo=bar&receiveTimeout=250"")

The same in ""Request-reply over JMS and using an exclusive fixed reply queue""",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-10-11 13:41:43.761,,,no_permission,,Unknown,,,,,,,,,,,58991,,,Tue Oct 11 13:41:43 UTC 2011,,,,,,,0|i021jb:,9850,,,,,,,,,"11/Oct/11 13:41;iocanel;Updated the documentation. 

Thanks for reporting Krzystof!",,,,,,,,,,,,,,,,,,,,,,,
Example feature: wrong spring version,CAMEL-4319,12518319,Bug,Resolved,CAMEL,Camel,software,ancosen,"Apache Camel is an extremely powerful declarative Java based, type-safe <a href=""http://camel.apache.org/dsl.html"">Domain Specific Language</a> POJO broker, which uses <a href=""http://camel.apache.org/enterprise-integration-patterns.html"">Enterprise Integration Patterns</a> as its foundation for integration.",http://camel.apache.org/,Trivial,Fixed,davsclaus,amarkevich,amarkevich,09/Aug/11 14:15,02/Sep/11 09:23,13/Mar/19 22:19,10/Aug/11 17:59,2.8.0,,,,,,,,,2.8.1,2.9.0,,,examples,,,,,,0,,,,,,,,,"Feature
apache-camel-2.8.0.zip\apache-camel-2.8.0\examples\camel-example-etl\src\main\resources\features.xml 
contains
       <bundle>mvn:org.springframework/spring-jdbc/2.5.6.SEC01</bundle>
       <bundle>mvn:org.springframework/spring-orm/2.5.6.SEC01</bundle> 
Exception during 'hibernate-feauture' feature installation:
12:23:21,337 | INFO  | l Console Thread | araf.shell.console.jline.Console  258 | 36 - org.apache.karaf.shell.console - 2.2.1 | Exception caught while executing command java.lang.Exception: Could not start bundle mvn:org.springframework/spring-jdbc/2.5.6.SEC01 in feature(s) hibernate-feauture-0.0.0: The bundle ""org.springframework.jdbc_2.5.6.SEC01 [332]"" could not be resolved. Reason: Missing Constraint: Import-Package: org.springframework.dao; version=""[2.5.6.SEC01,2.5.6.SEC01]""
        at org.apache.karaf.features.internal.FeaturesServiceImpl.installFeatures(FeaturesServiceImpl.java:353)[38:org.apache.karaf.features.core:2.2.1]
...
Caused by: org.osgi.framework.BundleException: The bundle ""org.springframework.jdbc_2.5.6.SEC01 [332]"" could not be resolved. Reason: Missing Constraint: Import-Package: org.springframework.dao; version=""[2.5.6.SEC01,2.5.6.SEC01]""
        at org.eclipse.osgi.framework.internal.core.AbstractBundle.getResolverError(AbstractBundle.java:1317)[osgi-3.6.0.v20100517.jar:]
        at org.eclipse.osgi.framework.internal.core.AbstractBundle.getResolutionFailureException(AbstractBundle.java:1301)[osgi-3.6.0.v20100517.jar:]
        at org.eclipse.osgi.framework.internal.core.BundleHost.startWorker(BundleHost.java:319)[osgi-3.6.0.v20100517.jar:]
        at org.eclipse.osgi.framework.internal.core.AbstractBundle.start(AbstractBundle.java:284)[osgi-3.6.0.v20100517.jar:]
        at org.eclipse.osgi.framework.internal.core.AbstractBundle.start(AbstractBundle.java:276)[osgi-3.6.0.v20100517.jar:]
        at org.apache.karaf.features.internal.FeaturesServiceImpl.installFeatures(FeaturesServiceImpl.java:350)[38:org.apache.karaf.features.core:2.2.1]
        ... 15 more

Solution:
Change version for bundles org.springframework/spring-jdbc and org.springframework/spring-orm to 3.0.5.RELEASE instead 2.5.6.SEC01.",,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,13806,,,2011-08-09 14:15:07.0,,,,,,,0|i0207b:,9634,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
