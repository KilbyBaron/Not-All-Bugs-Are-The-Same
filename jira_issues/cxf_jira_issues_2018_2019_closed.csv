Summary,Issue key,Issue id,Issue Type,Status,Project key,Project name,Project type,Project lead,Project description,Project url,Priority,Resolution,Assignee,Reporter,Creator,Created,Updated,Last Viewed,Resolved,Affects Version/s,Affects Version/s,Affects Version/s,Fix Version/s,Fix Version/s,Fix Version/s,Component/s,Component/s,Due Date,Votes,Labels,Labels,Labels,Labels,Description,Environment,Log Work,Log Work,Log Work,Log Work,Original Estimate,Remaining Estimate,Time Spent,Work Ratio,Σ Original Estimate,Σ Remaining Estimate,Σ Time Spent,Security Level,Outward issue link (Blocker),Outward issue link (Cloners),Outward issue link (Duplicate),Outward issue link (Incorporates),Outward issue link (Problem/Incident),Outward issue link (Reference),Outward issue link (Reference),Attachment,Attachment,Attachment,Custom field (Attachment count),Custom field (Blog - New Blog Administrators),Custom field (Blog - New Blog PMC),Custom field (Blog - Write access),Custom field (Blog Administrator?),Custom field (Blogs - Admin for blog),Custom field (Blogs - Email Address),Custom field (Blogs - Existing Blog Access Level),Custom field (Blogs - Existing Blog Name),Custom field (Blogs - New Blog Write Access),Custom field (Blogs - Username),Custom field (Bug Category),Custom field (Bugzilla - Email Notification Address),Custom field (Bugzilla - List of usernames),Custom field (Bugzilla - PMC Name),Custom field (Bugzilla - Project Name),Custom field (Bugzilla Id),Custom field (Change Category),Custom field (Complexity),Custom field (Date of First Response),Custom field (Discovered By),Custom field (Docs Text),Custom field (Enable Automatic Patch Review),Custom field (Epic Link),Custom field (Estimated Complexity),Custom field (Existing GitBox Approval),Custom field (External issue ID),Custom field (External issue URL),Custom field (Flags),Custom field (Git Notification Mailing List),Custom field (Git Repository Import Path),Custom field (Git Repository Name),Custom field (Git Repository Type),Custom field (GitHub Options),Custom field (Github Integration),Custom field (Github Integrations - Other),Custom field (Global Rank),Custom field (INFRA - Subversion Repository Path),Custom field (Initial Confluence Contributors),Custom field (Last public comment date),Custom field (Machine Readable Info),Custom field (New-TLP-TLPName),Custom field (Priority),Custom field (Project),Custom field (Protected Branch),Custom field (Rank),Custom field (Rank (Obsolete)),Custom field (Severity),Custom field (Severity),Custom field (Space Description),Custom field (Space Key),Custom field (Space Name),Custom field (Test and Documentation Plan),Custom field (Testcase included),Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment
MP Rest Client leaks async interceptors,CXF-7992,13220560,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,andymc,andymc,andymc,08/Mar/19 22:46,11/Mar/19 14:28,14/Mar/19 02:31,11/Mar/19 14:28,3.3.0,3.3.1,,3.3.2,,,JAX-RS,,,0,,,,,"Every async method request on the MP Rest Client results in new MPAsyncInvocationInterceptorPostAsyncImpl and MPAsyncInvocationInterceptorRemoveAsyncImpl interceptors applied to the ClientConfiguration associated with the proxy impl.  This can quickly lead to OOM conditions.

 

The following heap dump info was observed using CXF 3.3.0 in WebSphere Liberty:
25,967,912 (42.9%) [56] 9 org/apache/cxf/microprofile/client/proxy/MicroProfileClientProxyImpl 0xe0bcbba8
|- 25,963,672 (42.9%) [56] 8 org/apache/cxf/jaxrs/client/ClientConfiguration 0xe0bcbcf8
|- 23,894,672 (39.48%) [24] 3 org/apache/cxf/common/util/ModCountCopyOnWriteArrayList 0xe12602b0
|- 23,894,552 (39.48%) [853,360] 213,341 array of java/lang/Object 0xf8a61090
|- 312 (0%) [32] 5 org/apache/cxf/microprofile/client/proxy/MPAsyncInvocationInterceptorPostAsyncImpl 0xe12db1a0
|- 296 (0%) [32] 5 org/apache/cxf/microprofile/client/proxy/MPAsyncInvocationInterceptorRemoveContextImpl 0xe12db218
|- 272 (0%) [32] 6 org/apache/cxf/jaxrs/client/ClientProxyImpl$ClientAsyncResponseInterceptor 0xe12db140
|- 120 (0%) [32] 5 org/apache/cxf/microprofile/client/proxy/MPAsyncInvocationInterceptorPostAsyncImpl 0xe1bdd300
|- 120 (0%) [32] 5 org/apache/cxf/microprofile/client/proxy/MPAsyncInvocationInterceptorPostAsyncImpl 0xe16a8eb8
|- 120 (0%) [32] 5 org/apache/cxf/microprofile/client/proxy/MPAsyncInvocationInterceptorPostAsyncImpl 0xe1dfc2d8
|- 120 (0%) [32] 5 org/apache/cxf/microprofile/client/proxy/MPAsyncInvocationInterceptorPostAsyncImpl 0xe1e34c28
|- 120 (0%) [32] 5 org/apache/cxf/microprofile/client/proxy/MPAsyncInvocationInterceptorPostAsyncImpl 0xe1dfc3b0
|- 120 (0%) [32] 5 org/apache/cxf/microprofile/client/proxy/MPAsyncInvocationInterceptorPostAsyncImpl 0xe1f17e88
|- 120 (0%) [32] 5 org/apache/cxf/microprofile/client/proxy/MPAsyncInvocationInterceptorPostAsyncImpl 0xe1dfc488
|- 120 (0%) [32] 5 org/apache/cxf/microprofile/client/proxy/MPAsyncInvocationInterceptorPostAsyncImpl 0xe1e34d00
|- 120 (0%) [32] 5 org/apache/cxf/microprofile/client/proxy/MPAsyncInvocationInterceptorPostAsyncImpl 0xe1dfc560
|- 120 (0%) [32] 5 org/apache/cxf/microprofile/client/proxy/MPAsyncInvocationInterceptorPostAsyncImpl 0xe1aaef68
|- 120 (0%) [32] 5 org/apache/cxf/microprofile/client/proxy/MPAsyncInvocationInterceptorPostAsyncImpl 0xe1dfc638
|- 120 (0%) [32] 5 org/apache/cxf/microprofile/client/proxy/MPAsyncInvocationInterceptorPostAsyncImpl 0xe1e34dd8
|- 120 (0%) [32] 5 org/apache/cxf/microprofile/client/proxy/MPAsyncInvocationInterceptorPostAsyncImpl 0xe1dfc710
|- 120 (0%) [32] 5 org/apache/cxf/microprofile/client/proxy/MPAsyncInvocationInterceptorPostAsyncImpl 0xe1f17f60
|- 120 (0%) [32] 5 org/apache/cxf/microprofile/client/proxy/MPAsyncInvocationInterceptorPostAsyncImpl 0xe1dfc7e8
|- 120 (0%) [32] 5 org/apache/cxf/microprofile/client/proxy/MPAsyncInvocationInterceptorPostAsyncImpl 0xe1e34eb0
|- 120 (0%) [32] 5 org/apache/cxf/microprofile/client/proxy/MPAsyncInvocationInterceptorPostAsyncImpl 0xe1dfc8c0
|- There are 213,321 more children",,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Fri Mar 08 23:18:24 UTC 2019,,,,,,0|z00im0:,9223372036854775807,,,,,,,,08/Mar/19 23:18;andymc;Resolving with https://github.com/apache/cxf/commit/eccb71ea477a36747914d7f17908cc6d591d390b,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Blocking Class.forName calls on JAX-RS dispatch path,CXF-7985,13218656,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,dkulp,dkulp,28/Feb/19 15:30,28/Feb/19 15:30,14/Mar/19 02:31,28/Feb/19 15:30,3.3.0,,,3.3.1,,,JAX-RS,,,0,,,,,The detection for whether JAXB and activation are available on the classpath occurs for every request which is expensive and is also synchronized.   This information should be cached.,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,2019-02-28 15:30:22.0,,,,,,0|z006xc:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"UsernameTokenInterceptor doesn't respect contextual property ""allowNamespaceQualifiedPasswordTypes""",CXF-7984,13218579,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,ema,ema,ema,28/Feb/19 09:24,01/Mar/19 03:08,14/Mar/19 02:31,28/Feb/19 11:54,3.1.18,3.2.8,3.3.0,3.2.9,3.3.1,,WS-* Components,,,0,,,,,allowNamespaceQualifiedPasswordTypes is not read from contextual properties before create wss4j UsernameToken.,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2019-02-28 10:12:50.314,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Fri Mar 01 03:08:00 UTC 2019,,,,,,0|z006g8:,9223372036854775807,,,,,,,,"28/Feb/19 10:12;coheigea;Hi [~ema],

It looks like this patch changes the default (i.e. if the configuration property is null):

    private boolean allowNamespaceQualifiedPWDTypes(final SoapMessage message) {
 +        String allow = (String)message
 +            .getContextualProperty(ConfigurationConstants.ALLOW_NAMESPACE_QUALIFIED_PASSWORD_TYPES);
 +        return !(""false"".equals(allow) || ""0"".equals(allow));
 +    }

The default should be false if not specified.

 ",28/Feb/19 11:12;coheigea;[~ema] - I've made this change as Dan wants to release 3.3.1 today.,01/Mar/19 03:08;ema;[~coheigea]   That's copy and paste error which changes the default. Thanks Colm for the fix.,,,,,,,,,,,,,,,,,,,,,,,,,,,
"JweClientResponseFilter fails to decrypt response, when it has status 204 No Content",CXF-7983,13218304,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,ashakirin,zbeothy,zbeothy,27/Feb/19 10:05,13/Mar/19 21:06,14/Mar/19 02:31,13/Mar/19 21:06,3.2.4,3.3.0,,3.2.9,3.3.2,,JAX-RS Security,,,0,,,,,"JweClientResponseFilter fails to decrypt response, when it has status 204 No Content
For my current project I am trying to get familiar with the cxf JOSE framework. Currently I am running into a problem with JWE trying to encrypt request and response with compact serialization. I have a GET request where the response is correctly encrypted and decrypted, and I have a POST request where the response sends status code 204 and the body is obviously empty.
The response fails with a warning ""WARNUNG: 5 JWE parts are expected"" and an exception
org.apache.cxf.rs.security.jose.jwe.JweException: INVALID_COMPACT_JWE
    at org.apache.cxf.rs.security.jose.jwe.JweCompactConsumer.<init>(JweCompactConsumer.java:40)
    at org.apache.cxf.rs.security.jose.jaxrs.AbstractJweDecryptingFilter.decrypt(AbstractJweDecryptingFilter.java:44)
    at org.apache.cxf.rs.security.jose.jaxrs.JweClientResponseFilter.filter(JweClientResponseFilter.java:42)
...
Test case and test log with exception are attached.
I debugged the code a bit and it seems to me the filter method in JweClientResponseFilter fails to identify the body is empty and therefor calls the decrypt method, which it shouldn't

 

I ran the test case using 3.2.4 and 3.3.0, but also other versions will be affected.",,,,,,,,,,,,,,,,,,,,,27/Feb/19 10:04;zbeothy;encryption-exception.zip;https://issues.apache.org/jira/secure/attachment/12960333/encryption-exception.zip,27/Feb/19 10:04;zbeothy;test-output.txt;https://issues.apache.org/jira/secure/attachment/12960332/test-output.txt,,2.0,,,,,,,,,,,,,,,,,,,2019-03-13 12:44:42.025,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Wed Mar 13 16:51:19 UTC 2019,,,,,,0|z004rs:,9223372036854775807,,,,,,,,13/Mar/19 12:44;coheigea;Do you need the fix backported for 3.2.x as well?,"13/Mar/19 13:04;ashakirin;[~coheigea]: yep, I will backport to 3.2.x (is not explicitly asked, but makes sense)","13/Mar/19 16:51;zbeothy;[~coheigea], [~ashakirin]: We may subclass the filter and fix it ourselves. Still would be good to have it in 3.2.x. in case we might be able to migrate to the latest 3.2.x version.",,,,,,,,,,,,,,,,,,,,,,,,,,,
mutual SSL configuration for http-undertow transport not handle want and required for clientAuthentication correctly,CXF-7981,13217735,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,ffang,ffang,ffang,25/Feb/19 06:48,28/Feb/19 12:36,14/Mar/19 02:31,28/Feb/19 12:36,,,,3.2.9,3.3.1,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,2019-02-25 06:48:54.0,,,,,,0|z001a8:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RestClientExtension leaks,CXF-7980,13217684,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,,romain.manni-bucau,romain.manni-bucau,24/Feb/19 17:58,13/Mar/19 22:31,14/Mar/19 02:31,13/Mar/19 22:31,3.2.8,3.3.1,,3.2.9,3.3.2,,JAX-RS,,,0,,,,,"RestClientExtension uses static variables and never clear it off, moving to instance variable would be way saner and very worse case cleaning the variable sin BeforeShutdown event would be better.

If deployed in a container (like tomcat/lib folder) then it will be shared by apps so if app1 fails, app2 will fail whatever it does which is also another nasty side effect.",,"ivanjunckes commented on pull request #523: CXF-7980 Fixing bean leak
URL: https://github.com/apache/cxf/pull/523
 
 
   This PR fixes the error below. Basically it will avoid beans to leak and cause issues when there are multiple apps using the same classes.
   
   Error
   Caused by: org.apache.webbeans.exception.WebBeansException: org.apache.webbeans.exception.DuplicateDefinitionException: PassivationCapable bean id is not unique: br.com.gbrsistemas.crvirtual.classificacao.SiemClassificacaoServiceClient bean:SiemClassificacaoServiceClient, WebBeansType:THIRDPARTY, Name:br.com.gbrsistemas.crvirtual.classificacao.SiemClassificacaoServiceClient, API Types:[br.com.gbrsistemas.crvirtual.classificacao.SiemClassificacaoServiceClient], Qualifiers:[javax.enterprise.inject.Default,org.eclipse.microprofile.rest.client.inject.RestClient,javax.enterprise.inject.Any], existing: SiemClassificacaoServiceClient, WebBeansType:THIRDPARTY, Name:br.com.gbrsistemas.crvirtual.classificacao.SiemClassificacaoServiceClient, API Types:[br.com.gbrsistemas.crvirtual.classificacao.SiemClassificacaoServiceClient], Qualifiers:[javax.enterprise.inject.Default,org.eclipse.microprofile.rest.client.inject.RestClient,javax.enterprise.inject.Any]
   	at org.apache.webbeans.event.ObserverMethodImpl.notify(ObserverMethodImpl.java:371)
   	at org.apache.webbeans.event.NotificationManager.invokeObserverMethod(NotificationManager.java:818)
   	at org.apache.webbeans.event.NotificationManager.fireEvent(NotificationManager.java:714)
   	... 42 more
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;13/Mar/19 20:46;githubbot;600","reta commented on pull request #523: CXF-7980 Fixing bean leak
URL: https://github.com/apache/cxf/pull/523
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;13/Mar/19 22:18;githubbot;600",,,,0,1200,,,0,1200,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,2019-02-24 17:58:31.0,,,,,,0|z000yw:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"http-undertow|http-jetty transport: Port 8282 is configured with wrong protocol ""https"" with blueprint configuration",CXF-7977,13216852,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,ffang,jondruse,jondruse,20/Feb/19 09:14,08/Mar/19 08:43,14/Mar/19 02:31,08/Mar/19 03:37,3.3.0,,,3.2.9,3.3.2,,Transports,,,0,,,,,"Run quickstart security/keycloak/keycloak-cxf according to [README.md|https://github.com/jboss-fuse/karaf-quickstarts/blob/7.x.redhat-7-x/security/keycloak/keycloak-cxf/README.md]

Bundle deployment fails with following error:
{noformat}org.osgi.service.blueprint.container.ComponentDefinitionException: Unable to initialize bean externalJaxWs
	at org.apache.aries.blueprint.container.BeanRecipe.runBeanProcInit(BeanRecipe.java:593) ~[50:org.apache.aries.blueprint.core:1.10.1]
	at org.apache.aries.blueprint.container.BeanRecipe.internalCreate2(BeanRecipe.java:703) ~[50:org.apache.aries.blueprint.core:1.10.1]
	at org.apache.aries.blueprint.container.BeanRecipe.internalCreate(BeanRecipe.java:666) ~[50:org.apache.aries.blueprint.core:1.10.1]
	at org.apache.aries.blueprint.di.AbstractRecipe$1.call(AbstractRecipe.java:81) ~[50:org.apache.aries.blueprint.core:1.10.1]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:?]
	at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:90) ~[50:org.apache.aries.blueprint.core:1.10.1]
	at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:360) ~[50:org.apache.aries.blueprint.core:1.10.1]
	at org.apache.aries.blueprint.container.BlueprintRepository.createAll(BlueprintRepository.java:190) ~[50:org.apache.aries.blueprint.core:1.10.1]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.instantiateEagerComponents(BlueprintContainerImpl.java:717) ~[50:org.apache.aries.blueprint.core:1.10.1]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:413) [50:org.apache.aries.blueprint.core:1.10.1]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:278) [50:org.apache.aries.blueprint.core:1.10.1]
	at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:299) [50:org.apache.aries.blueprint.core:1.10.1]
	at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:268) [50:org.apache.aries.blueprint.core:1.10.1]
	at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:264) [50:org.apache.aries.blueprint.core:1.10.1]
	at org.apache.aries.blueprint.container.BlueprintExtender.modifiedBundle(BlueprintExtender.java:254) [50:org.apache.aries.blueprint.core:1.10.1]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:500) [50:org.apache.aries.blueprint.core:1.10.1]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:433) [50:org.apache.aries.blueprint.core:1.10.1]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$AbstractTracked.track(BundleHookBundleTracker.java:725) [50:org.apache.aries.blueprint.core:1.10.1]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.bundleChanged(BundleHookBundleTracker.java:463) [50:org.apache.aries.blueprint.core:1.10.1]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$BundleEventHook.event(BundleHookBundleTracker.java:422) [50:org.apache.aries.blueprint.core:1.10.1]
	at org.apache.felix.framework.util.SecureAction.invokeBundleEventHook(SecureAction.java:1179) [?:?]
	at org.apache.felix.framework.EventDispatcher.createWhitelistFromHooks(EventDispatcher.java:730) [?:?]
	at org.apache.felix.framework.EventDispatcher.fireBundleEvent(EventDispatcher.java:485) [?:?]
	at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:4579) [?:?]
	at org.apache.felix.framework.Felix.startBundle(Felix.java:2174) [?:?]
	at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:998) [?:?]
	at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:984) [?:?]
	at org.apache.karaf.bundle.command.Install.execute(Install.java:115) [120:org.apache.karaf.bundle.core:4.2.0.fuse-730019]
	at org.apache.karaf.shell.impl.action.command.ActionCommand.execute(ActionCommand.java:84) [144:org.apache.karaf.shell.core:4.2.0.fuse-730019]
	at org.apache.karaf.shell.impl.console.osgi.secured.SecuredCommand.execute(SecuredCommand.java:68) [144:org.apache.karaf.shell.core:4.2.0.fuse-730019]
	at org.apache.karaf.shell.impl.console.osgi.secured.SecuredCommand.execute(SecuredCommand.java:86) [144:org.apache.karaf.shell.core:4.2.0.fuse-730019]
	at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:599) [144:org.apache.karaf.shell.core:4.2.0.fuse-730019]
	at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:526) [144:org.apache.karaf.shell.core:4.2.0.fuse-730019]
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:415) [144:org.apache.karaf.shell.core:4.2.0.fuse-730019]
	at org.apache.felix.gogo.runtime.Pipe.doCall(Pipe.java:416) [144:org.apache.karaf.shell.core:4.2.0.fuse-730019]
	at org.apache.felix.gogo.runtime.Pipe.call(Pipe.java:229) [144:org.apache.karaf.shell.core:4.2.0.fuse-730019]
	at org.apache.felix.gogo.runtime.Pipe.call(Pipe.java:59) [144:org.apache.karaf.shell.core:4.2.0.fuse-730019]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:?]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:?]
	at java.lang.Thread.run(Thread.java:745) [?:?]
Caused by: java.lang.RuntimeException: Port 8282 is configured with wrong protocol ""https"" for ""http://localhost:8282/jaxws""
	at org.apache.cxf.transport.http_undertow.UndertowHTTPDestination.finalizeConfig(UndertowHTTPDestination.java:131) ~[?:?]
	at org.apache.cxf.transport.http.HTTPTransportFactory.getDestination(HTTPTransportFactory.java:288) ~[?:?]
	at org.apache.cxf.binding.soap.SoapTransportFactory.getDestination(SoapTransportFactory.java:135) ~[?:?]
	at org.apache.cxf.endpoint.ServerImpl.initDestination(ServerImpl.java:85) ~[?:?]
	at org.apache.cxf.endpoint.ServerImpl.<init>(ServerImpl.java:64) ~[?:?]
	at org.apache.cxf.frontend.ServerFactoryBean.create(ServerFactoryBean.java:182) ~[?:?]
	at org.apache.cxf.jaxws.JaxWsServerFactoryBean.create(JaxWsServerFactoryBean.java:211) ~[?:?]
	at org.apache.cxf.jaxws.blueprint.JAXWSBPNamespaceHandler$BPJaxWsServerFactoryBean.create(JAXWSBPNamespaceHandler.java:111) ~[?:?]
	at org.apache.cxf.jaxws.blueprint.JAXWSBPNamespaceHandler$BPJaxWsServerFactoryBean.init(JAXWSBPNamespaceHandler.java:106) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:?]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:?]
	at org.apache.aries.blueprint.utils.ReflectionUtils.invoke(ReflectionUtils.java:337) ~[?:?]
	at org.apache.aries.blueprint.container.BeanRecipe.invoke(BeanRecipe.java:835) ~[?:?]
	at org.apache.aries.blueprint.container.BeanRecipe.runBeanProcInit(BeanRecipe.java:591) ~[?:?]
	... 40 more
Caused by: java.lang.IllegalStateException: Port 8282 is configured with wrong protocol ""https"" for ""http://localhost:8282/jaxws""
	at org.apache.cxf.transport.http_undertow.UndertowHTTPDestination.retrieveEngine(UndertowHTTPDestination.java:115) ~[?:?]
	at org.apache.cxf.transport.http_undertow.UndertowHTTPDestination.finalizeConfig(UndertowHTTPDestination.java:129) ~[?:?]
	at org.apache.cxf.transport.http.HTTPTransportFactory.getDestination(HTTPTransportFactory.java:288) ~[?:?]
	at org.apache.cxf.binding.soap.SoapTransportFactory.getDestination(SoapTransportFactory.java:135) ~[?:?]
	at org.apache.cxf.endpoint.ServerImpl.initDestination(ServerImpl.java:85) ~[?:?]
	at org.apache.cxf.endpoint.ServerImpl.<init>(ServerImpl.java:64) ~[?:?]
	at org.apache.cxf.frontend.ServerFactoryBean.create(ServerFactoryBean.java:182) ~[?:?]
	at org.apache.cxf.jaxws.JaxWsServerFactoryBean.create(JaxWsServerFactoryBean.java:211) ~[?:?]
	at org.apache.cxf.jaxws.blueprint.JAXWSBPNamespaceHandler$BPJaxWsServerFactoryBean.create(JAXWSBPNamespaceHandler.java:111) ~[?:?]
	at org.apache.cxf.jaxws.blueprint.JAXWSBPNamespaceHandler$BPJaxWsServerFactoryBean.init(JAXWSBPNamespaceHandler.java:106) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:?]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:?]
	at org.apache.aries.blueprint.utils.ReflectionUtils.invoke(ReflectionUtils.java:337) ~[?:?]
	at org.apache.aries.blueprint.container.BeanRecipe.invoke(BeanRecipe.java:835) ~[?:?]
	at org.apache.aries.blueprint.container.BeanRecipe.runBeanProcInit(BeanRecipe.java:591) ~[?:?]
	... 40 more
{noformat}",,"JiriOndrusek commented on pull request #513: [CXF-7977] Osgi quickstasrt (keycloak-cxf) fails with wrong protocol 
URL: https://github.com/apache/cxf/pull/513
 
 
   Issue https://jira.apache.org/jira/browse/CXF-7977
   
   Make condition to detect https more strict. According to https://github.com/apache/cxf/blob/master/rt/transports/http-undertow/src/main/java/org/apache/cxf/transport/http_undertow/UndertowHTTPServerEngine.java#L277 there has to be present clientAuthentication in case of non http connection.
   Test also needed to be enhanced.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;20/Feb/19 11:17;githubbot;600","JiriOndrusek commented on pull request #513: [CXF-7977] Osgi quickstasrt (keycloak-cxf) fails with wrong protocol 
URL: https://github.com/apache/cxf/pull/513
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;20/Feb/19 13:24;githubbot;600",,,,0,1200,,,0,1200,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2019-02-20 11:45:47.438,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Sun Mar 03 02:24:43 UTC 2019,,,,,,0|yi166w:,9223372036854775807,,,,,,,,20/Feb/19 11:18;jondruse;PR https://github.com/apache/cxf/pull/513,"20/Feb/19 11:45;ffang;Hi [~jondruse],

I don't think your change in that PR is correct.

""tlsServerParameters.getClientAuthentication() != null"" isn't a compulsory requirement for  HTTPS protocol

Freeman","20/Feb/19 13:29;jondruse;[~ffang] Thank you.  

My current results shows, that problem is probably not in cxf. I was able to simulate expected (correct) behavior through cxf's junit tests -> so error is probably somewhere else.  
To be sure I'll investigate it more.","20/Feb/19 22:41;ffang;Thanks [~jondruse]!

I will close this issue for now, feel free to reopen if it's a issue here

Freeman",01/Mar/19 15:48;gzres;[~ffang] is this really not a problem?,"03/Mar/19 02:24;ffang;The fix should be somewhere else, I'm on it ...",,,,,,,,,,,,,,,,,,,,,,,,
[oauth2] token service does not serialize the issuer,CXF-7976,13216727,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,coheigea,romain.manni-bucau,romain.manni-bucau,19/Feb/19 19:12,21/Feb/19 10:07,14/Mar/19 02:31,21/Feb/19 10:07,3.3.0,,,3.3.1,,,,,,0,,,,,,,,,,,,,,,,,,,MEECROWAVE-183,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2019-02-20 13:01:58.003,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Wed Feb 20 17:47:52 UTC 2019,,,,,,0|yi15f4:,9223372036854775807,,,,,,,,"20/Feb/19 13:01;coheigea;You have the option of overriding the ""createNewAccessToken"" method in the OAuth provider. See here for example:

[https://github.com/apache/cxf/commit/bc7d9c0b017be38c7aa066eaad179cb6df7ef4ab]

I think that's probably sufficient. I guess we could add a ""setIssuer"" to the abstract provider.",20/Feb/19 14:15;romain.manni-bucau;[~coheigea] this is what I did but it is quite verbose for what it does: https://github.com/apache/meecrowave/commit/0bfd43e37a4a3c181593a0b2091e18dc04be79e9#diff-b15a9a157228804ef29ba9ea261a793aR121,"20/Feb/19 17:47;coheigea;[~romain.manni-bucau] Yeah agreed. I'll add a ""setIssuer"" to the base class.",,,,,,,,,,,,,,,,,,,,,,,,,,,
Definition of <library ..jaxws-api..> defined in cxf-jaxws causes trouble in jdk11,CXF-7974,13216387,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,ffang,jondruse,jondruse,18/Feb/19 12:40,19/Feb/19 00:15,14/Mar/19 02:31,19/Feb/19 00:15,,,,3.3.1,3.4.0,,OSGi,,,0,,,,,"Definition
{noformat}
<library type=""endorsed"" export=""true"">mvn:org.apache.servicemix.specs/org.apache.servicemix.specs.jaxws-api-2.2/${cxf.servicemix.specs.version}</library>
{noformat}
causes problem when packages are loaded in jdk11. Jaxws has to be handled differently, but export=true causes changes in etc/config, which can not be there.",,"JiriOndrusek commented on pull request #512: CXF-7974 <library> defined in cxf-jaxws causes trouble (jdk11)
URL: https://github.com/apache/cxf/pull/512
 
 
   Issue: https://issues.apache.org/jira/browse/CXF-7974
   
   Removal of <library ....jaxws-api.. > from cxf-jaxws. Library is already defined in cxf-specs, so it could be removed -> solves problems on jdk11.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;18/Feb/19 12:49;githubbot;600","ffang commented on pull request #512: CXF-7974 <library> defined in cxf-jaxws causes trouble (jdk11)
URL: https://github.com/apache/cxf/pull/512
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;19/Feb/19 00:11;githubbot;600",,,,0,1200,,,0,1200,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2019-02-19 00:14:45.33,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Tue Feb 19 00:15:49 UTC 2019,,,,,,0|yi13cg:,9223372036854775807,,,,,,,,18/Feb/19 12:56;jondruse;PR https://github.com/apache/cxf/pull/512,"19/Feb/19 00:14;ffang;a little bit more background about this issue.

This is a problem when building customized Karaf kit based on cxf features.xml, this <library type=""endorsed"" could pollute etc/config.properties in generated kit",19/Feb/19 00:15;ffang;patch applied on behalf of [~jondruse] with thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add NPE guard for jetty and undertow threads configuration in blueprint (to prevent NPE during karaf-quickstart/../Keycloak-cxf quickstarts),CXF-7973,13216323,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,ffang,jondruse,jondruse,18/Feb/19 08:34,18/Feb/19 11:53,14/Mar/19 02:31,18/Feb/19 11:53,3.3.0,,,3.2.9,3.3.1,3.4.0,,,,0,,,,,"Run quickstart security/keycloak/keycloak-cxf according to [README.md|https://github.com/jboss-fuse/karaf-quickstarts/blob/7.x.redhat-7-x/security/keycloak/keycloak-cxf/README.md]

Bundle deployment fails with following error:

{noformat}2019-02-14 10:50:53,707 | ERROR | .3.0.redhat-SNAPSHOT | o.a.a.b.c.BlueprintContainerImpl | 51 - org.apache.aries.blueprint.core - 1.9.0 | Unable to start blueprint container for bundle keycloak-cxf/7.3.0.redhat-SNAPSHOT
org.osgi.service.blueprint.container.ComponentDefinitionException: Unable to initialize bean kc-cxf-endpoint-config
	at org.apache.aries.blueprint.container.BeanRecipe.runBeanProcInit(BeanRecipe.java:593) ~[51:org.apache.aries.blueprint.core:1.9.0]
	at org.apache.aries.blueprint.container.BeanRecipe.internalCreate2(BeanRecipe.java:703) ~[51:org.apache.aries.blueprint.core:1.9.0]
	at org.apache.aries.blueprint.container.BeanRecipe.internalCreate(BeanRecipe.java:666) ~[51:org.apache.aries.blueprint.core:1.9.0]
	at org.apache.aries.blueprint.di.AbstractRecipe$1.call(AbstractRecipe.java:81) ~[51:org.apache.aries.blueprint.core:1.9.0]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:?]
	at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:90) ~[51:org.apache.aries.blueprint.core:1.9.0]
	at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:360) ~[51:org.apache.aries.blueprint.core:1.9.0]
	at org.apache.aries.blueprint.container.BlueprintRepository.createAll(BlueprintRepository.java:190) ~[51:org.apache.aries.blueprint.core:1.9.0]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.instantiateEagerComponents(BlueprintContainerImpl.java:716) ~[51:org.apache.aries.blueprint.core:1.9.0]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:413) [51:org.apache.aries.blueprint.core:1.9.0]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:278) [51:org.apache.aries.blueprint.core:1.9.0]
	at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:299) [51:org.apache.aries.blueprint.core:1.9.0]
	at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:268) [51:org.apache.aries.blueprint.core:1.9.0]
	at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:264) [51:org.apache.aries.blueprint.core:1.9.0]
	at org.apache.aries.blueprint.container.BlueprintExtender.modifiedBundle(BlueprintExtender.java:254) [51:org.apache.aries.blueprint.core:1.9.0]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:500) [51:org.apache.aries.blueprint.core:1.9.0]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:433) [51:org.apache.aries.blueprint.core:1.9.0]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$AbstractTracked.track(BundleHookBundleTracker.java:725) [51:org.apache.aries.blueprint.core:1.9.0]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.bundleChanged(BundleHookBundleTracker.java:463) [51:org.apache.aries.blueprint.core:1.9.0]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$BundleEventHook.event(BundleHookBundleTracker.java:422) [51:org.apache.aries.blueprint.core:1.9.0]
	at org.apache.felix.framework.util.SecureAction.invokeBundleEventHook(SecureAction.java:1179) [?:?]
	at org.apache.felix.framework.EventDispatcher.createWhitelistFromHooks(EventDispatcher.java:730) [?:?]
	at org.apache.felix.framework.EventDispatcher.fireBundleEvent(EventDispatcher.java:485) [?:?]
	at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:4579) [?:?]
	at org.apache.felix.framework.Felix.startBundle(Felix.java:2174) [?:?]
	at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:998) [?:?]
	at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:984) [?:?]
	at org.apache.karaf.bundle.command.Install.execute(Install.java:115) [121:org.apache.karaf.bundle.core:4.2.0.fuse-730017]
	at org.apache.karaf.shell.impl.action.command.ActionCommand.execute(ActionCommand.java:84) [145:org.apache.karaf.shell.core:4.2.0.fuse-730017]
	at org.apache.karaf.shell.impl.console.osgi.secured.SecuredCommand.execute(SecuredCommand.java:68) [145:org.apache.karaf.shell.core:4.2.0.fuse-730017]
	at org.apache.karaf.shell.impl.console.osgi.secured.SecuredCommand.execute(SecuredCommand.java:86) [145:org.apache.karaf.shell.core:4.2.0.fuse-730017]
	at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:571) [145:org.apache.karaf.shell.core:4.2.0.fuse-730017]
	at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:497) [145:org.apache.karaf.shell.core:4.2.0.fuse-730017]
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:386) [145:org.apache.karaf.shell.core:4.2.0.fuse-730017]
	at org.apache.felix.gogo.runtime.Pipe.doCall(Pipe.java:417) [145:org.apache.karaf.shell.core:4.2.0.fuse-730017]
	at org.apache.felix.gogo.runtime.Pipe.call(Pipe.java:229) [145:org.apache.karaf.shell.core:4.2.0.fuse-730017]
	at org.apache.felix.gogo.runtime.Pipe.call(Pipe.java:59) [145:org.apache.karaf.shell.core:4.2.0.fuse-730017]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:?]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:?]
	at java.lang.Thread.run(Thread.java:745) [?:?]
Caused by: java.lang.RuntimeException: Could not process configuration.
	at org.apache.cxf.transport.http_undertow.blueprint.UndertowHTTPServerEngineFactoryHolder.init(UndertowHTTPServerEngineFactoryHolder.java:180) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:?]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:?]
	at org.apache.aries.blueprint.utils.ReflectionUtils.invoke(ReflectionUtils.java:331) ~[?:?]
	at org.apache.aries.blueprint.container.BeanRecipe.invoke(BeanRecipe.java:838) ~[?:?]
	at org.apache.aries.blueprint.container.BeanRecipe.runBeanProcInit(BeanRecipe.java:591) ~[?:?]
	... 40 more
Caused by: java.lang.NullPointerException
	at org.apache.cxf.transport.http_undertow.blueprint.UndertowHTTPServerEngineFactoryHolder.init(UndertowHTTPServerEngineFactoryHolder.java:156) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:?]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:?]
	at org.apache.aries.blueprint.utils.ReflectionUtils.invoke(ReflectionUtils.java:331) ~[?:?]
	at org.apache.aries.blueprint.container.BeanRecipe.invoke(BeanRecipe.java:838) ~[?:?]
	at org.apache.aries.blueprint.container.BeanRecipe.runBeanProcInit(BeanRecipe.java:591) ~[?:?]
	... 40 more{noformat}",,"JiriOndrusek commented on pull request #511: CXF-7973 Add NPE guard for jetty and undertow threads configuration
URL: https://github.com/apache/cxf/pull/511
 
 
   Issue: https://jira.apache.org/jira/browse/CXF-7973
   
   Adding protection from NPE which could occur.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;18/Feb/19 08:41;githubbot;600","ffang commented on pull request #511: CXF-7973 Add NPE guard for jetty and undertow threads configuration
URL: https://github.com/apache/cxf/pull/511
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;18/Feb/19 11:44;githubbot;600",,,,0,1200,,,0,1200,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2019-02-18 11:53:51.954,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Mon Feb 18 11:53:51 UTC 2019,,,,,,0|yi12yo:,9223372036854775807,,,,,,,,18/Feb/19 08:42;jondruse;PR: https://github.com/apache/cxf/pull/511,18/Feb/19 11:53;ffang;patch applied on behalf of [~jondruse] with thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,,,
bin/scripts does't work on Java 11,CXF-7971,13216253,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,ffang,kongyeeku,kongyeeku,17/Feb/19 16:53,12/Mar/19 13:44,14/Mar/19 02:31,08/Mar/19 03:28,3.3.0,,,3.3.2,,,Tooling,,,0,wsdl2java,,,,"when I use CXF 3.3 and Java 11 to development Web Service,

because Java 11 have removed jaxws,  I have to add many JAR（including javax.jws-api-1.1.jar、jaxws-api-2.3.1.jar、jaxb-api-2.3.1.jar、jaxb-core-2.3.0.1.jar、jaxb-impl-2.3.2.jar、javax.xml.soap-api-1.4.0.jar、javax.annotation-api-1.3.2.jar ...）。

afterI published my Web Service succussfully, I want to use the wsdl2java tool, the tool show error as below:

-Djava.endorsed.dirs=E:\Java\Web_Service\CXF\apache-cxf-3.3.0\bin\..\lib\endorsed is not supported. Endorsed standards and standalone APIs
in modular form will be supported via the concept of upgradeable modules.
Error: Could not create the Java Virtual Machine.
Error: A fatal exception has occurred. Program will exit.

 

If I change the JAVA_HOME to Java 8, wsdl2java will work well, so I want to know if CXF 3.3 can work on Java 11?  how can I resolve this probleam",,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2019-02-18 14:26:44.362,,,no_permission,,Moderate,,,,Important,,,,,,,,9223372036854775807,,,Tue Mar 12 13:44:40 UTC 2019,,,,,,0|yi12j4:,9223372036854775807,,,,,,,,"18/Feb/19 05:54;kongyeeku;I have fixed this problem， there is a bug in the wsdl2java.bat script,

I delete 

 -Djava.endorsed.dirs=""%CXF_HOME%\lib\endorsed 

in the script

and add some jar on CLASSPATH","18/Feb/19 14:26;coheigea;[~ffang] - I think we can remove all ""endorsed"" directories from the scripts, what do you think?","18/Feb/19 17:06;kongyeeku;yes.

actually , I think CXF 3.3 did not test on Java 11 platform.

there is a script  like that  in the wsdl2java.bat 

""set TOOLS_JAR=%JAVA_HOME%\lib\tools.jar;""

but there is not tools.jar in the lib directory of Java 11.

 ","18/Feb/19 23:58;ffang;[~coheigea],

I think we can detect JDK version and if it's JDK8, keep the script as is, if it's JDK9+, remove endorsed and tools.jar, add necessary libs on classpath, just like we do for Apache Karaf scripts.

If we don't need endorsed folder for JDK8 at all, yup, let's remove this folder for any JDKs

Freeman",21/Feb/19 20:31;coheigea;[~ffang] - I updated the scripts so that for Java > 8 it doesn't add the tools.jar or the endorsed library. It still needs to be fixed though that we add the additional jars to the classpath.,"22/Feb/19 01:01;ffang;Thanks [~coheigea]!

I will add classpath.

Cheers
Freeman","28/Feb/19 01:49;ffang;Hi [~coheigea],

I found that your recent refactor on scripts introduce ""realpath"" which is a linux command, and I can't run bin/scripts on my mac.

How about we revert this and revisit it after 3.3.1 release?

Thanks!
Freeman","28/Feb/19 09:54;coheigea;[~ffang] OK, I reverted it.","11/Mar/19 10:51;coheigea;[~ffang] When I run ./wsdl2java on ubuntu I get a message (although it seems to work OK apart from that):

./wsdl2java: 41: ./wsdl2java: Bad substitution","12/Mar/19 02:49;ffang;Hi [~coheigea],

Thanks for trying it out!

I think this problem comes from that the default shell (/bin/sh) under Ubuntu points to dash, not bash.

Could you please try change the first line of wsdl2java from
{code}
#!/bin/sh 
{code}
to
{code}
#!/bin/bash
{code}
to see if it helps?

Sorry I don't have ubuntu machine at hand so can't test it on my own.

Freeman ","12/Mar/19 03:44;ffang;Hi [~coheigea],

I just pushed another commit which removed bash specific feature, would you please give it another shot to see if  it works on your ubuntu?

Thanks!

Freeman
","12/Mar/19 13:44;coheigea;[~ffang] - yes that works without the warning above, thanks!",,,,,,,,,,,,,,,,,,
Fix Undertow import range,CXF-7970,13215827,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,ffang,gzres,gzres,14/Feb/19 20:30,15/Feb/19 01:27,14/Mar/19 02:31,15/Feb/19 01:27,,,,3.3.1,,,OSGi,,,0,,,,,"Even if undertow was upgraded to 2.0.17.Final, there's still
{code:xml}
<cxf.undertow.osgi.version>[1.3, 1.5)</cxf.undertow.osgi.version>
{code}
in {{parent/pom.xml}}",,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Thu Feb 14 20:32:13 UTC 2019,,,,,,0|yi0zww:,9223372036854775807,,,,,,,,"14/Feb/19 20:32;gzres;[~ffang], could you please increase to {{[1.4,3.0)}}?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException in CXF JavaToWS,CXF-7969,13215710,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,coheigea,DmitryF,DmitryF,14/Feb/19 09:58,15/Feb/19 15:53,14/Mar/19 02:31,15/Feb/19 15:53,3.3.0,,,3.2.9,3.3.1,,Core,,,0,,,,,"NullPointerException in CXF JavaToWS.

There is a bug in isBuiltInTypes functions.

This line throws NullPointerException  if getPackage returns null.

return ""java.lang"".equals(clz.getPackage().getName());

This happens for the following array, for example:

StratSystem[][] systems

Argument of isBuiltInTypes: Class: class [Lcom.nomura.at.webservices.dto.StratSystem; getPackage null

 

Stack trace:

     [java] Error: java.lang.NullPointerException
      [java] java.lang.NullPointerException
      [java]     at org.apache.cxf.tools.java2wsdl.processor.internal.jaxws.Wrapper.isBuiltInTypes(Wrapper.java:185)
      [java]     at org.apache.cxf.tools.java2wsdl.processor.internal.jaxws.Wrapper.getTypeString(Wrapper.java:205)
      [java]     at org.apache.cxf.tools.java2wsdl.processor.internal.jaxws.RequestWrapper.buildFields(RequestWrapper.java:75)
      [java]     at org.apache.cxf.tools.java2wsdl.processor.internal.jaxws.RequestWrapper.buildFields(RequestWrapper.java:62)
      [java]     at org.apache.cxf.tools.java2wsdl.processor.internal.jaxws.Wrapper.buildWrapperBeanClass(Wrapper.java:130)
      [java]     at org.apache.cxf.tools.java2wsdl.generator.wsdl11.WrapperBeanGenerator.generateBeanClasses(WrapperBeanGenerator.java:41)
      [java]     at org.apache.cxf.tools.java2wsdl.generator.wsdl11.BeanGenerator.generate(BeanGenerator.java:55)
      [java]     at org.apache.cxf.tools.java2wsdl.generator.wsdl11.BeanGenerator.generate(BeanGenerator.java:35)
      [java]     at org.apache.cxf.tools.java2wsdl.processor.JavaToWSDLProcessor.generate(JavaToWSDLProcessor.java:156)
      [java]     at org.apache.cxf.tools.java2wsdl.processor.JavaToWSDLProcessor.process(JavaToWSDLProcessor.java:118)
      [java]     at org.apache.cxf.tools.java2ws.JavaToWSContainer.processWSDL(JavaToWSContainer.java:116)
      [java]     at org.apache.cxf.tools.java2ws.JavaToWSContainer.execute(JavaToWSContainer.java:81)
      [java]     at org.apache.cxf.tools.common.toolspec.ToolRunner.runTool(ToolRunner.java:105)
      [java]     at org.apache.cxf.tools.common.toolspec.ToolRunner.runTool(ToolRunner.java:58)
      [java]     at org.apache.cxf.tools.common.toolspec.ToolRunner.runTool(ToolRunner.java:40)
      [java]     at org.apache.cxf.tools.java2ws.JavaToWS.run(JavaToWS.java:79)
      [java]     at org.apache.cxf.tools.java2ws.JavaToWS.main(JavaToWS.java:47)
      [java] JavaToWS Error: org.apache.cxf.tools.common.ToolException
      [java] org.apache.cxf.tools.common.ToolException
      [java]     at org.apache.cxf.tools.java2ws.JavaToWSContainer.execute(JavaToWSContainer.java:107)
      [java]     at org.apache.cxf.tools.common.toolspec.ToolRunner.runTool(ToolRunner.java:105)
      [java]     at org.apache.cxf.tools.common.toolspec.ToolRunner.runTool(ToolRunner.java:58)
      [java]     at org.apache.cxf.tools.common.toolspec.ToolRunner.runTool(ToolRunner.java:40)
      [java]     at org.apache.cxf.tools.java2ws.JavaToWS.run(JavaToWS.java:79)
      [java]     at org.apache.cxf.tools.java2ws.JavaToWS.main(JavaToWS.java:47)

 

 

 

 ",,,,,,,,,,,,,,,,,,,,,14/Feb/19 17:04;DmitryF;StratSystem.java;https://issues.apache.org/jira/secure/attachment/12958748/StratSystem.java,14/Feb/19 17:07;DmitryF;TestImpl.java;https://issues.apache.org/jira/secure/attachment/12958751/TestImpl.java,,2.0,,,,,,,,,,,,,,,,,,,2019-02-14 16:42:27.177,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Fri Feb 15 08:36:59 UTC 2019,,,,,,0|yi0z7c:,9223372036854775807,,,,,,,,"14/Feb/19 16:24;DmitryF;This works fine in CXF 2.7.5 and generated XSD looks:

      <xs:element maxOccurs=""unbounded"" minOccurs=""0"" name=""arg2"" type=""tns:stratSystemArray""/>

...

<xs:complexType final=""#all"" name=""stratSystemArray"">
     <xs:sequence>
       <xs:element maxOccurs=""unbounded"" minOccurs=""0"" name=""item"" nillable=""true"" type=""tns:stratSystem""/>
     </xs:sequence>
   </xs:complexType>
 </xs:schema>

...

<xs:complexType name=""stratSystem"">
     <xs:sequence>
       <xs:element minOccurs=""0"" name=""systemId"" type=""xs:string""/>
       <xs:element minOccurs=""0"" name=""systemName"" type=""xs:string""/>
     </xs:sequence>
   </xs:complexType>","14/Feb/19 16:42;coheigea;I can fix the NPE, but can you submit a Java class that we can use to reproduce the problem?",15/Feb/19 08:36;DmitryF;Please see Java classes attached.,,,,,,,,,,,,,,,,,,,,,,,,,,,
JavaDocProvider does not work with JDK > 8,CXF-7968,13214632,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,ilgrosso,ilgrosso,ilgrosso,08/Feb/19 14:25,08/Feb/19 14:30,14/Mar/19 02:31,08/Feb/19 14:30,3.3.0,,,3.3.1,,,JAX-RS,,,0,,,,,"With javadocs generated by Java 9, 10 and 11, JavaDocProvider always return null both for methods' and method parameters' documentation.",,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Fri Feb 08 14:30:32 UTC 2019,,,,,,0|yi0skg:,9223372036854775807,,,,,,,,08/Feb/19 14:30;ilgrosso;https://gitbox.apache.org/repos/asf?p=cxf.git;a=commit;h=6307f6334302c370b8a463914c963f4f644ce536,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Swagger2Feature Doesn't Work With Swagger Versions Above 1.5.17,CXF-7957,13212796,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,,jwcarman,jwcarman,30/Jan/19 11:57,01/Feb/19 00:08,14/Mar/19 02:31,01/Feb/19 00:08,3.1.18,3.2.8,3.3.0,3.2.9,3.3.1,,JAX-RS,Services,,0,,,,,"We were trying to bump up to the latest patch versions of all of our dependencies.  When we upgrade Swagger to the latest version, it caused the Swagger UI to break and we noticed this message in the logs:


""Problem with writing the data, class io.swagger.models.Swagger, ContentType: application/json""",,"jwcarman commented on pull request #507: CXF-7957: Swagger2Feature Doesn't Work With Swagger Versions Above 1.…
URL: https://github.com/apache/cxf/pull/507
 
 
   This patch compensates for the Swagger library's change in behavior.  They are now using a Swagger object as the entity in their responses and relying upon the SwaggerSerializers (a MessageBodyWriter<Swagger>) to take care of the serialization (they were previously just converting to a JSON string and using that as the entity).  The JSON serialization causes there to be null values in the JSON, which was breaking our SwaggerParseUtils method (there's an included test case for it).  
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;30/Jan/19 13:52;githubbot;600","reta commented on pull request #507: CXF-7957: Swagger2Feature Doesn't Work With Swagger Versions Above 1.…
URL: https://github.com/apache/cxf/pull/507
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;30/Jan/19 21:45;githubbot;600",,,,0,1200,,,0,1200,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2019-01-30 13:38:36.38,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Fri Feb 01 00:07:18 UTC 2019,,,,,,0|yi0h9s:,9223372036854775807,,,,,,,,"30/Jan/19 13:31;jwcarman;I figured out the issue.  The Swagger folks decided to switch from manually serializing their Swagger objects to JSON to using the SwaggerSerializers to take care of it for them.  One quick fix is to simply add SwaggerSerializers to the ""providers"" list in the Swagger2Feature.  However, the systest for SwaggerToOpenApiConversionFilter fails, because SwaggerToOpenApiConversionFilter assumes the entity returned is a String object and casts it to String (it's a Swagger object).  Working on the fix for that now...","30/Jan/19 13:38;ilgrosso;Thanks for looking at it [~jwcarman] - please look carefully at {{SwaggerToOpenApiConversionFilter}}, we're relying on that :-)","30/Jan/19 13:40;jwcarman;Yep, I'm on it.  I'm fixing the code as we speak.  ","30/Jan/19 13:52;jwcarman;Let's try this:

https://github.com/apache/cxf/pull/507","01/Feb/19 00:07;reta;The 3.1.x is not maintained anymore (since we have 3.3.0 out a few days ago), so the PR won't be back-ported. The builds have also been removed from CIs.",,,,,,,,,,,,,,,,,,,,,,,,,
add NPE guard for jetty and undertow threads configuration in blueprint,CXF-7956,13212690,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,ffang,ffang,ffang,30/Jan/19 01:34,30/Jan/19 01:38,14/Mar/19 02:31,30/Jan/19 01:38,,,,3.2.9,3.3.1,3.4.0,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,2019-01-30 01:34:58.0,,,,,,0|yi0gm8:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException in Utils.java file,CXF-7947,13210185,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,deki,MK_dir98,MK_dir98,17/Jan/19 15:30,17/Jan/19 19:15,14/Mar/19 02:31,17/Jan/19 19:15,,,,3.1.18,3.2.8,3.3.0,,,,0,,,,,"Hi

when I used cxf 3.2.5 with  java classes that it's package is null when my run arrive to org.apache.cxf.jaxb.Utils.java class in line number 270 its return NullpointerException beacause my class not have package.

when I catch this error it's worked. ",,,,,,,,,,,,,,,,,,,CXF-7515,,,,,0.0,,,,,,,,,,,,,,,,,,,2019-01-17 15:37:43.426,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Thu Jan 17 15:37:43 UTC 2019,,,,,,0|yi017s:,9223372036854775807,,,,,,,,17/Jan/19 15:37;deki;Sounds similar to CXF-7515.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
OperationResourceInfoComparator should consider methods parameters,CXF-7946,13209815,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,ffang,ffang,ffang,16/Jan/19 08:03,18/Jan/19 08:36,14/Mar/19 02:31,16/Jan/19 08:05,,,,3.2.8,3.3.0,,,,,0,,,,,"In samples/jax_rs/spring_boot shipped with CXF kit, we can see warning message like
{code}
WARNING: Both org.apache.cxf.jaxrs.openapi.OpenApiCustomizedResource#getOpenApi and org.apache.cxf.jaxrs.openapi.OpenApiCustomizedResource#getOpenApi are equal candidates for handling the current request which can lead to unpredictable results
{code}
when using swagger-ui.

This is caused by that class OpenApiCustomizedResource has getOpenApi method, but its parent class OpenApiResource also has getOpenApi method, two methods are using different signatures.  OperationResourceInfoComparator shouldn't see two methods as same because they are different",,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,2019-01-16 08:03:07.0,,,,,,0|y00200:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Swagger and Swagger UI modules export the same package which causes error in modular apps (Java 9+) ,CXF-7945,13209769,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,reta,reta,reta,16/Jan/19 01:52,16/Jan/19 16:45,14/Mar/19 02:31,16/Jan/19 16:45,3.2.7,,,3.2.8,3.3.0,,,,,0,,,,,"Error occurred during initialization of boot layer
java.lang.module.ResolutionException: Modules org.apache.cxf.rs.swagger.ui and org.apache.cxf.rs.swagger export package org.apache.cxf.jaxrs.swagger to module javax.servlet.api",,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,2019-01-16 01:52:12.0,,,,,,0|y001pk:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
OAuthClientUtils hides error message if it contains a comma,CXF-7944,13209726,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,coheigea,levi.miller,levi.miller,15/Jan/19 21:05,18/Jan/19 18:39,14/Mar/19 02:31,18/Jan/19 18:39,3.2.7,,,3.2.8,3.3.0,,,,,0,,,,,"OAuthClientUtils.getAccessToken hides the response error if the error message contains a comma.

The root cause of this is that OAuthJSONProvider.readJSONResponse uses String.split("","") to parse the json string, which throws
{code:java}
java.lang.StringIndexOutOfBoundsException: String index out of range: -1{code}
if there are unexpected commas.

 

Stack trace:
{code:java}
java.lang.StringIndexOutOfBoundsException: String index out of range: -1
	at java.lang.String.substring(Unknown Source)
	at org.apache.cxf.rs.security.oauth2.provider.OAuthJSONProvider.readJSONResponse(OAuthJSONProvider.java:310)
	at org.apache.cxf.rs.security.oauth2.client.OAuthClientUtils.getAccessToken(OAuthClientUtils.java:312)
	at org.apache.cxf.rs.security.oauth2.client.OAuthClientUtils.getAccessToken(OAuthClientUtils.java:231)
	at org.apache.cxf.rs.security.oauth2.client.OAuthClientUtils.getAccessToken(OAuthClientUtils.java:179){code}
response.getEntity() json string:
{code:java}
{""error"":""invalid_client"",""error_description"":""Client authentication failed due to unknown client, no client authentication included, or unsupported authentication method.""}{code}",,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Novice,,,,,,,,,,,,9223372036854775807,,,2019-01-15 21:05:16.0,,,,,,0|y001g0:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FileUtils.delete dramatically slowdown WildFly server shutdown,CXF-7940,13208975,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,coheigea,veselroger,veselroger,11/Jan/19 11:12,11/Jan/19 15:58,14/Mar/19 02:31,11/Jan/19 13:51,3.0.0-milestone1,3.3.0,,3.3.0,,,Core,,,0,,,,,"*Brief introduction:*
We use WildFly server.
As we know, WildFly based on JBoss Application Server.
WildFly have an integration with Apache CXF through ""[jbossws-cxf|https://github.com/jbossws/jbossws-cxf]"" project.

When WildFly server is stops we see repeated invokes of WSDLFilePublisher.java#unpublishWsdlFiles that invoke FileUtils#removeDir

*Cause of problems:*
When the method FileUtils#removeDir is invoked then we see the invoke of FileUtils#delete:
https://github.com/apache/cxf/blob/master/core/src/main/java/org/apache/cxf/helpers/FileUtils.java#L254.

We see some strange code:
{code:java}
public static void delete(File f, boolean inShutdown) {
        if (!f.delete()) {
            if (isWindows()) {
                System.gc();
            }
{code}
This leads to dramatically slowdown of WildFly server shutdown on Windows systems.
For example, our WildFly server stops in 2781ms without this call AND stops in 119882ms with this call (~ 43 times slower).

*Questions:*
What is the reason of this code? 
Is it bug? What are the disadvantages of removing this code?

Last changes of this code from Git Blame: [commit|https://github.com/apache/cxf/commit/88a9451b92180609b7bb93d0314bc8384f0c24a4#diff-b620deea897fb467b6f42abd1c32b7f2R138].","*OS*: Windows
*AppServer*: WildFly 10.0.0.1.Final
*CXF*: cxf-core-3.1.6
*jbossws-cxf*: jbossws-cxf-server-5.1.5.Final",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2019-01-11 12:59:51.744,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Fri Jan 11 15:58:38 UTC 2019,,,,,,0|u00qo8:,9223372036854775807,,,,,,,,11/Jan/19 12:59;coheigea;I'll remove this code.,"11/Jan/19 15:58;dkulp;Just a note:  with the removal of this, if there are temp files that are locked due to streams not being closed properly, they may remain after shutdown.   The purpose of that line was to hopefully get the file streams and such garbage collected and finalized so that the files can be removed.   With this change, if the delete fails, it will likely just keep the files around.  (and this is really just Windows issue as all the unix's can delete open files)",,,,,,,,,,,,,,,,,,,,,,,,,,,,
SAML SubjectConfirmation validation in PolicyBasedWSS4JInInterceptor,CXF-7935,13206006,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,coheigea,tomasv,tomasv,21/Dec/18 15:56,03/Jan/19 17:55,14/Mar/19 02:31,03/Jan/19 17:55,3.2.7,,,3.2.8,3.3.0,,Configuration,WS-* Components,,0,,,,,"WSS4J enforces the SubjectConfirmation requirements of an inbound SAML Token. For sender-vouches, a signature must be present that covers both the SOAP Body and the SAML Assertion. As explained here [http://coheigea.blogspot.com/2014/01/apache-wss4j-200-part-ii.html,] the configuration tag defined as ConfigurationConstants.VALIDATE_SAML_SUBJECT_CONFIRMATION (""validateSamlSubjectConfirmation"") allows the user to switch off this validation if required.

We need to switch off the validation, in order to process non-TLS requests where only the SAML assertion is signed.

Unfortunately, it turns out that SubjectConfirmation validation cannot be switched off when using PolicyBasedWSS4JInInterceptor. It uses SamlTokenPolicyValidator, containing the following code:

 
{code:java}
if (!DOMSAMLUtil.checkSenderVouches(assertionWrapper, tlsCerts, parameters.getSoapBody(), parameters.getSignedResults())) {
    ai.setNotAsserted(""Assertion fails sender-vouches requirements"");
    continue;
}
{code}
This is different from WSS4JInInterceptor, which through WSSecurityEngine uses the following code:
{code:java}
if (requestData.isValidateSamlSubjectConfirmation()) {
    Element bodyElement = callbackLookupToUse.getSOAPBody();
    DOMSAMLUtil.validateSAMLResults(handlerResult, requestData.getTlsCerts(), bodyElement);
}
{code}
Please add similar handling of the VALIDATE_SAML_SUBJECT_CONFIRMATION configuration tag into PolicyBasedWSS4JInInterceptor.",,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2019-01-03 17:09:35.339,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Thu Jan 03 17:09:35 UTC 2019,,,,,,0|u008mo:,9223372036854775807,,,,,,,,"03/Jan/19 17:09;coheigea;There is an existing configuration tag for the WS-SecurityPolicy case - SecurityConstants.VALIDATE_SAML_SUBJECT_CONFIRMATION(""security.validate.saml.subject.conf""), which is translated into the WSS4J configuration tag for WSS4J processing. Unfortunately it isn't applied in the validator as you pointed out. I'll fix this...",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
cxf-java2ws-plugin: Only one WSDL is generated and deployed per artifact.,CXF-7924,13203410,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,ffang,hab,hab,10/Dec/18 11:35,04/Jan/19 11:31,14/Mar/19 02:31,17/Dec/18 09:50,3.2.7,,,3.2.8,3.3.0,,Tooling,,,0,,,,,"If more than one WSDL is created in a Maven build, only one WSDL is created and stored in the repository. With version 3.2.4 a file with the extension <webservice>.wsdl is created for each WSDL, with version 3.2.7 there is only one file with the extension .wsdl, in which probably only the last generated webservice was stored.
All projects that offer several web services can not be converted to version 3.2.7.

<execution>
 <id>wsdl-ABCWS</id>
 <phase>process-classes</phase>
 <configuration>
 <className>backend.ws.ABCWS</className>
 <genWsdl>true</genWsdl>
 <verbose>true</verbose>
 <outputFile>${project.build.directory}/generated-sources/wsdl/ABCWS.wsdl</outputFile>
 <attachWsdl>true</attachWsdl>
 </configuration>
 <goals>
 <goal>java2ws</goal>
 </goals>
 </execution>
 <execution>
 <id>wsdl-XYZWS</id>
 <phase>process-classes</phase>
 <configuration>
 <className>backend.ws.XYZWS</className>
 <genWsdl>true</genWsdl>
 <verbose>true</verbose>
 <outputFile>${project.build.directory}/generated-sources/wsdl/XYZWS.wsdl</outputFile>
 <attachWsdl>true</attachWsdl>
 </configuration>
 <goals>
 <goal>java2ws</goal>
 </goals>
 </execution>","Maven 3.5.4, JDK 1.8.0_191","amarkevich commented on pull request #492: [cxf-systests-codegen] update dependency after CXF-7924
URL: https://github.com/apache/cxf/pull/492
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;04/Jan/19 09:33;githubbot;600","amarkevich commented on pull request #492: [cxf-systests-codegen] update dependency after CXF-7924
URL: https://github.com/apache/cxf/pull/492
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;04/Jan/19 10:57;githubbot;600","amarkevich commented on pull request #493: cxf-systests-codegen: update dependency after CXF-7924
URL: https://github.com/apache/cxf/pull/493
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;04/Jan/19 10:59;githubbot;600","amarkevich commented on pull request #493: cxf-systests-codegen: update dependency after CXF-7924
URL: https://github.com/apache/cxf/pull/493
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;04/Jan/19 11:31;githubbot;600",,0,2400,,,0,2400,,,,,,,CXF-6420,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,2018-12-10 11:35:10.0,,,,,,0|s01cg0:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unable to invoke default interface methods in proxy-based clients,CXF-7922,13202894,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,andymc,andymc,andymc,06/Dec/18 19:38,17/Dec/18 12:13,14/Mar/19 02:31,17/Dec/18 12:13,3.2.7,,,3.2.8,3.3.0,,JAX-RS,,,0,,,,,"{{When invoking a default method on an interface used as a MicroProfile Rest Client interface (and presumably the JAX-RS proxy-based client), I see the following exception:}}

{{javax.ws.rs.ProcessingException: Method org.apache.cxf.microprofile.client.mock.MyClient.myDefaultMethod is not a valid resource method}}
{{ at org.apache.cxf.microprofile.client.CxfTypeSafeClientBuilderTest.testCanInvokeDefaultInterfaceMethods(CxfTypeSafeClientBuilderTest.java:172)}}

 

Invoking default interface methods from a dynamic proxy's InvocationHandler is outlined in this article:

[https://rmannibucau.wordpress.com/2014/03/27/java-8-default-interface-methods-and-jdk-dynamic-proxies/]

 

{{This type of operation becomes critical when combining the MicroProfile Rest Client with MP Fault Tolerance annotations like this:}}

{{public interface MyClient {}}
{{    @GET}}
{{    @Fallback(fallbackMethod=""useFallback"")}}
{{    String tryActualRemoteRequest();}}
{{}}{{    default String useFallback() {}}
{{        return ""useful default value"";}}
{{    }}}
{{}}}",,"andymc12 closed pull request #480: [CXF-7922] Invoke default interface methods on client interfaces
URL: https://github.com/apache/cxf/pull/480
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/rt/rs/client/src/main/java/org/apache/cxf/jaxrs/client/ClientProxyImpl.java b/rt/rs/client/src/main/java/org/apache/cxf/jaxrs/client/ClientProxyImpl.java
index a567f83a04f..6aaee1c623d 100644
--- a/rt/rs/client/src/main/java/org/apache/cxf/jaxrs/client/ClientProxyImpl.java
+++ b/rt/rs/client/src/main/java/org/apache/cxf/jaxrs/client/ClientProxyImpl.java
@@ -21,11 +21,16 @@
 import java.io.InputStream;
 import java.io.OutputStream;
 import java.lang.annotation.Annotation;
+import java.lang.invoke.MethodHandles;
 import java.lang.reflect.Field;
 import java.lang.reflect.InvocationHandler;
 import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
 import java.lang.reflect.Type;
 import java.net.URI;
+import java.security.AccessController;
+import java.security.PrivilegedActionException;
+import java.security.PrivilegedExceptionAction;
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.Collections;
@@ -154,6 +159,55 @@ private void initValuesMap(Object... varValues) {
         }
     }
 
+    private static class WrappedException extends Exception {
+        final Throwable wrapped;
+        WrappedException(Throwable wrapped) {
+            this.wrapped = wrapped;
+        }
+        Throwable getWrapped() {
+            return wrapped;
+        }
+    }
+
+    private static Object invokeDefaultMethod(Class<?> declaringClass, Object o, Method m, Object[] params)
+        throws Throwable {
+
+        try {
+            return AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {
+                @Override
+                public Object run() throws Exception {
+                    try {
+                        final MethodHandles.Lookup lookup = MethodHandles.publicLookup()
+                                .in(declaringClass);
+
+                        // force private access so unreflectSpecial can invoke the interface's default method
+                        final Field f = MethodHandles.Lookup.class.getDeclaredField(""allowedModes"");
+                        final int modifiers = f.getModifiers();
+                        if (Modifier.isFinal(modifiers)) {
+                            final Field modifiersField = Field.class.getDeclaredField(""modifiers"");
+                            modifiersField.setAccessible(true);
+                            modifiersField.setInt(f, modifiers & ~Modifier.FINAL);
+                            f.setAccessible(true);
+                            f.set(lookup, MethodHandles.Lookup.PRIVATE);
+                        }
+
+                        return lookup.unreflectSpecial(m, declaringClass)
+                                     .bindTo(o)
+                                     .invokeWithArguments(params);
+                    } catch (Throwable t) {
+                        throw new WrappedException(t);
+                    }
+                }
+            });
+        } catch (PrivilegedActionException pae) {
+            Throwable wrapped = pae.getCause();
+            if (wrapped instanceof WrappedException) {
+                throw ((WrappedException)wrapped).getWrapped();
+            }
+            throw wrapped;
+        }
+    }
+
     /**
      * Updates the current state if Client method is invoked, otherwise
      * does the remote invocation or returns a new proxy if subresource
@@ -171,6 +225,9 @@ public Object invoke(Object o, Method m, Object[] params) throws Throwable {
         resetResponse();
         OperationResourceInfo ori = cri.getMethodDispatcher().getOperationResourceInfo(m);
         if (ori == null) {
+            if (m.isDefault()) {
+                return invokeDefaultMethod(declaringClass, o, m, params);
+            }
             reportInvalidResourceMethod(m, ""INVALID_RESOURCE_METHOD"");
         }
 
diff --git a/rt/rs/microprofile-client/src/test/java/org/apache/cxf/microprofile/client/CxfTypeSafeClientBuilderTest.java b/rt/rs/microprofile-client/src/test/java/org/apache/cxf/microprofile/client/CxfTypeSafeClientBuilderTest.java
index b1e88558127..54be86ecd65 100644
--- a/rt/rs/microprofile-client/src/test/java/org/apache/cxf/microprofile/client/CxfTypeSafeClientBuilderTest.java
+++ b/rt/rs/microprofile-client/src/test/java/org/apache/cxf/microprofile/client/CxfTypeSafeClientBuilderTest.java
@@ -18,6 +18,7 @@
  */
 package org.apache.cxf.microprofile.client;
 
+import java.io.IOException;
 import java.net.URI;
 import java.net.URL;
 
@@ -163,6 +164,24 @@ public void testClientPropertiesAreSet() throws Exception {
             WebClientUtil.getClientConfigFromProxy(client).getRequestContext().get(""hello""));
     }
 
+    @Test
+    public void testCanInvokeDefaultInterfaceMethods() throws Exception {
+        MyClient client = RestClientBuilder.newBuilder()
+            .register(InvokedMethodClientRequestFilter.class)
+            .baseUri(new URI(""http://localhost:8080/neverUsed""))
+            .build(MyClient.class);
+        assertEquals(""defaultValue"", client.myDefaultMethod(false));
+    }
+
+    @Test(expected = IOException.class)
+    public void testCanInvokeDefaultInterfaceMethodsWithException() throws Exception {
+        MyClient client = RestClientBuilder.newBuilder()
+            .register(InvokedMethodClientRequestFilter.class)
+            .baseUri(new URI(""http://localhost:8080/neverUsed""))
+            .build(MyClient.class);
+        client.myDefaultMethod(true);
+        fail(""Should have thrown IOException"");
+    }
     private void fail(Response r, String failureMessage) {
         System.out.println(r.getStatus());
         fail(failureMessage);
diff --git a/rt/rs/microprofile-client/src/test/java/org/apache/cxf/microprofile/client/mock/MyClient.java b/rt/rs/microprofile-client/src/test/java/org/apache/cxf/microprofile/client/mock/MyClient.java
index c3808456f6e..beafc977d75 100644
--- a/rt/rs/microprofile-client/src/test/java/org/apache/cxf/microprofile/client/mock/MyClient.java
+++ b/rt/rs/microprofile-client/src/test/java/org/apache/cxf/microprofile/client/mock/MyClient.java
@@ -18,6 +18,8 @@
  */
 package org.apache.cxf.microprofile.client.mock;
 
+import java.io.IOException;
+
 import javax.ws.rs.GET;
 import javax.ws.rs.Path;
 import javax.ws.rs.core.Response;
@@ -26,4 +28,11 @@
 public interface MyClient {
     @GET
     Response get();
+
+    default String myDefaultMethod(boolean throwException) throws IOException {
+        if (throwException) {
+            throw new IOException(""expected"");
+        }
+        return ""defaultValue"";
+    }
 }


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;12/Dec/18 20:16;githubbot;600",,,,,0,600,,,0,600,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-12-06 19:50:27.826,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Thu Dec 06 19:50:27 UTC 2018,,,,,,0|s019a8:,9223372036854775807,,,,,,,,"06/Dec/18 19:50;githubbot;andymc12 opened a new pull request #480: [CXF-7922] Invoke default interface methods on client interfaces
URL: https://github.com/apache/cxf/pull/480
 
 
   Runtime code changes based on patterns described here:
   https://rmannibucau.wordpress.com/2014/03/27/java-8-default-interface-methods-and-jdk-dynamic-proxies/
   
   This enables default interface methods to be invoked when they are not overridden or annotated with `@GET`-type annotations.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE in OAuth 2.0 JCacheOAuthDataProvider with isStoreJwtTokenKeyOnly,CXF-7913,13201301,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,coheigea,coheigea,coheigea,29/Nov/18 10:11,29/Nov/18 10:15,14/Mar/19 02:31,29/Nov/18 10:15,,,,3.2.8,3.3.0,,,,,0,,,,,There is a NPE in OAuth 2.0 JCacheOAuthDataProvider with isStoreJwtTokenKeyOnly when revoking access tokens.,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,2018-11-29 10:11:32.0,,,,,,0|s00zk8:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java.lang.NoSuchMethodError on RestClientBuilder.baseUri,CXF-7912,13201157,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,andymc,cesarhernandezgt,cesarhernandezgt,28/Nov/18 17:18,28/Nov/18 19:22,14/Mar/19 02:31,28/Nov/18 19:22,3.2.7,,,3.2.8,3.3.0,,JAX-RS,,,0,,,,,"When upgrading from CXF 3.2.6 to 3.2.7 in a basic MicroProfile client app, an exception is thought when the client is been builded:

 
{code:java}
java.lang.NoSuchMethodError: org.eclipse.microprofile.rest.client.RestClientBuilder.baseUri(Ljava/net/URI;)Lorg/eclipse/microprofile/rest/client/RestClientBuilder; 
{code}
 
The complete stack trace is attached to the ticket.

The code for the example can be found here: 

[https://github.com/cesarhernandezgt/tomee/tree/mp-rest-client-example/examples/mp-rest-client]","MicroprofileVersion: 1.3

Microprofile.rest-client.version: 1.0

 

 ",,,,,,,,,,,,,,,,,,,,28/Nov/18 17:12;cesarhernandezgt;log.log;https://issues.apache.org/jira/secure/attachment/12949880/log.log,,,1.0,,,,,,,,,,,,,,,,,,,2018-11-28 19:22:00.975,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Wed Nov 28 19:22:00 UTC 2018,,,,,,0|s00yo8:,9223372036854775807,,,,,,,,"28/Nov/18 19:22;andymc;Resolved with commit 7eb08b4e9136bc0bd50a7d23cc392e5cd5501f0c

https://github.com/apache/cxf/commit/7eb08b4e9136bc0bd50a7d23cc392e5cd5501f0c",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JAXBUtils fails to setEscapeHandler due to null escapeHandler,CXF-7905,13200230,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,ffang,thorsten.hersam,thorsten.hersam,23/Nov/18 11:40,27/Nov/18 03:51,14/Mar/19 02:31,27/Nov/18 03:51,3.2,,,3.2.8,3.3.0,,Core,,,0,,,,,"I am having the following issue with a SOAP request of my software deployed in Wildfly 13.0.0.Final. Wildfly makes use of CXF core in version 3.2.4-jbossorg-1. Of this version I was unable to find sources but my issue persists with any or the 3.2 versions of CXF.

The same software was previously deployed without any issues on Wildfly 10.0.1.Final which uses CXF 3.1.6.

Upon authentification at a SOAP web service I now receive the following exception:

 
{code:java}
12:26:29,314 WARNING [org.apache.cxf.phase.PhaseInterceptorChain] (default task-1) Interceptor for {http://endpoint.soap.webservice.logicaldoc.com/}SoapAuthServiceService#{http://ws.logicaldoc.com}login has thrown exception, unwinding now: java.lang.NullPointerException
	at com.sun.xml.bind.v2.runtime.MarshallerImpl.setProperty(MarshallerImpl.java:518)
	at org.apache.cxf.common.jaxb.JAXBUtils.setEscapeHandler(JAXBUtils.java:1567)
	at org.apache.cxf.jaxb.io.DataWriterImpl.lambda$createMarshaller$0(DataWriterImpl.java:138)
	at org.apache.cxf.jaxb.JAXBDataBinding.applyEscapeHandler(JAXBDataBinding.java:271)
	at org.apache.cxf.jaxb.io.DataWriterImpl.createMarshaller(DataWriterImpl.java:138)
	at org.apache.cxf.jaxb.io.DataWriterImpl.write(DataWriterImpl.java:239)
	at 
{code}
jaxb MarschallerImpl fails when org.apache.cxf.common.jaxb.JAXBUtils tries to set an EscapeHandler of null.

 

+Possible Solution+

Adding a null check at org.apache.cxf.common.jaxb.JAXBUtils.setEscapeHandler as indicated below, solves the issue.
{code:java}
public static void setEscapeHandler(Marshaller marshaller, Object escapeHandler) { 
     try { 
          String postFix = getPostfix(marshaller.getClass()); 
          if (postFix != null && escapeHandler != null) { 
             marshaller.setProperty(""com.sun.xml"" + postFix + "".bind.characterEscapeHandler"", escapeHandler); 
          } 
     } catch (PropertyException e) { 
          LOG.log(Level.INFO, ""Failed to set MinumEscapeHandler to jaxb marshaller"", e); 
     } 
}
{code}
 

While a PropertyException seems to be okay for CXF a null escapeHandler Object leads to escapeHandler.getClass().getName() called by jaxb MarshallerImpl just as it was trying to throw a PropertyException.

 

+Why is the EscapeHandler null+

A null EscapeHandler can occur when org.apache.cxf.common.jaxb.createEscapeHandler()'s actual return delegate ProxyHelper.getProxy() throws an Exception.

In my case a the following Exception is thrown:
{code:java}
Caused by: java.lang.IllegalArgumentException: interface org.apache.cxf.endpoint.Client is not visible from class loader at java.lang.reflect.Proxy$ProxyClassFactory.apply(Proxy.java:581) at java.lang.reflect.Proxy$ProxyClassFactory.apply(Proxy.java:557) at java.lang.reflect.WeakCache$Factory.get(WeakCache.java:230) at java.lang.reflect.WeakCache.get(WeakCache.java:127) at java.lang.reflect.Proxy.getProxyClass0(Proxy.java:419) at java.lang.reflect.Proxy.newProxyInstance(Proxy.java:719) at org.apache.cxf.common.util.ProxyHelper.getProxyInternal(ProxyHelper.java:49) at org.apache.cxf.common.util.ProxyHelper.getProxy(ProxyHelper.java:126) at org.apache.cxf.frontend.ClientProxyFactoryBean.create(ClientProxyFactoryBean.java:176) at org.apache.cxf.jaxws.JaxWsProxyFactoryBean.create(JaxWsProxyFactoryBean.java:142) at org.apache.cxf.jaxws.ServiceImpl.createPort(ServiceImpl.java:493) at org.jboss.wsf.stack.cxf.client.ProviderImpl$JBossWSServiceImpl.createPort(ProviderImpl.java:580) at org.apache.cxf.jaxws.ServiceImpl.getPort(ServiceImpl.java:359) at org.apache.cxf.jaxws.ServiceImpl.getPort(ServiceImpl.java:350) at javax.xml.ws.Service.getPort(Service.java:99) at com.logicaldoc.webservice.soap.endpoint.SoapAuthServiceService.getSoapAuthServicePort(SoapAuthServiceService.java:68)
{code}
 

org.apache.cxf.endpoint.Client does not seem to be visible of the combined classloader constructed in ProxyHelper.getProxyInternal().

I am not utterly familiar with ClassLoaders but I find it strange that org.apache.cxf classes - which are calling a ProxyHelper which constructs a ClassLoader for ""com.sun.xml.bind.marshaller.CharacterEscapeHandler"" - fail because another org.apache.cxf interface is not visible.

 

 ",,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-11-27 03:42:03.277,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Tue Nov 27 03:42:03 UTC 2018,,,,,,0|s00sz4:,9223372036854775807,,,,,,,,23/Nov/18 13:34;thorsten.hersam;The error occurs with all 3.2.x versions of CXF.,"27/Nov/18 03:42;ffang;I ran into similar issue like 
{code}
java.lang.IllegalArgumentException: interface com.sun.xml.bind.marshaller.CharacterEscapeHandler is not visible from class loader

	at java.lang.reflect.Proxy$ProxyClassFactory.apply(Proxy.java:581)

	at java.lang.reflect.Proxy$ProxyClassFactory.apply(Proxy.java:557)

	at java.lang.reflect.WeakCache$Factory.get(WeakCache.java:230)

	at java.lang.reflect.WeakCache.get(WeakCache.java:127)

	at java.lang.reflect.Proxy.getProxyClass0(Proxy.java:419)

	at java.lang.reflect.Proxy.newProxyInstance(Proxy.java:719)

	at org.apache.cxf.common.util.ProxyHelper.getProxyInternal(ProxyHelper.java:49)

	at org.apache.cxf.common.util.ProxyHelper.getProxy(ProxyHelper.java:126)

	at org.apache.cxf.common.jaxb.JAXBUtils.createEscapeHandler(JAXBUtils.java:1597)

	at org.apache.cxf.common.jaxb.JAXBUtils.createMininumEscapeHandler(JAXBUtils.java:1575)

	at org.apache.cxf.jaxb.JAXBDataBinding.setContext(JAXBDataBinding.java:257)

	at org.apache.cxf.jaxb.JAXBDataBinding.initialize(JAXBDataBinding.java:361)

	at org.apache.cxf.service.factory.AbstractServiceFactoryBean.initializeDataBindings(AbstractServiceFactoryBean.java:86)

	at org.apache.cxf.wsdl.service.factory.ReflectionServiceFactoryBean.buildServiceFromClass(ReflectionServiceFactoryBean.java:470)

	at org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean.buildServiceFromClass(JaxWsServiceFactoryBean.java:695)

	at org.apache.cxf.wsdl.service.factory.ReflectionServiceFactoryBean.initializeServiceModel(ReflectionServiceFactoryBean.java:530)

	at org.apache.cxf.wsdl.service.factory.ReflectionServiceFactoryBean.create(ReflectionServiceFactoryBean.java:263)

	at org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean.create(JaxWsServiceFactoryBean.java:199)

	at org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory.createEndpoint(AbstractWSDLBasedEndpointFactory.java:103)

	at org.apache.cxf.frontend.ServerFactoryBean.create(ServerFactoryBean.java:168)

	at org.apache.cxf.jaxws.JaxWsServerFactoryBean.create(JaxWsServerFactoryBean.java:211)

	at org.apache.cxf.jaxws.EndpointImpl.getServer(EndpointImpl.java:460)

	at org.apache.cxf.jaxws.EndpointImpl.doPublish(EndpointImpl.java:338)

	at org.apache.cxf.jaxws.EndpointImpl.publish(EndpointImpl.java:255)

	at org.apache.cxf.jaxws.EndpointImpl.publish(EndpointImpl.java:543)

	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

	at java.lang.reflect.Method.invoke(Method.java:498)

	at org.apache.aries.blueprint.utils.ReflectionUtils.invoke(ReflectionUtils.java:331)

	at org.apache.aries.blueprint.container.BeanRecipe.invoke(BeanRecipe.java:838)

	at org.apache.aries.blueprint.container.BeanRecipe.runBeanProcInit(BeanRecipe.java:591)

	at org.apache.aries.blueprint.container.BeanRecipe.internalCreate2(BeanRecipe.java:703)

	at org.apache.aries.blueprint.container.BeanRecipe.internalCreate(BeanRecipe.java:666)

	at org.apache.aries.blueprint.di.AbstractRecipe$1.call(AbstractRecipe.java:81)

	at java.util.concurrent.FutureTask.run(FutureTask.java:266)

	at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:90)

	at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:360)

	at org.apache.aries.blueprint.container.BlueprintRepository.createAll(BlueprintRepository.java:190)

	at org.apache.aries.blueprint.container.BlueprintContainerImpl.instantiateEagerComponents(BlueprintContainerImpl.java:716)

	at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:413)

	at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:278)

	at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:299)

	at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:268)

	at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:264)

	at org.apache.aries.blueprint.container.BlueprintExtender.modifiedBundle(BlueprintExtender.java:254)

	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:500)

	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:433)

	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$AbstractTracked.track(BundleHookBundleTracker.java:725)

	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.bundleChanged(BundleHookBundleTracker.java:463)

	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$BundleEventHook.event(BundleHookBundleTracker.java:422)

	at org.apache.felix.framework.util.SecureAction.invokeBundleEventHook(SecureAction.java:1179)

	at org.apache.felix.framework.EventDispatcher.createWhitelistFromHooks(EventDispatcher.java:730)

	at org.apache.felix.framework.EventDispatcher.fireBundleEvent(EventDispatcher.java:485)

	at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:4579)

	at org.apache.felix.framework.Felix.startBundle(Felix.java:2174)

	at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:998)

	at org.apache.karaf.bundle.command.Restart.doExecute(Restart.java:51)

	at org.apache.karaf.bundle.command.BundlesCommand.execute(BundlesCommand.java:56)

	at org.apache.karaf.shell.impl.action.command.ActionCommand.execute(ActionCommand.java:84)

	at org.apache.karaf.shell.impl.console.osgi.secured.SecuredCommand.execute(SecuredCommand.java:68)

	at org.apache.karaf.shell.impl.console.osgi.secured.SecuredCommand.execute(SecuredCommand.java:86)

	at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:571)

	at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:497)

	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:386)

	at org.apache.felix.gogo.runtime.Pipe.doCall(Pipe.java:417)

	at org.apache.felix.gogo.runtime.Pipe.call(Pipe.java:229)

	at org.apache.felix.gogo.runtime.Pipe.call(Pipe.java:59)

	at java.util.concurrent.FutureTask.run(FutureTask.java:266)

	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)

	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)

	at java.lang.Thread.run(Thread.java:748)

{code}

When having multiple jaxb-impl bundle versions inside Karaf container.

I think the problem you saw in JBoss EAP is similar, somehow you have multiple modules/jars both contains interface org.apache.cxf.endpoint.Client , however they are loaded by different clasloaders. You should resolve it in your container.

Anyway, add a NPE guard in CXF is what we can do best inside CXF. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,
OpenApiAutoConfiguration doesn't work with classes-scan-packages,CXF-7891,13196511,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,deki,deki,deki,06/Nov/18 12:17,06/Nov/18 16:49,14/Mar/19 02:31,06/Nov/18 16:49,3.2.7,,,3.2.8,3.3.0,,,,,0,,,,,"I just noticed that the OpenApiAutoConfiguration introduced in CXF-7853 doesn't work if {{classes-scan-packages: org.apache.cxf.jaxrs.openapi}} is used. In this case OpenApiFeature is added as a Provider by AbstractSpringComponentScanServer and OpenApiAutoConfiguration doesn't hook in.

Sample:
{code}
git clone https://github.com/deki/swagger-samples/ --branch java-cxf-spring-boot-minimal
cd java/java-cxf-spring-boot-minimal
mvn spring-boot:run
{code}",,,,,,,,,,,,,,,,,,,CXF-7853,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-11-06 14:57:32.238,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Tue Nov 06 14:57:32 UTC 2018,,,,,,0|s0065s:,9223372036854775807,,,,,,,,"06/Nov/18 12:18;deki;[~reta] 
I'll suggest to change {{@ConditionalOnBean(OpenApiFeature.class)}} to {{@ConditionalOnClass(OpenApiFeature.class)}}. Any objections?","06/Nov/18 14:57;reta;Hi [~deki],

Thanks a lot for finding that. Yes, I think @ConditionalOnClass(OpenApiFeature.class) it the safe change, the post-processor would be able to properly assign the customizer instance to the beans. Thanks!

Best Regards,
    Andriy Redko",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unnecessary warning when using IBM XLXP JAXB implementation,CXF-7888,13195725,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,andymc,andymc,andymc,01/Nov/18 19:33,01/Nov/18 20:38,14/Mar/19 02:31,01/Nov/18 20:38,3.2.6,,,3.2.8,3.3.0,,Core,,,0,,,,,"When using CXF in WebSphere Liberty and using the jaxb-2.2 feature (which uses IBM's XLXP JAXB implementation), the following warning is logged:

[11/1/18 11:44:33:625 CDT] 0000009c ws.org.apache.cxf.cxf.core.3.2:1.0.23.20181020-2100(id=193)] W Failed to createMinimumEscapeHandler for unknown jaxb class:class com.ibm.xml.xlxp2.jaxb.marshal.MarshallerProxy

 

The XLXP implementation should be able to use the same EscapeHandler as the com.sun.xml.bind implementation, so the main issue to remove the warning when using the XLXP impl.",,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,2018-11-01 19:33:34.0,,,,,,0|s001bs:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Handle connectionRequestTimeout in AsyncHTTPConduitFactory,CXF-7883,13193903,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,ffang,gyoetam,gyoetam,24/Oct/18 15:44,30/Oct/18 18:13,14/Mar/19 02:31,26/Oct/18 03:18,3.2.6,,,3.2.8,3.3.0,,Transports,,,0,pull-request-available,,,,"This issue is a follow-up to CXF-7878.

If connections are contended towards a slow target, it may make sense
 to set connectionTimeout and connectionRequestTimeout to values much lower than
 the receiveTimeout. Expected client behavior is to receive an error if a connection
 does not become available within connectionRequestTimeout. Current behavior however
 is that the error is only received after up to receiveTimeout has passed, when a
 current request to the target has finished and the connection is released or returned
 to the pool.

This causes a possible build-up of pending requests in memory for the duration of receiveTimeout instead of connectionRequestTimeout.

See github PR: [https://github.com/apache/cxf/pull/466]

The reference solution in the PR works well, but it may not be the most elegant one due to my currently limited understanding of the overall design of the connection handling code.",,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-10-25 19:12:58.912,,,no_permission,,Unknown,,,https://github.com/apache/cxf/pull/466,,,,,,,,,9223372036854775807,,,Tue Oct 30 18:08:42 UTC 2018,,,,,,0|i3zlcv:,9223372036854775807,,,,,,,,"25/Oct/18 19:12;githubbot;gyoetam commented on issue #466: [CXF-7883] fix: handle connectionRequestTimeout in AsyncHTTPConduitFactory
URL: https://github.com/apache/cxf/pull/466#issuecomment-433171534
 
 
   Looks like the Jenkins build runs out of memory during the build, it is not related to the change in the PR.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","26/Oct/18 01:38;githubbot;ffang closed pull request #466: [CXF-7883] fix: handle connectionRequestTimeout in AsyncHTTPConduitFactory
URL: https://github.com/apache/cxf/pull/466
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/rt/transports/http-hc/src/main/java/org/apache/cxf/transport/http/asyncclient/AsyncHTTPConduitFactory.java b/rt/transports/http-hc/src/main/java/org/apache/cxf/transport/http/asyncclient/AsyncHTTPConduitFactory.java
index d616dda5fce..15445bc33db 100644
--- a/rt/transports/http-hc/src/main/java/org/apache/cxf/transport/http/asyncclient/AsyncHTTPConduitFactory.java
+++ b/rt/transports/http-hc/src/main/java/org/apache/cxf/transport/http/asyncclient/AsyncHTTPConduitFactory.java
@@ -375,11 +375,9 @@ public void addCookie(Cookie cookie) {
         client = httpAsyncClientBuilder.build();
         // Start the client thread
         client.start();
-        if (this.connectionTTL == 0) {
-            //if the connection does not have an expiry deadline
-            //use the ConnectionMaxIdle to close the idle connection
-            new CloseIdleConnectionThread(connectionManager, client).start();
-        }
+        //Always start the idle checker thread to validate pending requests and
+        //use the ConnectionMaxIdle to close the idle connection
+        new CloseIdleConnectionThread(connectionManager, client).start();
     }
 
     //provide a hook to customize the builder
@@ -401,20 +399,28 @@ public CloseableHttpAsyncClient createClient(final AsyncHTTPConduit c) throws IO
 
         public CloseIdleConnectionThread(PoolingNHttpClientConnectionManager connMgr,
                                      CloseableHttpAsyncClient client) {
-            super();
+            super(""CXFCloseIdleConnectionThread"");
             this.connMgr = connMgr;
             this.client = client;
         }
 
         @Override
         public void run() {
+            long nextIdleCheck = System.currentTimeMillis() + connectionMaxIdle;
             try {
                 while (client.isRunning()) {
                     synchronized (this) {
-                        sleep(connectionMaxIdle);
-                        // close connections
-                        // that have been idle longer than specified connectionMaxIdle
-                        connMgr.closeIdleConnections(connectionMaxIdle, TimeUnit.MILLISECONDS);
+                        sleep(selectInterval);
+                        // make sure pending leases fail in a timely manner,
+                        // not just when a connection becomes available
+                        connMgr.validatePendingRequests();
+
+                        if (connectionMaxIdle > 0 && System.currentTimeMillis() >= nextIdleCheck) {
+                            nextIdleCheck += connectionMaxIdle;
+                            // close connections
+                            // that have been idle longer than specified connectionMaxIdle
+                            connMgr.closeIdleConnections(connectionMaxIdle, TimeUnit.MILLISECONDS);
+                        }
                     }
                 }
             } catch (InterruptedException ex) {


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
",26/Oct/18 02:49;ffang;patch applied on behalf of Györgyey Tamás with thanks!,"26/Oct/18 02:50;ffang;a follow up commit[1] to ensure connectionMaxIdle kick in when connectionTTL is 0, keeping the behavior as before 
[1]https://github.com/apache/cxf/commit/bcf43396043673166ca88093e8d8597d1504888b","26/Oct/18 12:40;githubbot;gyoetam commented on issue #466: [CXF-7883] fix: handle connectionRequestTimeout in AsyncHTTPConduitFactory
URL: https://github.com/apache/cxf/pull/466#issuecomment-433394047
 
 
   @ffang Thanks for the merge! Do you have a planned release date for 3.2.8 that will include the fix?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","30/Oct/18 18:08;githubbot;coheigea commented on issue #466: [CXF-7883] fix: handle connectionRequestTimeout in AsyncHTTPConduitFactory
URL: https://github.com/apache/cxf/pull/466#issuecomment-434410504
 
 
   @gyoetam We just released 3.2.7, so 3.2.8 will about 2 months away probably. We hope to release 3.3.0 before then though, maybe in around 5/6 weeks.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
",,,,,,,,,,,,,,,,,,,,,,,,
HttpConduit.handleResponseOnWorkqueue will always handle response on current thread when allowCurrentThread is false and the work queue rejects the execution,CXF-7881,13193288,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,andymc,hallonbat,hallonbat,22/Oct/18 15:29,30/Oct/18 10:05,14/Mar/19 02:31,23/Oct/18 11:00,3.2.6,,,3.2.7,3.3.0,,Transports,,,0,,,,,"Creating this Jira according to the discussion [here|http://cxf.547215.n5.nabble.com/Response-always-handled-on-current-thread-when-WorkQueue-rejects-execution-tt5793019.html]

In the method 

[org.apache.cxf.transport.http.HTTPConduit.handleResponseOnWorkqueue(boolean allowCurrentThread, boolean forceWQ)|https://github.com/apache/cxf/blob/540bb76f6f3d3d23944c566905f9f395c6f86b79/rt/transports/http/src/main/java/org/apache/cxf/transport/http/HTTPConduit.java#L1190]

If the work queue is full so that RejectedExecutionException is thrown and allowCurrentThread is false like when called from [AsyncHttpConduit|https://github.com/apache/cxf/blob/6db38f9984b9c0bf6309a3d7e26d5a9ab8055d1f/rt/transports/http-hc/src/main/java/org/apache/cxf/transport/http/asyncclient/AsyncHTTPConduit.java#L600] the expression in the if statement below will always return false and the response will be handled on the current thread via the call to handleResponseInternal. When used from AsyncHttpConduit this will be the IO core thread which is not a good idea.
{code:java}
} catch (RejectedExecutionException rex) {
    if (allowCurrentThread
        && policy != null
        && policy.isSetAsyncExecuteTimeoutRejection()
        && policy.isAsyncExecuteTimeoutRejection()) {
        throw rex;
    }
    if (!hasLoggedAsyncWarning) {
        LOG.warning(""EXECUTOR_FULL_WARNING"");
        hasLoggedAsyncWarning = true;
    }
    LOG.fine(""EXECUTOR_FULL"");
    handleResponseInternal();
}
{code}

I think that the code above should be changed to

{code:java}
} catch (RejectedExecutionException rex) { 
     if (!allowCurrentThread 
         || (policy != null 
         && policy.isSetAsyncExecuteTimeoutRejection() 
         && policy.isAsyncExecuteTimeoutRejection())) { 
         throw rex; 
     } 
     if (!hasLoggedAsyncWarning) { 
         LOG.warning(""EXECUTOR_FULL_WARNING""); 
         hasLoggedAsyncWarning = true; 
     } 
     LOG.fine(""EXECUTOR_FULL""); 
     handleResponseInternal(); 
}
{code}

",,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-10-22 22:08:05.557,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Tue Oct 23 10:57:47 UTC 2018,,,,,,0|i3zhlz:,9223372036854775807,,,,,,,,"22/Oct/18 22:08;githubbot;andymc12 opened a new pull request #463: CXF-7881: Ensure proper allowCurrentThread behavior
URL: https://github.com/apache/cxf/pull/463
 
 
   In the case where the current Executor throws a RejectedExecutionException:
   
   This should ensure that if allowCurrentThread is false OR the client policy has setAsyncExecuteTimeoutRejection, then the the caller should receive a RejectedExecutionException.
   
   If allowCurrentThread is true, then current thread will handle the async response.
   
   This should resolve JIRA [CXF-7881](
   https://issues.apache.org/jira/browse/CXF-7881)

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","23/Oct/18 10:57;githubbot;coheigea closed pull request #463: CXF-7881: Ensure proper allowCurrentThread behavior
URL: https://github.com/apache/cxf/pull/463
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/rt/transports/http/src/main/java/org/apache/cxf/transport/http/HTTPConduit.java b/rt/transports/http/src/main/java/org/apache/cxf/transport/http/HTTPConduit.java
index e62f59477ca..2bcc8bde272 100644
--- a/rt/transports/http/src/main/java/org/apache/cxf/transport/http/HTTPConduit.java
+++ b/rt/transports/http/src/main/java/org/apache/cxf/transport/http/HTTPConduit.java
@@ -1242,10 +1242,10 @@ public void run() {
                         ex.execute(runnable);
                     }
                 } catch (RejectedExecutionException rex) {
-                    if (allowCurrentThread
-                        && policy != null
+                    if (!allowCurrentThread
+                        || (policy != null
                         && policy.isSetAsyncExecuteTimeoutRejection()
-                        && policy.isAsyncExecuteTimeoutRejection()) {
+                        && policy.isAsyncExecuteTimeoutRejection())) {
                         throw rex;
                     }
                     if (!hasLoggedAsyncWarning) {
diff --git a/rt/transports/http/src/test/java/org/apache/cxf/transport/http/HTTPConduitTest.java b/rt/transports/http/src/test/java/org/apache/cxf/transport/http/HTTPConduitTest.java
index 343fb954c21..848e90a8e2c 100644
--- a/rt/transports/http/src/test/java/org/apache/cxf/transport/http/HTTPConduitTest.java
+++ b/rt/transports/http/src/test/java/org/apache/cxf/transport/http/HTTPConduitTest.java
@@ -26,16 +26,24 @@
 import java.util.List;
 import java.util.Map;
 import java.util.TreeMap;
+import java.util.concurrent.Executor;
+import java.util.concurrent.RejectedExecutionException;
 
 import org.apache.cxf.Bus;
 import org.apache.cxf.bus.extension.ExtensionManagerBus;
 import org.apache.cxf.common.util.Base64Utility;
 import org.apache.cxf.configuration.security.AuthorizationPolicy;
+import org.apache.cxf.endpoint.Endpoint;
+import org.apache.cxf.endpoint.EndpointImpl;
 import org.apache.cxf.helpers.CastUtils;
+import org.apache.cxf.message.Exchange;
+import org.apache.cxf.message.ExchangeImpl;
 import org.apache.cxf.message.Message;
 import org.apache.cxf.message.MessageImpl;
 import org.apache.cxf.service.model.EndpointInfo;
+import org.apache.cxf.transport.http.HTTPConduit.WrappedOutputStream;
 import org.apache.cxf.transport.http.auth.HttpAuthSupplier;
+import org.apache.cxf.transports.http.configuration.HTTPClientPolicy;
 import org.apache.cxf.ws.addressing.EndpointReferenceType;
 import org.apache.cxf.ws.addressing.EndpointReferenceUtils;
 
@@ -58,7 +66,7 @@ public void tearDown() {
     /**
      * Generates a new message.
      */
-    private Message getNewMessage() {
+    private Message getNewMessage() throws Exception {
         Message message = new MessageImpl();
         Map<String, List<String>> headers = new TreeMap<String, List<String>>(String.CASE_INSENSITIVE_ORDER);
         List<String> contentTypes = new ArrayList<>();
@@ -228,4 +236,49 @@ public void testAuthPolicyPrecedence() throws Exception {
     }
 
 
+    @Test
+    public void testHandleResponseOnWorkqueueAllowCurrentThread() throws Exception {
+        Message m = getNewMessage();
+        Exchange exchange = new ExchangeImpl();
+        Bus bus = new ExtensionManagerBus();
+        exchange.put(Bus.class, bus);
+
+        EndpointInfo endpointInfo = new EndpointInfo();
+        Endpoint endpoint = new EndpointImpl(null, null, endpointInfo);
+        exchange.put(Endpoint.class, endpoint);
+
+        m.setExchange(exchange);
+
+        HTTPClientPolicy policy = new HTTPClientPolicy();
+        policy.setAsyncExecuteTimeoutRejection(true);
+        m.put(HTTPClientPolicy.class, policy);
+        exchange.put(Executor.class, new Executor() {
+
+            @Override
+            public void execute(Runnable command) {
+                // simulates a maxxed-out executor
+                // forces us to use current thread
+                throw new RejectedExecutionException(""expected"");
+            } });
+
+        HTTPConduit conduit = new MockHTTPConduit(bus, endpointInfo, policy);
+        OutputStream os = conduit.createOutputStream(m, false, false, 0);
+        assertTrue(os instanceof WrappedOutputStream);
+        WrappedOutputStream wos = (WrappedOutputStream) os;
+
+        try {
+            wos.handleResponseOnWorkqueue(true, false);
+            assertEquals(Thread.currentThread(), m.get(Thread.class));
+
+            try {
+                wos.handleResponseOnWorkqueue(false, false);
+                fail(""Expected RejectedExecutionException not thrown"");
+            } catch (RejectedExecutionException ex) {
+                assertEquals(""expected"", ex.getMessage());
+            }
+        } catch (Exception ex) {
+            ex.printStackTrace();
+            throw ex;
+        }
+    }
 }
diff --git a/rt/transports/http/src/test/java/org/apache/cxf/transport/http/MockHTTPConduit.java b/rt/transports/http/src/test/java/org/apache/cxf/transport/http/MockHTTPConduit.java
new file mode 100644
index 00000000000..94b5d120f83
--- /dev/null
+++ b/rt/transports/http/src/test/java/org/apache/cxf/transport/http/MockHTTPConduit.java
@@ -0,0 +1,163 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.cxf.transport.http;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.net.URI;
+
+import org.apache.cxf.Bus;
+import org.apache.cxf.message.Message;
+import org.apache.cxf.service.model.EndpointInfo;
+import org.apache.cxf.transport.https.HttpsURLConnectionInfo;
+import org.apache.cxf.transports.http.configuration.HTTPClientPolicy;
+
+public class MockHTTPConduit extends HTTPConduit {
+
+    public MockHTTPConduit(Bus b, EndpointInfo ei, HTTPClientPolicy policy) throws IOException {
+        super(b, ei);
+        setClient(policy);
+    }
+
+    @Override
+    protected void setupConnection(Message message, Address address, HTTPClientPolicy csPolicy)
+        throws IOException {
+        // TODO Auto-generated method stub
+
+    }
+
+    @Override
+    protected OutputStream createOutputStream(Message message, boolean needToCacheRequest, boolean isChunking,
+                                              int chunkThreshold)
+        throws IOException {
+        return new MockWrappedOutputStream(message, isChunking, isChunking, chunkThreshold, ""mockConduit"", null);
+    }
+
+    class MockWrappedOutputStream extends WrappedOutputStream {
+
+        protected MockWrappedOutputStream(Message outMessage, boolean possibleRetransmit, boolean isChunking,
+                                          int chunkThreshold, String conduitName, URI url) {
+            super(outMessage, possibleRetransmit, isChunking, chunkThreshold, conduitName, url);
+        }
+
+        @Override
+        protected void setupWrappedStream() throws IOException {
+            // TODO Auto-generated method stub
+            
+        }
+
+        @Override
+        protected HttpsURLConnectionInfo getHttpsURLConnectionInfo() throws IOException {
+            // TODO Auto-generated method stub
+            return null;
+        }
+
+        @Override
+        protected void setProtocolHeaders() throws IOException {
+            // TODO Auto-generated method stub
+            
+        }
+
+        @Override
+        protected void setFixedLengthStreamingMode(int i) {
+            // TODO Auto-generated method stub
+            
+        }
+
+        @Override
+        protected int getResponseCode() throws IOException {
+            // TODO Auto-generated method stub
+            return 0;
+        }
+
+        @Override
+        protected String getResponseMessage() throws IOException {
+            // TODO Auto-generated method stub
+            return null;
+        }
+
+        @Override
+        protected void updateResponseHeaders(Message inMessage) throws IOException {
+            // TODO Auto-generated method stub
+            
+        }
+
+        @Override
+        protected void handleResponseAsync() throws IOException {
+            // TODO Auto-generated method stub
+            
+        }
+
+        @Override
+        protected void handleResponseInternal() throws IOException {
+            outMessage.put(Thread.class, Thread.currentThread());
+        }
+
+        @Override
+        protected void closeInputStream() throws IOException {
+            // TODO Auto-generated method stub
+            
+        }
+
+        @Override
+        protected boolean usingProxy() {
+            // TODO Auto-generated method stub
+            return false;
+        }
+
+        @Override
+        protected InputStream getInputStream() throws IOException {
+            // TODO Auto-generated method stub
+            return null;
+        }
+
+        @Override
+        protected InputStream getPartialResponse() throws IOException {
+            // TODO Auto-generated method stub
+            return null;
+        }
+
+        @Override
+        protected void setupNewConnection(String newURL) throws IOException {
+            // TODO Auto-generated method stub
+            
+        }
+
+        @Override
+        protected void retransmitStream() throws IOException {
+            // TODO Auto-generated method stub
+            
+        }
+
+        @Override
+        protected void updateCookiesBeforeRetransmit() throws IOException {
+            // TODO Auto-generated method stub
+            
+        }
+
+        @Override
+        public void thresholdReached() throws IOException {
+            // TODO Auto-generated method stub
+            
+        }
+        
+    }
+}


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
",,,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException in org.apache.cxf.maven_plugin.Java2WSMojo,CXF-7880,13192808,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,,domagoj,domagoj,19/Oct/18 10:19,19/Oct/18 10:36,14/Mar/19 02:31,19/Oct/18 10:25,3.2.5,3.2.6,,,,,Tooling,,,0,,,,,"In version 3.2.5 a classifier check was introduced in the if clause, in line 471 as of version 3.2.6:

{{classifier.equals(a.getClassifier())}}

but without null pointer protection, causing an NPE if classifier is null. classifier is expected to sometimes be null as the present check in line 476 (just 5 lines below) demonstrates. The above clause could be rewritten as e.g.:
 {{Objects.equals(classifier, a.getClassifier())}}",,,,,,,,,,,,,,,,CXF-7851,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Fri Oct 19 10:36:30 UTC 2018,,,,,,0|i3zenb:,9223372036854775807,,,,,,,,"19/Oct/18 10:36;domagoj;Sorry, I was only looking for matching open tickets, so I have overlooked the closed isssue.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ClientPolicyCalculator ignores ConnectionRequestTimeout property,CXF-7878,13191902,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,coheigea,gyoetam,gyoetam,16/Oct/18 12:39,30/Oct/18 10:06,14/Mar/19 02:31,16/Oct/18 14:06,3.2.6,,,3.2.7,,,Transports,,,0,pull-request-available,,,,"ClientPolicyCalculator#intersect() drops the value set with setConnectionRequestTimeout() from the returned policy. As a result, AsyncHttpConduit always uses the default value even if it is explicitly set by the user through a HTTPClientPolicy.

PR on GitHub: https://github.com/apache/cxf/pull/460",,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-10-16 12:42:39.686,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Tue Oct 16 14:05:52 UTC 2018,,,,,,0|i3z92f:,9223372036854775807,,,,,,,,"16/Oct/18 12:42;githubbot;gyoetam opened a new pull request #460: CXF-7878: ClientPolicyCalculator ignores ConnectionRequestTimeout property
URL: https://github.com/apache/cxf/pull/460
 
 
   https://issues.apache.org/jira/browse/CXF-7878
   
   Timeout values set to random numbers in the test to avoid accidentally setting them to the same value as a default and not noticing.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","16/Oct/18 14:05;githubbot;coheigea closed pull request #460: CXF-7878: ClientPolicyCalculator ignores ConnectionRequestTimeout property
URL: https://github.com/apache/cxf/pull/460
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/rt/transports/http/src/main/java/org/apache/cxf/transport/http/policy/impl/ClientPolicyCalculator.java b/rt/transports/http/src/main/java/org/apache/cxf/transport/http/policy/impl/ClientPolicyCalculator.java
index 629bcacc51e..b934dc5a9b6 100644
--- a/rt/transports/http/src/main/java/org/apache/cxf/transport/http/policy/impl/ClientPolicyCalculator.java
+++ b/rt/transports/http/src/main/java/org/apache/cxf/transport/http/policy/impl/ClientPolicyCalculator.java
@@ -67,6 +67,7 @@ public boolean equals(HTTPClientPolicy p1, HTTPClientPolicy p2) {
                   && (p1.isSetProxyServerPort() ? p1.getProxyServerPort() == p2.getProxyServerPort() : !p2
                       .isSetProxyServerPort())
                   && p1.getProxyServerType().value().equals(p2.getProxyServerType().value())
+                  && (p1.getConnectionRequestTimeout() == p2.getConnectionRequestTimeout())
                   && (p1.getReceiveTimeout() == p2.getReceiveTimeout())
                   && StringUtils.equals(p1.getReferer(), p2.getReferer());
 
@@ -141,6 +142,11 @@ public HTTPClientPolicy intersect(HTTPClientPolicy p1, HTTPClientPolicy p2) {
         } else if (p2.isSetConnectionTimeout()) {
             p.setConnectionTimeout(p2.getConnectionTimeout());
         }
+        if (p1.isSetConnectionRequestTimeout()) {
+            p.setConnectionRequestTimeout(p1.getConnectionRequestTimeout());
+        } else if (p2.isSetConnectionRequestTimeout()) {
+            p.setConnectionRequestTimeout(p2.getConnectionRequestTimeout());
+        }
         if (p1.isSetReceiveTimeout()) {
             p.setReceiveTimeout(p1.getReceiveTimeout());
         } else if (p2.isSetReceiveTimeout()) {
diff --git a/rt/transports/http/src/test/java/org/apache/cxf/transport/http/policy/ClientPolicyCalculatorTest.java b/rt/transports/http/src/test/java/org/apache/cxf/transport/http/policy/ClientPolicyCalculatorTest.java
index af7d68b73be..348eddfa380 100644
--- a/rt/transports/http/src/test/java/org/apache/cxf/transport/http/policy/ClientPolicyCalculatorTest.java
+++ b/rt/transports/http/src/test/java/org/apache/cxf/transport/http/policy/ClientPolicyCalculatorTest.java
@@ -18,6 +18,8 @@
  */
 package org.apache.cxf.transport.http.policy;
 
+import java.util.concurrent.ThreadLocalRandom;
+
 import org.apache.cxf.transport.http.policy.impl.ClientPolicyCalculator;
 import org.apache.cxf.transports.http.configuration.HTTPClientPolicy;
 
@@ -46,6 +48,7 @@ public void testCompatibleClientPolicies() {
 
     @Test
     public void testIntersectClientPolicies() {
+        ThreadLocalRandom random = ThreadLocalRandom.current();
         ClientPolicyCalculator calc = new ClientPolicyCalculator();
         HTTPClientPolicy p1 = new HTTPClientPolicy();
         HTTPClientPolicy p2 = new HTTPClientPolicy();
@@ -55,9 +58,22 @@ public void testIntersectClientPolicies() {
         p = calc.intersect(p1, p2);
         assertEquals(""browser"", p.getBrowserType());
         p1.setBrowserType(null);
-        p1.setConnectionTimeout(10000L);
+
+        long connectionRequestTimeout = random.nextLong(0, 10000);
+        p1.setConnectionRequestTimeout(connectionRequestTimeout);
+        p = calc.intersect(p1, p2);
+        assertEquals(connectionRequestTimeout, p.getConnectionRequestTimeout());
+
+        long receiveTimeout = random.nextLong(0, 10000);
+        p1.setReceiveTimeout(receiveTimeout);
         p = calc.intersect(p1, p2);
-        assertEquals(10000L, p.getConnectionTimeout());
+        assertEquals(receiveTimeout, p.getReceiveTimeout());
+
+        long connectionTimeout = random.nextLong(0, 10000);
+        p1.setConnectionTimeout(connectionTimeout);
+        p = calc.intersect(p1, p2);
+        assertEquals(connectionTimeout, p.getConnectionTimeout());
+
         p1.setAllowChunking(false);
         p2.setAllowChunking(false);
         p = calc.intersect(p1, p2);


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
",,,,,,,,,,,,,,,,,,,,,,,,,,,,
ServiceList doesn't use proper bus to query if swagger/wadl is available.,CXF-7875,13191661,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,dkulp,dkulp,15/Oct/18 17:05,30/Oct/18 10:06,14/Mar/19 02:31,15/Oct/18 17:59,3.2.6,,,3.2.7,,,Transports,,,0,,,,,"The FormattedServiceListWriter always uses the bus of the service list to query if swagger and wadl are available.  However, for swagger in particular, those could be features registered on the bus that created the service itself.   Thus, the links do not show properly. 
",,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,2018-10-15 17:05:05.0,,,,,,0|i3z7l3:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JAX-RS SSE Leaking SSESink (s),CXF-7874,13191209,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,reta,LWysocki,LWysocki,12/Oct/18 14:16,30/Oct/18 10:06,14/Mar/19 02:31,17/Oct/18 16:44,3.2.6,,,3.2.7,3.3.0,,JAX-RS,,,0,,,,,"Closing of SSE connection by client is not detected and handled on the server part.
This results in server leaking resources when it is the clients responsibility for deciding on the lifetime of SSE connection.

My particular scenario is:
Status notifications for devices manged by the server are sent to the client (browser), this is a continues stream. That stream lives until browser tab/window is closed, which results in client closing the underlying SSE connection.
SseSinkImpl is not informed of connection being closed. 
At the same time the exception set in  org.apache.cxf.jaxrs.sse.SseEventSinkImpl#dequeue {code}future.completeExceptionally(ex);{code} in case of channel being closed is not acted upon internally within SseSinkImpl.","Observed on karaf (jetty).
Reproduced on jetty by modifying cxf SSE tests.",,,,,,,,,,,,,,,,,,,,12/Oct/18 14:18;LWysocki;cxf-7874.reproduce.patch;https://issues.apache.org/jira/secure/attachment/12943653/cxf-7874.reproduce.patch,,,1.0,,,,,,,,,,,,,,,,,,,2018-10-15 02:06:46.596,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Wed Oct 17 16:44:12 UTC 2018,,,,,,0|i3z4tr:,9223372036854775807,,,,,,,,"12/Oct/18 14:29;LWysocki;the cxf-7874.reproduce.patch that is attached modifies:
systests/rs-sse/rs-sse-base/src/main/java/org/apache/cxf/systest/jaxrs/sse/AbstractSseTest.java
systests/rs-sse/rs-sse-base/src/main/java/org/apache/cxf/systest/jaxrs/sse/BookStore.java

that reproduces the problem. Note that this is not a test, it's my experimentation code, reproducing the problem.
The effect is that when running the jetty based tests rs-sse-jetty produces in the log:
...
[ERROR] 2018-10-12 16:22:36.259 o.a.cxf.systest.jaxrs.sse.BookStore - [] Sent 1
[ERROR] 2018-10-12 16:22:39.263 o.a.cxf.systest.jaxrs.sse.BookStore - [] Sent 2
[ERROR] 2018-10-12 16:22:40.264 o.a.cxf.systest.jaxrs.sse.BookStore - [] Sent 3
[ERROR] 2018-10-12 16:22:40.268 o.a.cxf.systest.jaxrs.sse.BookStore - [] 3 Sink isClosed?: false Got an exception org.eclipse.jetty.io.EofException
[ERROR] 2018-10-12 16:22:41.265 o.a.cxf.systest.jaxrs.sse.BookStore - [] 4 Sink isClosed?: false Got an exception org.eclipse.jetty.io.EofException: Closed
[ERROR] 2018-10-12 16:22:41.265 o.a.cxf.systest.jaxrs.sse.BookStore - [] Sent 4
[ERROR] 2018-10-12 16:22:42.267 o.a.cxf.systest.jaxrs.sse.BookStore - [] 5 Sink isClosed?: false Got an exception org.eclipse.jetty.io.EofException: Closed
[ERROR] 2018-10-12 16:22:42.267 o.a.cxf.systest.jaxrs.sse.BookStore - [] Sent 5
[ERROR] 2018-10-12 16:22:47.269 o.a.cxf.systest.jaxrs.sse.BookStore - [] 6 Sink isClosed?: false Got an exception org.eclipse.jetty.io.EofException: Closed
[ERROR] 2018-10-12 16:22:47.270 o.a.cxf.systest.jaxrs.sse.BookStore - [] Sent 6
[ERROR] 2018-10-12 16:22:47.270 o.a.cxf.systest.jaxrs.sse.BookStore - [] Close sink
[ERROR] 2018-10-12 16:22:47.270 o.a.cxf.systest.jaxrs.sse.BookStore - [] got onClose callback
...

Which matched to the patched code of BookStore.java shows that:
* No callback on SseSinkImpl when client closes the channel,
* that SseSink is open (isClosed=false), even dough client end is closed and we get repeted EofException for each send
* that SseBrodcaster also is not infored of Sink being closed
* and finally that sink is closed and removed from broadcaster only after server side sseSink.close() call

hence mentioned leakage of SseSinks in case where it is the client that is managing the lifetime of sse connection.
","15/Oct/18 02:06;reta;Hi [~LWysocki]

Thanks for this bug report. Indeed, the sink is not being moved off to closed state. It is notoriously difficult to detect the client disconnect conditions (on server side), which additionally varies from one servlet container to another. I think I have found the acceptable solution (basically relying on IOException), I should have a fix ready in the next few days. I am wondering if you would be able to help by giving it a try in your application? Thank you.

 ","15/Oct/18 07:26;LWysocki;Hi [~reta], Thanks for looking at this one.
Of course, I'll give it a spin -  no problem.",16/Oct/18 10:43;coheigea;[~reta] Is this still targetted for CXF 3.2.7? We want to call a vote imminently...,"16/Oct/18 12:42;reta;Hey [~coheigea], I need a few days to wrap it up, the fix is ready, I am testing it extensively, turned out to be tricky. Could we hold on with the vote till Thu/Fri please? (would be good to get this fix in). Thanks.

 ","16/Oct/18 12:52;coheigea;[~reta] Yes no problem, thanks!","17/Oct/18 02:58;reta;Hi [~LWysocki], just commit the change ([https://github.com/apache/cxf/commit/829fbc63033eb64bc3aa5847b3717fff75ba05ea|https://github.com/apache/cxf/commit/829fbc63033eb64bc3aa5847b3717fff75ba05ea)]), this is for 3.2.x-fixes branch (3.2.7-SNAPSHOT). The code got significantly more complex but sinks should not be leaking. If you could give it a spin, would appreciated your feedback.Thank you.",17/Oct/18 08:47;coheigea;[~reta] Should it be merged to master as well?,"17/Oct/18 10:31;reta;Yes, absolutely, just pushed into master, thanks [~coheigea]!","17/Oct/18 10:37;LWysocki;On it. 
Might take some time as there are some dependency changes in 3.2.7 which i need to resolve before getting a working distribution of the stuff I'm working on.","17/Oct/18 10:42;reta;Thanks a lot, [~LWysocki].",17/Oct/18 13:20;coheigea;Can the Jira be resolved for now?,"17/Oct/18 13:25;reta;Hey [~coheigea], waiting for feedback from user, thanks!","17/Oct/18 15:00;LWysocki;Thank you [~reta], it seems the workaround you've implemented for !tomcat containers works (as tested in karaf/jetty).
The sink is removed from broadcaster and the onClose callback from broadcaster is also invoked.
As expected this happens with some delay (1 or 2 event sends later in my scenario).","17/Oct/18 16:44;reta;Awesome, thanks a lot [~LWysocki], really appreciate it. [~coheigea] we are good to go, thanks!",,,,,,,,,,,,,,,
WS-A RelatesTo headers missing in MAPCodec::getUnderstoodHeaders(),CXF-7871,13191063,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,asoldano,asoldano,asoldano,11/Oct/18 22:01,30/Oct/18 10:05,14/Mar/19 02:31,17/Oct/18 13:19,,,,3.2.7,3.3.0,,WS-* Components,,,0,,,,,"The getUnderstoodHeaders() methods of MAPCodec returns a static list of headers that is created when loading org.apache.cxf.ws.addressing.soap.VersionTransformer. Such list does not include the RelatesTo headers.

This issue is actually exposed by having recently applied the fix [https://github.com/apache/cxf/commit/a63a36bc4e151ab9c555304fab383a4624191f51]

An exception as below ends up being logged in case of required ws-addressing and RelatesTo headers being used:
{noformat}
2018-10-10 23:16:22,252 WARNING [org.apache.cxf.phase.PhaseInterceptorChain] (default-workqueue-1) Interceptor for {http://schemas.arjuna.com/ws/2005/10/wsarjtx}TerminationParticipantService#{http://schemas.arjuna.com/ws/2005/10/wsarjtx}FaultOperation has thrown exception, unwinding now: org.apache.cxf.binding.soap.SoapFault: MustUnderstand headers: [{http://www.w3.org/2005/08/addressing}RelatesTo] are not understood.
        at org.apache.cxf.impl//org.apache.cxf.binding.soap.interceptor.MustUnderstandInterceptor$MustUnderstandEndingInterceptor.handleMessage(MustUnderstandInterceptor.java:282)
        at org.apache.cxf.impl//org.apache.cxf.binding.soap.interceptor.MustUnderstandInterceptor$MustUnderstandEndingInterceptor.handleMessage(MustUnderstandInterceptor.java:259)
        at org.apache.cxf@3.2.6//org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:308)
        at org.apache.cxf@3.2.6//org.apache.cxf.phase.PhaseInterceptorChain.resume(PhaseInterceptorChain.java:278)
        at org.apache.cxf.impl//org.apache.cxf.ws.addressing.impl.InternalContextUtils$1.run(InternalContextUtils.java:319)
        at org.apache.cxf@3.2.6//org.apache.cxf.workqueue.AutomaticWorkQueueImpl$3.run(AutomaticWorkQueueImpl.java:421)
        at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
        at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
        at org.apache.cxf@3.2.6//org.apache.cxf.workqueue.AutomaticWorkQueueImpl$AWQThreadFactory$1.run(AutomaticWorkQueueImpl.java:346)
        at java.base/java.lang.Thread.run(Thread.java:834){noformat}",,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-10-11 22:05:12.674,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Wed Oct 17 13:17:13 UTC 2018,,,,,,0|i3z3xb:,9223372036854775807,,,,,,,,"11/Oct/18 22:05;githubbot;asoldano opened a new pull request #458: [CXF-7871] Adding RelatesTo WS-Addressing headers in the list returned by MAPCodec#getUnderstoodHeaders()
URL: https://github.com/apache/cxf/pull/458
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","12/Oct/18 21:29;githubbot;asoldano commented on issue #458: [CXF-7871] Adding RelatesTo WS-Addressing headers in the list returned by MAPCodec#getUnderstoodHeaders()
URL: https://github.com/apache/cxf/pull/458#issuecomment-429467845
 
 
   I've restarted the Jenkins run as the two tests that failed are actually passing here locally.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","17/Oct/18 13:17;githubbot;coheigea closed pull request #458: [CXF-7871] Adding RelatesTo WS-Addressing headers in the list returned by MAPCodec#getUnderstoodHeaders()
URL: https://github.com/apache/cxf/pull/458
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/core/src/main/java/org/apache/cxf/ws/addressing/Names.java b/core/src/main/java/org/apache/cxf/ws/addressing/Names.java
index 5805c2bba07..68989bf9bf0 100644
--- a/core/src/main/java/org/apache/cxf/ws/addressing/Names.java
+++ b/core/src/main/java/org/apache/cxf/ws/addressing/Names.java
@@ -186,6 +186,7 @@
         headers.add(WSA_FAULTTO_QNAME);
         headers.add(WSA_ACTION_QNAME);
         headers.add(WSA_MESSAGEID_QNAME);
+        headers.add(WSA_RELATESTO_QNAME);
         HEADERS = Collections.unmodifiableSet(headers);
     }
 
diff --git a/rt/ws/addr/src/main/java/org/apache/cxf/ws/addressing/soap/VersionTransformer.java b/rt/ws/addr/src/main/java/org/apache/cxf/ws/addressing/soap/VersionTransformer.java
index faa0c9a988c..f307f7c76b1 100644
--- a/rt/ws/addr/src/main/java/org/apache/cxf/ws/addressing/soap/VersionTransformer.java
+++ b/rt/ws/addr/src/main/java/org/apache/cxf/ws/addressing/soap/VersionTransformer.java
@@ -188,6 +188,7 @@ public VersionTransformer(MAPCodec mapCodec) {
         headers.add(new QName(Names200408.WSA_NAMESPACE_NAME, Names.WSA_FAULTTO_NAME));
         headers.add(new QName(Names200408.WSA_NAMESPACE_NAME, Names.WSA_ACTION_NAME));
         headers.add(new QName(Names200408.WSA_NAMESPACE_NAME, Names.WSA_MESSAGEID_NAME));
+        headers.add(new QName(Names200408.WSA_NAMESPACE_NAME, Names.WSA_RELATESTO_NAME));
 
         headers.add(new QName(Names200403.WSA_NAMESPACE_NAME, Names.WSA_FROM_NAME));
         headers.add(new QName(Names200403.WSA_NAMESPACE_NAME, Names.WSA_TO_NAME));
@@ -195,6 +196,7 @@ public VersionTransformer(MAPCodec mapCodec) {
         headers.add(new QName(Names200403.WSA_NAMESPACE_NAME, Names.WSA_FAULTTO_NAME));
         headers.add(new QName(Names200403.WSA_NAMESPACE_NAME, Names.WSA_ACTION_NAME));
         headers.add(new QName(Names200403.WSA_NAMESPACE_NAME, Names.WSA_MESSAGEID_NAME));
+        headers.add(new QName(Names200403.WSA_NAMESPACE_NAME, Names.WSA_RELATESTO_NAME));
 
         HEADERS = Collections.unmodifiableSet(headers);
     }


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
",,,,,,,,,,,,,,,,,,,,,,,,,,,
JAXRSUtils referenced in AbstractBraveClientProvider,CXF-7870,13191021,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,reta,sarasota7,sarasota7,11/Oct/18 18:32,30/Oct/18 10:06,14/Mar/19 02:31,13/Oct/18 02:16,3.2.6,,,3.1.18,3.2.7,3.3.0,Tracing Brave,,,0,,,,,"Hello, 

We are using cxf for its web service (WS) components (not RS), along with brave tracing, i.e., 

cxf-rt-frontend-jaxws

cxf-rt-transports-http

cxf-core

cxf-rt-ws-policy . and

cxf-integration-tracing-brave.

When the call stack references AbstractBraveClientProvider (from  an instantiation of BraveClientFeature, which is used on the WS side), a ""java.lang.NoClassDefFoundError"" error is thrown because of a missing  org/apache/cxf/jaxrs/utils/JAXRSUtils.  

If we include a jar that has JAXRSUtils, then we run into a bunch of catch 22 situations with the whole RS side of things.  Did you really intend to include JAXRSUtils in the AbstractBraveClientProvider class?  From the documentation, it looks like BraveClientFeature is only to be used on the WS side, and not the RS side, unless I'm missing something.

[http://cxf.apache.org/docs/using-openzipkin-brave.html]

 

Thanks

 

 ",,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-10-12 02:48:44.476,,,no_permission,,Unknown,,,https://github.com/apache/cxf/blob/master/integration/tracing/tracing-brave/src/main/java/org/apache/cxf/tracing/brave/AbstractBraveClientProvider.java,,,,,,,,,9223372036854775807,,,Fri Oct 12 02:48:44 UTC 2018,,,,,,0|i3z3nz:,9223372036854775807,,,,,,,,"12/Oct/18 02:48;reta;Hi [~sarasota7], thank you for this issue, you are right, the usage of JAXRSUtils is not justified in JAX-WS context.

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Infinite loop in rest client,CXF-7869,13190969,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,coheigea,fcourtau,fcourtau,11/Oct/18 16:02,30/Oct/18 16:32,14/Mar/19 02:31,16/Oct/18 12:02,3.1.17,3.2.6,,3.1.18,3.2.7,,JAX-RS,,,0,,,,,"Hello,

During stress tests, we found several threads with this pattern:
      java.lang.Thread.State: RUNNABLE
          at java.util.WeakHashMap.put(WeakHashMap.java:453)
          at java.util.Collections$SetFromMap.add(Collections.java:5461)
          at org.apache.cxf.jaxrs.client.spec.ClientImpl$WebTargetImpl.initTargetClientIfNeeded(ClientImpl.java:358)

This same issue has been found by others:

[http://www.adam-bien.com/roller/abien/entry/endless_loops_in_unsychronized_weakhashmap]

Best regards.",,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-10-30 16:32:31.968,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Tue Oct 30 16:32:31 UTC 2018,,,,,,0|i3z3cf:,9223372036854775807,,,,,,,,"29/Oct/18 08:17;fcourtau;Colm,

Thanks a lot for the fix on 3.2.6.

Have you also  fixed that on 3.1.17 ?

BTW, any idea when cxf 3.2.7 and 3.1.18 will be released ?

 ",30/Oct/18 16:32;coheigea;It's fixed for 3.1.18 now as well. CXF 3.2.7 is released - I'm not sure when we will release CXF 3.1.18.,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MP Rest Client does not honor providers registered via MP Config,CXF-7868,13190768,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,andymc,andymc,andymc,10/Oct/18 21:58,30/Oct/18 10:06,14/Mar/19 02:31,19/Oct/18 17:02,3.2.6,,,3.2.7,3.3.0,,,,,0,,,,,"The MP Rest Client spec says that I should be able to specify providers via MP Config using comma-separated provider class names with the config key of {{<clientInterfaceName>/mp-rest/providers}}. It also specifies that provider priorities can be set using MP Config with the config key of {{<clientInterfaceName>/mp-rest/providers/<providerClassName>/priority}}.

Neither of these properties have any effect in CXF.

Note that the MP Rest Client spec mentions this requirement for implementors, but does not currently test it in the TCK - this is being addressed in MP Rest Client Issue [126|https://github.com/eclipse/microprofile-rest-client/issues/126].",,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Fri Oct 19 17:02:28 UTC 2018,,,,,,0|i3z23r:,9223372036854775807,,,,,,,,"19/Oct/18 17:02;andymc;Test and fix that providers registered via MP Config are correctly registered when invoking the MP Rest Client.  Also tests that properties specified in RestClientBuilder are honored.  Lastly, adds the ""invokedMethod"" property to the ClientRequestContext - this is an MP Rest Client 1.2 requirement.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Enable default ciphersuites exclusion filter,CXF-7865,13189683,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,coheigea,coheigea,coheigea,05/Oct/18 10:42,30/Oct/18 10:06,14/Mar/19 02:31,05/Oct/18 16:10,,,,3.2.7,,,,,,0,,,,,"The default ciphersuites exclusion filter is not working properly. From 3.2.7 it will exclude NULL, anon and EXPORT ciphersuites by default, if no exclusion filter is specified.",,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,2018-10-05 10:42:21.0,,,,,,0|i3yvhz:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
STS: Expires lifetime is ignored if no lifetime created was specified,CXF-7864,13189655,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,coheigea,thopap,thopap,05/Oct/18 07:21,30/Oct/18 10:05,14/Mar/19 02:31,05/Oct/18 16:09,3.2.6,,,3.2.7,,,STS,,,0,,,,,"WS-trust define that a `/wst:RequestSecurityToken/wst:Lifetime` can be specified with only having `wsu:Expires`. In that case the creationTime shall be set to the current time. CXF simply ignore the lifetime if either expires or created is not present. (The same also for the other direction - lifetime can be also specified without expires, which is ignored as well)",,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-10-05 07:22:18.385,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Fri Oct 05 16:06:11 UTC 2018,,,,,,0|i3yvbr:,9223372036854775807,,,,,,,,"05/Oct/18 07:22;githubbot;Thopap opened a new pull request #455: CXF-7864: Fix issue if lifetime only specify expired without created
URL: https://github.com/apache/cxf/pull/455
 
 
   WS-trust define that a `/wst:RequestSecurityToken/wst:Lifetime` can be specified with only having `wsu:Expires`. In that case the creationTime shall be set to the current time. CXF simply ignore the lifetime if either expires or created is not present.
   
   I have fixed the behavior and provide a unit test for it. I have to also modify test `testSaml2NoExpires` because it fails after my changes, because the creationTime was too fare in the future. The ""old"" implementation just ignore the creationTime, which was wrong.
   
   If my change is acceptable, could you please also merge the fix to 3.2-branch. Thank you.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","05/Oct/18 16:06;githubbot;coheigea closed pull request #455: CXF-7864: Fix issue if lifetime only specify expired without created
URL: https://github.com/apache/cxf/pull/455
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/services/sts/sts-core/src/main/java/org/apache/cxf/sts/token/provider/DefaultConditionsProvider.java b/services/sts/sts-core/src/main/java/org/apache/cxf/sts/token/provider/DefaultConditionsProvider.java
index 135f53f7841..1bf9be47118 100644
--- a/services/sts/sts-core/src/main/java/org/apache/cxf/sts/token/provider/DefaultConditionsProvider.java
+++ b/services/sts/sts-core/src/main/java/org/apache/cxf/sts/token/provider/DefaultConditionsProvider.java
@@ -78,6 +78,7 @@ public void setLifetime(long lifetime) {
      * doesn't specify a lifetime element
      * @return the lifetime in seconds
      */
+    @Override
     public long getLifetime() {
         return lifetime;
     }
@@ -134,25 +135,17 @@ public void setFailLifetimeExceedance(boolean failLifetimeExceedance) {
     /**
      * Get a ConditionsBean object.
      */
+    @Override
     public ConditionsBean getConditions(TokenProviderParameters providerParameters) {
         ConditionsBean conditions = new ConditionsBean();
 
         Lifetime tokenLifetime = providerParameters.getTokenRequirements().getLifetime();
         if (lifetime > 0) {
             if (acceptClientLifetime && tokenLifetime != null
-                && tokenLifetime.getCreated() != null && tokenLifetime.getExpires() != null) {
-                Instant creationTime = null;
-                Instant expirationTime = null;
-                try {
-                    creationTime = ZonedDateTime.parse(tokenLifetime.getCreated()).toInstant();
-                    expirationTime = ZonedDateTime.parse(tokenLifetime.getExpires()).toInstant();
-                } catch (DateTimeParseException ex) {
-                    LOG.fine(""Error in parsing Timestamp Created or Expiration Strings"");
-                    throw new STSException(
-                        ""Error in parsing Timestamp Created or Expiration Strings"",
-                        STSException.INVALID_TIME
-                    );
-                }
+                    && (tokenLifetime.getCreated() != null || tokenLifetime.getExpires() != null)) {
+                Instant creationTime = parsedInstantOrDefault(tokenLifetime.getCreated(), Instant.now());
+                Instant expirationTime = parsedInstantOrDefault(tokenLifetime.getExpires(),
+                        creationTime.plusSeconds(lifetime));
 
                 // Check to see if the created time is in the future
                 Instant validCreation = Instant.now();
@@ -198,6 +191,21 @@ public ConditionsBean getConditions(TokenProviderParameters providerParameters)
         return conditions;
     }
 
+    private Instant parsedInstantOrDefault(String dateTime, Instant defaultInstant) {
+        if (dateTime == null || dateTime.isEmpty()) {
+            return defaultInstant;
+        }
+        try {
+            return ZonedDateTime.parse(dateTime).toInstant();
+        } catch (DateTimeParseException ex) {
+            LOG.fine(""Error in parsing Timestamp Created or Expiration Strings"");
+            throw new STSException(
+                ""Error in parsing Timestamp Created or Expiration Strings"",
+                STSException.INVALID_TIME
+            );
+        }
+    }
+
     /**
      * Create a list of AudienceRestrictions to be added to the Conditions Element of the
      * issued Assertion. The default behaviour is to add a single Audience URI per
diff --git a/services/sts/sts-core/src/test/java/org/apache/cxf/sts/token/provider/SAMLProviderLifetimeTest.java b/services/sts/sts-core/src/test/java/org/apache/cxf/sts/token/provider/SAMLProviderLifetimeTest.java
index 41a514aa8da..183bbfa96da 100644
--- a/services/sts/sts-core/src/test/java/org/apache/cxf/sts/token/provider/SAMLProviderLifetimeTest.java
+++ b/services/sts/sts-core/src/test/java/org/apache/cxf/sts/token/provider/SAMLProviderLifetimeTest.java
@@ -44,6 +44,7 @@
 import org.apache.wss4j.common.util.DateUtil;
 
 
+
 /**
  * Some unit tests for creating SAML Tokens with lifetime
  */
@@ -86,6 +87,40 @@ public void testSaml2ValidLifetime() throws Exception {
         assertTrue(tokenString.contains(providerResponse.getTokenId()));
     }
 
+    /**
+     *
+     * As specified in ws-trust
+     * ""If this attribute isn't specified, then the current time is used as an initial period.""
+     * if creation time is not specified, we use current time instead.
+     *
+     */
+    @org.junit.Test
+    public void saml2LifetimeWithoutCreated() throws WSSecurityException {
+        int requestedLifetime = 60;
+        SAMLTokenProvider samlTokenProvider = new SAMLTokenProvider();
+        DefaultConditionsProvider conditionsProvider = new DefaultConditionsProvider();
+        conditionsProvider.setAcceptClientLifetime(true);
+        samlTokenProvider.setConditionsProvider(conditionsProvider);
+
+        TokenProviderParameters providerParameters =
+            createProviderParameters(
+                WSS4JConstants.WSS_SAML2_TOKEN_TYPE, STSConstants.BEARER_KEY_KEYTYPE
+            );
+
+        // Set expected lifetime to 1 minute
+        Lifetime lifetime = new Lifetime();
+        Instant expirationTime = Instant.now().plusSeconds(requestedLifetime);
+
+        lifetime.setExpires(expirationTime.atZone(ZoneOffset.UTC).format(DateUtil.getDateTimeFormatter(true)));
+        providerParameters.getTokenRequirements().setLifetime(lifetime);
+
+        assertTrue(samlTokenProvider.canHandleToken(WSS4JConstants.WSS_SAML2_TOKEN_TYPE));
+        TokenProviderResponse providerResponse = samlTokenProvider.createToken(providerParameters);
+        assertTrue(providerResponse != null);
+        assertTrue(providerResponse.getToken() != null && providerResponse.getTokenId() != null);
+        assertEquals(providerResponse.getExpires(), expirationTime);
+    }
+
 
 
     /**
@@ -223,14 +258,14 @@ public void testSaml2ExceededConfiguredMaxLifetimeButUpdated() throws Exception
         Lifetime lifetime = new Lifetime();
         lifetime.setCreated(creationTime.atZone(ZoneOffset.UTC).format(DateUtil.getDateTimeFormatter(true)));
         lifetime.setExpires(expirationTime.atZone(ZoneOffset.UTC).format(DateUtil.getDateTimeFormatter(true)));
-        
+
         providerParameters.getTokenRequirements().setLifetime(lifetime);
 
         assertTrue(samlTokenProvider.canHandleToken(WSS4JConstants.WSS_SAML2_TOKEN_TYPE));
         TokenProviderResponse providerResponse = samlTokenProvider.createToken(providerParameters);
         assertTrue(providerResponse != null);
         assertTrue(providerResponse.getToken() != null && providerResponse.getTokenId() != null);
-        
+
         long duration = Duration.between(providerResponse.getCreated(), providerResponse.getExpires()).getSeconds();
         assertEquals(maxLifetime, duration);
         Element token = (Element)providerResponse.getToken();
@@ -264,14 +299,14 @@ public void testSaml2NearFutureCreatedLifetime() throws Exception {
         Lifetime lifetime = new Lifetime();
         lifetime.setCreated(creationTime.atZone(ZoneOffset.UTC).format(DateUtil.getDateTimeFormatter(true)));
         lifetime.setExpires(expirationTime.atZone(ZoneOffset.UTC).format(DateUtil.getDateTimeFormatter(true)));
-        
+
         providerParameters.getTokenRequirements().setLifetime(lifetime);
 
         assertTrue(samlTokenProvider.canHandleToken(WSS4JConstants.WSS_SAML2_TOKEN_TYPE));
         TokenProviderResponse providerResponse = samlTokenProvider.createToken(providerParameters);
         assertTrue(providerResponse != null);
         assertTrue(providerResponse.getToken() != null && providerResponse.getTokenId() != null);
-        
+
         long duration = Duration.between(providerResponse.getCreated(), providerResponse.getExpires()).getSeconds();
         assertEquals(50, duration);
         Element token = (Element)providerResponse.getToken();
@@ -304,7 +339,7 @@ public void testSaml2FarFutureCreatedLifetime() throws Exception {
         Lifetime lifetime = new Lifetime();
         lifetime.setCreated(creationTime.atZone(ZoneOffset.UTC).format(DateUtil.getDateTimeFormatter(true)));
         lifetime.setExpires(expirationTime.atZone(ZoneOffset.UTC).format(DateUtil.getDateTimeFormatter(true)));
-        
+
         providerParameters.getTokenRequirements().setLifetime(lifetime);
 
         assertTrue(samlTokenProvider.canHandleToken(WSS4JConstants.WSS_SAML2_TOKEN_TYPE));
@@ -336,6 +371,7 @@ public void testSaml2NoExpires() throws Exception {
         SAMLTokenProvider samlTokenProvider = new SAMLTokenProvider();
         DefaultConditionsProvider conditionsProvider = new DefaultConditionsProvider();
         conditionsProvider.setAcceptClientLifetime(true);
+        conditionsProvider.setFutureTimeToLive(180L);
         samlTokenProvider.setConditionsProvider(conditionsProvider);
 
         TokenProviderParameters providerParameters =
@@ -348,7 +384,7 @@ public void testSaml2NoExpires() throws Exception {
 
         Lifetime lifetime = new Lifetime();
         lifetime.setCreated(creationTime.atZone(ZoneOffset.UTC).format(DateUtil.getDateTimeFormatter(true)));
-        
+
         providerParameters.getTokenRequirements().setLifetime(lifetime);
 
         assertTrue(samlTokenProvider.canHandleToken(WSS4JConstants.WSS_SAML2_TOKEN_TYPE));
@@ -356,7 +392,7 @@ public void testSaml2NoExpires() throws Exception {
         TokenProviderResponse providerResponse = samlTokenProvider.createToken(providerParameters);
         assertTrue(providerResponse != null);
         assertTrue(providerResponse.getToken() != null && providerResponse.getTokenId() != null);
-        
+
         long duration = Duration.between(providerResponse.getCreated(), providerResponse.getExpires()).getSeconds();
         assertEquals(conditionsProvider.getLifetime(), duration);
         Element token = (Element)providerResponse.getToken();


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
",,,,,,,,,,,,,,,,,,,,,,,,,,,,
JAX-RS @FormParam parameters are not updated when form content is modified,CXF-7860,13188981,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,andymc,andymc,andymc,02/Oct/18 21:19,30/Oct/18 10:06,14/Mar/19 02:31,09/Oct/18 00:26,3.2.6,,,3.2.7,3.3.0,,JAX-RS,,,0,,,,,"The JAX-RS community noticed a difference in behavior between CXF and Jersey/RESTEasy where form data in the HTTP body is modified prior to invoking the resource method.  There are two differences noted:

1) CXF does not invoke a MessageBodyReader (or any ReaderInterceptors) when there is no entity parameter.  I believe that this is proper behavior - or at least an appropriate optimization since there is no parameter, why bother creating one with a MBR (and it's associated ReaderInterceptors)?  

2) When the resource method contains both a Form parameter (entity) _and_ a parameter annotated with `@FormParam`, and a Filter or interceptor, etc. has modified the content of of the HTTP body, the value injected for the `@FormParam` parameter does not reflect those modifications, but the Form entity parameter does.  This seems inconsistent, and (IMO) violates the spirit of the spec - note that there is no TCK test for this case, so CXF is still compliant - but it differs from other implementations.  Here is an example:

 

 
{code:java}
@Provider
public class FormReaderInterceptor implements ReaderInterceptor {
    private static final Logger LOG = LogUtils.getL7dLogger(FormReaderInterceptor.class);
    @Override
    public Object aroundReadFrom(ReaderInterceptorContext ctx) throws IOException, WebApplicationException {
        BufferedReader br = new BufferedReader(new InputStreamReader(ctx.getInputStream()));
        String line;
        while ((line = br.readLine()) != null) {
            LOG.info(""readLine: "" + line);
        }
        ByteArrayInputStream bais = new ByteArrayInputStream(""value=MODIFIED"".getBytes());

        ctx.setInputStream(bais);
        return ctx.proceed();
    }
}
{code}
 
{code:java}
    @POST

    public Response processForm(@FormParam(""value"") String value, Form form) {...
 {code}
 

If the HTTP request body contains ""value=ORIGINAL"", then when CXF invokes the processForm method, it will pass ""ORIGINAL"" to the String value, but will pass a Form object that contains a MultivaluedMap with entry ""value=MODIFIED"".  To be consistent with Jersey and RESTEasy, CXF should inject MODIFIED as the String value.

 

See JAX-RS API [Issue 659|https://github.com/eclipse-ee4j/jaxrs-api/issues/659] for more details.

 ",,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-10-02 21:33:01.658,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Tue Oct 09 00:23:51 UTC 2018,,,,,,0|i3yr6f:,9223372036854775807,,,,,,,,"02/Oct/18 21:33;githubbot;andymc12 opened a new pull request #453: CXF-7860: Reprocess @FormParam parms so they contain the latest data
URL: https://github.com/apache/cxf/pull/453
 
 
   This addresses an issue surfaced by the Jakarta JAX-RS API community in Issue [659](https://github.com/eclipse-ee4j/jaxrs-api/issues/659) where a parameter marked as `@FormParam` may be injected with a value that is inconsistent with an entity `Form` parameter.  The latter will have the latest contents of the HTTP form body stream whereas the former will not - modifications made to the HTTP form body during filters or interceptors will be lost, thus it is possible that the following code would fail:
   
   ```
   @POST
   public Response processForm(@FormParam(""value"") String value, Form form) {
       assertEquals(value, form.asMap().getFirst(""value""));
   }
   ```
   
   This change ensures that the `@FormParam` parameters will match the values in the `Form` parameter.  There is probably an optimization that I am missing that would only perform this logic if the input stream were modified - suggestions welcome on how I could best do this.  Thanks!

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","06/Oct/18 16:04;githubbot;reta commented on issue #453: CXF-7860: Reprocess @FormParam parms so they contain the latest data
URL: https://github.com/apache/cxf/pull/453#issuecomment-427585364
 
 
   @andymc12 Thanks a lot for addressing this very edgy case. I was looking how the current implementation works and basically I was trying to understand if we could defer the evaluation of the HTTP parameters (like `@FormParam`) to a later phase. In general, I think it would be feasible but would significantly impact the existing design.
   
   However, I think I found a simple trick to make it work: reordering parameters initialization. Here is an interesting exercise:
   
   - `Response processForm(@FormParam(""value"") String value, Form form)` -> does not work
   - `Response processForm(Form form, @FormParam(""value"") String value)` -> works just fine
   
   So the idea in the nutshell is to a modify `JAXRSUtils::processParameters` to initialize parameters in a different order. In this case, the `Form` should be initialized before any `@FormParam`, it triggers the reader interceptors and the right values are propagated in `Form` and `@FromParam` arguments. It should also work in case of constructors or class members.
   
   What do you think? 
   Thanks!

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","08/Oct/18 19:51;githubbot;andymc12 commented on issue #453: CXF-7860: Ensure @FormParam parms are consistent with Form entities
URL: https://github.com/apache/cxf/pull/453#issuecomment-427958475
 
 
   @reta Thanks so much!  That is a much better solution that what I had originally proposed.  I had also considered that the ""right approach"" would be to refactor the phase when parameters were processed, but I think this solution is cleaner - and should not disrupt normal cases.
   
   I've left the test cases unaltered, but I removed my changes from `JAXRSInvoker` and instead changed `JAXRSUtils` as you suggested.  This passes all of the unit tests and the systests (including my new one).  Can you take a look at the latest changes?
   
   Thanks again!

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","08/Oct/18 21:38;githubbot;reta commented on issue #453: CXF-7860: Ensure @FormParam parms are consistent with Form entities
URL: https://github.com/apache/cxf/pull/453#issuecomment-427987700
 
 
   Looks good, thanks @andymc12 ! 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","09/Oct/18 00:23;githubbot;andymc12 closed pull request #453: CXF-7860: Ensure @FormParam parms are consistent with Form entities
URL: https://github.com/apache/cxf/pull/453
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/JAXRSUtils.java b/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/JAXRSUtils.java
index 4685270e5e1..90276785327 100644
--- a/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/JAXRSUtils.java
+++ b/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/JAXRSUtils.java
@@ -769,49 +769,68 @@ public static float getMediaTypeQualityFactor(String q) {
         boolean preferModelParams = paramsInfo.size() > parameterTypes.length
             && !PropertyUtils.isTrue(message.getContextualProperty(""org.apache.cxf.preferMethodParameters""));
 
-        int parameterTypesLengh = preferModelParams ? paramsInfo.size() : parameterTypes.length;
+        final int parameterTypesLength = preferModelParams ? paramsInfo.size() : parameterTypes.length;
+        if (parameterTypesLength < 1) {
+            return Collections.emptyList();
+        }
 
         Type[] genericParameterTypes = ori.getInGenericParameterTypes();
         Annotation[][] anns = ori.getInParameterAnnotations();
-        List<Object> params = new ArrayList<>(parameterTypesLengh);
+        Object[] params = new Object[parameterTypesLength];
 
-        for (int i = 0; i < parameterTypesLengh; i++) {
-            Class<?> param = null;
-            Type genericParam = null;
-            Annotation[] paramAnns = null;
+        // Ensure we process all request-body parameters first, then all @*Params, etc.
+        ParamTuple[] tuple = new ParamTuple[parameterTypesLength];
+        for (int i = 0; i < parameterTypesLength; i++) {
+            tuple[i] = new ParamTuple();
             if (!preferModelParams) {
-                param = parameterTypes[i];
-                genericParam = InjectionUtils.processGenericTypeIfNeeded(
-                    ori.getClassResourceInfo().getServiceClass(), param, genericParameterTypes[i]);
-                param = InjectionUtils.updateParamClassToTypeIfNeeded(param, genericParam);
-                paramAnns = anns == null ? EMPTY_ANNOTATIONS : anns[i];
+                tuple[i].param = parameterTypes[i];
+                tuple[i].genericParam = InjectionUtils.processGenericTypeIfNeeded(
+                    ori.getClassResourceInfo().getServiceClass(), tuple[i].param, genericParameterTypes[i]);
+                tuple[i].param = InjectionUtils.updateParamClassToTypeIfNeeded(tuple[i].param, 
+                                                                               tuple[i].genericParam);
+                tuple[i].paramAnns = anns == null ? EMPTY_ANNOTATIONS : anns[i];
             } else {
-                param = paramsInfo.get(i).getJavaType();
-                genericParam = param;
-                paramAnns = EMPTY_ANNOTATIONS;
+                tuple[i].param = paramsInfo.get(i).getJavaType();
+                tuple[i].genericParam = tuple[i].param;
+                tuple[i].paramAnns = EMPTY_ANNOTATIONS;
+            }
+            if (paramsInfo.get(i).getType() == ParameterType.REQUEST_BODY) {
+                params[i] = processRequestBodyParameter(tuple[i].param, 
+                                                        tuple[i].genericParam, 
+                                                        tuple[i].paramAnns,
+                                                        message,
+                                                        ori);
             }
+        }
+        for (int i = 0; i < parameterTypesLength; i++) {
 
-            Object paramValue = processParameter(param,
-                                                 genericParam,
-                                                 paramAnns,
-                                                 paramsInfo.get(i),
-                                                 values,
-                                                 message,
-                                                 ori);
-            params.add(paramValue);
+            if (paramsInfo.get(i).getType() != ParameterType.REQUEST_BODY) {
+                params[i] = processParameter(tuple[i].param,
+                                             tuple[i].genericParam,
+                                             tuple[i].paramAnns,
+                                             paramsInfo.get(i),
+                                             values,
+                                             message,
+                                             ori);
+            }
         }
 
-        return params;
+        return Arrays.asList(params);
     }
 
-    private static Object processParameter(Class<?> parameterClass,
-                                           Type parameterType,
-                                           Annotation[] parameterAnns,
-                                           Parameter parameter,
-                                           MultivaluedMap<String, String> values,
-                                           Message message,
-                                           OperationResourceInfo ori)
+    private static class ParamTuple {
+        private Class<?> param;
+        private Type genericParam;
+        private Annotation[] paramAnns;
+    }
+
+    private static Object processRequestBodyParameter(Class<?> parameterClass,
+                                                      Type parameterType,
+                                                      Annotation[] parameterAnns,
+                                                      Message message,
+                                                      OperationResourceInfo ori)
         throws IOException, WebApplicationException {
+
         InputStream is = message.getContent(InputStream.class);
         if (is == null) {
             Reader reader = message.getContent(Reader.class);
@@ -819,26 +838,38 @@ private static Object processParameter(Class<?> parameterClass,
                 is = new ReaderInputStream(reader);
             }
         }
-        if (parameter.getType() == ParameterType.REQUEST_BODY) {
 
-            if (parameterClass == AsyncResponse.class) {
-                return new AsyncResponseImpl(message);
-            }
+        if (parameterClass == AsyncResponse.class) {
+            return new AsyncResponseImpl(message);
+        }
 
-            String contentType = (String)message.get(Message.CONTENT_TYPE);
+        String contentType = (String)message.get(Message.CONTENT_TYPE);
 
-            if (contentType == null) {
-                String defaultCt = (String)message.getContextualProperty(DEFAULT_CONTENT_TYPE);
-                contentType = defaultCt == null ? MediaType.APPLICATION_OCTET_STREAM : defaultCt;
-            }
+        if (contentType == null) {
+            String defaultCt = (String)message.getContextualProperty(DEFAULT_CONTENT_TYPE);
+            contentType = defaultCt == null ? MediaType.APPLICATION_OCTET_STREAM : defaultCt;
+        }
+
+        return readFromMessageBody(parameterClass,
+                                   parameterType,
+                                   parameterAnns,
+                                   is,
+                                   toMediaType(contentType),
+                                   ori,
+                                   message);
+    }
 
-            return readFromMessageBody(parameterClass,
-                                       parameterType,
-                                       parameterAnns,
-                                       is,
-                                       toMediaType(contentType),
-                                       ori,
-                                       message);
+    private static Object processParameter(Class<?> parameterClass,
+                                           Type parameterType,
+                                           Annotation[] parameterAnns,
+                                           Parameter parameter,
+                                           MultivaluedMap<String, String> values,
+                                           Message message,
+                                           OperationResourceInfo ori)
+        throws IOException, WebApplicationException {
+
+        if (parameter.getType() == ParameterType.REQUEST_BODY) {
+            return processRequestBodyParameter(parameterClass, parameterType, parameterAnns, message, ori);
         } else if (parameter.getType() == ParameterType.CONTEXT) {
             return createContextValue(message, parameterType, parameterClass);
         } else if (parameter.getType() == ParameterType.BEAN) {
diff --git a/systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/form/FormBehaviorTest.java b/systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/form/FormBehaviorTest.java
new file mode 100644
index 00000000000..145967f2a13
--- /dev/null
+++ b/systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/form/FormBehaviorTest.java
@@ -0,0 +1,84 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.cxf.systest.jaxrs.form;
+
+import javax.ws.rs.client.Client;
+import javax.ws.rs.client.ClientBuilder;
+import javax.ws.rs.client.Entity;
+import javax.ws.rs.core.Form;
+import javax.ws.rs.core.MediaType;
+import javax.ws.rs.core.Response;
+
+import org.apache.cxf.jaxrs.JAXRSServerFactoryBean;
+import org.apache.cxf.jaxrs.model.AbstractResourceInfo;
+import org.apache.cxf.testutil.common.AbstractBusClientServerTestBase;
+import org.apache.cxf.testutil.common.AbstractBusTestServerBase;
+
+import org.junit.Assert;
+import org.junit.BeforeClass;
+import org.junit.Ignore;
+import org.junit.Test;
+
+public class FormBehaviorTest extends AbstractBusClientServerTestBase {
+    public static final String PORT = allocatePort(FormBehaviorTest.class);
+
+    @Ignore
+    public static class Server extends AbstractBusTestServerBase {
+        protected void run() {
+            final JAXRSServerFactoryBean sf = new JAXRSServerFactoryBean();
+            sf.setResourceClasses(FormResource.class);
+            sf.setProvider(new FormReaderInterceptor());
+            sf.setAddress(""http://localhost:"" + PORT + ""/"");
+            sf.create();
+        }
+
+        public static void main(String[] args) {
+            try {
+                Server s = new Server();
+                s.start();
+            } catch (Exception ex) {
+                ex.printStackTrace();
+                System.exit(-1);
+            } finally {
+                System.out.println(""done!"");
+            }
+        }
+    }
+
+    @BeforeClass
+    public static void startServers() throws Exception {
+        AbstractResourceInfo.clearAllMaps();
+        // keep out of process due to stack traces testing failures
+        assertTrue(""server did not launch correctly"", launchServer(Server.class, true));
+        createStaticBus();
+    }
+
+    @Test
+    public void testInterceptorInvokedOnFormAndFormParamMatchesFormValue() throws Exception {
+        Client client = ClientBuilder.newClient();
+        String uri = ""http://localhost:"" + PORT + ""/form"";
+        Form f = new Form(""value"", ""ORIGINAL"");
+        Response r = client.target(uri)
+                           .request(MediaType.APPLICATION_FORM_URLENCODED)
+                           .post(Entity.form(f));
+
+        Assert.assertEquals(""MODIFIED"", r.getHeaderString(""FromForm""));
+        Assert.assertEquals(""MODIFIED"", r.getHeaderString(""FromFormParam""));
+    }
+}
diff --git a/systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/form/FormReaderInterceptor.java b/systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/form/FormReaderInterceptor.java
new file mode 100644
index 00000000000..a81ad288092
--- /dev/null
+++ b/systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/form/FormReaderInterceptor.java
@@ -0,0 +1,52 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.cxf.systest.jaxrs.form;
+
+import java.io.BufferedReader;
+import java.io.ByteArrayInputStream;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.logging.Logger;
+
+import javax.ws.rs.WebApplicationException;
+import javax.ws.rs.ext.Provider;
+import javax.ws.rs.ext.ReaderInterceptor;
+import javax.ws.rs.ext.ReaderInterceptorContext;
+
+import org.apache.cxf.common.logging.LogUtils;
+
+@Provider
+public class FormReaderInterceptor implements ReaderInterceptor {
+    private static final Logger LOG = LogUtils.getL7dLogger(FormReaderInterceptor.class);
+
+    @Override
+    public Object aroundReadFrom(ReaderInterceptorContext ctx) throws IOException, WebApplicationException {
+        BufferedReader br = new BufferedReader(new InputStreamReader(ctx.getInputStream()));
+        String line;
+        while ((line = br.readLine()) != null) {
+            LOG.info(""readLine: "" + line);
+        }
+
+        ByteArrayInputStream bais = new ByteArrayInputStream(""value=MODIFIED"".getBytes());
+        LOG.info(""set value=MODIFIED"");
+        ctx.setInputStream(bais);
+        return ctx.proceed();
+    }
+
+}
diff --git a/systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/form/FormResource.java b/systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/form/FormResource.java
new file mode 100644
index 00000000000..b1816d383e4
--- /dev/null
+++ b/systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/form/FormResource.java
@@ -0,0 +1,45 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.cxf.systest.jaxrs.form;
+
+import java.util.logging.Logger;
+
+import javax.ws.rs.FormParam;
+import javax.ws.rs.POST;
+import javax.ws.rs.Path;
+import javax.ws.rs.core.Form;
+import javax.ws.rs.core.Response;
+
+import org.apache.cxf.common.logging.LogUtils;
+
+@Path(""/form"")
+public class FormResource {
+    private static final Logger LOG = LogUtils.getL7dLogger(FormResource.class);
+
+    @POST
+    public Response processForm(@FormParam(""value"") String value, Form form) {
+        String fromForm = form.asMap().getFirst(""value"");
+        LOG.info(""FromFormParam: "" + value);
+        LOG.info(""FromForm: "" + fromForm);
+        return Response.ok()
+                        .header(""FromFormParam"", value)
+                        .header(""FromForm"", fromForm)
+                        .build();
+    }
+}


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
",,,,,,,,,,,,,,,,,,,,,,,,,
Base64 empty string encoding issue,CXF-7858,13188479,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Blocker,Fixed,coheigea,amah,amah,01/Oct/18 10:33,30/Oct/18 10:05,14/Mar/19 02:31,02/Oct/18 09:36,3.2.6,,,3.1.18,3.2.7,,Core,,,0,,,,,"{code:java}
char[] chunk = Base64Utility.encodeChunk("""".getBytes(), 0, 0, true); // chunk  = null after evaluation
{code}
According to [https://tools.ietf.org/html/rfc4648#section-10]
h2. [10|https://tools.ietf.org/html/rfc4648#section-10]. Test Vectors

 
 BASE64("""") = """"

 
{code:java}
// later it evaluates to null
//org.apache.cxf.common.util.Base64UrlUtility#encodeChunk
 public static String encodeChunk(byte[] id, int offset, int length) {
        char[] chunk = Base64Utility.encodeChunk(id, offset, length, true);
        return chunk != null ? new String(chunk) : null;
    }

{code}",,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-10-02 09:30:47.761,,,no_permission,,Unknown,,,,Important,,,,,,,,9223372036854775807,,,Tue Oct 02 09:41:23 UTC 2018,,,,,,0|i3yo33:,9223372036854775807,,,,,,,,"02/Oct/18 07:45;amah;Hi! The decoding needs to be fixed too, I believe.
{code:java}
// org.apache.cxf.common.util.Base64Utility#decodeChunk
Base64Utility.decodeChunk("""".toCharArray(), 0, """".toCharArray().length); // returns null
{code}","02/Oct/18 09:30;githubbot;andriymahats opened a new pull request #452: CXF-7858 fix decoding too
URL: https://github.com/apache/cxf/pull/452
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","02/Oct/18 09:36;githubbot;coheigea commented on issue #452: CXF-7858 fix decoding too
URL: https://github.com/apache/cxf/pull/452#issuecomment-426211242
 
 
   Thanks, but I've already fixed it.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","02/Oct/18 09:36;githubbot;coheigea closed pull request #452: CXF-7858 fix decoding too
URL: https://github.com/apache/cxf/pull/452
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/core/src/main/java/org/apache/cxf/common/util/Base64Utility.java b/core/src/main/java/org/apache/cxf/common/util/Base64Utility.java
index a3ae330c6b2..459c3749023 100644
--- a/core/src/main/java/org/apache/cxf/common/util/Base64Utility.java
+++ b/core/src/main/java/org/apache/cxf/common/util/Base64Utility.java
@@ -130,6 +130,10 @@ private Base64Utility() {
                                      int l)
         throws Base64Exception {
 
+        if (id != null && id.length == 0 && l == 0) {
+            return new byte[]{};
+        }
+
         // Keep it simple - must be >= 4. Unpadded
         // base64 data contain < 3 octets is invalid.
         //
diff --git a/core/src/test/java/org/apache/cxf/common/util/Base64UtilityTest.java b/core/src/test/java/org/apache/cxf/common/util/Base64UtilityTest.java
index ff61b802a75..6062822a5de 100644
--- a/core/src/test/java/org/apache/cxf/common/util/Base64UtilityTest.java
+++ b/core/src/test/java/org/apache/cxf/common/util/Base64UtilityTest.java
@@ -179,6 +179,9 @@ public void testVectors() throws Exception {
         assertEquals(""Zm9vYg=="", Base64Utility.encode(""foob"".getBytes()));
         assertEquals(""Zm9vYmE="", Base64Utility.encode(""fooba"".getBytes()));
         assertEquals(""Zm9vYmFy"", Base64Utility.encode(""foobar"".getBytes()));
+
+        //decode
+        assertArrayEquals(new byte[]{}, Base64Utility.decode(""""));
     }
 
 }


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","02/Oct/18 09:41;githubbot;andriymahats commented on issue #452: CXF-7858 fix decoding too
URL: https://github.com/apache/cxf/pull/452#issuecomment-426212662
 
 
   Thanks.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
",,,,,,,,,,,,,,,,,,,,,,,,,
Mtom/XOP response contain wrong encoded Content-ID HTTP header (Rollback CXF-7317),CXF-7857,13188453,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,,thopap,thopap,01/Oct/18 06:52,03/Oct/18 13:33,14/Mar/19 02:31,01/Oct/18 06:54,3.1.16,3.2.5,3.2.6,3.1.17,3.2.7,,Core,,,0,,,,,"The bugfix CXF-7317 introduce an issue with the encoding of the Content-ID HTTP header. 

Full discussion can be found here:
https://lists.apache.org/thread.html/81f6547983622663da5319707c5510c244ee3ecb0a958c0e2aca1959@%3Cusers.cxf.apache.org%3E

As discussed in the mailing list, CXF-7317 will be rolled-back. This issue is just for tracking purpose in the release notes.",,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,Important,,,,,,,,9223372036854775807,,,Mon Oct 01 06:54:44 UTC 2018,,,,,,0|i3ynxb:,9223372036854775807,,,,,,,,"01/Oct/18 06:54;thopap;[~deki] has already reverted the issue under CXF-7317, this issue is just for tracking purpose - so setting it do resolve.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Refactor RxJava2 Flowable and Observable Rx Invokers to not use internal APIs.,CXF-7854,13188193,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,,jkoehler22,jkoehler22,28/Sep/18 16:15,30/Oct/18 10:06,14/Mar/19 02:31,03/Oct/18 00:37,3.2.6,,,3.2.7,3.3.0,,JAX-RS,,,0,,,,,"Customers wanting to use reactive extensions may want to package their own version of RxJava2 with their application.  The use of internal APIs may cause class loading problems.  

 Caused by: java.lang.NoClassDefFoundError: org/apache/cxf/jaxrs/client/SyncInvokerImpl
            at org.apache.cxf.jaxrs.rx2.client.FlowableRxInvokerProvider.getRxInvoker(FlowableRxInvokerProvider.java:37)
 	at org.apache.cxf.jaxrs.rx2.client.FlowableRxInvokerProvider.getRxInvoker(FlowableRxInvokerProvider.java:29)
 	at org.apache.cxf.jaxrs.client.WebClient.rx(WebClient.java:1286)
 	at org.apache.cxf.jaxrs.client.spec.InvocationBuilderImpl.rx(InvocationBuilderImpl.java:402)

 
FlowableRxInvokerProvider uses org.apache.cxf.jaxrs.client.SyncInvokerImpl. 
FlowableRxInvokerImpl uses org.apache.cxf.jaxrs.client.WebClient.
ObservableRxInvokerProvider uses org.apache.cxf.jaxrs.client.SyncInvokerImpl.
ObservableRxInvokerImpl uses org.apache.cxf.jaxrs.client.WebClient.

These classes need to be refactored. ",,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-09-29 00:51:16.069,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Tue Oct 02 21:03:46 UTC 2018,,,,,,0|i3ymcn:,9223372036854775807,,,,,,,,28/Sep/18 20:37;jkoehler22;I have a change coded up.  I am working the process to deliver the pull request.,"29/Sep/18 00:51;reta;Thanks [~jkoehler22]

 ","01/Oct/18 14:21;githubbot;jkoehler22 opened a new pull request #451: CXF-7854: Refactor RxJava2 Flowable and Observable Rx Invokers to not…
URL: https://github.com/apache/cxf/pull/451
 
 
   … use internal APIs

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","01/Oct/18 14:31;githubbot;andrei-ivanov commented on a change in pull request #451: CXF-7854: Refactor RxJava2 Flowable and Observable Rx Invokers to not…
URL: https://github.com/apache/cxf/pull/451#discussion_r221630991
 
 

 ##########
 File path: rt/rs/extensions/rx2/src/main/java/org/apache/cxf/jaxrs/rx2/client/FlowableRxInvokerImpl.java
 ##########
 @@ -148,33 +151,122 @@ public FlowableRxInvokerImpl(WebClient wc, ExecutorService ex) {
     @Override
     public <T> Flowable<T> method(String name, Entity<?> entity, Class<T> responseType) {
         if (sc == null) {
-            return Flowable.fromFuture(wc.async().method(name, entity, responseType));
+            return Flowable.create(new FlowableOnSubscribe<T>() {
 
 Review comment:
   If these 2 objects are the same and the only difference is the `subscribeOn`+`observerOn` when `sc != null`, in my opinion it would look nicer to create the `Flowable` just once and then apply the logic on it.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","01/Oct/18 18:08;githubbot;andymc12 commented on a change in pull request #451: CXF-7854: Refactor RxJava2 Flowable and Observable Rx Invokers to not…
URL: https://github.com/apache/cxf/pull/451#discussion_r221704277
 
 

 ##########
 File path: rt/rs/extensions/rx2/src/main/java/org/apache/cxf/jaxrs/rx2/client/FlowableRxInvokerImpl.java
 ##########
 @@ -148,33 +151,122 @@ public FlowableRxInvokerImpl(WebClient wc, ExecutorService ex) {
     @Override
     public <T> Flowable<T> method(String name, Entity<?> entity, Class<T> responseType) {
         if (sc == null) {
-            return Flowable.fromFuture(wc.async().method(name, entity, responseType));
+            return Flowable.create(new FlowableOnSubscribe<T>() {
 
 Review comment:
   The same comment should also apply to the changes in `ObservableRxInvokerImpl`.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","01/Oct/18 18:12;githubbot;jkoehler22 commented on a change in pull request #451: CXF-7854: Refactor RxJava2 Flowable and Observable Rx Invokers to not…
URL: https://github.com/apache/cxf/pull/451#discussion_r221705651
 
 

 ##########
 File path: rt/rs/extensions/rx2/src/main/java/org/apache/cxf/jaxrs/rx2/client/FlowableRxInvokerImpl.java
 ##########
 @@ -148,33 +151,122 @@ public FlowableRxInvokerImpl(WebClient wc, ExecutorService ex) {
     @Override
     public <T> Flowable<T> method(String name, Entity<?> entity, Class<T> responseType) {
         if (sc == null) {
-            return Flowable.fromFuture(wc.async().method(name, entity, responseType));
+            return Flowable.create(new FlowableOnSubscribe<T>() {
 
 Review comment:
   Agree.  Thanks for the comments.  Done.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","01/Oct/18 23:02;githubbot;reta commented on a change in pull request #451: CXF-7854: Refactor RxJava2 Flowable and Observable Rx Invokers to not…
URL: https://github.com/apache/cxf/pull/451#discussion_r221783318
 
 

 ##########
 File path: rt/rs/extensions/rx2/src/main/java/org/apache/cxf/jaxrs/rx2/client/FlowableRxInvokerImpl.java
 ##########
 @@ -147,34 +150,90 @@ public FlowableRxInvokerImpl(WebClient wc, ExecutorService ex) {
 
     @Override
     public <T> Flowable<T> method(String name, Entity<?> entity, Class<T> responseType) {
+        
+        Flowable<T> flowable = Flowable.create(new FlowableOnSubscribe<T>() {
+            @Override
+            public void subscribe(FlowableEmitter<T> emitter) throws Exception {
+                    try {
+                        T response = syncInvoker.method(name, entity, responseType);
+                        emitter.onNext(response);
 
 Review comment:
   @jkoehler22  Do you think we should check if emitter is cancelled before calling oNext / etc?
   ```
   if (!emitter.isCancelled()) {
          emitter.onNext(response);
   }
   ```

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","01/Oct/18 23:04;githubbot;reta commented on a change in pull request #451: CXF-7854: Refactor RxJava2 Flowable and Observable Rx Invokers to not…
URL: https://github.com/apache/cxf/pull/451#discussion_r221783683
 
 

 ##########
 File path: rt/rs/extensions/rx2/src/main/java/org/apache/cxf/jaxrs/rx2/client/FlowableRxInvokerImpl.java
 ##########
 @@ -147,34 +150,90 @@ public FlowableRxInvokerImpl(WebClient wc, ExecutorService ex) {
 
     @Override
     public <T> Flowable<T> method(String name, Entity<?> entity, Class<T> responseType) {
+        
+        Flowable<T> flowable = Flowable.create(new FlowableOnSubscribe<T>() {
+            @Override
+            public void subscribe(FlowableEmitter<T> emitter) throws Exception {
+                    try {
+                        T response = syncInvoker.method(name, entity, responseType);
+                        emitter.onNext(response);
+                        emitter.onComplete();
+                    } catch (Throwable e) {
+                        emitter.onError(e);
+                    }
+            }
+        }, BackpressureStrategy.DROP);
+        
         if (sc == null) {
-            return Flowable.fromFuture(wc.async().method(name, entity, responseType));
+            return flowable;
         }
-        return Flowable.fromFuture(wc.async().method(name, entity, responseType), sc);
+        return flowable.subscribeOn(sc).observeOn(sc);        
     }
 
     @Override
     public <T> Flowable<T> method(String name, Entity<?> entity, GenericType<T> responseType) {
+        
+        Flowable<T> flowable = Flowable.create(new FlowableOnSubscribe<T>() {
+            @Override
+            public void subscribe(FlowableEmitter<T> emitter) throws Exception {
 
 Review comment:
   We may generalize code a bit, too many repetition I think:
   ```
       private <T> Flowable<T> create(Supplier<T> supplier) {
           Flowable<T> flowable = Flowable.create(new FlowableOnSubscribe<T>() {
               @Override
               public void subscribe(FlowableEmitter<T> emitter) throws Exception {
                   try {
                       T response = supplier.get();
                       if (!emitter.isCancelled()) {
                           emitter.onNext(response);
                       }
                       
                       if (!emitter.isCancelled()) {
                           emitter.onComplete();
                       }
                   } catch (Throwable e) {
                       if (!emitter.isCancelled()) {
                           emitter.onError(e);
                       }
                   }
               }
           }, BackpressureStrategy.DROP);
           
           if (sc == null) {
               return flowable;
           }
           
           return flowable.subscribeOn(sc).observeOn(sc);
       }
   ```
   
   Then the implementation is just needs a supplier:
   ```
      @Override
       public <T> Flowable<T> method(String name, Entity<?> entity, GenericType<T> responseType) {
           return create(() -> syncInvoker.method(name, entity, responseType));
       }
   
       @Override
       public <T> Flowable<T> method(String name, Class<T> responseType) {
           return create(() -> syncInvoker.method(name, responseType));
       }
   
       @Override
       public <T> Flowable<T> method(String name, GenericType<T> responseType) {
           return create(() -> syncInvoker.method(name, responseType));
       }
   ```
   
   What do you think?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","01/Oct/18 23:06;githubbot;reta commented on a change in pull request #451: CXF-7854: Refactor RxJava2 Flowable and Observable Rx Invokers to not…
URL: https://github.com/apache/cxf/pull/451#discussion_r221784067
 
 

 ##########
 File path: rt/rs/extensions/rx2/src/main/java/org/apache/cxf/jaxrs/rx2/client/ObservableRxInvokerImpl.java
 ##########
 @@ -147,34 +148,90 @@ public ObservableRxInvokerImpl(WebClient wc, ExecutorService ex) {
 
     @Override
     public <T> Observable<T> method(String name, Entity<?> entity, Class<T> responseType) {
+        
+        Observable<T> observable = Observable.create(new ObservableOnSubscribe<T>() {
 
 Review comment:
   If you think previous comments for `Flowable` worth the change, we could replicate it for `Observable` as well. 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","01/Oct/18 23:49;githubbot;reta commented on a change in pull request #451: CXF-7854: Refactor RxJava2 Flowable and Observable Rx Invokers to not…
URL: https://github.com/apache/cxf/pull/451#discussion_r221790817
 
 

 ##########
 File path: rt/rs/extensions/rx2/src/main/java/org/apache/cxf/jaxrs/rx2/client/FlowableRxInvokerImpl.java
 ##########
 @@ -147,34 +150,90 @@ public FlowableRxInvokerImpl(WebClient wc, ExecutorService ex) {
 
     @Override
     public <T> Flowable<T> method(String name, Entity<?> entity, Class<T> responseType) {
+        
+        Flowable<T> flowable = Flowable.create(new FlowableOnSubscribe<T>() {
+            @Override
+            public void subscribe(FlowableEmitter<T> emitter) throws Exception {
+                    try {
+                        T response = syncInvoker.method(name, entity, responseType);
+                        emitter.onNext(response);
+                        emitter.onComplete();
+                    } catch (Throwable e) {
+                        emitter.onError(e);
+                    }
+            }
+        }, BackpressureStrategy.DROP);
+        
         if (sc == null) {
-            return Flowable.fromFuture(wc.async().method(name, entity, responseType));
+            return flowable;
 
 Review comment:
   This part is concerning. I do understand we couldn't do much if `executorService` is not provided. But it means the flow is going to be synchronous (whereas `RxInvoker` states explicitly in javadocs `... asynchronous computation ...`). May be we could default the executor to `Schedulers.io()` in this case?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","01/Oct/18 23:52;githubbot;reta commented on a change in pull request #451: CXF-7854: Refactor RxJava2 Flowable and Observable Rx Invokers to not…
URL: https://github.com/apache/cxf/pull/451#discussion_r221791386
 
 

 ##########
 File path: rt/rs/extensions/rx2/src/main/java/org/apache/cxf/jaxrs/rx2/client/FlowableRxInvokerImpl.java
 ##########
 @@ -147,34 +150,90 @@ public FlowableRxInvokerImpl(WebClient wc, ExecutorService ex) {
 
     @Override
     public <T> Flowable<T> method(String name, Entity<?> entity, Class<T> responseType) {
+        
+        Flowable<T> flowable = Flowable.create(new FlowableOnSubscribe<T>() {
+            @Override
+            public void subscribe(FlowableEmitter<T> emitter) throws Exception {
+                    try {
+                        T response = syncInvoker.method(name, entity, responseType);
+                        emitter.onNext(response);
+                        emitter.onComplete();
+                    } catch (Throwable e) {
+                        emitter.onError(e);
+                    }
+            }
+        }, BackpressureStrategy.DROP);
+        
         if (sc == null) {
-            return Flowable.fromFuture(wc.async().method(name, entity, responseType));
+            return flowable;
 
 Review comment:
   Just to give a reasoning behind it: the sensible default (like `Schedulers.io()` in this case) is used in many part of Java standard library (notably, `ForkJoin.commonPool()`): when the executor is not provided, the default one is used. Not the perfect choice but the asynchronous nature of the call is preserved.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","02/Oct/18 16:07;githubbot;jkoehler22 commented on a change in pull request #451: CXF-7854: Refactor RxJava2 Flowable and Observable Rx Invokers to not…
URL: https://github.com/apache/cxf/pull/451#discussion_r222014823
 
 

 ##########
 File path: rt/rs/extensions/rx2/src/main/java/org/apache/cxf/jaxrs/rx2/client/FlowableRxInvokerImpl.java
 ##########
 @@ -147,34 +150,90 @@ public FlowableRxInvokerImpl(WebClient wc, ExecutorService ex) {
 
     @Override
     public <T> Flowable<T> method(String name, Entity<?> entity, Class<T> responseType) {
+        
+        Flowable<T> flowable = Flowable.create(new FlowableOnSubscribe<T>() {
+            @Override
+            public void subscribe(FlowableEmitter<T> emitter) throws Exception {
+                    try {
+                        T response = syncInvoker.method(name, entity, responseType);
+                        emitter.onNext(response);
 
 Review comment:
   Agree.  Thanks for the comments.  Done.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","02/Oct/18 16:07;githubbot;jkoehler22 commented on a change in pull request #451: CXF-7854: Refactor RxJava2 Flowable and Observable Rx Invokers to not…
URL: https://github.com/apache/cxf/pull/451#discussion_r222014882
 
 

 ##########
 File path: rt/rs/extensions/rx2/src/main/java/org/apache/cxf/jaxrs/rx2/client/FlowableRxInvokerImpl.java
 ##########
 @@ -147,34 +150,90 @@ public FlowableRxInvokerImpl(WebClient wc, ExecutorService ex) {
 
     @Override
     public <T> Flowable<T> method(String name, Entity<?> entity, Class<T> responseType) {
+        
+        Flowable<T> flowable = Flowable.create(new FlowableOnSubscribe<T>() {
+            @Override
+            public void subscribe(FlowableEmitter<T> emitter) throws Exception {
+                    try {
+                        T response = syncInvoker.method(name, entity, responseType);
+                        emitter.onNext(response);
+                        emitter.onComplete();
+                    } catch (Throwable e) {
+                        emitter.onError(e);
+                    }
+            }
+        }, BackpressureStrategy.DROP);
+        
         if (sc == null) {
-            return Flowable.fromFuture(wc.async().method(name, entity, responseType));
+            return flowable;
         }
-        return Flowable.fromFuture(wc.async().method(name, entity, responseType), sc);
+        return flowable.subscribeOn(sc).observeOn(sc);        
     }
 
     @Override
     public <T> Flowable<T> method(String name, Entity<?> entity, GenericType<T> responseType) {
+        
+        Flowable<T> flowable = Flowable.create(new FlowableOnSubscribe<T>() {
+            @Override
+            public void subscribe(FlowableEmitter<T> emitter) throws Exception {
 
 Review comment:
   Agree.  Thanks for the comments.  Done.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","02/Oct/18 16:07;githubbot;jkoehler22 commented on a change in pull request #451: CXF-7854: Refactor RxJava2 Flowable and Observable Rx Invokers to not…
URL: https://github.com/apache/cxf/pull/451#discussion_r222015006
 
 

 ##########
 File path: rt/rs/extensions/rx2/src/main/java/org/apache/cxf/jaxrs/rx2/client/ObservableRxInvokerImpl.java
 ##########
 @@ -147,34 +148,90 @@ public ObservableRxInvokerImpl(WebClient wc, ExecutorService ex) {
 
     @Override
     public <T> Observable<T> method(String name, Entity<?> entity, Class<T> responseType) {
+        
+        Observable<T> observable = Observable.create(new ObservableOnSubscribe<T>() {
 
 Review comment:
   Agree.  Thanks for the comments.  Done.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","02/Oct/18 16:07;githubbot;jkoehler22 commented on a change in pull request #451: CXF-7854: Refactor RxJava2 Flowable and Observable Rx Invokers to not…
URL: https://github.com/apache/cxf/pull/451#discussion_r222015092
 
 

 ##########
 File path: rt/rs/extensions/rx2/src/main/java/org/apache/cxf/jaxrs/rx2/client/FlowableRxInvokerImpl.java
 ##########
 @@ -147,34 +150,90 @@ public FlowableRxInvokerImpl(WebClient wc, ExecutorService ex) {
 
     @Override
     public <T> Flowable<T> method(String name, Entity<?> entity, Class<T> responseType) {
+        
+        Flowable<T> flowable = Flowable.create(new FlowableOnSubscribe<T>() {
+            @Override
+            public void subscribe(FlowableEmitter<T> emitter) throws Exception {
+                    try {
+                        T response = syncInvoker.method(name, entity, responseType);
+                        emitter.onNext(response);
+                        emitter.onComplete();
+                    } catch (Throwable e) {
+                        emitter.onError(e);
+                    }
+            }
+        }, BackpressureStrategy.DROP);
+        
         if (sc == null) {
-            return Flowable.fromFuture(wc.async().method(name, entity, responseType));
+            return flowable;
 
 Review comment:
   Agree.  Thanks for the comments.  Done.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","02/Oct/18 19:37;githubbot;reta commented on issue #451: CXF-7854: Refactor RxJava2 Flowable and Observable Rx Invokers to not…
URL: https://github.com/apache/cxf/pull/451#issuecomment-426402875
 
 
   LGTM, thanks a lot, @jkoehler22 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","02/Oct/18 19:39;githubbot;reta commented on issue #451: CXF-7854: Refactor RxJava2 Flowable and Observable Rx Invokers to not…
URL: https://github.com/apache/cxf/pull/451#issuecomment-426403502
 
 
   @andrei-ivanov Looks good for you?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","02/Oct/18 20:34;githubbot;andrei-ivanov commented on issue #451: CXF-7854: Refactor RxJava2 Flowable and Observable Rx Invokers to not…
URL: https://github.com/apache/cxf/pull/451#issuecomment-426420222
 
 
   Yes, look fine 🙂

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","02/Oct/18 21:03;githubbot;reta closed pull request #451: CXF-7854: Refactor RxJava2 Flowable and Observable Rx Invokers to not…
URL: https://github.com/apache/cxf/pull/451
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/rt/rs/extensions/rx2/src/main/java/org/apache/cxf/jaxrs/rx2/client/FlowableRxInvokerImpl.java b/rt/rs/extensions/rx2/src/main/java/org/apache/cxf/jaxrs/rx2/client/FlowableRxInvokerImpl.java
index be5c2d54eef..f34ba566ce4 100644
--- a/rt/rs/extensions/rx2/src/main/java/org/apache/cxf/jaxrs/rx2/client/FlowableRxInvokerImpl.java
+++ b/rt/rs/extensions/rx2/src/main/java/org/apache/cxf/jaxrs/rx2/client/FlowableRxInvokerImpl.java
@@ -19,24 +19,28 @@
 package org.apache.cxf.jaxrs.rx2.client;
 
 import java.util.concurrent.ExecutorService;
+import java.util.function.Supplier;
 
 import javax.ws.rs.HttpMethod;
 import javax.ws.rs.client.Entity;
+import javax.ws.rs.client.SyncInvoker;
 import javax.ws.rs.core.GenericType;
 import javax.ws.rs.core.Response;
 
-import org.apache.cxf.jaxrs.client.WebClient;
-
+import io.reactivex.BackpressureStrategy;
 import io.reactivex.Flowable;
+import io.reactivex.FlowableEmitter;
+import io.reactivex.FlowableOnSubscribe;
 import io.reactivex.Scheduler;
 import io.reactivex.schedulers.Schedulers;
 
 
 public class FlowableRxInvokerImpl implements FlowableRxInvoker {
     private Scheduler sc;
-    private WebClient wc;
-    public FlowableRxInvokerImpl(WebClient wc, ExecutorService ex) {
-        this.wc = wc;
+    private SyncInvoker syncInvoker;
+    
+    public FlowableRxInvokerImpl(SyncInvoker syncInvoker, ExecutorService ex) {
+        this.syncInvoker = syncInvoker;
         this.sc = ex == null ? null : Schedulers.from(ex);
     }
 
@@ -147,34 +151,50 @@ public FlowableRxInvokerImpl(WebClient wc, ExecutorService ex) {
 
     @Override
     public <T> Flowable<T> method(String name, Entity<?> entity, Class<T> responseType) {
-        if (sc == null) {
-            return Flowable.fromFuture(wc.async().method(name, entity, responseType));
-        }
-        return Flowable.fromFuture(wc.async().method(name, entity, responseType), sc);
+        return create(() -> syncInvoker.method(name, entity, responseType));
     }
-
+    
     @Override
     public <T> Flowable<T> method(String name, Entity<?> entity, GenericType<T> responseType) {
-        if (sc == null) {
-            return Flowable.fromFuture(wc.async().method(name, entity, responseType));
-        }
-        return Flowable.fromFuture(wc.async().method(name, entity, responseType), sc);
+        return create(() -> syncInvoker.method(name, entity, responseType));
     }
 
     @Override
     public <T> Flowable<T> method(String name, Class<T> responseType) {
-        if (sc == null) {
-            return Flowable.fromFuture(wc.async().method(name, responseType));
-        }
-        return Flowable.fromFuture(wc.async().method(name, responseType), sc);
+        return create(() -> syncInvoker.method(name, responseType));
     }
 
     @Override
     public <T> Flowable<T> method(String name, GenericType<T> responseType) {
+        return create(() -> syncInvoker.method(name, responseType));
+    }
+    
+    private <T> Flowable<T> create(Supplier<T> supplier) {
+        Flowable<T> flowable = Flowable.create(new FlowableOnSubscribe<T>() {
+            @Override
+            public void subscribe(FlowableEmitter<T> emitter) throws Exception {
+                try {
+                    T response = supplier.get();
+                    if (!emitter.isCancelled()) {
+                        emitter.onNext(response);
+                    }
+                    
+                    if (!emitter.isCancelled()) {
+                        emitter.onComplete();
+                    }
+                } catch (Throwable e) {
+                    if (!emitter.isCancelled()) {
+                        emitter.onError(e);
+                    }
+                }
+            }
+        }, BackpressureStrategy.DROP);
+        
         if (sc == null) {
-            return Flowable.fromFuture(wc.async().method(name, responseType));
+            return flowable.subscribeOn(Schedulers.io());
         }
-        return Flowable.fromFuture(wc.async().method(name, responseType), sc);
+        
+        return flowable.subscribeOn(sc).observeOn(sc);
     }
 
 }
diff --git a/rt/rs/extensions/rx2/src/main/java/org/apache/cxf/jaxrs/rx2/client/FlowableRxInvokerProvider.java b/rt/rs/extensions/rx2/src/main/java/org/apache/cxf/jaxrs/rx2/client/FlowableRxInvokerProvider.java
index e4e0e71196d..6b61b517ae7 100644
--- a/rt/rs/extensions/rx2/src/main/java/org/apache/cxf/jaxrs/rx2/client/FlowableRxInvokerProvider.java
+++ b/rt/rs/extensions/rx2/src/main/java/org/apache/cxf/jaxrs/rx2/client/FlowableRxInvokerProvider.java
@@ -24,17 +24,12 @@
 import javax.ws.rs.client.SyncInvoker;
 import javax.ws.rs.ext.Provider;
 
-import org.apache.cxf.jaxrs.client.SyncInvokerImpl;
-
 @Provider
 public class FlowableRxInvokerProvider implements RxInvokerProvider<FlowableRxInvoker> {
 
     @Override
     public FlowableRxInvoker getRxInvoker(SyncInvoker syncInvoker, ExecutorService executorService) {
-        // TODO: At the moment we still delegate if possible to the async HTTP conduit.
-        // Investigate if letting the RxJava thread pool deal with the sync invocation
-        // is indeed more effective
-        return new FlowableRxInvokerImpl(((SyncInvokerImpl)syncInvoker).getWebClient(), executorService);
+        return new FlowableRxInvokerImpl(syncInvoker, executorService);
     }
 
     @Override
diff --git a/rt/rs/extensions/rx2/src/main/java/org/apache/cxf/jaxrs/rx2/client/ObservableRxInvokerImpl.java b/rt/rs/extensions/rx2/src/main/java/org/apache/cxf/jaxrs/rx2/client/ObservableRxInvokerImpl.java
index 2c1f966a325..1cb1b9f5add 100644
--- a/rt/rs/extensions/rx2/src/main/java/org/apache/cxf/jaxrs/rx2/client/ObservableRxInvokerImpl.java
+++ b/rt/rs/extensions/rx2/src/main/java/org/apache/cxf/jaxrs/rx2/client/ObservableRxInvokerImpl.java
@@ -19,24 +19,26 @@
 package org.apache.cxf.jaxrs.rx2.client;
 
 import java.util.concurrent.ExecutorService;
+import java.util.function.Supplier;
 
 import javax.ws.rs.HttpMethod;
 import javax.ws.rs.client.Entity;
+import javax.ws.rs.client.SyncInvoker;
 import javax.ws.rs.core.GenericType;
 import javax.ws.rs.core.Response;
 
-import org.apache.cxf.jaxrs.client.WebClient;
-
 import io.reactivex.Observable;
+import io.reactivex.ObservableEmitter;
+import io.reactivex.ObservableOnSubscribe;
 import io.reactivex.Scheduler;
 import io.reactivex.schedulers.Schedulers;
 
 
 public class ObservableRxInvokerImpl implements ObservableRxInvoker {
     private Scheduler sc;
-    private WebClient wc;
-    public ObservableRxInvokerImpl(WebClient wc, ExecutorService ex) {
-        this.wc = wc;
+    private SyncInvoker syncInvoker;
+    public ObservableRxInvokerImpl(SyncInvoker syncInvoker, ExecutorService ex) {
+        this.syncInvoker = syncInvoker;
         this.sc = ex == null ? null : Schedulers.from(ex);
     }
 
@@ -147,34 +149,50 @@ public ObservableRxInvokerImpl(WebClient wc, ExecutorService ex) {
 
     @Override
     public <T> Observable<T> method(String name, Entity<?> entity, Class<T> responseType) {
-        if (sc == null) {
-            return Observable.fromFuture(wc.async().method(name, entity, responseType));
-        }
-        return Observable.fromFuture(wc.async().method(name, entity, responseType), sc);
+        return create(() -> syncInvoker.method(name, entity, responseType));
     }
-
+    
     @Override
     public <T> Observable<T> method(String name, Entity<?> entity, GenericType<T> responseType) {
-        if (sc == null) {
-            return Observable.fromFuture(wc.async().method(name, entity, responseType));
-        }
-        return Observable.fromFuture(wc.async().method(name, entity, responseType), sc);
+        return create(() -> syncInvoker.method(name, entity, responseType));
     }
 
     @Override
     public <T> Observable<T> method(String name, Class<T> responseType) {
-        if (sc == null) {
-            return Observable.fromFuture(wc.async().method(name, responseType));
-        }
-        return Observable.fromFuture(wc.async().method(name, responseType), sc);
+        return create(() -> syncInvoker.method(name, responseType));
     }
 
     @Override
     public <T> Observable<T> method(String name, GenericType<T> responseType) {
+        return create(() -> syncInvoker.method(name, responseType));
+    }
+    
+    private <T> Observable<T> create(Supplier<T> supplier) {
+        Observable<T> observable = Observable.create(new ObservableOnSubscribe<T>() {
+            @Override
+            public void subscribe(ObservableEmitter<T> emitter) throws Exception {
+                try {
+                    T response = supplier.get();
+                    if (!emitter.isDisposed()) {
+                        emitter.onNext(response);
+                    }
+                    
+                    if (!emitter.isDisposed()) {
+                        emitter.onComplete();
+                    }
+                } catch (Throwable e) {
+                    if (!emitter.isDisposed()) {
+                        emitter.onError(e);
+                    }
+                }
+            }
+        });
+        
         if (sc == null) {
-            return Observable.fromFuture(wc.async().method(name, responseType));
+            return observable.subscribeOn(Schedulers.io());
         }
-        return Observable.fromFuture(wc.async().method(name, responseType), sc);
+        
+        return observable.subscribeOn(sc).observeOn(sc);
     }
 
 }
diff --git a/rt/rs/extensions/rx2/src/main/java/org/apache/cxf/jaxrs/rx2/client/ObservableRxInvokerProvider.java b/rt/rs/extensions/rx2/src/main/java/org/apache/cxf/jaxrs/rx2/client/ObservableRxInvokerProvider.java
index 221bc481595..5ab701c400d 100644
--- a/rt/rs/extensions/rx2/src/main/java/org/apache/cxf/jaxrs/rx2/client/ObservableRxInvokerProvider.java
+++ b/rt/rs/extensions/rx2/src/main/java/org/apache/cxf/jaxrs/rx2/client/ObservableRxInvokerProvider.java
@@ -24,17 +24,12 @@
 import javax.ws.rs.client.SyncInvoker;
 import javax.ws.rs.ext.Provider;
 
-import org.apache.cxf.jaxrs.client.SyncInvokerImpl;
-
 @Provider
 public class ObservableRxInvokerProvider implements RxInvokerProvider<ObservableRxInvoker> {
 
     @Override
     public ObservableRxInvoker getRxInvoker(SyncInvoker syncInvoker, ExecutorService executorService) {
-        // TODO: At the moment we still delegate if possible to the async HTTP conduit.
-        // Investigate if letting the RxJava thread pool deal with the sync invocation
-        // is indeed more effective
-        return new ObservableRxInvokerImpl(((SyncInvokerImpl)syncInvoker).getWebClient(), executorService);
+        return new ObservableRxInvokerImpl(syncInvoker, executorService);
     }
 
     @Override
diff --git a/systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/reactive/JAXRSRxJava2ObservableTest.java b/systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/reactive/JAXRSRxJava2ObservableTest.java
index dc8ef134b64..081a518e691 100644
--- a/systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/reactive/JAXRSRxJava2ObservableTest.java
+++ b/systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/reactive/JAXRSRxJava2ObservableTest.java
@@ -19,9 +19,11 @@
 
 package org.apache.cxf.systest.jaxrs.reactive;
 
+import java.util.Collections;
 import java.util.LinkedList;
 import java.util.List;
 
+import javax.ws.rs.core.GenericType;
 import javax.xml.ws.Holder;
 
 import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;
@@ -48,6 +50,14 @@ public static void startServers() throws Exception {
                    launchServer(RxJava2ObservableServer.class, true));
         createStaticBus();
     }
+    @Test
+    public void testGetHelloWorldText() throws Exception {
+        String address = ""http://localhost:"" + PORT + ""/rx2/observable/text"";
+        WebClient wc = WebClient.create(address);
+        String text = wc.accept(""text/plain"").get(String.class);
+        assertEquals(""Hello, world!"", text);
+    }
+
     @Test
     public void testGetHelloWorldJson() throws Exception {
         String address = ""http://localhost:"" + PORT + ""/rx2/observable/textJson"";
@@ -70,4 +80,25 @@ public void testGetHelloWorldJson() throws Exception {
         assertEquals(""Hello"", holder.value.getGreeting());
         assertEquals(""World"", holder.value.getAudience());
     }
+    
+    @Test
+    public void testGetHelloWorldJsonList() throws Exception {
+        String address = ""http://localhost:"" + PORT + ""/rx2/observable/textJsonList"";
+        doTestGetHelloWorldJsonList(address);
+    } 
+    
+    private void doTestGetHelloWorldJsonList(String address) throws Exception {
+        WebClient wc = WebClient.create(address,
+                                        Collections.singletonList(new JacksonJsonProvider()));
+        WebClient.getConfig(wc).getHttpConduit().getClient().setReceiveTimeout(10000000);
+        GenericType<List<HelloWorldBean>> genericResponseType = new GenericType<List<HelloWorldBean>>() {
+        };
+
+        List<HelloWorldBean> beans = wc.accept(""application/json"").get(genericResponseType);
+        assertEquals(2, beans.size());
+        assertEquals(""Hello"", beans.get(0).getGreeting());
+        assertEquals(""World"", beans.get(0).getAudience());
+        assertEquals(""Ciao"", beans.get(1).getGreeting());
+        assertEquals(""World"", beans.get(1).getAudience());
+    }
 }
diff --git a/systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/reactive/RxJava2ObservableService.java b/systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/reactive/RxJava2ObservableService.java
index abb6e7289bf..f08147d1638 100644
--- a/systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/reactive/RxJava2ObservableService.java
+++ b/systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/reactive/RxJava2ObservableService.java
@@ -19,6 +19,8 @@
 
 package org.apache.cxf.systest.jaxrs.reactive;
 
+import java.util.Arrays;
+import java.util.List;
 
 import javax.ws.rs.GET;
 import javax.ws.rs.Path;
@@ -26,10 +28,15 @@
 
 import io.reactivex.Observable;
 
-
 @Path(""/rx2/observable"")
 public class RxJava2ObservableService {
 
+    @GET
+    @Produces(""text/plain"")
+    @Path(""text"")
+    public Observable<String> getText() {
+        return Observable.just(""Hello, world!"");
+    }
     
     @GET
     @Produces(""application/json"")
@@ -37,6 +44,15 @@
     public Observable<HelloWorldBean> getJson() {
         return Observable.just(new HelloWorldBean());
     }
+    
+    @GET
+    @Produces(""application/json"")
+    @Path(""textJsonList"")
+    public Observable<List<HelloWorldBean>> getJsonList() {
+        HelloWorldBean bean1 = new HelloWorldBean();
+        HelloWorldBean bean2 = new HelloWorldBean();
+        bean2.setGreeting(""Ciao"");
+        return Observable.just(Arrays.asList(bean1, bean2));
+    }
+  
 }
-
-


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
",,,,,,,,,,,
Cannot generate code on jdk 11,CXF-7852,13187864,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,ffang,davidkarlsen,davidkarlsen,27/Sep/18 10:43,18/Oct/18 09:59,14/Mar/19 02:31,30/Sep/18 07:10,3.2.6,,,3.3.0,,,Tooling,,,0,,,,,"the codegen maven plugin seems to add an non-existing module when running on java11:
{noformat}
[INFO] --- cxf-codegen-plugin:3.2.6:wsdl2java (default) @ jfr-srv-schemas ---
[INFO] Using proxy server configured in maven.
[INFO] Running code generation in fork mode...
[INFO] The java executable is /Library/Java/JavaVirtualMachines/openjdk-11.jdk/Contents/Home/bin/java
[INFO] Building jar: /var/folders/c7/18m1hlzs075_z0f5nfnt44jm0000gn/T/cxf-tmp-2107463654183740055/cxf-codegen14725056335928137302.jar
[INFO] Error occurred during initialization of boot layer
[INFO] java.lang.module.FindException: Module java.xml.ws not found
{noformat}

{noformat}
Command line was: /Library/Java/JavaVirtualMachines/openjdk-11.jdk/Contents/Home/bin/java --add-modules java.activation,java.xml.bind,java.xml.ws --add-exports=java.xml.bind/com.sun.xml.internal.bind.v2.runtime=ALL-UNNAMED --add-exports=jdk.xml.dom/org.w3c.dom.html=ALL-UNNAMED --add-exports=java.xml/com.sun.org.apache.xerces.internal.impl.xs=ALL-UNNAMED --add-exports=java.xml.bind/com.sun.xml.internal.bind.marshaller=ALL-UNNAMED --add-opens java.xml.ws/javax.xml.ws.wsaddressing=ALL-UNNAMED --add-opens java.base/java.security=ALL-UNNAMED --add-opens java.base/java.net=ALL-UNNAMED --add-opens java.base/java.lang=ALL-UNNAMED --add-opens java.base/java.util=ALL-UNNAMED --add-opens java.base/java.util.concurrent=ALL-UNNAMED -jar /var/folders/c7/18m1hlzs075_z0f5nfnt44jm0000gn/T/cxf-tmp-2107463654183740055/cxf-codegen14725056335928137302.jar /var/folders/c7/18m1hlzs075_z0f5nfnt44jm0000gn/T/cxf-tmp-2107463654183740055/cxf-w2j4026495259386863606args


    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:213)
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:154)
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:146)
    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)
    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)
    at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:56)
    at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)
    at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:305)
    at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:192)
    at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:105)
    at org.apache.maven.cli.MavenCli.execute (MavenCli.java:954)
    at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:288)
    at org.apache.maven.cli.MavenCli.main (MavenCli.java:192)
    at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)
    at jdk.internal.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)
    at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke (Method.java:566)
    at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced (Launcher.java:289)
    at org.codehaus.plexus.classworlds.launcher.Launcher.launch (Launcher.java:229)
    at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode (Launcher.java:415)
    at org.codehaus.plexus.classworlds.launcher.Launcher.main (Launcher.java:356)
Caused by: org.apache.maven.plugin.MojoExecutionException: 
Exit code: 1
{noformat}",,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-09-27 10:56:57.624,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Thu Oct 18 09:59:39 UTC 2018,,,,,,0|i3ykbj:,9223372036854775807,,,,,,,,"27/Sep/18 10:56;ffang;Hi David,

FYI, CXF will support JDK11 since 3.3. 
So for CXF 3.2.6 please stay with JDK8/9/10.

Freeman","27/Sep/18 12:50;davidkarlsen;Is there an ETA for 3.3? I could not find one in JIRA.
This is the last piece in the puzzle for me to get over to JDK11 :)","28/Sep/18 14:25;deki;We don't have an ETA yet, but you can start the discussion on the mailinglist: https://lists.apache.org/list.html?dev@cxf.apache.org","30/Sep/18 07:10;ffang;Hi David,

This should already work with CXF 3.3 SNAPSHOT, so please try out it, and any feedback is welcomed!

Thanks!
Freeman
",01/Oct/18 13:12;davidkarlsen;the codegen works fine with the snapshot - thanks!,18/Oct/18 09:59;davidkarlsen;Is there any chance to backport this so we don't have to wait for 3.3 - after all it seems like a fairly small change? I guess you just added a jar?,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException in cxf-java2ws-plugin with more than one attachWsdl=true,CXF-7851,13187843,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,ffang,hab,hab,27/Sep/18 09:32,19/Oct/18 10:25,14/Mar/19 02:31,27/Sep/18 11:04,3.1.16,3.2.5,3.2.6,3.1.17,3.2.7,,Tooling,,,0,,,,,"Building a project with cxf-java2ws-plugin failed with NullPointerException when more than one execution is configured with attachWsdl=true. 

Caused by: java.lang.NullPointerException
 at org.apache.cxf.maven_plugin.Java2WSMojo.processJavaClass (Java2WSMojo.java:471)
 at org.apache.cxf.maven_plugin.Java2WSMojo.execute (Java2WSMojo.java:254)
 at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo (DefaultBuildPluginManager.java:134)
 at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:208)
 at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:154)
 at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:146)
 at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)
 at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)
 at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:51)
 at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)
 at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:309)
 at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:194)
 at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:107)
 at org.apache.maven.cli.MavenCli.execute (MavenCli.java:955)
 at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:290)
 at org.apache.maven.cli.MavenCli.main (MavenCli.java:194)
 at sun.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)
 at sun.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)
 at sun.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)
 at java.lang.reflect.Method.invoke (Method.java:498)
 at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced (Launcher.java:289)
 at org.codehaus.plexus.classworlds.launcher.Launcher.launch (Launcher.java:229)
 at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode (Launcher.java:415)
 at org.codehaus.plexus.classworlds.launcher.Launcher.main (Launcher.java:356)

 

The configuration works fine in Version 3.1.15 and 3.2.4:

<executions>
 <execution>
 <id>wsdl-Facade1</id>
 <phase>process-classes</phase>
 <configuration>
 <className>SoapFacade1Bean</className>
 <genWsdl>true</genWsdl>
 <verbose>true</verbose>
 <outputFile>${project.build.directory}/generated-sources/wsdl/Facade1WebService.wsdl</outputFile>
 <attachWsdl>true</attachWsdl>
 </configuration>
 <goals>
 <goal>java2ws</goal>
 </goals>
 </execution>
 <execution>
 <id>wsdl-Facade2</id>
 <phase>process-classes</phase>
 <configuration>
 <className>P8ImportSoapFacade2Bean</className>
 <genWsdl>true</genWsdl>
 <verbose>true</verbose>
 <outputFile>${project.build.directory}/generated-sources/wsdl/Facade2WebService.wsdl</outputFile>
 <attachWsdl>true</attachWsdl>
 </configuration>
 <goals>
 <goal>java2ws</goal>
 </goals>
 </execution>
</executions>","Maven 3.5.2, JDK 1.8.0",,,,,,,,,,,,,,,,,,CXF-6324,CXF-6420,,,,0.0,,,,,,,,,,,,,,,,,,,2018-09-28 16:06:59.126,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Sat Sep 29 06:49:48 UTC 2018,,,,,,0|i3yk6v:,9223372036854775807,,,,,,,,28/Sep/18 16:06;coheigea;[~ffang] I backmerged to 3.1.x as well. It looks like you didn't merge it to master though - could you take care of that please?,"29/Sep/18 06:49;ffang;Thanks [~coheigea]!

And for master, this already get resolved by part of CXF-7830


Freeman",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Facing issue in wsdl2java conversion using CXF 3.2.2,CXF-7849,13187567,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Critical,Fixed,ffang,kunalpag,kunalpag,26/Sep/18 10:19,30/Sep/18 07:12,14/Mar/19 02:31,30/Sep/18 07:12,,,,NeedMoreInfo,,,,,,0,,,,,"Earlier we were using CXF 3.1.7 version.

Now we have moved to CXF 3.2.0 to generate the java classes.

In the generation we are facing compilation issues (comma is missing in throws)mentioned below

 

void test() throws IOException Exception

{

}

 

This should be generated as 

void test() throws IOException , Exception

{

}

 ",,,,,,,,,,,,,,,,,,,,,27/Sep/18 02:42;ffang;hello_world.wsdl;https://issues.apache.org/jira/secure/attachment/12941473/hello_world.wsdl,,,1.0,,,,,,,,,,,,,,,,,,,2018-09-26 10:32:43.059,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Thu Sep 27 02:59:08 UTC 2018,,,,,,0|i3yihj:,9223372036854775807,,,,,,,,"26/Sep/18 10:32;ffang;Hi,

Could you  please append the wsdl file so that we can reproduce?

Thanks
Freeman","27/Sep/18 02:59;ffang;Hi,

With the hello_world.wsdl I just attached, I can't reproduce the problem with CXF 3.2.6.

{code}
./wsdl2java -all -compile hello_world.wsdl
{code}
works for me
and the generated related method is
{code}
public void pingMe() throws PingMeFault, PingMeFault2;
{code}

There is an expected comma between PingMeFault and PingMeFault2

So we do need the wsdl to reproduce it.

Freeman


",,,,,,,,,,,,,,,,,,,,,,,,,,,,
DOMUtils init failed with IBM JDK ,CXF-7847,13187188,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,ffang,ffang,ffang,25/Sep/18 06:19,11/Dec/18 17:13,14/Mar/19 02:31,30/Sep/18 07:15,,,,3.1.18,3.2.7,3.3.0,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,2018-09-25 06:19:39.0,,,,,,0|i3yg5j:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
GZIPFeature Does Not Have @Provider Annotation,CXF-7837,13183923,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,ffang,jwcarman,jwcarman,10/Sep/18 02:45,11/Sep/18 02:09,14/Mar/19 02:31,10/Sep/18 05:55,3.2.6,3.3.0,,3.2.7,3.3.0,,,,,0,,,,,"When using the Spring Boot CxfAutoConfiguration, it requires that all discoverable CXF features be annotated with the @Provider annotation (the one from CXF, not JAX-RS).  Currently, the GZIPFeature class does not have that annotation, so it is not discoverable.",,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-09-10 02:47:56.527,,,no_permission,,Novice,,,,,,,,,,,,9223372036854775807,,,Tue Sep 11 02:08:45 UTC 2018,,,,,,0|i3xw5b:,9223372036854775807,,,,,,,,"10/Sep/18 02:47;githubbot;jwcarman opened a new pull request #443: CXF-7837: GZIP Feature Does Not Have @Provider Annotation
URL: https://github.com/apache/cxf/pull/443
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","10/Sep/18 03:01;githubbot;jwcarman opened a new pull request #444: CXF-7837: GZIPFeature Does Not Have @Provider Annotation
URL: https://github.com/apache/cxf/pull/444
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","10/Sep/18 05:53;githubbot;ffang closed pull request #444: CXF-7837: GZIPFeature Does Not Have @Provider Annotation
URL: https://github.com/apache/cxf/pull/444
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/core/src/main/java/org/apache/cxf/transport/common/gzip/GZIPFeature.java b/core/src/main/java/org/apache/cxf/transport/common/gzip/GZIPFeature.java
index bd85bb90374..9e56d871609 100644
--- a/core/src/main/java/org/apache/cxf/transport/common/gzip/GZIPFeature.java
+++ b/core/src/main/java/org/apache/cxf/transport/common/gzip/GZIPFeature.java
@@ -21,6 +21,7 @@
 import java.util.List;
 
 import org.apache.cxf.Bus;
+import org.apache.cxf.annotations.Provider;
 import org.apache.cxf.common.injection.NoJSR250Annotations;
 import org.apache.cxf.feature.AbstractFeature;
 import org.apache.cxf.interceptor.Interceptor;
@@ -48,6 +49,7 @@
  * that your client can accept compressed responses.
  */
 @NoJSR250Annotations
+@Provider(value = Provider.Type.Feature)
 public class GZIPFeature extends AbstractFeature {
     private static final GZIPInInterceptor IN = new GZIPInInterceptor();
     private static final GZIPOutInterceptor OUT = new GZIPOutInterceptor();


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","10/Sep/18 05:53;githubbot;ffang closed pull request #443: CXF-7837: GZIP Feature Does Not Have @Provider Annotation
URL: https://github.com/apache/cxf/pull/443
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/core/src/main/java/org/apache/cxf/transport/common/gzip/GZIPFeature.java b/core/src/main/java/org/apache/cxf/transport/common/gzip/GZIPFeature.java
index bd85bb90374..9e56d871609 100644
--- a/core/src/main/java/org/apache/cxf/transport/common/gzip/GZIPFeature.java
+++ b/core/src/main/java/org/apache/cxf/transport/common/gzip/GZIPFeature.java
@@ -21,6 +21,7 @@
 import java.util.List;
 
 import org.apache.cxf.Bus;
+import org.apache.cxf.annotations.Provider;
 import org.apache.cxf.common.injection.NoJSR250Annotations;
 import org.apache.cxf.feature.AbstractFeature;
 import org.apache.cxf.interceptor.Interceptor;
@@ -48,6 +49,7 @@
  * that your client can accept compressed responses.
  */
 @NoJSR250Annotations
+@Provider(value = Provider.Type.Feature)
 public class GZIPFeature extends AbstractFeature {
     private static final GZIPInInterceptor IN = new GZIPInInterceptor();
     private static final GZIPOutInterceptor OUT = new GZIPOutInterceptor();


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
",10/Sep/18 05:55;ffang;patch applied on behalf of James Carman with thanks!,11/Sep/18 02:08;jwcarman;Thank you for applying the patches so quickly!  Glad to contribute.  ,,,,,,,,,,,,,,,,,,,,,,,,
Stax2 version conflict,CXF-7836,13183636,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,coheigea,sabomichal,sabomichal,07/Sep/18 13:36,30/Oct/18 10:05,14/Mar/19 02:31,07/Sep/18 13:58,3.2.6,,,3.2.7,,,Core,,,0,,,,,"There is a version conflict in transitive dependencies of cxf regarding the stax2 api.

cxf-rt-ws-policy uses the org.apache.neethi library, which is dependant on a version *3.1.1* of stax2 api, however cxf-core and its dependency com.fasterxml.woodstox uses a version *4.1* of stax2 api. Unfortunately, these versions are not compatible - java.lang.NoSuchMethodError: org.codehaus.stax2.ri.EmptyIterator.getInstance()Lorg/codehaus/stax2/ri/EmptyIterator;

Dependency resolution and the conflicting part on the last line.
{code:java}
+--- org.apache.cxf:cxf-rt-frontend-jaxws:3.2.6
| +--- xml-resolver:xml-resolver:1.2
| +--- org.ow2.asm:asm:5.2
| +--- org.apache.cxf:cxf-core:3.2.6 (*)
| +--- org.apache.cxf:cxf-rt-bindings-soap:3.2.6
| | +--- org.apache.cxf:cxf-core:3.2.6 (*)
| | +--- org.apache.cxf:cxf-rt-wsdl:3.2.6
| | | +--- org.apache.cxf:cxf-core:3.2.6 (*)
| | | +--- wsdl4j:wsdl4j:1.6.3
| | | \--- org.ow2.asm:asm:5.2
| | \--- org.apache.cxf:cxf-rt-databinding-jaxb:3.2.6
| | +--- org.apache.cxf:cxf-core:3.2.6 (*)
| | \--- org.apache.cxf:cxf-rt-wsdl:3.2.6 (*)
| +--- org.apache.cxf:cxf-rt-bindings-xml:3.2.6
| | \--- org.apache.cxf:cxf-core:3.2.6 (*)
| +--- org.apache.cxf:cxf-rt-frontend-simple:3.2.6
| | +--- org.apache.cxf:cxf-core:3.2.6 (*)
| | +--- org.apache.cxf:cxf-rt-bindings-soap:3.2.6 (*)
| | \--- org.apache.cxf:cxf-rt-wsdl:3.2.6 (*)
| \--- org.apache.cxf:cxf-rt-ws-addr:3.2.6
| +--- org.apache.cxf:cxf-core:3.2.6 (*)
| +--- org.apache.cxf:cxf-rt-bindings-soap:3.2.6 (*)
| \--- org.apache.cxf:cxf-rt-ws-policy:3.2.6
| +--- wsdl4j:wsdl4j:1.6.3
| +--- org.apache.cxf:cxf-core:3.2.6 (*)
| \--- org.apache.neethi:neethi:3.1.1
| \--- org.codehaus.woodstox:woodstox-core-asl:4.4.1
| +--- javax.xml.stream:stax-api:1.0-2
| \--- org.codehaus.woodstox:stax2-api:3.1.4 -> 4.1
{code}",,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-09-07 13:58:34.574,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Thu Sep 13 12:15:27 UTC 2018,,,,,,0|i3xudr:,9223372036854775807,,,,,,,,"07/Sep/18 13:58;coheigea;Already fixed as part of:

commit f5705dab6bdb7887d2368b053152b825ad4dcca4
Author: Colm O hEigeartaigh <coheigea@apache.org>
Date:   Mon Aug 20 10:28:25 2018 +0100

    Revert ""Updating woodstox""
    
    This reverts commit b3cf64705ad701efbce445ce6d731ad37b39ee03.","13/Sep/18 12:02;vasvir;I am getting the same error as the parent but in my case I don't have cxf-rt-ws-policy in my dependencies and certainly not neethi.

I depend however cxf-rt-ws-security but I can't tell why woodstox-core-asl-4.1 is getting included.

I have manually prevent the woodstox-core-asl-4.1 and both server and clients are working for me so far.

In my mind the correct fix is not to prevent upgrade but to figure out why these two modules (cxf-rt-ws-policy and cxf-rt-ws-security) require the older woodstox jar

Thanks","13/Sep/18 12:15;coheigea;cxf-rt-ws-security has a dependency on cxf-rt-ws-policy so I guess that's how it's getting included. We'll update Neethi eventually with the next major release to use the newer Woodstox version, but for now this issue is fixed with the next CXF release.",,,,,,,,,,,,,,,,,,,,,,,,,,,
Jetty session manager does not invalidate sessions,CXF-7833,13183100,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,ffang,ales_d,ales_d,05/Sep/18 11:29,30/Oct/18 10:05,14/Mar/19 02:31,14/Sep/18 05:42,3.2.6,,,3.2.7,3.3.0,,Transports,,,0,,,,,"When using embedded Jetty with sesssion support:<jetty:sessionSupport>true</jetty:sessionSupport>

sessions NEVER expire. This creates memory leak that will lead to OutOfMemoryError if the application runs long enough.

There is also no way to configure Jetty SessionManager - for example set the session timeout.",,,,,,,,,,,,,,,,,,,,,05/Sep/18 11:33;ales_d;test.txt;https://issues.apache.org/jira/secure/attachment/12938455/test.txt,05/Sep/18 16:10;ales_d;test.zip;https://issues.apache.org/jira/secure/attachment/12938497/test.zip,,2.0,,,,,,,,,,,,,,,,,,,2018-09-14 05:44:41.331,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Fri Sep 14 05:44:41 UTC 2018,,,,,,0|i3xr3b:,9223372036854775807,,,,,,,,"05/Sep/18 11:33;ales_d;I have created test case, but it runs 40 minutes, because there is no way to configure session timeout and Jetty default timeout is 30 minutes. The test demonstrate that even after 40 minutes session was not invelidated add still exists.

I also attach output of the test so you don't have to actually wait 40 minutes.","14/Sep/18 05:44;ffang;With the fix, you can use configure like
<httpj:sessionTimeout>20</httpj:sessionTimeout> //in secs
to specify the session timeout.

The commit is 858b99a4000ccb237950645075eb02226dfa7b0e
",,,,,,,,,,,,,,,,,,,,,,,,,,,,
WrappedMessageContext containsKey not consistent with get/put,CXF-7832,13183071,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,ffang,jpraet,jpraet,05/Sep/18 08:46,30/Oct/18 10:06,14/Mar/19 02:31,07/Sep/18 06:57,,,,3.1.18,3.2.7,3.3.0,,,,0,,,,,"In {{WrappedMessageContext.get()}} and {{put()}} some extra key translations happen, that are not applied in {{WrappedMessageContext.containsKey()}}.

For example {{MessageContext.HTTP_REQUEST_HEADERS}} is translated to {{Message.PROTOCOL_HEADERS}} [here|https://github.com/apache/cxf/blob/782d565f896bc996631c2b092580a116bd65c1e2/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/context/WrappedMessageContext.java#L238], but not in {{containsKey()}}.

So {{context.get(MessageContext.HTTP_REQUEST_HEADERS)}} may return a map with headers, while {{context.containsKey(MessageContext.HTTP_REQUEST_HEADERS)}} returns false.",,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-10-17 17:21:17.604,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Thu Oct 18 08:11:47 UTC 2018,,,,,,0|i3xqwv:,9223372036854775807,,,,,,,,"17/Oct/18 17:21;githubbot;ivassile opened a new pull request #461: [CXF-7832]WrappedMessageContext containsKey not consistent with get/put
URL: https://github.com/apache/cxf/pull/461
 
 
   Upstream issue: https://issues.apache.org/jira/browse/CXF-7832
   Upstream commit https://github.com/apache/cxf/commit/01ec97bfcfd6ba59687da128b31d3995194c3bfc
   
   EAP 7.1.x jira: https://issues.jboss.org/browse/JBEAP-15389

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","18/Oct/18 08:11;githubbot;deki closed pull request #461: [CXF-7832]WrappedMessageContext containsKey not consistent with get/put
URL: https://github.com/apache/cxf/pull/461
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/context/WrappedMessageContext.java b/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/context/WrappedMessageContext.java
index 85a28e04e26..d635ab8ece7 100644
--- a/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/context/WrappedMessageContext.java
+++ b/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/context/WrappedMessageContext.java
@@ -193,7 +193,8 @@ public void clear() {
     }
 
     public final boolean containsKey(Object key) {
-        return message.containsKey(mapKey((String)key));
+        return message.containsKey(mapKey((String)key))
+            || get(key) != null;
     }
 
     public final boolean containsValue(Object value) {
diff --git a/rt/frontend/jaxws/src/test/java/org/apache/cxf/jaxws/context/WrappedMessageContextTest.java b/rt/frontend/jaxws/src/test/java/org/apache/cxf/jaxws/context/WrappedMessageContextTest.java
index 674791d3c05..2e5c557f8cb 100644
--- a/rt/frontend/jaxws/src/test/java/org/apache/cxf/jaxws/context/WrappedMessageContextTest.java
+++ b/rt/frontend/jaxws/src/test/java/org/apache/cxf/jaxws/context/WrappedMessageContextTest.java
@@ -20,6 +20,7 @@
 package org.apache.cxf.jaxws.context;
 
 import java.util.HashMap;
+import java.util.List;
 import java.util.Map;
 import java.util.Set;
 
@@ -81,4 +82,18 @@ public void testPutAndGetJaxwsAttachments() throws Exception {
             }
         }
     }
+    
+    
+    @Test
+    public void testContainsKey() throws Exception {
+        WrappedMessageContext context =
+            new WrappedMessageContext(new HashMap<String, Object>(), null, Scope.APPLICATION);
+
+        Map<String, List<String>> headers = new HashMap<>();
+        context.put(MessageContext.HTTP_REQUEST_HEADERS, headers);
+
+        assertNotNull(context.get(MessageContext.HTTP_REQUEST_HEADERS));
+
+        assertTrue(context.containsKey(MessageContext.HTTP_REQUEST_HEADERS));
+    }
 }


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
",,,,,,,,,,,,,,,,,,,,,,,,,,,,
SocketTimeoutException when previous response was exactly chunk length bytes,CXF-7831,13182599,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,ffang,hallonbat,hallonbat,03/Sep/18 10:25,30/Oct/18 10:05,14/Mar/19 02:31,04/Sep/18 04:12,3.2.6,,,3.2.7,3.3.0,,Transports,,,0,,,,,"When using the Asynchronous Client HTTP Transport we get a SocketTimeout exception when the previous response was exactly the same length as the chunk length by default 16320 bytes.

After some investigation we have found that the problem is that when the http connection is returned to PoolingNHttpClientConnectionManager the SelectionKey's interestOps does not contain OP_READ. The input gets suspended in SharedInputBuffer when the buffer is full (16320 bytes by default) if this happens at the same time as the endOfStream is reached more input is never requested. We have fixed it locally by adding an endOfStream check before suspending input in SharedInputBuffer. This might not be the correct place to fix it since you could argue that it should not be the responsibility of the user of PoolingNHttpClientConnectionManager to return the http connection in the correct state.

 

An example project to reproduce the problem is attached in asyncbugtest.zip and a patch with our fix is in Check_endOfStream_before_suspending_input.patch

 

 ",,,,,,,,,,,,,,,,,,,,,03/Sep/18 10:23;hallonbat;Check_endOfStream_before_suspending_input.patch;https://issues.apache.org/jira/secure/attachment/12938120/Check_endOfStream_before_suspending_input.patch,03/Sep/18 10:23;hallonbat;asyncbugtest.zip;https://issues.apache.org/jira/secure/attachment/12938121/asyncbugtest.zip,,2.0,,,,,,,,,,,,,,,,,,,2018-09-04 04:10:04.064,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Tue Sep 04 09:30:45 UTC 2018,,,,,,0|i3xo5r:,9223372036854775807,,,,,,,,"04/Sep/18 04:10;ffang;I think the proposed fix is good. Just commit fix accordingly and testcase is also added.

Thanks Jan Hallonsten for investigating this issue!",04/Sep/18 09:30;hallonbat;Thank you for the quick resolution!,,,,,,,,,,,,,,,,,,,,,,,,,,,,
cxf-java2ws-plugin command too long (because of -cp argument),CXF-7830,13181921,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Critical,Fixed,ffang,fwangel,fwangel,29/Aug/18 13:36,10/Sep/18 06:51,14/Mar/19 02:31,31/Aug/18 02:27,3.2.6,,,3.3.0,,,Tooling,,,1,CLASSPATH,jdk10,jdk11,wsdl,"Using the cxf-java2ws-plugin from a Maven project using JDK 9+ (10 and 11 release candidate) on Windows 10, it fails to run because the generated command line is too long.

In our case, the generated classpath was more than 75000 characters long – Yes, it is a big project. It used to work on JDK 8.



{{[ERROR] Failed to execute goal org.apache.cxf:cxf-java2ws-plugin:3.2.6:java2ws (_EXECUTIONNAME_) on project _PROJECTNAME_: Error while executing process.: Cannot run program ""cmd.exe"" (in directory ""C:\opt\dev\...\_PROJECTNAME_\target""): CreateProcess error=206, The filename or extension is too long -> [Help 1]}}

 

The current code base (3.3.0-SNAPSHOT) does not work at all with JDK 10 or 11.

The problem is that the classpath is part of the command line and on Windows it seems to be limited to around 8000 characters.","Windows 10

JDK 9, 10 and 11",,,,,,,,,,,,,,,CXF-7735,,,HADOOP-14813,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-08-30 14:35:56.793,,,no_permission,,Unknown,,,,Important,,,,,,,,9223372036854775807,,,Fri Aug 31 02:26:52 UTC 2018,,,,,,0|i3xjzr:,9223372036854775807,,,,,,,,"29/Aug/18 13:38;fwangel;In a local clone of the repository, this issue has been solved by making changes to JavaUtils.java (adding checks for Jdk11+) and Java2WSMojo.java to store the classpath as an environment variable instead of having it part of the command line as an argument.

 

Preparing a pull request for this.","29/Aug/18 14:13;fwangel;Also: JDK 11 removes the Java EE modules, so the list of --add-opens JVM arguments is different from JDK 10 and 9.","30/Aug/18 14:35;githubbot;fwangel opened a new pull request #440: [CXF-7830] Support for running java2ws-plugin using JDK9+ on Windows.
URL: https://github.com/apache/cxf/pull/440
 
 
   ### Problem description
   When using the `cxf-java2ws-plugin` from a Maven project using JDK 9+ (10 and 11 release candidate) on Windows 10, it fails to run because the generated command line is too long.
   
   As an example, in one project I'm working on, the generated classpath was more than 75000 characters long – Yes, it is a big project. It works on JDK 8.
   
   `[ERROR] Failed to execute goal org.apache.cxf:cxf-java2ws-plugin:3.2.6:java2ws (EXECUTIONNAME) on project PROJECTNAME: Error while executing process.: Cannot run program ""cmd.exe"" (in directory ""C:\opt\dev\..._PROJECTNAME_\target""): CreateProcess error=206, The filename or extension is too long -> [Help 1]`
   
   The current code base (3.3.0-SNAPSHOT) does not work at all with JDK 10 or 11.
   
   The problem is that the classpath is part of the command line and on Windows it seems to be limited to around 8000 characters.
   
   ### This commit includes:
   
   Fix for ""CreateProcess error=206, The filename or extension is too long"":
    - Added parameter `classpathAsEnvVar`, which is `false` by default,
      unless plugin is running in a Windows OS using JDK 9+, in which
      case it is activated automatically. This parameter controls if
      the CLASSPATH is applied via environment variable or as an
      argument to the command line that executes the java2ws tool.
   
   Cleaning up the JDK9+ JVM arguments code:
    - Single block for JDK 9, 10, 11 and up.
    - For JDK 11 and up the java.xml.ws module is skipped since
      it was moved out of the JDK.
   
   More verbose error reporting:
    - If command fails to execute, the reported message
      includes information about the command line, and
      the CLASSPATH environment variable if defined.
   
   Other fixes:
    - Fixed NPE when classifier is undefined.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","31/Aug/18 00:45;githubbot;ffang closed pull request #440: [CXF-7830] Support for running java2ws-plugin using JDK9+ on Windows.
URL: https://github.com/apache/cxf/pull/440
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/core/src/main/java/org/apache/cxf/helpers/JavaUtils.java b/core/src/main/java/org/apache/cxf/helpers/JavaUtils.java
index 7c604d5b1a5..52ad836e40b 100644
--- a/core/src/main/java/org/apache/cxf/helpers/JavaUtils.java
+++ b/core/src/main/java/org/apache/cxf/helpers/JavaUtils.java
@@ -46,6 +46,7 @@
         ""void"", ""volatile"", ""while""
     ));
 
+    private static boolean isJava11Compatible;
     private static boolean isJava9Compatible;
     private static boolean isJava8Before161;
 
@@ -66,6 +67,7 @@
         }
 
         setJava9Compatible(Integer.valueOf(version) >= 9);
+        setJava11Compatible(Integer.valueOf(version) >= 11);
     }
 
     private JavaUtils() {
@@ -91,10 +93,18 @@ public static String makeNonJavaKeyword(String keyword) {
     public static boolean isJava9Compatible() {
         return isJava9Compatible;
     }
+    
+    public static boolean isJava11Compatible() {
+        return isJava11Compatible;
+    }
 
     private static void setJava9Compatible(boolean java9Compatible) {
         JavaUtils.isJava9Compatible = java9Compatible;
     }
+    
+    private static void setJava11Compatible(boolean java11Compatible) {
+        JavaUtils.isJava11Compatible = java11Compatible;
+    }
 
     public static boolean isJava8Before161() {
         return isJava8Before161;
diff --git a/maven-plugins/java2ws-plugin/src/main/java/org/apache/cxf/maven_plugin/Java2WSMojo.java b/maven-plugins/java2ws-plugin/src/main/java/org/apache/cxf/maven_plugin/Java2WSMojo.java
index 08540e8465b..84b7f023d8b 100644
--- a/maven-plugins/java2ws-plugin/src/main/java/org/apache/cxf/maven_plugin/Java2WSMojo.java
+++ b/maven-plugins/java2ws-plugin/src/main/java/org/apache/cxf/maven_plugin/Java2WSMojo.java
@@ -209,12 +209,29 @@
      */
     private String additionalJvmArgs;
 
+    /**
+     * Determines how the classpath is applied to the executed command,
+     * either as a command line argument, or as an environment variable
+     * for the executing process. Only applicable when fork is set to <code>true</code>
+     * (which is always the case for JDK 9+).
+     * <p>
+     * Primarily useful on Windows because of length limitations for command arguments,
+     * which is why the default is <code>true</code> in that case.
+     *
+     * @parameter default-value=""false""
+     * @since 3.3
+     */
+    private Boolean classpathAsEnvVar;
+
     public void execute() throws MojoExecutionException {
-        if (JavaUtils.isJava9Compatible()) {
+        boolean requiresModules = JavaUtils.isJava9Compatible();
+        if (requiresModules) {
+            // Since JEP 261 (""Jigsaw""), access to some packages must be granted
             fork = true;
+            boolean skipXmlWsModule = JavaUtils.isJava11Compatible(); //
             additionalJvmArgs = ""--add-exports=jdk.xml.dom/org.w3c.dom.html=ALL-UNNAMED ""
                     + ""--add-exports=java.xml/com.sun.org.apache.xerces.internal.impl.xs=ALL-UNNAMED ""
-                    + ""--add-opens java.xml.ws/javax.xml.ws.wsaddressing=ALL-UNNAMED ""
+                    + (skipXmlWsModule ? """" : ""--add-opens java.xml.ws/javax.xml.ws.wsaddressing=ALL-UNNAMED "")
                     + ""--add-opens java.base/java.security=ALL-UNNAMED ""
                     + ""--add-opens java.base/java.net=ALL-UNNAMED ""
                     + ""--add-opens java.base/java.lang=ALL-UNNAMED ""
@@ -222,6 +239,11 @@ public void execute() throws MojoExecutionException {
                     + ""--add-opens java.base/java.util.concurrent=ALL-UNNAMED "" 
                     + (additionalJvmArgs == null ? """" : additionalJvmArgs); 
         }
+        if (fork && SystemUtils.IS_OS_WINDOWS) {
+            // Windows does not allow for very long command lines,
+            // so by default CLASSPATH environment variable is used.
+            classpathAsEnvVar = true;
+        }
         System.setProperty(""org.apache.cxf.JDKBugHacks.defaultUsesCaches"", ""true"");
         if (skip) {
             getLog().info(""Skipping Java2WS execution"");
@@ -247,8 +269,8 @@ public void execute() throws MojoExecutionException {
                 cp = StringUtils.join(artifactsPath.iterator(), File.pathSeparator) + File.pathSeparator + cp;
             }
 
-            List<String> args = initArgs(cp);
-            processJavaClass(args);
+            List<String> args = initArgs(classpathAsEnvVar ? null : cp);
+            processJavaClass(args, classpathAsEnvVar ? cp : null);
         } finally {
             classLoaderSwitcher.restoreClassLoader();
         }
@@ -268,9 +290,11 @@ public void execute() throws MojoExecutionException {
             args.add(""-DexitOnFinish=true"");
         }
 
-        // classpath arg
-        args.add(""-cp"");
-        args.add(cp);
+        if (!StringUtils.isEmpty(cp)) {
+            // classpath arg
+            args.add(""-cp"");
+            args.add(cp);
+        }
 
         if (fork) {
             args.add(JavaToWS.class.getCanonicalName());
@@ -384,7 +408,7 @@ public void execute() throws MojoExecutionException {
         return args;
     }
 
-    private void processJavaClass(List<String> args) throws MojoExecutionException {
+    private void processJavaClass(List<String> args, String cp) throws MojoExecutionException {
         if (!fork) {
             try {
                 CommandInterfaceUtils.commandCommonMain();
@@ -416,22 +440,37 @@ private void processJavaClass(List<String> args) throws MojoExecutionException {
             }
 
             cmd.addArguments(args.toArray(new String[0]));
+            if (classpathAsEnvVar && !StringUtils.isEmpty(cp)) {
+                cmd.addEnvironment(""CLASSPATH"", cp);
+            }
 
             CommandLineUtils.StringStreamConsumer err = new CommandLineUtils.StringStreamConsumer();
             CommandLineUtils.StringStreamConsumer out = new CommandLineUtils.StringStreamConsumer();
 
+            String cmdLine = CommandLineUtils.toString(cmd.getCommandline());
+
             int exitCode;
             try {
                 exitCode = CommandLineUtils.executeCommandLine(cmd, out, err);
             } catch (CommandLineException e) {
                 getLog().debug(e);
-                throw new MojoExecutionException(e.getMessage(), e);
+                StringBuilder msg = new StringBuilder(e.getMessage());
+                if (!(fork && classpathAsEnvVar)) {
+                    msg.append('\n');
+                    msg.append(""Try to run this goal using <fork>true</fork> and ""
+                            + ""<classpathAsEnvVar>true</classpathAsEnvVar>."");
+                }
+                msg.append('\n');
+                msg.append(""Command line was: "").append(cmdLine).append('\n');
+                if (classpathAsEnvVar && !StringUtils.isEmpty(cp)) {
+                    msg.append(""   CLASSPATH env: "").append(cp).append('\n');
+                }
+                msg.append('\n');
+                throw new MojoExecutionException(msg.toString(), e);
             }
 
             String output = StringUtils.isEmpty(out.getOutput()) ? null : '\n' + out.getOutput().trim();
 
-            String cmdLine = CommandLineUtils.toString(cmd.getCommandline());
-
             if (exitCode != 0) {
                 if (StringUtils.isNotEmpty(output)) {
                     getLog().info(output);
@@ -443,7 +482,11 @@ private void processJavaClass(List<String> args) throws MojoExecutionException {
                     msg.append("" - "").append(err.getOutput());
                 }
                 msg.append('\n');
-                msg.append(""Command line was: "").append(cmdLine).append('\n').append('\n');
+                msg.append(""Command line was: "").append(cmdLine).append('\n');
+                if (classpathAsEnvVar && !StringUtils.isEmpty(cp)) {
+                    msg.append(""   CLASSPATH env: "").append(cp).append('\n');
+                }
+                msg.append('\n');
 
                 throw new MojoExecutionException(msg.toString());
             }
@@ -452,7 +495,11 @@ private void processJavaClass(List<String> args) throws MojoExecutionException {
                 StringBuilder msg = new StringBuilder();
                 msg.append(err.getOutput());
                 msg.append('\n');
-                msg.append(""Command line was: "").append(cmdLine).append('\n').append('\n');
+                msg.append(""Command line was: "").append(cmdLine).append('\n');
+                if (classpathAsEnvVar && !StringUtils.isEmpty(cp)) {
+                    msg.append(""   CLASSPATH env: "").append(cp).append('\n');
+                }
+                msg.append('\n');
                 throw new MojoExecutionException(msg.toString());
             }
         }
@@ -465,7 +512,7 @@ private void processJavaClass(List<String> args) throws MojoExecutionException {
                 
                 boolean hasWsdlAttached = false;
                 for (Artifact a : project.getAttachedArtifacts()) {
-                    if (""wsdl"".equals(a.getType()) && classifier.equals(a.getClassifier())) {
+                    if (""wsdl"".equals(a.getType()) && classifier != null && classifier.equals(a.getClassifier())) {
                         hasWsdlAttached = true;
                     }
                 }


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
",31/Aug/18 02:26;ffang;patch applied on behalf of Fredrik Wangel  with thanks!,,,,,,,,,,,,,,,,,,,,,,,,,
CacheMap may have spurious null keys,CXF-7824,13180440,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,deki,pachum,pachum,22/Aug/18 10:41,11/Dec/18 17:12,14/Mar/19 02:31,30/Aug/18 10:32,3.2.6,,,3.1.18,3.2.7,3.3.0,,,,0,,,,,"Hello,

I was debugging a bug in my code and by accident I found a bug in CacheMap.

 

The function updateMainDataMap copies elements from extraKeyMap to mainDataMap but does not make sure that keys are not null.

It is possible that entrySet of WeakIdentityHashMap will return null keys.
{code:java}
public Set<Map.Entry<K, V>> entrySet() {
    reap();
    Set<Map.Entry<K, V>> ret = new HashSet<Map.Entry<K, V>>();
    for (Map.Entry<IdentityWeakReference, V> ref : backingStore.entrySet()) {
        final K key = ref.getKey().get(); //possible null here
        final V value = ref.getValue();
        Map.Entry<K, V> entry = new Map.Entry<K, V>() {
            public K getKey() {
                return key;
            }
            public V getValue() {
                return value;
            }
            public V setValue(V value) {
                throw new UnsupportedOperationException();
            }
        };
        ret.add(entry);
    }
    return Collections.unmodifiableSet(ret);
}{code}
On entrance the function clears all null keys (in the reap() functon) and then iterates over backingStore. But it is possible that after reap() a key is garbage collected and its WeakReference will return null (ref.getKey().get()).

This causes a spurious null key.

 

I gave this case a Major priority because this class is used by WSDLManagerImpl, and spurious null keys cause serious problems there. I can reproduce this problem in a few minutes of testing. The testcase consists of creating generated service over and over again by multiple threads. Unfortunately the testcase itself is too big to share.",,,,,,,,,,,,,,,,,,CXF-7076,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-08-23 08:11:22.544,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Thu Aug 30 10:32:17 UTC 2018,,,,,,0|i3xavj:,9223372036854775807,,,,,,,,23/Aug/18 08:11;deki;Thanks for the bug report. Can you propose a fix as a pull request via https://github.com/apache/cxf/pulls?,"27/Aug/18 10:50;pachum;I can try, but at work I have cloning from github blocked due to some reason and a newborn at home :).",30/Aug/18 10:10;deki;Is it enough to add a null check in entrySet and keySet? Or what kind of fix would you propose?,30/Aug/18 10:12;pachum;I think it is enough.,"30/Aug/18 10:32;deki;Ok done: [https://github.com/apache/cxf/commit/88c493bd64ceb68f24301b50c6e795f47526c566]

Please retest with the latest SNAPSHOT version.",,,,,,,,,,,,,,,,,,,,,,,,,
JAXBEncoderDecoder doesn't respect @XmlType's propOrder in Exception class,CXF-7823,13180369,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,ema,ema,ema,22/Aug/18 03:30,03/Oct/18 13:33,14/Mar/19 02:31,28/Aug/18 02:49,3.1.16,3.2.6,,3.1.17,3.2.7,3.3.0,JAXB Databinding,,,0,,,,,"Property order is ignored when marshal this exception class by JAXBEncoderDecoder:

@XmlRootElement(name = ""fault"")
@XmlType(name = """", propOrder = { ""message"", ""data""}, namespace = """")
public class PropertyOrderException extends Exception implements java.io.Serializable {
    private static final long serialVersionUID = 1L;
    @XmlElement(name = ""message"", required = true, nillable = true)
    public String message;
    @XmlElement(name = ""data"", required = true, nillable = true)
    public ErrorData data;
    public PropertyOrderException() {
        this.data = new ErrorData();
        this.message = null;
    }
    public PropertyOrderException(ErrorData data) {
        this.data = data;
        this.message = null;
    }
    public PropertyOrderException(String message) {
        this.data = null;
        this.message = message;
    }
    @Override
    @XmlTransient
    public String getMessage() {
        return this.message;
    }
}",,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-08-24 09:06:16.919,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Tue Aug 28 02:47:12 UTC 2018,,,,,,0|i3xafj:,9223372036854775807,,,,,,,,"24/Aug/18 09:06;githubbot;jimma opened a new pull request #437: [CXF-7823]:JAXBEncoderDecoder doesn't respect @XmlType's propOrder in…
URL: https://github.com/apache/cxf/pull/437
 
 
   … Exception class

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","24/Aug/18 11:25;githubbot;andrei-ivanov commented on a change in pull request #437: [CXF-7823]:JAXBEncoderDecoder doesn't respect @XmlType's propOrder in…
URL: https://github.com/apache/cxf/pull/437#discussion_r212598181
 
 

 ##########
 File path: systests/databinding/src/test/java/org/apache/cxf/systest/jaxb/TestServiceTest.java
 ##########
 @@ -73,7 +78,37 @@ public void testExtraSubClassWithJaxbFromEndpoint() throws Throwable {
         Assert.assertEquals(expected, widgetFromService);
     }
 
+    @Test
+    public void testExceptionPropertyOrder() throws Throwable {
+        BusFactory.getThreadDefaultBus().getOutFaultInterceptors().add(new LoggingOutInterceptor(fault));
+        TestService testClient = getTestClient();
+        ((BindingProvider)testClient).getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
+                                                              ""http://localhost:"" + PORT
+                                                                  + ""/service/TestEndpoint"");
+        try {
+            testClient.echo(""Exception"");
+        } catch (PropertyOrderException e) {
+            Assert.assertTrue(""Expect <message> element is before <data> element :"" + fault.getMessage(),
+                              fault.getMessage().indexOf(""</message><data"") > -1);
+        }
+    }
 
+    
+    static class TestLoggingEventSender implements LogEventSender {
+        private String logMessage;
+
+        public String getMessage() {
+            return logMessage;
+        }
+        public void cleaerMessage() {
 
 Review comment:
   *clear?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","24/Aug/18 14:59;githubbot;jimma commented on a change in pull request #437: [CXF-7823]:JAXBEncoderDecoder doesn't respect @XmlType's propOrder in…
URL: https://github.com/apache/cxf/pull/437#discussion_r212657313
 
 

 ##########
 File path: systests/databinding/src/test/java/org/apache/cxf/systest/jaxb/TestServiceTest.java
 ##########
 @@ -73,7 +78,37 @@ public void testExtraSubClassWithJaxbFromEndpoint() throws Throwable {
         Assert.assertEquals(expected, widgetFromService);
     }
 
+    @Test
+    public void testExceptionPropertyOrder() throws Throwable {
+        BusFactory.getThreadDefaultBus().getOutFaultInterceptors().add(new LoggingOutInterceptor(fault));
+        TestService testClient = getTestClient();
+        ((BindingProvider)testClient).getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
+                                                              ""http://localhost:"" + PORT
+                                                                  + ""/service/TestEndpoint"");
+        try {
+            testClient.echo(""Exception"");
+        } catch (PropertyOrderException e) {
+            Assert.assertTrue(""Expect <message> element is before <data> element :"" + fault.getMessage(),
+                              fault.getMessage().indexOf(""</message><data"") > -1);
+        }
+    }
 
+    
+    static class TestLoggingEventSender implements LogEventSender {
+        private String logMessage;
+
+        public String getMessage() {
+            return logMessage;
+        }
+        public void cleaerMessage() {
 
 Review comment:
   Fixed. Thanks for review @andrei-ivanov 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","27/Aug/18 03:35;githubbot;jimma closed pull request #437: [CXF-7823]:JAXBEncoderDecoder doesn't respect @XmlType's propOrder in…
URL: https://github.com/apache/cxf/pull/437
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBEncoderDecoder.java b/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBEncoderDecoder.java
index 1e6ec2799b9..15d476df7a6 100644
--- a/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBEncoderDecoder.java
+++ b/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBEncoderDecoder.java
@@ -56,6 +56,7 @@
 import javax.xml.bind.annotation.XmlAccessType;
 import javax.xml.bind.annotation.XmlAccessorOrder;
 import javax.xml.bind.annotation.XmlAttribute;
+import javax.xml.bind.annotation.XmlType;
 import javax.xml.bind.annotation.adapters.HexBinaryAdapter;
 import javax.xml.bind.attachment.AttachmentMarshaller;
 import javax.xml.bind.attachment.AttachmentUnmarshaller;
@@ -425,7 +426,28 @@ public int compare(Member m1, Member m2) {
                     }
                 });
             }
-
+            XmlType xmlType = cls.getAnnotation(XmlType.class);
+            if (xmlType != null && xmlType.propOrder().length > 1 && !xmlType.propOrder()[0].isEmpty()) {
+                final List<String> orderList = Arrays.asList(xmlType.propOrder());
+                Collections.sort(combinedMembers, new Comparator<Member>() {
+                    public int compare(Member m1, Member m2) {
+                        String m1Name = getName(m1);
+                        String m2Name = getName(m2);
+                        int m1Index = orderList.indexOf(m1Name);
+                        int m2Index = orderList.indexOf(m2Name);
+                        if (m1Index != -1 && m2Index != -1) {
+                            return m1Index - m2Index;
+                        }
+                        if (m1Index == -1 && m2Index != -1) {
+                            return 1;
+                        }
+                        if (m1Index != -1 && m2Index == -1) {
+                            return -1;
+                        }
+                        return 0;
+                    }
+                });
+            }
             for (Member member : combinedMembers) {
                 if (member instanceof Field) {
                     Field f = (Field)member;
@@ -461,6 +483,17 @@ public int compare(Member m1, Member m2) {
         }
     }
 
+    private static String getName(Member m1) {
+        String m1Name = null;
+        if (m1 instanceof Field) {
+            m1Name = ((Field)m1).getName();
+        } else {
+            int idx = m1.getName().startsWith(""get"") ? 3 : 2;
+            String name = m1.getName().substring(idx);
+            m1Name = Character.toLowerCase(name.charAt(0)) + name.substring(1);
+        }
+        return m1Name;
+    }
     private static void writeArrayObject(Marshaller marshaller,
                                          Object source,
                                          QName mname,
diff --git a/systests/databinding/src/test/java/org/apache/cxf/systest/jaxb/TestServiceTest.java b/systests/databinding/src/test/java/org/apache/cxf/systest/jaxb/TestServiceTest.java
index a78ca348e11..e2d43da10d4 100644
--- a/systests/databinding/src/test/java/org/apache/cxf/systest/jaxb/TestServiceTest.java
+++ b/systests/databinding/src/test/java/org/apache/cxf/systest/jaxb/TestServiceTest.java
@@ -28,9 +28,13 @@
 
 import org.apache.cxf.Bus;
 import org.apache.cxf.endpoint.Server;
+import org.apache.cxf.ext.logging.LoggingOutInterceptor;
+import org.apache.cxf.ext.logging.event.LogEvent;
+import org.apache.cxf.ext.logging.event.LogEventSender;
 import org.apache.cxf.helpers.IOUtils;
 import org.apache.cxf.systest.jaxb.model.ExtendedWidget;
 import org.apache.cxf.systest.jaxb.model.Widget;
+import org.apache.cxf.systest.jaxb.service.PropertyOrderException;
 import org.apache.cxf.systest.jaxb.service.TestService;
 import org.apache.cxf.test.TestUtilities;
 import org.apache.cxf.testutil.common.TestUtil;
@@ -44,7 +48,7 @@
 @ContextConfiguration(locations = { ""classpath:extrajaxbclass.xml"" })
 public class TestServiceTest extends AbstractJUnit4SpringContextTests {
     static final String PORT = TestUtil.getPortNumber(TestServiceTest.class);
-
+    private static TestLoggingEventSender fault = new TestLoggingEventSender();
     private TestUtilities testUtilities;
 
     public TestServiceTest() {
@@ -73,7 +77,37 @@ public void testExtraSubClassWithJaxbFromEndpoint() throws Throwable {
         Assert.assertEquals(expected, widgetFromService);
     }
 
+    @Test
+    public void testExceptionPropertyOrder() throws Throwable {
+        ((Bus)applicationContext.getBean(""cxf"")).getOutFaultInterceptors().add(new LoggingOutInterceptor(fault));
+        TestService testClient = getTestClient();
+        ((BindingProvider)testClient).getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
+                                                              ""http://localhost:"" + PORT
+                                                                  + ""/service/TestEndpoint"");
+        try {
+            testClient.echo(""Exception"");
+        } catch (PropertyOrderException e) {
+            Assert.assertTrue(""Expect <message> element is before <data> element :"" + fault.getMessage(),
+                              fault.getMessage().indexOf(""</message><data"") > -1);
+        }
+    }
 
+    
+    static class TestLoggingEventSender implements LogEventSender {
+        private String logMessage;
+
+        public String getMessage() {
+            return logMessage;
+        }
+        public void clearMessage() {
+            logMessage = null;
+        }
+        @Override
+        public void send(LogEvent event) {
+            logMessage = event.getPayload();
+        }
+    }
+    
     @Test
     public void testSchema() throws Exception {
         URL url = new URL(""http://localhost:"" + PORT + ""/service/TestService?wsdl"");
diff --git a/systests/databinding/src/test/java/org/apache/cxf/systest/jaxb/service/ErrorData.java b/systests/databinding/src/test/java/org/apache/cxf/systest/jaxb/service/ErrorData.java
new file mode 100644
index 00000000000..5fe127f6ce4
--- /dev/null
+++ b/systests/databinding/src/test/java/org/apache/cxf/systest/jaxb/service/ErrorData.java
@@ -0,0 +1,62 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.cxf.systest.jaxb.service;
+
+import javax.xml.bind.annotation.XmlType;
+
+@XmlType(name = ""ErrorData"")
+public class ErrorData implements java.io.Serializable {
+    private static final long serialVersionUID = 1L;
+    private long code;
+    private String title;
+    private String description;
+
+    public ErrorData() {
+    }
+
+    public ErrorData(long code, String title, String description, String stack) {
+        this.code = code;
+        this.title = title;
+        this.description = description;
+    }
+
+    public long getCode() {
+        return code;
+    }
+
+    public void setCode(long code) {
+        this.code = code;
+    }
+
+    public String getTitle() {
+        return title;
+    }
+
+    public void setTitle(String title) {
+        this.title = title;
+    }
+
+    public String getDescription() {
+        return description;
+    }
+
+    public void setDescription(String description) {
+        this.description = description;
+    }
+}
diff --git a/systests/databinding/src/test/java/org/apache/cxf/systest/jaxb/service/PropertyOrderException.java b/systests/databinding/src/test/java/org/apache/cxf/systest/jaxb/service/PropertyOrderException.java
new file mode 100644
index 00000000000..61ee4ceac0e
--- /dev/null
+++ b/systests/databinding/src/test/java/org/apache/cxf/systest/jaxb/service/PropertyOrderException.java
@@ -0,0 +1,70 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.cxf.systest.jaxb.service;
+
+import javax.xml.bind.annotation.XmlElement;
+import javax.xml.bind.annotation.XmlRootElement;
+import javax.xml.bind.annotation.XmlType;
+
+@XmlRootElement(name = ""fault"")
+@XmlType(name = """", propOrder = {
+    ""message"", ""data""
+}, namespace = """")
+public class PropertyOrderException extends Exception implements java.io.Serializable {
+
+    private static final long serialVersionUID = 1L;
+
+    @XmlElement(name = ""message"", required = true, nillable = true)
+    private String message;
+
+    @XmlElement(name = ""data"", required = true, nillable = true)
+    private ErrorData data;
+
+    public PropertyOrderException() {
+        this.data = new ErrorData();
+        this.message = null;
+    }
+
+    public PropertyOrderException(ErrorData data) {
+        this.data = data;
+        this.message = null;
+    }
+
+    public PropertyOrderException(String message) {
+        this.data = null;
+        this.message = message;
+    }
+
+    public String getMessage() {
+        return this.message;
+    }
+
+    public ErrorData getData() {
+        return data;
+    }
+
+    public void setData(ErrorData data) {
+        this.data = data;
+    }
+
+    public void setMessage(String message) {
+        this.message = message;
+    }
+
+}
diff --git a/systests/databinding/src/test/java/org/apache/cxf/systest/jaxb/service/TestService.java b/systests/databinding/src/test/java/org/apache/cxf/systest/jaxb/service/TestService.java
index 4eef3c25d13..1977e93037d 100644
--- a/systests/databinding/src/test/java/org/apache/cxf/systest/jaxb/service/TestService.java
+++ b/systests/databinding/src/test/java/org/apache/cxf/systest/jaxb/service/TestService.java
@@ -34,5 +34,8 @@ Widget getWidgetById(@WebParam(name = ""id"")
 
     @WebMethod
     void testExceptionMarshalling() throws TestServiceException;
+    
+    @WebMethod
+    String echo(String test) throws PropertyOrderException;
 
 }
diff --git a/systests/databinding/src/test/java/org/apache/cxf/systest/jaxb/service/TestServiceImpl.java b/systests/databinding/src/test/java/org/apache/cxf/systest/jaxb/service/TestServiceImpl.java
index 60f1395d67a..fca13d46074 100644
--- a/systests/databinding/src/test/java/org/apache/cxf/systest/jaxb/service/TestServiceImpl.java
+++ b/systests/databinding/src/test/java/org/apache/cxf/systest/jaxb/service/TestServiceImpl.java
@@ -19,6 +19,7 @@
 
 package org.apache.cxf.systest.jaxb.service;
 
+import javax.jws.WebMethod;
 import javax.jws.WebService;
 
 import org.apache.cxf.systest.jaxb.model.ExtendedWidget;
@@ -35,6 +36,22 @@ public void testExceptionMarshalling() throws TestServiceException {
         throw new TestServiceException(""Your hovercraft is full of eels."");
     }
 
+    @WebMethod
+    public String echo(String test) throws PropertyOrderException {
+        if (""Exception"".equalsIgnoreCase(test)) {
+            PropertyOrderException exception = new PropertyOrderException();
+            ErrorData ed = new ErrorData();
+            ed.setCode(500);
+            ed.setDescription(""Error happened"");
+            ed.setTitle(""Error title"");
+            exception.setData(ed);
+            exception.setMessage(""Exception message"");
+            throw exception;
+
+        }
+        return test;
+    }
+
 
 
 }


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","27/Aug/18 12:56;githubbot;jurakp opened a new pull request #438: [CXF-7823]:JAXBEncoderDecoder doesn't respect @XmlType's propOrder in Exception class
URL: https://github.com/apache/cxf/pull/438
 
 
   Backport of 354ab5e7eb63aef3f7b213cb9637acf8f9274305

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","27/Aug/18 14:56;githubbot;jurakp opened a new pull request #439: [CXF-7823]:JAXBEncoderDecoder doesn't respect @XmlType's propOrder in Exception class
URL: https://github.com/apache/cxf/pull/439
 
 
   Backport of commit 354ab5e

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","28/Aug/18 02:46;githubbot;jimma closed pull request #439: [CXF-7823]:JAXBEncoderDecoder doesn't respect @XmlType's propOrder in Exception class
URL: https://github.com/apache/cxf/pull/439
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBEncoderDecoder.java b/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBEncoderDecoder.java
index 05ca83cbb02..0b6136c5225 100644
--- a/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBEncoderDecoder.java
+++ b/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBEncoderDecoder.java
@@ -56,6 +56,7 @@
 import javax.xml.bind.annotation.XmlAccessType;
 import javax.xml.bind.annotation.XmlAccessorOrder;
 import javax.xml.bind.annotation.XmlAttribute;
+import javax.xml.bind.annotation.XmlType;
 import javax.xml.bind.annotation.adapters.HexBinaryAdapter;
 import javax.xml.bind.attachment.AttachmentMarshaller;
 import javax.xml.bind.attachment.AttachmentUnmarshaller;
@@ -428,7 +429,28 @@ public int compare(Member m1, Member m2) {
                     }
                 });
             }
-
+            XmlType xmlType = cls.getAnnotation(XmlType.class);
+            if (xmlType != null && xmlType.propOrder().length > 1 && !xmlType.propOrder()[0].isEmpty()) {
+                final List<String> orderList = Arrays.asList(xmlType.propOrder());
+                Collections.sort(combinedMembers, new Comparator<Member>() {
+                    public int compare(Member m1, Member m2) {
+                        String m1Name = getName(m1);
+                        String m2Name = getName(m2);
+                        int m1Index = orderList.indexOf(m1Name);
+                        int m2Index = orderList.indexOf(m2Name);
+                        if (m1Index != -1 && m2Index != -1) {
+                            return m1Index - m2Index;
+                        }
+                        if (m1Index == -1 && m2Index != -1) {
+                            return 1;
+                        }
+                        if (m1Index != -1 && m2Index == -1) {
+                            return -1;
+                        }
+                        return 0;
+                    }
+                });
+            }
             for (Member member : combinedMembers) {
                 if (member instanceof Field) {
                     Field f = (Field)member;
@@ -463,8 +485,20 @@ public int compare(Member m1, Member m2) {
             StaxUtils.close(writer);
         }
     }
-    
-    private static void writeArrayObject(Marshaller marshaller, 
+
+    private static String getName(Member m1) {
+        String m1Name = null;
+        if (m1 instanceof Field) {
+            m1Name = ((Field)m1).getName();
+        } else {
+            int idx = m1.getName().startsWith(""get"") ? 3 : 2;
+            String name = m1.getName().substring(idx);
+            m1Name = Character.toLowerCase(name.charAt(0)) + name.substring(1);
+        }
+        return m1Name;
+    }
+
+    private static void writeArrayObject(Marshaller marshaller,
                                          Object source,
                                          QName mname,
                                          Object mObj) throws Fault, JAXBException {
diff --git a/systests/databinding/pom.xml b/systests/databinding/pom.xml
index 361c2e0f1f4..823734faab8 100644
--- a/systests/databinding/pom.xml
+++ b/systests/databinding/pom.xml
@@ -184,6 +184,12 @@
             <artifactId>cxf-rt-transports-http</artifactId>
             <version>${project.version}</version>
         </dependency>
+        <dependency>
+            <groupId>org.apache.cxf</groupId>
+            <artifactId>cxf-rt-features-logging</artifactId>
+            <version>${project.version}</version>
+            <scope>test</scope>
+        </dependency>
         <dependency>
             <groupId>${cxf.servlet-api.group}</groupId>
             <artifactId>${cxf.servlet-api.artifact}</artifactId>
diff --git a/systests/databinding/src/test/java/org/apache/cxf/systest/jaxb/TestServiceTest.java b/systests/databinding/src/test/java/org/apache/cxf/systest/jaxb/TestServiceTest.java
index 8f780b65f44..97e023027b5 100644
--- a/systests/databinding/src/test/java/org/apache/cxf/systest/jaxb/TestServiceTest.java
+++ b/systests/databinding/src/test/java/org/apache/cxf/systest/jaxb/TestServiceTest.java
@@ -28,9 +28,13 @@
 
 import org.apache.cxf.Bus;
 import org.apache.cxf.endpoint.Server;
+import org.apache.cxf.ext.logging.LoggingOutInterceptor;
+import org.apache.cxf.ext.logging.event.LogEvent;
+import org.apache.cxf.ext.logging.event.LogEventSender;
 import org.apache.cxf.helpers.IOUtils;
 import org.apache.cxf.systest.jaxb.model.ExtendedWidget;
 import org.apache.cxf.systest.jaxb.model.Widget;
+import org.apache.cxf.systest.jaxb.service.PropertyOrderException;
 import org.apache.cxf.systest.jaxb.service.TestService;
 import org.apache.cxf.test.TestUtilities;
 import org.apache.cxf.testutil.common.TestUtil;
@@ -44,7 +48,7 @@
 @ContextConfiguration(locations = { ""classpath:extrajaxbclass.xml"" })
 public class TestServiceTest extends AbstractJUnit4SpringContextTests {
     static final String PORT = TestUtil.getPortNumber(TestServiceTest.class);
-
+    private static TestLoggingEventSender fault = new TestLoggingEventSender();
     private TestUtilities testUtilities;
 
     public TestServiceTest() {
@@ -73,7 +77,37 @@ public void testExtraSubClassWithJaxbFromEndpoint() throws Throwable {
         Assert.assertEquals(expected, widgetFromService);
     }
 
+    @Test
+    public void testExceptionPropertyOrder() throws Throwable {
+        ((Bus)applicationContext.getBean(""cxf"")).getOutFaultInterceptors().add(new LoggingOutInterceptor(fault));
+        TestService testClient = getTestClient();
+        ((BindingProvider)testClient).getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
+                                                              ""http://localhost:"" + PORT
+                                                                  + ""/service/TestEndpoint"");
+        try {
+            testClient.echo(""Exception"");
+        } catch (PropertyOrderException e) {
+            Assert.assertTrue(""Expect <message> element is before <data> element :"" + fault.getMessage(),
+                              fault.getMessage().indexOf(""</message><data"") > -1);
+        }
+    }
+
     
+    static class TestLoggingEventSender implements LogEventSender {
+        private String logMessage;
+
+        public String getMessage() {
+            return logMessage;
+        }
+        public void clearMessage() {
+            logMessage = null;
+        }
+        @Override
+        public void send(LogEvent event) {
+            logMessage = event.getPayload();
+        }
+    }
+
     @Test
     public void testSchema() throws Exception {
         URL url = new URL(""http://localhost:"" + PORT + ""/service/TestService?wsdl"");
diff --git a/systests/databinding/src/test/java/org/apache/cxf/systest/jaxb/service/ErrorData.java b/systests/databinding/src/test/java/org/apache/cxf/systest/jaxb/service/ErrorData.java
new file mode 100644
index 00000000000..5fe127f6ce4
--- /dev/null
+++ b/systests/databinding/src/test/java/org/apache/cxf/systest/jaxb/service/ErrorData.java
@@ -0,0 +1,62 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.cxf.systest.jaxb.service;
+
+import javax.xml.bind.annotation.XmlType;
+
+@XmlType(name = ""ErrorData"")
+public class ErrorData implements java.io.Serializable {
+    private static final long serialVersionUID = 1L;
+    private long code;
+    private String title;
+    private String description;
+
+    public ErrorData() {
+    }
+
+    public ErrorData(long code, String title, String description, String stack) {
+        this.code = code;
+        this.title = title;
+        this.description = description;
+    }
+
+    public long getCode() {
+        return code;
+    }
+
+    public void setCode(long code) {
+        this.code = code;
+    }
+
+    public String getTitle() {
+        return title;
+    }
+
+    public void setTitle(String title) {
+        this.title = title;
+    }
+
+    public String getDescription() {
+        return description;
+    }
+
+    public void setDescription(String description) {
+        this.description = description;
+    }
+}
diff --git a/systests/databinding/src/test/java/org/apache/cxf/systest/jaxb/service/PropertyOrderException.java b/systests/databinding/src/test/java/org/apache/cxf/systest/jaxb/service/PropertyOrderException.java
new file mode 100644
index 00000000000..61ee4ceac0e
--- /dev/null
+++ b/systests/databinding/src/test/java/org/apache/cxf/systest/jaxb/service/PropertyOrderException.java
@@ -0,0 +1,70 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.cxf.systest.jaxb.service;
+
+import javax.xml.bind.annotation.XmlElement;
+import javax.xml.bind.annotation.XmlRootElement;
+import javax.xml.bind.annotation.XmlType;
+
+@XmlRootElement(name = ""fault"")
+@XmlType(name = """", propOrder = {
+    ""message"", ""data""
+}, namespace = """")
+public class PropertyOrderException extends Exception implements java.io.Serializable {
+
+    private static final long serialVersionUID = 1L;
+
+    @XmlElement(name = ""message"", required = true, nillable = true)
+    private String message;
+
+    @XmlElement(name = ""data"", required = true, nillable = true)
+    private ErrorData data;
+
+    public PropertyOrderException() {
+        this.data = new ErrorData();
+        this.message = null;
+    }
+
+    public PropertyOrderException(ErrorData data) {
+        this.data = data;
+        this.message = null;
+    }
+
+    public PropertyOrderException(String message) {
+        this.data = null;
+        this.message = message;
+    }
+
+    public String getMessage() {
+        return this.message;
+    }
+
+    public ErrorData getData() {
+        return data;
+    }
+
+    public void setData(ErrorData data) {
+        this.data = data;
+    }
+
+    public void setMessage(String message) {
+        this.message = message;
+    }
+
+}
diff --git a/systests/databinding/src/test/java/org/apache/cxf/systest/jaxb/service/TestService.java b/systests/databinding/src/test/java/org/apache/cxf/systest/jaxb/service/TestService.java
index d104f63bc73..7ac2d02bec9 100644
--- a/systests/databinding/src/test/java/org/apache/cxf/systest/jaxb/service/TestService.java
+++ b/systests/databinding/src/test/java/org/apache/cxf/systest/jaxb/service/TestService.java
@@ -34,5 +34,8 @@ Widget getWidgetById(@WebParam(name = ""id"")
     
     @WebMethod
     void testExceptionMarshalling() throws TestServiceException;
+    
+    @WebMethod
+    String echo(String test) throws PropertyOrderException;
 
 }
diff --git a/systests/databinding/src/test/java/org/apache/cxf/systest/jaxb/service/TestServiceImpl.java b/systests/databinding/src/test/java/org/apache/cxf/systest/jaxb/service/TestServiceImpl.java
index 6ac42165886..99823b05971 100644
--- a/systests/databinding/src/test/java/org/apache/cxf/systest/jaxb/service/TestServiceImpl.java
+++ b/systests/databinding/src/test/java/org/apache/cxf/systest/jaxb/service/TestServiceImpl.java
@@ -19,6 +19,7 @@
 
 package org.apache.cxf.systest.jaxb.service;
 
+import javax.jws.WebMethod;
 import javax.jws.WebService;
 
 import org.apache.cxf.systest.jaxb.model.ExtendedWidget;
@@ -35,6 +36,20 @@ public void testExceptionMarshalling() throws TestServiceException {
         throw new TestServiceException(""Your hovercraft is full of eels."");
     }
 
-    
+    @WebMethod
+    public String echo(String test) throws PropertyOrderException {
+        if (""Exception"".equalsIgnoreCase(test)) {
+            PropertyOrderException exception = new PropertyOrderException();
+            ErrorData ed = new ErrorData();
+            ed.setCode(500);
+            ed.setDescription(""Error happened"");
+            ed.setTitle(""Error title"");
+            exception.setData(ed);
+            exception.setMessage(""Exception message"");
+            throw exception;
+
+        }
+        return test;
+    }
 
 }


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","28/Aug/18 02:47;githubbot;jimma closed pull request #438: [CXF-7823]:JAXBEncoderDecoder doesn't respect @XmlType's propOrder in Exception class
URL: https://github.com/apache/cxf/pull/438
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBEncoderDecoder.java b/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBEncoderDecoder.java
index 1e6ec2799b9..15d476df7a6 100644
--- a/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBEncoderDecoder.java
+++ b/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBEncoderDecoder.java
@@ -56,6 +56,7 @@
 import javax.xml.bind.annotation.XmlAccessType;
 import javax.xml.bind.annotation.XmlAccessorOrder;
 import javax.xml.bind.annotation.XmlAttribute;
+import javax.xml.bind.annotation.XmlType;
 import javax.xml.bind.annotation.adapters.HexBinaryAdapter;
 import javax.xml.bind.attachment.AttachmentMarshaller;
 import javax.xml.bind.attachment.AttachmentUnmarshaller;
@@ -425,7 +426,28 @@ public int compare(Member m1, Member m2) {
                     }
                 });
             }
-
+            XmlType xmlType = cls.getAnnotation(XmlType.class);
+            if (xmlType != null && xmlType.propOrder().length > 1 && !xmlType.propOrder()[0].isEmpty()) {
+                final List<String> orderList = Arrays.asList(xmlType.propOrder());
+                Collections.sort(combinedMembers, new Comparator<Member>() {
+                    public int compare(Member m1, Member m2) {
+                        String m1Name = getName(m1);
+                        String m2Name = getName(m2);
+                        int m1Index = orderList.indexOf(m1Name);
+                        int m2Index = orderList.indexOf(m2Name);
+                        if (m1Index != -1 && m2Index != -1) {
+                            return m1Index - m2Index;
+                        }
+                        if (m1Index == -1 && m2Index != -1) {
+                            return 1;
+                        }
+                        if (m1Index != -1 && m2Index == -1) {
+                            return -1;
+                        }
+                        return 0;
+                    }
+                });
+            }
             for (Member member : combinedMembers) {
                 if (member instanceof Field) {
                     Field f = (Field)member;
@@ -461,6 +483,17 @@ public int compare(Member m1, Member m2) {
         }
     }
 
+    private static String getName(Member m1) {
+        String m1Name = null;
+        if (m1 instanceof Field) {
+            m1Name = ((Field)m1).getName();
+        } else {
+            int idx = m1.getName().startsWith(""get"") ? 3 : 2;
+            String name = m1.getName().substring(idx);
+            m1Name = Character.toLowerCase(name.charAt(0)) + name.substring(1);
+        }
+        return m1Name;
+    }
     private static void writeArrayObject(Marshaller marshaller,
                                          Object source,
                                          QName mname,
diff --git a/systests/databinding/src/test/java/org/apache/cxf/systest/jaxb/TestServiceTest.java b/systests/databinding/src/test/java/org/apache/cxf/systest/jaxb/TestServiceTest.java
index a78ca348e11..e2d43da10d4 100644
--- a/systests/databinding/src/test/java/org/apache/cxf/systest/jaxb/TestServiceTest.java
+++ b/systests/databinding/src/test/java/org/apache/cxf/systest/jaxb/TestServiceTest.java
@@ -28,9 +28,13 @@
 
 import org.apache.cxf.Bus;
 import org.apache.cxf.endpoint.Server;
+import org.apache.cxf.ext.logging.LoggingOutInterceptor;
+import org.apache.cxf.ext.logging.event.LogEvent;
+import org.apache.cxf.ext.logging.event.LogEventSender;
 import org.apache.cxf.helpers.IOUtils;
 import org.apache.cxf.systest.jaxb.model.ExtendedWidget;
 import org.apache.cxf.systest.jaxb.model.Widget;
+import org.apache.cxf.systest.jaxb.service.PropertyOrderException;
 import org.apache.cxf.systest.jaxb.service.TestService;
 import org.apache.cxf.test.TestUtilities;
 import org.apache.cxf.testutil.common.TestUtil;
@@ -44,7 +48,7 @@
 @ContextConfiguration(locations = { ""classpath:extrajaxbclass.xml"" })
 public class TestServiceTest extends AbstractJUnit4SpringContextTests {
     static final String PORT = TestUtil.getPortNumber(TestServiceTest.class);
-
+    private static TestLoggingEventSender fault = new TestLoggingEventSender();
     private TestUtilities testUtilities;
 
     public TestServiceTest() {
@@ -73,7 +77,37 @@ public void testExtraSubClassWithJaxbFromEndpoint() throws Throwable {
         Assert.assertEquals(expected, widgetFromService);
     }
 
+    @Test
+    public void testExceptionPropertyOrder() throws Throwable {
+        ((Bus)applicationContext.getBean(""cxf"")).getOutFaultInterceptors().add(new LoggingOutInterceptor(fault));
+        TestService testClient = getTestClient();
+        ((BindingProvider)testClient).getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
+                                                              ""http://localhost:"" + PORT
+                                                                  + ""/service/TestEndpoint"");
+        try {
+            testClient.echo(""Exception"");
+        } catch (PropertyOrderException e) {
+            Assert.assertTrue(""Expect <message> element is before <data> element :"" + fault.getMessage(),
+                              fault.getMessage().indexOf(""</message><data"") > -1);
+        }
+    }
 
+    
+    static class TestLoggingEventSender implements LogEventSender {
+        private String logMessage;
+
+        public String getMessage() {
+            return logMessage;
+        }
+        public void clearMessage() {
+            logMessage = null;
+        }
+        @Override
+        public void send(LogEvent event) {
+            logMessage = event.getPayload();
+        }
+    }
+    
     @Test
     public void testSchema() throws Exception {
         URL url = new URL(""http://localhost:"" + PORT + ""/service/TestService?wsdl"");
diff --git a/systests/databinding/src/test/java/org/apache/cxf/systest/jaxb/service/ErrorData.java b/systests/databinding/src/test/java/org/apache/cxf/systest/jaxb/service/ErrorData.java
new file mode 100644
index 00000000000..5fe127f6ce4
--- /dev/null
+++ b/systests/databinding/src/test/java/org/apache/cxf/systest/jaxb/service/ErrorData.java
@@ -0,0 +1,62 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.cxf.systest.jaxb.service;
+
+import javax.xml.bind.annotation.XmlType;
+
+@XmlType(name = ""ErrorData"")
+public class ErrorData implements java.io.Serializable {
+    private static final long serialVersionUID = 1L;
+    private long code;
+    private String title;
+    private String description;
+
+    public ErrorData() {
+    }
+
+    public ErrorData(long code, String title, String description, String stack) {
+        this.code = code;
+        this.title = title;
+        this.description = description;
+    }
+
+    public long getCode() {
+        return code;
+    }
+
+    public void setCode(long code) {
+        this.code = code;
+    }
+
+    public String getTitle() {
+        return title;
+    }
+
+    public void setTitle(String title) {
+        this.title = title;
+    }
+
+    public String getDescription() {
+        return description;
+    }
+
+    public void setDescription(String description) {
+        this.description = description;
+    }
+}
diff --git a/systests/databinding/src/test/java/org/apache/cxf/systest/jaxb/service/PropertyOrderException.java b/systests/databinding/src/test/java/org/apache/cxf/systest/jaxb/service/PropertyOrderException.java
new file mode 100644
index 00000000000..61ee4ceac0e
--- /dev/null
+++ b/systests/databinding/src/test/java/org/apache/cxf/systest/jaxb/service/PropertyOrderException.java
@@ -0,0 +1,70 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.cxf.systest.jaxb.service;
+
+import javax.xml.bind.annotation.XmlElement;
+import javax.xml.bind.annotation.XmlRootElement;
+import javax.xml.bind.annotation.XmlType;
+
+@XmlRootElement(name = ""fault"")
+@XmlType(name = """", propOrder = {
+    ""message"", ""data""
+}, namespace = """")
+public class PropertyOrderException extends Exception implements java.io.Serializable {
+
+    private static final long serialVersionUID = 1L;
+
+    @XmlElement(name = ""message"", required = true, nillable = true)
+    private String message;
+
+    @XmlElement(name = ""data"", required = true, nillable = true)
+    private ErrorData data;
+
+    public PropertyOrderException() {
+        this.data = new ErrorData();
+        this.message = null;
+    }
+
+    public PropertyOrderException(ErrorData data) {
+        this.data = data;
+        this.message = null;
+    }
+
+    public PropertyOrderException(String message) {
+        this.data = null;
+        this.message = message;
+    }
+
+    public String getMessage() {
+        return this.message;
+    }
+
+    public ErrorData getData() {
+        return data;
+    }
+
+    public void setData(ErrorData data) {
+        this.data = data;
+    }
+
+    public void setMessage(String message) {
+        this.message = message;
+    }
+
+}
diff --git a/systests/databinding/src/test/java/org/apache/cxf/systest/jaxb/service/TestService.java b/systests/databinding/src/test/java/org/apache/cxf/systest/jaxb/service/TestService.java
index 4eef3c25d13..1977e93037d 100644
--- a/systests/databinding/src/test/java/org/apache/cxf/systest/jaxb/service/TestService.java
+++ b/systests/databinding/src/test/java/org/apache/cxf/systest/jaxb/service/TestService.java
@@ -34,5 +34,8 @@ Widget getWidgetById(@WebParam(name = ""id"")
 
     @WebMethod
     void testExceptionMarshalling() throws TestServiceException;
+    
+    @WebMethod
+    String echo(String test) throws PropertyOrderException;
 
 }
diff --git a/systests/databinding/src/test/java/org/apache/cxf/systest/jaxb/service/TestServiceImpl.java b/systests/databinding/src/test/java/org/apache/cxf/systest/jaxb/service/TestServiceImpl.java
index 60f1395d67a..fca13d46074 100644
--- a/systests/databinding/src/test/java/org/apache/cxf/systest/jaxb/service/TestServiceImpl.java
+++ b/systests/databinding/src/test/java/org/apache/cxf/systest/jaxb/service/TestServiceImpl.java
@@ -19,6 +19,7 @@
 
 package org.apache.cxf.systest.jaxb.service;
 
+import javax.jws.WebMethod;
 import javax.jws.WebService;
 
 import org.apache.cxf.systest.jaxb.model.ExtendedWidget;
@@ -35,6 +36,22 @@ public void testExceptionMarshalling() throws TestServiceException {
         throw new TestServiceException(""Your hovercraft is full of eels."");
     }
 
+    @WebMethod
+    public String echo(String test) throws PropertyOrderException {
+        if (""Exception"".equalsIgnoreCase(test)) {
+            PropertyOrderException exception = new PropertyOrderException();
+            ErrorData ed = new ErrorData();
+            ed.setCode(500);
+            ed.setDescription(""Error happened"");
+            ed.setTitle(""Error title"");
+            exception.setData(ed);
+            exception.setMessage(""Exception message"");
+            throw exception;
+
+        }
+        return test;
+    }
+
 
 
 }


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
",,,,,,,,,,,,,,,,,,,,,,
CXF BOM (cxf-parent) references non existing artifact (io.netty:netty:4.x),CXF-7820,13178845,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,coheigea,erikgb,erikgb,14/Aug/18 12:57,30/Oct/18 10:05,14/Mar/19 02:31,14/Aug/18 19:23,3.2.5,3.2.6,,3.2.7,,,,,,0,maven,,,,"The cxf parent (cxf-parent) includes dependency management for io.netty:netty. This artifact was moved/relocated to io.netty:netty-all in version 4 of Netty. So the io.netty:netty artifact does not exist in version > 4. Still the dependency management entry refers to the version property cxf.netty.version, with version > 4.

This bug makes cxf-parent invalid as a BOM (ref CXF-7750).

I see two potential solutions to this:
 # Delete the dependency management for io.netty:netty
 # Change version of io.netty:netty to the version property cxf.netty3.version",,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-08-14 16:28:00.925,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Tue Aug 14 16:28:00 UTC 2018,,,,,,0|i3x12f:,9223372036854775807,,,,,,,,14/Aug/18 16:28;coheigea;Good spot - I'll change the version to cxf.netty3.version.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Deal with java.security.acl classes being removed in Java 12,CXF-7815,13178002,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,ffang,asoldano,asoldano,09/Aug/18 13:46,08/Nov/18 11:18,14/Mar/19 02:31,08/Nov/18 11:18,3.2.5,,,3.3.0,,,,,,0,,,,,"[https://bugs.openjdk.java.net/browse/JDK-8191138]

 

The deprecated java.security.acl classes are being removed in 12. We should be prepared for that.",,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-10-31 11:29:03.605,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Thu Nov 08 11:18:13 UTC 2018,,,,,,0|i3wvvb:,9223372036854775807,,,,,,,,"31/Oct/18 11:29;coheigea;Hi [~ffang],

I think we should add checks in DefaultSecurityContext and AbstractSecurityContextInInterceptor for java.security.acl.Group via reflection. Otherwise, login won't work with say an older version of Karaf that uses java.security.acl.Group instead. I wonder if we should also add a check for the Karaf Group interface again via reflection? If we don't then we are breaking backwards compatibility, as CXF + Karaf would work by default using java.security.acl.Group.

Colm.","01/Nov/18 03:41;ffang;[~coheigea],

Good catch, on it!

Freeman","01/Nov/18 07:25;ffang;fixed by
https://github.com/apache/cxf/commit/2566c8ff08e0b237d18c97bc919d32628eaa39ea","05/Nov/18 12:15;coheigea;Thanks Freeman! Just a minor improvement suggestion - we have multiple calls along the lines of:

member instanceof GroupPrincipal
                    || instanceOf(member, ""java.security.acl.Group"")
                    || instanceOf(member, ""org.apache.karaf.jaas.boot.principal.Group"")

 

Instead we could have a static method that encapsulates this ""isGroupPrincipal or something"" (and that also could be called from AbstractSecurityContextInInterceptor)",07/Nov/18 22:30;sean.mullan@oracle.com;We have deferred the removal of the java.security.acl APIs to JDK 13.,"08/Nov/18 00:30;ffang;[~sean.mullan@oracle.com] 

Thanks for the info.

[~coheigea]

Yup, will revise accordingly.","08/Nov/18 02:04;ffang;revised here
https://github.com/apache/cxf/commit/d89aa0baafba3d0433be054d45606e223479b620",08/Nov/18 11:18;coheigea;[~ffang] thanks,,,,,,,,,,,,,,,,,,,,,,
_wadl links missing in OSGi containers,CXF-7811,13177153,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,dkulp,dkulp,06/Aug/18 16:17,07/Aug/18 17:00,14/Mar/19 02:31,07/Aug/18 17:00,3.2.5,,,3.2.6,,,JAX-RS,,,0,,,,,"
When run in OSGi, the services list is missing the _wadl links.   The _wadl URL's also don't work anymore. They worked in previous versions of CXF",,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,2018-08-06 16:17:25.0,,,,,,0|i3wqmn:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Transform feature outDropElements has no effect,CXF-7805,13173487,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,coheigea,framecounter,framecounter,20/Jul/18 16:07,03/Oct/18 13:33,14/Mar/19 02:31,25/Jul/18 11:25,3.2.5,,,3.1.17,3.2.6,,Configuration,,,0,features,outDropElements,transform,,"We're running CXF 3.2.5 web services in Tomcat, java-first-approach.

For compatibility with older clients, we'd like to remove some elements from the response using the transform feature. We'd prefer to do this via configuration, so the feature can be easily removed once all clients have upgraded.

We put the configuration - jaxws:feature and beans - in WEB-INF/classes/CXF/beans.xml, referenced throug web.xml. Any other way - via cxf.xml, be it on classpath or referenced per JVM parameter - failed to find the bean defintion. Introducing errors in the bean definition leads to corresponding errors, so the bean is recognized, but the configuration has no effect on the outbound XML. We also tried addressing the elements with and without namespace, full paths, shallow and deep drop, and the XSLT feature, too, but to no avail.

We suspect this might still be a configuration issue or some peculiar constellation we fail to recognize, but we are at out wit's end finding the real cause of it.

Attached you find a Maven test project, stripped down to the one web service with the one method in question, and exported from Eclipse after running maven --clean. The pom contains all dependencies of the original project. There is no test case, we simply used SOAPUI which worked fine. The archive also contains the WSDL file copied from the source view of the browser.

TIA,

Michael","Java 8

Tomcat 8.5

Eclipse 4.3

CXF 3.2.5

Windows 7 Professional",,,,,,,,,,,,,,,,,,,,24/Jul/18 07:28;framecounter;cxfOutDropElements-2.zip;https://issues.apache.org/jira/secure/attachment/12932851/cxfOutDropElements-2.zip,20/Jul/18 16:02;framecounter;cxfOutDropElements.zip;https://issues.apache.org/jira/secure/attachment/12932430/cxfOutDropElements.zip,24/Jul/18 07:30;framecounter;eingangsdb-eks-2.0.jar;https://issues.apache.org/jira/secure/attachment/12932852/eingangsdb-eks-2.0.jar,3.0,,,,,,,,,,,,,,,,,,,2018-07-23 10:05:24.168,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Wed Jul 25 10:31:46 UTC 2018,,,,,,0|i3w4b3:,9223372036854775807,,,,,,,,"23/Jul/18 10:05;coheigea;I can't run the project:

""Failure to find de.destatis.idb:eingangsdb-eks:jar:2.0 in https://repo.maven.apache.org/maven2""","23/Jul/18 10:20;framecounter;My apologies, this is a local dependency I forgot about. It is not needed in the test case, just remove it from the pom.","23/Jul/18 10:22;coheigea;It is needed, there is a compilation error otherwise.","23/Jul/18 11:25;framecounter;Apologies again, strucks me as strange as I removed the dependency and made a maven update before sending my comment. I'll take care of it tomorrow as I'm already out of the office.","24/Jul/18 07:34;framecounter;Beats me, no compilation errors here, maven update and install run flawlessly without the dependency, I also searched the java files for any references, with zero results. I've uploaded the project as it compiles here plus the missing jar. Which classes suffer compilation errors?","24/Jul/18 09:52;coheigea;On mvn clean install I get:

 

Compilation failure: 
[ERROR] /home/colm/Desktop/tmp/cxfOutDropElements/src/main/java/de/destatis/idb/server/lifecycle/IDBContext.java:[8,21] package javax.servlet does not exist
[ERROR] /home/colm/Desktop/tmp/cxfOutDropElements/src/main/java/de/destatis/idb/server/lifecycle/IDBContext.java:[9,21] package javax.servlet does not exist
[ERROR] /home/colm/Desktop/tmp/cxfOutDropElements/src/main/java/de/destatis/idb/server/lifecycle/IDBContext.java:[10,21] package javax.servlet does not exist
[ERROR] /home/colm/Desktop/tmp/cxfOutDropElements/src/main/java/de/destatis/idb/server/lifecycle/IDBContext.java:[23,36] cannot find symbol
[ERROR]   symbol: class ServletContextListener
[ERROR] /home/colm/Desktop/tmp/cxfOutDropElements/src/main/java/de/destatis/idb/server/lifecycle/IDBContext.java:[26,17] cannot find symbol
[ERROR]   symbol:   class ServletContext
[ERROR]   location: class de.destatis.idb.server.lifecycle.IDBContext
[ERROR] /home/colm/Desktop/tmp/cxfOutDropElements/src/main/java/de/destatis/idb/server/lifecycle/IDBContext.java:[33,38] cannot find symbol
[ERROR]   symbol:   class ServletContextEvent
[ERROR]   location: class de.destatis.idb.server.lifecycle.IDBContext
[ERROR] /home/colm/Desktop/tmp/cxfOutDropElements/src/main/java/de/destatis/idb/server/lifecycle/IDBContext.java:[41,40] cannot find symbol
[ERROR]   symbol:   class ServletContextEvent
[ERROR]   location: class de.destatis.idb.server.lifecycle.IDBContext
[ERROR] /home/colm/Desktop/tmp/cxfOutDropElements/src/main/java/de/destatis/idb/server/lifecycle/IDBContext.java:[48,69] cannot find symbol
[ERROR]   symbol:   class ServletContextEvent
[ERROR]   location: class de.destatis.idb.server.lifecycle.IDBContext
[ERROR] /home/colm/Desktop/tmp/cxfOutDropElements/src/main/java/de/destatis/idb/server/lifecycle/IDBContext.java:[69,43] cannot find symbol
[ERROR]   symbol:   class ServletContextEvent
[ERROR]   location: class de.destatis.idb.server.lifecycle.IDBContext
[ERROR] /home/colm/Desktop/tmp/cxfOutDropElements/src/main/java/de/destatis/idb/server/lifecycle/IDBContext.java:[146,61] cannot find symbol
[ERROR]   symbol:   class ServletContext
[ERROR]   location: class de.destatis.idb.server.lifecycle.IDBContext.IDBLifeCycle
[ERROR] /home/colm/Desktop/tmp/cxfOutDropElements/src/main/java/de/destatis/idb/server/lifecycle/IDBContext.java:[156,34] cannot find symbol
[ERROR]   symbol:   class ServletContext
[ERROR]   location: class de.destatis.idb.server.lifecycle.IDBContext.IDBLifeCycle
[ERROR] /home/colm/Desktop/tmp/cxfOutDropElements/src/main/java/de/destatis/idb/server/lifecycle/IDBContext.java:[32,9] method does not override or implement a method from a supertype
[ERROR] /home/colm/Desktop/tmp/cxfOutDropElements/src/main/java/de/destatis/idb/server/lifecycle/IDBContext.java:[40,9] method does not override or implement a method from a supertype
[ERROR] -> [Help 1]","24/Jul/18 10:16;framecounter;This package is typically in servlet-api.jar in Tomcat's lib directory. In Eclipse, it is resolved when Tomcat is bound in the build path.",24/Jul/18 14:05;coheigea;OK I can confirm the issue..looking into it.,"24/Jul/18 16:33;coheigea;The problem is that the outputstream optimization must be disabled explicitly to use the outbound transformation feature on the service side. So add the following to your spring configuration:

<jaxws:properties>
        <entry key=""disable.outputstream.optimization"" value=""true""/>
</jaxws:properties>

I am going to look into changing this by default.","25/Jul/18 09:55;framecounter;Works like a charm now! I suggest to include this information on the [documentation page|[http://cxf.apache.org/docs/transformationfeature.html]]. I'd be happy to do this if you think it's worth the effort of my registering as a contributor/editor.

Meanwhile I've found a way to put the definition of the transform feature bean in an cxf.xml file external to the deployed application by putting the respective folder on the classpath. The endpoint definitions shall remain internal and reside in in WEB-INF/classes/cxf.xml which is exactly the META-INF/cxf/beans.xml I used originally. However, there are still effects I fail to grasp such as when I move WEB-INF/classes/cxf.xml to META-INF/cxf/cxf.xml, no service is created, also on startup CXF logs that it scans all those locations for bean definitions. Also, -Dcxf.config.file.url still doesn't work.

It would be great if you could look into that, I'd also open another Jira or provide a new test case if you think that's better. I would also debug into it, but I'm afraid I cannot spare the time, at least no so soon.

Many thanks for the great help!","25/Jul/18 10:31;coheigea;Great, I've merged a fix so that in the future people won't run into this problem. In the meantime I'll update the docs myself.

Yes please open a separate Jira for the configuration issue - giving a test-case if possible and the information to reproduce the problem and I'll take a look when I get a chance.",,,,,,,,,,,,,,,,,,,
SSE SseBroadcaster implementation not performing onClose / onError callbacks,CXF-7804,13173431,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,reta,LWysocki,LWysocki,20/Jul/18 11:09,23/Jul/18 22:38,14/Mar/19 02:31,23/Jul/18 22:38,3.2.5,,,3.2.6,3.3.0,,JAX-RS,,,0,,,,,"The class {{org.apache.cxf.jaxrs.sse.SseBroadcasterImpl}} does not uphold the contract stated in {{javax.ws.rs.sse.SseBroadcaster}} interface.

The registered {{onError}} and {{onClose}} callbacks are not called when {{SseEventSink}} is closed or there is an communication error/timeout.

It seems the problem can be pinpointed to anonymous implementation of {{AsyncListener}} registered in {{AsyncContext}} from {{SseBroadcasterImpl.register}} method (GitHub link [HERE|https://github.com/apache/cxf/blob/8eab54c2a285ac91b0a04b8cd7e899d45f15b73a/rt/rs/sse/src/main/java/org/apache/cxf/jaxrs/sse/SseBroadcasterImpl.java#L55]).
Seems like extending the {{onComplete}} and {{onTimeout}}/{{onError}} methods to do additional calls to {{closers.forEach}} and {{exceptioners.forEach}} might solve this.",,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-07-20 13:15:02.594,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Fri Jul 20 13:15:02 UTC 2018,,,,,,0|i3w3yn:,9223372036854775807,,,,,,,,"20/Jul/18 13:15;reta;That's true, went missing during the refactorings, thanjs [~LWysocki]!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
URI query parameter without value causing crash,CXF-7802,13172990,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,coheigea,tiguchi,tiguchi,18/Jul/18 18:19,23/Jul/18 14:10,14/Mar/19 02:31,23/Jul/18 14:10,3.2.5,,,3.2.6,,,JAX-RS,,,0,,,,,"h2. Problem

When sending a request with a mapped query parameter name without value Apache CXF crashes with an IllegalArgumentException when the endpoint method gets invoked. This happens with primitive type endpoint method arguments mapped to a query parameter.
h2. Example Code

 
{code:java}
@GET
@Produces(MediaType.APPLICATION_JSON)
@Path(""/admin/roles"")
public Stream<Role> searchRoles(@QueryParam(""search"") String search, @QueryParam(""page"") @DefaultValue(""1"") int page, @QueryParam(""limit"") @DefaultValue(""30"") short limit) throws SqlException {
    ...do something...
}
{code}
 
h2. Web Request

Following request containing the query parameter without value triggers the exception

 
{code:java}
GET /admin/roles?page {code}
 
h2. Exception 
{code:java}
java.lang.IllegalArgumentException: null
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.apache.cxf.service.invoker.AbstractInvoker.performInvocation(AbstractInvoker.java:179)
at org.apache.cxf.service.invoker.AbstractInvoker.invoke(AbstractInvoker.java:96)
at org.apache.cxf.jaxrs.validation.JAXRSBeanValidationInvoker.invoke(JAXRSBeanValidationInvoker.java:51)
at org.apache.cxf.jaxrs.JAXRSInvoker.invoke(JAXRSInvoker.java:192)
at org.apache.cxf.jaxrs.JAXRSInvoker.invoke(JAXRSInvoker.java:103)
at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:59)
at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:96)
at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:308)
at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:121)
at org.apache.cxf.transport.http.AbstractHTTPDestination.invoke(AbstractHTTPDestination.java:267)
at org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:234)
at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:208)
at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:160)
at org.apache.cxf.transport.servlet.CXFNonSpringServlet.invoke(CXFNonSpringServlet.java:216)
at org.apache.cxf.transport.servlet.AbstractHTTPServlet.handleRequest(AbstractHTTPServlet.java:301)
at org.apache.cxf.transport.servlet.AbstractHTTPServlet.doGet(AbstractHTTPServlet.java:225)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
at org.apache.cxf.transport.servlet.AbstractHTTPServlet.service(AbstractHTTPServlet.java:276)
at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502)
at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:651)
at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:417)
at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:754)
at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1376)
at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)
at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
at java.base/java.lang.Thread.run(Thread.java:844)
{code}
h2. Expected Behavior

I'm not sure what the JAX-RS standard says but I would assume that the @DefaultValue annotation should be taken into account for such a scenario when a query parameter without value is passed in. At least the request router should not crash with an IllegalArgumentException and use the Java default value for primitive types instead of trying to assign null.

 

My main problem is that @DefaultValue seems to be ignored when such a request is passed in. This is evident when the argument type is an object type such as String. Instead of using the declared default value the request router passes in null instead.

The default value only appears to be evaluated if the query parameter name is undefined in the URI query parameters string. 

 ","Mac OS X 10.13.6 (17G65)

Tomcat 9.0.4

JDK 8",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-07-19 02:40:07.89,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Thu Jul 19 02:40:07 UTC 2018,,,,,,0|i3w19b:,9223372036854775807,,,,,,,,"19/Jul/18 02:40;reta;Thanks [~tiguchi], it seems like from the URI spec (RFC-3986, more specifically [https://tools.ietf.org/html/rfc3986#section-5.1|https://tools.ietf.org/html/rfc3986#section-5.1),]) this is a valid query string, I think the default value should apply here though it is pretty rare case I believe.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Query parameters are not handled properly when WebSocket transport is used,CXF-7799,13172708,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,reta,Alexander.Onnikov,Alexander.Onnikov,17/Jul/18 16:41,03/Oct/18 13:33,14/Mar/19 02:31,18/Jul/18 20:20,3.2.5,,,3.1.17,3.2.6,3.3.0,JAX-RS,Transports,,0,,,,,"I'm trying to pass query parameters to REST endpoint over Websocket transport. I expect the passed parameters to come as query string but instead of this I receive them in the path.

I suppose that there is an issue with Atmosphere that causes it not to pass query parameters to AtmosphereRequest.

 

Request example ([JAX-RS WebSocket Demo|https://github.com/apache/cxf/tree/master/distribution/src/main/release/samples/jax_rs/websocket]):

GET /demo/customerservice/customers/123?param=value

Expected: ""123"" is passed as a path parameter value

Actual: value is ""123?param=value""",,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-07-17 23:11:32.136,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Wed Jul 18 19:46:28 UTC 2018,,,,,,0|i3vzin:,9223372036854775807,,,,,,,,"17/Jul/18 23:11;reta;Confirming a bug in the `DefaultProtocolInterceptor` (CXF side), which treats query string as request URI (without splitting it), thanks [~Alexander.Onnikov]","18/Jul/18 10:22;githubbot;aonnikov opened a new pull request #430: [CXF-7799] Extract queryString from AtmosphereRequest path
URL: https://github.com/apache/cxf/pull/430
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","18/Jul/18 19:46;githubbot;reta closed pull request #430: [CXF-7799] Extract queryString from AtmosphereRequest path
URL: https://github.com/apache/cxf/pull/430
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/rt/transports/websocket/src/main/java/org/apache/cxf/transport/websocket/atmosphere/DefaultProtocolInterceptor.java b/rt/transports/websocket/src/main/java/org/apache/cxf/transport/websocket/atmosphere/DefaultProtocolInterceptor.java
index 3c6ffff280d..ae35901a4b3 100644
--- a/rt/transports/websocket/src/main/java/org/apache/cxf/transport/websocket/atmosphere/DefaultProtocolInterceptor.java
+++ b/rt/transports/websocket/src/main/java/org/apache/cxf/transport/websocket/atmosphere/DefaultProtocolInterceptor.java
@@ -269,6 +269,13 @@ protected AtmosphereRequest createAtmosphereRequest(AtmosphereRequest r, byte[]
             throw new InvalidPathException();
         }
 
+        String queryString = """";
+        int index = path.indexOf(""?"");
+        if (index != -1) {
+            queryString = path.substring(index + 1);
+            path = path.substring(0, index);
+        }
+
         String requestURI = path;
         String requestURL = r.getRequestURL() + requestURI.substring(r.getRequestURI().length());
         String contentType = hdrs.get(""Content-Type"");
@@ -280,6 +287,7 @@ protected AtmosphereRequest createAtmosphereRequest(AtmosphereRequest r, byte[]
                 .method(method)
                 .requestURI(requestURI)
                 .requestURL(requestURL)
+                .queryString(queryString)
                 .request(r);
         // add the body only if it is present
         byte[] body = WebSocketUtils.readBody(in);


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
",,,,,,,,,,,,,,,,,,,,,,,,,,,
Mapping of SOAP Faults in Asynchronous JAX-WS Client,CXF-7798,13172703,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,gino,gino,17/Jul/18 16:04,23/Jul/18 23:33,14/Mar/19 02:31,23/Jul/18 23:33,3.2.5,,,3.2.6,3.3.0,,JAX-WS Runtime,,,0,,,,,"When a SOAP fault is received, asynchronous JAX-WS client throws {{ExecutionException}} with a CXF-specific {{SoapFault}} as its cause:

{code:java}
Caused by: java.util.concurrent.ExecutionException: org.apache.cxf.binding.soap.SoapFault: ...
	at org.apache.cxf.endpoint.ClientCallback.get(ClientCallback.java:147)
	at org.apache.cxf.jaxws.JaxwsResponseCallback.get(JaxwsResponseCallback.java:49)
	...
{code}

Instead, the cause of {{ExecutionException}} is supposed to contain an instance of {{javax.xml.ws.soap.SOAPFaultException}} in this case, as the mapping should be identical for both asynchronous and synchronous cases.

Steps to reproduce:
# Create and publish a service:
TestService.java:
{code:java}
package test;

import javax.jws.WebMethod;
import javax.jws.WebService;

@WebService
public interface TestService {
    @WebMethod
    void test();
}
{code}
TestServiceImpl.java:
{code:java}
package test;

import javax.jws.WebService;
import javax.xml.ws.Endpoint;

@WebService(endpointInterface = ""test.TestService"")
public class TestServiceImpl implements TestService {
    @Override
    public void test() {
        throw new IllegalArgumentException(""test"");
    }

    public static void main(String[] args) {
        Endpoint.publish(""http://localhost:8888/service/test"", new TestServiceImpl());
    }
}
{code}
# Generate a client:
{code}
wsimport -b bindings.xml -keep http://localhost:8888/service/test?wsdl
{code}
bindings.xml:
{code:xml}
<bindings xmlns:wsdl=""http://schemas.xmlsoap.org/wsdl/""
          xmlns=""http://java.sun.com/xml/ns/jaxws"">

  <bindings node=""wsdl:definitions/wsdl:portType[@name='TestService']/wsdl:operation[@name='test']"">
    <enableAsyncMapping>true</enableAsyncMapping>
  </bindings>

</bindings>
{code}
# Use the service:
{code:java}
        try {
            testService.test();

        } catch (SOAPFaultException e) {
            System.out.println(""good"");
        }

        try {
            testService.testAsync().get();

        } catch (ExecutionException e) {
            if (e.getCause() instanceof SOAPFaultException) {
                System.out.println(""good"");

            } else {
                System.out.println(""bad"");  // fails with CXF
            }
        }
{code}",,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-07-23 10:14:12.347,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Mon Jul 23 14:43:22 UTC 2018,,,,,,0|i3vzhj:,9223372036854775807,,,,,,,,23/Jul/18 10:14;coheigea;Could you put together a test-case or sample to reproduce the problem?,23/Jul/18 14:43;gino;Sure - see the updated description.,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Client session context is null before SSL context initialization,CXF-7782,13170219,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,coheigea,Oliver Knerr,Oliver Knerr,05/Jul/18 09:31,03/Oct/18 13:33,14/Mar/19 02:31,05/Jul/18 16:51,3.2.5,,,3.1.17,3.2.6,,Transports,,,0,easyfix,,,,"We are going to replace the default (Sun) JSSE provider with the one from BouncyCastle and are running into a {{NullPointerException}} when getting the {{SSLSessionContext}} from the {{SSLContext}}.

The problem occurs in

{{org.apache.cxf.transport.https.SSLUtils.getSSLContext(TLSParameterBase):73}}

when trying to set the timeout for the SSL session.

The javadoc of

{{javax.net.ssl.SSLContext.getClientSessionContext()}}

states that ""[the client session context] may be unavailable in some environments, in which case this method returns null. [...]""

Apparently, this is (in general) not the case for the SunJSSE provider, but the BCJSSE provider needs the {{SSLContext}} to be initialized before the client session context is available. So after the call of

{{javax.net.ssl.SSLContext.init(KeyManager[], TrustManager[], SecureRandom)}}

which happens further below (line 87), the client session context is not null any more, but it's too late, obviously.

For the BCJSSE provider, setting the session timeout musst happen after the {{init()}} of the {{SSLContext}}. But a general handling in case of {{getClientSessionContext()}}returning null wouldn't hurt either.",bctls-jdk15on-1.59,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,2018-07-05 09:31:11.0,,,,,,0|i3vkg7:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
cannot parse jdk version 11 early access,CXF-7781,13170053,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,ffang,davidkarlsen,davidkarlsen,04/Jul/18 11:46,13/Jul/18 08:25,14/Mar/19 02:31,13/Jul/18 08:25,,,,3.3.0,,,Core,,,0,,,,,"Running on openjdk 11 early access will fail with:

{noformat}
Caused by: java.lang.NumberFormatException: For input string: ""11-ea""
    at java.lang.NumberFormatException.forInputString (NumberFormatException.java:65)
    at java.lang.Integer.parseInt (Integer.java:652)
    at java.lang.Integer.valueOf (Integer.java:983)
    at org.apache.cxf.helpers.JavaUtils.<clinit> (JavaUtils.java:57)
{}noformat",,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-07-04 13:56:04.626,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Wed Jul 04 13:56:04 UTC 2018,,,,,,0|i3vjfb:,9223372036854775807,,,,,,,,"04/Jul/18 13:56;ffang;The patch attached for CXF-7741 can get this resolved.

 

I will merge that patch to CXF master(3.3) soon",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WSDLToJava does not respect error code conventions in case of error by default,CXF-7778,13169847,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,coheigea,linigo,linigo,03/Jul/18 15:25,05/Jul/18 13:38,14/Mar/19 02:31,05/Jul/18 13:38,,,,3.3.0,,,,,,0,,,,,Why does WSDLToJava need some custom property to be set in order to exit with non zero status in case of errors? See: https://github.com/apache/cxf/blob/master/tools/wsdlto/core/src/main/java/org/apache/cxf/tools/wsdlto/WSDLToJava.java#L203,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,2018-07-03 15:25:57.0,,,,,,0|i3vi5j:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Download page should not link to unreleased code,CXF-7776,13169776,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,coheigea,sebb@apache.org,sebb@apache.org,03/Jul/18 11:24,03/Jul/18 13:10,14/Mar/19 02:31,03/Jul/18 13:10,,,,,,,,,,0,,,,,"The download page currently has links to SNAPSHOTS.
These are not formal releases.

Links to SNAPSHOTs and source repos should be confined to developer-facing pages.",,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,2018-07-03 11:24:18.0,,,,,,0|i3vhpr:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
embedded jetty websocket gets ClassCastException: org.eclipse.jetty.servlet.ServletContextHandler$Context cannot be cast to org.eclipse.jetty.webapp.WebAppContext$Context,CXF-7775,13169671,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,ffang,libinkm,libinkm,03/Jul/18 02:09,30/Oct/18 10:05,14/Mar/19 02:31,11/Sep/18 03:14,3.2.5,,,3.2.7,3.3.0,,Transports,,,0,,,,,"After upgrade from jetty 9.2.5.v20141112 to 9.4.11.v20180605 and cxf from v3.1.5 to v3.2.5, the websocket server code used to work, now getting ClassCastException:

 

17:08:07.810 [qtp1128117613-31] WARN  org.eclipse.jetty.server.HttpChannel [HttpChannel.java:573] [] - /websocket/

java.lang.ClassCastException: org.eclipse.jetty.servlet.ServletContextHandler$Context cannot be cast to org.eclipse.jetty.webapp.WebAppContext$Context

        at org.apache.cxf.transport.websocket.jetty9.Jetty9WebSocketDestination.getServer(Jetty9WebSocketDestination.java:125)

        at org.apache.cxf.transport.websocket.jetty9.Jetty9WebSocketDestination.getWebSocketFactory(Jetty9WebSocketDestination.java:132)

        at org.apache.cxf.transport.websocket.jetty9.Jetty9WebSocketDestination.invoke(Jetty9WebSocketDestination.java:102)

        at org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:234)

        at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:208)

        at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:160)

        at org.apache.cxf.transport.servlet.CXFNonSpringServlet.invoke(CXFNonSpringServlet.java:216)

        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.handleRequest(AbstractHTTPServlet.java:301)

        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.doGet(AbstractHTTPServlet.java:225)

        at javax.servlet.http.HttpServlet.service(HttpServlet.java:687)

        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.service(AbstractHTTPServlet.java:276)

        at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:865)

        at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:535)

        at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)

        at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1317)

        at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:203)

        at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:473)

        at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:201)

        at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1219)

        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:144)

        at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:126)

        at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)

        at org.eclipse.jetty.server.Server.handle(Server.java:531)

        at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:352)

        at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:260)

        at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:281)

        at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:102)

        at org.eclipse.jetty.io.ssl.SslConnection.onFillable(SslConnection.java:291)

        at org.eclipse.jetty.io.ssl.SslConnection$3.succeeded(SslConnection.java:151)

        at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:102)

        at org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:118)

        at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:333)

        at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:310)

        at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:168)

        at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:126)

        at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:366)

        at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:762)

        at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:680)

        at java.lang.Thread.run(Thread.java:745)

 

 

Looks like 

org.apache.cxf.transport.websocket.jetty9.Jetty9WebSocketDestination was changed to assume ServletContext will always be WebAppContext.Context, we are not using WebAppContext in the program.

 ",,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-07-03 09:44:03.105,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Tue Sep 11 01:51:46 UTC 2018,,,,,,0|i3vh2f:,9223372036854775807,,,,,,,,03/Jul/18 09:44;coheigea;Do you have a test-case that we can use to reproduce the scenario?,"11/Sep/18 01:51;ffang;org.eclipse.jetty.webapp.WebAppContext$Context extends org.eclipse.jetty.servlet.ServletContextHandler$Context 
and
org.eclipse.jetty.servlet.ServletContextHandler$Context  extends org.eclipse.jetty.server.handler$Context
and getContextHandler() method defined in org.eclipse.jetty.server.handler$Context, so we cast the context to 
org.eclipse.jetty.server.handler$Context should be good",,,,,,,,,,,,,,,,,,,,,,,,,,,,
MD5 should no longer be provided on download pages,CXF-7772,13168908,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Blocker,Fixed,coheigea,sebb@apache.org,sebb@apache.org,28/Jun/18 16:27,29/Jun/18 10:12,14/Mar/19 02:31,29/Jun/18 10:12,,,,,,,,,,0,,,,,"As the subject says - please don't use MD5 hashes for new releases.

https://lists.apache.org/thread.html/cc4f237ead5a52a299e9d48d02b63bac1726e271c67817bbb829daaf@%3Cprivate.cxf.apache.org%3E",,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,2018-06-28 16:27:39.0,,,,,,0|i3vcd3:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ensure we close all temp queue/topic before we close a JMS connection ,CXF-7768,13168266,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,ffang,ffang,ffang,26/Jun/18 05:40,13/Oct/18 10:48,14/Mar/19 02:31,13/Oct/18 10:48,,,,3.1.18,3.2.6,,,,,0,,,,,"otherwise we will see error like

{code}

{color:#000000}INFO: failed to delete Temporary Queue ""temp-queue://ID:Mac....{color}

{color:#000000}{code}{color}

{color:#000000}When close the JMS connection {color}and we could run into connection/queue/topic leak.",,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Sat Oct 13 03:32:00 UTC 2018,,,,,,0|i3v8f3:,9223372036854775807,,,,,,,,13/Oct/18 03:32;ffang;should also backport to 3.1.x,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
URITemplate.compareTemplates returns inconsistent results,CXF-7765,13166977,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,coheigea,svella,svella,19/Jun/18 17:13,03/Oct/18 13:33,14/Mar/19 02:31,26/Jun/18 23:04,3.1.15,,,3.1.17,3.2.6,,JAX-RS,,,0,,,,,"When org.apache.cxf.jaxrs.model.URITemplate.compareTemplates() is passed two templates with the same number of literal characters, it returns -1 regardless of the order the templates a passed in. I suppose this may be on purpose, but the result is that if compareTemplates() is used as the basis of a Comparator<URITemplate> that is used by java.util.Collections.sort() it can result in:

{{java.lang.IllegalArgumentException: Comparison method violates its general contract!}}

I would also expect that this would result in some degree of unpredictability of the prioritization of when selecting the appropriate JAX-RS method to call for a given request.",,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-06-21 06:09:00.178,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Tue Jun 26 21:04:01 UTC 2018,,,,,,0|i3v0pj:,9223372036854775807,,,,,,,,"19/Jun/18 17:22;svella;Suggested fix:
{code:java}
static int compareTemplates(URITemplate t1, URITemplate t2) {
    int l1 = t1.getLiteralChars().length();
    int l2 = t2.getLiteralChars().length();
    // descending order
    int result = l1 < l2 ? 1 : l1 > l2 ? -1 : 0;
    if (result == 0) {
        int g1 = t1.getVariables().size();
        int g2 = t2.getVariables().size();
        // descending order
        result = g1 < g2 ? 1 : g1 > g2 ? -1 : 0;
        if (result == 0) {
            int gCustom1 = t1.getCustomVariables().size();
            int gCustom2 = t2.getCustomVariables().size();
            result = gCustom1 < gCustom2 ? 1 : gCustom1 > gCustom2 ? -1 : 0;
            if (result == 0) {
                result = t1.getPatternValue().compareTo(t2.getPatternValue());
            }
        }
    }
    return result
}
{code}","21/Jun/18 06:09;deki;Can you open a PR for it? [https://github.com/apache/cxf/pulls]

Makes it easier to review and apply.","21/Jun/18 11:31;coheigea;There is definitely a bug there, but I'm not sure about the suggested fix - it removes the check for String equality on the literalChars that is currently there and replaces it with a comparison on the length of the literalChars. A better idea might be to compare the literalChars using String.compareTo instead.","23/Jun/18 21:42;svella;[~deki] - Will try to find time to do that.

[~coheigea@progress.com], I'm reasonably sure the lexical ordering of the strings is uninteresting as this is being used to prioritize match patterns and the longer the number of literal characters that match, the higher priority. Lexical ordering becomes a last resort when all the more important factors have compared equal and is handled by the string comparison of the pattern values at the end.","25/Jun/18 14:27;coheigea;[~svella], could you submit a PR or a patch (and ideally a unit test in URITemplateTest)?","25/Jun/18 22:19;githubbot;svella opened a new pull request #425: CXF-7765 - URITemplate.compareTemplates returns inconsistent results
URL: https://github.com/apache/cxf/pull/425
 
 
   Proposed fix for CXF-7765

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","26/Jun/18 15:52;coheigea;I'm wondering if the fall back to ""t1.getPatternValue().compareTo(t2.getPatternValue()"" should also be in ""descending order"" like the other comparisons?",26/Jun/18 18:41;svella;I don't think it really matters either way other than that changing it would behave differently than in the past for some cases that aren't currently a problem and as such has a small chance of causing someone somewhere a little grief.,"26/Jun/18 21:04;githubbot;coheigea closed pull request #425: CXF-7765 - URITemplate.compareTemplates returns inconsistent results
URL: https://github.com/apache/cxf/pull/425
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/model/URITemplate.java b/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/model/URITemplate.java
index b5059f3ddca..b9f0232d1a9 100644
--- a/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/model/URITemplate.java
+++ b/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/model/URITemplate.java
@@ -377,28 +377,24 @@ public static URITemplate createExactTemplate(String pathValue) {
     }
     
     public static int compareTemplates(URITemplate t1, URITemplate t2) {
-        String l1 = t1.getLiteralChars();
-        String l2 = t2.getLiteralChars();
-        if (!l1.equals(l2)) {
-            // descending order
-            return l1.length() < l2.length() ? 1 : -1;
-        }
-
-        int g1 = t1.getVariables().size();
-        int g2 = t2.getVariables().size();
+        int l1 = t1.getLiteralChars().length();
+        int l2 = t2.getLiteralChars().length();
         // descending order
-        int result = g1 < g2 ? 1 : g1 > g2 ? -1 : 0;
+        int result = l1 < l2 ? 1 : l1 > l2 ? -1 : 0;
         if (result == 0) {
-            int gCustom1 = t1.getCustomVariables().size();
-            int gCustom2 = t2.getCustomVariables().size();
-            if (gCustom1 != gCustom2) {
-                // descending order
-                return gCustom1 < gCustom2 ? 1 : -1;
+            int g1 = t1.getVariables().size();
+            int g2 = t2.getVariables().size();
+            // descending order
+            result = g1 < g2 ? 1 : g1 > g2 ? -1 : 0;
+            if (result == 0) {
+                int gCustom1 = t1.getCustomVariables().size();
+                int gCustom2 = t2.getCustomVariables().size();
+                result = gCustom1 < gCustom2 ? 1 : gCustom1 > gCustom2 ? -1 : 0;
+                if (result == 0) {
+                    result = t1.getPatternValue().compareTo(t2.getPatternValue());
+                }
             }
         }
-        if (result == 0) {
-            result = t1.getPatternValue().compareTo(t2.getPatternValue());
-        }
 
         return result;
     }
diff --git a/rt/frontend/jaxrs/src/test/java/org/apache/cxf/jaxrs/model/URITemplateTest.java b/rt/frontend/jaxrs/src/test/java/org/apache/cxf/jaxrs/model/URITemplateTest.java
index 97e53637479..7d2ac299ba0 100644
--- a/rt/frontend/jaxrs/src/test/java/org/apache/cxf/jaxrs/model/URITemplateTest.java
+++ b/rt/frontend/jaxrs/src/test/java/org/apache/cxf/jaxrs/model/URITemplateTest.java
@@ -740,4 +740,17 @@ public void testEncodeLiteralCharactersNotVariable() {
         //System.out.println(ut.encodeLiteralCharacters());
         assertEquals(""a%20{digit:[0-9]}%20b"", ut.encodeLiteralCharacters(false));
     }
+
+    @Test
+    public void testCompareNumberOfLiteralCharacters() {
+        URITemplate t1 = new URITemplate(""/foo"");
+        URITemplate t2 = new URITemplate(""/bar"");
+        URITemplate t3 = new URITemplate(""/foo/bar"");
+        assertEquals(0, URITemplate.compareTemplates(t1, t1));
+        assertTrue(URITemplate.compareTemplates(t1, t3) > 0);
+        assertTrue(URITemplate.compareTemplates(t3, t1) < 0);
+        assertEquals(Integer.signum(URITemplate.compareTemplates(t1, t2)),
+                -Integer.signum(URITemplate.compareTemplates(t2, t1)));
+    }
+
 }


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
",,,,,,,,,,,,,,,,,,,,,
SSLUtils.configureKeyManagersWithCertAlias modifies keyManagers array,CXF-7763,13166913,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,coheigea,condor,condor,19/Jun/18 12:06,03/Oct/18 13:33,14/Mar/19 02:31,22/Jun/18 12:57,3.2.4,,,3.1.17,3.2.6,,Core,,,0,,,,,"In needed to connect to a web service as several different users and the web service uses a client certificate for authentication. I created separate proxies with different TLSClientParameters for every user, passing in the same trustManagers and keyManagers and a different certAlias.

This doesn't work, because SSLUtils.configureKeyManagersWithCertAlias modifies the keyManagers array, so it can only be used for a single proxy.

IMHO SSLUtils.getSSLContext should make a COPY of parameters.getKeyManagers() before passing it to configureKeyManagersWithCertAlias.

If you don't plan to fix this, then at least mention this in the documentation!","Windows 2012 R2

Tomcat 8.5.31

Oracle JDK 1.8.0_171",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,2018-06-19 12:06:24.0,,,,,,0|i3v0bb:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JOSE: JwsCompactConsumer parsing headers issue,CXF-7760,13165761,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,coheigea,Roldan,Roldan,13/Jun/18 07:57,03/Oct/18 13:33,14/Mar/19 02:31,25/Jun/18 17:09,3.1.13,,,3.1.17,3.2.6,,JAX-RS Security,,,0,,,,,"When using the JwsCompactConsumer with a compact JWT whose kid contains a slash, the json parser escapes it, which causes issues later on while matching the kid to the one specified in the JWKS. For example:

Header:

{
 ""kid"": ""4pZbe4shQQGzZXHbeIlbDvmHOc1/H6jH6oBk3nUrcZE="",
 ""alg"": ""RS256""
}

 

 ",,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-06-13 09:20:18.598,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Sun Jun 24 13:15:59 UTC 2018,,,,,,0|i3usxr:,9223372036854775807,,,,,,,,"13/Jun/18 09:20;coheigea;Can you supply a test-case? I tried with this and it worked OK:

 

    @Test
    public void testEncodedKid() throws Exception {
        String keyId = ""4pZbe4shQQGzZXHbeIlbDvmHOc1/H6jH6oBk3nUrcZE="";
        JsonWebKey key = new JsonWebKey();
        key.setKeyType(KeyType.OCTET);
        key.setKeyId(keyId);
        key.setKeyOperation(Arrays.asList(
            new KeyOperation[]\{KeyOperation.SIGN, KeyOperation.VERIFY}));

        JwsHeaders headers = new JwsHeaders();
        headers.setType(JoseType.JWT);
        headers.setSignatureAlgorithm(SignatureAlgorithm.HS256);
        headers.setHeader(JoseConstants.HEADER_KEY_ID, key.getKeyId());

        JwtClaims claims = new JwtClaims();
        claims.setIssuer(""joe"");
        claims.setExpiryTime(1300819380L);
        claims.setClaim(""http://example.com/is_root"", Boolean.TRUE);

        JwtToken token = new JwtToken(headers, claims);
        JwsCompactProducer jws = new JwsJwtCompactProducer(token, getWriter());
        jws.signWith(new HmacJwsSignatureProvider(ENCODED_MAC_KEY, SignatureAlgorithm.HS256));

        JwsCompactConsumer consumer = new JwsJwtCompactConsumer(jws.getSignedEncodedJws());
        assertTrue(consumer.verifySignatureWith(new HmacJwsSignatureVerifier(ENCODED_MAC_KEY, SignatureAlgorithm.HS256)));

        assertEquals(keyId, consumer.getJwsHeaders().getKeyId());
    }","13/Jun/18 10:13;Roldan;Thanks for the quick response. I am getting the JWT from cognito. See this:

String keyId = ""4pZbe4shQQGzZXHbeIlbDvmHOc1/H6jH6oBk3nUrcZE="";

String jwt = ""eyJraWQiOiI0cFpiZTRzaFFRR3paWEhiZUlsYkR2bUhPYzFcL0g2akg2b0JrM25VcmNaRT0iLCJhbGciOiJSUzI1NiJ9.nevermindtheclaims.orthesignature"";
JwsCompactConsumer consumer = new JwsJwtCompactConsumer(jwt);
 assertEquals(keyId, consumer.getJwsHeaders()
 .asMap()
 .get(""kid""));","13/Jun/18 15:30;coheigea;I think the problem is with the token itself. For example not using any CXF APIs:

String part1 = ""eyJraWQiOiI0cFpiZTRzaFFRR3paWEhiZUlsYkR2bUhPYzFcL0g2akg2b0JrM25VcmNaRT0iLCJhbGciOiJSUzI1NiJ9"";
byte[] bytes = java.util.Base64.getDecoder().decode(part1);
System.out.println(new String(bytes, StandardCharsets.UTF_8));

yields:

{""kid"":""4pZbe4shQQGzZXHbeIlbDvmHOc1\/H6jH6oBk3nUrcZE="",""alg"":""RS256""}

Here you can see the forward slash in the kid is already encoded in the token.","14/Jun/18 06:53;Roldan;Oh. I will open a ticket to Cognito with your analysis. Thanks for all the help, deeply appreciated!","21/Jun/18 07:29;Roldan;Hi, got feedback back from Cognito. It seems the problem is actually in the CXF JSON parsing. Using a vanilla Jackson ObjectMapper instance it is properly parsed:

 String part1 = ""eyJraWQiOiI0cFpiZTRzaFFRR3paWEhiZUlsYkR2bUhPYzFcL0g2akg2b0JrM25VcmNaRT0iLCJhbGciOiJSUzI1NiJ9"";
 byte[] bytes = java.util.Base64.getUrlDecoder()
 .decode(part1);
 ObjectMapper mapper = new ObjectMapper();
 Map<String, Object> map = mapper.readValue(bytes, new TypeReference<Map<String, String>>() {
 });
 System.out.println(map);

yields 

{kid=4pZbe4shQQGzZXHbeIlbDvmHOc1/H6jH6oBk3nUrcZE=, alg=RS256}

 ","24/Jun/18 13:15;Roldan;Hi [~coheigea], 

Please refer to the following reproduction:
{code:java}
JsonMapObjectReaderWriter jsonMapObjectReaderWriter = new JsonMapObjectReaderWriter();
String part1 = ""eyJraWQiOiI0cFpiZTRzaFFRR3paWEhiZUlsYkR2bUhPYzFcL0g2akg2b0JrM25VcmNaRT0iLCJhbGciOiJSUzI1NiJ9"";
String innerJson = new String(java.util.Base64.getUrlDecoder()
.decode(part1), StandardCharsets.UTF_8);
Map<String, Object> innerJsonParsed = jsonMapObjectReaderWriter.fromJson(innerJson);
System.out.printf(""kid Expected: %s%n"", new ObjectMapper().readValue(innerJson, Map.class)
.get(""kid""));
System.out.printf(""kid Actual: %s%n"", innerJsonParsed.get(""kid""));
{code}
Output:
{code:java}
kid Expected: 4pZbe4shQQGzZXHbeIlbDvmHOc1/H6jH6oBk3nUrcZE=
kid Actual: 4pZbe4shQQGzZXHbeIlbDvmHOc1\/H6jH6oBk3nUrcZE=
{code}
The '\/' should be evaluated to '/', please refer to[1] as performed by Jackson.

Thanks!

[1] https://www.json.org/",,,,,,,,,,,,,,,,,,,,,,,,
Null pointer from the ThreadLocalServletContext class,CXF-7759,13165540,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,coheigea,yagnya,yagnya,12/Jun/18 11:05,03/Oct/18 06:06,14/Mar/19 02:31,11/Jul/18 14:20,,,,3.2.6,,,,,,0,,,,,"Hi ,

We have developed some rest services using CXF3.1.5,When I try to invoke my rest service I get always NullPointerException.

I debugged this class file somehow its not getting initialized after deployment.

In both tomcat and jetty we get same exception.below is the exception trace.

HTTP Status 500 – Internal Server Error

java.lang.NullPointerException org.apache.cxf.jaxrs.impl.tl.ThreadLocalServletContext.getAttribute(ThreadLocalServletContext.java:46) org.springframework.web.context.support.WebApplicationContextUtils.getWebApplicationContext(WebApplicationContextUtils.java:109) org.springframework.web.context.support.WebApplicationContextUtils.getWebApplicationContext(WebApplicationContextUtils.java:98) org.springframework.web.context.support.WebApplicationContextUtils.getRequiredWebApplicationContext(WebApplicationContextUtils.java:81) com.emc.healthcare.xds.registry.commons.rest.AbstractResource.getProducerTemplate(AbstractResource.java:48) com.emc.healthcare.xds.registry.commons.rest.AbstractResource.routeThroughCamel(AbstractResource.java:66) com.emc.healthcare.xds.registry.commons.rest.AbstractResource.routeThroughCamel(AbstractResource.java:56) com.emc.healthcare.xds.registry.commons.rest.SubmissionSetResource.queryForSelf(SubmissionSetResource.java:50) com.emc.healthcare.xds.registry.commons.rest.SubmissionSetResource.getSelf(SubmissionSetResource.java:34) sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) java.lang.reflect.Method.invoke(Method.java:606) org.apache.cxf.service.invoker.AbstractInvoker.performInvocation(AbstractInvoker.java:180) org.apache.cxf.service.invoker.AbstractInvoker.invoke(AbstractInvoker.java:96) org.apache.cxf.jaxrs.JAXRSInvoker.invoke(JAXRSInvoker.java:189) org.apache.cxf.jaxrs.JAXRSInvoker.invoke(JAXRSInvoker.java:260) org.apache.cxf.jaxrs.JAXRSInvoker.invoke(JAXRSInvoker.java:260) org.apache.cxf.jaxrs.JAXRSInvoker.invoke(JAXRSInvoker.java:99) org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:59) org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:96) org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:308) org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:121) org.apache.cxf.transport.http.AbstractHTTPDestination.invoke(AbstractHTTPDestination.java:253) org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:234) org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:208) org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:160) org.apache.cxf.transport.servlet.CXFNonSpringServlet.invoke(CXFNonSpringServlet.java:180) org.apache.cxf.transport.servlet.AbstractHTTPServlet.handleRequest(AbstractHTTPServlet.java:298) org.apache.cxf.transport.servlet.AbstractHTTPServlet.doGet(AbstractHTTPServlet.java:222) javax.servlet.http.HttpServlet.service(HttpServlet.java:635) org.apache.cxf.transport.servlet.AbstractHTTPServlet.service(AbstractHTTPServlet.java:273) org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317) org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127) org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91) org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114) org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170) org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158) org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200) org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116) org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) org.springframework.security.web.csrf.CsrfFilter.doFilterInternal(CsrfFilter.java:100) org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:66) org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214) org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177) org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:346) org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:262)

Thanks,

Yagnya

 "," 

server :Unit test JEtty 9

server: deployement in Tomcal 8

Spring :4.2.5 Release

Before upgrading to cxf 3.1.5 it was working smoothly without any issue.

Currently we are using cxf 3.1.5 core library,prior to this we had been using cxf-api 2.7.6

Just for curiosity I have one question what is the difference between using cxf core library and cxf-api library,I could see in both libraries many places same class files are present like CXFservlet.",,,,,,,,,,,,,,,,,,,,26/Jun/18 10:59;coheigea;CXF-7759.patch;https://issues.apache.org/jira/secure/attachment/12929181/CXF-7759.patch,,,1.0,,,,,,,,,,,,,,,,,,,2018-06-12 14:46:46.261,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Thu Jul 12 06:56:34 UTC 2018,,,,,,0|i3urkn:,9223372036854775807,,,,,,,,12/Jun/18 14:46;coheigea;Please try with a more recent CXF release (such as 3.2.4 or 3.1.15). Do you have a test-case to reproduce the issue?,"13/Jun/18 05:12;yagnya;Thanks Colim for early reply as always,I will try with 3.2.4 version and let you know.

could you tell me when to use cxf-api jar and cxf-core jar,isn't cxf-api is part of the cxf-core?The reason I'm asking is

recently I joined a new project and they have been using cxf-api instead cxf-core.

 ","13/Jun/18 08:48;coheigea;cxf-api was removed from CXF 3.0.0:

[http://cxf.apache.org/docs/30-migration-guide.html]

""Combined api/core into just a cxf-core. ""","26/Jun/18 06:36;yagnya;Hi Colm,

Sorry for delayed response,I tried to reproduce the issue by taking out small portion of my project with cxf 3.2.4 and I'm getting same null pointer exception as mentioned in the exception posted earlier,caused by ThreadlocalServeletContext incorrect initialization.

I've published this POC project in git hub,please have a look and let me know if anything is missing.

 

GIT HUB :[https://github.com/yagnyadutta/restcxfcamel]

Thanks,

Yagnya.

 ",26/Jun/18 10:58;coheigea;Thanks for the test-case. It appears the problem is that you are injecting the ServletContext via @Context into all of the resource classes. Instead if you remove @Context from AbstractResource and move it into RegistryResource everything works correctly. See the attached diff.,"26/Jun/18 12:14;coheigea;[~sergey_beryozkin], it looks like the part of the change for https://issues.apache.org/jira/browse/CXF-5861 caused this issue. When I apply the following patch to master it works:

diff --git a/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/JAXRSInvoker.java b/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/JAXRSInvoker.java
index ede0eb9eb8..aa73e64d58 100644
--- a/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/JAXRSInvoker.java
+++ b/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/JAXRSInvoker.java
@@ -158,8 +158,9 @@ public class JAXRSInvoker extends AbstractInvoker {
         final ClassResourceInfo cri = ori.getClassResourceInfo();
         final Message inMessage = exchange.getInMessage();
         final ServerProviderFactory providerFactory = ServerProviderFactory.getInstance(inMessage);
+        cri.injectContexts(resourceObject, ori, inMessage);
+
         if (cri.isRoot()) {
-            cri.injectContexts(resourceObject, ori, inMessage);
             ProviderInfo<Application> appProvider = providerFactory.getApplicationProvider();
             if (appProvider != null) {
                 InjectionUtils.injectContexts(appProvider.getProvider(),

 

Should I apply this patch to master or is there a reason not to? All test pass with it.","11/Jul/18 08:48;yagnya;Hi Colm,

Have you applied this patch? If yes should I download the latest of CXF to avail the fix?

Thanks,

Yagnya","11/Jul/18 14:20;coheigea;The patch is now applied - you can grab the CXF 3.2.x-fixes branch and build it locally to test it out:

 

https://github.com/apache/cxf/tree/3.2.x-fixes",12/Jul/18 06:56;yagnya;Thank you.,,,,,,,,,,,,,,,,,,,,,
MTOM + SchemaValidation results in empty input stream from data handler,CXF-7758,13165530,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,,thofman,thofman,12/Jun/18 09:30,13/Jul/18 14:40,14/Mar/19 02:31,13/Jun/18 12:43,3.2.4,,,3.1.16,3.2.5,,Core,,,0,,,,,"With enabled validation, data handler returns empty input stream for attachment data.

Reproducer:

1. Unzip the attachment
 2. Build using ""mvn clean install"" and deploy war file to JBoss EAP 7.1.2.
 3. Try calling the deployed soap service with attachments as given in the sample soap UI project.
 4. Notice the resulting file is empty. This happens only when schema validation enabled. After removing SchemaValidation annotation it works fine.",,,,,,,,,,,,,,,,,,,,,12/Jun/18 09:31;thofman;sample_jboss_bug_apache_cxf.zip;https://issues.apache.org/jira/secure/attachment/12927441/sample_jboss_bug_apache_cxf.zip,,,1.0,,,,,,,,,,,,,,,,,,,2018-06-12 09:46:19.329,,,no_permission,,Unknown,,,https://issues.jboss.org/browse/JBEAP-14830,,,,,,,,,9223372036854775807,,,Fri Jul 13 14:40:46 UTC 2018,,,,,,0|i3urif:,9223372036854775807,,,,,,,,"12/Jun/18 09:46;githubbot;TomasHofman opened a new pull request #423: CXF-7758 MTOM + SchemaValidation results in empty input stream from d…
URL: https://github.com/apache/cxf/pull/423
 
 
   …ata handler
   
   https://issues.apache.org/jira/browse/CXF-7758
   https://issues.jboss.org/browse/JBEAP-14830
   
   This is to allow checking `endpoint.getEndpointInfo()` even when `exchange.getBindingOperationInfo()` is not yet set.
   
   The `JAXBAttachmentSchemaValidationHack` is checking if the the validation is enabled in a phase before `exchange.getBindingOperationInfo()` is set. This leads to not correctly determining that validation is enabled and attachment datasources not being cached. Because the datasource is not cached, it returns the same InputStream to the validation unmarshaller and then to the application, resulting in the app not being able to read any data from the attachment DS.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
",12/Jun/18 09:46;thofman;PR: https://github.com/apache/cxf/pull/423,"13/Jun/18 08:49;githubbot;TomasHofman commented on issue #423: CXF-7758 MTOM + SchemaValidation results in empty input stream from d…
URL: https://github.com/apache/cxf/pull/423#issuecomment-396863569
 
 
   Test failure seems unrelated, can we retest?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","13/Jun/18 12:36;githubbot;dkulp closed pull request #423: CXF-7758 MTOM + SchemaValidation results in empty input stream from d…
URL: https://github.com/apache/cxf/pull/423
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/core/src/main/java/org/apache/cxf/helpers/ServiceUtils.java b/core/src/main/java/org/apache/cxf/helpers/ServiceUtils.java
index a4537a27cab..69c4b1d974e 100644
--- a/core/src/main/java/org/apache/cxf/helpers/ServiceUtils.java
+++ b/core/src/main/java/org/apache/cxf/helpers/ServiceUtils.java
@@ -108,30 +108,30 @@ private static SchemaValidationType getOverrideSchemaValidationType(Message mess
 
     private static SchemaValidationType getSchemaValidationTypeFromModel(Message message) {
         Exchange exchange = message.getExchange();
+        SchemaValidationType validationType = null;
 
         if (exchange != null) {
-            BindingOperationInfo boi = exchange.getBindingOperationInfo();
-            Endpoint endpoint = exchange.getEndpoint();
 
-            if (boi != null && endpoint != null) {
-                SchemaValidationType validationType = null;
+            BindingOperationInfo boi = exchange.getBindingOperationInfo();
+            if (boi != null) {
                 OperationInfo opInfo = boi.getOperationInfo();
-                EndpointInfo ep = endpoint.getEndpointInfo();
-
                 if (opInfo != null) {
                     validationType = getSchemaValidationTypeFromModel(opInfo);
+                }
+            }
 
-                    if (validationType == null && ep != null) {
+            if (validationType == null) {
+                Endpoint endpoint = exchange.getEndpoint();
+                if (endpoint != null) {
+                    EndpointInfo ep = endpoint.getEndpointInfo();
+                    if (ep != null) {
                         validationType = getSchemaValidationTypeFromModel(ep);
                     }
                 }
-
-                return validationType;
             }
         }
 
-        // else
-        return null;
+        return validationType;
     }
 
     private static SchemaValidationType getSchemaValidationTypeFromModel(
diff --git a/systests/jaxws/src/test/java/org/apache/cxf/systest/jaxws/attachment/AttachmentService.java b/systests/jaxws/src/test/java/org/apache/cxf/systest/jaxws/attachment/AttachmentService.java
new file mode 100644
index 00000000000..6acbf6c51e3
--- /dev/null
+++ b/systests/jaxws/src/test/java/org/apache/cxf/systest/jaxws/attachment/AttachmentService.java
@@ -0,0 +1,36 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.cxf.systest.jaxws.attachment;
+
+import javax.jws.WebMethod;
+import javax.jws.WebParam;
+import javax.jws.WebService;
+import javax.xml.bind.annotation.XmlElement;
+
+import org.apache.cxf.annotations.SchemaValidation;
+
+@WebService(name = ""AttachmentService"", targetNamespace = ""http://org.apache.cxf/service/AttachmentService"")
+@SchemaValidation(type = SchemaValidation.SchemaValidationType.IN)
+public interface AttachmentService {
+
+    @WebMethod
+    int test(@WebParam(name = ""request"") @XmlElement(required = true) Request request) throws Exception;
+
+}
diff --git a/systests/jaxws/src/test/java/org/apache/cxf/systest/jaxws/attachment/AttachmentServiceImpl.java b/systests/jaxws/src/test/java/org/apache/cxf/systest/jaxws/attachment/AttachmentServiceImpl.java
new file mode 100644
index 00000000000..b6a4511347f
--- /dev/null
+++ b/systests/jaxws/src/test/java/org/apache/cxf/systest/jaxws/attachment/AttachmentServiceImpl.java
@@ -0,0 +1,45 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.cxf.systest.jaxws.attachment;
+
+import java.io.InputStream;
+
+import javax.activation.DataHandler;
+import javax.jws.WebMethod;
+import javax.jws.WebParam;
+import javax.jws.WebService;
+import javax.xml.bind.annotation.XmlElement;
+import javax.xml.ws.soap.MTOM;
+
+import org.apache.cxf.annotations.SchemaValidation;
+import org.apache.cxf.helpers.IOUtils;
+
+@WebService(name = ""AttachmentService"", targetNamespace = ""http://org.apache.cxf/service/AttachmentService"")
+@SchemaValidation(type = SchemaValidation.SchemaValidationType.IN)
+@MTOM(enabled = true)
+public class AttachmentServiceImpl implements AttachmentService {
+
+    @WebMethod
+    public int test(@WebParam(name = ""request"") @XmlElement(required = true) Request request) throws Exception {
+        DataHandler dataHandler = request.getContent();
+        InputStream inputStream = dataHandler.getInputStream();
+        return IOUtils.readBytesFromStream(inputStream).length;
+    }
+}
diff --git a/systests/jaxws/src/test/java/org/apache/cxf/systest/jaxws/attachment/Request.java b/systests/jaxws/src/test/java/org/apache/cxf/systest/jaxws/attachment/Request.java
new file mode 100644
index 00000000000..b9f082076e7
--- /dev/null
+++ b/systests/jaxws/src/test/java/org/apache/cxf/systest/jaxws/attachment/Request.java
@@ -0,0 +1,45 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.cxf.systest.jaxws.attachment;
+
+import javax.activation.DataHandler;
+import javax.xml.bind.annotation.XmlAccessType;
+import javax.xml.bind.annotation.XmlAccessorType;
+import javax.xml.bind.annotation.XmlElement;
+import javax.xml.bind.annotation.XmlType;
+
+@XmlAccessorType(XmlAccessType.FIELD)
+@XmlType(name = ""request"", propOrder = {""content""})
+public class Request {
+
+    @XmlElement(name = ""content"", required = true)
+    private DataHandler content;
+
+    public Request() {
+    }
+
+    public DataHandler getContent() {
+        return content;
+    }
+
+    public void setContent(DataHandler content) {
+        this.content = content;
+    }
+}
diff --git a/systests/jaxws/src/test/java/org/apache/cxf/systest/jaxws/attachment/ValidationWithAttachmentTest.java b/systests/jaxws/src/test/java/org/apache/cxf/systest/jaxws/attachment/ValidationWithAttachmentTest.java
new file mode 100644
index 00000000000..cda53f20b9f
--- /dev/null
+++ b/systests/jaxws/src/test/java/org/apache/cxf/systest/jaxws/attachment/ValidationWithAttachmentTest.java
@@ -0,0 +1,83 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.cxf.systest.jaxws.attachment;
+
+import javax.activation.DataHandler;
+import javax.xml.ws.BindingProvider;
+import javax.xml.ws.soap.SOAPBinding;
+
+import org.apache.cxf.endpoint.Server;
+import org.apache.cxf.jaxws.JaxWsProxyFactoryBean;
+import org.apache.cxf.jaxws.JaxWsServerFactoryBean;
+import org.apache.cxf.testutil.common.TestUtil;
+
+import org.junit.AfterClass;
+import org.junit.Assert;
+import org.junit.BeforeClass;
+import org.junit.Test;
+
+public class ValidationWithAttachmentTest {
+
+    static final String PORT = TestUtil.getNewPortNumber(ValidationWithAttachmentTest.class);
+    static final String ADDRESS = ""http://localhost:"" + PORT + ""/"" + ValidationWithAttachmentTest.class.getSimpleName();
+
+    static Server server;
+    static AttachmentService client;
+
+    @BeforeClass
+    public static void setUp() {
+        initServer();
+        initClient();
+    }
+
+    @AfterClass
+    public static void tearDown() {
+        server.stop();
+    }
+
+    @Test
+    public void test() throws Exception {
+        Request request = new Request();
+        request.setContent(new DataHandler(""test"", ""text/plain""));
+
+        int bytes = client.test(request);
+        Assert.assertTrue(""Attachment data were not received"", bytes > 0);
+    }
+
+    private static void initServer() {
+        JaxWsServerFactoryBean factory = new JaxWsServerFactoryBean();
+        factory.setServiceClass(AttachmentServiceImpl.class);
+        factory.setAddress(ADDRESS);
+        factory.setServiceBean(new AttachmentServiceImpl());
+        server = factory.create();
+    }
+
+    private static void initClient() {
+        JaxWsProxyFactoryBean clientFactory = new JaxWsProxyFactoryBean();
+        clientFactory.setServiceClass(AttachmentService.class);
+        clientFactory.setAddress(ADDRESS);
+        client = (AttachmentService) clientFactory.create();
+
+        //enable MTOM in client
+        BindingProvider bp = (BindingProvider) client;
+        SOAPBinding binding = (SOAPBinding) bp.getBinding();
+        binding.setMTOMEnabled(true);
+    }
+}


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
",13/Jun/18 12:43;thofman;Merged in cxf 3.2.5.,"13/Jun/18 14:03;githubbot;TomasHofman opened a new pull request #424: CXF-7758 MTOM + SchemaValidation results in empty input stream from d…
URL: https://github.com/apache/cxf/pull/424
 
 
   …ata handler
   
   I realized I need this for 3.1.x branch too...
   
   https://issues.apache.org/jira/browse/CXF-7758
   https://issues.jboss.org/browse/JBEAP-14830
   Upstream PR: https://github.com/apache/cxf/pull/423

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","18/Jun/18 14:26;githubbot;deki closed pull request #424: CXF-7758 MTOM + SchemaValidation results in empty input stream from d…
URL: https://github.com/apache/cxf/pull/424
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/core/src/main/java/org/apache/cxf/helpers/ServiceUtils.java b/core/src/main/java/org/apache/cxf/helpers/ServiceUtils.java
index 22b9a5332b3..9ce9f7d1a3a 100644
--- a/core/src/main/java/org/apache/cxf/helpers/ServiceUtils.java
+++ b/core/src/main/java/org/apache/cxf/helpers/ServiceUtils.java
@@ -101,30 +101,30 @@ private static SchemaValidationType getOverrideSchemaValidationType(Message mess
     
     private static SchemaValidationType getSchemaValidationTypeFromModel(Message message) {
         Exchange exchange = message.getExchange();
-        
+        SchemaValidationType validationType = null;
+
         if (exchange != null) {
+
             BindingOperationInfo boi = exchange.getBindingOperationInfo();
-            Endpoint endpoint = exchange.getEndpoint();
-            
-            if (boi != null && endpoint != null) {
-                SchemaValidationType validationType = null;
+            if (boi != null) {
                 OperationInfo opInfo = boi.getOperationInfo();
-                EndpointInfo ep = endpoint.getEndpointInfo();
-                
-                if (validationType == null && opInfo != null) {
+                if (opInfo != null) {
                     validationType = getSchemaValidationTypeFromModel(opInfo);
-                    
-                    if (validationType == null && ep != null) {
+                }
+            }
+
+            if (validationType == null) {
+                Endpoint endpoint = exchange.getEndpoint();
+                if (endpoint != null) {
+                    EndpointInfo ep = endpoint.getEndpointInfo();
+                    if (ep != null) {
                         validationType = getSchemaValidationTypeFromModel(ep);
                     }
                 }
-                
-                return validationType;
             }
         }
-        
-        // else
-        return null;
+
+        return validationType;
     }
     
     private static SchemaValidationType getSchemaValidationTypeFromModel(
diff --git a/systests/jaxws/src/test/java/org/apache/cxf/systest/jaxws/attachment/AttachmentService.java b/systests/jaxws/src/test/java/org/apache/cxf/systest/jaxws/attachment/AttachmentService.java
new file mode 100644
index 00000000000..6acbf6c51e3
--- /dev/null
+++ b/systests/jaxws/src/test/java/org/apache/cxf/systest/jaxws/attachment/AttachmentService.java
@@ -0,0 +1,36 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.cxf.systest.jaxws.attachment;
+
+import javax.jws.WebMethod;
+import javax.jws.WebParam;
+import javax.jws.WebService;
+import javax.xml.bind.annotation.XmlElement;
+
+import org.apache.cxf.annotations.SchemaValidation;
+
+@WebService(name = ""AttachmentService"", targetNamespace = ""http://org.apache.cxf/service/AttachmentService"")
+@SchemaValidation(type = SchemaValidation.SchemaValidationType.IN)
+public interface AttachmentService {
+
+    @WebMethod
+    int test(@WebParam(name = ""request"") @XmlElement(required = true) Request request) throws Exception;
+
+}
diff --git a/systests/jaxws/src/test/java/org/apache/cxf/systest/jaxws/attachment/AttachmentServiceImpl.java b/systests/jaxws/src/test/java/org/apache/cxf/systest/jaxws/attachment/AttachmentServiceImpl.java
new file mode 100644
index 00000000000..b6a4511347f
--- /dev/null
+++ b/systests/jaxws/src/test/java/org/apache/cxf/systest/jaxws/attachment/AttachmentServiceImpl.java
@@ -0,0 +1,45 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.cxf.systest.jaxws.attachment;
+
+import java.io.InputStream;
+
+import javax.activation.DataHandler;
+import javax.jws.WebMethod;
+import javax.jws.WebParam;
+import javax.jws.WebService;
+import javax.xml.bind.annotation.XmlElement;
+import javax.xml.ws.soap.MTOM;
+
+import org.apache.cxf.annotations.SchemaValidation;
+import org.apache.cxf.helpers.IOUtils;
+
+@WebService(name = ""AttachmentService"", targetNamespace = ""http://org.apache.cxf/service/AttachmentService"")
+@SchemaValidation(type = SchemaValidation.SchemaValidationType.IN)
+@MTOM(enabled = true)
+public class AttachmentServiceImpl implements AttachmentService {
+
+    @WebMethod
+    public int test(@WebParam(name = ""request"") @XmlElement(required = true) Request request) throws Exception {
+        DataHandler dataHandler = request.getContent();
+        InputStream inputStream = dataHandler.getInputStream();
+        return IOUtils.readBytesFromStream(inputStream).length;
+    }
+}
diff --git a/systests/jaxws/src/test/java/org/apache/cxf/systest/jaxws/attachment/Request.java b/systests/jaxws/src/test/java/org/apache/cxf/systest/jaxws/attachment/Request.java
new file mode 100644
index 00000000000..b9f082076e7
--- /dev/null
+++ b/systests/jaxws/src/test/java/org/apache/cxf/systest/jaxws/attachment/Request.java
@@ -0,0 +1,45 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.cxf.systest.jaxws.attachment;
+
+import javax.activation.DataHandler;
+import javax.xml.bind.annotation.XmlAccessType;
+import javax.xml.bind.annotation.XmlAccessorType;
+import javax.xml.bind.annotation.XmlElement;
+import javax.xml.bind.annotation.XmlType;
+
+@XmlAccessorType(XmlAccessType.FIELD)
+@XmlType(name = ""request"", propOrder = {""content""})
+public class Request {
+
+    @XmlElement(name = ""content"", required = true)
+    private DataHandler content;
+
+    public Request() {
+    }
+
+    public DataHandler getContent() {
+        return content;
+    }
+
+    public void setContent(DataHandler content) {
+        this.content = content;
+    }
+}
diff --git a/systests/jaxws/src/test/java/org/apache/cxf/systest/jaxws/attachment/ValidationWithAttachmentTest.java b/systests/jaxws/src/test/java/org/apache/cxf/systest/jaxws/attachment/ValidationWithAttachmentTest.java
new file mode 100644
index 00000000000..cda53f20b9f
--- /dev/null
+++ b/systests/jaxws/src/test/java/org/apache/cxf/systest/jaxws/attachment/ValidationWithAttachmentTest.java
@@ -0,0 +1,83 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.cxf.systest.jaxws.attachment;
+
+import javax.activation.DataHandler;
+import javax.xml.ws.BindingProvider;
+import javax.xml.ws.soap.SOAPBinding;
+
+import org.apache.cxf.endpoint.Server;
+import org.apache.cxf.jaxws.JaxWsProxyFactoryBean;
+import org.apache.cxf.jaxws.JaxWsServerFactoryBean;
+import org.apache.cxf.testutil.common.TestUtil;
+
+import org.junit.AfterClass;
+import org.junit.Assert;
+import org.junit.BeforeClass;
+import org.junit.Test;
+
+public class ValidationWithAttachmentTest {
+
+    static final String PORT = TestUtil.getNewPortNumber(ValidationWithAttachmentTest.class);
+    static final String ADDRESS = ""http://localhost:"" + PORT + ""/"" + ValidationWithAttachmentTest.class.getSimpleName();
+
+    static Server server;
+    static AttachmentService client;
+
+    @BeforeClass
+    public static void setUp() {
+        initServer();
+        initClient();
+    }
+
+    @AfterClass
+    public static void tearDown() {
+        server.stop();
+    }
+
+    @Test
+    public void test() throws Exception {
+        Request request = new Request();
+        request.setContent(new DataHandler(""test"", ""text/plain""));
+
+        int bytes = client.test(request);
+        Assert.assertTrue(""Attachment data were not received"", bytes > 0);
+    }
+
+    private static void initServer() {
+        JaxWsServerFactoryBean factory = new JaxWsServerFactoryBean();
+        factory.setServiceClass(AttachmentServiceImpl.class);
+        factory.setAddress(ADDRESS);
+        factory.setServiceBean(new AttachmentServiceImpl());
+        server = factory.create();
+    }
+
+    private static void initClient() {
+        JaxWsProxyFactoryBean clientFactory = new JaxWsProxyFactoryBean();
+        clientFactory.setServiceClass(AttachmentService.class);
+        clientFactory.setAddress(ADDRESS);
+        client = (AttachmentService) clientFactory.create();
+
+        //enable MTOM in client
+        BindingProvider bp = (BindingProvider) client;
+        SOAPBinding binding = (SOAPBinding) bp.getBinding();
+        binding.setMTOMEnabled(true);
+    }
+}


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","12/Jul/18 06:12;deki;[~thofman] there is a report that it no longer works without schema validation: https://stackoverflow.com/questions/51216192/spring-boot-apache-cxf-3-2-5-with-mtom-sends-empty-attachment

Could you please take a look?","12/Jul/18 09:55;thofman;Sure, checking it out.","13/Jul/18 14:40;thofman;There isn't much detail in the report but I gather that the reported had to enable request validation on the client side to make attachments transfer working. His server implementation is non Java.

I tried to extend my test case [1] to involve some basic use cases with enabled client side validation. I tried to use simple-fronted client and jaxws client. Everything appears to be working fine. Concerning my original fix, I verified again that the reproducer is passing in both cases with validation enabled and disabled.

Could someone perhaps review the test to check that I'm not doing some nonsense or suggest other things to test? I'm not very familiar with various frontends offered by CXF. I didn't manage for instance to make simple-fronted client pass server side validation at all, and had various issues with server reading empty request because of simple-frontend client sending objects with different namespace, or method arguments being named differently (""arg0"" vs ""request""). It could be that the reporter is facing something similar.

[1] https://github.com/TomasHofman/cxf/commit/b1ad08217e901d15d570c651042550c869cd93cd",,,,,,,,,,,,,,,,,,,,
WrappedAttachments.toArray failure,CXF-7754,13165001,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,dkulp,dkulp,08/Jun/18 19:13,08/Jun/18 19:36,14/Mar/19 02:31,08/Jun/18 19:36,,,,3.1.16,3.2.5,,,,,0,,,,,"If you put a Map<String,DataHandler> into the JAX-WS context for attachment, then later query the attachments, the resulting WrappedAttachments has a toArray method that will fail if passed an improper sized array.",,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,2018-06-08 19:13:45.0,,,,,,0|i3uo93:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Codegen plugin can't work with empty extraarg tag,CXF-7751,13163476,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Critical,Fixed,dkulp,Pushkin,Pushkin,01/Jun/18 16:35,04/Jun/18 23:49,14/Mar/19 02:31,04/Jun/18 23:49,3.1.6,3.2.4,,3.1.16,3.2.5,,Build system,,,0,,,,," 

I use cxf codegen plugin and i have separate maven profile to generate code by wsdl. My problem in extraarg tag.

i have soap connectors, that have pom where is configuration of codegen plugin. When project runnnig with generate code by wsdl profile ${wsdl.extraarg.keep} equal ""-keep."" And that good work.

When runnig another maven profile my ${wsdl.extraarg.keep} don't initialize and in codegen in extraarg put emty  string "" "".
{code:java}
<plugin>
    <groupId>org.apache.cxf</groupId>
    <artifactId>cxf-codegen-plugin</artifactId>
    <version>3.1.6</version>
    <executions>
        <execution>
            <id>generate-sources</id>
            <phase>generate-sources</phase>
            <configuration>
                <sourceRoot>src/main/java</sourceRoot>
                <wsdlOptions>
                    <wsdlOption>
                        <wsdl>
                          ../wsdl//ReferenceDataService.wsdl
                        </wsdl>
                        <extraargs> 
                            <extraarg>${wsdl.extraarg.keep}</extraarg>
                        </extraargs>
                    </wsdlOption>
                </wsdlOptions>
                <encoding>UTF-8</encoding>
            </configuration>
            <goals>
                <goal>wsdl2java</goal>
            </goals>
        </execution>
    </executions>
</plugin>
{code}
In result i have error.

 [ERROR] Failed to execute goal org.apache.cxf:cxf-codegen-plugin:3.1.6:wsdl2java (generate-sources) on project test-project: Execution generate-sources of goal org.apache.cxf:cxf-codegen-plugin:3.1.6:wsdl2java failed: org.apache.cxf.tools.common.toolspec.parser.BadUsageException: Unexpected argument: [file:/C:/Projects/test/backend/soap-connectors/wsdl/ReferenceDataService.wsdl|file:///C:/Projects/test/backend/soap-connectors/wsdl/ReferenceDataService.wsdl]

it's couse emppty is ""The path and name of the WSDL file to use in generating the code.""

 Okey. I cheat and use that: 
{code:java}
<plugin>
    <groupId>org.apache.cxf</groupId>
    <artifactId>cxf-codegen-plugin</artifactId>
    <version>3.2.4</version>
    <executions>
        <execution>
            <id>generate-sources</id>
            <phase>generate-sources</phase>
            <configuration>
                <sourceRoot>src/main/java</sourceRoot>
                <wsdlOptions>
                    <wsdlOption>
                        <wsdl>
                          ../wsdl//ReferenceDataService.wsdl
                        </wsdl>
                        <extraargs>
                            <extraarg>../wsdl//ReferenceDataService.wsdl</extraarg> 
                            <extraarg>${wsdl.extraarg.keep}</extraarg>
                        </extraargs>
                    </wsdlOption>
                </wsdlOptions>
                <encoding>UTF-8</encoding>
            </configuration>
            <goals>
                <goal>wsdl2java</goal>
            </goals>
        </execution>
    </executions>
</plugin>{code}
In result i have error ""Unexpected argument"" with empty string.

[ERROR] Failed to execute goal org.apache.cxf:cxf-codegen-plugin:3.2.4:wsdl2java (generate-sources) on project test-project: Execution generate-sources of goal org.apache.cxf:cxf-codegen-plugin:3.2.4:wsdl2java failed: org.apache.cxf.tools.common.toolspec.parser.BadUsageException: Unexpected argument:",,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Guru,,,,,,,,,,,,9223372036854775807,,,2018-06-01 16:35:32.0,,,,,,0|i3ueuv:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FileUtils.maybeDeleteDefaultTempDir causes an IllegalStateException if it tries to remove the shutdown hook while the JVM is already shutting down,CXF-7747,13162852,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,coheigea,gejiang,gejiang,30/May/18 09:23,05/Jun/18 08:29,14/Mar/19 02:31,01/Jun/18 12:13,3.2.4,,,3.1.16,3.2.5,,,,,0,,,,,"I have seen this error in Jetty after a failsafe junit validation test suite finishes. 

2018-05-23T13:58:07,188 +147913 [Thread-28] WARN  org.eclipse.jetty.servlet.ServletHolder - []: 
java.lang.IllegalStateException: Shutdown in progress
    at java.lang.ApplicationShutdownHooks.remove(ApplicationShutdownHooks.java:82) ~[?:1.8.0_144]
    at java.lang.Runtime.removeShutdownHook(Runtime.java:239) ~[?:1.8.0_144]
    at org.apache.cxf.helpers.FileUtils.maybeDeleteDefaultTempDir(FileUtils.java:122) ~[cxf-core-3.1.14.jar:3.1.14]
    at org.apache.cxf.transport.servlet.AbstractHTTPServlet.destroy(AbstractHTTPServlet.java:128) ~[cxf-rt-transports-http-3.1.14.jar:3.1.14]
    at org.apache.cxf.transport.servlet.CXFNonSpringServlet.destroy(CXFNonSpringServlet.java:214) ~[cxf-rt-transports-http-3.1.14.jar:3.1.14]
    at org.eclipse.jetty.servlet.ServletHolder.destroyInstance(ServletHolder.java:475) ~[jetty-servlet-9.3.11.v20160721.jar:9.3.11.v20160721]
    at org.eclipse.jetty.servlet.ServletHolder.doStop(ServletHolder.java:446) [jetty-servlet-9.3.11.v20160721.jar:9.3.11.v20160721]
    at org.eclipse.jetty.util.component.AbstractLifeCycle.stop(AbstractLifeCycle.java:89) [jetty-util-9.3.11.v20160721.jar:9.3.11.v20160721]
    at org.eclipse.jetty.servlet.ServletHandler.doStop(ServletHandler.java:281) [jetty-servlet-9.3.11.v20160721.jar:9.3.11.v20160721]
    at org.eclipse.jetty.util.component.AbstractLifeCycle.stop(AbstractLifeCycle.java:89) [jetty-util-9.3.11.v20160721.jar:9.3.11.v20160721]
    at org.eclipse.jetty.util.component.ContainerLifeCycle.stop(ContainerLifeCycle.java:143) [jetty-util-9.3.11.v20160721.jar:9.3.11.v20160721]
    at org.eclipse.jetty.util.component.ContainerLifeCycle.doStop(ContainerLifeCycle.java:161) [jetty-util-9.3.11.v20160721.jar:9.3.11.v20160721]
    at org.eclipse.jetty.server.handler.AbstractHandler.doStop(AbstractHandler.java:73) [jetty-server-9.3.11.v20160721.jar:9.3.11.v20160721]
    at org.eclipse.jetty.security.SecurityHandler.doStop(SecurityHandler.java:381) [jetty-security-9.3.11.v20160721.jar:9.3.11.v20160721]
    at org.eclipse.jetty.security.ConstraintSecurityHandler.doStop(ConstraintSecurityHandler.java:456) [jetty-security-9.3.11.v20160721.jar:9.3.11.v20160721]
    at org.eclipse.jetty.util.component.AbstractLifeCycle.stop(AbstractLifeCycle.java:89) [jetty-util-9.3.11.v20160721.jar:9.3.11.v20160721]
    at org.eclipse.jetty.util.component.ContainerLifeCycle.stop(ContainerLifeCycle.java:143) [jetty-util-9.3.11.v20160721.jar:9.3.11.v20160721]
    at org.eclipse.jetty.util.component.ContainerLifeCycle.doStop(ContainerLifeCycle.java:161) [jetty-util-9.3.11.v20160721.jar:9.3.11.v20160721]
    at org.eclipse.jetty.server.handler.AbstractHandler.doStop(AbstractHandler.java:73) [jetty-server-9.3.11.v20160721.jar:9.3.11.v20160721]
    at org.eclipse.jetty.server.session.SessionHandler.doStop(SessionHandler.java:127) [jetty-server-9.3.11.v20160721.jar:9.3.11.v20160721]
    at org.eclipse.jetty.util.component.AbstractLifeCycle.stop(AbstractLifeCycle.java:89) [jetty-util-9.3.11.v20160721.jar:9.3.11.v20160721]
    at org.eclipse.jetty.util.component.ContainerLifeCycle.stop(ContainerLifeCycle.java:143) [jetty-util-9.3.11.v20160721.jar:9.3.11.v20160721]
    at org.eclipse.jetty.util.component.ContainerLifeCycle.doStop(ContainerLifeCycle.java:161) [jetty-util-9.3.11.v20160721.jar:9.3.11.v20160721]
    at org.eclipse.jetty.server.handler.AbstractHandler.doStop(AbstractHandler.java:73) [jetty-server-9.3.11.v20160721.jar:9.3.11.v20160721]
    at org.eclipse.jetty.server.handler.ContextHandler.stopContext(ContextHandler.java:825) [jetty-server-9.3.11.v20160721.jar:9.3.11.v20160721]
    at org.eclipse.jetty.servlet.ServletContextHandler.stopContext(ServletContextHandler.java:356) [jetty-servlet-9.3.11.v20160721.jar:9.3.11.v20160721]
    at org.eclipse.jetty.webapp.WebAppContext.stopWebapp(WebAppContext.java:1410) [jetty-webapp-9.3.11.v20160721.jar:9.3.11.v20160721]
    at org.eclipse.jetty.webapp.WebAppContext.stopContext(WebAppContext.java:1374) [jetty-webapp-9.3.11.v20160721.jar:9.3.11.v20160721]
    at org.eclipse.jetty.server.handler.ContextHandler.doStop(ContextHandler.java:880) [jetty-server-9.3.11.v20160721.jar:9.3.11.v20160721]
    at org.eclipse.jetty.servlet.ServletContextHandler.doStop(ServletContextHandler.java:272) [jetty-servlet-9.3.11.v20160721.jar:9.3.11.v20160721]
    at org.eclipse.jetty.webapp.WebAppContext.doStop(WebAppContext.java:544) [jetty-webapp-9.3.11.v20160721.jar:9.3.11.v20160721]
    at org.eclipse.jetty.util.component.AbstractLifeCycle.stop(AbstractLifeCycle.java:89) [jetty-util-9.3.11.v20160721.jar:9.3.11.v20160721]
    at org.eclipse.jetty.util.component.ContainerLifeCycle.stop(ContainerLifeCycle.java:143) [jetty-util-9.3.11.v20160721.jar:9.3.11.v20160721]
    at org.eclipse.jetty.util.component.ContainerLifeCycle.doStop(ContainerLifeCycle.java:161) [jetty-util-9.3.11.v20160721.jar:9.3.11.v20160721]
    at org.eclipse.jetty.server.handler.AbstractHandler.doStop(AbstractHandler.java:73) [jetty-server-9.3.11.v20160721.jar:9.3.11.v20160721]
    at org.eclipse.jetty.server.Server.doStop(Server.java:482) [jetty-server-9.3.11.v20160721.jar:9.3.11.v20160721]
    at org.eclipse.jetty.util.component.AbstractLifeCycle.stop(AbstractLifeCycle.java:89) [jetty-util-9.3.11.v20160721.jar:9.3.11.v20160721]
    at org.springframework.boot.context.embedded.jetty.JettyEmbeddedServletContainer.stop(JettyEmbeddedServletContainer.java:201) [spring-boot-1.4.1.RELEASE.jar:1.4.1.RELEASE]
    at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.stopAndReleaseEmbeddedServletContainer(EmbeddedWebApplicationContext.java:306) [spring-boot-1.4.1.RELEASE.jar:1.4.1.RELEASE]
    at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.onClose(EmbeddedWebApplicationContext.java:155) [spring-boot-1.4.1.RELEASE.jar:1.4.1.RELEASE]
    at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1014) [spring-context-4.3.14.RELEASE.jar:4.3.14.RELEASE]
    at org.springframework.context.support.AbstractApplicationContext$2.run(AbstractApplicationContext.java:929) [spring-context-4.3.14.RELEASE.jar:4.3.14.RELEASE]","Java: jdk1.8.0_144

Spring-boot: 1.4.1

CXF: 2.1.4

Jetty: 9.3.11.v20160721

Operating system: Windows 7",,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-05-30 13:24:57.221,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Tue Jun 05 08:29:52 UTC 2018,,,,,,0|i3ub07:,9223372036854775807,,,,,,,,30/May/18 13:24;coheigea;Can you try it with CXF 3.2.4 instead in case it's already been fixed?,01/Jun/18 06:59;gejiang;I have already tried it. This problem still exists.,05/Jun/18 06:04;gejiang;How do I see the corresponding modified code in the CXF project? The latest tag in the project is cxf-3.2.4.,05/Jun/18 08:29;coheigea;It's fixed on the CXF master branch. 3.2.5 will be released in a couple of weeks.,,,,,,,,,,,,,,,,,,,,,,,,,,
Swagger2Feature - SwaggerUiResolver & JBoss 7.0 EAP,CXF-7746,13162589,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,deki,Edumdum,Edumdum,29/May/18 13:42,05/Jun/18 13:11,14/Mar/19 02:31,05/Jun/18 13:11,3.2.4,,,3.2.5,,,JAX-RS,,,1,,,,,"Hi,

Same problem as CXF-7474, but for JBoss EAP 7.0 & CXF 3.2.4.

The SwaggerUiResolver is not able to find the swagger-ui jar, included in our war via maven; the path returned by the class loader ends with "".jar/"" instead of the expected "".jar"" or "".jar!/"".

To bypass the problem, we modified the checkUiRoot as follow:
{code:java}
// Artifact: cxf-rt-rs-service-description-swagger
// Class: org.apache.cxf.jaxrs.swagger.SwaggerUiResolver
protected static String checkUiRoot(String urlStr, String swaggerUiVersion)
{
  int swaggerUiIndex = urlStr.lastIndexOf(""/swagger-ui-"");
  if (swaggerUiIndex != -1)
  {
    boolean urlEndsWithJarSep = urlStr.endsWith("".jar!/"");
    int offset = -1;

    if (urlEndsWithJarSep || urlStr.endsWith("".jar""))
    {
      offset = urlEndsWithJarSep ? 6 : 4;
    }
    else if (urlStr.endsWith("".jar/""))
    {
      offset = 5;
      urlEndsWithJarSep = true;
    }

    if (offset > -1)
    {
      String version = urlStr.substring(swaggerUiIndex + 12, urlStr.length() - offset);
      if (swaggerUiVersion != null && !swaggerUiVersion.equals(version))
      {
        return null;
      }
      else
      {
        if (!urlEndsWithJarSep)
        {
          urlStr = ""jar:"" + urlStr + ""!/"";
        }

        return urlStr + ""META-INF/resources/webjars/swagger-ui/"" + version + ""/"";
      }
    }
  }

  return null;
}
{code}
 ",,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-06-02 05:17:10.305,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Tue Jun 05 13:11:09 UTC 2018,,,,,,0|i3u9dz:,9223372036854775807,,,,,,,,"02/Jun/18 05:17;deki;Could you create a pull request for it? [https://github.com/apache/cxf/pulls]

Please optimize the code by using the existing constant {color:#660e7a}UI_RESOURCES_ROOT_START {color}and maybe add some more constants for the ""magic numbers"".","05/Jun/18 11:57;githubbot;EDumdum opened a new pull request #422: CXF-7746 Swagger2Feature - SwaggerUiResolver & JBoss 7.0 EAP
URL: https://github.com/apache/cxf/pull/422
 
 
   Add support for JBoss 7.0 EAP class loader which is returning an url ending with "".jar/"" instead of the expected "".jar"" or "".jar!/""

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","05/Jun/18 13:10;githubbot;deki closed pull request #422: CXF-7746 Swagger2Feature - SwaggerUiResolver & JBoss 7.0 EAP
URL: https://github.com/apache/cxf/pull/422
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/rt/rs/description-swagger-ui/src/main/java/org/apache/cxf/jaxrs/swagger/SwaggerUiResolver.java b/rt/rs/description-swagger-ui/src/main/java/org/apache/cxf/jaxrs/swagger/SwaggerUiResolver.java
index 331e9f35643..d6b306d6870 100644
--- a/rt/rs/description-swagger-ui/src/main/java/org/apache/cxf/jaxrs/swagger/SwaggerUiResolver.java
+++ b/rt/rs/description-swagger-ui/src/main/java/org/apache/cxf/jaxrs/swagger/SwaggerUiResolver.java
@@ -58,19 +58,15 @@ public String findSwaggerUiRootInternal(String swaggerUiMavenGroupAndArtifact,
 
     protected static String checkUiRoot(String urlStr, String swaggerUiVersion) {
         int swaggerUiIndex = urlStr.lastIndexOf(""/swagger-ui-"");
-        if (swaggerUiIndex != -1) {
-            boolean urlEndsWithJarSep = urlStr.endsWith("".jar!/"");
-            if (urlEndsWithJarSep || urlStr.endsWith("".jar"")) {
-                int offset = urlEndsWithJarSep ? 6 : 4;
-                String version = urlStr.substring(swaggerUiIndex + 12, urlStr.length() - offset);
-                if (swaggerUiVersion != null && !swaggerUiVersion.equals(version)) {
-                    return null;
-                }
-                if (!urlEndsWithJarSep) {
-                    urlStr = ""jar:"" + urlStr + ""!/"";
-                }
-                return urlStr + UI_RESOURCES_ROOT_START + version + ""/"";
+        if (swaggerUiIndex != -1 && urlStr.matches(""^.*\\.jar!?/?$"")) {
+            String version = urlStr.substring(swaggerUiIndex + 12, urlStr.lastIndexOf("".jar""));
+            if (swaggerUiVersion != null && !swaggerUiVersion.equals(version)) {
+                return null;
+            }
+            if (!urlStr.endsWith(""/"")) {
+                urlStr = ""jar:"" + urlStr + ""!/"";
             }
+            return urlStr + UI_RESOURCES_ROOT_START + version + ""/"";
         }
         return null;
     }


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","05/Jun/18 13:11;deki;Thanks for you contribution. I've merged the changes, will be part of the next release.",,,,,,,,,,,,,,,,,,,,,,,,,,
NPE thrown from MAPAggregatorImpl when replyto is non-anonymous and faultto doesn't exists ,CXF-7745,13162338,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,ema,ema,ema,28/May/18 07:19,01/Jun/18 04:10,14/Mar/19 02:31,01/Jun/18 04:10,3.2.4,,,3.2.5,,,WS-* Components,,,0,,,,,"MAPAggregatorImpl checks the following Soap message and throws NPE : 
<S:Envelope xmlns:S=""http://schemas.xmlsoap.org/soap/envelope/"">

        <S:Header>
              <To xmlns=""http://www.w3.org/2005/08/addressing"">http://localhost:8080/AddNumbers4</To>
              <MessageID xmlns=""http://www.w3.org/2005/08/addressing"">uuid:b962c6ff-708d-4b4b-8158-dff3f13d17b6</MessageID>
              <ReplyTo xmlns=""http://www.w3.org/2005/08/addressing""><Address>http://localhost:1025/NonAnonymous</Address></ReplyTo>
              <Action xmlns=""http://www.w3.org/2005/08/addressing"">http://example.com/action/add</Action>
        </S:Header>

       <S:Body><addNumbers xmlns=""http://example.com/""><number1>10</number1><number2>10</number2></addNumbers></S:Body></S:Envelope>

java.lang.NullPointerException
	at org.apache.cxf.ws.addressing.impl.MAPAggregatorImpl.checkAddressingResponses(MAPAggregatorImpl.java:580)
	at org.apache.cxf.ws.addressing.impl.MAPAggregatorImpl.mediate(MAPAggregatorImpl.java:451)
	at org.apache.cxf.ws.addressing.impl.MAPAggregatorImpl.handleMessage(MAPAggregatorImpl.java:143)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:308)
	at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:121)
	at org.apache.cxf.transport.http.AbstractHTTPDestination.invoke(AbstractHTTPDestination.java:267)
	at org.jboss.wsf.stack.cxf.RequestHandlerImpl.handleHttpRequest(RequestHandlerImpl.java:110)
	at org.jboss.wsf.stack.cxf.transport.ServletHelper.callRequestHandler(ServletHelper.java:134)
	at org.jboss.wsf.stack.cxf.CXFServletExt.invoke(CXFServletExt.java:88)
	at org.apache.cxf.transport.servlet.AbstractHTTPServlet.handleRequest(AbstractHTTPServlet.java:301)
	at org.apache.cxf.transport.servlet.AbstractHTTPServlet.doPost(AbstractHTTPServlet.java:220)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:707)
	at org.jboss.wsf.stack.cxf.CXFServletExt.service(CXFServletExt.java:136)
	at org.jboss.wsf.spi.deployment.WSFServlet.service(WSFServlet.java:140)",,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,2018-05-28 07:19:59.0,,,,,,0|i3u7u7:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CdiResourceProvider is not thread safe,CXF-7742,13161017,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,,romain.manni-bucau,romain.manni-bucau,22/May/18 10:10,02/Jun/18 06:47,14/Mar/19 02:31,02/Jun/18 06:47,3.2.4,,,3.2.5,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-05-22 10:11:35.395,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Sat Jun 02 05:20:33 UTC 2018,,,,,,0|i3tzpr:,9223372036854775807,,,,,,,,"22/May/18 10:11;githubbot;rmannibucau opened a new pull request #418: CXF-7742 handling scopes in CdiResourceProvider
URL: https://github.com/apache/cxf/pull/418
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","22/May/18 23:01;githubbot;reta commented on a change in pull request #418: CXF-7742 handling scopes in CdiResourceProvider
URL: https://github.com/apache/cxf/pull/418#discussion_r190079458
 
 

 ##########
 File path: integration/cdi/src/main/java/org/apache/cxf/cdi/CdiResourceProvider.java
 ##########
 @@ -62,6 +95,37 @@ public void releaseInstance(Message m, Object o) {
 
     @Override
     public boolean isSingleton() {
-        return !beanManager.isNormalScope(bean.getScope());
+        return singleton;
+    }
+
+    // warn: several impls use @Dependent == request so we should probably add a flag
+    private boolean isConsideredSingleton() {
+        return Singleton.class == bean.getScope() || Dependent.class == bean.getScope();
+    }
+
+    public abstract static class Lifecycle {
+        BeanManager beanManager;
+        Bean<?> bean;
+        Object instance;
 
 Review comment:
   The `instance` could be removed, right? Since `Lifecycle` for the singleton re-declares it .

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","22/May/18 23:54;githubbot;reta commented on a change in pull request #418: CXF-7742 handling scopes in CdiResourceProvider
URL: https://github.com/apache/cxf/pull/418#discussion_r190088232
 
 

 ##########
 File path: integration/cdi/src/main/java/org/apache/cxf/cdi/JAXRSCdiResourceExtension.java
 ##########
 @@ -303,6 +306,10 @@ public void release(@Observes final BeforeShutdown event) {
             for (final CreationalContext<?> disposableCreationalContext: disposableCreationalContexts) {
                 disposableCreationalContext.release();
             }
+            disposableCreationalContexts.clear();
+        }
+        synchronized (disposableResourceProviders) {
+            disposableResourceProviders.forEach(p -> p.getLifecycle().destroy());
 
 Review comment:
   `disposableResourceProviders.clear()`?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","22/May/18 23:54;githubbot;reta commented on a change in pull request #418: CXF-7742 handling scopes in CdiResourceProvider
URL: https://github.com/apache/cxf/pull/418#discussion_r190088307
 
 

 ##########
 File path: integration/cdi/src/main/java/org/apache/cxf/cdi/JAXRSCdiResourceExtension.java
 ##########
 @@ -372,7 +379,14 @@ private ClassifiedClasses classes2singletons(final Application application, fina
 
             for (final Bean< ? > bean: serviceBeans) {
                 if (classes.contains(bean.getBeanClass())) {
-                    classified.addResourceProvider(new CdiResourceProvider(beanManager, bean));
+                    final CdiResourceProvider provider = new CdiResourceProvider(beanManager, bean);
+                    // if not a singleton we manage it per request
+                    // if @Singleton the container handles it
+                    // so we only need this case here
+                    if (provider.isSingleton() && Dependent.class == bean.getScope()) {
+                        disposableResourceProviders.add(provider);
 
 Review comment:
   ```
   synchronized (disposableResourceProviders) {
       disposableResourceProviders.add(provider);
   }
   ```

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","22/May/18 23:55;githubbot;reta commented on a change in pull request #418: CXF-7742 handling scopes in CdiResourceProvider
URL: https://github.com/apache/cxf/pull/418#discussion_r190088307
 
 

 ##########
 File path: integration/cdi/src/main/java/org/apache/cxf/cdi/JAXRSCdiResourceExtension.java
 ##########
 @@ -372,7 +379,14 @@ private ClassifiedClasses classes2singletons(final Application application, fina
 
             for (final Bean< ? > bean: serviceBeans) {
                 if (classes.contains(bean.getBeanClass())) {
-                    classified.addResourceProvider(new CdiResourceProvider(beanManager, bean));
+                    final CdiResourceProvider provider = new CdiResourceProvider(beanManager, bean);
+                    // if not a singleton we manage it per request
+                    // if @Singleton the container handles it
+                    // so we only need this case here
+                    if (provider.isSingleton() && Dependent.class == bean.getScope()) {
+                        disposableResourceProviders.add(provider);
 
 Review comment:
   ```
   synchronized (disposableResourceProviders) {
       disposableResourceProviders.add(provider);
   }
   ```
   ?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","23/May/18 00:02;githubbot;reta commented on issue #418: CXF-7742 handling scopes in CdiResourceProvider
URL: https://github.com/apache/cxf/pull/418#issuecomment-391178510
 
 
   @rmannibucau Looks good, a few minor comments, I am wondering if it worth creating a test case for different resource providers? 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","23/May/18 00:02;githubbot;reta commented on issue #418: CXF-7742 handling scopes in CdiResourceProvider
URL: https://github.com/apache/cxf/pull/418#issuecomment-391178510
 
 
   @rmannibucau Looks good, a few minor comments, I am wondering if it worth creating a test case for different beans backed by resource providers? 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","23/May/18 00:03;githubbot;reta commented on issue #418: CXF-7742 handling scopes in CdiResourceProvider
URL: https://github.com/apache/cxf/pull/418#issuecomment-391178510
 
 
   @rmannibucau Looks good, a few minor comments, I am wondering if it's worth creating a test case for different beans backed by resource providers? 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","23/May/18 06:44;githubbot;rmannibucau commented on a change in pull request #418: CXF-7742 handling scopes in CdiResourceProvider
URL: https://github.com/apache/cxf/pull/418#discussion_r190137393
 
 

 ##########
 File path: integration/cdi/src/main/java/org/apache/cxf/cdi/JAXRSCdiResourceExtension.java
 ##########
 @@ -372,7 +379,14 @@ private ClassifiedClasses classes2singletons(final Application application, fina
 
             for (final Bean< ? > bean: serviceBeans) {
                 if (classes.contains(bean.getBeanClass())) {
-                    classified.addResourceProvider(new CdiResourceProvider(beanManager, bean));
+                    final CdiResourceProvider provider = new CdiResourceProvider(beanManager, bean);
+                    // if not a singleton we manage it per request
+                    // if @Singleton the container handles it
+                    // so we only need this case here
+                    if (provider.isSingleton() && Dependent.class == bean.getScope()) {
+                        disposableResourceProviders.add(provider);
 
 Review comment:
   Oh good catch, copied the pattern of disposableCreationalContexts but actually we don't need that for that list which is just used in the context of the extension so thread safe, will clean up

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","23/May/18 07:29;githubbot;rmannibucau commented on issue #418: CXF-7742 handling scopes in CdiResourceProvider
URL: https://github.com/apache/cxf/pull/418#issuecomment-391248360
 
 
   @reta I updated the PR, I split the provider for singletons and per request handling, it looks easier to me to follow what is done and avoid to be tempted to be back to something not thread safe, I added a test on the scope handling too

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","23/May/18 10:36;githubbot;reta commented on a change in pull request #418: CXF-7742 handling scopes in CdiResourceProvider
URL: https://github.com/apache/cxf/pull/418#discussion_r190199396
 
 

 ##########
 File path: integration/cdi/src/main/java/org/apache/cxf/cdi/SingletonResourceProvider.java
 ##########
 @@ -0,0 +1,52 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.cxf.cdi;
+
+import org.apache.cxf.jaxrs.lifecycle.ResourceProvider;
+import org.apache.cxf.message.Message;
+
+public class SingletonResourceProvider implements ResourceProvider {
+    private final Class<?> clazz;
+    private Object instance;
+
+    SingletonResourceProvider(final Lifecycle lifecycle, final Class<?> clazz) {
+        this.instance = lifecycle.create();
 
 Review comment:
   Should we create instance proactively here? It is simpler like that but it may not be needed (in theory, at least) 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","23/May/18 10:38;githubbot;reta commented on issue #418: CXF-7742 handling scopes in CdiResourceProvider
URL: https://github.com/apache/cxf/pull/418#issuecomment-391301940
 
 
   @rmannibucau Looks better like that, with providers split between different classes

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","23/May/18 12:39;githubbot;rmannibucau commented on a change in pull request #418: CXF-7742 handling scopes in CdiResourceProvider
URL: https://github.com/apache/cxf/pull/418#discussion_r190229459
 
 

 ##########
 File path: integration/cdi/src/main/java/org/apache/cxf/cdi/SingletonResourceProvider.java
 ##########
 @@ -0,0 +1,52 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.cxf.cdi;
+
+import org.apache.cxf.jaxrs.lifecycle.ResourceProvider;
+import org.apache.cxf.message.Message;
+
+public class SingletonResourceProvider implements ResourceProvider {
+    private final Class<?> clazz;
+    private Object instance;
+
+    SingletonResourceProvider(final Lifecycle lifecycle, final Class<?> clazz) {
+        this.instance = lifecycle.create();
 
 Review comment:
   Well for all normal scoped beans it is still lazy thanks to CDI proxies and for @Singleton/@Dependent it becomes eager but it is ok from a business perspective + the extension already does it in several cases so not a big deal IMHO.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","23/May/18 22:22;githubbot;reta commented on a change in pull request #418: CXF-7742 handling scopes in CdiResourceProvider
URL: https://github.com/apache/cxf/pull/418#discussion_r190417582
 
 

 ##########
 File path: integration/cdi/src/main/java/org/apache/cxf/cdi/SingletonResourceProvider.java
 ##########
 @@ -0,0 +1,52 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.cxf.cdi;
+
+import org.apache.cxf.jaxrs.lifecycle.ResourceProvider;
+import org.apache.cxf.message.Message;
+
+public class SingletonResourceProvider implements ResourceProvider {
+    private final Class<?> clazz;
+    private Object instance;
+
+    SingletonResourceProvider(final Lifecycle lifecycle, final Class<?> clazz) {
+        this.instance = lifecycle.create();
 
 Review comment:
   :+1: 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","24/May/18 17:43;githubbot;rmannibucau commented on issue #418: CXF-7742 handling scopes in CdiResourceProvider
URL: https://github.com/apache/cxf/pull/418#issuecomment-391800594
 
 
   Anything preventing a merge or are we good to go like that? (No pression, just checking if something is expected from my side)

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","24/May/18 21:46;githubbot;reta commented on issue #418: CXF-7742 handling scopes in CdiResourceProvider
URL: https://github.com/apache/cxf/pull/418#issuecomment-391874736
 
 
   @rmannibucau Looks good to me, do you want me to merge?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","24/May/18 22:16;githubbot;rmannibucau commented on issue #418: CXF-7742 handling scopes in CdiResourceProvider
URL: https://github.com/apache/cxf/pull/418#issuecomment-391883148
 
 
   @reta if possible, sure. Thanks a lot.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","24/May/18 23:03;githubbot;reta closed pull request #418: CXF-7742 handling scopes in CdiResourceProvider
URL: https://github.com/apache/cxf/pull/418
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/integration/cdi/src/main/java/org/apache/cxf/cdi/JAXRSCdiResourceExtension.java b/integration/cdi/src/main/java/org/apache/cxf/cdi/JAXRSCdiResourceExtension.java
index d2b76dbd5cd..9c5b48c9e31 100644
--- a/integration/cdi/src/main/java/org/apache/cxf/cdi/JAXRSCdiResourceExtension.java
+++ b/integration/cdi/src/main/java/org/apache/cxf/cdi/JAXRSCdiResourceExtension.java
@@ -29,6 +29,7 @@
 import java.util.ServiceLoader;
 import java.util.Set;
 
+import javax.enterprise.context.Dependent;
 import javax.enterprise.context.spi.CreationalContext;
 import javax.enterprise.event.Observes;
 import javax.enterprise.inject.spi.AfterBeanDiscovery;
@@ -45,6 +46,7 @@
 import javax.enterprise.inject.spi.ProcessProducerField;
 import javax.enterprise.inject.spi.ProcessProducerMethod;
 import javax.enterprise.inject.spi.WithAnnotations;
+import javax.inject.Singleton;
 import javax.ws.rs.ApplicationPath;
 import javax.ws.rs.Path;
 import javax.ws.rs.core.Application;
@@ -60,6 +62,7 @@
 import org.apache.cxf.jaxrs.JAXRSServerFactoryBean;
 import org.apache.cxf.jaxrs.ext.ContextClassProvider;
 import org.apache.cxf.jaxrs.ext.JAXRSServerFactoryCustomizationExtension;
+import org.apache.cxf.jaxrs.lifecycle.ResourceProvider;
 import org.apache.cxf.jaxrs.provider.ServerConfigurableFactory;
 import org.apache.cxf.jaxrs.utils.InjectionUtils;
 import org.apache.cxf.jaxrs.utils.JAXRSServerFactoryCustomizationUtils;
@@ -82,6 +85,8 @@
     private final List< Bean< ? extends Feature > > featureBeans = new ArrayList< Bean< ? extends Feature > >();
     private final List< CreationalContext< ? > > disposableCreationalContexts =
         new ArrayList< CreationalContext< ? > >();
+    private final List< Lifecycle > disposableLifecycles =
+        new ArrayList<>();
     private final Set< Type > contextTypes = new LinkedHashSet<>();
 
     private final Collection< String > existingStandardClasses = new HashSet<>();
@@ -93,7 +98,7 @@
     private static class ClassifiedClasses {
         private List< Object > providers = new ArrayList<>();
         private List< Feature > features = new ArrayList<>();
-        private List< CdiResourceProvider > resourceProviders = new ArrayList<>();
+        private List<ResourceProvider> resourceProviders = new ArrayList<>();
 
         public void addProviders(final Collection< Object > others) {
             this.providers.addAll(others);
@@ -103,7 +108,7 @@ public void addFeatures(final Collection< Feature > others) {
             this.features.addAll(others);
         }
 
-        public void addResourceProvider(final CdiResourceProvider other) {
+        public void addResourceProvider(final ResourceProvider other) {
             this.resourceProviders.add(other);
         }
 
@@ -115,7 +120,7 @@ public void addResourceProvider(final CdiResourceProvider other) {
             return features;
         }
 
-        public List<CdiResourceProvider> getResourceProviders() {
+        public List<ResourceProvider> getResourceProviders() {
             return resourceProviders;
         }
     }
@@ -303,7 +308,11 @@ public void release(@Observes final BeforeShutdown event) {
             for (final CreationalContext<?> disposableCreationalContext: disposableCreationalContexts) {
                 disposableCreationalContext.release();
             }
+            disposableCreationalContexts.clear();
         }
+
+        disposableLifecycles.forEach(Lifecycle::destroy);
+        disposableLifecycles.clear();
     }
 
     private Class<?> toClass(String name) {
@@ -347,7 +356,7 @@ private JAXRSServerFactoryBean createFactoryInstance(final Application applicati
         instance.setProviders(classified.getProviders());
         instance.getFeatures().addAll(classified.getFeatures());
 
-        for (final CdiResourceProvider resourceProvider: classified.getResourceProviders()) {
+        for (final ResourceProvider resourceProvider: classified.getResourceProviders()) {
             instance.setResourceProvider(resourceProvider.getResourceClass(), resourceProvider);
         }
 
@@ -372,7 +381,28 @@ private ClassifiedClasses classes2singletons(final Application application, fina
 
             for (final Bean< ? > bean: serviceBeans) {
                 if (classes.contains(bean.getBeanClass())) {
-                    classified.addResourceProvider(new CdiResourceProvider(beanManager, bean));
+                    // normal scoped beans will return us a proxy in getInstance so it is singletons for us,
+                    // @Singleton is indeed a singleton
+                    // @Dependent should be a request scoped instance but for backward compat we kept it a singleton
+                    //
+                    // other scopes are considered request scoped (for jaxrs)
+                    // and are created per request (getInstance/releaseInstance)
+                    final ResourceProvider resourceProvider;
+                    if (isCxfSingleton(beanManager, bean)) {
+                        final Lifecycle lifecycle = new Lifecycle(beanManager, bean);
+                        resourceProvider = new SingletonResourceProvider(lifecycle, bean.getBeanClass());
+
+                        // if not a singleton we manage it per request
+                        // if @Singleton the container handles it
+                        // so we only need this case here
+                        if (Dependent.class == bean.getScope()) {
+                            disposableLifecycles.add(lifecycle);
+                        }
+                    } else {
+                        resourceProvider = new PerRequestResourceProvider(
+                        () -> new Lifecycle(beanManager, bean), bean.getBeanClass());
+                    }
+                    classified.addResourceProvider(resourceProvider);
                 }
             }
         }
@@ -380,6 +410,15 @@ private ClassifiedClasses classes2singletons(final Application application, fina
         return classified;
     }
 
+    boolean isCxfSingleton(final BeanManager beanManager, final Bean<?> bean) {
+        return beanManager.isNormalScope(bean.getScope()) || isConsideredSingleton(bean.getScope());
+    }
+
+    // warn: several impls use @Dependent == request so we should probably add a flag
+    private boolean isConsideredSingleton(final Class<?> scope) {
+        return Singleton.class == scope || Dependent.class == scope;
+    }
+
     /**
      * Load external providers from service loader
      * @return loaded external providers
diff --git a/integration/cdi/src/main/java/org/apache/cxf/cdi/CdiResourceProvider.java b/integration/cdi/src/main/java/org/apache/cxf/cdi/Lifecycle.java
similarity index 59%
rename from integration/cdi/src/main/java/org/apache/cxf/cdi/CdiResourceProvider.java
rename to integration/cdi/src/main/java/org/apache/cxf/cdi/Lifecycle.java
index 68d3b2b75a9..089b25a94f3 100644
--- a/integration/cdi/src/main/java/org/apache/cxf/cdi/CdiResourceProvider.java
+++ b/integration/cdi/src/main/java/org/apache/cxf/cdi/Lifecycle.java
@@ -22,46 +22,28 @@
 import javax.enterprise.inject.spi.Bean;
 import javax.enterprise.inject.spi.BeanManager;
 
-import org.apache.cxf.jaxrs.lifecycle.ResourceProvider;
-import org.apache.cxf.message.Message;
-
-public class CdiResourceProvider implements ResourceProvider {
-    private Object instance;
-    private CreationalContext< ? > context;
-
+class Lifecycle {
     private final BeanManager beanManager;
-    private final Bean< ? > bean;
+    private final Bean<?> bean;
+    private Object instance;
+    private CreationalContext<?> context;
 
-    CdiResourceProvider(final BeanManager beanManager, final Bean< ? > bean) {
+    Lifecycle(final BeanManager beanManager, final Bean<?> bean) {
         this.beanManager = beanManager;
         this.bean = bean;
     }
 
-    @Override
-    public Object getInstance(Message m) {
-        if (instance == null) {
-            context = beanManager.createCreationalContext(bean);
-            instance = beanManager.getReference(bean, bean.getBeanClass(), context);
-        }
-
+    Object create() {
+        context = beanManager.createCreationalContext(bean);
+        instance = beanManager.getReference(bean, bean.getBeanClass(), context);
         return instance;
     }
 
-    @Override
-    public void releaseInstance(Message m, Object o) {
+    void destroy() {
         if (context != null) {
             context.release();
             instance = null;
+            context = null;
         }
     }
-
-    @Override
-    public Class<?> getResourceClass() {
-        return bean.getBeanClass();
-    }
-
-    @Override
-    public boolean isSingleton() {
-        return !beanManager.isNormalScope(bean.getScope());
-    }
-}
+}
\ No newline at end of file
diff --git a/integration/cdi/src/main/java/org/apache/cxf/cdi/PerRequestResourceProvider.java b/integration/cdi/src/main/java/org/apache/cxf/cdi/PerRequestResourceProvider.java
new file mode 100644
index 00000000000..127bf3e102e
--- /dev/null
+++ b/integration/cdi/src/main/java/org/apache/cxf/cdi/PerRequestResourceProvider.java
@@ -0,0 +1,59 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.cxf.cdi;
+
+import java.util.function.Supplier;
+
+import org.apache.cxf.jaxrs.lifecycle.ResourceProvider;
+import org.apache.cxf.message.Message;
+
+public class PerRequestResourceProvider implements ResourceProvider {
+    private final Supplier<Lifecycle> lifecycle;
+    private final Class<?> clazz;
+
+    PerRequestResourceProvider(final Supplier<Lifecycle> lifecycle, final Class<?> clazz) {
+        this.lifecycle = lifecycle;
+        this.clazz = clazz;
+    }
+
+    @Override
+    public Object getInstance(final Message m) {
+        final Lifecycle currentLifecycle = this.lifecycle.get();
+        m.put(Lifecycle.class, currentLifecycle);
+        return currentLifecycle.create();
+    }
+
+    @Override
+    public void releaseInstance(final Message m, final Object o) {
+        final Lifecycle contextualLifecycle = m.get(Lifecycle.class);
+        if (contextualLifecycle != null) {
+            contextualLifecycle.destroy();
+        }
+    }
+
+    @Override
+    public Class<?> getResourceClass() {
+        return clazz;
+    }
+
+    @Override
+    public boolean isSingleton() {
+        return false;
+    }
+}
diff --git a/integration/cdi/src/main/java/org/apache/cxf/cdi/SingletonResourceProvider.java b/integration/cdi/src/main/java/org/apache/cxf/cdi/SingletonResourceProvider.java
new file mode 100644
index 00000000000..8b7e02f0fa3
--- /dev/null
+++ b/integration/cdi/src/main/java/org/apache/cxf/cdi/SingletonResourceProvider.java
@@ -0,0 +1,52 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.cxf.cdi;
+
+import org.apache.cxf.jaxrs.lifecycle.ResourceProvider;
+import org.apache.cxf.message.Message;
+
+public class SingletonResourceProvider implements ResourceProvider {
+    private final Class<?> clazz;
+    private Object instance;
+
+    SingletonResourceProvider(final Lifecycle lifecycle, final Class<?> clazz) {
+        this.instance = lifecycle.create();
+        this.clazz = clazz;
+    }
+
+    @Override
+    public Object getInstance(final Message m) {
+        return instance;
+    }
+
+    @Override
+    public void releaseInstance(final Message m, final Object o) {
+        // no-op
+    }
+
+    @Override
+    public Class<?> getResourceClass() {
+        return clazz;
+    }
+
+    @Override
+    public boolean isSingleton() {
+        return true;
+    }
+}
diff --git a/integration/cdi/src/test/java/org/apache/cxf/cdi/CdiResourceProviderTest.java b/integration/cdi/src/test/java/org/apache/cxf/cdi/CdiResourceProviderTest.java
new file mode 100644
index 00000000000..3c471980e35
--- /dev/null
+++ b/integration/cdi/src/test/java/org/apache/cxf/cdi/CdiResourceProviderTest.java
@@ -0,0 +1,125 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.cxf.cdi;
+
+import java.lang.annotation.Documented;
+
+import javax.enterprise.context.ApplicationScoped;
+import javax.enterprise.context.NormalScope;
+import javax.enterprise.context.RequestScoped;
+import javax.enterprise.inject.spi.Bean;
+import javax.enterprise.inject.spi.BeanManager;
+import javax.inject.Singleton;
+
+import org.apache.cxf.jaxrs.lifecycle.ResourceProvider;
+import org.apache.cxf.message.MessageImpl;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.mockito.junit.MockitoJUnitRunner;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertNotEquals;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertTrue;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.eq;
+import static org.mockito.Mockito.when;
+
+@SuppressWarnings({""rawtypes"", ""unchecked""})
+@RunWith(MockitoJUnitRunner.class)
+public class CdiResourceProviderTest {
+    @Mock
+    private BeanManager beanManager;
+
+    @Mock
+    private Bean<?> bean;
+
+    @Before
+    public void setup() {
+        final Class beanClass = Object.class;
+        when(bean.getBeanClass()).thenReturn(beanClass);
+        when(beanManager.isNormalScope(any())).thenAnswer(invocationOnMock ->
+                Class.class.cast(invocationOnMock.getArguments()[0]).isAnnotationPresent(NormalScope.class));
+        when(beanManager.getReference(eq(bean), eq(beanClass), any()))
+                .thenAnswer(i -> new Object()); // ensure to create one instance per call, this is what we test
+    }
+
+    @Test
+    public void normalScoped() {
+        when(bean.getScope()).thenReturn(Class.class.cast(ApplicationScoped.class));
+        assertSingleton();
+    }
+
+    @Test
+    public void singleton() {
+        when(bean.getScope()).thenReturn(Class.class.cast(Singleton.class));
+        assertSingleton();
+    }
+
+    @Test
+    public void dependent() {
+        when(bean.getScope()).thenReturn(Class.class.cast(Singleton.class));
+        assertSingleton();
+    }
+
+    @Test
+    public void requestScoped() {
+        when(bean.getScope()).thenReturn(Class.class.cast(RequestScoped.class));
+        assertSingleton(); // yes, this is a singleton since we look up the proxy
+    }
+
+    @Test
+    public void perRequest() {
+        // not a scope so will be considered as a not singleton bean
+        when(bean.getScope()).thenReturn(Class.class.cast(Documented.class));
+        assertNotSingleton();
+    }
+
+    private void assertNotSingleton() {
+        final ResourceProvider provider = new PerRequestResourceProvider(
+        () -> new Lifecycle(beanManager, bean), Object.class);
+        assertFalse(new JAXRSCdiResourceExtension().isCxfSingleton(beanManager, bean));
+        assertFalse(provider.isSingleton());
+
+        final MessageImpl message1 = new MessageImpl();
+        final MessageImpl message2 = new MessageImpl();
+        final Object instance = provider.getInstance(message1);
+        assertNotNull(instance);
+        assertNotEquals(provider.getInstance(message1), provider.getInstance(message2));
+
+        // ensure we can close the lifecycle
+        final Lifecycle lifecycle1 = message1.get(Lifecycle.class);
+        assertNotNull(lifecycle1);
+        assertNotNull(message2.get(Lifecycle.class));
+    }
+
+    private void assertSingleton() {
+        final ResourceProvider provider = new SingletonResourceProvider(new Lifecycle(beanManager, bean), Object.class);
+        assertTrue(new JAXRSCdiResourceExtension().isCxfSingleton(beanManager, bean));
+        assertTrue(provider.isSingleton());
+
+        final Object instance = provider.getInstance(new MessageImpl());
+        assertNotNull(instance);
+        assertEquals(instance, provider.getInstance(new MessageImpl()));
+    }
+}


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","24/May/18 23:03;githubbot;reta commented on issue #418: CXF-7742 handling scopes in CdiResourceProvider
URL: https://github.com/apache/cxf/pull/418#issuecomment-391892148
 
 
   Done, thanks a lot for fixing that, @rmannibucau !

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","02/Jun/18 05:20;deki;[~romain.manni-bucau] [~reta] PR has been merged, can we resolve this issue?",,,,,,,,,,
add NPE guard for SAAJStreamWriter,CXF-7740,13159658,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,ffang,ffang,ffang,16/May/18 09:31,16/May/18 09:36,14/Mar/19 02:31,16/May/18 09:36,,,,3.1.16,3.2.5,,,,,0,,,,,"to avoid NPE like

{code}

java.lang.NullPointerException
    at com.sun.org.apache.xerces.internal.dom.ParentNode.internalRemoveChild(ParentNode.java:542)[:1.8.0_161]
    at com.sun.org.apache.xerces.internal.dom.ParentNode.removeChild(ParentNode.java:484)[:1.8.0_161]
    at org.apache.cxf.binding.soap.saaj.SAAJStreamWriter.createAndAddElement(SAAJStreamWriter.java:137)[78:org.apache.cxf.cxf-rt-bindings-soap:3.1.5]
    at org.apache.cxf.staxutils.W3CDOMStreamWriter.writeStartElement(W3CDOMStreamWriter.java:143)[72:org.apache.cxf.cxf-core:3.1.5]
    at org.apache.cxf.staxutils.OverlayW3CDOMStreamWriter.writeStartElement(OverlayW3CDOMStreamWriter.java:210)[72:org.apache.cxf.cxf-core:3.1.5]
    at org.apache.cxf.staxutils.StaxUtils.writeStartElement(StaxUtils.java:811)[72:org.apache.cxf.cxf-core:3.1.5]
    at org.apache.cxf.staxutils.StaxUtils.copy(StaxUtils.java:738)[72:org.apache.cxf.cxf-core:3.1.5]
    at org.apache.cxf.staxutils.StaxUtils.copy(StaxUtils.java:702)[72:org.apache.cxf.cxf-core:3.1.5]
    at org.apache.cxf.staxutils.StaxUtils.copy(StaxUtils.java:626)[72:org.apache.cxf.cxf-core:3.1.5]
    at org.apache.cxf.databinding.source.XMLStreamDataWriter.write(XMLStreamDataWriter.java:111)[72:org.apache.cxf.cxf-core:3.1.5]
    at org.apache.cxf.databinding.source.XMLStreamDataWriter.write(XMLStreamDataWriter.java:65)[72:org.apache.cxf.cxf-core:3.1.5]
    at org.apache.camel.component.cxf.HybridSourceDataBinding$1.write(HybridSourceDataBinding.java:80)[240:org.apache.camel.camel-cxf:2.17.0]
    at org.apache.camel.component.cxf.HybridSourceDataBinding$1.write(HybridSourceDataBinding.java:74)[240:org.apache.camel.camel-cxf:2.17.0]
    at org.apache.cxf.interceptor.AbstractOutDatabindingInterceptor.writeParts(AbstractOutDatabindingInterceptor.java:137)[72:org.apache.cxf.cxf-core:3.1.5]
    at org.apache.cxf.wsdl.interceptors.BareOutInterceptor.handleMessage(BareOutInterceptor.java:68)[75:org.apache.cxf.cxf-rt-wsdl:3.1.5]
    at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:308)[72:org.apache.cxf.cxf-core:3.1.5]
    at org.apache.cxf.endpoint.ClientImpl.doInvoke(ClientImpl.java:514)[72:org.apache.cxf.cxf-core:3.1.5]
    at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:416)[72:org.apache.cxf.cxf-core:3.1.5]
    at org.apache.camel.component.cxf.CxfProducer.process(CxfProducer.java:120)[240:org.apache.camel.camel-cxf:2.17.0]
    at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:145)[231:org.apache.camel.camel-core:2.17.0]
    at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)[231:org.apache.camel.camel-core:2.17.0]
    at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:468)[231:org.apache.camel.camel-core:2.17.0]
    at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:196)[231:org.apache.camel.camel-core:2.17.0]
    at org.apache.camel.processor.Pipeline.process(Pipeline.java:121)[231:org.apache.camel.camel-core:2.17.0]
    at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)[231:org.apache.camel.camel-core:2.17.0]
    at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:196)[231:org.apache.camel.camel-core:2.17.0]
    at org.apache.camel.component.timer.TimerConsumer.sendTimerExchange(TimerConsumer.java:192)[231:org.apache.camel.camel-core:2.17.0]
    at org.apache.camel.component.timer.TimerConsumer$1.run(TimerConsumer.java:76)[231:org.apache.camel.camel-core:2.17.0]
    at java.util.TimerThread.mainLoop(Timer.java:555)[:1.8.0_161]
    at java.util.TimerThread.run(Timer.java:505)[:1.8.0_161]



{code}",,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,2018-05-16 09:31:43.0,,,,,,0|i3trqn:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Missing setter in UndertowHTTPServerEngineFactoryHolder,CXF-7737,13158197,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Blocker,Fixed,gnt,gnt,gnt,09/May/18 14:18,11/May/18 09:23,14/Mar/19 02:31,11/May/18 09:23,,,,3.2.5,,,,,,0,,,,,"There's a missing setter in {{UndertowHTTPServerEngineFactoryHolder}} which cause exceptions such as
{code}
Unable to start blueprint container for bundle org.keycloak.example.demo.cxf-jaxws-example/4.0.0.Beta2-SNAPSHOT
org.osgi.service.blueprint.container.ComponentDefinitionException: Unable to find property descriptor handlersMap on class org.apache.cxf.transport.http_undertow.blueprint.UndertowHTTPServerEngineFactoryHolder
        at org.apache.aries.blueprint.container.BeanRecipe.getPropertyDescriptor(BeanRecipe.java:834) ~[36:org.apache.aries.blueprint.core:1.9.0]
        at org.apache.aries.blueprint.container.BeanRecipe.setProperty(BeanRecipe.java:813) ~[36:org.apache.aries.blueprint.core:1.9.0]
        at org.apache.aries.blueprint.container.BeanRecipe.setProperties(BeanRecipe.java:784) ~[36:org.apache.aries.blueprint.core:1.9.0]
        at org.apache.aries.blueprint.container.BeanRecipe.setProperties(BeanRecipe.java:765) ~[36:org.apache.aries.blueprint.core:1.9.0]
        at org.apache.aries.blueprint.container.BeanRecipe.internalCreate2(BeanRecipe.java:699) ~[36:org.apache.aries.blueprint.core:1.9.0]
        at org.apache.aries.blueprint.container.BeanRecipe.internalCreate(BeanRecipe.java:666) ~[36:org.apache.aries.blueprint.core:1.9.0]
        at org.apache.aries.blueprint.di.AbstractRecipe$1.call(AbstractRecipe.java:81) ~[36:org.apache.aries.blueprint.core:1.9.0]
        at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:?]
        at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:90) ~[36:org.apache.aries.blueprint.core:1.9.0]
        at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:360) ~[36:org.apache.aries.blueprint.core:1.9.0]
        at org.apache.aries.blueprint.container.BlueprintRepository.createAll(BlueprintRepository.java:190) ~[36:org.apache.aries.blueprint.core:1.9.0]
        at org.apache.aries.blueprint.container.BlueprintContainerImpl.instantiateEagerComponents(BlueprintContainerImpl.java:716) ~[36:org.apache.aries.blueprint.core:1.9.0]
        at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:413) [36:org.apache.aries.blueprint.core:1.9.0]
        at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:278) [36:org.apache.aries.blueprint.core:1.9.0]
        at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:299) [36:org.apache.aries.blueprint.core:1.9.0]
        at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:268) [36:org.apache.aries.blueprint.core:1.9.0]
        at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:264) [36:org.apache.aries.blueprint.core:1.9.0]
        at org.apache.aries.blueprint.container.BlueprintExtender.modifiedBundle(BlueprintExtender.java:254) [36:org.apache.aries.blueprint.core:1.9.0]
        at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:500) [36:org.apache.aries.blueprint.core:1.9.0]
        at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:433) [36:org.apache.aries.blueprint.core:1.9.0]
        at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$AbstractTracked.track(BundleHookBundleTracker.java:725) [36:org.apache.aries.blueprint.core:1.9.0]
        at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.bundleChanged(BundleHookBundleTracker.java:463) [36:org.apache.aries.blueprint.core:1.9.0]
        at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$BundleEventHook.event(BundleHookBundleTracker.java:422) [36:org.apache.aries.blueprint.core:1.9.0]
        at org.apache.felix.framework.util.SecureAction.invokeBundleEventHook(SecureAction.java:1179) [?:?]
        at org.apache.felix.framework.EventDispatcher.createWhitelistFromHooks(EventDispatcher.java:730) [?:?]
        at org.apache.felix.framework.EventDispatcher.fireBundleEvent(EventDispatcher.java:485) [?:?]
        at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:4579) [?:?]
        at org.apache.felix.framework.Felix.startBundle(Felix.java:2174) [?:?]
        at org.apache.felix.framework.Felix.updateBundle(Felix.java:2510) [?:?]
        at org.apache.felix.framework.BundleImpl.update(BundleImpl.java:1018) [?:?]
        at org.apache.karaf.bundle.command.Update.update(Update.java:74) [9:org.apache.karaf.bundle.core:4.2.0]
        at org.apache.karaf.bundle.command.Update.doExecute(Update.java:51) [9:org.apache.karaf.bundle.core:4.2.0]
        at org.apache.karaf.bundle.command.BundleCommand.execute(BundleCommand.java:49) [9:org.apache.karaf.bundle.core:4.2.0]
        at org.apache.karaf.shell.impl.action.command.ActionCommand.execute(ActionCommand.java:84) [17:org.apache.karaf.shell.core:4.2.0]
        at org.apache.karaf.shell.impl.console.osgi.secured.SecuredCommand.execute(SecuredCommand.java:68) [17:org.apache.karaf.shell.core:4.2.0]
        at org.apache.karaf.shell.impl.console.osgi.secured.SecuredCommand.execute(SecuredCommand.java:86) [17:org.apache.karaf.shell.core:4.2.0]
        at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:571) [17:org.apache.karaf.shell.core:4.2.0]
        at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:497) [17:org.apache.karaf.shell.core:4.2.0]
        at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:386) [17:org.apache.karaf.shell.core:4.2.0]
        at org.apache.felix.gogo.runtime.Pipe.doCall(Pipe.java:417) [17:org.apache.karaf.shell.core:4.2.0]
        at org.apache.felix.gogo.runtime.Pipe.call(Pipe.java:229) [17:org.apache.karaf.shell.core:4.2.0]
        at org.apache.felix.gogo.runtime.Pipe.call(Pipe.java:59) [17:org.apache.karaf.shell.core:4.2.0]
        at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:?]
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:?]
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:?]
        at java.lang.Thread.run(Thread.java:748) [?:?]
{code}",,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Fri May 11 09:23:43 UTC 2018,,,,,,0|i3tisf:,9223372036854775807,,,,,,,,11/May/18 09:23;gnt;https://github.com/apache/cxf/commit/36d0a69f5b539e441e3bf0e6853dc9652e7a8a29,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DispatchImpl doesn't work for an empty Source,CXF-7736,13157117,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,ema,ema,ema,04/May/18 11:20,16/May/18 10:12,14/Mar/19 02:31,16/May/18 10:12,3.1.15,3.2.4,,3.1.16,3.2.5,,JAX-WS Runtime,,,0,,,,,"After CXF-7653,  Dispatchimpl can't return a null value result from an empty source like : 

 @WebServiceProvider(serviceName = ""HelloProviderService"", 
 portName = ""HelloProviderPort"", 
 targetNamespace = ""http://apache.org/hello_world_xml_http/bare"")
 @BindingType(value = javax.xml.ws.soap.SOAPBinding.SOAP11HTTP_BINDING)
 @ServiceMode(value = javax.xml.ws.Service.Mode.PAYLOAD)
 public class GreeterProvider implements Provider<Source> {
        public Source invoke(Source req) {
           return new StreamSource();
        }
 }

 ",,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-05-04 14:06:33.181,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Mon May 14 15:41:42 UTC 2018,,,,,,0|i3tcgn:,9223372036854775807,,,,,,,,"04/May/18 14:06;githubbot;jimma opened a new pull request #417: [CXF-7736]:DispatchImpl doesn't work for an empty Source
URL: https://github.com/apache/cxf/pull/417
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","07/May/18 12:42;githubbot;jimma closed pull request #417: [CXF-7736]:DispatchImpl doesn't work for an empty Source
URL: https://github.com/apache/cxf/pull/417
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/core/src/main/java/org/apache/cxf/endpoint/ClientImpl.java b/core/src/main/java/org/apache/cxf/endpoint/ClientImpl.java
index 799c26e0593..c4a3e8282d4 100644
--- a/core/src/main/java/org/apache/cxf/endpoint/ClientImpl.java
+++ b/core/src/main/java/org/apache/cxf/endpoint/ClientImpl.java
@@ -666,9 +666,9 @@ private void enrichFault(Fault fault) {
                 boi = boi.getWrappedOperation();
             }
             if (!boi.getOutput().getMessageParts().isEmpty()) {
-                //we were supposed to get some output, but didn't
-                throw new IllegalStateException(""Response message did not contain proper response data. Expected: ""
-                    + boi.getOutput().getMessageParts().get(0).getConcreteName());
+                //we were supposed to get some output, but didn't.
+                throw new IllegalEmptyResponseException(""Response message did not contain proper response data.""
+                    + "" Expected: "" + boi.getOutput().getMessageParts().get(0).getConcreteName());
             }
         }
         if (resList != null) {
@@ -1143,5 +1143,23 @@ public void setExecutor(Executor executor) {
         }
     }
 
+    
+    public class IllegalEmptyResponseException extends IllegalStateException {
+        public IllegalEmptyResponseException() {
+            super();
+        }
+
+        public IllegalEmptyResponseException(String message) {
+            super(message);
+        }
+
+        public IllegalEmptyResponseException(String message, Throwable cause) {
+            super(message, cause);
+        }
+
+        public IllegalEmptyResponseException(Throwable cause) {
+            super(cause);
+        }
+    }
 
 }
diff --git a/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/DispatchImpl.java b/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/DispatchImpl.java
index 2e36c080c01..87e3ba2a310 100644
--- a/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/DispatchImpl.java
+++ b/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/DispatchImpl.java
@@ -71,6 +71,7 @@
 import org.apache.cxf.databinding.DataWriter;
 import org.apache.cxf.endpoint.Client;
 import org.apache.cxf.endpoint.ClientCallback;
+import org.apache.cxf.endpoint.ClientImpl.IllegalEmptyResponseException;
 import org.apache.cxf.endpoint.Endpoint;
 import org.apache.cxf.feature.Feature;
 import org.apache.cxf.helpers.DOMUtils;
@@ -318,12 +319,13 @@ public T invoke(T obj, boolean isOneWay) {
             Holder<T> holder = new Holder<T>(obj);
             opName = calculateOpName(holder, opName, hasOpName);
 
-            Object ret[] = client.invokeWrapped(opName,
-                                                holder.value);
+            Object ret[] = client.invokeWrapped(opName, holder.value);
             if (isOneWay || ret == null || ret.length == 0) {
                 return null;
             }
             return (T)ret[0];
+        } catch (IllegalEmptyResponseException ie) {
+            return null;
         } catch (Exception ex) {
             throw mapException(ex);
         }
diff --git a/systests/uncategorized/src/test/java/org/apache/cxf/systest/soap/EmptySOAPBodyTest.java b/systests/uncategorized/src/test/java/org/apache/cxf/systest/soap/EmptySOAPBodyTest.java
index 9d0b6e206fe..5c7cf3e097b 100644
--- a/systests/uncategorized/src/test/java/org/apache/cxf/systest/soap/EmptySOAPBodyTest.java
+++ b/systests/uncategorized/src/test/java/org/apache/cxf/systest/soap/EmptySOAPBodyTest.java
@@ -19,18 +19,26 @@
 
 package org.apache.cxf.systest.soap;
 
+import java.io.StringReader;
 import java.net.URL;
 
 import javax.xml.namespace.QName;
+import javax.xml.transform.Source;
+import javax.xml.transform.stream.StreamSource;
+import javax.xml.ws.Dispatch;
 import javax.xml.ws.Service;
 import javax.xml.ws.soap.SOAPFaultException;
 
 import org.apache.cxf.Bus;
 import org.apache.cxf.BusFactory;
 import org.apache.cxf.bus.spring.SpringBusFactory;
+import org.apache.cxf.endpoint.ClientImpl.IllegalEmptyResponseException;
+import org.apache.cxf.ext.logging.LoggingFeature;
 import org.apache.cxf.testutil.common.AbstractBusClientServerTestBase;
+import org.apache.hello_world_xml_http.bare.XMLService;
 import org.example.contract.doubleit.DoubleItPortType;
 
+import org.junit.Assert;
 import org.junit.BeforeClass;
 
 /**
@@ -50,6 +58,8 @@ public static void startServers() throws Exception {
             // set this to false to fork
             launchServer(EmptySOAPBodyServer.class, true)
         );
+        assertTrue(""Server failed to launch"",
+                   launchServer(EmptySoapProviderServer.class, true));
     }
 
     @org.junit.AfterClass
@@ -79,12 +89,38 @@ public void testPlaintext() throws Exception {
             fail(""Should have thown an exception"");
         } catch (SOAPFaultException t) {
             assertTrue(""Wrong exception cause "" + t.getCause(), 
-                 t.getCause() instanceof IllegalStateException);
+                 t.getCause() instanceof IllegalEmptyResponseException);
         }
 
         ((java.io.Closeable)port).close();
 
         bus.shutdown(true);
     }
+    
+    @org.junit.Test
+    public void testProviderSource() throws Exception {
+        QName providerServiceName = new QName(""http://apache.org/hello_world_xml_http/bare"",
+                                              ""HelloProviderService"");
+
+        QName providerPortName = new QName(""http://apache.org/hello_world_xml_http/bare"", ""HelloProviderPort"");
+
+        URL wsdl = new URL(""http://localhost:"" + EmptySoapProviderServer.REG_PORT
+                           + ""/helloProvider/helloPort?wsdl"");
+        assertNotNull(wsdl);
+
+        XMLService service = new XMLService(wsdl, providerServiceName, new LoggingFeature());
+        assertNotNull(service);
+        Dispatch<Source> dispatch = service.createDispatch(providerPortName, Source.class,
+                                                           javax.xml.ws.Service.Mode.PAYLOAD);
+
+        String str = new String(""<soap:Envelope xmlns:soap=\""http://schemas.xmlsoap.org/soap/envelope/\""><soap:Body>"" 
+                              + ""<ns2:in xmlns=\""http://apache.org/hello_world_xml_http/bare/types\""""
+                              + "" xmlns:ns2=\""http://apache.org/hello_world_xml_http/bare\"">""
+                              + ""<elem1>empty</elem1><elem2>this is element 2</elem2><elem3>42</elem3></ns2:in>""
+                              + ""</soap:Body></soap:Envelope>"");
+        StreamSource req = new StreamSource(new StringReader(str));
+        Source resSource = dispatch.invoke(req);
+        Assert.assertNull(""null result is expected"", resSource);
+    }
 
 }
\ No newline at end of file
diff --git a/systests/uncategorized/src/test/java/org/apache/cxf/systest/soap/EmptySoapProviderServer.java b/systests/uncategorized/src/test/java/org/apache/cxf/systest/soap/EmptySoapProviderServer.java
new file mode 100644
index 00000000000..223c0b8759b
--- /dev/null
+++ b/systests/uncategorized/src/test/java/org/apache/cxf/systest/soap/EmptySoapProviderServer.java
@@ -0,0 +1,74 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.cxf.systest.soap;
+
+import java.util.LinkedList;
+import java.util.List;
+
+import javax.xml.transform.Source;
+import javax.xml.transform.stream.StreamSource;
+import javax.xml.ws.BindingType;
+import javax.xml.ws.Endpoint;
+import javax.xml.ws.Provider;
+import javax.xml.ws.ServiceMode;
+import javax.xml.ws.WebServiceProvider;
+
+import org.apache.cxf.testutil.common.AbstractBusTestServerBase;
+
+public class EmptySoapProviderServer extends AbstractBusTestServerBase {
+    public static final String REG_PORT = allocatePort(EmptySoapProviderServer.class);
+
+    List<Endpoint> eps = new LinkedList<Endpoint>();
+
+    protected void run() {
+        String address = ""http://localhost:"" + REG_PORT + ""/helloProvider/helloPort"";
+        GreeterProvider provider = new GreeterProvider();
+        eps.add(Endpoint.publish(address, provider));
+    }
+
+    public void tearDown() {
+        while (!eps.isEmpty()) {
+            Endpoint ep = eps.remove(0);
+            ep.stop();
+        }
+    }
+
+    public static void main(String[] args) {
+        try {
+            EmptySoapProviderServer s = new EmptySoapProviderServer();
+            s.start();
+        } catch (Exception ex) {
+            ex.printStackTrace();
+            System.exit(-1);
+        } finally {
+            System.out.println(""done!"");
+        }
+    }
+    
+    @WebServiceProvider(serviceName = ""HelloProviderService"", 
+                        portName = ""HelloProviderPort"", 
+                        targetNamespace = ""http://apache.org/hello_world_xml_http/bare"")
+    @BindingType(value = javax.xml.ws.soap.SOAPBinding.SOAP11HTTP_BINDING)
+    @ServiceMode(value = javax.xml.ws.Service.Mode.PAYLOAD)
+    public class GreeterProvider implements Provider<Source> {
+        public Source invoke(Source req) {
+            return new StreamSource();
+        }
+    }
+}


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
",14/May/18 15:41;coheigea;Can this issue be resolved?,,,,,,,,,,,,,,,,,,,,,,,,,,,
Swagger2Feature - application/octet-stream media type is returned for index.html,CXF-7734,13156888,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,deki,yurkom,yurkom,03/May/18 15:04,03/May/18 18:02,14/Mar/19 02:31,03/May/18 18:02,3.1.15,,,3.1.16,,,JAX-RS,,,0,,,,,"Reproduced after CXF-7581.

org.apache.cxf.jaxrs.swagger.Swagger2Feature.SwaggerUIService#getResource does not set media type for the root resource ("""" or ""/"" paths)

So, *application/octet-stream* type is set by default instead of *text/html*

Steps to reproduce (See [Swagger2Feature - Automatic UI Activation|http://cxf.apache.org/docs/swaggerfeature-swagger2feature.html#SwaggerFeature/Swagger2Feature-AutomaticUIActivation]):
 * Setup Swagger2Feature
 * Open swagger-ui in a browser _$base_rest_url/api-docs?url=swagger.json_

Actual: The file is downloading
Expected: The index.html page is displayed

Pull request: https://github.com/apache/cxf/pull/416",,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-05-03 17:05:49.532,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Thu May 03 18:01:58 UTC 2018,,,,,,0|i3tb3r:,9223372036854775807,,,,,,,,"03/May/18 17:05;githubbot;yurkom opened a new pull request #416: CXF-7734 Fix media type for the root page
URL: https://github.com/apache/cxf/pull/416
 
 
   After migration from 3.1.14 to 3.1.15, It is impossible to see **api-docs** page according to example in
   [Swagger2Feature - Automatic UI Activation](http://cxf.apache.org/docs/swaggerfeature-swagger2feature.html#SwaggerFeature/Swagger2Feature-AutomaticUIActivation)
   
   This fix allows to restore this functionality.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","03/May/18 18:01;githubbot;deki commented on issue #416: CXF-7734 Fix media type for the root page
URL: https://github.com/apache/cxf/pull/416#issuecomment-386384123
 
 
   Thanks for the PR. I simply merged SwaggerUiService from 3.2.x where the problem doesn't occur.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","03/May/18 18:01;githubbot;deki closed pull request #416: CXF-7734 Fix media type for the root page
URL: https://github.com/apache/cxf/pull/416
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/rt/rs/description-swagger/src/main/java/org/apache/cxf/jaxrs/swagger/Swagger2Feature.java b/rt/rs/description-swagger/src/main/java/org/apache/cxf/jaxrs/swagger/Swagger2Feature.java
index 7ea8d4c2220..e786c919c01 100644
--- a/rt/rs/description-swagger/src/main/java/org/apache/cxf/jaxrs/swagger/Swagger2Feature.java
+++ b/rt/rs/description-swagger/src/main/java/org/apache/cxf/jaxrs/swagger/Swagger2Feature.java
@@ -620,6 +620,7 @@ public Response getResource(@Context UriInfo uriInfo, @PathParam(""resource"") Str
             
             try {
                 URL resourceURL = locator.locate(resourcePath);
+                resourcePath = resourceURL.getPath();
                 
                 String mediaType = null;
                 int ind = resourcePath.lastIndexOf('.');


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
",,,,,,,,,,,,,,,,,,,,,,,,,,,
CircuitBreakerFailoverFeature should allow targetSelector to be set,CXF-7726,13154809,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Trivial,Fixed,coheigea,juwit,juwit,24/Apr/18 13:44,25/Apr/18 15:05,14/Mar/19 02:31,25/Apr/18 13:50,3.2.0,,,3.2.5,,,Clustering,,,0,,,,,"The CircuitBreakerFailoverFeature class holds a FailoverTargetSelector attribute.

It provides a getter method (@Override) for this attribute, but no setter, so we cannot provide a custom FailoverTargetSelector implementation.

When we call the not-overrided setter, we set the parent's class attribute, which seems wrong.

 

I'll provide a pull-request for this :)",,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-04-25 07:14:10.277,,,no_permission,,Novice,,,,,,,,,,,,9223372036854775807,,,Wed Apr 25 15:05:33 UTC 2018,,,,,,0|i3sydz:,9223372036854775807,,,,,,,,"25/Apr/18 07:14;githubbot;Juwit opened a new pull request #412: [CXF-7726] allows targetSelector to be set in CircuitBreakerFailoverFeature
URL: https://github.com/apache/cxf/pull/412
 
 
   Adds a setTargetSelector method to CircuitBreakerFailoverFeature

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","25/Apr/18 13:43;githubbot;coheigea commented on issue #412: [CXF-7726] allows targetSelector to be set in CircuitBreakerFailoverFeature
URL: https://github.com/apache/cxf/pull/412#issuecomment-384291101
 
 
   Why not instead just remove the targetSelector from CircuitBreakerFailoverFeature and override the get method instead, e.g. something like:
   
   @Override
       public FailoverTargetSelector getTargetSelector() {
           if (super.getTargetSelector() == null) {
               super.setTargetSelector(new CircuitBreakerTargetSelector(threshold, timeout,
                                                                      super.getClientBootstrapAddress()));
           }
           return super.getTargetSelector();
       }

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","25/Apr/18 13:47;githubbot;coheigea commented on issue #412: [CXF-7726] allows targetSelector to be set in CircuitBreakerFailoverFeature
URL: https://github.com/apache/cxf/pull/412#issuecomment-384291101
 
 
   Why not instead just remove the targetSelector from CircuitBreakerFailoverFeature and override the get method instead, e.g. something like:
   
   @Override
       public FailoverTargetSelector getTargetSelector() {
           if (super.getTargetSelector() == null) {
               super.setTargetSelector(new CircuitBreakerTargetSelector(threshold, timeout,
                                                                      super.getClientBootstrapAddress()));
           }
           return super.getTargetSelector();
       }

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","25/Apr/18 13:47;githubbot;coheigea closed pull request #412: [CXF-7726] allows targetSelector to be set in CircuitBreakerFailoverFeature
URL: https://github.com/apache/cxf/pull/412
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/rt/features/clustering/src/main/java/org/apache/cxf/clustering/circuitbreaker/CircuitBreakerFailoverFeature.java b/rt/features/clustering/src/main/java/org/apache/cxf/clustering/circuitbreaker/CircuitBreakerFailoverFeature.java
index 317d8801569..aedf44cbd4e 100644
--- a/rt/features/clustering/src/main/java/org/apache/cxf/clustering/circuitbreaker/CircuitBreakerFailoverFeature.java
+++ b/rt/features/clustering/src/main/java/org/apache/cxf/clustering/circuitbreaker/CircuitBreakerFailoverFeature.java
@@ -60,6 +60,11 @@ public FailoverTargetSelector getTargetSelector() {
         return this.targetSelector;
     }
 
+    @Override
+    public void setTargetSelector(FailoverTargetSelector targetSelector) {
+        this.targetSelector = targetSelector;
+    }
+
     public int getThreshold() {
         return threshold;
     }


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
",25/Apr/18 13:50;coheigea;Thanks for the patch.,25/Apr/18 15:05;juwit;Thanks for merging it :),,,,,,,,,,,,,,,,,,,,,,,,
JwkUtils throws NPE if Message is null,CXF-7721,13154067,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,sergey_beryozkin,sergey_beryozkin,sergey_beryozkin,20/Apr/18 16:26,20/Apr/18 16:40,14/Mar/19 02:31,20/Apr/18 16:40,,,,3.1.16,3.2.5,,JAX-RS Security,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,2018-04-20 16:26:47.0,,,,,,0|i3sttb:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Header values are lost ,CXF-7720,13154014,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,Bogatyrov,Bogatyrov,20/Apr/18 12:20,26/Apr/18 16:47,14/Mar/19 02:31,26/Apr/18 16:47,3.2.4,,,3.2.5,,,Transports,,,0,,,,,"When a request is made by WebClient to a service that returns several headers of the same name but with different cases, e.g.: 

""Set-Cookie"" with value ""aaa""
 ""set-cookie"" with value ""bbb""
 ""SET-COOKIE"" with value ""ccc""

then the response object contains only one header value, all other values are lost.

The issue  is not reproducible in all cases, but only with some service providers and is probably caused by low-level details of provider implementation. 

 

In the attachment there is a SoapUI REST mock service and CXF WebClient-based consumer with which the issue is reproducible.

 ","Windows 7

Java 1.8.0_152

SoapUI 5.2.1",,,,,,,,,,,,,,,,,,,,20/Apr/18 12:13;Bogatyrov;consumer.zip;https://issues.apache.org/jira/secure/attachment/12920004/consumer.zip,20/Apr/18 12:12;Bogatyrov;rest_mock_provider_soapui_project.xml;https://issues.apache.org/jira/secure/attachment/12920005/rest_mock_provider_soapui_project.xml,,2.0,,,,,,,,,,,,,,,,,,,2018-04-24 10:20:36.561,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Thu Apr 26 16:47:47 UTC 2018,,,,,,0|i3sthj:,9223372036854775807,,,,,,,,"20/Apr/18 12:21;Bogatyrov;Normally, HttpURLConnection object from which the headers are read at https://github.com/apache/cxf/blob/master/rt/transports/http/src/main/java/org/apache/cxf/transport/http/Headers.java#L292 contains one map entry for all the header values.

When the issue is reproduced however, HttpURLConnection object contains a separate entry for each of the headers with the similar name but with different cases, which leads to the situation when only one header value gets into headers map and all the other values are lost.","24/Apr/18 10:20;coheigea;I think your use-case is not valid, as HTTP headers are case-insensitive, from the spec:
{quote}Each header field consists of a name followed by a colon ("":"") and the field value. Field names are case-insensitive.
{quote}","25/Apr/18 07:44;Bogatyrov;The headers are case-insensitive, which means, that in the request from the use-case there are 3 values of the same header 'set cookie' and 2 of them get missing. For me it looks that response object should contain all 3 values under the same header name.","25/Apr/18 16:04;coheigea;I don't think this is an option as the spec says:

Origin servers SHOULD NOT fold multiple Set-Cookie header fields into a single header field.

I took a look at seeing what would be involved in supporting multiple Set-Cookie headers with different cases but it potentially requires changing a lot of sensitive code, which I'm reluctant to do as this is a niche use-case (why not just use the standard case?).","25/Apr/18 23:01;dkulp;We have a test case that does check to make sure three separate Set-Cookie headers are returned properly.   See:  

https://github.com/apache/cxf/blob/master/systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/JAXRSClientServerBookTest.java#L930

","25/Apr/18 23:09;dkulp;Actually, just changed the server side to send different case headers instead of all three being the ""proper"" Set-Cookie and the test does fail.   I'll take a look tomorrow.   It's definitely an issue on the server side as it's only sending a single Set-Cookie header back:


{code:java}

HTTP/1.1 200 OK
Date: Wed, 25 Apr 2018 23:10:06 GMT
Set-Cookie: COOKIETWO=dummy2; expires=Sat, 20-Nov-2010 19:11:32 GMT; Path=/
BookId: 123
MAP-NAME: javax.ws.rs.core.MultivaluedMap
Content-Length: 0
Server: Jetty(9.4.8.v20171121)
{code}
","26/Apr/18 08:43;coheigea;I was also looking at that test....the server side doesn't send back the different case headers as the Jetty HttpField class compares header names in a case insensitive way, and just updated the value if they match instead of adding a new header. So I don't think there is anything we can do on the CXF side for that.","26/Apr/18 16:47;coheigea;Resolving, as the test-case works with the latest CXF SNAPSHOT.",,,,,,,,,,,,,,,,,,,,,,
IBM Performance Team has found several performance increases,CXF-7716,13153393,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,,atanders,atanders,18/Apr/18 16:13,11/May/18 02:03,14/Mar/19 02:31,11/May/18 02:03,3.1.15,3.2.4,,3.1.16,3.2.5,,JAX-RS,,,0,,,,,"Our performance team has identified several areas of improvement to reduce garbage collection and CPU usage.

First, we reduced the amount of StringBuilders created in HTTPUtils.java and ResourceUtils.java.

Second, we created JAXRSUtils.doMimeTypesIntersect() - a method similar to JAXRSUtils.intersectMimeTypes - that doesn't create a HashSet but instead returns a boolean when we just need to know if they intersect.

Third, we found that getting the annotations for parameters to create constructor arguments in PerRequestResourceProvider.java is expensive, so we cache them in the constructor instead of getting them via reflection every request.

These changes combined result in a ~1.5-2% performance increase.",,,,,,3600,3600,,0%,3600,3600,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-04-18 18:09:47.573,,,no_permission,,Moderate,,,,,,,,,,,,9223372036854775807,,,Thu May 10 22:33:41 UTC 2018,,,,,,0|i3sppj:,9223372036854775807,,,,,,,,"18/Apr/18 18:09;githubbot;WhiteCat22 opened a new pull request #407: [CXF-7716] Reduce StringBuilders and other performance changes.
URL: https://github.com/apache/cxf/pull/407
 
 
   The IBM performance team has identified several areas of improvement to reduce garbage collection and CPU usage.
   
   First, we reduced the amount of StringBuilders created in HTTPUtils.java and ResourceUtils.java.
   
   Second, we created JAXRSUtils.doMimeTypesIntersect() - a method similar to JAXRSUtils.intersectMimeTypes - that doesn't create a HashSet but instead returns a boolean when we just need to know if they intersect.
   
   Third, we found that getting the annotations for parameters to create constructor arguments in PerRequestResourceProvider.java is expensive, so we cache them in the constructor instead of getting them via reflection every request.
   
   These changes combined result in a ~1.5-2% performance increase.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","19/Apr/18 01:41;githubbot;reta commented on a change in pull request #407: [CXF-7716] Reduce StringBuilders and other performance changes.
URL: https://github.com/apache/cxf/pull/407#discussion_r182614831
 
 

 ##########
 File path: rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/ResourceUtils.java
 ##########
 @@ -816,12 +816,23 @@ private static UserOperation getOperationFromElement(Element e) {
                                                       Message m,
                                                       boolean perRequest,
                                                       Map<Class<?>, Object> contextValues) {
-        if (m == null) {
-            m = new MessageImpl();
-        }
         Class<?>[] params = c.getParameterTypes();
         Annotation[][] anns = c.getParameterAnnotations();
         Type[] genericTypes = c.getGenericParameterTypes();
+        return createConstructorArguments(c, m, perRequest, contextValues, params, anns, genericTypes);
+    }
+
+    public static Object[] createConstructorArguments(Constructor<?> c,
 
 Review comment:
   Are those new arguments (`params`, `anns`, `genericTypes`) used by the method?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","19/Apr/18 01:49;githubbot;reta commented on a change in pull request #407: [CXF-7716] Reduce StringBuilders and other performance changes.
URL: https://github.com/apache/cxf/pull/407#discussion_r182615636
 
 

 ##########
 File path: rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/model/URITemplate.java
 ##########
 @@ -130,10 +130,31 @@ public String getPatternValue() {
 
     private static String escapeCharacters(String expression) {
 
-        StringBuilder sb = new StringBuilder();
-        for (int i = 0; i < expression.length(); i++) {
-            char ch = expression.charAt(i);
-            sb.append(isReservedCharacter(ch) ? ""\\"" + ch : ch);
+        int length = expression.length();
 
 Review comment:
   My apologies but this implementation is not very convincing to me, I think we could just pre-allocate `2 * expression.length()` using `StringBuilder ` constructor (worst case when all characters are reserved) and keep the previous one?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","19/Apr/18 14:02;githubbot;WhiteCat22 commented on a change in pull request #407: [CXF-7716] Reduce StringBuilders and other performance changes.
URL: https://github.com/apache/cxf/pull/407#discussion_r182756615
 
 

 ##########
 File path: rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/ResourceUtils.java
 ##########
 @@ -816,12 +816,23 @@ private static UserOperation getOperationFromElement(Element e) {
                                                       Message m,
                                                       boolean perRequest,
                                                       Map<Class<?>, Object> contextValues) {
-        if (m == null) {
-            m = new MessageImpl();
-        }
         Class<?>[] params = c.getParameterTypes();
         Annotation[][] anns = c.getParameterAnnotations();
         Type[] genericTypes = c.getGenericParameterTypes();
+        return createConstructorArguments(c, m, perRequest, contextValues, params, anns, genericTypes);
+    }
+
+    public static Object[] createConstructorArguments(Constructor<?> c,
 
 Review comment:
   Yes, the idea is that we get them once in the PerRequestResourceProvider constructor, vs getting them via reflection every request.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","19/Apr/18 14:07;githubbot;WhiteCat22 commented on a change in pull request #407: [CXF-7716] Reduce StringBuilders and other performance changes.
URL: https://github.com/apache/cxf/pull/407#discussion_r182758236
 
 

 ##########
 File path: rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/model/URITemplate.java
 ##########
 @@ -130,10 +130,31 @@ public String getPatternValue() {
 
     private static String escapeCharacters(String expression) {
 
-        StringBuilder sb = new StringBuilder();
-        for (int i = 0; i < expression.length(); i++) {
-            char ch = expression.charAt(i);
-            sb.append(isReservedCharacter(ch) ? ""\\"" + ch : ch);
+        int length = expression.length();
 
 Review comment:
   The goal is to reduce the number of StringBuilders created in order to reduce GCs and CPU usage. In this case we don't create a StringBuilder until we are sure that we actually need one, vs creating one that we might not even use.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","19/Apr/18 23:48;githubbot;reta commented on a change in pull request #407: [CXF-7716] Reduce StringBuilders and other performance changes.
URL: https://github.com/apache/cxf/pull/407#discussion_r182915164
 
 

 ##########
 File path: rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/ResourceUtils.java
 ##########
 @@ -816,12 +816,23 @@ private static UserOperation getOperationFromElement(Element e) {
                                                       Message m,
                                                       boolean perRequest,
                                                       Map<Class<?>, Object> contextValues) {
-        if (m == null) {
-            m = new MessageImpl();
-        }
         Class<?>[] params = c.getParameterTypes();
         Annotation[][] anns = c.getParameterAnnotations();
         Type[] genericTypes = c.getGenericParameterTypes();
+        return createConstructorArguments(c, m, perRequest, contextValues, params, anns, genericTypes);
+    }
+
+    public static Object[] createConstructorArguments(Constructor<?> c,
 
 Review comment:
   Make sense, thank you.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","19/Apr/18 23:51;githubbot;reta commented on a change in pull request #407: [CXF-7716] Reduce StringBuilders and other performance changes.
URL: https://github.com/apache/cxf/pull/407#discussion_r182915735
 
 

 ##########
 File path: rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/model/URITemplate.java
 ##########
 @@ -130,10 +130,31 @@ public String getPatternValue() {
 
     private static String escapeCharacters(String expression) {
 
-        StringBuilder sb = new StringBuilder();
-        for (int i = 0; i < expression.length(); i++) {
-            char ch = expression.charAt(i);
-            sb.append(isReservedCharacter(ch) ? ""\\"" + ch : ch);
+        int length = expression.length();
 
 Review comment:
   Thanks, from this perspective we could consider it as micro-optimization, trading the code readability, I think it is acceptable in this case, the implementation could be understood easily.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","19/Apr/18 23:56;githubbot;reta commented on a change in pull request #407: [CXF-7716] Reduce StringBuilders and other performance changes.
URL: https://github.com/apache/cxf/pull/407#discussion_r182916384
 
 

 ##########
 File path: rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/model/URITemplate.java
 ##########
 @@ -130,10 +130,31 @@ public String getPatternValue() {
 
     private static String escapeCharacters(String expression) {
 
-        StringBuilder sb = new StringBuilder();
-        for (int i = 0; i < expression.length(); i++) {
-            char ch = expression.charAt(i);
-            sb.append(isReservedCharacter(ch) ? ""\\"" + ch : ch);
+        int length = expression.length();
+        int i = 0;
+        char ch = ' ';
+        for (; i < length; ++i) {
+            ch = expression.charAt(i);
+            if (isReservedCharacter(ch)) {
+                break;
+            }
+        }
+        
+        if (i == length) {
+            return expression;
+        }
+        
+        StringBuilder sb = new StringBuilder(length + 8);
 
 Review comment:
   Why `length + 8`? 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","20/Apr/18 07:13;githubbot;asoldano commented on a change in pull request #407: [CXF-7716] Reduce StringBuilders and other performance changes.
URL: https://github.com/apache/cxf/pull/407#discussion_r182964151
 
 

 ##########
 File path: rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/model/URITemplate.java
 ##########
 @@ -130,10 +130,31 @@ public String getPatternValue() {
 
     private static String escapeCharacters(String expression) {
 
-        StringBuilder sb = new StringBuilder();
-        for (int i = 0; i < expression.length(); i++) {
-            char ch = expression.charAt(i);
-            sb.append(isReservedCharacter(ch) ? ""\\"" + ch : ch);
+        int length = expression.length();
 
 Review comment:
   This being micro-optimization or not should really be supported by benchmark result data. If this is on a hot path, creating less StringBuilder can really make some differences.
   This said, please note that the fix actually solves 2 issue:
   1) it avoids creating the StringBuilder when not needed
   2) it prevents useless StringBuilder instances being created whenever a reserved character is found, as sb.append(isReservedCharacter(ch) ? ""\\"" + ch : ch) internally creates another StringBuilder to perform the ""\\"" + ch concatenation.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","20/Apr/18 14:29;githubbot;WhiteCat22 commented on a change in pull request #407: [CXF-7716] Reduce StringBuilders and other performance changes.
URL: https://github.com/apache/cxf/pull/407#discussion_r183068721
 
 

 ##########
 File path: rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/model/URITemplate.java
 ##########
 @@ -130,10 +130,31 @@ public String getPatternValue() {
 
     private static String escapeCharacters(String expression) {
 
-        StringBuilder sb = new StringBuilder();
-        for (int i = 0; i < expression.length(); i++) {
-            char ch = expression.charAt(i);
-            sb.append(isReservedCharacter(ch) ? ""\\"" + ch : ch);
+        int length = expression.length();
 
 Review comment:
   We don't have hard numbers at the moment, but all of these changes combined are estimated to improve performance by 1.5%-2% per request.
   
   Our JDK team analyzed our performance in order to reduce CPU usage and garbage collection and found that we are creating a large number of StringBuilders. StringBuilders are expensive to use so only using them when we need them will improve performance. Similarly, they found that we were using reflection to get the params every request in ResourceUtils.createConstructorArguments() which is also expensive, hence the change to get the params one time in the constructor.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","20/Apr/18 15:22;githubbot;WhiteCat22 commented on a change in pull request #407: [CXF-7716] Reduce StringBuilders and other performance changes.
URL: https://github.com/apache/cxf/pull/407#discussion_r183085465
 
 

 ##########
 File path: rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/model/URITemplate.java
 ##########
 @@ -130,10 +130,31 @@ public String getPatternValue() {
 
     private static String escapeCharacters(String expression) {
 
-        StringBuilder sb = new StringBuilder();
-        for (int i = 0; i < expression.length(); i++) {
-            char ch = expression.charAt(i);
-            sb.append(isReservedCharacter(ch) ? ""\\"" + ch : ch);
+        int length = expression.length();
+        int i = 0;
+        char ch = ' ';
+        for (; i < length; ++i) {
+            ch = expression.charAt(i);
+            if (isReservedCharacter(ch)) {
+                break;
+            }
+        }
+        
+        if (i == length) {
+            return expression;
+        }
+        
+        StringBuilder sb = new StringBuilder(length + 8);
 
 Review comment:
   We do + 8 to allows for up to 8 escaped characters before we start creating more StringBuilders to add on the the String. 8 is an arbitrary limit, but it seems to be sufficient in most cases. We could do something like 256, but that would be overkill since it's rare that someone would actually have 256 escaped characters.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","20/Apr/18 15:25;githubbot;WhiteCat22 commented on a change in pull request #407: [CXF-7716] Reduce StringBuilders and other performance changes.
URL: https://github.com/apache/cxf/pull/407#discussion_r183068721
 
 

 ##########
 File path: rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/model/URITemplate.java
 ##########
 @@ -130,10 +130,31 @@ public String getPatternValue() {
 
     private static String escapeCharacters(String expression) {
 
-        StringBuilder sb = new StringBuilder();
-        for (int i = 0; i < expression.length(); i++) {
-            char ch = expression.charAt(i);
-            sb.append(isReservedCharacter(ch) ? ""\\"" + ch : ch);
+        int length = expression.length();
 
 Review comment:
   We don't have hard numbers at the moment, but all of these changes combined are estimated to improve performance by 1.5%-2% per request depending on load.
   
   Our JDK team analyzed our performance in order to reduce CPU usage and garbage collection and found that we are creating a large number of StringBuilders. StringBuilders are expensive to use so only using them when we need them will improve performance. Similarly, they found that we were using reflection to get the params every request in ResourceUtils.createConstructorArguments() which is also expensive, hence the change to get the params one time in the constructor.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","20/Apr/18 16:04;githubbot;coheigea commented on a change in pull request #407: [CXF-7716] Reduce StringBuilders and other performance changes.
URL: https://github.com/apache/cxf/pull/407#discussion_r183098421
 
 

 ##########
 File path: rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/model/URITemplate.java
 ##########
 @@ -130,10 +130,31 @@ public String getPatternValue() {
 
     private static String escapeCharacters(String expression) {
 
-        StringBuilder sb = new StringBuilder();
-        for (int i = 0; i < expression.length(); i++) {
-            char ch = expression.charAt(i);
-            sb.append(isReservedCharacter(ch) ? ""\\"" + ch : ch);
+        int length = expression.length();
+        int i = 0;
+        char ch = ' ';
+        for (; i < length; ++i) {
+            ch = expression.charAt(i);
+            if (isReservedCharacter(ch)) {
+                break;
+            }
+        }
+        
+        if (i == length) {
+            return expression;
+        }
+        
+        StringBuilder sb = new StringBuilder(length + 8);
 
 Review comment:
   There should be a comment in the code in that case explaining why ""8"" is chosen

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","20/Apr/18 16:13;githubbot;WhiteCat22 commented on a change in pull request #407: [CXF-7716] Reduce StringBuilders and other performance changes.
URL: https://github.com/apache/cxf/pull/407#discussion_r183100561
 
 

 ##########
 File path: rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/model/URITemplate.java
 ##########
 @@ -130,10 +130,34 @@ public String getPatternValue() {
 
     private static String escapeCharacters(String expression) {
 
-        StringBuilder sb = new StringBuilder();
-        for (int i = 0; i < expression.length(); i++) {
-            char ch = expression.charAt(i);
-            sb.append(isReservedCharacter(ch) ? ""\\"" + ch : ch);
+        int length = expression.length();
+        int i = 0;
+        char ch = ' ';
+        for (; i < length; ++i) {
+            ch = expression.charAt(i);
+            if (isReservedCharacter(ch)) {
+                break;
+            }
+        }
+
+        if (i == length) {
+            return expression;
+        }
+
+        // Allows for up to 8 escaped characters before we start creating more
+        // StringBuilders. 8 is an arbitrary limit, but it seems to be
+        // sufficient in most cases.
+        StringBuilder sb = new StringBuilder(length + 8);
 
 Review comment:
   Apparently amending the file removes comments, but I added a comment explaining why we add +8 to the length.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","23/Apr/18 00:57;githubbot;reta commented on a change in pull request #407: [CXF-7716] Reduce StringBuilders and other performance changes.
URL: https://github.com/apache/cxf/pull/407#discussion_r183259135
 
 

 ##########
 File path: rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/JAXRSUtils.java
 ##########
 @@ -1508,11 +1509,40 @@ public static boolean matchMimeTypes(MediaType requestContentType,
                 }
             }
         }
-
         return new ArrayList<>(supportedMimeTypeList);
+    }
+
+    public static boolean doMimeTypesIntersect(List<MediaType> requiredMediaTypes, List<MediaType> userMediaTypes) {
+        for (MediaType requiredType : requiredMediaTypes) {
 
 Review comment:
   Regarding this part, I understand the purpose, but now there 2 identical places, `intersectMimeTypes` and `doMimeTypesIntersect`, with the same code (solving one problem but introducing another). What I am thinking about is to introduce some kind of accumulator to either map the result of the operation to the `List` or `true/false`, do you think it would be possible @WhiteCat22 ?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","23/Apr/18 20:55;githubbot;WhiteCat22 commented on a change in pull request #407: [CXF-7716] Reduce StringBuilders and other performance changes.
URL: https://github.com/apache/cxf/pull/407#discussion_r183534925
 
 

 ##########
 File path: rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/JAXRSUtils.java
 ##########
 @@ -1508,11 +1509,40 @@ public static boolean matchMimeTypes(MediaType requestContentType,
                 }
             }
         }
-
         return new ArrayList<>(supportedMimeTypeList);
+    }
+
+    public static boolean doMimeTypesIntersect(List<MediaType> requiredMediaTypes, List<MediaType> userMediaTypes) {
+        for (MediaType requiredType : requiredMediaTypes) {
 
 Review comment:
   The performance increase comes from not making a HashSet just to do the comparison. I agree that duplicating code is not ideal, but I'm not sure how to accomplish both cases with a single method.
   
   I am open to suggestions.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","24/Apr/18 00:52;githubbot;reta commented on a change in pull request #407: [CXF-7716] Reduce StringBuilders and other performance changes.
URL: https://github.com/apache/cxf/pull/407#discussion_r183578479
 
 

 ##########
 File path: rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/JAXRSUtils.java
 ##########
 @@ -1508,11 +1509,40 @@ public static boolean matchMimeTypes(MediaType requestContentType,
                 }
             }
         }
-
         return new ArrayList<>(supportedMimeTypeList);
+    }
+
+    public static boolean doMimeTypesIntersect(List<MediaType> requiredMediaTypes, List<MediaType> userMediaTypes) {
+        for (MediaType requiredType : requiredMediaTypes) {
 
 Review comment:
   Turned out to be quite tricky ... but I have one suggestion for you. Here is the implementation for `doMimeTypesIntersect` and `intersectMimeTypes`:
   
   ```
     public static List<MediaType> intersectMimeTypes(List<MediaType> requiredMediaTypes,
                                                        List<MediaType> userMediaTypes,
                                                        boolean addRequiredParamsIfPossible,
                                                        boolean addDistanceParameter) {
           final AccumulatingConsumer consumer = new AccumulatingConsumer(addRequiredParamsIfPossible, addDistanceParameter);
           intersectMimeTypes(requiredMediaTypes, userMediaTypes, consumer);
           return new ArrayList<>(consumer.supportedMimeTypeList);
       }
       
       public static boolean doMimeTypesIntersect(List<MediaType> requiredMediaTypes, List<MediaType> userMediaTypes) {
           final NonAccumulatingConsumer consumer = new NonAccumulatingConsumer();
           intersectMimeTypes(requiredMediaTypes, userMediaTypes, consumer);
           return consumer.doIntersect;
       }
   ```
   Here is the initial `intersectMimeTypes` function, refactored to use consumers, the part which is was accumulating (or returning `true`) is now part of the consumers:
   
   ```
   private static void intersectMimeTypes(List<MediaType> requiredMediaTypes, List<MediaType> userMediaTypes,
               BiConsumer<MediaType, MediaType> consumer) {
   
           for (MediaType requiredType : requiredMediaTypes) {
               for (MediaType userType : userMediaTypes) {
                   boolean isCompatible = isMediaTypeCompatible(requiredType, userType);
                   if (isCompatible) {
                       boolean parametersMatched = true;
                       for (Map.Entry<String, String> entry : userType.getParameters().entrySet()) {
                           String value = requiredType.getParameters().get(entry.getKey());
                           if (value != null && entry.getValue() != null
                               && !(stripDoubleQuotesIfNeeded(value).equals(
                                       stripDoubleQuotesIfNeeded(entry.getValue())))) {
                               
                               if (HTTP_CHARSET_PARAM.equals(entry.getKey())
                                   && value.equalsIgnoreCase(entry.getValue())) {
                                   continue;
                               }
                               parametersMatched = false;
                               break;
                           }
                       }
                       if (!parametersMatched) {
                           continue;
                       }
                       
                       consumer.accept(requiredType, userType);
                   }
               }
           }
       }
   
   ```
   
   And finally, two consumers:
   ```
       private static class NonAccumulatingConsumer implements BiConsumer<MediaType, MediaType> {
           private boolean doIntersect;
           
           @Override
           public void accept(MediaType t, MediaType u) {
               doIntersect = true;
           }
       }
   ```
   
   And 
   ```
       private static class AccumulatingConsumer implements BiConsumer<MediaType, MediaType> {
           private final Set<MediaType> supportedMimeTypeList = new LinkedHashSet<MediaType>();
           private final boolean addRequiredParamsIfPossible;
           private final boolean addDistanceParameter;
           
           private AccumulatingConsumer(boolean addRequiredParamsIfPossible, boolean addDistanceParameter) {
               this.addRequiredParamsIfPossible = addRequiredParamsIfPossible;
               this.addDistanceParameter = addDistanceParameter;
           }
           
           @Override
           public void accept(MediaType requiredType, MediaType userType) {
               boolean requiredTypeWildcard = requiredType.getType().equals(MediaType.MEDIA_TYPE_WILDCARD);
               boolean requiredSubTypeWildcard = requiredType.getSubtype().contains(MediaType.MEDIA_TYPE_WILDCARD);
   
               String type = requiredTypeWildcard ? userType.getType() : requiredType.getType();
               String subtype = requiredSubTypeWildcard ? userType.getSubtype() : requiredType.getSubtype();
   
               Map<String, String> parameters = userType.getParameters();
               if (addRequiredParamsIfPossible) {
                   parameters = new LinkedHashMap<String, String>(parameters);
                   for (Map.Entry<String, String> entry : requiredType.getParameters().entrySet()) {
                       if (!parameters.containsKey(entry.getKey())) {
                           parameters.put(entry.getKey(), entry.getValue());
                       }
                   }
               }
               if (addDistanceParameter) {
                   int distance = 0;
                   if (requiredTypeWildcard) {
                       distance++;
                   }
                   if (requiredSubTypeWildcard) {
                       distance++;
                   }
                   parameters.put(MEDIA_TYPE_DISTANCE_PARAM, Integer.toString(distance));
               }
               supportedMimeTypeList.add(new MediaType(type, subtype, parameters));
           }
       }
   ```
   
   Ideally, would be good to move to a dedicated utility class, but roughly this is an idea. What do you think. @WhiteCat22, does it make sense?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","24/Apr/18 22:28;githubbot;WhiteCat22 commented on a change in pull request #407: [CXF-7716] Reduce StringBuilders and other performance changes.
URL: https://github.com/apache/cxf/pull/407#discussion_r183899002
 
 

 ##########
 File path: rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/JAXRSUtils.java
 ##########
 @@ -1508,11 +1509,40 @@ public static boolean matchMimeTypes(MediaType requestContentType,
                 }
             }
         }
-
         return new ArrayList<>(supportedMimeTypeList);
+    }
+
+    public static boolean doMimeTypesIntersect(List<MediaType> requiredMediaTypes, List<MediaType> userMediaTypes) {
+        for (MediaType requiredType : requiredMediaTypes) {
 
 Review comment:
   This makes sense, but is there another interface that we can use instead of BiConsumer? BiConsumer requires Java 1.8 and this is something that we would like to see backported to 3.1.X which has 1.7 dependencies. Another thing is that we need to have a mechanism to return after the first match during NonAccumulatingConsumer .accept() instead of going through the entire double for loops. There are several ways to do this, pass in a flag to allow us to bail out after first match, return a boolean from accept, or create a new isFinished() method to let us know that we are done processing.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","25/Apr/18 02:00;githubbot;reta commented on a change in pull request #407: [CXF-7716] Reduce StringBuilders and other performance changes.
URL: https://github.com/apache/cxf/pull/407#discussion_r183927574
 
 

 ##########
 File path: rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/JAXRSUtils.java
 ##########
 @@ -1508,11 +1509,40 @@ public static boolean matchMimeTypes(MediaType requestContentType,
                 }
             }
         }
-
         return new ArrayList<>(supportedMimeTypeList);
+    }
+
+    public static boolean doMimeTypesIntersect(List<MediaType> requiredMediaTypes, List<MediaType> userMediaTypes) {
+        for (MediaType requiredType : requiredMediaTypes) {
 
 Review comment:
   Yeah, sure, sounds good, something like that would fit:
   ```
   public interface MimeTypesIntersector {
       boolean void intersect(MediaType requiredType, MediaType userType);
   }
   ```
   
   And than
   
   ```
   private static void intersectMimeTypes(List<MediaType> requiredMediaTypes, List<MediaType> userMediaTypes,
   MimeTypesIntersector intersector) {
       ... 
      if (!intersector.intersect( requiredType, userType) {
          return;
      }
   }
   ```

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","07/May/18 21:39;githubbot;WhiteCat22 commented on a change in pull request #407: [CXF-7716] Reduce StringBuilders and other performance changes.
URL: https://github.com/apache/cxf/pull/407#discussion_r186559564
 
 

 ##########
 File path: rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/JAXRSUtils.java
 ##########
 @@ -1508,11 +1509,40 @@ public static boolean matchMimeTypes(MediaType requestContentType,
                 }
             }
         }
-
         return new ArrayList<>(supportedMimeTypeList);
+    }
+
+    public static boolean doMimeTypesIntersect(List<MediaType> requiredMediaTypes, List<MediaType> userMediaTypes) {
+        for (MediaType requiredType : requiredMediaTypes) {
 
 Review comment:
   Alright, I've had a chance to code this up. Should these classes each go in their own class in the `org.apache.cxf.jaxrs.utils` package, or a single util class?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","07/May/18 21:52;githubbot;reta commented on a change in pull request #407: [CXF-7716] Reduce StringBuilders and other performance changes.
URL: https://github.com/apache/cxf/pull/407#discussion_r186562512
 
 

 ##########
 File path: rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/JAXRSUtils.java
 ##########
 @@ -1508,11 +1509,40 @@ public static boolean matchMimeTypes(MediaType requestContentType,
                 }
             }
         }
-
         return new ArrayList<>(supportedMimeTypeList);
+    }
+
+    public static boolean doMimeTypesIntersect(List<MediaType> requiredMediaTypes, List<MediaType> userMediaTypes) {
+        for (MediaType requiredType : requiredMediaTypes) {
 
 Review comment:
   I would vote for own class, what do you think?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","07/May/18 22:12;githubbot;WhiteCat22 commented on a change in pull request #407: [CXF-7716] Reduce StringBuilders and other performance changes.
URL: https://github.com/apache/cxf/pull/407#discussion_r186566722
 
 

 ##########
 File path: rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/JAXRSUtils.java
 ##########
 @@ -1508,11 +1509,40 @@ public static boolean matchMimeTypes(MediaType requestContentType,
                 }
             }
         }
-
         return new ArrayList<>(supportedMimeTypeList);
+    }
+
+    public static boolean doMimeTypesIntersect(List<MediaType> requiredMediaTypes, List<MediaType> userMediaTypes) {
+        for (MediaType requiredType : requiredMediaTypes) {
 
 Review comment:
   I agree, I have them coded up into separate `MimeTypesIntersector`, `AccumulatingIntersector` and `NonAccumulatingIntersector` classes

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","07/May/18 22:26;githubbot;reta commented on a change in pull request #407: [CXF-7716] Reduce StringBuilders and other performance changes.
URL: https://github.com/apache/cxf/pull/407#discussion_r186569414
 
 

 ##########
 File path: rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/JAXRSUtils.java
 ##########
 @@ -1508,11 +1509,40 @@ public static boolean matchMimeTypes(MediaType requestContentType,
                 }
             }
         }
-
         return new ArrayList<>(supportedMimeTypeList);
+    }
+
+    public static boolean doMimeTypesIntersect(List<MediaType> requiredMediaTypes, List<MediaType> userMediaTypes) {
+        for (MediaType requiredType : requiredMediaTypes) {
 
 Review comment:
   :+1: 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","08/May/18 20:04;githubbot;WhiteCat22 commented on issue #407: [CXF-7716] Reduce StringBuilders and other performance changes.
URL: https://github.com/apache/cxf/pull/407#issuecomment-387525374
 
 
   @reta I've pushed the JAXRSUtils changes that we talked about.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","09/May/18 00:54;githubbot;reta commented on issue #407: [CXF-7716] Reduce StringBuilders and other performance changes.
URL: https://github.com/apache/cxf/pull/407#issuecomment-387586865
 
 
   @WhiteCat22 Looks good to me, thanks a lot. @asoldano any objections towards merging it? It is good set of micro-optimizations overall (in my opinion). 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","09/May/18 15:58;githubbot;WhiteCat22 commented on issue #407: [CXF-7716] Reduce StringBuilders and other performance changes.
URL: https://github.com/apache/cxf/pull/407#issuecomment-387788090
 
 
   Can we also deliver this to 3.1.X? I'm not sure if that would require additional work to merge or not.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","10/May/18 12:42;githubbot;dkulp commented on issue #407: [CXF-7716] Reduce StringBuilders and other performance changes.
URL: https://github.com/apache/cxf/pull/407#issuecomment-388042074
 
 
   lgtm

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","10/May/18 21:59;githubbot;reta commented on issue #407: [CXF-7716] Reduce StringBuilders and other performance changes.
URL: https://github.com/apache/cxf/pull/407#issuecomment-388198964
 
 
   Thanks guys! @WhiteCat22  I will take care of back-porting to 3.1.x

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","10/May/18 21:59;githubbot;reta closed pull request #407: [CXF-7716] Reduce StringBuilders and other performance changes.
URL: https://github.com/apache/cxf/pull/407
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/lifecycle/PerRequestResourceProvider.java b/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/lifecycle/PerRequestResourceProvider.java
index 1bc98bd9def..61881fbbf8d 100644
--- a/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/lifecycle/PerRequestResourceProvider.java
+++ b/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/lifecycle/PerRequestResourceProvider.java
@@ -19,9 +19,11 @@
 
 package org.apache.cxf.jaxrs.lifecycle;
 
+import java.lang.annotation.Annotation;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
+import java.lang.reflect.Type;
 import java.util.Collections;
 import java.util.Map;
 
@@ -45,6 +47,9 @@
     private Constructor<?> c;
     private Method postConstructMethod;
     private Method preDestroyMethod;
+    private final Class<?>[] params;
+    private final Annotation[][] anns;
+    private final Type[] genericTypes;
 
     public PerRequestResourceProvider(Class<?> clazz) {
         c = ResourceUtils.findResourceConstructor(clazz, true);
@@ -52,6 +57,9 @@ public PerRequestResourceProvider(Class<?> clazz) {
             throw new RuntimeException(""Resource class "" + clazz
                                        + "" has no valid constructor"");
         }
+        params = c.getParameterTypes();
+        anns = c.getParameterAnnotations();
+        genericTypes = c.getGenericParameterTypes();
         postConstructMethod = ResourceUtils.findPostConstructMethod(clazz);
         preDestroyMethod = ResourceUtils.findPreDestroyMethod(clazz);
     }
@@ -75,7 +83,7 @@ protected Object createInstance(Message m) {
             (ProviderInfo<?>)m.getExchange().getEndpoint().get(Application.class.getName());
         Map<Class<?>, Object> mapValues = CastUtils.cast(application == null ? null
             : Collections.singletonMap(Application.class, application.getProvider()));
-        Object[] values = ResourceUtils.createConstructorArguments(c, m, true, mapValues);
+        Object[] values = ResourceUtils.createConstructorArguments(c, m, true, mapValues, params, anns, genericTypes);
         try {
             Object instance = values.length > 0 ? c.newInstance(values) : c.newInstance(new Object[]{});
             InjectionUtils.invokeLifeCycleMethod(instance, postConstructMethod);
diff --git a/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/model/URITemplate.java b/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/model/URITemplate.java
index 29777a8981b..b5059f3ddca 100644
--- a/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/model/URITemplate.java
+++ b/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/model/URITemplate.java
@@ -130,10 +130,34 @@ public String getPatternValue() {
 
     private static String escapeCharacters(String expression) {
 
-        StringBuilder sb = new StringBuilder();
-        for (int i = 0; i < expression.length(); i++) {
-            char ch = expression.charAt(i);
-            sb.append(isReservedCharacter(ch) ? ""\\"" + ch : ch);
+        int length = expression.length();
+        int i = 0;
+        char ch = ' ';
+        for (; i < length; ++i) {
+            ch = expression.charAt(i);
+            if (isReservedCharacter(ch)) {
+                break;
+            }
+        }
+
+        if (i == length) {
+            return expression;
+        }
+
+        // Allows for up to 8 escaped characters before we start creating more
+        // StringBuilders. 8 is an arbitrary limit, but it seems to be
+        // sufficient in most cases.
+        StringBuilder sb = new StringBuilder(length + 8);
+        sb.append(expression, 0, i);
+        sb.append('\\');
+        sb.append(ch);
+        ++i;
+        for (; i < length; ++i) {
+            ch = expression.charAt(i);
+            if (isReservedCharacter(ch)) {
+                sb.append('\\');
+            }
+            sb.append(ch);
         }
         return sb.toString();
     }
diff --git a/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/ProviderFactory.java b/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/ProviderFactory.java
index e62d3396e1c..03b6a5e64b8 100644
--- a/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/ProviderFactory.java
+++ b/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/ProviderFactory.java
@@ -222,7 +222,7 @@ protected static Object createProvider(String className, Bus bus) {
                         if (argCls != null && argCls.isAssignableFrom(contextCls)) {
                             List<MediaType> mTypes = JAXRSUtils.getProduceTypes(
                                  cr.getProvider().getClass().getAnnotation(Produces.class));
-                            if (JAXRSUtils.intersectMimeTypes(mTypes, type).size() > 0) {
+                            if (JAXRSUtils.doMimeTypesIntersect(mTypes, type)) {
                                 injectContextValues(cr, m);
                                 candidates.add((ContextResolver<T>)cr.getProvider());
                             }
@@ -728,10 +728,7 @@ private void sortContextResolvers() {
         MessageBodyReader<?> ep = pi.getProvider();
         List<MediaType> supportedMediaTypes = JAXRSUtils.getProviderConsumeTypes(ep);
 
-        List<MediaType> availableMimeTypes =
-            JAXRSUtils.intersectMimeTypes(Collections.singletonList(mediaType), supportedMediaTypes, false);
-
-        return availableMimeTypes.size() != 0;
+        return JAXRSUtils.doMimeTypesIntersect(Collections.singletonList(mediaType), supportedMediaTypes);
     }
 
     private boolean isReadable(ProviderInfo<MessageBodyReader<?>> pi,
@@ -752,11 +749,7 @@ private boolean isReadable(ProviderInfo<MessageBodyReader<?>> pi,
         MessageBodyWriter<?> ep = pi.getProvider();
         List<MediaType> supportedMediaTypes = JAXRSUtils.getProviderProduceTypes(ep);
 
-        List<MediaType> availableMimeTypes =
-            JAXRSUtils.intersectMimeTypes(Collections.singletonList(mediaType),
-                                          supportedMediaTypes, false);
-
-        return availableMimeTypes.size() != 0;
+        return JAXRSUtils.doMimeTypesIntersect(Collections.singletonList(mediaType), supportedMediaTypes);
     }
 
     private boolean isWriteable(ProviderInfo<MessageBodyWriter<?>> pi,
diff --git a/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/AccumulatingIntersector.java b/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/AccumulatingIntersector.java
new file mode 100644
index 00000000000..3d2537f46c6
--- /dev/null
+++ b/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/AccumulatingIntersector.java
@@ -0,0 +1,74 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.cxf.jaxrs.utils;
+
+import java.util.LinkedHashMap;
+import java.util.LinkedHashSet;
+import java.util.Map;
+import java.util.Set;
+
+import javax.ws.rs.core.MediaType;
+
+public class AccumulatingIntersector implements MimeTypesIntersector {
+    private static final String MEDIA_TYPE_DISTANCE_PARAM = ""d"";
+    private final Set<MediaType> supportedMimeTypeList = new LinkedHashSet<MediaType>();
+    private final boolean addRequiredParamsIfPossible;
+    private final boolean addDistanceParameter;
+
+    AccumulatingIntersector(boolean addRequiredParamsIfPossible, boolean addDistanceParameter) {
+        this.addRequiredParamsIfPossible = addRequiredParamsIfPossible;
+        this.addDistanceParameter = addDistanceParameter;
+    }
+
+    @Override
+    public boolean intersect(MediaType requiredType, MediaType userType) {
+        boolean requiredTypeWildcard = requiredType.getType().equals(MediaType.MEDIA_TYPE_WILDCARD);
+        boolean requiredSubTypeWildcard = requiredType.getSubtype().contains(MediaType.MEDIA_TYPE_WILDCARD);
+
+        String type = requiredTypeWildcard ? userType.getType() : requiredType.getType();
+        String subtype = requiredSubTypeWildcard ? userType.getSubtype() : requiredType.getSubtype();
+
+        Map<String, String> parameters = userType.getParameters();
+        if (addRequiredParamsIfPossible) {
+            parameters = new LinkedHashMap<String, String>(parameters);
+            for (Map.Entry<String, String> entry : requiredType.getParameters().entrySet()) {
+                if (!parameters.containsKey(entry.getKey())) {
+                    parameters.put(entry.getKey(), entry.getValue());
+                }
+            }
+        }
+        if (addDistanceParameter) {
+            int distance = 0;
+            if (requiredTypeWildcard) {
+                distance++;
+            }
+            if (requiredSubTypeWildcard) {
+                distance++;
+            }
+            parameters.put(MEDIA_TYPE_DISTANCE_PARAM, Integer.toString(distance));
+        }
+        getSupportedMimeTypeList().add(new MediaType(type, subtype, parameters));
+        return true;
+    }
+
+    public Set<MediaType> getSupportedMimeTypeList() {
+        return supportedMimeTypeList;
+    }
+}
diff --git a/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/HttpUtils.java b/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/HttpUtils.java
index 41286c358fb..53a21434fe3 100644
--- a/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/HttpUtils.java
+++ b/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/HttpUtils.java
@@ -117,24 +117,29 @@ public static String pathDecode(String value) {
 
     private static String componentEncode(String reservedChars, String value) {
 
-        StringBuilder buffer = new StringBuilder();
-        StringBuilder bufferToEncode = new StringBuilder();
-
-        for (int i = 0; i < value.length(); i++) {
+        StringBuilder buffer = null;
+        int length = value.length();
+        int startingIndex = 0;
+        for (int i = 0; i < length; i++) {
             char currentChar = value.charAt(i);
             if (reservedChars.indexOf(currentChar) != -1) {
-                if (bufferToEncode.length() > 0) {
-                    buffer.append(urlEncode(bufferToEncode.toString()));
-                    bufferToEncode.setLength(0);
+                if (buffer == null) {
+                    buffer = new StringBuilder(length + 8);
+                }
+                // If it is going to be an empty string nothing to encode.
+                if (i != startingIndex) {
+                    buffer.append(urlEncode(value.substring(startingIndex, i)));
                 }
                 buffer.append(currentChar);
-            } else {
-                bufferToEncode.append(currentChar);
+                startingIndex = i + 1;
             }
         }
 
-        if (bufferToEncode.length() > 0) {
-            buffer.append(urlEncode(bufferToEncode.toString()));
+        if (buffer == null) {
+            return urlEncode(value);
+        }
+        if (startingIndex < length) {
+            buffer.append(urlEncode(value.substring(startingIndex, length)));
         }
 
         return buffer.toString();
@@ -186,15 +191,21 @@ public static String encodePartiallyEncoded(String encoded, boolean query) {
             return encoded;
         }
         Matcher m = ENCODE_PATTERN.matcher(encoded);
-        StringBuilder sb = new StringBuilder();
+
+        if (!m.find()) {
+            return query ? HttpUtils.queryEncode(encoded) : HttpUtils.pathEncode(encoded);
+        }
+
+        int length = encoded.length();
+        StringBuilder sb = new StringBuilder(length + 8);
         int i = 0;
-        while (m.find()) {
+        do {
             String before = encoded.substring(i, m.start());
             sb.append(query ? HttpUtils.queryEncode(before) : HttpUtils.pathEncode(before));
             sb.append(m.group());
             i = m.end();
-        }
-        String tail = encoded.substring(i, encoded.length());
+        } while (m.find());
+        String tail = encoded.substring(i, length);
         sb.append(query ? HttpUtils.queryEncode(tail) : HttpUtils.pathEncode(tail));
         return sb.toString();
     }
diff --git a/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/JAXRSUtils.java b/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/JAXRSUtils.java
index 3094a3eb767..252f4cd06b3 100644
--- a/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/JAXRSUtils.java
+++ b/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/JAXRSUtils.java
@@ -35,7 +35,6 @@
 import java.util.Comparator;
 import java.util.HashSet;
 import java.util.LinkedHashMap;
-import java.util.LinkedHashSet;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
@@ -1400,21 +1399,21 @@ public static void writeMessageBody(List<WriterInterceptor> writers,
     public static boolean matchConsumeTypes(MediaType requestContentType,
                                             OperationResourceInfo ori) {
 
-        return !intersectMimeTypes(ori.getConsumeTypes(), requestContentType).isEmpty();
+        return doMimeTypesIntersect(ori.getConsumeTypes(), requestContentType);
     }
 
     public static boolean matchProduceTypes(MediaType acceptContentType,
                                               OperationResourceInfo ori) {
 
-        return !intersectMimeTypes(ori.getProduceTypes(), acceptContentType).isEmpty();
+        return doMimeTypesIntersect(ori.getProduceTypes(), acceptContentType);
     }
 
     public static boolean matchMimeTypes(MediaType requestContentType,
                                          MediaType acceptContentType,
                                          OperationResourceInfo ori) {
 
-        return intersectMimeTypes(ori.getConsumeTypes(), requestContentType).size() != 0
-            && intersectMimeTypes(ori.getProduceTypes(), acceptContentType).size() != 0;
+        return doMimeTypesIntersect(ori.getConsumeTypes(), requestContentType)
+                && doMimeTypesIntersect(ori.getProduceTypes(), acceptContentType);
     }
 
     public static List<MediaType> parseMediaTypes(String types) {
@@ -1439,6 +1438,16 @@ public static boolean matchMimeTypes(MediaType requestContentType,
         return acceptValues;
     }
 
+    public static boolean doMimeTypesIntersect(List<MediaType> mimeTypesA, MediaType mimeTypeB) {
+        return doMimeTypesIntersect(mimeTypesA, Collections.singletonList(mimeTypeB));
+    }
+
+    public static boolean doMimeTypesIntersect(List<MediaType> requiredMediaTypes, List<MediaType> userMediaTypes) {
+        final NonAccumulatingIntersector intersector = new NonAccumulatingIntersector();
+        intersectMimeTypes(requiredMediaTypes, userMediaTypes, intersector);
+        return intersector.doIntersect();
+    }
+
     /**
      * intersect two mime types
      *
@@ -1451,11 +1460,19 @@ public static boolean matchMimeTypes(MediaType requestContentType,
                                                      boolean addRequiredParamsIfPossible) {
         return intersectMimeTypes(requiredMediaTypes, userMediaTypes, addRequiredParamsIfPossible, false);
     }
+
     public static List<MediaType> intersectMimeTypes(List<MediaType> requiredMediaTypes,
                                                      List<MediaType> userMediaTypes,
                                                      boolean addRequiredParamsIfPossible,
                                                      boolean addDistanceParameter) {
-        Set<MediaType> supportedMimeTypeList = new LinkedHashSet<MediaType>();
+        final AccumulatingIntersector intersector = new AccumulatingIntersector(addRequiredParamsIfPossible,
+                addDistanceParameter);
+        intersectMimeTypes(requiredMediaTypes, userMediaTypes, intersector);
+        return new ArrayList<>(intersector.getSupportedMimeTypeList());
+    }
+
+    private static void intersectMimeTypes(List<MediaType> requiredMediaTypes, List<MediaType> userMediaTypes,
+            MimeTypesIntersector intersector) {
 
         for (MediaType requiredType : requiredMediaTypes) {
             for (MediaType userType : userMediaTypes) {
@@ -1464,12 +1481,10 @@ public static boolean matchMimeTypes(MediaType requestContentType,
                     boolean parametersMatched = true;
                     for (Map.Entry<String, String> entry : userType.getParameters().entrySet()) {
                         String value = requiredType.getParameters().get(entry.getKey());
-                        if (value != null && entry.getValue() != null
-                            && !(stripDoubleQuotesIfNeeded(value).equals(
-                                    stripDoubleQuotesIfNeeded(entry.getValue())))) {
-                            
-                            if (HTTP_CHARSET_PARAM.equals(entry.getKey())
-                                && value.equalsIgnoreCase(entry.getValue())) {
+                        if (value != null && entry.getValue() != null && !(stripDoubleQuotesIfNeeded(value)
+                                .equals(stripDoubleQuotesIfNeeded(entry.getValue())))) {
+
+                            if (HTTP_CHARSET_PARAM.equals(entry.getKey()) && value.equalsIgnoreCase(entry.getValue())) {
                                 continue;
                             }
                             parametersMatched = false;
@@ -1479,40 +1494,15 @@ public static boolean matchMimeTypes(MediaType requestContentType,
                     if (!parametersMatched) {
                         continue;
                     }
-                    boolean requiredTypeWildcard = requiredType.getType().equals(MediaType.MEDIA_TYPE_WILDCARD);
-                    boolean requiredSubTypeWildcard = requiredType.getSubtype().contains(MediaType.MEDIA_TYPE_WILDCARD);
-
-                    String type = requiredTypeWildcard ? userType.getType() : requiredType.getType();
-                    String subtype = requiredSubTypeWildcard ? userType.getSubtype() : requiredType.getSubtype();
-
-                    Map<String, String> parameters = userType.getParameters();
-                    if (addRequiredParamsIfPossible) {
-                        parameters = new LinkedHashMap<String, String>(parameters);
-                        for (Map.Entry<String, String> entry : requiredType.getParameters().entrySet()) {
-                            if (!parameters.containsKey(entry.getKey())) {
-                                parameters.put(entry.getKey(), entry.getValue());
-                            }
-                        }
-                    }
-                    if (addDistanceParameter) {
-                        int distance = 0;
-                        if (requiredTypeWildcard) {
-                            distance++;
-                        }
-                        if (requiredSubTypeWildcard) {
-                            distance++;
-                        }
-                        parameters.put(MEDIA_TYPE_DISTANCE_PARAM, Integer.toString(distance));
+
+                    if (!intersector.intersect(requiredType, userType)) {
+                        return;
                     }
-                    supportedMimeTypeList.add(new MediaType(type, subtype, parameters));
                 }
             }
         }
-
-        return new ArrayList<>(supportedMimeTypeList);
-
     }
-    
+
     private static String stripDoubleQuotesIfNeeded(String value) {
         if (value != null && value.startsWith(""\"""") 
             && value.endsWith(""\"""") && value.length() > 1) {
diff --git a/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/MimeTypesIntersector.java b/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/MimeTypesIntersector.java
new file mode 100644
index 00000000000..3dd3e47be76
--- /dev/null
+++ b/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/MimeTypesIntersector.java
@@ -0,0 +1,26 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.cxf.jaxrs.utils;
+
+import javax.ws.rs.core.MediaType;
+
+public interface MimeTypesIntersector {
+    boolean intersect(MediaType requiredType, MediaType userType);
+}
diff --git a/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/NonAccumulatingIntersector.java b/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/NonAccumulatingIntersector.java
new file mode 100644
index 00000000000..7f6661e6c39
--- /dev/null
+++ b/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/NonAccumulatingIntersector.java
@@ -0,0 +1,36 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.cxf.jaxrs.utils;
+
+import javax.ws.rs.core.MediaType;
+
+public class NonAccumulatingIntersector implements MimeTypesIntersector {
+    private boolean doIntersect;
+
+    @Override
+    public boolean intersect(MediaType requiredType, MediaType userType) {
+        doIntersect = true;
+        return false;
+    }
+
+    public boolean doIntersect() {
+        return doIntersect;
+    }
+}
diff --git a/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/ResourceUtils.java b/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/ResourceUtils.java
index 39d97696a54..1b32e855f25 100644
--- a/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/ResourceUtils.java
+++ b/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/ResourceUtils.java
@@ -816,12 +816,23 @@ private static UserOperation getOperationFromElement(Element e) {
                                                       Message m,
                                                       boolean perRequest,
                                                       Map<Class<?>, Object> contextValues) {
-        if (m == null) {
-            m = new MessageImpl();
-        }
         Class<?>[] params = c.getParameterTypes();
         Annotation[][] anns = c.getParameterAnnotations();
         Type[] genericTypes = c.getGenericParameterTypes();
+        return createConstructorArguments(c, m, perRequest, contextValues, params, anns, genericTypes);
+    }
+
+    public static Object[] createConstructorArguments(Constructor<?> c,
+                                                      Message m,
+                                                      boolean perRequest,
+                                                      Map<Class<?>,
+                                                      Object> contextValues,
+                                                      Class<?>[] params,
+                                                      Annotation[][] anns,
+                                                      Type[] genericTypes) {
+        if (m == null) {
+            m = new MessageImpl();
+        }
         @SuppressWarnings(""unchecked"")
         MultivaluedMap<String, String> templateValues =
             (MultivaluedMap<String, String>)m.get(URITemplate.TEMPLATE_PARAMETERS);


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","10/May/18 22:33;githubbot;WhiteCat22 commented on issue #407: [CXF-7716] Reduce StringBuilders and other performance changes.
URL: https://github.com/apache/cxf/pull/407#issuecomment-388206050
 
 
   @reta Thanks!

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
"
Codegen-Plugin no longer works with Toolchains,CXF-7714,13153311,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,ffang,deki,deki,18/Apr/18 09:56,10/Sep/18 08:54,14/Mar/19 02:31,10/Sep/18 08:54,3.2.4,,,3.3.0,,,Tooling,,,0,,,,,"Reproducible using the jdk-cxf-with-toolchain integration test. For now I will disable it...
{noformat}
[INFO] --- maven-toolchains-plugin:1.1:toolchain (default) @ jdk-cxf-with-toolchain ---
[INFO] Required toolchain: jdk [ version='1.8' ]
[INFO] Found matching toolchain for type jdk: JDK[/home/jenkins/tools/java/latest1.8/]
[INFO] 
[INFO] --- cxf-codegen-plugin:3.2.5-SNAPSHOT:wsdl2java (wsdl2java) @ jdk-cxf-with-toolchain ---
[WARNING] The POM for com.sun.xml.bind:jaxb-xjc:jar:2.2.11 is invalid, transitive dependencies (if any) will not be available, enable debug logging for more details
[WARNING] The POM for com.sun.xml.bind:jaxb-core:jar:2.2.11 is invalid, transitive dependencies (if any) will not be available, enable debug logging for more details
[WARNING] The POM for com.sun.xml.bind:jaxb-impl:jar:2.2.11 is invalid, transitive dependencies (if any) will not be available, enable debug logging for more details
[INFO] Running code generation in fork mode...
[INFO] Using toolchain JDK[/home/jenkins/tools/java/latest1.8/] to find the java executable
[INFO] The java executable is /home/jenkins/tools/java/latest1.8/bin/java
[INFO] Building jar: /tmp/cxf-tmp-3666764970499790379/cxf-codegen2755053280703821179.jar
[WARNING] Unrecognized option: --add-modules
[WARNING] Error: Could not create the Java Virtual Machine.
[WARNING] Error: A fatal exception has occurred. Program will exit.
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 2.827 s
[INFO] Finished at: 2018-04-18T09:19:36Z
[INFO] Final Memory: 19M/64M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.cxf:cxf-codegen-plugin:3.2.5-SNAPSHOT:wsdl2java (wsdl2java) on project jdk-cxf-with-toolchain: 
[ERROR] Exit code: 1
[ERROR] Command line was: /home/jenkins/tools/java/latest1.8/bin/java --add-modules java.activation,java.xml.bind,java.xml.ws --add-exports=java.xml.bind/com.sun.xml.internal.bind.v2.runtime=ALL-UNNAMED --add-exports=jdk.xml.dom/org.w3c.dom.html=ALL-UNNAMED --add-exports=java.xml/com.sun.org.apache.xerces.internal.impl.xs=ALL-UNNAMED --add-exports=java.xml.bind/com.sun.xml.internal.bind.marshaller=ALL-UNNAMED --add-opens java.xml.ws/javax.xml.ws.wsaddressing=ALL-UNNAMED --add-opens java.base/java.security=ALL-UNNAMED --add-opens java.base/java.net=ALL-UNNAMED --add-opens java.base/java.lang=ALL-UNNAMED --add-opens java.base/java.util=ALL-UNNAMED --add-opens java.base/java.util.concurrent=ALL-UNNAMED -jar /tmp/cxf-tmp-3666764970499790379/cxf-codegen2755053280703821179.jar /tmp/cxf-tmp-3666764970499790379/cxf-w2j17726919322935236109args{noformat}",,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-09-10 08:04:41.765,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Mon Sep 10 08:04:41 UTC 2018,,,,,,0|i3sp7b:,9223372036854775807,,,,,,,,"10/Sep/18 08:04;ffang;This unnecessary ""--add-modules"" should be fixed already.

I will test",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CLONE - JAXRS CTS/TCK issue:  register(...) should ignore components when invalid contracts are passed in,CXF-7713,13153171,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,andymc,struberg,struberg,17/Apr/18 22:21,26/Apr/18 14:01,14/Mar/19 02:31,25/Apr/18 21:54,3.2.2,,,3.2.5,,,JAX-RS,,,0,,,,,"--- original ticket --
We're seeing some failures when running the JAX-RS 2.1 TCK - particularly around the register method. The javadoc states that the implementation MUST ignore the component if the call to register specifies a contract (interface) that the component does not implement.
---

The original fix improved checks but did not properly detect all the nested Interfaces.

This can now lead to not picking up Filters properly but ignoring them.
",,,,,,,,,,,,,,,CXF-7638,,,,,,18/Apr/18 08:09;struberg;0001-CXF-7713-fix-interface-contract-detection-for-Filter.patch;https://issues.apache.org/jira/secure/attachment/12919573/0001-CXF-7713-fix-interface-contract-detection-for-Filter.patch,,,1.0,,,,,,,,,,,,,,,,,,,2018-04-25 20:33:33.744,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Thu Apr 26 14:01:24 UTC 2018,,,,,,0|i3socf:,9223372036854775807,,,,,,,,"17/Apr/18 22:42;struberg;The original fix of CXF-7638 does indeed break some older functionality.
 The new code does not check for nested interfaces.

Given the code:
{code:java}
public interface MyClientFilter extends ClientRequestFilter {
 ...
}

public class MyClientFilterImpl implements MyClientFilter {
...
}
{code}
This situation currently doesn't get detected as ClientRequestFilter.
The client.register() call simply gets ignored more or less.

This is pretty easy solvable via a recursive call.

I gonna provide a patch tomorrow.",18/Apr/18 08:05;struberg;patch added - txs!,18/Apr/18 08:09;struberg;added a nullcheck in case of proxies and bytecode tinkering coming along our way...,25/Apr/18 20:12;struberg;ping. Any news on this front? Would love to include this in Apache Meecrowave...,"25/Apr/18 20:33;deki;Hi Mark, we are on GitHub, could you open a PR for this?

[~andymc] [~johndament] any objections? I'm willing to merge this change...","25/Apr/18 20:40;struberg;There is a full git patch attached. In an ASF Jira. 
I really don't like our github integration. It totally splits the conversation which is now all over the place. 
It's really hard to follow tbh. So I prefer to stick to the mailing lists and Jira.  

","25/Apr/18 20:54;deki;I'm not rejecting your patch, just asking because we have good experiences with that. Makes it easier to review und merge.","25/Apr/18 21:38;andymc;The patch looks good to me.  I'll merge it, since I introduced the problem in the first place.  Thanks Dennis (for the review) and Mark (for catching this issue and for the patch)!",25/Apr/18 21:54;andymc;Merged - thanks again!,"26/Apr/18 14:01;struberg;Thanks Andy and Dennis, really appreciated!",,,,,,,,,,,,,,,,,,,,
Migration guides still showing 3.2 release as a future version,CXF-7709,13152663,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,coheigea,aseychell,aseychell,16/Apr/18 09:46,16/Apr/18 11:59,14/Mar/19 02:31,16/Apr/18 09:58,,,,,,,,,,0,,,,,"The migration guides listed at [http://cxf.apache.org/docs/migration-guides.html] are still showing the 3.2 version as a future release. From my understanding, 3.2.x is the most recent and production ready version. 

Can you update the migration guides accordingly or else make it clear whether 3.2.x is meant for production use yet?",,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,2018-04-16 09:46:30.0,,,,,,0|i3sl7z:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Options mark-generated and suppress-generated-date don't effect on generating Java classes,CXF-7708,13152312,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,deki,dmvolod,dmvolod,13/Apr/18 15:07,14/Aug/18 10:19,14/Mar/19 02:31,20/Apr/18 18:56,3.2.4,,,3.2.5,,,Tooling,,,0,,,,,"The CXF-7618 implements option suppress-generated-date but this option as well as mark-generated are not propagating to the WSDLToJavaContainer as command line arguments are note the same as generator arguments.

This is fix for this issue, however we don't have separate tests for cxf-codegen-plugin as well as wsdl2java command line tool.",,,,,,,,,,,,,,,,,CXF-7618,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-04-13 15:12:44.573,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Mon Apr 23 11:26:57 UTC 2018,,,,,,0|i3sj1z:,9223372036854775807,,,,,,,,"13/Apr/18 15:12;githubbot;dmvolod opened a new pull request #405: CXF-7708 Options mark-generated and suppress-generated-date don't effect on generating Java classes
URL: https://github.com/apache/cxf/pull/405
 
 
   on generating Java classes

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","13/Apr/18 16:14;githubbot;deki commented on issue #405: CXF-7708 Options mark-generated and suppress-generated-date don't effect on generating Java classes
URL: https://github.com/apache/cxf/pull/405#issuecomment-381185833
 
 
   @typekpb fyi

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","14/Apr/18 04:26;githubbot;typekpb commented on issue #405: CXF-7708 Options mark-generated and suppress-generated-date don't effect on generating Java classes
URL: https://github.com/apache/cxf/pull/405#issuecomment-381302408
 
 
   Well, I've noticed that with the latest version of cxf it didn't work. So
   would be very thankful for the fix.
   
   On Fri, Apr 13, 2018, 18:14 Dennis Kieselhorst <notifications@github.com>
   wrote:
   
   > @typekpb <https://github.com/typekpb> fyi
   >
   > —
   > You are receiving this because you were mentioned.
   > Reply to this email directly, view it on GitHub
   > <https://github.com/apache/cxf/pull/405#issuecomment-381185833>, or mute
   > the thread
   > <https://github.com/notifications/unsubscribe-auth/AAegbJjt7VllEI8U_KMnh8Xr2-GbAvFiks5toM7hgaJpZM4TTnt9>
   > .
   >
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","14/Apr/18 18:35;githubbot;deki commented on issue #405: CXF-7708 Options mark-generated and suppress-generated-date don't effect on generating Java classes
URL: https://github.com/apache/cxf/pull/405#issuecomment-381350270
 
 
   Hmm I wonder why does the unittest not fail? If this is a different case, could you please add one for it so that we are covered in future?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","14/Apr/18 19:20;githubbot;dmvolod commented on issue #405: CXF-7708 Options mark-generated and suppress-generated-date don't effect on generating Java classes
URL: https://github.com/apache/cxf/pull/405#issuecomment-381353639
 
 
   The reason why the tests did not fall was that they covered only the process of transformation and not the wsdl2java or cxf-codegen-plugin itself. Yes, it's better to add unit tests for this.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","18/Apr/18 04:34;githubbot;deki commented on issue #405: CXF-7708 Options mark-generated and suppress-generated-date don't effect on generating Java classes
URL: https://github.com/apache/cxf/pull/405#issuecomment-382257703
 
 
   Ok, would it be possible for one of you to add a unit test, please?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","18/Apr/18 05:30;githubbot;dmvolod commented on issue #405: CXF-7708 Options mark-generated and suppress-generated-date don't effect on generating Java classes
URL: https://github.com/apache/cxf/pull/405#issuecomment-382266791
 
 
   Yes, working on it for codegen plugin, but looks like no enforce plugin configured for build and integration test fails don't broke build pipeline. Also it contains jdk6 test which is always fails and i don't know is it actual or not.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","18/Apr/18 05:50;githubbot;deki commented on issue #405: CXF-7708 Options mark-generated and suppress-generated-date don't effect on generating Java classes
URL: https://github.com/apache/cxf/pull/405#issuecomment-382269932
 
 
   I think the jdk6 testcase is no longer valid for 3.2.x but we should probably have one for toolchains. I try to modify it and switch the invoker-plugin to break the build afterwards...

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","18/Apr/18 13:15;githubbot;deki commented on issue #405: CXF-7708 Options mark-generated and suppress-generated-date don't effect on generating Java classes
URL: https://github.com/apache/cxf/pull/405#issuecomment-382382232
 
 
   Ok the build now fails but I had to disable the toolchain test due to CXF-7714.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","20/Apr/18 09:56;githubbot;dmvolod commented on issue #405: CXF-7708 Options mark-generated and suppress-generated-date don't effect on generating Java classes
URL: https://github.com/apache/cxf/pull/405#issuecomment-383047785
 
 
   @deki , i've added it and fix current build process. Please review.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","20/Apr/18 18:53;githubbot;deki closed pull request #405: CXF-7708 Options mark-generated and suppress-generated-date don't effect on generating Java classes
URL: https://github.com/apache/cxf/pull/405
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/maven-plugins/codegen-plugin/pom.xml b/maven-plugins/codegen-plugin/pom.xml
index 907a543109a..698aae30e8d 100644
--- a/maven-plugins/codegen-plugin/pom.xml
+++ b/maven-plugins/codegen-plugin/pom.xml
@@ -183,10 +183,14 @@
                             <goal>verify</goal>
                         </goals>
                         <configuration>
+                            <pomIncludes>
+                                <!-- Enable listed it's. Exclude toolchain till https://issues.apache.org/jira/browse/CXF-7714 is fixed -->
+                                <pomInclude>wsdl-artifact-resolution/pom.xml</pomInclude>
+                                <pomInclude>mark-generated/pom.xml</pomInclude>
+                            </pomIncludes>
                             <settingsFile>src/it/settings.xml</settingsFile>
                             <cloneProjectsTo>${project.build.directory}/it</cloneProjectsTo>
-                            <!-- disable toolchain till https://issues.apache.org/jira/browse/CXF-7714 is fixed -->
-                            <invokerTest>!jdk-cxf-with-toolchain</invokerTest>
+                            <postBuildHookScript>verify</postBuildHookScript>
                         </configuration>
                     </execution>
                 </executions>
diff --git a/maven-plugins/codegen-plugin/src/it/mark-generated/Cxf7708Service-1.0.0.wsdl b/maven-plugins/codegen-plugin/src/it/mark-generated/Cxf7708Service-1.0.0.wsdl
new file mode 100644
index 00000000000..96831031d81
--- /dev/null
+++ b/maven-plugins/codegen-plugin/src/it/mark-generated/Cxf7708Service-1.0.0.wsdl
@@ -0,0 +1,269 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  Licensed to the Apache Software Foundation (ASF) under one
+  or more contributor license agreements. See the NOTICE file
+  distributed with this work for additional information
+  regarding copyright ownership. The ASF licenses this file
+  to you under the Apache License, Version 2.0 (the
+  ""License""); you may not use this file except in compliance
+  with the License. You may obtain a copy of the License at
+ 
+  http://www.apache.org/licenses/LICENSE-2.0
+ 
+  Unless required by applicable law or agreed to in writing,
+  software distributed under the License is distributed on an
+  ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+  KIND, either express or implied. See the License for the
+  specific language governing permissions and limitations
+  under the License.
+-->
+<wsdl:definitions xmlns=""http://schemas.xmlsoap.org/wsdl/"" xmlns:soap=""http://schemas.xmlsoap.org/wsdl/soap/"" xmlns:tns=""http://cxf.apache.org/w2j/hello_world_soap_http"" xmlns:x1=""http://cxf.apache.org/w2j/hello_world_soap_http/types"" xmlns:wsdl=""http://schemas.xmlsoap.org/wsdl/"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" targetNamespace=""http://cxf.apache.org/w2j/hello_world_soap_http"" name=""HelloWorld"">
+    <wsdl:types>
+        <schema xmlns=""http://www.w3.org/2001/XMLSchema"" xmlns:x1=""http://cxf.apache.org/w2j/hello_world_soap_http/types"" targetNamespace=""http://cxf.apache.org/w2j/hello_world_soap_http/types"" elementFormDefault=""qualified"">
+            <element name=""sayHi"">
+                <complexType/>
+            </element>
+            <element name=""sayHiResponse"">
+                <complexType>
+                    <sequence>
+                        <element name=""responseType"" type=""string""/>
+                    </sequence>
+                </complexType>
+            </element>
+            <element name=""greetMe"">
+                <complexType>
+                    <sequence>
+                        <element name=""requestType"" type=""string""/>
+                    </sequence>
+                </complexType>
+            </element>
+            <element name=""greetMeResponse"">
+                <complexType>
+                    <sequence>
+                        <element name=""responseType"" type=""string""/>
+                    </sequence>
+                </complexType>
+            </element>
+            <element name=""greetMeSometime"">
+                <complexType>
+                    <sequence>
+                        <element name=""requestType"" type=""string""/>
+                    </sequence>
+                </complexType>
+            </element>
+            <element name=""greetMeSometimeResponse"">
+                <complexType>
+                    <sequence>
+                        <element name=""responseType"" type=""string""/>
+                    </sequence>
+                </complexType>
+            </element>
+            <element name=""greetMeOneWay"">
+                <complexType>
+                    <sequence>
+                        <element name=""requestType"" type=""string""/>
+                    </sequence>
+                </complexType>
+            </element>
+            <element name=""testDocLitFault"">
+                <complexType>
+                    <sequence>
+                        <element name=""faultType"" type=""string""/>
+                    </sequence>
+                </complexType>
+            </element>
+            <element name=""testDocLitFaultResponse"">
+                <complexType>
+                    <sequence/>
+                </complexType>
+            </element>
+            <complexType name=""ErrorCode"">
+                <sequence>
+                    <element name=""minor"" type=""short""/>
+                    <element name=""major"" type=""short""/>
+                </sequence>
+            </complexType>
+            <element name=""NoSuchCodeLit"">
+                <complexType>
+                    <sequence>
+                        <element name=""code"" type=""x1:ErrorCode""/>
+                    </sequence>
+                </complexType>
+            </element>
+            <element name=""BadRecordLit"" type=""string""/>
+            <complexType name=""BadRecord"">
+                <sequence>
+                    <element name=""reason"" type=""string""/>
+                    <element name=""code"" type=""short""/>
+                </sequence>
+            </complexType>
+            <complexType name=""addNumbers"">
+                <sequence>
+                    <element name=""arg0"" type=""int""/>
+                    <element name=""arg1"" type=""int""/>
+                </sequence>
+            </complexType>
+            <element name=""addNumbers"" type=""x1:addNumbers""/>
+            <complexType name=""addNumbersResponse"">
+                <sequence>
+                    <element name=""return"" type=""int""/>
+                </sequence>
+            </complexType>
+            <element name=""addNumbersResponse"" type=""x1:addNumbersResponse""/>
+            <element name=""BareDocument"" type=""string""/>
+            <element name=""BareDocumentResponse"">
+                <complexType>
+                    <sequence>
+                        <element name=""company"" type=""string""/>
+                    </sequence>
+                    <attribute name=""id"" type=""int""/>
+                </complexType>
+            </element>
+        </schema>
+    </wsdl:types>
+    <wsdl:message name=""sayHiRequest"">
+        <wsdl:part name=""in"" element=""x1:sayHi""/>
+    </wsdl:message>
+    <wsdl:message name=""sayHiResponse"">
+        <wsdl:part name=""out"" element=""x1:sayHiResponse""/>
+    </wsdl:message>
+    <wsdl:message name=""greetMeRequest"">
+        <wsdl:part name=""in"" element=""x1:greetMe""/>
+    </wsdl:message>
+    <wsdl:message name=""greetMeResponse"">
+        <wsdl:part name=""out"" element=""x1:greetMeResponse""/>
+    </wsdl:message>
+    <wsdl:message name=""greetMeSometimeRequest"">
+        <wsdl:part name=""in"" element=""x1:greetMeSometime""/>
+    </wsdl:message>
+    <wsdl:message name=""greetMeSometimeResponse"">
+        <wsdl:part name=""out"" element=""x1:greetMeSometimeResponse""/>
+    </wsdl:message>
+    <wsdl:message name=""greetMeOneWayRequest"">
+        <wsdl:part name=""in"" element=""x1:greetMeOneWay""/>
+    </wsdl:message>
+    <wsdl:message name=""testDocLitFaultRequest"">
+        <wsdl:part name=""in"" element=""x1:testDocLitFault""/>
+    </wsdl:message>
+    <wsdl:message name=""testDocLitFaultResponse"">
+        <wsdl:part name=""out"" element=""x1:testDocLitFaultResponse""/>
+    </wsdl:message>
+    <wsdl:message name=""NoSuchCodeLitFault"">
+        <wsdl:part name=""NoSuchCodeLit"" element=""x1:NoSuchCodeLit""/>
+    </wsdl:message>
+    <wsdl:message name=""BadRecordLitFault"">
+        <wsdl:part name=""BadRecordLit"" element=""x1:BadRecordLit""/>
+    </wsdl:message>
+    <wsdl:message name=""testDocLitBareRequest"">
+        <wsdl:part name=""in"" element=""x1:BareDocument""/>
+    </wsdl:message>
+    <wsdl:message name=""testDocLitBareResponse"">
+        <wsdl:part name=""out"" element=""x1:BareDocumentResponse""/>
+    </wsdl:message>
+    <wsdl:portType name=""Greeter"">
+        <wsdl:documentation>porttype documentation</wsdl:documentation>
+        <wsdl:operation name=""sayHi"">
+            <wsdl:documentation>porttype op documentation</wsdl:documentation>
+            <wsdl:input name=""sayHiRequest"" message=""tns:sayHiRequest""/>
+            <wsdl:output name=""sayHiResponse"" message=""tns:sayHiResponse""/>
+        </wsdl:operation>
+        <wsdl:operation name=""greetMe"">
+            <wsdl:input name=""greetMeRequest"" message=""tns:greetMeRequest""/>
+            <wsdl:output name=""greetMeResponse"" message=""tns:greetMeResponse""/>
+        </wsdl:operation>
+        <wsdl:operation name=""greetMeSometime"">
+            <wsdl:input name=""greetMeSometimeRequest"" message=""tns:greetMeSometimeRequest""/>
+            <wsdl:output name=""greetMeSometimeResponse"" message=""tns:greetMeSometimeResponse""/>
+        </wsdl:operation>
+        <wsdl:operation name=""greetMeOneWay"">
+            <wsdl:input name=""greetMeOneWayRequest"" message=""tns:greetMeOneWayRequest""/>
+        </wsdl:operation>
+        <wsdl:operation name=""testDocLitFault"">
+            <wsdl:input name=""testDocLitFaultRequest"" message=""tns:testDocLitFaultRequest""/>
+            <wsdl:output name=""testDocLitFaultResponse"" message=""tns:testDocLitFaultResponse""/>
+            <wsdl:fault name=""NoSuchCodeLitFault"" message=""tns:NoSuchCodeLitFault""/>
+            <wsdl:fault name=""BadRecordLitFault"" message=""tns:BadRecordLitFault""/>
+        </wsdl:operation>
+        <wsdl:operation name=""testDocLitBare"">
+            <wsdl:input name=""testDocLitBareRequest"" message=""tns:testDocLitBareRequest""/>
+            <wsdl:output name=""testDocLitBareResponse"" message=""tns:testDocLitBareResponse""/>
+        </wsdl:operation>
+    </wsdl:portType>
+    <wsdl:binding name=""Greeter_SOAPBinding"" type=""tns:Greeter"">
+        <soap:binding style=""document"" transport=""http://schemas.xmlsoap.org/soap/http""/>
+        <wsdl:operation name=""sayHi"">
+            <soap:operation style=""document""/>
+            <wsdl:input>
+                <soap:body use=""literal""/>
+            </wsdl:input>
+            <wsdl:output>
+                <soap:body use=""literal""/>
+            </wsdl:output>
+        </wsdl:operation>
+        <wsdl:operation name=""greetMe"">
+            <soap:operation style=""document""/>
+            <wsdl:input>
+                <soap:body use=""literal""/>
+            </wsdl:input>
+            <wsdl:output>
+                <soap:body use=""literal""/>
+            </wsdl:output>
+        </wsdl:operation>
+        <wsdl:operation name=""greetMeSometime"">
+            <soap:operation style=""document""/>
+            <wsdl:input>
+                <soap:body use=""literal""/>
+            </wsdl:input>
+            <wsdl:output>
+                <soap:body use=""literal""/>
+            </wsdl:output>
+        </wsdl:operation>
+        <wsdl:operation name=""greetMeOneWay"">
+            <soap:operation style=""document""/>
+            <wsdl:input>
+                <soap:body use=""literal""/>
+            </wsdl:input>
+        </wsdl:operation>
+        <wsdl:operation name=""testDocLitFault"">
+            <soap:operation style=""document""/>
+            <wsdl:input>
+                <soap:body use=""literal""/>
+            </wsdl:input>
+            <wsdl:output>
+                <soap:body use=""literal""/>
+            </wsdl:output>
+            <wsdl:fault name=""NoSuchCodeLitFault"">
+                <soap:fault name=""NoSuchCodeLitFault"" use=""literal""/>
+            </wsdl:fault>
+            <wsdl:fault name=""BadRecordLitFault"">
+                <soap:fault name=""BadRecordLitFault"" use=""literal""/>
+            </wsdl:fault>
+        </wsdl:operation>
+        <wsdl:operation name=""testDocLitBare"">
+            <soap:operation style=""document"" soapAction=""http://cxf.apache.org/w2j/hello_world_soap_http/testDocLitBare""/>
+            <wsdl:input name=""testDocLitBareRequest"">
+                <soap:body use=""literal""/>
+            </wsdl:input>
+            <wsdl:output name=""testDocLitBareResponse"">
+                <soap:body use=""literal""/>
+            </wsdl:output>
+        </wsdl:operation>
+    </wsdl:binding>
+    <wsdl:service name=""SOAPService"">
+        <wsdl:port name=""SoapPort"" binding=""tns:Greeter_SOAPBinding"">
+            <soap:address location=""http://localhost:9000/SoapContext/SoapPort""/>
+            <wswa:UsingAddressing xmlns:wswa=""http://www.w3.org/2005/02/addressing/wsdl""/>
+        </wsdl:port>
+    </wsdl:service>
+    <wsdl:service name=""SOAPService_Test1"">
+        <wsdl:documentation>service documentation</wsdl:documentation>
+        <wsdl:port name=""SoapPort_Test1"" binding=""tns:Greeter_SOAPBinding"">
+            <wsdl:documentation>port1 documentation</wsdl:documentation>
+            <soap:address location=""http://localhost:9100""/>
+        </wsdl:port>
+        <wsdl:port name=""SoapPort_Test2"" binding=""tns:Greeter_SOAPBinding"">
+            <wsdl:documentation>port2 documentation</wsdl:documentation>
+            <soap:address location=""http://localhost:9101""/>
+        </wsdl:port>
+    </wsdl:service>
+</wsdl:definitions>
diff --git a/maven-plugins/codegen-plugin/src/it/mark-generated/pom.xml b/maven-plugins/codegen-plugin/src/it/mark-generated/pom.xml
new file mode 100644
index 00000000000..17ec1dfc8e5
--- /dev/null
+++ b/maven-plugins/codegen-plugin/src/it/mark-generated/pom.xml
@@ -0,0 +1,67 @@
+<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
+  <modelVersion>4.0.0</modelVersion>
+
+    <groupId>org.apache.cxf</groupId>
+    <artifactId>cxf7708-codegen</artifactId>
+    <version>1.0.0-SNAPSHOT</version>
+    <packaging>jar</packaging>
+    <name>cxf7708-codegen</name>
+    
+    <properties>
+        <wsdl.groupid>org.apache.cxf.cxf7708</wsdl.groupid>
+        <wsdl.artifactid>Cxf7708Service</wsdl.artifactid>
+        <wsdl.version>1.0.0</wsdl.version>
+    </properties>
+
+    <build>
+        <plugins>
+            <plugin>
+                <artifactId>maven-install-plugin</artifactId>
+                <version>2.5.2</version>
+                <executions>
+                    <execution>
+                        <phase>initialize</phase>
+                        <goals>
+                            <goal>install-file</goal>
+                        </goals>
+                        <configuration>
+                            <groupId>${wsdl.groupid}</groupId>
+                            <artifactId>${wsdl.artifactid}</artifactId>
+                            <version>${wsdl.version}</version>
+                            <packaging>wsdl</packaging>
+                            <file>${wsdl.artifactid}-${wsdl.version}.wsdl</file>
+                        </configuration>
+                    </execution>
+                </executions>
+            </plugin>
+            <plugin>
+                <groupId>org.apache.cxf</groupId>
+                <artifactId>cxf-codegen-plugin</artifactId>
+                <version>3.2.5-SNAPSHOT</version>
+                <executions>
+                    <execution>
+                        <id>generate-sources</id>
+                        <phase>generate-sources</phase>
+                        <configuration>
+                            <wsdlOptions>
+                                <wsdlOption>
+                                    <wsdlArtifact>
+                                        <groupId>${wsdl.groupid}</groupId>
+                                        <artifactId>${wsdl.artifactid}</artifactId>
+                                        <version>${wsdl.version}</version>
+                                    </wsdlArtifact>
+                                    <wsdlLocation>classpath:${wsdl.artifactid}.wsdl</wsdlLocation>
+                                    <suppressGeneratedDate>true</suppressGeneratedDate>
+                                    <markGenerated>true</markGenerated>
+                                </wsdlOption>
+                            </wsdlOptions>
+                        </configuration>
+                        <goals>
+                            <goal>wsdl2java</goal>
+                        </goals>
+                    </execution>
+                </executions>
+            </plugin>
+        </plugins>
+    </build>
+</project>
diff --git a/maven-plugins/codegen-plugin/src/it/mark-generated/verify.groovy b/maven-plugins/codegen-plugin/src/it/mark-generated/verify.groovy
new file mode 100644
index 00000000000..795cffc71cd
--- /dev/null
+++ b/maven-plugins/codegen-plugin/src/it/mark-generated/verify.groovy
@@ -0,0 +1,26 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+import javax.xml.bind.DatatypeConverter 
+
+File generatedFile = new File( basedir, 'target/generated-sources/cxf/org/apache/cxf/w2j/hello_world_soap_http/Greeter.java' )
+String generatedDate = DatatypeConverter.printDateTime(Calendar.getInstance()).substring(1, 10)
+assert generatedFile.exists()
+assert generatedFile.text.contains('@Generated')
+assert !generatedFile.text.contains('* ' + generatedDate)
diff --git a/maven-plugins/codegen-plugin/src/it/wsdl-artifact-resolution/pom.xml b/maven-plugins/codegen-plugin/src/it/wsdl-artifact-resolution/pom.xml
index fd538231d95..e8604d164ce 100644
--- a/maven-plugins/codegen-plugin/src/it/wsdl-artifact-resolution/pom.xml
+++ b/maven-plugins/codegen-plugin/src/it/wsdl-artifact-resolution/pom.xml
@@ -29,7 +29,7 @@
                             <artifactId>${wsdl.artifactid}</artifactId>
                             <version>${wsdl.version}</version>
                             <packaging>wsdl</packaging>
-                            <file>Cxf7067Service-1.0.0.wsdl</file>
+                            <file>${wsdl.artifactid}-${wsdl.version}.wsdl</file>
                         </configuration>
                     </execution>
                 </executions>
diff --git a/maven-plugins/codegen-plugin/src/main/java/org/apache/cxf/maven_plugin/wsdl2java/WsdlOption.java b/maven-plugins/codegen-plugin/src/main/java/org/apache/cxf/maven_plugin/wsdl2java/WsdlOption.java
index ec8646484d0..4d355b0ba94 100644
--- a/maven-plugins/codegen-plugin/src/main/java/org/apache/cxf/maven_plugin/wsdl2java/WsdlOption.java
+++ b/maven-plugins/codegen-plugin/src/main/java/org/apache/cxf/maven_plugin/wsdl2java/WsdlOption.java
@@ -169,9 +169,9 @@ public String toString() {
             list.add(""-validate="" + getValidateWsdl());
         }
         addIfTrue(list, isMarkGenerated() != null && isMarkGenerated(),
-            ""-"" + ToolConstants.CFG_MARK_GENERATED);
+            ""-"" + ToolConstants.CFG_MARK_GENERATED_OPTION);
         addIfTrue(list, isSuppressGeneratedDate() != null && isSuppressGeneratedDate(),
-            ""-"" + ToolConstants.CFG_SUPPRESS_GENERATED_DATE);
+            ""-"" + ToolConstants.CFG_SUPPRESS_GENERATED_DATE_OPTION);
         addIfNotNull(list, getDefaultExcludesNamespace(), ""-dex"");
         addIfNotNull(list, getDefaultNamespacePackageMapping(), ""-dns"");
         addIfNotNull(list, getServiceName(), ""-sn"");
diff --git a/tools/common/src/main/java/org/apache/cxf/tools/common/ToolConstants.java b/tools/common/src/main/java/org/apache/cxf/tools/common/ToolConstants.java
index 5530ef541fe..9e15c43a6dc 100644
--- a/tools/common/src/main/java/org/apache/cxf/tools/common/ToolConstants.java
+++ b/tools/common/src/main/java/org/apache/cxf/tools/common/ToolConstants.java
@@ -100,8 +100,11 @@
     public static final String CFG_FAULT_SERIAL_VERSION_UID = ""faultSerialVersionUID"";
     public static final String CFG_EXCEPTION_SUPER = ""exceptionSuper"";
     public static final String CFG_SEI_SUPER = ""seiSuper"";
-    public static final String CFG_MARK_GENERATED = ""mark-generated"";
-    public static final String CFG_SUPPRESS_GENERATED_DATE = ""suppress-generated-date"";
+    public static final String CFG_MARK_GENERATED = ""markGenerated"";
+    public static final String CFG_SUPPRESS_GENERATED_DATE = ""suppressGeneratedDate"";
+    
+    public static final String CFG_MARK_GENERATED_OPTION = ""mark-generated"";
+    public static final String CFG_SUPPRESS_GENERATED_DATE_OPTION = ""suppress-generated-date"";
 
     //Internal Flag to generate
     public static final String CFG_IMPL_CLASS = ""implClass"";
diff --git a/tools/wsdlto/core/src/main/java/org/apache/cxf/tools/wsdlto/core/AbstractGenerator.java b/tools/wsdlto/core/src/main/java/org/apache/cxf/tools/wsdlto/core/AbstractGenerator.java
index 82ee3ac4ef3..2a1452ff68f 100644
--- a/tools/wsdlto/core/src/main/java/org/apache/cxf/tools/wsdlto/core/AbstractGenerator.java
+++ b/tools/wsdlto/core/src/main/java/org/apache/cxf/tools/wsdlto/core/AbstractGenerator.java
@@ -116,8 +116,9 @@ protected void setCommonAttributes() {
         setAttributes(""version"", Version.getCurrentVersion());
         setAttributes(""fullversion"", Version.getCompleteVersionString());
         setAttributes(""name"", Version.getName());
-        setAttributes(""markGenerated"", env.optionSet(ToolConstants.CFG_MARK_GENERATED));
-        setAttributes(""suppressGeneratedDate"", env.optionSet(ToolConstants.CFG_SUPPRESS_GENERATED_DATE));
+        setAttributes(ToolConstants.CFG_MARK_GENERATED, env.optionSet(ToolConstants.CFG_MARK_GENERATED));
+        setAttributes(ToolConstants.CFG_SUPPRESS_GENERATED_DATE,
+                      env.optionSet(ToolConstants.CFG_SUPPRESS_GENERATED_DATE));
         if (env.optionSet(ToolConstants.CFG_FRONTEND)) {
             setAttributes(""frontend"", env.get(ToolConstants.CFG_FRONTEND));
         }
diff --git a/tools/wsdlto/databinding/jaxb/src/main/java/org/apache/cxf/tools/wsdlto/databinding/jaxb/JAXBDataBinding.java b/tools/wsdlto/databinding/jaxb/src/main/java/org/apache/cxf/tools/wsdlto/databinding/jaxb/JAXBDataBinding.java
index 6e071d09766..163a77fb760 100644
--- a/tools/wsdlto/databinding/jaxb/src/main/java/org/apache/cxf/tools/wsdlto/databinding/jaxb/JAXBDataBinding.java
+++ b/tools/wsdlto/databinding/jaxb/src/main/java/org/apache/cxf/tools/wsdlto/databinding/jaxb/JAXBDataBinding.java
@@ -431,7 +431,7 @@ public void initialize(ToolContext c) throws ToolException {
             // Add the @Generated annotation in the Java files generated. This is done by passing
             // '-mark-generated' attribute to jaxb xjc.
             try {
-                opts.parseArgument(new String[] {""-mark-generated"" }, 0);
+                opts.parseArgument(new String[] {""-"" + ToolConstants.CFG_MARK_GENERATED_OPTION}, 0);
             } catch (BadCommandLineException e) {
                 LOG.log(Level.SEVERE, e.getMessage());
                 throw new ToolException(e);


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","20/Apr/18 18:56;deki;Merged, thanks for the PR.","22/Apr/18 09:26;deki;[~dmvolod]

Unfortunately the build with JDK 9 now fails ([https://builds.apache.org/view/A-D/view/CXF/job/CXF-Master-JDK9/357/console]):
{noformat}
[INFO] Building: mark-generated/pom.xml
[INFO] run post-build script verify.groovy
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.codehaus.groovy.reflection.CachedClass (file:/home/jenkins/jenkins-slave/workspace/CXF-Master-JDK9/.repository/org/codehaus/groovy/groovy-all/2.4.8/groovy-all-2.4.8.jar) to method java.lang.Object.finalize()
WARNING: Please consider reporting this to the maintainers of org.codehaus.groovy.reflection.CachedClass
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
[INFO]           mark-generated/pom.xml ........................... FAILED (8.5 s)
[INFO]   The post-build script did not succeed. startup failed:
Script1.groovy: 20: unable to resolve class javax.xml.bind.DatatypeConverter
 @ line 20, column 1.
   import javax.xml.bind.DatatypeConverter 
   ^
{noformat}","22/Apr/18 09:48;dmvolod;[~deki], thanks, sorry, will look at this issue.","23/Apr/18 09:55;githubbot;dmvolod opened a new pull request #411: CXF-7708: fix groovy verification for jdk9 and jdk10
URL: https://github.com/apache/cxf/pull/411
 
 
   Fixed and tested on JDK 8,9 and 10. @deki please review.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","23/Apr/18 11:26;githubbot;deki closed pull request #411: CXF-7708: fix groovy verification for jdk9 and jdk10
URL: https://github.com/apache/cxf/pull/411
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/maven-plugins/codegen-plugin/pom.xml b/maven-plugins/codegen-plugin/pom.xml
index 683e833a630..80d0d9035c1 100644
--- a/maven-plugins/codegen-plugin/pom.xml
+++ b/maven-plugins/codegen-plugin/pom.xml
@@ -190,12 +190,17 @@
                             </pomIncludes>
                             <settingsFile>src/it/settings.xml</settingsFile>
                             <cloneProjectsTo>${project.build.directory}/it</cloneProjectsTo>
-                            <!-- CXF-7708 temporarily disabled as it fails with JDK 9
                             <postBuildHookScript>verify</postBuildHookScript>
-                            -->
                         </configuration>
                     </execution>
                 </executions>
+                <dependencies>
+                   <dependency>
+                       <groupId>javax.xml.bind</groupId>
+                       <artifactId>jaxb-api</artifactId>
+                       <version>${cxf.jaxb.version}</version>
+                    </dependency>
+                </dependencies>
             </plugin>
         </plugins>
     </build>


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
",,,,,,,,,,,,,,
JAXB doesn't (un)marshall property with @XmlElementRef,CXF-7707,13151997,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,deki,rnetuka,rnetuka,12/Apr/18 14:22,20/Apr/18 19:02,14/Mar/19 02:31,20/Apr/18 19:02,,,,3.2.5,,,JAXB Databinding,,,0,,,,,"When marshalling/unmarshalling JAX-WS response, the JAXB implementation ignores @XmlElementRef annotation.",,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-04-12 14:24:10.856,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Thu Apr 12 19:35:57 UTC 2018,,,,,,0|i3sh5b:,9223372036854775807,,,,,,,,"12/Apr/18 14:24;githubbot;rnetuka opened a new pull request #404: [CXF-7707] JAXB doesn't (un)marshall property with @XmlElementRef
URL: https://github.com/apache/cxf/pull/404
 
 
   JIRA: https://issues.apache.org/jira/browse/CXF-7707
   
   See downstream for more info:
   https://issues.jboss.org/browse/JBWS-4097
   https://github.com/jboss/cxf/pull/18

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","12/Apr/18 19:35;githubbot;deki closed pull request #404: [CXF-7707] JAXB doesn't (un)marshall property with @XmlElementRef
URL: https://github.com/apache/cxf/pull/404
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBDataBinding.java b/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBDataBinding.java
index 6f224b11ad6..bfa4d3cd020 100644
--- a/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBDataBinding.java
+++ b/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBDataBinding.java
@@ -47,6 +47,7 @@
 import javax.xml.bind.Unmarshaller;
 import javax.xml.bind.ValidationEventHandler;
 import javax.xml.bind.annotation.XmlElement;
+import javax.xml.bind.annotation.XmlElementRef;
 import javax.xml.bind.annotation.adapters.XmlAdapter;
 import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
 import javax.xml.namespace.QName;
@@ -798,6 +799,12 @@ private static Field getElField(String partName, final Class<?> wrapperType) {
                 && partName.equals(el.name())) {
                 return field;
             }
+
+            XmlElementRef xmlElementRefAnnotation = field.getAnnotation(XmlElementRef.class);
+            if (xmlElementRefAnnotation != null && partName.equals(xmlElementRefAnnotation.name())) {
+                return field;
+            }
+
             if (field.getName().equals(fieldName)) {
                 return field;
             }


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","12/Apr/18 19:35;deki;Thanks for the PR, I've merged it. Could you please add a unittest for it?",,,,,,,,,,,,,,,,,,,,,,,,,,,
Use Java EL api and impl bundle from Servicemix for cxf-bean-validation feature,CXF-7705,13151850,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,ffang,ffang,ffang,12/Apr/18 04:36,12/Apr/18 07:10,14/Mar/19 02:31,12/Apr/18 07:10,,,,3.1.16,3.2.5,,OSGi,,,0,,,,,Ensure the SPI mechanism can work inside OSGi container,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,2018-04-12 04:36:04.0,,,,,,0|i3sg8n:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Public constructor of SwaggerUiService takes package-private argument of SwaggerUiResourceLocator,CXF-7703,13150518,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,coheigea,skissane@medallia.com,skissane@medallia.com,06/Apr/18 06:36,13/Apr/18 10:19,14/Mar/19 02:31,13/Apr/18 10:19,3.2.4,,,3.2.5,,,,,,0,,,,,"In CXF 3.2.4 (and also in master), the class org.apache.cxf.jaxrs.swagger.SwaggerUiService has a single public constructor,
public SwaggerUiService(SwaggerUiResourceLocator locator, Map<String, String> mediaTypes)

However, the first argument SwaggerUiResourceLocator is a package-private class.
So, effectively no one outside the package can use that constructor.
This doesn't make any logical sense. Either the constructor should be package-private, or the SwaggerUiResourceLocator class should be public.

In CXF 3.1.11, I subclass Swagger2Feature.SwaggerUIService to modify its behaviour.
I am trying to upgrade from CXF 3.1.11 to CXF 3.2.4.
In CXF 3.2.4, Swagger2Feature.SwaggerUIService has been replaced by SwaggerUiService class.
But I cannot subclass it because SwaggerUiResourceLocator is package-private.

I think the simplest solution would be to make SwaggerUiResourceLocator a public class.",,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-04-13 09:27:40.362,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Fri Apr 13 09:27:40 UTC 2018,,,,,,0|i3s81b:,9223372036854775807,,,,,,,,"13/Apr/18 09:27;coheigea;Agreed, I'll make SwaggerUiResourceLocator a public class.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
LoggingOutInterceptor doesn't write message body if encoding wasn't set,CXF-7700,13150155,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,ashakirin,ashakirin,ashakirin,04/Apr/18 20:47,08/Apr/18 09:01,14/Mar/19 02:31,08/Apr/18 09:01,3.1.15,,,3.1.16,3.2.5,,Core,,,0,,,,,"Fix for logging encoding made for [CXF-7033|https://issues.apache.org/jira/browse/CXF-7033] introduced following code into AbstractLoggingInterceptor:

{code}
StaxUtils.copy(new StreamSource(new InputStreamReader(in, encoding)), xwriter);
{code}

The problem is that in case if encoding=null (it is often the case in outbound chain), the InputStreamReader throws NLP preventing write message body into the log file.",,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,2018-04-04 20:47:23.0,,,,,,0|i3s5tj:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
wsdl2java client jar generation fails if jaxws binding is used,CXF-7695,13149738,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,reto.weiss@ivyteam.ch,reto.weiss@ivyteam.ch,03/Apr/18 13:19,13/Sep/18 11:57,14/Mar/19 02:31,13/Sep/18 11:57,3.2.4,,,3.2.5,,,,,,4,,,,,"The following exception is thrown by wsdl2java tool if I use option -clientjar and my wsdl contains a jaxws binding. The same error also happens if I use wsdl without jaxws binding but  provide a jaxws binding file with option -b:
{code:java}
C:\Tools\apache-cxf-3.2.4\bin>wsdl2java -d out -clientjar client.jar jxb/StockQuoteService.xml
Apr 03, 2018 3:15:49 PM org.apache.cxf.tools.wsdlto.WSDLToJavaContainer generateLocalWSDL
SCHWERWIEGEND: Failed to generate local wsdl for clientjar
java.lang.ClassCastException: org.apache.cxf.tools.wsdlto.frontend.jaxws.customization.JAXWSBinding cannot be cast to javax.wsdl.extensions.UnknownExtensibilityElement
        at javax.wsdl.extensions.UnknownExtensionSerializer.marshall(UnknownExtensionSerializer.java:34)
        at com.ibm.wsdl.xml.WSDLWriterImpl.printExtensibilityElements(WSDLWriterImpl.java:998)
        at com.ibm.wsdl.xml.WSDLWriterImpl.printPortTypes(WSDLWriterImpl.java:474)
        at com.ibm.wsdl.xml.WSDLWriterImpl.printDefinition(WSDLWriterImpl.java:133)
        at com.ibm.wsdl.xml.WSDLWriterImpl.writeWSDL(WSDLWriterImpl.java:1073)
        at com.ibm.wsdl.xml.WSDLWriterImpl.writeWSDL(WSDLWriterImpl.java:1098)
        at org.apache.cxf.tools.wsdlto.WSDLToJavaContainer.generateLocalWSDL(WSDLToJavaContainer.java:833)
        at org.apache.cxf.tools.wsdlto.WSDLToJavaContainer.processClientJar(WSDLToJavaContainer.java:348)
        at org.apache.cxf.tools.wsdlto.WSDLToJavaContainer.processWsdl(WSDLToJavaContainer.java:314)
        at org.apache.cxf.tools.wsdlto.WSDLToJavaContainer.execute(WSDLToJavaContainer.java:164)
        at org.apache.cxf.tools.wsdlto.WSDLToJavaContainer.execute(WSDLToJavaContainer.java:412)
        at org.apache.cxf.tools.common.toolspec.ToolRunner.runTool(ToolRunner.java:105)
        at org.apache.cxf.tools.wsdlto.WSDLToJava.run(WSDLToJava.java:113)
        at org.apache.cxf.tools.wsdlto.WSDLToJava.run(WSDLToJava.java:86)
        at org.apache.cxf.tools.wsdlto.WSDLToJava.main(WSDLToJava.java:185)


WSDLToJava Error: Failed to generate local wsdl for clientjar
{code}
This works fine with 3.1.9. Seems the error was introduced by commit: bcb6385a095dcaaf8390ecfc33e9e22b9149daad

because the class JAXWSBindingSerializer was deleted and removed from class JAXWSDefinitionBuilder.

 ",,,,,,,,,,,,,,,,,,,,,03/Apr/18 13:19;reto.weiss@ivyteam.ch;StockQuoteService.xml;https://issues.apache.org/jira/secure/attachment/12917364/StockQuoteService.xml,03/Apr/18 13:19;reto.weiss@ivyteam.ch;noWrappersBinding.xml;https://issues.apache.org/jira/secure/attachment/12917365/noWrappersBinding.xml,,2.0,,,,,,,,,,,,,,,,,,,2018-04-03 13:59:39.194,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Wed Apr 11 15:53:19 UTC 2018,,,,,,0|i3s39r:,9223372036854775807,,,,,,,,"03/Apr/18 13:59;githubbot;weissreto opened a new pull request #399: CXF-7695 wsdl2java client jar generation fails if jaxws binding is used
URL: https://github.com/apache/cxf/pull/399
 
 
   Revert some changes from commit bcb6385a095dcaaf8390ecfc33e9e22b9149daad that causes problem when generating ws client jar with jaxws bindings

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
",03/Apr/18 18:40;deki;[~dkulp] could you please take a look it this?,"11/Apr/18 09:15;reto.weiss@ivyteam.ch;Hi [~dkulp]

If you have any questions regarding this issue or the pull request do not hesitate asking me.

Regards","11/Apr/18 15:53;githubbot;dkulp closed pull request #399: CXF-7695 wsdl2java client jar generation fails if jaxws binding is used
URL: https://github.com/apache/cxf/pull/399
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/tools/wsdlto/frontend/jaxws/src/main/java/org/apache/cxf/tools/wsdlto/frontend/jaxws/customization/JAXWSBindingSerializer.java b/tools/wsdlto/frontend/jaxws/src/main/java/org/apache/cxf/tools/wsdlto/frontend/jaxws/customization/JAXWSBindingSerializer.java
new file mode 100644
index 00000000000..af498815743
--- /dev/null
+++ b/tools/wsdlto/frontend/jaxws/src/main/java/org/apache/cxf/tools/wsdlto/frontend/jaxws/customization/JAXWSBindingSerializer.java
@@ -0,0 +1,44 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.cxf.tools.wsdlto.frontend.jaxws.customization;
+
+import java.io.*;
+
+import javax.wsdl.Definition;
+import javax.wsdl.WSDLException;
+import javax.wsdl.extensions.ExtensibilityElement;
+import javax.wsdl.extensions.ExtensionRegistry;
+import javax.wsdl.extensions.ExtensionSerializer;
+import javax.xml.namespace.QName;
+
+public class JAXWSBindingSerializer implements ExtensionSerializer, Serializable {
+    public static final long serialVersionUID = 1;
+
+    public void marshall(@SuppressWarnings(""rawtypes"") Class parentType,
+                         QName elementType,
+                         ExtensibilityElement extension,
+                         PrintWriter pw,
+                         Definition def,
+                         ExtensionRegistry extReg)
+        throws WSDLException {
+        // This class is needed to generate the WSDL file included in the client jar. 
+        // It simply ignores the JAXWS Binding when generating the WSDL file. 
+    }
+}
diff --git a/tools/wsdlto/frontend/jaxws/src/main/java/org/apache/cxf/tools/wsdlto/frontend/jaxws/wsdl11/JAXWSDefinitionBuilder.java b/tools/wsdlto/frontend/jaxws/src/main/java/org/apache/cxf/tools/wsdlto/frontend/jaxws/wsdl11/JAXWSDefinitionBuilder.java
index 77e5cb81e22..9bcba862563 100644
--- a/tools/wsdlto/frontend/jaxws/src/main/java/org/apache/cxf/tools/wsdlto/frontend/jaxws/wsdl11/JAXWSDefinitionBuilder.java
+++ b/tools/wsdlto/frontend/jaxws/src/main/java/org/apache/cxf/tools/wsdlto/frontend/jaxws/wsdl11/JAXWSDefinitionBuilder.java
@@ -55,6 +55,7 @@
 import org.apache.cxf.tools.wsdlto.frontend.jaxws.customization.CustomizationParser;
 import org.apache.cxf.tools.wsdlto.frontend.jaxws.customization.JAXWSBinding;
 import org.apache.cxf.tools.wsdlto.frontend.jaxws.customization.JAXWSBindingDeserializer;
+import org.apache.cxf.tools.wsdlto.frontend.jaxws.customization.JAXWSBindingSerializer;
 import org.apache.cxf.wsdl.WSDLManager;
 
 public class JAXWSDefinitionBuilder extends AbstractWSDLBuilder {
@@ -99,6 +100,7 @@ private void registerJaxwsExtension(ExtensionRegistry registry) {
     }
 
     private void registerJAXWSBinding(ExtensionRegistry registry, Class<?> clz) {
+        registry.registerSerializer(clz, ToolConstants.JAXWS_BINDINGS, new JAXWSBindingSerializer());
         registry.registerDeserializer(clz, ToolConstants.JAXWS_BINDINGS, new JAXWSBindingDeserializer());
         registry.mapExtensionTypes(clz, ToolConstants.JAXWS_BINDINGS, JAXWSBinding.class);
     }


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
",,,,,,,,,,,,,,,,,,,,,,,,,,
spring boot jax-rs sample creates incorrect urls in swagger,CXF-7694,13149376,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,deki,presto9292,presto9292,01/Apr/18 19:57,28/Sep/18 14:26,14/Mar/19 02:31,03/Apr/18 19:58,3.2.4,,,3.2.5,,,JAX-RS,,,0,,,,,"The sample code in

[https://github.com/apache/cxf/tree/master/distribution/src/main/release/samples/jax_rs/spring_boot]

creates in swagger ui urls like

[http://localhost:8080/sayHello/q]

which do not work, instead of

[http://localhost:8080/services/helloservice/sayHello/q|http://localhost:8080/services/helloservice/sayHello/]

The problem started w. the commit of  ""[[CXF-7634] changed Spring Boot sample to use OpenApiFeature|https://github.com/apache/cxf/commit/5b7308408d8b0127a5ee4deea7bd66b44217dd58]""

 

 

 

 ",,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-04-03 19:58:23.366,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Fri Sep 28 14:26:41 UTC 2018,,,,,,0|i3s11r:,9223372036854775807,,,,,,,,"03/Apr/18 19:58;deki;CXF supports both OpenAPI spec 2 (the old classic Swagger stuff) and the new OpenAPI spec 3. I changed the sample to use the new one. While dynamicBasePath was default for Swagger2Feature it has to be set explictly for OpenApiFeature. [~reta] [~ilgrosso] was this intended?

Anyway I've fixed the sample in master branch.","03/Apr/18 20:36;reta;Good one, [~deki], I was trying to figure out the use cases when dynamicBasePath might be of use, even talked to [~sergey_beryozkin] at the time, and we kind of were not sure it should be set to ""true"" by default. Spring Boot is a good example when it is needed. The absence of the base path notation in the OpenAPI 3.0 also contributed to this decision (there is `servers` section). Do you think we have to reconsider the default behavior or adjusting the sample (+ documentation) would be the way to go? Thanks!","04/Apr/18 06:24;ilgrosso;[~deki] as far as I remember, it was not intentional: +1 to align OpenAPI 3.0 and Swagger 2.0 features.","08/Apr/18 18:14;reta;[~ilgrosso] [~deki] Sorry for the delay guys. So I've looked into the differences between Swagger2 and OpenApi integration with respect to customizer usage. The *Swagger2Feature* always creates *Swagger2Customizer* instance and forceably sets the ""*dynamicBasePath*"" to ""*true*"" (irrespective what is set in the *Swagger2Customizer* instance). Whereas *OpenApiFeature* does not do that and uses the *OpenApiCustomizer* only when it is provided (the reason for that is that integration of the customizer into OpenApi is much more engaging than in Swagger2, if it could be avoided it would be better), as such accepting the customizer properties as is. Also, the difference at large is that there is no *basePath* property in the OpenApi v3.0 specification anymore, there are other means to inject this metadata into the specification (*servers* component). If you guys agree, I would prefer to keep it this way, at least the customization is now respected as-is, no altering from the *OpenApiFeature* side. What do you think?","08/Apr/18 19:06;deki;I just noticed that pushing my change has failed, I've just fixed it and of course setting OpenApiCustomizer works for the sample.

But I'm wondering how to handle it for the spring_boot_scan sample? With the current implementation it's no longer possible to scan the default OpenApiFeature as the urls will be incorrect or am I missing something?","08/Apr/18 19:30;reta;Thanks, Dennis. That's right, it is problematic with the default one when base path does not match. So we could use at least 4 options which comes to mind first:

 - allow to specify customizer class in the swagger.properties (in this case, the default OpenApiFeature will work)

 - subclass the OpenApiFeature with customized one (and supply the customizer)

 - provide the OpenApiFeature constructor which accepts OpenApiCustomizer instance

 - supply openapi-configuration.yaml (which could specify servers section with the correct base path)

Thanks.","09/Apr/18 06:34;ilgrosso;[~reta] wrote:
{quote}
If you guys agree, I would prefer to keep it this way, at least the customization is now respected as-is, no altering from the OpenApiFeature side. What do you think?
{quote}

That's also fine to me, to keep the existing behavior, if this is not causing troubles to other use-cases, naturally.","25/Apr/18 10:37;deki;Sorry for the late response. I adapted the Swagger Petstore sample and it's really ugly that it doesn't work out of the box: https://github.com/deki/swagger-samples/tree/java-cxf-spring-boot-minimal/java/java-cxf-spring-boot-minimal

I agree that changing the default within a minor release is bad so I thought of providing openapi-configuration.yaml as Andriy suggested. Unfortunately this isn't scanned by default, so I opened CXF-7728.","25/Apr/18 22:19;reta;Thanks [~deki], I will take CXF-7728 shortly, should be an easy fix.","09/Jun/18 10:37;deki;Now that CXF-7728 is implemented I've tried the usecase again. It's not possible to use our scanning functionality along with provided servers in openapi-configuration.yaml. If an openapi-configuration.yaml is present, the resourcePackages or resourceClasses must be specified there and our scanned packages are ignored. So I'm still thinking it makes sense to add servers by default. We could also try to make this depedended on cxf-spring-boot-autoconfigure. What do you think?","09/Jun/18 13:44;reta;Right, the Swagger configuration is either taken from openapi-configuration.yaml or done programmatically. However, I think we could have very simple solution which leverages our own `swagger.properties` feature. So we could use this file to set the property (*dynamicBasePath*) which could be backed by implicit instance of the OpenApiCustomizer. Additionally, I agree with your idea that we could also make it default case for Spring Boot auto-configuration and precreate OpenApiCustomizer bean instance.","28/Sep/18 09:18;nmwael;I cannot get this to work on 3.2.6 unless I do so:
{code:java}
@Configuration
public class FeaturesConfig {
    @Bean(""openApiFeature"")
    public Feature swagger2Feature() {
        OpenApiFeature result = new OpenApiFeature();
        result.setTitle(""Spring Boot + CXF + Swagger + Docker Example"");
        result.setDescription(""Spring Boot + CXF + Swagger + Docker Example description"");
        OpenApiCustomizer openApiCustomizer = new OpenApiCustomizer();
        openApiCustomizer.setDynamicBasePath(true);
        result.setCustomizer(openApiCustomizer);

        result.setPrettyPrint(true);
        return result;
    }
}
{code}
Also there is the issue claimed to be solved by -CXF-7634- 

Only way I get CXF to pickup my yaml are when its called : swagger.yaml","28/Sep/18 10:41;reta;[~nmwael] As of now, the usage of the  OpenApiCustomer is required (in most cases) for Spring Boot since the context path is not known to CXF, so this is expected behavior (the OpenAPI v3 is significantly different from the v2 in the this respect). You may provide the `servers` section by yourself or using openapi-configuration.yaml / json, openapi.yaml / json. The swagger.yaml is not recognized (at least, should not be recognized) by CXF.","28/Sep/18 11:28;nmwael;[~reta] Okay to step one

 

However as on  3.2.6  swagger.yaml is the only one recognized if I change to openapi-configuration.yaml or openapi.yaml it is not picked up.. HOWEVER the content of the yaml can be read in openapi format.. EG:
{code:java}
openapi: 3.0.1
info:
  title: Sample API
  description: Optional multiline or single-line description in [CommonMark](http://commonmark.org/help/) or HTML.
  version: 0.1.9
servers:
- url: /services


{code}
except for servers, as have been described earlyer in the thread.

 ","28/Sep/18 12:50;deki;Hmm can you please compare your code with our sample: https://github.com/apache/cxf/tree/cxf-3.2.6/distribution/src/main/release/samples/jax_rs/spring_boot

openapi.yaml is working there.

We should definitely change that Spring Boot autoconfig automatically sets OpenApiCustomizer as mentioned earlier.","28/Sep/18 13:03;reta;[~deki] I was thinking about introducing dedicated Spring Boot CXF OpenAPI Starter since not everyone is using OpenAPI, we still have people on Swagger 1.5.x.

 

[~nmwael] This is interesting, so OpenApiCustomer **will not** modify the servers if you provide it manually (like in the snippet you pasted). Could you please try this config with swagger.yaml?
{code:java}
@Bean(""openApiFeature"") public Feature swagger2Feature() { 
    OpenApiFeature result = new OpenApiFeature(); 
    result.setPrettyPrint(true); 
    return result; 
}{code}
Thank you.",28/Sep/18 13:08;deki;[~reta] The current starter works with both ways depending on the dependencies you add. Why do we need another one?,"28/Sep/18 14:12;reta;[~deki] That's is right, but the auto-configuration just scans (among many other things) for the features available, it is indeed driven by dependencies. The idea was for Spring Boot deployments to add the OpenApiCustomer by default to OpenApiFeature (if configured) since most of the time it is required for CXF. Decicated OpenApi starter is just one of the possible options, but others are also available, I created https://issues.apache.org/jira/browse/CXF-7792 to address that.","28/Sep/18 14:21;deki;Ok got your point, maybe we can find some other criteria to identify it. It makes sense to have dynamicBaseBath if no valid entries for servers are available...","28/Sep/18 14:26;reta;Yes, exactly, will be working in this direction.",,,,,,,,,,
Swagger UI is not shown in OSGi deployment,CXF-7692,13148534,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,reta,Bogatyrov,Bogatyrov,28/Mar/18 10:39,30/Mar/18 13:57,14/Mar/19 02:31,30/Mar/18 13:57,3.2.2,3.2.4,,3.2.5,,,JAX-RS,,,0,,,,,"When using CXF Swagger feature, Swagger UI is not displayed in Firefox and Chrome, instead the html page is automatically downloaded. 

The reason for this is that Content-Type header sent with Swagger UI page is _application/octet-stream ._ 

 ",,,,,,,,,,,,,,,,,,,,,28/Mar/18 10:42;Bogatyrov;fix.diff;https://issues.apache.org/jira/secure/attachment/12916594/fix.diff,,,1.0,,,,,,,,,,,,,,,,,,,2018-03-28 14:57:32.242,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Wed Mar 28 15:05:17 UTC 2018,,,,,,0|i3rvv3:,9223372036854775807,,,,,,,,"28/Mar/18 10:40;Bogatyrov;In CXF 3.2.1 content type of the response is set in [https://github.com/apache/cxf/blob/cxf-3.2.1/rt/rs/description-swagger/src/main/java/org/apache/cxf/jaxrs/swagger/Swagger2Feature.java#L608] . There, an empty _resourcePath_ param is received by _getResource()_ method. Then _resourcePath_ value is set to ""index.html"", then on line 608 and below _resourcePath_ value is analyzed and corresponding content type is set.

In CXF 3.2.2 content type is supposed to be set in a similar way in [https://github.com/apache/cxf/blob/cxf-3.2.2/rt/rs/description-swagger-ui/src/main/java/org/apache/cxf/jaxrs/swagger/SwaggerUiService.java#L75] . However, in 3.2.2 emtpy _resourcePath_ parameter value is not modified, therefore content type is not being defined there, and later it is set to default value *application/octet-stream*",28/Mar/18 10:43;Bogatyrov;Attached a possible fix,28/Mar/18 14:57;coheigea;[~reta] - it looks like this is a regression introduced by the fix for https://issues.apache.org/jira/browse/CXF-7581.,"28/Mar/18 15:05;reta;Very likely so, [~coheigea], will take a look shortly, thanks!",,,,,,,,,,,,,,,,,,,,,,,,,,
Can't add multiple instances of the same security interceptor to the same interceptor chain,CXF-7691,13148164,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,coheigea,imgx64,imgx64,27/Mar/18 08:36,03/Apr/18 10:18,14/Mar/19 02:31,27/Mar/18 13:23,3.2.4,,,3.1.16,3.2.5,,WS-* Components,,,0,,,,,"We consume a webservice that requires setting multiple {{<wss:Security>}} headers with different actors. I tried to add two {{WSS4JOutInterceptor}} instances, but only one of them actually added the header. I also tried to add two {{WSS4JStaxOutInterceptor}} instances, but that threw an exception:
{code}
java.lang.IllegalArgumentException: null is not supported as output
	at org.apache.wss4j.stax.setup.OutboundWSSec.processOutMessage(OutboundWSSec.java:218)
	at org.apache.cxf.ws.security.wss4j.WSS4JStaxOutInterceptor.handleMessage(WSS4JStaxOutInterceptor.java:169)
	at org.apache.cxf.ws.security.wss4j.WSS4JStaxOutInterceptor.handleMessage(WSS4JStaxOutInterceptor.java:61)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:308)
	at org.apache.cxf.endpoint.ClientImpl.doInvoke(ClientImpl.java:533)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:442)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:343)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:296)
	at org.apache.cxf.frontend.ClientProxy.invokeSync(ClientProxy.java:96)
	at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:139)
	at com.sun.proxy.$Proxy79.doubleIt(Unknown Source)
	at org.apache.cxf.systest.ws.action.ActionTest.testMultipleActorsStAX(ActionTest.java:710)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:538)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:760)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:460)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:206)

{code}

The only thing that worked was adding one {{WSS4JOutInterceptor}} and one {{WSS4JStaxOutInterceptor}}, but that feels like a hack.

I wrote three tests [here|https://github.com/imgx64/cxf/commit/8fe975c05089e1289eb56d700cfb47ce0df17202], one passing ({{testMultipleActorsMixed}}) and two failing ({{testMultipleActors}}, {{testMultipleActorsStAX}}) to show the issue. Unfortunately, I'm not familiar enough with the innards of CXF to fix the issue.
",,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-03-27 13:23:24.869,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Tue Apr 03 10:18:47 UTC 2018,,,,,,0|i3rtkv:,9223372036854775807,,,,,,,,"27/Mar/18 13:23;coheigea;I fixed this for the WSS4JOutInterceptor only here:

[https://github.com/apache/cxf/commit/c02442840de4e8820c4df14a8cead58d5b86d5ec]

The trick is to specify an ""Id"" for the second WSS4JOutInterceptor instance so that it gets added to the outbound interceptor chain. The streaming out interceptor is not really designed to work in this way so I'm not planning to fix it.","28/Mar/18 05:29;imgx64;Thanks for fixing this. But I think the error message when adding multiple {{WSS4JStaxOutInterceptor}} s should be more clear that this is not supported by design. The current error message ""{{java.lang.IllegalArgumentException: null is not supported as output}}"" is confusing.","03/Apr/18 10:18;coheigea;Agreed, I updated the error message.",,,,,,,,,,,,,,,,,,,,,,,,,,,
ensure don't have content-type|content-length as jms message headers when use REST on JMS Transport ,CXF-7689,13147839,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,ffang,ffang,ffang,26/Mar/18 04:30,26/Mar/18 04:32,14/Mar/19 02:31,26/Mar/18 04:32,,,,3.2.5,,,Transports,,,0,,,,,"per the JMS spec, the expected jms header should follow same syntax as JAVA identifier, so ""-"" isn't a valid character",,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,2018-03-26 04:30:41.0,,,,,,0|i3rrlj:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"AttachmentDeserializer does not respect ""org.apache.cxf.io.CachedOutputStream.Threshold"" -property",CXF-7688,13147371,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Minor,Fixed,coheigea,jiramies,jiramies,23/Mar/18 07:14,11/Apr/18 09:04,14/Mar/19 02:31,11/Apr/18 09:04,3.1.14,3.2.3,,3.1.16,3.2.5,,Core,,,0,,,,,"*Problem:*
Setting the system property ""org.apache.cxf.io.CachedOutputStream.Threshold"" to raise the threshold size of writing a temporary file to disk, does not affect AttachmentDeserializer.

AttachmentDeserializer will call AttachmentUtil.setStreamedAttachmentProperties(Message, CachedOutputStream), effectively setting the temp-file threshold to AttachmentDeserializer.THRESHOLD (100k).

*Solution:*
AttachmentDeserializer should read the system property and set its value to the message context with the key AttachmentDeserializer.ATTACHMENT_MEMORY_THRESHOLD, before calling AttachmentUtil.setStreamedAttachmentProperties(...).

*Workaround:*
Register a custom interceptor, which will write the above mentioned system property to the message context. The interceptor must be registered to a Phase that will be called before JAXBAttachmentSchemaValidationHack is called.",,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Novice,,,,,,,,,,,,9223372036854775807,,,2018-03-23 07:14:18.0,,,,,,0|i3ropz:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"AuthorizationPolicy: AuthorizationType=""Bearer"" has no effect",CXF-7687,13147131,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,coheigea,d.temme,d.temme,22/Mar/18 12:28,17/Apr/18 00:56,14/Mar/19 02:31,22/Mar/18 15:03,3.2.3,,,3.1.16,3.2.4,,Core,Transports,,0,,,,,"Adding an AuthorizationPolicy object with AuthorizationType set to ""Bearer"" to the Client HTTPConduit object has no effect.

No ""Authorization: Bearer xxx"" header is added to the cxf request.

Workaround: add the Authorization header directly:

{{client.getRequestContext().put(Message.PROTOCOL_HEADERS, authorizationHeader);}}

and authorizationHeader containing the desired header/value.

 ",,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-03-22 15:03:22.338,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Wed Mar 28 14:25:17 UTC 2018,,,,,,0|i3rn8v:,9223372036854775807,,,,,,,,"22/Mar/18 15:03;coheigea;Now fixed, you can specify ""Bearer"" for the authorization type + pass authorization header value in the AuthorizationPolicy.","28/Mar/18 14:25;d.temme;Great! Thank you. And Version 3.2.4 already published!

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,
WSS4JStaxOutInterceptor with WSSSecurityProperties doesn't work with LoggingOutInterceptor,CXF-7686,13147061,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,coheigea,imgx64,imgx64,22/Mar/18 07:01,17/Apr/18 00:57,14/Mar/19 02:31,22/Mar/18 12:16,3.2.3,,,3.1.16,3.2.4,,WS-* Components,,,0,,,,,"When using {{WSS4JStaxOutInterceptor}}'s {{WSSSecurityProperties}} constructor, {{LoggingOutInterceptor}} doesn't work. This is because in that constructor, the interceptor is not configured to run after {{LoggingOutInterceptor}}. The other two constructors don't have this problem.

Compare [this constructor|https://github.com/apache/cxf/blob/018e91228d7f14c921710f8ac203a1a0a37110fa/rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/WSS4JStaxOutInterceptor.java#L70] :
{code}
    public WSS4JStaxOutInterceptor(WSSSecurityProperties securityProperties) {
        super(securityProperties);
        WSSec.init();
        setPhase(Phase.PRE_STREAM);
        getBefore().add(StaxOutInterceptor.class.getName());

        ending = createEndingInterceptor();
    }
{code}

With [this constructor|https://github.com/apache/cxf/blob/018e91228d7f14c921710f8ac203a1a0a37110fa/rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/WSS4JStaxOutInterceptor.java#L79] :
{code}
    public WSS4JStaxOutInterceptor(Map<String, Object> props) {
        super(props);
        WSSec.init();
        setPhase(Phase.PRE_STREAM);
        getBefore().add(StaxOutInterceptor.class.getName());
        getAfter().add(""org.apache.cxf.interceptor.LoggingOutInterceptor"");
        getAfter().add(""org.apache.cxf.ext.logging.LoggingOutInterceptor"");
        ending = createEndingInterceptor();
    }
{code}",,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,2018-03-22 07:01:53.0,,,,,,0|i3rmtb:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Base64 encoding in AttachmentSerializer does not create correct output for large attachments,CXF-7684,13146871,Bug,Closed,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,dkulp,uwe_r,uwe_r,21/Mar/18 15:10,17/Apr/18 00:56,14/Mar/19 02:31,21/Mar/18 19:01,3.0.16,,,3.1.16,3.2.4,,Core,,,0,,,,,"As client, I want to send a SOAP message with base64-encoded attachments. I have activated base64 encoding for attachments by adding an out interceptor, which sets the message parameter org.apache.cxf.message.Message.CONTENT_TRANSFER_ENCODING to ""base64"", since it is supported by the CXF-core's AttachmentSerializer.

For small attachments, the encoding works. But when I have a large attachment, the base64-encoded data is, I think, not valid:

As implemented in AttachmentSerializer's method encodeBase64(), the encoding of the input data is done in blocks of maximum 262144 bytes. Since 262144 divided by 3 has remainder 1, each of the blocks containing the full 262144 bytes will generate two '=' padding characters at the end of the block output.

So for large attachments with > 262144 bytes, the created base64 data stream contains padding characters within the stream, and not only at the end. I did not find any hint, that this is allowed.

Especially the server implementation, which I use, interprets the padding characters also as end of stream, so that attachments > 262144 do not work in that case.

An fix for this issue would be to use a buffer size, which is divisible by three without remainder.

I still use CXF 3.0.16, since the client have to work with Java 1.6. But 3.1.x and 3.2.x use the same method, so the same issue should apply there too.",,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,2018-03-21 15:10:11.0,,,,,,0|i3rlnr:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Codegen fails when using JDK10 with maven and cxf-plugin,CXF-7683,13146864,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,ffang,famod,famod,21/Mar/18 14:46,28/Mar/18 06:44,14/Mar/19 02:31,28/Mar/18 06:44,3.2.3,,,3.2.5,,,Tooling,,,1,,,,,"The fix from CXF-7517 only works for JDK9 and not for the newly released JDK10 because [the code only checks for 9, not 9+|https://github.com/apache/cxf/commit/d529ecd2252046c0e55fbe7b5e6a24c7b0d07301#diff-251b0327fb2172db1d74135de8666edcR206].","Apache Maven 3.5.3 (3383c37e1f9e9b3bc3df5050c29c8aff9f295297; 2018-02-24T20:49:05+01:00)
Maven home: C:\Develop\_tools\apache-maven-3.5.3\bin\..
Java version: 10, vendor: Oracle Corporation
Java home: C:\Develop\_tools\jdk-10.0.0
Default locale: de_DE, platform encoding: Cp1252
OS name: ""windows 10"", version: ""10.0"", arch: ""amd64"", family: ""windows""",,,,,,,,,,,,,,,,,,CXF-7517,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,2018-03-21 14:46:19.0,,,,,,0|i3rlm7:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
context.get(MessageContext.HTTP_REQUEST_HEADERS) always returns null for client,CXF-7682,13146500,Bug,Resolved,CXF,CXF,software,dkulp,,http://cxf.apache.org,Major,Fixed,,jpraet,jpraet,20/Mar/18 10:12,02/Jun/18 05:26,14/Mar/19 02:31,02/Jun/18 05:26,,,,3.1.16,3.2.5,,JAX-WS Runtime,,,0,,,,,"I have a client-side LogicalHandler that adds some HTTP headers and am noticing it causes the existing SOAPAction HTTP header (already added automatically by the JAX-WS runtime) to be removed.

My handler code looks like this:
{code:java}
public boolean handleMessage(LogicalMessageContext context) {
  Boolean outbound = (Boolean) context.get(MessageContext.MESSAGE_OUTBOUND_PROPERTY);
  if (outbound) {
    Map<String, List<String>> headers =
        (Map<String, List<String>>) context.get(MessageContext.HTTP_REQUEST_HEADERS);
    if (headers == null) {
      headers = new HashMap<String, List<String>>();
      context.put(MessageContext.HTTP_REQUEST_HEADERS, headers);
    }
    for (Map.Entry<String, String> entry : Tracer.getEntries().entrySet()) {
      headers.put(entry.getKey(), Collections.singletonList(entry.getValue()));
    }
  }
  return true;
}
{code}
I had a quick look at the code and noticed the [LogicalMessageContextImpl#get(Object) |https://github.com/apache/cxf/blob/a36af6323505211479c875fb9923cc6dcbc6ac95/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/handler/logical/LogicalMessageContextImpl.java#L53] always returns null on the client side (isRequestor() = true).

So my handler will create a new header map and put it on the context, which is internally mapped to key ""org.apache.cxf.message.Message.PROTOCOL_HEADERS"" [here|https://github.com/apache/cxf/blob/master/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/context/WrappedMessageContext.java#L462].",,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-03-22 06:05:54.623,,,no_permission,,Unknown,,,,,,,,,,,,9223372036854775807,,,Thu Apr 26 15:53:39 UTC 2018,,,,,,0|i3rjdj:,9223372036854775807,,,,,,,,"22/Mar/18 06:05;githubbot;sanaik22 opened a new pull request #394: CXF-7682: context.get(MessageContext.HTTP_REQUEST_HEADERS) always ret…
URL: https://github.com/apache/cxf/pull/394
 
 
   …urns null for client

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","29/Mar/18 09:37;githubbot;jimma commented on issue #394: CXF-7682: context.get(MessageContext.HTTP_REQUEST_HEADERS) always ret…
URL: https://github.com/apache/cxf/pull/394#issuecomment-377180533
 
 
   @sanaik22 Can you please add a test for this change ? 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","11/Apr/18 12:23;githubbot;TomasHofman commented on issue #394: CXF-7682: context.get(MessageContext.HTTP_REQUEST_HEADERS) always ret…
URL: https://github.com/apache/cxf/pull/394#issuecomment-380432747
 
 
   retest this please

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","11/Apr/18 12:57;githubbot;TomasHofman opened a new pull request #403: [CXF-7682] context.get(MessageContext.HTTP_REQUEST_HEADERS) always re…
URL: https://github.com/apache/cxf/pull/403
 
 
   …turns null for client
   
   https://issues.apache.org/jira/browse/CXF-7682
   7.1 JBEAP: https://issues.jboss.org/browse/JBEAP-14460
   Upstream PR: https://github.com/apache/cxf/pull/394

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","11/Apr/18 14:57;githubbot;asoldano commented on issue #394: CXF-7682: context.get(MessageContext.HTTP_REQUEST_HEADERS) always ret…
URL: https://github.com/apache/cxf/pull/394#issuecomment-380483106
 
 
   @TomasHofman I've triggered another run, let's see how it goes..

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","11/Apr/18 15:38;githubbot;dkulp commented on issue #394: CXF-7682: context.get(MessageContext.HTTP_REQUEST_HEADERS) always ret…
URL: https://github.com/apache/cxf/pull/394#issuecomment-380497841
 
 
   @asoldano : If this clears, I'll merge it, but you may want to do a TCK run with the change prior to our next CXF release.  For some reason, I seem to remember some weird context return value issues that the TCK hit for the various handler types.   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","11/Apr/18 15:55;githubbot;asoldano commented on issue #394: CXF-7682: context.get(MessageContext.HTTP_REQUEST_HEADERS) always ret…
URL: https://github.com/apache/cxf/pull/394#issuecomment-380503815
 
 
   @dkulp yes, definitely (@jimma FYI)

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","11/Apr/18 19:41;githubbot;dkulp closed pull request #403: [CXF-7682] context.get(MessageContext.HTTP_REQUEST_HEADERS) always re…
URL: https://github.com/apache/cxf/pull/403
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/handler/logical/LogicalMessageContextImpl.java b/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/handler/logical/LogicalMessageContextImpl.java
index dc5da549c25..7d4808d34f0 100644
--- a/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/handler/logical/LogicalMessageContextImpl.java
+++ b/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/handler/logical/LogicalMessageContextImpl.java
@@ -47,10 +47,10 @@ public Object get(Object key) {
             if (((Map<?, ?>)o).isEmpty()) {
                 return null;
             }
-            if (!isResponse() && MessageContext.HTTP_RESPONSE_HEADERS.equals(key)) {
+            if (!isResponse() && isOutbound() && MessageContext.HTTP_RESPONSE_HEADERS.equals(key)) {
                 return null;
             }
-            if (isRequestor() && MessageContext.HTTP_REQUEST_HEADERS.equals(key)) {
+            if (isRequestor() && !isOutbound() && MessageContext.HTTP_REQUEST_HEADERS.equals(key)) {
                 return null;
             }
         }
diff --git a/rt/frontend/jaxws/src/test/java/org/apache/cxf/jaxws/JaxWsClientTest.java b/rt/frontend/jaxws/src/test/java/org/apache/cxf/jaxws/JaxWsClientTest.java
index e9b68781da8..2c4a8aba8d7 100644
--- a/rt/frontend/jaxws/src/test/java/org/apache/cxf/jaxws/JaxWsClientTest.java
+++ b/rt/frontend/jaxws/src/test/java/org/apache/cxf/jaxws/JaxWsClientTest.java
@@ -22,8 +22,12 @@
 import java.lang.reflect.InvocationHandler;
 import java.lang.reflect.Proxy;
 import java.net.URL;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.List;
 import java.util.Map;
 import java.util.ResourceBundle;
+import java.util.Set;
 import java.util.concurrent.atomic.AtomicBoolean;
 
 import javax.xml.namespace.QName;
@@ -31,6 +35,12 @@
 import javax.xml.ws.BindingProvider;
 import javax.xml.ws.Dispatch;
 import javax.xml.ws.WebServiceException;
+import javax.xml.ws.handler.Handler;
+import javax.xml.ws.handler.LogicalHandler;
+import javax.xml.ws.handler.LogicalMessageContext;
+import javax.xml.ws.handler.MessageContext;
+import javax.xml.ws.handler.soap.SOAPHandler;
+import javax.xml.ws.handler.soap.SOAPMessageContext;
 
 import org.apache.cxf.endpoint.Client;
 import org.apache.cxf.endpoint.ClientImpl;
@@ -65,6 +75,7 @@
                     ""SoapPort"");
     private final String address = ""http://localhost:9000/SoapContext/SoapPort"";
     private Destination d;
+    private Map<String, List<String>> headers = new HashMap<>();
 
     @Before
     public void setUp() throws Exception {
@@ -320,6 +331,89 @@ public void testClientProxyFactory() {
         assertEquals(""jack"", ((BindingProvider)greeter3).getRequestContext().get(""test""));
     }
 
+    @Test
+    public void testLogicalHandler() {
+        URL url = getClass().getResource(""/wsdl/hello_world.wsdl"");
+        javax.xml.ws.Service s = javax.xml.ws.Service
+            .create(url, serviceName);
+        Greeter greeter = s.getPort(portName, Greeter.class);
+        d.setMessageObserver(new MessageReplayObserver(""sayHiResponse.xml""));
+
+        List<Handler> chain = ((BindingProvider)greeter).getBinding().getHandlerChain();
+        chain.add(new LogicalHandler<LogicalMessageContext>() {
+            public void close(MessageContext arg0) {
+            }
+
+            public boolean handleFault(LogicalMessageContext arg0) {
+                return true;
+            }
+
+            public boolean handleMessage(LogicalMessageContext context) {
+
+                Boolean outbound = (Boolean) context.get(MessageContext.MESSAGE_OUTBOUND_PROPERTY);
+                if (outbound) {
+                    headers = (Map<String, List<String>>) context.get(MessageContext.HTTP_REQUEST_HEADERS);
+                    if (headers == null) {
+                        headers = new HashMap<String, List<String>>();
+                        context.put(MessageContext.HTTP_REQUEST_HEADERS, headers);
+                    }
+                    headers.put(""My-Custom-Header"", Collections.singletonList(""value""));
+                }
+                return true;
+            }
+        });
+        ((BindingProvider)greeter).getBinding().setHandlerChain(chain);
+
+        String response = greeter.sayHi();
+        assertNotNull(response);
+        assertTrue(""custom header should be present"", headers.containsKey(""My-Custom-Header""));
+        assertTrue(""existing SOAPAction header should not be removed"", headers.containsKey(""SOAPAction""));
+    }
+
+    @Test
+    public void testSoapHandler() {
+        URL url = getClass().getResource(""/wsdl/hello_world.wsdl"");
+        javax.xml.ws.Service s = javax.xml.ws.Service
+            .create(url, serviceName);
+        Greeter greeter = s.getPort(portName, Greeter.class);
+        d.setMessageObserver(new MessageReplayObserver(""sayHiResponse.xml""));
+
+        List<Handler> chain = ((BindingProvider)greeter).getBinding().getHandlerChain();
+        chain.add(new SOAPHandler<SOAPMessageContext>() {
+
+                public boolean handleMessage(SOAPMessageContext context) {
+
+                    Boolean outbound = (Boolean) context.get(MessageContext.MESSAGE_OUTBOUND_PROPERTY);
+                    if (outbound) {
+                        headers = (Map<String, List<String>>) context.get(MessageContext.HTTP_REQUEST_HEADERS);
+                        if (headers == null) {
+                            headers = new HashMap<String, List<String>>();
+                            context.put(MessageContext.HTTP_REQUEST_HEADERS, headers);
+                        }
+                        headers.put(""My-Custom-Header"", Collections.singletonList(""value""));
+                    }
+                    return true;
+                }
+
+                public boolean handleFault(SOAPMessageContext smc) {
+                    return true;
+                }
+
+                public Set<QName> getHeaders() {
+                    return null;
+                }
+
+                public void close(MessageContext messageContext) {
+                }
+        });
+        ((BindingProvider)greeter).getBinding().setHandlerChain(chain);
+
+        String response = greeter.sayHi();
+        assertNotNull(response);
+        assertTrue(""custom header should be present"", headers.containsKey(""My-Custom-Header""));
+        assertTrue(""existing SOAPAction header should not be removed"", headers.containsKey(""SOAPAction""));
+
+    }
 
     public static class FaultThrower extends AbstractPhaseInterceptor<Message> {
 


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","26/Apr/18 15:53;githubbot;dkulp commented on issue #394: CXF-7682: context.get(MessageContext.HTTP_REQUEST_HEADERS) always ret…
URL: https://github.com/apache/cxf/pull/394#issuecomment-384693086
 
 
   Merging, lgtm.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","26/Apr/18 15:53;githubbot;dkulp closed pull request #394: CXF-7682: context.get(MessageContext.HTTP_REQUEST_HEADERS) always ret…
URL: https://github.com/apache/cxf/pull/394
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/handler/logical/LogicalMessageContextImpl.java b/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/handler/logical/LogicalMessageContextImpl.java
index 5fd99dcda3b..f3722f40598 100644
--- a/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/handler/logical/LogicalMessageContextImpl.java
+++ b/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/handler/logical/LogicalMessageContextImpl.java
@@ -47,10 +47,10 @@ public Object get(Object key) {
             if (((Map<?, ?>)o).isEmpty()) {
                 return null;
             }
-            if (!isResponse() && MessageContext.HTTP_RESPONSE_HEADERS.equals(key)) {
+            if (!isResponse() && isOutbound() && MessageContext.HTTP_RESPONSE_HEADERS.equals(key)) {
                 return null;
             }
-            if (isRequestor() && MessageContext.HTTP_REQUEST_HEADERS.equals(key)) {
+            if (isRequestor() && !isOutbound() && MessageContext.HTTP_REQUEST_HEADERS.equals(key)) {
                 return null;
             }
         }
diff --git a/rt/frontend/jaxws/src/test/java/org/apache/cxf/jaxws/JaxWsClientTest.java b/rt/frontend/jaxws/src/test/java/org/apache/cxf/jaxws/JaxWsClientTest.java
index d8cab8dfb8c..62bc3ce6e00 100644
--- a/rt/frontend/jaxws/src/test/java/org/apache/cxf/jaxws/JaxWsClientTest.java
+++ b/rt/frontend/jaxws/src/test/java/org/apache/cxf/jaxws/JaxWsClientTest.java
@@ -22,8 +22,12 @@
 import java.lang.reflect.InvocationHandler;
 import java.lang.reflect.Proxy;
 import java.net.URL;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.List;
 import java.util.Map;
 import java.util.ResourceBundle;
+import java.util.Set;
 import java.util.concurrent.atomic.AtomicBoolean;
 
 import javax.xml.namespace.QName;
@@ -31,6 +35,12 @@
 import javax.xml.ws.BindingProvider;
 import javax.xml.ws.Dispatch;
 import javax.xml.ws.WebServiceException;
+import javax.xml.ws.handler.Handler;
+import javax.xml.ws.handler.LogicalHandler;
+import javax.xml.ws.handler.LogicalMessageContext;
+import javax.xml.ws.handler.MessageContext;
+import javax.xml.ws.handler.soap.SOAPHandler;
+import javax.xml.ws.handler.soap.SOAPMessageContext;
 
 import org.apache.cxf.endpoint.Client;
 import org.apache.cxf.endpoint.ClientImpl;
@@ -63,6 +73,7 @@
                     ""SoapPort"");
     private final String address = ""http://localhost:9000/SoapContext/SoapPort"";
     private Destination d;
+    private Map<String, List<String>> headers = new HashMap<>();
 
     @Before
     public void setUp() throws Exception {
@@ -319,6 +330,89 @@ public void testClientProxyFactory() {
         assertEquals(""jack"", ((BindingProvider)greeter3).getRequestContext().get(""test""));
     }
 
+    @Test
+    public void testLogicalHandler() {
+        URL url = getClass().getResource(""/wsdl/hello_world.wsdl"");
+        javax.xml.ws.Service s = javax.xml.ws.Service
+            .create(url, serviceName);
+        Greeter greeter = s.getPort(portName, Greeter.class);
+        d.setMessageObserver(new MessageReplayObserver(""sayHiResponse.xml""));
+
+        List<Handler> chain = ((BindingProvider)greeter).getBinding().getHandlerChain();
+        chain.add(new LogicalHandler<LogicalMessageContext>() {
+            public void close(MessageContext arg0) {
+            }
+
+            public boolean handleFault(LogicalMessageContext arg0) {
+                return true;
+            }
+
+            public boolean handleMessage(LogicalMessageContext context) {
+
+                Boolean outbound = (Boolean) context.get(MessageContext.MESSAGE_OUTBOUND_PROPERTY);
+                if (outbound) {
+                    headers = (Map<String, List<String>>) context.get(MessageContext.HTTP_REQUEST_HEADERS);
+                    if (headers == null) {
+                        headers = new HashMap<String, List<String>>();
+                        context.put(MessageContext.HTTP_REQUEST_HEADERS, headers);
+                    }
+                    headers.put(""My-Custom-Header"", Collections.singletonList(""value""));
+                }
+                return true;
+            }
+        });
+        ((BindingProvider)greeter).getBinding().setHandlerChain(chain);
+
+        String response = greeter.sayHi();
+        assertNotNull(response);
+        assertTrue(""custom header should be present"", headers.containsKey(""My-Custom-Header""));
+        assertTrue(""existing SOAPAction header should not be removed"", headers.containsKey(""SOAPAction""));
+    }
+
+    @Test
+    public void testSoapHandler() {
+        URL url = getClass().getResource(""/wsdl/hello_world.wsdl"");
+        javax.xml.ws.Service s = javax.xml.ws.Service
+            .create(url, serviceName);
+        Greeter greeter = s.getPort(portName, Greeter.class);
+        d.setMessageObserver(new MessageReplayObserver(""sayHiResponse.xml""));
+
+        List<Handler> chain = ((BindingProvider)greeter).getBinding().getHandlerChain();
+        chain.add(new SOAPHandler<SOAPMessageContext>() {
+
+                public boolean handleMessage(SOAPMessageContext context) {
+
+                    Boolean outbound = (Boolean) context.get(MessageContext.MESSAGE_OUTBOUND_PROPERTY);
+                    if (outbound) {
+                        headers = (Map<String, List<String>>) context.get(MessageContext.HTTP_REQUEST_HEADERS);
+                        if (headers == null) {
+                            headers = new HashMap<String, List<String>>();
+                            context.put(MessageContext.HTTP_REQUEST_HEADERS, headers);
+                        }
+                        headers.put(""My-Custom-Header"", Collections.singletonList(""value""));
+                    }
+                    return true;
+                }
+
+                public boolean handleFault(SOAPMessageContext smc) {
+                    return true;
+                }
+
+                public Set<QName> getHeaders() {
+                    return null;
+                }
+
+                public void close(MessageContext messageContext) {
+                }
+        });
+        ((BindingProvider)greeter).getBinding().setHandlerChain(chain);
+
+        String response = greeter.sayHi();
+        assertNotNull(response);
+        assertTrue(""custom header should be present"", headers.containsKey(""My-Custom-Header""));
+        assertTrue(""existing SOAPAction header should not be removed"", headers.containsKey(""SOAPAction""));
+
+    }
 
     public static class FaultThrower extends AbstractPhaseInterceptor<Message> {
 


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","26/Apr/18 15:53;githubbot;sanaik22 opened a new pull request #394: CXF-7682: context.get(MessageContext.HTTP_REQUEST_HEADERS) always ret…
URL: https://github.com/apache/cxf/pull/394
 
 
   …urns null for client

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
","26/Apr/18 15:53;githubbot;dkulp closed pull request #394: CXF-7682: context.get(MessageContext.HTTP_REQUEST_HEADERS) always ret…
URL: https://github.com/apache/cxf/pull/394
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/handler/logical/LogicalMessageContextImpl.java b/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/handler/logical/LogicalMessageContextImpl.java
index 5fd99dcda3b..f3722f40598 100644
--- a/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/handler/logical/LogicalMessageContextImpl.java
+++ b/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/handler/logical/LogicalMessageContextImpl.java
@@ -47,10 +47,10 @@ public Object get(Object key) {
             if (((Map<?, ?>)o).isEmpty()) {
                 return null;
             }
-            if (!isResponse() && MessageContext.HTTP_RESPONSE_HEADERS.equals(key)) {
+            if (!isResponse() && isOutbound() && MessageContext.HTTP_RESPONSE_HEADERS.equals(key)) {
                 return null;
             }
-            if (isRequestor() && MessageContext.HTTP_REQUEST_HEADERS.equals(key)) {
+            if (isRequestor() && !isOutbound() && MessageContext.HTTP_REQUEST_HEADERS.equals(key)) {
                 return null;
             }
         }
diff --git a/rt/frontend/jaxws/src/test/java/org/apache/cxf/jaxws/JaxWsClientTest.java b/rt/frontend/jaxws/src/test/java/org/apache/cxf/jaxws/JaxWsClientTest.java
index d8cab8dfb8c..62bc3ce6e00 100644
--- a/rt/frontend/jaxws/src/test/java/org/apache/cxf/jaxws/JaxWsClientTest.java
+++ b/rt/frontend/jaxws/src/test/java/org/apache/cxf/jaxws/JaxWsClientTest.java
@@ -22,8 +22,12 @@
 import java.lang.reflect.InvocationHandler;
 import java.lang.reflect.Proxy;
 import java.net.URL;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.List;
 import java.util.Map;
 import java.util.ResourceBundle;
+import java.util.Set;
 import java.util.concurrent.atomic.AtomicBoolean;
 
 import javax.xml.namespace.QName;
@@ -31,6 +35,12 @@
 import javax.xml.ws.BindingProvider;
 import javax.xml.ws.Dispatch;
 import javax.xml.ws.WebServiceException;
+import javax.xml.ws.handler.Handler;
+import javax.xml.ws.handler.LogicalHandler;
+import javax.xml.ws.handler.LogicalMessageContext;
+import javax.xml.ws.handler.MessageContext;
+import javax.xml.ws.handler.soap.SOAPHandler;
+import javax.xml.ws.handler.soap.SOAPMessageContext;
 
 import org.apache.cxf.endpoint.Client;
 import org.apache.cxf.endpoint.ClientImpl;
@@ -63,6 +73,7 @@
                     ""SoapPort"");
     private final String address = ""http://localhost:9000/SoapContext/SoapPort"";
     private Destination d;
+    private Map<String, List<String>> headers = new HashMap<>();
 
     @Before
     public void setUp() throws Exception {
@@ -319,6 +330,89 @@ public void testClientProxyFactory() {
         assertEquals(""jack"", ((BindingProvider)greeter3).getRequestContext().get(""test""));
     }
 
+    @Test
+    public void testLogicalHandler() {
+        URL url = getClass().getResource(""/wsdl/hello_world.wsdl"");
+        javax.xml.ws.Service s = javax.xml.ws.Service
+            .create(url, serviceName);
+        Greeter greeter = s.getPort(portName, Greeter.class);
+        d.setMessageObserver(new MessageReplayObserver(""sayHiResponse.xml""));
+
+        List<Handler> chain = ((BindingProvider)greeter).getBinding().getHandlerChain();
+        chain.add(new LogicalHandler<LogicalMessageContext>() {
+            public void close(MessageContext arg0) {
+            }
+
+            public boolean handleFault(LogicalMessageContext arg0) {
+                return true;
+            }
+
+            public boolean handleMessage(LogicalMessageContext context) {
+
+                Boolean outbound = (Boolean) context.get(MessageContext.MESSAGE_OUTBOUND_PROPERTY);
+                if (outbound) {
+                    headers = (Map<String, List<String>>) context.get(MessageContext.HTTP_REQUEST_HEADERS);
+                    if (headers == null) {
+                        headers = new HashMap<String, List<String>>();
+                        context.put(MessageContext.HTTP_REQUEST_HEADERS, headers);
+                    }
+                    headers.put(""My-Custom-Header"", Collections.singletonList(""value""));
+                }
+                return true;
+            }
+        });
+        ((BindingProvider)greeter).getBinding().setHandlerChain(chain);
+
+        String response = greeter.sayHi();
+        assertNotNull(response);
+        assertTrue(""custom header should be present"", headers.containsKey(""My-Custom-Header""));
+        assertTrue(""existing SOAPAction header should not be removed"", headers.containsKey(""SOAPAction""));
+    }
+
+    @Test
+    public void testSoapHandler() {
+        URL url = getClass().getResource(""/wsdl/hello_world.wsdl"");
+        javax.xml.ws.Service s = javax.xml.ws.Service
+            .create(url, serviceName);
+        Greeter greeter = s.getPort(portName, Greeter.class);
+        d.setMessageObserver(new MessageReplayObserver(""sayHiResponse.xml""));
+
+        List<Handler> chain = ((BindingProvider)greeter).getBinding().getHandlerChain();
+        chain.add(new SOAPHandler<SOAPMessageContext>() {
+
+                public boolean handleMessage(SOAPMessageContext context) {
+
+                    Boolean outbound = (Boolean) context.get(MessageContext.MESSAGE_OUTBOUND_PROPERTY);
+                    if (outbound) {
+                        headers = (Map<String, List<String>>) context.get(MessageContext.HTTP_REQUEST_HEADERS);
+                        if (headers == null) {
+                            headers = new HashMap<String, List<String>>();
+                            context.put(MessageContext.HTTP_REQUEST_HEADERS, headers);
+                        }
+                        headers.put(""My-Custom-Header"", Collections.singletonList(""value""));
+                    }
+                    return true;
+                }
+
+                public boolean handleFault(SOAPMessageContext smc) {
+                    return true;
+                }
+
+                public Set<QName> getHeaders() {
+                    return null;
+                }
+
+                public void close(MessageContext messageContext) {
+                }
+        });
+        ((BindingProvider)greeter).getBinding().setHandlerChain(chain);
+
+        String response = greeter.sayHi();
+        assertNotNull(response);
+        assertTrue(""custom header should be present"", headers.containsKey(""My-Custom-Header""));
+        assertTrue(""existing SOAPAction header should not be removed"", headers.containsKey(""SOAPAction""));
+
+    }
 
     public static class FaultThrower extends AbstractPhaseInterceptor<Message> {
 


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
",,,,,,,,,,,,,,,,,,
